
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f3 77 00 00       	call   c0007813 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 f4 fc 01 c0       	mov    eax,0xc001fcf4
c0000025:	3d f4 fc 01 c0       	cmp    eax,0xc001fcf4
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 f4 fc 01 c0       	push   0xc001fcf4
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 f4 fc 01 c0       	mov    eax,0xc001fcf4
c0000051:	2d f4 fc 01 c0       	sub    eax,0xc001fcf4
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 f4 fc 01 c0       	push   0xc001fcf4
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d 20 ff 01 c0 00 	cmp    BYTE PTR ds:0xc001ff20,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb c8 ce 01 c0       	mov    ebx,0xc001cec8
c0000097:	81 eb c4 ce 01 c0    	sub    ebx,0xc001cec4
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be c4 ce 01 c0       	mov    esi,0xc001cec4
c00000a6:	a1 24 ff 01 c0       	mov    eax,ds:0xc001ff24
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 24 ff 01 c0       	mov    ds:0xc001ff24,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 24 ff 01 c0       	mov    eax,ds:0xc001ff24
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 f4 fc 01 c0       	push   0xc001fcf4
c00000d8:	e8 23 ff ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 20 ff 01 c0 01 	mov    BYTE PTR ds:0xc001ff20,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 28 ff 01 c0       	push   0xc001ff28
c0000108:	68 f4 fc 01 c0       	push   0xc001fcf4
c000010d:	e8 ee fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000297:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000029a:	0f 20 d9             	mov    ecx,cr3
c000029d:	39 c8                	cmp    eax,ecx
c000029f:	74 03                	je     c00002a4 <commonThreadSwitch.doneVAS>
c00002a1:	0f 22 d8             	mov    cr3,eax

c00002a4 <commonThreadSwitch.doneVAS>:
c00002a4:	85 d2                	test   edx,edx
c00002a6:	75 11                	jne    c00002b9 <commonThreadSwitch.firstTime>
c00002a8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002ab:	e8 6c 2d 01 00       	call   c001301c <changeTSS>
c00002b0:	5d                   	pop    ebp
c00002b1:	5f                   	pop    edi
c00002b2:	5e                   	pop    esi
c00002b3:	5a                   	pop    edx
c00002b4:	59                   	pop    ecx
c00002b5:	5b                   	pop    ebx
c00002b6:	58                   	pop    eax
c00002b7:	9d                   	popf   
c00002b8:	c3                   	ret    

c00002b9 <commonThreadSwitch.firstTime>:
c00002b9:	fa                   	cli    
c00002ba:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002bd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002c2:	60                   	pusha  
c00002c3:	e8 10 a0 00 00       	call   c000a2d8 <mapVASFirstTime>
c00002c8:	61                   	popa   
c00002c9:	89 c4                	mov    esp,eax
c00002cb:	56                   	push   esi
c00002cc:	52                   	push   edx
c00002cd:	e8 4a 2d 01 00       	call   c001301c <changeTSS>
c00002d2:	5a                   	pop    edx
c00002d3:	5e                   	pop    esi
c00002d4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002db:	5d                   	pop    ebp
c00002dc:	5f                   	pop    edi
c00002dd:	5e                   	pop    esi
c00002de:	59                   	pop    ecx
c00002df:	59                   	pop    ecx
c00002e0:	5b                   	pop    ebx
c00002e1:	58                   	pop    eax
c00002e2:	81 c4 04 00 00 00    	add    esp,0x4
c00002e8:	6a 02                	push   0x2
c00002ea:	9d                   	popf   
c00002eb:	52                   	push   edx
c00002ec:	e8 9b 33 01 00       	call   c001368c <taskStartupFunction>
c00002f1:	5a                   	pop    edx
c00002f2:	50                   	push   eax
c00002f3:	ff d2                	call   edx
c00002f5:	e8 ea 39 01 00       	call   c0013ce4 <taskReturned>
c00002fa:	e9 fb ff ff ff       	jmp    c00002fa <commonThreadSwitch.firstTime+0x41>

c00002ff <asmQuickAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmQuickAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 02                	jb     c000030e <asmQuickAcquireLock.spin_with_pause>
c000030c:	fa                   	cli    
c000030d:	c3                   	ret    

c000030e <asmQuickAcquireLock.spin_with_pause>:
c000030e:	f3 90                	pause  
c0000310:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000316:	75 f6                	jne    c000030e <asmQuickAcquireLock.spin_with_pause>
c0000318:	e9 e8 ff ff ff       	jmp    c0000305 <asmQuickAcquireLock.retry>

c000031d <asmQuickReleaseLock>:
c000031d:	55                   	push   ebp
c000031e:	89 e5                	mov    ebp,esp
c0000320:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000327:	5d                   	pop    ebp
c0000328:	c3                   	ret    

c0000329 <asmAcquireLock>:
c0000329:	55                   	push   ebp
c000032a:	89 e5                	mov    ebp,esp
c000032c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032f <asmAcquireLock.retry>:
c000032f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000334:	72 05                	jb     c000033b <asmAcquireLock.spin_with_pause>
c0000336:	9c                   	pushf  
c0000337:	58                   	pop    eax
c0000338:	fa                   	cli    
c0000339:	5d                   	pop    ebp
c000033a:	c3                   	ret    

c000033b <asmAcquireLock.spin_with_pause>:
c000033b:	f3 90                	pause  
c000033d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000343:	75 f6                	jne    c000033b <asmAcquireLock.spin_with_pause>
c0000345:	e9 e5 ff ff ff       	jmp    c000032f <asmAcquireLock.retry>

c000034a <asmReleaseLock>:
c000034a:	55                   	push   ebp
c000034b:	89 e5                	mov    ebp,esp
c000034d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000350:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000353:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000359:	52                   	push   edx
c000035a:	9d                   	popf   
c000035b:	5d                   	pop    ebp
c000035c:	c3                   	ret    

c000035d <loadGDT>:
c000035d:	0f 01 15 20 0d 02 c0 	lgdtd  ds:0xc0020d20
c0000364:	66 b8 10 00          	mov    ax,0x10
c0000368:	66 8e d8             	mov    ds,ax
c000036b:	66 8e c0             	mov    es,ax
c000036e:	66 8e e0             	mov    fs,ax
c0000371:	66 8e e8             	mov    gs,ax
c0000374:	66 8e d0             	mov    ss,ax
c0000377:	e9 00 00 00 00       	jmp    c000037c <flush2>

c000037c <flush2>:
c000037c:	c3                   	ret    

c000037d <memcpy>:
c000037d:	e9 ac fd 00 00       	jmp    c001012e <__not_memcpy>
c0000382:	66 90                	xchg   ax,ax
c0000384:	66 90                	xchg   ax,ax
c0000386:	66 90                	xchg   ax,ax
c0000388:	66 90                	xchg   ax,ax
c000038a:	66 90                	xchg   ax,ax
c000038c:	66 90                	xchg   ax,ax
c000038e:	66 90                	xchg   ax,ax

c0000390 <memcmp>:
c0000390:	56                   	push   esi
c0000391:	53                   	push   ebx
c0000392:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000396:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000039a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000039e:	85 f6                	test   esi,esi
c00003a0:	74 1c                	je     c00003be <memcmp+0x2e>
c00003a2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003a6:	38 cb                	cmp    bl,cl
c00003a8:	75 26                	jne    c00003d0 <memcmp+0x40>
c00003aa:	01 c6                	add    esi,eax
c00003ac:	eb 0a                	jmp    c00003b8 <memcmp+0x28>
c00003ae:	66 90                	xchg   ax,ax
c00003b0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003b2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003b4:	38 d9                	cmp    cl,bl
c00003b6:	75 18                	jne    c00003d0 <memcmp+0x40>
c00003b8:	40                   	inc    eax
c00003b9:	42                   	inc    edx
c00003ba:	39 f0                	cmp    eax,esi
c00003bc:	75 f2                	jne    c00003b0 <memcmp+0x20>
c00003be:	31 c0                	xor    eax,eax
c00003c0:	5b                   	pop    ebx
c00003c1:	5e                   	pop    esi
c00003c2:	c3                   	ret    
c00003c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003d0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003d6:	31 c0                	xor    eax,eax
c00003d8:	88 c8                	mov    al,cl
c00003da:	29 d8                	sub    eax,ebx
c00003dc:	5b                   	pop    ebx
c00003dd:	5e                   	pop    esi
c00003de:	c3                   	ret    
c00003df:	90                   	nop

c00003e0 <memmove>:
c00003e0:	55                   	push   ebp
c00003e1:	57                   	push   edi
c00003e2:	56                   	push   esi
c00003e3:	53                   	push   ebx
c00003e4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003e8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003f0:	39 dd                	cmp    ebp,ebx
c00003f2:	0f 83 98 00 00 00    	jae    c0000490 <memmove+0xb0>
c00003f8:	85 d2                	test   edx,edx
c00003fa:	0f 84 7c 00 00 00    	je     c000047c <memmove+0x9c>
c0000400:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000403:	8d 75 04             	lea    esi,[ebp+0x4]
c0000406:	39 cd                	cmp    ebp,ecx
c0000408:	0f 93 c1             	setae  cl
c000040b:	39 f3                	cmp    ebx,esi
c000040d:	0f 93 c0             	setae  al
c0000410:	89 c6                	mov    esi,eax
c0000412:	09 ce                	or     esi,ecx
c0000414:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000417:	89 f0                	mov    eax,esi
c0000419:	83 f9 0c             	cmp    ecx,0xc
c000041c:	0f 97 c1             	seta   cl
c000041f:	84 c8                	test   al,cl
c0000421:	0f 84 89 00 00 00    	je     c00004b0 <memmove+0xd0>
c0000427:	89 e9                	mov    ecx,ebp
c0000429:	09 d9                	or     ecx,ebx
c000042b:	83 e1 03             	and    ecx,0x3
c000042e:	0f 85 7c 00 00 00    	jne    c00004b0 <memmove+0xd0>
c0000434:	89 d7                	mov    edi,edx
c0000436:	89 d9                	mov    ecx,ebx
c0000438:	83 e7 fc             	and    edi,0xfffffffc
c000043b:	89 ee                	mov    esi,ebp
c000043d:	01 df                	add    edi,ebx
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x60>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0x9c>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0x9c>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0x9c>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0x9c>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0x9c>
c0000496:	4b                   	dec    ebx
c0000497:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	4a                   	dec    edx
c00004a7:	75 f7                	jne    c00004a0 <memmove+0xc0>
c00004a9:	5b                   	pop    ebx
c00004aa:	89 e8                	mov    eax,ebp
c00004ac:	5e                   	pop    esi
c00004ad:	5f                   	pop    edi
c00004ae:	5d                   	pop    ebp
c00004af:	c3                   	ret    
c00004b0:	01 ea                	add    edx,ebp
c00004b2:	89 e9                	mov    ecx,ebp
c00004b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004c0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004c2:	41                   	inc    ecx
c00004c3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004c6:	43                   	inc    ebx
c00004c7:	39 d1                	cmp    ecx,edx
c00004c9:	75 f5                	jne    c00004c0 <memmove+0xe0>
c00004cb:	eb af                	jmp    c000047c <memmove+0x9c>
c00004cd:	8d 76 00             	lea    esi,[esi+0x0]

c00004d0 <memset>:
c00004d0:	57                   	push   edi
c00004d1:	53                   	push   ebx
c00004d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004d6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004da:	85 d2                	test   edx,edx
c00004dc:	74 1f                	je     c00004fd <memset+0x2d>
c00004de:	31 c0                	xor    eax,eax
c00004e0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00004e4:	88 c4                	mov    ah,al
c00004e6:	89 c1                	mov    ecx,eax
c00004e8:	c1 e1 10             	shl    ecx,0x10
c00004eb:	09 c8                	or     eax,ecx
c00004ed:	83 fa 04             	cmp    edx,0x4
c00004f0:	73 1e                	jae    c0000510 <memset+0x40>
c00004f2:	85 d2                	test   edx,edx
c00004f4:	74 07                	je     c00004fd <memset+0x2d>
c00004f6:	88 03                	mov    BYTE PTR [ebx],al
c00004f8:	f6 c2 02             	test   dl,0x2
c00004fb:	75 30                	jne    c000052d <memset+0x5d>
c00004fd:	89 d8                	mov    eax,ebx
c00004ff:	5b                   	pop    ebx
c0000500:	5f                   	pop    edi
c0000501:	c3                   	ret    
c0000502:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000509:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000510:	89 03                	mov    DWORD PTR [ebx],eax
c0000512:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000515:	89 d9                	mov    ecx,ebx
c0000517:	83 e7 fc             	and    edi,0xfffffffc
c000051a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000051e:	29 f9                	sub    ecx,edi
c0000520:	01 d1                	add    ecx,edx
c0000522:	c1 e9 02             	shr    ecx,0x2
c0000525:	fc                   	cld    
c0000526:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000528:	89 d8                	mov    eax,ebx
c000052a:	5b                   	pop    ebx
c000052b:	5f                   	pop    edi
c000052c:	c3                   	ret    
c000052d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000532:	eb c9                	jmp    c00004fd <memset+0x2d>
c0000534:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000053a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000540 <strlen>:
c0000540:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000544:	31 c0                	xor    eax,eax
c0000546:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000549:	74 15                	je     c0000560 <strlen+0x20>
c000054b:	90                   	nop
c000054c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000550:	40                   	inc    eax
c0000551:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000555:	75 f9                	jne    c0000550 <strlen+0x10>
c0000557:	c3                   	ret    
c0000558:	90                   	nop
c0000559:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000560:	c3                   	ret    
c0000561:	eb 0d                	jmp    c0000570 <strpbrk>
c0000563:	90                   	nop
c0000564:	90                   	nop
c0000565:	90                   	nop
c0000566:	90                   	nop
c0000567:	90                   	nop
c0000568:	90                   	nop
c0000569:	90                   	nop
c000056a:	90                   	nop
c000056b:	90                   	nop
c000056c:	90                   	nop
c000056d:	90                   	nop
c000056e:	90                   	nop
c000056f:	90                   	nop

c0000570 <strpbrk>:
c0000570:	57                   	push   edi
c0000571:	56                   	push   esi
c0000572:	53                   	push   ebx
c0000573:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000577:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000057b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000057d:	84 db                	test   bl,bl
c000057f:	74 21                	je     c00005a2 <strpbrk+0x32>
c0000581:	8a 07                	mov    al,BYTE PTR [edi]
c0000583:	84 c0                	test   al,al
c0000585:	74 14                	je     c000059b <strpbrk+0x2b>
c0000587:	38 d8                	cmp    al,bl
c0000589:	74 19                	je     c00005a4 <strpbrk+0x34>
c000058b:	89 fa                	mov    edx,edi
c000058d:	eb 05                	jmp    c0000594 <strpbrk+0x24>
c000058f:	90                   	nop
c0000590:	38 d9                	cmp    cl,bl
c0000592:	74 10                	je     c00005a4 <strpbrk+0x34>
c0000594:	42                   	inc    edx
c0000595:	8a 0a                	mov    cl,BYTE PTR [edx]
c0000597:	84 c9                	test   cl,cl
c0000599:	75 f5                	jne    c0000590 <strpbrk+0x20>
c000059b:	46                   	inc    esi
c000059c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059e:	84 db                	test   bl,bl
c00005a0:	75 e1                	jne    c0000583 <strpbrk+0x13>
c00005a2:	31 f6                	xor    esi,esi
c00005a4:	89 f0                	mov    eax,esi
c00005a6:	5b                   	pop    ebx
c00005a7:	5e                   	pop    esi
c00005a8:	5f                   	pop    edi
c00005a9:	c3                   	ret    
c00005aa:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005b0 <strtok>:
c00005b0:	56                   	push   esi
c00005b1:	53                   	push   ebx
c00005b2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005ba:	85 db                	test   ebx,ebx
c00005bc:	75 07                	jne    c00005c5 <strtok+0x15>
c00005be:	eb 30                	jmp    c00005f0 <strtok+0x40>
c00005c0:	43                   	inc    ebx
c00005c1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005c5:	56                   	push   esi
c00005c6:	53                   	push   ebx
c00005c7:	e8 a4 ff ff ff       	call   c0000570 <strpbrk>
c00005cc:	5a                   	pop    edx
c00005cd:	a3 40 ff 01 c0       	mov    ds:0xc001ff40,eax
c00005d2:	59                   	pop    ecx
c00005d3:	39 d8                	cmp    eax,ebx
c00005d5:	74 e9                	je     c00005c0 <strtok+0x10>
c00005d7:	85 c0                	test   eax,eax
c00005d9:	74 1f                	je     c00005fa <strtok+0x4a>
c00005db:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005de:	8d 50 01             	lea    edx,[eax+0x1]
c00005e1:	89 d8                	mov    eax,ebx
c00005e3:	89 15 40 ff 01 c0    	mov    DWORD PTR ds:0xc001ff40,edx
c00005e9:	5b                   	pop    ebx
c00005ea:	5e                   	pop    esi
c00005eb:	c3                   	ret    
c00005ec:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00005f0:	8b 1d 40 ff 01 c0    	mov    ebx,DWORD PTR ds:0xc001ff40
c00005f6:	85 db                	test   ebx,ebx
c00005f8:	75 cb                	jne    c00005c5 <strtok+0x15>
c00005fa:	31 c0                	xor    eax,eax
c00005fc:	5b                   	pop    ebx
c00005fd:	5e                   	pop    esi
c00005fe:	c3                   	ret    
c00005ff:	90                   	nop

c0000600 <strcpy>:
c0000600:	53                   	push   ebx
c0000601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000605:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000609:	89 c3                	mov    ebx,eax
c000060b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000060d:	84 d2                	test   dl,dl
c000060f:	74 19                	je     c000062a <strcpy+0x2a>
c0000611:	eb 0d                	jmp    c0000620 <strcpy+0x20>
c0000613:	90                   	nop
c0000614:	90                   	nop
c0000615:	90                   	nop
c0000616:	90                   	nop
c0000617:	90                   	nop
c0000618:	90                   	nop
c0000619:	90                   	nop
c000061a:	90                   	nop
c000061b:	90                   	nop
c000061c:	90                   	nop
c000061d:	90                   	nop
c000061e:	90                   	nop
c000061f:	90                   	nop
c0000620:	88 13                	mov    BYTE PTR [ebx],dl
c0000622:	41                   	inc    ecx
c0000623:	43                   	inc    ebx
c0000624:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000626:	84 d2                	test   dl,dl
c0000628:	75 f6                	jne    c0000620 <strcpy+0x20>
c000062a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000062d:	5b                   	pop    ebx
c000062e:	c3                   	ret    
c000062f:	90                   	nop

c0000630 <strncpy>:
c0000630:	57                   	push   edi
c0000631:	56                   	push   esi
c0000632:	53                   	push   ebx
c0000633:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000637:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000063b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000063f:	85 ff                	test   edi,edi
c0000641:	74 3e                	je     c0000681 <strncpy+0x51>
c0000643:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000645:	8d 47 ff             	lea    eax,[edi-0x1]
c0000648:	8d 4a 01             	lea    ecx,[edx+0x1]
c000064b:	88 1a                	mov    BYTE PTR [edx],bl
c000064d:	84 db                	test   bl,bl
c000064f:	74 3f                	je     c0000690 <strncpy+0x60>
c0000651:	85 c0                	test   eax,eax
c0000653:	74 2c                	je     c0000681 <strncpy+0x51>
c0000655:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000658:	8d 47 fe             	lea    eax,[edi-0x2]
c000065b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000065e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000661:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000664:	84 db                	test   bl,bl
c0000666:	75 15                	jne    c000067d <strncpy+0x4d>
c0000668:	eb 26                	jmp    c0000690 <strncpy+0x60>
c000066a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000670:	47                   	inc    edi
c0000671:	41                   	inc    ecx
c0000672:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000675:	48                   	dec    eax
c0000676:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000679:	84 db                	test   bl,bl
c000067b:	74 13                	je     c0000690 <strncpy+0x60>
c000067d:	85 c0                	test   eax,eax
c000067f:	75 ef                	jne    c0000670 <strncpy+0x40>
c0000681:	5b                   	pop    ebx
c0000682:	89 d0                	mov    eax,edx
c0000684:	5e                   	pop    esi
c0000685:	5f                   	pop    edi
c0000686:	c3                   	ret    
c0000687:	89 f6                	mov    esi,esi
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000690:	85 c0                	test   eax,eax
c0000692:	74 ed                	je     c0000681 <strncpy+0x51>
c0000694:	83 f8 04             	cmp    eax,0x4
c0000697:	73 17                	jae    c00006b0 <strncpy+0x80>
c0000699:	85 c0                	test   eax,eax
c000069b:	74 e4                	je     c0000681 <strncpy+0x51>
c000069d:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006a0:	a8 02                	test   al,0x2
c00006a2:	74 dd                	je     c0000681 <strncpy+0x51>
c00006a4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006ab:	eb d4                	jmp    c0000681 <strncpy+0x51>
c00006ad:	8d 76 00             	lea    esi,[esi+0x0]
c00006b0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006b6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006b9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006c1:	83 e7 fc             	and    edi,0xfffffffc
c00006c4:	29 f9                	sub    ecx,edi
c00006c6:	01 c1                	add    ecx,eax
c00006c8:	c1 e9 02             	shr    ecx,0x2
c00006cb:	fc                   	cld    
c00006cc:	31 c0                	xor    eax,eax
c00006ce:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006d0:	89 d0                	mov    eax,edx
c00006d2:	5b                   	pop    ebx
c00006d3:	5e                   	pop    esi
c00006d4:	5f                   	pop    edi
c00006d5:	c3                   	ret    
c00006d6:	8d 76 00             	lea    esi,[esi+0x0]
c00006d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00006e0 <strcmp>:
c00006e0:	56                   	push   esi
c00006e1:	53                   	push   ebx
c00006e2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00006e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00006ea:	8a 16                	mov    dl,BYTE PTR [esi]
c00006ec:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00006ee:	38 d1                	cmp    cl,dl
c00006f0:	75 1d                	jne    c000070f <strcmp+0x2f>
c00006f2:	84 c9                	test   cl,cl
c00006f4:	74 2a                	je     c0000720 <strcmp+0x40>
c00006f6:	b8 01 00 00 00       	mov    eax,0x1
c00006fb:	eb 08                	jmp    c0000705 <strcmp+0x25>
c00006fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000700:	40                   	inc    eax
c0000701:	84 d2                	test   dl,dl
c0000703:	74 1b                	je     c0000720 <strcmp+0x40>
c0000705:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000708:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000070b:	38 ca                	cmp    dl,cl
c000070d:	74 f1                	je     c0000700 <strcmp+0x20>
c000070f:	31 c0                	xor    eax,eax
c0000711:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000717:	88 d0                	mov    al,dl
c0000719:	5b                   	pop    ebx
c000071a:	29 c8                	sub    eax,ecx
c000071c:	5e                   	pop    esi
c000071d:	c3                   	ret    
c000071e:	66 90                	xchg   ax,ax
c0000720:	31 c0                	xor    eax,eax
c0000722:	5b                   	pop    ebx
c0000723:	5e                   	pop    esi
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000730 <strchr>:
c0000730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000734:	8a 10                	mov    dl,BYTE PTR [eax]
c0000736:	84 d2                	test   dl,dl
c0000738:	74 21                	je     c000075b <strchr+0x2b>
c000073a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000073e:	38 ca                	cmp    dl,cl
c0000740:	75 12                	jne    c0000754 <strchr+0x24>
c0000742:	eb 1a                	jmp    c000075e <strchr+0x2e>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000750:	38 ca                	cmp    dl,cl
c0000752:	74 09                	je     c000075d <strchr+0x2d>
c0000754:	40                   	inc    eax
c0000755:	8a 10                	mov    dl,BYTE PTR [eax]
c0000757:	84 d2                	test   dl,dl
c0000759:	75 f5                	jne    c0000750 <strchr+0x20>
c000075b:	31 c0                	xor    eax,eax
c000075d:	c3                   	ret    
c000075e:	c3                   	ret    
c000075f:	90                   	nop

c0000760 <strncmp>:
c0000760:	57                   	push   edi
c0000761:	56                   	push   esi
c0000762:	53                   	push   ebx
c0000763:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000767:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000076f:	85 ff                	test   edi,edi
c0000771:	74 2f                	je     c00007a2 <strncmp+0x42>
c0000773:	8a 16                	mov    dl,BYTE PTR [esi]
c0000775:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000777:	38 d1                	cmp    cl,dl
c0000779:	75 35                	jne    c00007b0 <strncmp+0x50>
c000077b:	8d 46 01             	lea    eax,[esi+0x1]
c000077e:	84 c9                	test   cl,cl
c0000780:	74 20                	je     c00007a2 <strncmp+0x42>
c0000782:	01 fe                	add    esi,edi
c0000784:	eb 17                	jmp    c000079d <strncmp+0x3d>
c0000786:	8d 76 00             	lea    esi,[esi+0x0]
c0000789:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000790:	8a 10                	mov    dl,BYTE PTR [eax]
c0000792:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000794:	38 ca                	cmp    dl,cl
c0000796:	75 18                	jne    c00007b0 <strncmp+0x50>
c0000798:	40                   	inc    eax
c0000799:	84 d2                	test   dl,dl
c000079b:	74 05                	je     c00007a2 <strncmp+0x42>
c000079d:	43                   	inc    ebx
c000079e:	39 c6                	cmp    esi,eax
c00007a0:	75 ee                	jne    c0000790 <strncmp+0x30>
c00007a2:	5b                   	pop    ebx
c00007a3:	31 c0                	xor    eax,eax
c00007a5:	5e                   	pop    esi
c00007a6:	5f                   	pop    edi
c00007a7:	c3                   	ret    
c00007a8:	90                   	nop
c00007a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007b0:	5b                   	pop    ebx
c00007b1:	31 c0                	xor    eax,eax
c00007b3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007b9:	88 d0                	mov    al,dl
c00007bb:	5e                   	pop    esi
c00007bc:	29 c8                	sub    eax,ecx
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    

c00007c0 <strcat>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	89 c3                	mov    ebx,eax
c00007cc:	eb 04                	jmp    c00007d2 <strcat+0x12>
c00007ce:	66 90                	xchg   ax,ax
c00007d0:	89 d3                	mov    ebx,edx
c00007d2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007d5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007d9:	75 f5                	jne    c00007d0 <strcat+0x10>
c00007db:	31 d2                	xor    edx,edx
c00007dd:	8d 76 00             	lea    esi,[esi+0x0]
c00007e0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00007e3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00007e6:	42                   	inc    edx
c00007e7:	84 c9                	test   cl,cl
c00007e9:	75 f5                	jne    c00007e0 <strcat+0x20>
c00007eb:	5b                   	pop    ebx
c00007ec:	5e                   	pop    esi
c00007ed:	c3                   	ret    
c00007ee:	66 90                	xchg   ax,ax

c00007f0 <strncat>:
c00007f0:	56                   	push   esi
c00007f1:	53                   	push   ebx
c00007f2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00007fe:	85 f6                	test   esi,esi
c0000800:	74 2e                	je     c0000830 <strncat+0x40>
c0000802:	89 c2                	mov    edx,eax
c0000804:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000080a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000810:	42                   	inc    edx
c0000811:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000815:	75 f9                	jne    c0000810 <strncat+0x20>
c0000817:	01 ce                	add    esi,ecx
c0000819:	eb 0a                	jmp    c0000825 <strncat+0x35>
c000081b:	90                   	nop
c000081c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000820:	39 f1                	cmp    ecx,esi
c0000822:	74 1c                	je     c0000840 <strncat+0x50>
c0000824:	42                   	inc    edx
c0000825:	41                   	inc    ecx
c0000826:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000829:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000082c:	84 db                	test   bl,bl
c000082e:	75 f0                	jne    c0000820 <strncat+0x30>
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000839:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000840:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000843:	5b                   	pop    ebx
c0000844:	5e                   	pop    esi
c0000845:	c3                   	ret    
c0000846:	8d 76 00             	lea    esi,[esi+0x0]
c0000849:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000850 <strstr>:
c0000850:	57                   	push   edi
c0000851:	56                   	push   esi
c0000852:	53                   	push   ebx
c0000853:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000857:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000085b:	57                   	push   edi
c000085c:	e8 df fc ff ff       	call   c0000540 <strlen>
c0000861:	59                   	pop    ecx
c0000862:	85 c0                	test   eax,eax
c0000864:	74 3a                	je     c00008a0 <strstr+0x50>
c0000866:	89 c6                	mov    esi,eax
c0000868:	eb 16                	jmp    c0000880 <strstr+0x30>
c000086a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000870:	56                   	push   esi
c0000871:	57                   	push   edi
c0000872:	53                   	push   ebx
c0000873:	e8 18 fb ff ff       	call   c0000390 <memcmp>
c0000878:	83 c4 0c             	add    esp,0xc
c000087b:	85 c0                	test   eax,eax
c000087d:	74 21                	je     c00008a0 <strstr+0x50>
c000087f:	43                   	inc    ebx
c0000880:	53                   	push   ebx
c0000881:	e8 ba fc ff ff       	call   c0000540 <strlen>
c0000886:	5a                   	pop    edx
c0000887:	39 f0                	cmp    eax,esi
c0000889:	73 e5                	jae    c0000870 <strstr+0x20>
c000088b:	5b                   	pop    ebx
c000088c:	31 c0                	xor    eax,eax
c000088e:	5e                   	pop    esi
c000088f:	5f                   	pop    edi
c0000890:	c3                   	ret    
c0000891:	eb 0d                	jmp    c00008a0 <strstr+0x50>
c0000893:	90                   	nop
c0000894:	90                   	nop
c0000895:	90                   	nop
c0000896:	90                   	nop
c0000897:	90                   	nop
c0000898:	90                   	nop
c0000899:	90                   	nop
c000089a:	90                   	nop
c000089b:	90                   	nop
c000089c:	90                   	nop
c000089d:	90                   	nop
c000089e:	90                   	nop
c000089f:	90                   	nop
c00008a0:	89 d8                	mov    eax,ebx
c00008a2:	5b                   	pop    ebx
c00008a3:	5e                   	pop    esi
c00008a4:	5f                   	pop    edi
c00008a5:	c3                   	ret    
c00008a6:	8d 76 00             	lea    esi,[esi+0x0]
c00008a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008b0 <toupper>:
c00008b0:	31 d2                	xor    edx,edx
c00008b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008b6:	88 c2                	mov    dl,al
c00008b8:	f6 82 e0 ce 01 c0 02 	test   BYTE PTR [edx-0x3ffe3120],0x2
c00008bf:	74 03                	je     c00008c4 <toupper+0x14>
c00008c1:	83 e8 20             	sub    eax,0x20
c00008c4:	c3                   	ret    
c00008c5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <tolower>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 e0 ce 01 c0 01 	test   BYTE PTR [edx-0x3ffe3120],0x1
c00008df:	74 03                	je     c00008e4 <tolower+0x14>
c00008e1:	83 c0 20             	add    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <simple_strtoul>:
c00008f0:	55                   	push   ebp
c00008f1:	57                   	push   edi
c00008f2:	56                   	push   esi
c00008f3:	53                   	push   ebx
c00008f4:	83 ec 08             	sub    esp,0x8
c00008f7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008fb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008ff:	90                   	nop
c0000900:	31 d2                	xor    edx,edx
c0000902:	8a 01                	mov    al,BYTE PTR [ecx]
c0000904:	88 c2                	mov    dl,al
c0000906:	f6 82 e0 ce 01 c0 08 	test   BYTE PTR [edx-0x3ffe3120],0x8
c000090d:	75 04                	jne    c0000913 <simple_strtoul+0x23>
c000090f:	3c 09                	cmp    al,0x9
c0000911:	75 0d                	jne    c0000920 <simple_strtoul+0x30>
c0000913:	41                   	inc    ecx
c0000914:	eb ea                	jmp    c0000900 <simple_strtoul+0x10>
c0000916:	8d 76 00             	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	3c 2d                	cmp    al,0x2d
c0000922:	0f 84 48 01 00 00    	je     c0000a70 <simple_strtoul+0x180>
c0000928:	3c 2b                	cmp    al,0x2b
c000092a:	0f 84 e0 00 00 00    	je     c0000a10 <simple_strtoul+0x120>
c0000930:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000938:	85 f6                	test   esi,esi
c000093a:	0f 85 e1 00 00 00    	jne    c0000a21 <simple_strtoul+0x131>
c0000940:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000943:	80 fa 30             	cmp    dl,0x30
c0000946:	0f 84 75 01 00 00    	je     c0000ac1 <simple_strtoul+0x1d1>
c000094c:	be 0a 00 00 00       	mov    esi,0xa
c0000951:	84 d2                	test   dl,dl
c0000953:	0f 84 9f 01 00 00    	je     c0000af8 <simple_strtoul+0x208>
c0000959:	31 ed                	xor    ebp,ebp
c000095b:	31 ff                	xor    edi,edi
c000095d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000964:	eb 35                	jmp    c000099b <simple_strtoul+0xab>
c0000966:	8d 76 00             	lea    esi,[esi+0x0]
c0000969:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000970:	83 eb 30             	sub    ebx,0x30
c0000973:	39 f3                	cmp    ebx,esi
c0000975:	73 59                	jae    c00009d0 <simple_strtoul+0xe0>
c0000977:	31 d2                	xor    edx,edx
c0000979:	89 d8                	mov    eax,ebx
c000097b:	f7 d0                	not    eax
c000097d:	f7 f6                	div    esi
c000097f:	39 f8                	cmp    eax,edi
c0000981:	0f 82 c9 00 00 00    	jb     c0000a50 <simple_strtoul+0x160>
c0000987:	0f af fe             	imul   edi,esi
c000098a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000991:	01 df                	add    edi,ebx
c0000993:	41                   	inc    ecx
c0000994:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000997:	84 d2                	test   dl,dl
c0000999:	74 35                	je     c00009d0 <simple_strtoul+0xe0>
c000099b:	31 db                	xor    ebx,ebx
c000099d:	88 d3                	mov    bl,dl
c000099f:	f6 83 e0 ce 01 c0 04 	test   BYTE PTR [ebx-0x3ffe3120],0x4
c00009a6:	75 c8                	jne    c0000970 <simple_strtoul+0x80>
c00009a8:	52                   	push   edx
c00009a9:	e8 02 ff ff ff       	call   c00008b0 <toupper>
c00009ae:	31 d2                	xor    edx,edx
c00009b0:	5b                   	pop    ebx
c00009b1:	88 c2                	mov    dl,al
c00009b3:	f6 82 e0 ce 01 c0 01 	test   BYTE PTR [edx-0x3ffe3120],0x1
c00009ba:	74 14                	je     c00009d0 <simple_strtoul+0xe0>
c00009bc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009bf:	39 f3                	cmp    ebx,esi
c00009c1:	72 b4                	jb     c0000977 <simple_strtoul+0x87>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009d4:	85 c0                	test   eax,eax
c00009d6:	74 18                	je     c00009f0 <simple_strtoul+0x100>
c00009d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009db:	09 f8                	or     eax,edi
c00009dd:	0f 85 7d 00 00 00    	jne    c0000a60 <simple_strtoul+0x170>
c00009e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009e7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00009eb:	31 ff                	xor    edi,edi
c00009ed:	89 30                	mov    DWORD PTR [eax],esi
c00009ef:	90                   	nop
c00009f0:	4d                   	dec    ebp
c00009f1:	75 05                	jne    c00009f8 <simple_strtoul+0x108>
c00009f3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00009f8:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009fd:	75 02                	jne    c0000a01 <simple_strtoul+0x111>
c00009ff:	f7 df                	neg    edi
c0000a01:	83 c4 08             	add    esp,0x8
c0000a04:	89 f8                	mov    eax,edi
c0000a06:	5b                   	pop    ebx
c0000a07:	5e                   	pop    esi
c0000a08:	5f                   	pop    edi
c0000a09:	5d                   	pop    ebp
c0000a0a:	c3                   	ret    
c0000a0b:	90                   	nop
c0000a0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a10:	41                   	inc    ecx
c0000a11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a19:	85 f6                	test   esi,esi
c0000a1b:	0f 84 1f ff ff ff    	je     c0000940 <simple_strtoul+0x50>
c0000a21:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a24:	83 f8 22             	cmp    eax,0x22
c0000a27:	77 7b                	ja     c0000aa4 <simple_strtoul+0x1b4>
c0000a29:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a2c:	83 fe 08             	cmp    esi,0x8
c0000a2f:	0f 84 b3 00 00 00    	je     c0000ae8 <simple_strtoul+0x1f8>
c0000a35:	83 fe 10             	cmp    esi,0x10
c0000a38:	0f 85 13 ff ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000a3e:	80 fa 30             	cmp    dl,0x30
c0000a41:	74 3b                	je     c0000a7e <simple_strtoul+0x18e>
c0000a43:	be 10 00 00 00       	mov    esi,0x10
c0000a48:	e9 04 ff ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a50:	bd 01 00 00 00       	mov    ebp,0x1
c0000a55:	31 ff                	xor    edi,edi
c0000a57:	e9 37 ff ff ff       	jmp    c0000993 <simple_strtoul+0xa3>
c0000a5c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	89 08                	mov    DWORD PTR [eax],ecx
c0000a66:	eb 88                	jmp    c00009f0 <simple_strtoul+0x100>
c0000a68:	90                   	nop
c0000a69:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a70:	41                   	inc    ecx
c0000a71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a79:	e9 ba fe ff ff       	jmp    c0000938 <simple_strtoul+0x48>
c0000a7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000a82:	88 04 24             	mov    BYTE PTR [esp],al
c0000a85:	50                   	push   eax
c0000a86:	e8 45 fe ff ff       	call   c00008d0 <tolower>
c0000a8b:	5e                   	pop    esi
c0000a8c:	83 f8 78             	cmp    eax,0x78
c0000a8f:	0f 84 88 00 00 00    	je     c0000b1d <simple_strtoul+0x22d>
c0000a95:	41                   	inc    ecx
c0000a96:	be 10 00 00 00       	mov    esi,0x10
c0000a9b:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000a9f:	e9 ad fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000aa4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000aa8:	85 ff                	test   edi,edi
c0000aaa:	74 5e                	je     c0000b0a <simple_strtoul+0x21a>
c0000aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab0:	85 c9                	test   ecx,ecx
c0000ab2:	75 50                	jne    c0000b04 <simple_strtoul+0x214>
c0000ab4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aba:	31 ff                	xor    edi,edi
c0000abc:	e9 37 ff ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000ac1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ac5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ac8:	50                   	push   eax
c0000ac9:	e8 02 fe ff ff       	call   c00008d0 <tolower>
c0000ace:	5d                   	pop    ebp
c0000acf:	83 f8 78             	cmp    eax,0x78
c0000ad2:	74 3d                	je     c0000b11 <simple_strtoul+0x221>
c0000ad4:	41                   	inc    ecx
c0000ad5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000ad9:	80 fa 30             	cmp    dl,0x30
c0000adc:	74 13                	je     c0000af1 <simple_strtoul+0x201>
c0000ade:	be 08 00 00 00       	mov    esi,0x8
c0000ae3:	e9 69 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000ae8:	80 fa 30             	cmp    dl,0x30
c0000aeb:	0f 85 60 fe ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000af1:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000af5:	41                   	inc    ecx
c0000af6:	eb e6                	jmp    c0000ade <simple_strtoul+0x1ee>
c0000af8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000afc:	85 d2                	test   edx,edx
c0000afe:	74 0a                	je     c0000b0a <simple_strtoul+0x21a>
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b08:	89 30                	mov    DWORD PTR [eax],esi
c0000b0a:	31 ff                	xor    edi,edi
c0000b0c:	e9 e7 fe ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000b11:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b15:	83 c1 02             	add    ecx,0x2
c0000b18:	e9 21 ff ff ff       	jmp    c0000a3e <simple_strtoul+0x14e>
c0000b1d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b21:	be 10 00 00 00       	mov    esi,0x10
c0000b26:	83 c1 02             	add    ecx,0x2
c0000b29:	e9 23 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>

c0000b2e <largebin_index>:
c0000b2e:	89 c2                	mov    edx,eax
c0000b30:	c1 ea 08             	shr    edx,0x8
c0000b33:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b39:	77 10                	ja     c0000b4b <largebin_index+0x1d>
c0000b3b:	0f bd d2             	bsr    edx,edx
c0000b3e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b41:	d3 e8                	shr    eax,cl
c0000b43:	83 e0 03             	and    eax,0x3
c0000b46:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b4a:	c3                   	ret    
c0000b4b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b50:	c3                   	ret    

c0000b51 <malloc_init_state>:
c0000b51:	53                   	push   ebx
c0000b52:	8d 50 34             	lea    edx,[eax+0x34]
c0000b55:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b5b:	89 d1                	mov    ecx,edx
c0000b5d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b60:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b63:	83 c2 08             	add    edx,0x8
c0000b66:	39 da                	cmp    edx,ebx
c0000b68:	75 f3                	jne    c0000b5d <malloc_init_state+0xc>
c0000b6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b6c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b76:	83 e2 03             	and    edx,0x3
c0000b79:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000b83:	83 ca 48             	or     edx,0x48
c0000b86:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000b90:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000b9a:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ba1:	89 10                	mov    DWORD PTR [eax],edx
c0000ba3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ba6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bb0:	5b                   	pop    ebx
c0000bb1:	c3                   	ret    

c0000bb2 <malloc_consolidate>:
c0000bb2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bb4:	85 d2                	test   edx,edx
c0000bb6:	0f 84 d8 00 00 00    	je     c0000c94 <malloc_consolidate+0xe2>
c0000bbc:	55                   	push   ebp
c0000bbd:	83 e2 fd             	and    edx,0xfffffffd
c0000bc0:	57                   	push   edi
c0000bc1:	89 c5                	mov    ebp,eax
c0000bc3:	56                   	push   esi
c0000bc4:	8d 78 34             	lea    edi,[eax+0x34]
c0000bc7:	53                   	push   ebx
c0000bc8:	83 ec 10             	sub    esp,0x10
c0000bcb:	89 10                	mov    DWORD PTR [eax],edx
c0000bcd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bd1:	c1 ea 03             	shr    edx,0x3
c0000bd4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bd8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bdc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bdf:	85 d2                	test   edx,edx
c0000be1:	0f 84 98 00 00 00    	je     c0000c7f <malloc_consolidate+0xcd>
c0000be7:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000bee:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000bf1:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000bf4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000bf8:	89 f9                	mov    ecx,edi
c0000bfa:	83 e1 fe             	and    ecx,0xfffffffe
c0000bfd:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c00:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c03:	83 e3 fc             	and    ebx,0xfffffffc
c0000c06:	83 e7 01             	and    edi,0x1
c0000c09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c0c:	75 14                	jne    c0000c22 <malloc_consolidate+0x70>
c0000c0e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c10:	29 fa                	sub    edx,edi
c0000c12:	01 f9                	add    ecx,edi
c0000c14:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c17:	89 fb                	mov    ebx,edi
c0000c19:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c1c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c1f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c22:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c25:	74 40                	je     c0000c67 <malloc_consolidate+0xb5>
c0000c27:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c2a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c2d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c31:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c34:	83 e7 01             	and    edi,0x1
c0000c37:	75 0e                	jne    c0000c47 <malloc_consolidate+0x95>
c0000c39:	01 d9                	add    ecx,ebx
c0000c3b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c3e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c41:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c44:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c47:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c4a:	89 ce                	mov    esi,ecx
c0000c4c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c4f:	83 ce 01             	or     esi,0x1
c0000c52:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c55:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c58:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c5b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c5f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c62:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c65:	eb 0c                	jmp    c0000c73 <malloc_consolidate+0xc1>
c0000c67:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c6a:	83 c9 01             	or     ecx,0x1
c0000c6d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c70:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c77:	85 d2                	test   edx,edx
c0000c79:	0f 85 6f ff ff ff    	jne    c0000bee <malloc_consolidate+0x3c>
c0000c7f:	83 c5 04             	add    ebp,0x4
c0000c82:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000c86:	0f 85 50 ff ff ff    	jne    c0000bdc <malloc_consolidate+0x2a>
c0000c8c:	83 c4 10             	add    esp,0x10
c0000c8f:	5b                   	pop    ebx
c0000c90:	5e                   	pop    esi
c0000c91:	5f                   	pop    edi
c0000c92:	5d                   	pop    ebp
c0000c93:	c3                   	ret    
c0000c94:	e9 b8 fe ff ff       	jmp    c0000b51 <malloc_init_state>

c0000c99 <dlfree>:
c0000c99:	57                   	push   edi
c0000c9a:	56                   	push   esi
c0000c9b:	53                   	push   ebx
c0000c9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ca0:	85 db                	test   ebx,ebx
c0000ca2:	0f 84 e2 00 00 00    	je     c0000d8a <dlfree+0xf1>
c0000ca8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cab:	8b 0d 60 ff 01 c0    	mov    ecx,DWORD PTR ds:0xc001ff60
c0000cb1:	89 f0                	mov    eax,esi
c0000cb3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cb6:	83 e0 fc             	and    eax,0xfffffffc
c0000cb9:	39 c1                	cmp    ecx,eax
c0000cbb:	72 24                	jb     c0000ce1 <dlfree+0x48>
c0000cbd:	83 c9 03             	or     ecx,0x3
c0000cc0:	c1 e8 03             	shr    eax,0x3
c0000cc3:	89 0d 60 ff 01 c0    	mov    DWORD PTR ds:0xc001ff60,ecx
c0000cc9:	83 e8 02             	sub    eax,0x2
c0000ccc:	8b 0c 85 64 ff 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe009c]
c0000cd3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cd5:	89 14 85 64 ff 01 c0 	mov    DWORD PTR [eax*4-0x3ffe009c],edx
c0000cdc:	e9 a9 00 00 00       	jmp    c0000d8a <dlfree+0xf1>
c0000ce1:	83 e6 02             	and    esi,0x2
c0000ce4:	0f 85 a0 00 00 00    	jne    c0000d8a <dlfree+0xf1>
c0000cea:	83 c9 01             	or     ecx,0x1
c0000ced:	8d 34 02             	lea    esi,[edx+eax*1]
c0000cf0:	89 0d 60 ff 01 c0    	mov    DWORD PTR ds:0xc001ff60,ecx
c0000cf6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000cf9:	83 e1 fc             	and    ecx,0xfffffffc
c0000cfc:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d00:	75 13                	jne    c0000d15 <dlfree+0x7c>
c0000d02:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d05:	29 da                	sub    edx,ebx
c0000d07:	01 d8                	add    eax,ebx
c0000d09:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d0c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d0f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d12:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d15:	39 35 8c ff 01 c0    	cmp    DWORD PTR ds:0xc001ff8c,esi
c0000d1b:	74 40                	je     c0000d5d <dlfree+0xc4>
c0000d1d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d21:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d24:	80 e3 01             	and    bl,0x1
c0000d27:	75 0e                	jne    c0000d37 <dlfree+0x9e>
c0000d29:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d2c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d2f:	01 c8                	add    eax,ecx
c0000d31:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d34:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d37:	8b 0d 9c ff 01 c0    	mov    ecx,DWORD PTR ds:0xc001ff9c
c0000d3d:	c7 42 0c 94 ff 01 c0 	mov    DWORD PTR [edx+0xc],0xc001ff94
c0000d44:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d47:	89 15 9c ff 01 c0    	mov    DWORD PTR ds:0xc001ff9c,edx
c0000d4d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d50:	89 c1                	mov    ecx,eax
c0000d52:	83 c9 01             	or     ecx,0x1
c0000d55:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d58:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d5b:	eb 10                	jmp    c0000d6d <dlfree+0xd4>
c0000d5d:	01 c8                	add    eax,ecx
c0000d5f:	89 c1                	mov    ecx,eax
c0000d61:	83 c9 01             	or     ecx,0x1
c0000d64:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d67:	89 15 8c ff 01 c0    	mov    DWORD PTR ds:0xc001ff8c,edx
c0000d6d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d72:	76 16                	jbe    c0000d8a <dlfree+0xf1>
c0000d74:	f6 05 60 ff 01 c0 02 	test   BYTE PTR ds:0xc001ff60,0x2
c0000d7b:	74 0d                	je     c0000d8a <dlfree+0xf1>
c0000d7d:	5b                   	pop    ebx
c0000d7e:	b8 60 ff 01 c0       	mov    eax,0xc001ff60
c0000d83:	5e                   	pop    esi
c0000d84:	5f                   	pop    edi
c0000d85:	e9 28 fe ff ff       	jmp    c0000bb2 <malloc_consolidate>
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	c3                   	ret    

c0000d8e <sYSMALLOc>:
c0000d8e:	55                   	push   ebp
c0000d8f:	57                   	push   edi
c0000d90:	56                   	push   esi
c0000d91:	53                   	push   ebx
c0000d92:	89 d3                	mov    ebx,edx
c0000d94:	83 ec 2c             	sub    esp,0x2c
c0000d97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000d9b:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000da1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000da4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dab:	74 1f                	je     c0000dcc <sYSMALLOc+0x3e>
c0000dad:	89 d8                	mov    eax,ebx
c0000daf:	e8 fe fd ff ff       	call   c0000bb2 <malloc_consolidate>
c0000db4:	83 ec 0c             	sub    esp,0xc
c0000db7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dbb:	83 e8 07             	sub    eax,0x7
c0000dbe:	50                   	push   eax
c0000dbf:	e8 30 02 00 00       	call   c0000ff4 <dlmalloc>
c0000dc4:	83 c4 10             	add    esp,0x10
c0000dc7:	e9 20 02 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000dcc:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dcf:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000dd5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000dd8:	83 e0 fc             	and    eax,0xfffffffc
c0000ddb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ddf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000de3:	83 c0 10             	add    eax,0x10
c0000de6:	01 c1                	add    ecx,eax
c0000de8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000dec:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000df3:	74 04                	je     c0000df9 <sYSMALLOc+0x6b>
c0000df5:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000df9:	f7 da                	neg    edx
c0000dfb:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000dff:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e03:	21 d1                	and    ecx,edx
c0000e05:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e09:	7f 07                	jg     c0000e12 <sYSMALLOc+0x84>
c0000e0b:	31 c0                	xor    eax,eax
c0000e0d:	e9 da 01 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000e12:	83 ec 0c             	sub    esp,0xc
c0000e15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e19:	e8 72 68 00 00       	call   c0007690 <sbrk>
c0000e1e:	83 c4 10             	add    esp,0x10
c0000e21:	89 c6                	mov    esi,eax
c0000e23:	83 f8 ff             	cmp    eax,0xffffffff
c0000e26:	74 e3                	je     c0000e0b <sYSMALLOc+0x7d>
c0000e28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e2c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e30:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e33:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e39:	39 f1                	cmp    ecx,esi
c0000e3b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e41:	75 13                	jne    c0000e56 <sYSMALLOc+0xc8>
c0000e43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e47:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e4b:	83 c8 01             	or     eax,0x1
c0000e4e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e51:	e9 3e 01 00 00       	jmp    c0000f94 <sYSMALLOc+0x206>
c0000e56:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e5c:	88 d0                	mov    al,dl
c0000e5e:	83 e0 01             	and    eax,0x1
c0000e61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e66:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e6a:	0f 95 c0             	setne  al
c0000e6d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e71:	39 f1                	cmp    ecx,esi
c0000e73:	76 12                	jbe    c0000e87 <sYSMALLOc+0xf9>
c0000e75:	84 c0                	test   al,al
c0000e77:	74 0e                	je     c0000e87 <sYSMALLOc+0xf9>
c0000e79:	83 e2 fe             	and    edx,0xfffffffe
c0000e7c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000e82:	e9 83 00 00 00       	jmp    c0000f0a <sYSMALLOc+0x17c>
c0000e87:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000e8c:	74 7c                	je     c0000f0a <sYSMALLOc+0x17c>
c0000e8e:	84 c0                	test   al,al
c0000e90:	74 0c                	je     c0000e9e <sYSMALLOc+0x110>
c0000e92:	89 f0                	mov    eax,esi
c0000e94:	29 c8                	sub    eax,ecx
c0000e96:	01 e8                	add    eax,ebp
c0000e98:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000e9e:	89 f2                	mov    edx,esi
c0000ea0:	83 e2 07             	and    edx,0x7
c0000ea3:	74 0c                	je     c0000eb1 <sYSMALLOc+0x123>
c0000ea5:	b8 08 00 00 00       	mov    eax,0x8
c0000eaa:	29 d0                	sub    eax,edx
c0000eac:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000eaf:	eb 04                	jmp    c0000eb5 <sYSMALLOc+0x127>
c0000eb1:	89 f5                	mov    ebp,esi
c0000eb3:	31 c0                	xor    eax,eax
c0000eb5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000eb9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ebd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ec1:	01 c1                	add    ecx,eax
c0000ec3:	83 ec 0c             	sub    esp,0xc
c0000ec6:	01 f1                	add    ecx,esi
c0000ec8:	01 ca                	add    edx,ecx
c0000eca:	29 c8                	sub    eax,ecx
c0000ecc:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	52                   	push   edx
c0000ed3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ed7:	e8 b4 67 00 00       	call   c0007690 <sbrk>
c0000edc:	83 c4 10             	add    esp,0x10
c0000edf:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee6:	75 0f                	jne    c0000ef7 <sYSMALLOc+0x169>
c0000ee8:	83 ec 0c             	sub    esp,0xc
c0000eeb:	6a 00                	push   0x0
c0000eed:	e8 9e 67 00 00       	call   c0007690 <sbrk>
c0000ef2:	83 c4 10             	add    esp,0x10
c0000ef5:	eb 30                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000ef7:	39 c6                	cmp    esi,eax
c0000ef9:	76 33                	jbe    c0000f2e <sYSMALLOc+0x1a0>
c0000efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eff:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f06:	01 f0                	add    eax,esi
c0000f08:	eb 1d                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000f0a:	83 ec 0c             	sub    esp,0xc
c0000f0d:	89 f5                	mov    ebp,esi
c0000f0f:	6a 00                	push   0x0
c0000f11:	e8 7a 67 00 00       	call   c0007690 <sbrk>
c0000f16:	89 c2                	mov    edx,eax
c0000f18:	29 f2                	sub    edx,esi
c0000f1a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f1e:	83 c4 10             	add    esp,0x10
c0000f21:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f27:	31 d2                	xor    edx,edx
c0000f29:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2c:	74 66                	je     c0000f94 <sYSMALLOc+0x206>
c0000f2e:	29 e8                	sub    eax,ebp
c0000f30:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f33:	01 d0                	add    eax,edx
c0000f35:	83 c8 01             	or     eax,0x1
c0000f38:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f3b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f41:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f46:	74 4c                	je     c0000f94 <sYSMALLOc+0x206>
c0000f48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4c:	83 e8 0c             	sub    eax,0xc
c0000f4f:	83 e0 f8             	and    eax,0xfffffff8
c0000f52:	89 c2                	mov    edx,eax
c0000f54:	83 ca 01             	or     edx,0x1
c0000f57:	83 f8 0f             	cmp    eax,0xf
c0000f5a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f5d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f65:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f6d:	76 25                	jbe    c0000f94 <sYSMALLOc+0x206>
c0000f6f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f75:	83 ec 0c             	sub    esp,0xc
c0000f78:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000f82:	83 c7 08             	add    edi,0x8
c0000f85:	57                   	push   edi
c0000f86:	e8 0e fd ff ff       	call   c0000c99 <dlfree>
c0000f8b:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000f91:	83 c4 10             	add    esp,0x10
c0000f94:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000f9a:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fa0:	73 06                	jae    c0000fa8 <sYSMALLOc+0x21a>
c0000fa2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fa8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fae:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fb4:	73 06                	jae    c0000fbc <sYSMALLOc+0x22e>
c0000fb6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fbc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fbf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fc2:	83 e2 fc             	and    edx,0xfffffffc
c0000fc5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fc9:	0f 82 3c fe ff ff    	jb     c0000e0b <sYSMALLOc+0x7d>
c0000fcf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000fd3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000fd6:	29 fa                	sub    edx,edi
c0000fd8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000fdb:	83 ca 01             	or     edx,0x1
c0000fde:	89 fb                	mov    ebx,edi
c0000fe0:	83 c0 08             	add    eax,0x8
c0000fe3:	83 cb 01             	or     ebx,0x1
c0000fe6:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000fe9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000fec:	83 c4 2c             	add    esp,0x2c
c0000fef:	5b                   	pop    ebx
c0000ff0:	5e                   	pop    esi
c0000ff1:	5f                   	pop    edi
c0000ff2:	5d                   	pop    ebp
c0000ff3:	c3                   	ret    

c0000ff4 <dlmalloc>:
c0000ff4:	55                   	push   ebp
c0000ff5:	57                   	push   edi
c0000ff6:	56                   	push   esi
c0000ff7:	53                   	push   ebx
c0000ff8:	83 ec 1c             	sub    esp,0x1c
c0000ffb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000fff:	83 f8 df             	cmp    eax,0xffffffdf
c0001002:	0f 87 70 03 00 00    	ja     c0001378 <dlmalloc+0x384>
c0001008:	83 c0 0b             	add    eax,0xb
c000100b:	be 10 00 00 00       	mov    esi,0x10
c0001010:	83 f8 0f             	cmp    eax,0xf
c0001013:	76 05                	jbe    c000101a <dlmalloc+0x26>
c0001015:	83 e0 f8             	and    eax,0xfffffff8
c0001018:	89 c6                	mov    esi,eax
c000101a:	8b 3d 60 ff 01 c0    	mov    edi,DWORD PTR ds:0xc001ff60
c0001020:	f7 c7 01 00 00 00    	test   edi,0x1
c0001026:	75 17                	jne    c000103f <dlmalloc+0x4b>
c0001028:	85 ff                	test   edi,edi
c000102a:	0f 85 05 03 00 00    	jne    c0001335 <dlmalloc+0x341>
c0001030:	b8 60 ff 01 c0       	mov    eax,0xc001ff60
c0001035:	e8 78 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c000103a:	e9 f6 02 00 00       	jmp    c0001335 <dlmalloc+0x341>
c000103f:	39 f7                	cmp    edi,esi
c0001041:	72 1f                	jb     c0001062 <dlmalloc+0x6e>
c0001043:	89 f2                	mov    edx,esi
c0001045:	c1 ea 03             	shr    edx,0x3
c0001048:	83 ea 02             	sub    edx,0x2
c000104b:	8b 04 95 64 ff 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe009c]
c0001052:	85 c0                	test   eax,eax
c0001054:	74 0c                	je     c0001062 <dlmalloc+0x6e>
c0001056:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001059:	89 0c 95 64 ff 01 c0 	mov    DWORD PTR [edx*4-0x3ffe009c],ecx
c0001060:	eb 30                	jmp    c0001092 <dlmalloc+0x9e>
c0001062:	89 f0                	mov    eax,esi
c0001064:	81 fe ff 00 00 00    	cmp    esi,0xff
c000106a:	77 2e                	ja     c000109a <dlmalloc+0xa6>
c000106c:	c1 e8 03             	shr    eax,0x3
c000106f:	8d 14 c5 94 ff 01 c0 	lea    edx,[eax*8-0x3ffe006c]
c0001076:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000107a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000107d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001080:	39 c3                	cmp    ebx,eax
c0001082:	74 2e                	je     c00010b2 <dlmalloc+0xbe>
c0001084:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001087:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000108c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000108f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001092:	83 c0 08             	add    eax,0x8
c0001095:	e9 e0 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c000109a:	e8 8f fa ff ff       	call   c0000b2e <largebin_index>
c000109f:	83 e7 02             	and    edi,0x2
c00010a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a6:	74 0a                	je     c00010b2 <dlmalloc+0xbe>
c00010a8:	b8 60 ff 01 c0       	mov    eax,0xc001ff60
c00010ad:	e8 00 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c00010b2:	8d 46 10             	lea    eax,[esi+0x10]
c00010b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010b9:	8b 1d a0 ff 01 c0    	mov    ebx,DWORD PTR ds:0xc001ffa0
c00010bf:	81 fb 94 ff 01 c0    	cmp    ebx,0xc001ff94
c00010c5:	0f 84 13 01 00 00    	je     c00011de <dlmalloc+0x1ea>
c00010cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ce:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010d1:	83 e7 fc             	and    edi,0xfffffffc
c00010d4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010da:	77 4c                	ja     c0001128 <dlmalloc+0x134>
c00010dc:	3d 94 ff 01 c0       	cmp    eax,0xc001ff94
c00010e1:	75 45                	jne    c0001128 <dlmalloc+0x134>
c00010e3:	39 1d 90 ff 01 c0    	cmp    DWORD PTR ds:0xc001ff90,ebx
c00010e9:	75 3d                	jne    c0001128 <dlmalloc+0x134>
c00010eb:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00010ef:	73 37                	jae    c0001128 <dlmalloc+0x134>
c00010f1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00010f4:	89 fa                	mov    edx,edi
c00010f6:	a3 9c ff 01 c0       	mov    ds:0xc001ff9c,eax
c00010fb:	a3 a0 ff 01 c0       	mov    ds:0xc001ffa0,eax
c0001100:	a3 90 ff 01 c0       	mov    ds:0xc001ff90,eax
c0001105:	29 f2                	sub    edx,esi
c0001107:	c7 40 08 94 ff 01 c0 	mov    DWORD PTR [eax+0x8],0xc001ff94
c000110e:	c7 40 0c 94 ff 01 c0 	mov    DWORD PTR [eax+0xc],0xc001ff94
c0001115:	83 ce 01             	or     esi,0x1
c0001118:	89 d1                	mov    ecx,edx
c000111a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000111d:	83 c9 01             	or     ecx,0x1
c0001120:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001123:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001126:	eb 15                	jmp    c000113d <dlmalloc+0x149>
c0001128:	a3 a0 ff 01 c0       	mov    ds:0xc001ffa0,eax
c000112d:	39 fe                	cmp    esi,edi
c000112f:	c7 40 08 94 ff 01 c0 	mov    DWORD PTR [eax+0x8],0xc001ff94
c0001136:	75 0d                	jne    c0001145 <dlmalloc+0x151>
c0001138:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000113d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001140:	e9 35 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001145:	89 f8                	mov    eax,edi
c0001147:	81 ff ff 00 00 00    	cmp    edi,0xff
c000114d:	77 19                	ja     c0001168 <dlmalloc+0x174>
c000114f:	c1 e8 03             	shr    eax,0x3
c0001152:	8d 14 00             	lea    edx,[eax+eax*1]
c0001155:	83 c2 0d             	add    edx,0xd
c0001158:	8d 2c 95 58 ff 01 c0 	lea    ebp,[edx*4-0x3ffe00a8]
c000115f:	8b 14 95 60 ff 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe00a0]
c0001166:	eb 46                	jmp    c00011ae <dlmalloc+0x1ba>
c0001168:	e8 c1 f9 ff ff       	call   c0000b2e <largebin_index>
c000116d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001170:	83 c2 0d             	add    edx,0xd
c0001173:	8d 0c 95 60 ff 01 c0 	lea    ecx,[edx*4-0x3ffe00a0]
c000117a:	8b 14 95 60 ff 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe00a0]
c0001181:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001184:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001188:	89 d5                	mov    ebp,edx
c000118a:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000118e:	74 1e                	je     c00011ae <dlmalloc+0x1ba>
c0001190:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001193:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001196:	77 12                	ja     c00011aa <dlmalloc+0x1b6>
c0001198:	83 cf 01             	or     edi,0x1
c000119b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000119e:	76 05                	jbe    c00011a5 <dlmalloc+0x1b1>
c00011a0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011a3:	eb f6                	jmp    c000119b <dlmalloc+0x1a7>
c00011a5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011a8:	eb 04                	jmp    c00011ae <dlmalloc+0x1ba>
c00011aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ae:	89 c7                	mov    edi,eax
c00011b0:	88 c1                	mov    cl,al
c00011b2:	c1 ff 05             	sar    edi,0x5
c00011b5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011b9:	bf 01 00 00 00       	mov    edi,0x1
c00011be:	d3 e7                	shl    edi,cl
c00011c0:	89 f8                	mov    eax,edi
c00011c2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011c6:	09 04 bd 94 02 02 c0 	or     DWORD PTR [edi*4-0x3ffdfd6c],eax
c00011cd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011d0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011d3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011d6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011d9:	e9 db fe ff ff       	jmp    c00010b9 <dlmalloc+0xc5>
c00011de:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011e4:	76 78                	jbe    c000125e <dlmalloc+0x26a>
c00011e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00011ea:	8d 04 c5 94 ff 01 c0 	lea    eax,[eax*8-0x3ffe006c]
c00011f1:	8d 48 f8             	lea    ecx,[eax-0x8]
c00011f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00011f7:	39 ca                	cmp    edx,ecx
c00011f9:	74 63                	je     c000125e <dlmalloc+0x26a>
c00011fb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00011fe:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001201:	83 e3 fc             	and    ebx,0xfffffffc
c0001204:	39 de                	cmp    esi,ebx
c0001206:	77 52                	ja     c000125a <dlmalloc+0x266>
c0001208:	89 df                	mov    edi,ebx
c000120a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000120d:	29 f7                	sub    edi,esi
c000120f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001212:	01 d3                	add    ebx,edx
c0001214:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001217:	83 ff 0f             	cmp    edi,0xf
c000121a:	8d 42 08             	lea    eax,[edx+0x8]
c000121d:	77 09                	ja     c0001228 <dlmalloc+0x234>
c000121f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001223:	e9 52 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001228:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000122b:	83 ce 01             	or     esi,0x1
c000122e:	89 0d 9c ff 01 c0    	mov    DWORD PTR ds:0xc001ff9c,ecx
c0001234:	89 0d a0 ff 01 c0    	mov    DWORD PTR ds:0xc001ffa0,ecx
c000123a:	c7 41 08 94 ff 01 c0 	mov    DWORD PTR [ecx+0x8],0xc001ff94
c0001241:	c7 41 0c 94 ff 01 c0 	mov    DWORD PTR [ecx+0xc],0xc001ff94
c0001248:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000124b:	89 fa                	mov    edx,edi
c000124d:	83 ca 01             	or     edx,0x1
c0001250:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001253:	89 3b                	mov    DWORD PTR [ebx],edi
c0001255:	e9 20 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c000125a:	89 c2                	mov    edx,eax
c000125c:	eb 99                	jmp    c00011f7 <dlmalloc+0x203>
c000125e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001262:	b8 01 00 00 00       	mov    eax,0x1
c0001267:	41                   	inc    ecx
c0001268:	89 cb                	mov    ebx,ecx
c000126a:	8d 14 cd 8c ff 01 c0 	lea    edx,[ecx*8-0x3ffe0074]
c0001271:	c1 eb 05             	shr    ebx,0x5
c0001274:	d3 e0                	shl    eax,cl
c0001276:	8b 3c 9d 94 02 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdfd6c]
c000127d:	39 f8                	cmp    eax,edi
c000127f:	77 04                	ja     c0001285 <dlmalloc+0x291>
c0001281:	85 c0                	test   eax,eax
c0001283:	75 26                	jne    c00012ab <dlmalloc+0x2b7>
c0001285:	43                   	inc    ebx
c0001286:	83 fb 02             	cmp    ebx,0x2
c0001289:	0f 87 a6 00 00 00    	ja     c0001335 <dlmalloc+0x341>
c000128f:	8b 3c 9d 94 02 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdfd6c]
c0001296:	85 ff                	test   edi,edi
c0001298:	74 eb                	je     c0001285 <dlmalloc+0x291>
c000129a:	89 d8                	mov    eax,ebx
c000129c:	c1 e0 06             	shl    eax,0x6
c000129f:	8d 14 85 8c ff 01 c0 	lea    edx,[eax*4-0x3ffe0074]
c00012a6:	b8 01 00 00 00       	mov    eax,0x1
c00012ab:	85 f8                	test   eax,edi
c00012ad:	75 07                	jne    c00012b6 <dlmalloc+0x2c2>
c00012af:	83 c2 08             	add    edx,0x8
c00012b2:	01 c0                	add    eax,eax
c00012b4:	eb f5                	jmp    c00012ab <dlmalloc+0x2b7>
c00012b6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012b9:	39 ca                	cmp    edx,ecx
c00012bb:	75 14                	jne    c00012d1 <dlmalloc+0x2dd>
c00012bd:	89 c1                	mov    ecx,eax
c00012bf:	83 c2 08             	add    edx,0x8
c00012c2:	f7 d1                	not    ecx
c00012c4:	01 c0                	add    eax,eax
c00012c6:	21 cf                	and    edi,ecx
c00012c8:	89 3c 9d 94 02 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdfd6c],edi
c00012cf:	eb ac                	jmp    c000127d <dlmalloc+0x289>
c00012d1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012d4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012d7:	83 e0 fc             	and    eax,0xfffffffc
c00012da:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012dd:	89 c3                	mov    ebx,eax
c00012df:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00012e2:	29 f3                	sub    ebx,esi
c00012e4:	8d 14 01             	lea    edx,[ecx+eax*1]
c00012e7:	83 fb 0f             	cmp    ebx,0xf
c00012ea:	8d 41 08             	lea    eax,[ecx+0x8]
c00012ed:	77 09                	ja     c00012f8 <dlmalloc+0x304>
c00012ef:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00012f3:	e9 82 00 00 00       	jmp    c000137a <dlmalloc+0x386>
c00012f8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00012fb:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001301:	89 3d 9c ff 01 c0    	mov    DWORD PTR ds:0xc001ff9c,edi
c0001307:	89 3d a0 ff 01 c0    	mov    DWORD PTR ds:0xc001ffa0,edi
c000130d:	c7 47 08 94 ff 01 c0 	mov    DWORD PTR [edi+0x8],0xc001ff94
c0001314:	c7 47 0c 94 ff 01 c0 	mov    DWORD PTR [edi+0xc],0xc001ff94
c000131b:	77 06                	ja     c0001323 <dlmalloc+0x32f>
c000131d:	89 3d 90 ff 01 c0    	mov    DWORD PTR ds:0xc001ff90,edi
c0001323:	83 ce 01             	or     esi,0x1
c0001326:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001329:	89 d9                	mov    ecx,ebx
c000132b:	83 c9 01             	or     ecx,0x1
c000132e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001331:	89 1a                	mov    DWORD PTR [edx],ebx
c0001333:	eb 45                	jmp    c000137a <dlmalloc+0x386>
c0001335:	a1 8c ff 01 c0       	mov    eax,ds:0xc001ff8c
c000133a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000133d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001340:	83 e2 fc             	and    edx,0xfffffffc
c0001343:	39 d1                	cmp    ecx,edx
c0001345:	77 1e                	ja     c0001365 <dlmalloc+0x371>
c0001347:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000134a:	89 f3                	mov    ebx,esi
c000134c:	89 0d 8c ff 01 c0    	mov    DWORD PTR ds:0xc001ff8c,ecx
c0001352:	83 cb 01             	or     ebx,0x1
c0001355:	29 f2                	sub    edx,esi
c0001357:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000135a:	83 ca 01             	or     edx,0x1
c000135d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001360:	e9 2d fd ff ff       	jmp    c0001092 <dlmalloc+0x9e>
c0001365:	83 c4 1c             	add    esp,0x1c
c0001368:	89 f0                	mov    eax,esi
c000136a:	5b                   	pop    ebx
c000136b:	ba 60 ff 01 c0       	mov    edx,0xc001ff60
c0001370:	5e                   	pop    esi
c0001371:	5f                   	pop    edi
c0001372:	5d                   	pop    ebp
c0001373:	e9 16 fa ff ff       	jmp    c0000d8e <sYSMALLOc>
c0001378:	31 c0                	xor    eax,eax
c000137a:	83 c4 1c             	add    esp,0x1c
c000137d:	5b                   	pop    ebx
c000137e:	5e                   	pop    esi
c000137f:	5f                   	pop    edi
c0001380:	5d                   	pop    ebp
c0001381:	c3                   	ret    

c0001382 <iALLOc>:
c0001382:	55                   	push   ebp
c0001383:	89 c5                	mov    ebp,eax
c0001385:	57                   	push   edi
c0001386:	56                   	push   esi
c0001387:	53                   	push   ebx
c0001388:	83 ec 2c             	sub    esp,0x2c
c000138b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000138f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001393:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001397:	83 3d 60 ff 01 c0 00 	cmp    DWORD PTR ds:0xc001ff60,0x0
c000139e:	75 12                	jne    c00013b2 <iALLOc+0x30>
c00013a0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013a4:	b8 60 ff 01 c0       	mov    eax,0xc001ff60
c00013a9:	e8 04 f8 ff ff       	call   c0000bb2 <malloc_consolidate>
c00013ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013b2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013b7:	74 12                	je     c00013cb <iALLOc+0x49>
c00013b9:	85 ed                	test   ebp,ebp
c00013bb:	0f 84 64 01 00 00    	je     c0001525 <iALLOc+0x1a3>
c00013c1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013c9:	eb 33                	jmp    c00013fe <iALLOc+0x7c>
c00013cb:	85 ed                	test   ebp,ebp
c00013cd:	75 14                	jne    c00013e3 <iALLOc+0x61>
c00013cf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013d7:	83 c4 2c             	add    esp,0x2c
c00013da:	5b                   	pop    ebx
c00013db:	5e                   	pop    esi
c00013dc:	5f                   	pop    edi
c00013dd:	5d                   	pop    ebp
c00013de:	e9 11 fc ff ff       	jmp    c0000ff4 <dlmalloc>
c00013e3:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00013ea:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00013f2:	83 f8 0f             	cmp    eax,0xf
c00013f5:	76 07                	jbe    c00013fe <iALLOc+0x7c>
c00013f7:	83 e0 f8             	and    eax,0xfffffff8
c00013fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00013fe:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001403:	75 09                	jne    c000140e <iALLOc+0x8c>
c0001405:	89 d0                	mov    eax,edx
c0001407:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000140a:	31 f6                	xor    esi,esi
c000140c:	eb 3b                	jmp    c0001449 <iALLOc+0xc7>
c000140e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001410:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001418:	83 c0 0b             	add    eax,0xb
c000141b:	83 f8 0f             	cmp    eax,0xf
c000141e:	76 07                	jbe    c0001427 <iALLOc+0xa5>
c0001420:	83 e0 f8             	and    eax,0xfffffff8
c0001423:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001427:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000142b:	0f af f5             	imul   esi,ebp
c000142e:	eb 25                	jmp    c0001455 <iALLOc+0xd3>
c0001430:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001432:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001435:	bb 10 00 00 00       	mov    ebx,0x10
c000143a:	83 f9 0f             	cmp    ecx,0xf
c000143d:	76 05                	jbe    c0001444 <iALLOc+0xc2>
c000143f:	83 e1 f8             	and    ecx,0xfffffff8
c0001442:	89 cb                	mov    ebx,ecx
c0001444:	01 de                	add    esi,ebx
c0001446:	83 c0 04             	add    eax,0x4
c0001449:	39 c7                	cmp    edi,eax
c000144b:	75 e3                	jne    c0001430 <iALLOc+0xae>
c000144d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001455:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001459:	8b 1d b4 02 02 c0    	mov    ebx,DWORD PTR ds:0xc00202b4
c000145f:	83 ec 0c             	sub    esp,0xc
c0001462:	c7 05 b4 02 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00202b4,0x0
c000146c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001470:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001474:	50                   	push   eax
c0001475:	e8 7a fb ff ff       	call   c0000ff4 <dlmalloc>
c000147a:	83 c4 10             	add    esp,0x10
c000147d:	89 1d b4 02 02 c0    	mov    DWORD PTR ds:0xc00202b4,ebx
c0001483:	85 c0                	test   eax,eax
c0001485:	0f 84 92 00 00 00    	je     c000151d <iALLOc+0x19b>
c000148b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000148e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001491:	83 e3 fc             	and    ebx,0xfffffffc
c0001494:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001498:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000149d:	74 1e                	je     c00014bd <iALLOc+0x13b>
c000149f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014a3:	89 d9                	mov    ecx,ebx
c00014a5:	52                   	push   edx
c00014a6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014aa:	83 e9 04             	sub    ecx,0x4
c00014ad:	51                   	push   ecx
c00014ae:	6a 00                	push   0x0
c00014b0:	50                   	push   eax
c00014b1:	e8 1a f0 ff ff       	call   c00004d0 <memset>
c00014b6:	83 c4 10             	add    esp,0x10
c00014b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014bd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014c2:	75 14                	jne    c00014d8 <iALLOc+0x156>
c00014c4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014c7:	29 f3                	sub    ebx,esi
c00014c9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014cc:	83 cb 01             	or     ebx,0x1
c00014cf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014d3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014d6:	89 f3                	mov    ebx,esi
c00014d8:	31 c0                	xor    eax,eax
c00014da:	4d                   	dec    ebp
c00014db:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014de:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00014e2:	39 c5                	cmp    ebp,eax
c00014e4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00014e7:	74 2c                	je     c0001515 <iALLOc+0x193>
c00014e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00014ed:	85 c9                	test   ecx,ecx
c00014ef:	75 15                	jne    c0001506 <iALLOc+0x184>
c00014f1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00014f4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00014f7:	b9 10 00 00 00       	mov    ecx,0x10
c00014fc:	83 fe 0f             	cmp    esi,0xf
c00014ff:	76 05                	jbe    c0001506 <iALLOc+0x184>
c0001501:	83 e6 f8             	and    esi,0xfffffff8
c0001504:	89 f1                	mov    ecx,esi
c0001506:	89 ce                	mov    esi,ecx
c0001508:	29 cb                	sub    ebx,ecx
c000150a:	83 ce 01             	or     esi,0x1
c000150d:	40                   	inc    eax
c000150e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001511:	01 cf                	add    edi,ecx
c0001513:	eb c6                	jmp    c00014db <iALLOc+0x159>
c0001515:	83 cb 01             	or     ebx,0x1
c0001518:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000151b:	eb 08                	jmp    c0001525 <iALLOc+0x1a3>
c000151d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001525:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001529:	83 c4 2c             	add    esp,0x2c
c000152c:	5b                   	pop    ebx
c000152d:	5e                   	pop    esi
c000152e:	5f                   	pop    edi
c000152f:	5d                   	pop    ebp
c0001530:	c3                   	ret    

c0001531 <dlrealloc>:
c0001531:	55                   	push   ebp
c0001532:	57                   	push   edi
c0001533:	56                   	push   esi
c0001534:	53                   	push   ebx
c0001535:	83 ec 1c             	sub    esp,0x1c
c0001538:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000153c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001540:	85 db                	test   ebx,ebx
c0001542:	75 10                	jne    c0001554 <dlrealloc+0x23>
c0001544:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001548:	83 c4 1c             	add    esp,0x1c
c000154b:	5b                   	pop    ebx
c000154c:	5e                   	pop    esi
c000154d:	5f                   	pop    edi
c000154e:	5d                   	pop    ebp
c000154f:	e9 a0 fa ff ff       	jmp    c0000ff4 <dlmalloc>
c0001554:	83 f8 df             	cmp    eax,0xffffffdf
c0001557:	76 07                	jbe    c0001560 <dlrealloc+0x2f>
c0001559:	31 db                	xor    ebx,ebx
c000155b:	e9 6a 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c0001560:	83 c0 0b             	add    eax,0xb
c0001563:	bd 10 00 00 00       	mov    ebp,0x10
c0001568:	83 f8 0f             	cmp    eax,0xf
c000156b:	76 05                	jbe    c0001572 <dlrealloc+0x41>
c000156d:	83 e0 f8             	and    eax,0xfffffff8
c0001570:	89 c5                	mov    ebp,eax
c0001572:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001575:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001578:	89 c6                	mov    esi,eax
c000157a:	83 e6 fc             	and    esi,0xfffffffc
c000157d:	a8 02                	test   al,0x2
c000157f:	75 d8                	jne    c0001559 <dlrealloc+0x28>
c0001581:	39 f5                	cmp    ebp,esi
c0001583:	0f 86 04 01 00 00    	jbe    c000168d <dlrealloc+0x15c>
c0001589:	8d 14 37             	lea    edx,[edi+esi*1]
c000158c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000158f:	39 15 8c ff 01 c0    	cmp    DWORD PTR ds:0xc001ff8c,edx
c0001595:	75 33                	jne    c00015ca <dlrealloc+0x99>
c0001597:	83 e1 fc             	and    ecx,0xfffffffc
c000159a:	01 f1                	add    ecx,esi
c000159c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015a0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015a3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015a7:	77 49                	ja     c00015f2 <dlrealloc+0xc1>
c00015a9:	01 ef                	add    edi,ebp
c00015ab:	83 e0 01             	and    eax,0x1
c00015ae:	09 e8                	or     eax,ebp
c00015b0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015b3:	89 3d 8c ff 01 c0    	mov    DWORD PTR ds:0xc001ff8c,edi
c00015b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015bd:	29 e8                	sub    eax,ebp
c00015bf:	83 c8 01             	or     eax,0x1
c00015c2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015c5:	e9 00 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c00015ca:	89 c8                	mov    eax,ecx
c00015cc:	83 e0 fe             	and    eax,0xfffffffe
c00015cf:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015d4:	75 1c                	jne    c00015f2 <dlrealloc+0xc1>
c00015d6:	83 e1 fc             	and    ecx,0xfffffffc
c00015d9:	01 f1                	add    ecx,esi
c00015db:	39 cd                	cmp    ebp,ecx
c00015dd:	77 13                	ja     c00015f2 <dlrealloc+0xc1>
c00015df:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00015e2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00015e5:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00015e8:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00015eb:	89 ce                	mov    esi,ecx
c00015ed:	e9 9b 00 00 00       	jmp    c000168d <dlrealloc+0x15c>
c00015f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00015f6:	8d 45 f9             	lea    eax,[ebp-0x7]
c00015f9:	83 ec 0c             	sub    esp,0xc
c00015fc:	50                   	push   eax
c00015fd:	e8 f2 f9 ff ff       	call   c0000ff4 <dlmalloc>
c0001602:	83 c4 10             	add    esp,0x10
c0001605:	85 c0                	test   eax,eax
c0001607:	0f 84 4c ff ff ff    	je     c0001559 <dlrealloc+0x28>
c000160d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001610:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001614:	39 ca                	cmp    edx,ecx
c0001616:	75 0a                	jne    c0001622 <dlrealloc+0xf1>
c0001618:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000161b:	83 e0 fc             	and    eax,0xfffffffc
c000161e:	01 c6                	add    esi,eax
c0001620:	eb 6b                	jmp    c000168d <dlrealloc+0x15c>
c0001622:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001625:	83 f9 27             	cmp    ecx,0x27
c0001628:	76 08                	jbe    c0001632 <dlrealloc+0x101>
c000162a:	89 de                	mov    esi,ebx
c000162c:	89 c7                	mov    edi,eax
c000162e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001630:	eb 43                	jmp    c0001675 <dlrealloc+0x144>
c0001632:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001634:	83 f9 13             	cmp    ecx,0x13
c0001637:	89 10                	mov    DWORD PTR [eax],edx
c0001639:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000163c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000163f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001642:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001645:	76 2e                	jbe    c0001675 <dlrealloc+0x144>
c0001647:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000164a:	83 f9 1b             	cmp    ecx,0x1b
c000164d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001650:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001653:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001656:	76 1d                	jbe    c0001675 <dlrealloc+0x144>
c0001658:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000165b:	83 f9 23             	cmp    ecx,0x23
c000165e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001661:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001664:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001667:	76 0c                	jbe    c0001675 <dlrealloc+0x144>
c0001669:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000166c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000166f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001672:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001675:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001679:	83 ec 0c             	sub    esp,0xc
c000167c:	53                   	push   ebx
c000167d:	e8 17 f6 ff ff       	call   c0000c99 <dlfree>
c0001682:	83 c4 10             	add    esp,0x10
c0001685:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001689:	89 c3                	mov    ebx,eax
c000168b:	eb 3d                	jmp    c00016ca <dlrealloc+0x199>
c000168d:	89 f2                	mov    edx,esi
c000168f:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001692:	29 ea                	sub    edx,ebp
c0001694:	83 e1 01             	and    ecx,0x1
c0001697:	8d 04 37             	lea    eax,[edi+esi*1]
c000169a:	83 fa 0f             	cmp    edx,0xf
c000169d:	77 0b                	ja     c00016aa <dlrealloc+0x179>
c000169f:	09 ce                	or     esi,ecx
c00016a1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016a4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016a8:	eb 20                	jmp    c00016ca <dlrealloc+0x199>
c00016aa:	01 ef                	add    edi,ebp
c00016ac:	83 ec 0c             	sub    esp,0xc
c00016af:	09 cd                	or     ebp,ecx
c00016b1:	83 ca 01             	or     edx,0x1
c00016b4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016b7:	83 c7 08             	add    edi,0x8
c00016ba:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016bd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c1:	57                   	push   edi
c00016c2:	e8 d2 f5 ff ff       	call   c0000c99 <dlfree>
c00016c7:	83 c4 10             	add    esp,0x10
c00016ca:	83 c4 1c             	add    esp,0x1c
c00016cd:	89 d8                	mov    eax,ebx
c00016cf:	5b                   	pop    ebx
c00016d0:	5e                   	pop    esi
c00016d1:	5f                   	pop    edi
c00016d2:	5d                   	pop    ebp
c00016d3:	c3                   	ret    

c00016d4 <dlmemalign>:
c00016d4:	55                   	push   ebp
c00016d5:	57                   	push   edi
c00016d6:	56                   	push   esi
c00016d7:	53                   	push   ebx
c00016d8:	83 ec 0c             	sub    esp,0xc
c00016db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00016e3:	83 fa 08             	cmp    edx,0x8
c00016e6:	77 10                	ja     c00016f8 <dlmemalign+0x24>
c00016e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00016ec:	83 c4 0c             	add    esp,0xc
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	e9 fc f8 ff ff       	jmp    c0000ff4 <dlmalloc>
c00016f8:	bf 10 00 00 00       	mov    edi,0x10
c00016fd:	83 fa 0f             	cmp    edx,0xf
c0001700:	76 13                	jbe    c0001715 <dlmemalign+0x41>
c0001702:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001705:	85 d1                	test   ecx,edx
c0001707:	75 04                	jne    c000170d <dlmemalign+0x39>
c0001709:	89 d7                	mov    edi,edx
c000170b:	eb 08                	jmp    c0001715 <dlmemalign+0x41>
c000170d:	39 d7                	cmp    edi,edx
c000170f:	73 04                	jae    c0001715 <dlmemalign+0x41>
c0001711:	01 ff                	add    edi,edi
c0001713:	eb f8                	jmp    c000170d <dlmemalign+0x39>
c0001715:	83 f8 df             	cmp    eax,0xffffffdf
c0001718:	76 07                	jbe    c0001721 <dlmemalign+0x4d>
c000171a:	31 c0                	xor    eax,eax
c000171c:	e9 ce 00 00 00       	jmp    c00017ef <dlmemalign+0x11b>
c0001721:	83 c0 0b             	add    eax,0xb
c0001724:	bd 10 00 00 00       	mov    ebp,0x10
c0001729:	83 f8 0f             	cmp    eax,0xf
c000172c:	76 05                	jbe    c0001733 <dlmemalign+0x5f>
c000172e:	83 e0 f8             	and    eax,0xfffffff8
c0001731:	89 c5                	mov    ebp,eax
c0001733:	83 ec 0c             	sub    esp,0xc
c0001736:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000173a:	50                   	push   eax
c000173b:	e8 b4 f8 ff ff       	call   c0000ff4 <dlmalloc>
c0001740:	83 c4 10             	add    esp,0x10
c0001743:	89 c1                	mov    ecx,eax
c0001745:	85 c0                	test   eax,eax
c0001747:	74 d1                	je     c000171a <dlmemalign+0x46>
c0001749:	31 d2                	xor    edx,edx
c000174b:	8d 70 f8             	lea    esi,[eax-0x8]
c000174e:	f7 f7                	div    edi
c0001750:	85 d2                	test   edx,edx
c0001752:	74 62                	je     c00017b6 <dlmemalign+0xe2>
c0001754:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001758:	89 f8                	mov    eax,edi
c000175a:	f7 d8                	neg    eax
c000175c:	21 c3                	and    ebx,eax
c000175e:	83 eb 08             	sub    ebx,0x8
c0001761:	89 d8                	mov    eax,ebx
c0001763:	29 f0                	sub    eax,esi
c0001765:	83 f8 0f             	cmp    eax,0xf
c0001768:	77 02                	ja     c000176c <dlmemalign+0x98>
c000176a:	01 fb                	add    ebx,edi
c000176c:	89 d8                	mov    eax,ebx
c000176e:	29 f0                	sub    eax,esi
c0001770:	89 c6                	mov    esi,eax
c0001772:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001775:	89 c2                	mov    edx,eax
c0001777:	83 e2 fc             	and    edx,0xfffffffc
c000177a:	29 f2                	sub    edx,esi
c000177c:	a8 02                	test   al,0x2
c000177e:	74 10                	je     c0001790 <dlmemalign+0xbc>
c0001780:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001783:	83 ca 02             	or     edx,0x2
c0001786:	8d 43 08             	lea    eax,[ebx+0x8]
c0001789:	89 33                	mov    DWORD PTR [ebx],esi
c000178b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000178e:	eb 5f                	jmp    c00017ef <dlmemalign+0x11b>
c0001790:	83 ec 0c             	sub    esp,0xc
c0001793:	89 d0                	mov    eax,edx
c0001795:	83 c8 01             	or     eax,0x1
c0001798:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000179b:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017a0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a3:	83 e0 01             	and    eax,0x1
c00017a6:	09 f0                	or     eax,esi
c00017a8:	89 de                	mov    esi,ebx
c00017aa:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017ad:	51                   	push   ecx
c00017ae:	e8 e6 f4 ff ff       	call   c0000c99 <dlfree>
c00017b3:	83 c4 10             	add    esp,0x10
c00017b6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017b9:	a8 02                	test   al,0x2
c00017bb:	75 2f                	jne    c00017ec <dlmemalign+0x118>
c00017bd:	83 e0 fc             	and    eax,0xfffffffc
c00017c0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017c3:	39 c2                	cmp    edx,eax
c00017c5:	73 25                	jae    c00017ec <dlmemalign+0x118>
c00017c7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ca:	83 ec 0c             	sub    esp,0xc
c00017cd:	29 e8                	sub    eax,ebp
c00017cf:	83 c2 08             	add    edx,0x8
c00017d2:	83 c8 01             	or     eax,0x1
c00017d5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017d8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017db:	83 e0 01             	and    eax,0x1
c00017de:	09 c5                	or     ebp,eax
c00017e0:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00017e3:	52                   	push   edx
c00017e4:	e8 b0 f4 ff ff       	call   c0000c99 <dlfree>
c00017e9:	83 c4 10             	add    esp,0x10
c00017ec:	8d 46 08             	lea    eax,[esi+0x8]
c00017ef:	83 c4 0c             	add    esp,0xc
c00017f2:	5b                   	pop    ebx
c00017f3:	5e                   	pop    esi
c00017f4:	5f                   	pop    edi
c00017f5:	5d                   	pop    ebp
c00017f6:	c3                   	ret    

c00017f7 <dlcalloc>:
c00017f7:	53                   	push   ebx
c00017f8:	83 ec 14             	sub    esp,0x14
c00017fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00017ff:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001804:	50                   	push   eax
c0001805:	e8 ea f7 ff ff       	call   c0000ff4 <dlmalloc>
c000180a:	83 c4 10             	add    esp,0x10
c000180d:	89 c3                	mov    ebx,eax
c000180f:	85 c0                	test   eax,eax
c0001811:	74 77                	je     c000188a <dlcalloc+0x93>
c0001813:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001816:	89 d0                	mov    eax,edx
c0001818:	83 e0 fc             	and    eax,0xfffffffc
c000181b:	80 e2 02             	and    dl,0x2
c000181e:	75 5a                	jne    c000187a <dlcalloc+0x83>
c0001820:	83 e8 04             	sub    eax,0x4
c0001823:	83 f8 27             	cmp    eax,0x27
c0001826:	76 03                	jbe    c000182b <dlcalloc+0x34>
c0001828:	51                   	push   ecx
c0001829:	eb 53                	jmp    c000187e <dlcalloc+0x87>
c000182b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001831:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001838:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000183f:	83 f8 13             	cmp    eax,0x13
c0001842:	76 46                	jbe    c000188a <dlcalloc+0x93>
c0001844:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000184b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001852:	83 f8 1b             	cmp    eax,0x1b
c0001855:	76 33                	jbe    c000188a <dlcalloc+0x93>
c0001857:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000185e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001865:	83 f8 23             	cmp    eax,0x23
c0001868:	76 20                	jbe    c000188a <dlcalloc+0x93>
c000186a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001871:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001878:	eb 10                	jmp    c000188a <dlcalloc+0x93>
c000187a:	83 e8 08             	sub    eax,0x8
c000187d:	52                   	push   edx
c000187e:	50                   	push   eax
c000187f:	6a 00                	push   0x0
c0001881:	53                   	push   ebx
c0001882:	e8 49 ec ff ff       	call   c00004d0 <memset>
c0001887:	83 c4 10             	add    esp,0x10
c000188a:	89 d8                	mov    eax,ebx
c000188c:	83 c4 08             	add    esp,0x8
c000188f:	5b                   	pop    ebx
c0001890:	c3                   	ret    

c0001891 <dlcfree>:
c0001891:	e9 03 f4 ff ff       	jmp    c0000c99 <dlfree>

c0001896 <dlindependent_calloc>:
c0001896:	83 ec 28             	sub    esp,0x28
c0001899:	b9 03 00 00 00       	mov    ecx,0x3
c000189e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018aa:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018b2:	e8 cb fa ff ff       	call   c0001382 <iALLOc>
c00018b7:	83 c4 2c             	add    esp,0x2c
c00018ba:	c3                   	ret    

c00018bb <dlindependent_comalloc>:
c00018bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018c3:	31 c9                	xor    ecx,ecx
c00018c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018cd:	e9 b0 fa ff ff       	jmp    c0001382 <iALLOc>

c00018d2 <dlvalloc>:
c00018d2:	83 ec 0c             	sub    esp,0xc
c00018d5:	83 3d 60 ff 01 c0 00 	cmp    DWORD PTR ds:0xc001ff60,0x0
c00018dc:	75 0a                	jne    c00018e8 <dlvalloc+0x16>
c00018de:	b8 60 ff 01 c0       	mov    eax,0xc001ff60
c00018e3:	e8 ca f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c00018e8:	50                   	push   eax
c00018e9:	50                   	push   eax
c00018ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00018ee:	ff 35 bc 02 02 c0    	push   DWORD PTR ds:0xc00202bc
c00018f4:	e8 db fd ff ff       	call   c00016d4 <dlmemalign>
c00018f9:	83 c4 1c             	add    esp,0x1c
c00018fc:	c3                   	ret    

c00018fd <dlpvalloc>:
c00018fd:	83 ec 0c             	sub    esp,0xc
c0001900:	83 3d 60 ff 01 c0 00 	cmp    DWORD PTR ds:0xc001ff60,0x0
c0001907:	75 0a                	jne    c0001913 <dlpvalloc+0x16>
c0001909:	b8 60 ff 01 c0       	mov    eax,0xc001ff60
c000190e:	e8 9f f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001913:	a1 bc 02 02 c0       	mov    eax,ds:0xc00202bc
c0001918:	89 c1                	mov    ecx,eax
c000191a:	52                   	push   edx
c000191b:	f7 d9                	neg    ecx
c000191d:	52                   	push   edx
c000191e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001922:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001926:	21 ca                	and    edx,ecx
c0001928:	52                   	push   edx
c0001929:	50                   	push   eax
c000192a:	e8 a5 fd ff ff       	call   c00016d4 <dlmemalign>
c000192f:	83 c4 1c             	add    esp,0x1c
c0001932:	c3                   	ret    

c0001933 <dlmalloc_trim>:
c0001933:	b8 60 ff 01 c0       	mov    eax,0xc001ff60
c0001938:	e8 75 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000193d:	31 c0                	xor    eax,eax
c000193f:	c3                   	ret    

c0001940 <dlmalloc_usable_size>:
c0001940:	53                   	push   ebx
c0001941:	31 c0                	xor    eax,eax
c0001943:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001947:	85 c9                	test   ecx,ecx
c0001949:	74 24                	je     c000196f <dlmalloc_usable_size+0x2f>
c000194b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000194e:	f6 c2 02             	test   dl,0x2
c0001951:	74 08                	je     c000195b <dlmalloc_usable_size+0x1b>
c0001953:	83 e2 fc             	and    edx,0xfffffffc
c0001956:	8d 42 f8             	lea    eax,[edx-0x8]
c0001959:	eb 14                	jmp    c000196f <dlmalloc_usable_size+0x2f>
c000195b:	89 d3                	mov    ebx,edx
c000195d:	31 c0                	xor    eax,eax
c000195f:	83 e3 fe             	and    ebx,0xfffffffe
c0001962:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001967:	74 06                	je     c000196f <dlmalloc_usable_size+0x2f>
c0001969:	83 e2 fc             	and    edx,0xfffffffc
c000196c:	8d 42 fc             	lea    eax,[edx-0x4]
c000196f:	5b                   	pop    ebx
c0001970:	c3                   	ret    

c0001971 <dlmallinfo>:
c0001971:	55                   	push   ebp
c0001972:	57                   	push   edi
c0001973:	56                   	push   esi
c0001974:	53                   	push   ebx
c0001975:	83 ec 08             	sub    esp,0x8
c0001978:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000197c:	83 3d 8c ff 01 c0 00 	cmp    DWORD PTR ds:0xc001ff8c,0x0
c0001983:	75 0a                	jne    c000198f <dlmallinfo+0x1e>
c0001985:	b8 60 ff 01 c0       	mov    eax,0xc001ff60
c000198a:	e8 23 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000198f:	a1 8c ff 01 c0       	mov    eax,ds:0xc001ff8c
c0001994:	31 ed                	xor    ebp,ebp
c0001996:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001999:	31 c9                	xor    ecx,ecx
c000199b:	83 e0 fc             	and    eax,0xfffffffc
c000199e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019a2:	31 c0                	xor    eax,eax
c00019a4:	8b 14 85 64 ff 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe009c]
c00019ab:	85 d2                	test   edx,edx
c00019ad:	74 0e                	je     c00019bd <dlmallinfo+0x4c>
c00019af:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019b2:	45                   	inc    ebp
c00019b3:	83 e6 fc             	and    esi,0xfffffffc
c00019b6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019b9:	01 f1                	add    ecx,esi
c00019bb:	eb ee                	jmp    c00019ab <dlmallinfo+0x3a>
c00019bd:	40                   	inc    eax
c00019be:	83 f8 0a             	cmp    eax,0xa
c00019c1:	75 e1                	jne    c00019a4 <dlmallinfo+0x33>
c00019c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019c7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ce:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019d1:	b8 94 ff 01 c0       	mov    eax,0xc001ff94
c00019d6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019d9:	39 f0                	cmp    eax,esi
c00019db:	74 10                	je     c00019ed <dlmallinfo+0x7c>
c00019dd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00019e0:	ff 04 24             	inc    DWORD PTR [esp]
c00019e3:	83 e7 fc             	and    edi,0xfffffffc
c00019e6:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00019e9:	01 fa                	add    edx,edi
c00019eb:	eb ec                	jmp    c00019d9 <dlmallinfo+0x68>
c00019ed:	83 c0 08             	add    eax,0x8
c00019f0:	3d 8c 02 02 c0       	cmp    eax,0xc002028c
c00019f5:	75 df                	jne    c00019d6 <dlmallinfo+0x65>
c00019f7:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00019fa:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00019fd:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a00:	a1 c8 02 02 c0       	mov    eax,ds:0xc00202c8
c0001a05:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a08:	89 03                	mov    DWORD PTR [ebx],eax
c0001a0a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a0d:	8b 35 b0 02 02 c0    	mov    esi,DWORD PTR ds:0xc00202b0
c0001a13:	29 d0                	sub    eax,edx
c0001a15:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a18:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a1b:	8b 35 c4 02 02 c0    	mov    esi,DWORD PTR ds:0xc00202c4
c0001a21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a25:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a28:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a2b:	8b 35 d4 02 02 c0    	mov    esi,DWORD PTR ds:0xc00202d4
c0001a31:	89 d8                	mov    eax,ebx
c0001a33:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a36:	83 c4 08             	add    esp,0x8
c0001a39:	5b                   	pop    ebx
c0001a3a:	5e                   	pop    esi
c0001a3b:	5f                   	pop    edi
c0001a3c:	5d                   	pop    ebp
c0001a3d:	c2 04 00             	ret    0x4

c0001a40 <dlmalloc_stats>:
c0001a40:	83 ec 30             	sub    esp,0x30
c0001a43:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a47:	50                   	push   eax
c0001a48:	e8 24 ff ff ff       	call   c0001971 <dlmallinfo>
c0001a4d:	83 c4 30             	add    esp,0x30
c0001a50:	c3                   	ret    

c0001a51 <dlmallopt>:
c0001a51:	56                   	push   esi
c0001a52:	b8 60 ff 01 c0       	mov    eax,0xc001ff60
c0001a57:	53                   	push   ebx
c0001a58:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a60:	e8 4d f1 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001a65:	8d 46 04             	lea    eax,[esi+0x4]
c0001a68:	83 f8 05             	cmp    eax,0x5
c0001a6b:	77 67                	ja     c0001ad4 <dlmallopt+0x83>
c0001a6d:	ff 24 85 e4 cf 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe301c]
c0001a74:	83 fb 50             	cmp    ebx,0x50
c0001a77:	77 5b                	ja     c0001ad4 <dlmallopt+0x83>
c0001a79:	ba 08 00 00 00       	mov    edx,0x8
c0001a7e:	85 db                	test   ebx,ebx
c0001a80:	74 12                	je     c0001a94 <dlmallopt+0x43>
c0001a82:	83 c3 0b             	add    ebx,0xb
c0001a85:	ba 10 00 00 00       	mov    edx,0x10
c0001a8a:	83 fb 0f             	cmp    ebx,0xf
c0001a8d:	76 05                	jbe    c0001a94 <dlmallopt+0x43>
c0001a8f:	89 da                	mov    edx,ebx
c0001a91:	83 e2 f8             	and    edx,0xfffffff8
c0001a94:	a1 60 ff 01 c0       	mov    eax,ds:0xc001ff60
c0001a99:	83 e0 03             	and    eax,0x3
c0001a9c:	09 d0                	or     eax,edx
c0001a9e:	a3 60 ff 01 c0       	mov    ds:0xc001ff60,eax
c0001aa3:	eb 31                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aa5:	89 1d a4 02 02 c0    	mov    DWORD PTR ds:0xc00202a4,ebx
c0001aab:	eb 06                	jmp    c0001ab3 <dlmallopt+0x62>
c0001aad:	89 1d a8 02 02 c0    	mov    DWORD PTR ds:0xc00202a8,ebx
c0001ab3:	be 01 00 00 00       	mov    esi,0x1
c0001ab8:	eb 1c                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aba:	89 1d ac 02 02 c0    	mov    DWORD PTR ds:0xc00202ac,ebx
c0001ac0:	eb f1                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ac2:	31 f6                	xor    esi,esi
c0001ac4:	85 db                	test   ebx,ebx
c0001ac6:	75 0e                	jne    c0001ad6 <dlmallopt+0x85>
c0001ac8:	c7 05 b4 02 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00202b4,0x0
c0001ad2:	eb df                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ad4:	31 f6                	xor    esi,esi
c0001ad6:	89 f0                	mov    eax,esi
c0001ad8:	5b                   	pop    ebx
c0001ad9:	5e                   	pop    esi
c0001ada:	c3                   	ret    
c0001adb:	90                   	nop

c0001adc <isblank>:
c0001adc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ae1:	74 09                	je     c0001aec <isblank+0x10>
c0001ae3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ae8:	75 0a                	jne    c0001af4 <isblank+0x18>
c0001aea:	66 90                	xchg   ax,ax
c0001aec:	b8 01 00 00 00       	mov    eax,0x1
c0001af1:	c3                   	ret    
c0001af2:	66 90                	xchg   ax,ax
c0001af4:	b8 00 00 00 00       	mov    eax,0x0
c0001af9:	c3                   	ret    
c0001afa:	66 90                	xchg   ax,ax

c0001afc <iscntrl>:
c0001afc:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b01:	7e 09                	jle    c0001b0c <iscntrl+0x10>
c0001b03:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b08:	75 0a                	jne    c0001b14 <iscntrl+0x18>
c0001b0a:	66 90                	xchg   ax,ax
c0001b0c:	b8 01 00 00 00       	mov    eax,0x1
c0001b11:	c3                   	ret    
c0001b12:	66 90                	xchg   ax,ax
c0001b14:	b8 00 00 00 00       	mov    eax,0x0
c0001b19:	c3                   	ret    
c0001b1a:	66 90                	xchg   ax,ax

c0001b1c <isdigit>:
c0001b1c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b21:	7e 0d                	jle    c0001b30 <isdigit+0x14>
c0001b23:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b28:	7f 06                	jg     c0001b30 <isdigit+0x14>
c0001b2a:	b8 01 00 00 00       	mov    eax,0x1
c0001b2f:	c3                   	ret    
c0001b30:	b8 00 00 00 00       	mov    eax,0x0
c0001b35:	c3                   	ret    
c0001b36:	66 90                	xchg   ax,ax

c0001b38 <islower>:
c0001b38:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b3d:	7e 0d                	jle    c0001b4c <islower+0x14>
c0001b3f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b44:	7f 06                	jg     c0001b4c <islower+0x14>
c0001b46:	b8 01 00 00 00       	mov    eax,0x1
c0001b4b:	c3                   	ret    
c0001b4c:	b8 00 00 00 00       	mov    eax,0x0
c0001b51:	c3                   	ret    
c0001b52:	66 90                	xchg   ax,ax

c0001b54 <isspace>:
c0001b54:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b59:	7c 19                	jl     c0001b74 <isspace+0x20>
c0001b5b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b60:	7e 0a                	jle    c0001b6c <isspace+0x18>
c0001b62:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b67:	75 0b                	jne    c0001b74 <isspace+0x20>
c0001b69:	8d 76 00             	lea    esi,[esi+0x0]
c0001b6c:	b8 01 00 00 00       	mov    eax,0x1
c0001b71:	c3                   	ret    
c0001b72:	66 90                	xchg   ax,ax
c0001b74:	b8 00 00 00 00       	mov    eax,0x0
c0001b79:	c3                   	ret    
c0001b7a:	66 90                	xchg   ax,ax

c0001b7c <isupper>:
c0001b7c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001b81:	7e 0d                	jle    c0001b90 <isupper+0x14>
c0001b83:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001b88:	7f 06                	jg     c0001b90 <isupper+0x14>
c0001b8a:	b8 01 00 00 00       	mov    eax,0x1
c0001b8f:	c3                   	ret    
c0001b90:	b8 00 00 00 00       	mov    eax,0x0
c0001b95:	c3                   	ret    
c0001b96:	66 90                	xchg   ax,ax

c0001b98 <isalpha>:
c0001b98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001b9c:	e8 db ff ff ff       	call   c0001b7c <isupper>
c0001ba1:	83 c4 04             	add    esp,0x4
c0001ba4:	85 c0                	test   eax,eax
c0001ba6:	75 10                	jne    c0001bb8 <isalpha+0x20>
c0001ba8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bac:	e8 87 ff ff ff       	call   c0001b38 <islower>
c0001bb1:	83 c4 04             	add    esp,0x4
c0001bb4:	85 c0                	test   eax,eax
c0001bb6:	74 08                	je     c0001bc0 <isalpha+0x28>
c0001bb8:	b8 01 00 00 00       	mov    eax,0x1
c0001bbd:	c3                   	ret    
c0001bbe:	66 90                	xchg   ax,ax
c0001bc0:	b8 00 00 00 00       	mov    eax,0x0
c0001bc5:	c3                   	ret    
c0001bc6:	66 90                	xchg   ax,ax

c0001bc8 <isalnum>:
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 c7 ff ff ff       	call   c0001b98 <isalpha>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	75 10                	jne    c0001be8 <isalnum+0x20>
c0001bd8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bdc:	e8 3b ff ff ff       	call   c0001b1c <isdigit>
c0001be1:	83 c4 04             	add    esp,0x4
c0001be4:	85 c0                	test   eax,eax
c0001be6:	74 08                	je     c0001bf0 <isalnum+0x28>
c0001be8:	b8 01 00 00 00       	mov    eax,0x1
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax
c0001bf0:	b8 00 00 00 00       	mov    eax,0x0
c0001bf5:	c3                   	ret    
c0001bf6:	66 90                	xchg   ax,ax

c0001bf8 <ispunct>:
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 c7 ff ff ff       	call   c0001bc8 <isalnum>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	75 28                	jne    c0001c30 <ispunct+0x38>
c0001c08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c0c:	e8 43 ff ff ff       	call   c0001b54 <isspace>
c0001c11:	83 c4 04             	add    esp,0x4
c0001c14:	85 c0                	test   eax,eax
c0001c16:	75 18                	jne    c0001c30 <ispunct+0x38>
c0001c18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c1c:	e8 db fe ff ff       	call   c0001afc <iscntrl>
c0001c21:	83 c4 04             	add    esp,0x4
c0001c24:	85 c0                	test   eax,eax
c0001c26:	75 08                	jne    c0001c30 <ispunct+0x38>
c0001c28:	b8 01 00 00 00       	mov    eax,0x1
c0001c2d:	c3                   	ret    
c0001c2e:	66 90                	xchg   ax,ax
c0001c30:	b8 00 00 00 00       	mov    eax,0x0
c0001c35:	c3                   	ret    
c0001c36:	66 90                	xchg   ax,ax

c0001c38 <isgraph>:
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 87 ff ff ff       	call   c0001bc8 <isalnum>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	75 10                	jne    c0001c58 <isgraph+0x20>
c0001c48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c4c:	e8 a7 ff ff ff       	call   c0001bf8 <ispunct>
c0001c51:	83 c4 04             	add    esp,0x4
c0001c54:	85 c0                	test   eax,eax
c0001c56:	74 08                	je     c0001c60 <isgraph+0x28>
c0001c58:	b8 01 00 00 00       	mov    eax,0x1
c0001c5d:	c3                   	ret    
c0001c5e:	66 90                	xchg   ax,ax
c0001c60:	b8 00 00 00 00       	mov    eax,0x0
c0001c65:	c3                   	ret    
c0001c66:	66 90                	xchg   ax,ax

c0001c68 <isprint>:
c0001c68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c6c:	e8 c7 ff ff ff       	call   c0001c38 <isgraph>
c0001c71:	83 c4 04             	add    esp,0x4
c0001c74:	85 c0                	test   eax,eax
c0001c76:	75 08                	jne    c0001c80 <isprint+0x18>
c0001c78:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c7d:	75 09                	jne    c0001c88 <isprint+0x20>
c0001c7f:	90                   	nop
c0001c80:	b8 01 00 00 00       	mov    eax,0x1
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax
c0001c88:	b8 00 00 00 00       	mov    eax,0x0
c0001c8d:	c3                   	ret    
c0001c8e:	66 90                	xchg   ax,ax

c0001c90 <isxdigit>:
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 83 fe ff ff       	call   c0001b1c <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	75 20                	jne    c0001cc0 <isxdigit+0x30>
c0001ca0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ca5:	7e 09                	jle    c0001cb0 <isxdigit+0x20>
c0001ca7:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001cac:	7e 12                	jle    c0001cc0 <isxdigit+0x30>
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cb5:	7e 11                	jle    c0001cc8 <isxdigit+0x38>
c0001cb7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cbc:	7f 0a                	jg     c0001cc8 <isxdigit+0x38>
c0001cbe:	66 90                	xchg   ax,ax
c0001cc0:	b8 01 00 00 00       	mov    eax,0x1
c0001cc5:	c3                   	ret    
c0001cc6:	66 90                	xchg   ax,ax
c0001cc8:	b8 00 00 00 00       	mov    eax,0x0
c0001ccd:	c3                   	ret    

c0001cce <disk_status>:
c0001cce:	31 c0                	xor    eax,eax
c0001cd0:	c3                   	ret    

c0001cd1 <disk_initialize>:
c0001cd1:	31 c0                	xor    eax,eax
c0001cd3:	c3                   	ret    

c0001cd4 <disk_read>:
c0001cd4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cd9:	0f b6 04 85 20 41 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdbee0]
c0001ce1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ce5:	e9 8a 53 01 00       	jmp    c0017074 <fatWrapperReadDisk>

c0001cea <disk_write>:
c0001cea:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cef:	0f b6 04 85 20 41 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdbee0]
c0001cf7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001cfb:	e9 b8 53 01 00       	jmp    c00170b8 <fatWrapperWriteDisk>

c0001d00 <disk_ioctl>:
c0001d00:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d09:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d0e:	0f b6 04 85 20 41 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdbee0]
c0001d16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d1a:	e9 dd 53 01 00       	jmp    c00170fc <fatWrapperIoctl>

c0001d1f <ld_word>:
c0001d1f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d23:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d26:	c1 e2 08             	shl    edx,0x8
c0001d29:	09 d0                	or     eax,edx
c0001d2b:	c3                   	ret    

c0001d2c <ld_dword>:
c0001d2c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d30:	89 d1                	mov    ecx,edx
c0001d32:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d36:	c1 e1 08             	shl    ecx,0x8
c0001d39:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d3c:	09 ca                	or     edx,ecx
c0001d3e:	c1 e2 08             	shl    edx,0x8
c0001d41:	09 d0                	or     eax,edx
c0001d43:	c3                   	ret    

c0001d44 <st_word>:
c0001d44:	66 89 10             	mov    WORD PTR [eax],dx
c0001d47:	c3                   	ret    

c0001d48 <st_dword>:
c0001d48:	89 10                	mov    DWORD PTR [eax],edx
c0001d4a:	c3                   	ret    

c0001d4b <mem_cpy>:
c0001d4b:	85 c9                	test   ecx,ecx
c0001d4d:	74 10                	je     c0001d5f <mem_cpy+0x14>
c0001d4f:	57                   	push   edi
c0001d50:	01 c1                	add    ecx,eax
c0001d52:	56                   	push   esi
c0001d53:	89 c7                	mov    edi,eax
c0001d55:	89 d6                	mov    esi,edx
c0001d57:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d58:	39 f9                	cmp    ecx,edi
c0001d5a:	75 fb                	jne    c0001d57 <mem_cpy+0xc>
c0001d5c:	5e                   	pop    esi
c0001d5d:	5f                   	pop    edi
c0001d5e:	c3                   	ret    
c0001d5f:	c3                   	ret    

c0001d60 <mem_set>:
c0001d60:	01 c1                	add    ecx,eax
c0001d62:	40                   	inc    eax
c0001d63:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d66:	39 c8                	cmp    eax,ecx
c0001d68:	75 f8                	jne    c0001d62 <mem_set+0x2>
c0001d6a:	c3                   	ret    

c0001d6b <mem_cmp>:
c0001d6b:	57                   	push   edi
c0001d6c:	56                   	push   esi
c0001d6d:	89 c6                	mov    esi,eax
c0001d6f:	53                   	push   ebx
c0001d70:	46                   	inc    esi
c0001d71:	42                   	inc    edx
c0001d72:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d76:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d7a:	29 fb                	sub    ebx,edi
c0001d7c:	89 cf                	mov    edi,ecx
c0001d7e:	29 f7                	sub    edi,esi
c0001d80:	01 c7                	add    edi,eax
c0001d82:	74 04                	je     c0001d88 <mem_cmp+0x1d>
c0001d84:	85 db                	test   ebx,ebx
c0001d86:	74 e8                	je     c0001d70 <mem_cmp+0x5>
c0001d88:	89 d8                	mov    eax,ebx
c0001d8a:	5b                   	pop    ebx
c0001d8b:	5e                   	pop    esi
c0001d8c:	5f                   	pop    edi
c0001d8d:	c3                   	ret    

c0001d8e <chk_chr>:
c0001d8e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d91:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d94:	74 07                	je     c0001d9d <chk_chr+0xf>
c0001d96:	39 d1                	cmp    ecx,edx
c0001d98:	74 03                	je     c0001d9d <chk_chr+0xf>
c0001d9a:	40                   	inc    eax
c0001d9b:	eb f1                	jmp    c0001d8e <chk_chr>
c0001d9d:	89 c8                	mov    eax,ecx
c0001d9f:	c3                   	ret    

c0001da0 <dbc_1st>:
c0001da0:	31 c0                	xor    eax,eax
c0001da2:	c3                   	ret    

c0001da3 <dbc_2nd>:
c0001da3:	31 c0                	xor    eax,eax
c0001da5:	c3                   	ret    

c0001da6 <tchar2uni>:
c0001da6:	57                   	push   edi
c0001da7:	89 c7                	mov    edi,eax
c0001da9:	56                   	push   esi
c0001daa:	53                   	push   ebx
c0001dab:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001dad:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001daf:	8d 73 01             	lea    esi,[ebx+0x1]
c0001db2:	84 c9                	test   cl,cl
c0001db4:	78 0a                	js     c0001dc0 <tchar2uni+0x1a>
c0001db6:	0f b6 d1             	movzx  edx,cl
c0001db9:	89 f3                	mov    ebx,esi
c0001dbb:	e9 9f 00 00 00       	jmp    c0001e5f <tchar2uni+0xb9>
c0001dc0:	88 ca                	mov    dl,cl
c0001dc2:	83 e2 e0             	and    edx,0xffffffe0
c0001dc5:	80 fa c0             	cmp    dl,0xc0
c0001dc8:	75 0c                	jne    c0001dd6 <tchar2uni+0x30>
c0001dca:	89 ca                	mov    edx,ecx
c0001dcc:	b9 01 00 00 00       	mov    ecx,0x1
c0001dd1:	83 e2 1f             	and    edx,0x1f
c0001dd4:	eb 2e                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dd6:	88 ca                	mov    dl,cl
c0001dd8:	83 e2 f0             	and    edx,0xfffffff0
c0001ddb:	80 fa e0             	cmp    dl,0xe0
c0001dde:	75 0c                	jne    c0001dec <tchar2uni+0x46>
c0001de0:	89 ca                	mov    edx,ecx
c0001de2:	b9 02 00 00 00       	mov    ecx,0x2
c0001de7:	83 e2 0f             	and    edx,0xf
c0001dea:	eb 18                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dec:	88 ca                	mov    dl,cl
c0001dee:	83 e2 f8             	and    edx,0xfffffff8
c0001df1:	88 d0                	mov    al,dl
c0001df3:	83 ca ff             	or     edx,0xffffffff
c0001df6:	3c f0                	cmp    al,0xf0
c0001df8:	75 6c                	jne    c0001e66 <tchar2uni+0xc0>
c0001dfa:	89 ca                	mov    edx,ecx
c0001dfc:	b9 03 00 00 00       	mov    ecx,0x3
c0001e01:	83 e2 07             	and    edx,0x7
c0001e04:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e08:	46                   	inc    esi
c0001e09:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e0c:	88 c8                	mov    al,cl
c0001e0e:	83 e0 c0             	and    eax,0xffffffc0
c0001e11:	3c 80                	cmp    al,0x80
c0001e13:	75 4e                	jne    c0001e63 <tchar2uni+0xbd>
c0001e15:	c1 e2 06             	shl    edx,0x6
c0001e18:	83 e1 3f             	and    ecx,0x3f
c0001e1b:	09 ca                	or     edx,ecx
c0001e1d:	39 de                	cmp    esi,ebx
c0001e1f:	75 e7                	jne    c0001e08 <tchar2uni+0x62>
c0001e21:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e24:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e2a:	77 37                	ja     c0001e63 <tchar2uni+0xbd>
c0001e2c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e32:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e38:	76 29                	jbe    c0001e63 <tchar2uni+0xbd>
c0001e3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e40:	76 1d                	jbe    c0001e5f <tchar2uni+0xb9>
c0001e42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e4e:	c1 e1 06             	shl    ecx,0x6
c0001e51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e57:	09 ca                	or     edx,ecx
c0001e59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e5f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e61:	eb 03                	jmp    c0001e66 <tchar2uni+0xc0>
c0001e63:	83 ca ff             	or     edx,0xffffffff
c0001e66:	5b                   	pop    ebx
c0001e67:	89 d0                	mov    eax,edx
c0001e69:	5e                   	pop    esi
c0001e6a:	5f                   	pop    edi
c0001e6b:	c3                   	ret    

c0001e6c <put_utf>:
c0001e6c:	53                   	push   ebx
c0001e6d:	83 f8 7f             	cmp    eax,0x7f
c0001e70:	89 c3                	mov    ebx,eax
c0001e72:	b0 00                	mov    al,0x0
c0001e74:	77 11                	ja     c0001e87 <put_utf+0x1b>
c0001e76:	85 c9                	test   ecx,ecx
c0001e78:	0f 84 e5 00 00 00    	je     c0001f63 <put_utf+0xf7>
c0001e7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001e80:	b0 01                	mov    al,0x1
c0001e82:	e9 dc 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001e87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e8d:	77 23                	ja     c0001eb2 <put_utf+0x46>
c0001e8f:	83 f9 01             	cmp    ecx,0x1
c0001e92:	0f 86 cb 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001e98:	89 d8                	mov    eax,ebx
c0001e9a:	83 e3 3f             	and    ebx,0x3f
c0001e9d:	c1 e8 06             	shr    eax,0x6
c0001ea0:	83 cb 80             	or     ebx,0xffffff80
c0001ea3:	83 c8 c0             	or     eax,0xffffffc0
c0001ea6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001ea9:	88 02                	mov    BYTE PTR [edx],al
c0001eab:	b0 02                	mov    al,0x2
c0001ead:	e9 b1 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001eb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001eb8:	77 40                	ja     c0001efa <put_utf+0x8e>
c0001eba:	83 f9 02             	cmp    ecx,0x2
c0001ebd:	0f 86 a0 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ec3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ec9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001ecf:	0f 86 8e 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ed5:	89 d8                	mov    eax,ebx
c0001ed7:	c1 e8 0c             	shr    eax,0xc
c0001eda:	83 c8 e0             	or     eax,0xffffffe0
c0001edd:	88 02                	mov    BYTE PTR [edx],al
c0001edf:	89 d8                	mov    eax,ebx
c0001ee1:	83 e3 3f             	and    ebx,0x3f
c0001ee4:	c1 e8 06             	shr    eax,0x6
c0001ee7:	83 cb 80             	or     ebx,0xffffff80
c0001eea:	83 e0 3f             	and    eax,0x3f
c0001eed:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ef0:	83 c8 80             	or     eax,0xffffff80
c0001ef3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ef6:	b0 03                	mov    al,0x3
c0001ef8:	eb 69                	jmp    c0001f63 <put_utf+0xf7>
c0001efa:	83 f9 03             	cmp    ecx,0x3
c0001efd:	76 64                	jbe    c0001f63 <put_utf+0xf7>
c0001eff:	89 d9                	mov    ecx,ebx
c0001f01:	0f b7 c3             	movzx  eax,bx
c0001f04:	66 31 c9             	xor    cx,cx
c0001f07:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f0d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f13:	c1 e9 06             	shr    ecx,0x6
c0001f16:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f1c:	77 43                	ja     c0001f61 <put_utf+0xf5>
c0001f1e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f24:	77 3b                	ja     c0001f61 <put_utf+0xf5>
c0001f26:	09 cb                	or     ebx,ecx
c0001f28:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f2e:	89 d8                	mov    eax,ebx
c0001f30:	c1 e8 12             	shr    eax,0x12
c0001f33:	83 c8 f0             	or     eax,0xfffffff0
c0001f36:	88 02                	mov    BYTE PTR [edx],al
c0001f38:	89 d8                	mov    eax,ebx
c0001f3a:	c1 e8 0c             	shr    eax,0xc
c0001f3d:	83 e0 3f             	and    eax,0x3f
c0001f40:	83 c8 80             	or     eax,0xffffff80
c0001f43:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f46:	89 d8                	mov    eax,ebx
c0001f48:	83 e3 3f             	and    ebx,0x3f
c0001f4b:	c1 e8 06             	shr    eax,0x6
c0001f4e:	83 cb 80             	or     ebx,0xffffff80
c0001f51:	83 e0 3f             	and    eax,0x3f
c0001f54:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f57:	83 c8 80             	or     eax,0xffffff80
c0001f5a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f5d:	b0 04                	mov    al,0x4
c0001f5f:	eb 02                	jmp    c0001f63 <put_utf+0xf7>
c0001f61:	31 c0                	xor    eax,eax
c0001f63:	5b                   	pop    ebx
c0001f64:	c3                   	ret    

c0001f65 <clst2sect>:
c0001f65:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f68:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f6b:	83 ea 02             	sub    edx,0x2
c0001f6e:	39 ca                	cmp    edx,ecx
c0001f70:	76 0d                	jbe    c0001f7f <clst2sect+0x1a>
c0001f72:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f76:	0f af d1             	imul   edx,ecx
c0001f79:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f7c:	89 d0                	mov    eax,edx
c0001f7e:	c3                   	ret    
c0001f7f:	31 c0                	xor    eax,eax
c0001f81:	c3                   	ret    

c0001f82 <pick_lfn>:
c0001f82:	55                   	push   ebp
c0001f83:	57                   	push   edi
c0001f84:	56                   	push   esi
c0001f85:	89 d6                	mov    esi,edx
c0001f87:	53                   	push   ebx
c0001f88:	89 c3                	mov    ebx,eax
c0001f8a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f8d:	e8 8d fd ff ff       	call   c0001d1f <ld_word>
c0001f92:	66 85 c0             	test   ax,ax
c0001f95:	74 04                	je     c0001f9b <pick_lfn+0x19>
c0001f97:	31 c0                	xor    eax,eax
c0001f99:	eb 5c                	jmp    c0001ff7 <pick_lfn+0x75>
c0001f9b:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f9e:	bd 01 00 00 00       	mov    ebp,0x1
c0001fa3:	83 e1 bf             	and    ecx,0xffffffbf
c0001fa6:	31 ff                	xor    edi,edi
c0001fa8:	49                   	dec    ecx
c0001fa9:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fac:	0f b6 87 40 d1 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe2ec0]
c0001fb3:	01 f0                	add    eax,esi
c0001fb5:	e8 65 fd ff ff       	call   c0001d1f <ld_word>
c0001fba:	66 85 ed             	test   bp,bp
c0001fbd:	74 11                	je     c0001fd0 <pick_lfn+0x4e>
c0001fbf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fc5:	77 d0                	ja     c0001f97 <pick_lfn+0x15>
c0001fc7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fcb:	89 c5                	mov    ebp,eax
c0001fcd:	41                   	inc    ecx
c0001fce:	eb 04                	jmp    c0001fd4 <pick_lfn+0x52>
c0001fd0:	66 40                	inc    ax
c0001fd2:	75 c3                	jne    c0001f97 <pick_lfn+0x15>
c0001fd4:	47                   	inc    edi
c0001fd5:	83 ff 0d             	cmp    edi,0xd
c0001fd8:	75 d2                	jne    c0001fac <pick_lfn+0x2a>
c0001fda:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fdd:	74 13                	je     c0001ff2 <pick_lfn+0x70>
c0001fdf:	66 85 ed             	test   bp,bp
c0001fe2:	74 0e                	je     c0001ff2 <pick_lfn+0x70>
c0001fe4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fea:	77 ab                	ja     c0001f97 <pick_lfn+0x15>
c0001fec:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ff2:	b8 01 00 00 00       	mov    eax,0x1
c0001ff7:	5b                   	pop    ebx
c0001ff8:	5e                   	pop    esi
c0001ff9:	5f                   	pop    edi
c0001ffa:	5d                   	pop    ebp
c0001ffb:	c3                   	ret    

c0001ffc <put_lfn>:
c0001ffc:	55                   	push   ebp
c0001ffd:	31 ed                	xor    ebp,ebp
c0001fff:	57                   	push   edi
c0002000:	89 d7                	mov    edi,edx
c0002002:	56                   	push   esi
c0002003:	31 f6                	xor    esi,esi
c0002005:	53                   	push   ebx
c0002006:	83 ec 08             	sub    esp,0x8
c0002009:	89 04 24             	mov    DWORD PTR [esp],eax
c000200c:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002010:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002014:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000201a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000201d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002020:	31 d2                	xor    edx,edx
c0002022:	e8 1d fd ff ff       	call   c0001d44 <st_word>
c0002027:	0f b6 d9             	movzx  ebx,cl
c000202a:	4b                   	dec    ebx
c000202b:	6b db 0d             	imul   ebx,ebx,0xd
c000202e:	66 83 fe ff          	cmp    si,0xffff
c0002032:	74 08                	je     c000203c <put_lfn+0x40>
c0002034:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002037:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000203b:	43                   	inc    ebx
c000203c:	0f b6 85 40 d1 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe2ec0]
c0002043:	0f b7 d6             	movzx  edx,si
c0002046:	01 f8                	add    eax,edi
c0002048:	e8 f7 fc ff ff       	call   c0001d44 <st_word>
c000204d:	66 85 f6             	test   si,si
c0002050:	75 03                	jne    c0002055 <put_lfn+0x59>
c0002052:	83 ce ff             	or     esi,0xffffffff
c0002055:	45                   	inc    ebp
c0002056:	83 fd 0d             	cmp    ebp,0xd
c0002059:	75 d3                	jne    c000202e <put_lfn+0x32>
c000205b:	66 46                	inc    si
c000205d:	74 0a                	je     c0002069 <put_lfn+0x6d>
c000205f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002062:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002067:	75 09                	jne    c0002072 <put_lfn+0x76>
c0002069:	88 c8                	mov    al,cl
c000206b:	83 c8 40             	or     eax,0x40
c000206e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002072:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002076:	88 07                	mov    BYTE PTR [edi],al
c0002078:	83 c4 08             	add    esp,0x8
c000207b:	5b                   	pop    ebx
c000207c:	5e                   	pop    esi
c000207d:	5f                   	pop    edi
c000207e:	5d                   	pop    ebp
c000207f:	c3                   	ret    

c0002080 <gen_numname>:
c0002080:	57                   	push   edi
c0002081:	89 cf                	mov    edi,ecx
c0002083:	56                   	push   esi
c0002084:	b9 0b 00 00 00       	mov    ecx,0xb
c0002089:	53                   	push   ebx
c000208a:	89 c6                	mov    esi,eax
c000208c:	83 ec 10             	sub    esp,0x10
c000208f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002093:	e8 b3 fc ff ff       	call   c0001d4b <mem_cpy>
c0002098:	83 fb 05             	cmp    ebx,0x5
c000209b:	76 2d                	jbe    c00020ca <gen_numname+0x4a>
c000209d:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020a0:	66 85 c0             	test   ax,ax
c00020a3:	74 25                	je     c00020ca <gen_numname+0x4a>
c00020a5:	83 c7 02             	add    edi,0x2
c00020a8:	ba 10 00 00 00       	mov    edx,0x10
c00020ad:	01 db                	add    ebx,ebx
c00020af:	89 c1                	mov    ecx,eax
c00020b1:	66 d1 e8             	shr    ax,1
c00020b4:	83 e1 01             	and    ecx,0x1
c00020b7:	01 cb                	add    ebx,ecx
c00020b9:	0f ba e3 10          	bt     ebx,0x10
c00020bd:	73 06                	jae    c00020c5 <gen_numname+0x45>
c00020bf:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020c5:	4a                   	dec    edx
c00020c6:	75 e5                	jne    c00020ad <gen_numname+0x2d>
c00020c8:	eb d3                	jmp    c000209d <gen_numname+0x1d>
c00020ca:	b8 07 00 00 00       	mov    eax,0x7
c00020cf:	88 d9                	mov    cl,bl
c00020d1:	83 e1 0f             	and    ecx,0xf
c00020d4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020d7:	80 fa 39             	cmp    dl,0x39
c00020da:	76 03                	jbe    c00020df <gen_numname+0x5f>
c00020dc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020df:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020e2:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020e6:	89 da                	mov    edx,ebx
c00020e8:	c1 ea 04             	shr    edx,0x4
c00020eb:	83 fb 0f             	cmp    ebx,0xf
c00020ee:	76 06                	jbe    c00020f6 <gen_numname+0x76>
c00020f0:	89 c8                	mov    eax,ecx
c00020f2:	89 d3                	mov    ebx,edx
c00020f4:	eb d9                	jmp    c00020cf <gen_numname+0x4f>
c00020f6:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020fb:	31 d2                	xor    edx,edx
c00020fd:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002100:	8d 04 16             	lea    eax,[esi+edx*1]
c0002103:	39 ca                	cmp    edx,ecx
c0002105:	73 18                	jae    c000211f <gen_numname+0x9f>
c0002107:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000210a:	3c 20                	cmp    al,0x20
c000210c:	74 11                	je     c000211f <gen_numname+0x9f>
c000210e:	e8 8d fc ff ff       	call   c0001da0 <dbc_1st>
c0002113:	85 c0                	test   eax,eax
c0002115:	74 05                	je     c000211c <gen_numname+0x9c>
c0002117:	39 d3                	cmp    ebx,edx
c0002119:	74 04                	je     c000211f <gen_numname+0x9f>
c000211b:	42                   	inc    edx
c000211c:	42                   	inc    edx
c000211d:	eb e1                	jmp    c0002100 <gen_numname+0x80>
c000211f:	b0 20                	mov    al,0x20
c0002121:	83 f9 07             	cmp    ecx,0x7
c0002124:	77 05                	ja     c000212b <gen_numname+0xab>
c0002126:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000212a:	41                   	inc    ecx
c000212b:	42                   	inc    edx
c000212c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002130:	83 fa 07             	cmp    edx,0x7
c0002133:	76 ea                	jbe    c000211f <gen_numname+0x9f>
c0002135:	83 c4 10             	add    esp,0x10
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	c3                   	ret    

c000213c <sum_sfn>:
c000213c:	31 c9                	xor    ecx,ecx
c000213e:	31 d2                	xor    edx,edx
c0002140:	d0 ca                	ror    dl,1
c0002142:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002145:	41                   	inc    ecx
c0002146:	83 f9 0b             	cmp    ecx,0xb
c0002149:	75 f5                	jne    c0002140 <sum_sfn+0x4>
c000214b:	88 d0                	mov    al,dl
c000214d:	c3                   	ret    

c000214e <get_ldnumber>:
c000214e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002150:	85 d2                	test   edx,edx
c0002152:	74 14                	je     c0002168 <get_ldnumber+0x1a>
c0002154:	56                   	push   esi
c0002155:	53                   	push   ebx
c0002156:	89 d3                	mov    ebx,edx
c0002158:	43                   	inc    ebx
c0002159:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000215c:	80 f9 1f             	cmp    cl,0x1f
c000215f:	76 0d                	jbe    c000216e <get_ldnumber+0x20>
c0002161:	80 f9 3a             	cmp    cl,0x3a
c0002164:	75 f2                	jne    c0002158 <get_ldnumber+0xa>
c0002166:	eb 0a                	jmp    c0002172 <get_ldnumber+0x24>
c0002168:	83 c9 ff             	or     ecx,0xffffffff
c000216b:	89 c8                	mov    eax,ecx
c000216d:	c3                   	ret    
c000216e:	31 c9                	xor    ecx,ecx
c0002170:	eb 24                	jmp    c0002196 <get_ldnumber+0x48>
c0002172:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002175:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002178:	80 f9 09             	cmp    cl,0x9
c000217b:	77 16                	ja     c0002193 <get_ldnumber+0x45>
c000217d:	83 c2 02             	add    edx,0x2
c0002180:	83 c9 ff             	or     ecx,0xffffffff
c0002183:	39 d3                	cmp    ebx,edx
c0002185:	75 0f                	jne    c0002196 <get_ldnumber+0x48>
c0002187:	89 f2                	mov    edx,esi
c0002189:	89 18                	mov    DWORD PTR [eax],ebx
c000218b:	0f be ca             	movsx  ecx,dl
c000218e:	83 e9 30             	sub    ecx,0x30
c0002191:	eb 03                	jmp    c0002196 <get_ldnumber+0x48>
c0002193:	83 c9 ff             	or     ecx,0xffffffff
c0002196:	89 c8                	mov    eax,ecx
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	c3                   	ret    

c000219b <validate>:
c000219b:	56                   	push   esi
c000219c:	53                   	push   ebx
c000219d:	89 d6                	mov    esi,edx
c000219f:	51                   	push   ecx
c00021a0:	85 c0                	test   eax,eax
c00021a2:	75 09                	jne    c00021ad <validate+0x12>
c00021a4:	b8 09 00 00 00       	mov    eax,0x9
c00021a9:	31 c9                	xor    ecx,ecx
c00021ab:	eb 2f                	jmp    c00021dc <validate+0x41>
c00021ad:	89 c3                	mov    ebx,eax
c00021af:	8b 00                	mov    eax,DWORD PTR [eax]
c00021b1:	85 c0                	test   eax,eax
c00021b3:	74 ef                	je     c00021a4 <validate+0x9>
c00021b5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021b8:	74 ea                	je     c00021a4 <validate+0x9>
c00021ba:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021be:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021c2:	75 e0                	jne    c00021a4 <validate+0x9>
c00021c4:	83 ec 0c             	sub    esp,0xc
c00021c7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021cb:	50                   	push   eax
c00021cc:	e8 fd fa ff ff       	call   c0001cce <disk_status>
c00021d1:	83 c4 10             	add    esp,0x10
c00021d4:	a8 01                	test   al,0x1
c00021d6:	75 cc                	jne    c00021a4 <validate+0x9>
c00021d8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021da:	31 c0                	xor    eax,eax
c00021dc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021de:	5a                   	pop    edx
c00021df:	5b                   	pop    ebx
c00021e0:	5e                   	pop    esi
c00021e1:	c3                   	ret    

c00021e2 <sync_window>:
c00021e2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021e6:	74 58                	je     c0002240 <sync_window+0x5e>
c00021e8:	56                   	push   esi
c00021e9:	53                   	push   ebx
c00021ea:	8d 70 34             	lea    esi,[eax+0x34]
c00021ed:	51                   	push   ecx
c00021ee:	89 c3                	mov    ebx,eax
c00021f0:	6a 01                	push   0x1
c00021f2:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00021f5:	56                   	push   esi
c00021f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021fa:	50                   	push   eax
c00021fb:	e8 ea fa ff ff       	call   c0001cea <disk_write>
c0002200:	83 c4 10             	add    esp,0x10
c0002203:	ba 01 00 00 00       	mov    edx,0x1
c0002208:	85 c0                	test   eax,eax
c000220a:	75 2e                	jne    c000223a <sync_window+0x58>
c000220c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000220f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002212:	89 c1                	mov    ecx,eax
c0002214:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002218:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000221b:	39 d1                	cmp    ecx,edx
c000221d:	73 19                	jae    c0002238 <sync_window+0x56>
c000221f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002223:	75 13                	jne    c0002238 <sync_window+0x56>
c0002225:	6a 01                	push   0x1
c0002227:	01 d0                	add    eax,edx
c0002229:	50                   	push   eax
c000222a:	56                   	push   esi
c000222b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000222f:	50                   	push   eax
c0002230:	e8 b5 fa ff ff       	call   c0001cea <disk_write>
c0002235:	83 c4 10             	add    esp,0x10
c0002238:	31 d2                	xor    edx,edx
c000223a:	89 d0                	mov    eax,edx
c000223c:	5a                   	pop    edx
c000223d:	5b                   	pop    ebx
c000223e:	5e                   	pop    esi
c000223f:	c3                   	ret    
c0002240:	31 d2                	xor    edx,edx
c0002242:	89 d0                	mov    eax,edx
c0002244:	c3                   	ret    

c0002245 <move_window>:
c0002245:	57                   	push   edi
c0002246:	56                   	push   esi
c0002247:	31 f6                	xor    esi,esi
c0002249:	53                   	push   ebx
c000224a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000224d:	74 32                	je     c0002281 <move_window+0x3c>
c000224f:	89 c3                	mov    ebx,eax
c0002251:	89 d7                	mov    edi,edx
c0002253:	e8 8a ff ff ff       	call   c00021e2 <sync_window>
c0002258:	89 c6                	mov    esi,eax
c000225a:	85 c0                	test   eax,eax
c000225c:	75 23                	jne    c0002281 <move_window+0x3c>
c000225e:	6a 01                	push   0x1
c0002260:	8d 43 34             	lea    eax,[ebx+0x34]
c0002263:	57                   	push   edi
c0002264:	50                   	push   eax
c0002265:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002269:	50                   	push   eax
c000226a:	e8 65 fa ff ff       	call   c0001cd4 <disk_read>
c000226f:	83 c4 10             	add    esp,0x10
c0002272:	85 c0                	test   eax,eax
c0002274:	74 08                	je     c000227e <move_window+0x39>
c0002276:	be 01 00 00 00       	mov    esi,0x1
c000227b:	83 cf ff             	or     edi,0xffffffff
c000227e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002281:	89 f0                	mov    eax,esi
c0002283:	5b                   	pop    ebx
c0002284:	5e                   	pop    esi
c0002285:	5f                   	pop    edi
c0002286:	c3                   	ret    

c0002287 <check_fs>:
c0002287:	53                   	push   ebx
c0002288:	89 c3                	mov    ebx,eax
c000228a:	83 ec 08             	sub    esp,0x8
c000228d:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002291:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002298:	e8 a8 ff ff ff       	call   c0002245 <move_window>
c000229d:	ba 04 00 00 00       	mov    edx,0x4
c00022a2:	85 c0                	test   eax,eax
c00022a4:	75 68                	jne    c000230e <check_fs+0x87>
c00022a6:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022ac:	e8 6e fa ff ff       	call   c0001d1f <ld_word>
c00022b1:	ba 03 00 00 00       	mov    edx,0x3
c00022b6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022ba:	75 52                	jne    c000230e <check_fs+0x87>
c00022bc:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022bf:	8d 50 18             	lea    edx,[eax+0x18]
c00022c2:	80 fa 01             	cmp    dl,0x1
c00022c5:	76 09                	jbe    c00022d0 <check_fs+0x49>
c00022c7:	ba 02 00 00 00       	mov    edx,0x2
c00022cc:	3c eb                	cmp    al,0xeb
c00022ce:	75 3e                	jne    c000230e <check_fs+0x87>
c00022d0:	ba 08 f2 01 c0       	mov    edx,0xc001f208
c00022d5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022d8:	b9 03 00 00 00       	mov    ecx,0x3
c00022dd:	e8 89 fa ff ff       	call   c0001d6b <mem_cmp>
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	85 c0                	test   eax,eax
c00022e6:	74 26                	je     c000230e <check_fs+0x87>
c00022e8:	ba fc cf 01 c0       	mov    edx,0xc001cffc
c00022ed:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00022f3:	b9 05 00 00 00       	mov    ecx,0x5
c00022f8:	e8 6e fa ff ff       	call   c0001d6b <mem_cmp>
c00022fd:	31 d2                	xor    edx,edx
c00022ff:	85 c0                	test   eax,eax
c0002301:	74 0b                	je     c000230e <check_fs+0x87>
c0002303:	31 d2                	xor    edx,edx
c0002305:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002309:	0f 95 c2             	setne  dl
c000230c:	01 d2                	add    edx,edx
c000230e:	89 d0                	mov    eax,edx
c0002310:	83 c4 08             	add    esp,0x8
c0002313:	5b                   	pop    ebx
c0002314:	c3                   	ret    

c0002315 <find_volume>:
c0002315:	55                   	push   ebp
c0002316:	57                   	push   edi
c0002317:	56                   	push   esi
c0002318:	89 c6                	mov    esi,eax
c000231a:	53                   	push   ebx
c000231b:	89 d3                	mov    ebx,edx
c000231d:	83 ec 2c             	sub    esp,0x2c
c0002320:	31 d2                	xor    edx,edx
c0002322:	e8 60 ff ff ff       	call   c0002287 <check_fs>
c0002327:	83 f8 02             	cmp    eax,0x2
c000232a:	74 06                	je     c0002332 <find_volume+0x1d>
c000232c:	77 62                	ja     c0002390 <find_volume+0x7b>
c000232e:	85 db                	test   ebx,ebx
c0002330:	74 5e                	je     c0002390 <find_volume+0x7b>
c0002332:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002336:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000233c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002342:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002346:	89 cf                	mov    edi,ecx
c0002348:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000234c:	89 e8                	mov    eax,ebp
c000234e:	83 c5 10             	add    ebp,0x10
c0002351:	e8 d6 f9 ff ff       	call   c0001d2c <ld_dword>
c0002356:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000235a:	89 01                	mov    DWORD PTR [ecx],eax
c000235c:	83 c1 04             	add    ecx,0x4
c000235f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002363:	75 e3                	jne    c0002348 <find_volume+0x33>
c0002365:	31 ed                	xor    ebp,ebp
c0002367:	85 db                	test   ebx,ebx
c0002369:	74 03                	je     c000236e <find_volume+0x59>
c000236b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000236e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002371:	b8 03 00 00 00       	mov    eax,0x3
c0002376:	85 d2                	test   edx,edx
c0002378:	74 0c                	je     c0002386 <find_volume+0x71>
c000237a:	89 f0                	mov    eax,esi
c000237c:	e8 06 ff ff ff       	call   c0002287 <check_fs>
c0002381:	83 f8 01             	cmp    eax,0x1
c0002384:	76 0a                	jbe    c0002390 <find_volume+0x7b>
c0002386:	85 db                	test   ebx,ebx
c0002388:	75 06                	jne    c0002390 <find_volume+0x7b>
c000238a:	45                   	inc    ebp
c000238b:	83 fd 03             	cmp    ebp,0x3
c000238e:	76 de                	jbe    c000236e <find_volume+0x59>
c0002390:	83 c4 2c             	add    esp,0x2c
c0002393:	5b                   	pop    ebx
c0002394:	5e                   	pop    esi
c0002395:	5f                   	pop    edi
c0002396:	5d                   	pop    ebp
c0002397:	c3                   	ret    

c0002398 <mount_volume>:
c0002398:	55                   	push   ebp
c0002399:	89 d5                	mov    ebp,edx
c000239b:	57                   	push   edi
c000239c:	89 cf                	mov    edi,ecx
c000239e:	56                   	push   esi
c000239f:	53                   	push   ebx
c00023a0:	bb 0b 00 00 00       	mov    ebx,0xb
c00023a5:	83 ec 2c             	sub    esp,0x2c
c00023a8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023ae:	e8 9b fd ff ff       	call   c000214e <get_ldnumber>
c00023b3:	85 c0                	test   eax,eax
c00023b5:	0f 88 d6 02 00 00    	js     c0002691 <mount_volume+0x2f9>
c00023bb:	8b 34 85 00 03 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdfd00]
c00023c2:	89 c2                	mov    edx,eax
c00023c4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023c9:	85 f6                	test   esi,esi
c00023cb:	0f 84 c0 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c00023d1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023d4:	83 e7 fe             	and    edi,0xfffffffe
c00023d7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023da:	74 3a                	je     c0002416 <mount_volume+0x7e>
c00023dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023e0:	83 ec 0c             	sub    esp,0xc
c00023e3:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00023e7:	50                   	push   eax
c00023e8:	e8 e1 f8 ff ff       	call   c0001cce <disk_status>
c00023ed:	83 c4 10             	add    esp,0x10
c00023f0:	a8 01                	test   al,0x1
c00023f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00023f6:	75 1e                	jne    c0002416 <mount_volume+0x7e>
c00023f8:	31 db                	xor    ebx,ebx
c00023fa:	89 f9                	mov    ecx,edi
c00023fc:	84 c9                	test   cl,cl
c00023fe:	0f 84 8d 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002404:	a8 04                	test   al,0x4
c0002406:	0f 84 85 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c000240c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002411:	e9 7b 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002416:	83 ec 0c             	sub    esp,0xc
c0002419:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000241c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000241f:	0f b6 c2             	movzx  eax,dl
c0002422:	bb 03 00 00 00       	mov    ebx,0x3
c0002427:	50                   	push   eax
c0002428:	e8 a4 f8 ff ff       	call   c0001cd1 <disk_initialize>
c000242d:	83 c4 10             	add    esp,0x10
c0002430:	a8 01                	test   al,0x1
c0002432:	0f 85 59 02 00 00    	jne    c0002691 <mount_volume+0x2f9>
c0002438:	89 f9                	mov    ecx,edi
c000243a:	84 c9                	test   cl,cl
c000243c:	74 04                	je     c0002442 <mount_volume+0xaa>
c000243e:	a8 04                	test   al,0x4
c0002440:	75 ca                	jne    c000240c <mount_volume+0x74>
c0002442:	31 d2                	xor    edx,edx
c0002444:	89 f0                	mov    eax,esi
c0002446:	bb 01 00 00 00       	mov    ebx,0x1
c000244b:	e8 c5 fe ff ff       	call   c0002315 <find_volume>
c0002450:	83 f8 04             	cmp    eax,0x4
c0002453:	0f 84 38 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002459:	83 f8 01             	cmp    eax,0x1
c000245c:	76 0a                	jbe    c0002468 <mount_volume+0xd0>
c000245e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002463:	e9 29 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002468:	8d 46 3f             	lea    eax,[esi+0x3f]
c000246b:	e8 af f8 ff ff       	call   c0001d1f <ld_word>
c0002470:	66 3d 00 02          	cmp    ax,0x200
c0002474:	75 e8                	jne    c000245e <mount_volume+0xc6>
c0002476:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002479:	e8 a1 f8 ff ff       	call   c0001d1f <ld_word>
c000247e:	0f b7 c0             	movzx  eax,ax
c0002481:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002485:	85 c0                	test   eax,eax
c0002487:	75 0c                	jne    c0002495 <mount_volume+0xfd>
c0002489:	8d 46 58             	lea    eax,[esi+0x58]
c000248c:	e8 9b f8 ff ff       	call   c0001d2c <ld_dword>
c0002491:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002495:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002498:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c000249b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000249f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024a3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024a6:	89 e8                	mov    eax,ebp
c00024a8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024ab:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024ae:	3c 01                	cmp    al,0x1
c00024b0:	77 ac                	ja     c000245e <mount_volume+0xc6>
c00024b2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024b6:	89 c3                	mov    ebx,eax
c00024b8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024bc:	66 85 c0             	test   ax,ax
c00024bf:	74 9d                	je     c000245e <mount_volume+0xc6>
c00024c1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024c4:	85 d8                	test   eax,ebx
c00024c6:	75 96                	jne    c000245e <mount_volume+0xc6>
c00024c8:	8d 46 45             	lea    eax,[esi+0x45]
c00024cb:	e8 4f f8 ff ff       	call   c0001d1f <ld_word>
c00024d0:	89 c7                	mov    edi,eax
c00024d2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024d6:	a8 0f                	test   al,0xf
c00024d8:	75 84                	jne    c000245e <mount_volume+0xc6>
c00024da:	8d 46 47             	lea    eax,[esi+0x47]
c00024dd:	e8 3d f8 ff ff       	call   c0001d1f <ld_word>
c00024e2:	0f b7 d0             	movzx  edx,ax
c00024e5:	85 d2                	test   edx,edx
c00024e7:	75 0a                	jne    c00024f3 <mount_volume+0x15b>
c00024e9:	8d 46 54             	lea    eax,[esi+0x54]
c00024ec:	e8 3b f8 ff ff       	call   c0001d2c <ld_dword>
c00024f1:	89 c2                	mov    edx,eax
c00024f3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f7:	8d 46 42             	lea    eax,[esi+0x42]
c00024fa:	e8 20 f8 ff ff       	call   c0001d1f <ld_word>
c00024ff:	66 85 c0             	test   ax,ax
c0002502:	0f 84 56 ff ff ff    	je     c000245e <mount_volume+0xc6>
c0002508:	89 e9                	mov    ecx,ebp
c000250a:	0f b7 c0             	movzx  eax,ax
c000250d:	0f b6 e9             	movzx  ebp,cl
c0002510:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002514:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002518:	89 f8                	mov    eax,edi
c000251a:	0f af cd             	imul   ecx,ebp
c000251d:	66 c1 e8 04          	shr    ax,0x4
c0002521:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002525:	0f b7 c0             	movzx  eax,ax
c0002528:	01 c8                	add    eax,ecx
c000252a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000252e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002532:	39 c2                	cmp    edx,eax
c0002534:	0f 82 24 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000253a:	29 c2                	sub    edx,eax
c000253c:	89 d5                	mov    ebp,edx
c000253e:	89 d0                	mov    eax,edx
c0002540:	31 d2                	xor    edx,edx
c0002542:	f7 f3                	div    ebx
c0002544:	39 dd                	cmp    ebp,ebx
c0002546:	0f 82 12 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000254c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002551:	0f 87 07 ff ff ff    	ja     c000245e <mount_volume+0xc6>
c0002557:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000255c:	0f 86 1f 01 00 00    	jbe    c0002681 <mount_volume+0x2e9>
c0002562:	bb 03 00 00 00       	mov    ebx,0x3
c0002567:	8d 68 02             	lea    ebp,[eax+0x2]
c000256a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000256e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002572:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002576:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002579:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000257c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002580:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002583:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002587:	83 fb 03             	cmp    ebx,0x3
c000258a:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000258d:	75 21                	jne    c00025b0 <mount_volume+0x218>
c000258f:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002592:	e8 88 f7 ff ff       	call   c0001d1f <ld_word>
c0002597:	66 09 c7             	or     di,ax
c000259a:	0f 85 be fe ff ff    	jne    c000245e <mount_volume+0xc6>
c00025a0:	8d 46 60             	lea    eax,[esi+0x60]
c00025a3:	c1 e5 02             	shl    ebp,0x2
c00025a6:	e8 81 f7 ff ff       	call   c0001d2c <ld_dword>
c00025ab:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025ae:	eb 22                	jmp    c00025d2 <mount_volume+0x23a>
c00025b0:	66 85 ff             	test   di,di
c00025b3:	0f 84 a5 fe ff ff    	je     c000245e <mount_volume+0xc6>
c00025b9:	01 c8                	add    eax,ecx
c00025bb:	83 fb 02             	cmp    ebx,0x2
c00025be:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025c1:	75 04                	jne    c00025c7 <mount_volume+0x22f>
c00025c3:	01 ed                	add    ebp,ebp
c00025c5:	eb 0b                	jmp    c00025d2 <mount_volume+0x23a>
c00025c7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025cb:	83 e5 01             	and    ebp,0x1
c00025ce:	d1 e8                	shr    eax,1
c00025d0:	01 c5                	add    ebp,eax
c00025d2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025d8:	c1 ed 09             	shr    ebp,0x9
c00025db:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025df:	0f 87 79 fe ff ff    	ja     c000245e <mount_volume+0xc6>
c00025e5:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00025ec:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00025f3:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00025f7:	83 fb 03             	cmp    ebx,0x3
c00025fa:	75 6e                	jne    c000266a <mount_volume+0x2d2>
c00025fc:	8d 46 64             	lea    eax,[esi+0x64]
c00025ff:	e8 1b f7 ff ff       	call   c0001d1f <ld_word>
c0002604:	66 48                	dec    ax
c0002606:	75 62                	jne    c000266a <mount_volume+0x2d2>
c0002608:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000260c:	89 f0                	mov    eax,esi
c000260e:	42                   	inc    edx
c000260f:	e8 31 fc ff ff       	call   c0002245 <move_window>
c0002614:	85 c0                	test   eax,eax
c0002616:	75 52                	jne    c000266a <mount_volume+0x2d2>
c0002618:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000261c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002622:	e8 f8 f6 ff ff       	call   c0001d1f <ld_word>
c0002627:	66 3d 55 aa          	cmp    ax,0xaa55
c000262b:	75 3d                	jne    c000266a <mount_volume+0x2d2>
c000262d:	8d 46 34             	lea    eax,[esi+0x34]
c0002630:	e8 f7 f6 ff ff       	call   c0001d2c <ld_dword>
c0002635:	3d 52 52 61 41       	cmp    eax,0x41615252
c000263a:	75 2e                	jne    c000266a <mount_volume+0x2d2>
c000263c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002642:	e8 e5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002647:	3d 72 72 41 61       	cmp    eax,0x61417272
c000264c:	75 1c                	jne    c000266a <mount_volume+0x2d2>
c000264e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002654:	e8 d3 f6 ff ff       	call   c0001d2c <ld_dword>
c0002659:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000265c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002662:	e8 c5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002667:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000266a:	66 a1 e0 02 02 c0    	mov    ax,ds:0xc00202e0
c0002670:	88 1e                	mov    BYTE PTR [esi],bl
c0002672:	40                   	inc    eax
c0002673:	31 db                	xor    ebx,ebx
c0002675:	66 a3 e0 02 02 c0    	mov    ds:0xc00202e0,ax
c000267b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000267f:	eb 10                	jmp    c0002691 <mount_volume+0x2f9>
c0002681:	31 db                	xor    ebx,ebx
c0002683:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002688:	0f 97 c3             	seta   bl
c000268b:	43                   	inc    ebx
c000268c:	e9 d6 fe ff ff       	jmp    c0002567 <mount_volume+0x1cf>
c0002691:	83 c4 2c             	add    esp,0x2c
c0002694:	89 d8                	mov    eax,ebx
c0002696:	5b                   	pop    ebx
c0002697:	5e                   	pop    esi
c0002698:	5f                   	pop    edi
c0002699:	5d                   	pop    ebp
c000269a:	c3                   	ret    

c000269b <put_fat>:
c000269b:	55                   	push   ebp
c000269c:	bd 02 00 00 00       	mov    ebp,0x2
c00026a1:	57                   	push   edi
c00026a2:	56                   	push   esi
c00026a3:	53                   	push   ebx
c00026a4:	83 ec 1c             	sub    esp,0x1c
c00026a7:	83 fa 01             	cmp    edx,0x1
c00026aa:	0f 86 31 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026b3:	0f 86 28 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b9:	89 c6                	mov    esi,eax
c00026bb:	89 cf                	mov    edi,ecx
c00026bd:	8a 00                	mov    al,BYTE PTR [eax]
c00026bf:	89 d3                	mov    ebx,edx
c00026c1:	3c 02                	cmp    al,0x2
c00026c3:	0f 84 ac 00 00 00    	je     c0002775 <put_fat+0xda>
c00026c9:	3c 03                	cmp    al,0x3
c00026cb:	0f 84 d1 00 00 00    	je     c00027a2 <put_fat+0x107>
c00026d1:	fe c8                	dec    al
c00026d3:	0f 85 08 01 00 00    	jne    c00027e1 <put_fat+0x146>
c00026d9:	89 d1                	mov    ecx,edx
c00026db:	89 f0                	mov    eax,esi
c00026dd:	d1 e9                	shr    ecx,1
c00026df:	01 d1                	add    ecx,edx
c00026e1:	89 ca                	mov    edx,ecx
c00026e3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00026e7:	c1 ea 09             	shr    edx,0x9
c00026ea:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00026ed:	e8 53 fb ff ff       	call   c0002245 <move_window>
c00026f2:	89 c5                	mov    ebp,eax
c00026f4:	85 c0                	test   eax,eax
c00026f6:	0f 85 e5 00 00 00    	jne    c00027e1 <put_fat+0x146>
c00026fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002700:	8d 46 34             	lea    eax,[esi+0x34]
c0002703:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002707:	8d 41 01             	lea    eax,[ecx+0x1]
c000270a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002710:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002714:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002718:	89 f8                	mov    eax,edi
c000271a:	83 e3 01             	and    ebx,0x1
c000271d:	74 0c                	je     c000272b <put_fat+0x90>
c000271f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002721:	89 f8                	mov    eax,edi
c0002723:	83 e2 0f             	and    edx,0xf
c0002726:	c1 e0 04             	shl    eax,0x4
c0002729:	09 d0                	or     eax,edx
c000272b:	88 01                	mov    BYTE PTR [ecx],al
c000272d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002731:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002735:	c1 ea 09             	shr    edx,0x9
c0002738:	89 f0                	mov    eax,esi
c000273a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000273d:	e8 03 fb ff ff       	call   c0002245 <move_window>
c0002742:	89 c5                	mov    ebp,eax
c0002744:	85 c0                	test   eax,eax
c0002746:	0f 85 95 00 00 00    	jne    c00027e1 <put_fat+0x146>
c000274c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002750:	25 ff 01 00 00       	and    eax,0x1ff
c0002755:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002759:	85 db                	test   ebx,ebx
c000275b:	74 07                	je     c0002764 <put_fat+0xc9>
c000275d:	c1 ef 04             	shr    edi,0x4
c0002760:	89 f9                	mov    ecx,edi
c0002762:	eb 0d                	jmp    c0002771 <put_fat+0xd6>
c0002764:	8a 08                	mov    cl,BYTE PTR [eax]
c0002766:	c1 ef 08             	shr    edi,0x8
c0002769:	83 e1 f0             	and    ecx,0xfffffff0
c000276c:	83 e7 0f             	and    edi,0xf
c000276f:	09 f9                	or     ecx,edi
c0002771:	88 08                	mov    BYTE PTR [eax],cl
c0002773:	eb 27                	jmp    c000279c <put_fat+0x101>
c0002775:	c1 ea 08             	shr    edx,0x8
c0002778:	89 f0                	mov    eax,esi
c000277a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000277d:	e8 c3 fa ff ff       	call   c0002245 <move_window>
c0002782:	89 c5                	mov    ebp,eax
c0002784:	85 c0                	test   eax,eax
c0002786:	75 59                	jne    c00027e1 <put_fat+0x146>
c0002788:	01 db                	add    ebx,ebx
c000278a:	0f b7 d7             	movzx  edx,di
c000278d:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002793:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002797:	e8 a8 f5 ff ff       	call   c0001d44 <st_word>
c000279c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027a0:	eb 3f                	jmp    c00027e1 <put_fat+0x146>
c00027a2:	c1 ea 07             	shr    edx,0x7
c00027a5:	89 f0                	mov    eax,esi
c00027a7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027aa:	e8 96 fa ff ff       	call   c0002245 <move_window>
c00027af:	89 c5                	mov    ebp,eax
c00027b1:	85 c0                	test   eax,eax
c00027b3:	75 2c                	jne    c00027e1 <put_fat+0x146>
c00027b5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027bb:	c1 e3 02             	shl    ebx,0x2
c00027be:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027c4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027c8:	89 d8                	mov    eax,ebx
c00027ca:	e8 5d f5 ff ff       	call   c0001d2c <ld_dword>
c00027cf:	25 00 00 00 f0       	and    eax,0xf0000000
c00027d4:	09 f8                	or     eax,edi
c00027d6:	89 c2                	mov    edx,eax
c00027d8:	89 d8                	mov    eax,ebx
c00027da:	e8 69 f5 ff ff       	call   c0001d48 <st_dword>
c00027df:	eb bb                	jmp    c000279c <put_fat+0x101>
c00027e1:	83 c4 1c             	add    esp,0x1c
c00027e4:	89 e8                	mov    eax,ebp
c00027e6:	5b                   	pop    ebx
c00027e7:	5e                   	pop    esi
c00027e8:	5f                   	pop    edi
c00027e9:	5d                   	pop    ebp
c00027ea:	c3                   	ret    

c00027eb <dir_clear>:
c00027eb:	55                   	push   ebp
c00027ec:	57                   	push   edi
c00027ed:	56                   	push   esi
c00027ee:	89 c6                	mov    esi,eax
c00027f0:	53                   	push   ebx
c00027f1:	83 ec 1c             	sub    esp,0x1c
c00027f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027f8:	e8 e5 f9 ff ff       	call   c00021e2 <sync_window>
c00027fd:	85 c0                	test   eax,eax
c00027ff:	0f 85 c0 00 00 00    	jne    c00028c5 <dir_clear+0xda>
c0002805:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002809:	89 f0                	mov    eax,esi
c000280b:	e8 55 f7 ff ff       	call   c0001f65 <clst2sect>
c0002810:	31 d2                	xor    edx,edx
c0002812:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002815:	89 c5                	mov    ebp,eax
c0002817:	b9 00 02 00 00       	mov    ecx,0x200
c000281c:	8d 46 34             	lea    eax,[esi+0x34]
c000281f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002823:	e8 38 f5 ff ff       	call   c0001d60 <mem_set>
c0002828:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000282c:	c1 e3 09             	shl    ebx,0x9
c000282f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002835:	76 1b                	jbe    c0002852 <dir_clear+0x67>
c0002837:	bb 00 80 00 00       	mov    ebx,0x8000
c000283c:	eb 14                	jmp    c0002852 <dir_clear+0x67>
c000283e:	83 ec 0c             	sub    esp,0xc
c0002841:	53                   	push   ebx
c0002842:	e8 25 32 00 00       	call   c0005a6c <ff_memalloc>
c0002847:	83 c4 10             	add    esp,0x10
c000284a:	89 c7                	mov    edi,eax
c000284c:	85 c0                	test   eax,eax
c000284e:	75 7c                	jne    c00028cc <dir_clear+0xe1>
c0002850:	d1 eb                	shr    ebx,1
c0002852:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002858:	77 e4                	ja     c000283e <dir_clear+0x53>
c000285a:	31 db                	xor    ebx,ebx
c000285c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002860:	39 d8                	cmp    eax,ebx
c0002862:	76 53                	jbe    c00028b7 <dir_clear+0xcc>
c0002864:	6a 01                	push   0x1
c0002866:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002869:	50                   	push   eax
c000286a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000286e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002872:	50                   	push   eax
c0002873:	e8 72 f4 ff ff       	call   c0001cea <disk_write>
c0002878:	83 c4 10             	add    esp,0x10
c000287b:	85 c0                	test   eax,eax
c000287d:	75 38                	jne    c00028b7 <dir_clear+0xcc>
c000287f:	43                   	inc    ebx
c0002880:	eb da                	jmp    c000285c <dir_clear+0x71>
c0002882:	52                   	push   edx
c0002883:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002886:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000288a:	50                   	push   eax
c000288b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000288f:	57                   	push   edi
c0002890:	50                   	push   eax
c0002891:	e8 54 f4 ff ff       	call   c0001cea <disk_write>
c0002896:	83 c4 10             	add    esp,0x10
c0002899:	85 c0                	test   eax,eax
c000289b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000289f:	75 0a                	jne    c00028ab <dir_clear+0xc0>
c00028a1:	01 d3                	add    ebx,edx
c00028a3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028a7:	39 d8                	cmp    eax,ebx
c00028a9:	77 d7                	ja     c0002882 <dir_clear+0x97>
c00028ab:	83 ec 0c             	sub    esp,0xc
c00028ae:	57                   	push   edi
c00028af:	e8 d0 31 00 00       	call   c0005a84 <ff_memfree>
c00028b4:	83 c4 10             	add    esp,0x10
c00028b7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028bb:	39 d8                	cmp    eax,ebx
c00028bd:	0f 95 c0             	setne  al
c00028c0:	0f b6 c0             	movzx  eax,al
c00028c3:	eb 19                	jmp    c00028de <dir_clear+0xf3>
c00028c5:	b8 01 00 00 00       	mov    eax,0x1
c00028ca:	eb 12                	jmp    c00028de <dir_clear+0xf3>
c00028cc:	89 d9                	mov    ecx,ebx
c00028ce:	31 d2                	xor    edx,edx
c00028d0:	e8 8b f4 ff ff       	call   c0001d60 <mem_set>
c00028d5:	89 da                	mov    edx,ebx
c00028d7:	31 db                	xor    ebx,ebx
c00028d9:	c1 ea 09             	shr    edx,0x9
c00028dc:	eb c5                	jmp    c00028a3 <dir_clear+0xb8>
c00028de:	83 c4 1c             	add    esp,0x1c
c00028e1:	5b                   	pop    ebx
c00028e2:	5e                   	pop    esi
c00028e3:	5f                   	pop    edi
c00028e4:	5d                   	pop    ebp
c00028e5:	c3                   	ret    

c00028e6 <create_name>:
c00028e6:	55                   	push   ebp
c00028e7:	89 d5                	mov    ebp,edx
c00028e9:	57                   	push   edi
c00028ea:	89 c7                	mov    edi,eax
c00028ec:	56                   	push   esi
c00028ed:	31 f6                	xor    esi,esi
c00028ef:	53                   	push   ebx
c00028f0:	83 ec 3c             	sub    esp,0x3c
c00028f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00028f5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00028f9:	8b 07                	mov    eax,DWORD PTR [edi]
c00028fb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00028fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002902:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002906:	e8 9b f4 ff ff       	call   c0001da6 <tchar2uni>
c000290b:	89 c3                	mov    ebx,eax
c000290d:	83 f8 ff             	cmp    eax,0xffffffff
c0002910:	75 0a                	jne    c000291c <create_name+0x36>
c0002912:	b8 06 00 00 00       	mov    eax,0x6
c0002917:	e9 9e 02 00 00       	jmp    c0002bba <create_name+0x2d4>
c000291c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002921:	76 0c                	jbe    c000292f <create_name+0x49>
c0002923:	c1 e8 10             	shr    eax,0x10
c0002926:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000292a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000292e:	46                   	inc    esi
c000292f:	66 83 fb 1f          	cmp    bx,0x1f
c0002933:	76 4f                	jbe    c0002984 <create_name+0x9e>
c0002935:	66 83 fb 5c          	cmp    bx,0x5c
c0002939:	74 35                	je     c0002970 <create_name+0x8a>
c000293b:	66 83 fb 2f          	cmp    bx,0x2f
c000293f:	74 2f                	je     c0002970 <create_name+0x8a>
c0002941:	66 83 fb 7f          	cmp    bx,0x7f
c0002945:	77 11                	ja     c0002958 <create_name+0x72>
c0002947:	0f b7 d3             	movzx  edx,bx
c000294a:	b8 02 d0 01 c0       	mov    eax,0xc001d002
c000294f:	e8 3a f4 ff ff       	call   c0001d8e <chk_chr>
c0002954:	85 c0                	test   eax,eax
c0002956:	75 ba                	jne    c0002912 <create_name+0x2c>
c0002958:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000295e:	77 b2                	ja     c0002912 <create_name+0x2c>
c0002960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002964:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002968:	46                   	inc    esi
c0002969:	eb 97                	jmp    c0002902 <create_name+0x1c>
c000296b:	40                   	inc    eax
c000296c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002970:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002974:	8a 10                	mov    dl,BYTE PTR [eax]
c0002976:	80 fa 2f             	cmp    dl,0x2f
c0002979:	74 f0                	je     c000296b <create_name+0x85>
c000297b:	80 fa 5c             	cmp    dl,0x5c
c000297e:	74 eb                	je     c000296b <create_name+0x85>
c0002980:	31 db                	xor    ebx,ebx
c0002982:	eb 02                	jmp    c0002986 <create_name+0xa0>
c0002984:	b3 04                	mov    bl,0x4
c0002986:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000298a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000298d:	85 f6                	test   esi,esi
c000298f:	74 18                	je     c00029a9 <create_name+0xc3>
c0002991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002995:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c000299a:	66 83 f8 20          	cmp    ax,0x20
c000299e:	74 06                	je     c00029a6 <create_name+0xc0>
c00029a0:	66 83 f8 2e          	cmp    ax,0x2e
c00029a4:	75 03                	jne    c00029a9 <create_name+0xc3>
c00029a6:	4e                   	dec    esi
c00029a7:	eb e4                	jmp    c000298d <create_name+0xa7>
c00029a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ad:	31 ed                	xor    ebp,ebp
c00029af:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029b5:	85 f6                	test   esi,esi
c00029b7:	0f 84 55 ff ff ff    	je     c0002912 <create_name+0x2c>
c00029bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029c1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029c4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029c8:	66 83 f8 20          	cmp    ax,0x20
c00029cc:	75 04                	jne    c00029d2 <create_name+0xec>
c00029ce:	89 d5                	mov    ebp,edx
c00029d0:	eb eb                	jmp    c00029bd <create_name+0xd7>
c00029d2:	85 ed                	test   ebp,ebp
c00029d4:	75 06                	jne    c00029dc <create_name+0xf6>
c00029d6:	66 83 f8 2e          	cmp    ax,0x2e
c00029da:	75 08                	jne    c00029e4 <create_name+0xfe>
c00029dc:	83 cb 03             	or     ebx,0x3
c00029df:	eb 03                	jmp    c00029e4 <create_name+0xfe>
c00029e1:	4e                   	dec    esi
c00029e2:	74 0c                	je     c00029f0 <create_name+0x10a>
c00029e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e8:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c00029ee:	75 f1                	jne    c00029e1 <create_name+0xfb>
c00029f0:	b9 0b 00 00 00       	mov    ecx,0xb
c00029f5:	8d 47 20             	lea    eax,[edi+0x20]
c00029f8:	ba 20 00 00 00       	mov    edx,0x20
c00029fd:	e8 5e f3 ff ff       	call   c0001d60 <mem_set>
c0002a02:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002a0a:	31 c9                	xor    ecx,ecx
c0002a0c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a11:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a1c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a20:	66 85 ed             	test   bp,bp
c0002a23:	0f 84 30 01 00 00    	je     c0002b59 <create_name+0x273>
c0002a29:	66 83 fd 20          	cmp    bp,0x20
c0002a2d:	74 10                	je     c0002a3f <create_name+0x159>
c0002a2f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a33:	75 13                	jne    c0002a48 <create_name+0x162>
c0002a35:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a39:	0f 84 6b 01 00 00    	je     c0002baa <create_name+0x2c4>
c0002a3f:	83 cb 03             	or     ebx,0x3
c0002a42:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a46:	eb c9                	jmp    c0002a11 <create_name+0x12b>
c0002a48:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a4c:	73 0b                	jae    c0002a59 <create_name+0x173>
c0002a4e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a52:	75 47                	jne    c0002a9b <create_name+0x1b5>
c0002a54:	e9 51 01 00 00       	jmp    c0002baa <create_name+0x2c4>
c0002a59:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a5e:	75 10                	jne    c0002a70 <create_name+0x18a>
c0002a60:	83 cb 03             	or     ebx,0x3
c0002a63:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a6b:	e9 e9 00 00 00       	jmp    c0002b59 <create_name+0x273>
c0002a70:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a74:	74 0d                	je     c0002a83 <create_name+0x19d>
c0002a76:	83 cb 03             	or     ebx,0x3
c0002a79:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a7d:	0f 87 d6 00 00 00    	ja     c0002b59 <create_name+0x273>
c0002a83:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002a88:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002a8c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a94:	b9 08 00 00 00       	mov    ecx,0x8
c0002a99:	eb a7                	jmp    c0002a42 <create_name+0x15c>
c0002a9b:	66 83 fd 7f          	cmp    bp,0x7f
c0002a9f:	76 68                	jbe    c0002b09 <create_name+0x223>
c0002aa1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002aa5:	88 da                	mov    dl,bl
c0002aa7:	83 ca 02             	or     edx,0x2
c0002aaa:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002aae:	50                   	push   eax
c0002aaf:	50                   	push   eax
c0002ab0:	68 b5 01 00 00       	push   0x1b5
c0002ab5:	55                   	push   ebp
c0002ab6:	e8 e1 2f 00 00       	call   c0005a9c <ff_uni2oem>
c0002abb:	83 c4 10             	add    esp,0x10
c0002abe:	89 c5                	mov    ebp,eax
c0002ac0:	a8 80                	test   al,0x80
c0002ac2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ac6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aca:	74 0c                	je     c0002ad8 <create_name+0x1f2>
c0002acc:	83 e5 7f             	and    ebp,0x7f
c0002acf:	0f b6 ad c0 d0 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe2f40]
c0002ad6:	eb 2a                	jmp    c0002b02 <create_name+0x21c>
c0002ad8:	66 3d ff 00          	cmp    ax,0xff
c0002adc:	76 24                	jbe    c0002b02 <create_name+0x21c>
c0002ade:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ae2:	48                   	dec    eax
c0002ae3:	39 c8                	cmp    eax,ecx
c0002ae5:	77 0c                	ja     c0002af3 <create_name+0x20d>
c0002ae7:	83 cb 03             	or     ebx,0x3
c0002aea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002aee:	e9 4f ff ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002af3:	89 e8                	mov    eax,ebp
c0002af5:	88 d3                	mov    bl,dl
c0002af7:	66 c1 e8 08          	shr    ax,0x8
c0002afb:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002aff:	41                   	inc    ecx
c0002b00:	eb 4b                	jmp    c0002b4d <create_name+0x267>
c0002b02:	88 d3                	mov    bl,dl
c0002b04:	66 85 ed             	test   bp,bp
c0002b07:	74 19                	je     c0002b22 <create_name+0x23c>
c0002b09:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b0d:	0f b7 d5             	movzx  edx,bp
c0002b10:	b8 0b d0 01 c0       	mov    eax,0xc001d00b
c0002b15:	e8 74 f2 ff ff       	call   c0001d8e <chk_chr>
c0002b1a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b1e:	85 c0                	test   eax,eax
c0002b20:	74 0a                	je     c0002b2c <create_name+0x246>
c0002b22:	83 cb 03             	or     ebx,0x3
c0002b25:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b2a:	eb 21                	jmp    c0002b4d <create_name+0x267>
c0002b2c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b2f:	66 83 f8 19          	cmp    ax,0x19
c0002b33:	77 07                	ja     c0002b3c <create_name+0x256>
c0002b35:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b3a:	eb 11                	jmp    c0002b4d <create_name+0x267>
c0002b3c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b3f:	66 83 f8 19          	cmp    ax,0x19
c0002b43:	77 08                	ja     c0002b4d <create_name+0x267>
c0002b45:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b4a:	83 ed 20             	sub    ebp,0x20
c0002b4d:	89 e8                	mov    eax,ebp
c0002b4f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b53:	41                   	inc    ecx
c0002b54:	e9 e9 fe ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002b59:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b5d:	75 04                	jne    c0002b63 <create_name+0x27d>
c0002b5f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b63:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b68:	75 05                	jne    c0002b6f <create_name+0x289>
c0002b6a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b6f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b73:	83 e0 0c             	and    eax,0xc
c0002b76:	3c 0c                	cmp    al,0xc
c0002b78:	74 0b                	je     c0002b85 <create_name+0x29f>
c0002b7a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b7e:	83 e0 03             	and    eax,0x3
c0002b81:	3c 03                	cmp    al,0x3
c0002b83:	75 05                	jne    c0002b8a <create_name+0x2a4>
c0002b85:	83 cb 02             	or     ebx,0x2
c0002b88:	eb 19                	jmp    c0002ba3 <create_name+0x2bd>
c0002b8a:	f6 c3 02             	test   bl,0x2
c0002b8d:	75 14                	jne    c0002ba3 <create_name+0x2bd>
c0002b8f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002b94:	74 03                	je     c0002b99 <create_name+0x2b3>
c0002b96:	83 cb 10             	or     ebx,0x10
c0002b99:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002b9e:	74 03                	je     c0002ba3 <create_name+0x2bd>
c0002ba0:	83 cb 08             	or     ebx,0x8
c0002ba3:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002ba6:	31 c0                	xor    eax,eax
c0002ba8:	eb 10                	jmp    c0002bba <create_name+0x2d4>
c0002baa:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002baf:	0f 85 ce fe ff ff    	jne    c0002a83 <create_name+0x19d>
c0002bb5:	e9 a6 fe ff ff       	jmp    c0002a60 <create_name+0x17a>
c0002bba:	83 c4 3c             	add    esp,0x3c
c0002bbd:	5b                   	pop    ebx
c0002bbe:	5e                   	pop    esi
c0002bbf:	5f                   	pop    edi
c0002bc0:	5d                   	pop    ebp
c0002bc1:	c3                   	ret    

c0002bc2 <cmp_lfn>:
c0002bc2:	55                   	push   ebp
c0002bc3:	57                   	push   edi
c0002bc4:	89 d7                	mov    edi,edx
c0002bc6:	56                   	push   esi
c0002bc7:	53                   	push   ebx
c0002bc8:	83 ec 1c             	sub    esp,0x1c
c0002bcb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bcf:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bd2:	e8 48 f1 ff ff       	call   c0001d1f <ld_word>
c0002bd7:	66 85 c0             	test   ax,ax
c0002bda:	74 07                	je     c0002be3 <cmp_lfn+0x21>
c0002bdc:	31 c0                	xor    eax,eax
c0002bde:	e9 9a 00 00 00       	jmp    c0002c7d <cmp_lfn+0xbb>
c0002be3:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002be5:	bd 01 00 00 00       	mov    ebp,0x1
c0002bea:	83 e3 3f             	and    ebx,0x3f
c0002bed:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002bf5:	4b                   	dec    ebx
c0002bf6:	6b db 0d             	imul   ebx,ebx,0xd
c0002bf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bfd:	0f b6 80 40 d1 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe2ec0]
c0002c04:	01 f8                	add    eax,edi
c0002c06:	e8 14 f1 ff ff       	call   c0001d1f <ld_word>
c0002c0b:	66 85 ed             	test   bp,bp
c0002c0e:	89 c6                	mov    esi,eax
c0002c10:	74 3c                	je     c0002c4e <cmp_lfn+0x8c>
c0002c12:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c18:	77 c2                	ja     c0002bdc <cmp_lfn+0x1a>
c0002c1a:	83 ec 0c             	sub    esp,0xc
c0002c1d:	0f b7 c0             	movzx  eax,ax
c0002c20:	50                   	push   eax
c0002c21:	e8 8e 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c26:	89 c5                	mov    ebp,eax
c0002c28:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c2b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c33:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c37:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c3a:	e8 75 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c3f:	83 c4 10             	add    esp,0x10
c0002c42:	39 c5                	cmp    ebp,eax
c0002c44:	75 96                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c46:	89 f5                	mov    ebp,esi
c0002c48:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c4c:	eb 04                	jmp    c0002c52 <cmp_lfn+0x90>
c0002c4e:	66 46                	inc    si
c0002c50:	75 8a                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c52:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c56:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c5b:	75 9c                	jne    c0002bf9 <cmp_lfn+0x37>
c0002c5d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c60:	74 16                	je     c0002c78 <cmp_lfn+0xb6>
c0002c62:	66 85 ed             	test   bp,bp
c0002c65:	74 11                	je     c0002c78 <cmp_lfn+0xb6>
c0002c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c6b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c70:	0f 94 c0             	sete   al
c0002c73:	0f b6 c0             	movzx  eax,al
c0002c76:	eb 05                	jmp    c0002c7d <cmp_lfn+0xbb>
c0002c78:	b8 01 00 00 00       	mov    eax,0x1
c0002c7d:	83 c4 1c             	add    esp,0x1c
c0002c80:	5b                   	pop    ebx
c0002c81:	5e                   	pop    esi
c0002c82:	5f                   	pop    edi
c0002c83:	5d                   	pop    ebp
c0002c84:	c3                   	ret    

c0002c85 <sync_fs>:
c0002c85:	56                   	push   esi
c0002c86:	53                   	push   ebx
c0002c87:	53                   	push   ebx
c0002c88:	89 c3                	mov    ebx,eax
c0002c8a:	e8 53 f5 ff ff       	call   c00021e2 <sync_window>
c0002c8f:	85 c0                	test   eax,eax
c0002c91:	0f 85 9a 00 00 00    	jne    c0002d31 <sync_fs+0xac>
c0002c97:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002c9a:	75 7b                	jne    c0002d17 <sync_fs+0x92>
c0002c9c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002ca0:	75 75                	jne    c0002d17 <sync_fs+0x92>
c0002ca2:	b9 00 02 00 00       	mov    ecx,0x200
c0002ca7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002caa:	31 d2                	xor    edx,edx
c0002cac:	89 f0                	mov    eax,esi
c0002cae:	e8 ad f0 ff ff       	call   c0001d60 <mem_set>
c0002cb3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002cb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cbe:	e8 81 f0 ff ff       	call   c0001d44 <st_word>
c0002cc3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002cc8:	89 f0                	mov    eax,esi
c0002cca:	e8 79 f0 ff ff       	call   c0001d48 <st_dword>
c0002ccf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cd5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cda:	e8 69 f0 ff ff       	call   c0001d48 <st_dword>
c0002cdf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002ce2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002ce8:	e8 5b f0 ff ff       	call   c0001d48 <st_dword>
c0002ced:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002cf0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002cf6:	e8 4d f0 ff ff       	call   c0001d48 <st_dword>
c0002cfb:	6a 01                	push   0x1
c0002cfd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d00:	40                   	inc    eax
c0002d01:	50                   	push   eax
c0002d02:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d05:	56                   	push   esi
c0002d06:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d0a:	50                   	push   eax
c0002d0b:	e8 da ef ff ff       	call   c0001cea <disk_write>
c0002d10:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d14:	83 c4 10             	add    esp,0x10
c0002d17:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d1b:	51                   	push   ecx
c0002d1c:	6a 00                	push   0x0
c0002d1e:	6a 00                	push   0x0
c0002d20:	50                   	push   eax
c0002d21:	e8 da ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d26:	83 c4 10             	add    esp,0x10
c0002d29:	85 c0                	test   eax,eax
c0002d2b:	0f 95 c0             	setne  al
c0002d2e:	0f b6 c0             	movzx  eax,al
c0002d31:	5a                   	pop    edx
c0002d32:	5b                   	pop    ebx
c0002d33:	5e                   	pop    esi
c0002d34:	c3                   	ret    

c0002d35 <create_partition>:
c0002d35:	55                   	push   ebp
c0002d36:	0f b6 c0             	movzx  eax,al
c0002d39:	57                   	push   edi
c0002d3a:	56                   	push   esi
c0002d3b:	53                   	push   ebx
c0002d3c:	83 ec 40             	sub    esp,0x40
c0002d3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d47:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d4b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d4f:	50                   	push   eax
c0002d50:	6a 01                	push   0x1
c0002d52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d56:	e8 a5 ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d5b:	83 c4 10             	add    esp,0x10
c0002d5e:	85 c0                	test   eax,eax
c0002d60:	0f 85 69 01 00 00    	jne    c0002ecf <create_partition+0x19a>
c0002d66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d6a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d73:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d78:	31 d2                	xor    edx,edx
c0002d7a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d83:	f7 f3                	div    ebx
c0002d85:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002d8a:	76 0c                	jbe    c0002d98 <create_partition+0x63>
c0002d8c:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002d90:	49                   	dec    ecx
c0002d91:	75 e5                	jne    c0002d78 <create_partition+0x43>
c0002d93:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002d98:	b9 00 02 00 00       	mov    ecx,0x200
c0002d9d:	31 d2                	xor    edx,edx
c0002d9f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002da3:	e8 b8 ef ff ff       	call   c0001d60 <mem_set>
c0002da8:	b9 64 00 00 00       	mov    ecx,0x64
c0002dad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002db1:	31 d2                	xor    edx,edx
c0002db3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002dbb:	f7 f1                	div    ecx
c0002dbd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002dc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002dc6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dca:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002dd0:	85 c9                	test   ecx,ecx
c0002dd2:	75 34                	jne    c0002e08 <create_partition+0xd3>
c0002dd4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dd8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ddd:	05 fe 01 00 00       	add    eax,0x1fe
c0002de2:	e8 5d ef ff ff       	call   c0001d44 <st_word>
c0002de7:	6a 01                	push   0x1
c0002de9:	6a 00                	push   0x0
c0002deb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002def:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002df3:	e8 f2 ee ff ff       	call   c0001cea <disk_write>
c0002df8:	83 c4 10             	add    esp,0x10
c0002dfb:	85 c0                	test   eax,eax
c0002dfd:	0f 95 c0             	setne  al
c0002e00:	0f b6 c0             	movzx  eax,al
c0002e03:	e9 cc 00 00 00       	jmp    c0002ed4 <create_partition+0x19f>
c0002e08:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002e0c:	76 c6                	jbe    c0002dd4 <create_partition+0x9f>
c0002e0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e12:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e16:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e19:	83 fe 64             	cmp    esi,0x64
c0002e1c:	77 0d                	ja     c0002e2b <create_partition+0xf6>
c0002e1e:	74 07                	je     c0002e27 <create_partition+0xf2>
c0002e20:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e25:	eb 04                	jmp    c0002e2b <create_partition+0xf6>
c0002e27:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e2b:	31 c0                	xor    eax,eax
c0002e2d:	89 f2                	mov    edx,esi
c0002e2f:	01 ca                	add    edx,ecx
c0002e31:	0f 92 c0             	setb   al
c0002e34:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e38:	77 04                	ja     c0002e3e <create_partition+0x109>
c0002e3a:	85 c0                	test   eax,eax
c0002e3c:	74 08                	je     c0002e46 <create_partition+0x111>
c0002e3e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e42:	29 ce                	sub    esi,ecx
c0002e44:	eb 04                	jmp    c0002e4a <create_partition+0x115>
c0002e46:	85 f6                	test   esi,esi
c0002e48:	74 8a                	je     c0002dd4 <create_partition+0x9f>
c0002e4a:	89 ca                	mov    edx,ecx
c0002e4c:	89 d8                	mov    eax,ebx
c0002e4e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e53:	e8 f0 ee ff ff       	call   c0001d48 <st_dword>
c0002e58:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e5b:	89 f2                	mov    edx,esi
c0002e5d:	83 c3 10             	add    ebx,0x10
c0002e60:	e8 e3 ee ff ff       	call   c0001d48 <st_dword>
c0002e65:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e6a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e6e:	31 d2                	xor    edx,edx
c0002e70:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e73:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e77:	89 c8                	mov    eax,ecx
c0002e79:	01 f1                	add    ecx,esi
c0002e7b:	f7 f5                	div    ebp
c0002e7d:	89 d5                	mov    ebp,edx
c0002e7f:	31 d2                	xor    edx,edx
c0002e81:	45                   	inc    ebp
c0002e82:	f7 f7                	div    edi
c0002e84:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002e87:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002e8a:	89 c2                	mov    edx,eax
c0002e8c:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002e8f:	c1 ea 02             	shr    edx,0x2
c0002e92:	83 e2 c0             	and    edx,0xffffffc0
c0002e95:	09 ea                	or     edx,ebp
c0002e97:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e9c:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	f7 f5                	div    ebp
c0002ea3:	89 d6                	mov    esi,edx
c0002ea5:	31 d2                	xor    edx,edx
c0002ea7:	46                   	inc    esi
c0002ea8:	f7 f7                	div    edi
c0002eaa:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002ead:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002eb0:	89 c7                	mov    edi,eax
c0002eb2:	c1 ef 02             	shr    edi,0x2
c0002eb5:	83 e7 c0             	and    edi,0xffffffc0
c0002eb8:	09 fe                	or     esi,edi
c0002eba:	89 f2                	mov    edx,esi
c0002ebc:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002ebf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002ec4:	0f 85 06 ff ff ff    	jne    c0002dd0 <create_partition+0x9b>
c0002eca:	e9 05 ff ff ff       	jmp    c0002dd4 <create_partition+0x9f>
c0002ecf:	b8 01 00 00 00       	mov    eax,0x1
c0002ed4:	83 c4 3c             	add    esp,0x3c
c0002ed7:	5b                   	pop    ebx
c0002ed8:	5e                   	pop    esi
c0002ed9:	5f                   	pop    edi
c0002eda:	5d                   	pop    ebp
c0002edb:	c3                   	ret    

c0002edc <get_fileinfo>:
c0002edc:	55                   	push   ebp
c0002edd:	57                   	push   edi
c0002ede:	56                   	push   esi
c0002edf:	53                   	push   ebx
c0002ee0:	83 ec 1c             	sub    esp,0x1c
c0002ee3:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ee5:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002ee9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002eed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002ef1:	0f 84 c1 01 00 00    	je     c00030b8 <get_fileinfo+0x1dc>
c0002ef7:	89 d3                	mov    ebx,edx
c0002ef9:	89 c6                	mov    esi,eax
c0002efb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002eff:	74 6a                	je     c0002f6b <get_fileinfo+0x8f>
c0002f01:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f09:	31 ed                	xor    ebp,ebp
c0002f0b:	31 ff                	xor    edi,edi
c0002f0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f11:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f18:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f1c:	66 85 d2             	test   dx,dx
c0002f1f:	74 3e                	je     c0002f5f <get_fileinfo+0x83>
c0002f21:	66 85 ed             	test   bp,bp
c0002f24:	75 0c                	jne    c0002f32 <get_fileinfo+0x56>
c0002f26:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f2c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f30:	76 22                	jbe    c0002f54 <get_fileinfo+0x78>
c0002f32:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f37:	89 e8                	mov    eax,ebp
c0002f39:	29 f9                	sub    ecx,edi
c0002f3b:	c1 e0 10             	shl    eax,0x10
c0002f3e:	09 d0                	or     eax,edx
c0002f40:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f44:	e8 23 ef ff ff       	call   c0001e6c <put_utf>
c0002f49:	84 c0                	test   al,al
c0002f4b:	74 10                	je     c0002f5d <get_fileinfo+0x81>
c0002f4d:	0f b6 c0             	movzx  eax,al
c0002f50:	31 d2                	xor    edx,edx
c0002f52:	01 c7                	add    edi,eax
c0002f54:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f59:	89 d5                	mov    ebp,edx
c0002f5b:	eb b0                	jmp    c0002f0d <get_fileinfo+0x31>
c0002f5d:	31 ff                	xor    edi,edi
c0002f5f:	66 85 ed             	test   bp,bp
c0002f62:	74 02                	je     c0002f66 <get_fileinfo+0x8a>
c0002f64:	31 ff                	xor    edi,edi
c0002f66:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f6b:	31 ff                	xor    edi,edi
c0002f6d:	31 c9                	xor    ecx,ecx
c0002f6f:	83 f9 0a             	cmp    ecx,0xa
c0002f72:	0f 87 ad 00 00 00    	ja     c0003025 <get_fileinfo+0x149>
c0002f78:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f7b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f7e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002f82:	66 83 fa 20          	cmp    dx,0x20
c0002f86:	0f 84 92 00 00 00    	je     c000301e <get_fileinfo+0x142>
c0002f8c:	66 83 fa 05          	cmp    dx,0x5
c0002f90:	75 05                	jne    c0002f97 <get_fileinfo+0xbb>
c0002f92:	ba e5 00 00 00       	mov    edx,0xe5
c0002f97:	83 ff 0b             	cmp    edi,0xb
c0002f9a:	77 0b                	ja     c0002fa7 <get_fileinfo+0xcb>
c0002f9c:	83 fd 09             	cmp    ebp,0x9
c0002f9f:	75 06                	jne    c0002fa7 <get_fileinfo+0xcb>
c0002fa1:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002fa6:	47                   	inc    edi
c0002fa7:	0f b7 c2             	movzx  eax,dx
c0002faa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fae:	e8 ed ed ff ff       	call   c0001da0 <dbc_1st>
c0002fb3:	85 c0                	test   eax,eax
c0002fb5:	74 2f                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fb7:	83 fd 08             	cmp    ebp,0x8
c0002fba:	74 2a                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fbc:	83 fd 0b             	cmp    ebp,0xb
c0002fbf:	74 25                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fc1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fc4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fc8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fcc:	e8 d2 ed ff ff       	call   c0001da3 <dbc_2nd>
c0002fd1:	85 c0                	test   eax,eax
c0002fd3:	74 11                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002fd9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002fde:	c1 e2 08             	shl    edx,0x8
c0002fe1:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002fe4:	09 c2                	or     edx,eax
c0002fe6:	0f b7 d2             	movzx  edx,dx
c0002fe9:	50                   	push   eax
c0002fea:	50                   	push   eax
c0002feb:	68 b5 01 00 00       	push   0x1b5
c0002ff0:	52                   	push   edx
c0002ff1:	e8 46 2b 00 00       	call   c0005b3c <ff_oem2uni>
c0002ff6:	83 c4 10             	add    esp,0x10
c0002ff9:	66 85 c0             	test   ax,ax
c0002ffc:	75 04                	jne    c0003002 <get_fileinfo+0x126>
c0002ffe:	31 ff                	xor    edi,edi
c0003000:	eb 23                	jmp    c0003025 <get_fileinfo+0x149>
c0003002:	b9 0c 00 00 00       	mov    ecx,0xc
c0003007:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000300b:	29 f9                	sub    ecx,edi
c000300d:	0f b7 c0             	movzx  eax,ax
c0003010:	e8 57 ee ff ff       	call   c0001e6c <put_utf>
c0003015:	84 c0                	test   al,al
c0003017:	74 e5                	je     c0002ffe <get_fileinfo+0x122>
c0003019:	0f b6 c0             	movzx  eax,al
c000301c:	01 c7                	add    edi,eax
c000301e:	89 e9                	mov    ecx,ebp
c0003020:	e9 4a ff ff ff       	jmp    c0002f6f <get_fileinfo+0x93>
c0003025:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000302a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000302e:	75 54                	jne    c0003084 <get_fileinfo+0x1a8>
c0003030:	85 ff                	test   edi,edi
c0003032:	75 0b                	jne    c000303f <get_fileinfo+0x163>
c0003034:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003038:	ba 01 00 00 00       	mov    edx,0x1
c000303d:	eb 33                	jmp    c0003072 <get_fileinfo+0x196>
c000303f:	b1 08                	mov    cl,0x8
c0003041:	31 d2                	xor    edx,edx
c0003043:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003049:	84 c0                	test   al,al
c000304b:	74 25                	je     c0003072 <get_fileinfo+0x196>
c000304d:	66 83 f8 2e          	cmp    ax,0x2e
c0003051:	74 16                	je     c0003069 <get_fileinfo+0x18d>
c0003053:	8d 78 bf             	lea    edi,[eax-0x41]
c0003056:	66 83 ff 19          	cmp    di,0x19
c000305a:	77 0f                	ja     c000306b <get_fileinfo+0x18f>
c000305c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000305f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003062:	74 07                	je     c000306b <get_fileinfo+0x18f>
c0003064:	83 c0 20             	add    eax,0x20
c0003067:	eb 02                	jmp    c000306b <get_fileinfo+0x18f>
c0003069:	b1 10                	mov    cl,0x10
c000306b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000306f:	42                   	inc    edx
c0003070:	eb d1                	jmp    c0003043 <get_fileinfo+0x167>
c0003072:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003077:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000307a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000307e:	75 04                	jne    c0003084 <get_fileinfo+0x1a8>
c0003080:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003084:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003087:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000308a:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c000308d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003090:	83 c0 1c             	add    eax,0x1c
c0003093:	e8 94 ec ff ff       	call   c0001d2c <ld_dword>
c0003098:	89 03                	mov    DWORD PTR [ebx],eax
c000309a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309d:	83 c0 16             	add    eax,0x16
c00030a0:	e8 7a ec ff ff       	call   c0001d1f <ld_word>
c00030a5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00030a9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030ac:	83 c0 18             	add    eax,0x18
c00030af:	e8 6b ec ff ff       	call   c0001d1f <ld_word>
c00030b4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030b8:	83 c4 1c             	add    esp,0x1c
c00030bb:	5b                   	pop    ebx
c00030bc:	5e                   	pop    esi
c00030bd:	5f                   	pop    edi
c00030be:	5d                   	pop    ebp
c00030bf:	c3                   	ret    

c00030c0 <ld_clust.isra.0>:
c00030c0:	56                   	push   esi
c00030c1:	89 c6                	mov    esi,eax
c00030c3:	53                   	push   ebx
c00030c4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030c7:	89 d3                	mov    ebx,edx
c00030c9:	e8 51 ec ff ff       	call   c0001d1f <ld_word>
c00030ce:	0f b7 c8             	movzx  ecx,ax
c00030d1:	89 f0                	mov    eax,esi
c00030d3:	3c 03                	cmp    al,0x3
c00030d5:	75 0d                	jne    c00030e4 <ld_clust.isra.0+0x24>
c00030d7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030da:	e8 40 ec ff ff       	call   c0001d1f <ld_word>
c00030df:	c1 e0 10             	shl    eax,0x10
c00030e2:	09 c1                	or     ecx,eax
c00030e4:	89 c8                	mov    eax,ecx
c00030e6:	5b                   	pop    ebx
c00030e7:	5e                   	pop    esi
c00030e8:	c3                   	ret    

c00030e9 <st_clust.isra.1>:
c00030e9:	56                   	push   esi
c00030ea:	89 c6                	mov    esi,eax
c00030ec:	53                   	push   ebx
c00030ed:	89 d3                	mov    ebx,edx
c00030ef:	0f b7 d1             	movzx  edx,cx
c00030f2:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00030f5:	e8 4a ec ff ff       	call   c0001d44 <st_word>
c00030fa:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00030fd:	75 0f                	jne    c000310e <st_clust.isra.1+0x25>
c00030ff:	c1 e9 10             	shr    ecx,0x10
c0003102:	8d 43 14             	lea    eax,[ebx+0x14]
c0003105:	89 ca                	mov    edx,ecx
c0003107:	5b                   	pop    ebx
c0003108:	5e                   	pop    esi
c0003109:	e9 36 ec ff ff       	jmp    c0001d44 <st_word>
c000310e:	5b                   	pop    ebx
c000310f:	5e                   	pop    esi
c0003110:	c3                   	ret    

c0003111 <get_fat.isra.2>:
c0003111:	b9 01 00 00 00       	mov    ecx,0x1
c0003116:	83 fa 01             	cmp    edx,0x1
c0003119:	0f 86 f1 00 00 00    	jbe    c0003210 <get_fat.isra.2+0xff>
c000311f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003122:	0f 83 e8 00 00 00    	jae    c0003210 <get_fat.isra.2+0xff>
c0003128:	55                   	push   ebp
c0003129:	57                   	push   edi
c000312a:	89 c7                	mov    edi,eax
c000312c:	56                   	push   esi
c000312d:	89 d6                	mov    esi,edx
c000312f:	53                   	push   ebx
c0003130:	83 ec 0c             	sub    esp,0xc
c0003133:	8a 00                	mov    al,BYTE PTR [eax]
c0003135:	3c 02                	cmp    al,0x2
c0003137:	74 78                	je     c00031b1 <get_fat.isra.2+0xa0>
c0003139:	3c 03                	cmp    al,0x3
c000313b:	0f 84 97 00 00 00    	je     c00031d8 <get_fat.isra.2+0xc7>
c0003141:	fe c8                	dec    al
c0003143:	0f 85 bd 00 00 00    	jne    c0003206 <get_fat.isra.2+0xf5>
c0003149:	89 d3                	mov    ebx,edx
c000314b:	89 f8                	mov    eax,edi
c000314d:	d1 eb                	shr    ebx,1
c000314f:	01 d3                	add    ebx,edx
c0003151:	89 da                	mov    edx,ebx
c0003153:	c1 ea 09             	shr    edx,0x9
c0003156:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003159:	e8 e7 f0 ff ff       	call   c0002245 <move_window>
c000315e:	85 c0                	test   eax,eax
c0003160:	74 08                	je     c000316a <get_fat.isra.2+0x59>
c0003162:	83 c9 ff             	or     ecx,0xffffffff
c0003165:	e9 9c 00 00 00       	jmp    c0003206 <get_fat.isra.2+0xf5>
c000316a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000316d:	89 f8                	mov    eax,edi
c000316f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003175:	89 ea                	mov    edx,ebp
c0003177:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000317b:	c1 ea 09             	shr    edx,0x9
c000317e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003181:	e8 bf f0 ff ff       	call   c0002245 <move_window>
c0003186:	85 c0                	test   eax,eax
c0003188:	75 d8                	jne    c0003162 <get_fat.isra.2+0x51>
c000318a:	0f b6 c3             	movzx  eax,bl
c000318d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003193:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003198:	c1 e3 08             	shl    ebx,0x8
c000319b:	09 c3                	or     ebx,eax
c000319d:	89 d9                	mov    ecx,ebx
c000319f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00031a5:	83 e6 01             	and    esi,0x1
c00031a8:	74 5c                	je     c0003206 <get_fat.isra.2+0xf5>
c00031aa:	89 d9                	mov    ecx,ebx
c00031ac:	c1 e9 04             	shr    ecx,0x4
c00031af:	eb 55                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031b1:	c1 ea 08             	shr    edx,0x8
c00031b4:	89 f8                	mov    eax,edi
c00031b6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031b9:	e8 87 f0 ff ff       	call   c0002245 <move_window>
c00031be:	85 c0                	test   eax,eax
c00031c0:	75 a0                	jne    c0003162 <get_fat.isra.2+0x51>
c00031c2:	01 f6                	add    esi,esi
c00031c4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ca:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ce:	e8 4c eb ff ff       	call   c0001d1f <ld_word>
c00031d3:	0f b7 c8             	movzx  ecx,ax
c00031d6:	eb 2e                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031d8:	c1 ea 07             	shr    edx,0x7
c00031db:	89 f8                	mov    eax,edi
c00031dd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031e0:	e8 60 f0 ff ff       	call   c0002245 <move_window>
c00031e5:	85 c0                	test   eax,eax
c00031e7:	0f 85 75 ff ff ff    	jne    c0003162 <get_fat.isra.2+0x51>
c00031ed:	c1 e6 02             	shl    esi,0x2
c00031f0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031f6:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031fa:	e8 2d eb ff ff       	call   c0001d2c <ld_dword>
c00031ff:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003204:	89 c1                	mov    ecx,eax
c0003206:	83 c4 0c             	add    esp,0xc
c0003209:	89 c8                	mov    eax,ecx
c000320b:	5b                   	pop    ebx
c000320c:	5e                   	pop    esi
c000320d:	5f                   	pop    edi
c000320e:	5d                   	pop    ebp
c000320f:	c3                   	ret    
c0003210:	89 c8                	mov    eax,ecx
c0003212:	c3                   	ret    

c0003213 <dir_sdi>:
c0003213:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003219:	0f 87 b6 00 00 00    	ja     c00032d5 <dir_sdi+0xc2>
c000321f:	55                   	push   ebp
c0003220:	57                   	push   edi
c0003221:	56                   	push   esi
c0003222:	53                   	push   ebx
c0003223:	89 d3                	mov    ebx,edx
c0003225:	83 ec 1c             	sub    esp,0x1c
c0003228:	f6 c2 1f             	test   dl,0x1f
c000322b:	74 0a                	je     c0003237 <dir_sdi+0x24>
c000322d:	b8 02 00 00 00       	mov    eax,0x2
c0003232:	e9 96 00 00 00       	jmp    c00032cd <dir_sdi+0xba>
c0003237:	89 c6                	mov    esi,eax
c0003239:	8b 38                	mov    edi,DWORD PTR [eax]
c000323b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000323e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003241:	85 c9                	test   ecx,ecx
c0003243:	75 23                	jne    c0003268 <dir_sdi+0x55>
c0003245:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003248:	76 07                	jbe    c0003251 <dir_sdi+0x3e>
c000324a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000324d:	85 c0                	test   eax,eax
c000324f:	75 15                	jne    c0003266 <dir_sdi+0x53>
c0003251:	89 da                	mov    edx,ebx
c0003253:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003257:	c1 ea 05             	shr    edx,0x5
c000325a:	39 c2                	cmp    edx,eax
c000325c:	73 cf                	jae    c000322d <dir_sdi+0x1a>
c000325e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003261:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003264:	eb 3d                	jmp    c00032a3 <dir_sdi+0x90>
c0003266:	89 c1                	mov    ecx,eax
c0003268:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000326c:	c1 e5 09             	shl    ebp,0x9
c000326f:	89 ca                	mov    edx,ecx
c0003271:	39 eb                	cmp    ebx,ebp
c0003273:	72 1c                	jb     c0003291 <dir_sdi+0x7e>
c0003275:	8b 06                	mov    eax,DWORD PTR [esi]
c0003277:	e8 95 fe ff ff       	call   c0003111 <get_fat.isra.2>
c000327c:	89 c1                	mov    ecx,eax
c000327e:	83 f8 ff             	cmp    eax,0xffffffff
c0003281:	74 45                	je     c00032c8 <dir_sdi+0xb5>
c0003283:	83 f8 01             	cmp    eax,0x1
c0003286:	76 a5                	jbe    c000322d <dir_sdi+0x1a>
c0003288:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c000328b:	76 a0                	jbe    c000322d <dir_sdi+0x1a>
c000328d:	29 eb                	sub    ebx,ebp
c000328f:	eb de                	jmp    c000326f <dir_sdi+0x5c>
c0003291:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003295:	89 f8                	mov    eax,edi
c0003297:	e8 c9 ec ff ff       	call   c0001f65 <clst2sect>
c000329c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00032a0:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032a3:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00032a6:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00032a9:	85 d2                	test   edx,edx
c00032ab:	74 80                	je     c000322d <dir_sdi+0x1a>
c00032ad:	89 d8                	mov    eax,ebx
c00032af:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032b5:	c1 e8 09             	shr    eax,0x9
c00032b8:	01 d0                	add    eax,edx
c00032ba:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032bd:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032c4:	31 c0                	xor    eax,eax
c00032c6:	eb 05                	jmp    c00032cd <dir_sdi+0xba>
c00032c8:	b8 01 00 00 00       	mov    eax,0x1
c00032cd:	83 c4 1c             	add    esp,0x1c
c00032d0:	5b                   	pop    ebx
c00032d1:	5e                   	pop    esi
c00032d2:	5f                   	pop    edi
c00032d3:	5d                   	pop    ebp
c00032d4:	c3                   	ret    
c00032d5:	b8 02 00 00 00       	mov    eax,0x2
c00032da:	c3                   	ret    

c00032db <create_chain>:
c00032db:	55                   	push   ebp
c00032dc:	89 c5                	mov    ebp,eax
c00032de:	57                   	push   edi
c00032df:	89 d7                	mov    edi,edx
c00032e1:	56                   	push   esi
c00032e2:	53                   	push   ebx
c00032e3:	83 ec 1c             	sub    esp,0x1c
c00032e6:	85 d2                	test   edx,edx
c00032e8:	8b 30                	mov    esi,DWORD PTR [eax]
c00032ea:	75 0e                	jne    c00032fa <create_chain+0x1f>
c00032ec:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00032ef:	85 c9                	test   ecx,ecx
c00032f1:	74 34                	je     c0003327 <create_chain+0x4c>
c00032f3:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00032f6:	77 34                	ja     c000332c <create_chain+0x51>
c00032f8:	eb 2d                	jmp    c0003327 <create_chain+0x4c>
c00032fa:	89 f0                	mov    eax,esi
c00032fc:	e8 10 fe ff ff       	call   c0003111 <get_fat.isra.2>
c0003301:	89 c3                	mov    ebx,eax
c0003303:	83 f8 01             	cmp    eax,0x1
c0003306:	77 0a                	ja     c0003312 <create_chain+0x37>
c0003308:	bb 01 00 00 00       	mov    ebx,0x1
c000330d:	e9 f9 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003312:	83 f8 ff             	cmp    eax,0xffffffff
c0003315:	0f 84 ed 00 00 00    	je     c0003408 <create_chain+0x12d>
c000331b:	89 f9                	mov    ecx,edi
c000331d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003320:	76 0a                	jbe    c000332c <create_chain+0x51>
c0003322:	e9 e4 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003327:	b9 01 00 00 00       	mov    ecx,0x1
c000332c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003330:	75 07                	jne    c0003339 <create_chain+0x5e>
c0003332:	31 db                	xor    ebx,ebx
c0003334:	e9 d2 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003339:	39 f9                	cmp    ecx,edi
c000333b:	75 46                	jne    c0003383 <create_chain+0xa8>
c000333d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003340:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003343:	77 05                	ja     c000334a <create_chain+0x6f>
c0003345:	bb 02 00 00 00       	mov    ebx,0x2
c000334a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000334e:	89 da                	mov    edx,ebx
c0003350:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003353:	e8 b9 fd ff ff       	call   c0003111 <get_fat.isra.2>
c0003358:	83 f8 01             	cmp    eax,0x1
c000335b:	74 ab                	je     c0003308 <create_chain+0x2d>
c000335d:	83 f8 ff             	cmp    eax,0xffffffff
c0003360:	0f 84 a2 00 00 00    	je     c0003408 <create_chain+0x12d>
c0003366:	85 c0                	test   eax,eax
c0003368:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000336c:	74 11                	je     c000337f <create_chain+0xa4>
c000336e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003371:	83 f8 01             	cmp    eax,0x1
c0003374:	76 0d                	jbe    c0003383 <create_chain+0xa8>
c0003376:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003379:	73 08                	jae    c0003383 <create_chain+0xa8>
c000337b:	89 c1                	mov    ecx,eax
c000337d:	eb 04                	jmp    c0003383 <create_chain+0xa8>
c000337f:	85 db                	test   ebx,ebx
c0003381:	75 3d                	jne    c00033c0 <create_chain+0xe5>
c0003383:	89 cb                	mov    ebx,ecx
c0003385:	43                   	inc    ebx
c0003386:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003389:	77 0a                	ja     c0003395 <create_chain+0xba>
c000338b:	83 f9 01             	cmp    ecx,0x1
c000338e:	76 a2                	jbe    c0003332 <create_chain+0x57>
c0003390:	bb 02 00 00 00       	mov    ebx,0x2
c0003395:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003399:	89 da                	mov    edx,ebx
c000339b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000339e:	e8 6e fd ff ff       	call   c0003111 <get_fat.isra.2>
c00033a3:	85 c0                	test   eax,eax
c00033a5:	74 19                	je     c00033c0 <create_chain+0xe5>
c00033a7:	83 f8 01             	cmp    eax,0x1
c00033aa:	0f 84 58 ff ff ff    	je     c0003308 <create_chain+0x2d>
c00033b0:	40                   	inc    eax
c00033b1:	74 55                	je     c0003408 <create_chain+0x12d>
c00033b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033b7:	39 cb                	cmp    ebx,ecx
c00033b9:	75 ca                	jne    c0003385 <create_chain+0xaa>
c00033bb:	e9 72 ff ff ff       	jmp    c0003332 <create_chain+0x57>
c00033c0:	83 c9 ff             	or     ecx,0xffffffff
c00033c3:	89 da                	mov    edx,ebx
c00033c5:	89 f0                	mov    eax,esi
c00033c7:	e8 cf f2 ff ff       	call   c000269b <put_fat>
c00033cc:	85 c0                	test   eax,eax
c00033ce:	75 31                	jne    c0003401 <create_chain+0x126>
c00033d0:	85 ff                	test   edi,edi
c00033d2:	75 16                	jne    c00033ea <create_chain+0x10f>
c00033d4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033d7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033da:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033dd:	8d 57 fe             	lea    edx,[edi-0x2]
c00033e0:	39 d0                	cmp    eax,edx
c00033e2:	77 17                	ja     c00033fb <create_chain+0x120>
c00033e4:	48                   	dec    eax
c00033e5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00033e8:	eb 11                	jmp    c00033fb <create_chain+0x120>
c00033ea:	89 d9                	mov    ecx,ebx
c00033ec:	89 fa                	mov    edx,edi
c00033ee:	89 f0                	mov    eax,esi
c00033f0:	e8 a6 f2 ff ff       	call   c000269b <put_fat>
c00033f5:	85 c0                	test   eax,eax
c00033f7:	74 db                	je     c00033d4 <create_chain+0xf9>
c00033f9:	eb 06                	jmp    c0003401 <create_chain+0x126>
c00033fb:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c00033ff:	eb 0a                	jmp    c000340b <create_chain+0x130>
c0003401:	48                   	dec    eax
c0003402:	0f 85 00 ff ff ff    	jne    c0003308 <create_chain+0x2d>
c0003408:	83 cb ff             	or     ebx,0xffffffff
c000340b:	83 c4 1c             	add    esp,0x1c
c000340e:	89 d8                	mov    eax,ebx
c0003410:	5b                   	pop    ebx
c0003411:	5e                   	pop    esi
c0003412:	5f                   	pop    edi
c0003413:	5d                   	pop    ebp
c0003414:	c3                   	ret    

c0003415 <remove_chain>:
c0003415:	55                   	push   ebp
c0003416:	57                   	push   edi
c0003417:	56                   	push   esi
c0003418:	89 d6                	mov    esi,edx
c000341a:	53                   	push   ebx
c000341b:	83 ec 0c             	sub    esp,0xc
c000341e:	83 fa 01             	cmp    edx,0x1
c0003421:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003423:	76 65                	jbe    c000348a <remove_chain+0x75>
c0003425:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003428:	76 60                	jbe    c000348a <remove_chain+0x75>
c000342a:	89 c5                	mov    ebp,eax
c000342c:	89 ca                	mov    edx,ecx
c000342e:	85 c9                	test   ecx,ecx
c0003430:	74 0e                	je     c0003440 <remove_chain+0x2b>
c0003432:	83 c9 ff             	or     ecx,0xffffffff
c0003435:	89 d8                	mov    eax,ebx
c0003437:	e8 5f f2 ff ff       	call   c000269b <put_fat>
c000343c:	85 c0                	test   eax,eax
c000343e:	75 56                	jne    c0003496 <remove_chain+0x81>
c0003440:	89 f2                	mov    edx,esi
c0003442:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003445:	e8 c7 fc ff ff       	call   c0003111 <get_fat.isra.2>
c000344a:	89 c7                	mov    edi,eax
c000344c:	85 c0                	test   eax,eax
c000344e:	75 04                	jne    c0003454 <remove_chain+0x3f>
c0003450:	31 c0                	xor    eax,eax
c0003452:	eb 42                	jmp    c0003496 <remove_chain+0x81>
c0003454:	83 f8 01             	cmp    eax,0x1
c0003457:	74 31                	je     c000348a <remove_chain+0x75>
c0003459:	83 f8 ff             	cmp    eax,0xffffffff
c000345c:	74 33                	je     c0003491 <remove_chain+0x7c>
c000345e:	31 c9                	xor    ecx,ecx
c0003460:	89 f2                	mov    edx,esi
c0003462:	89 d8                	mov    eax,ebx
c0003464:	e8 32 f2 ff ff       	call   c000269b <put_fat>
c0003469:	85 c0                	test   eax,eax
c000346b:	75 29                	jne    c0003496 <remove_chain+0x81>
c000346d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003470:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003473:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003476:	39 c8                	cmp    eax,ecx
c0003478:	73 08                	jae    c0003482 <remove_chain+0x6d>
c000347a:	40                   	inc    eax
c000347b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000347f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003482:	89 fe                	mov    esi,edi
c0003484:	39 fa                	cmp    edx,edi
c0003486:	77 b8                	ja     c0003440 <remove_chain+0x2b>
c0003488:	eb c6                	jmp    c0003450 <remove_chain+0x3b>
c000348a:	b8 02 00 00 00       	mov    eax,0x2
c000348f:	eb 05                	jmp    c0003496 <remove_chain+0x81>
c0003491:	b8 01 00 00 00       	mov    eax,0x1
c0003496:	83 c4 0c             	add    esp,0xc
c0003499:	5b                   	pop    ebx
c000349a:	5e                   	pop    esi
c000349b:	5f                   	pop    edi
c000349c:	5d                   	pop    ebp
c000349d:	c3                   	ret    

c000349e <dir_next>:
c000349e:	55                   	push   ebp
c000349f:	57                   	push   edi
c00034a0:	56                   	push   esi
c00034a1:	53                   	push   ebx
c00034a2:	83 ec 1c             	sub    esp,0x1c
c00034a5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00034a8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034aa:	83 c7 20             	add    edi,0x20
c00034ad:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034b3:	76 07                	jbe    c00034bc <dir_next+0x1e>
c00034b5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034bc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034bf:	b9 04 00 00 00       	mov    ecx,0x4
c00034c4:	85 f6                	test   esi,esi
c00034c6:	0f 84 cd 00 00 00    	je     c0003599 <dir_next+0xfb>
c00034cc:	89 c3                	mov    ebx,eax
c00034ce:	89 d1                	mov    ecx,edx
c00034d0:	89 f8                	mov    eax,edi
c00034d2:	25 ff 01 00 00       	and    eax,0x1ff
c00034d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034db:	0f 85 a8 00 00 00    	jne    c0003589 <dir_next+0xeb>
c00034e1:	46                   	inc    esi
c00034e2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00034e5:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00034e8:	85 d2                	test   edx,edx
c00034ea:	75 22                	jne    c000350e <dir_next+0x70>
c00034ec:	89 fa                	mov    edx,edi
c00034ee:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034f2:	c1 ea 05             	shr    edx,0x5
c00034f5:	39 c2                	cmp    edx,eax
c00034f7:	0f 82 8c 00 00 00    	jb     c0003589 <dir_next+0xeb>
c00034fd:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003504:	b9 04 00 00 00       	mov    ecx,0x4
c0003509:	e9 8b 00 00 00       	jmp    c0003599 <dir_next+0xfb>
c000350e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003512:	89 fe                	mov    esi,edi
c0003514:	48                   	dec    eax
c0003515:	c1 ee 09             	shr    esi,0x9
c0003518:	85 f0                	test   eax,esi
c000351a:	75 6d                	jne    c0003589 <dir_next+0xeb>
c000351c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003520:	89 e8                	mov    eax,ebp
c0003522:	e8 ea fb ff ff       	call   c0003111 <get_fat.isra.2>
c0003527:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000352b:	89 c6                	mov    esi,eax
c000352d:	83 f8 01             	cmp    eax,0x1
c0003530:	77 07                	ja     c0003539 <dir_next+0x9b>
c0003532:	b9 02 00 00 00       	mov    ecx,0x2
c0003537:	eb 60                	jmp    c0003599 <dir_next+0xfb>
c0003539:	83 f8 ff             	cmp    eax,0xffffffff
c000353c:	75 07                	jne    c0003545 <dir_next+0xa7>
c000353e:	b9 01 00 00 00       	mov    ecx,0x1
c0003543:	eb 54                	jmp    c0003599 <dir_next+0xfb>
c0003545:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003548:	77 30                	ja     c000357a <dir_next+0xdc>
c000354a:	85 c9                	test   ecx,ecx
c000354c:	74 af                	je     c00034fd <dir_next+0x5f>
c000354e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003551:	89 d8                	mov    eax,ebx
c0003553:	e8 83 fd ff ff       	call   c00032db <create_chain>
c0003558:	b9 07 00 00 00       	mov    ecx,0x7
c000355d:	89 c6                	mov    esi,eax
c000355f:	85 c0                	test   eax,eax
c0003561:	74 36                	je     c0003599 <dir_next+0xfb>
c0003563:	83 f8 01             	cmp    eax,0x1
c0003566:	74 ca                	je     c0003532 <dir_next+0x94>
c0003568:	83 f8 ff             	cmp    eax,0xffffffff
c000356b:	74 d1                	je     c000353e <dir_next+0xa0>
c000356d:	89 c2                	mov    edx,eax
c000356f:	89 e8                	mov    eax,ebp
c0003571:	e8 75 f2 ff ff       	call   c00027eb <dir_clear>
c0003576:	85 c0                	test   eax,eax
c0003578:	75 c4                	jne    c000353e <dir_next+0xa0>
c000357a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000357d:	89 f2                	mov    edx,esi
c000357f:	89 e8                	mov    eax,ebp
c0003581:	e8 df e9 ff ff       	call   c0001f65 <clst2sect>
c0003586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003589:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000358d:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003590:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003594:	31 c9                	xor    ecx,ecx
c0003596:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003599:	83 c4 1c             	add    esp,0x1c
c000359c:	89 c8                	mov    eax,ecx
c000359e:	5b                   	pop    ebx
c000359f:	5e                   	pop    esi
c00035a0:	5f                   	pop    edi
c00035a1:	5d                   	pop    ebp
c00035a2:	c3                   	ret    

c00035a3 <dir_alloc>:
c00035a3:	55                   	push   ebp
c00035a4:	89 c5                	mov    ebp,eax
c00035a6:	57                   	push   edi
c00035a7:	89 d7                	mov    edi,edx
c00035a9:	56                   	push   esi
c00035aa:	31 d2                	xor    edx,edx
c00035ac:	53                   	push   ebx
c00035ad:	83 ec 0c             	sub    esp,0xc
c00035b0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035b2:	e8 5c fc ff ff       	call   c0003213 <dir_sdi>
c00035b7:	85 c0                	test   eax,eax
c00035b9:	75 37                	jne    c00035f2 <dir_alloc+0x4f>
c00035bb:	31 db                	xor    ebx,ebx
c00035bd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035c0:	89 f0                	mov    eax,esi
c00035c2:	e8 7e ec ff ff       	call   c0002245 <move_window>
c00035c7:	85 c0                	test   eax,eax
c00035c9:	75 27                	jne    c00035f2 <dir_alloc+0x4f>
c00035cb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035ce:	8a 12                	mov    dl,BYTE PTR [edx]
c00035d0:	84 d2                	test   dl,dl
c00035d2:	74 05                	je     c00035d9 <dir_alloc+0x36>
c00035d4:	80 fa e5             	cmp    dl,0xe5
c00035d7:	75 07                	jne    c00035e0 <dir_alloc+0x3d>
c00035d9:	43                   	inc    ebx
c00035da:	39 fb                	cmp    ebx,edi
c00035dc:	75 04                	jne    c00035e2 <dir_alloc+0x3f>
c00035de:	eb 1c                	jmp    c00035fc <dir_alloc+0x59>
c00035e0:	31 db                	xor    ebx,ebx
c00035e2:	ba 01 00 00 00       	mov    edx,0x1
c00035e7:	89 e8                	mov    eax,ebp
c00035e9:	e8 b0 fe ff ff       	call   c000349e <dir_next>
c00035ee:	85 c0                	test   eax,eax
c00035f0:	74 cb                	je     c00035bd <dir_alloc+0x1a>
c00035f2:	83 f8 04             	cmp    eax,0x4
c00035f5:	75 05                	jne    c00035fc <dir_alloc+0x59>
c00035f7:	b8 07 00 00 00       	mov    eax,0x7
c00035fc:	83 c4 0c             	add    esp,0xc
c00035ff:	5b                   	pop    ebx
c0003600:	5e                   	pop    esi
c0003601:	5f                   	pop    edi
c0003602:	5d                   	pop    ebp
c0003603:	c3                   	ret    

c0003604 <dir_read>:
c0003604:	55                   	push   ebp
c0003605:	57                   	push   edi
c0003606:	bf ff ff ff ff       	mov    edi,0xffffffff
c000360b:	56                   	push   esi
c000360c:	be 04 00 00 00       	mov    esi,0x4
c0003611:	53                   	push   ebx
c0003612:	89 c3                	mov    ebx,eax
c0003614:	83 ec 1c             	sub    esp,0x1c
c0003617:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003622:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003625:	85 d2                	test   edx,edx
c0003627:	0f 84 d8 00 00 00    	je     c0003705 <dir_read+0x101>
c000362d:	89 e8                	mov    eax,ebp
c000362f:	e8 11 ec ff ff       	call   c0002245 <move_window>
c0003634:	89 c6                	mov    esi,eax
c0003636:	85 c0                	test   eax,eax
c0003638:	0f 85 d2 00 00 00    	jne    c0003710 <dir_read+0x10c>
c000363e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003641:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003643:	84 c9                	test   cl,cl
c0003645:	0f 84 c0 00 00 00    	je     c000370b <dir_read+0x107>
c000364b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000364e:	83 e0 3f             	and    eax,0x3f
c0003651:	80 f9 2e             	cmp    cl,0x2e
c0003654:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003658:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000365b:	0f 84 8a 00 00 00    	je     c00036eb <dir_read+0xe7>
c0003661:	80 f9 e5             	cmp    cl,0xe5
c0003664:	0f 84 81 00 00 00    	je     c00036eb <dir_read+0xe7>
c000366a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000366e:	83 e0 1f             	and    eax,0x1f
c0003671:	83 f8 08             	cmp    eax,0x8
c0003674:	0f 94 c0             	sete   al
c0003677:	0f b6 c0             	movzx  eax,al
c000367a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000367e:	75 6b                	jne    c00036eb <dir_read+0xe7>
c0003680:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003685:	75 44                	jne    c00036cb <dir_read+0xc7>
c0003687:	f6 c1 40             	test   cl,0x40
c000368a:	74 12                	je     c000369e <dir_read+0x9a>
c000368c:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000368f:	83 e1 bf             	and    ecx,0xffffffbf
c0003692:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003696:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003699:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000369c:	eb 06                	jmp    c00036a4 <dir_read+0xa0>
c000369e:	89 f8                	mov    eax,edi
c00036a0:	38 c8                	cmp    al,cl
c00036a2:	75 47                	jne    c00036eb <dir_read+0xe7>
c00036a4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00036a8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036ad:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036b0:	75 3e                	jne    c00036f0 <dir_read+0xec>
c00036b2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036b9:	e8 c4 e8 ff ff       	call   c0001f82 <pick_lfn>
c00036be:	85 c0                	test   eax,eax
c00036c0:	74 2e                	je     c00036f0 <dir_read+0xec>
c00036c2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036c6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036c9:	eb 25                	jmp    c00036f0 <dir_read+0xec>
c00036cb:	89 f8                	mov    eax,edi
c00036cd:	84 c0                	test   al,al
c00036cf:	75 11                	jne    c00036e2 <dir_read+0xde>
c00036d1:	89 d0                	mov    eax,edx
c00036d3:	e8 64 ea ff ff       	call   c000213c <sum_sfn>
c00036d8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036dc:	75 04                	jne    c00036e2 <dir_read+0xde>
c00036de:	31 f6                	xor    esi,esi
c00036e0:	eb 35                	jmp    c0003717 <dir_read+0x113>
c00036e2:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00036e9:	eb 2c                	jmp    c0003717 <dir_read+0x113>
c00036eb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036f0:	31 d2                	xor    edx,edx
c00036f2:	89 d8                	mov    eax,ebx
c00036f4:	e8 a5 fd ff ff       	call   c000349e <dir_next>
c00036f9:	89 c6                	mov    esi,eax
c00036fb:	85 c0                	test   eax,eax
c00036fd:	0f 84 1f ff ff ff    	je     c0003622 <dir_read+0x1e>
c0003703:	eb 0b                	jmp    c0003710 <dir_read+0x10c>
c0003705:	85 f6                	test   esi,esi
c0003707:	74 d5                	je     c00036de <dir_read+0xda>
c0003709:	eb 05                	jmp    c0003710 <dir_read+0x10c>
c000370b:	be 04 00 00 00       	mov    esi,0x4
c0003710:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003717:	83 c4 1c             	add    esp,0x1c
c000371a:	89 f0                	mov    eax,esi
c000371c:	5b                   	pop    ebx
c000371d:	5e                   	pop    esi
c000371e:	5f                   	pop    edi
c000371f:	5d                   	pop    ebp
c0003720:	c3                   	ret    

c0003721 <dir_remove>:
c0003721:	57                   	push   edi
c0003722:	56                   	push   esi
c0003723:	53                   	push   ebx
c0003724:	89 c3                	mov    ebx,eax
c0003726:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003729:	8b 30                	mov    esi,DWORD PTR [eax]
c000372b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000372e:	83 fa ff             	cmp    edx,0xffffffff
c0003731:	74 09                	je     c000373c <dir_remove+0x1b>
c0003733:	e8 db fa ff ff       	call   c0003213 <dir_sdi>
c0003738:	85 c0                	test   eax,eax
c000373a:	75 34                	jne    c0003770 <dir_remove+0x4f>
c000373c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000373f:	89 f0                	mov    eax,esi
c0003741:	e8 ff ea ff ff       	call   c0002245 <move_window>
c0003746:	85 c0                	test   eax,eax
c0003748:	75 1c                	jne    c0003766 <dir_remove+0x45>
c000374a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000374d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003750:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003754:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003757:	73 17                	jae    c0003770 <dir_remove+0x4f>
c0003759:	31 d2                	xor    edx,edx
c000375b:	89 d8                	mov    eax,ebx
c000375d:	e8 3c fd ff ff       	call   c000349e <dir_next>
c0003762:	85 c0                	test   eax,eax
c0003764:	74 d6                	je     c000373c <dir_remove+0x1b>
c0003766:	83 f8 04             	cmp    eax,0x4
c0003769:	75 05                	jne    c0003770 <dir_remove+0x4f>
c000376b:	b8 02 00 00 00       	mov    eax,0x2
c0003770:	5b                   	pop    ebx
c0003771:	5e                   	pop    esi
c0003772:	5f                   	pop    edi
c0003773:	c3                   	ret    

c0003774 <dir_find>:
c0003774:	55                   	push   ebp
c0003775:	31 d2                	xor    edx,edx
c0003777:	57                   	push   edi
c0003778:	56                   	push   esi
c0003779:	53                   	push   ebx
c000377a:	89 c3                	mov    ebx,eax
c000377c:	83 ec 1c             	sub    esp,0x1c
c000377f:	8b 00                	mov    eax,DWORD PTR [eax]
c0003781:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003785:	89 d8                	mov    eax,ebx
c0003787:	e8 87 fa ff ff       	call   c0003213 <dir_sdi>
c000378c:	89 c6                	mov    esi,eax
c000378e:	85 c0                	test   eax,eax
c0003790:	0f 85 02 01 00 00    	jne    c0003898 <dir_find+0x124>
c0003796:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000379d:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037a2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037a7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037ae:	e8 92 ea ff ff       	call   c0002245 <move_window>
c00037b3:	89 c6                	mov    esi,eax
c00037b5:	85 c0                	test   eax,eax
c00037b7:	0f 85 db 00 00 00    	jne    c0003898 <dir_find+0x124>
c00037bd:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037c0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037c3:	84 c9                	test   cl,cl
c00037c5:	0f 84 c8 00 00 00    	je     c0003893 <dir_find+0x11f>
c00037cb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037ce:	88 d0                	mov    al,dl
c00037d0:	83 e0 3f             	and    eax,0x3f
c00037d3:	80 f9 e5             	cmp    cl,0xe5
c00037d6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037d9:	0f 84 93 00 00 00    	je     c0003872 <dir_find+0xfe>
c00037df:	80 e2 08             	and    dl,0x8
c00037e2:	74 0a                	je     c00037ee <dir_find+0x7a>
c00037e4:	3c 0f                	cmp    al,0xf
c00037e6:	0f 85 86 00 00 00    	jne    c0003872 <dir_find+0xfe>
c00037ec:	eb 04                	jmp    c00037f2 <dir_find+0x7e>
c00037ee:	3c 0f                	cmp    al,0xf
c00037f0:	75 54                	jne    c0003846 <dir_find+0xd2>
c00037f2:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c00037f6:	0f 85 82 00 00 00    	jne    c000387e <dir_find+0x10a>
c00037fc:	f6 c1 40             	test   cl,0x40
c00037ff:	74 12                	je     c0003813 <dir_find+0x9f>
c0003801:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003804:	83 e1 bf             	and    ecx,0xffffffbf
c0003807:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000380b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000380e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003811:	eb 06                	jmp    c0003819 <dir_find+0xa5>
c0003813:	89 f8                	mov    eax,edi
c0003815:	38 c8                	cmp    al,cl
c0003817:	75 60                	jne    c0003879 <dir_find+0x105>
c0003819:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000381d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003822:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003825:	75 57                	jne    c000387e <dir_find+0x10a>
c0003827:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000382b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000382f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003832:	89 ea                	mov    edx,ebp
c0003834:	e8 89 f3 ff ff       	call   c0002bc2 <cmp_lfn>
c0003839:	85 c0                	test   eax,eax
c000383b:	74 41                	je     c000387e <dir_find+0x10a>
c000383d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003841:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003844:	eb 38                	jmp    c000387e <dir_find+0x10a>
c0003846:	89 f8                	mov    eax,edi
c0003848:	84 c0                	test   al,al
c000384a:	75 0d                	jne    c0003859 <dir_find+0xe5>
c000384c:	89 e8                	mov    eax,ebp
c000384e:	e8 e9 e8 ff ff       	call   c000213c <sum_sfn>
c0003853:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003857:	74 3f                	je     c0003898 <dir_find+0x124>
c0003859:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000385d:	75 13                	jne    c0003872 <dir_find+0xfe>
c000385f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003862:	b9 0b 00 00 00       	mov    ecx,0xb
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 fd e4 ff ff       	call   c0001d6b <mem_cmp>
c000386e:	85 c0                	test   eax,eax
c0003870:	74 26                	je     c0003898 <dir_find+0x124>
c0003872:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003879:	bf ff ff ff ff       	mov    edi,0xffffffff
c000387e:	31 d2                	xor    edx,edx
c0003880:	89 d8                	mov    eax,ebx
c0003882:	e8 17 fc ff ff       	call   c000349e <dir_next>
c0003887:	89 c6                	mov    esi,eax
c0003889:	85 c0                	test   eax,eax
c000388b:	0f 84 16 ff ff ff    	je     c00037a7 <dir_find+0x33>
c0003891:	eb 05                	jmp    c0003898 <dir_find+0x124>
c0003893:	be 04 00 00 00       	mov    esi,0x4
c0003898:	83 c4 1c             	add    esp,0x1c
c000389b:	89 f0                	mov    eax,esi
c000389d:	5b                   	pop    ebx
c000389e:	5e                   	pop    esi
c000389f:	5f                   	pop    edi
c00038a0:	5d                   	pop    ebp
c00038a1:	c3                   	ret    

c00038a2 <follow_path>:
c00038a2:	56                   	push   esi
c00038a3:	53                   	push   ebx
c00038a4:	89 c3                	mov    ebx,eax
c00038a6:	83 ec 14             	sub    esp,0x14
c00038a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038ad:	8b 30                	mov    esi,DWORD PTR [eax]
c00038af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038b3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038b5:	80 fa 5c             	cmp    dl,0x5c
c00038b8:	75 07                	jne    c00038c1 <follow_path+0x1f>
c00038ba:	40                   	inc    eax
c00038bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038bf:	eb ee                	jmp    c00038af <follow_path+0xd>
c00038c1:	80 fa 2f             	cmp    dl,0x2f
c00038c4:	74 f4                	je     c00038ba <follow_path+0x18>
c00038c6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038cd:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038d0:	77 3e                	ja     c0003910 <follow_path+0x6e>
c00038d2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038d6:	31 d2                	xor    edx,edx
c00038d8:	89 d8                	mov    eax,ebx
c00038da:	e8 34 f9 ff ff       	call   c0003213 <dir_sdi>
c00038df:	eb 4f                	jmp    c0003930 <follow_path+0x8e>
c00038e1:	89 d8                	mov    eax,ebx
c00038e3:	e8 8c fe ff ff       	call   c0003774 <dir_find>
c00038e8:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c00038eb:	85 c0                	test   eax,eax
c00038ed:	75 32                	jne    c0003921 <follow_path+0x7f>
c00038ef:	80 e2 04             	and    dl,0x4
c00038f2:	75 3c                	jne    c0003930 <follow_path+0x8e>
c00038f4:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00038f8:	74 31                	je     c000392b <follow_path+0x89>
c00038fa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00038fd:	25 ff 01 00 00       	and    eax,0x1ff
c0003902:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003906:	8a 06                	mov    al,BYTE PTR [esi]
c0003908:	e8 b3 f7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000390d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003910:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003914:	89 d8                	mov    eax,ebx
c0003916:	e8 cb ef ff ff       	call   c00028e6 <create_name>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c2                	je     c00038e1 <follow_path+0x3f>
c000391f:	eb 0f                	jmp    c0003930 <follow_path+0x8e>
c0003921:	83 f8 04             	cmp    eax,0x4
c0003924:	75 0a                	jne    c0003930 <follow_path+0x8e>
c0003926:	80 e2 04             	and    dl,0x4
c0003929:	75 05                	jne    c0003930 <follow_path+0x8e>
c000392b:	b8 05 00 00 00       	mov    eax,0x5
c0003930:	83 c4 14             	add    esp,0x14
c0003933:	5b                   	pop    ebx
c0003934:	5e                   	pop    esi
c0003935:	c3                   	ret    

c0003936 <dir_register>:
c0003936:	55                   	push   ebp
c0003937:	57                   	push   edi
c0003938:	56                   	push   esi
c0003939:	be 06 00 00 00       	mov    esi,0x6
c000393e:	53                   	push   ebx
c000393f:	83 ec 2c             	sub    esp,0x2c
c0003942:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003946:	0f 85 65 01 00 00    	jne    c0003ab1 <dir_register+0x17b>
c000394c:	8b 38                	mov    edi,DWORD PTR [eax]
c000394e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003956:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003959:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000395d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003962:	74 06                	je     c000396a <dir_register+0x34>
c0003964:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003968:	eb ef                	jmp    c0003959 <dir_register+0x23>
c000396a:	89 c3                	mov    ebx,eax
c000396c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003971:	8d 40 20             	lea    eax,[eax+0x20]
c0003974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003978:	89 c2                	mov    edx,eax
c000397a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000397e:	e8 c8 e3 ff ff       	call   c0001d4b <mem_cpy>
c0003983:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003988:	74 48                	je     c00039d2 <dir_register+0x9c>
c000398a:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c000398e:	bd 01 00 00 00       	mov    ebp,0x1
c0003993:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003996:	55                   	push   ebp
c0003997:	8d 54 24 18          	lea    edx,[esp+0x18]
c000399b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000399f:	e8 dc e6 ff ff       	call   c0002080 <gen_numname>
c00039a4:	58                   	pop    eax
c00039a5:	89 d8                	mov    eax,ebx
c00039a7:	e8 c8 fd ff ff       	call   c0003774 <dir_find>
c00039ac:	89 c6                	mov    esi,eax
c00039ae:	85 c0                	test   eax,eax
c00039b0:	75 10                	jne    c00039c2 <dir_register+0x8c>
c00039b2:	45                   	inc    ebp
c00039b3:	83 fd 64             	cmp    ebp,0x64
c00039b6:	75 db                	jne    c0003993 <dir_register+0x5d>
c00039b8:	be 07 00 00 00       	mov    esi,0x7
c00039bd:	e9 ef 00 00 00       	jmp    c0003ab1 <dir_register+0x17b>
c00039c2:	83 f8 04             	cmp    eax,0x4
c00039c5:	0f 85 e6 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c00039cb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039cf:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039d2:	bd 01 00 00 00       	mov    ebp,0x1
c00039d7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039dc:	74 13                	je     c00039f1 <dir_register+0xbb>
c00039de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039e2:	b9 0d 00 00 00       	mov    ecx,0xd
c00039e7:	83 c0 0c             	add    eax,0xc
c00039ea:	31 d2                	xor    edx,edx
c00039ec:	f7 f1                	div    ecx
c00039ee:	8d 68 01             	lea    ebp,[eax+0x1]
c00039f1:	89 ea                	mov    edx,ebp
c00039f3:	89 d8                	mov    eax,ebx
c00039f5:	e8 a9 fb ff ff       	call   c00035a3 <dir_alloc>
c00039fa:	89 c6                	mov    esi,eax
c00039fc:	85 c0                	test   eax,eax
c00039fe:	0f 85 ad 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a04:	4d                   	dec    ebp
c0003a05:	74 6a                	je     c0003a71 <dir_register+0x13b>
c0003a07:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003a0a:	89 e8                	mov    eax,ebp
c0003a0c:	c1 e0 05             	shl    eax,0x5
c0003a0f:	29 c2                	sub    edx,eax
c0003a11:	89 d8                	mov    eax,ebx
c0003a13:	e8 fb f7 ff ff       	call   c0003213 <dir_sdi>
c0003a18:	89 c6                	mov    esi,eax
c0003a1a:	85 c0                	test   eax,eax
c0003a1c:	0f 85 8f 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a26:	e8 11 e7 ff ff       	call   c000213c <sum_sfn>
c0003a2b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a2f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a32:	89 f8                	mov    eax,edi
c0003a34:	e8 0c e8 ff ff       	call   c0002245 <move_window>
c0003a39:	89 c6                	mov    esi,eax
c0003a3b:	85 c0                	test   eax,eax
c0003a3d:	75 72                	jne    c0003ab1 <dir_register+0x17b>
c0003a3f:	83 ec 0c             	sub    esp,0xc
c0003a42:	89 e8                	mov    eax,ebp
c0003a44:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a49:	0f b6 c8             	movzx  ecx,al
c0003a4c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a4f:	52                   	push   edx
c0003a50:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a53:	e8 a4 e5 ff ff       	call   c0001ffc <put_lfn>
c0003a58:	31 d2                	xor    edx,edx
c0003a5a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a5e:	89 d8                	mov    eax,ebx
c0003a60:	e8 39 fa ff ff       	call   c000349e <dir_next>
c0003a65:	83 c4 10             	add    esp,0x10
c0003a68:	89 c6                	mov    esi,eax
c0003a6a:	85 c0                	test   eax,eax
c0003a6c:	75 43                	jne    c0003ab1 <dir_register+0x17b>
c0003a6e:	4d                   	dec    ebp
c0003a6f:	75 be                	jne    c0003a2f <dir_register+0xf9>
c0003a71:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a74:	89 f8                	mov    eax,edi
c0003a76:	e8 ca e7 ff ff       	call   c0002245 <move_window>
c0003a7b:	89 c6                	mov    esi,eax
c0003a7d:	85 c0                	test   eax,eax
c0003a7f:	75 30                	jne    c0003ab1 <dir_register+0x17b>
c0003a81:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a84:	b9 20 00 00 00       	mov    ecx,0x20
c0003a89:	31 d2                	xor    edx,edx
c0003a8b:	e8 d0 e2 ff ff       	call   c0001d60 <mem_set>
c0003a90:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a93:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003a97:	b9 0b 00 00 00       	mov    ecx,0xb
c0003a9c:	e8 aa e2 ff ff       	call   c0001d4b <mem_cpy>
c0003aa1:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003aa4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003aa7:	83 e0 18             	and    eax,0x18
c0003aaa:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003aad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ab1:	83 c4 2c             	add    esp,0x2c
c0003ab4:	89 f0                	mov    eax,esi
c0003ab6:	5b                   	pop    ebx
c0003ab7:	5e                   	pop    esi
c0003ab8:	5f                   	pop    edi
c0003ab9:	5d                   	pop    ebp
c0003aba:	c3                   	ret    

c0003abb <f_mount>:
c0003abb:	53                   	push   ebx
c0003abc:	83 ec 18             	sub    esp,0x18
c0003abf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ac3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ac7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003acb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003acf:	e8 7a e6 ff ff       	call   c000214e <get_ldnumber>
c0003ad4:	89 c2                	mov    edx,eax
c0003ad6:	b8 0b 00 00 00       	mov    eax,0xb
c0003adb:	85 d2                	test   edx,edx
c0003add:	78 39                	js     c0003b18 <f_mount+0x5d>
c0003adf:	8b 04 95 00 03 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdfd00]
c0003ae6:	85 c0                	test   eax,eax
c0003ae8:	74 03                	je     c0003aed <f_mount+0x32>
c0003aea:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003aed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003af1:	85 c0                	test   eax,eax
c0003af3:	74 03                	je     c0003af8 <f_mount+0x3d>
c0003af5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003af8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003afc:	89 04 95 00 03 02 c0 	mov    DWORD PTR [edx*4-0x3ffdfd00],eax
c0003b03:	31 c0                	xor    eax,eax
c0003b05:	84 db                	test   bl,bl
c0003b07:	74 0f                	je     c0003b18 <f_mount+0x5d>
c0003b09:	31 c9                	xor    ecx,ecx
c0003b0b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003b0f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b13:	e8 80 e8 ff ff       	call   c0002398 <mount_volume>
c0003b18:	83 c4 18             	add    esp,0x18
c0003b1b:	5b                   	pop    ebx
c0003b1c:	c3                   	ret    

c0003b1d <f_open>:
c0003b1d:	55                   	push   ebp
c0003b1e:	b8 09 00 00 00       	mov    eax,0x9
c0003b23:	57                   	push   edi
c0003b24:	56                   	push   esi
c0003b25:	53                   	push   ebx
c0003b26:	83 ec 5c             	sub    esp,0x5c
c0003b29:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b2d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b31:	85 db                	test   ebx,ebx
c0003b33:	0f 84 a7 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b39:	89 fe                	mov    esi,edi
c0003b3b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b3f:	83 e6 3f             	and    esi,0x3f
c0003b42:	89 f0                	mov    eax,esi
c0003b44:	0f b6 c8             	movzx  ecx,al
c0003b47:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b4b:	e8 48 e8 ff ff       	call   c0002398 <mount_volume>
c0003b50:	85 c0                	test   eax,eax
c0003b52:	0f 85 82 02 00 00    	jne    c0003dda <f_open+0x2bd>
c0003b58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b5c:	83 ec 0c             	sub    esp,0xc
c0003b5f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b63:	68 00 02 00 00       	push   0x200
c0003b68:	e8 ff 1e 00 00       	call   c0005a6c <ff_memalloc>
c0003b6d:	83 c4 10             	add    esp,0x10
c0003b70:	89 c5                	mov    ebp,eax
c0003b72:	b8 11 00 00 00       	mov    eax,0x11
c0003b77:	85 ed                	test   ebp,ebp
c0003b79:	0f 84 61 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b83:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003b87:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003b8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003b8e:	e8 0f fd ff ff       	call   c00038a2 <follow_path>
c0003b93:	85 c0                	test   eax,eax
c0003b95:	75 0c                	jne    c0003ba3 <f_open+0x86>
c0003b97:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003b9c:	79 05                	jns    c0003ba3 <f_open+0x86>
c0003b9e:	b8 06 00 00 00       	mov    eax,0x6
c0003ba3:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003ba9:	0f 84 de 00 00 00    	je     c0003c8d <f_open+0x170>
c0003baf:	85 c0                	test   eax,eax
c0003bb1:	74 1e                	je     c0003bd1 <f_open+0xb4>
c0003bb3:	83 f8 04             	cmp    eax,0x4
c0003bb6:	0f 85 06 02 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bbc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bc0:	83 ce 08             	or     esi,0x8
c0003bc3:	e8 6e fd ff ff       	call   c0003936 <dir_register>
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	74 2f                	je     c0003bfb <f_open+0xde>
c0003bcc:	e9 f1 01 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003bd1:	b8 07 00 00 00       	mov    eax,0x7
c0003bd6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bdb:	0f 85 e1 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003be1:	b8 08 00 00 00       	mov    eax,0x8
c0003be6:	f7 c7 04 00 00 00    	test   edi,0x4
c0003bec:	0f 85 d0 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bf2:	83 e7 08             	and    edi,0x8
c0003bf5:	0f 84 bf 00 00 00    	je     c0003cba <f_open+0x19d>
c0003bfb:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003bff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c03:	89 ca                	mov    edx,ecx
c0003c05:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003c09:	8a 00                	mov    al,BYTE PTR [eax]
c0003c0b:	e8 b0 f4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003c10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c14:	89 c7                	mov    edi,eax
c0003c16:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c1b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c1e:	e8 25 e1 ff ff       	call   c0001d48 <st_dword>
c0003c23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c27:	31 c9                	xor    ecx,ecx
c0003c29:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c35:	e8 af f4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0003c3a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c3e:	31 d2                	xor    edx,edx
c0003c40:	83 c0 1c             	add    eax,0x1c
c0003c43:	e8 00 e1 ff ff       	call   c0001d48 <st_dword>
c0003c48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c4c:	85 ff                	test   edi,edi
c0003c4e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c52:	74 66                	je     c0003cba <f_open+0x19d>
c0003c54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c58:	31 c9                	xor    ecx,ecx
c0003c5a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c5d:	89 fa                	mov    edx,edi
c0003c5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c63:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c67:	e8 a9 f7 ff ff       	call   c0003415 <remove_chain>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	0f 85 4e 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c78:	4f                   	dec    edi
c0003c79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c7d:	e8 c3 e5 ff ff       	call   c0002245 <move_window>
c0003c82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003c86:	85 c0                	test   eax,eax
c0003c88:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003c8b:	eb 27                	jmp    c0003cb4 <f_open+0x197>
c0003c8d:	85 c0                	test   eax,eax
c0003c8f:	0f 85 2d 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c95:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003c99:	b8 04 00 00 00       	mov    eax,0x4
c0003c9e:	f6 c2 10             	test   dl,0x10
c0003ca1:	0f 85 1b 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003ca7:	83 e7 02             	and    edi,0x2
c0003caa:	74 0e                	je     c0003cba <f_open+0x19d>
c0003cac:	b8 07 00 00 00       	mov    eax,0x7
c0003cb1:	80 e2 01             	and    dl,0x1
c0003cb4:	0f 85 08 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003cba:	f7 c6 08 00 00 00    	test   esi,0x8
c0003cc0:	74 03                	je     c0003cc5 <f_open+0x1a8>
c0003cc2:	83 ce 40             	or     esi,0x40
c0003cc5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003cc9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ccd:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cd0:	89 fa                	mov    edx,edi
c0003cd2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cd6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cd9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cdc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cde:	e8 dd f3 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003ce3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003ce6:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003ce9:	e8 3e e0 ff ff       	call   c0001d2c <ld_dword>
c0003cee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cf2:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003cf5:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003cf7:	31 d2                	xor    edx,edx
c0003cf9:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003cfd:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003d01:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003d05:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d0c:	89 f0                	mov    eax,esi
c0003d0e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d15:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d18:	b9 00 02 00 00       	mov    ecx,0x200
c0003d1d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d24:	e8 37 e0 ff ff       	call   c0001d60 <mem_set>
c0003d29:	83 e6 20             	and    esi,0x20
c0003d2c:	75 07                	jne    c0003d35 <f_open+0x218>
c0003d2e:	31 c0                	xor    eax,eax
c0003d30:	e9 8d 00 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003d35:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d38:	85 ff                	test   edi,edi
c0003d3a:	74 f2                	je     c0003d2e <f_open+0x211>
c0003d3c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d43:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d46:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d4a:	c1 e6 09             	shl    esi,0x9
c0003d4d:	39 fe                	cmp    esi,edi
c0003d4f:	73 1c                	jae    c0003d6d <f_open+0x250>
c0003d51:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d53:	29 f7                	sub    edi,esi
c0003d55:	e8 b7 f3 ff ff       	call   c0003111 <get_fat.isra.2>
c0003d5a:	89 c2                	mov    edx,eax
c0003d5c:	83 f8 01             	cmp    eax,0x1
c0003d5f:	76 10                	jbe    c0003d71 <f_open+0x254>
c0003d61:	83 f8 ff             	cmp    eax,0xffffffff
c0003d64:	75 e7                	jne    c0003d4d <f_open+0x230>
c0003d66:	b8 01 00 00 00       	mov    eax,0x1
c0003d6b:	eb 09                	jmp    c0003d76 <f_open+0x259>
c0003d6d:	31 c0                	xor    eax,eax
c0003d6f:	eb 05                	jmp    c0003d76 <f_open+0x259>
c0003d71:	b8 02 00 00 00       	mov    eax,0x2
c0003d76:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d79:	85 c0                	test   eax,eax
c0003d7b:	75 45                	jne    c0003dc2 <f_open+0x2a5>
c0003d7d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003d83:	74 a9                	je     c0003d2e <f_open+0x211>
c0003d85:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003d89:	89 f0                	mov    eax,esi
c0003d8b:	e8 d5 e1 ff ff       	call   c0001f65 <clst2sect>
c0003d90:	89 c2                	mov    edx,eax
c0003d92:	b8 02 00 00 00       	mov    eax,0x2
c0003d97:	85 d2                	test   edx,edx
c0003d99:	74 27                	je     c0003dc2 <f_open+0x2a5>
c0003d9b:	89 f9                	mov    ecx,edi
c0003d9d:	c1 e9 09             	shr    ecx,0x9
c0003da0:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003da3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003da6:	6a 01                	push   0x1
c0003da8:	50                   	push   eax
c0003da9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003dad:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003db1:	50                   	push   eax
c0003db2:	e8 1d df ff ff       	call   c0001cd4 <disk_read>
c0003db7:	83 c4 10             	add    esp,0x10
c0003dba:	85 c0                	test   eax,eax
c0003dbc:	0f 95 c0             	setne  al
c0003dbf:	0f b6 c0             	movzx  eax,al
c0003dc2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003dc6:	83 ec 0c             	sub    esp,0xc
c0003dc9:	55                   	push   ebp
c0003dca:	e8 b5 1c 00 00       	call   c0005a84 <ff_memfree>
c0003dcf:	83 c4 10             	add    esp,0x10
c0003dd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 06                	je     c0003de0 <f_open+0x2c3>
c0003dda:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003de0:	83 c4 5c             	add    esp,0x5c
c0003de3:	5b                   	pop    ebx
c0003de4:	5e                   	pop    esi
c0003de5:	5f                   	pop    edi
c0003de6:	5d                   	pop    ebp
c0003de7:	c3                   	ret    

c0003de8 <f_read>:
c0003de8:	55                   	push   ebp
c0003de9:	57                   	push   edi
c0003dea:	56                   	push   esi
c0003deb:	53                   	push   ebx
c0003dec:	83 ec 2c             	sub    esp,0x2c
c0003def:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003df3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003df7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003dfd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e05:	89 d8                	mov    eax,ebx
c0003e07:	e8 8f e3 ff ff       	call   c000219b <validate>
c0003e0c:	89 c5                	mov    ebp,eax
c0003e0e:	85 c0                	test   eax,eax
c0003e10:	0f 85 c7 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e16:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e1a:	85 ed                	test   ebp,ebp
c0003e1c:	0f 85 bb 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e22:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e26:	0f 84 ac 01 00 00    	je     c0003fd8 <f_read+0x1f0>
c0003e2c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e2f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e32:	89 c7                	mov    edi,eax
c0003e34:	39 f0                	cmp    eax,esi
c0003e36:	0f 86 ad 00 00 00    	jbe    c0003ee9 <f_read+0x101>
c0003e3c:	89 f7                	mov    edi,esi
c0003e3e:	e9 a6 00 00 00       	jmp    c0003ee9 <f_read+0x101>
c0003e43:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e46:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e4c:	0f 85 5b 01 00 00    	jne    c0003fad <f_read+0x1c5>
c0003e52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e56:	89 d1                	mov    ecx,edx
c0003e58:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e5c:	c1 e9 09             	shr    ecx,0x9
c0003e5f:	48                   	dec    eax
c0003e60:	21 c8                	and    eax,ecx
c0003e62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e66:	0f 84 8a 00 00 00    	je     c0003ef6 <f_read+0x10e>
c0003e6c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e73:	89 c8                	mov    eax,ecx
c0003e75:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e79:	e8 e7 e0 ff ff       	call   c0001f65 <clst2sect>
c0003e7e:	85 c0                	test   eax,eax
c0003e80:	0f 84 88 00 00 00    	je     c0003f0e <f_read+0x126>
c0003e86:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003e8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003e8e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003e92:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003e98:	0f 86 bd 00 00 00    	jbe    c0003f5b <f_read+0x173>
c0003e9e:	89 fe                	mov    esi,edi
c0003ea0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003ea4:	c1 ee 09             	shr    esi,0x9
c0003ea7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003eab:	01 f2                	add    edx,esi
c0003ead:	39 c2                	cmp    edx,eax
c0003eaf:	76 06                	jbe    c0003eb7 <f_read+0xcf>
c0003eb1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003eb5:	89 c6                	mov    esi,eax
c0003eb7:	56                   	push   esi
c0003eb8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003ebc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ec0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ec4:	50                   	push   eax
c0003ec5:	e8 0a de ff ff       	call   c0001cd4 <disk_read>
c0003eca:	83 c4 10             	add    esp,0x10
c0003ecd:	85 c0                	test   eax,eax
c0003ecf:	75 50                	jne    c0003f21 <f_read+0x139>
c0003ed1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ed5:	78 60                	js     c0003f37 <f_read+0x14f>
c0003ed7:	c1 e6 09             	shl    esi,0x9
c0003eda:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ede:	29 f7                	sub    edi,esi
c0003ee0:	01 30                	add    DWORD PTR [eax],esi
c0003ee2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003ee6:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003ee9:	85 ff                	test   edi,edi
c0003eeb:	0f 85 52 ff ff ff    	jne    c0003e43 <f_read+0x5b>
c0003ef1:	e9 e7 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003ef6:	85 d2                	test   edx,edx
c0003ef8:	75 05                	jne    c0003eff <f_read+0x117>
c0003efa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003efd:	eb 0a                	jmp    c0003f09 <f_read+0x121>
c0003eff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f04:	e8 08 f2 ff ff       	call   c0003111 <get_fat.isra.2>
c0003f09:	83 f8 01             	cmp    eax,0x1
c0003f0c:	77 0e                	ja     c0003f1c <f_read+0x134>
c0003f0e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f12:	bd 02 00 00 00       	mov    ebp,0x2
c0003f17:	e9 c1 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f1c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f1f:	75 0e                	jne    c0003f2f <f_read+0x147>
c0003f21:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f25:	bd 01 00 00 00       	mov    ebp,0x1
c0003f2a:	e9 ae 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f2f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f32:	e9 35 ff ff ff       	jmp    c0003e6c <f_read+0x84>
c0003f37:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f3a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f3e:	39 f0                	cmp    eax,esi
c0003f40:	73 95                	jae    c0003ed7 <f_read+0xef>
c0003f42:	c1 e0 09             	shl    eax,0x9
c0003f45:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f48:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f4c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f51:	e8 f5 dd ff ff       	call   c0001d4b <mem_cpy>
c0003f56:	e9 7c ff ff ff       	jmp    c0003ed7 <f_read+0xef>
c0003f5b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f62:	74 42                	je     c0003fa6 <f_read+0x1be>
c0003f64:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f67:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f6b:	79 19                	jns    c0003f86 <f_read+0x19e>
c0003f6d:	6a 01                	push   0x1
c0003f6f:	50                   	push   eax
c0003f70:	56                   	push   esi
c0003f71:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f75:	50                   	push   eax
c0003f76:	e8 6f dd ff ff       	call   c0001cea <disk_write>
c0003f7b:	83 c4 10             	add    esp,0x10
c0003f7e:	85 c0                	test   eax,eax
c0003f80:	75 9f                	jne    c0003f21 <f_read+0x139>
c0003f82:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003f86:	6a 01                	push   0x1
c0003f88:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003f8c:	56                   	push   esi
c0003f8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003f91:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003f95:	50                   	push   eax
c0003f96:	e8 39 dd ff ff       	call   c0001cd4 <disk_read>
c0003f9b:	83 c4 10             	add    esp,0x10
c0003f9e:	85 c0                	test   eax,eax
c0003fa0:	0f 85 7b ff ff ff    	jne    c0003f21 <f_read+0x139>
c0003fa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003faa:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fad:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fb0:	ba 00 02 00 00       	mov    edx,0x200
c0003fb5:	25 ff 01 00 00       	and    eax,0x1ff
c0003fba:	89 fe                	mov    esi,edi
c0003fbc:	29 c2                	sub    edx,eax
c0003fbe:	39 d7                	cmp    edi,edx
c0003fc0:	76 02                	jbe    c0003fc4 <f_read+0x1dc>
c0003fc2:	89 d6                	mov    esi,edx
c0003fc4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fc8:	89 f1                	mov    ecx,esi
c0003fca:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fce:	e8 78 dd ff ff       	call   c0001d4b <mem_cpy>
c0003fd3:	e9 02 ff ff ff       	jmp    c0003eda <f_read+0xf2>
c0003fd8:	bd 07 00 00 00       	mov    ebp,0x7
c0003fdd:	83 c4 2c             	add    esp,0x2c
c0003fe0:	89 e8                	mov    eax,ebp
c0003fe2:	5b                   	pop    ebx
c0003fe3:	5e                   	pop    esi
c0003fe4:	5f                   	pop    edi
c0003fe5:	5d                   	pop    ebp
c0003fe6:	c3                   	ret    

c0003fe7 <f_write>:
c0003fe7:	55                   	push   ebp
c0003fe8:	57                   	push   edi
c0003fe9:	56                   	push   esi
c0003fea:	53                   	push   ebx
c0003feb:	83 ec 2c             	sub    esp,0x2c
c0003fee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ff2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003ff6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004000:	89 d8                	mov    eax,ebx
c0004002:	e8 94 e1 ff ff       	call   c000219b <validate>
c0004007:	89 c5                	mov    ebp,eax
c0004009:	85 c0                	test   eax,eax
c000400b:	0f 85 00 02 00 00    	jne    c0004211 <f_write+0x22a>
c0004011:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004015:	85 ed                	test   ebp,ebp
c0004017:	0f 85 f4 01 00 00    	jne    c0004211 <f_write+0x22a>
c000401d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004021:	0f 84 e5 01 00 00    	je     c000420c <f_write+0x225>
c0004027:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000402a:	89 c7                	mov    edi,eax
c000402c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004030:	0f 83 ea 00 00 00    	jae    c0004120 <f_write+0x139>
c0004036:	f7 d0                	not    eax
c0004038:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000403c:	e9 df 00 00 00       	jmp    c0004120 <f_write+0x139>
c0004041:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004044:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000404a:	0f 85 8b 01 00 00    	jne    c00041db <f_write+0x1f4>
c0004050:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004054:	89 d1                	mov    ecx,edx
c0004056:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000405a:	c1 e9 09             	shr    ecx,0x9
c000405d:	48                   	dec    eax
c000405e:	21 c8                	and    eax,ecx
c0004060:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004064:	0f 84 c3 00 00 00    	je     c000412d <f_write+0x146>
c000406a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000406e:	0f 88 18 01 00 00    	js     c000418c <f_write+0x1a5>
c0004074:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004078:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000407b:	89 c8                	mov    eax,ecx
c000407d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004081:	e8 df de ff ff       	call   c0001f65 <clst2sect>
c0004086:	85 c0                	test   eax,eax
c0004088:	0f 84 c8 00 00 00    	je     c0004156 <f_write+0x16f>
c000408e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0004092:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004096:	01 c7                	add    edi,eax
c0004098:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00040a0:	0f 86 0d 01 00 00    	jbe    c00041b3 <f_write+0x1cc>
c00040a6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040aa:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040ae:	c1 ee 09             	shr    esi,0x9
c00040b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040b5:	01 f2                	add    edx,esi
c00040b7:	39 c2                	cmp    edx,eax
c00040b9:	76 06                	jbe    c00040c1 <f_write+0xda>
c00040bb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040bf:	89 c6                	mov    esi,eax
c00040c1:	56                   	push   esi
c00040c2:	57                   	push   edi
c00040c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040cb:	50                   	push   eax
c00040cc:	e8 19 dc ff ff       	call   c0001cea <disk_write>
c00040d1:	83 c4 10             	add    esp,0x10
c00040d4:	85 c0                	test   eax,eax
c00040d6:	0f 85 8d 00 00 00    	jne    c0004169 <f_write+0x182>
c00040dc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040df:	29 fa                	sub    edx,edi
c00040e1:	39 f2                	cmp    edx,esi
c00040e3:	73 18                	jae    c00040fd <f_write+0x116>
c00040e5:	c1 e2 09             	shl    edx,0x9
c00040e8:	8d 43 28             	lea    eax,[ebx+0x28]
c00040eb:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c00040ef:	b9 00 02 00 00       	mov    ecx,0x200
c00040f4:	e8 52 dc ff ff       	call   c0001d4b <mem_cpy>
c00040f9:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00040fd:	c1 e6 09             	shl    esi,0x9
c0004100:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004104:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004108:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000410c:	01 30                	add    DWORD PTR [eax],esi
c000410e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004111:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004114:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004117:	39 f0                	cmp    eax,esi
c0004119:	73 02                	jae    c000411d <f_write+0x136>
c000411b:	89 f0                	mov    eax,esi
c000411d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004120:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004125:	0f 85 16 ff ff ff    	jne    c0004041 <f_write+0x5a>
c000412b:	eb 1b                	jmp    c0004148 <f_write+0x161>
c000412d:	85 d2                	test   edx,edx
c000412f:	75 09                	jne    c000413a <f_write+0x153>
c0004131:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004134:	85 c0                	test   eax,eax
c0004136:	75 19                	jne    c0004151 <f_write+0x16a>
c0004138:	eb 03                	jmp    c000413d <f_write+0x156>
c000413a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000413d:	89 d8                	mov    eax,ebx
c000413f:	e8 97 f1 ff ff       	call   c00032db <create_chain>
c0004144:	85 c0                	test   eax,eax
c0004146:	75 09                	jne    c0004151 <f_write+0x16a>
c0004148:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000414c:	e9 c0 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004151:	83 f8 01             	cmp    eax,0x1
c0004154:	75 0e                	jne    c0004164 <f_write+0x17d>
c0004156:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000415a:	bd 02 00 00 00       	mov    ebp,0x2
c000415f:	e9 ad 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004164:	83 f8 ff             	cmp    eax,0xffffffff
c0004167:	75 0e                	jne    c0004177 <f_write+0x190>
c0004169:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000416d:	bd 01 00 00 00       	mov    ebp,0x1
c0004172:	e9 9a 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004177:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000417a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000417e:	0f 85 e6 fe ff ff    	jne    c000406a <f_write+0x83>
c0004184:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004187:	e9 de fe ff ff       	jmp    c000406a <f_write+0x83>
c000418c:	6a 01                	push   0x1
c000418e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004191:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004194:	50                   	push   eax
c0004195:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004199:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000419d:	50                   	push   eax
c000419e:	e8 47 db ff ff       	call   c0001cea <disk_write>
c00041a3:	83 c4 10             	add    esp,0x10
c00041a6:	85 c0                	test   eax,eax
c00041a8:	75 bf                	jne    c0004169 <f_write+0x182>
c00041aa:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041ae:	e9 c1 fe ff ff       	jmp    c0004074 <f_write+0x8d>
c00041b3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041b6:	74 20                	je     c00041d8 <f_write+0x1f1>
c00041b8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041bb:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041be:	76 18                	jbe    c00041d8 <f_write+0x1f1>
c00041c0:	6a 01                	push   0x1
c00041c2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041c5:	57                   	push   edi
c00041c6:	50                   	push   eax
c00041c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041cb:	50                   	push   eax
c00041cc:	e8 03 db ff ff       	call   c0001cd4 <disk_read>
c00041d1:	83 c4 10             	add    esp,0x10
c00041d4:	85 c0                	test   eax,eax
c00041d6:	75 91                	jne    c0004169 <f_write+0x182>
c00041d8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041db:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041de:	ba 00 02 00 00       	mov    edx,0x200
c00041e3:	25 ff 01 00 00       	and    eax,0x1ff
c00041e8:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041ec:	29 c2                	sub    edx,eax
c00041ee:	39 d6                	cmp    esi,edx
c00041f0:	76 02                	jbe    c00041f4 <f_write+0x20d>
c00041f2:	89 d6                	mov    esi,edx
c00041f4:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00041f8:	89 f1                	mov    ecx,esi
c00041fa:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00041fe:	e8 48 db ff ff       	call   c0001d4b <mem_cpy>
c0004203:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004207:	e9 f4 fe ff ff       	jmp    c0004100 <f_write+0x119>
c000420c:	bd 07 00 00 00       	mov    ebp,0x7
c0004211:	83 c4 2c             	add    esp,0x2c
c0004214:	89 e8                	mov    eax,ebp
c0004216:	5b                   	pop    ebx
c0004217:	5e                   	pop    esi
c0004218:	5f                   	pop    edi
c0004219:	5d                   	pop    ebp
c000421a:	c3                   	ret    

c000421b <f_sync>:
c000421b:	56                   	push   esi
c000421c:	53                   	push   ebx
c000421d:	83 ec 14             	sub    esp,0x14
c0004220:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004224:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 6c df ff ff       	call   c000219b <validate>
c000422f:	85 c0                	test   eax,eax
c0004231:	0f 85 93 00 00 00    	jne    c00042ca <f_sync+0xaf>
c0004237:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000423a:	f6 c2 40             	test   dl,0x40
c000423d:	0f 84 87 00 00 00    	je     c00042ca <f_sync+0xaf>
c0004243:	84 d2                	test   dl,dl
c0004245:	79 29                	jns    c0004270 <f_sync+0x55>
c0004247:	6a 01                	push   0x1
c0004249:	8d 43 28             	lea    eax,[ebx+0x28]
c000424c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000424f:	50                   	push   eax
c0004250:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004254:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004258:	50                   	push   eax
c0004259:	e8 8c da ff ff       	call   c0001cea <disk_write>
c000425e:	83 c4 10             	add    esp,0x10
c0004261:	89 c2                	mov    edx,eax
c0004263:	b8 01 00 00 00       	mov    eax,0x1
c0004268:	85 d2                	test   edx,edx
c000426a:	75 5e                	jne    c00042ca <f_sync+0xaf>
c000426c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004270:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004273:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004277:	e8 c9 df ff ff       	call   c0002245 <move_window>
c000427c:	85 c0                	test   eax,eax
c000427e:	75 4a                	jne    c00042ca <f_sync+0xaf>
c0004280:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0004283:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0004287:	89 f2                	mov    edx,esi
c0004289:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000428c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000428e:	e8 56 ee ff ff       	call   c00030e9 <st_clust.isra.1>
c0004293:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004296:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004299:	e8 aa da ff ff       	call   c0001d48 <st_dword>
c000429e:	8d 46 16             	lea    eax,[esi+0x16]
c00042a1:	ba 00 00 21 50       	mov    edx,0x50210000
c00042a6:	e8 9d da ff ff       	call   c0001d48 <st_dword>
c00042ab:	8d 46 12             	lea    eax,[esi+0x12]
c00042ae:	31 d2                	xor    edx,edx
c00042b0:	e8 8f da ff ff       	call   c0001d44 <st_word>
c00042b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042b9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042c1:	e8 bf e9 ff ff       	call   c0002c85 <sync_fs>
c00042c6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ca:	83 c4 14             	add    esp,0x14
c00042cd:	5b                   	pop    ebx
c00042ce:	5e                   	pop    esi
c00042cf:	c3                   	ret    

c00042d0 <f_close>:
c00042d0:	53                   	push   ebx
c00042d1:	83 ec 24             	sub    esp,0x24
c00042d4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042d8:	53                   	push   ebx
c00042d9:	e8 3d ff ff ff       	call   c000421b <f_sync>
c00042de:	83 c4 10             	add    esp,0x10
c00042e1:	85 c0                	test   eax,eax
c00042e3:	75 15                	jne    c00042fa <f_close+0x2a>
c00042e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00042e9:	89 d8                	mov    eax,ebx
c00042eb:	e8 ab de ff ff       	call   c000219b <validate>
c00042f0:	85 c0                	test   eax,eax
c00042f2:	75 06                	jne    c00042fa <f_close+0x2a>
c00042f4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00042fa:	83 c4 18             	add    esp,0x18
c00042fd:	5b                   	pop    ebx
c00042fe:	c3                   	ret    

c00042ff <f_lseek>:
c00042ff:	55                   	push   ebp
c0004300:	57                   	push   edi
c0004301:	56                   	push   esi
c0004302:	53                   	push   ebx
c0004303:	83 ec 2c             	sub    esp,0x2c
c0004306:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000430a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000430e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004312:	89 d8                	mov    eax,ebx
c0004314:	e8 82 de ff ff       	call   c000219b <validate>
c0004319:	89 c5                	mov    ebp,eax
c000431b:	85 c0                	test   eax,eax
c000431d:	0f 85 79 01 00 00    	jne    c000449c <f_lseek+0x19d>
c0004323:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004327:	85 ed                	test   ebp,ebp
c0004329:	0f 85 6d 01 00 00    	jne    c000449c <f_lseek+0x19d>
c000432f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004332:	39 f0                	cmp    eax,esi
c0004334:	73 08                	jae    c000433e <f_lseek+0x3f>
c0004336:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433a:	75 02                	jne    c000433e <f_lseek+0x3f>
c000433c:	89 c6                	mov    esi,eax
c000433e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004341:	85 f6                	test   esi,esi
c0004343:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000434a:	75 07                	jne    c0004353 <f_lseek+0x54>
c000434c:	31 f6                	xor    esi,esi
c000434e:	e9 e2 00 00 00       	jmp    c0004435 <f_lseek+0x136>
c0004353:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004357:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000435b:	c1 e7 09             	shl    edi,0x9
c000435e:	85 c9                	test   ecx,ecx
c0004360:	74 28                	je     c000438a <f_lseek+0x8b>
c0004362:	49                   	dec    ecx
c0004363:	31 d2                	xor    edx,edx
c0004365:	8d 46 ff             	lea    eax,[esi-0x1]
c0004368:	f7 f7                	div    edi
c000436a:	31 d2                	xor    edx,edx
c000436c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004370:	89 c8                	mov    eax,ecx
c0004372:	f7 f7                	div    edi
c0004374:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004378:	72 10                	jb     c000438a <f_lseek+0x8b>
c000437a:	89 f8                	mov    eax,edi
c000437c:	f7 d8                	neg    eax
c000437e:	21 c1                	and    ecx,eax
c0004380:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004383:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004386:	29 ce                	sub    esi,ecx
c0004388:	eb 3c                	jmp    c00043c6 <f_lseek+0xc7>
c000438a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000438d:	85 c0                	test   eax,eax
c000438f:	75 32                	jne    c00043c3 <f_lseek+0xc4>
c0004391:	31 d2                	xor    edx,edx
c0004393:	89 d8                	mov    eax,ebx
c0004395:	e8 41 ef ff ff       	call   c00032db <create_chain>
c000439a:	83 f8 01             	cmp    eax,0x1
c000439d:	75 0e                	jne    c00043ad <f_lseek+0xae>
c000439f:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043a3:	bd 02 00 00 00       	mov    ebp,0x2
c00043a8:	e9 ef 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043ad:	83 f8 ff             	cmp    eax,0xffffffff
c00043b0:	75 0e                	jne    c00043c0 <f_lseek+0xc1>
c00043b2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043b6:	bd 01 00 00 00       	mov    ebp,0x1
c00043bb:	e9 dc 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043c0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043c6:	85 c0                	test   eax,eax
c00043c8:	74 82                	je     c000434c <f_lseek+0x4d>
c00043ca:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043cd:	39 fe                	cmp    esi,edi
c00043cf:	76 3d                	jbe    c000440e <f_lseek+0x10f>
c00043d1:	01 fa                	add    edx,edi
c00043d3:	29 fe                	sub    esi,edi
c00043d5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043d8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043dc:	89 c2                	mov    edx,eax
c00043de:	74 0d                	je     c00043ed <f_lseek+0xee>
c00043e0:	89 d8                	mov    eax,ebx
c00043e2:	e8 f4 ee ff ff       	call   c00032db <create_chain>
c00043e7:	85 c0                	test   eax,eax
c00043e9:	75 09                	jne    c00043f4 <f_lseek+0xf5>
c00043eb:	eb 1f                	jmp    c000440c <f_lseek+0x10d>
c00043ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043ef:	e8 1d ed ff ff       	call   c0003111 <get_fat.isra.2>
c00043f4:	83 f8 ff             	cmp    eax,0xffffffff
c00043f7:	74 b9                	je     c00043b2 <f_lseek+0xb3>
c00043f9:	83 f8 01             	cmp    eax,0x1
c00043fc:	76 a1                	jbe    c000439f <f_lseek+0xa0>
c00043fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004402:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004405:	76 98                	jbe    c000439f <f_lseek+0xa0>
c0004407:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000440a:	eb be                	jmp    c00043ca <f_lseek+0xcb>
c000440c:	31 f6                	xor    esi,esi
c000440e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004411:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004417:	0f 84 2f ff ff ff    	je     c000434c <f_lseek+0x4d>
c000441d:	89 c2                	mov    edx,eax
c000441f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004423:	e8 3d db ff ff       	call   c0001f65 <clst2sect>
c0004428:	85 c0                	test   eax,eax
c000442a:	0f 84 6f ff ff ff    	je     c000439f <f_lseek+0xa0>
c0004430:	c1 ee 09             	shr    esi,0x9
c0004433:	01 c6                	add    esi,eax
c0004435:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004438:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000443b:	76 07                	jbe    c0004444 <f_lseek+0x145>
c000443d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004440:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004444:	a9 ff 01 00 00       	test   eax,0x1ff
c0004449:	74 51                	je     c000449c <f_lseek+0x19d>
c000444b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000444e:	39 f0                	cmp    eax,esi
c0004450:	74 4a                	je     c000449c <f_lseek+0x19d>
c0004452:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004455:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004459:	79 21                	jns    c000447c <f_lseek+0x17d>
c000445b:	6a 01                	push   0x1
c000445d:	50                   	push   eax
c000445e:	57                   	push   edi
c000445f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004463:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004467:	50                   	push   eax
c0004468:	e8 7d d8 ff ff       	call   c0001cea <disk_write>
c000446d:	83 c4 10             	add    esp,0x10
c0004470:	85 c0                	test   eax,eax
c0004472:	0f 85 3a ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004478:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000447c:	6a 01                	push   0x1
c000447e:	56                   	push   esi
c000447f:	57                   	push   edi
c0004480:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004484:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004488:	50                   	push   eax
c0004489:	e8 46 d8 ff ff       	call   c0001cd4 <disk_read>
c000448e:	83 c4 10             	add    esp,0x10
c0004491:	85 c0                	test   eax,eax
c0004493:	0f 85 19 ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004499:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000449c:	83 c4 2c             	add    esp,0x2c
c000449f:	89 e8                	mov    eax,ebp
c00044a1:	5b                   	pop    ebx
c00044a2:	5e                   	pop    esi
c00044a3:	5f                   	pop    edi
c00044a4:	5d                   	pop    ebp
c00044a5:	c3                   	ret    

c00044a6 <f_opendir>:
c00044a6:	56                   	push   esi
c00044a7:	b8 09 00 00 00       	mov    eax,0x9
c00044ac:	53                   	push   ebx
c00044ad:	83 ec 24             	sub    esp,0x24
c00044b0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044b4:	85 db                	test   ebx,ebx
c00044b6:	0f 84 af 00 00 00    	je     c000456b <f_opendir+0xc5>
c00044bc:	31 c9                	xor    ecx,ecx
c00044be:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044c2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044c6:	e8 cd de ff ff       	call   c0002398 <mount_volume>
c00044cb:	85 c0                	test   eax,eax
c00044cd:	0f 85 92 00 00 00    	jne    c0004565 <f_opendir+0xbf>
c00044d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d7:	83 ec 0c             	sub    esp,0xc
c00044da:	89 03                	mov    DWORD PTR [ebx],eax
c00044dc:	68 00 02 00 00       	push   0x200
c00044e1:	e8 86 15 00 00       	call   c0005a6c <ff_memalloc>
c00044e6:	83 c4 10             	add    esp,0x10
c00044e9:	89 c6                	mov    esi,eax
c00044eb:	b8 11 00 00 00       	mov    eax,0x11
c00044f0:	85 f6                	test   esi,esi
c00044f2:	74 77                	je     c000456b <f_opendir+0xc5>
c00044f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044f8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00044fc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00044ff:	89 d8                	mov    eax,ebx
c0004501:	e8 9c f3 ff ff       	call   c00038a2 <follow_path>
c0004506:	85 c0                	test   eax,eax
c0004508:	75 37                	jne    c0004541 <f_opendir+0x9b>
c000450a:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000450e:	78 1c                	js     c000452c <f_opendir+0x86>
c0004510:	b8 05 00 00 00       	mov    eax,0x5
c0004515:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004519:	74 26                	je     c0004541 <f_opendir+0x9b>
c000451b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000451e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004522:	8a 00                	mov    al,BYTE PTR [eax]
c0004524:	e8 97 eb ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004529:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000452c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004530:	31 d2                	xor    edx,edx
c0004532:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004536:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000453a:	89 d8                	mov    eax,ebx
c000453c:	e8 d2 ec ff ff       	call   c0003213 <dir_sdi>
c0004541:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004545:	83 ec 0c             	sub    esp,0xc
c0004548:	56                   	push   esi
c0004549:	e8 36 15 00 00       	call   c0005a84 <ff_memfree>
c000454e:	83 c4 10             	add    esp,0x10
c0004551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004555:	83 f8 04             	cmp    eax,0x4
c0004558:	74 06                	je     c0004560 <f_opendir+0xba>
c000455a:	85 c0                	test   eax,eax
c000455c:	74 0d                	je     c000456b <f_opendir+0xc5>
c000455e:	eb 05                	jmp    c0004565 <f_opendir+0xbf>
c0004560:	b8 05 00 00 00       	mov    eax,0x5
c0004565:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000456b:	83 c4 24             	add    esp,0x24
c000456e:	5b                   	pop    ebx
c000456f:	5e                   	pop    esi
c0004570:	c3                   	ret    

c0004571 <f_closedir>:
c0004571:	53                   	push   ebx
c0004572:	83 ec 18             	sub    esp,0x18
c0004575:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004579:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000457d:	89 d8                	mov    eax,ebx
c000457f:	e8 17 dc ff ff       	call   c000219b <validate>
c0004584:	85 c0                	test   eax,eax
c0004586:	75 06                	jne    c000458e <f_closedir+0x1d>
c0004588:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000458e:	83 c4 18             	add    esp,0x18
c0004591:	5b                   	pop    ebx
c0004592:	c3                   	ret    

c0004593 <f_readdir>:
c0004593:	57                   	push   edi
c0004594:	56                   	push   esi
c0004595:	53                   	push   ebx
c0004596:	83 ec 20             	sub    esp,0x20
c0004599:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000459d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00045a1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045a5:	89 d8                	mov    eax,ebx
c00045a7:	e8 ef db ff ff       	call   c000219b <validate>
c00045ac:	85 c0                	test   eax,eax
c00045ae:	75 6e                	jne    c000461e <f_readdir+0x8b>
c00045b0:	85 ff                	test   edi,edi
c00045b2:	75 0b                	jne    c00045bf <f_readdir+0x2c>
c00045b4:	31 d2                	xor    edx,edx
c00045b6:	89 d8                	mov    eax,ebx
c00045b8:	e8 56 ec ff ff       	call   c0003213 <dir_sdi>
c00045bd:	eb 5f                	jmp    c000461e <f_readdir+0x8b>
c00045bf:	83 ec 0c             	sub    esp,0xc
c00045c2:	68 00 02 00 00       	push   0x200
c00045c7:	e8 a0 14 00 00       	call   c0005a6c <ff_memalloc>
c00045cc:	83 c4 10             	add    esp,0x10
c00045cf:	89 c6                	mov    esi,eax
c00045d1:	b8 11 00 00 00       	mov    eax,0x11
c00045d6:	85 f6                	test   esi,esi
c00045d8:	74 44                	je     c000461e <f_readdir+0x8b>
c00045da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045de:	31 d2                	xor    edx,edx
c00045e0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00045e3:	89 d8                	mov    eax,ebx
c00045e5:	e8 1a f0 ff ff       	call   c0003604 <dir_read>
c00045ea:	a9 fb ff ff ff       	test   eax,0xfffffffb
c00045ef:	75 19                	jne    c000460a <f_readdir+0x77>
c00045f1:	89 fa                	mov    edx,edi
c00045f3:	89 d8                	mov    eax,ebx
c00045f5:	e8 e2 e8 ff ff       	call   c0002edc <get_fileinfo>
c00045fa:	31 d2                	xor    edx,edx
c00045fc:	89 d8                	mov    eax,ebx
c00045fe:	e8 9b ee ff ff       	call   c000349e <dir_next>
c0004603:	83 f8 04             	cmp    eax,0x4
c0004606:	75 02                	jne    c000460a <f_readdir+0x77>
c0004608:	31 c0                	xor    eax,eax
c000460a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000460e:	83 ec 0c             	sub    esp,0xc
c0004611:	56                   	push   esi
c0004612:	e8 6d 14 00 00       	call   c0005a84 <ff_memfree>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461e:	83 c4 20             	add    esp,0x20
c0004621:	5b                   	pop    ebx
c0004622:	5e                   	pop    esi
c0004623:	5f                   	pop    edi
c0004624:	c3                   	ret    

c0004625 <f_stat>:
c0004625:	57                   	push   edi
c0004626:	31 c9                	xor    ecx,ecx
c0004628:	56                   	push   esi
c0004629:	53                   	push   ebx
c000462a:	83 ec 30             	sub    esp,0x30
c000462d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004631:	89 e2                	mov    edx,esp
c0004633:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004637:	e8 5c dd ff ff       	call   c0002398 <mount_volume>
c000463c:	89 c3                	mov    ebx,eax
c000463e:	85 c0                	test   eax,eax
c0004640:	75 59                	jne    c000469b <f_stat+0x76>
c0004642:	83 ec 0c             	sub    esp,0xc
c0004645:	bb 11 00 00 00       	mov    ebx,0x11
c000464a:	68 00 02 00 00       	push   0x200
c000464f:	e8 18 14 00 00       	call   c0005a6c <ff_memalloc>
c0004654:	83 c4 10             	add    esp,0x10
c0004657:	89 c6                	mov    esi,eax
c0004659:	85 c0                	test   eax,eax
c000465b:	74 3e                	je     c000469b <f_stat+0x76>
c000465d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004660:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004664:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004667:	89 e0                	mov    eax,esp
c0004669:	e8 34 f2 ff ff       	call   c00038a2 <follow_path>
c000466e:	89 c3                	mov    ebx,eax
c0004670:	85 c0                	test   eax,eax
c0004672:	75 1b                	jne    c000468f <f_stat+0x6a>
c0004674:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004679:	78 0f                	js     c000468a <f_stat+0x65>
c000467b:	85 ff                	test   edi,edi
c000467d:	74 10                	je     c000468f <f_stat+0x6a>
c000467f:	89 fa                	mov    edx,edi
c0004681:	89 e0                	mov    eax,esp
c0004683:	e8 54 e8 ff ff       	call   c0002edc <get_fileinfo>
c0004688:	eb 05                	jmp    c000468f <f_stat+0x6a>
c000468a:	bb 06 00 00 00       	mov    ebx,0x6
c000468f:	83 ec 0c             	sub    esp,0xc
c0004692:	56                   	push   esi
c0004693:	e8 ec 13 00 00       	call   c0005a84 <ff_memfree>
c0004698:	83 c4 10             	add    esp,0x10
c000469b:	83 c4 30             	add    esp,0x30
c000469e:	89 d8                	mov    eax,ebx
c00046a0:	5b                   	pop    ebx
c00046a1:	5e                   	pop    esi
c00046a2:	5f                   	pop    edi
c00046a3:	c3                   	ret    

c00046a4 <f_getfree>:
c00046a4:	55                   	push   ebp
c00046a5:	31 c9                	xor    ecx,ecx
c00046a7:	57                   	push   edi
c00046a8:	56                   	push   esi
c00046a9:	53                   	push   ebx
c00046aa:	83 ec 2c             	sub    esp,0x2c
c00046ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046b1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046b5:	e8 de dc ff ff       	call   c0002398 <mount_volume>
c00046ba:	89 c7                	mov    edi,eax
c00046bc:	85 c0                	test   eax,eax
c00046be:	0f 85 d8 00 00 00    	jne    c000479c <f_getfree+0xf8>
c00046c4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046cc:	89 30                	mov    DWORD PTR [eax],esi
c00046ce:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046d1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046d4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046d7:	39 d0                	cmp    eax,edx
c00046d9:	77 0b                	ja     c00046e6 <f_getfree+0x42>
c00046db:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046df:	89 01                	mov    DWORD PTR [ecx],eax
c00046e1:	e9 b6 00 00 00       	jmp    c000479c <f_getfree+0xf8>
c00046e6:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c00046e9:	75 29                	jne    c0004714 <f_getfree+0x70>
c00046eb:	bd 02 00 00 00       	mov    ebp,0x2
c00046f0:	31 db                	xor    ebx,ebx
c00046f2:	89 ea                	mov    edx,ebp
c00046f4:	89 f0                	mov    eax,esi
c00046f6:	e8 16 ea ff ff       	call   c0003111 <get_fat.isra.2>
c00046fb:	83 f8 ff             	cmp    eax,0xffffffff
c00046fe:	74 7b                	je     c000477b <f_getfree+0xd7>
c0004700:	83 f8 01             	cmp    eax,0x1
c0004703:	74 7d                	je     c0004782 <f_getfree+0xde>
c0004705:	83 d3 00             	adc    ebx,0x0
c0004708:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000470c:	45                   	inc    ebp
c000470d:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004710:	77 e0                	ja     c00046f2 <f_getfree+0x4e>
c0004712:	eb 77                	jmp    c000478b <f_getfree+0xe7>
c0004714:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004717:	31 db                	xor    ebx,ebx
c0004719:	31 f6                	xor    esi,esi
c000471b:	85 f6                	test   esi,esi
c000471d:	75 18                	jne    c0004737 <f_getfree+0x93>
c000471f:	8d 42 01             	lea    eax,[edx+0x1]
c0004722:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004726:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000472a:	e8 16 db ff ff       	call   c0002245 <move_window>
c000472f:	85 c0                	test   eax,eax
c0004731:	75 56                	jne    c0004789 <f_getfree+0xe5>
c0004733:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004737:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000473b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000473f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004743:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004746:	75 11                	jne    c0004759 <f_getfree+0xb5>
c0004748:	e8 d2 d5 ff ff       	call   c0001d1f <ld_word>
c000474d:	66 83 f8 01          	cmp    ax,0x1
c0004751:	83 d3 00             	adc    ebx,0x0
c0004754:	83 c6 02             	add    esi,0x2
c0004757:	eb 13                	jmp    c000476c <f_getfree+0xc8>
c0004759:	e8 ce d5 ff ff       	call   c0001d2c <ld_dword>
c000475e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004763:	83 f8 01             	cmp    eax,0x1
c0004766:	83 d3 00             	adc    ebx,0x0
c0004769:	83 c6 04             	add    esi,0x4
c000476c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004772:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004776:	4d                   	dec    ebp
c0004777:	75 a2                	jne    c000471b <f_getfree+0x77>
c0004779:	eb 10                	jmp    c000478b <f_getfree+0xe7>
c000477b:	bf 01 00 00 00       	mov    edi,0x1
c0004780:	eb 09                	jmp    c000478b <f_getfree+0xe7>
c0004782:	bf 02 00 00 00       	mov    edi,0x2
c0004787:	eb 02                	jmp    c000478b <f_getfree+0xe7>
c0004789:	89 c7                	mov    edi,eax
c000478b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000478f:	89 18                	mov    DWORD PTR [eax],ebx
c0004791:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004795:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004798:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000479c:	83 c4 2c             	add    esp,0x2c
c000479f:	89 f8                	mov    eax,edi
c00047a1:	5b                   	pop    ebx
c00047a2:	5e                   	pop    esi
c00047a3:	5f                   	pop    edi
c00047a4:	5d                   	pop    ebp
c00047a5:	c3                   	ret    

c00047a6 <f_truncate>:
c00047a6:	56                   	push   esi
c00047a7:	53                   	push   ebx
c00047a8:	83 ec 14             	sub    esp,0x14
c00047ab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047af:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047b3:	89 d8                	mov    eax,ebx
c00047b5:	e8 e1 d9 ff ff       	call   c000219b <validate>
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	0f 85 be 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047c4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047c8:	85 f6                	test   esi,esi
c00047ca:	0f 85 b2 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047d0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047d4:	0f 84 a3 00 00 00    	je     c000487d <f_truncate+0xd7>
c00047da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047dd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00047e0:	0f 83 9c 00 00 00    	jae    c0004882 <f_truncate+0xdc>
c00047e6:	85 c0                	test   eax,eax
c00047e8:	75 15                	jne    c00047ff <f_truncate+0x59>
c00047ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00047ed:	31 c9                	xor    ecx,ecx
c00047ef:	89 d8                	mov    eax,ebx
c00047f1:	e8 1f ec ff ff       	call   c0003415 <remove_chain>
c00047f6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00047fd:	eb 35                	jmp    c0004834 <f_truncate+0x8e>
c00047ff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004802:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004804:	e8 08 e9 ff ff       	call   c0003111 <get_fat.isra.2>
c0004809:	89 c2                	mov    edx,eax
c000480b:	b8 01 00 00 00       	mov    eax,0x1
c0004810:	83 fa ff             	cmp    edx,0xffffffff
c0004813:	74 1f                	je     c0004834 <f_truncate+0x8e>
c0004815:	b8 02 00 00 00       	mov    eax,0x2
c000481a:	83 fa 01             	cmp    edx,0x1
c000481d:	74 15                	je     c0004834 <f_truncate+0x8e>
c000481f:	31 c0                	xor    eax,eax
c0004821:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004825:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004828:	76 0a                	jbe    c0004834 <f_truncate+0x8e>
c000482a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000482d:	89 d8                	mov    eax,ebx
c000482f:	e8 e1 eb ff ff       	call   c0003415 <remove_chain>
c0004834:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004837:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000483a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000483d:	83 ca 40             	or     edx,0x40
c0004840:	85 c0                	test   eax,eax
c0004842:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004845:	75 2f                	jne    c0004876 <f_truncate+0xd0>
c0004847:	84 d2                	test   dl,dl
c0004849:	79 37                	jns    c0004882 <f_truncate+0xdc>
c000484b:	6a 01                	push   0x1
c000484d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004850:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004853:	50                   	push   eax
c0004854:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004858:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000485c:	50                   	push   eax
c000485d:	e8 88 d4 ff ff       	call   c0001cea <disk_write>
c0004862:	83 c4 10             	add    esp,0x10
c0004865:	85 c0                	test   eax,eax
c0004867:	75 08                	jne    c0004871 <f_truncate+0xcb>
c0004869:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000486d:	31 f6                	xor    esi,esi
c000486f:	eb 11                	jmp    c0004882 <f_truncate+0xdc>
c0004871:	b8 01 00 00 00       	mov    eax,0x1
c0004876:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004879:	89 c6                	mov    esi,eax
c000487b:	eb 05                	jmp    c0004882 <f_truncate+0xdc>
c000487d:	be 07 00 00 00       	mov    esi,0x7
c0004882:	89 f0                	mov    eax,esi
c0004884:	83 c4 14             	add    esp,0x14
c0004887:	5b                   	pop    ebx
c0004888:	5e                   	pop    esi
c0004889:	c3                   	ret    

c000488a <f_unlink>:
c000488a:	55                   	push   ebp
c000488b:	b9 02 00 00 00       	mov    ecx,0x2
c0004890:	57                   	push   edi
c0004891:	56                   	push   esi
c0004892:	53                   	push   ebx
c0004893:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004899:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000489d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00048a4:	e8 ef da ff ff       	call   c0002398 <mount_volume>
c00048a9:	85 c0                	test   eax,eax
c00048ab:	0f 85 f0 00 00 00    	jne    c00049a1 <f_unlink+0x117>
c00048b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b5:	83 ec 0c             	sub    esp,0xc
c00048b8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048bc:	68 00 02 00 00       	push   0x200
c00048c1:	e8 a6 11 00 00       	call   c0005a6c <ff_memalloc>
c00048c6:	83 c4 10             	add    esp,0x10
c00048c9:	89 c3                	mov    ebx,eax
c00048cb:	b8 11 00 00 00       	mov    eax,0x11
c00048d0:	85 db                	test   ebx,ebx
c00048d2:	0f 84 c9 00 00 00    	je     c00049a1 <f_unlink+0x117>
c00048d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048dc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c00048e3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00048e6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00048ea:	e8 b3 ef ff ff       	call   c00038a2 <follow_path>
c00048ef:	85 c0                	test   eax,eax
c00048f1:	0f 85 96 00 00 00    	jne    c000498d <f_unlink+0x103>
c00048f7:	b8 06 00 00 00       	mov    eax,0x6
c00048fc:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004901:	0f 88 86 00 00 00    	js     c000498d <f_unlink+0x103>
c0004907:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c000490c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004912:	74 07                	je     c000491b <f_unlink+0x91>
c0004914:	b8 07 00 00 00       	mov    eax,0x7
c0004919:	eb 72                	jmp    c000498d <f_unlink+0x103>
c000491b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000491f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004923:	8a 07                	mov    al,BYTE PTR [edi]
c0004925:	e8 96 e7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000492a:	83 e5 10             	and    ebp,0x10
c000492d:	89 c6                	mov    esi,eax
c000492f:	75 0f                	jne    c0004940 <f_unlink+0xb6>
c0004931:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004935:	e8 e7 ed ff ff       	call   c0003721 <dir_remove>
c000493a:	85 c0                	test   eax,eax
c000493c:	74 2f                	je     c000496d <f_unlink+0xe3>
c000493e:	eb 4d                	jmp    c000498d <f_unlink+0x103>
c0004940:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004944:	31 d2                	xor    edx,edx
c0004946:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000494a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000494e:	e8 c0 e8 ff ff       	call   c0003213 <dir_sdi>
c0004953:	85 c0                	test   eax,eax
c0004955:	75 36                	jne    c000498d <f_unlink+0x103>
c0004957:	31 d2                	xor    edx,edx
c0004959:	8d 44 24 50          	lea    eax,[esp+0x50]
c000495d:	e8 a2 ec ff ff       	call   c0003604 <dir_read>
c0004962:	85 c0                	test   eax,eax
c0004964:	74 ae                	je     c0004914 <f_unlink+0x8a>
c0004966:	83 f8 04             	cmp    eax,0x4
c0004969:	75 22                	jne    c000498d <f_unlink+0x103>
c000496b:	eb c4                	jmp    c0004931 <f_unlink+0xa7>
c000496d:	85 f6                	test   esi,esi
c000496f:	75 0b                	jne    c000497c <f_unlink+0xf2>
c0004971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004975:	e8 0b e3 ff ff       	call   c0002c85 <sync_fs>
c000497a:	eb 11                	jmp    c000498d <f_unlink+0x103>
c000497c:	31 c9                	xor    ecx,ecx
c000497e:	89 f2                	mov    edx,esi
c0004980:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004984:	e8 8c ea ff ff       	call   c0003415 <remove_chain>
c0004989:	85 c0                	test   eax,eax
c000498b:	74 e4                	je     c0004971 <f_unlink+0xe7>
c000498d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004991:	83 ec 0c             	sub    esp,0xc
c0004994:	53                   	push   ebx
c0004995:	e8 ea 10 00 00       	call   c0005a84 <ff_memfree>
c000499a:	83 c4 10             	add    esp,0x10
c000499d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049a1:	81 c4 8c 00 00 00    	add    esp,0x8c
c00049a7:	5b                   	pop    ebx
c00049a8:	5e                   	pop    esi
c00049a9:	5f                   	pop    edi
c00049aa:	5d                   	pop    ebp
c00049ab:	c3                   	ret    

c00049ac <f_mkdir>:
c00049ac:	57                   	push   edi
c00049ad:	b9 02 00 00 00       	mov    ecx,0x2
c00049b2:	56                   	push   esi
c00049b3:	53                   	push   ebx
c00049b4:	83 ec 50             	sub    esp,0x50
c00049b7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049bb:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049bf:	e8 d4 d9 ff ff       	call   c0002398 <mount_volume>
c00049c4:	89 c3                	mov    ebx,eax
c00049c6:	85 c0                	test   eax,eax
c00049c8:	0f 85 70 01 00 00    	jne    c0004b3e <f_mkdir+0x192>
c00049ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049d2:	bb 11 00 00 00       	mov    ebx,0x11
c00049d7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	68 00 02 00 00       	push   0x200
c00049e3:	e8 84 10 00 00       	call   c0005a6c <ff_memalloc>
c00049e8:	83 c4 10             	add    esp,0x10
c00049eb:	89 c7                	mov    edi,eax
c00049ed:	85 c0                	test   eax,eax
c00049ef:	0f 84 49 01 00 00    	je     c0004b3e <f_mkdir+0x192>
c00049f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049f9:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00049fd:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004a00:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a04:	e8 99 ee ff ff       	call   c00038a2 <follow_path>
c0004a09:	89 c3                	mov    ebx,eax
c0004a0b:	85 c0                	test   eax,eax
c0004a0d:	74 3e                	je     c0004a4d <f_mkdir+0xa1>
c0004a0f:	83 f8 04             	cmp    eax,0x4
c0004a12:	75 3e                	jne    c0004a52 <f_mkdir+0xa6>
c0004a14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a18:	31 d2                	xor    edx,edx
c0004a1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a1e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a22:	e8 b4 e8 ff ff       	call   c00032db <create_chain>
c0004a27:	89 c6                	mov    esi,eax
c0004a29:	85 c0                	test   eax,eax
c0004a2b:	74 0c                	je     c0004a39 <f_mkdir+0x8d>
c0004a2d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a32:	83 f8 01             	cmp    eax,0x1
c0004a35:	74 07                	je     c0004a3e <f_mkdir+0x92>
c0004a37:	eb 2a                	jmp    c0004a63 <f_mkdir+0xb7>
c0004a39:	bb 07 00 00 00       	mov    ebx,0x7
c0004a3e:	31 c9                	xor    ecx,ecx
c0004a40:	89 f2                	mov    edx,esi
c0004a42:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a46:	e8 ca e9 ff ff       	call   c0003415 <remove_chain>
c0004a4b:	eb 05                	jmp    c0004a52 <f_mkdir+0xa6>
c0004a4d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a52:	83 ec 0c             	sub    esp,0xc
c0004a55:	57                   	push   edi
c0004a56:	e8 29 10 00 00       	call   c0005a84 <ff_memfree>
c0004a5b:	83 c4 10             	add    esp,0x10
c0004a5e:	e9 db 00 00 00       	jmp    c0004b3e <f_mkdir+0x192>
c0004a63:	bb 01 00 00 00       	mov    ebx,0x1
c0004a68:	83 f8 ff             	cmp    eax,0xffffffff
c0004a6b:	74 d1                	je     c0004a3e <f_mkdir+0x92>
c0004a6d:	89 f2                	mov    edx,esi
c0004a6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a73:	e8 73 dd ff ff       	call   c00027eb <dir_clear>
c0004a78:	89 c3                	mov    ebx,eax
c0004a7a:	85 c0                	test   eax,eax
c0004a7c:	75 c0                	jne    c0004a3e <f_mkdir+0x92>
c0004a7e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004a83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a87:	ba 20 00 00 00       	mov    edx,0x20
c0004a8c:	83 c0 34             	add    eax,0x34
c0004a8f:	e8 cc d2 ff ff       	call   c0001d60 <mem_set>
c0004a94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a98:	ba 00 00 21 50       	mov    edx,0x50210000
c0004a9d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004aa1:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004aa5:	83 c0 4a             	add    eax,0x4a
c0004aa8:	e8 9b d2 ff ff       	call   c0001d48 <st_dword>
c0004aad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ab1:	89 f1                	mov    ecx,esi
c0004ab3:	8d 50 34             	lea    edx,[eax+0x34]
c0004ab6:	e8 2e e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004abb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004abf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ac4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ac7:	83 c0 54             	add    eax,0x54
c0004aca:	e8 7c d2 ff ff       	call   c0001d4b <mem_cpy>
c0004acf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004ad7:	8d 50 54             	lea    edx,[eax+0x54]
c0004ada:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004ade:	e8 06 e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004ae3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ae7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004aeb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aef:	e8 42 ee ff ff       	call   c0003936 <dir_register>
c0004af4:	89 c3                	mov    ebx,eax
c0004af6:	85 c0                	test   eax,eax
c0004af8:	0f 85 40 ff ff ff    	jne    c0004a3e <f_mkdir+0x92>
c0004afe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b02:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b07:	83 c0 16             	add    eax,0x16
c0004b0a:	e8 39 d2 ff ff       	call   c0001d48 <st_dword>
c0004b0f:	89 f1                	mov    ecx,esi
c0004b11:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b19:	e8 cb e5 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004b1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b22:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b2a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b32:	e8 4e e1 ff ff       	call   c0002c85 <sync_fs>
c0004b37:	89 c3                	mov    ebx,eax
c0004b39:	e9 14 ff ff ff       	jmp    c0004a52 <f_mkdir+0xa6>
c0004b3e:	83 c4 50             	add    esp,0x50
c0004b41:	89 d8                	mov    eax,ebx
c0004b43:	5b                   	pop    ebx
c0004b44:	5e                   	pop    esi
c0004b45:	5f                   	pop    edi
c0004b46:	c3                   	ret    

c0004b47 <f_rename>:
c0004b47:	57                   	push   edi
c0004b48:	56                   	push   esi
c0004b49:	53                   	push   ebx
c0004b4a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b50:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b57:	e8 f2 d5 ff ff       	call   c000214e <get_ldnumber>
c0004b5c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b65:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b6c:	e8 27 d8 ff ff       	call   c0002398 <mount_volume>
c0004b71:	85 c0                	test   eax,eax
c0004b73:	0f 85 7a 01 00 00    	jne    c0004cf3 <f_rename+0x1ac>
c0004b79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b7d:	83 ec 0c             	sub    esp,0xc
c0004b80:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004b84:	68 00 02 00 00       	push   0x200
c0004b89:	e8 de 0e 00 00       	call   c0005a6c <ff_memalloc>
c0004b8e:	83 c4 10             	add    esp,0x10
c0004b91:	89 c6                	mov    esi,eax
c0004b93:	b8 11 00 00 00       	mov    eax,0x11
c0004b98:	85 f6                	test   esi,esi
c0004b9a:	0f 84 53 01 00 00    	je     c0004cf3 <f_rename+0x1ac>
c0004ba0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ba4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004bab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004bae:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004bb2:	e8 eb ec ff ff       	call   c00038a2 <follow_path>
c0004bb7:	85 c0                	test   eax,eax
c0004bb9:	0f 85 20 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bbf:	b8 06 00 00 00       	mov    eax,0x6
c0004bc4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004bc9:	0f 85 10 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0004bd4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bd8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bdc:	e8 6a d1 ff ff       	call   c0001d4b <mem_cpy>
c0004be1:	b9 30 00 00 00       	mov    ecx,0x30
c0004be6:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004bea:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bee:	e8 58 d1 ff ff       	call   c0001d4b <mem_cpy>
c0004bf3:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004bfa:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bfe:	e8 9f ec ff ff       	call   c00038a2 <follow_path>
c0004c03:	85 c0                	test   eax,eax
c0004c05:	75 20                	jne    c0004c27 <f_rename+0xe0>
c0004c07:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004c0b:	b8 08 00 00 00       	mov    eax,0x8
c0004c10:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c14:	0f 85 c5 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c1a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c1e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c25:	eb 03                	jmp    c0004c2a <f_rename+0xe3>
c0004c27:	83 f8 04             	cmp    eax,0x4
c0004c2a:	0f 85 af 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c30:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c34:	e8 fd ec ff ff       	call   c0003936 <dir_register>
c0004c39:	85 c0                	test   eax,eax
c0004c3b:	0f 85 9e 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c41:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c48:	b9 13 00 00 00       	mov    ecx,0x13
c0004c4d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c50:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c54:	e8 f2 d0 ff ff       	call   c0001d4b <mem_cpy>
c0004c59:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c5d:	a8 10                	test   al,0x10
c0004c5f:	75 03                	jne    c0004c64 <f_rename+0x11d>
c0004c61:	83 c8 20             	or     eax,0x20
c0004c64:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c6b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c6f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c73:	74 54                	je     c0004cc9 <f_rename+0x182>
c0004c75:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c79:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c7d:	74 4a                	je     c0004cc9 <f_rename+0x182>
c0004c7f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c83:	89 da                	mov    edx,ebx
c0004c85:	8a 07                	mov    al,BYTE PTR [edi]
c0004c87:	e8 34 e4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004c8c:	89 c2                	mov    edx,eax
c0004c8e:	89 f8                	mov    eax,edi
c0004c90:	e8 d0 d2 ff ff       	call   c0001f65 <clst2sect>
c0004c95:	89 c2                	mov    edx,eax
c0004c97:	b8 02 00 00 00       	mov    eax,0x2
c0004c9c:	85 d2                	test   edx,edx
c0004c9e:	74 3f                	je     c0004cdf <f_rename+0x198>
c0004ca0:	89 f8                	mov    eax,edi
c0004ca2:	e8 9e d5 ff ff       	call   c0002245 <move_window>
c0004ca7:	85 c0                	test   eax,eax
c0004ca9:	75 34                	jne    c0004cdf <f_rename+0x198>
c0004cab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004caf:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004cb3:	75 14                	jne    c0004cc9 <f_rename+0x182>
c0004cb5:	8d 50 54             	lea    edx,[eax+0x54]
c0004cb8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cbc:	e8 28 e4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004cc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cc5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ccd:	e8 4f ea ff ff       	call   c0003721 <dir_remove>
c0004cd2:	85 c0                	test   eax,eax
c0004cd4:	75 09                	jne    c0004cdf <f_rename+0x198>
c0004cd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cda:	e8 a6 df ff ff       	call   c0002c85 <sync_fs>
c0004cdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ce3:	83 ec 0c             	sub    esp,0xc
c0004ce6:	56                   	push   esi
c0004ce7:	e8 98 0d 00 00       	call   c0005a84 <ff_memfree>
c0004cec:	83 c4 10             	add    esp,0x10
c0004cef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cf3:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004cf9:	5b                   	pop    ebx
c0004cfa:	5e                   	pop    esi
c0004cfb:	5f                   	pop    edi
c0004cfc:	c3                   	ret    

c0004cfd <f_chmod>:
c0004cfd:	57                   	push   edi
c0004cfe:	b9 02 00 00 00       	mov    ecx,0x2
c0004d03:	56                   	push   esi
c0004d04:	53                   	push   ebx
c0004d05:	83 ec 50             	sub    esp,0x50
c0004d08:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d0c:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 7b d6 ff ff       	call   c0002398 <mount_volume>
c0004d1d:	85 c0                	test   eax,eax
c0004d1f:	75 7e                	jne    c0004d9f <f_chmod+0xa2>
c0004d21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d25:	83 ec 0c             	sub    esp,0xc
c0004d28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d2c:	68 00 02 00 00       	push   0x200
c0004d31:	e8 36 0d 00 00       	call   c0005a6c <ff_memalloc>
c0004d36:	83 c4 10             	add    esp,0x10
c0004d39:	89 c6                	mov    esi,eax
c0004d3b:	b8 11 00 00 00       	mov    eax,0x11
c0004d40:	85 f6                	test   esi,esi
c0004d42:	74 5b                	je     c0004d9f <f_chmod+0xa2>
c0004d44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d48:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d4c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d4f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d53:	e8 4a eb ff ff       	call   c00038a2 <follow_path>
c0004d58:	85 c0                	test   eax,eax
c0004d5a:	75 2f                	jne    c0004d8b <f_chmod+0x8e>
c0004d5c:	b8 06 00 00 00       	mov    eax,0x6
c0004d61:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d66:	75 23                	jne    c0004d8b <f_chmod+0x8e>
c0004d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d6c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d6f:	21 fb                	and    ebx,edi
c0004d71:	83 e3 27             	and    ebx,0x27
c0004d74:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d77:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d7e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d86:	e8 fa de ff ff       	call   c0002c85 <sync_fs>
c0004d8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d8f:	83 ec 0c             	sub    esp,0xc
c0004d92:	56                   	push   esi
c0004d93:	e8 ec 0c 00 00       	call   c0005a84 <ff_memfree>
c0004d98:	83 c4 10             	add    esp,0x10
c0004d9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d9f:	83 c4 50             	add    esp,0x50
c0004da2:	5b                   	pop    ebx
c0004da3:	5e                   	pop    esi
c0004da4:	5f                   	pop    edi
c0004da5:	c3                   	ret    

c0004da6 <f_utime>:
c0004da6:	56                   	push   esi
c0004da7:	b9 02 00 00 00       	mov    ecx,0x2
c0004dac:	53                   	push   ebx
c0004dad:	83 ec 54             	sub    esp,0x54
c0004db0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004db4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004db8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004dbc:	e8 d7 d5 ff ff       	call   c0002398 <mount_volume>
c0004dc1:	85 c0                	test   eax,eax
c0004dc3:	0f 85 85 00 00 00    	jne    c0004e4e <f_utime+0xa8>
c0004dc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dcd:	83 ec 0c             	sub    esp,0xc
c0004dd0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004dd4:	68 00 02 00 00       	push   0x200
c0004dd9:	e8 8e 0c 00 00       	call   c0005a6c <ff_memalloc>
c0004dde:	83 c4 10             	add    esp,0x10
c0004de1:	89 c3                	mov    ebx,eax
c0004de3:	b8 11 00 00 00       	mov    eax,0x11
c0004de8:	85 db                	test   ebx,ebx
c0004dea:	74 62                	je     c0004e4e <f_utime+0xa8>
c0004dec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004df0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004df4:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004df7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004dfb:	e8 a2 ea ff ff       	call   c00038a2 <follow_path>
c0004e00:	85 c0                	test   eax,eax
c0004e02:	75 36                	jne    c0004e3a <f_utime+0x94>
c0004e04:	b8 06 00 00 00       	mov    eax,0x6
c0004e09:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e0e:	75 2a                	jne    c0004e3a <f_utime+0x94>
c0004e10:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e14:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e18:	c1 e2 10             	shl    edx,0x10
c0004e1b:	09 c2                	or     edx,eax
c0004e1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e21:	83 c0 16             	add    eax,0x16
c0004e24:	e8 1f cf ff ff       	call   c0001d48 <st_dword>
c0004e29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e2d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e35:	e8 4b de ff ff       	call   c0002c85 <sync_fs>
c0004e3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e3e:	83 ec 0c             	sub    esp,0xc
c0004e41:	53                   	push   ebx
c0004e42:	e8 3d 0c 00 00       	call   c0005a84 <ff_memfree>
c0004e47:	83 c4 10             	add    esp,0x10
c0004e4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e4e:	83 c4 54             	add    esp,0x54
c0004e51:	5b                   	pop    ebx
c0004e52:	5e                   	pop    esi
c0004e53:	c3                   	ret    

c0004e54 <f_getlabel>:
c0004e54:	55                   	push   ebp
c0004e55:	31 c9                	xor    ecx,ecx
c0004e57:	57                   	push   edi
c0004e58:	56                   	push   esi
c0004e59:	53                   	push   ebx
c0004e5a:	83 ec 5c             	sub    esp,0x5c
c0004e5d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e65:	e8 2e d5 ff ff       	call   c0002398 <mount_volume>
c0004e6a:	89 c6                	mov    esi,eax
c0004e6c:	85 c0                	test   eax,eax
c0004e6e:	0f 85 27 01 00 00    	jne    c0004f9b <f_getlabel+0x147>
c0004e74:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e79:	0f 84 d1 00 00 00    	je     c0004f50 <f_getlabel+0xfc>
c0004e7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e83:	31 d2                	xor    edx,edx
c0004e85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e89:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004e91:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e95:	e8 79 e3 ff ff       	call   c0003213 <dir_sdi>
c0004e9a:	85 c0                	test   eax,eax
c0004e9c:	0f 85 a2 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004ea2:	ba 01 00 00 00       	mov    edx,0x1
c0004ea7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eab:	e8 54 e7 ff ff       	call   c0003604 <dir_read>
c0004eb0:	85 c0                	test   eax,eax
c0004eb2:	0f 85 8c 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004eb8:	31 db                	xor    ebx,ebx
c0004eba:	31 c9                	xor    ecx,ecx
c0004ebc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ec0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004ec3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004ec8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004ecd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ed1:	e8 ca ce ff ff       	call   c0001da0 <dbc_1st>
c0004ed6:	85 c0                	test   eax,eax
c0004ed8:	74 16                	je     c0004ef0 <f_getlabel+0x9c>
c0004eda:	83 ff 0b             	cmp    edi,0xb
c0004edd:	74 11                	je     c0004ef0 <f_getlabel+0x9c>
c0004edf:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004ee4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ee8:	8d 79 02             	lea    edi,[ecx+0x2]
c0004eeb:	c1 e0 08             	shl    eax,0x8
c0004eee:	09 c2                	or     edx,eax
c0004ef0:	0f b7 d2             	movzx  edx,dx
c0004ef3:	50                   	push   eax
c0004ef4:	50                   	push   eax
c0004ef5:	68 b5 01 00 00       	push   0x1b5
c0004efa:	52                   	push   edx
c0004efb:	e8 3c 0c 00 00       	call   c0005b3c <ff_oem2uni>
c0004f00:	83 c4 10             	add    esp,0x10
c0004f03:	66 85 c0             	test   ax,ax
c0004f06:	74 25                	je     c0004f2d <f_getlabel+0xd9>
c0004f08:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004f0c:	0f b7 c0             	movzx  eax,ax
c0004f0f:	01 da                	add    edx,ebx
c0004f11:	b9 04 00 00 00       	mov    ecx,0x4
c0004f16:	e8 51 cf ff ff       	call   c0001e6c <put_utf>
c0004f1b:	84 c0                	test   al,al
c0004f1d:	74 0e                	je     c0004f2d <f_getlabel+0xd9>
c0004f1f:	0f b6 c0             	movzx  eax,al
c0004f22:	01 c3                	add    ebx,eax
c0004f24:	83 ff 0b             	cmp    edi,0xb
c0004f27:	74 06                	je     c0004f2f <f_getlabel+0xdb>
c0004f29:	89 f9                	mov    ecx,edi
c0004f2b:	eb 8f                	jmp    c0004ebc <f_getlabel+0x68>
c0004f2d:	31 db                	xor    ebx,ebx
c0004f2f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f33:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f36:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f3a:	74 14                	je     c0004f50 <f_getlabel+0xfc>
c0004f3c:	4b                   	dec    ebx
c0004f3d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f40:	74 f1                	je     c0004f33 <f_getlabel+0xdf>
c0004f42:	eb 0c                	jmp    c0004f50 <f_getlabel+0xfc>
c0004f44:	83 f8 04             	cmp    eax,0x4
c0004f47:	75 50                	jne    c0004f99 <f_getlabel+0x145>
c0004f49:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f4d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f50:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f55:	74 44                	je     c0004f9b <f_getlabel+0x147>
c0004f57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f5b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f5e:	e8 e2 d2 ff ff       	call   c0002245 <move_window>
c0004f63:	89 c6                	mov    esi,eax
c0004f65:	85 c0                	test   eax,eax
c0004f67:	75 32                	jne    c0004f9b <f_getlabel+0x147>
c0004f69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f6d:	b8 43 00 00 00       	mov    eax,0x43
c0004f72:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f74:	80 f9 03             	cmp    cl,0x3
c0004f77:	74 0f                	je     c0004f88 <f_getlabel+0x134>
c0004f79:	31 c0                	xor    eax,eax
c0004f7b:	80 f9 04             	cmp    cl,0x4
c0004f7e:	0f 94 c0             	sete   al
c0004f81:	48                   	dec    eax
c0004f82:	83 e0 c3             	and    eax,0xffffffc3
c0004f85:	83 c0 64             	add    eax,0x64
c0004f88:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004f8c:	e8 9b cd ff ff       	call   c0001d2c <ld_dword>
c0004f91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004f95:	89 07                	mov    DWORD PTR [edi],eax
c0004f97:	eb 02                	jmp    c0004f9b <f_getlabel+0x147>
c0004f99:	89 c6                	mov    esi,eax
c0004f9b:	83 c4 5c             	add    esp,0x5c
c0004f9e:	89 f0                	mov    eax,esi
c0004fa0:	5b                   	pop    ebx
c0004fa1:	5e                   	pop    esi
c0004fa2:	5f                   	pop    edi
c0004fa3:	5d                   	pop    ebp
c0004fa4:	c3                   	ret    

c0004fa5 <f_setlabel>:
c0004fa5:	56                   	push   esi
c0004fa6:	b9 02 00 00 00       	mov    ecx,0x2
c0004fab:	53                   	push   ebx
c0004fac:	83 ec 54             	sub    esp,0x54
c0004faf:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fb3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fb7:	e8 dc d3 ff ff       	call   c0002398 <mount_volume>
c0004fbc:	89 c6                	mov    esi,eax
c0004fbe:	85 c0                	test   eax,eax
c0004fc0:	0f 85 67 01 00 00    	jne    c000512d <f_setlabel+0x188>
c0004fc6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004fcb:	ba 20 00 00 00       	mov    edx,0x20
c0004fd0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004fd4:	31 db                	xor    ebx,ebx
c0004fd6:	e8 85 cd ff ff       	call   c0001d60 <mem_set>
c0004fdb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fdf:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004fe2:	76 5b                	jbe    c000503f <f_setlabel+0x9a>
c0004fe4:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fe8:	e8 b9 cd ff ff       	call   c0001da6 <tchar2uni>
c0004fed:	3d ff ff 00 00       	cmp    eax,0xffff
c0004ff2:	76 0a                	jbe    c0004ffe <f_setlabel+0x59>
c0004ff4:	be 06 00 00 00       	mov    esi,0x6
c0004ff9:	e9 2f 01 00 00       	jmp    c000512d <f_setlabel+0x188>
c0004ffe:	83 ec 0c             	sub    esp,0xc
c0005001:	50                   	push   eax
c0005002:	e8 ad 0b 00 00       	call   c0005bb4 <ff_wtoupper>
c0005007:	5a                   	pop    edx
c0005008:	59                   	pop    ecx
c0005009:	68 b5 01 00 00       	push   0x1b5
c000500e:	50                   	push   eax
c000500f:	e8 88 0a 00 00       	call   c0005a9c <ff_uni2oem>
c0005014:	83 c4 10             	add    esp,0x10
c0005017:	89 c6                	mov    esi,eax
c0005019:	66 85 c0             	test   ax,ax
c000501c:	74 d6                	je     c0004ff4 <f_setlabel+0x4f>
c000501e:	0f b7 d0             	movzx  edx,ax
c0005021:	b8 90 d0 01 c0       	mov    eax,0xc001d090
c0005026:	e8 63 cd ff ff       	call   c0001d8e <chk_chr>
c000502b:	85 c0                	test   eax,eax
c000502d:	75 c5                	jne    c0004ff4 <f_setlabel+0x4f>
c000502f:	66 81 fe ff 00       	cmp    si,0xff
c0005034:	0f 87 c9 00 00 00    	ja     c0005103 <f_setlabel+0x15e>
c000503a:	e9 e4 00 00 00       	jmp    c0005123 <f_setlabel+0x17e>
c000503f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005044:	74 ae                	je     c0004ff4 <f_setlabel+0x4f>
c0005046:	85 db                	test   ebx,ebx
c0005048:	74 0e                	je     c0005058 <f_setlabel+0xb3>
c000504a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000504d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005052:	75 04                	jne    c0005058 <f_setlabel+0xb3>
c0005054:	89 c3                	mov    ebx,eax
c0005056:	eb ee                	jmp    c0005046 <f_setlabel+0xa1>
c0005058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000505c:	31 d2                	xor    edx,edx
c000505e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005062:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000506a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000506e:	e8 a0 e1 ff ff       	call   c0003213 <dir_sdi>
c0005073:	89 c6                	mov    esi,eax
c0005075:	85 c0                	test   eax,eax
c0005077:	0f 85 b0 00 00 00    	jne    c000512d <f_setlabel+0x188>
c000507d:	ba 01 00 00 00       	mov    edx,0x1
c0005082:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005086:	e8 79 e5 ff ff       	call   c0003604 <dir_read>
c000508b:	85 c0                	test   eax,eax
c000508d:	75 18                	jne    c00050a7 <f_setlabel+0x102>
c000508f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005093:	85 db                	test   ebx,ebx
c0005095:	74 0b                	je     c00050a2 <f_setlabel+0xfd>
c0005097:	b9 0b 00 00 00       	mov    ecx,0xb
c000509c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050a0:	eb 47                	jmp    c00050e9 <f_setlabel+0x144>
c00050a2:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00050a5:	eb 47                	jmp    c00050ee <f_setlabel+0x149>
c00050a7:	83 f8 04             	cmp    eax,0x4
c00050aa:	75 53                	jne    c00050ff <f_setlabel+0x15a>
c00050ac:	85 db                	test   ebx,ebx
c00050ae:	74 7d                	je     c000512d <f_setlabel+0x188>
c00050b0:	ba 01 00 00 00       	mov    edx,0x1
c00050b5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b9:	e8 e5 e4 ff ff       	call   c00035a3 <dir_alloc>
c00050be:	89 c6                	mov    esi,eax
c00050c0:	85 c0                	test   eax,eax
c00050c2:	75 69                	jne    c000512d <f_setlabel+0x188>
c00050c4:	b9 20 00 00 00       	mov    ecx,0x20
c00050c9:	31 d2                	xor    edx,edx
c00050cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cf:	e8 8c cc ff ff       	call   c0001d60 <mem_set>
c00050d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050d8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050dd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00050e1:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	e8 5d cc ff ff       	call   c0001d4b <mem_cpy>
c00050ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050f2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050fa:	e8 86 db ff ff       	call   c0002c85 <sync_fs>
c00050ff:	89 c6                	mov    esi,eax
c0005101:	eb 2a                	jmp    c000512d <f_setlabel+0x188>
c0005103:	83 fb 09             	cmp    ebx,0x9
c0005106:	0f 87 e8 fe ff ff    	ja     c0004ff4 <f_setlabel+0x4f>
c000510c:	89 f0                	mov    eax,esi
c000510e:	66 c1 e8 08          	shr    ax,0x8
c0005112:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005116:	43                   	inc    ebx
c0005117:	89 f0                	mov    eax,esi
c0005119:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000511d:	43                   	inc    ebx
c000511e:	e9 b8 fe ff ff       	jmp    c0004fdb <f_setlabel+0x36>
c0005123:	83 fb 0a             	cmp    ebx,0xa
c0005126:	76 ef                	jbe    c0005117 <f_setlabel+0x172>
c0005128:	e9 c7 fe ff ff       	jmp    c0004ff4 <f_setlabel+0x4f>
c000512d:	89 f0                	mov    eax,esi
c000512f:	83 c4 54             	add    esp,0x54
c0005132:	5b                   	pop    ebx
c0005133:	5e                   	pop    esi
c0005134:	c3                   	ret    

c0005135 <f_expand>:
c0005135:	55                   	push   ebp
c0005136:	57                   	push   edi
c0005137:	56                   	push   esi
c0005138:	53                   	push   ebx
c0005139:	83 ec 2c             	sub    esp,0x2c
c000513c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005140:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005144:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005148:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000514c:	89 d8                	mov    eax,ebx
c000514e:	e8 48 d0 ff ff       	call   c000219b <validate>
c0005153:	89 c6                	mov    esi,eax
c0005155:	85 c0                	test   eax,eax
c0005157:	0f 85 2e 01 00 00    	jne    c000528b <f_expand+0x156>
c000515d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005161:	85 f6                	test   esi,esi
c0005163:	0f 85 22 01 00 00    	jne    c000528b <f_expand+0x156>
c0005169:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000516e:	75 0a                	jne    c000517a <f_expand+0x45>
c0005170:	be 07 00 00 00       	mov    esi,0x7
c0005175:	e9 11 01 00 00       	jmp    c000528b <f_expand+0x156>
c000517a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000517e:	75 f0                	jne    c0005170 <f_expand+0x3b>
c0005180:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005184:	74 ea                	je     c0005170 <f_expand+0x3b>
c0005186:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c000518a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000518e:	c1 e1 09             	shl    ecx,0x9
c0005191:	8d 41 ff             	lea    eax,[ecx-0x1]
c0005194:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005198:	0f 95 c0             	setne  al
c000519b:	31 d2                	xor    edx,edx
c000519d:	0f b6 c0             	movzx  eax,al
c00051a0:	89 c7                	mov    edi,eax
c00051a2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00051a6:	f7 f1                	div    ecx
c00051a8:	01 f8                	add    eax,edi
c00051aa:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051b1:	83 ff 01             	cmp    edi,0x1
c00051b4:	76 05                	jbe    c00051bb <f_expand+0x86>
c00051b6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051b9:	77 05                	ja     c00051c0 <f_expand+0x8b>
c00051bb:	bf 02 00 00 00       	mov    edi,0x2
c00051c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051c3:	89 fd                	mov    ebp,edi
c00051c5:	31 c9                	xor    ecx,ecx
c00051c7:	89 ea                	mov    edx,ebp
c00051c9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051cf:	45                   	inc    ebp
c00051d0:	e8 3c df ff ff       	call   c0003111 <get_fat.isra.2>
c00051d5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051dd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00051e0:	77 05                	ja     c00051e7 <f_expand+0xb2>
c00051e2:	bd 02 00 00 00       	mov    ebp,0x2
c00051e7:	83 f8 01             	cmp    eax,0x1
c00051ea:	74 20                	je     c000520c <f_expand+0xd7>
c00051ec:	83 f8 ff             	cmp    eax,0xffffffff
c00051ef:	74 22                	je     c0005213 <f_expand+0xde>
c00051f1:	85 c0                	test   eax,eax
c00051f3:	75 09                	jne    c00051fe <f_expand+0xc9>
c00051f5:	41                   	inc    ecx
c00051f6:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00051fa:	75 07                	jne    c0005203 <f_expand+0xce>
c00051fc:	eb 1c                	jmp    c000521a <f_expand+0xe5>
c00051fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005201:	31 c9                	xor    ecx,ecx
c0005203:	39 fd                	cmp    ebp,edi
c0005205:	75 c0                	jne    c00051c7 <f_expand+0x92>
c0005207:	e9 64 ff ff ff       	jmp    c0005170 <f_expand+0x3b>
c000520c:	be 02 00 00 00       	mov    esi,0x2
c0005211:	eb 78                	jmp    c000528b <f_expand+0x156>
c0005213:	be 01 00 00 00       	mov    esi,0x1
c0005218:	eb 71                	jmp    c000528b <f_expand+0x156>
c000521a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000521f:	74 2b                	je     c000524c <f_expand+0x117>
c0005221:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005224:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005228:	85 ed                	test   ebp,ebp
c000522a:	74 24                	je     c0005250 <f_expand+0x11b>
c000522c:	83 c9 ff             	or     ecx,0xffffffff
c000522f:	83 fd 01             	cmp    ebp,0x1
c0005232:	74 03                	je     c0005237 <f_expand+0x102>
c0005234:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005237:	89 fa                	mov    edx,edi
c0005239:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000523d:	e8 59 d4 ff ff       	call   c000269b <put_fat>
c0005242:	85 c0                	test   eax,eax
c0005244:	75 43                	jne    c0005289 <f_expand+0x154>
c0005246:	89 f8                	mov    eax,edi
c0005248:	4d                   	dec    ebp
c0005249:	47                   	inc    edi
c000524a:	eb dc                	jmp    c0005228 <f_expand+0xf3>
c000524c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000524f:	48                   	dec    eax
c0005250:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005254:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005259:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000525c:	74 2d                	je     c000528b <f_expand+0x156>
c000525e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005262:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005265:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005268:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000526c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000526f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005272:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005275:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005278:	39 c8                	cmp    eax,ecx
c000527a:	77 0f                	ja     c000528b <f_expand+0x156>
c000527c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005280:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c0005284:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005287:	eb 02                	jmp    c000528b <f_expand+0x156>
c0005289:	89 c6                	mov    esi,eax
c000528b:	83 c4 2c             	add    esp,0x2c
c000528e:	89 f0                	mov    eax,esi
c0005290:	5b                   	pop    ebx
c0005291:	5e                   	pop    esi
c0005292:	5f                   	pop    edi
c0005293:	5d                   	pop    ebp
c0005294:	c3                   	ret    

c0005295 <f_mkfs>:
c0005295:	55                   	push   ebp
c0005296:	57                   	push   edi
c0005297:	bf 0b 00 00 00       	mov    edi,0xb
c000529c:	56                   	push   esi
c000529d:	53                   	push   ebx
c000529e:	83 ec 4c             	sub    esp,0x4c
c00052a1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00052a5:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052a9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052ad:	e8 9c ce ff ff       	call   c000214e <get_ldnumber>
c00052b2:	85 c0                	test   eax,eax
c00052b4:	0f 88 a6 07 00 00    	js     c0005a60 <f_mkfs+0x7cb>
c00052ba:	8b 14 85 00 03 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdfd00]
c00052c1:	85 d2                	test   edx,edx
c00052c3:	74 03                	je     c00052c8 <f_mkfs+0x33>
c00052c5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052c8:	85 db                	test   ebx,ebx
c00052ca:	75 05                	jne    c00052d1 <f_mkfs+0x3c>
c00052cc:	bb 80 d0 01 c0       	mov    ebx,0xc001d080
c00052d1:	83 ec 0c             	sub    esp,0xc
c00052d4:	0f b6 c0             	movzx  eax,al
c00052d7:	bf 03 00 00 00       	mov    edi,0x3
c00052dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00052e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00052e4:	e8 e8 c9 ff ff       	call   c0001cd1 <disk_initialize>
c00052e9:	83 c4 10             	add    esp,0x10
c00052ec:	a8 01                	test   al,0x1
c00052ee:	0f 85 6c 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c00052f4:	bf 0a 00 00 00       	mov    edi,0xa
c00052f9:	a8 04                	test   al,0x4
c00052fb:	0f 85 5f 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c0005301:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005304:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005308:	85 c0                	test   eax,eax
c000530a:	75 20                	jne    c000532c <f_mkfs+0x97>
c000530c:	51                   	push   ecx
c000530d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005311:	50                   	push   eax
c0005312:	6a 03                	push   0x3
c0005314:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005318:	e8 e3 c9 ff ff       	call   c0001d00 <disk_ioctl>
c000531d:	83 c4 10             	add    esp,0x10
c0005320:	85 c0                	test   eax,eax
c0005322:	74 08                	je     c000532c <f_mkfs+0x97>
c0005324:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000532c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005330:	8d 42 ff             	lea    eax,[edx-0x1]
c0005333:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005338:	77 04                	ja     c000533e <f_mkfs+0xa9>
c000533a:	85 c2                	test   edx,eax
c000533c:	74 08                	je     c0005346 <f_mkfs+0xb1>
c000533e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005346:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005349:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000534d:	48                   	dec    eax
c000534e:	3c 01                	cmp    al,0x1
c0005350:	76 05                	jbe    c0005357 <f_mkfs+0xc2>
c0005352:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005357:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000535a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000535e:	48                   	dec    eax
c000535f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005364:	77 07                	ja     c000536d <f_mkfs+0xd8>
c0005366:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000536b:	74 08                	je     c0005375 <f_mkfs+0xe0>
c000536d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005375:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005378:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000537e:	77 07                	ja     c0005387 <f_mkfs+0xf2>
c0005380:	8d 47 ff             	lea    eax,[edi-0x1]
c0005383:	85 f8                	test   eax,edi
c0005385:	74 02                	je     c0005389 <f_mkfs+0xf4>
c0005387:	31 ff                	xor    edi,edi
c0005389:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c0005391:	77 0a                	ja     c000539d <f_mkfs+0x108>
c0005393:	bf 11 00 00 00       	mov    edi,0x11
c0005398:	e9 c3 06 00 00       	jmp    c0005a60 <f_mkfs+0x7cb>
c000539d:	8a 1b                	mov    bl,BYTE PTR [ebx]
c000539f:	89 ee                	mov    esi,ebp
c00053a1:	85 ed                	test   ebp,ebp
c00053a3:	75 1b                	jne    c00053c0 <f_mkfs+0x12b>
c00053a5:	83 ec 0c             	sub    esp,0xc
c00053a8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00053ac:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053b1:	50                   	push   eax
c00053b2:	e8 b5 06 00 00       	call   c0005a6c <ff_memalloc>
c00053b7:	83 c4 10             	add    esp,0x10
c00053ba:	89 c6                	mov    esi,eax
c00053bc:	85 c0                	test   eax,eax
c00053be:	74 d3                	je     c0005393 <f_mkfs+0xfe>
c00053c0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053c8:	52                   	push   edx
c00053c9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053cd:	50                   	push   eax
c00053ce:	6a 01                	push   0x1
c00053d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053d4:	e8 27 c9 ff ff       	call   c0001d00 <disk_ioctl>
c00053d9:	83 c4 10             	add    esp,0x10
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 25 06 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00053e4:	88 d8                	mov    al,bl
c00053e6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00053ee:	24 08                	and    al,0x8
c00053f0:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c00053f4:	75 18                	jne    c000540e <f_mkfs+0x179>
c00053f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00053fa:	83 f8 3f             	cmp    eax,0x3f
c00053fd:	76 0f                	jbe    c000540e <f_mkfs+0x179>
c00053ff:	83 e8 3f             	sub    eax,0x3f
c0005402:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c000540a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000540e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005412:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005416:	83 f8 7f             	cmp    eax,0x7f
c0005419:	0f 86 52 02 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000541f:	b9 80 00 00 00       	mov    ecx,0x80
c0005424:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000542a:	77 05                	ja     c0005431 <f_mkfs+0x19c>
c000542c:	89 f9                	mov    ecx,edi
c000542e:	c1 e9 09             	shr    ecx,0x9
c0005431:	88 d8                	mov    al,bl
c0005433:	83 e0 01             	and    eax,0x1
c0005436:	80 e3 02             	and    bl,0x2
c0005439:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000543d:	74 0a                	je     c0005449 <f_mkfs+0x1b4>
c000543f:	84 c0                	test   al,al
c0005441:	0f 84 4c 01 00 00    	je     c0005593 <f_mkfs+0x2fe>
c0005447:	eb 38                	jmp    c0005481 <f_mkfs+0x1ec>
c0005449:	bf 13 00 00 00       	mov    edi,0x13
c000544e:	84 c0                	test   al,al
c0005450:	75 2f                	jne    c0005481 <f_mkfs+0x1ec>
c0005452:	e9 c9 05 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c0005457:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000545c:	0f 85 08 02 00 00    	jne    c000566a <f_mkfs+0x3d5>
c0005462:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005467:	0f 86 e1 01 00 00    	jbe    c000564e <f_mkfs+0x3b9>
c000546d:	85 c9                	test   ecx,ecx
c000546f:	0f 85 bd 05 00 00    	jne    c0005a32 <f_mkfs+0x79d>
c0005475:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005478:	83 f9 40             	cmp    ecx,0x40
c000547b:	0f 87 c1 05 00 00    	ja     c0005a42 <f_mkfs+0x7ad>
c0005481:	89 cf                	mov    edi,ecx
c0005483:	85 c9                	test   ecx,ecx
c0005485:	75 1d                	jne    c00054a4 <f_mkfs+0x20f>
c0005487:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000548b:	ba 60 d0 01 c0       	mov    edx,0xc001d060
c0005490:	c1 eb 0c             	shr    ebx,0xc
c0005493:	bf 01 00 00 00       	mov    edi,0x1
c0005498:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000549b:	66 85 c0             	test   ax,ax
c000549e:	0f 85 5f 01 00 00    	jne    c0005603 <f_mkfs+0x36e>
c00054a4:	31 d2                	xor    edx,edx
c00054a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00054aa:	f7 f7                	div    edi
c00054ac:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054b1:	0f 86 5e 01 00 00    	jbe    c0005615 <f_mkfs+0x380>
c00054b7:	83 c0 02             	add    eax,0x2
c00054ba:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054bf:	01 c0                	add    eax,eax
c00054c1:	05 ff 01 00 00       	add    eax,0x1ff
c00054c6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054ce:	c1 e8 09             	shr    eax,0x9
c00054d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054d9:	c1 e0 05             	shl    eax,0x5
c00054dc:	c1 e8 09             	shr    eax,0x9
c00054df:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00054e3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00054e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00054ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00054f0:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c00054f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00054f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00054fc:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005501:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005505:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005509:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000550d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005511:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005515:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005519:	f7 d8                	neg    eax
c000551b:	21 c3                	and    ebx,eax
c000551d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005521:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005526:	0f 85 fc 00 00 00    	jne    c0005628 <f_mkfs+0x393>
c000552c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005530:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005534:	89 f8                	mov    eax,edi
c0005536:	c1 e0 04             	shl    eax,0x4
c0005539:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000553d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005541:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005545:	0f 82 26 01 00 00    	jb     c0005671 <f_mkfs+0x3dc>
c000554b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000554f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005553:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005557:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000555c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005560:	29 d0                	sub    eax,edx
c0005562:	31 d2                	xor    edx,edx
c0005564:	f7 f7                	div    edi
c0005566:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000556b:	89 c3                	mov    ebx,eax
c000556d:	0f 85 e4 fe ff ff    	jne    c0005457 <f_mkfs+0x1c2>
c0005573:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005578:	0f 87 02 01 00 00    	ja     c0005680 <f_mkfs+0x3eb>
c000557e:	85 c9                	test   ecx,ecx
c0005580:	0f 85 eb 00 00 00    	jne    c0005671 <f_mkfs+0x3dc>
c0005586:	83 ff 01             	cmp    edi,0x1
c0005589:	0f 86 e2 00 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000558f:	89 f9                	mov    ecx,edi
c0005591:	d1 e9                	shr    ecx,1
c0005593:	89 cb                	mov    ebx,ecx
c0005595:	85 c9                	test   ecx,ecx
c0005597:	75 26                	jne    c00055bf <f_mkfs+0x32a>
c0005599:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000559d:	ba 70 d0 01 c0       	mov    edx,0xc001d070
c00055a2:	c1 eb 11             	shr    ebx,0x11
c00055a5:	b9 01 00 00 00       	mov    ecx,0x1
c00055aa:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055ad:	66 85 c0             	test   ax,ax
c00055b0:	74 0b                	je     c00055bd <f_mkfs+0x328>
c00055b2:	83 c2 02             	add    edx,0x2
c00055b5:	39 d8                	cmp    eax,ebx
c00055b7:	77 04                	ja     c00055bd <f_mkfs+0x328>
c00055b9:	01 c9                	add    ecx,ecx
c00055bb:	eb ed                	jmp    c00055aa <f_mkfs+0x315>
c00055bd:	31 db                	xor    ebx,ebx
c00055bf:	31 d2                	xor    edx,edx
c00055c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055c5:	f7 f1                	div    ecx
c00055c7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055ce:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055d3:	c1 ea 09             	shr    edx,0x9
c00055d6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055db:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055df:	0f 87 8c 00 00 00    	ja     c0005671 <f_mkfs+0x3dc>
c00055e5:	89 cf                	mov    edi,ecx
c00055e7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00055ef:	89 d9                	mov    ecx,ebx
c00055f1:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c00055f9:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c00055fe:	e9 e0 fe ff ff       	jmp    c00054e3 <f_mkfs+0x24e>
c0005603:	83 c2 02             	add    edx,0x2
c0005606:	39 d8                	cmp    eax,ebx
c0005608:	0f 87 96 fe ff ff    	ja     c00054a4 <f_mkfs+0x20f>
c000560e:	01 ff                	add    edi,edi
c0005610:	e9 83 fe ff ff       	jmp    c0005498 <f_mkfs+0x203>
c0005615:	8d 04 40             	lea    eax,[eax+eax*2]
c0005618:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000561d:	40                   	inc    eax
c000561e:	d1 e8                	shr    eax,1
c0005620:	83 c0 03             	add    eax,0x3
c0005623:	e9 99 fe ff ff       	jmp    c00054c1 <f_mkfs+0x22c>
c0005628:	31 d2                	xor    edx,edx
c000562a:	89 d8                	mov    eax,ebx
c000562c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005630:	85 d2                	test   edx,edx
c0005632:	74 09                	je     c000563d <f_mkfs+0x3a8>
c0005634:	4b                   	dec    ebx
c0005635:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005639:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000563d:	89 d8                	mov    eax,ebx
c000563f:	31 d2                	xor    edx,edx
c0005641:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005645:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005649:	e9 e6 fe ff ff       	jmp    c0005534 <f_mkfs+0x29f>
c000564e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005653:	77 2b                	ja     c0005680 <f_mkfs+0x3eb>
c0005655:	85 c9                	test   ecx,ecx
c0005657:	75 18                	jne    c0005671 <f_mkfs+0x3dc>
c0005659:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000565c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005662:	0f 86 19 fe ff ff    	jbe    c0005481 <f_mkfs+0x1ec>
c0005668:	eb 07                	jmp    c0005671 <f_mkfs+0x3dc>
c000566a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000566f:	76 0a                	jbe    c000567b <f_mkfs+0x3e6>
c0005671:	bf 0e 00 00 00       	mov    edi,0xe
c0005676:	e9 a5 03 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c000567b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005680:	31 d2                	xor    edx,edx
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	89 f0                	mov    eax,esi
c0005689:	e8 d2 c6 ff ff       	call   c0001d60 <mem_set>
c000568e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005693:	ba 12 d0 01 c0       	mov    edx,0xc001d012
c0005698:	89 f0                	mov    eax,esi
c000569a:	e8 ac c6 ff ff       	call   c0001d4b <mem_cpy>
c000569f:	8d 46 0b             	lea    eax,[esi+0xb]
c00056a2:	ba 00 02 00 00       	mov    edx,0x200
c00056a7:	e8 98 c6 ff ff       	call   c0001d44 <st_word>
c00056ac:	89 f8                	mov    eax,edi
c00056ae:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056b3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056b6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056b9:	e8 86 c6 ff ff       	call   c0001d44 <st_word>
c00056be:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056c2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056c7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ca:	75 08                	jne    c00056d4 <f_mkfs+0x43f>
c00056cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056d8:	8d 46 11             	lea    eax,[esi+0x11]
c00056db:	e8 64 c6 ff ff       	call   c0001d44 <st_word>
c00056e0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e4:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00056ea:	77 0a                	ja     c00056f6 <f_mkfs+0x461>
c00056ec:	8d 46 13             	lea    eax,[esi+0x13]
c00056ef:	e8 50 c6 ff ff       	call   c0001d44 <st_word>
c00056f4:	eb 08                	jmp    c00056fe <f_mkfs+0x469>
c00056f6:	8d 46 20             	lea    eax,[esi+0x20]
c00056f9:	e8 4a c6 ff ff       	call   c0001d48 <st_dword>
c00056fe:	8d 46 18             	lea    eax,[esi+0x18]
c0005701:	ba 3f 00 00 00       	mov    edx,0x3f
c0005706:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c000570a:	e8 35 c6 ff ff       	call   c0001d44 <st_word>
c000570f:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005712:	ba ff 00 00 00       	mov    edx,0xff
c0005717:	e8 28 c6 ff ff       	call   c0001d44 <st_word>
c000571c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000571f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005723:	e8 20 c6 ff ff       	call   c0001d48 <st_dword>
c0005728:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000572d:	75 57                	jne    c0005786 <f_mkfs+0x4f1>
c000572f:	8d 46 43             	lea    eax,[esi+0x43]
c0005732:	ba 00 00 21 50       	mov    edx,0x50210000
c0005737:	e8 0c c6 ff ff       	call   c0001d48 <st_dword>
c000573c:	8d 46 24             	lea    eax,[esi+0x24]
c000573f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005743:	e8 00 c6 ff ff       	call   c0001d48 <st_dword>
c0005748:	8d 46 2c             	lea    eax,[esi+0x2c]
c000574b:	ba 02 00 00 00       	mov    edx,0x2
c0005750:	e8 f3 c5 ff ff       	call   c0001d48 <st_dword>
c0005755:	8d 46 30             	lea    eax,[esi+0x30]
c0005758:	ba 01 00 00 00       	mov    edx,0x1
c000575d:	e8 e2 c5 ff ff       	call   c0001d44 <st_word>
c0005762:	8d 46 32             	lea    eax,[esi+0x32]
c0005765:	ba 06 00 00 00       	mov    edx,0x6
c000576a:	e8 d5 c5 ff ff       	call   c0001d44 <st_word>
c000576f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005773:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005777:	8d 46 47             	lea    eax,[esi+0x47]
c000577a:	b9 13 00 00 00       	mov    ecx,0x13
c000577f:	ba 1e d0 01 c0       	mov    edx,0xc001d01e
c0005784:	eb 2f                	jmp    c00057b5 <f_mkfs+0x520>
c0005786:	8d 46 27             	lea    eax,[esi+0x27]
c0005789:	ba 00 00 21 50       	mov    edx,0x50210000
c000578e:	e8 b5 c5 ff ff       	call   c0001d48 <st_dword>
c0005793:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c0005798:	8d 46 16             	lea    eax,[esi+0x16]
c000579b:	e8 a4 c5 ff ff       	call   c0001d44 <st_word>
c00057a0:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00057a4:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00057a8:	8d 46 2b             	lea    eax,[esi+0x2b]
c00057ab:	b9 13 00 00 00       	mov    ecx,0x13
c00057b0:	ba 32 d0 01 c0       	mov    edx,0xc001d032
c00057b5:	e8 91 c5 ff ff       	call   c0001d4b <mem_cpy>
c00057ba:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057c0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057c9:	e8 76 c5 ff ff       	call   c0001d44 <st_word>
c00057ce:	6a 01                	push   0x1
c00057d0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057d4:	56                   	push   esi
c00057d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057d9:	e8 0c c5 ff ff       	call   c0001cea <disk_write>
c00057de:	83 c4 10             	add    esp,0x10
c00057e1:	85 c0                	test   eax,eax
c00057e3:	0f 85 20 02 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00057e9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057ee:	0f 85 98 00 00 00    	jne    c000588c <f_mkfs+0x5f7>
c00057f4:	6a 01                	push   0x1
c00057f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057fa:	83 c0 06             	add    eax,0x6
c00057fd:	50                   	push   eax
c00057fe:	56                   	push   esi
c00057ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005803:	e8 e2 c4 ff ff       	call   c0001cea <disk_write>
c0005808:	b9 00 02 00 00       	mov    ecx,0x200
c000580d:	31 d2                	xor    edx,edx
c000580f:	89 f0                	mov    eax,esi
c0005811:	e8 4a c5 ff ff       	call   c0001d60 <mem_set>
c0005816:	ba 52 52 61 41       	mov    edx,0x41615252
c000581b:	89 f0                	mov    eax,esi
c000581d:	e8 26 c5 ff ff       	call   c0001d48 <st_dword>
c0005822:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005828:	ba 72 72 41 61       	mov    edx,0x61417272
c000582d:	e8 16 c5 ff ff       	call   c0001d48 <st_dword>
c0005832:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005835:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000583b:	e8 08 c5 ff ff       	call   c0001d48 <st_dword>
c0005840:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005846:	ba 02 00 00 00       	mov    edx,0x2
c000584b:	e8 f8 c4 ff ff       	call   c0001d48 <st_dword>
c0005850:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005855:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000585b:	e8 e4 c4 ff ff       	call   c0001d44 <st_word>
c0005860:	6a 01                	push   0x1
c0005862:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005866:	83 c0 07             	add    eax,0x7
c0005869:	50                   	push   eax
c000586a:	56                   	push   esi
c000586b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000586f:	e8 76 c4 ff ff       	call   c0001cea <disk_write>
c0005874:	83 c4 20             	add    esp,0x20
c0005877:	6a 01                	push   0x1
c0005879:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000587d:	40                   	inc    eax
c000587e:	50                   	push   eax
c000587f:	56                   	push   esi
c0005880:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005884:	e8 61 c4 ff ff       	call   c0001cea <disk_write>
c0005889:	83 c4 10             	add    esp,0x10
c000588c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005890:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0005894:	c1 e8 09             	shr    eax,0x9
c0005897:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000589d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058a1:	31 d2                	xor    edx,edx
c00058a3:	31 db                	xor    ebx,ebx
c00058a5:	89 f0                	mov    eax,esi
c00058a7:	e8 b4 c4 ff ff       	call   c0001d60 <mem_set>
c00058ac:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058b1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058b9:	0f 94 c3             	sete   bl
c00058bc:	4b                   	dec    ebx
c00058bd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058c3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058c9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058ce:	75 21                	jne    c00058f1 <f_mkfs+0x65c>
c00058d0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058d5:	89 f0                	mov    eax,esi
c00058d7:	e8 6c c4 ff ff       	call   c0001d48 <st_dword>
c00058dc:	8d 46 04             	lea    eax,[esi+0x4]
c00058df:	83 ca ff             	or     edx,0xffffffff
c00058e2:	e8 61 c4 ff ff       	call   c0001d48 <st_dword>
c00058e7:	8d 46 08             	lea    eax,[esi+0x8]
c00058ea:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00058ef:	eb 04                	jmp    c00058f5 <f_mkfs+0x660>
c00058f1:	89 da                	mov    edx,ebx
c00058f3:	89 f0                	mov    eax,esi
c00058f5:	e8 4e c4 ff ff       	call   c0001d48 <st_dword>
c00058fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005902:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005906:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000590a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000590e:	76 08                	jbe    c0005918 <f_mkfs+0x683>
c0005910:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005914:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005918:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000591c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005920:	56                   	push   esi
c0005921:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005925:	e8 c0 c3 ff ff       	call   c0001cea <disk_write>
c000592a:	83 c4 10             	add    esp,0x10
c000592d:	85 c0                	test   eax,eax
c000592f:	0f 85 d4 00 00 00    	jne    c0005a09 <f_mkfs+0x774>
c0005935:	b9 00 02 00 00       	mov    ecx,0x200
c000593a:	31 d2                	xor    edx,edx
c000593c:	89 f0                	mov    eax,esi
c000593e:	e8 1d c4 ff ff       	call   c0001d60 <mem_set>
c0005943:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005947:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000594b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000594f:	75 b1                	jne    c0005902 <f_mkfs+0x66d>
c0005951:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005955:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000595d:	40                   	inc    eax
c000595e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005962:	0f 87 61 ff ff ff    	ja     c00058c9 <f_mkfs+0x634>
c0005968:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000596d:	74 04                	je     c0005973 <f_mkfs+0x6de>
c000596f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005973:	89 fb                	mov    ebx,edi
c0005975:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005979:	76 04                	jbe    c000597f <f_mkfs+0x6ea>
c000597b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000597f:	53                   	push   ebx
c0005980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005984:	56                   	push   esi
c0005985:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005989:	e8 5c c3 ff ff       	call   c0001cea <disk_write>
c000598e:	83 c4 10             	add    esp,0x10
c0005991:	85 c0                	test   eax,eax
c0005993:	75 74                	jne    c0005a09 <f_mkfs+0x774>
c0005995:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005999:	29 df                	sub    edi,ebx
c000599b:	75 d6                	jne    c0005973 <f_mkfs+0x6de>
c000599d:	b1 0c                	mov    cl,0xc
c000599f:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059a4:	74 18                	je     c00059be <f_mkfs+0x729>
c00059a6:	b1 06                	mov    cl,0x6
c00059a8:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059b0:	77 0c                	ja     c00059be <f_mkfs+0x729>
c00059b2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059b7:	0f 94 c1             	sete   cl
c00059ba:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059be:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059c3:	75 2d                	jne    c00059f2 <f_mkfs+0x75d>
c00059c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059c9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059d1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059d5:	0f b6 c9             	movzx  ecx,cl
c00059d8:	83 ec 0c             	sub    esp,0xc
c00059db:	56                   	push   esi
c00059dc:	8d 54 24 48          	lea    edx,[esp+0x48]
c00059e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059e4:	e8 4c d3 ff ff       	call   c0002d35 <create_partition>
c00059e9:	83 c4 10             	add    esp,0x10
c00059ec:	89 c7                	mov    edi,eax
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 2e                	jne    c0005a20 <f_mkfs+0x78b>
c00059f2:	31 ff                	xor    edi,edi
c00059f4:	50                   	push   eax
c00059f5:	6a 00                	push   0x0
c00059f7:	6a 00                	push   0x0
c00059f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059fd:	e8 fe c2 ff ff       	call   c0001d00 <disk_ioctl>
c0005a02:	83 c4 10             	add    esp,0x10
c0005a05:	85 c0                	test   eax,eax
c0005a07:	74 17                	je     c0005a20 <f_mkfs+0x78b>
c0005a09:	85 ed                	test   ebp,ebp
c0005a0b:	75 0c                	jne    c0005a19 <f_mkfs+0x784>
c0005a0d:	83 ec 0c             	sub    esp,0xc
c0005a10:	56                   	push   esi
c0005a11:	e8 6e 00 00 00       	call   c0005a84 <ff_memfree>
c0005a16:	83 c4 10             	add    esp,0x10
c0005a19:	bf 01 00 00 00       	mov    edi,0x1
c0005a1e:	eb 40                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a20:	85 ed                	test   ebp,ebp
c0005a22:	75 3c                	jne    c0005a60 <f_mkfs+0x7cb>
c0005a24:	83 ec 0c             	sub    esp,0xc
c0005a27:	56                   	push   esi
c0005a28:	e8 57 00 00 00       	call   c0005a84 <ff_memfree>
c0005a2d:	83 c4 10             	add    esp,0x10
c0005a30:	eb 2e                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a32:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a37:	0f 85 56 fb ff ff    	jne    c0005593 <f_mkfs+0x2fe>
c0005a3d:	e9 2f fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a42:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a47:	0f 85 4c fb ff ff    	jne    c0005599 <f_mkfs+0x304>
c0005a4d:	89 cf                	mov    edi,ecx
c0005a4f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a55:	0f 86 49 fa ff ff    	jbe    c00054a4 <f_mkfs+0x20f>
c0005a5b:	e9 11 fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a60:	83 c4 4c             	add    esp,0x4c
c0005a63:	89 f8                	mov    eax,edi
c0005a65:	5b                   	pop    ebx
c0005a66:	5e                   	pop    esi
c0005a67:	5f                   	pop    edi
c0005a68:	5d                   	pop    ebp
c0005a69:	c3                   	ret    
c0005a6a:	66 90                	xchg   ax,ax

c0005a6c <ff_memalloc>:
c0005a6c:	83 ec 0c             	sub    esp,0xc
c0005a6f:	83 ec 0c             	sub    esp,0xc
c0005a72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a76:	e8 3e 1d 00 00       	call   c00077b9 <malloc>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	83 c4 0c             	add    esp,0xc
c0005a81:	c3                   	ret    
c0005a82:	66 90                	xchg   ax,ax

c0005a84 <ff_memfree>:
c0005a84:	83 ec 0c             	sub    esp,0xc
c0005a87:	83 ec 0c             	sub    esp,0xc
c0005a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a8e:	e8 36 1d 00 00       	call   c00077c9 <free>
c0005a93:	83 c4 10             	add    esp,0x10
c0005a96:	90                   	nop
c0005a97:	83 c4 0c             	add    esp,0xc
c0005a9a:	c3                   	ret    
c0005a9b:	90                   	nop

c0005a9c <ff_uni2oem>:
c0005a9c:	83 ec 14             	sub    esp,0x14
c0005a9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005aa3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005aa7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005aae:	c7 44 24 0c 60 d4 01 c0 	mov    DWORD PTR [esp+0xc],0xc001d460
c0005ab6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005abb:	77 0b                	ja     c0005ac8 <ff_uni2oem+0x2c>
c0005abd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ac1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ac6:	eb 68                	jmp    c0005b30 <ff_uni2oem+0x94>
c0005ac8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005ad0:	77 5e                	ja     c0005b30 <ff_uni2oem+0x94>
c0005ad2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005ad8:	75 56                	jne    c0005b30 <ff_uni2oem+0x94>
c0005ada:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ae1:	eb 0d                	jmp    c0005af0 <ff_uni2oem+0x54>
c0005ae3:	90                   	nop
c0005ae4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ae9:	40                   	inc    eax
c0005aea:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005aef:	90                   	nop
c0005af0:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005af6:	77 24                	ja     c0005b1c <ff_uni2oem+0x80>
c0005af8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005afd:	25 ff ff 00 00       	and    eax,0xffff
c0005b02:	01 c0                	add    eax,eax
c0005b04:	89 c2                	mov    edx,eax
c0005b06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b0a:	01 d0                	add    eax,edx
c0005b0c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b0f:	25 ff ff 00 00       	and    eax,0xffff
c0005b14:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b18:	75 ca                	jne    c0005ae4 <ff_uni2oem+0x48>
c0005b1a:	66 90                	xchg   ax,ax
c0005b1c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b21:	83 e8 80             	sub    eax,0xffffff80
c0005b24:	25 ff 00 00 00       	and    eax,0xff
c0005b29:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b2e:	66 90                	xchg   ax,ax
c0005b30:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b35:	83 c4 14             	add    esp,0x14
c0005b38:	c3                   	ret    
c0005b39:	8d 76 00             	lea    esi,[esi+0x0]

c0005b3c <ff_oem2uni>:
c0005b3c:	83 ec 18             	sub    esp,0x18
c0005b3f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b47:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b4c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b50:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b57:	c7 44 24 10 60 d4 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d460
c0005b5f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b65:	77 0d                	ja     c0005b74 <ff_oem2uni+0x38>
c0005b67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b6b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b70:	eb 36                	jmp    c0005ba8 <ff_oem2uni+0x6c>
c0005b72:	66 90                	xchg   ax,ax
c0005b74:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b7a:	75 2c                	jne    c0005ba8 <ff_oem2uni+0x6c>
c0005b7c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005b83:	77 23                	ja     c0005ba8 <ff_oem2uni+0x6c>
c0005b85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b89:	25 ff ff 00 00       	and    eax,0xffff
c0005b8e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005b93:	01 c0                	add    eax,eax
c0005b95:	89 c2                	mov    edx,eax
c0005b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b9b:	01 d0                	add    eax,edx
c0005b9d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ba0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ba8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005bad:	83 c4 18             	add    esp,0x18
c0005bb0:	c3                   	ret    
c0005bb1:	8d 76 00             	lea    esi,[esi+0x0]

c0005bb4 <ff_wtoupper>:
c0005bb4:	83 ec 10             	sub    esp,0x10
c0005bb7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005bbf:	0f 87 77 01 00 00    	ja     c0005d3c <ff_wtoupper+0x188>
c0005bc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005bc9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bce:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bd5:	77 09                	ja     c0005be0 <ff_wtoupper+0x2c>
c0005bd7:	b8 60 d2 01 c0       	mov    eax,0xc001d260
c0005bdc:	eb 0a                	jmp    c0005be8 <ff_wtoupper+0x34>
c0005bde:	66 90                	xchg   ax,ax
c0005be0:	b8 a0 d1 01 c0       	mov    eax,0xc001d1a0
c0005be5:	8d 76 00             	lea    esi,[esi+0x0]
c0005be8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005bec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005bf0:	8d 50 02             	lea    edx,[eax+0x2]
c0005bf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005bf7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bfa:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005bff:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005c05:	0f 84 21 01 00 00    	je     c0005d2c <ff_wtoupper+0x178>
c0005c0b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c10:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c15:	0f 82 11 01 00 00    	jb     c0005d2c <ff_wtoupper+0x178>
c0005c1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c1f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c26:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c29:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c2e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c33:	66 c1 e8 08          	shr    ax,0x8
c0005c37:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c3c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c43:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c48:	31 d2                	xor    edx,edx
c0005c4a:	66 89 c2             	mov    dx,ax
c0005c4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c51:	31 c9                	xor    ecx,ecx
c0005c53:	66 89 c1             	mov    cx,ax
c0005c56:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c5b:	25 ff ff 00 00       	and    eax,0xffff
c0005c60:	01 c8                	add    eax,ecx
c0005c62:	39 c2                	cmp    edx,eax
c0005c64:	0f 8d 9a 00 00 00    	jge    c0005d04 <ff_wtoupper+0x150>
c0005c6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c6e:	25 ff ff 00 00       	and    eax,0xffff
c0005c73:	83 f8 08             	cmp    eax,0x8
c0005c76:	0f 87 ac 00 00 00    	ja     c0005d28 <ff_wtoupper+0x174>
c0005c7c:	8b 04 85 60 d1 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe2ea0]
c0005c83:	ff e0                	jmp    eax
c0005c85:	8d 76 00             	lea    esi,[esi+0x0]
c0005c88:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c8d:	31 d2                	xor    edx,edx
c0005c8f:	66 89 c2             	mov    dx,ax
c0005c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c96:	25 ff ff 00 00       	and    eax,0xffff
c0005c9b:	29 c2                	sub    edx,eax
c0005c9d:	89 d0                	mov    eax,edx
c0005c9f:	01 c0                	add    eax,eax
c0005ca1:	89 c2                	mov    edx,eax
c0005ca3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ca7:	01 d0                	add    eax,edx
c0005ca9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cac:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cb1:	eb 4d                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cb3:	90                   	nop
c0005cb4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cb9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cbd:	83 e0 01             	and    eax,0x1
c0005cc0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005cc5:	eb 39                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cc7:	90                   	nop
c0005cc8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cce:	eb 30                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cd6:	eb 28                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cde:	eb 20                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005ce6:	eb 18                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005cee:	eb 10                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005cf6:	eb 08                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005cff:	90                   	nop
c0005d00:	eb 26                	jmp    c0005d28 <ff_wtoupper+0x174>
c0005d02:	66 90                	xchg   ax,ax
c0005d04:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005d0a:	0f 85 dc fe ff ff    	jne    c0005bec <ff_wtoupper+0x38>
c0005d10:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d15:	25 ff ff 00 00       	and    eax,0xffff
c0005d1a:	01 c0                	add    eax,eax
c0005d1c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d20:	e9 c7 fe ff ff       	jmp    c0005bec <ff_wtoupper+0x38>
c0005d25:	8d 76 00             	lea    esi,[esi+0x0]
c0005d28:	90                   	nop
c0005d29:	8d 76 00             	lea    esi,[esi+0x0]
c0005d2c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d31:	25 ff ff 00 00       	and    eax,0xffff
c0005d36:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d3a:	66 90                	xchg   ax,ax
c0005d3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d40:	83 c4 10             	add    esp,0x10
c0005d43:	c3                   	ret    

c0005d44 <utf2ucs>:
c0005d44:	57                   	push   edi
c0005d45:	31 c9                	xor    ecx,ecx
c0005d47:	56                   	push   esi
c0005d48:	89 d7                	mov    edi,edx
c0005d4a:	53                   	push   ebx
c0005d4b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005d4f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005d53:	89 de                	mov    esi,ebx
c0005d55:	c1 fe 08             	sar    esi,0x8
c0005d58:	89 f2                	mov    edx,esi
c0005d5a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005d5d:	41                   	inc    ecx
c0005d5e:	85 db                	test   ebx,ebx
c0005d60:	75 e9                	jne    c0005d4b <utf2ucs+0x7>
c0005d62:	5b                   	pop    ebx
c0005d63:	5e                   	pop    esi
c0005d64:	5f                   	pop    edi
c0005d65:	c3                   	ret    

c0005d66 <ucs2utfn>:
c0005d66:	83 e1 fe             	and    ecx,0xfffffffe
c0005d69:	01 d1                	add    ecx,edx
c0005d6b:	39 d1                	cmp    ecx,edx
c0005d6d:	75 04                	jne    c0005d73 <ucs2utfn+0xd>
c0005d6f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005d72:	c3                   	ret    
c0005d73:	57                   	push   edi
c0005d74:	56                   	push   esi
c0005d75:	53                   	push   ebx
c0005d76:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005d79:	83 c2 02             	add    edx,0x2
c0005d7c:	89 de                	mov    esi,ebx
c0005d7e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005d82:	c1 e6 08             	shl    esi,0x8
c0005d85:	09 f3                	or     ebx,esi
c0005d87:	83 fb 3b             	cmp    ebx,0x3b
c0005d8a:	74 51                	je     c0005ddd <ucs2utfn+0x77>
c0005d8c:	83 fb 7f             	cmp    ebx,0x7f
c0005d8f:	7f 05                	jg     c0005d96 <ucs2utfn+0x30>
c0005d91:	88 18                	mov    BYTE PTR [eax],bl
c0005d93:	40                   	inc    eax
c0005d94:	eb 43                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005d96:	89 de                	mov    esi,ebx
c0005d98:	89 df                	mov    edi,ebx
c0005d9a:	c1 fe 06             	sar    esi,0x6
c0005d9d:	83 e7 3f             	and    edi,0x3f
c0005da0:	83 cf 80             	or     edi,0xffffff80
c0005da3:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005da9:	7f 12                	jg     c0005dbd <ucs2utfn+0x57>
c0005dab:	89 f3                	mov    ebx,esi
c0005dad:	83 c0 02             	add    eax,0x2
c0005db0:	83 cb c0             	or     ebx,0xffffffc0
c0005db3:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005db6:	89 fb                	mov    ebx,edi
c0005db8:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dbb:	eb 1c                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005dbd:	c1 fb 0c             	sar    ebx,0xc
c0005dc0:	83 e6 3f             	and    esi,0x3f
c0005dc3:	83 cb e0             	or     ebx,0xffffffe0
c0005dc6:	83 c0 03             	add    eax,0x3
c0005dc9:	88 58 fd             	mov    BYTE PTR [eax-0x3],bl
c0005dcc:	89 f3                	mov    ebx,esi
c0005dce:	83 cb 80             	or     ebx,0xffffff80
c0005dd1:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005dd4:	89 fb                	mov    ebx,edi
c0005dd6:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dd9:	39 d1                	cmp    ecx,edx
c0005ddb:	75 99                	jne    c0005d76 <ucs2utfn+0x10>
c0005ddd:	5b                   	pop    ebx
c0005dde:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005de1:	5e                   	pop    esi
c0005de2:	5f                   	pop    edi
c0005de3:	c3                   	ret    

c0005de4 <isjoliet>:
c0005de4:	31 d2                	xor    edx,edx
c0005de6:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005de9:	75 22                	jne    c0005e0d <isjoliet+0x29>
c0005deb:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005def:	75 1c                	jne    c0005e0d <isjoliet+0x29>
c0005df1:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005df4:	ba 02 00 00 00       	mov    edx,0x2
c0005df9:	3c 43                	cmp    al,0x43
c0005dfb:	74 10                	je     c0005e0d <isjoliet+0x29>
c0005dfd:	ba 03 00 00 00       	mov    edx,0x3
c0005e02:	3c 45                	cmp    al,0x45
c0005e04:	74 07                	je     c0005e0d <isjoliet+0x29>
c0005e06:	31 d2                	xor    edx,edx
c0005e08:	3c 40                	cmp    al,0x40
c0005e0a:	0f 94 c2             	sete   dl
c0005e0d:	89 d0                	mov    eax,edx
c0005e0f:	c3                   	ret    

c0005e10 <htohl_32>:
c0005e10:	8b 00                	mov    eax,DWORD PTR [eax]
c0005e12:	c3                   	ret    

c0005e13 <iso_733>:
c0005e13:	eb fb                	jmp    c0005e10 <htohl_32>

c0005e15 <bclear_cache>:
c0005e15:	31 c0                	xor    eax,eax
c0005e17:	8b 14 85 80 fe 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0180]
c0005e1e:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e24:	8b 14 85 e0 fe 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0120]
c0005e2b:	40                   	inc    eax
c0005e2c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e32:	83 f8 10             	cmp    eax,0x10
c0005e35:	75 e0                	jne    c0005e17 <bclear_cache+0x2>
c0005e37:	c3                   	ret    

c0005e38 <bgrad_cache>:
c0005e38:	83 fa 0e             	cmp    edx,0xe
c0005e3b:	77 16                	ja     c0005e53 <bgrad_cache+0x1b>
c0005e3d:	53                   	push   ebx
c0005e3e:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005e41:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005e45:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005e48:	42                   	inc    edx
c0005e49:	83 fa 0f             	cmp    edx,0xf
c0005e4c:	75 f3                	jne    c0005e41 <bgrad_cache+0x9>
c0005e4e:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005e51:	5b                   	pop    ebx
c0005e52:	c3                   	ret    
c0005e53:	c3                   	ret    

c0005e54 <bclear>:
c0005e54:	eb bf                	jmp    c0005e15 <bclear_cache>

c0005e56 <iso_break_all>:
c0005e56:	31 c0                	xor    eax,eax
c0005e58:	c7 80 30 04 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdfbd0],0x1
c0005e62:	05 94 00 00 00       	add    eax,0x94
c0005e67:	3d 40 09 00 00       	cmp    eax,0x940
c0005e6c:	75 ea                	jne    c0005e58 <iso_break_all+0x2>
c0005e6e:	c3                   	ret    

c0005e6f <ucscompare>:
c0005e6f:	55                   	push   ebp
c0005e70:	57                   	push   edi
c0005e71:	89 c7                	mov    edi,eax
c0005e73:	56                   	push   esi
c0005e74:	89 d6                	mov    esi,edx
c0005e76:	53                   	push   ebx
c0005e77:	31 d2                	xor    edx,edx
c0005e79:	83 ec 1c             	sub    esp,0x1c
c0005e7c:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005e80:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005e85:	c1 e3 08             	shl    ebx,0x8
c0005e88:	09 c3                	or     ebx,eax
c0005e8a:	39 ca                	cmp    edx,ecx
c0005e8c:	7d 42                	jge    c0005ed0 <ucscompare+0x61>
c0005e8e:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0005e92:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0005e97:	c1 e0 08             	shl    eax,0x8
c0005e9a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e9e:	09 e8                	or     eax,ebp
c0005ea0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005ea4:	83 f8 3b             	cmp    eax,0x3b
c0005ea7:	74 27                	je     c0005ed0 <ucscompare+0x61>
c0005ea9:	83 ec 0c             	sub    esp,0xc
c0005eac:	50                   	push   eax
c0005ead:	e8 1e aa ff ff       	call   c00008d0 <tolower>
c0005eb2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0005eb5:	89 c5                	mov    ebp,eax
c0005eb7:	e8 14 aa ff ff       	call   c00008d0 <tolower>
c0005ebc:	83 c4 10             	add    esp,0x10
c0005ebf:	39 c5                	cmp    ebp,eax
c0005ec1:	75 20                	jne    c0005ee3 <ucscompare+0x74>
c0005ec3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005ec7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005ecb:	83 c2 02             	add    edx,0x2
c0005ece:	eb ac                	jmp    c0005e7c <ucscompare+0xd>
c0005ed0:	85 db                	test   ebx,ebx
c0005ed2:	0f 95 c2             	setne  dl
c0005ed5:	31 c0                	xor    eax,eax
c0005ed7:	83 fb 2f             	cmp    ebx,0x2f
c0005eda:	0f 95 c0             	setne  al
c0005edd:	21 d0                	and    eax,edx
c0005edf:	f7 d8                	neg    eax
c0005ee1:	eb 03                	jmp    c0005ee6 <ucscompare+0x77>
c0005ee3:	83 c8 ff             	or     eax,0xffffffff
c0005ee6:	83 c4 1c             	add    esp,0x1c
c0005ee9:	5b                   	pop    ebx
c0005eea:	5e                   	pop    esi
c0005eeb:	5f                   	pop    edi
c0005eec:	5d                   	pop    ebp
c0005eed:	c3                   	ret    

c0005eee <fncompare>:
c0005eee:	55                   	push   ebp
c0005eef:	57                   	push   edi
c0005ef0:	89 c7                	mov    edi,eax
c0005ef2:	56                   	push   esi
c0005ef3:	89 ce                	mov    esi,ecx
c0005ef5:	53                   	push   ebx
c0005ef6:	31 db                	xor    ebx,ebx
c0005ef8:	83 ec 1c             	sub    esp,0x1c
c0005efb:	39 d3                	cmp    ebx,edx
c0005efd:	7d 43                	jge    c0005f42 <fncompare+0x54>
c0005eff:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0005f03:	3c 3b                	cmp    al,0x3b
c0005f05:	74 3b                	je     c0005f42 <fncompare+0x54>
c0005f07:	3c 2e                	cmp    al,0x2e
c0005f09:	75 0e                	jne    c0005f19 <fncompare+0x2b>
c0005f0b:	8d 4a ff             	lea    ecx,[edx-0x1]
c0005f0e:	39 d9                	cmp    ecx,ebx
c0005f10:	74 30                	je     c0005f42 <fncompare+0x54>
c0005f12:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0005f17:	74 29                	je     c0005f42 <fncompare+0x54>
c0005f19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f1d:	83 ec 0c             	sub    esp,0xc
c0005f20:	50                   	push   eax
c0005f21:	e8 aa a9 ff ff       	call   c00008d0 <tolower>
c0005f26:	89 c5                	mov    ebp,eax
c0005f28:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0005f2c:	89 04 24             	mov    DWORD PTR [esp],eax
c0005f2f:	e8 9c a9 ff ff       	call   c00008d0 <tolower>
c0005f34:	83 c4 10             	add    esp,0x10
c0005f37:	39 c5                	cmp    ebp,eax
c0005f39:	75 1d                	jne    c0005f58 <fncompare+0x6a>
c0005f3b:	43                   	inc    ebx
c0005f3c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005f40:	eb b9                	jmp    c0005efb <fncompare+0xd>
c0005f42:	8a 14 1e             	mov    dl,BYTE PTR [esi+ebx*1]
c0005f45:	84 d2                	test   dl,dl
c0005f47:	0f 95 c1             	setne  cl
c0005f4a:	31 c0                	xor    eax,eax
c0005f4c:	80 fa 2f             	cmp    dl,0x2f
c0005f4f:	0f 95 c0             	setne  al
c0005f52:	21 c8                	and    eax,ecx
c0005f54:	f7 d8                	neg    eax
c0005f56:	eb 03                	jmp    c0005f5b <fncompare+0x6d>
c0005f58:	83 c8 ff             	or     eax,0xffffffff
c0005f5b:	83 c4 1c             	add    esp,0x1c
c0005f5e:	5b                   	pop    ebx
c0005f5f:	5e                   	pop    esi
c0005f60:	5f                   	pop    edi
c0005f61:	5d                   	pop    ebp
c0005f62:	c3                   	ret    

c0005f63 <isoReadDiscSector>:
c0005f63:	83 ec 0c             	sub    esp,0xc
c0005f66:	0f be 05 c0 fe 01 c0 	movsx  eax,BYTE PTR ds:0xc001fec0
c0005f6d:	50                   	push   eax
c0005f6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f7a:	e8 d1 19 01 00       	call   c0017950 <isoReadDiscSectorHelper>
c0005f7f:	83 c4 1c             	add    esp,0x1c
c0005f82:	c3                   	ret    

c0005f83 <bread_cache>:
c0005f83:	55                   	push   ebp
c0005f84:	57                   	push   edi
c0005f85:	89 d7                	mov    edi,edx
c0005f87:	56                   	push   esi
c0005f88:	ba 0f 00 00 00       	mov    edx,0xf
c0005f8d:	53                   	push   ebx
c0005f8e:	89 c6                	mov    esi,eax
c0005f90:	83 ec 0c             	sub    esp,0xc
c0005f93:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0005f96:	39 38                	cmp    DWORD PTR [eax],edi
c0005f98:	74 3c                	je     c0005fd6 <bread_cache+0x53>
c0005f9a:	4a                   	dec    edx
c0005f9b:	83 fa ff             	cmp    edx,0xffffffff
c0005f9e:	75 f3                	jne    c0005f93 <bread_cache+0x10>
c0005fa0:	31 db                	xor    ebx,ebx
c0005fa2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0005fa5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0005fa8:	74 08                	je     c0005fb2 <bread_cache+0x2f>
c0005faa:	43                   	inc    ebx
c0005fab:	83 fb 10             	cmp    ebx,0x10
c0005fae:	75 f2                	jne    c0005fa2 <bread_cache+0x1f>
c0005fb0:	31 db                	xor    ebx,ebx
c0005fb2:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c0005fb5:	50                   	push   eax
c0005fb6:	6a 01                	push   0x1
c0005fb8:	57                   	push   edi
c0005fb9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fbc:	83 c0 04             	add    eax,0x4
c0005fbf:	50                   	push   eax
c0005fc0:	e8 9e ff ff ff       	call   c0005f63 <isoReadDiscSector>
c0005fc5:	83 c4 10             	add    esp,0x10
c0005fc8:	83 c9 ff             	or     ecx,0xffffffff
c0005fcb:	85 c0                	test   eax,eax
c0005fcd:	78 13                	js     c0005fe2 <bread_cache+0x5f>
c0005fcf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fd2:	89 da                	mov    edx,ebx
c0005fd4:	89 38                	mov    DWORD PTR [eax],edi
c0005fd6:	89 f0                	mov    eax,esi
c0005fd8:	e8 5b fe ff ff       	call   c0005e38 <bgrad_cache>
c0005fdd:	b9 0f 00 00 00       	mov    ecx,0xf
c0005fe2:	83 c4 0c             	add    esp,0xc
c0005fe5:	89 c8                	mov    eax,ecx
c0005fe7:	5b                   	pop    ebx
c0005fe8:	5e                   	pop    esi
c0005fe9:	5f                   	pop    edi
c0005fea:	5d                   	pop    ebp
c0005feb:	c3                   	ret    

c0005fec <biread>:
c0005fec:	89 c2                	mov    edx,eax
c0005fee:	b8 e0 fe 01 c0       	mov    eax,0xc001fee0
c0005ff3:	eb 8e                	jmp    c0005f83 <bread_cache>

c0005ff5 <bdread>:
c0005ff5:	89 c2                	mov    edx,eax
c0005ff7:	b8 80 fe 01 c0       	mov    eax,0xc001fe80
c0005ffc:	eb 85                	jmp    c0005f83 <bread_cache>

c0005ffe <strnicmp>:
c0005ffe:	55                   	push   ebp
c0005fff:	57                   	push   edi
c0006000:	56                   	push   esi
c0006001:	31 f6                	xor    esi,esi
c0006003:	53                   	push   ebx
c0006004:	83 ec 0c             	sub    esp,0xc
c0006007:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000600b:	3b 74 24 28          	cmp    esi,DWORD PTR [esp+0x28]
c000600f:	74 42                	je     c0006053 <strnicmp+0x55>
c0006011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006015:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
c0006019:	84 c0                	test   al,al
c000601b:	74 36                	je     c0006053 <strnicmp+0x55>
c000601d:	8a 14 33             	mov    dl,BYTE PTR [ebx+esi*1]
c0006020:	84 d2                	test   dl,dl
c0006022:	74 2f                	je     c0006053 <strnicmp+0x55>
c0006024:	38 d0                	cmp    al,dl
c0006026:	8d 6e 01             	lea    ebp,[esi+0x1]
c0006029:	75 04                	jne    c000602f <strnicmp+0x31>
c000602b:	89 ee                	mov    esi,ebp
c000602d:	eb dc                	jmp    c000600b <strnicmp+0xd>
c000602f:	83 ec 0c             	sub    esp,0xc
c0006032:	50                   	push   eax
c0006033:	e8 98 a8 ff ff       	call   c00008d0 <tolower>
c0006038:	89 c7                	mov    edi,eax
c000603a:	0f be 04 33          	movsx  eax,BYTE PTR [ebx+esi*1]
c000603e:	89 ee                	mov    esi,ebp
c0006040:	89 04 24             	mov    DWORD PTR [esp],eax
c0006043:	e8 88 a8 ff ff       	call   c00008d0 <tolower>
c0006048:	83 c4 10             	add    esp,0x10
c000604b:	29 c7                	sub    edi,eax
c000604d:	89 f8                	mov    eax,edi
c000604f:	74 ba                	je     c000600b <strnicmp+0xd>
c0006051:	eb 02                	jmp    c0006055 <strnicmp+0x57>
c0006053:	31 c0                	xor    eax,eax
c0006055:	83 c4 0c             	add    esp,0xc
c0006058:	5b                   	pop    ebx
c0006059:	5e                   	pop    esi
c000605a:	5f                   	pop    edi
c000605b:	5d                   	pop    ebp
c000605c:	c3                   	ret    

c000605d <find_object>:
c000605d:	55                   	push   ebp
c000605e:	89 c5                	mov    ebp,eax
c0006060:	57                   	push   edi
c0006061:	56                   	push   esi
c0006062:	53                   	push   ebx
c0006063:	89 d3                	mov    ebx,edx
c0006065:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000606b:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006072:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006076:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000607a:	83 3d 14 0d 02 c0 00 	cmp    DWORD PTR ds:0xc0020d14,0x0
c0006081:	74 0b                	je     c000608e <find_object+0x31>
c0006083:	89 ea                	mov    edx,ebp
c0006085:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006089:	e8 b6 fc ff ff       	call   c0005d44 <utf2ucs>
c000608e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006091:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006095:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000609a:	7e 11                	jle    c00060ad <find_object+0x50>
c000609c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060a0:	e8 47 ff ff ff       	call   c0005fec <biread>
c00060a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060a9:	85 c0                	test   eax,eax
c00060ab:	79 07                	jns    c00060b4 <find_object+0x57>
c00060ad:	31 db                	xor    ebx,ebx
c00060af:	e9 5b 01 00 00       	jmp    c000620f <find_object+0x1b2>
c00060b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00060bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060c0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00060c4:	8b 04 85 e0 fe 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0120]
c00060cb:	8d 5c 38 04          	lea    ebx,[eax+edi*1+0x4]
c00060cf:	8a 03                	mov    al,BYTE PTR [ebx]
c00060d1:	84 c0                	test   al,al
c00060d3:	75 0e                	jne    c00060e3 <find_object+0x86>
c00060d5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00060d9:	81 6c 24 10 00 08 00 00 	sub    DWORD PTR [esp+0x10],0x800
c00060e1:	eb b2                	jmp    c0006095 <find_object+0x38>
c00060e3:	8b 35 14 0d 02 c0    	mov    esi,DWORD PTR ds:0xc0020d14
c00060e9:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00060ed:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00060f1:	89 ca                	mov    edx,ecx
c00060f3:	85 f6                	test   esi,esi
c00060f5:	74 2b                	je     c0006122 <find_object+0xc5>
c00060f7:	8d 43 21             	lea    eax,[ebx+0x21]
c00060fa:	8d 54 24 20          	lea    edx,[esp+0x20]
c00060fe:	e8 6c fd ff ff       	call   c0005e6f <ucscompare>
c0006103:	85 c0                	test   eax,eax
c0006105:	0f 84 c1 00 00 00    	je     c00061cc <find_object+0x16f>
c000610b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000610e:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006112:	81 7c 24 0c ff 07 00 00 	cmp    DWORD PTR [esp+0xc],0x7ff
c000611a:	0f 8e dc 00 00 00    	jle    c00061fc <find_object+0x19f>
c0006120:	eb b3                	jmp    c00060d5 <find_object+0x78>
c0006122:	0f b6 f0             	movzx  esi,al
c0006125:	8d 7c 0b 21          	lea    edi,[ebx+ecx*1+0x21]
c0006129:	29 ce                	sub    esi,ecx
c000612b:	80 e2 01             	and    dl,0x1
c000612e:	74 05                	je     c0006135 <find_object+0xd8>
c0006130:	83 ee 21             	sub    esi,0x21
c0006133:	eb 55                	jmp    c000618a <find_object+0x12d>
c0006135:	47                   	inc    edi
c0006136:	83 ee 22             	sub    esi,0x22
c0006139:	eb 4f                	jmp    c000618a <find_object+0x12d>
c000613b:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c000613e:	48                   	dec    eax
c000613f:	3c 01                	cmp    al,0x1
c0006141:	77 4c                	ja     c000618f <find_object+0x132>
c0006143:	50                   	push   eax
c0006144:	6a 02                	push   0x2
c0006146:	68 60 d5 01 c0       	push   0xc001d560
c000614b:	57                   	push   edi
c000614c:	e8 0f a6 ff ff       	call   c0000760 <strncmp>
c0006151:	83 c4 10             	add    esp,0x10
c0006154:	85 c0                	test   eax,eax
c0006156:	75 2a                	jne    c0006182 <find_object+0x125>
c0006158:	0f be 57 02          	movsx  edx,BYTE PTR [edi+0x2]
c000615c:	8d 42 fb             	lea    eax,[edx-0x5]
c000615f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006163:	50                   	push   eax
c0006164:	8d 47 05             	lea    eax,[edi+0x5]
c0006167:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000616b:	50                   	push   eax
c000616c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006170:	50                   	push   eax
c0006171:	e8 ba a4 ff ff       	call   c0000630 <strncpy>
c0006176:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000617a:	c6 44 04 30 00       	mov    BYTE PTR [esp+eax*1+0x30],0x0
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006186:	29 c6                	sub    esi,eax
c0006188:	01 c7                	add    edi,eax
c000618a:	83 fe 03             	cmp    esi,0x3
c000618d:	7f ac                	jg     c000613b <find_object+0xde>
c000618f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0006194:	7e 40                	jle    c00061d6 <find_object+0x179>
c0006196:	51                   	push   ecx
c0006197:	51                   	push   ecx
c0006198:	6a 2f                	push   0x2f
c000619a:	55                   	push   ebp
c000619b:	e8 90 a5 ff ff       	call   c0000730 <strchr>
c00061a0:	83 c4 10             	add    esp,0x10
c00061a3:	85 c0                	test   eax,eax
c00061a5:	74 04                	je     c00061ab <find_object+0x14e>
c00061a7:	29 e8                	sub    eax,ebp
c00061a9:	eb 0c                	jmp    c00061b7 <find_object+0x15a>
c00061ab:	83 ec 0c             	sub    esp,0xc
c00061ae:	55                   	push   ebp
c00061af:	e8 8c a3 ff ff       	call   c0000540 <strlen>
c00061b4:	83 c4 10             	add    esp,0x10
c00061b7:	52                   	push   edx
c00061b8:	50                   	push   eax
c00061b9:	55                   	push   ebp
c00061ba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00061be:	50                   	push   eax
c00061bf:	e8 3a fe ff ff       	call   c0005ffe <strnicmp>
c00061c4:	83 c4 10             	add    esp,0x10
c00061c7:	e9 37 ff ff ff       	jmp    c0006103 <find_object+0xa6>
c00061cc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061d0:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c00061d4:	eb 1e                	jmp    c00061f4 <find_object+0x197>
c00061d6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00061da:	8d 43 21             	lea    eax,[ebx+0x21]
c00061dd:	89 e9                	mov    ecx,ebp
c00061df:	e8 0a fd ff ff       	call   c0005eee <fncompare>
c00061e4:	85 c0                	test   eax,eax
c00061e6:	0f 85 1f ff ff ff    	jne    c000610b <find_object+0xae>
c00061ec:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061f0:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00061f4:	0f 85 11 ff ff ff    	jne    c000610b <find_object+0xae>
c00061fa:	eb 13                	jmp    c000620f <find_object+0x1b2>
c00061fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006200:	39 4c 24 10          	cmp    DWORD PTR [esp+0x10],ecx
c0006204:	0f 8f b2 fe ff ff    	jg     c00060bc <find_object+0x5f>
c000620a:	e9 c6 fe ff ff       	jmp    c00060d5 <find_object+0x78>
c000620f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006215:	89 d8                	mov    eax,ebx
c0006217:	5b                   	pop    ebx
c0006218:	5e                   	pop    esi
c0006219:	5f                   	pop    edi
c000621a:	5d                   	pop    ebp
c000621b:	c3                   	ret    

c000621c <find_object_path>:
c000621c:	55                   	push   ebp
c000621d:	57                   	push   edi
c000621e:	89 d7                	mov    edi,edx
c0006220:	56                   	push   esi
c0006221:	89 c6                	mov    esi,eax
c0006223:	53                   	push   ebx
c0006224:	89 cb                	mov    ebx,ecx
c0006226:	83 ec 0c             	sub    esp,0xc
c0006229:	50                   	push   eax
c000622a:	50                   	push   eax
c000622b:	6a 2f                	push   0x2f
c000622d:	56                   	push   esi
c000622e:	e8 fd a4 ff ff       	call   c0000730 <strchr>
c0006233:	83 c4 10             	add    esp,0x10
c0006236:	89 c5                	mov    ebp,eax
c0006238:	85 c0                	test   eax,eax
c000623a:	74 3a                	je     c0006276 <find_object_path+0x5a>
c000623c:	39 ee                	cmp    esi,ebp
c000623e:	74 31                	je     c0006271 <find_object_path+0x55>
c0006240:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006243:	e8 cb fb ff ff       	call   c0005e13 <iso_733>
c0006248:	89 c2                	mov    edx,eax
c000624a:	8d 43 02             	lea    eax,[ebx+0x2]
c000624d:	e8 c1 fb ff ff       	call   c0005e13 <iso_733>
c0006252:	83 ec 0c             	sub    esp,0xc
c0006255:	89 c1                	mov    ecx,eax
c0006257:	52                   	push   edx
c0006258:	89 f0                	mov    eax,esi
c000625a:	ba 01 00 00 00       	mov    edx,0x1
c000625f:	e8 f9 fd ff ff       	call   c000605d <find_object>
c0006264:	83 c4 10             	add    esp,0x10
c0006267:	89 c3                	mov    ebx,eax
c0006269:	85 c0                	test   eax,eax
c000626b:	75 04                	jne    c0006271 <find_object_path+0x55>
c000626d:	31 db                	xor    ebx,ebx
c000626f:	eb 36                	jmp    c00062a7 <find_object_path+0x8b>
c0006271:	8d 75 01             	lea    esi,[ebp+0x1]
c0006274:	eb b3                	jmp    c0006229 <find_object_path+0xd>
c0006276:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006279:	74 28                	je     c00062a3 <find_object_path+0x87>
c000627b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000627e:	e8 90 fb ff ff       	call   c0005e13 <iso_733>
c0006283:	89 c2                	mov    edx,eax
c0006285:	8d 43 02             	lea    eax,[ebx+0x2]
c0006288:	e8 86 fb ff ff       	call   c0005e13 <iso_733>
c000628d:	83 ec 0c             	sub    esp,0xc
c0006290:	89 c1                	mov    ecx,eax
c0006292:	52                   	push   edx
c0006293:	89 f0                	mov    eax,esi
c0006295:	89 fa                	mov    edx,edi
c0006297:	e8 c1 fd ff ff       	call   c000605d <find_object>
c000629c:	83 c4 10             	add    esp,0x10
c000629f:	89 c3                	mov    ebx,eax
c00062a1:	eb 04                	jmp    c00062a7 <find_object_path+0x8b>
c00062a3:	85 ff                	test   edi,edi
c00062a5:	74 c6                	je     c000626d <find_object_path+0x51>
c00062a7:	83 c4 0c             	add    esp,0xc
c00062aa:	89 d8                	mov    eax,ebx
c00062ac:	5b                   	pop    ebx
c00062ad:	5e                   	pop    esi
c00062ae:	5f                   	pop    edi
c00062af:	5d                   	pop    ebp
c00062b0:	c3                   	ret    

c00062b1 <stricmp>:
c00062b1:	57                   	push   edi
c00062b2:	56                   	push   esi
c00062b3:	31 f6                	xor    esi,esi
c00062b5:	53                   	push   ebx
c00062b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062ba:	83 ec 0c             	sub    esp,0xc
c00062bd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00062c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062c5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00062c9:	50                   	push   eax
c00062ca:	e8 e1 a5 ff ff       	call   c00008b0 <toupper>
c00062cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00062d2:	e8 f9 a5 ff ff       	call   c00008d0 <tolower>
c00062d7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00062da:	89 c3                	mov    ebx,eax
c00062dc:	e8 cf a5 ff ff       	call   c00008b0 <toupper>
c00062e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00062e4:	e8 e7 a5 ff ff       	call   c00008d0 <tolower>
c00062e9:	83 c4 10             	add    esp,0x10
c00062ec:	39 c3                	cmp    ebx,eax
c00062ee:	75 05                	jne    c00062f5 <stricmp+0x44>
c00062f0:	46                   	inc    esi
c00062f1:	85 db                	test   ebx,ebx
c00062f3:	75 c1                	jne    c00062b6 <stricmp+0x5>
c00062f5:	29 c3                	sub    ebx,eax
c00062f7:	89 d8                	mov    eax,ebx
c00062f9:	5b                   	pop    ebx
c00062fa:	5e                   	pop    esi
c00062fb:	5f                   	pop    edi
c00062fc:	c3                   	ret    

c00062fd <iso_open>:
c00062fd:	57                   	push   edi
c00062fe:	31 c0                	xor    eax,eax
c0006300:	56                   	push   esi
c0006301:	b9 e0 0c 02 c0       	mov    ecx,0xc0020ce0
c0006306:	53                   	push   ebx
c0006307:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000630c:	0f 95 c0             	setne  al
c000630f:	89 c2                	mov    edx,eax
c0006311:	89 c6                	mov    esi,eax
c0006313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006317:	e8 00 ff ff ff       	call   c000621c <find_object_path>
c000631c:	83 ca ff             	or     edx,0xffffffff
c000631f:	85 c0                	test   eax,eax
c0006321:	74 5e                	je     c0006381 <iso_open+0x84>
c0006323:	89 c1                	mov    ecx,eax
c0006325:	31 d2                	xor    edx,edx
c0006327:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000632d:	83 bf a0 03 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdfc60],0x0
c0006334:	75 42                	jne    c0006378 <iso_open+0x7b>
c0006336:	8d 41 02             	lea    eax,[ecx+0x2]
c0006339:	c7 87 a0 03 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdfc60],0xffffffff
c0006343:	e8 cb fa ff ff       	call   c0005e13 <iso_733>
c0006348:	89 b7 a4 03 02 c0    	mov    DWORD PTR [edi-0x3ffdfc5c],esi
c000634e:	89 87 a0 03 02 c0    	mov    DWORD PTR [edi-0x3ffdfc60],eax
c0006354:	c7 87 a8 03 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdfc58],0x0
c000635e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006361:	e8 ad fa ff ff       	call   c0005e13 <iso_733>
c0006366:	c7 87 30 04 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdfbd0],0x0
c0006370:	89 87 ac 03 02 c0    	mov    DWORD PTR [edi-0x3ffdfc54],eax
c0006376:	eb 09                	jmp    c0006381 <iso_open+0x84>
c0006378:	42                   	inc    edx
c0006379:	83 fa 10             	cmp    edx,0x10
c000637c:	75 a9                	jne    c0006327 <iso_open+0x2a>
c000637e:	83 ca ff             	or     edx,0xffffffff
c0006381:	5b                   	pop    ebx
c0006382:	89 d0                	mov    eax,edx
c0006384:	5e                   	pop    esi
c0006385:	5f                   	pop    edi
c0006386:	c3                   	ret    

c0006387 <iso_close>:
c0006387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000638b:	83 f8 0f             	cmp    eax,0xf
c000638e:	7f 10                	jg     c00063a0 <iso_close+0x19>
c0006390:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c0006396:	c7 80 a0 03 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfc60],0x0
c00063a0:	e9 70 fa ff ff       	jmp    c0005e15 <bclear_cache>

c00063a5 <iso_read>:
c00063a5:	55                   	push   ebp
c00063a6:	57                   	push   edi
c00063a7:	56                   	push   esi
c00063a8:	53                   	push   ebx
c00063a9:	83 ec 1c             	sub    esp,0x1c
c00063ac:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00063b0:	83 fd 0f             	cmp    ebp,0xf
c00063b3:	7e 0a                	jle    c00063bf <iso_read+0x1a>
c00063b5:	83 c8 ff             	or     eax,0xffffffff
c00063b8:	89 c2                	mov    edx,eax
c00063ba:	e9 f4 00 00 00       	jmp    c00064b3 <iso_read+0x10e>
c00063bf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00063c5:	83 bd a0 03 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdfc60],0x0
c00063cc:	74 e7                	je     c00063b5 <iso_read+0x10>
c00063ce:	8b 95 30 04 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdfbd0]
c00063d4:	85 d2                	test   edx,edx
c00063d6:	75 dd                	jne    c00063b5 <iso_read+0x10>
c00063d8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00063dd:	0f 84 cd 00 00 00    	je     c00064b0 <iso_read+0x10b>
c00063e3:	8b 85 a8 03 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdfc58]
c00063e9:	8b 8d ac 03 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffdfc54]
c00063ef:	29 c1                	sub    ecx,eax
c00063f1:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00063f5:	76 04                	jbe    c00063fb <iso_read+0x56>
c00063f7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00063fb:	85 c9                	test   ecx,ecx
c00063fd:	0f 84 ad 00 00 00    	je     c00064b0 <iso_read+0x10b>
c0006403:	89 c6                	mov    esi,eax
c0006405:	bb 00 08 00 00       	mov    ebx,0x800
c000640a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006410:	c1 e8 0b             	shr    eax,0xb
c0006413:	29 f3                	sub    ebx,esi
c0006415:	03 85 a0 03 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdfc60]
c000641b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006421:	7e 3f                	jle    c0006462 <iso_read+0xbd>
c0006423:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006429:	75 37                	jne    c0006462 <iso_read+0xbd>
c000642b:	be 20 00 00 00       	mov    esi,0x20
c0006430:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006436:	7f 05                	jg     c000643d <iso_read+0x98>
c0006438:	89 ce                	mov    esi,ecx
c000643a:	c1 fe 0b             	sar    esi,0xb
c000643d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006441:	89 f3                	mov    ebx,esi
c0006443:	c1 e3 0b             	shl    ebx,0xb
c0006446:	52                   	push   edx
c0006447:	56                   	push   esi
c0006448:	50                   	push   eax
c0006449:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000644d:	e8 11 fb ff ff       	call   c0005f63 <isoReadDiscSector>
c0006452:	83 c4 10             	add    esp,0x10
c0006455:	85 c0                	test   eax,eax
c0006457:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000645b:	7f 3e                	jg     c000649b <iso_read+0xf6>
c000645d:	e9 53 ff ff ff       	jmp    c00063b5 <iso_read+0x10>
c0006462:	39 cb                	cmp    ebx,ecx
c0006464:	7e 02                	jle    c0006468 <iso_read+0xc3>
c0006466:	89 cb                	mov    ebx,ecx
c0006468:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000646c:	e8 84 fb ff ff       	call   c0005ff5 <bdread>
c0006471:	85 c0                	test   eax,eax
c0006473:	0f 88 3c ff ff ff    	js     c00063b5 <iso_read+0x10>
c0006479:	8b 0c 85 80 fe 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe0180]
c0006480:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006484:	8b 85 a8 03 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdfc58]
c000648a:	25 ff 07 00 00       	and    eax,0x7ff
c000648f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c0006493:	89 d9                	mov    ecx,ebx
c0006495:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006497:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000649b:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c000649f:	01 9d a8 03 02 c0    	add    DWORD PTR [ebp-0x3ffdfc58],ebx
c00064a5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00064a9:	01 da                	add    edx,ebx
c00064ab:	e9 28 ff ff ff       	jmp    c00063d8 <iso_read+0x33>
c00064b0:	89 d0                	mov    eax,edx
c00064b2:	99                   	cdq    
c00064b3:	83 c4 1c             	add    esp,0x1c
c00064b6:	5b                   	pop    ebx
c00064b7:	5e                   	pop    esi
c00064b8:	5f                   	pop    edi
c00064b9:	5d                   	pop    ebp
c00064ba:	c3                   	ret    

c00064bb <iso_seek>:
c00064bb:	55                   	push   ebp
c00064bc:	83 c8 ff             	or     eax,0xffffffff
c00064bf:	57                   	push   edi
c00064c0:	89 c2                	mov    edx,eax
c00064c2:	56                   	push   esi
c00064c3:	53                   	push   ebx
c00064c4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00064c8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00064cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00064d0:	83 fe 0f             	cmp    esi,0xf
c00064d3:	7f 65                	jg     c000653a <iso_seek+0x7f>
c00064d5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00064db:	8d 8d a0 03 02 c0    	lea    ecx,[ebp-0x3ffdfc60]
c00064e1:	83 bd a0 03 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdfc60],0x0
c00064e8:	74 50                	je     c000653a <iso_seek+0x7f>
c00064ea:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00064f1:	75 47                	jne    c000653a <iso_seek+0x7f>
c00064f3:	83 fb 01             	cmp    ebx,0x1
c00064f6:	74 0e                	je     c0006506 <iso_seek+0x4b>
c00064f8:	83 fb 02             	cmp    ebx,0x2
c00064fb:	74 0e                	je     c000650b <iso_seek+0x50>
c00064fd:	85 db                	test   ebx,ebx
c00064ff:	75 39                	jne    c000653a <iso_seek+0x7f>
c0006501:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006504:	eb 0d                	jmp    c0006513 <iso_seek+0x58>
c0006506:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006509:	eb 08                	jmp    c0006513 <iso_seek+0x58>
c000650b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000650e:	01 f8                	add    eax,edi
c0006510:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006513:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006519:	8b 88 ac 03 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdfc54]
c000651f:	05 a0 03 02 c0       	add    eax,0xc00203a0
c0006524:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006527:	76 03                	jbe    c000652c <iso_seek+0x71>
c0006529:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000652c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006532:	8b 82 a8 03 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdfc58]
c0006538:	31 d2                	xor    edx,edx
c000653a:	5b                   	pop    ebx
c000653b:	5e                   	pop    esi
c000653c:	5f                   	pop    edi
c000653d:	5d                   	pop    ebp
c000653e:	c3                   	ret    

c000653f <iso_tell>:
c000653f:	83 c8 ff             	or     eax,0xffffffff
c0006542:	53                   	push   ebx
c0006543:	89 c2                	mov    edx,eax
c0006545:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006549:	83 f9 0f             	cmp    ecx,0xf
c000654c:	7f 20                	jg     c000656e <iso_tell+0x2f>
c000654e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006554:	83 bb a0 03 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdfc60],0x0
c000655b:	74 11                	je     c000656e <iso_tell+0x2f>
c000655d:	83 bb 30 04 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdfbd0],0x0
c0006564:	75 08                	jne    c000656e <iso_tell+0x2f>
c0006566:	8b 83 a8 03 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdfc58]
c000656c:	31 d2                	xor    edx,edx
c000656e:	5b                   	pop    ebx
c000656f:	c3                   	ret    

c0006570 <iso_total>:
c0006570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006574:	83 c8 ff             	or     eax,0xffffffff
c0006577:	83 fa 0f             	cmp    edx,0xf
c000657a:	7f 1e                	jg     c000659a <iso_total+0x2a>
c000657c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006582:	83 ba a0 03 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdfc60],0x0
c0006589:	74 0f                	je     c000659a <iso_total+0x2a>
c000658b:	83 ba 30 04 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdfbd0],0x0
c0006592:	75 06                	jne    c000659a <iso_total+0x2a>
c0006594:	8b 82 ac 03 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdfc54]
c000659a:	c3                   	ret    

c000659b <fn_postprocess>:
c000659b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000659f:	89 d0                	mov    eax,edx
c00065a1:	8a 08                	mov    cl,BYTE PTR [eax]
c00065a3:	80 f9 3b             	cmp    cl,0x3b
c00065a6:	74 07                	je     c00065af <fn_postprocess+0x14>
c00065a8:	84 c9                	test   cl,cl
c00065aa:	74 03                	je     c00065af <fn_postprocess+0x14>
c00065ac:	40                   	inc    eax
c00065ad:	eb f2                	jmp    c00065a1 <fn_postprocess+0x6>
c00065af:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00065b2:	39 d0                	cmp    eax,edx
c00065b4:	76 0a                	jbe    c00065c0 <fn_postprocess+0x25>
c00065b6:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00065ba:	75 04                	jne    c00065c0 <fn_postprocess+0x25>
c00065bc:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00065c0:	c3                   	ret    

c00065c1 <iso_readdir>:
c00065c1:	55                   	push   ebp
c00065c2:	57                   	push   edi
c00065c3:	56                   	push   esi
c00065c4:	53                   	push   ebx
c00065c5:	83 ec 1c             	sub    esp,0x1c
c00065c8:	83 7c 24 30 0f       	cmp    DWORD PTR [esp+0x30],0xf
c00065cd:	7e 07                	jle    c00065d6 <iso_readdir+0x15>
c00065cf:	31 c0                	xor    eax,eax
c00065d1:	e9 d4 01 00 00       	jmp    c00067aa <iso_readdir+0x1e9>
c00065d6:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00065de:	8d b0 a0 03 02 c0    	lea    esi,[eax-0x3ffdfc60]
c00065e4:	83 b8 a0 03 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdfc60],0x0
c00065eb:	74 e2                	je     c00065cf <iso_readdir+0xe>
c00065ed:	83 7e 04 00          	cmp    DWORD PTR [esi+0x4],0x0
c00065f1:	74 dc                	je     c00065cf <iso_readdir+0xe>
c00065f3:	83 be 90 00 00 00 00 	cmp    DWORD PTR [esi+0x90],0x0
c00065fa:	75 d3                	jne    c00065cf <iso_readdir+0xe>
c00065fc:	31 db                	xor    ebx,ebx
c00065fe:	83 c8 ff             	or     eax,0xffffffff
c0006601:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0006604:	3b 56 0c             	cmp    edx,DWORD PTR [esi+0xc]
c0006607:	73 3c                	jae    c0006645 <iso_readdir+0x84>
c0006609:	c1 ea 0b             	shr    edx,0xb
c000660c:	8b 06                	mov    eax,DWORD PTR [esi]
c000660e:	01 d0                	add    eax,edx
c0006610:	e8 d7 f9 ff ff       	call   c0005fec <biread>
c0006615:	85 c0                	test   eax,eax
c0006617:	78 b6                	js     c00065cf <iso_readdir+0xe>
c0006619:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000661c:	8b 1c 85 e0 fe 01 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffe0120]
c0006623:	89 d1                	mov    ecx,edx
c0006625:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c000662b:	8d 5c 0b 04          	lea    ebx,[ebx+ecx*1+0x4]
c000662f:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c0006632:	75 11                	jne    c0006645 <iso_readdir+0x84>
c0006634:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c000663a:	81 c2 00 08 00 00    	add    edx,0x800
c0006640:	89 56 08             	mov    DWORD PTR [esi+0x8],edx
c0006643:	eb bc                	jmp    c0006601 <iso_readdir+0x40>
c0006645:	69 54 24 30 94 00 00 00 	imul   edx,DWORD PTR [esp+0x30],0x94
c000664d:	8b b2 a8 03 02 c0    	mov    esi,DWORD PTR [edx-0x3ffdfc58]
c0006653:	81 c2 a0 03 02 c0    	add    edx,0xc00203a0
c0006659:	3b 72 0c             	cmp    esi,DWORD PTR [edx+0xc]
c000665c:	0f 83 6d ff ff ff    	jae    c00065cf <iso_readdir+0xe>
c0006662:	80 7b 21 00          	cmp    BYTE PTR [ebx+0x21],0x0
c0006666:	75 38                	jne    c00066a0 <iso_readdir+0xdf>
c0006668:	80 7b 20 01          	cmp    BYTE PTR [ebx+0x20],0x1
c000666c:	75 32                	jne    c00066a0 <iso_readdir+0xdf>
c000666e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0006671:	8b 1c 85 e0 fe 01 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffe0120]
c0006678:	01 f1                	add    ecx,esi
c000667a:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c000667d:	89 c8                	mov    eax,ecx
c000667f:	25 ff 07 00 00       	and    eax,0x7ff
c0006684:	0f b6 44 03 04       	movzx  eax,BYTE PTR [ebx+eax*1+0x4]
c0006689:	01 c8                	add    eax,ecx
c000668b:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000668e:	25 ff 07 00 00       	and    eax,0x7ff
c0006693:	8d 5c 03 04          	lea    ebx,[ebx+eax*1+0x4]
c0006697:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c000669a:	0f 84 2f ff ff ff    	je     c00065cf <iso_readdir+0xe>
c00066a0:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00066a8:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00066ac:	8d 53 21             	lea    edx,[ebx+0x21]
c00066af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00066b3:	8d a8 b8 03 02 c0    	lea    ebp,[eax-0x3ffdfc48]
c00066b9:	83 3d 14 0d 02 c0 00 	cmp    DWORD PTR ds:0xc0020d14,0x0
c00066c0:	74 0c                	je     c00066ce <iso_readdir+0x10d>
c00066c2:	89 e8                	mov    eax,ebp
c00066c4:	e8 9d f6 ff ff       	call   c0005d66 <ucs2utfn>
c00066c9:	e9 9e 00 00 00       	jmp    c000676c <iso_readdir+0x1ab>
c00066ce:	56                   	push   esi
c00066cf:	51                   	push   ecx
c00066d0:	52                   	push   edx
c00066d1:	55                   	push   ebp
c00066d2:	e8 59 9f ff ff       	call   c0000630 <strncpy>
c00066d7:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066db:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066df:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00066e2:	c6 84 07 b8 03 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffdfc48],0x0
c00066ea:	e8 ac fe ff ff       	call   c000659b <fn_postprocess>
c00066ef:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066f3:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00066f6:	83 c4 10             	add    esp,0x10
c00066f9:	29 c6                	sub    esi,eax
c00066fb:	8d 7c 03 21          	lea    edi,[ebx+eax*1+0x21]
c00066ff:	f6 43 20 01          	test   BYTE PTR [ebx+0x20],0x1
c0006703:	74 05                	je     c000670a <iso_readdir+0x149>
c0006705:	83 ee 21             	sub    esi,0x21
c0006708:	eb 04                	jmp    c000670e <iso_readdir+0x14d>
c000670a:	47                   	inc    edi
c000670b:	83 ee 22             	sub    esi,0x22
c000670e:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c0006716:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000671a:	83 fe 03             	cmp    esi,0x3
c000671d:	7e 4d                	jle    c000676c <iso_readdir+0x1ab>
c000671f:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006722:	48                   	dec    eax
c0006723:	3c 01                	cmp    al,0x1
c0006725:	77 45                	ja     c000676c <iso_readdir+0x1ab>
c0006727:	52                   	push   edx
c0006728:	6a 02                	push   0x2
c000672a:	68 60 d5 01 c0       	push   0xc001d560
c000672f:	57                   	push   edi
c0006730:	e8 2b a0 ff ff       	call   c0000760 <strncmp>
c0006735:	83 c4 10             	add    esp,0x10
c0006738:	85 c0                	test   eax,eax
c000673a:	75 26                	jne    c0006762 <iso_readdir+0x1a1>
c000673c:	50                   	push   eax
c000673d:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006741:	83 e8 05             	sub    eax,0x5
c0006744:	50                   	push   eax
c0006745:	8d 47 05             	lea    eax,[edi+0x5]
c0006748:	50                   	push   eax
c0006749:	55                   	push   ebp
c000674a:	e8 e1 9e ff ff       	call   c0000630 <strncpy>
c000674f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006753:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006757:	83 c4 10             	add    esp,0x10
c000675a:	c6 84 08 b3 03 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdfc4d],0x0
c0006762:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006766:	29 c6                	sub    esi,eax
c0006768:	01 c7                	add    edi,eax
c000676a:	eb ae                	jmp    c000671a <iso_readdir+0x159>
c000676c:	83 c8 ff             	or     eax,0xffffffff
c000676f:	f6 43 19 02          	test   BYTE PTR [ebx+0x19],0x2
c0006773:	89 c2                	mov    edx,eax
c0006775:	75 0a                	jne    c0006781 <iso_readdir+0x1c0>
c0006777:	8d 43 0a             	lea    eax,[ebx+0xa]
c000677a:	e8 94 f6 ff ff       	call   c0005e13 <iso_733>
c000677f:	31 d2                	xor    edx,edx
c0006781:	69 4c 24 30 94 00 00 00 	imul   ecx,DWORD PTR [esp+0x30],0x94
c0006789:	89 81 b0 03 02 c0    	mov    DWORD PTR [ecx-0x3ffdfc50],eax
c000678f:	89 91 b4 03 02 c0    	mov    DWORD PTR [ecx-0x3ffdfc4c],edx
c0006795:	81 c1 a0 03 02 c0    	add    ecx,0xc00203a0
c000679b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000679e:	01 41 08             	add    DWORD PTR [ecx+0x8],eax
c00067a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a5:	05 b0 03 02 c0       	add    eax,0xc00203b0
c00067aa:	83 c4 1c             	add    esp,0x1c
c00067ad:	5b                   	pop    ebx
c00067ae:	5e                   	pop    esi
c00067af:	5f                   	pop    edi
c00067b0:	5d                   	pop    ebp
c00067b1:	c3                   	ret    

c00067b2 <iso_reset>:
c00067b2:	e8 9f f6 ff ff       	call   c0005e56 <iso_break_all>
c00067b7:	e8 98 f6 ff ff       	call   c0005e54 <bclear>
c00067bc:	31 c0                	xor    eax,eax
c00067be:	c3                   	ret    

c00067bf <init_percd>:
c00067bf:	57                   	push   edi
c00067c0:	56                   	push   esi
c00067c1:	53                   	push   ebx
c00067c2:	bb 01 00 00 00       	mov    ebx,0x1
c00067c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00067cb:	a2 c0 fe 01 c0       	mov    ds:0xc001fec0,al
c00067d0:	e8 dd ff ff ff       	call   c00067b2 <iso_reset>
c00067d5:	c7 05 14 0d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020d14,0x0
c00067df:	a1 0c 0d 02 c0       	mov    eax,ds:0xc0020d0c
c00067e4:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c00067e8:	e8 ff f7 ff ff       	call   c0005fec <biread>
c00067ed:	89 c6                	mov    esi,eax
c00067ef:	85 c0                	test   eax,eax
c00067f1:	0f 88 ba 00 00 00    	js     c00068b1 <init_percd+0xf2>
c00067f7:	8b 04 85 e0 fe 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0120]
c00067fe:	83 c0 04             	add    eax,0x4
c0006801:	52                   	push   edx
c0006802:	6a 06                	push   0x6
c0006804:	68 63 d5 01 c0       	push   0xc001d563
c0006809:	50                   	push   eax
c000680a:	e8 81 9b ff ff       	call   c0000390 <memcmp>
c000680f:	83 c4 10             	add    esp,0x10
c0006812:	85 c0                	test   eax,eax
c0006814:	74 08                	je     c000681e <init_percd+0x5f>
c0006816:	43                   	inc    ebx
c0006817:	83 fb 04             	cmp    ebx,0x4
c000681a:	75 c3                	jne    c00067df <init_percd+0x20>
c000681c:	eb 1a                	jmp    c0006838 <init_percd+0x79>
c000681e:	8b 04 b5 e0 fe 01 c0 	mov    eax,DWORD PTR [esi*4-0x3ffe0120]
c0006825:	83 c0 5c             	add    eax,0x5c
c0006828:	e8 b7 f5 ff ff       	call   c0005de4 <isjoliet>
c000682d:	a3 14 0d 02 c0       	mov    ds:0xc0020d14,eax
c0006832:	85 c0                	test   eax,eax
c0006834:	74 e0                	je     c0006816 <init_percd+0x57>
c0006836:	eb 3e                	jmp    c0006876 <init_percd+0xb7>
c0006838:	83 3d 14 0d 02 c0 00 	cmp    DWORD PTR ds:0xc0020d14,0x0
c000683f:	75 35                	jne    c0006876 <init_percd+0xb7>
c0006841:	a1 0c 0d 02 c0       	mov    eax,ds:0xc0020d0c
c0006846:	83 c0 10             	add    eax,0x10
c0006849:	e8 9e f7 ff ff       	call   c0005fec <biread>
c000684e:	89 c6                	mov    esi,eax
c0006850:	85 c0                	test   eax,eax
c0006852:	78 5f                	js     c00068b3 <init_percd+0xf4>
c0006854:	83 cb ff             	or     ebx,0xffffffff
c0006857:	50                   	push   eax
c0006858:	8b 04 b5 e0 fe 01 c0 	mov    eax,DWORD PTR [esi*4-0x3ffe0120]
c000685f:	6a 06                	push   0x6
c0006861:	83 c0 04             	add    eax,0x4
c0006864:	68 6a d5 01 c0       	push   0xc001d56a
c0006869:	50                   	push   eax
c000686a:	e8 21 9b ff ff       	call   c0000390 <memcmp>
c000686f:	83 c4 10             	add    esp,0x10
c0006872:	85 c0                	test   eax,eax
c0006874:	75 3d                	jne    c00068b3 <init_percd+0xf4>
c0006876:	8b 34 b5 e0 fe 01 c0 	mov    esi,DWORD PTR [esi*4-0x3ffe0120]
c000687d:	bf e0 0c 02 c0       	mov    edi,0xc0020ce0
c0006882:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006888:	b9 22 00 00 00       	mov    ecx,0x22
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	b8 e2 0c 02 c0       	mov    eax,0xc0020ce2
c0006894:	31 db                	xor    ebx,ebx
c0006896:	e8 78 f5 ff ff       	call   c0005e13 <iso_733>
c000689b:	a3 08 0d 02 c0       	mov    ds:0xc0020d08,eax
c00068a0:	b8 ea 0c 02 c0       	mov    eax,0xc0020cea
c00068a5:	e8 69 f5 ff ff       	call   c0005e13 <iso_733>
c00068aa:	a3 04 0d 02 c0       	mov    ds:0xc0020d04,eax
c00068af:	eb 02                	jmp    c00068b3 <init_percd+0xf4>
c00068b1:	89 c3                	mov    ebx,eax
c00068b3:	89 d8                	mov    eax,ebx
c00068b5:	5b                   	pop    ebx
c00068b6:	5e                   	pop    esi
c00068b7:	5f                   	pop    edi
c00068b8:	c3                   	ret    

c00068b9 <iso_ioctl>:
c00068b9:	e8 f4 fe ff ff       	call   c00067b2 <iso_reset>
c00068be:	31 c0                	xor    eax,eax
c00068c0:	c3                   	ret    

c00068c1 <fs_iso9660_init>:
c00068c1:	53                   	push   ebx
c00068c2:	31 db                	xor    ebx,ebx
c00068c4:	83 ec 0c             	sub    esp,0xc
c00068c7:	68 40 09 00 00       	push   0x940
c00068cc:	6a 00                	push   0x0
c00068ce:	68 a0 03 02 c0       	push   0xc00203a0
c00068d3:	e8 f8 9b ff ff       	call   c00004d0 <memset>
c00068d8:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068df:	c7 05 a0 03 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc00203a0,0xffffffff
c00068e9:	e8 cb 0e 00 00       	call   c00077b9 <malloc>
c00068ee:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068f5:	a3 10 0d 02 c0       	mov    ds:0xc0020d10,eax
c00068fa:	e8 ba 0e 00 00       	call   c00077b9 <malloc>
c00068ff:	83 c4 10             	add    esp,0x10
c0006902:	a3 80 03 02 c0       	mov    ds:0xc0020380,eax
c0006907:	83 ec 0c             	sub    esp,0xc
c000690a:	68 04 08 00 00       	push   0x804
c000690f:	e8 a5 0e 00 00       	call   c00077b9 <malloc>
c0006914:	89 04 9d e0 fe 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe0120],eax
c000691b:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006921:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006928:	e8 8c 0e 00 00       	call   c00077b9 <malloc>
c000692d:	83 c4 10             	add    esp,0x10
c0006930:	89 04 9d 80 fe 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe0180],eax
c0006937:	43                   	inc    ebx
c0006938:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c000693e:	83 fb 10             	cmp    ebx,0x10
c0006941:	75 c4                	jne    c0006907 <fs_iso9660_init+0x46>
c0006943:	31 c0                	xor    eax,eax
c0006945:	83 c4 08             	add    esp,0x8
c0006948:	5b                   	pop    ebx
c0006949:	c3                   	ret    

c000694a <fs_iso9660_shutdown>:
c000694a:	53                   	push   ebx
c000694b:	31 db                	xor    ebx,ebx
c000694d:	83 ec 08             	sub    esp,0x8
c0006950:	83 ec 0c             	sub    esp,0xc
c0006953:	ff 34 9d e0 fe 01 c0 	push   DWORD PTR [ebx*4-0x3ffe0120]
c000695a:	e8 6a 0e 00 00       	call   c00077c9 <free>
c000695f:	58                   	pop    eax
c0006960:	ff 34 9d 80 fe 01 c0 	push   DWORD PTR [ebx*4-0x3ffe0180]
c0006967:	43                   	inc    ebx
c0006968:	e8 5c 0e 00 00       	call   c00077c9 <free>
c000696d:	83 c4 10             	add    esp,0x10
c0006970:	83 fb 10             	cmp    ebx,0x10
c0006973:	75 db                	jne    c0006950 <fs_iso9660_shutdown+0x6>
c0006975:	a1 10 0d 02 c0       	mov    eax,ds:0xc0020d10
c000697a:	85 c0                	test   eax,eax
c000697c:	74 0c                	je     c000698a <fs_iso9660_shutdown+0x40>
c000697e:	83 ec 0c             	sub    esp,0xc
c0006981:	50                   	push   eax
c0006982:	e8 42 0e 00 00       	call   c00077c9 <free>
c0006987:	83 c4 10             	add    esp,0x10
c000698a:	a1 80 03 02 c0       	mov    eax,ds:0xc0020380
c000698f:	85 c0                	test   eax,eax
c0006991:	74 0c                	je     c000699f <fs_iso9660_shutdown+0x55>
c0006993:	83 ec 0c             	sub    esp,0xc
c0006996:	50                   	push   eax
c0006997:	e8 2d 0e 00 00       	call   c00077c9 <free>
c000699c:	83 c4 10             	add    esp,0x10
c000699f:	c7 05 80 03 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020380,0x0
c00069a9:	c7 05 10 0d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020d10,0x0
c00069b3:	31 c0                	xor    eax,eax
c00069b5:	83 c4 08             	add    esp,0x8
c00069b8:	5b                   	pop    ebx
c00069b9:	c3                   	ret    

c00069ba <Computer::close(int, int, void*)>:
c00069ba:	57                   	push   edi
c00069bb:	56                   	push   esi
c00069bc:	53                   	push   ebx
c00069bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00069c1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00069c5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00069c9:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069cf:	83 ec 0c             	sub    esp,0xc
c00069d2:	50                   	push   eax
c00069d3:	e8 5e 50 00 00       	call   c000ba36 <Device::closeAll()>
c00069d8:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069de:	83 c4 10             	add    esp,0x10
c00069e1:	8b 10                	mov    edx,DWORD PTR [eax]
c00069e3:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c00069e7:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c00069ef:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00069f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00069f7:	5b                   	pop    ebx
c00069f8:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00069fb:	5e                   	pop    esi
c00069fc:	5f                   	pop    edi
c00069fd:	ff e0                	jmp    eax

c00069ff <Krnl::firstTask()>:
c00069ff:	53                   	push   ebx
c0006a00:	83 ec 14             	sub    esp,0x14
c0006a03:	fb                   	sti    
c0006a04:	68 71 d5 01 c0       	push   0xc001d571
c0006a09:	e8 bd 90 00 00       	call   c000facb <KeSetBootMessage(char const*)>
c0006a0e:	c7 04 24 e8 07 00 00 	mov    DWORD PTR [esp],0x7e8
c0006a15:	e8 9f 0d 00 00       	call   c00077b9 <malloc>
c0006a1a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006a21:	89 c3                	mov    ebx,eax
c0006a23:	a1 f0 3f 02 c0       	mov    eax,ds:0xc0023ff0
c0006a28:	50                   	push   eax
c0006a29:	68 8a d5 01 c0       	push   0xc001d58a
c0006a2e:	6a 01                	push   0x1
c0006a30:	53                   	push   ebx
c0006a31:	e8 de c9 00 00       	call   c0013414 <Process::Process(bool, char const*, Process*, char**)>
c0006a36:	83 c4 20             	add    esp,0x20
c0006a39:	68 ff 00 00 00       	push   0xff
c0006a3e:	6a 00                	push   0x0
c0006a40:	68 0f 72 00 c0       	push   0xc000720f
c0006a45:	53                   	push   ebx
c0006a46:	e8 91 cc 00 00       	call   c00136dc <Process::createThread(void (*)(void*), void*, int)>
c0006a4b:	8b 15 f0 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023ff0
c0006a51:	6a 7a                	push   0x7a
c0006a53:	6a 00                	push   0x0
c0006a55:	68 30 41 01 c0       	push   0xc0014130
c0006a5a:	52                   	push   edx
c0006a5b:	e8 7c cc 00 00       	call   c00136dc <Process::createThread(void (*)(void*), void*, int)>
c0006a60:	83 c4 14             	add    esp,0x14
c0006a63:	a3 a8 3f 02 c0       	mov    ds:0xc0023fa8,eax
c0006a68:	68 88 d6 01 c0       	push   0xc001d688
c0006a6d:	c6 05 1d 0d 02 c0 01 	mov    BYTE PTR ds:0xc0020d1d,0x1
c0006a74:	e8 52 90 00 00       	call   c000facb <KeSetBootMessage(char const*)>
c0006a79:	e8 91 da 00 00       	call   c001450f <Vm::initialise8086()>
c0006a7e:	e8 f7 3d 00 00       	call   c000a87a <Fs::initVFS()>
c0006a83:	c7 04 24 97 d5 01 c0 	mov    DWORD PTR [esp],0xc001d597
c0006a8a:	e8 3c 90 00 00       	call   c000facb <KeSetBootMessage(char const*)>
c0006a8f:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c0006a94:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006a9a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006a9c:	6a 00                	push   0x0
c0006a9e:	6a 00                	push   0x0
c0006aa0:	6a 00                	push   0x0
c0006aa2:	50                   	push   eax
c0006aa3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006aa6:	83 c4 14             	add    esp,0x14
c0006aa9:	68 88 d6 01 c0       	push   0xc001d688
c0006aae:	e8 18 90 00 00       	call   c000facb <KeSetBootMessage(char const*)>
c0006ab3:	e8 ee 94 00 00       	call   c000ffa6 <Krnl::loadSystemEnv()>
c0006ab8:	e8 4b 97 00 00       	call   c0010208 <Krnl::setupPowerManager()>
c0006abd:	83 c4 0c             	add    esp,0xc
c0006ac0:	6a 3a                	push   0x3a
c0006ac2:	68 b1 d5 01 c0       	push   0xc001d5b1
c0006ac7:	68 ba d5 01 c0       	push   0xc001d5ba
c0006acc:	e8 31 ae 00 00       	call   c0011902 <Reg::readIntWithDefault(char*, char*, int)>
c0006ad1:	89 04 24             	mov    DWORD PTR [esp],eax
c0006ad4:	e8 af 48 00 00       	call   c000b388 <User::loadClockSettings(int)>
c0006ad9:	c7 04 24 ac d6 01 c0 	mov    DWORD PTR [esp],0xc001d6ac
c0006ae0:	e8 e6 8f 00 00       	call   c000facb <KeSetBootMessage(char const*)>
c0006ae5:	59                   	pop    ecx
c0006ae6:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c0006aeb:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006af1:	53                   	push   ebx
c0006af2:	e8 3d 4f 00 00       	call   c000ba34 <Device::loadDriversForAll()>
c0006af7:	c7 04 24 c2 d5 01 c0 	mov    DWORD PTR [esp],0xc001d5c2
c0006afe:	e8 c8 8f 00 00       	call   c000facb <KeSetBootMessage(char const*)>
c0006b03:	58                   	pop    eax
c0006b04:	8b 1d 18 0d 02 c0    	mov    ebx,DWORD PTR ds:0xc0020d18
c0006b0a:	5a                   	pop    edx
c0006b0b:	6a 01                	push   0x1
c0006b0d:	68 d3 d5 01 c0       	push   0xc001d5d3
c0006b12:	e8 72 c2 00 00       	call   c0012d89 <Thr::loadDLL(char const*, bool)>
c0006b17:	59                   	pop    ecx
c0006b18:	5a                   	pop    edx
c0006b19:	53                   	push   ebx
c0006b1a:	50                   	push   eax
c0006b1b:	e8 9a c4 00 00       	call   c0012fba <Thr::executeDLL(unsigned long, void*)>
c0006b20:	83 c4 10             	add    esp,0x10
c0006b23:	83 ec 0c             	sub    esp,0xc
c0006b26:	6a 02                	push   0x2
c0006b28:	e8 cb cf 00 00       	call   c0013af8 <blockTask(TaskState)>
c0006b2d:	83 c4 10             	add    esp,0x10
c0006b30:	eb f1                	jmp    c0006b23 <Krnl::firstTask()+0x124>

c0006b32 <Computer::Computer()>:
c0006b32:	83 ec 0c             	sub    esp,0xc
c0006b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b39:	83 ec 08             	sub    esp,0x8
c0006b3c:	68 ef d5 01 c0       	push   0xc001d5ef
c0006b41:	50                   	push   eax
c0006b42:	e8 69 4f 00 00       	call   c000bab0 <Device::Device(char const*)>
c0006b47:	83 c4 10             	add    esp,0x10
c0006b4a:	ba f8 d6 01 c0       	mov    edx,0xc001d6f8
c0006b4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b53:	89 10                	mov    DWORD PTR [eax],edx
c0006b55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b59:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006b63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b67:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006b71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b75:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006b7b:	83 ca 04             	or     edx,0x4
c0006b7e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b88:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006b8e:	31 d2                	xor    edx,edx
c0006b90:	88 c2                	mov    dl,al
c0006b92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b96:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006ba7:	31 d2                	xor    edx,edx
c0006ba9:	88 c2                	mov    dl,al
c0006bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006baf:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006bb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006bbe:	8d 50 01             	lea    edx,[eax+0x1]
c0006bc1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006bc5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0006bcb:	31 d2                	xor    edx,edx
c0006bcd:	88 c2                	mov    dl,al
c0006bcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bd3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006bd7:	83 e1 3f             	and    ecx,0x3f
c0006bda:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006bde:	90                   	nop
c0006bdf:	83 c4 0c             	add    esp,0xc
c0006be2:	c3                   	ret    
c0006be3:	90                   	nop

c0006be4 <Computer::setBootMessage(char const*)>:
c0006be4:	c3                   	ret    
c0006be5:	90                   	nop

c0006be6 <Computer::detectFeatures()>:
c0006be6:	55                   	push   ebp
c0006be7:	57                   	push   edi
c0006be8:	56                   	push   esi
c0006be9:	53                   	push   ebx
c0006bea:	83 ec 1c             	sub    esp,0x1c
c0006bed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006bf1:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0006bfb:	e8 f9 95 ff ff       	call   c00001f9 <detectCPUID>
c0006c00:	85 c0                	test   eax,eax
c0006c02:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c08:	0f 95 c2             	setne  dl
c0006c0b:	83 e0 fd             	and    eax,0xfffffffd
c0006c0e:	01 d2                	add    edx,edx
c0006c10:	09 d0                	or     eax,edx
c0006c12:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c18:	a8 02                	test   al,0x2
c0006c1a:	75 46                	jne    c0006c62 <Computer::detectFeatures()+0x7c>
c0006c1c:	f6 05 31 0d 02 c0 04 	test   BYTE PTR ds:0xc0020d31,0x4
c0006c23:	74 07                	je     c0006c2c <Computer::detectFeatures()+0x46>
c0006c25:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0006c2c:	e8 95 52 01 00       	call   c001bec6 <x87Detect>
c0006c31:	83 e0 01             	and    eax,0x1
c0006c34:	c1 e0 04             	shl    eax,0x4
c0006c37:	88 c2                	mov    dl,al
c0006c39:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c3f:	83 e0 ef             	and    eax,0xffffffef
c0006c42:	09 d0                	or     eax,edx
c0006c44:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c4a:	a8 10                	test   al,0x10
c0006c4c:	0f 85 2a 01 00 00    	jne    c0006d7c <Computer::detectFeatures()+0x196>
c0006c52:	84 c0                	test   al,al
c0006c54:	0f 88 45 01 00 00    	js     c0006d9f <Computer::detectFeatures()+0x1b9>
c0006c5a:	83 c4 1c             	add    esp,0x1c
c0006c5d:	5b                   	pop    ebx
c0006c5e:	5e                   	pop    esi
c0006c5f:	5f                   	pop    edi
c0006c60:	5d                   	pop    ebp
c0006c61:	c3                   	ret    
c0006c62:	83 ec 0c             	sub    esp,0xc
c0006c65:	6a 20                	push   0x20
c0006c67:	e8 8c 83 00 00       	call   c000eff8 <CPU::cpuidCheckEDX(unsigned int)>
c0006c6c:	83 e0 01             	and    eax,0x1
c0006c6f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006c76:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c7c:	83 e0 f7             	and    eax,0xfffffff7
c0006c7f:	09 d0                	or     eax,edx
c0006c81:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c87:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006c8e:	e8 65 83 00 00       	call   c000eff8 <CPU::cpuidCheckEDX(unsigned int)>
c0006c93:	83 e0 01             	and    eax,0x1
c0006c96:	88 c2                	mov    dl,al
c0006c98:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006c9e:	83 e0 fe             	and    eax,0xfffffffe
c0006ca1:	09 d0                	or     eax,edx
c0006ca3:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ca9:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006cb0:	e8 43 83 00 00       	call   c000eff8 <CPU::cpuidCheckEDX(unsigned int)>
c0006cb5:	c1 e0 07             	shl    eax,0x7
c0006cb8:	88 c2                	mov    dl,al
c0006cba:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006cc0:	83 e0 7f             	and    eax,0x7f
c0006cc3:	09 d0                	or     eax,edx
c0006cc5:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ccb:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006cd2:	e8 21 83 00 00       	call   c000eff8 <CPU::cpuidCheckEDX(unsigned int)>
c0006cd7:	83 c4 10             	add    esp,0x10
c0006cda:	83 e0 01             	and    eax,0x1
c0006cdd:	c1 e0 05             	shl    eax,0x5
c0006ce0:	88 c2                	mov    dl,al
c0006ce2:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ce8:	83 e0 df             	and    eax,0xffffffdf
c0006ceb:	09 d0                	or     eax,edx
c0006ced:	f7 05 30 0d 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0020d30,0x401
c0006cf7:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006cfd:	0f 84 c2 00 00 00    	je     c0006dc5 <Computer::detectFeatures()+0x1df>
c0006d03:	83 e0 fe             	and    eax,0xfffffffe
c0006d06:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d0c:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d12:	88 c2                	mov    dl,al
c0006d14:	83 e2 09             	and    edx,0x9
c0006d17:	fe ca                	dec    dl
c0006d19:	75 09                	jne    c0006d24 <Computer::detectFeatures()+0x13e>
c0006d1b:	83 e0 fe             	and    eax,0xfffffffe
c0006d1e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d24:	83 ec 0c             	sub    esp,0xc
c0006d27:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006d2b:	50                   	push   eax
c0006d2c:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006d30:	55                   	push   ebp
c0006d31:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006d35:	57                   	push   edi
c0006d36:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006d3a:	56                   	push   esi
c0006d3b:	68 00 00 00 80       	push   0x80000000
c0006d40:	e8 2f 82 00 00       	call   c000ef74 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d45:	83 c4 20             	add    esp,0x20
c0006d48:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0006d4f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006d53:	0f 86 c3 fe ff ff    	jbe    c0006c1c <Computer::detectFeatures()+0x36>
c0006d59:	83 ec 0c             	sub    esp,0xc
c0006d5c:	50                   	push   eax
c0006d5d:	55                   	push   ebp
c0006d5e:	57                   	push   edi
c0006d5f:	56                   	push   esi
c0006d60:	68 01 00 00 80       	push   0x80000001
c0006d65:	e8 0a 82 00 00       	call   c000ef74 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d6a:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0006d74:	83 c4 20             	add    esp,0x20
c0006d77:	e9 a0 fe ff ff       	jmp    c0006c1c <Computer::detectFeatures()+0x36>
c0006d7c:	e8 ff 50 01 00       	call   c001be80 <absolutelyNoChanceInHell>
c0006d81:	88 c2                	mov    dl,al
c0006d83:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d89:	c1 e2 07             	shl    edx,0x7
c0006d8c:	83 e0 7f             	and    eax,0x7f
c0006d8f:	09 d0                	or     eax,edx
c0006d91:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d97:	84 c0                	test   al,al
c0006d99:	0f 89 bb fe ff ff    	jns    c0006c5a <Computer::detectFeatures()+0x74>
c0006d9f:	e8 5c 4e 01 00       	call   c001bc00 <avxDetect>
c0006da4:	83 e0 01             	and    eax,0x1
c0006da7:	c1 e0 05             	shl    eax,0x5
c0006daa:	88 c2                	mov    dl,al
c0006dac:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006db2:	83 e0 df             	and    eax,0xffffffdf
c0006db5:	09 d0                	or     eax,edx
c0006db7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006dbd:	83 c4 1c             	add    esp,0x1c
c0006dc0:	5b                   	pop    ebx
c0006dc1:	5e                   	pop    esi
c0006dc2:	5f                   	pop    edi
c0006dc3:	5d                   	pop    ebp
c0006dc4:	c3                   	ret    
c0006dc5:	83 ec 0c             	sub    esp,0xc
c0006dc8:	68 00 02 00 00       	push   0x200
c0006dcd:	e8 26 82 00 00       	call   c000eff8 <CPU::cpuidCheckEDX(unsigned int)>
c0006dd2:	83 c4 10             	add    esp,0x10
c0006dd5:	83 e0 01             	and    eax,0x1
c0006dd8:	88 c2                	mov    dl,al
c0006dda:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006de0:	83 e0 fe             	and    eax,0xfffffffe
c0006de3:	09 d0                	or     eax,edx
c0006de5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006deb:	e9 1c ff ff ff       	jmp    c0006d0c <Computer::detectFeatures()+0x126>

c0006df0 <Computer::displayFeatures()>:
c0006df0:	c3                   	ret    
c0006df1:	90                   	nop

c0006df2 <Computer::rdmsr(unsigned int)>:
c0006df2:	83 ec 0c             	sub    esp,0xc
c0006df5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006df9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e00:	74 0a                	je     c0006e0c <Computer::rdmsr(unsigned int)+0x1a>
c0006e02:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e06:	0f 32                	rdmsr  
c0006e08:	83 c4 0c             	add    esp,0xc
c0006e0b:	c3                   	ret    
c0006e0c:	83 ec 0c             	sub    esp,0xc
c0006e0f:	68 f8 d5 01 c0       	push   0xc001d5f8
c0006e14:	e8 2a 93 00 00       	call   c0010143 <KePanic(char const*)>
c0006e19:	83 c4 10             	add    esp,0x10
c0006e1c:	eb e4                	jmp    c0006e02 <Computer::rdmsr(unsigned int)+0x10>

c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>:
c0006e1e:	57                   	push   edi
c0006e1f:	56                   	push   esi
c0006e20:	52                   	push   edx
c0006e21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e25:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0006e29:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006e2d:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e34:	74 0e                	je     c0006e44 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0006e36:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e3a:	89 f0                	mov    eax,esi
c0006e3c:	89 fa                	mov    edx,edi
c0006e3e:	0f 30                	wrmsr  
c0006e40:	58                   	pop    eax
c0006e41:	5e                   	pop    esi
c0006e42:	5f                   	pop    edi
c0006e43:	c3                   	ret    
c0006e44:	83 ec 0c             	sub    esp,0xc
c0006e47:	68 fe d5 01 c0       	push   0xc001d5fe
c0006e4c:	e8 f2 92 00 00       	call   c0010143 <KePanic(char const*)>
c0006e51:	83 c4 10             	add    esp,0x10
c0006e54:	eb e0                	jmp    c0006e36 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0006e56 <Computer::shutdown()>:
c0006e56:	83 ec 0c             	sub    esp,0xc
c0006e59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5d:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e5f:	6a 00                	push   0x0
c0006e61:	6a 00                	push   0x0
c0006e63:	6a 00                	push   0x0
c0006e65:	50                   	push   eax
c0006e66:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e69:	83 c4 1c             	add    esp,0x1c
c0006e6c:	c3                   	ret    
c0006e6d:	90                   	nop

c0006e6e <Computer::restart()>:
c0006e6e:	83 ec 0c             	sub    esp,0xc
c0006e71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e75:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e77:	6a 00                	push   0x0
c0006e79:	6a 00                	push   0x0
c0006e7b:	6a 01                	push   0x1
c0006e7d:	50                   	push   eax
c0006e7e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e81:	83 c4 1c             	add    esp,0x1c
c0006e84:	c3                   	ret    
c0006e85:	90                   	nop

c0006e86 <Computer::sleep()>:
c0006e86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e8a:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006e90:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006e94:	e9 d7 7b 00 00       	jmp    c000ea70 <ACPI::sleep()>
c0006e99:	90                   	nop

c0006e9a <Computer::nmiEnabled()>:
c0006e9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e9e:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0006ea4:	c3                   	ret    
c0006ea5:	90                   	nop

c0006ea6 <Computer::readCMOS(unsigned char)>:
c0006ea6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006eaa:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006eb1:	19 c0                	sbb    eax,eax
c0006eb3:	83 e0 80             	and    eax,0xffffff80
c0006eb6:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006eba:	e6 70                	out    0x70,al
c0006ebc:	e4 71                	in     al,0x71
c0006ebe:	c3                   	ret    
c0006ebf:	90                   	nop

c0006ec0 <Computer::enableNMI(bool)>:
c0006ec0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006ec8:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0006ece:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0006ed6:	eb ce                	jmp    c0006ea6 <Computer::readCMOS(unsigned char)>

c0006ed8 <Computer::open(int, int, void*)>:
c0006ed8:	56                   	push   esi
c0006ed9:	53                   	push   ebx
c0006eda:	83 ec 10             	sub    esp,0x10
c0006edd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006ee1:	f6 05 30 0d 02 c0 04 	test   BYTE PTR ds:0xc0020d30,0x4
c0006ee8:	68 04 d6 01 c0       	push   0xc001d604
c0006eed:	0f 94 05 60 f9 01 c0 	sete   BYTE PTR ds:0xc001f960
c0006ef4:	e8 d2 8b 00 00       	call   c000facb <KeSetBootMessage(char const*)>
c0006ef9:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0006f00:	e8 b4 08 00 00       	call   c00077b9 <malloc>
c0006f05:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f08:	89 c6                	mov    esi,eax
c0006f0a:	e8 f9 76 00 00       	call   c000e608 <ACPI::ACPI()>
c0006f0f:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0006f15:	58                   	pop    eax
c0006f16:	5a                   	pop    edx
c0006f17:	56                   	push   esi
c0006f18:	53                   	push   ebx
c0006f19:	e8 fa 49 00 00       	call   c000b918 <Device::addChild(Device*)>
c0006f1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006f21:	e8 c0 fc ff ff       	call   c0006be6 <Computer::detectFeatures()>
c0006f26:	59                   	pop    ecx
c0006f27:	5e                   	pop    esi
c0006f28:	6a 01                	push   0x1
c0006f2a:	53                   	push   ebx
c0006f2b:	e8 90 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006f30:	c7 04 24 1c d6 01 c0 	mov    DWORD PTR [esp],0xc001d61c
c0006f37:	e8 8f 8b 00 00       	call   c000facb <KeSetBootMessage(char const*)>
c0006f3c:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0006f43:	e8 71 08 00 00       	call   c00077b9 <malloc>
c0006f48:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	e8 5e 81 00 00       	call   c000f0b0 <CPU::CPU()>
c0006f52:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0006f58:	58                   	pop    eax
c0006f59:	5a                   	pop    edx
c0006f5a:	56                   	push   esi
c0006f5b:	53                   	push   ebx
c0006f5c:	e8 b7 49 00 00       	call   c000b918 <Device::addChild(Device*)>
c0006f61:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0006f67:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0006f6b:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f6d:	51                   	push   ecx
c0006f6e:	6a 00                	push   0x0
c0006f70:	6a 00                	push   0x0
c0006f72:	50                   	push   eax
c0006f73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006f76:	83 c4 14             	add    esp,0x14
c0006f79:	68 cc d6 01 c0       	push   0xc001d6cc
c0006f7e:	e8 48 8b 00 00       	call   c000facb <KeSetBootMessage(char const*)>
c0006f83:	e8 be e6 00 00       	call   c0015646 <HalInitialiseCoprocessor()>
c0006f88:	c7 04 24 36 d6 01 c0 	mov    DWORD PTR [esp],0xc001d636
c0006f8f:	e8 37 8b 00 00       	call   c000facb <KeSetBootMessage(char const*)>
c0006f94:	c7 04 24 ff 69 00 c0 	mov    DWORD PTR [esp],0xc00069ff
c0006f9b:	e8 54 c8 00 00       	call   c00137f4 <setupMultitasking(void (*)())>
c0006fa0:	83 c4 14             	add    esp,0x14
c0006fa3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006fa8:	5b                   	pop    ebx
c0006fa9:	5e                   	pop    esi
c0006faa:	c3                   	ret    
c0006fab:	90                   	nop

c0006fac <Computer::disableNMI()>:
c0006fac:	6a 00                	push   0x0
c0006fae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006fb2:	50                   	push   eax
c0006fb3:	e8 08 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006fb8:	5a                   	pop    edx
c0006fb9:	59                   	pop    ecx
c0006fba:	c3                   	ret    
c0006fbb:	90                   	nop

c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>:
c0006fbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006fc0:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006fc7:	19 c0                	sbb    eax,eax
c0006fc9:	83 e0 80             	and    eax,0xffffff80
c0006fcc:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006fd0:	e6 70                	out    0x70,al
c0006fd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006fd6:	e6 71                	out    0x71,al
c0006fd8:	c3                   	ret    
c0006fd9:	90                   	nop

c0006fda <Computer::handleNMI()>:
c0006fda:	56                   	push   esi
c0006fdb:	53                   	push   ebx
c0006fdc:	83 ec 10             	sub    esp,0x10
c0006fdf:	e4 92                	in     al,0x92
c0006fe1:	89 c6                	mov    esi,eax
c0006fe3:	e4 61                	in     al,0x61
c0006fe5:	68 51 d6 01 c0       	push   0xc001d651
c0006fea:	88 c3                	mov    bl,al
c0006fec:	e8 e7 34 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0006ff1:	83 c4 10             	add    esp,0x10
c0006ff4:	83 e6 10             	and    esi,0x10
c0006ff7:	75 0d                	jne    c0007006 <Computer::handleNMI()+0x2c>
c0006ff9:	f6 c3 40             	test   bl,0x40
c0006ffc:	75 1d                	jne    c000701b <Computer::handleNMI()+0x41>
c0006ffe:	84 db                	test   bl,bl
c0007000:	78 2d                	js     c000702f <Computer::handleNMI()+0x55>
c0007002:	58                   	pop    eax
c0007003:	5b                   	pop    ebx
c0007004:	5e                   	pop    esi
c0007005:	c3                   	ret    
c0007006:	83 ec 0c             	sub    esp,0xc
c0007009:	68 62 d6 01 c0       	push   0xc001d662
c000700e:	e8 30 91 00 00       	call   c0010143 <KePanic(char const*)>
c0007013:	83 c4 10             	add    esp,0x10
c0007016:	f6 c3 40             	test   bl,0x40
c0007019:	74 e3                	je     c0006ffe <Computer::handleNMI()+0x24>
c000701b:	83 ec 0c             	sub    esp,0xc
c000701e:	68 6f d6 01 c0       	push   0xc001d66f
c0007023:	e8 1b 91 00 00       	call   c0010143 <KePanic(char const*)>
c0007028:	83 c4 10             	add    esp,0x10
c000702b:	84 db                	test   bl,bl
c000702d:	79 d3                	jns    c0007002 <Computer::handleNMI()+0x28>
c000702f:	c7 44 24 10 79 d6 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d679
c0007037:	5a                   	pop    edx
c0007038:	5b                   	pop    ebx
c0007039:	5e                   	pop    esi
c000703a:	e9 04 91 00 00       	jmp    c0010143 <KePanic(char const*)>
c000703f:	90                   	nop

c0007040 <GDTEntry::setBase(unsigned int)>:
c0007040:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007044:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007048:	89 c1                	mov    ecx,eax
c000704a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000704e:	c1 e9 10             	shr    ecx,0x10
c0007051:	c1 e8 18             	shr    eax,0x18
c0007054:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007057:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000705a:	c3                   	ret    
c000705b:	90                   	nop

c000705c <GDTEntry::setLimit(unsigned int)>:
c000705c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007060:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007064:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007067:	66 89 01             	mov    WORD PTR [ecx],ax
c000706a:	83 e2 f0             	and    edx,0xfffffff0
c000706d:	c1 e8 10             	shr    eax,0x10
c0007070:	83 e0 0f             	and    eax,0xf
c0007073:	09 d0                	or     eax,edx
c0007075:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007078:	c3                   	ret    
c0007079:	90                   	nop

c000707a <GDT::GDT()>:
c000707a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000707e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007088:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000708e:	90                   	nop
c000708f:	c3                   	ret    

c0007090 <GDT::addEntry(GDTEntry)>:
c0007090:	53                   	push   ebx
c0007091:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007095:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007099:	8b 02                	mov    eax,DWORD PTR [edx]
c000709b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000709f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00070a3:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00070a7:	8d 48 01             	lea    ecx,[eax+0x1]
c00070aa:	c1 e0 03             	shl    eax,0x3
c00070ad:	89 0a                	mov    DWORD PTR [edx],ecx
c00070af:	5b                   	pop    ebx
c00070b0:	c3                   	ret    
c00070b1:	90                   	nop

c00070b2 <GDT::getNumberOfEntries()>:
c00070b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00070b8:	c3                   	ret    
c00070b9:	90                   	nop

c00070ba <GDT::flush()>:
c00070ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070be:	8b 10                	mov    edx,DWORD PTR [eax]
c00070c0:	83 c0 04             	add    eax,0x4
c00070c3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00070ca:	a3 22 0d 02 c0       	mov    ds:0xc0020d22,eax
c00070cf:	66 89 15 20 0d 02 c0 	mov    WORD PTR ds:0xc0020d20,dx
c00070d6:	e9 82 92 ff ff       	jmp    c000035d <loadGDT>
c00070db:	90                   	nop

c00070dc <GDT::setup()>:
c00070dc:	57                   	push   edi
c00070dd:	56                   	push   esi
c00070de:	53                   	push   ebx
c00070df:	83 ec 30             	sub    esp,0x30
c00070e2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00070e6:	6a 00                	push   0x0
c00070e8:	8d 74 24 14          	lea    esi,[esp+0x14]
c00070ec:	56                   	push   esi
c00070ed:	e8 4e ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c00070f2:	6a 00                	push   0x0
c00070f4:	56                   	push   esi
c00070f5:	e8 62 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c00070fa:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007102:	6a 00                	push   0x0
c0007104:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0007108:	56                   	push   esi
c0007109:	e8 32 ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000710e:	68 ff ff ff 00       	push   0xffffff
c0007113:	56                   	push   esi
c0007114:	e8 43 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0007119:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000711d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007121:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007125:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007129:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000712e:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007133:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007137:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000713b:	89 f8                	mov    eax,edi
c000713d:	89 fa                	mov    edx,edi
c000713f:	80 e4 f7             	and    ah,0xf7
c0007142:	80 ce 60             	or     dh,0x60
c0007145:	89 c7                	mov    edi,eax
c0007147:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000714b:	80 cc 60             	or     ah,0x60
c000714e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007152:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007156:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000715a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000715e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007162:	83 c4 20             	add    esp,0x20
c0007165:	6a 00                	push   0x0
c0007167:	8d 44 24 24          	lea    eax,[esp+0x24]
c000716b:	50                   	push   eax
c000716c:	e8 cf fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0007171:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007175:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007179:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c000717e:	6a 00                	push   0x0
c0007180:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007184:	50                   	push   eax
c0007185:	e8 b6 fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000718a:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c000718f:	83 c4 0c             	add    esp,0xc
c0007192:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007196:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000719a:	53                   	push   ebx
c000719b:	e8 f0 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071a0:	83 c4 0c             	add    esp,0xc
c00071a3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071ab:	53                   	push   ebx
c00071ac:	e8 df fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071b1:	83 c4 0c             	add    esp,0xc
c00071b4:	57                   	push   edi
c00071b5:	56                   	push   esi
c00071b6:	53                   	push   ebx
c00071b7:	e8 d4 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071bc:	83 c4 0c             	add    esp,0xc
c00071bf:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c3:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c7:	53                   	push   ebx
c00071c8:	e8 c3 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071cd:	83 c4 0c             	add    esp,0xc
c00071d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d8:	53                   	push   ebx
c00071d9:	e8 b2 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071de:	83 c4 0c             	add    esp,0xc
c00071e1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e9:	53                   	push   ebx
c00071ea:	e8 a1 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071ef:	83 c4 0c             	add    esp,0xc
c00071f2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071f6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071fa:	53                   	push   ebx
c00071fb:	e8 90 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0007200:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007203:	e8 b2 fe ff ff       	call   c00070ba <GDT::flush()>
c0007208:	83 c4 40             	add    esp,0x40
c000720b:	5b                   	pop    ebx
c000720c:	5e                   	pop    esi
c000720d:	5f                   	pop    edi
c000720e:	c3                   	ret    

c000720f <idleFunction(void*)>:
c000720f:	83 ec 0c             	sub    esp,0xc
c0007212:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c0007217:	48                   	dec    eax
c0007218:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c000721d:	75 01                	jne    c0007220 <idleFunction(void*)+0x11>
c000721f:	fb                   	sti    
c0007220:	e8 fb e0 00 00       	call   c0015320 <HalSystemIdle()>
c0007225:	e8 58 52 01 00       	call   c001c482 <idleCommon()>
c000722a:	eb f4                	jmp    c0007220 <idleFunction(void*)+0x11>

c000722c <IDTEntry::IDTEntry(bool)>:
c000722c:	83 ec 04             	sub    esp,0x4
c000722f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007233:	88 04 24             	mov    BYTE PTR [esp],al
c0007236:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000723a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007240:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007244:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007248:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000724c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000724f:	83 e2 f0             	and    edx,0xfffffff0
c0007252:	83 ca 0e             	or     edx,0xe
c0007255:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007258:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000725c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000725f:	83 e2 ef             	and    edx,0xffffffef
c0007262:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007265:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0007269:	74 05                	je     c0007270 <IDTEntry::IDTEntry(bool)+0x44>
c000726b:	b2 03                	mov    dl,0x3
c000726d:	eb 05                	jmp    c0007274 <IDTEntry::IDTEntry(bool)+0x48>
c000726f:	90                   	nop
c0007270:	b2 00                	mov    dl,0x0
c0007272:	66 90                	xchg   ax,ax
c0007274:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007278:	83 e2 03             	and    edx,0x3
c000727b:	88 d1                	mov    cl,dl
c000727d:	c1 e1 05             	shl    ecx,0x5
c0007280:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007283:	83 e2 9f             	and    edx,0xffffff9f
c0007286:	09 ca                	or     edx,ecx
c0007288:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000728b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000728f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007292:	83 ca 80             	or     edx,0xffffff80
c0007295:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007298:	90                   	nop
c0007299:	83 c4 04             	add    esp,0x4
c000729c:	c3                   	ret    
c000729d:	90                   	nop

c000729e <IDTEntry::setOffset(unsigned int)>:
c000729e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00072a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a6:	66 89 02             	mov    WORD PTR [edx],ax
c00072a9:	c1 e8 10             	shr    eax,0x10
c00072ac:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00072b0:	c3                   	ret    
c00072b1:	90                   	nop
c00072b2:	66 90                	xchg   ax,ax

c00072b4 <IDT::IDT()>:
c00072b4:	90                   	nop
c00072b5:	c3                   	ret    

c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00072b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00072ba:	83 c0 30             	add    eax,0x30
c00072bd:	c3                   	ret    

c00072be <IDT::addEntry(IDTEntry, int)>:
c00072be:	53                   	push   ebx
c00072bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00072c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00072cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00072cf:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00072d2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00072d6:	5b                   	pop    ebx
c00072d7:	c3                   	ret    

c00072d8 <IDT::addEntry(int, void (*)(), bool)>:
c00072d8:	53                   	push   ebx
c00072d9:	83 ec 10             	sub    esp,0x10
c00072dc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00072e1:	50                   	push   eax
c00072e2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00072e6:	53                   	push   ebx
c00072e7:	e8 40 ff ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c00072ec:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00072f0:	53                   	push   ebx
c00072f1:	e8 a8 ff ff ff       	call   c000729e <IDTEntry::setOffset(unsigned int)>
c00072f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00072fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072fe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007302:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007306:	e8 b3 ff ff ff       	call   c00072be <IDT::addEntry(IDTEntry, int)>
c000730b:	83 c4 30             	add    esp,0x30
c000730e:	5b                   	pop    ebx
c000730f:	c3                   	ret    

c0007310 <IDT::flush()>:
c0007310:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007314:	66 c7 05 28 0d 02 c0 ff 07 	mov    WORD PTR ds:0xc0020d28,0x7ff
c000731d:	a3 2a 0d 02 c0       	mov    ds:0xc0020d2a,eax
c0007322:	0f 01 1d 28 0d 02 c0 	lidtd  ds:0xc0020d28
c0007329:	c3                   	ret    

c000732a <IDT::setup()>:
c000732a:	57                   	push   edi
c000732b:	56                   	push   esi
c000732c:	53                   	push   ebx
c000732d:	83 ec 10             	sub    esp,0x10
c0007330:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007334:	6a 00                	push   0x0
c0007336:	68 90 bc 01 c0       	push   0xc001bc90
c000733b:	6a 00                	push   0x0
c000733d:	53                   	push   ebx
c000733e:	e8 95 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007343:	6a 00                	push   0x0
c0007345:	68 a0 bc 01 c0       	push   0xc001bca0
c000734a:	6a 01                	push   0x1
c000734c:	53                   	push   ebx
c000734d:	e8 86 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007352:	83 c4 20             	add    esp,0x20
c0007355:	6a 00                	push   0x0
c0007357:	68 aa bc 01 c0       	push   0xc001bcaa
c000735c:	6a 02                	push   0x2
c000735e:	53                   	push   ebx
c000735f:	e8 74 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007364:	6a 00                	push   0x0
c0007366:	68 b4 bc 01 c0       	push   0xc001bcb4
c000736b:	6a 03                	push   0x3
c000736d:	53                   	push   ebx
c000736e:	e8 65 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007373:	83 c4 20             	add    esp,0x20
c0007376:	6a 00                	push   0x0
c0007378:	68 be bc 01 c0       	push   0xc001bcbe
c000737d:	6a 04                	push   0x4
c000737f:	53                   	push   ebx
c0007380:	e8 53 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007385:	6a 00                	push   0x0
c0007387:	68 c8 bc 01 c0       	push   0xc001bcc8
c000738c:	6a 05                	push   0x5
c000738e:	53                   	push   ebx
c000738f:	e8 44 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007394:	83 c4 20             	add    esp,0x20
c0007397:	6a 00                	push   0x0
c0007399:	68 d2 bc 01 c0       	push   0xc001bcd2
c000739e:	6a 06                	push   0x6
c00073a0:	53                   	push   ebx
c00073a1:	e8 32 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073a6:	6a 00                	push   0x0
c00073a8:	68 dc bc 01 c0       	push   0xc001bcdc
c00073ad:	6a 07                	push   0x7
c00073af:	53                   	push   ebx
c00073b0:	e8 23 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073b5:	83 c4 20             	add    esp,0x20
c00073b8:	6a 00                	push   0x0
c00073ba:	68 e6 bc 01 c0       	push   0xc001bce6
c00073bf:	6a 08                	push   0x8
c00073c1:	53                   	push   ebx
c00073c2:	e8 11 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073c7:	6a 00                	push   0x0
c00073c9:	68 ee bc 01 c0       	push   0xc001bcee
c00073ce:	6a 09                	push   0x9
c00073d0:	53                   	push   ebx
c00073d1:	e8 02 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073d6:	83 c4 20             	add    esp,0x20
c00073d9:	6a 00                	push   0x0
c00073db:	68 f8 bc 01 c0       	push   0xc001bcf8
c00073e0:	6a 0a                	push   0xa
c00073e2:	53                   	push   ebx
c00073e3:	e8 f0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073e8:	6a 00                	push   0x0
c00073ea:	68 00 bd 01 c0       	push   0xc001bd00
c00073ef:	6a 0b                	push   0xb
c00073f1:	53                   	push   ebx
c00073f2:	e8 e1 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073f7:	83 c4 20             	add    esp,0x20
c00073fa:	6a 00                	push   0x0
c00073fc:	68 08 bd 01 c0       	push   0xc001bd08
c0007401:	6a 0c                	push   0xc
c0007403:	53                   	push   ebx
c0007404:	e8 cf fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007409:	6a 00                	push   0x0
c000740b:	68 10 bd 01 c0       	push   0xc001bd10
c0007410:	6a 0d                	push   0xd
c0007412:	53                   	push   ebx
c0007413:	e8 c0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007418:	83 c4 20             	add    esp,0x20
c000741b:	6a 00                	push   0x0
c000741d:	68 18 bd 01 c0       	push   0xc001bd18
c0007422:	6a 0e                	push   0xe
c0007424:	53                   	push   ebx
c0007425:	e8 ae fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000742a:	6a 00                	push   0x0
c000742c:	68 20 bd 01 c0       	push   0xc001bd20
c0007431:	6a 0f                	push   0xf
c0007433:	53                   	push   ebx
c0007434:	e8 9f fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007439:	83 c4 20             	add    esp,0x20
c000743c:	6a 00                	push   0x0
c000743e:	68 2a bd 01 c0       	push   0xc001bd2a
c0007443:	6a 10                	push   0x10
c0007445:	53                   	push   ebx
c0007446:	e8 8d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000744b:	6a 00                	push   0x0
c000744d:	68 34 bd 01 c0       	push   0xc001bd34
c0007452:	6a 11                	push   0x11
c0007454:	53                   	push   ebx
c0007455:	e8 7e fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000745a:	83 c4 20             	add    esp,0x20
c000745d:	6a 00                	push   0x0
c000745f:	68 3e bd 01 c0       	push   0xc001bd3e
c0007464:	6a 12                	push   0x12
c0007466:	53                   	push   ebx
c0007467:	e8 6c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000746c:	6a 01                	push   0x1
c000746e:	68 d8 bd 01 c0       	push   0xc001bdd8
c0007473:	6a 60                	push   0x60
c0007475:	53                   	push   ebx
c0007476:	e8 5d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000747b:	83 c4 20             	add    esp,0x20
c000747e:	6a 00                	push   0x0
c0007480:	68 df bd 01 c0       	push   0xc001bddf
c0007485:	6a 20                	push   0x20
c0007487:	53                   	push   ebx
c0007488:	e8 4b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000748d:	6a 00                	push   0x0
c000748f:	68 ca bd 01 c0       	push   0xc001bdca
c0007494:	6a 21                	push   0x21
c0007496:	53                   	push   ebx
c0007497:	e8 3c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000749c:	83 c4 20             	add    esp,0x20
c000749f:	6a 00                	push   0x0
c00074a1:	68 d1 bd 01 c0       	push   0xc001bdd1
c00074a6:	6a 22                	push   0x22
c00074a8:	53                   	push   ebx
c00074a9:	e8 2a fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ae:	6a 00                	push   0x0
c00074b0:	68 48 bd 01 c0       	push   0xc001bd48
c00074b5:	6a 23                	push   0x23
c00074b7:	53                   	push   ebx
c00074b8:	e8 1b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074bd:	83 c4 20             	add    esp,0x20
c00074c0:	6a 00                	push   0x0
c00074c2:	68 52 bd 01 c0       	push   0xc001bd52
c00074c7:	6a 24                	push   0x24
c00074c9:	53                   	push   ebx
c00074ca:	e8 09 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074cf:	6a 00                	push   0x0
c00074d1:	68 5c bd 01 c0       	push   0xc001bd5c
c00074d6:	6a 25                	push   0x25
c00074d8:	53                   	push   ebx
c00074d9:	e8 fa fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074de:	83 c4 20             	add    esp,0x20
c00074e1:	6a 00                	push   0x0
c00074e3:	68 66 bd 01 c0       	push   0xc001bd66
c00074e8:	6a 26                	push   0x26
c00074ea:	53                   	push   ebx
c00074eb:	e8 e8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074f0:	6a 00                	push   0x0
c00074f2:	68 70 bd 01 c0       	push   0xc001bd70
c00074f7:	6a 27                	push   0x27
c00074f9:	53                   	push   ebx
c00074fa:	e8 d9 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ff:	83 c4 20             	add    esp,0x20
c0007502:	6a 00                	push   0x0
c0007504:	68 7a bd 01 c0       	push   0xc001bd7a
c0007509:	6a 28                	push   0x28
c000750b:	53                   	push   ebx
c000750c:	e8 c7 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007511:	6a 00                	push   0x0
c0007513:	68 84 bd 01 c0       	push   0xc001bd84
c0007518:	6a 29                	push   0x29
c000751a:	53                   	push   ebx
c000751b:	e8 b8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007520:	83 c4 20             	add    esp,0x20
c0007523:	6a 00                	push   0x0
c0007525:	68 8e bd 01 c0       	push   0xc001bd8e
c000752a:	6a 2a                	push   0x2a
c000752c:	53                   	push   ebx
c000752d:	e8 a6 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007532:	6a 00                	push   0x0
c0007534:	68 98 bd 01 c0       	push   0xc001bd98
c0007539:	6a 2b                	push   0x2b
c000753b:	53                   	push   ebx
c000753c:	e8 97 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007541:	83 c4 20             	add    esp,0x20
c0007544:	6a 00                	push   0x0
c0007546:	68 a2 bd 01 c0       	push   0xc001bda2
c000754b:	6a 2c                	push   0x2c
c000754d:	53                   	push   ebx
c000754e:	e8 85 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007553:	6a 00                	push   0x0
c0007555:	68 ac bd 01 c0       	push   0xc001bdac
c000755a:	6a 2d                	push   0x2d
c000755c:	53                   	push   ebx
c000755d:	e8 76 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007562:	83 c4 20             	add    esp,0x20
c0007565:	6a 00                	push   0x0
c0007567:	68 b6 bd 01 c0       	push   0xc001bdb6
c000756c:	6a 2e                	push   0x2e
c000756e:	53                   	push   ebx
c000756f:	e8 64 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007574:	6a 00                	push   0x0
c0007576:	68 c0 bd 01 c0       	push   0xc001bdc0
c000757b:	6a 2f                	push   0x2f
c000757d:	53                   	push   ebx
c000757e:	e8 55 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007583:	83 c4 20             	add    esp,0x20
c0007586:	6a 00                	push   0x0
c0007588:	68 16 be 01 c0       	push   0xc001be16
c000758d:	6a 30                	push   0x30
c000758f:	53                   	push   ebx
c0007590:	e8 43 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007595:	6a 00                	push   0x0
c0007597:	68 20 be 01 c0       	push   0xc001be20
c000759c:	6a 31                	push   0x31
c000759e:	53                   	push   ebx
c000759f:	e8 34 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075a4:	83 c4 20             	add    esp,0x20
c00075a7:	6a 00                	push   0x0
c00075a9:	68 2a be 01 c0       	push   0xc001be2a
c00075ae:	6a 32                	push   0x32
c00075b0:	53                   	push   ebx
c00075b1:	e8 22 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075b6:	6a 00                	push   0x0
c00075b8:	68 34 be 01 c0       	push   0xc001be34
c00075bd:	6a 33                	push   0x33
c00075bf:	53                   	push   ebx
c00075c0:	e8 13 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075c5:	83 c4 20             	add    esp,0x20
c00075c8:	6a 00                	push   0x0
c00075ca:	68 3e be 01 c0       	push   0xc001be3e
c00075cf:	6a 34                	push   0x34
c00075d1:	53                   	push   ebx
c00075d2:	e8 01 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075d7:	6a 00                	push   0x0
c00075d9:	68 48 be 01 c0       	push   0xc001be48
c00075de:	6a 35                	push   0x35
c00075e0:	53                   	push   ebx
c00075e1:	e8 f2 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075e6:	83 c4 20             	add    esp,0x20
c00075e9:	6a 00                	push   0x0
c00075eb:	68 52 be 01 c0       	push   0xc001be52
c00075f0:	6a 36                	push   0x36
c00075f2:	53                   	push   ebx
c00075f3:	e8 e0 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075f8:	6a 00                	push   0x0
c00075fa:	68 5c be 01 c0       	push   0xc001be5c
c00075ff:	6a 37                	push   0x37
c0007601:	53                   	push   ebx
c0007602:	e8 d1 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007607:	83 c4 1c             	add    esp,0x1c
c000760a:	6a 03                	push   0x3
c000760c:	6a 02                	push   0x2
c000760e:	ff 35 10 0e 02 c0    	push   DWORD PTR ds:0xc0020e10
c0007614:	e8 05 24 00 00       	call   c0009a1e <VAS::allocatePages(int, int)>
c0007619:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007620:	89 c6                	mov    esi,eax
c0007622:	e8 92 01 00 00       	call   c00077b9 <malloc>
c0007627:	81 c6 00 20 00 00    	add    esi,0x2000
c000762d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007630:	89 c7                	mov    edi,eax
c0007632:	e8 91 15 00 00       	call   c0008bc8 <TSS::TSS()>
c0007637:	83 c4 0c             	add    esp,0xc
c000763a:	68 e6 bc 01 c0       	push   0xc001bce6
c000763f:	56                   	push   esi
c0007640:	57                   	push   edi
c0007641:	e8 c6 15 00 00       	call   c0008c0c <TSS::setup(unsigned long, unsigned long)>
c0007646:	89 c6                	mov    esi,eax
c0007648:	58                   	pop    eax
c0007649:	5a                   	pop    edx
c000764a:	6a 00                	push   0x0
c000764c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007650:	50                   	push   eax
c0007651:	e8 d6 fb ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c0007656:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000765a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000765f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007666:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000766c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007670:	80 ce 05             	or     dh,0x5
c0007673:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007676:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000767a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000767e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007681:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007684:	e8 87 fc ff ff       	call   c0007310 <IDT::flush()>
c0007689:	83 c4 20             	add    esp,0x20
c000768c:	5b                   	pop    ebx
c000768d:	5e                   	pop    esi
c000768e:	5f                   	pop    edi
c000768f:	c3                   	ret    

c0007690 <sbrk>:
c0007690:	55                   	push   ebp
c0007691:	57                   	push   edi
c0007692:	56                   	push   esi
c0007693:	53                   	push   ebx
c0007694:	83 ec 1c             	sub    esp,0x1c
c0007697:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000769b:	85 c0                	test   eax,eax
c000769d:	74 5f                	je     c00076fe <sbrk+0x6e>
c000769f:	78 64                	js     c0007705 <sbrk+0x75>
c00076a1:	8b 15 58 f9 01 c0    	mov    edx,DWORD PTR ds:0xc001f958
c00076a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00076ab:	05 ff 0f 00 00       	add    eax,0xfff
c00076b0:	89 c5                	mov    ebp,eax
c00076b2:	78 69                	js     c000771d <sbrk+0x8d>
c00076b4:	c1 fd 0c             	sar    ebp,0xc
c00076b7:	bb 00 00 00 00       	mov    ebx,0x0
c00076bc:	8b 35 10 0e 02 c0    	mov    esi,DWORD PTR ds:0xc0020e10
c00076c2:	8b 3d 58 f9 01 c0    	mov    edi,DWORD PTR ds:0xc001f958
c00076c8:	e8 c8 03 00 00       	call   c0007a95 <Phys::allocatePage()>
c00076cd:	68 01 04 00 00       	push   0x401
c00076d2:	57                   	push   edi
c00076d3:	50                   	push   eax
c00076d4:	56                   	push   esi
c00076d5:	e8 40 22 00 00       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c00076da:	81 05 58 f9 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001f958,0x1000
c00076e4:	43                   	inc    ebx
c00076e5:	83 c4 10             	add    esp,0x10
c00076e8:	39 dd                	cmp    ebp,ebx
c00076ea:	75 d0                	jne    c00076bc <sbrk+0x2c>
c00076ec:	0f 20 d8             	mov    eax,cr3
c00076ef:	0f 22 d8             	mov    cr3,eax
c00076f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00076f6:	83 c4 1c             	add    esp,0x1c
c00076f9:	5b                   	pop    ebx
c00076fa:	5e                   	pop    esi
c00076fb:	5f                   	pop    edi
c00076fc:	5d                   	pop    ebp
c00076fd:	c3                   	ret    
c00076fe:	a1 58 f9 01 c0       	mov    eax,ds:0xc001f958
c0007703:	eb f1                	jmp    c00076f6 <sbrk+0x66>
c0007705:	83 ec 08             	sub    esp,0x8
c0007708:	50                   	push   eax
c0007709:	68 1c d7 01 c0       	push   0xc001d71c
c000770e:	e8 c5 2d 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0007713:	83 c4 10             	add    esp,0x10
c0007716:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000771b:	eb d9                	jmp    c00076f6 <sbrk+0x66>
c000771d:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007723:	eb 8f                	jmp    c00076b4 <sbrk+0x24>

c0007725 <mmap>:
c0007725:	83 ec 18             	sub    esp,0x18
c0007728:	68 4c d7 01 c0       	push   0xc001d74c
c000772d:	e8 11 8a 00 00       	call   c0010143 <KePanic(char const*)>
c0007732:	b8 00 00 00 00       	mov    eax,0x0
c0007737:	83 c4 1c             	add    esp,0x1c
c000773a:	c3                   	ret    

c000773b <munmap>:
c000773b:	83 ec 18             	sub    esp,0x18
c000773e:	68 51 d7 01 c0       	push   0xc001d751
c0007743:	e8 fb 89 00 00       	call   c0010143 <KePanic(char const*)>
c0007748:	b8 00 00 00 00       	mov    eax,0x0
c000774d:	83 c4 1c             	add    esp,0x1c
c0007750:	c3                   	ret    

c0007751 <liballoc_lock()>:
c0007751:	fa                   	cli    
c0007752:	ff 05 c8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fc8
c0007758:	b8 00 00 00 00       	mov    eax,0x0
c000775d:	c3                   	ret    

c000775e <liballoc_unlock()>:
c000775e:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c0007763:	48                   	dec    eax
c0007764:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c0007769:	75 01                	jne    c000776c <liballoc_unlock()+0xe>
c000776b:	fb                   	sti    
c000776c:	b8 00 00 00 00       	mov    eax,0x0
c0007771:	c3                   	ret    

c0007772 <liballoc_alloc(int)>:
c0007772:	83 ec 10             	sub    esp,0x10
c0007775:	6a 01                	push   0x1
c0007777:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000777b:	ff 35 10 0e 02 c0    	push   DWORD PTR ds:0xc0020e10
c0007781:	e8 98 22 00 00       	call   c0009a1e <VAS::allocatePages(int, int)>
c0007786:	83 c4 1c             	add    esp,0x1c
c0007789:	c3                   	ret    

c000778a <liballoc_free(void*, int)>:
c000778a:	83 ec 14             	sub    esp,0x14
c000778d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007791:	ff 35 10 0e 02 c0    	push   DWORD PTR ds:0xc0020e10
c0007797:	e8 3e 1f 00 00       	call   c00096da <VAS::freeAllocatedPages(unsigned long)>
c000779c:	b8 00 00 00 00       	mov    eax,0x0
c00077a1:	83 c4 1c             	add    esp,0x1c
c00077a4:	c3                   	ret    

c00077a5 <realloc>:
c00077a5:	83 ec 14             	sub    esp,0x14
c00077a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077b0:	e8 7c 9d ff ff       	call   c0001531 <dlrealloc>
c00077b5:	83 c4 1c             	add    esp,0x1c
c00077b8:	c3                   	ret    

c00077b9 <malloc>:
c00077b9:	83 ec 18             	sub    esp,0x18
c00077bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077c0:	e8 2f 98 ff ff       	call   c0000ff4 <dlmalloc>
c00077c5:	83 c4 1c             	add    esp,0x1c
c00077c8:	c3                   	ret    

c00077c9 <free>:
c00077c9:	83 ec 18             	sub    esp,0x18
c00077cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077d0:	e8 c4 94 ff ff       	call   c0000c99 <dlfree>
c00077d5:	83 c4 1c             	add    esp,0x1c
c00077d8:	c3                   	ret    

c00077d9 <rfree>:
c00077d9:	83 ec 18             	sub    esp,0x18
c00077dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077e0:	e8 b4 94 ff ff       	call   c0000c99 <dlfree>
c00077e5:	83 c4 1c             	add    esp,0x1c
c00077e8:	c3                   	ret    

c00077e9 <calloc>:
c00077e9:	56                   	push   esi
c00077ea:	53                   	push   ebx
c00077eb:	83 ec 10             	sub    esp,0x10
c00077ee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00077f2:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00077f7:	53                   	push   ebx
c00077f8:	e8 bc ff ff ff       	call   c00077b9 <malloc>
c00077fd:	89 c6                	mov    esi,eax
c00077ff:	83 c4 0c             	add    esp,0xc
c0007802:	53                   	push   ebx
c0007803:	6a 00                	push   0x0
c0007805:	50                   	push   eax
c0007806:	e8 c5 8c ff ff       	call   c00004d0 <memset>
c000780b:	89 f0                	mov    eax,esi
c000780d:	83 c4 14             	add    esp,0x14
c0007810:	5b                   	pop    ebx
c0007811:	5e                   	pop    esi
c0007812:	c3                   	ret    

c0007813 <KeEntryPoint>:
c0007813:	57                   	push   edi
c0007814:	bf f9 03 00 00       	mov    edi,0x3f9
c0007819:	56                   	push   esi
c000781a:	89 fa                	mov    edx,edi
c000781c:	53                   	push   ebx
c000781d:	31 f6                	xor    esi,esi
c000781f:	83 ec 2c             	sub    esp,0x2c
c0007822:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007827:	a3 30 0d 02 c0       	mov    ds:0xc0020d30,eax
c000782c:	89 f0                	mov    eax,esi
c000782e:	ee                   	out    dx,al
c000782f:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007834:	b0 80                	mov    al,0x80
c0007836:	89 da                	mov    edx,ebx
c0007838:	ee                   	out    dx,al
c0007839:	b1 03                	mov    cl,0x3
c000783b:	ba f8 03 00 00       	mov    edx,0x3f8
c0007840:	88 c8                	mov    al,cl
c0007842:	ee                   	out    dx,al
c0007843:	89 f0                	mov    eax,esi
c0007845:	89 fa                	mov    edx,edi
c0007847:	ee                   	out    dx,al
c0007848:	88 c8                	mov    al,cl
c000784a:	89 da                	mov    edx,ebx
c000784c:	ee                   	out    dx,al
c000784d:	b0 c7                	mov    al,0xc7
c000784f:	ba fa 03 00 00       	mov    edx,0x3fa
c0007854:	ee                   	out    dx,al
c0007855:	b0 0b                	mov    al,0xb
c0007857:	ba fc 03 00 00       	mov    edx,0x3fc
c000785c:	ee                   	out    dx,al
c000785d:	68 58 d7 01 c0       	push   0xc001d758
c0007862:	e8 71 2c 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0007867:	e8 f1 81 00 00       	call   c000fa5d <KeDisplaySplashScreen()>
c000786c:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007871:	05 ff 0f 00 00       	add    eax,0xfff
c0007876:	25 00 f0 ff ff       	and    eax,0xfffff000
c000787b:	89 04 24             	mov    DWORD PTR [esp],eax
c000787e:	e8 64 03 00 00       	call   c0007be7 <Phys::physicalMemorySetup(unsigned int)>
c0007883:	e8 bc 1b 00 00       	call   c0009444 <Virt::virtualMemorySetup()>
c0007888:	58                   	pop    eax
c0007889:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000788d:	53                   	push   ebx
c000788e:	e8 6d 1c 00 00       	call   c0009500 <VAS::VAS()>
c0007893:	89 1d 10 0e 02 c0    	mov    DWORD PTR ds:0xc0020e10,ebx
c0007899:	e8 7c 4b 01 00       	call   c001c41a <_init>
c000789e:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c00078a5:	e8 0f ff ff ff       	call   c00077b9 <malloc>
c00078aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00078ad:	89 c6                	mov    esi,eax
c00078af:	e8 7e f2 ff ff       	call   c0006b32 <Computer::Computer()>
c00078b4:	6a 00                	push   0x0
c00078b6:	89 35 18 0d 02 c0    	mov    DWORD PTR ds:0xc0020d18,esi
c00078bc:	6a 00                	push   0x0
c00078be:	6a 00                	push   0x0
c00078c0:	56                   	push   esi
c00078c1:	e8 12 f6 ff ff       	call   c0006ed8 <Computer::open(int, int, void*)>
c00078c6:	83 c4 14             	add    esp,0x14
c00078c9:	53                   	push   ebx
c00078ca:	e8 e7 1e 00 00       	call   c00097b6 <VAS::~VAS()>
c00078cf:	83 c4 30             	add    esp,0x30
c00078d2:	5b                   	pop    ebx
c00078d3:	5e                   	pop    esi
c00078d4:	5f                   	pop    edi
c00078d5:	c3                   	ret    

c00078d6 <Phys::allocateDMA(unsigned long)>:
c00078d6:	55                   	push   ebp
c00078d7:	31 ed                	xor    ebp,ebp
c00078d9:	57                   	push   edi
c00078da:	56                   	push   esi
c00078db:	53                   	push   ebx
c00078dc:	31 db                	xor    ebx,ebx
c00078de:	83 ec 1c             	sub    esp,0x1c
c00078e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00078e5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00078ed:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c00078f3:	31 c0                	xor    eax,eax
c00078f5:	c1 ef 0c             	shr    edi,0xc
c00078f8:	eb 19                	jmp    c0007913 <Phys::allocateDMA(unsigned long)+0x3d>
c00078fa:	85 c0                	test   eax,eax
c00078fc:	75 06                	jne    c0007904 <Phys::allocateDMA(unsigned long)+0x2e>
c00078fe:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007902:	89 dd                	mov    ebp,ebx
c0007904:	8d 70 01             	lea    esi,[eax+0x1]
c0007907:	39 f7                	cmp    edi,esi
c0007909:	74 33                	je     c000793e <Phys::allocateDMA(unsigned long)+0x68>
c000790b:	89 f0                	mov    eax,esi
c000790d:	43                   	inc    ebx
c000790e:	83 fb 0f             	cmp    ebx,0xf
c0007911:	7f 11                	jg     c0007924 <Phys::allocateDMA(unsigned long)+0x4e>
c0007913:	80 bb 4c 0d 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdf2b4],0x0
c000791a:	74 de                	je     c00078fa <Phys::allocateDMA(unsigned long)+0x24>
c000791c:	31 c0                	xor    eax,eax
c000791e:	43                   	inc    ebx
c000791f:	83 fb 0f             	cmp    ebx,0xf
c0007922:	7e ef                	jle    c0007913 <Phys::allocateDMA(unsigned long)+0x3d>
c0007924:	83 ec 0c             	sub    esp,0xc
c0007927:	68 70 d7 01 c0       	push   0xc001d770
c000792c:	e8 12 88 00 00       	call   c0010143 <KePanic(char const*)>
c0007931:	83 c4 10             	add    esp,0x10
c0007934:	31 c0                	xor    eax,eax
c0007936:	83 c4 1c             	add    esp,0x1c
c0007939:	5b                   	pop    ebx
c000793a:	5e                   	pop    esi
c000793b:	5f                   	pop    edi
c000793c:	5d                   	pop    ebp
c000793d:	c3                   	ret    
c000793e:	89 e9                	mov    ecx,ebp
c0007940:	c1 f9 04             	sar    ecx,0x4
c0007943:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007947:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000794b:	89 ca                	mov    edx,ecx
c000794d:	4a                   	dec    edx
c000794e:	79 03                	jns    c0007953 <Phys::allocateDMA(unsigned long)+0x7d>
c0007950:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007953:	c1 fa 04             	sar    edx,0x4
c0007956:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000795a:	74 08                	je     c0007964 <Phys::allocateDMA(unsigned long)+0x8e>
c000795c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007960:	31 c0                	xor    eax,eax
c0007962:	eb ba                	jmp    c000791e <Phys::allocateDMA(unsigned long)+0x48>
c0007964:	85 f6                	test   esi,esi
c0007966:	74 15                	je     c000797d <Phys::allocateDMA(unsigned long)+0xa7>
c0007968:	8d 95 4c 0d 02 c0    	lea    edx,[ebp-0x3ffdf2b4]
c000796e:	8d 84 05 4d 0d 02 c0 	lea    eax,[ebp+eax*1-0x3ffdf2b3]
c0007975:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007978:	42                   	inc    edx
c0007979:	39 d0                	cmp    eax,edx
c000797b:	75 f8                	jne    c0007975 <Phys::allocateDMA(unsigned long)+0x9f>
c000797d:	01 3d 44 0d 02 c0    	add    DWORD PTR ds:0xc0020d44,edi
c0007983:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007987:	85 c0                	test   eax,eax
c0007989:	74 17                	je     c00079a2 <Phys::allocateDMA(unsigned long)+0xcc>
c000798b:	83 ec 0c             	sub    esp,0xc
c000798e:	68 70 d7 01 c0       	push   0xc001d770
c0007993:	e8 ab 87 00 00       	call   c0010143 <KePanic(char const*)>
c0007998:	83 c4 10             	add    esp,0x10
c000799b:	89 f0                	mov    eax,esi
c000799d:	e9 6b ff ff ff       	jmp    c000790d <Phys::allocateDMA(unsigned long)+0x37>
c00079a2:	c1 e5 0c             	shl    ebp,0xc
c00079a5:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c00079ab:	eb 89                	jmp    c0007936 <Phys::allocateDMA(unsigned long)+0x60>

c00079ad <Phys::freeDMA(unsigned long, unsigned long)>:
c00079ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079b1:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c00079b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00079bb:	c1 ea 0c             	shr    edx,0xc
c00079be:	05 00 00 ff 3d       	add    eax,0x3dff0000
c00079c3:	29 15 44 0d 02 c0    	sub    DWORD PTR ds:0xc0020d44,edx
c00079c9:	c1 e8 0c             	shr    eax,0xc
c00079cc:	85 d2                	test   edx,edx
c00079ce:	74 0f                	je     c00079df <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c00079d0:	05 4c 0d 02 c0       	add    eax,0xc0020d4c
c00079d5:	01 c2                	add    edx,eax
c00079d7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00079da:	40                   	inc    eax
c00079db:	39 d0                	cmp    eax,edx
c00079dd:	75 f8                	jne    c00079d7 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c00079df:	c3                   	ret    

c00079e0 <Phys::setPageState(unsigned long, bool)>:
c00079e0:	56                   	push   esi
c00079e1:	ba 01 00 00 00       	mov    edx,0x1
c00079e6:	53                   	push   ebx
c00079e7:	8b 35 5c f9 01 c0    	mov    esi,DWORD PTR ds:0xc001f95c
c00079ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00079f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00079f5:	89 c8                	mov    eax,ecx
c00079f7:	83 e1 07             	and    ecx,0x7
c00079fa:	c1 e8 03             	shr    eax,0x3
c00079fd:	d3 e3                	shl    ebx,cl
c00079ff:	01 c6                	add    esi,eax
c0007a01:	d3 e2                	shl    edx,cl
c0007a03:	f7 d2                	not    edx
c0007a05:	20 16                	and    BYTE PTR [esi],dl
c0007a07:	03 05 5c f9 01 c0    	add    eax,DWORD PTR ds:0xc001f95c
c0007a0d:	08 18                	or     BYTE PTR [eax],bl
c0007a0f:	5b                   	pop    ebx
c0007a10:	5e                   	pop    esi
c0007a11:	c3                   	ret    

c0007a12 <Phys::getPageState(unsigned long)>:
c0007a12:	53                   	push   ebx
c0007a13:	8b 15 5c f9 01 c0    	mov    edx,DWORD PTR ds:0xc001f95c
c0007a19:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007a1d:	31 db                	xor    ebx,ebx
c0007a1f:	89 c8                	mov    eax,ecx
c0007a21:	83 e1 07             	and    ecx,0x7
c0007a24:	c1 e8 03             	shr    eax,0x3
c0007a27:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0007a2a:	89 d8                	mov    eax,ebx
c0007a2c:	5b                   	pop    ebx
c0007a2d:	d3 f8                	sar    eax,cl
c0007a2f:	83 e0 01             	and    eax,0x1
c0007a32:	c3                   	ret    

c0007a33 <Phys::freePage(unsigned long)>:
c0007a33:	53                   	push   ebx
c0007a34:	83 ec 08             	sub    esp,0x8
c0007a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007a3b:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007a41:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007a47:	76 3a                	jbe    c0007a83 <Phys::freePage(unsigned long)+0x50>
c0007a49:	c1 e8 0c             	shr    eax,0xc
c0007a4c:	50                   	push   eax
c0007a4d:	89 c3                	mov    ebx,eax
c0007a4f:	e8 be ff ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007a54:	5a                   	pop    edx
c0007a55:	84 c0                	test   al,al
c0007a57:	74 19                	je     c0007a72 <Phys::freePage(unsigned long)+0x3f>
c0007a59:	83 ec 08             	sub    esp,0x8
c0007a5c:	ff 0d 44 0d 02 c0    	dec    DWORD PTR ds:0xc0020d44
c0007a62:	6a 00                	push   0x0
c0007a64:	53                   	push   ebx
c0007a65:	e8 76 ff ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007a6a:	83 c4 10             	add    esp,0x10
c0007a6d:	83 c4 08             	add    esp,0x8
c0007a70:	5b                   	pop    ebx
c0007a71:	c3                   	ret    
c0007a72:	c7 44 24 10 15 d8 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d815
c0007a7a:	83 c4 08             	add    esp,0x8
c0007a7d:	5b                   	pop    ebx
c0007a7e:	e9 c0 86 00 00       	jmp    c0010143 <KePanic(char const*)>
c0007a83:	68 00 10 00 00       	push   0x1000
c0007a88:	50                   	push   eax
c0007a89:	e8 1f ff ff ff       	call   c00079ad <Phys::freeDMA(unsigned long, unsigned long)>
c0007a8e:	59                   	pop    ecx
c0007a8f:	5b                   	pop    ebx
c0007a90:	83 c4 08             	add    esp,0x8
c0007a93:	5b                   	pop    ebx
c0007a94:	c3                   	ret    

c0007a95 <Phys::allocatePage()>:
c0007a95:	56                   	push   esi
c0007a96:	53                   	push   ebx
c0007a97:	83 ec 14             	sub    esp,0x14
c0007a9a:	8b 35 38 0d 02 c0    	mov    esi,DWORD PTR ds:0xc0020d38
c0007aa0:	89 f3                	mov    ebx,esi
c0007aa2:	eb 0a                	jmp    c0007aae <Phys::allocatePage()+0x19>
c0007aa4:	89 1d 38 0d 02 c0    	mov    DWORD PTR ds:0xc0020d38,ebx
c0007aaa:	39 de                	cmp    esi,ebx
c0007aac:	74 24                	je     c0007ad2 <Phys::allocatePage()+0x3d>
c0007aae:	53                   	push   ebx
c0007aaf:	e8 5e ff ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007ab4:	5a                   	pop    edx
c0007ab5:	84 c0                	test   al,al
c0007ab7:	74 5f                	je     c0007b18 <Phys::allocatePage()+0x83>
c0007ab9:	43                   	inc    ebx
c0007aba:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007ac0:	75 e2                	jne    c0007aa4 <Phys::allocatePage()+0xf>
c0007ac2:	31 db                	xor    ebx,ebx
c0007ac4:	c7 05 38 0d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020d38,0x0
c0007ace:	39 de                	cmp    esi,ebx
c0007ad0:	75 dc                	jne    c0007aae <Phys::allocatePage()+0x19>
c0007ad2:	83 ec 0c             	sub    esp,0xc
c0007ad5:	80 35 5c 0d 02 c0 01 	xor    BYTE PTR ds:0xc0020d5c,0x1
c0007adc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007ae1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007ae4:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007aea:	50                   	push   eax
c0007aeb:	e8 08 27 00 00       	call   c000a1f8 <VAS::scanForEviction()>
c0007af0:	83 c4 10             	add    esp,0x10
c0007af3:	85 c0                	test   eax,eax
c0007af5:	75 3f                	jne    c0007b36 <Phys::allocatePage()+0xa1>
c0007af7:	83 ec 0c             	sub    esp,0xc
c0007afa:	68 98 d7 01 c0       	push   0xc001d798
c0007aff:	e8 3f 86 00 00       	call   c0010143 <KePanic(char const*)>
c0007b04:	83 c4 10             	add    esp,0x10
c0007b07:	8b 1d 38 0d 02 c0    	mov    ebx,DWORD PTR ds:0xc0020d38
c0007b0d:	53                   	push   ebx
c0007b0e:	e8 ff fe ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007b13:	5a                   	pop    edx
c0007b14:	84 c0                	test   al,al
c0007b16:	75 a1                	jne    c0007ab9 <Phys::allocatePage()+0x24>
c0007b18:	6a 01                	push   0x1
c0007b1a:	53                   	push   ebx
c0007b1b:	e8 c0 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007b20:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c0007b25:	5a                   	pop    edx
c0007b26:	ff 05 44 0d 02 c0    	inc    DWORD PTR ds:0xc0020d44
c0007b2c:	c1 e0 0c             	shl    eax,0xc
c0007b2f:	59                   	pop    ecx
c0007b30:	83 c4 14             	add    esp,0x14
c0007b33:	5b                   	pop    ebx
c0007b34:	5e                   	pop    esi
c0007b35:	c3                   	ret    
c0007b36:	83 ec 08             	sub    esp,0x8
c0007b39:	89 c2                	mov    edx,eax
c0007b3b:	6a 01                	push   0x1
c0007b3d:	c1 ea 0c             	shr    edx,0xc
c0007b40:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b44:	52                   	push   edx
c0007b45:	e8 96 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007b4a:	83 c4 10             	add    esp,0x10
c0007b4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b51:	eb dd                	jmp    c0007b30 <Phys::allocatePage()+0x9b>

c0007b53 <Phys::allocateContiguousPages(int)>:
c0007b53:	57                   	push   edi
c0007b54:	56                   	push   esi
c0007b55:	53                   	push   ebx
c0007b56:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b5a:	fa                   	cli    
c0007b5b:	ff 05 c8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fc8
c0007b61:	31 db                	xor    ebx,ebx
c0007b63:	85 db                	test   ebx,ebx
c0007b65:	75 11                	jne    c0007b78 <Phys::allocateContiguousPages(int)+0x25>
c0007b67:	e8 29 ff ff ff       	call   c0007a95 <Phys::allocatePage()>
c0007b6c:	83 fe 01             	cmp    esi,0x1
c0007b6f:	89 c7                	mov    edi,eax
c0007b71:	74 21                	je     c0007b94 <Phys::allocateContiguousPages(int)+0x41>
c0007b73:	bb 01 00 00 00       	mov    ebx,0x1
c0007b78:	e8 18 ff ff ff       	call   c0007a95 <Phys::allocatePage()>
c0007b7d:	89 da                	mov    edx,ebx
c0007b7f:	c1 e2 0c             	shl    edx,0xc
c0007b82:	01 fa                	add    edx,edi
c0007b84:	39 c2                	cmp    edx,eax
c0007b86:	74 20                	je     c0007ba8 <Phys::allocateContiguousPages(int)+0x55>
c0007b88:	bb 01 00 00 00       	mov    ebx,0x1
c0007b8d:	89 c7                	mov    edi,eax
c0007b8f:	83 fe 01             	cmp    esi,0x1
c0007b92:	75 e4                	jne    c0007b78 <Phys::allocateContiguousPages(int)+0x25>
c0007b94:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c0007b99:	48                   	dec    eax
c0007b9a:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c0007b9f:	75 01                	jne    c0007ba2 <Phys::allocateContiguousPages(int)+0x4f>
c0007ba1:	fb                   	sti    
c0007ba2:	89 f8                	mov    eax,edi
c0007ba4:	5b                   	pop    ebx
c0007ba5:	5e                   	pop    esi
c0007ba6:	5f                   	pop    edi
c0007ba7:	c3                   	ret    
c0007ba8:	43                   	inc    ebx
c0007ba9:	39 f3                	cmp    ebx,esi
c0007bab:	75 b6                	jne    c0007b63 <Phys::allocateContiguousPages(int)+0x10>
c0007bad:	eb e5                	jmp    c0007b94 <Phys::allocateContiguousPages(int)+0x41>

c0007baf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007baf:	56                   	push   esi
c0007bb0:	53                   	push   ebx
c0007bb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007bb5:	39 1d 3c 0d 02 c0    	cmp    DWORD PTR ds:0xc0020d3c,ebx
c0007bbb:	73 06                	jae    c0007bc3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007bbd:	89 1d 3c 0d 02 c0    	mov    DWORD PTR ds:0xc0020d3c,ebx
c0007bc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007bc7:	c1 eb 0c             	shr    ebx,0xc
c0007bca:	c1 e8 0c             	shr    eax,0xc
c0007bcd:	39 d8                	cmp    eax,ebx
c0007bcf:	73 13                	jae    c0007be4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007bd1:	6a 00                	push   0x0
c0007bd3:	8d 70 01             	lea    esi,[eax+0x1]
c0007bd6:	50                   	push   eax
c0007bd7:	e8 04 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007bdc:	5a                   	pop    edx
c0007bdd:	89 f0                	mov    eax,esi
c0007bdf:	59                   	pop    ecx
c0007be0:	39 f3                	cmp    ebx,esi
c0007be2:	75 ed                	jne    c0007bd1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007be4:	5b                   	pop    ebx
c0007be5:	5e                   	pop    esi
c0007be6:	c3                   	ret    

c0007be7 <Phys::physicalMemorySetup(unsigned int)>:
c0007be7:	55                   	push   ebp
c0007be8:	57                   	push   edi
c0007be9:	56                   	push   esi
c0007bea:	53                   	push   ebx
c0007beb:	31 db                	xor    ebx,ebx
c0007bed:	83 ec 40             	sub    esp,0x40
c0007bf0:	6a 10                	push   0x10
c0007bf2:	6a 00                	push   0x0
c0007bf4:	68 4c 0d 02 c0       	push   0xc0020d4c
c0007bf9:	e8 d2 88 ff ff       	call   c00004d0 <memset>
c0007bfe:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007c02:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007c07:	05 00 10 00 00       	add    eax,0x1000
c0007c0c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007c10:	5a                   	pop    edx
c0007c11:	59                   	pop    ecx
c0007c12:	50                   	push   eax
c0007c13:	68 2b d8 01 c0       	push   0xc001d82b
c0007c18:	e8 bb 28 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0007c1d:	83 c4 10             	add    esp,0x10
c0007c20:	83 ec 08             	sub    esp,0x8
c0007c23:	6a 01                	push   0x1
c0007c25:	53                   	push   ebx
c0007c26:	43                   	inc    ebx
c0007c27:	e8 b4 fd ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007c2c:	83 c4 10             	add    esp,0x10
c0007c2f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007c35:	75 e9                	jne    c0007c20 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007c37:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c0007c3d:	66 85 c0             	test   ax,ax
c0007c40:	0f 84 97 01 00 00    	je     c0007ddd <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0007c46:	89 c7                	mov    edi,eax
c0007c48:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007c50:	81 e7 ff ff 00 00    	and    edi,0xffff
c0007c56:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007c5b:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007c5f:	eb 15                	jmp    c0007c76 <Phys::physicalMemorySetup(unsigned int)+0x8f>
c0007c61:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0007c65:	83 c3 18             	add    ebx,0x18
c0007c68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007c6c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007c70:	0f 84 77 01 00 00    	je     c0007ded <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007c76:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007c79:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007c7c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007c7f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007c83:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007c87:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007c89:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007c8c:	01 f0                	add    eax,esi
c0007c8e:	55                   	push   ebp
c0007c8f:	11 fa                	adc    edx,edi
c0007c91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007c95:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007c99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c9d:	50                   	push   eax
c0007c9e:	56                   	push   esi
c0007c9f:	68 c8 d7 01 c0       	push   0xc001d7c8
c0007ca4:	e8 2f 28 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0007ca9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007cad:	83 c4 10             	add    esp,0x10
c0007cb0:	09 f8                	or     eax,edi
c0007cb2:	0f 85 35 01 00 00    	jne    c0007ded <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007cb8:	4d                   	dec    ebp
c0007cb9:	75 a6                	jne    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007cbb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0007cbf:	ba 00 00 08 00       	mov    edx,0x80000
c0007cc4:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0007cc8:	39 f2                	cmp    edx,esi
c0007cca:	89 c1                	mov    ecx,eax
c0007ccc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007cd4:	19 f9                	sbb    ecx,edi
c0007cd6:	0f 82 a7 00 00 00    	jb     c0007d83 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cdc:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007ce0:	89 c1                	mov    ecx,eax
c0007ce2:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0007ce6:	0f 83 97 00 00 00    	jae    c0007d83 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cec:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007cf1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007cf5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007cf9:	39 fa                	cmp    edx,edi
c0007cfb:	19 e8                	sbb    eax,ebp
c0007cfd:	0f 82 9a 01 00 00    	jb     c0007e9d <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c0007d03:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d07:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007d0b:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0007d11:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007d16:	83 d5 ff             	adc    ebp,0xffffffff
c0007d19:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0007d1d:	31 c0                	xor    eax,eax
c0007d1f:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0007d23:	39 fa                	cmp    edx,edi
c0007d25:	89 c1                	mov    ecx,eax
c0007d27:	19 e9                	sbb    ecx,ebp
c0007d29:	0f 83 32 ff ff ff    	jae    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d2f:	be 00 00 08 00       	mov    esi,0x80000
c0007d34:	51                   	push   ecx
c0007d35:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007d39:	57                   	push   edi
c0007d3a:	56                   	push   esi
c0007d3b:	68 ec d7 01 c0       	push   0xc001d7ec
c0007d40:	e8 93 27 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0007d45:	5d                   	pop    ebp
c0007d46:	58                   	pop    eax
c0007d47:	57                   	push   edi
c0007d48:	56                   	push   esi
c0007d49:	e8 61 fe ff ff       	call   c0007baf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0007d4e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007d52:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007d56:	83 c4 0c             	add    esp,0xc
c0007d59:	0f ac d0 0c          	shrd   eax,edx,0xc
c0007d5d:	03 05 48 0d 02 c0    	add    eax,DWORD PTR ds:0xc0020d48
c0007d63:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0007d6a:	a3 48 0d 02 c0       	mov    ds:0xc0020d48,eax
c0007d6f:	52                   	push   edx
c0007d70:	50                   	push   eax
c0007d71:	68 51 d8 01 c0       	push   0xc001d851
c0007d76:	e8 5d 27 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0007d7b:	83 c4 10             	add    esp,0x10
c0007d7e:	e9 de fe ff ff       	jmp    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d83:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0007d87:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007d8b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007d8f:	39 ea                	cmp    edx,ebp
c0007d91:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0007d95:	0f 82 c6 fe ff ff    	jb     c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d9b:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007da0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0007da4:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0007da8:	0f 83 b3 fe ff ff    	jae    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007dae:	39 ee                	cmp    esi,ebp
c0007db0:	89 f8                	mov    eax,edi
c0007db2:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0007db6:	0f 83 78 ff ff ff    	jae    c0007d34 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007dbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dc0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007dc4:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0007dc8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0007dcc:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0007dd0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007dd4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007dd8:	e9 57 ff ff ff       	jmp    c0007d34 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007ddd:	83 ec 0c             	sub    esp,0xc
c0007de0:	68 43 d8 01 c0       	push   0xc001d843
c0007de5:	e8 59 83 00 00       	call   c0010143 <KePanic(char const*)>
c0007dea:	83 c4 10             	add    esp,0x10
c0007ded:	83 ec 08             	sub    esp,0x8
c0007df0:	bb 60 00 00 00       	mov    ebx,0x60
c0007df5:	6a 00                	push   0x0
c0007df7:	6a 06                	push   0x6
c0007df9:	e8 e2 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007dfe:	58                   	pop    eax
c0007dff:	5a                   	pop    edx
c0007e00:	6a 00                	push   0x0
c0007e02:	6a 07                	push   0x7
c0007e04:	e8 d7 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e09:	83 05 48 0d 02 c0 02 	add    DWORD PTR ds:0xc0020d48,0x2
c0007e10:	83 c4 10             	add    esp,0x10
c0007e13:	83 ec 08             	sub    esp,0x8
c0007e16:	6a 00                	push   0x0
c0007e18:	53                   	push   ebx
c0007e19:	43                   	inc    ebx
c0007e1a:	e8 c1 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e1f:	83 c4 10             	add    esp,0x10
c0007e22:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0007e28:	75 e9                	jne    c0007e13 <Phys::physicalMemorySetup(unsigned int)+0x22c>
c0007e2a:	a1 48 0d 02 c0       	mov    eax,ds:0xc0020d48
c0007e2f:	bb 40 01 00 00       	mov    ebx,0x140
c0007e34:	83 c0 20             	add    eax,0x20
c0007e37:	a3 48 0d 02 c0       	mov    ds:0xc0020d48,eax
c0007e3c:	eb 22                	jmp    c0007e60 <Phys::physicalMemorySetup(unsigned int)+0x279>
c0007e3e:	83 ec 08             	sub    esp,0x8
c0007e41:	6a 00                	push   0x0
c0007e43:	53                   	push   ebx
c0007e44:	43                   	inc    ebx
c0007e45:	e8 96 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e4a:	a1 48 0d 02 c0       	mov    eax,ds:0xc0020d48
c0007e4f:	83 c4 10             	add    esp,0x10
c0007e52:	40                   	inc    eax
c0007e53:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0007e59:	a3 48 0d 02 c0       	mov    ds:0xc0020d48,eax
c0007e5e:	74 07                	je     c0007e67 <Phys::physicalMemorySetup(unsigned int)+0x280>
c0007e60:	3d ff 03 00 00       	cmp    eax,0x3ff
c0007e65:	7e d7                	jle    c0007e3e <Phys::physicalMemorySetup(unsigned int)+0x257>
c0007e67:	bb d0 01 00 00       	mov    ebx,0x1d0
c0007e6c:	3d ff 07 00 00       	cmp    eax,0x7ff
c0007e71:	7f 22                	jg     c0007e95 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0007e73:	83 ec 08             	sub    esp,0x8
c0007e76:	6a 00                	push   0x0
c0007e78:	53                   	push   ebx
c0007e79:	43                   	inc    ebx
c0007e7a:	e8 61 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e7f:	a1 48 0d 02 c0       	mov    eax,ds:0xc0020d48
c0007e84:	83 c4 10             	add    esp,0x10
c0007e87:	40                   	inc    eax
c0007e88:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0007e8e:	a3 48 0d 02 c0       	mov    ds:0xc0020d48,eax
c0007e93:	75 d7                	jne    c0007e6c <Phys::physicalMemorySetup(unsigned int)+0x285>
c0007e95:	83 c4 3c             	add    esp,0x3c
c0007e98:	5b                   	pop    ebx
c0007e99:	5e                   	pop    esi
c0007e9a:	5f                   	pop    edi
c0007e9b:	5d                   	pop    ebp
c0007e9c:	c3                   	ret    
c0007e9d:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0007ea5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007ead:	e9 51 fe ff ff       	jmp    c0007d03 <Phys::physicalMemorySetup(unsigned int)+0x11c>

c0007eb2 <Pipe::isAtty()>:
c0007eb2:	31 c0                	xor    eax,eax
c0007eb4:	c3                   	ret    
c0007eb5:	90                   	nop

c0007eb6 <Pipe::~Pipe()>:
c0007eb6:	83 ec 0c             	sub    esp,0xc
c0007eb9:	ba b0 d8 01 c0       	mov    edx,0xc001d8b0
c0007ebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec2:	89 10                	mov    DWORD PTR [eax],edx
c0007ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	50                   	push   eax
c0007ecc:	e8 53 11 00 00       	call   c0009024 <UnixFile::~UnixFile()>
c0007ed1:	83 c4 10             	add    esp,0x10
c0007ed4:	90                   	nop
c0007ed5:	83 c4 0c             	add    esp,0xc
c0007ed8:	c3                   	ret    
c0007ed9:	90                   	nop

c0007eda <Pipe::~Pipe()>:
c0007eda:	83 ec 0c             	sub    esp,0xc
c0007edd:	83 ec 0c             	sub    esp,0xc
c0007ee0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ee4:	e8 cd ff ff ff       	call   c0007eb6 <Pipe::~Pipe()>
c0007ee9:	83 c4 10             	add    esp,0x10
c0007eec:	83 ec 08             	sub    esp,0x8
c0007eef:	6a 20                	push   0x20
c0007ef1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ef5:	e8 e8 24 00 00       	call   c000a3e2 <operator delete(void*, unsigned long)>
c0007efa:	83 c4 10             	add    esp,0x10
c0007efd:	83 c4 0c             	add    esp,0xc
c0007f00:	c3                   	ret    
c0007f01:	90                   	nop

c0007f02 <Pipe::write(unsigned long long, void*, int*)>:
c0007f02:	55                   	push   ebp
c0007f03:	57                   	push   edi
c0007f04:	56                   	push   esi
c0007f05:	53                   	push   ebx
c0007f06:	83 ec 1c             	sub    esp,0x1c
c0007f09:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0007f0d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007f11:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0007f14:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f18:	89 04 24             	mov    DWORD PTR [esp],eax
c0007f1b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007f1f:	89 d8                	mov    eax,ebx
c0007f21:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0007f24:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f28:	89 d6                	mov    esi,edx
c0007f2a:	89 d7                	mov    edi,edx
c0007f2c:	c1 ff 1f             	sar    edi,0x1f
c0007f2f:	03 34 24             	add    esi,DWORD PTR [esp]
c0007f32:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0007f36:	c1 f8 1f             	sar    eax,0x1f
c0007f39:	39 f3                	cmp    ebx,esi
c0007f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007f3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f43:	19 f8                	sbb    eax,edi
c0007f45:	b8 01 00 00 00       	mov    eax,0x1
c0007f4a:	72 6e                	jb     c0007fba <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0007f4c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0007f4f:	01 d0                	add    eax,edx
c0007f51:	99                   	cdq    
c0007f52:	f7 fb                	idiv   ebx
c0007f54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007f58:	29 d3                	sub    ebx,edx
c0007f5a:	89 d7                	mov    edi,edx
c0007f5c:	89 de                	mov    esi,ebx
c0007f5e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007f61:	c1 fb 1f             	sar    ebx,0x1f
c0007f64:	39 f2                	cmp    edx,esi
c0007f66:	19 d8                	sbb    eax,ebx
c0007f68:	b8 00 00 00 00       	mov    eax,0x0
c0007f6d:	72 04                	jb     c0007f73 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0007f6f:	89 d0                	mov    eax,edx
c0007f71:	29 f0                	sub    eax,esi
c0007f73:	89 d3                	mov    ebx,edx
c0007f75:	29 c3                	sub    ebx,eax
c0007f77:	74 0b                	je     c0007f84 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0007f79:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0007f7c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0007f80:	89 d9                	mov    ecx,ebx
c0007f82:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f84:	85 c0                	test   eax,eax
c0007f86:	74 0d                	je     c0007f95 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0007f88:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0007f8c:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0007f8f:	89 de                	mov    esi,ebx
c0007f91:	89 c1                	mov    ecx,eax
c0007f93:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f95:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0007f98:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0007f9d:	75 10                	jne    c0007faf <Pipe::write(unsigned long long, void*, int*)+0xad>
c0007f9f:	83 ec 0c             	sub    esp,0xc
c0007fa2:	68 6d d8 01 c0       	push   0xc001d86d
c0007fa7:	e8 97 81 00 00       	call   c0010143 <KePanic(char const*)>
c0007fac:	83 c4 10             	add    esp,0x10
c0007faf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007fb3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007fb6:	89 08                	mov    DWORD PTR [eax],ecx
c0007fb8:	31 c0                	xor    eax,eax
c0007fba:	83 c4 1c             	add    esp,0x1c
c0007fbd:	5b                   	pop    ebx
c0007fbe:	5e                   	pop    esi
c0007fbf:	5f                   	pop    edi
c0007fc0:	5d                   	pop    ebp
c0007fc1:	c3                   	ret    

c0007fc2 <Pipe::read(unsigned long long, void*, int*)>:
c0007fc2:	55                   	push   ebp
c0007fc3:	57                   	push   edi
c0007fc4:	56                   	push   esi
c0007fc5:	53                   	push   ebx
c0007fc6:	83 ec 1c             	sub    esp,0x1c
c0007fc9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0007fcd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0007fd1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007fd5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0007fd8:	89 c8                	mov    eax,ecx
c0007fda:	99                   	cdq    
c0007fdb:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0007fdf:	74 24                	je     c0008005 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007fe1:	39 f9                	cmp    ecx,edi
c0007fe3:	89 d1                	mov    ecx,edx
c0007fe5:	19 f1                	sbb    ecx,esi
c0007fe7:	73 1c                	jae    c0008005 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007fe9:	fa                   	cli    
c0007fea:	ff 05 c8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fc8
c0007ff0:	e8 07 b9 00 00       	call   c00138fc <schedule()>
c0007ff5:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c0007ffa:	48                   	dec    eax
c0007ffb:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c0008000:	75 d3                	jne    c0007fd5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008002:	fb                   	sti    
c0008003:	eb d0                	jmp    c0007fd5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008005:	39 f8                	cmp    eax,edi
c0008007:	89 d1                	mov    ecx,edx
c0008009:	89 3c 24             	mov    DWORD PTR [esp],edi
c000800c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0008010:	19 f1                	sbb    ecx,esi
c0008012:	73 07                	jae    c000801b <Pipe::read(unsigned long long, void*, int*)+0x59>
c0008014:	89 04 24             	mov    DWORD PTR [esp],eax
c0008017:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000801b:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000801e:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0008021:	29 f7                	sub    edi,esi
c0008023:	89 f8                	mov    eax,edi
c0008025:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008029:	99                   	cdq    
c000802a:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000802d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008031:	19 d0                	sbb    eax,edx
c0008033:	73 07                	jae    c000803c <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0008035:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008038:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000803c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000803f:	89 ea                	mov    edx,ebp
c0008041:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0008045:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000804a:	74 0d                	je     c0008059 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000804c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000804f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0008053:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008057:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008059:	85 d2                	test   edx,edx
c000805b:	74 11                	je     c000806e <Pipe::read(unsigned long long, void*, int*)+0xac>
c000805d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008061:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0008064:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008068:	89 d1                	mov    ecx,edx
c000806a:	89 c7                	mov    edi,eax
c000806c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000806e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008071:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0008074:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008077:	99                   	cdq    
c0008078:	89 f7                	mov    edi,esi
c000807a:	03 04 24             	add    eax,DWORD PTR [esp]
c000807d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008081:	c1 ff 1f             	sar    edi,0x1f
c0008084:	57                   	push   edi
c0008085:	56                   	push   esi
c0008086:	52                   	push   edx
c0008087:	50                   	push   eax
c0008088:	e8 73 42 01 00       	call   c001c300 <__umoddi3>
c000808d:	83 c4 10             	add    esp,0x10
c0008090:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008093:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008098:	75 10                	jne    c00080aa <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000809a:	83 ec 0c             	sub    esp,0xc
c000809d:	68 8a d8 01 c0       	push   0xc001d88a
c00080a2:	e8 9c 80 00 00       	call   c0010143 <KePanic(char const*)>
c00080a7:	83 c4 10             	add    esp,0x10
c00080aa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00080ae:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00080b1:	89 10                	mov    DWORD PTR [eax],edx
c00080b3:	83 c4 1c             	add    esp,0x1c
c00080b6:	31 c0                	xor    eax,eax
c00080b8:	5b                   	pop    ebx
c00080b9:	5e                   	pop    esi
c00080ba:	5f                   	pop    edi
c00080bb:	5d                   	pop    ebp
c00080bc:	c3                   	ret    
c00080bd:	90                   	nop

c00080be <Pipe::Pipe(int)>:
c00080be:	83 ec 0c             	sub    esp,0xc
c00080c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080c5:	83 ec 08             	sub    esp,0x8
c00080c8:	6a 00                	push   0x0
c00080ca:	50                   	push   eax
c00080cb:	e8 72 0d 00 00       	call   c0008e42 <UnixFile::UnixFile(int)>
c00080d0:	83 c4 10             	add    esp,0x10
c00080d3:	ba b0 d8 01 c0       	mov    edx,0xc001d8b0
c00080d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080dc:	89 10                	mov    DWORD PTR [eax],edx
c00080de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00080e6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00080e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080ed:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00080f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080f8:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00080ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008103:	83 ec 0c             	sub    esp,0xc
c0008106:	50                   	push   eax
c0008107:	e8 ad f6 ff ff       	call   c00077b9 <malloc>
c000810c:	83 c4 10             	add    esp,0x10
c000810f:	89 c2                	mov    edx,eax
c0008111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008115:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000811c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0008120:	90                   	nop
c0008121:	83 c4 0c             	add    esp,0xc
c0008124:	c3                   	ret    
c0008125:	90                   	nop

c0008126 <VgaText::isAtty()>:
c0008126:	b0 01                	mov    al,0x1
c0008128:	c3                   	ret    
c0008129:	90                   	nop

c000812a <VgaText::~VgaText()>:
c000812a:	83 ec 0c             	sub    esp,0xc
c000812d:	ba 44 d9 01 c0       	mov    edx,0xc001d944
c0008132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008136:	89 10                	mov    DWORD PTR [eax],edx
c0008138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000813c:	83 ec 0c             	sub    esp,0xc
c000813f:	50                   	push   eax
c0008140:	e8 df 0e 00 00       	call   c0009024 <UnixFile::~UnixFile()>
c0008145:	83 c4 10             	add    esp,0x10
c0008148:	90                   	nop
c0008149:	83 c4 0c             	add    esp,0xc
c000814c:	c3                   	ret    
c000814d:	90                   	nop

c000814e <VgaText::~VgaText()>:
c000814e:	83 ec 0c             	sub    esp,0xc
c0008151:	83 ec 0c             	sub    esp,0xc
c0008154:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008158:	e8 cd ff ff ff       	call   c000812a <VgaText::~VgaText()>
c000815d:	83 c4 10             	add    esp,0x10
c0008160:	83 ec 08             	sub    esp,0x8
c0008163:	68 34 01 00 00       	push   0x134
c0008168:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000816c:	e8 71 22 00 00       	call   c000a3e2 <operator delete(void*, unsigned long)>
c0008171:	83 c4 10             	add    esp,0x10
c0008174:	83 c4 0c             	add    esp,0xc
c0008177:	c3                   	ret    

c0008178 <VgaText::read(unsigned long long, void*, int*)>:
c0008178:	83 ec 10             	sub    esp,0x10
c000817b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000817f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008183:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008187:	e8 ac 45 00 00       	call   c000c738 <readKeyboard(VgaText*, char*, unsigned long)>
c000818c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008190:	89 02                	mov    DWORD PTR [edx],eax
c0008192:	31 c0                	xor    eax,eax
c0008194:	83 c4 1c             	add    esp,0x1c
c0008197:	c3                   	ret    

c0008198 <setTerminalScrollLock(bool)>:
c0008198:	c3                   	ret    

c0008199 <doTerminalCycle()>:
c0008199:	c3                   	ret    

c000819a <addToTerminalCycle(VgaText*)>:
c000819a:	c3                   	ret    

c000819b <scrollTerminalScrollLock(int)>:
c000819b:	c3                   	ret    

c000819c <VgaText::updateTitle()>:
c000819c:	c3                   	ret    
c000819d:	90                   	nop

c000819e <VgaText::load()>:
c000819e:	c3                   	ret    
c000819f:	90                   	nop

c00081a0 <VgaText::updateCursor()>:
c00081a0:	83 ec 14             	sub    esp,0x14
c00081a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00081a7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00081aa:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00081ad:	e8 26 e3 00 00       	call   c00164d8 <HalConsoleCursorUpdate(int, int)>
c00081b2:	83 c4 1c             	add    esp,0x1c
c00081b5:	c3                   	ret    

c00081b6 <VgaText::doANSI_SGR(int)>:
c00081b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00081ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00081be:	85 d2                	test   edx,edx
c00081c0:	75 0b                	jne    c00081cd <VgaText::doANSI_SGR(int)+0x17>
c00081c2:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00081c5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00081c8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00081cb:	eb 59                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c00081cd:	83 fa 07             	cmp    edx,0x7
c00081d0:	75 0b                	jne    c00081dd <VgaText::doANSI_SGR(int)+0x27>
c00081d2:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00081d5:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00081d8:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00081db:	eb 49                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c00081dd:	83 fa 1b             	cmp    edx,0x1b
c00081e0:	74 e0                	je     c00081c2 <VgaText::doANSI_SGR(int)+0xc>
c00081e2:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00081e5:	83 f9 07             	cmp    ecx,0x7
c00081e8:	77 09                	ja     c00081f3 <VgaText::doANSI_SGR(int)+0x3d>
c00081ea:	8b 14 8d 80 f9 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0680]
c00081f1:	eb 20                	jmp    c0008213 <VgaText::doANSI_SGR(int)+0x5d>
c00081f3:	8d 4a d8             	lea    ecx,[edx-0x28]
c00081f6:	83 f9 07             	cmp    ecx,0x7
c00081f9:	77 09                	ja     c0008204 <VgaText::doANSI_SGR(int)+0x4e>
c00081fb:	8b 14 8d 80 f9 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0680]
c0008202:	eb 22                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c0008204:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008207:	83 f9 07             	cmp    ecx,0x7
c000820a:	77 0b                	ja     c0008217 <VgaText::doANSI_SGR(int)+0x61>
c000820c:	8b 14 95 38 f8 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe07c8]
c0008213:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008216:	c3                   	ret    
c0008217:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000821a:	83 f9 07             	cmp    ecx,0x7
c000821d:	77 0a                	ja     c0008229 <VgaText::doANSI_SGR(int)+0x73>
c000821f:	8b 14 95 10 f8 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe07f0]
c0008226:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008229:	c3                   	ret    

c000822a <VgaText::setDefaultBgColour(VgaColour)>:
c000822a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000822e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008232:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0008235:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008238:	c3                   	ret    
c0008239:	90                   	nop

c000823a <VgaText::setDefaultFgColour(VgaColour)>:
c000823a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000823e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008242:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0008245:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008248:	c3                   	ret    
c0008249:	90                   	nop

c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000824a:	53                   	push   ebx
c000824b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000824f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008253:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008257:	51                   	push   ecx
c0008258:	e8 cd ff ff ff       	call   c000822a <VgaText::setDefaultBgColour(VgaColour)>
c000825d:	58                   	pop    eax
c000825e:	5a                   	pop    edx
c000825f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0008263:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008267:	5b                   	pop    ebx
c0008268:	eb d0                	jmp    c000823a <VgaText::setDefaultFgColour(VgaColour)>

c000826a <VgaText::setTitleTextColour(VgaColour)>:
c000826a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000826e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008272:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008275:	c3                   	ret    

c0008276 <VgaText::setTitleColour(VgaColour)>:
c0008276:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000827a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000827e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008281:	c3                   	ret    

c0008282 <VgaText::setTitle(char*)>:
c0008282:	c3                   	ret    
c0008283:	90                   	nop

c0008284 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008284:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0008288:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000828d:	83 e0 0f             	and    eax,0xf
c0008290:	c1 e2 04             	shl    edx,0x4
c0008293:	09 d0                	or     eax,edx
c0008295:	c3                   	ret    

c0008296 <VgaText::scrollScreen()>:
c0008296:	55                   	push   ebp
c0008297:	b9 01 00 00 00       	mov    ecx,0x1
c000829c:	57                   	push   edi
c000829d:	56                   	push   esi
c000829e:	53                   	push   ebx
c000829f:	83 ec 0c             	sub    esp,0xc
c00082a2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00082a6:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00082ac:	31 ff                	xor    edi,edi
c00082ae:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00082b1:	83 f9 18             	cmp    ecx,0x18
c00082b4:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00082b7:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c00082be:	75 27                	jne    c00082e7 <VgaText::scrollScreen()+0x51>
c00082c0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00082c3:	01 f5                	add    ebp,esi
c00082c5:	f7 c7 01 00 00 00    	test   edi,0x1
c00082cb:	74 16                	je     c00082e3 <VgaText::scrollScreen()+0x4d>
c00082cd:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00082d1:	50                   	push   eax
c00082d2:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00082d6:	50                   	push   eax
c00082d7:	e8 a8 ff ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c00082dc:	5a                   	pop    edx
c00082dd:	5a                   	pop    edx
c00082de:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c00082e1:	eb 04                	jmp    c00082e7 <VgaText::scrollScreen()+0x51>
c00082e3:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c00082e7:	47                   	inc    edi
c00082e8:	46                   	inc    esi
c00082e9:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00082ef:	75 bd                	jne    c00082ae <VgaText::scrollScreen()+0x18>
c00082f1:	41                   	inc    ecx
c00082f2:	83 f9 19             	cmp    ecx,0x19
c00082f5:	75 af                	jne    c00082a6 <VgaText::scrollScreen()+0x10>
c00082f7:	39 1d 64 0d 02 c0    	cmp    DWORD PTR ds:0xc0020d64,ebx
c00082fd:	75 1f                	jne    c000831e <VgaText::scrollScreen()+0x88>
c00082ff:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008303:	74 05                	je     c000830a <VgaText::scrollScreen()+0x74>
c0008305:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008308:	eb 14                	jmp    c000831e <VgaText::scrollScreen()+0x88>
c000830a:	50                   	push   eax
c000830b:	50                   	push   eax
c000830c:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008310:	50                   	push   eax
c0008311:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008315:	50                   	push   eax
c0008316:	e8 49 e0 00 00       	call   c0016364 <HalConsoleScroll(int, int)>
c000831b:	83 c4 10             	add    esp,0x10
c000831e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008322:	83 c4 0c             	add    esp,0xc
c0008325:	5b                   	pop    ebx
c0008326:	5e                   	pop    esi
c0008327:	5f                   	pop    edi
c0008328:	5d                   	pop    ebp
c0008329:	e9 72 fe ff ff       	jmp    c00081a0 <VgaText::updateCursor()>

c000832e <VgaText::combineCharAndColour(char, unsigned char)>:
c000832e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008333:	c1 e0 08             	shl    eax,0x8
c0008336:	89 c2                	mov    edx,eax
c0008338:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000833d:	09 d0                	or     eax,edx
c000833f:	c3                   	ret    

c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008340:	55                   	push   ebp
c0008341:	57                   	push   edi
c0008342:	56                   	push   esi
c0008343:	53                   	push   ebx
c0008344:	83 ec 1c             	sub    esp,0x1c
c0008347:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000834b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000834f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0008353:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008357:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000835b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000835f:	0f b6 c3             	movzx  eax,bl
c0008362:	50                   	push   eax
c0008363:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0008368:	50                   	push   eax
c0008369:	e8 16 ff ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c000836e:	5a                   	pop    edx
c000836f:	0f b6 c0             	movzx  eax,al
c0008372:	59                   	pop    ecx
c0008373:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0008378:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000837c:	50                   	push   eax
c000837d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008381:	e8 a8 ff ff ff       	call   c000832e <VgaText::combineCharAndColour(char, unsigned char)>
c0008386:	5a                   	pop    edx
c0008387:	66 6b d7 50          	imul   dx,di,0x50
c000838b:	59                   	pop    ecx
c000838c:	01 f2                	add    edx,esi
c000838e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008391:	0f b7 d2             	movzx  edx,dx
c0008394:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008398:	39 2d 64 0d 02 c0    	cmp    DWORD PTR ds:0xc0020d64,ebp
c000839e:	75 28                	jne    c00083c8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c00083a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083a4:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00083a8:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00083ac:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00083b0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00083b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00083b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00083bc:	83 c4 1c             	add    esp,0x1c
c00083bf:	5b                   	pop    ebx
c00083c0:	5e                   	pop    esi
c00083c1:	5f                   	pop    edi
c00083c2:	5d                   	pop    ebp
c00083c3:	e9 a4 e0 00 00       	jmp    c001646c <HalConsoleWriteCharacter(char, int, int, int, int)>
c00083c8:	83 c4 1c             	add    esp,0x1c
c00083cb:	5b                   	pop    ebx
c00083cc:	5e                   	pop    esi
c00083cd:	5f                   	pop    edi
c00083ce:	5d                   	pop    ebp
c00083cf:	c3                   	ret    

c00083d0 <VgaText::getCursorX()>:
c00083d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083d4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00083d7:	c3                   	ret    

c00083d8 <VgaText::getCursorY()>:
c00083d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083dc:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00083df:	c3                   	ret    

c00083e0 <VgaText::setCursor(int, int)>:
c00083e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00083e8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00083eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083ef:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00083f2:	e9 a9 fd ff ff       	jmp    c00081a0 <VgaText::updateCursor()>

c00083f7 <setActiveTerminal(VgaText*)>:
c00083f7:	53                   	push   ebx
c00083f8:	83 ec 08             	sub    esp,0x8
c00083fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00083ff:	85 db                	test   ebx,ebx
c0008401:	75 11                	jne    c0008414 <setActiveTerminal(VgaText*)+0x1d>
c0008403:	c7 44 24 10 c4 d8 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d8c4
c000840b:	83 c4 08             	add    esp,0x8
c000840e:	5b                   	pop    ebx
c000840f:	e9 2f 7d 00 00       	jmp    c0010143 <KePanic(char const*)>
c0008414:	a1 64 0d 02 c0       	mov    eax,ds:0xc0020d64
c0008419:	85 c0                	test   eax,eax
c000841b:	74 0c                	je     c0008429 <setActiveTerminal(VgaText*)+0x32>
c000841d:	83 ec 0c             	sub    esp,0xc
c0008420:	50                   	push   eax
c0008421:	e8 7a fd ff ff       	call   c00081a0 <VgaText::updateCursor()>
c0008426:	83 c4 10             	add    esp,0x10
c0008429:	89 1d 64 0d 02 c0    	mov    DWORD PTR ds:0xc0020d64,ebx
c000842f:	50                   	push   eax
c0008430:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008433:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008436:	53                   	push   ebx
c0008437:	e8 a4 ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c000843c:	83 c4 18             	add    esp,0x18
c000843f:	5b                   	pop    ebx
c0008440:	c3                   	ret    
c0008441:	90                   	nop

c0008442 <VgaText::clearScreen()>:
c0008442:	57                   	push   edi
c0008443:	56                   	push   esi
c0008444:	31 f6                	xor    esi,esi
c0008446:	53                   	push   ebx
c0008447:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000844b:	52                   	push   edx
c000844c:	6a 00                	push   0x0
c000844e:	6a 00                	push   0x0
c0008450:	53                   	push   ebx
c0008451:	e8 8a ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c0008456:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000845d:	83 c4 10             	add    esp,0x10
c0008460:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008463:	7e 20                	jle    c0008485 <VgaText::clearScreen()+0x43>
c0008465:	31 ff                	xor    edi,edi
c0008467:	50                   	push   eax
c0008468:	50                   	push   eax
c0008469:	56                   	push   esi
c000846a:	57                   	push   edi
c000846b:	47                   	inc    edi
c000846c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000846f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008472:	6a 20                	push   0x20
c0008474:	53                   	push   ebx
c0008475:	e8 c6 fe ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000847a:	83 c4 20             	add    esp,0x20
c000847d:	83 ff 50             	cmp    edi,0x50
c0008480:	75 e5                	jne    c0008467 <VgaText::clearScreen()+0x25>
c0008482:	46                   	inc    esi
c0008483:	eb db                	jmp    c0008460 <VgaText::clearScreen()+0x1e>
c0008485:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000848c:	5b                   	pop    ebx
c000848d:	5e                   	pop    esi
c000848e:	5f                   	pop    edi
c000848f:	c3                   	ret    

c0008490 <VgaText::setCursorX(int)>:
c0008490:	83 ec 10             	sub    esp,0x10
c0008493:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008497:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	50                   	push   eax
c000849f:	e8 3c ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00084a4:	83 c4 1c             	add    esp,0x1c
c00084a7:	c3                   	ret    

c00084a8 <VgaText::setCursorY(int)>:
c00084a8:	83 ec 10             	sub    esp,0x10
c00084ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084b3:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00084b6:	50                   	push   eax
c00084b7:	e8 24 ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00084bc:	83 c4 1c             	add    esp,0x1c
c00084bf:	c3                   	ret    

c00084c0 <VgaText::incrementCursor(bool)>:
c00084c0:	56                   	push   esi
c00084c1:	53                   	push   ebx
c00084c2:	51                   	push   ecx
c00084c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084c7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00084cb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00084ce:	40                   	inc    eax
c00084cf:	83 f8 50             	cmp    eax,0x50
c00084d2:	74 05                	je     c00084d9 <VgaText::incrementCursor(bool)+0x19>
c00084d4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00084d7:	eb 24                	jmp    c00084fd <VgaText::incrementCursor(bool)+0x3d>
c00084d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00084dc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00084e3:	8d 50 01             	lea    edx,[eax+0x1]
c00084e6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00084e9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00084ec:	75 0f                	jne    c00084fd <VgaText::incrementCursor(bool)+0x3d>
c00084ee:	83 ec 0c             	sub    esp,0xc
c00084f1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00084f4:	53                   	push   ebx
c00084f5:	e8 9c fd ff ff       	call   c0008296 <VgaText::scrollScreen()>
c00084fa:	83 c4 10             	add    esp,0x10
c00084fd:	89 f0                	mov    eax,esi
c00084ff:	84 c0                	test   al,al
c0008501:	74 0c                	je     c000850f <VgaText::incrementCursor(bool)+0x4f>
c0008503:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008507:	5a                   	pop    edx
c0008508:	5b                   	pop    ebx
c0008509:	5e                   	pop    esi
c000850a:	e9 91 fc ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c000850f:	58                   	pop    eax
c0008510:	5b                   	pop    ebx
c0008511:	5e                   	pop    esi
c0008512:	c3                   	ret    
c0008513:	90                   	nop

c0008514 <VgaText::decrementCursor(bool)>:
c0008514:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008518:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000851c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000851f:	85 c0                	test   eax,eax
c0008521:	74 04                	je     c0008527 <VgaText::decrementCursor(bool)+0x13>
c0008523:	48                   	dec    eax
c0008524:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008527:	84 c9                	test   cl,cl
c0008529:	74 09                	je     c0008534 <VgaText::decrementCursor(bool)+0x20>
c000852b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000852f:	e9 6c fc ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c0008534:	c3                   	ret    
c0008535:	90                   	nop

c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008536:	53                   	push   ebx
c0008537:	83 ec 08             	sub    esp,0x8
c000853a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000853e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008542:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008546:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000854a:	3c 07                	cmp    al,0x7
c000854c:	75 21                	jne    c000856f <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c000854e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008556:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c000855e:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0008566:	83 c4 08             	add    esp,0x8
c0008569:	5b                   	pop    ebx
c000856a:	e9 c0 2d 00 00       	jmp    c000b32f <Krnl::beep(int, int, bool)>
c000856f:	3c 0d                	cmp    al,0xd
c0008571:	75 09                	jne    c000857c <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0008573:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000857a:	eb 2c                	jmp    c00085a8 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c000857c:	3c 0a                	cmp    al,0xa
c000857e:	75 31                	jne    c00085b1 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0008580:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008583:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000858a:	8d 50 01             	lea    edx,[eax+0x1]
c000858d:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008590:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008593:	75 0f                	jne    c00085a4 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0008595:	83 ec 0c             	sub    esp,0xc
c0008598:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000859b:	53                   	push   ebx
c000859c:	e8 f5 fc ff ff       	call   c0008296 <VgaText::scrollScreen()>
c00085a1:	83 c4 10             	add    esp,0x10
c00085a4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00085a8:	83 c4 08             	add    esp,0x8
c00085ab:	5b                   	pop    ebx
c00085ac:	e9 ef fb ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c00085b1:	3c 08                	cmp    al,0x8
c00085b3:	75 25                	jne    c00085da <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c00085b5:	50                   	push   eax
c00085b6:	50                   	push   eax
c00085b7:	6a 01                	push   0x1
c00085b9:	53                   	push   ebx
c00085ba:	e8 55 ff ff ff       	call   c0008514 <VgaText::decrementCursor(bool)>
c00085bf:	5a                   	pop    edx
c00085c0:	59                   	pop    ecx
c00085c1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085c4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085c7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00085ca:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00085cd:	6a 20                	push   0x20
c00085cf:	53                   	push   ebx
c00085d0:	e8 6b fd ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085d5:	83 c4 28             	add    esp,0x28
c00085d8:	5b                   	pop    ebx
c00085d9:	c3                   	ret    
c00085da:	83 ec 08             	sub    esp,0x8
c00085dd:	0f be c0             	movsx  eax,al
c00085e0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085e3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085e6:	51                   	push   ecx
c00085e7:	52                   	push   edx
c00085e8:	50                   	push   eax
c00085e9:	53                   	push   ebx
c00085ea:	e8 51 fd ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085ef:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00085f3:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00085fb:	83 c4 28             	add    esp,0x28
c00085fe:	5b                   	pop    ebx
c00085ff:	e9 bc fe ff ff       	jmp    c00084c0 <VgaText::incrementCursor(bool)>

c0008604 <VgaText::putchar(char)>:
c0008604:	56                   	push   esi
c0008605:	53                   	push   ebx
c0008606:	83 ec 14             	sub    esp,0x14
c0008609:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000860d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008611:	3c 5b                	cmp    al,0x5b
c0008613:	75 18                	jne    c000862d <VgaText::putchar(char)+0x29>
c0008615:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008619:	74 1f                	je     c000863a <VgaText::putchar(char)+0x36>
c000861b:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008621:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008628:	e9 bd 00 00 00       	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c000862d:	3c 1b                	cmp    al,0x1b
c000862f:	75 09                	jne    c000863a <VgaText::putchar(char)+0x36>
c0008631:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008635:	e9 b0 00 00 00       	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c000863a:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000863d:	84 c9                	test   cl,cl
c000863f:	0f 84 92 00 00 00    	je     c00086d7 <VgaText::putchar(char)+0xd3>
c0008645:	8d 50 c0             	lea    edx,[eax-0x40]
c0008648:	80 fa 3e             	cmp    dl,0x3e
c000864b:	77 76                	ja     c00086c3 <VgaText::putchar(char)+0xbf>
c000864d:	3c 6d                	cmp    al,0x6d
c000864f:	75 47                	jne    c0008698 <VgaText::putchar(char)+0x94>
c0008651:	31 f6                	xor    esi,esi
c0008653:	31 d2                	xor    edx,edx
c0008655:	31 c0                	xor    eax,eax
c0008657:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000865a:	7e 2d                	jle    c0008689 <VgaText::putchar(char)+0x85>
c000865c:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008661:	80 fa 3b             	cmp    dl,0x3b
c0008664:	75 17                	jne    c000867d <VgaText::putchar(char)+0x79>
c0008666:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000866a:	50                   	push   eax
c000866b:	53                   	push   ebx
c000866c:	e8 45 fb ff ff       	call   c00081b6 <VgaText::doANSI_SGR(int)>
c0008671:	59                   	pop    ecx
c0008672:	31 d2                	xor    edx,edx
c0008674:	58                   	pop    eax
c0008675:	31 c0                	xor    eax,eax
c0008677:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000867b:	eb 09                	jmp    c0008686 <VgaText::putchar(char)+0x82>
c000867d:	6b c0 0a             	imul   eax,eax,0xa
c0008680:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008684:	88 ca                	mov    dl,cl
c0008686:	46                   	inc    esi
c0008687:	eb ce                	jmp    c0008657 <VgaText::putchar(char)+0x53>
c0008689:	84 d2                	test   dl,dl
c000868b:	74 2e                	je     c00086bb <VgaText::putchar(char)+0xb7>
c000868d:	50                   	push   eax
c000868e:	53                   	push   ebx
c000868f:	e8 22 fb ff ff       	call   c00081b6 <VgaText::doANSI_SGR(int)>
c0008694:	58                   	pop    eax
c0008695:	5a                   	pop    edx
c0008696:	eb 23                	jmp    c00086bb <VgaText::putchar(char)+0xb7>
c0008698:	3c 4a                	cmp    al,0x4a
c000869a:	75 1f                	jne    c00086bb <VgaText::putchar(char)+0xb7>
c000869c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00086a0:	75 19                	jne    c00086bb <VgaText::putchar(char)+0xb7>
c00086a2:	83 ec 0c             	sub    esp,0xc
c00086a5:	53                   	push   ebx
c00086a6:	e8 97 fd ff ff       	call   c0008442 <VgaText::clearScreen()>
c00086ab:	83 c4 0c             	add    esp,0xc
c00086ae:	6a 00                	push   0x0
c00086b0:	6a 00                	push   0x0
c00086b2:	53                   	push   ebx
c00086b3:	e8 28 fd ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00086b8:	83 c4 10             	add    esp,0x10
c00086bb:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00086c1:	eb 27                	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c00086c3:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c00086c6:	83 fa 0e             	cmp    edx,0xe
c00086c9:	7f 1f                	jg     c00086ea <VgaText::putchar(char)+0xe6>
c00086cb:	8d 4a 01             	lea    ecx,[edx+0x1]
c00086ce:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00086d1:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00086d5:	eb 13                	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c00086d7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00086da:	0f be c0             	movsx  eax,al
c00086dd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00086e0:	50                   	push   eax
c00086e1:	53                   	push   ebx
c00086e2:	e8 4f fe ff ff       	call   c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>
c00086e7:	83 c4 10             	add    esp,0x10
c00086ea:	83 c4 14             	add    esp,0x14
c00086ed:	5b                   	pop    ebx
c00086ee:	5e                   	pop    esi
c00086ef:	c3                   	ret    

c00086f0 <VgaText::putx(unsigned int)>:
c00086f0:	57                   	push   edi
c00086f1:	b9 11 00 00 00       	mov    ecx,0x11
c00086f6:	56                   	push   esi
c00086f7:	be d2 d8 01 c0       	mov    esi,0xc001d8d2
c00086fc:	53                   	push   ebx
c00086fd:	83 ec 20             	sub    esp,0x20
c0008700:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008704:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008708:	fc                   	cld    
c0008709:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000870b:	be 08 00 00 00       	mov    esi,0x8
c0008710:	50                   	push   eax
c0008711:	50                   	push   eax
c0008712:	89 d8                	mov    eax,ebx
c0008714:	c1 e3 04             	shl    ebx,0x4
c0008717:	c1 e8 1c             	shr    eax,0x1c
c000871a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000871f:	50                   	push   eax
c0008720:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008724:	e8 db fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008729:	83 c4 10             	add    esp,0x10
c000872c:	4e                   	dec    esi
c000872d:	75 e1                	jne    c0008710 <VgaText::putx(unsigned int)+0x20>
c000872f:	83 c4 20             	add    esp,0x20
c0008732:	5b                   	pop    ebx
c0008733:	5e                   	pop    esi
c0008734:	5f                   	pop    edi
c0008735:	c3                   	ret    

c0008736 <VgaText::puts(char const*)>:
c0008736:	53                   	push   ebx
c0008737:	83 ec 08             	sub    esp,0x8
c000873a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000873e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008741:	84 c0                	test   al,al
c0008743:	74 12                	je     c0008757 <VgaText::puts(char const*)+0x21>
c0008745:	43                   	inc    ebx
c0008746:	51                   	push   ecx
c0008747:	51                   	push   ecx
c0008748:	50                   	push   eax
c0008749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000874d:	e8 b2 fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008752:	83 c4 10             	add    esp,0x10
c0008755:	eb e7                	jmp    c000873e <VgaText::puts(char const*)+0x8>
c0008757:	83 c4 08             	add    esp,0x8
c000875a:	5b                   	pop    ebx
c000875b:	c3                   	ret    

c000875c <VgaText::write(unsigned long long, void*, int*)>:
c000875c:	55                   	push   ebp
c000875d:	57                   	push   edi
c000875e:	56                   	push   esi
c000875f:	53                   	push   ebx
c0008760:	83 ec 0c             	sub    esp,0xc
c0008763:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008767:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000876b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000876f:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008776:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008779:	39 eb                	cmp    ebx,ebp
c000877b:	74 13                	je     c0008790 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000877d:	43                   	inc    ebx
c000877e:	50                   	push   eax
c000877f:	50                   	push   eax
c0008780:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008784:	50                   	push   eax
c0008785:	56                   	push   esi
c0008786:	e8 79 fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c000878b:	83 c4 10             	add    esp,0x10
c000878e:	eb e9                	jmp    c0008779 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008790:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008797:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000879b:	89 38                	mov    DWORD PTR [eax],edi
c000879d:	83 c4 0c             	add    esp,0xc
c00087a0:	31 c0                	xor    eax,eax
c00087a2:	5b                   	pop    ebx
c00087a3:	5e                   	pop    esi
c00087a4:	5f                   	pop    edi
c00087a5:	5d                   	pop    ebp
c00087a6:	c3                   	ret    
c00087a7:	90                   	nop

c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00087a8:	55                   	push   ebp
c00087a9:	57                   	push   edi
c00087aa:	56                   	push   esi
c00087ab:	53                   	push   ebx
c00087ac:	83 ec 0c             	sub    esp,0xc
c00087af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00087b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087bf:	50                   	push   eax
c00087c0:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087c5:	50                   	push   eax
c00087c6:	e8 b9 fa ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c00087cb:	5a                   	pop    edx
c00087cc:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00087d1:	59                   	pop    ecx
c00087d2:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00087d5:	89 c5                	mov    ebp,eax
c00087d7:	0f b7 f6             	movzx  esi,si
c00087da:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00087de:	01 f6                	add    esi,esi
c00087e0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00087e3:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00087e6:	84 c0                	test   al,al
c00087e8:	0f 84 f4 00 00 00    	je     c00088e2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c00087ee:	3c 0d                	cmp    al,0xd
c00087f0:	75 0c                	jne    c00087fe <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c00087f2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00087f9:	e9 de 00 00 00       	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00087fe:	3c 0a                	cmp    al,0xa
c0008800:	75 45                	jne    c0008847 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0008802:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008805:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000880c:	8d 48 01             	lea    ecx,[eax+0x1]
c000880f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008812:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008815:	75 0f                	jne    c0008826 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0008817:	83 ec 0c             	sub    esp,0xc
c000881a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000881d:	53                   	push   ebx
c000881e:	e8 73 fa ff ff       	call   c0008296 <VgaText::scrollScreen()>
c0008823:	83 c4 10             	add    esp,0x10
c0008826:	83 ec 0c             	sub    esp,0xc
c0008829:	53                   	push   ebx
c000882a:	e8 71 f9 ff ff       	call   c00081a0 <VgaText::updateCursor()>
c000882f:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008834:	83 c4 10             	add    esp,0x10
c0008837:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000883a:	0f b7 f6             	movzx  esi,si
c000883d:	01 f6                	add    esi,esi
c000883f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008842:	e9 95 00 00 00       	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008847:	3c 08                	cmp    al,0x8
c0008849:	75 35                	jne    c0008880 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c000884b:	51                   	push   ecx
c000884c:	51                   	push   ecx
c000884d:	6a 01                	push   0x1
c000884f:	53                   	push   ebx
c0008850:	e8 bf fc ff ff       	call   c0008514 <VgaText::decrementCursor(bool)>
c0008855:	5e                   	pop    esi
c0008856:	58                   	pop    eax
c0008857:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000885a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000885d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008860:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008863:	6a 20                	push   0x20
c0008865:	53                   	push   ebx
c0008866:	e8 d5 fa ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000886b:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008870:	83 c4 20             	add    esp,0x20
c0008873:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008876:	0f b7 f6             	movzx  esi,si
c0008879:	01 f6                	add    esi,esi
c000887b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000887e:	eb 5c                	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008880:	52                   	push   edx
c0008881:	52                   	push   edx
c0008882:	89 ea                	mov    edx,ebp
c0008884:	0f b6 ca             	movzx  ecx,dl
c0008887:	51                   	push   ecx
c0008888:	50                   	push   eax
c0008889:	e8 a0 fa ff ff       	call   c000832e <VgaText::combineCharAndColour(char, unsigned char)>
c000888e:	83 c4 10             	add    esp,0x10
c0008891:	66 89 06             	mov    WORD PTR [esi],ax
c0008894:	39 1d 64 0d 02 c0    	cmp    DWORD PTR ds:0xc0020d64,ebx
c000889a:	75 1d                	jne    c00088b9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c000889c:	83 ec 0c             	sub    esp,0xc
c000889f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00088a2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00088a5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088a9:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088ad:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00088b0:	50                   	push   eax
c00088b1:	e8 b6 db 00 00       	call   c001646c <HalConsoleWriteCharacter(char, int, int, int, int)>
c00088b6:	83 c4 20             	add    esp,0x20
c00088b9:	83 c6 02             	add    esi,0x2
c00088bc:	50                   	push   eax
c00088bd:	50                   	push   eax
c00088be:	6a 00                	push   0x0
c00088c0:	53                   	push   ebx
c00088c1:	e8 fa fb ff ff       	call   c00084c0 <VgaText::incrementCursor(bool)>
c00088c6:	83 c4 10             	add    esp,0x10
c00088c9:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c00088cd:	75 0d                	jne    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00088cf:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00088d4:	0f b7 f6             	movzx  esi,si
c00088d7:	01 f6                	add    esi,esi
c00088d9:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00088dc:	47                   	inc    edi
c00088dd:	e9 01 ff ff ff       	jmp    c00087e3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c00088e2:	83 ec 0c             	sub    esp,0xc
c00088e5:	53                   	push   ebx
c00088e6:	e8 b5 f8 ff ff       	call   c00081a0 <VgaText::updateCursor()>
c00088eb:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00088f2:	83 c4 1c             	add    esp,0x1c
c00088f5:	5b                   	pop    ebx
c00088f6:	5e                   	pop    esi
c00088f7:	5f                   	pop    edi
c00088f8:	5d                   	pop    ebp
c00088f9:	c3                   	ret    

c00088fa <VgaText::VgaText(char const*)>:
c00088fa:	56                   	push   esi
c00088fb:	53                   	push   ebx
c00088fc:	83 ec 04             	sub    esp,0x4
c00088ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008903:	83 ec 08             	sub    esp,0x8
c0008906:	6a 00                	push   0x0
c0008908:	50                   	push   eax
c0008909:	e8 34 05 00 00       	call   c0008e42 <UnixFile::UnixFile(int)>
c000890e:	83 c4 10             	add    esp,0x10
c0008911:	ba 44 d9 01 c0       	mov    edx,0xc001d944
c0008916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000891a:	89 10                	mov    DWORD PTR [eax],edx
c000891c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008920:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000892b:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008936:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000893a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000893e:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008946:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000894d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008951:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000895c:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008967:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000896e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008972:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008979:	83 ec 0c             	sub    esp,0xc
c000897c:	6a 01                	push   0x1
c000897e:	e8 02 09 00 00       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0008983:	83 c4 10             	add    esp,0x10
c0008986:	89 c2                	mov    edx,eax
c0008988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000898c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000898f:	8b 1d 10 0e 02 c0    	mov    ebx,DWORD PTR ds:0xc0020e10
c0008995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008999:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000899c:	89 c6                	mov    esi,eax
c000899e:	e8 f2 f0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c00089a3:	68 05 0c 00 00       	push   0xc05
c00089a8:	56                   	push   esi
c00089a9:	50                   	push   eax
c00089aa:	53                   	push   ebx
c00089ab:	e8 6a 0f 00 00       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c00089b0:	83 c4 10             	add    esp,0x10
c00089b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089b7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00089ba:	83 ec 04             	sub    esp,0x4
c00089bd:	68 a0 0f 00 00       	push   0xfa0
c00089c2:	6a 00                	push   0x0
c00089c4:	50                   	push   eax
c00089c5:	e8 06 7b ff ff       	call   c00004d0 <memset>
c00089ca:	83 c4 10             	add    esp,0x10
c00089cd:	83 ec 04             	sub    esp,0x4
c00089d0:	6a 00                	push   0x0
c00089d2:	6a 07                	push   0x7
c00089d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089d8:	e8 6d f8 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00089dd:	83 c4 10             	add    esp,0x10
c00089e0:	83 ec 04             	sub    esp,0x4
c00089e3:	6a 00                	push   0x0
c00089e5:	6a 00                	push   0x0
c00089e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089eb:	e8 f0 f9 ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	83 ec 0c             	sub    esp,0xc
c00089f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089fa:	e8 43 fa ff ff       	call   c0008442 <VgaText::clearScreen()>
c00089ff:	83 c4 10             	add    esp,0x10
c0008a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a06:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a0e:	05 82 00 00 00       	add    eax,0x82
c0008a13:	83 ec 04             	sub    esp,0x4
c0008a16:	6a 30                	push   0x30
c0008a18:	6a 00                	push   0x0
c0008a1a:	50                   	push   eax
c0008a1b:	e8 b0 7a ff ff       	call   c00004d0 <memset>
c0008a20:	83 c4 10             	add    esp,0x10
c0008a23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a27:	05 b2 00 00 00       	add    eax,0xb2
c0008a2c:	83 ec 04             	sub    esp,0x4
c0008a2f:	68 80 00 00 00       	push   0x80
c0008a34:	6a 00                	push   0x0
c0008a36:	50                   	push   eax
c0008a37:	e8 94 7a ff ff       	call   c00004d0 <memset>
c0008a3c:	83 c4 10             	add    esp,0x10
c0008a3f:	90                   	nop
c0008a40:	83 c4 04             	add    esp,0x4
c0008a43:	5b                   	pop    ebx
c0008a44:	5e                   	pop    esi
c0008a45:	c3                   	ret    

c0008a46 <VgaText::receiveKey(unsigned char)>:
c0008a46:	57                   	push   edi
c0008a47:	56                   	push   esi
c0008a48:	53                   	push   ebx
c0008a49:	83 ec 10             	sub    esp,0x10
c0008a4c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008a50:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a54:	89 f0                	mov    eax,esi
c0008a56:	84 c0                	test   al,al
c0008a58:	0f 84 3b 01 00 00    	je     c0008b99 <VgaText::receiveKey(unsigned char)+0x153>
c0008a5e:	8d bb 82 00 00 00    	lea    edi,[ebx+0x82]
c0008a64:	3c 08                	cmp    al,0x8
c0008a66:	75 68                	jne    c0008ad0 <VgaText::receiveKey(unsigned char)+0x8a>
c0008a68:	83 ec 0c             	sub    esp,0xc
c0008a6b:	57                   	push   edi
c0008a6c:	e8 cf 7a ff ff       	call   c0000540 <strlen>
c0008a71:	83 c4 10             	add    esp,0x10
c0008a74:	85 c0                	test   eax,eax
c0008a76:	0f 84 be 00 00 00    	je     c0008b3a <VgaText::receiveKey(unsigned char)+0xf4>
c0008a7c:	50                   	push   eax
c0008a7d:	50                   	push   eax
c0008a7e:	6a 08                	push   0x8
c0008a80:	53                   	push   ebx
c0008a81:	e8 7e fb ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008a86:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008a89:	e8 b2 7a ff ff       	call   c0000540 <strlen>
c0008a8e:	83 c4 10             	add    esp,0x10
c0008a91:	8a 84 03 81 00 00 00 	mov    al,BYTE PTR [ebx+eax*1+0x81]
c0008a98:	3c 0d                	cmp    al,0xd
c0008a9a:	0f 95 c1             	setne  cl
c0008a9d:	3c 18                	cmp    al,0x18
c0008a9f:	0f 9e c2             	setle  dl
c0008aa2:	84 d1                	test   cl,dl
c0008aa4:	74 17                	je     c0008abd <VgaText::receiveKey(unsigned char)+0x77>
c0008aa6:	83 e8 08             	sub    eax,0x8
c0008aa9:	3c 02                	cmp    al,0x2
c0008aab:	76 10                	jbe    c0008abd <VgaText::receiveKey(unsigned char)+0x77>
c0008aad:	50                   	push   eax
c0008aae:	50                   	push   eax
c0008aaf:	68 e3 d8 01 c0       	push   0xc001d8e3
c0008ab4:	53                   	push   ebx
c0008ab5:	e8 7c fc ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0008aba:	83 c4 10             	add    esp,0x10
c0008abd:	83 ec 0c             	sub    esp,0xc
c0008ac0:	57                   	push   edi
c0008ac1:	e8 7a 7a ff ff       	call   c0000540 <strlen>
c0008ac6:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008ace:	eb 67                	jmp    c0008b37 <VgaText::receiveKey(unsigned char)+0xf1>
c0008ad0:	3c 18                	cmp    al,0x18
c0008ad2:	0f 96 c2             	setbe  dl
c0008ad5:	3c 0d                	cmp    al,0xd
c0008ad7:	0f 95 c0             	setne  al
c0008ada:	84 c2                	test   dl,al
c0008adc:	74 30                	je     c0008b0e <VgaText::receiveKey(unsigned char)+0xc8>
c0008ade:	8d 46 f7             	lea    eax,[esi-0x9]
c0008ae1:	3c 01                	cmp    al,0x1
c0008ae3:	76 29                	jbe    c0008b0e <VgaText::receiveKey(unsigned char)+0xc8>
c0008ae5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ae8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008aeb:	68 e9 d8 01 c0       	push   0xc001d8e9
c0008af0:	53                   	push   ebx
c0008af1:	e8 b2 fc ff ff       	call   c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008af6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008af9:	8d 46 40             	lea    eax,[esi+0x40]
c0008afc:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008aff:	0f b6 c0             	movzx  eax,al
c0008b02:	50                   	push   eax
c0008b03:	53                   	push   ebx
c0008b04:	e8 2d fa ff ff       	call   c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008b09:	83 c4 20             	add    esp,0x20
c0008b0c:	eb 11                	jmp    c0008b1f <VgaText::receiveKey(unsigned char)+0xd9>
c0008b0e:	89 f0                	mov    eax,esi
c0008b10:	51                   	push   ecx
c0008b11:	0f be c0             	movsx  eax,al
c0008b14:	51                   	push   ecx
c0008b15:	50                   	push   eax
c0008b16:	53                   	push   ebx
c0008b17:	e8 e8 fa ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008b1c:	83 c4 10             	add    esp,0x10
c0008b1f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008b24:	89 f0                	mov    eax,esi
c0008b26:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0008b2a:	52                   	push   edx
c0008b2b:	52                   	push   edx
c0008b2c:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008b30:	50                   	push   eax
c0008b31:	57                   	push   edi
c0008b32:	e8 89 7c ff ff       	call   c00007c0 <strcat>
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008b41:	75 06                	jne    c0008b49 <VgaText::receiveKey(unsigned char)+0x103>
c0008b43:	89 f0                	mov    eax,esi
c0008b45:	3c 0a                	cmp    al,0xa
c0008b47:	75 50                	jne    c0008b99 <VgaText::receiveKey(unsigned char)+0x153>
c0008b49:	83 ec 0c             	sub    esp,0xc
c0008b4c:	81 c3 b2 00 00 00    	add    ebx,0xb2
c0008b52:	53                   	push   ebx
c0008b53:	e8 e8 79 ff ff       	call   c0000540 <strlen>
c0008b58:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008b5b:	89 c6                	mov    esi,eax
c0008b5d:	e8 de 79 ff ff       	call   c0000540 <strlen>
c0008b62:	83 c4 10             	add    esp,0x10
c0008b65:	8d 44 06 04          	lea    eax,[esi+eax*1+0x4]
c0008b69:	3d 80 00 00 00       	cmp    eax,0x80
c0008b6e:	76 10                	jbe    c0008b80 <VgaText::receiveKey(unsigned char)+0x13a>
c0008b70:	83 ec 0c             	sub    esp,0xc
c0008b73:	68 ef d8 01 c0       	push   0xc001d8ef
c0008b78:	e8 c6 75 00 00       	call   c0010143 <KePanic(char const*)>
c0008b7d:	83 c4 10             	add    esp,0x10
c0008b80:	50                   	push   eax
c0008b81:	50                   	push   eax
c0008b82:	57                   	push   edi
c0008b83:	53                   	push   ebx
c0008b84:	e8 37 7c ff ff       	call   c00007c0 <strcat>
c0008b89:	83 c4 0c             	add    esp,0xc
c0008b8c:	6a 30                	push   0x30
c0008b8e:	6a 00                	push   0x0
c0008b90:	57                   	push   edi
c0008b91:	e8 3a 79 ff ff       	call   c00004d0 <memset>
c0008b96:	83 c4 10             	add    esp,0x10
c0008b99:	83 c4 10             	add    esp,0x10
c0008b9c:	5b                   	pop    ebx
c0008b9d:	5e                   	pop    esi
c0008b9e:	5f                   	pop    edi
c0008b9f:	c3                   	ret    

c0008ba0 <VgaText::doUpdate()>:
c0008ba0:	c3                   	ret    

c0008ba1 <newTerminal(char*)>:
c0008ba1:	83 ec 28             	sub    esp,0x28
c0008ba4:	68 34 01 00 00       	push   0x134
c0008ba9:	e8 0b ec ff ff       	call   c00077b9 <malloc>
c0008bae:	5a                   	pop    edx
c0008baf:	59                   	pop    ecx
c0008bb0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008bb4:	50                   	push   eax
c0008bb5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008bb9:	e8 3c fd ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c0008bbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bc2:	83 c4 2c             	add    esp,0x2c
c0008bc5:	c3                   	ret    
c0008bc6:	66 90                	xchg   ax,ax

c0008bc8 <TSS::TSS()>:
c0008bc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008bcc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008bd3:	90                   	nop
c0008bd4:	c3                   	ret    
c0008bd5:	90                   	nop
c0008bd6:	66 90                	xchg   ax,ax

c0008bd8 <TSS::setESP(unsigned long)>:
c0008bd8:	55                   	push   ebp
c0008bd9:	89 e5                	mov    ebp,esp
c0008bdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008be1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008be4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008be7:	90                   	nop
c0008be8:	5d                   	pop    ebp
c0008be9:	c3                   	ret    
c0008bea:	66 90                	xchg   ax,ax

c0008bec <TSS::flush()>:
c0008bec:	55                   	push   ebp
c0008bed:	89 e5                	mov    ebp,esp
c0008bef:	83 ec 10             	sub    esp,0x10
c0008bf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bf5:	8b 00                	mov    eax,DWORD PTR [eax]
c0008bf7:	83 c8 03             	or     eax,0x3
c0008bfa:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008bfe:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008c02:	66 89 d0             	mov    ax,dx
c0008c05:	0f 00 d8             	ltr    ax
c0008c08:	90                   	nop
c0008c09:	c9                   	leave  
c0008c0a:	c3                   	ret    
c0008c0b:	90                   	nop

c0008c0c <TSS::setup(unsigned long, unsigned long)>:
c0008c0c:	55                   	push   ebp
c0008c0d:	89 e5                	mov    ebp,esp
c0008c0f:	83 ec 18             	sub    esp,0x18
c0008c12:	83 ec 0c             	sub    esp,0xc
c0008c15:	6a 68                	push   0x68
c0008c17:	e8 9d eb ff ff       	call   c00077b9 <malloc>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	89 c2                	mov    edx,eax
c0008c21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c24:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c2d:	83 ec 04             	sub    esp,0x4
c0008c30:	6a 68                	push   0x68
c0008c32:	6a 00                	push   0x0
c0008c34:	50                   	push   eax
c0008c35:	e8 96 78 ff ff       	call   c00004d0 <memset>
c0008c3a:	83 c4 10             	add    esp,0x10
c0008c3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c43:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008c49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c4f:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008c55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c5b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008c5e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c67:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008c6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c73:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008c79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c7f:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008c85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c8b:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008c91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c94:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c97:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008c9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ca0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ca3:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0008ca9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008caf:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0008cb2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0008cb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cbb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008cbe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008cc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cc7:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0008cce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cd1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cd4:	0f 20 da             	mov    edx,cr3
c0008cd7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0008cda:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0008cdd:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0008ce0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ce3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ce6:	83 ec 08             	sub    esp,0x8
c0008ce9:	50                   	push   eax
c0008cea:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008ced:	50                   	push   eax
c0008cee:	e8 4d e3 ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0008cf3:	83 c4 10             	add    esp,0x10
c0008cf6:	83 ec 08             	sub    esp,0x8
c0008cf9:	6a 68                	push   0x68
c0008cfb:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008cfe:	50                   	push   eax
c0008cff:	e8 58 e3 ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0008d04:	83 c4 10             	add    esp,0x10
c0008d07:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008d0b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008d0e:	83 e0 0f             	and    eax,0xf
c0008d11:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008d14:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008d17:	83 c8 40             	or     eax,0x40
c0008d1a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008d1d:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c0008d22:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d28:	05 78 01 00 00       	add    eax,0x178
c0008d2d:	83 ec 04             	sub    esp,0x4
c0008d30:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0008d33:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0008d36:	50                   	push   eax
c0008d37:	e8 54 e3 ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0008d3c:	83 c4 10             	add    esp,0x10
c0008d3f:	89 c2                	mov    edx,eax
c0008d41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d44:	89 10                	mov    DWORD PTR [eax],edx
c0008d46:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c0008d4b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d51:	05 78 01 00 00       	add    eax,0x178
c0008d56:	83 ec 0c             	sub    esp,0xc
c0008d59:	50                   	push   eax
c0008d5a:	e8 5b e3 ff ff       	call   c00070ba <GDT::flush()>
c0008d5f:	83 c4 10             	add    esp,0x10
c0008d62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d65:	8b 00                	mov    eax,DWORD PTR [eax]
c0008d67:	c9                   	leave  
c0008d68:	c3                   	ret    
c0008d69:	90                   	nop

c0008d6a <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008d6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008d6e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008d72:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d75:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008d7a:	75 08                	jne    c0008d84 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008d7c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008d82:	eb 38                	jmp    c0008dbc <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0008d84:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008d89:	75 17                	jne    c0008da2 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0008d8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008d90:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008d93:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008d99:	8b 10                	mov    edx,DWORD PTR [eax]
c0008d9b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008d9f:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0008da2:	89 c1                	mov    ecx,eax
c0008da4:	83 e1 fd             	and    ecx,0xfffffffd
c0008da7:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0008dad:	74 cd                	je     c0008d7c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008daf:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008db4:	83 e0 ef             	and    eax,0xffffffef
c0008db7:	83 f8 08             	cmp    eax,0x8
c0008dba:	76 c0                	jbe    c0008d7c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008dbc:	31 c0                	xor    eax,eax
c0008dbe:	c3                   	ret    
c0008dbf:	90                   	nop

c0008dc0 <ReservedFilename::isAtty()>:
c0008dc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008dc4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008dc7:	31 c0                	xor    eax,eax
c0008dc9:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0008dcf:	74 09                	je     c0008dda <ReservedFilename::isAtty()+0x1a>
c0008dd1:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0008dd7:	0f 94 c0             	sete   al
c0008dda:	c3                   	ret    
c0008ddb:	90                   	nop

c0008ddc <ReservedFilename::write(unsigned long long, void*, int*)>:
c0008ddc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008de0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008de4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008de7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008deb:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008df0:	75 08                	jne    c0008dfa <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0008df2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008df8:	eb 3d                	jmp    c0008e37 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008dfa:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008dff:	75 17                	jne    c0008e18 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0008e01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008e06:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008e09:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008e0f:	8b 10                	mov    edx,DWORD PTR [eax]
c0008e11:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008e15:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0008e18:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0008e1d:	75 04                	jne    c0008e23 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0008e1f:	89 0a                	mov    DWORD PTR [edx],ecx
c0008e21:	eb 14                	jmp    c0008e37 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008e23:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0008e28:	74 c8                	je     c0008df2 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008e2a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008e2f:	83 e0 ef             	and    eax,0xffffffef
c0008e32:	83 f8 08             	cmp    eax,0x8
c0008e35:	76 bb                	jbe    c0008df2 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008e37:	31 c0                	xor    eax,eax
c0008e39:	c3                   	ret    

c0008e3a <UnixFile::getFileDescriptor()>:
c0008e3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008e41:	c3                   	ret    

c0008e42 <UnixFile::UnixFile(int)>:
c0008e42:	53                   	push   ebx
c0008e43:	83 ec 28             	sub    esp,0x28
c0008e46:	ba 0c da 01 c0       	mov    edx,0xc001da0c
c0008e4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008e4f:	89 10                	mov    DWORD PTR [eax],edx
c0008e51:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008e59:	0f 8f 8c 01 00 00    	jg     c0008feb <UnixFile::UnixFile(int)+0x1a9>
c0008e5f:	a1 c0 f9 01 c0       	mov    eax,ds:0xc001f9c0
c0008e64:	8d 50 01             	lea    edx,[eax+0x1]
c0008e67:	89 15 c0 f9 01 c0    	mov    DWORD PTR ds:0xc001f9c0,edx
c0008e6d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008e71:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008e74:	83 ec 08             	sub    esp,0x8
c0008e77:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008e7b:	68 f8 0d 02 c0       	push   0xc0020df8
c0008e80:	e8 63 36 01 00       	call   c001c4e8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0008e85:	83 c4 10             	add    esp,0x10
c0008e88:	a0 f4 0d 02 c0       	mov    al,ds:0xc0020df4
c0008e8d:	83 f0 01             	xor    eax,0x1
c0008e90:	84 c0                	test   al,al
c0008e92:	0f 84 54 01 00 00    	je     c0008fec <UnixFile::UnixFile(int)+0x1aa>
c0008e98:	c6 05 f4 0d 02 c0 01 	mov    BYTE PTR ds:0xc0020df4,0x1
c0008e9f:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0008ea7:	83 ec 0c             	sub    esp,0xc
c0008eaa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008eae:	e8 06 e9 ff ff       	call   c00077b9 <malloc>
c0008eb3:	83 c4 10             	add    esp,0x10
c0008eb6:	89 c3                	mov    ebx,eax
c0008eb8:	83 ec 08             	sub    esp,0x8
c0008ebb:	68 03 ff ff 0f       	push   0xfffff03
c0008ec0:	53                   	push   ebx
c0008ec1:	e8 2c 01 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008ec6:	83 c4 10             	add    esp,0x10
c0008ec9:	89 1d ec 0d 02 c0    	mov    DWORD PTR ds:0xc0020dec,ebx
c0008ecf:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0008ed7:	83 ec 0c             	sub    esp,0xc
c0008eda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ede:	e8 d6 e8 ff ff       	call   c00077b9 <malloc>
c0008ee3:	83 c4 10             	add    esp,0x10
c0008ee6:	89 c3                	mov    ebx,eax
c0008ee8:	83 ec 08             	sub    esp,0x8
c0008eeb:	68 01 ff ff 0f       	push   0xfffff01
c0008ef0:	53                   	push   ebx
c0008ef1:	e8 fc 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008ef6:	83 c4 10             	add    esp,0x10
c0008ef9:	89 1d f0 0d 02 c0    	mov    DWORD PTR ds:0xc0020df0,ebx
c0008eff:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0008f07:	83 ec 0c             	sub    esp,0xc
c0008f0a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008f0e:	e8 a6 e8 ff ff       	call   c00077b9 <malloc>
c0008f13:	83 c4 10             	add    esp,0x10
c0008f16:	89 c3                	mov    ebx,eax
c0008f18:	83 ec 08             	sub    esp,0x8
c0008f1b:	68 00 ff ff 0f       	push   0xfffff00
c0008f20:	53                   	push   ebx
c0008f21:	e8 cc 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008f26:	83 c4 10             	add    esp,0x10
c0008f29:	89 1d e4 0d 02 c0    	mov    DWORD PTR ds:0xc0020de4,ebx
c0008f2f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0008f37:	83 ec 0c             	sub    esp,0xc
c0008f3a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008f3e:	e8 76 e8 ff ff       	call   c00077b9 <malloc>
c0008f43:	83 c4 10             	add    esp,0x10
c0008f46:	89 c3                	mov    ebx,eax
c0008f48:	83 ec 08             	sub    esp,0x8
c0008f4b:	68 02 ff ff 0f       	push   0xfffff02
c0008f50:	53                   	push   ebx
c0008f51:	e8 9c 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008f56:	83 c4 10             	add    esp,0x10
c0008f59:	89 1d e8 0d 02 c0    	mov    DWORD PTR ds:0xc0020de8,ebx
c0008f5f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0008f67:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0008f6c:	7f 7e                	jg     c0008fec <UnixFile::UnixFile(int)+0x1aa>
c0008f6e:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008f7d:	e8 37 e8 ff ff       	call   c00077b9 <malloc>
c0008f82:	83 c4 10             	add    esp,0x10
c0008f85:	89 c3                	mov    ebx,eax
c0008f87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f8b:	05 10 ff ff 0f       	add    eax,0xfffff10
c0008f90:	83 ec 08             	sub    esp,0x8
c0008f93:	50                   	push   eax
c0008f94:	53                   	push   ebx
c0008f95:	e8 58 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008f9a:	83 c4 10             	add    esp,0x10
c0008f9d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fa1:	89 1c 85 c0 0d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf240],ebx
c0008fa8:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0008fb0:	83 ec 0c             	sub    esp,0xc
c0008fb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb7:	e8 fd e7 ff ff       	call   c00077b9 <malloc>
c0008fbc:	83 c4 10             	add    esp,0x10
c0008fbf:	89 c3                	mov    ebx,eax
c0008fc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fc5:	05 20 ff ff 0f       	add    eax,0xfffff20
c0008fca:	83 ec 08             	sub    esp,0x8
c0008fcd:	50                   	push   eax
c0008fce:	53                   	push   ebx
c0008fcf:	e8 1e 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008fd4:	83 c4 10             	add    esp,0x10
c0008fd7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fdb:	89 1c 85 80 0d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf280],ebx
c0008fe2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008fe6:	e9 7c ff ff ff       	jmp    c0008f67 <UnixFile::UnixFile(int)+0x125>
c0008feb:	90                   	nop
c0008fec:	83 c4 28             	add    esp,0x28
c0008fef:	5b                   	pop    ebx
c0008ff0:	c3                   	ret    
c0008ff1:	90                   	nop

c0008ff2 <ReservedFilename::ReservedFilename(int)>:
c0008ff2:	83 ec 0c             	sub    esp,0xc
c0008ff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ff9:	83 ec 08             	sub    esp,0x8
c0008ffc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009000:	50                   	push   eax
c0009001:	e8 3c fe ff ff       	call   c0008e42 <UnixFile::UnixFile(int)>
c0009006:	83 c4 10             	add    esp,0x10
c0009009:	ba 28 da 01 c0       	mov    edx,0xc001da28
c000900e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009012:	89 10                	mov    DWORD PTR [eax],edx
c0009014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009018:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000901c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000901f:	90                   	nop
c0009020:	83 c4 0c             	add    esp,0xc
c0009023:	c3                   	ret    

c0009024 <UnixFile::~UnixFile()>:
c0009024:	83 ec 1c             	sub    esp,0x1c
c0009027:	ba 0c da 01 c0       	mov    edx,0xc001da0c
c000902c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009030:	89 10                	mov    DWORD PTR [eax],edx
c0009032:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009036:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009039:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000903e:	7f 73                	jg     c00090b3 <UnixFile::~UnixFile()+0x8f>
c0009040:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009048:	83 ec 0c             	sub    esp,0xc
c000904b:	68 f8 0d 02 c0       	push   0xc0020df8
c0009050:	e8 67 35 01 00       	call   c001c5bc <LinkedList<UnixFile>::getFirstElement()>
c0009055:	83 c4 10             	add    esp,0x10
c0009058:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000905c:	83 ec 0c             	sub    esp,0xc
c000905f:	68 f8 0d 02 c0       	push   0xc0020df8
c0009064:	e8 5b 35 01 00       	call   c001c5c4 <LinkedList<UnixFile>::removeFirst()>
c0009069:	83 c4 10             	add    esp,0x10
c000906c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009070:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009074:	74 40                	je     c00090b6 <UnixFile::~UnixFile()+0x92>
c0009076:	83 ec 08             	sub    esp,0x8
c0009079:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000907d:	68 f8 0d 02 c0       	push   0xc0020df8
c0009082:	e8 61 34 01 00       	call   c001c4e8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009087:	83 c4 10             	add    esp,0x10
c000908a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000908e:	8d 50 01             	lea    edx,[eax+0x1]
c0009091:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009095:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000909a:	0f 94 c0             	sete   al
c000909d:	84 c0                	test   al,al
c000909f:	74 a7                	je     c0009048 <UnixFile::~UnixFile()+0x24>
c00090a1:	83 ec 0c             	sub    esp,0xc
c00090a4:	68 e4 d9 01 c0       	push   0xc001d9e4
c00090a9:	e8 95 70 00 00       	call   c0010143 <KePanic(char const*)>
c00090ae:	83 c4 10             	add    esp,0x10
c00090b1:	eb 95                	jmp    c0009048 <UnixFile::~UnixFile()+0x24>
c00090b3:	90                   	nop
c00090b4:	eb 01                	jmp    c00090b7 <UnixFile::~UnixFile()+0x93>
c00090b6:	90                   	nop
c00090b7:	90                   	nop
c00090b8:	83 c4 1c             	add    esp,0x1c
c00090bb:	c3                   	ret    

c00090bc <UnixFile::~UnixFile()>:
c00090bc:	83 ec 0c             	sub    esp,0xc
c00090bf:	83 ec 0c             	sub    esp,0xc
c00090c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c6:	e8 59 ff ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c00090cb:	83 c4 10             	add    esp,0x10
c00090ce:	83 ec 08             	sub    esp,0x8
c00090d1:	6a 0c                	push   0xc
c00090d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090d7:	e8 06 13 00 00       	call   c000a3e2 <operator delete(void*, unsigned long)>
c00090dc:	83 c4 10             	add    esp,0x10
c00090df:	83 c4 0c             	add    esp,0xc
c00090e2:	c3                   	ret    
c00090e3:	90                   	nop

c00090e4 <ReservedFilename::~ReservedFilename()>:
c00090e4:	83 ec 0c             	sub    esp,0xc
c00090e7:	ba 28 da 01 c0       	mov    edx,0xc001da28
c00090ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f0:	89 10                	mov    DWORD PTR [eax],edx
c00090f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f6:	83 ec 0c             	sub    esp,0xc
c00090f9:	50                   	push   eax
c00090fa:	e8 25 ff ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	90                   	nop
c0009103:	83 c4 0c             	add    esp,0xc
c0009106:	c3                   	ret    
c0009107:	90                   	nop

c0009108 <ReservedFilename::~ReservedFilename()>:
c0009108:	83 ec 0c             	sub    esp,0xc
c000910b:	83 ec 0c             	sub    esp,0xc
c000910e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009112:	e8 cd ff ff ff       	call   c00090e4 <ReservedFilename::~ReservedFilename()>
c0009117:	83 c4 10             	add    esp,0x10
c000911a:	83 ec 08             	sub    esp,0x8
c000911d:	6a 0c                	push   0xc
c000911f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009123:	e8 ba 12 00 00       	call   c000a3e2 <operator delete(void*, unsigned long)>
c0009128:	83 c4 10             	add    esp,0x10
c000912b:	83 c4 0c             	add    esp,0xc
c000912e:	c3                   	ret    

c000912f <getFromFileDescriptor(int)>:
c000912f:	53                   	push   ebx
c0009130:	83 ec 08             	sub    esp,0x8
c0009133:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009137:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000913d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0009143:	7f 2c                	jg     c0009171 <getFromFileDescriptor(int)+0x42>
c0009145:	83 ec 0c             	sub    esp,0xc
c0009148:	68 f8 0d 02 c0       	push   0xc0020df8
c000914d:	e8 6a 34 01 00       	call   c001c5bc <LinkedList<UnixFile>::getFirstElement()>
c0009152:	83 c4 10             	add    esp,0x10
c0009155:	85 c0                	test   eax,eax
c0009157:	75 04                	jne    c000915d <getFromFileDescriptor(int)+0x2e>
c0009159:	31 c0                	xor    eax,eax
c000915b:	eb 6e                	jmp    c00091cb <getFromFileDescriptor(int)+0x9c>
c000915d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009160:	74 69                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c0009162:	52                   	push   edx
c0009163:	52                   	push   edx
c0009164:	50                   	push   eax
c0009165:	68 f8 0d 02 c0       	push   0xc0020df8
c000916a:	e8 f7 34 01 00       	call   c001c666 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000916f:	eb e1                	jmp    c0009152 <getFromFileDescriptor(int)+0x23>
c0009171:	a1 ec 0d 02 c0       	mov    eax,ds:0xc0020dec
c0009176:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000917c:	74 4d                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c000917e:	a1 f0 0d 02 c0       	mov    eax,ds:0xc0020df0
c0009183:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009189:	74 40                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c000918b:	a1 e8 0d 02 c0       	mov    eax,ds:0xc0020de8
c0009190:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0009196:	74 33                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c0009198:	a1 e4 0d 02 c0       	mov    eax,ds:0xc0020de4
c000919d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00091a3:	74 26                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c00091a5:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00091ab:	83 f8 08             	cmp    eax,0x8
c00091ae:	77 09                	ja     c00091b9 <getFromFileDescriptor(int)+0x8a>
c00091b0:	8b 04 85 c0 0d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf240]
c00091b7:	eb 12                	jmp    c00091cb <getFromFileDescriptor(int)+0x9c>
c00091b9:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00091bf:	83 fb 08             	cmp    ebx,0x8
c00091c2:	77 95                	ja     c0009159 <getFromFileDescriptor(int)+0x2a>
c00091c4:	8b 04 9d 80 0d 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdf280]
c00091cb:	83 c4 08             	add    esp,0x8
c00091ce:	5b                   	pop    ebx
c00091cf:	c3                   	ret    

c00091d0 <__static_initialization_and_destruction_0(int, int)>:
c00091d0:	83 ec 0c             	sub    esp,0xc
c00091d3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00091d8:	75 34                	jne    c000920e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00091da:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00091e2:	75 2a                	jne    c000920e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00091e4:	83 ec 0c             	sub    esp,0xc
c00091e7:	68 f8 0d 02 c0       	push   0xc0020df8
c00091ec:	e8 b5 32 01 00       	call   c001c4a6 <LinkedList<UnixFile>::LinkedList()>
c00091f1:	83 c4 10             	add    esp,0x10
c00091f4:	83 ec 04             	sub    esp,0x4
c00091f7:	68 54 f9 01 c0       	push   0xc001f954
c00091fc:	68 f8 0d 02 c0       	push   0xc0020df8
c0009201:	68 a4 c4 01 c0       	push   0xc001c4a4
c0009206:	e8 87 11 00 00       	call   c000a392 <__cxa_atexit>
c000920b:	83 c4 10             	add    esp,0x10
c000920e:	90                   	nop
c000920f:	83 c4 0c             	add    esp,0xc
c0009212:	c3                   	ret    

c0009213 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009213:	83 ec 0c             	sub    esp,0xc
c0009216:	83 ec 08             	sub    esp,0x8
c0009219:	68 ff ff 00 00       	push   0xffff
c000921e:	6a 01                	push   0x1
c0009220:	e8 ab ff ff ff       	call   c00091d0 <__static_initialization_and_destruction_0(int, int)>
c0009225:	83 c4 10             	add    esp,0x10
c0009228:	83 c4 0c             	add    esp,0xc
c000922b:	c3                   	ret    

c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000922c:	53                   	push   ebx
c000922d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009231:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009235:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000923b:	89 c8                	mov    eax,ecx
c000923d:	d1 e8                	shr    eax,1
c000923f:	03 05 c8 f9 01 c0    	add    eax,DWORD PTR ds:0xc001f9c8
c0009245:	83 e1 01             	and    ecx,0x1
c0009248:	8a 10                	mov    dl,BYTE PTR [eax]
c000924a:	75 09                	jne    c0009255 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000924c:	83 e2 f0             	and    edx,0xfffffff0
c000924f:	09 da                	or     edx,ebx
c0009251:	88 10                	mov    BYTE PTR [eax],dl
c0009253:	5b                   	pop    ebx
c0009254:	c3                   	ret    
c0009255:	c1 e3 04             	shl    ebx,0x4
c0009258:	83 e2 0f             	and    edx,0xf
c000925b:	09 da                	or     edx,ebx
c000925d:	88 10                	mov    BYTE PTR [eax],dl
c000925f:	5b                   	pop    ebx
c0009260:	c3                   	ret    

c0009261 <Virt::getPageState(unsigned long)>:
c0009261:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009265:	8b 0d c8 f9 01 c0    	mov    ecx,DWORD PTR ds:0xc001f9c8
c000926b:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0009271:	89 d0                	mov    eax,edx
c0009273:	d1 e8                	shr    eax,1
c0009275:	83 e2 01             	and    edx,0x1
c0009278:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000927b:	75 04                	jne    c0009281 <Virt::getPageState(unsigned long)+0x20>
c000927d:	83 e0 0f             	and    eax,0xf
c0009280:	c3                   	ret    
c0009281:	c0 e8 04             	shr    al,0x4
c0009284:	c3                   	ret    

c0009285 <Virt::allocateKernelVirtualPages(int)>:
c0009285:	55                   	push   ebp
c0009286:	31 ed                	xor    ebp,ebp
c0009288:	57                   	push   edi
c0009289:	56                   	push   esi
c000928a:	53                   	push   ebx
c000928b:	31 db                	xor    ebx,ebx
c000928d:	83 ec 1c             	sub    esp,0x1c
c0009290:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009294:	8b 3d c4 f9 01 c0    	mov    edi,DWORD PTR ds:0xc001f9c4
c000929a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000929f:	57                   	push   edi
c00092a0:	e8 bc ff ff ff       	call   c0009261 <Virt::getPageState(unsigned long)>
c00092a5:	5a                   	pop    edx
c00092a6:	84 c0                	test   al,al
c00092a8:	75 3a                	jne    c00092e4 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00092aa:	85 db                	test   ebx,ebx
c00092ac:	75 02                	jne    c00092b0 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00092ae:	89 fd                	mov    ebp,edi
c00092b0:	43                   	inc    ebx
c00092b1:	39 f3                	cmp    ebx,esi
c00092b3:	74 5a                	je     c000930f <Virt::allocateKernelVirtualPages(int)+0x8a>
c00092b5:	47                   	inc    edi
c00092b6:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00092bc:	76 31                	jbe    c00092ef <Virt::allocateKernelVirtualPages(int)+0x6a>
c00092be:	c7 05 c4 f9 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001f9c4,0xc8000
c00092c8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00092cd:	75 28                	jne    c00092f7 <Virt::allocateKernelVirtualPages(int)+0x72>
c00092cf:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00092d4:	bf 00 80 0c 00       	mov    edi,0xc8000
c00092d9:	57                   	push   edi
c00092da:	e8 82 ff ff ff       	call   c0009261 <Virt::getPageState(unsigned long)>
c00092df:	5a                   	pop    edx
c00092e0:	84 c0                	test   al,al
c00092e2:	74 c6                	je     c00092aa <Virt::allocateKernelVirtualPages(int)+0x25>
c00092e4:	31 db                	xor    ebx,ebx
c00092e6:	47                   	inc    edi
c00092e7:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00092ed:	77 cf                	ja     c00092be <Virt::allocateKernelVirtualPages(int)+0x39>
c00092ef:	89 3d c4 f9 01 c0    	mov    DWORD PTR ds:0xc001f9c4,edi
c00092f5:	eb a8                	jmp    c000929f <Virt::allocateKernelVirtualPages(int)+0x1a>
c00092f7:	83 ec 0c             	sub    esp,0xc
c00092fa:	68 3c da 01 c0       	push   0xc001da3c
c00092ff:	e8 3f 6e 00 00       	call   c0010143 <KePanic(char const*)>
c0009304:	8b 3d c4 f9 01 c0    	mov    edi,DWORD PTR ds:0xc001f9c4
c000930a:	83 c4 10             	add    esp,0x10
c000930d:	eb 90                	jmp    c000929f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000930f:	89 2d c4 f9 01 c0    	mov    DWORD PTR ds:0xc001f9c4,ebp
c0009315:	4b                   	dec    ebx
c0009316:	74 5f                	je     c0009377 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0009318:	85 f6                	test   esi,esi
c000931a:	74 3d                	je     c0009359 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000931c:	89 e8                	mov    eax,ebp
c000931e:	31 db                	xor    ebx,ebx
c0009320:	8d 7e ff             	lea    edi,[esi-0x1]
c0009323:	eb 14                	jmp    c0009339 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0009325:	6a 01                	push   0x1
c0009327:	43                   	inc    ebx
c0009328:	50                   	push   eax
c0009329:	e8 fe fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000932e:	58                   	pop    eax
c000932f:	39 f3                	cmp    ebx,esi
c0009331:	5a                   	pop    edx
c0009332:	74 25                	je     c0009359 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009334:	a1 c4 f9 01 c0       	mov    eax,ds:0xc001f9c4
c0009339:	8d 50 01             	lea    edx,[eax+0x1]
c000933c:	85 db                	test   ebx,ebx
c000933e:	89 15 c4 f9 01 c0    	mov    DWORD PTR ds:0xc001f9c4,edx
c0009344:	74 20                	je     c0009366 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0009346:	39 df                	cmp    edi,ebx
c0009348:	75 db                	jne    c0009325 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000934a:	6a 03                	push   0x3
c000934c:	43                   	inc    ebx
c000934d:	50                   	push   eax
c000934e:	e8 d9 fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009353:	59                   	pop    ecx
c0009354:	39 f3                	cmp    ebx,esi
c0009356:	58                   	pop    eax
c0009357:	75 db                	jne    c0009334 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009359:	83 c4 1c             	add    esp,0x1c
c000935c:	89 e8                	mov    eax,ebp
c000935e:	5b                   	pop    ebx
c000935f:	c1 e0 0c             	shl    eax,0xc
c0009362:	5e                   	pop    esi
c0009363:	5f                   	pop    edi
c0009364:	5d                   	pop    ebp
c0009365:	c3                   	ret    
c0009366:	6a 02                	push   0x2
c0009368:	bb 01 00 00 00       	mov    ebx,0x1
c000936d:	50                   	push   eax
c000936e:	e8 b9 fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009373:	58                   	pop    eax
c0009374:	5a                   	pop    edx
c0009375:	eb bd                	jmp    c0009334 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009377:	6a 04                	push   0x4
c0009379:	8d 45 01             	lea    eax,[ebp+0x1]
c000937c:	55                   	push   ebp
c000937d:	a3 c4 f9 01 c0       	mov    ds:0xc001f9c4,eax
c0009382:	e8 a5 fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009387:	59                   	pop    ecx
c0009388:	89 e8                	mov    eax,ebp
c000938a:	5b                   	pop    ebx
c000938b:	c1 e0 0c             	shl    eax,0xc
c000938e:	83 c4 1c             	add    esp,0x1c
c0009391:	5b                   	pop    ebx
c0009392:	5e                   	pop    esi
c0009393:	5f                   	pop    edi
c0009394:	5d                   	pop    ebp
c0009395:	c3                   	ret    

c0009396 <Virt::freeSwapfilePage(unsigned long)>:
c0009396:	53                   	push   ebx
c0009397:	8b 15 0c 0e 02 c0    	mov    edx,DWORD PTR ds:0xc0020e0c
c000939d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00093a1:	b8 01 00 00 00       	mov    eax,0x1
c00093a6:	89 cb                	mov    ebx,ecx
c00093a8:	d3 e0                	shl    eax,cl
c00093aa:	c1 eb 05             	shr    ebx,0x5
c00093ad:	f7 d0                	not    eax
c00093af:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00093b2:	5b                   	pop    ebx
c00093b3:	c3                   	ret    

c00093b4 <Virt::swapIDToSector(unsigned long)>:
c00093b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00093b8:	0f af 05 cc f9 01 c0 	imul   eax,DWORD PTR ds:0xc001f9cc
c00093bf:	03 05 d4 f9 01 c0    	add    eax,DWORD PTR ds:0xc001f9d4
c00093c5:	c3                   	ret    

c00093c6 <Virt::allocateSwapfilePage()>:
c00093c6:	55                   	push   ebp
c00093c7:	31 d2                	xor    edx,edx
c00093c9:	57                   	push   edi
c00093ca:	56                   	push   esi
c00093cb:	53                   	push   ebx
c00093cc:	83 ec 0c             	sub    esp,0xc
c00093cf:	8b 0d cc f9 01 c0    	mov    ecx,DWORD PTR ds:0xc001f9cc
c00093d5:	a1 d0 f9 01 c0       	mov    eax,ds:0xc001f9d0
c00093da:	f7 f1                	div    ecx
c00093dc:	39 0d d0 f9 01 c0    	cmp    DWORD PTR ds:0xc001f9d0,ecx
c00093e2:	72 2d                	jb     c0009411 <Virt::allocateSwapfilePage()+0x4b>
c00093e4:	8b 35 0c 0e 02 c0    	mov    esi,DWORD PTR ds:0xc0020e0c
c00093ea:	8b 16                	mov    edx,DWORD PTR [esi]
c00093ec:	f6 c2 01             	test   dl,0x1
c00093ef:	74 3c                	je     c000942d <Virt::allocateSwapfilePage()+0x67>
c00093f1:	31 c9                	xor    ecx,ecx
c00093f3:	bf 01 00 00 00       	mov    edi,0x1
c00093f8:	eb 12                	jmp    c000940c <Virt::allocateSwapfilePage()+0x46>
c00093fa:	89 fd                	mov    ebp,edi
c00093fc:	89 ca                	mov    edx,ecx
c00093fe:	d3 e5                	shl    ebp,cl
c0009400:	c1 ea 05             	shr    edx,0x5
c0009403:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009406:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009408:	85 ea                	test   edx,ebp
c000940a:	74 2a                	je     c0009436 <Virt::allocateSwapfilePage()+0x70>
c000940c:	41                   	inc    ecx
c000940d:	39 c8                	cmp    eax,ecx
c000940f:	77 e9                	ja     c00093fa <Virt::allocateSwapfilePage()+0x34>
c0009411:	83 ec 0c             	sub    esp,0xc
c0009414:	68 a3 db 01 c0       	push   0xc001dba3
c0009419:	e8 25 6d 00 00       	call   c0010143 <KePanic(char const*)>
c000941e:	83 c4 10             	add    esp,0x10
c0009421:	31 c9                	xor    ecx,ecx
c0009423:	83 c4 0c             	add    esp,0xc
c0009426:	89 c8                	mov    eax,ecx
c0009428:	5b                   	pop    ebx
c0009429:	5e                   	pop    esi
c000942a:	5f                   	pop    edi
c000942b:	5d                   	pop    ebp
c000942c:	c3                   	ret    
c000942d:	89 f3                	mov    ebx,esi
c000942f:	bd 01 00 00 00       	mov    ebp,0x1
c0009434:	31 c9                	xor    ecx,ecx
c0009436:	09 ea                	or     edx,ebp
c0009438:	89 c8                	mov    eax,ecx
c000943a:	89 13                	mov    DWORD PTR [ebx],edx
c000943c:	83 c4 0c             	add    esp,0xc
c000943f:	5b                   	pop    ebx
c0009440:	5e                   	pop    esi
c0009441:	5f                   	pop    edi
c0009442:	5d                   	pop    ebp
c0009443:	c3                   	ret    

c0009444 <Virt::virtualMemorySetup()>:
c0009444:	53                   	push   ebx
c0009445:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000944a:	6a 0f                	push   0xf
c000944c:	53                   	push   ebx
c000944d:	43                   	inc    ebx
c000944e:	e8 d9 fd ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009453:	58                   	pop    eax
c0009454:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000945a:	5a                   	pop    edx
c000945b:	75 ed                	jne    c000944a <Virt::virtualMemorySetup()+0x6>
c000945d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009462:	6a 00                	push   0x0
c0009464:	53                   	push   ebx
c0009465:	43                   	inc    ebx
c0009466:	e8 c1 fd ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000946b:	59                   	pop    ecx
c000946c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009472:	58                   	pop    eax
c0009473:	75 ed                	jne    c0009462 <Virt::virtualMemorySetup()+0x1e>
c0009475:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000947a:	6a 0f                	push   0xf
c000947c:	53                   	push   ebx
c000947d:	43                   	inc    ebx
c000947e:	e8 a9 fd ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009483:	58                   	pop    eax
c0009484:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000948a:	5a                   	pop    edx
c000948b:	75 ed                	jne    c000947a <Virt::virtualMemorySetup()+0x36>
c000948d:	5b                   	pop    ebx
c000948e:	c3                   	ret    

c000948f <Virt::setupPageSwapping(int)>:
c000948f:	53                   	push   ebx
c0009490:	83 ec 0c             	sub    esp,0xc
c0009493:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009497:	a1 88 32 02 c0       	mov    eax,ds:0xc0023288
c000949c:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00094a2:	8b 10                	mov    edx,DWORD PTR [eax]
c00094a4:	53                   	push   ebx
c00094a5:	c1 e3 0b             	shl    ebx,0xb
c00094a8:	68 ba db 01 c0       	push   0xc001dbba
c00094ad:	50                   	push   eax
c00094ae:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00094b1:	89 1d d0 f9 01 c0    	mov    DWORD PTR ds:0xc001f9d0,ebx
c00094b7:	c6 05 d8 f9 01 c0 43 	mov    BYTE PTR ds:0xc001f9d8,0x43
c00094be:	c1 eb 08             	shr    ebx,0x8
c00094c1:	a3 d4 f9 01 c0       	mov    ds:0xc001f9d4,eax
c00094c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00094c9:	c7 05 cc f9 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001f9cc,0x8
c00094d3:	e8 e1 e2 ff ff       	call   c00077b9 <malloc>
c00094d8:	83 c4 0c             	add    esp,0xc
c00094db:	89 c1                	mov    ecx,eax
c00094dd:	a3 0c 0e 02 c0       	mov    ds:0xc0020e0c,eax
c00094e2:	31 d2                	xor    edx,edx
c00094e4:	a1 d0 f9 01 c0       	mov    eax,ds:0xc001f9d0
c00094e9:	f7 35 cc f9 01 c0    	div    DWORD PTR ds:0xc001f9cc
c00094ef:	c1 e8 05             	shr    eax,0x5
c00094f2:	50                   	push   eax
c00094f3:	6a 00                	push   0x0
c00094f5:	51                   	push   ecx
c00094f6:	e8 d5 6f ff ff       	call   c00004d0 <memset>
c00094fb:	83 c4 18             	add    esp,0x18
c00094fe:	5b                   	pop    ebx
c00094ff:	c3                   	ret    

c0009500 <VAS::VAS()>:
c0009500:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009504:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000950b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000950f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009516:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000951a:	a3 10 0e 02 c0       	mov    ds:0xc0020e10,eax
c000951f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009523:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009527:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000952b:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000952e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009532:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009539:	90                   	nop
c000953a:	c3                   	ret    
c000953b:	90                   	nop

c000953c <VAS::VAS(VAS*)>:
c000953c:	83 ec 0c             	sub    esp,0xc
c000953f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009543:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000954a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000954e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009555:	83 ec 0c             	sub    esp,0xc
c0009558:	68 5c da 01 c0       	push   0xc001da5c
c000955d:	e8 e1 6b 00 00       	call   c0010143 <KePanic(char const*)>
c0009562:	83 c4 10             	add    esp,0x10
c0009565:	90                   	nop
c0009566:	83 c4 0c             	add    esp,0xc
c0009569:	c3                   	ret    

c000956a <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000956a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000956e:	89 c2                	mov    edx,eax
c0009570:	c1 e8 0a             	shr    eax,0xa
c0009573:	c1 ea 16             	shr    edx,0x16
c0009576:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000957b:	19 c9                	sbb    ecx,ecx
c000957d:	c1 e2 0c             	shl    edx,0xc
c0009580:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0009586:	25 fc 0f 00 00       	and    eax,0xffc
c000958b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009592:	01 d0                	add    eax,edx
c0009594:	c3                   	ret    
c0009595:	90                   	nop

c0009596 <VAS::getPageTableEntry(unsigned long)>:
c0009596:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000959a:	89 ca                	mov    edx,ecx
c000959c:	c1 e9 0a             	shr    ecx,0xa
c000959f:	c1 ea 16             	shr    edx,0x16
c00095a2:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00095a8:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00095ae:	c1 e0 0c             	shl    eax,0xc
c00095b1:	8d 04 08             	lea    eax,[eax+ecx*1]
c00095b4:	c3                   	ret    

c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>:
c00095b5:	57                   	push   edi
c00095b6:	56                   	push   esi
c00095b7:	be 01 00 00 00       	mov    esi,0x1
c00095bc:	53                   	push   ebx
c00095bd:	83 ec 10             	sub    esp,0x10
c00095c0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00095c4:	c1 eb 0c             	shr    ebx,0xc
c00095c7:	eb 3f                	jmp    c0009608 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c00095c9:	83 ec 08             	sub    esp,0x8
c00095cc:	a1 10 0e 02 c0       	mov    eax,ds:0xc0020e10
c00095d1:	57                   	push   edi
c00095d2:	50                   	push   eax
c00095d3:	e8 be ff ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c00095d8:	83 c4 10             	add    esp,0x10
c00095db:	8b 00                	mov    eax,DWORD PTR [eax]
c00095dd:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00095e1:	f6 c4 04             	test   ah,0x4
c00095e4:	75 60                	jne    c0009646 <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c00095e6:	80 fa 04             	cmp    dl,0x4
c00095e9:	74 79                	je     c0009664 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c00095eb:	80 fa 02             	cmp    dl,0x2
c00095ee:	0f 84 89 00 00 00    	je     c000967d <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c00095f4:	80 fa 03             	cmp    dl,0x3
c00095f7:	0f 84 ae 00 00 00    	je     c00096ab <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c00095fd:	fe ca                	dec    dl
c00095ff:	0f 84 93 00 00 00    	je     c0009698 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009605:	43                   	inc    ebx
c0009606:	31 f6                	xor    esi,esi
c0009608:	53                   	push   ebx
c0009609:	89 df                	mov    edi,ebx
c000960b:	e8 51 fc ff ff       	call   c0009261 <Virt::getPageState(unsigned long)>
c0009610:	c1 e7 0c             	shl    edi,0xc
c0009613:	5a                   	pop    edx
c0009614:	84 c0                	test   al,al
c0009616:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000961a:	75 ad                	jne    c00095c9 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000961c:	83 ec 0c             	sub    esp,0xc
c000961f:	68 d1 db 01 c0       	push   0xc001dbd1
c0009624:	e8 1a 6b 00 00       	call   c0010143 <KePanic(char const*)>
c0009629:	5a                   	pop    edx
c000962a:	59                   	pop    ecx
c000962b:	57                   	push   edi
c000962c:	8b 3d 10 0e 02 c0    	mov    edi,DWORD PTR ds:0xc0020e10
c0009632:	57                   	push   edi
c0009633:	e8 5e ff ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c0009638:	83 c4 10             	add    esp,0x10
c000963b:	8b 00                	mov    eax,DWORD PTR [eax]
c000963d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009641:	f6 c4 04             	test   ah,0x4
c0009644:	74 bf                	je     c0009605 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009646:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000964a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000964f:	83 ec 0c             	sub    esp,0xc
c0009652:	50                   	push   eax
c0009653:	e8 db e3 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0009658:	83 c4 10             	add    esp,0x10
c000965b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000965f:	80 fa 04             	cmp    dl,0x4
c0009662:	75 87                	jne    c00095eb <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0009664:	89 f0                	mov    eax,esi
c0009666:	84 c0                	test   al,al
c0009668:	75 47                	jne    c00096b1 <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c000966a:	c7 44 24 20 80 da 01 c0 	mov    DWORD PTR [esp+0x20],0xc001da80
c0009672:	83 c4 10             	add    esp,0x10
c0009675:	5b                   	pop    ebx
c0009676:	5e                   	pop    esi
c0009677:	5f                   	pop    edi
c0009678:	e9 c6 6a 00 00       	jmp    c0010143 <KePanic(char const*)>
c000967d:	89 f0                	mov    eax,esi
c000967f:	84 c0                	test   al,al
c0009681:	75 15                	jne    c0009698 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009683:	83 ec 0c             	sub    esp,0xc
c0009686:	68 ed db 01 c0       	push   0xc001dbed
c000968b:	e8 b3 6a 00 00       	call   c0010143 <KePanic(char const*)>
c0009690:	83 c4 10             	add    esp,0x10
c0009693:	e9 6d ff ff ff       	jmp    c0009605 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009698:	83 ec 08             	sub    esp,0x8
c000969b:	6a 00                	push   0x0
c000969d:	53                   	push   ebx
c000969e:	e8 89 fb ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096a3:	83 c4 10             	add    esp,0x10
c00096a6:	e9 5a ff ff ff       	jmp    c0009605 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00096ab:	89 f0                	mov    eax,esi
c00096ad:	84 c0                	test   al,al
c00096af:	75 15                	jne    c00096c6 <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c00096b1:	83 ec 08             	sub    esp,0x8
c00096b4:	6a 00                	push   0x0
c00096b6:	53                   	push   ebx
c00096b7:	e8 70 fb ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096bc:	83 c4 10             	add    esp,0x10
c00096bf:	83 c4 10             	add    esp,0x10
c00096c2:	5b                   	pop    ebx
c00096c3:	5e                   	pop    esi
c00096c4:	5f                   	pop    edi
c00096c5:	c3                   	ret    
c00096c6:	c7 44 24 20 09 dc 01 c0 	mov    DWORD PTR [esp+0x20],0xc001dc09
c00096ce:	83 c4 10             	add    esp,0x10
c00096d1:	5b                   	pop    ebx
c00096d2:	5e                   	pop    esi
c00096d3:	5f                   	pop    edi
c00096d4:	e9 6a 6a 00 00       	jmp    c0010143 <KePanic(char const*)>
c00096d9:	90                   	nop

c00096da <VAS::freeAllocatedPages(unsigned long)>:
c00096da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00096de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00096e2:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00096e6:	74 09                	je     c00096f1 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00096e8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00096ec:	e9 c4 fe ff ff       	jmp    c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>
c00096f1:	c7 44 24 04 a4 da 01 c0 	mov    DWORD PTR [esp+0x4],0xc001daa4
c00096f9:	e9 da 0d 00 00       	jmp    c000a4d8 <Dbg::kprintf(char const*, ...)>

c00096fe <VAS::virtualToPhysical(unsigned long)>:
c00096fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009702:	50                   	push   eax
c0009703:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009707:	52                   	push   edx
c0009708:	e8 89 fe ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c000970d:	59                   	pop    ecx
c000970e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009710:	5a                   	pop    edx
c0009711:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009716:	c3                   	ret    
c0009717:	90                   	nop

c0009718 <VAS::reflagRange(unsigned long, int, int, int)>:
c0009718:	55                   	push   ebp
c0009719:	57                   	push   edi
c000971a:	56                   	push   esi
c000971b:	53                   	push   ebx
c000971c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009720:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009724:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009728:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000972c:	85 db                	test   ebx,ebx
c000972e:	7e 22                	jle    c0009752 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0009730:	c1 e3 0c             	shl    ebx,0xc
c0009733:	01 f3                	add    ebx,esi
c0009735:	56                   	push   esi
c0009736:	81 c6 00 10 00 00    	add    esi,0x1000
c000973c:	55                   	push   ebp
c000973d:	e8 54 fe ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c0009742:	5a                   	pop    edx
c0009743:	59                   	pop    ecx
c0009744:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009746:	21 f9                	and    ecx,edi
c0009748:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000974c:	39 f3                	cmp    ebx,esi
c000974e:	89 08                	mov    DWORD PTR [eax],ecx
c0009750:	75 e3                	jne    c0009735 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0009752:	5b                   	pop    ebx
c0009753:	5e                   	pop    esi
c0009754:	5f                   	pop    edi
c0009755:	5d                   	pop    ebp
c0009756:	c3                   	ret    
c0009757:	90                   	nop

c0009758 <VAS::setToWriteCombining(unsigned long, int)>:
c0009758:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c000975d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009763:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c000976a:	75 01                	jne    c000976d <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000976c:	c3                   	ret    
c000976d:	68 80 00 00 00       	push   0x80
c0009772:	6a ff                	push   0xffffffff
c0009774:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009778:	50                   	push   eax
c0009779:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000977d:	52                   	push   edx
c000977e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009782:	51                   	push   ecx
c0009783:	e8 90 ff ff ff       	call   c0009718 <VAS::reflagRange(unsigned long, int, int, int)>
c0009788:	83 c4 14             	add    esp,0x14
c000978b:	c3                   	ret    

c000978c <VAS::mapOtherVASIn(bool, VAS*)>:
c000978c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009791:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009795:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009798:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000979c:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000979f:	19 c0                	sbb    eax,eax
c00097a1:	83 ca 03             	or     edx,0x3
c00097a4:	83 e0 fc             	and    eax,0xfffffffc
c00097a7:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00097ae:	0f 20 d8             	mov    eax,cr3
c00097b1:	0f 22 d8             	mov    cr3,eax
c00097b4:	c3                   	ret    
c00097b5:	90                   	nop

c00097b6 <VAS::~VAS()>:
c00097b6:	83 ec 2c             	sub    esp,0x2c
c00097b9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00097c1:	fa                   	cli    
c00097c2:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c00097c7:	40                   	inc    eax
c00097c8:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c00097cd:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00097d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00097d4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00097d7:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00097dd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00097e1:	6a 01                	push   0x1
c00097e3:	50                   	push   eax
c00097e4:	e8 a3 ff ff ff       	call   c000978c <VAS::mapOtherVASIn(bool, VAS*)>
c00097e9:	83 c4 0c             	add    esp,0xc
c00097ec:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00097f4:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00097fc:	0f 8f d4 00 00 00    	jg     c00098d6 <VAS::~VAS()+0x120>
c0009802:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009806:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009809:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000980d:	c1 e2 02             	shl    edx,0x2
c0009810:	01 d0                	add    eax,edx
c0009812:	8b 00                	mov    eax,DWORD PTR [eax]
c0009814:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000981c:	83 e0 01             	and    eax,0x1
c000981f:	0f 84 a8 00 00 00    	je     c00098cd <VAS::~VAS()+0x117>
c0009825:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000982d:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009835:	7f 72                	jg     c00098a9 <VAS::~VAS()+0xf3>
c0009837:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000983b:	c1 e0 0a             	shl    eax,0xa
c000983e:	89 c2                	mov    edx,eax
c0009840:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009844:	01 d0                	add    eax,edx
c0009846:	c1 e0 0c             	shl    eax,0xc
c0009849:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000984d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009852:	8b 00                	mov    eax,DWORD PTR [eax]
c0009854:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009857:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000985d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009861:	6a 01                	push   0x1
c0009863:	50                   	push   eax
c0009864:	e8 01 fd ff ff       	call   c000956a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009869:	83 c4 0c             	add    esp,0xc
c000986c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009874:	8b 00                	mov    eax,DWORD PTR [eax]
c0009876:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000987a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000987e:	25 01 04 00 00       	and    eax,0x401
c0009883:	3d 01 04 00 00       	cmp    eax,0x401
c0009888:	75 19                	jne    c00098a3 <VAS::~VAS()+0xed>
c000988a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000988e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009893:	83 ec 0c             	sub    esp,0xc
c0009896:	50                   	push   eax
c0009897:	e8 97 e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c000989c:	83 c4 10             	add    esp,0x10
c000989f:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00098a3:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00098a7:	eb 84                	jmp    c000982d <VAS::~VAS()+0x77>
c00098a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098ad:	25 00 04 00 00       	and    eax,0x400
c00098b2:	74 19                	je     c00098cd <VAS::~VAS()+0x117>
c00098b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098b8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00098bd:	83 ec 0c             	sub    esp,0xc
c00098c0:	50                   	push   eax
c00098c1:	e8 6d e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c00098c6:	83 c4 10             	add    esp,0x10
c00098c9:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00098cd:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00098d1:	e9 1e ff ff ff       	jmp    c00097f4 <VAS::~VAS()+0x3e>
c00098d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00098da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00098dd:	83 ec 0c             	sub    esp,0xc
c00098e0:	50                   	push   eax
c00098e1:	e8 cf fc ff ff       	call   c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>
c00098e6:	83 c4 10             	add    esp,0x10
c00098e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00098ed:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 3a e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009900:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c0009905:	48                   	dec    eax
c0009906:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c000990b:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c0009910:	85 c0                	test   eax,eax
c0009912:	75 01                	jne    c0009915 <VAS::~VAS()+0x15f>
c0009914:	fb                   	sti    
c0009915:	90                   	nop
c0009916:	83 c4 2c             	add    esp,0x2c
c0009919:	c3                   	ret    

c000991a <VAS::mapPage(unsigned long, unsigned long, int)>:
c000991a:	55                   	push   ebp
c000991b:	57                   	push   edi
c000991c:	56                   	push   esi
c000991d:	53                   	push   ebx
c000991e:	83 ec 1c             	sub    esp,0x1c
c0009921:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009925:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009929:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000992f:	77 0b                	ja     c000993c <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c0009931:	0f 20 d8             	mov    eax,cr3
c0009934:	0f 20 d8             	mov    eax,cr3
c0009937:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000993a:	75 47                	jne    c0009983 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c000993c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009940:	09 d8                	or     eax,ebx
c0009942:	a9 ff 0f 00 00       	test   eax,0xfff
c0009947:	75 57                	jne    c00099a0 <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c0009949:	89 de                	mov    esi,ebx
c000994b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000994e:	c1 ee 16             	shr    esi,0x16
c0009951:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009958:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000995c:	74 54                	je     c00099b2 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c000995e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009962:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009968:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000996c:	c1 e6 0c             	shl    esi,0xc
c000996f:	c1 eb 0a             	shr    ebx,0xa
c0009972:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009978:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000997b:	83 c4 1c             	add    esp,0x1c
c000997e:	5b                   	pop    ebx
c000997f:	5e                   	pop    esi
c0009980:	5f                   	pop    edi
c0009981:	5d                   	pop    ebp
c0009982:	c3                   	ret    
c0009983:	83 ec 0c             	sub    esp,0xc
c0009986:	68 c8 da 01 c0       	push   0xc001dac8
c000998b:	e8 48 0b 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0009990:	83 c4 10             	add    esp,0x10
c0009993:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009997:	09 d8                	or     eax,ebx
c0009999:	a9 ff 0f 00 00       	test   eax,0xfff
c000999e:	74 a9                	je     c0009949 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c00099a0:	83 ec 0c             	sub    esp,0xc
c00099a3:	68 30 db 01 c0       	push   0xc001db30
c00099a8:	e8 96 67 00 00       	call   c0010143 <KePanic(char const*)>
c00099ad:	83 c4 10             	add    esp,0x10
c00099b0:	eb 97                	jmp    c0009949 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c00099b2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00099b6:	e8 da e0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c00099bb:	83 ec 0c             	sub    esp,0xc
c00099be:	89 c5                	mov    ebp,eax
c00099c0:	8b 0d 10 0e 02 c0    	mov    ecx,DWORD PTR ds:0xc0020e10
c00099c6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00099ca:	6a 01                	push   0x1
c00099cc:	e8 b4 f8 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c00099d1:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00099d8:	6a 01                	push   0x1
c00099da:	50                   	push   eax
c00099db:	55                   	push   ebp
c00099dc:	81 cd 07 04 00 00    	or     ebp,0x407
c00099e2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00099e6:	51                   	push   ecx
c00099e7:	e8 28 02 00 00       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00099ec:	83 c4 1c             	add    esp,0x1c
c00099ef:	68 00 10 00 00       	push   0x1000
c00099f4:	6a 00                	push   0x0
c00099f6:	50                   	push   eax
c00099f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00099fb:	e8 d0 6a ff ff       	call   c00004d0 <memset>
c0009a00:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009a04:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a07:	e8 a9 fb ff ff       	call   c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a0c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009a10:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009a13:	83 c4 10             	add    esp,0x10
c0009a16:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009a19:	e9 40 ff ff ff       	jmp    c000995e <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c0009a1e <VAS::allocatePages(int, int)>:
c0009a1e:	55                   	push   ebp
c0009a1f:	57                   	push   edi
c0009a20:	56                   	push   esi
c0009a21:	53                   	push   ebx
c0009a22:	83 ec 1c             	sub    esp,0x1c
c0009a25:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009a29:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c0009a2e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009a34:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009a3a:	83 e0 01             	and    eax,0x1
c0009a3d:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0009a41:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009a45:	0f 85 cc 00 00 00    	jne    c0009b17 <VAS::allocatePages(int, int)+0xf9>
c0009a4b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009a4e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a52:	85 c0                	test   eax,eax
c0009a54:	0f 84 a1 00 00 00    	je     c0009afb <VAS::allocatePages(int, int)+0xdd>
c0009a5a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009a5e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a62:	c1 e6 0c             	shl    esi,0xc
c0009a65:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0009a69:	85 c0                	test   eax,eax
c0009a6b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0009a6e:	7e 33                	jle    c0009aa3 <VAS::allocatePages(int, int)+0x85>
c0009a70:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0009a74:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009a78:	81 cd 00 04 00 00    	or     ebp,0x400
c0009a7e:	e8 12 e0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009a83:	55                   	push   ebp
c0009a84:	53                   	push   ebx
c0009a85:	50                   	push   eax
c0009a86:	57                   	push   edi
c0009a87:	e8 8e fe ff ff       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009a8c:	83 c4 10             	add    esp,0x10
c0009a8f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009a94:	74 03                	je     c0009a99 <VAS::allocatePages(int, int)+0x7b>
c0009a96:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009a99:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009a9f:	39 de                	cmp    esi,ebx
c0009aa1:	75 db                	jne    c0009a7e <VAS::allocatePages(int, int)+0x60>
c0009aa3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009aa8:	75 12                	jne    c0009abc <VAS::allocatePages(int, int)+0x9e>
c0009aaa:	0f 20 d8             	mov    eax,cr3
c0009aad:	0f 22 d8             	mov    cr3,eax
c0009ab0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ab4:	83 c4 1c             	add    esp,0x1c
c0009ab7:	5b                   	pop    ebx
c0009ab8:	5e                   	pop    esi
c0009ab9:	5f                   	pop    edi
c0009aba:	5d                   	pop    ebp
c0009abb:	c3                   	ret    
c0009abc:	c1 ee 0a             	shr    esi,0xa
c0009abf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009ac3:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009ac9:	c1 eb 0a             	shr    ebx,0xa
c0009acc:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009ad2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009ad8:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009ade:	39 c3                	cmp    ebx,eax
c0009ae0:	77 ce                	ja     c0009ab0 <VAS::allocatePages(int, int)+0x92>
c0009ae2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009ae5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009aeb:	39 d8                	cmp    eax,ebx
c0009aed:	73 f3                	jae    c0009ae2 <VAS::allocatePages(int, int)+0xc4>
c0009aef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009af3:	83 c4 1c             	add    esp,0x1c
c0009af6:	5b                   	pop    ebx
c0009af7:	5e                   	pop    esi
c0009af8:	5f                   	pop    edi
c0009af9:	5d                   	pop    ebp
c0009afa:	c3                   	ret    
c0009afb:	83 ec 0c             	sub    esp,0xc
c0009afe:	68 54 db 01 c0       	push   0xc001db54
c0009b03:	e8 3b 66 00 00       	call   c0010143 <KePanic(char const*)>
c0009b08:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009b0b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009b0f:	83 c4 10             	add    esp,0x10
c0009b12:	e9 43 ff ff ff       	jmp    c0009a5a <VAS::allocatePages(int, int)+0x3c>
c0009b17:	83 ec 0c             	sub    esp,0xc
c0009b1a:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0009b1e:	51                   	push   ecx
c0009b1f:	e8 61 f7 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0009b24:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009b28:	83 c4 10             	add    esp,0x10
c0009b2b:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009b30:	0f 87 9b 00 00 00    	ja     c0009bd1 <VAS::allocatePages(int, int)+0x1b3>
c0009b36:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009b3a:	85 d2                	test   edx,edx
c0009b3c:	7e 3c                	jle    c0009b7a <VAS::allocatePages(int, int)+0x15c>
c0009b3e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009b42:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009b46:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009b4a:	c1 e5 0c             	shl    ebp,0xc
c0009b4d:	81 ce 00 04 00 00    	or     esi,0x400
c0009b53:	01 dd                	add    ebp,ebx
c0009b55:	e8 3b df ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009b5a:	56                   	push   esi
c0009b5b:	53                   	push   ebx
c0009b5c:	50                   	push   eax
c0009b5d:	57                   	push   edi
c0009b5e:	e8 b7 fd ff ff       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009b63:	83 c4 10             	add    esp,0x10
c0009b66:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b6b:	74 03                	je     c0009b70 <VAS::allocatePages(int, int)+0x152>
c0009b6d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009b70:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b76:	39 dd                	cmp    ebp,ebx
c0009b78:	75 db                	jne    c0009b55 <VAS::allocatePages(int, int)+0x137>
c0009b7a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b7f:	0f 84 25 ff ff ff    	je     c0009aaa <VAS::allocatePages(int, int)+0x8c>
c0009b85:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b89:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009b8d:	89 d3                	mov    ebx,edx
c0009b8f:	c1 e0 0c             	shl    eax,0xc
c0009b92:	c1 eb 0a             	shr    ebx,0xa
c0009b95:	01 d0                	add    eax,edx
c0009b97:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009b9d:	c1 e8 0a             	shr    eax,0xa
c0009ba0:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009ba6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009bab:	2d 00 00 40 00       	sub    eax,0x400000
c0009bb0:	39 c3                	cmp    ebx,eax
c0009bb2:	0f 87 f8 fe ff ff    	ja     c0009ab0 <VAS::allocatePages(int, int)+0x92>
c0009bb8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009bbb:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009bc1:	39 d8                	cmp    eax,ebx
c0009bc3:	73 f3                	jae    c0009bb8 <VAS::allocatePages(int, int)+0x19a>
c0009bc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009bc9:	83 c4 1c             	add    esp,0x1c
c0009bcc:	5b                   	pop    ebx
c0009bcd:	5e                   	pop    esi
c0009bce:	5f                   	pop    edi
c0009bcf:	5d                   	pop    ebp
c0009bd0:	c3                   	ret    
c0009bd1:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c0009bd6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009bdc:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009be3:	0f 84 4d ff ff ff    	je     c0009b36 <VAS::allocatePages(int, int)+0x118>
c0009be9:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0009bf1:	e9 40 ff ff ff       	jmp    c0009b36 <VAS::allocatePages(int, int)+0x118>

c0009bf6 <VAS::setCPUSpecific(unsigned long)>:
c0009bf6:	83 ec 0c             	sub    esp,0xc
c0009bf9:	6a 05                	push   0x5
c0009bfb:	68 00 00 40 c2       	push   0xc2400000
c0009c00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009c04:	50                   	push   eax
c0009c05:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009c09:	52                   	push   edx
c0009c0a:	e8 0b fd ff ff       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c0f:	83 c4 1c             	add    esp,0x1c
c0009c12:	c3                   	ret    
c0009c13:	90                   	nop

c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009c14:	55                   	push   ebp
c0009c15:	57                   	push   edi
c0009c16:	56                   	push   esi
c0009c17:	53                   	push   ebx
c0009c18:	83 ec 1c             	sub    esp,0x1c
c0009c1b:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c0009c20:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009c24:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009c2a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009c2e:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009c34:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009c38:	83 e0 01             	and    eax,0x1
c0009c3b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009c3f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c43:	85 c0                	test   eax,eax
c0009c45:	7e 39                	jle    c0009c80 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0009c47:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c4b:	89 f3                	mov    ebx,esi
c0009c4d:	c1 e0 0c             	shl    eax,0xc
c0009c50:	01 f0                	add    eax,esi
c0009c52:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c56:	55                   	push   ebp
c0009c57:	53                   	push   ebx
c0009c58:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c5c:	29 f0                	sub    eax,esi
c0009c5e:	01 d8                	add    eax,ebx
c0009c60:	50                   	push   eax
c0009c61:	57                   	push   edi
c0009c62:	e8 b3 fc ff ff       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c67:	83 c4 10             	add    esp,0x10
c0009c6a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c6f:	74 03                	je     c0009c74 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0009c71:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009c74:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009c7a:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0009c7e:	75 d6                	jne    c0009c56 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0009c80:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c85:	75 10                	jne    c0009c97 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0009c87:	0f 20 d8             	mov    eax,cr3
c0009c8a:	0f 22 d8             	mov    cr3,eax
c0009c8d:	83 c4 1c             	add    esp,0x1c
c0009c90:	89 f0                	mov    eax,esi
c0009c92:	5b                   	pop    ebx
c0009c93:	5e                   	pop    esi
c0009c94:	5f                   	pop    edi
c0009c95:	5d                   	pop    ebp
c0009c96:	c3                   	ret    
c0009c97:	89 f3                	mov    ebx,esi
c0009c99:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c9d:	c1 eb 0a             	shr    ebx,0xa
c0009ca0:	c1 e0 0c             	shl    eax,0xc
c0009ca3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009ca9:	01 f0                	add    eax,esi
c0009cab:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009cb1:	c1 e8 0a             	shr    eax,0xa
c0009cb4:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cb9:	2d 00 00 40 00       	sub    eax,0x400000
c0009cbe:	39 c3                	cmp    ebx,eax
c0009cc0:	77 cb                	ja     c0009c8d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0009cc2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009cc5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ccb:	39 d8                	cmp    eax,ebx
c0009ccd:	73 f3                	jae    c0009cc2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0009ccf:	83 c4 1c             	add    esp,0x1c
c0009cd2:	89 f0                	mov    eax,esi
c0009cd4:	5b                   	pop    ebx
c0009cd5:	5e                   	pop    esi
c0009cd6:	5f                   	pop    edi
c0009cd7:	5d                   	pop    ebp
c0009cd8:	c3                   	ret    
c0009cd9:	90                   	nop

c0009cda <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009cda:	55                   	push   ebp
c0009cdb:	57                   	push   edi
c0009cdc:	56                   	push   esi
c0009cdd:	53                   	push   ebx
c0009cde:	83 ec 1c             	sub    esp,0x1c
c0009ce1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009ce5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009ce9:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0009ced:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009cf1:	a9 ff 0f 00 00       	test   eax,0xfff
c0009cf6:	75 4a                	jne    c0009d42 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0009cf8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009cfc:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009cff:	c1 eb 16             	shr    ebx,0x16
c0009d02:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0009d09:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0009d0d:	74 4d                	je     c0009d5c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0009d0f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009d13:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009d17:	c1 e8 0a             	shr    eax,0xa
c0009d1a:	80 fa 01             	cmp    dl,0x1
c0009d1d:	19 d2                	sbb    edx,edx
c0009d1f:	c1 e3 0c             	shl    ebx,0xc
c0009d22:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0009d26:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009d2c:	25 fc 0f 00 00       	and    eax,0xffc
c0009d31:	01 d8                	add    eax,ebx
c0009d33:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009d3a:	83 c4 1c             	add    esp,0x1c
c0009d3d:	5b                   	pop    ebx
c0009d3e:	5e                   	pop    esi
c0009d3f:	5f                   	pop    edi
c0009d40:	5d                   	pop    ebp
c0009d41:	c3                   	ret    
c0009d42:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d46:	83 ec 0c             	sub    esp,0xc
c0009d49:	68 80 db 01 c0       	push   0xc001db80
c0009d4e:	e8 f0 63 00 00       	call   c0010143 <KePanic(char const*)>
c0009d53:	83 c4 10             	add    esp,0x10
c0009d56:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009d5a:	eb 9c                	jmp    c0009cf8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0009d5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d60:	e8 30 dd ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009d65:	83 ec 0c             	sub    esp,0xc
c0009d68:	89 c5                	mov    ebp,eax
c0009d6a:	8b 0d 10 0e 02 c0    	mov    ecx,DWORD PTR ds:0xc0020e10
c0009d70:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009d74:	6a 01                	push   0x1
c0009d76:	e8 0a f5 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0009d7b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009d82:	6a 01                	push   0x1
c0009d84:	50                   	push   eax
c0009d85:	55                   	push   ebp
c0009d86:	81 cd 07 04 00 00    	or     ebp,0x407
c0009d8c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009d90:	51                   	push   ecx
c0009d91:	e8 7e fe ff ff       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009d96:	83 c4 1c             	add    esp,0x1c
c0009d99:	68 00 10 00 00       	push   0x1000
c0009d9e:	6a 00                	push   0x0
c0009da0:	50                   	push   eax
c0009da1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009da5:	e8 26 67 ff ff       	call   c00004d0 <memset>
c0009daa:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009dae:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009db1:	e8 ff f7 ff ff       	call   c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>
c0009db6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009db9:	83 c4 10             	add    esp,0x10
c0009dbc:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0009dbf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009dc3:	e9 47 ff ff ff       	jmp    c0009d0f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0009dc8 <VAS::VAS(bool)>:
c0009dc8:	53                   	push   ebx
c0009dc9:	83 ec 28             	sub    esp,0x28
c0009dcc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009dd0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009dd4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009dd8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ddf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009de3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009dea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009dee:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009df2:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009df5:	e8 9b dc ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009dfa:	89 c2                	mov    edx,eax
c0009dfc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e00:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0009e03:	8b 1d 10 0e 02 c0    	mov    ebx,DWORD PTR ds:0xc0020e10
c0009e09:	83 ec 0c             	sub    esp,0xc
c0009e0c:	6a 01                	push   0x1
c0009e0e:	e8 72 f4 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0009e13:	83 c4 10             	add    esp,0x10
c0009e16:	89 c2                	mov    edx,eax
c0009e18:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e1c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009e1f:	83 ec 0c             	sub    esp,0xc
c0009e22:	6a 03                	push   0x3
c0009e24:	6a 01                	push   0x1
c0009e26:	52                   	push   edx
c0009e27:	50                   	push   eax
c0009e28:	53                   	push   ebx
c0009e29:	e8 e6 fd ff ff       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009e2e:	83 c4 20             	add    esp,0x20
c0009e31:	89 c2                	mov    edx,eax
c0009e33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e37:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009e3a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009e42:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0009e4a:	7f 1c                	jg     c0009e68 <VAS::VAS(bool)+0xa0>
c0009e4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e50:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009e53:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e57:	c1 e2 02             	shl    edx,0x2
c0009e5a:	01 d0                	add    eax,edx
c0009e5c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009e62:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009e66:	eb da                	jmp    c0009e42 <VAS::VAS(bool)+0x7a>
c0009e68:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0009e70:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0009e78:	7f 7a                	jg     c0009ef4 <VAS::VAS(bool)+0x12c>
c0009e7a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e7e:	2d 00 02 00 00       	sub    eax,0x200
c0009e83:	c1 e0 0c             	shl    eax,0xc
c0009e86:	83 c8 03             	or     eax,0x3
c0009e89:	89 c2                	mov    edx,eax
c0009e8b:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c0009e90:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009e96:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009e9c:	83 e0 10             	and    eax,0x10
c0009e9f:	84 c0                	test   al,al
c0009ea1:	74 07                	je     c0009eaa <VAS::VAS(bool)+0xe2>
c0009ea3:	b8 00 01 00 00       	mov    eax,0x100
c0009ea8:	eb 05                	jmp    c0009eaf <VAS::VAS(bool)+0xe7>
c0009eaa:	b8 00 00 00 00       	mov    eax,0x0
c0009eaf:	09 d0                	or     eax,edx
c0009eb1:	89 c1                	mov    ecx,eax
c0009eb3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009eb7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009eba:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009ebe:	c1 e2 02             	shl    edx,0x2
c0009ec1:	01 d0                	add    eax,edx
c0009ec3:	89 ca                	mov    edx,ecx
c0009ec5:	89 10                	mov    DWORD PTR [eax],edx
c0009ec7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009ecb:	2d 40 03 00 00       	sub    eax,0x340
c0009ed0:	83 f8 7f             	cmp    eax,0x7f
c0009ed3:	77 16                	ja     c0009eeb <VAS::VAS(bool)+0x123>
c0009ed5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ed9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009edc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009ee0:	c1 e2 02             	shl    edx,0x2
c0009ee3:	01 d0                	add    eax,edx
c0009ee5:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009eeb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009eef:	e9 7c ff ff ff       	jmp    c0009e70 <VAS::VAS(bool)+0xa8>
c0009ef4:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c0009ef9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009eff:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f05:	83 e0 10             	and    eax,0x10
c0009f08:	84 c0                	test   al,al
c0009f0a:	74 07                	je     c0009f13 <VAS::VAS(bool)+0x14b>
c0009f0c:	b8 03 41 00 00       	mov    eax,0x4103
c0009f11:	eb 05                	jmp    c0009f18 <VAS::VAS(bool)+0x150>
c0009f13:	b8 03 40 00 00       	mov    eax,0x4003
c0009f18:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009f1c:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009f1f:	81 c2 20 0c 00 00    	add    edx,0xc20
c0009f25:	89 02                	mov    DWORD PTR [edx],eax
c0009f27:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c0009f2c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f32:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0009f38:	83 ec 08             	sub    esp,0x8
c0009f3b:	50                   	push   eax
c0009f3c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f40:	e8 b1 fc ff ff       	call   c0009bf6 <VAS::setCPUSpecific(unsigned long)>
c0009f45:	83 c4 10             	add    esp,0x10
c0009f48:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f4c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009f4f:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c0009f54:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f5a:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f60:	83 e0 10             	and    eax,0x10
c0009f63:	84 c0                	test   al,al
c0009f65:	74 07                	je     c0009f6e <VAS::VAS(bool)+0x1a6>
c0009f67:	b8 00 01 00 00       	mov    eax,0x100
c0009f6c:	eb 05                	jmp    c0009f73 <VAS::VAS(bool)+0x1ab>
c0009f6e:	b8 00 00 00 00       	mov    eax,0x0
c0009f73:	09 c2                	or     edx,eax
c0009f75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f79:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f7c:	05 fc 0f 00 00       	add    eax,0xffc
c0009f81:	83 ca 03             	or     edx,0x3
c0009f84:	89 10                	mov    DWORD PTR [eax],edx
c0009f86:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c0009f8b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f91:	83 ec 0c             	sub    esp,0xc
c0009f94:	50                   	push   eax
c0009f95:	e8 12 1c 00 00       	call   c000bbac <Device::getName()>
c0009f9a:	83 c4 10             	add    esp,0x10
c0009f9d:	83 ec 08             	sub    esp,0x8
c0009fa0:	68 23 dc 01 c0       	push   0xc001dc23
c0009fa5:	50                   	push   eax
c0009fa6:	e8 35 67 ff ff       	call   c00006e0 <strcmp>
c0009fab:	83 c4 10             	add    esp,0x10
c0009fae:	85 c0                	test   eax,eax
c0009fb0:	0f 94 c0             	sete   al
c0009fb3:	84 c0                	test   al,al
c0009fb5:	0f 84 87 00 00 00    	je     c000a042 <VAS::VAS(bool)+0x27a>
c0009fbb:	fa                   	cli    
c0009fbc:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c0009fc1:	40                   	inc    eax
c0009fc2:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c0009fc7:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c0009fcc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fd2:	05 7c 09 00 00       	add    eax,0x97c
c0009fd7:	83 ec 0c             	sub    esp,0xc
c0009fda:	50                   	push   eax
c0009fdb:	e8 d6 d2 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0009fe0:	83 c4 10             	add    esp,0x10
c0009fe3:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009fe8:	89 c3                	mov    ebx,eax
c0009fea:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c0009fef:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ff5:	05 7c 09 00 00       	add    eax,0x97c
c0009ffa:	83 ec 0c             	sub    esp,0xc
c0009ffd:	50                   	push   eax
c0009ffe:	e8 b3 d2 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a003:	83 c4 10             	add    esp,0x10
c000a006:	83 ec 08             	sub    esp,0x8
c000a009:	50                   	push   eax
c000a00a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a00e:	e8 83 f5 ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c000a013:	83 c4 10             	add    esp,0x10
c000a016:	8b 00                	mov    eax,DWORD PTR [eax]
c000a018:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a01d:	6a 11                	push   0x11
c000a01f:	53                   	push   ebx
c000a020:	50                   	push   eax
c000a021:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a025:	e8 f0 f8 ff ff       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c000a02a:	83 c4 10             	add    esp,0x10
c000a02d:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c000a032:	48                   	dec    eax
c000a033:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c000a038:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c000a03d:	85 c0                	test   eax,eax
c000a03f:	75 01                	jne    c000a042 <VAS::VAS(bool)+0x27a>
c000a041:	fb                   	sti    
c000a042:	90                   	nop
c000a043:	83 c4 28             	add    esp,0x28
c000a046:	5b                   	pop    ebx
c000a047:	c3                   	ret    

c000a048 <VAS::evict(unsigned long)>:
c000a048:	55                   	push   ebp
c000a049:	57                   	push   edi
c000a04a:	56                   	push   esi
c000a04b:	53                   	push   ebx
c000a04c:	83 ec 1c             	sub    esp,0x1c
c000a04f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a053:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a057:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a05b:	e8 66 f3 ff ff       	call   c00093c6 <Virt::allocateSwapfilePage()>
c000a060:	8b 0d cc f9 01 c0    	mov    ecx,DWORD PTR ds:0xc001f9cc
c000a066:	89 c7                	mov    edi,eax
c000a068:	85 c9                	test   ecx,ecx
c000a06a:	7e 3e                	jle    c000a0aa <VAS::evict(unsigned long)+0x62>
c000a06c:	89 ee                	mov    esi,ebp
c000a06e:	31 db                	xor    ebx,ebx
c000a070:	83 ec 0c             	sub    esp,0xc
c000a073:	57                   	push   edi
c000a074:	e8 3b f3 ff ff       	call   c00093b4 <Virt::swapIDToSector(unsigned long)>
c000a079:	89 34 24             	mov    DWORD PTR [esp],esi
c000a07c:	01 d8                	add    eax,ebx
c000a07e:	6a 01                	push   0x1
c000a080:	31 d2                	xor    edx,edx
c000a082:	43                   	inc    ebx
c000a083:	52                   	push   edx
c000a084:	81 c6 00 02 00 00    	add    esi,0x200
c000a08a:	50                   	push   eax
c000a08b:	0f be 05 d8 f9 01 c0 	movsx  eax,BYTE PTR ds:0xc001f9d8
c000a092:	8b 14 85 7c 31 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdce84]
c000a099:	52                   	push   edx
c000a09a:	e8 b5 2b 00 00       	call   c000cc54 <LogicalDisk::write(unsigned long long, int, void*)>
c000a09f:	83 c4 20             	add    esp,0x20
c000a0a2:	39 1d cc f9 01 c0    	cmp    DWORD PTR ds:0xc001f9cc,ebx
c000a0a8:	7f c6                	jg     c000a070 <VAS::evict(unsigned long)+0x28>
c000a0aa:	83 ec 08             	sub    esp,0x8
c000a0ad:	c1 e7 0b             	shl    edi,0xb
c000a0b0:	55                   	push   ebp
c000a0b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0b5:	50                   	push   eax
c000a0b6:	e8 db f4 ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c000a0bb:	8b 10                	mov    edx,DWORD PTR [eax]
c000a0bd:	89 d1                	mov    ecx,edx
c000a0bf:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a0c5:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a0cb:	09 cf                	or     edi,ecx
c000a0cd:	89 38                	mov    DWORD PTR [eax],edi
c000a0cf:	89 14 24             	mov    DWORD PTR [esp],edx
c000a0d2:	ff 05 08 0e 02 c0    	inc    DWORD PTR ds:0xc0020e08
c000a0d8:	e8 56 d9 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c000a0dd:	0f 20 d8             	mov    eax,cr3
c000a0e0:	0f 22 d8             	mov    cr3,eax
c000a0e3:	a1 04 0e 02 c0       	mov    eax,ds:0xc0020e04
c000a0e8:	c7 44 24 40 31 dc 01 c0 	mov    DWORD PTR [esp+0x40],0xc001dc31
c000a0f0:	8d 50 01             	lea    edx,[eax+0x1]
c000a0f3:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0f7:	89 15 04 0e 02 c0    	mov    DWORD PTR ds:0xc0020e04,edx
c000a0fd:	83 c4 2c             	add    esp,0x2c
c000a100:	5b                   	pop    ebx
c000a101:	5e                   	pop    esi
c000a102:	5f                   	pop    edi
c000a103:	5d                   	pop    ebp
c000a104:	e9 cf 03 00 00       	jmp    c000a4d8 <Dbg::kprintf(char const*, ...)>
c000a109:	90                   	nop

c000a10a <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a10a:	55                   	push   ebp
c000a10b:	57                   	push   edi
c000a10c:	56                   	push   esi
c000a10d:	53                   	push   ebx
c000a10e:	83 ec 14             	sub    esp,0x14
c000a111:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a115:	53                   	push   ebx
c000a116:	68 42 dc 01 c0       	push   0xc001dc42
c000a11b:	e8 b8 03 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000a120:	83 c4 10             	add    esp,0x10
c000a123:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a129:	74 21                	je     c000a14c <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a12b:	83 ec 08             	sub    esp,0x8
c000a12e:	53                   	push   ebx
c000a12f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a133:	57                   	push   edi
c000a134:	e8 5d f4 ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c000a139:	83 c4 10             	add    esp,0x10
c000a13c:	89 c6                	mov    esi,eax
c000a13e:	85 c0                	test   eax,eax
c000a140:	74 0a                	je     c000a14c <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a142:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a144:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a14a:	74 0a                	je     c000a156 <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a14c:	31 c0                	xor    eax,eax
c000a14e:	83 c4 0c             	add    esp,0xc
c000a151:	5b                   	pop    ebx
c000a152:	5e                   	pop    esi
c000a153:	5f                   	pop    edi
c000a154:	5d                   	pop    ebp
c000a155:	c3                   	ret    
c000a156:	e8 3a d9 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a15b:	c1 ed 0b             	shr    ebp,0xb
c000a15e:	8b 16                	mov    edx,DWORD PTR [esi]
c000a160:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a166:	09 c2                	or     edx,eax
c000a168:	81 ca 01 08 00 00    	or     edx,0x801
c000a16e:	89 16                	mov    DWORD PTR [esi],edx
c000a170:	8b 35 cc f9 01 c0    	mov    esi,DWORD PTR ds:0xc001f9cc
c000a176:	85 f6                	test   esi,esi
c000a178:	7e 3e                	jle    c000a1b8 <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a17a:	89 df                	mov    edi,ebx
c000a17c:	31 f6                	xor    esi,esi
c000a17e:	83 ec 0c             	sub    esp,0xc
c000a181:	55                   	push   ebp
c000a182:	e8 2d f2 ff ff       	call   c00093b4 <Virt::swapIDToSector(unsigned long)>
c000a187:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a18a:	01 f0                	add    eax,esi
c000a18c:	6a 01                	push   0x1
c000a18e:	31 d2                	xor    edx,edx
c000a190:	46                   	inc    esi
c000a191:	52                   	push   edx
c000a192:	81 c7 00 02 00 00    	add    edi,0x200
c000a198:	50                   	push   eax
c000a199:	0f be 05 d8 f9 01 c0 	movsx  eax,BYTE PTR ds:0xc001f9d8
c000a1a0:	8b 0c 85 7c 31 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdce84]
c000a1a7:	51                   	push   ecx
c000a1a8:	e8 3b 2a 00 00       	call   c000cbe8 <LogicalDisk::read(unsigned long long, int, void*)>
c000a1ad:	83 c4 20             	add    esp,0x20
c000a1b0:	39 35 cc f9 01 c0    	cmp    DWORD PTR ds:0xc001f9cc,esi
c000a1b6:	7f c6                	jg     c000a17e <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a1b8:	a1 08 0e 02 c0       	mov    eax,ds:0xc0020e08
c000a1bd:	48                   	dec    eax
c000a1be:	52                   	push   edx
c000a1bf:	a3 08 0e 02 c0       	mov    ds:0xc0020e08,eax
c000a1c4:	50                   	push   eax
c000a1c5:	53                   	push   ebx
c000a1c6:	68 55 dc 01 c0       	push   0xc001dc55
c000a1cb:	e8 08 03 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000a1d0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a1d3:	e8 be f1 ff ff       	call   c0009396 <Virt::freeSwapfilePage(unsigned long)>
c000a1d8:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c000a1dd:	83 c4 10             	add    esp,0x10
c000a1e0:	48                   	dec    eax
c000a1e1:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c000a1e6:	85 c0                	test   eax,eax
c000a1e8:	75 01                	jne    c000a1eb <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a1ea:	fb                   	sti    
c000a1eb:	0f 20 d8             	mov    eax,cr3
c000a1ee:	0f 22 d8             	mov    cr3,eax
c000a1f1:	b0 01                	mov    al,0x1
c000a1f3:	e9 56 ff ff ff       	jmp    c000a14e <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a1f8 <VAS::scanForEviction()>:
c000a1f8:	57                   	push   edi
c000a1f9:	31 ff                	xor    edi,edi
c000a1fb:	56                   	push   esi
c000a1fc:	53                   	push   ebx
c000a1fd:	83 ec 10             	sub    esp,0x10
c000a200:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a204:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a207:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a20d:	75 0e                	jne    c000a21d <VAS::scanForEviction()+0x25>
c000a20f:	89 da                	mov    edx,ebx
c000a211:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a214:	c1 ea 16             	shr    edx,0x16
c000a217:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a21b:	74 4e                	je     c000a26b <VAS::scanForEviction()+0x73>
c000a21d:	53                   	push   ebx
c000a21e:	56                   	push   esi
c000a21f:	e8 72 f3 ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c000a224:	5a                   	pop    edx
c000a225:	8b 10                	mov    edx,DWORD PTR [eax]
c000a227:	59                   	pop    ecx
c000a228:	89 d1                	mov    ecx,edx
c000a22a:	81 e1 01 08 00 00    	and    ecx,0x801
c000a230:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a236:	74 3e                	je     c000a276 <VAS::scanForEviction()+0x7e>
c000a238:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a23e:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a244:	76 2b                	jbe    c000a271 <VAS::scanForEviction()+0x79>
c000a246:	47                   	inc    edi
c000a247:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a24e:	83 ff 03             	cmp    edi,0x3
c000a251:	74 32                	je     c000a285 <VAS::scanForEviction()+0x8d>
c000a253:	31 db                	xor    ebx,ebx
c000a255:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a25b:	75 c0                	jne    c000a21d <VAS::scanForEviction()+0x25>
c000a25d:	89 da                	mov    edx,ebx
c000a25f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a262:	c1 ea 16             	shr    edx,0x16
c000a265:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a269:	75 b2                	jne    c000a21d <VAS::scanForEviction()+0x25>
c000a26b:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a271:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a274:	eb 91                	jmp    c000a207 <VAS::scanForEviction()+0xf>
c000a276:	f6 c2 20             	test   dl,0x20
c000a279:	74 13                	je     c000a28e <VAS::scanForEviction()+0x96>
c000a27b:	83 e2 df             	and    edx,0xffffffdf
c000a27e:	89 10                	mov    DWORD PTR [eax],edx
c000a280:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a283:	eb b3                	jmp    c000a238 <VAS::scanForEviction()+0x40>
c000a285:	83 c4 10             	add    esp,0x10
c000a288:	31 c0                	xor    eax,eax
c000a28a:	5b                   	pop    ebx
c000a28b:	5e                   	pop    esi
c000a28c:	5f                   	pop    edi
c000a28d:	c3                   	ret    
c000a28e:	83 ec 08             	sub    esp,0x8
c000a291:	89 d0                	mov    eax,edx
c000a293:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a298:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a29c:	53                   	push   ebx
c000a29d:	68 6a dc 01 c0       	push   0xc001dc6a
c000a2a2:	e8 31 02 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000a2a7:	58                   	pop    eax
c000a2a8:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a2ab:	5a                   	pop    edx
c000a2ac:	51                   	push   ecx
c000a2ad:	56                   	push   esi
c000a2ae:	e8 95 fd ff ff       	call   c000a048 <VAS::evict(unsigned long)>
c000a2b3:	5b                   	pop    ebx
c000a2b4:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a2b7:	5f                   	pop    edi
c000a2b8:	50                   	push   eax
c000a2b9:	68 7e dc 01 c0       	push   0xc001dc7e
c000a2be:	e8 15 02 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000a2c3:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a2d1:	83 c4 10             	add    esp,0x10
c000a2d4:	5b                   	pop    ebx
c000a2d5:	5e                   	pop    esi
c000a2d6:	5f                   	pop    edi
c000a2d7:	c3                   	ret    

c000a2d8 <mapVASFirstTime>:
c000a2d8:	55                   	push   ebp
c000a2d9:	57                   	push   edi
c000a2da:	56                   	push   esi
c000a2db:	53                   	push   ebx
c000a2dc:	83 ec 0c             	sub    esp,0xc
c000a2df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a2e4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a2e7:	4a                   	dec    edx
c000a2e8:	0f 84 8c 00 00 00    	je     c000a37a <mapVASFirstTime+0xa2>
c000a2ee:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a2f1:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a2f4:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a2f9:	c1 e5 15             	shl    ebp,0x15
c000a2fc:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a301:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a307:	29 eb                	sub    ebx,ebp
c000a309:	29 ef                	sub    edi,ebp
c000a30b:	e8 85 d7 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a310:	83 ec 0c             	sub    esp,0xc
c000a313:	68 03 04 00 00       	push   0x403
c000a318:	6a 01                	push   0x1
c000a31a:	53                   	push   ebx
c000a31b:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a321:	50                   	push   eax
c000a322:	56                   	push   esi
c000a323:	e8 ec f8 ff ff       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a328:	83 c4 20             	add    esp,0x20
c000a32b:	39 fb                	cmp    ebx,edi
c000a32d:	75 dc                	jne    c000a30b <mapVASFirstTime+0x33>
c000a32f:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a334:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a339:	29 eb                	sub    ebx,ebp
c000a33b:	29 ef                	sub    edi,ebp
c000a33d:	e8 53 d7 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a342:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a346:	19 d2                	sbb    edx,edx
c000a348:	83 ec 0c             	sub    esp,0xc
c000a34b:	83 e2 04             	and    edx,0x4
c000a34e:	81 c2 03 04 00 00    	add    edx,0x403
c000a354:	52                   	push   edx
c000a355:	6a 01                	push   0x1
c000a357:	53                   	push   ebx
c000a358:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a35e:	50                   	push   eax
c000a35f:	56                   	push   esi
c000a360:	e8 af f8 ff ff       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a365:	83 c4 20             	add    esp,0x20
c000a368:	39 df                	cmp    edi,ebx
c000a36a:	75 d1                	jne    c000a33d <mapVASFirstTime+0x65>
c000a36c:	0f 20 d8             	mov    eax,cr3
c000a36f:	0f 22 d8             	mov    cr3,eax
c000a372:	83 c4 0c             	add    esp,0xc
c000a375:	5b                   	pop    ebx
c000a376:	5e                   	pop    esi
c000a377:	5f                   	pop    edi
c000a378:	5d                   	pop    ebp
c000a379:	c3                   	ret    
c000a37a:	83 ec 0c             	sub    esp,0xc
c000a37d:	68 91 dc 01 c0       	push   0xc001dc91
c000a382:	e8 51 01 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000a387:	83 c4 10             	add    esp,0x10
c000a38a:	83 c4 0c             	add    esp,0xc
c000a38d:	5b                   	pop    ebx
c000a38e:	5e                   	pop    esi
c000a38f:	5f                   	pop    edi
c000a390:	5d                   	pop    ebp
c000a391:	c3                   	ret    

c000a392 <__cxa_atexit>:
c000a392:	31 c0                	xor    eax,eax
c000a394:	c3                   	ret    

c000a395 <__cxa_finalize>:
c000a395:	c3                   	ret    

c000a396 <__stack_chk_fail>:
c000a396:	55                   	push   ebp
c000a397:	89 e5                	mov    ebp,esp
c000a399:	83 ec 10             	sub    esp,0x10
c000a39c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a39f:	68 aa dc 01 c0       	push   0xc001dcaa
c000a3a4:	e8 2f 01 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000a3a9:	58                   	pop    eax
c000a3aa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a3ad:	5a                   	pop    edx
c000a3ae:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a3b1:	68 aa dc 01 c0       	push   0xc001dcaa
c000a3b6:	e8 1d 01 00 00       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000a3bb:	c7 04 24 b2 dc 01 c0 	mov    DWORD PTR [esp],0xc001dcb2
c000a3c2:	e8 7c 5d 00 00       	call   c0010143 <KePanic(char const*)>
c000a3c7:	83 c4 10             	add    esp,0x10
c000a3ca:	c9                   	leave  
c000a3cb:	c3                   	ret    

c000a3cc <__cxa_pure_virtual>:
c000a3cc:	83 ec 18             	sub    esp,0x18
c000a3cf:	68 ca dc 01 c0       	push   0xc001dcca
c000a3d4:	e8 6a 5d 00 00       	call   c0010143 <KePanic(char const*)>
c000a3d9:	83 c4 1c             	add    esp,0x1c
c000a3dc:	c3                   	ret    

c000a3dd <operator new[](unsigned long)>:
c000a3dd:	e9 d7 d3 ff ff       	jmp    c00077b9 <malloc>

c000a3e2 <operator delete(void*, unsigned long)>:
c000a3e2:	e9 f2 d3 ff ff       	jmp    c00077d9 <rfree>

c000a3e7 <operator delete[](void*)>:
c000a3e7:	e9 ed d3 ff ff       	jmp    c00077d9 <rfree>

c000a3ec <operator delete[](void*, unsigned long)>:
c000a3ec:	e9 e8 d3 ff ff       	jmp    c00077d9 <rfree>

c000a3f1 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a3f1:	55                   	push   ebp
c000a3f2:	b9 04 00 00 00       	mov    ecx,0x4
c000a3f7:	57                   	push   edi
c000a3f8:	56                   	push   esi
c000a3f9:	be d3 d8 01 c0       	mov    esi,0xc001d8d3
c000a3fe:	53                   	push   ebx
c000a3ff:	83 ec 20             	sub    esp,0x20
c000a402:	a1 d2 d8 01 c0       	mov    eax,ds:0xc001d8d2
c000a407:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a40b:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000a40f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a413:	a1 df d8 01 c0       	mov    eax,ds:0xc001d8df
c000a418:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a41c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a420:	fc                   	cld    
c000a421:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a423:	89 ee                	mov    esi,ebp
c000a425:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a429:	eb 02                	jmp    c000a42d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000a42b:	89 c6                	mov    esi,eax
c000a42d:	31 d2                	xor    edx,edx
c000a42f:	41                   	inc    ecx
c000a430:	89 f0                	mov    eax,esi
c000a432:	f7 f3                	div    ebx
c000a434:	39 de                	cmp    esi,ebx
c000a436:	73 f3                	jae    c000a42b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000a438:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a43b:	eb 02                	jmp    c000a43f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000a43d:	89 c5                	mov    ebp,eax
c000a43f:	31 d2                	xor    edx,edx
c000a441:	49                   	dec    ecx
c000a442:	89 e8                	mov    eax,ebp
c000a444:	f7 f3                	div    ebx
c000a446:	39 dd                	cmp    ebp,ebx
c000a448:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a44c:	88 11                	mov    BYTE PTR [ecx],dl
c000a44e:	73 ed                	jae    c000a43d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000a450:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a454:	83 c4 20             	add    esp,0x20
c000a457:	5b                   	pop    ebx
c000a458:	5e                   	pop    esi
c000a459:	5f                   	pop    edi
c000a45a:	5d                   	pop    ebp
c000a45b:	c3                   	ret    

c000a45c <Dbg::logc(char)>:
c000a45c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a460:	f6 05 30 0d 02 c0 10 	test   BYTE PTR ds:0xc0020d30,0x10
c000a467:	75 12                	jne    c000a47b <Dbg::logc(char)+0x1f>
c000a469:	ba fd 03 00 00       	mov    edx,0x3fd
c000a46e:	ec                   	in     al,dx
c000a46f:	a8 20                	test   al,0x20
c000a471:	74 fb                	je     c000a46e <Dbg::logc(char)+0x12>
c000a473:	ba f8 03 00 00       	mov    edx,0x3f8
c000a478:	88 c8                	mov    al,cl
c000a47a:	ee                   	out    dx,al
c000a47b:	c3                   	ret    

c000a47c <Dbg::logs(char*)>:
c000a47c:	53                   	push   ebx
c000a47d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a481:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a484:	84 c0                	test   al,al
c000a486:	74 0f                	je     c000a497 <Dbg::logs(char*)+0x1b>
c000a488:	50                   	push   eax
c000a489:	43                   	inc    ebx
c000a48a:	e8 cd ff ff ff       	call   c000a45c <Dbg::logc(char)>
c000a48f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a492:	5a                   	pop    edx
c000a493:	84 c0                	test   al,al
c000a495:	75 f1                	jne    c000a488 <Dbg::logs(char*)+0xc>
c000a497:	5b                   	pop    ebx
c000a498:	c3                   	ret    

c000a499 <Dbg::logWriteInt(unsigned int)>:
c000a499:	83 ec 10             	sub    esp,0x10
c000a49c:	6a 0a                	push   0xa
c000a49e:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a4a2:	50                   	push   eax
c000a4a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4a7:	50                   	push   eax
c000a4a8:	e8 44 ff ff ff       	call   c000a3f1 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a4ad:	50                   	push   eax
c000a4ae:	e8 c9 ff ff ff       	call   c000a47c <Dbg::logs(char*)>
c000a4b3:	83 c4 20             	add    esp,0x20
c000a4b6:	c3                   	ret    

c000a4b7 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a4b7:	83 ec 10             	sub    esp,0x10
c000a4ba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a4be:	50                   	push   eax
c000a4bf:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a4c3:	50                   	push   eax
c000a4c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a4c8:	52                   	push   edx
c000a4c9:	e8 23 ff ff ff       	call   c000a3f1 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a4ce:	50                   	push   eax
c000a4cf:	e8 a8 ff ff ff       	call   c000a47c <Dbg::logs(char*)>
c000a4d4:	83 c4 20             	add    esp,0x20
c000a4d7:	c3                   	ret    

c000a4d8 <Dbg::kprintf(char const*, ...)>:
c000a4d8:	55                   	push   ebp
c000a4d9:	57                   	push   edi
c000a4da:	56                   	push   esi
c000a4db:	53                   	push   ebx
c000a4dc:	83 ec 0c             	sub    esp,0xc
c000a4df:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a4e3:	f6 05 30 0d 02 c0 10 	test   BYTE PTR ds:0xc0020d30,0x10
c000a4ea:	74 08                	je     c000a4f4 <Dbg::kprintf(char const*, ...)+0x1c>
c000a4ec:	83 c4 0c             	add    esp,0xc
c000a4ef:	5b                   	pop    ebx
c000a4f0:	5e                   	pop    esi
c000a4f1:	5f                   	pop    edi
c000a4f2:	5d                   	pop    ebp
c000a4f3:	c3                   	ret    
c000a4f4:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a4f8:	31 ff                	xor    edi,edi
c000a4fa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a4fe:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a501:	84 c0                	test   al,al
c000a503:	74 e7                	je     c000a4ec <Dbg::kprintf(char const*, ...)+0x14>
c000a505:	8d 77 01             	lea    esi,[edi+0x1]
c000a508:	3c 25                	cmp    al,0x25
c000a50a:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a50d:	75 47                	jne    c000a556 <Dbg::kprintf(char const*, ...)+0x7e>
c000a50f:	83 c7 02             	add    edi,0x2
c000a512:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a515:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a518:	83 e8 25             	sub    eax,0x25
c000a51b:	3c 53                	cmp    al,0x53
c000a51d:	0f 87 d2 00 00 00    	ja     c000a5f5 <Dbg::kprintf(char const*, ...)+0x11d>
c000a523:	25 ff 00 00 00       	and    eax,0xff
c000a528:	ff 24 85 e0 dc 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe2320]
c000a52f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a533:	89 c8                	mov    eax,ecx
c000a535:	83 c1 04             	add    ecx,0x4
c000a538:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a53c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a53e:	55                   	push   ebp
c000a53f:	e8 55 ff ff ff       	call   c000a499 <Dbg::logWriteInt(unsigned int)>
c000a544:	58                   	pop    eax
c000a545:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a548:	84 c0                	test   al,al
c000a54a:	74 a0                	je     c000a4ec <Dbg::kprintf(char const*, ...)+0x14>
c000a54c:	8d 77 01             	lea    esi,[edi+0x1]
c000a54f:	3c 25                	cmp    al,0x25
c000a551:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a554:	74 b9                	je     c000a50f <Dbg::kprintf(char const*, ...)+0x37>
c000a556:	50                   	push   eax
c000a557:	89 f7                	mov    edi,esi
c000a559:	e8 fe fe ff ff       	call   c000a45c <Dbg::logc(char)>
c000a55e:	89 ee                	mov    esi,ebp
c000a560:	58                   	pop    eax
c000a561:	eb e2                	jmp    c000a545 <Dbg::kprintf(char const*, ...)+0x6d>
c000a563:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a567:	89 c8                	mov    eax,ecx
c000a569:	83 c1 04             	add    ecx,0x4
c000a56c:	8b 00                	mov    eax,DWORD PTR [eax]
c000a56e:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a572:	50                   	push   eax
c000a573:	e8 04 ff ff ff       	call   c000a47c <Dbg::logs(char*)>
c000a578:	58                   	pop    eax
c000a579:	eb ca                	jmp    c000a545 <Dbg::kprintf(char const*, ...)+0x6d>
c000a57b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a57f:	89 d0                	mov    eax,edx
c000a581:	83 c2 04             	add    edx,0x4
c000a584:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a588:	8b 00                	mov    eax,DWORD PTR [eax]
c000a58a:	50                   	push   eax
c000a58b:	e8 09 ff ff ff       	call   c000a499 <Dbg::logWriteInt(unsigned int)>
c000a590:	58                   	pop    eax
c000a591:	eb b2                	jmp    c000a545 <Dbg::kprintf(char const*, ...)+0x6d>
c000a593:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a597:	89 d0                	mov    eax,edx
c000a599:	83 c2 04             	add    edx,0x4
c000a59c:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a59f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a5a3:	50                   	push   eax
c000a5a4:	e8 b3 fe ff ff       	call   c000a45c <Dbg::logc(char)>
c000a5a9:	58                   	pop    eax
c000a5aa:	eb 99                	jmp    c000a545 <Dbg::kprintf(char const*, ...)+0x6d>
c000a5ac:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a5b0:	89 c8                	mov    eax,ecx
c000a5b2:	83 c1 04             	add    ecx,0x4
c000a5b5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a5b9:	6a 10                	push   0x10
c000a5bb:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a5bd:	51                   	push   ecx
c000a5be:	e8 f4 fe ff ff       	call   c000a4b7 <Dbg::logWriteIntBase(unsigned int, int)>
c000a5c3:	5d                   	pop    ebp
c000a5c4:	58                   	pop    eax
c000a5c5:	e9 7b ff ff ff       	jmp    c000a545 <Dbg::kprintf(char const*, ...)+0x6d>
c000a5ca:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a5ce:	89 d0                	mov    eax,edx
c000a5d0:	83 c2 08             	add    edx,0x8
c000a5d3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a5d7:	6a 10                	push   0x10
c000a5d9:	8b 00                	mov    eax,DWORD PTR [eax]
c000a5db:	50                   	push   eax
c000a5dc:	e8 d6 fe ff ff       	call   c000a4b7 <Dbg::logWriteIntBase(unsigned int, int)>
c000a5e1:	58                   	pop    eax
c000a5e2:	5a                   	pop    edx
c000a5e3:	e9 5d ff ff ff       	jmp    c000a545 <Dbg::kprintf(char const*, ...)+0x6d>
c000a5e8:	6a 25                	push   0x25
c000a5ea:	e8 6d fe ff ff       	call   c000a45c <Dbg::logc(char)>
c000a5ef:	5a                   	pop    edx
c000a5f0:	e9 50 ff ff ff       	jmp    c000a545 <Dbg::kprintf(char const*, ...)+0x6d>
c000a5f5:	6a 25                	push   0x25
c000a5f7:	e8 60 fe ff ff       	call   c000a45c <Dbg::logc(char)>
c000a5fc:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000a600:	50                   	push   eax
c000a601:	e8 56 fe ff ff       	call   c000a45c <Dbg::logc(char)>
c000a606:	5a                   	pop    edx
c000a607:	59                   	pop    ecx
c000a608:	e9 38 ff ff ff       	jmp    c000a545 <Dbg::kprintf(char const*, ...)+0x6d>
c000a60d:	90                   	nop

c000a60e <File::read(unsigned long long, void*, int*)>:
c000a60e:	53                   	push   ebx
c000a60f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a613:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a617:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a61e:	3c 19                	cmp    al,0x19
c000a620:	77 35                	ja     c000a657 <File::read(unsigned long long, void*, int*)+0x49>
c000a622:	8b 04 85 80 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcd80]
c000a629:	85 c0                	test   eax,eax
c000a62b:	74 2a                	je     c000a657 <File::read(unsigned long long, void*, int*)+0x49>
c000a62d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a633:	85 c0                	test   eax,eax
c000a635:	74 20                	je     c000a657 <File::read(unsigned long long, void*, int*)+0x49>
c000a637:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a63b:	74 21                	je     c000a65e <File::read(unsigned long long, void*, int*)+0x50>
c000a63d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a63f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a643:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a649:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a64d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a651:	5b                   	pop    ebx
c000a652:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000a655:	ff e0                	jmp    eax
c000a657:	b8 0b 00 00 00       	mov    eax,0xb
c000a65c:	eb 05                	jmp    c000a663 <File::read(unsigned long long, void*, int*)+0x55>
c000a65e:	b8 05 00 00 00       	mov    eax,0x5
c000a663:	5b                   	pop    ebx
c000a664:	c3                   	ret    
c000a665:	90                   	nop

c000a666 <File::write(unsigned long long, void*, int*)>:
c000a666:	53                   	push   ebx
c000a667:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a66b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a66f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a676:	3c 19                	cmp    al,0x19
c000a678:	77 35                	ja     c000a6af <File::write(unsigned long long, void*, int*)+0x49>
c000a67a:	8b 04 85 80 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcd80]
c000a681:	85 c0                	test   eax,eax
c000a683:	74 2a                	je     c000a6af <File::write(unsigned long long, void*, int*)+0x49>
c000a685:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a68b:	85 c0                	test   eax,eax
c000a68d:	74 20                	je     c000a6af <File::write(unsigned long long, void*, int*)+0x49>
c000a68f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a693:	74 21                	je     c000a6b6 <File::write(unsigned long long, void*, int*)+0x50>
c000a695:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a697:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a69b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a6a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a6a5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a6a9:	5b                   	pop    ebx
c000a6aa:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000a6ad:	ff e0                	jmp    eax
c000a6af:	b8 0b 00 00 00       	mov    eax,0xb
c000a6b4:	eb 05                	jmp    c000a6bb <File::write(unsigned long long, void*, int*)+0x55>
c000a6b6:	b8 05 00 00 00       	mov    eax,0x5
c000a6bb:	5b                   	pop    ebx
c000a6bc:	c3                   	ret    
c000a6bd:	90                   	nop

c000a6be <Directory::read(unsigned long long, void*, int*)>:
c000a6be:	53                   	push   ebx
c000a6bf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a6c3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a6c7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a6ce:	3c 19                	cmp    al,0x19
c000a6d0:	77 35                	ja     c000a707 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a6d2:	8b 04 85 80 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcd80]
c000a6d9:	85 c0                	test   eax,eax
c000a6db:	74 2a                	je     c000a707 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a6dd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a6e3:	85 c0                	test   eax,eax
c000a6e5:	74 20                	je     c000a707 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a6e7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a6eb:	74 21                	je     c000a70e <Directory::read(unsigned long long, void*, int*)+0x50>
c000a6ed:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a6ef:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a6f3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a6f9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a6fd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a701:	5b                   	pop    ebx
c000a702:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000a705:	ff e0                	jmp    eax
c000a707:	b8 0b 00 00 00       	mov    eax,0xb
c000a70c:	eb 05                	jmp    c000a713 <Directory::read(unsigned long long, void*, int*)+0x55>
c000a70e:	b8 05 00 00 00       	mov    eax,0x5
c000a713:	5b                   	pop    ebx
c000a714:	c3                   	ret    
c000a715:	90                   	nop

c000a716 <Directory::write(unsigned long long, void*, int*)>:
c000a716:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a71a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000a721:	b8 0b 00 00 00       	mov    eax,0xb
c000a726:	80 fa 19             	cmp    dl,0x19
c000a729:	77 18                	ja     c000a743 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a72b:	8b 14 95 80 32 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcd80]
c000a732:	85 d2                	test   edx,edx
c000a734:	74 0d                	je     c000a743 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a736:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000a73d:	19 c0                	sbb    eax,eax
c000a73f:	83 e0 0a             	and    eax,0xa
c000a742:	40                   	inc    eax
c000a743:	c3                   	ret    

c000a744 <File::isAtty()>:
c000a744:	31 c0                	xor    eax,eax
c000a746:	c3                   	ret    
c000a747:	90                   	nop

c000a748 <Directory::isAtty()>:
c000a748:	31 c0                	xor    eax,eax
c000a74a:	c3                   	ret    
c000a74b:	90                   	nop

c000a74c <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000a74c:	b8 0a 00 00 00       	mov    eax,0xa
c000a751:	c3                   	ret    

c000a752 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000a752:	b8 0a 00 00 00       	mov    eax,0xa
c000a757:	c3                   	ret    

c000a758 <Filesystem::allocateSwapfile(char const*, int)>:
c000a758:	31 c0                	xor    eax,eax
c000a75a:	31 d2                	xor    edx,edx
c000a75c:	c3                   	ret    
c000a75d:	90                   	nop

c000a75e <File::~File()>:
c000a75e:	83 ec 0c             	sub    esp,0xc
c000a761:	ba a0 de 01 c0       	mov    edx,0xc001dea0
c000a766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a76a:	89 10                	mov    DWORD PTR [eax],edx
c000a76c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a770:	83 ec 0c             	sub    esp,0xc
c000a773:	50                   	push   eax
c000a774:	e8 ab e8 ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c000a779:	83 c4 10             	add    esp,0x10
c000a77c:	90                   	nop
c000a77d:	83 c4 0c             	add    esp,0xc
c000a780:	c3                   	ret    
c000a781:	90                   	nop

c000a782 <File::~File()>:
c000a782:	83 ec 0c             	sub    esp,0xc
c000a785:	83 ec 0c             	sub    esp,0xc
c000a788:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a78c:	e8 cd ff ff ff       	call   c000a75e <File::~File()>
c000a791:	83 c4 10             	add    esp,0x10
c000a794:	83 ec 08             	sub    esp,0x8
c000a797:	68 14 01 00 00       	push   0x114
c000a79c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7a0:	e8 3d fc ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000a7a5:	83 c4 10             	add    esp,0x10
c000a7a8:	83 c4 0c             	add    esp,0xc
c000a7ab:	c3                   	ret    

c000a7ac <Directory::~Directory()>:
c000a7ac:	83 ec 0c             	sub    esp,0xc
c000a7af:	ba bc de 01 c0       	mov    edx,0xc001debc
c000a7b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7b8:	89 10                	mov    DWORD PTR [eax],edx
c000a7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7be:	83 ec 0c             	sub    esp,0xc
c000a7c1:	50                   	push   eax
c000a7c2:	e8 5d e8 ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	90                   	nop
c000a7cb:	83 c4 0c             	add    esp,0xc
c000a7ce:	c3                   	ret    
c000a7cf:	90                   	nop

c000a7d0 <Directory::~Directory()>:
c000a7d0:	83 ec 0c             	sub    esp,0xc
c000a7d3:	83 ec 0c             	sub    esp,0xc
c000a7d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7da:	e8 cd ff ff ff       	call   c000a7ac <Directory::~Directory()>
c000a7df:	83 c4 10             	add    esp,0x10
c000a7e2:	83 ec 08             	sub    esp,0x8
c000a7e5:	68 14 01 00 00       	push   0x114
c000a7ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7ee:	e8 ef fb ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000a7f3:	83 c4 10             	add    esp,0x10
c000a7f6:	83 c4 0c             	add    esp,0xc
c000a7f9:	c3                   	ret    

c000a7fa <Filesystem::Filesystem()>:
c000a7fa:	ba 38 de 01 c0       	mov    edx,0xc001de38
c000a7ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a803:	89 10                	mov    DWORD PTR [eax],edx
c000a805:	8b 15 14 0e 02 c0    	mov    edx,DWORD PTR ds:0xc0020e14
c000a80b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a80f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000a812:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a816:	a3 14 0e 02 c0       	mov    ds:0xc0020e14,eax
c000a81b:	90                   	nop
c000a81c:	c3                   	ret    
c000a81d:	90                   	nop

c000a81e <Filesystem::~Filesystem()>:
c000a81e:	ba 38 de 01 c0       	mov    edx,0xc001de38
c000a823:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a827:	89 10                	mov    DWORD PTR [eax],edx
c000a829:	90                   	nop
c000a82a:	c3                   	ret    
c000a82b:	90                   	nop

c000a82c <Filesystem::~Filesystem()>:
c000a82c:	83 ec 0c             	sub    esp,0xc
c000a82f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a833:	e8 e6 ff ff ff       	call   c000a81e <Filesystem::~Filesystem()>
c000a838:	83 c4 04             	add    esp,0x4
c000a83b:	83 ec 08             	sub    esp,0x8
c000a83e:	6a 08                	push   0x8
c000a840:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a844:	e8 99 fb ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000a849:	83 c4 10             	add    esp,0x10
c000a84c:	83 c4 0c             	add    esp,0xc
c000a84f:	c3                   	ret    

c000a850 <Fs::getcwd(Process*, char*, int)>:
c000a850:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a854:	31 c0                	xor    eax,eax
c000a856:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000a859:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000a85d:	7d 15                	jge    c000a874 <Fs::getcwd(Process*, char*, int)+0x24>
c000a85f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a863:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000a86a:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a86d:	84 c9                	test   cl,cl
c000a86f:	74 06                	je     c000a877 <Fs::getcwd(Process*, char*, int)+0x27>
c000a871:	40                   	inc    eax
c000a872:	eb e2                	jmp    c000a856 <Fs::getcwd(Process*, char*, int)+0x6>
c000a874:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a877:	31 c0                	xor    eax,eax
c000a879:	c3                   	ret    

c000a87a <Fs::initVFS()>:
c000a87a:	83 ec 18             	sub    esp,0x18
c000a87d:	6a 08                	push   0x8
c000a87f:	e8 35 cf ff ff       	call   c00077b9 <malloc>
c000a884:	89 04 24             	mov    DWORD PTR [esp],eax
c000a887:	e8 8c c9 00 00       	call   c0017218 <FAT::FAT()>
c000a88c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000a893:	e8 21 cf ff ff       	call   c00077b9 <malloc>
c000a898:	89 04 24             	mov    DWORD PTR [esp],eax
c000a89b:	e8 d4 d6 00 00       	call   c0017f74 <ISO9660::ISO9660()>
c000a8a0:	83 c4 1c             	add    esp,0x1c
c000a8a3:	c3                   	ret    

c000a8a4 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000a8a4:	55                   	push   ebp
c000a8a5:	57                   	push   edi
c000a8a6:	56                   	push   esi
c000a8a7:	53                   	push   ebx
c000a8a8:	81 ec 10 04 00 00    	sub    esp,0x410
c000a8ae:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000a8b5:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000a8bc:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000a8c3:	68 00 04 00 00       	push   0x400
c000a8c8:	6a 00                	push   0x0
c000a8ca:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000a8ce:	56                   	push   esi
c000a8cf:	e8 fc 5b ff ff       	call   c00004d0 <memset>
c000a8d4:	83 c4 10             	add    esp,0x10
c000a8d7:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000a8db:	75 0b                	jne    c000a8e8 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000a8dd:	50                   	push   eax
c000a8de:	50                   	push   eax
c000a8df:	57                   	push   edi
c000a8e0:	56                   	push   esi
c000a8e1:	e8 1a 5d ff ff       	call   c0000600 <strcpy>
c000a8e6:	eb 41                	jmp    c000a929 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000a8e8:	8a 07                	mov    al,BYTE PTR [edi]
c000a8ea:	3c 5c                	cmp    al,0x5c
c000a8ec:	74 04                	je     c000a8f2 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000a8ee:	3c 2f                	cmp    al,0x2f
c000a8f0:	75 18                	jne    c000a90a <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000a8f2:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a8f5:	3c 60                	cmp    al,0x60
c000a8f7:	7e 03                	jle    c000a8fc <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000a8f9:	83 e8 20             	sub    eax,0x20
c000a8fc:	88 04 24             	mov    BYTE PTR [esp],al
c000a8ff:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a906:	50                   	push   eax
c000a907:	50                   	push   eax
c000a908:	eb 18                	jmp    c000a922 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000a90a:	50                   	push   eax
c000a90b:	50                   	push   eax
c000a90c:	55                   	push   ebp
c000a90d:	56                   	push   esi
c000a90e:	e8 ed 5c ff ff       	call   c0000600 <strcpy>
c000a913:	5a                   	pop    edx
c000a914:	59                   	pop    ecx
c000a915:	68 6a ed 01 c0       	push   0xc001ed6a
c000a91a:	56                   	push   esi
c000a91b:	e8 a0 5e ff ff       	call   c00007c0 <strcat>
c000a920:	5d                   	pop    ebp
c000a921:	58                   	pop    eax
c000a922:	57                   	push   edi
c000a923:	56                   	push   esi
c000a924:	e8 97 5e ff ff       	call   c00007c0 <strcat>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	8a 04 24             	mov    al,BYTE PTR [esp]
c000a92f:	3c 60                	cmp    al,0x60
c000a931:	7e 03                	jle    c000a936 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000a933:	83 e8 20             	sub    eax,0x20
c000a936:	88 04 24             	mov    BYTE PTR [esp],al
c000a939:	88 03                	mov    BYTE PTR [ebx],al
c000a93b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a942:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000a948:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000a94c:	bf 03 00 00 00       	mov    edi,0x3
c000a951:	b8 03 00 00 00       	mov    eax,0x3
c000a956:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000a959:	84 d2                	test   dl,dl
c000a95b:	0f 84 91 00 00 00    	je     c000a9f2 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000a961:	8d 4f 01             	lea    ecx,[edi+0x1]
c000a964:	80 fa 5c             	cmp    dl,0x5c
c000a967:	74 05                	je     c000a96e <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000a969:	80 fa 2f             	cmp    dl,0x2f
c000a96c:	75 12                	jne    c000a980 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000a96e:	89 c5                	mov    ebp,eax
c000a970:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000a975:	74 09                	je     c000a980 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000a977:	40                   	inc    eax
c000a978:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000a97c:	89 cf                	mov    edi,ecx
c000a97e:	eb d6                	jmp    c000a956 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000a980:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000a985:	75 5b                	jne    c000a9e2 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000a987:	80 fa 2e             	cmp    dl,0x2e
c000a98a:	75 56                	jne    c000a9e2 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000a98c:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000a990:	74 19                	je     c000a9ab <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000a992:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000a997:	74 53                	je     c000a9ec <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000a999:	89 f9                	mov    ecx,edi
c000a99b:	41                   	inc    ecx
c000a99c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000a99f:	80 fa 2f             	cmp    dl,0x2f
c000a9a2:	74 f7                	je     c000a99b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000a9a4:	80 fa 5c             	cmp    dl,0x5c
c000a9a7:	74 f2                	je     c000a99b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000a9a9:	eb d1                	jmp    c000a97c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9ab:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000a9b0:	74 3a                	je     c000a9ec <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000a9b2:	83 f8 03             	cmp    eax,0x3
c000a9b5:	74 c5                	je     c000a97c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9b7:	41                   	inc    ecx
c000a9b8:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000a9bb:	80 fa 2f             	cmp    dl,0x2f
c000a9be:	74 f7                	je     c000a9b7 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000a9c0:	80 fa 5c             	cmp    dl,0x5c
c000a9c3:	74 f2                	je     c000a9b7 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000a9c5:	48                   	dec    eax
c000a9c6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000a9ca:	75 06                	jne    c000a9d2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000a9cc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000a9d0:	eb f3                	jmp    c000a9c5 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000a9d2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000a9d6:	74 07                	je     c000a9df <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000a9d8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000a9dc:	48                   	dec    eax
c000a9dd:	eb f3                	jmp    c000a9d2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000a9df:	40                   	inc    eax
c000a9e0:	eb 9a                	jmp    c000a97c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9e2:	80 fa 2f             	cmp    dl,0x2f
c000a9e5:	74 95                	je     c000a97c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9e7:	80 fa 5c             	cmp    dl,0x5c
c000a9ea:	74 90                	je     c000a97c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9ec:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000a9ef:	40                   	inc    eax
c000a9f0:	eb 8a                	jmp    c000a97c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9f2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000a9f6:	83 ec 0c             	sub    esp,0xc
c000a9f9:	53                   	push   ebx
c000a9fa:	e8 41 5b ff ff       	call   c0000540 <strlen>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000aa07:	75 26                	jne    c000aa2f <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000aa09:	83 ec 0c             	sub    esp,0xc
c000aa0c:	53                   	push   ebx
c000aa0d:	e8 2e 5b ff ff       	call   c0000540 <strlen>
c000aa12:	83 c4 10             	add    esp,0x10
c000aa15:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000aa1a:	74 26                	je     c000aa42 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000aa1c:	83 ec 0c             	sub    esp,0xc
c000aa1f:	53                   	push   ebx
c000aa20:	e8 1b 5b ff ff       	call   c0000540 <strlen>
c000aa25:	83 c4 10             	add    esp,0x10
c000aa28:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000aa2d:	eb c7                	jmp    c000a9f6 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000aa2f:	83 ec 0c             	sub    esp,0xc
c000aa32:	53                   	push   ebx
c000aa33:	e8 08 5b ff ff       	call   c0000540 <strlen>
c000aa38:	83 c4 10             	add    esp,0x10
c000aa3b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000aa40:	74 c7                	je     c000aa09 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000aa42:	81 c4 0c 04 00 00    	add    esp,0x40c
c000aa48:	5b                   	pop    ebx
c000aa49:	5e                   	pop    esi
c000aa4a:	5f                   	pop    edi
c000aa4b:	5d                   	pop    ebp
c000aa4c:	c3                   	ret    
c000aa4d:	90                   	nop

c000aa4e <File::File(char const*, Process*)>:
c000aa4e:	83 ec 0c             	sub    esp,0xc
c000aa51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa55:	83 ec 08             	sub    esp,0x8
c000aa58:	6a 00                	push   0x0
c000aa5a:	50                   	push   eax
c000aa5b:	e8 e2 e3 ff ff       	call   c0008e42 <UnixFile::UnixFile(int)>
c000aa60:	83 c4 10             	add    esp,0x10
c000aa63:	ba a0 de 01 c0       	mov    edx,0xc001dea0
c000aa68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa6c:	89 10                	mov    DWORD PTR [eax],edx
c000aa6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000aa72:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000aa78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa7c:	83 c0 0d             	add    eax,0xd
c000aa7f:	83 ec 04             	sub    esp,0x4
c000aa82:	52                   	push   edx
c000aa83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa87:	50                   	push   eax
c000aa88:	e8 17 fe ff ff       	call   c000a8a4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000aa8d:	83 c4 10             	add    esp,0x10
c000aa90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa94:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000aa97:	8d 50 bf             	lea    edx,[eax-0x41]
c000aa9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa9e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000aaa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaa8:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000aaac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aab0:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aab6:	25 ff 00 00 00       	and    eax,0xff
c000aabb:	8b 04 85 80 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcd80]
c000aac2:	85 c0                	test   eax,eax
c000aac4:	74 42                	je     c000ab08 <File::File(char const*, Process*)+0xba>
c000aac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaca:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aad0:	25 ff 00 00 00       	and    eax,0xff
c000aad5:	8b 04 85 80 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcd80]
c000aadc:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000aae2:	85 c0                	test   eax,eax
c000aae4:	75 22                	jne    c000ab08 <File::File(char const*, Process*)+0xba>
c000aae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaea:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aaf0:	25 ff 00 00 00       	and    eax,0xff
c000aaf5:	8b 04 85 80 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcd80]
c000aafc:	83 ec 0c             	sub    esp,0xc
c000aaff:	50                   	push   eax
c000ab00:	e8 21 20 00 00       	call   c000cb26 <LogicalDisk::mount()>
c000ab05:	83 c4 10             	add    esp,0x10
c000ab08:	90                   	nop
c000ab09:	83 c4 0c             	add    esp,0xc
c000ab0c:	c3                   	ret    
c000ab0d:	90                   	nop

c000ab0e <File::open(FileOpenMode)>:
c000ab0e:	53                   	push   ebx
c000ab0f:	b8 0b 00 00 00       	mov    eax,0xb
c000ab14:	83 ec 08             	sub    esp,0x8
c000ab17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ab1b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000ab22:	80 fa 19             	cmp    dl,0x19
c000ab25:	77 40                	ja     c000ab67 <File::open(FileOpenMode)+0x59>
c000ab27:	8b 14 95 80 32 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcd80]
c000ab2e:	85 d2                	test   edx,edx
c000ab30:	74 35                	je     c000ab67 <File::open(FileOpenMode)+0x59>
c000ab32:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ab38:	85 d2                	test   edx,edx
c000ab3a:	74 2b                	je     c000ab67 <File::open(FileOpenMode)+0x59>
c000ab3c:	b8 06 00 00 00       	mov    eax,0x6
c000ab41:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000ab45:	75 20                	jne    c000ab67 <File::open(FileOpenMode)+0x59>
c000ab47:	8b 02                	mov    eax,DWORD PTR [edx]
c000ab49:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000ab4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab53:	51                   	push   ecx
c000ab54:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000ab57:	51                   	push   ecx
c000ab58:	52                   	push   edx
c000ab59:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ab5c:	83 c4 10             	add    esp,0x10
c000ab5f:	85 c0                	test   eax,eax
c000ab61:	75 04                	jne    c000ab67 <File::open(FileOpenMode)+0x59>
c000ab63:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000ab67:	83 c4 08             	add    esp,0x8
c000ab6a:	5b                   	pop    ebx
c000ab6b:	c3                   	ret    

c000ab6c <File::close()>:
c000ab6c:	53                   	push   ebx
c000ab6d:	b8 0b 00 00 00       	mov    eax,0xb
c000ab72:	83 ec 08             	sub    esp,0x8
c000ab75:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ab79:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ab80:	80 fa 19             	cmp    dl,0x19
c000ab83:	77 41                	ja     c000abc6 <File::close()+0x5a>
c000ab85:	8b 1c 95 80 32 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdcd80]
c000ab8c:	85 db                	test   ebx,ebx
c000ab8e:	74 36                	je     c000abc6 <File::close()+0x5a>
c000ab90:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000ab97:	74 2d                	je     c000abc6 <File::close()+0x5a>
c000ab99:	b8 05 00 00 00       	mov    eax,0x5
c000ab9e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000aba2:	74 22                	je     c000abc6 <File::close()+0x5a>
c000aba4:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000aba8:	8b 04 95 80 32 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcd80]
c000abaf:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000abb5:	53                   	push   ebx
c000abb6:	53                   	push   ebx
c000abb7:	8b 10                	mov    edx,DWORD PTR [eax]
c000abb9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000abbf:	50                   	push   eax
c000abc0:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000abc3:	83 c4 10             	add    esp,0x10
c000abc6:	83 c4 08             	add    esp,0x8
c000abc9:	5b                   	pop    ebx
c000abca:	c3                   	ret    
c000abcb:	90                   	nop

c000abcc <File::seek(unsigned long long)>:
c000abcc:	56                   	push   esi
c000abcd:	53                   	push   ebx
c000abce:	b8 0b 00 00 00       	mov    eax,0xb
c000abd3:	51                   	push   ecx
c000abd4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000abd8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000abdc:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000abe3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000abe7:	80 fa 19             	cmp    dl,0x19
c000abea:	77 31                	ja     c000ac1d <File::seek(unsigned long long)+0x51>
c000abec:	8b 14 95 80 32 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcd80]
c000abf3:	85 d2                	test   edx,edx
c000abf5:	74 26                	je     c000ac1d <File::seek(unsigned long long)+0x51>
c000abf7:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000abfd:	85 d2                	test   edx,edx
c000abff:	74 1c                	je     c000ac1d <File::seek(unsigned long long)+0x51>
c000ac01:	b8 05 00 00 00       	mov    eax,0x5
c000ac06:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ac0a:	74 11                	je     c000ac1d <File::seek(unsigned long long)+0x51>
c000ac0c:	8b 02                	mov    eax,DWORD PTR [edx]
c000ac0e:	53                   	push   ebx
c000ac0f:	51                   	push   ecx
c000ac10:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ac16:	52                   	push   edx
c000ac17:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ac1a:	83 c4 10             	add    esp,0x10
c000ac1d:	5a                   	pop    edx
c000ac1e:	5b                   	pop    ebx
c000ac1f:	5e                   	pop    esi
c000ac20:	c3                   	ret    
c000ac21:	90                   	nop

c000ac22 <File::tell(unsigned long long*)>:
c000ac22:	83 ec 0c             	sub    esp,0xc
c000ac25:	b8 0b 00 00 00       	mov    eax,0xb
c000ac2a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ac2e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ac35:	80 fa 19             	cmp    dl,0x19
c000ac38:	77 34                	ja     c000ac6e <File::tell(unsigned long long*)+0x4c>
c000ac3a:	8b 14 95 80 32 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcd80]
c000ac41:	85 d2                	test   edx,edx
c000ac43:	74 29                	je     c000ac6e <File::tell(unsigned long long*)+0x4c>
c000ac45:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ac4b:	85 d2                	test   edx,edx
c000ac4d:	74 1f                	je     c000ac6e <File::tell(unsigned long long*)+0x4c>
c000ac4f:	b8 05 00 00 00       	mov    eax,0x5
c000ac54:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ac58:	74 14                	je     c000ac6e <File::tell(unsigned long long*)+0x4c>
c000ac5a:	50                   	push   eax
c000ac5b:	8b 02                	mov    eax,DWORD PTR [edx]
c000ac5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac61:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ac67:	52                   	push   edx
c000ac68:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ac6b:	83 c4 10             	add    esp,0x10
c000ac6e:	83 c4 0c             	add    esp,0xc
c000ac71:	c3                   	ret    

c000ac72 <File::rewind()>:
c000ac72:	83 ec 10             	sub    esp,0x10
c000ac75:	6a 00                	push   0x0
c000ac77:	6a 00                	push   0x0
c000ac79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac7d:	e8 4a ff ff ff       	call   c000abcc <File::seek(unsigned long long)>
c000ac82:	83 c4 1c             	add    esp,0x1c
c000ac85:	c3                   	ret    

c000ac86 <File::unlink()>:
c000ac86:	83 ec 0c             	sub    esp,0xc
c000ac89:	b8 0b 00 00 00       	mov    eax,0xb
c000ac8e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ac92:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ac99:	80 f9 19             	cmp    cl,0x19
c000ac9c:	77 2f                	ja     c000accd <File::unlink()+0x47>
c000ac9e:	8b 0c 8d 80 32 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcd80]
c000aca5:	85 c9                	test   ecx,ecx
c000aca7:	74 24                	je     c000accd <File::unlink()+0x47>
c000aca9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000acaf:	85 c9                	test   ecx,ecx
c000acb1:	74 1a                	je     c000accd <File::unlink()+0x47>
c000acb3:	b8 06 00 00 00       	mov    eax,0x6
c000acb8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000acbc:	75 0f                	jne    c000accd <File::unlink()+0x47>
c000acbe:	83 c2 0d             	add    edx,0xd
c000acc1:	50                   	push   eax
c000acc2:	50                   	push   eax
c000acc3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000acc5:	52                   	push   edx
c000acc6:	51                   	push   ecx
c000acc7:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000acca:	83 c4 10             	add    esp,0x10
c000accd:	83 c4 0c             	add    esp,0xc
c000acd0:	c3                   	ret    
c000acd1:	90                   	nop

c000acd2 <File::rename(char const*)>:
c000acd2:	83 ec 0c             	sub    esp,0xc
c000acd5:	b8 0b 00 00 00       	mov    eax,0xb
c000acda:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000acde:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ace5:	80 f9 19             	cmp    cl,0x19
c000ace8:	77 32                	ja     c000ad1c <File::rename(char const*)+0x4a>
c000acea:	8b 0c 8d 80 32 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcd80]
c000acf1:	85 c9                	test   ecx,ecx
c000acf3:	74 27                	je     c000ad1c <File::rename(char const*)+0x4a>
c000acf5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000acfb:	85 c9                	test   ecx,ecx
c000acfd:	74 1d                	je     c000ad1c <File::rename(char const*)+0x4a>
c000acff:	b8 06 00 00 00       	mov    eax,0x6
c000ad04:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad08:	75 12                	jne    c000ad1c <File::rename(char const*)+0x4a>
c000ad0a:	83 c2 0d             	add    edx,0xd
c000ad0d:	50                   	push   eax
c000ad0e:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ad10:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad14:	52                   	push   edx
c000ad15:	51                   	push   ecx
c000ad16:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000ad19:	83 c4 10             	add    esp,0x10
c000ad1c:	83 c4 0c             	add    esp,0xc
c000ad1f:	c3                   	ret    

c000ad20 <File::chfatattr(unsigned char, unsigned char)>:
c000ad20:	57                   	push   edi
c000ad21:	b8 0b 00 00 00       	mov    eax,0xb
c000ad26:	56                   	push   esi
c000ad27:	53                   	push   ebx
c000ad28:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad2c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ad30:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad37:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ad3b:	80 f9 19             	cmp    cl,0x19
c000ad3e:	77 37                	ja     c000ad77 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad40:	8b 0c 8d 80 32 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcd80]
c000ad47:	85 c9                	test   ecx,ecx
c000ad49:	74 2c                	je     c000ad77 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad4b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ad51:	85 c9                	test   ecx,ecx
c000ad53:	74 22                	je     c000ad77 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad55:	b8 06 00 00 00       	mov    eax,0x6
c000ad5a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad5e:	75 17                	jne    c000ad77 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad60:	8b 39                	mov    edi,DWORD PTR [ecx]
c000ad62:	89 f0                	mov    eax,esi
c000ad64:	83 c2 0d             	add    edx,0xd
c000ad67:	0f b6 f0             	movzx  esi,al
c000ad6a:	0f b6 db             	movzx  ebx,bl
c000ad6d:	56                   	push   esi
c000ad6e:	53                   	push   ebx
c000ad6f:	52                   	push   edx
c000ad70:	51                   	push   ecx
c000ad71:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000ad74:	83 c4 10             	add    esp,0x10
c000ad77:	5b                   	pop    ebx
c000ad78:	5e                   	pop    esi
c000ad79:	5f                   	pop    edi
c000ad7a:	c3                   	ret    
c000ad7b:	90                   	nop

c000ad7c <File::exists()>:
c000ad7c:	83 ec 0c             	sub    esp,0xc
c000ad7f:	31 c0                	xor    eax,eax
c000ad81:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad85:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad8c:	80 f9 19             	cmp    cl,0x19
c000ad8f:	77 24                	ja     c000adb5 <File::exists()+0x39>
c000ad91:	8b 0c 8d 80 32 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcd80]
c000ad98:	85 c9                	test   ecx,ecx
c000ad9a:	74 19                	je     c000adb5 <File::exists()+0x39>
c000ad9c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ada2:	85 c9                	test   ecx,ecx
c000ada4:	74 0f                	je     c000adb5 <File::exists()+0x39>
c000ada6:	83 c2 0d             	add    edx,0xd
c000ada9:	50                   	push   eax
c000adaa:	50                   	push   eax
c000adab:	8b 01                	mov    eax,DWORD PTR [ecx]
c000adad:	52                   	push   edx
c000adae:	51                   	push   ecx
c000adaf:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000adb2:	83 c4 10             	add    esp,0x10
c000adb5:	83 c4 0c             	add    esp,0xc
c000adb8:	c3                   	ret    
c000adb9:	90                   	nop

c000adba <File::stat(unsigned long long*, bool*)>:
c000adba:	56                   	push   esi
c000adbb:	53                   	push   ebx
c000adbc:	50                   	push   eax
c000adbd:	b8 0b 00 00 00       	mov    eax,0xb
c000adc2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000adc6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000adca:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000add1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000add5:	80 f9 19             	cmp    cl,0x19
c000add8:	77 3d                	ja     c000ae17 <File::stat(unsigned long long*, bool*)+0x5d>
c000adda:	8b 0c 8d 80 32 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcd80]
c000ade1:	85 c9                	test   ecx,ecx
c000ade3:	74 32                	je     c000ae17 <File::stat(unsigned long long*, bool*)+0x5d>
c000ade5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000adeb:	85 c9                	test   ecx,ecx
c000aded:	74 28                	je     c000ae17 <File::stat(unsigned long long*, bool*)+0x5d>
c000adef:	8b 01                	mov    eax,DWORD PTR [ecx]
c000adf1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000adf5:	74 13                	je     c000ae0a <File::stat(unsigned long long*, bool*)+0x50>
c000adf7:	83 ec 04             	sub    esp,0x4
c000adfa:	56                   	push   esi
c000adfb:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000ae01:	51                   	push   ecx
c000ae02:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000ae05:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000ae08:	eb 0a                	jmp    c000ae14 <File::stat(unsigned long long*, bool*)+0x5a>
c000ae0a:	53                   	push   ebx
c000ae0b:	83 c2 0d             	add    edx,0xd
c000ae0e:	56                   	push   esi
c000ae0f:	52                   	push   edx
c000ae10:	51                   	push   ecx
c000ae11:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000ae14:	83 c4 10             	add    esp,0x10
c000ae17:	5a                   	pop    edx
c000ae18:	5b                   	pop    ebx
c000ae19:	5e                   	pop    esi
c000ae1a:	c3                   	ret    

c000ae1b <Fs::setcwd(Process*, char*)>:
c000ae1b:	55                   	push   ebp
c000ae1c:	57                   	push   edi
c000ae1d:	56                   	push   esi
c000ae1e:	53                   	push   ebx
c000ae1f:	81 ec 20 02 00 00    	sub    esp,0x220
c000ae25:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000ae2c:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000ae32:	57                   	push   edi
c000ae33:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000ae3a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000ae3e:	56                   	push   esi
c000ae3f:	e8 60 fa ff ff       	call   c000a8a4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000ae44:	89 34 24             	mov    DWORD PTR [esp],esi
c000ae47:	e8 f4 56 ff ff       	call   c0000540 <strlen>
c000ae4c:	83 c4 10             	add    esp,0x10
c000ae4f:	83 f8 02             	cmp    eax,0x2
c000ae52:	77 15                	ja     c000ae69 <Fs::setcwd(Process*, char*)+0x4e>
c000ae54:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000ae59:	83 eb 41             	sub    ebx,0x41
c000ae5c:	8b 04 9d 80 32 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdcd80]
c000ae63:	85 c0                	test   eax,eax
c000ae65:	75 1c                	jne    c000ae83 <Fs::setcwd(Process*, char*)+0x68>
c000ae67:	eb 2f                	jmp    c000ae98 <Fs::setcwd(Process*, char*)+0x7d>
c000ae69:	83 ec 0c             	sub    esp,0xc
c000ae6c:	56                   	push   esi
c000ae6d:	e8 ce 56 ff ff       	call   c0000540 <strlen>
c000ae72:	83 c4 10             	add    esp,0x10
c000ae75:	83 f8 03             	cmp    eax,0x3
c000ae78:	75 57                	jne    c000aed1 <Fs::setcwd(Process*, char*)+0xb6>
c000ae7a:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000ae7f:	75 50                	jne    c000aed1 <Fs::setcwd(Process*, char*)+0xb6>
c000ae81:	eb d1                	jmp    c000ae54 <Fs::setcwd(Process*, char*)+0x39>
c000ae83:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000ae8a:	75 0c                	jne    c000ae98 <Fs::setcwd(Process*, char*)+0x7d>
c000ae8c:	83 ec 0c             	sub    esp,0xc
c000ae8f:	50                   	push   eax
c000ae90:	e8 91 1c 00 00       	call   c000cb26 <LogicalDisk::mount()>
c000ae95:	83 c4 10             	add    esp,0x10
c000ae98:	b8 03 00 00 00       	mov    eax,0x3
c000ae9d:	83 fb 19             	cmp    ebx,0x19
c000aea0:	0f 87 c6 00 00 00    	ja     c000af6c <Fs::setcwd(Process*, char*)+0x151>
c000aea6:	8b 14 9d 80 32 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffdcd80]
c000aead:	b8 05 00 00 00       	mov    eax,0x5
c000aeb2:	85 d2                	test   edx,edx
c000aeb4:	0f 84 b2 00 00 00    	je     c000af6c <Fs::setcwd(Process*, char*)+0x151>
c000aeba:	b8 06 00 00 00       	mov    eax,0x6
c000aebf:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000aec6:	0f 85 92 00 00 00    	jne    c000af5e <Fs::setcwd(Process*, char*)+0x143>
c000aecc:	e9 9b 00 00 00       	jmp    c000af6c <Fs::setcwd(Process*, char*)+0x151>
c000aed1:	83 ec 0c             	sub    esp,0xc
c000aed4:	68 14 01 00 00       	push   0x114
c000aed9:	e8 db c8 ff ff       	call   c00077b9 <malloc>
c000aede:	83 c4 0c             	add    esp,0xc
c000aee1:	89 c3                	mov    ebx,eax
c000aee3:	55                   	push   ebp
c000aee4:	56                   	push   esi
c000aee5:	50                   	push   eax
c000aee6:	e8 63 fb ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c000aeeb:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000aef0:	83 c4 0c             	add    esp,0xc
c000aef3:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000aef7:	50                   	push   eax
c000aef8:	8d 44 24 10          	lea    eax,[esp+0x10]
c000aefc:	50                   	push   eax
c000aefd:	53                   	push   ebx
c000aefe:	e8 b7 fe ff ff       	call   c000adba <File::stat(unsigned long long*, bool*)>
c000af03:	83 c4 10             	add    esp,0x10
c000af06:	83 f8 02             	cmp    eax,0x2
c000af09:	74 04                	je     c000af0f <Fs::setcwd(Process*, char*)+0xf4>
c000af0b:	85 c0                	test   eax,eax
c000af0d:	74 1c                	je     c000af2b <Fs::setcwd(Process*, char*)+0x110>
c000af0f:	b8 01 00 00 00       	mov    eax,0x1
c000af14:	85 db                	test   ebx,ebx
c000af16:	74 54                	je     c000af6c <Fs::setcwd(Process*, char*)+0x151>
c000af18:	83 ec 0c             	sub    esp,0xc
c000af1b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af1d:	53                   	push   ebx
c000af1e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000af21:	83 c4 10             	add    esp,0x10
c000af24:	b8 01 00 00 00       	mov    eax,0x1
c000af29:	eb 41                	jmp    c000af6c <Fs::setcwd(Process*, char*)+0x151>
c000af2b:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000af30:	75 1c                	jne    c000af4e <Fs::setcwd(Process*, char*)+0x133>
c000af32:	b8 02 00 00 00       	mov    eax,0x2
c000af37:	85 db                	test   ebx,ebx
c000af39:	74 31                	je     c000af6c <Fs::setcwd(Process*, char*)+0x151>
c000af3b:	83 ec 0c             	sub    esp,0xc
c000af3e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af40:	53                   	push   ebx
c000af41:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000af44:	83 c4 10             	add    esp,0x10
c000af47:	b8 02 00 00 00       	mov    eax,0x2
c000af4c:	eb 1e                	jmp    c000af6c <Fs::setcwd(Process*, char*)+0x151>
c000af4e:	85 db                	test   ebx,ebx
c000af50:	74 0c                	je     c000af5e <Fs::setcwd(Process*, char*)+0x143>
c000af52:	83 ec 0c             	sub    esp,0xc
c000af55:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af57:	53                   	push   ebx
c000af58:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000af5b:	83 c4 10             	add    esp,0x10
c000af5e:	50                   	push   eax
c000af5f:	50                   	push   eax
c000af60:	56                   	push   esi
c000af61:	57                   	push   edi
c000af62:	e8 99 56 ff ff       	call   c0000600 <strcpy>
c000af67:	83 c4 10             	add    esp,0x10
c000af6a:	31 c0                	xor    eax,eax
c000af6c:	81 c4 1c 02 00 00    	add    esp,0x21c
c000af72:	5b                   	pop    ebx
c000af73:	5e                   	pop    esi
c000af74:	5f                   	pop    edi
c000af75:	5d                   	pop    ebp
c000af76:	c3                   	ret    
c000af77:	90                   	nop

c000af78 <Directory::Directory(char const*, Process*)>:
c000af78:	83 ec 0c             	sub    esp,0xc
c000af7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af7f:	83 ec 08             	sub    esp,0x8
c000af82:	6a 00                	push   0x0
c000af84:	50                   	push   eax
c000af85:	e8 b8 de ff ff       	call   c0008e42 <UnixFile::UnixFile(int)>
c000af8a:	83 c4 10             	add    esp,0x10
c000af8d:	ba bc de 01 c0       	mov    edx,0xc001debc
c000af92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af96:	89 10                	mov    DWORD PTR [eax],edx
c000af98:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000af9c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000afa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afa6:	83 c0 0d             	add    eax,0xd
c000afa9:	83 ec 04             	sub    esp,0x4
c000afac:	52                   	push   edx
c000afad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afb1:	50                   	push   eax
c000afb2:	e8 ed f8 ff ff       	call   c000a8a4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000afb7:	83 c4 10             	add    esp,0x10
c000afba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afbe:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000afc1:	8d 50 bf             	lea    edx,[eax-0x41]
c000afc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afc8:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000afce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afd2:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000afd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afda:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000afe0:	25 ff 00 00 00       	and    eax,0xff
c000afe5:	8b 04 85 80 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcd80]
c000afec:	85 c0                	test   eax,eax
c000afee:	74 42                	je     c000b032 <Directory::Directory(char const*, Process*)+0xba>
c000aff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aff4:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000affa:	25 ff 00 00 00       	and    eax,0xff
c000afff:	8b 04 85 80 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcd80]
c000b006:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b00c:	85 c0                	test   eax,eax
c000b00e:	75 22                	jne    c000b032 <Directory::Directory(char const*, Process*)+0xba>
c000b010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b014:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b01a:	25 ff 00 00 00       	and    eax,0xff
c000b01f:	8b 04 85 80 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcd80]
c000b026:	83 ec 0c             	sub    esp,0xc
c000b029:	50                   	push   eax
c000b02a:	e8 f7 1a 00 00       	call   c000cb26 <LogicalDisk::mount()>
c000b02f:	83 c4 10             	add    esp,0x10
c000b032:	90                   	nop
c000b033:	83 c4 0c             	add    esp,0xc
c000b036:	c3                   	ret    
c000b037:	90                   	nop

c000b038 <Directory::open()>:
c000b038:	53                   	push   ebx
c000b039:	b8 0b 00 00 00       	mov    eax,0xb
c000b03e:	83 ec 08             	sub    esp,0x8
c000b041:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b045:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b04c:	80 fa 19             	cmp    dl,0x19
c000b04f:	77 3d                	ja     c000b08e <Directory::open()+0x56>
c000b051:	8b 14 95 80 32 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcd80]
c000b058:	85 d2                	test   edx,edx
c000b05a:	74 32                	je     c000b08e <Directory::open()+0x56>
c000b05c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b062:	85 d2                	test   edx,edx
c000b064:	74 28                	je     c000b08e <Directory::open()+0x56>
c000b066:	b8 06 00 00 00       	mov    eax,0x6
c000b06b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b06f:	75 1d                	jne    c000b08e <Directory::open()+0x56>
c000b071:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b077:	50                   	push   eax
c000b078:	8b 02                	mov    eax,DWORD PTR [edx]
c000b07a:	51                   	push   ecx
c000b07b:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b07e:	51                   	push   ecx
c000b07f:	52                   	push   edx
c000b080:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b083:	83 c4 10             	add    esp,0x10
c000b086:	85 c0                	test   eax,eax
c000b088:	75 04                	jne    c000b08e <Directory::open()+0x56>
c000b08a:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b08e:	83 c4 08             	add    esp,0x8
c000b091:	5b                   	pop    ebx
c000b092:	c3                   	ret    
c000b093:	90                   	nop

c000b094 <Directory::close()>:
c000b094:	53                   	push   ebx
c000b095:	b8 0b 00 00 00       	mov    eax,0xb
c000b09a:	83 ec 08             	sub    esp,0x8
c000b09d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b0a1:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b0a8:	80 fa 19             	cmp    dl,0x19
c000b0ab:	77 41                	ja     c000b0ee <Directory::close()+0x5a>
c000b0ad:	8b 1c 95 80 32 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdcd80]
c000b0b4:	85 db                	test   ebx,ebx
c000b0b6:	74 36                	je     c000b0ee <Directory::close()+0x5a>
c000b0b8:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b0bf:	74 2d                	je     c000b0ee <Directory::close()+0x5a>
c000b0c1:	b8 05 00 00 00       	mov    eax,0x5
c000b0c6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b0ca:	74 22                	je     c000b0ee <Directory::close()+0x5a>
c000b0cc:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b0d0:	8b 04 95 80 32 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcd80]
c000b0d7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b0dd:	53                   	push   ebx
c000b0de:	53                   	push   ebx
c000b0df:	8b 10                	mov    edx,DWORD PTR [eax]
c000b0e1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b0e7:	50                   	push   eax
c000b0e8:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b0eb:	83 c4 10             	add    esp,0x10
c000b0ee:	83 c4 08             	add    esp,0x8
c000b0f1:	5b                   	pop    ebx
c000b0f2:	c3                   	ret    
c000b0f3:	90                   	nop

c000b0f4 <Directory::unlink()>:
c000b0f4:	83 ec 0c             	sub    esp,0xc
c000b0f7:	b8 0b 00 00 00       	mov    eax,0xb
c000b0fc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b100:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b107:	80 f9 19             	cmp    cl,0x19
c000b10a:	77 2f                	ja     c000b13b <Directory::unlink()+0x47>
c000b10c:	8b 0c 8d 80 32 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcd80]
c000b113:	85 c9                	test   ecx,ecx
c000b115:	74 24                	je     c000b13b <Directory::unlink()+0x47>
c000b117:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b11d:	85 c9                	test   ecx,ecx
c000b11f:	74 1a                	je     c000b13b <Directory::unlink()+0x47>
c000b121:	b8 06 00 00 00       	mov    eax,0x6
c000b126:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b12a:	75 0f                	jne    c000b13b <Directory::unlink()+0x47>
c000b12c:	83 c2 0d             	add    edx,0xd
c000b12f:	50                   	push   eax
c000b130:	50                   	push   eax
c000b131:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b133:	52                   	push   edx
c000b134:	51                   	push   ecx
c000b135:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b138:	83 c4 10             	add    esp,0x10
c000b13b:	83 c4 0c             	add    esp,0xc
c000b13e:	c3                   	ret    
c000b13f:	90                   	nop

c000b140 <Directory::rename(char const*)>:
c000b140:	83 ec 0c             	sub    esp,0xc
c000b143:	b8 0b 00 00 00       	mov    eax,0xb
c000b148:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b14c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b153:	80 f9 19             	cmp    cl,0x19
c000b156:	77 32                	ja     c000b18a <Directory::rename(char const*)+0x4a>
c000b158:	8b 0c 8d 80 32 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcd80]
c000b15f:	85 c9                	test   ecx,ecx
c000b161:	74 27                	je     c000b18a <Directory::rename(char const*)+0x4a>
c000b163:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b169:	85 c9                	test   ecx,ecx
c000b16b:	74 1d                	je     c000b18a <Directory::rename(char const*)+0x4a>
c000b16d:	b8 06 00 00 00       	mov    eax,0x6
c000b172:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b176:	75 12                	jne    c000b18a <Directory::rename(char const*)+0x4a>
c000b178:	83 c2 0d             	add    edx,0xd
c000b17b:	50                   	push   eax
c000b17c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b17e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b182:	52                   	push   edx
c000b183:	51                   	push   ecx
c000b184:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b187:	83 c4 10             	add    esp,0x10
c000b18a:	83 c4 0c             	add    esp,0xc
c000b18d:	c3                   	ret    

c000b18e <Directory::exists()>:
c000b18e:	83 ec 0c             	sub    esp,0xc
c000b191:	31 c0                	xor    eax,eax
c000b193:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b197:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b19e:	80 f9 19             	cmp    cl,0x19
c000b1a1:	77 24                	ja     c000b1c7 <Directory::exists()+0x39>
c000b1a3:	8b 0c 8d 80 32 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcd80]
c000b1aa:	85 c9                	test   ecx,ecx
c000b1ac:	74 19                	je     c000b1c7 <Directory::exists()+0x39>
c000b1ae:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b1b4:	85 c9                	test   ecx,ecx
c000b1b6:	74 0f                	je     c000b1c7 <Directory::exists()+0x39>
c000b1b8:	83 c2 0d             	add    edx,0xd
c000b1bb:	50                   	push   eax
c000b1bc:	50                   	push   eax
c000b1bd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b1bf:	52                   	push   edx
c000b1c0:	51                   	push   ecx
c000b1c1:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b1c4:	83 c4 10             	add    esp,0x10
c000b1c7:	83 c4 0c             	add    esp,0xc
c000b1ca:	c3                   	ret    
c000b1cb:	90                   	nop

c000b1cc <Directory::read(dirent*)>:
c000b1cc:	83 ec 1c             	sub    esp,0x1c
c000b1cf:	b8 0b 00 00 00       	mov    eax,0xb
c000b1d4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1d8:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b1df:	80 fa 19             	cmp    dl,0x19
c000b1e2:	77 30                	ja     c000b214 <Directory::read(dirent*)+0x48>
c000b1e4:	8b 14 95 80 32 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcd80]
c000b1eb:	85 d2                	test   edx,edx
c000b1ed:	74 25                	je     c000b214 <Directory::read(dirent*)+0x48>
c000b1ef:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b1f6:	74 1c                	je     c000b214 <Directory::read(dirent*)+0x48>
c000b1f8:	83 ec 0c             	sub    esp,0xc
c000b1fb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b1fd:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b201:	52                   	push   edx
c000b202:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b206:	6a 00                	push   0x0
c000b208:	68 10 01 00 00       	push   0x110
c000b20d:	51                   	push   ecx
c000b20e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b211:	83 c4 20             	add    esp,0x20
c000b214:	83 c4 1c             	add    esp,0x1c
c000b217:	c3                   	ret    

c000b218 <Directory::create()>:
c000b218:	83 ec 0c             	sub    esp,0xc
c000b21b:	b8 0b 00 00 00       	mov    eax,0xb
c000b220:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b224:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b22b:	80 f9 19             	cmp    cl,0x19
c000b22e:	77 2f                	ja     c000b25f <Directory::create()+0x47>
c000b230:	8b 0c 8d 80 32 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcd80]
c000b237:	85 c9                	test   ecx,ecx
c000b239:	74 24                	je     c000b25f <Directory::create()+0x47>
c000b23b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b241:	85 c9                	test   ecx,ecx
c000b243:	74 1a                	je     c000b25f <Directory::create()+0x47>
c000b245:	b8 06 00 00 00       	mov    eax,0x6
c000b24a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b24e:	75 0f                	jne    c000b25f <Directory::create()+0x47>
c000b250:	83 c2 0d             	add    edx,0xd
c000b253:	50                   	push   eax
c000b254:	50                   	push   eax
c000b255:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b257:	52                   	push   edx
c000b258:	51                   	push   ecx
c000b259:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b25c:	83 c4 10             	add    esp,0x10
c000b25f:	83 c4 0c             	add    esp,0xc
c000b262:	c3                   	ret    
c000b263:	90                   	nop

c000b264 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b264:	b8 0a 00 00 00       	mov    eax,0xa
c000b269:	c3                   	ret    
c000b26a:	66 90                	xchg   ax,ax

c000b26c <Bus::Bus(char const*)>:
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b273:	83 ec 08             	sub    esp,0x8
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	50                   	push   eax
c000b27b:	e8 30 08 00 00       	call   c000bab0 <Device::Device(char const*)>
c000b280:	83 c4 10             	add    esp,0x10
c000b283:	ba d8 de 01 c0       	mov    edx,0xc001ded8
c000b288:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b28c:	89 10                	mov    DWORD PTR [eax],edx
c000b28e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b292:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b29c:	90                   	nop
c000b29d:	83 c4 0c             	add    esp,0xc
c000b2a0:	c3                   	ret    
c000b2a1:	90                   	nop
c000b2a2:	66 90                	xchg   ax,ax

c000b2a4 <Bus::~Bus()>:
c000b2a4:	83 ec 0c             	sub    esp,0xc
c000b2a7:	ba d8 de 01 c0       	mov    edx,0xc001ded8
c000b2ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2b0:	89 10                	mov    DWORD PTR [eax],edx
c000b2b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2b6:	83 ec 0c             	sub    esp,0xc
c000b2b9:	50                   	push   eax
c000b2ba:	e8 5b 05 00 00       	call   c000b81a <Device::~Device()>
c000b2bf:	83 c4 10             	add    esp,0x10
c000b2c2:	90                   	nop
c000b2c3:	83 c4 0c             	add    esp,0xc
c000b2c6:	c3                   	ret    
c000b2c7:	90                   	nop

c000b2c8 <Bus::~Bus()>:
c000b2c8:	83 ec 0c             	sub    esp,0xc
c000b2cb:	83 ec 0c             	sub    esp,0xc
c000b2ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2d2:	e8 cd ff ff ff       	call   c000b2a4 <Bus::~Bus()>
c000b2d7:	83 c4 10             	add    esp,0x10
c000b2da:	83 ec 08             	sub    esp,0x8
c000b2dd:	68 58 01 00 00       	push   0x158
c000b2e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2e6:	e8 f7 f0 ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000b2eb:	83 c4 10             	add    esp,0x10
c000b2ee:	83 c4 0c             	add    esp,0xc
c000b2f1:	c3                   	ret    

c000b2f2 <beepThread(void*)>:
c000b2f2:	83 ec 0c             	sub    esp,0xc
c000b2f5:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c000b2fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b2fe:	48                   	dec    eax
c000b2ff:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c000b304:	75 01                	jne    c000b307 <beepThread(void*)+0x15>
c000b306:	fb                   	sti    
c000b307:	83 ec 0c             	sub    esp,0xc
c000b30a:	6b c2 0a             	imul   eax,edx,0xa
c000b30d:	50                   	push   eax
c000b30e:	e8 e9 88 00 00       	call   c0013bfc <milliTenthSleep(unsigned int)>
c000b313:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b31a:	e8 8f a6 00 00       	call   c00159ae <HalMakeBeep(int)>
c000b31f:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b327:	83 c4 1c             	add    esp,0x1c
c000b32a:	e9 c9 87 00 00       	jmp    c0013af8 <blockTask(TaskState)>

c000b32f <Krnl::beep(int, int, bool)>:
c000b32f:	56                   	push   esi
c000b330:	53                   	push   ebx
c000b331:	83 ec 10             	sub    esp,0x10
c000b334:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b338:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b33c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b340:	e8 69 a6 00 00       	call   c00159ae <HalMakeBeep(int)>
c000b345:	83 c4 10             	add    esp,0x10
c000b348:	89 f0                	mov    eax,esi
c000b34a:	84 c0                	test   al,al
c000b34c:	74 1e                	je     c000b36c <Krnl::beep(int, int, bool)+0x3d>
c000b34e:	83 ec 0c             	sub    esp,0xc
c000b351:	6b db 0a             	imul   ebx,ebx,0xa
c000b354:	53                   	push   ebx
c000b355:	e8 a2 88 00 00       	call   c0013bfc <milliTenthSleep(unsigned int)>
c000b35a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b362:	83 c4 14             	add    esp,0x14
c000b365:	5b                   	pop    ebx
c000b366:	5e                   	pop    esi
c000b367:	e9 42 a6 00 00       	jmp    c00159ae <HalMakeBeep(int)>
c000b36c:	68 e6 00 00 00       	push   0xe6
c000b371:	53                   	push   ebx
c000b372:	68 f2 b2 00 c0       	push   0xc000b2f2
c000b377:	ff 35 f0 3f 02 c0    	push   DWORD PTR ds:0xc0023ff0
c000b37d:	e8 5a 83 00 00       	call   c00136dc <Process::createThread(void (*)(void*), void*, int)>
c000b382:	83 c4 14             	add    esp,0x14
c000b385:	5b                   	pop    ebx
c000b386:	5e                   	pop    esi
c000b387:	c3                   	ret    

c000b388 <User::loadClockSettings(int)>:
c000b388:	53                   	push   ebx
c000b389:	83 ec 14             	sub    esp,0x14
c000b38c:	68 14 01 00 00       	push   0x114
c000b391:	e8 23 c4 ff ff       	call   c00077b9 <malloc>
c000b396:	83 c4 0c             	add    esp,0xc
c000b399:	89 c3                	mov    ebx,eax
c000b39b:	ff 35 f0 3f 02 c0    	push   DWORD PTR ds:0xc0023ff0
c000b3a1:	68 fc de 01 c0       	push   0xc001defc
c000b3a6:	50                   	push   eax
c000b3a7:	e8 a2 f6 ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c000b3ac:	58                   	pop    eax
c000b3ad:	5a                   	pop    edx
c000b3ae:	6a 01                	push   0x1
c000b3b0:	53                   	push   ebx
c000b3b1:	e8 58 f7 ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c000b3b6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b3b9:	e8 ae f7 ff ff       	call   c000ab6c <File::close()>
c000b3be:	83 c4 10             	add    esp,0x10
c000b3c1:	85 db                	test   ebx,ebx
c000b3c3:	74 0f                	je     c000b3d4 <User::loadClockSettings(int)+0x4c>
c000b3c5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3c7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b3cb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b3ce:	83 c4 08             	add    esp,0x8
c000b3d1:	5b                   	pop    ebx
c000b3d2:	ff e0                	jmp    eax
c000b3d4:	83 c4 08             	add    esp,0x8
c000b3d7:	5b                   	pop    ebx
c000b3d8:	c3                   	ret    
c000b3d9:	90                   	nop

c000b3da <Clock::Clock(char const*)>:
c000b3da:	83 ec 0c             	sub    esp,0xc
c000b3dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3e1:	83 ec 08             	sub    esp,0x8
c000b3e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3e8:	50                   	push   eax
c000b3e9:	e8 c2 06 00 00       	call   c000bab0 <Device::Device(char const*)>
c000b3ee:	83 c4 10             	add    esp,0x10
c000b3f1:	ba 24 df 01 c0       	mov    edx,0xc001df24
c000b3f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3fa:	89 10                	mov    DWORD PTR [eax],edx
c000b3fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b400:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b40a:	90                   	nop
c000b40b:	83 c4 0c             	add    esp,0xc
c000b40e:	c3                   	ret    
c000b40f:	90                   	nop

c000b410 <Clock::~Clock()>:
c000b410:	83 ec 0c             	sub    esp,0xc
c000b413:	ba 24 df 01 c0       	mov    edx,0xc001df24
c000b418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b41c:	89 10                	mov    DWORD PTR [eax],edx
c000b41e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b422:	83 ec 0c             	sub    esp,0xc
c000b425:	50                   	push   eax
c000b426:	e8 ef 03 00 00       	call   c000b81a <Device::~Device()>
c000b42b:	83 c4 10             	add    esp,0x10
c000b42e:	90                   	nop
c000b42f:	83 c4 0c             	add    esp,0xc
c000b432:	c3                   	ret    
c000b433:	90                   	nop

c000b434 <Clock::~Clock()>:
c000b434:	83 ec 0c             	sub    esp,0xc
c000b437:	83 ec 0c             	sub    esp,0xc
c000b43a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b43e:	e8 cd ff ff ff       	call   c000b410 <Clock::~Clock()>
c000b443:	83 c4 10             	add    esp,0x10
c000b446:	83 ec 08             	sub    esp,0x8
c000b449:	68 58 01 00 00       	push   0x158
c000b44e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b452:	e8 8b ef ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000b457:	83 c4 10             	add    esp,0x10
c000b45a:	83 c4 0c             	add    esp,0xc
c000b45d:	c3                   	ret    

c000b45e <Clock::timeInSecondsLocal()>:
c000b45e:	53                   	push   ebx
c000b45f:	83 ec 14             	sub    esp,0x14
c000b462:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b466:	8b 10                	mov    edx,DWORD PTR [eax]
c000b468:	50                   	push   eax
c000b469:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b46c:	0f b6 0d 18 0e 02 c0 	movzx  ecx,BYTE PTR ds:0xc0020e18
c000b473:	03 0d 1c 0e 02 c0    	add    ecx,DWORD PTR ds:0xc0020e1c
c000b479:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b47f:	89 cb                	mov    ebx,ecx
c000b481:	c1 fb 1f             	sar    ebx,0x1f
c000b484:	01 c8                	add    eax,ecx
c000b486:	11 da                	adc    edx,ebx
c000b488:	83 c4 10             	add    esp,0x10
c000b48b:	31 c9                	xor    ecx,ecx
c000b48d:	80 3d 19 0e 02 c0 00 	cmp    BYTE PTR ds:0xc0020e19,0x0
c000b494:	74 05                	je     c000b49b <Clock::timeInSecondsLocal()+0x3d>
c000b496:	b9 08 07 00 00       	mov    ecx,0x708
c000b49b:	31 db                	xor    ebx,ebx
c000b49d:	01 c8                	add    eax,ecx
c000b49f:	11 da                	adc    edx,ebx
c000b4a1:	83 c4 08             	add    esp,0x8
c000b4a4:	5b                   	pop    ebx
c000b4a5:	c3                   	ret    

c000b4a6 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b4a6:	57                   	push   edi
c000b4a7:	56                   	push   esi
c000b4a8:	53                   	push   ebx
c000b4a9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b4ad:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b4b1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b4b3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b4b7:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b4ba:	0f b6 05 18 0e 02 c0 	movzx  eax,BYTE PTR ds:0xc0020e18
c000b4c1:	03 05 1c 0e 02 c0    	add    eax,DWORD PTR ds:0xc0020e1c
c000b4c7:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b4cd:	99                   	cdq    
c000b4ce:	29 c6                	sub    esi,eax
c000b4d0:	19 d7                	sbb    edi,edx
c000b4d2:	89 f0                	mov    eax,esi
c000b4d4:	89 fa                	mov    edx,edi
c000b4d6:	31 f6                	xor    esi,esi
c000b4d8:	80 3d 19 0e 02 c0 00 	cmp    BYTE PTR ds:0xc0020e19,0x0
c000b4df:	74 05                	je     c000b4e6 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b4e1:	be 08 07 00 00       	mov    esi,0x708
c000b4e6:	31 ff                	xor    edi,edi
c000b4e8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b4ec:	29 f0                	sub    eax,esi
c000b4ee:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b4f2:	19 fa                	sbb    edx,edi
c000b4f4:	89 d8                	mov    eax,ebx
c000b4f6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b4fa:	5b                   	pop    ebx
c000b4fb:	5e                   	pop    esi
c000b4fc:	5f                   	pop    edi
c000b4fd:	ff e0                	jmp    eax

c000b4ff <datetimeToSeconds(datetime_t)>:
c000b4ff:	55                   	push   ebp
c000b500:	57                   	push   edi
c000b501:	56                   	push   esi
c000b502:	53                   	push   ebx
c000b503:	83 ec 14             	sub    esp,0x14
c000b506:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b50a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b50e:	89 d3                	mov    ebx,edx
c000b510:	0f b6 c6             	movzx  eax,dh
c000b513:	c1 eb 10             	shr    ebx,0x10
c000b516:	48                   	dec    eax
c000b517:	66 81 eb 6c 07       	sub    bx,0x76c
c000b51c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000b520:	0f b6 f5             	movzx  esi,ch
c000b523:	89 cf                	mov    edi,ecx
c000b525:	6b f6 3c             	imul   esi,esi,0x3c
c000b528:	c1 ef 10             	shr    edi,0x10
c000b52b:	0f b6 c9             	movzx  ecx,cl
c000b52e:	89 f8                	mov    eax,edi
c000b530:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b536:	0f b6 f8             	movzx  edi,al
c000b539:	0f b6 d2             	movzx  edx,dl
c000b53c:	01 fe                	add    esi,edi
c000b53e:	01 f1                	add    ecx,esi
c000b540:	0f b7 f3             	movzx  esi,bx
c000b543:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000b547:	c1 f9 1f             	sar    ecx,0x1f
c000b54a:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000b54f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b553:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000b558:	8b 0c 8d 60 df 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe20a0]
c000b55f:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000b563:	76 29                	jbe    c000b58e <datetimeToSeconds(datetime_t)+0x8f>
c000b565:	f6 c3 03             	test   bl,0x3
c000b568:	75 24                	jne    c000b58e <datetimeToSeconds(datetime_t)+0x8f>
c000b56a:	31 d2                	xor    edx,edx
c000b56c:	bf 64 00 00 00       	mov    edi,0x64
c000b571:	89 d8                	mov    eax,ebx
c000b573:	66 f7 f7             	div    di
c000b576:	66 85 d2             	test   dx,dx
c000b579:	75 12                	jne    c000b58d <datetimeToSeconds(datetime_t)+0x8e>
c000b57b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000b581:	bf 90 01 00 00       	mov    edi,0x190
c000b586:	99                   	cdq    
c000b587:	f7 ff                	idiv   edi
c000b589:	85 d2                	test   edx,edx
c000b58b:	75 01                	jne    c000b58e <datetimeToSeconds(datetime_t)+0x8f>
c000b58d:	41                   	inc    ecx
c000b58e:	66 83 fb 46          	cmp    bx,0x46
c000b592:	76 45                	jbe    c000b5d9 <datetimeToSeconds(datetime_t)+0xda>
c000b594:	bb 46 00 00 00       	mov    ebx,0x46
c000b599:	bf 64 00 00 00       	mov    edi,0x64
c000b59e:	bd 90 01 00 00       	mov    ebp,0x190
c000b5a3:	b8 6d 01 00 00       	mov    eax,0x16d
c000b5a8:	f6 c3 03             	test   bl,0x3
c000b5ab:	75 23                	jne    c000b5d0 <datetimeToSeconds(datetime_t)+0xd1>
c000b5ad:	89 d8                	mov    eax,ebx
c000b5af:	99                   	cdq    
c000b5b0:	f7 ff                	idiv   edi
c000b5b2:	b8 6e 01 00 00       	mov    eax,0x16e
c000b5b7:	85 d2                	test   edx,edx
c000b5b9:	75 15                	jne    c000b5d0 <datetimeToSeconds(datetime_t)+0xd1>
c000b5bb:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000b5c1:	99                   	cdq    
c000b5c2:	f7 fd                	idiv   ebp
c000b5c4:	31 c0                	xor    eax,eax
c000b5c6:	85 d2                	test   edx,edx
c000b5c8:	0f 94 c0             	sete   al
c000b5cb:	05 6d 01 00 00       	add    eax,0x16d
c000b5d0:	01 c1                	add    ecx,eax
c000b5d2:	43                   	inc    ebx
c000b5d3:	39 f3                	cmp    ebx,esi
c000b5d5:	7c cc                	jl     c000b5a3 <datetimeToSeconds(datetime_t)+0xa4>
c000b5d7:	eb 3b                	jmp    c000b614 <datetimeToSeconds(datetime_t)+0x115>
c000b5d9:	74 39                	je     c000b614 <datetimeToSeconds(datetime_t)+0x115>
c000b5db:	b8 45 00 00 00       	mov    eax,0x45
c000b5e0:	89 c2                	mov    edx,eax
c000b5e2:	83 e2 03             	and    edx,0x3
c000b5e5:	39 f0                	cmp    eax,esi
c000b5e7:	7e 13                	jle    c000b5fc <datetimeToSeconds(datetime_t)+0xfd>
c000b5e9:	85 d2                	test   edx,edx
c000b5eb:	0f 94 c2             	sete   dl
c000b5ee:	48                   	dec    eax
c000b5ef:	0f b6 d2             	movzx  edx,dl
c000b5f2:	81 c2 6d 01 00 00    	add    edx,0x16d
c000b5f8:	29 d1                	sub    ecx,edx
c000b5fa:	eb e4                	jmp    c000b5e0 <datetimeToSeconds(datetime_t)+0xe1>
c000b5fc:	b8 6d 01 00 00       	mov    eax,0x16d
c000b601:	85 d2                	test   edx,edx
c000b603:	75 0d                	jne    c000b612 <datetimeToSeconds(datetime_t)+0x113>
c000b605:	31 c0                	xor    eax,eax
c000b607:	66 85 db             	test   bx,bx
c000b60a:	0f 95 c0             	setne  al
c000b60d:	05 6d 01 00 00       	add    eax,0x16d
c000b612:	29 c1                	sub    ecx,eax
c000b614:	b8 80 51 01 00       	mov    eax,0x15180
c000b619:	f7 e9                	imul   ecx
c000b61b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b61f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000b623:	83 c4 14             	add    esp,0x14
c000b626:	5b                   	pop    ebx
c000b627:	5e                   	pop    esi
c000b628:	5f                   	pop    edi
c000b629:	5d                   	pop    ebp
c000b62a:	c3                   	ret    
c000b62b:	90                   	nop

c000b62c <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000b62c:	57                   	push   edi
c000b62d:	56                   	push   esi
c000b62e:	53                   	push   ebx
c000b62f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b633:	8b 06                	mov    eax,DWORD PTR [esi]
c000b635:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000b638:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b63c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b640:	e8 ba fe ff ff       	call   c000b4ff <datetimeToSeconds(datetime_t)>
c000b645:	59                   	pop    ecx
c000b646:	0f b6 0d 18 0e 02 c0 	movzx  ecx,BYTE PTR ds:0xc0020e18
c000b64d:	5b                   	pop    ebx
c000b64e:	03 0d 1c 0e 02 c0    	add    ecx,DWORD PTR ds:0xc0020e1c
c000b654:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b65a:	89 cb                	mov    ebx,ecx
c000b65c:	c1 fb 1f             	sar    ebx,0x1f
c000b65f:	29 c8                	sub    eax,ecx
c000b661:	19 da                	sbb    edx,ebx
c000b663:	31 c9                	xor    ecx,ecx
c000b665:	80 3d 19 0e 02 c0 00 	cmp    BYTE PTR ds:0xc0020e19,0x0
c000b66c:	74 05                	je     c000b673 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000b66e:	b9 08 07 00 00       	mov    ecx,0x708
c000b673:	31 db                	xor    ebx,ebx
c000b675:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000b679:	29 c8                	sub    eax,ecx
c000b67b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b67f:	19 da                	sbb    edx,ebx
c000b681:	89 f8                	mov    eax,edi
c000b683:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b687:	5b                   	pop    ebx
c000b688:	5e                   	pop    esi
c000b689:	5f                   	pop    edi
c000b68a:	ff e0                	jmp    eax

c000b68c <secondsToDatetime(unsigned long long)>:
c000b68c:	55                   	push   ebp
c000b68d:	57                   	push   edi
c000b68e:	56                   	push   esi
c000b68f:	53                   	push   ebx
c000b690:	83 ec 1c             	sub    esp,0x1c
c000b693:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b697:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b69b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000b69f:	6a 00                	push   0x0
c000b6a1:	68 80 51 01 00       	push   0x15180
c000b6a6:	55                   	push   ebp
c000b6a7:	57                   	push   edi
c000b6a8:	e8 53 0b 01 00       	call   c001c200 <__udivdi3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000b6b6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6ba:	6a 00                	push   0x0
c000b6bc:	68 80 51 01 00       	push   0x15180
c000b6c1:	55                   	push   ebp
c000b6c2:	57                   	push   edi
c000b6c3:	bf 10 0e 00 00       	mov    edi,0xe10
c000b6c8:	e8 33 0c 01 00       	call   c001c300 <__umoddi3>
c000b6cd:	83 c4 10             	add    esp,0x10
c000b6d0:	99                   	cdq    
c000b6d1:	f7 ff                	idiv   edi
c000b6d3:	bf 3c 00 00 00       	mov    edi,0x3c
c000b6d8:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000b6db:	89 d0                	mov    eax,edx
c000b6dd:	99                   	cdq    
c000b6de:	f7 ff                	idiv   edi
c000b6e0:	85 db                	test   ebx,ebx
c000b6e2:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000b6e5:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000b6e8:	79 11                	jns    c000b6fb <secondsToDatetime(unsigned long long)+0x6f>
c000b6ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b6ee:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000b6f4:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b6f9:	eb 07                	jmp    c000b702 <secondsToDatetime(unsigned long long)+0x76>
c000b6fb:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b700:	89 d8                	mov    eax,ebx
c000b702:	bf b4 05 00 00       	mov    edi,0x5b4
c000b707:	99                   	cdq    
c000b708:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000b70d:	f7 f9                	idiv   ecx
c000b70f:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000b714:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b718:	31 d2                	xor    edx,edx
c000b71a:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000b722:	01 c3                	add    ebx,eax
c000b724:	89 d8                	mov    eax,ebx
c000b726:	f7 f1                	div    ecx
c000b728:	31 d2                	xor    edx,edx
c000b72a:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000b72d:	89 d8                	mov    eax,ebx
c000b72f:	f7 f7                	div    edi
c000b731:	31 d2                	xor    edx,edx
c000b733:	29 c1                	sub    ecx,eax
c000b735:	89 d8                	mov    eax,ebx
c000b737:	f7 f5                	div    ebp
c000b739:	bd 6d 01 00 00       	mov    ebp,0x16d
c000b73e:	29 c1                	sub    ecx,eax
c000b740:	31 d2                	xor    edx,edx
c000b742:	89 c8                	mov    eax,ecx
c000b744:	f7 f5                	div    ebp
c000b746:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000b74b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b74f:	31 d2                	xor    edx,edx
c000b751:	89 c8                	mov    eax,ecx
c000b753:	f7 f5                	div    ebp
c000b755:	31 d2                	xor    edx,edx
c000b757:	01 c3                	add    ebx,eax
c000b759:	89 c8                	mov    eax,ecx
c000b75b:	f7 f7                	div    edi
c000b75d:	bf 99 00 00 00       	mov    edi,0x99
c000b762:	29 c3                	sub    ebx,eax
c000b764:	31 d2                	xor    edx,edx
c000b766:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000b76e:	29 c3                	sub    ebx,eax
c000b770:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000b773:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000b776:	bb 05 00 00 00       	mov    ebx,0x5
c000b77b:	83 c1 02             	add    ecx,0x2
c000b77e:	89 c8                	mov    eax,ecx
c000b780:	f7 f7                	div    edi
c000b782:	31 d2                	xor    edx,edx
c000b784:	89 c7                	mov    edi,eax
c000b786:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000b78c:	83 c0 02             	add    eax,0x2
c000b78f:	f7 f3                	div    ebx
c000b791:	89 eb                	mov    ebx,ebp
c000b793:	29 c3                	sub    ebx,eax
c000b795:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000b79b:	88 1e                	mov    BYTE PTR [esi],bl
c000b79d:	19 c0                	sbb    eax,eax
c000b79f:	31 d2                	xor    edx,edx
c000b7a1:	83 e0 0c             	and    eax,0xc
c000b7a4:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000b7a8:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000b7b0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b7b4:	83 f9 01             	cmp    ecx,0x1
c000b7b7:	0f 96 c2             	setbe  dl
c000b7ba:	41                   	inc    ecx
c000b7bb:	01 d0                	add    eax,edx
c000b7bd:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000b7c0:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000b7c4:	83 c4 1c             	add    esp,0x1c
c000b7c7:	89 f0                	mov    eax,esi
c000b7c9:	5b                   	pop    ebx
c000b7ca:	5e                   	pop    esi
c000b7cb:	5f                   	pop    edi
c000b7cc:	5d                   	pop    ebp
c000b7cd:	c2 04 00             	ret    0x4

c000b7d0 <Clock::timeInDatetimeLocal()>:
c000b7d0:	53                   	push   ebx
c000b7d1:	83 ec 14             	sub    esp,0x14
c000b7d4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b7d8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b7dc:	e8 7d fc ff ff       	call   c000b45e <Clock::timeInSecondsLocal()>
c000b7e1:	83 c4 0c             	add    esp,0xc
c000b7e4:	52                   	push   edx
c000b7e5:	50                   	push   eax
c000b7e6:	53                   	push   ebx
c000b7e7:	e8 a0 fe ff ff       	call   c000b68c <secondsToDatetime(unsigned long long)>
c000b7ec:	89 d8                	mov    eax,ebx
c000b7ee:	83 c4 14             	add    esp,0x14
c000b7f1:	5b                   	pop    ebx
c000b7f2:	c2 04 00             	ret    0x4
c000b7f5:	90                   	nop

c000b7f6 <Device::hibernate()>:
c000b7f6:	c3                   	ret    
c000b7f7:	90                   	nop

c000b7f8 <Device::wake()>:
c000b7f8:	c3                   	ret    
c000b7f9:	90                   	nop

c000b7fa <Device::detect()>:
c000b7fa:	c3                   	ret    
c000b7fb:	90                   	nop

c000b7fc <Device::disableLegacy()>:
c000b7fc:	c3                   	ret    
c000b7fd:	90                   	nop

c000b7fe <Device::powerSaving(PowerSavingLevel)>:
c000b7fe:	c3                   	ret    
c000b7ff:	90                   	nop

c000b800 <DriverlessDevice::close(int, int, void*)>:
c000b800:	31 c0                	xor    eax,eax
c000b802:	c3                   	ret    
c000b803:	90                   	nop

c000b804 <DriverlessDevice::detect()>:
c000b804:	c3                   	ret    
c000b805:	90                   	nop

c000b806 <DriverlessDevice::open(int, int, void*)>:
c000b806:	83 ec 18             	sub    esp,0x18
c000b809:	68 90 df 01 c0       	push   0xc001df90
c000b80e:	e8 30 49 00 00       	call   c0010143 <KePanic(char const*)>
c000b813:	83 c8 ff             	or     eax,0xffffffff
c000b816:	83 c4 1c             	add    esp,0x1c
c000b819:	c3                   	ret    

c000b81a <Device::~Device()>:
c000b81a:	ba f0 df 01 c0       	mov    edx,0xc001dff0
c000b81f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b823:	89 10                	mov    DWORD PTR [eax],edx
c000b825:	90                   	nop
c000b826:	c3                   	ret    
c000b827:	90                   	nop

c000b828 <Device::~Device()>:
c000b828:	83 ec 0c             	sub    esp,0xc
c000b82b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b82f:	e8 e6 ff ff ff       	call   c000b81a <Device::~Device()>
c000b834:	83 c4 04             	add    esp,0x4
c000b837:	83 ec 08             	sub    esp,0x8
c000b83a:	68 58 01 00 00       	push   0x158
c000b83f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b843:	e8 9a eb ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000b848:	83 c4 10             	add    esp,0x10
c000b84b:	83 c4 0c             	add    esp,0xc
c000b84e:	c3                   	ret    
c000b84f:	90                   	nop

c000b850 <Device::findAndLoadDriver()>:
c000b850:	c7 44 24 04 ae df 01 c0 	mov    DWORD PTR [esp+0x4],0xc001dfae
c000b858:	e9 7b ec ff ff       	jmp    c000a4d8 <Dbg::kprintf(char const*, ...)>
c000b85d:	90                   	nop

c000b85e <Device::preOpenPCI(PCIDeviceInfo)>:
c000b85e:	57                   	push   edi
c000b85f:	b9 09 00 00 00       	mov    ecx,0x9
c000b864:	56                   	push   esi
c000b865:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b869:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b86d:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000b877:	81 c7 18 01 00 00    	add    edi,0x118
c000b87d:	fc                   	cld    
c000b87e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b880:	5e                   	pop    esi
c000b881:	5f                   	pop    edi
c000b882:	c3                   	ret    
c000b883:	90                   	nop

c000b884 <Device::preOpenACPI(void*, char*, char*)>:
c000b884:	57                   	push   edi
c000b885:	b9 1e 00 00 00       	mov    ecx,0x1e
c000b88a:	56                   	push   esi
c000b88b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b88f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b893:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000b89d:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000b8a3:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000b8a9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b8ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b8af:	b9 0e 00 00 00       	mov    ecx,0xe
c000b8b4:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000b8ba:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b8be:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b8c0:	5e                   	pop    esi
c000b8c1:	5f                   	pop    edi
c000b8c2:	c3                   	ret    
c000b8c3:	90                   	nop

c000b8c4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000b8c4:	53                   	push   ebx
c000b8c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b8c9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b8cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b8d1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b8d5:	0f b6 c0             	movzx  eax,al
c000b8d8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000b8dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8e0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b8e4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b8e8:	5b                   	pop    ebx
c000b8e9:	e9 a6 05 00 00       	jmp    c000be94 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000b8ee <Device::getParent()>:
c000b8ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8f2:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000b8f8:	c3                   	ret    
c000b8f9:	90                   	nop

c000b8fa <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000b8fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b8fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b902:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000b907:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b90b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b90f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b913:	e9 e8 06 00 00       	jmp    c000c000 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000b918 <Device::addChild(Device*)>:
c000b918:	53                   	push   ebx
c000b919:	83 ec 08             	sub    esp,0x8
c000b91c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b920:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b924:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000b92a:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000b930:	8b 13                	mov    edx,DWORD PTR [ebx]
c000b932:	85 d2                	test   edx,edx
c000b934:	74 04                	je     c000b93a <Device::addChild(Device*)+0x22>
c000b936:	89 d3                	mov    ebx,edx
c000b938:	eb f6                	jmp    c000b930 <Device::addChild(Device*)+0x18>
c000b93a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000b93d:	83 ec 0c             	sub    esp,0xc
c000b940:	6a 08                	push   0x8
c000b942:	e8 72 be ff ff       	call   c00077b9 <malloc>
c000b947:	89 03                	mov    DWORD PTR [ebx],eax
c000b949:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b94f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b956:	83 c4 18             	add    esp,0x18
c000b959:	5b                   	pop    ebx
c000b95a:	c3                   	ret    
c000b95b:	90                   	nop

c000b95c <Device::removeAllChildren()>:
c000b95c:	56                   	push   esi
c000b95d:	53                   	push   ebx
c000b95e:	52                   	push   edx
c000b95f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b963:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000b969:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b96c:	74 17                	je     c000b985 <Device::removeAllChildren()+0x29>
c000b96e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000b971:	85 c0                	test   eax,eax
c000b973:	74 0c                	je     c000b981 <Device::removeAllChildren()+0x25>
c000b975:	83 ec 0c             	sub    esp,0xc
c000b978:	8b 10                	mov    edx,DWORD PTR [eax]
c000b97a:	50                   	push   eax
c000b97b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000b97e:	83 c4 10             	add    esp,0x10
c000b981:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b983:	eb e4                	jmp    c000b969 <Device::removeAllChildren()+0xd>
c000b985:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000b98b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b991:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000b997:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b99e:	58                   	pop    eax
c000b99f:	5b                   	pop    ebx
c000b9a0:	5e                   	pop    esi
c000b9a1:	c3                   	ret    

c000b9a2 <Device::hibernateAll()>:
c000b9a2:	53                   	push   ebx
c000b9a3:	83 ec 14             	sub    esp,0x14
c000b9a6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b9aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b9ac:	53                   	push   ebx
c000b9ad:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b9b0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000b9b6:	83 c4 10             	add    esp,0x10
c000b9b9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b9bc:	74 0f                	je     c000b9cd <Device::hibernateAll()+0x2b>
c000b9be:	83 ec 0c             	sub    esp,0xc
c000b9c1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000b9c4:	e8 d9 ff ff ff       	call   c000b9a2 <Device::hibernateAll()>
c000b9c9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b9cb:	eb e9                	jmp    c000b9b6 <Device::hibernateAll()+0x14>
c000b9cd:	83 c4 08             	add    esp,0x8
c000b9d0:	5b                   	pop    ebx
c000b9d1:	c3                   	ret    

c000b9d2 <Device::wakeAll()>:
c000b9d2:	53                   	push   ebx
c000b9d3:	83 ec 14             	sub    esp,0x14
c000b9d6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b9da:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b9dc:	53                   	push   ebx
c000b9dd:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000b9e0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000b9e6:	83 c4 10             	add    esp,0x10
c000b9e9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b9ec:	74 0f                	je     c000b9fd <Device::wakeAll()+0x2b>
c000b9ee:	83 ec 0c             	sub    esp,0xc
c000b9f1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000b9f4:	e8 d9 ff ff ff       	call   c000b9d2 <Device::wakeAll()>
c000b9f9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b9fb:	eb e9                	jmp    c000b9e6 <Device::wakeAll()+0x14>
c000b9fd:	83 c4 08             	add    esp,0x8
c000ba00:	5b                   	pop    ebx
c000ba01:	c3                   	ret    

c000ba02 <Device::detectAll()>:
c000ba02:	53                   	push   ebx
c000ba03:	83 ec 14             	sub    esp,0x14
c000ba06:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ba0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba0c:	53                   	push   ebx
c000ba0d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000ba10:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba16:	83 c4 10             	add    esp,0x10
c000ba19:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba1c:	74 0f                	je     c000ba2d <Device::detectAll()+0x2b>
c000ba1e:	83 ec 0c             	sub    esp,0xc
c000ba21:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba24:	e8 d9 ff ff ff       	call   c000ba02 <Device::detectAll()>
c000ba29:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba2b:	eb e9                	jmp    c000ba16 <Device::detectAll()+0x14>
c000ba2d:	83 c4 08             	add    esp,0x8
c000ba30:	5b                   	pop    ebx
c000ba31:	c3                   	ret    

c000ba32 <Device::disableLegacyAll()>:
c000ba32:	c3                   	ret    
c000ba33:	90                   	nop

c000ba34 <Device::loadDriversForAll()>:
c000ba34:	c3                   	ret    
c000ba35:	90                   	nop

c000ba36 <Device::closeAll()>:
c000ba36:	53                   	push   ebx
c000ba37:	83 ec 08             	sub    esp,0x8
c000ba3a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ba3e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba40:	6a 00                	push   0x0
c000ba42:	6a 00                	push   0x0
c000ba44:	6a 00                	push   0x0
c000ba46:	53                   	push   ebx
c000ba47:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000ba4a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba50:	83 c4 10             	add    esp,0x10
c000ba53:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba56:	74 0f                	je     c000ba67 <Device::closeAll()+0x31>
c000ba58:	83 ec 0c             	sub    esp,0xc
c000ba5b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba5e:	e8 d3 ff ff ff       	call   c000ba36 <Device::closeAll()>
c000ba63:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba65:	eb e9                	jmp    c000ba50 <Device::closeAll()+0x1a>
c000ba67:	83 c4 08             	add    esp,0x8
c000ba6a:	5b                   	pop    ebx
c000ba6b:	c3                   	ret    

c000ba6c <Device::powerSavingAll(PowerSavingLevel)>:
c000ba6c:	56                   	push   esi
c000ba6d:	53                   	push   ebx
c000ba6e:	83 ec 0c             	sub    esp,0xc
c000ba71:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ba75:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000ba79:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba7b:	56                   	push   esi
c000ba7c:	53                   	push   ebx
c000ba7d:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000ba80:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba86:	83 c4 10             	add    esp,0x10
c000ba89:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba8c:	74 0f                	je     c000ba9d <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000ba8e:	52                   	push   edx
c000ba8f:	52                   	push   edx
c000ba90:	56                   	push   esi
c000ba91:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba94:	e8 d3 ff ff ff       	call   c000ba6c <Device::powerSavingAll(PowerSavingLevel)>
c000ba99:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba9b:	eb e9                	jmp    c000ba86 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000ba9d:	58                   	pop    eax
c000ba9e:	5b                   	pop    ebx
c000ba9f:	5e                   	pop    esi
c000baa0:	c3                   	ret    
c000baa1:	90                   	nop

c000baa2 <Device::setName(char const*)>:
c000baa2:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000baaa:	e9 51 4b ff ff       	jmp    c0000600 <strcpy>
c000baaf:	90                   	nop

c000bab0 <Device::Device(char const*)>:
c000bab0:	83 ec 1c             	sub    esp,0x1c
c000bab3:	ba f0 df 01 c0       	mov    edx,0xc001dff0
c000bab8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000babc:	89 10                	mov    DWORD PTR [eax],edx
c000babe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bac2:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bacc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bad0:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bada:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bade:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baec:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000baf6:	83 ec 08             	sub    esp,0x8
c000baf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bafd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb01:	e8 9c ff ff ff       	call   c000baa2 <Device::setName(char const*)>
c000bb06:	83 c4 10             	add    esp,0x10
c000bb09:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bb11:	83 ec 0c             	sub    esp,0xc
c000bb14:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb18:	e8 9c bc ff ff       	call   c00077b9 <malloc>
c000bb1d:	83 c4 10             	add    esp,0x10
c000bb20:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bb26:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bb2d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bb31:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bb37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb3b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bb41:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bb47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb4b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bb51:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bb58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb5c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000bb63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb67:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000bb6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb72:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bb7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb80:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bb8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb8e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bb98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb9c:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000bba6:	90                   	nop
c000bba7:	83 c4 1c             	add    esp,0x1c
c000bbaa:	c3                   	ret    
c000bbab:	90                   	nop

c000bbac <Device::getName()>:
c000bbac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bbb0:	05 d0 00 00 00       	add    eax,0xd0
c000bbb5:	c3                   	ret    

c000bbb6 <DriverlessDevice::DriverlessDevice(char const*)>:
c000bbb6:	83 ec 0c             	sub    esp,0xc
c000bbb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbbd:	83 ec 08             	sub    esp,0x8
c000bbc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbc4:	50                   	push   eax
c000bbc5:	e8 e6 fe ff ff       	call   c000bab0 <Device::Device(char const*)>
c000bbca:	83 c4 10             	add    esp,0x10
c000bbcd:	ba 1c e0 01 c0       	mov    edx,0xc001e01c
c000bbd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbd6:	89 10                	mov    DWORD PTR [eax],edx
c000bbd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbdc:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000bbe6:	90                   	nop
c000bbe7:	83 c4 0c             	add    esp,0xc
c000bbea:	c3                   	ret    
c000bbeb:	90                   	nop

c000bbec <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000bbec:	57                   	push   edi
c000bbed:	56                   	push   esi
c000bbee:	53                   	push   ebx
c000bbef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bbf3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bbf7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bbfb:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000bc01:	75 0c                	jne    c000bc0f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000bc03:	52                   	push   edx
c000bc04:	52                   	push   edx
c000bc05:	53                   	push   ebx
c000bc06:	56                   	push   esi
c000bc07:	e8 a6 0a 01 00       	call   c001c6b2 <LinkedList<Device>::addElement(Device*)>
c000bc0c:	83 c4 10             	add    esp,0x10
c000bc0f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bc15:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bc18:	74 12                	je     c000bc2c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000bc1a:	50                   	push   eax
c000bc1b:	57                   	push   edi
c000bc1c:	56                   	push   esi
c000bc1d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bc20:	e8 c7 ff ff ff       	call   c000bbec <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bc25:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bc27:	83 c4 10             	add    esp,0x10
c000bc2a:	eb e9                	jmp    c000bc15 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000bc2c:	5b                   	pop    ebx
c000bc2d:	5e                   	pop    esi
c000bc2e:	5f                   	pop    edi
c000bc2f:	c3                   	ret    

c000bc30 <getDevicesOfType(DeviceType)>:
c000bc30:	53                   	push   ebx
c000bc31:	83 ec 14             	sub    esp,0x14
c000bc34:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bc38:	53                   	push   ebx
c000bc39:	e8 50 0b 01 00       	call   c001c78e <LinkedList<Device>::LinkedList()>
c000bc3e:	83 c4 0c             	add    esp,0xc
c000bc41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bc45:	53                   	push   ebx
c000bc46:	ff 35 18 0d 02 c0    	push   DWORD PTR ds:0xc0020d18
c000bc4c:	e8 9b ff ff ff       	call   c000bbec <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bc51:	89 d8                	mov    eax,ebx
c000bc53:	83 c4 18             	add    esp,0x18
c000bc56:	5b                   	pop    ebx
c000bc57:	c2 04 00             	ret    0x4
c000bc5a:	66 90                	xchg   ax,ax

c000bc5c <HardDiskController::HardDiskController(char const*)>:
c000bc5c:	83 ec 0c             	sub    esp,0xc
c000bc5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc63:	83 ec 08             	sub    esp,0x8
c000bc66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6a:	50                   	push   eax
c000bc6b:	e8 40 fe ff ff       	call   c000bab0 <Device::Device(char const*)>
c000bc70:	83 c4 10             	add    esp,0x10
c000bc73:	ba 48 e0 01 c0       	mov    edx,0xc001e048
c000bc78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc7c:	89 10                	mov    DWORD PTR [eax],edx
c000bc7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc82:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000bc8c:	90                   	nop
c000bc8d:	83 c4 0c             	add    esp,0xc
c000bc90:	c3                   	ret    
c000bc91:	90                   	nop
c000bc92:	66 90                	xchg   ax,ax

c000bc94 <HardDiskController::~HardDiskController()>:
c000bc94:	83 ec 0c             	sub    esp,0xc
c000bc97:	ba 48 e0 01 c0       	mov    edx,0xc001e048
c000bc9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bca0:	89 10                	mov    DWORD PTR [eax],edx
c000bca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bca6:	83 ec 0c             	sub    esp,0xc
c000bca9:	50                   	push   eax
c000bcaa:	e8 6b fb ff ff       	call   c000b81a <Device::~Device()>
c000bcaf:	83 c4 10             	add    esp,0x10
c000bcb2:	90                   	nop
c000bcb3:	83 c4 0c             	add    esp,0xc
c000bcb6:	c3                   	ret    
c000bcb7:	90                   	nop

c000bcb8 <HardDiskController::~HardDiskController()>:
c000bcb8:	83 ec 0c             	sub    esp,0xc
c000bcbb:	83 ec 0c             	sub    esp,0xc
c000bcbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcc2:	e8 cd ff ff ff       	call   c000bc94 <HardDiskController::~HardDiskController()>
c000bcc7:	83 c4 10             	add    esp,0x10
c000bcca:	83 ec 08             	sub    esp,0x8
c000bccd:	68 58 01 00 00       	push   0x158
c000bcd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcd6:	e8 07 e7 ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000bcdb:	83 c4 10             	add    esp,0x10
c000bcde:	83 c4 0c             	add    esp,0xc
c000bce1:	c3                   	ret    

c000bce2 <PhysicalDisk::eject()>:
c000bce2:	83 c8 ff             	or     eax,0xffffffff
c000bce5:	c3                   	ret    

c000bce6 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000bce6:	83 ec 0c             	sub    esp,0xc
c000bce9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bced:	83 ec 08             	sub    esp,0x8
c000bcf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcf4:	50                   	push   eax
c000bcf5:	e8 b6 fd ff ff       	call   c000bab0 <Device::Device(char const*)>
c000bcfa:	83 c4 10             	add    esp,0x10
c000bcfd:	ba 74 e0 01 c0       	mov    edx,0xc001e074
c000bd02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd06:	89 10                	mov    DWORD PTR [eax],edx
c000bd08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd0c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000bd13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd17:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000bd1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd22:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000bd2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd30:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd34:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000bd3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd3e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000bd48:	90                   	nop
c000bd49:	83 c4 0c             	add    esp,0xc
c000bd4c:	c3                   	ret    
c000bd4d:	90                   	nop

c000bd4e <PhysicalDisk::startCache()>:
c000bd4e:	56                   	push   esi
c000bd4f:	53                   	push   ebx
c000bd50:	83 ec 10             	sub    esp,0x10
c000bd53:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bd57:	6a 44                	push   0x44
c000bd59:	e8 5b ba ff ff       	call   c00077b9 <malloc>
c000bd5e:	89 c6                	mov    esi,eax
c000bd60:	58                   	pop    eax
c000bd61:	5a                   	pop    edx
c000bd62:	53                   	push   ebx
c000bd63:	56                   	push   esi
c000bd64:	e8 d3 15 00 00       	call   c000d33c <VCache::VCache(PhysicalDisk*)>
c000bd69:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000bd6f:	83 c4 14             	add    esp,0x14
c000bd72:	5b                   	pop    ebx
c000bd73:	5e                   	pop    esi
c000bd74:	c3                   	ret    
c000bd75:	90                   	nop

c000bd76 <PhysicalDisk::~PhysicalDisk()>:
c000bd76:	83 ec 0c             	sub    esp,0xc
c000bd79:	ba 74 e0 01 c0       	mov    edx,0xc001e074
c000bd7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd82:	89 10                	mov    DWORD PTR [eax],edx
c000bd84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd88:	83 ec 0c             	sub    esp,0xc
c000bd8b:	50                   	push   eax
c000bd8c:	e8 89 fa ff ff       	call   c000b81a <Device::~Device()>
c000bd91:	83 c4 10             	add    esp,0x10
c000bd94:	90                   	nop
c000bd95:	83 c4 0c             	add    esp,0xc
c000bd98:	c3                   	ret    
c000bd99:	90                   	nop

c000bd9a <PhysicalDisk::~PhysicalDisk()>:
c000bd9a:	83 ec 0c             	sub    esp,0xc
c000bd9d:	83 ec 0c             	sub    esp,0xc
c000bda0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bda4:	e8 cd ff ff ff       	call   c000bd76 <PhysicalDisk::~PhysicalDisk()>
c000bda9:	83 c4 10             	add    esp,0x10
c000bdac:	83 ec 08             	sub    esp,0x8
c000bdaf:	68 6c 01 00 00       	push   0x16c
c000bdb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdb8:	e8 25 e6 ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000bdbd:	83 c4 10             	add    esp,0x10
c000bdc0:	83 c4 0c             	add    esp,0xc
c000bdc3:	c3                   	ret    

c000bdc4 <int_handler>:
c000bdc4:	55                   	push   ebp
c000bdc5:	57                   	push   edi
c000bdc6:	56                   	push   esi
c000bdc7:	53                   	push   ebx
c000bdc8:	83 ec 0c             	sub    esp,0xc
c000bdcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000bdcf:	80 3d 98 37 02 c0 00 	cmp    BYTE PTR ds:0xc0023798,0x0
c000bdd6:	74 0b                	je     c000bde3 <int_handler+0x1f>
c000bdd8:	fa                   	cli    
c000bdd9:	f4                   	hlt    
c000bdda:	80 3d 98 37 02 c0 00 	cmp    BYTE PTR ds:0xc0023798,0x0
c000bde1:	75 f5                	jne    c000bdd8 <int_handler+0x14>
c000bde3:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000bde6:	8d 46 e0             	lea    eax,[esi-0x20]
c000bde9:	83 f8 17             	cmp    eax,0x17
c000bdec:	76 3e                	jbe    c000be2c <int_handler+0x68>
c000bdee:	c1 e6 04             	shl    esi,0x4
c000bdf1:	31 db                	xor    ebx,ebx
c000bdf3:	8d ae 20 1e 02 c0    	lea    ebp,[esi-0x3ffde1e0]
c000bdf9:	81 c6 20 0e 02 c0    	add    esi,0xc0020e20
c000bdff:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000be03:	85 c0                	test   eax,eax
c000be05:	74 13                	je     c000be1a <int_handler+0x56>
c000be07:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000be0a:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000be0e:	74 2a                	je     c000be3a <int_handler+0x76>
c000be10:	83 ec 08             	sub    esp,0x8
c000be13:	52                   	push   edx
c000be14:	57                   	push   edi
c000be15:	ff d0                	call   eax
c000be17:	83 c4 10             	add    esp,0x10
c000be1a:	43                   	inc    ebx
c000be1b:	83 fb 04             	cmp    ebx,0x4
c000be1e:	75 df                	jne    c000bdff <int_handler+0x3b>
c000be20:	83 c4 0c             	add    esp,0xc
c000be23:	31 c0                	xor    eax,eax
c000be25:	5b                   	pop    ebx
c000be26:	31 d2                	xor    edx,edx
c000be28:	5e                   	pop    esi
c000be29:	5f                   	pop    edi
c000be2a:	5d                   	pop    ebp
c000be2b:	c3                   	ret    
c000be2c:	83 ec 0c             	sub    esp,0xc
c000be2f:	50                   	push   eax
c000be30:	e8 b6 9b 00 00       	call   c00159eb <HalEndOfInterrupt(int)>
c000be35:	83 c4 10             	add    esp,0x10
c000be38:	eb b4                	jmp    c000bdee <int_handler+0x2a>
c000be3a:	83 ec 08             	sub    esp,0x8
c000be3d:	52                   	push   edx
c000be3e:	57                   	push   edi
c000be3f:	ff d0                	call   eax
c000be41:	83 c4 10             	add    esp,0x10
c000be44:	83 c4 0c             	add    esp,0xc
c000be47:	5b                   	pop    ebx
c000be48:	5e                   	pop    esi
c000be49:	5f                   	pop    edi
c000be4a:	5d                   	pop    ebp
c000be4b:	c3                   	ret    

c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000be4c:	56                   	push   esi
c000be4d:	31 c0                	xor    eax,eax
c000be4f:	53                   	push   ebx
c000be50:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000be54:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000be58:	89 ca                	mov    edx,ecx
c000be5a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000be5e:	c1 e2 04             	shl    edx,0x4
c000be61:	83 bc 82 20 1e 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffde1e0],0x0
c000be69:	74 15                	je     c000be80 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000be6b:	40                   	inc    eax
c000be6c:	83 f8 04             	cmp    eax,0x4
c000be6f:	75 f0                	jne    c000be61 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000be71:	c7 44 24 0c a4 e0 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e0a4
c000be79:	5b                   	pop    ebx
c000be7a:	5e                   	pop    esi
c000be7b:	e9 c3 42 00 00       	jmp    c0010143 <KePanic(char const*)>
c000be80:	8d 04 88             	lea    eax,[eax+ecx*4]
c000be83:	89 1c 85 20 1e 02 c0 	mov    DWORD PTR [eax*4-0x3ffde1e0],ebx
c000be8a:	89 34 85 20 0e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf1e0],esi
c000be91:	5b                   	pop    ebx
c000be92:	5e                   	pop    esi
c000be93:	c3                   	ret    

c000be94 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000be94:	57                   	push   edi
c000be95:	8b 15 18 0d 02 c0    	mov    edx,DWORD PTR ds:0xc0020d18
c000be9b:	56                   	push   esi
c000be9c:	53                   	push   ebx
c000be9d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bea1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bea5:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000beac:	74 5b                	je     c000bf09 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000beae:	89 c7                	mov    edi,eax
c000beb0:	84 c0                	test   al,al
c000beb2:	74 24                	je     c000bed8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000beb4:	83 fe 0f             	cmp    esi,0xf
c000beb7:	0f 8f d9 00 00 00    	jg     c000bf96 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000bebd:	8a 86 e0 f9 01 c0    	mov    al,BYTE PTR [esi-0x3ffe0620]
c000bec3:	25 ff 00 00 00       	and    eax,0xff
c000bec8:	66 8b bc 00 c0 35 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffdca40]
c000bed0:	89 c6                	mov    esi,eax
c000bed2:	66 d1 ef             	shr    di,1
c000bed5:	83 e7 01             	and    edi,0x1
c000bed8:	83 ec 08             	sub    esp,0x8
c000bedb:	a1 c0 49 02 c0       	mov    eax,ds:0xc00249c0
c000bee0:	31 db                	xor    ebx,ebx
c000bee2:	50                   	push   eax
c000bee3:	68 b1 e0 01 c0       	push   0xc001e0b1
c000bee8:	e8 eb e5 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000beed:	83 c4 10             	add    esp,0x10
c000bef0:	a1 c0 49 02 c0       	mov    eax,ds:0xc00249c0
c000bef5:	85 c0                	test   eax,eax
c000bef7:	7f 51                	jg     c000bf4a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000bef9:	83 ec 0c             	sub    esp,0xc
c000befc:	68 c8 e0 01 c0       	push   0xc001e0c8
c000bf01:	e8 3d 42 00 00       	call   c0010143 <KePanic(char const*)>
c000bf06:	83 c4 10             	add    esp,0x10
c000bf09:	8d 4e 20             	lea    ecx,[esi+0x20]
c000bf0c:	31 d2                	xor    edx,edx
c000bf0e:	89 c8                	mov    eax,ecx
c000bf10:	c1 e0 04             	shl    eax,0x4
c000bf13:	8b 9c 90 20 1e 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffde1e0]
c000bf1a:	85 db                	test   ebx,ebx
c000bf1c:	0f 84 8b 00 00 00    	je     c000bfad <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000bf22:	42                   	inc    edx
c000bf23:	83 fa 04             	cmp    edx,0x4
c000bf26:	75 eb                	jne    c000bf13 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000bf28:	83 ec 0c             	sub    esp,0xc
c000bf2b:	68 1c e1 01 c0       	push   0xc001e11c
c000bf30:	e8 0e 42 00 00       	call   c0010143 <KePanic(char const*)>
c000bf35:	83 c4 10             	add    esp,0x10
c000bf38:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bf3d:	5b                   	pop    ebx
c000bf3e:	5e                   	pop    esi
c000bf3f:	5f                   	pop    edi
c000bf40:	c3                   	ret    
c000bf41:	43                   	inc    ebx
c000bf42:	39 1d c0 49 02 c0    	cmp    DWORD PTR ds:0xc00249c0,ebx
c000bf48:	7e af                	jle    c000bef9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000bf4a:	83 ec 08             	sub    esp,0x8
c000bf4d:	8b 04 9d e0 49 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb620]
c000bf54:	56                   	push   esi
c000bf55:	50                   	push   eax
c000bf56:	e8 7d f7 00 00       	call   c001b6d8 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000bf5b:	83 c4 10             	add    esp,0x10
c000bf5e:	84 c0                	test   al,al
c000bf60:	74 df                	je     c000bf41 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000bf62:	81 e7 ff 00 00 00    	and    edi,0xff
c000bf68:	50                   	push   eax
c000bf69:	8d 46 20             	lea    eax,[esi+0x20]
c000bf6c:	57                   	push   edi
c000bf6d:	25 ff 00 00 00       	and    eax,0xff
c000bf72:	6a 00                	push   0x0
c000bf74:	50                   	push   eax
c000bf75:	89 f0                	mov    eax,esi
c000bf77:	6a 00                	push   0x0
c000bf79:	25 ff 00 00 00       	and    eax,0xff
c000bf7e:	6a 00                	push   0x0
c000bf80:	50                   	push   eax
c000bf81:	8b 04 9d e0 49 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb620]
c000bf88:	50                   	push   eax
c000bf89:	e8 c4 f8 00 00       	call   c001b852 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000bf8e:	83 c4 20             	add    esp,0x20
c000bf91:	e9 73 ff ff ff       	jmp    c000bf09 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000bf96:	83 ec 0c             	sub    esp,0xc
c000bf99:	31 ff                	xor    edi,edi
c000bf9b:	68 e4 e0 01 c0       	push   0xc001e0e4
c000bfa0:	e8 9e 41 00 00       	call   c0010143 <KePanic(char const*)>
c000bfa5:	83 c4 10             	add    esp,0x10
c000bfa8:	e9 2b ff ff ff       	jmp    c000bed8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000bfad:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000bfb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bfb4:	89 14 85 20 1e 02 c0 	mov    DWORD PTR [eax*4-0x3ffde1e0],edx
c000bfbb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bfbf:	5b                   	pop    ebx
c000bfc0:	89 14 85 20 0e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf1e0],edx
c000bfc7:	89 f0                	mov    eax,esi
c000bfc9:	5e                   	pop    esi
c000bfca:	5f                   	pop    edi
c000bfcb:	c3                   	ret    

c000bfcc <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000bfcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfd0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bfd4:	c1 e0 04             	shl    eax,0x4
c000bfd7:	8d 50 10             	lea    edx,[eax+0x10]
c000bfda:	39 88 20 1e 02 c0    	cmp    DWORD PTR [eax-0x3ffde1e0],ecx
c000bfe0:	74 08                	je     c000bfea <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000bfe2:	83 c0 04             	add    eax,0x4
c000bfe5:	39 d0                	cmp    eax,edx
c000bfe7:	75 f1                	jne    c000bfda <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000bfe9:	c3                   	ret    
c000bfea:	c7 80 20 1e 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde1e0],0x0
c000bff4:	c7 80 20 0e 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf1e0],0x0
c000bffe:	eb e2                	jmp    c000bfe2 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c000 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c000:	53                   	push   ebx
c000c001:	83 ec 08             	sub    esp,0x8
c000c004:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c008:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c00d:	74 0e                	je     c000c01d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c00f:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c000c014:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c01b:	75 37                	jne    c000c054 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c01d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c021:	83 c0 20             	add    eax,0x20
c000c024:	c1 e0 04             	shl    eax,0x4
c000c027:	8d 50 10             	lea    edx,[eax+0x10]
c000c02a:	39 98 20 1e 02 c0    	cmp    DWORD PTR [eax-0x3ffde1e0],ebx
c000c030:	74 0c                	je     c000c03e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c032:	83 c0 04             	add    eax,0x4
c000c035:	39 d0                	cmp    eax,edx
c000c037:	75 f1                	jne    c000c02a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c039:	83 c4 08             	add    esp,0x8
c000c03c:	5b                   	pop    ebx
c000c03d:	c3                   	ret    
c000c03e:	c7 80 20 1e 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde1e0],0x0
c000c048:	c7 80 20 0e 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf1e0],0x0
c000c052:	eb de                	jmp    c000c032 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c054:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c059:	7f 12                	jg     c000c06d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c05b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c05f:	31 c0                	xor    eax,eax
c000c061:	8a 81 e0 f9 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe0620]
c000c067:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c06b:	eb b0                	jmp    c000c01d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c06d:	83 ec 0c             	sub    esp,0xc
c000c070:	68 d5 e0 01 c0       	push   0xc001e0d5
c000c075:	e8 c9 40 00 00       	call   c0010143 <KePanic(char const*)>
c000c07a:	83 c4 10             	add    esp,0x10
c000c07d:	eb 9e                	jmp    c000c01d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c07f <setupINTS()>:
c000c07f:	31 c0                	xor    eax,eax
c000c081:	c7 80 20 1e 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde1e0],0x0
c000c08b:	c7 80 20 0e 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf1e0],0x0
c000c095:	c7 80 24 1e 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde1dc],0x0
c000c09f:	c7 80 24 0e 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf1dc],0x0
c000c0a9:	c7 80 28 1e 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde1d8],0x0
c000c0b3:	c7 80 28 0e 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf1d8],0x0
c000c0bd:	c7 80 2c 1e 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde1d4],0x0
c000c0c7:	c7 80 2c 0e 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf1d4],0x0
c000c0d1:	83 c0 10             	add    eax,0x10
c000c0d4:	3d 00 10 00 00       	cmp    eax,0x1000
c000c0d9:	75 a6                	jne    c000c081 <setupINTS()+0x2>
c000c0db:	c3                   	ret    

c000c0dc <convertLegacyIRQNumber(int)>:
c000c0dc:	83 ec 0c             	sub    esp,0xc
c000c0df:	8b 15 18 0d 02 c0    	mov    edx,DWORD PTR ds:0xc0020d18
c000c0e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0e9:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c0f0:	74 0f                	je     c000c101 <convertLegacyIRQNumber(int)+0x25>
c000c0f2:	83 f8 0f             	cmp    eax,0xf
c000c0f5:	7f 0e                	jg     c000c105 <convertLegacyIRQNumber(int)+0x29>
c000c0f7:	31 c9                	xor    ecx,ecx
c000c0f9:	8a 88 e0 f9 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe0620]
c000c0ff:	89 c8                	mov    eax,ecx
c000c101:	83 c4 0c             	add    esp,0xc
c000c104:	c3                   	ret    
c000c105:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c109:	83 ec 0c             	sub    esp,0xc
c000c10c:	68 e4 e0 01 c0       	push   0xc001e0e4
c000c111:	e8 2d 40 00 00       	call   c0010143 <KePanic(char const*)>
c000c116:	83 c4 10             	add    esp,0x10
c000c119:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c11d:	83 c4 0c             	add    esp,0xc
c000c120:	c3                   	ret    
c000c121:	90                   	nop

c000c122 <startGUI(void*)>:
c000c122:	55                   	push   ebp
c000c123:	89 e5                	mov    ebp,esp
c000c125:	53                   	push   ebx
c000c126:	83 ec 04             	sub    esp,0x4
c000c129:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c000c12e:	48                   	dec    eax
c000c12f:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c000c134:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c000c139:	85 c0                	test   eax,eax
c000c13b:	75 01                	jne    c000c13e <startGUI(void*)+0x1c>
c000c13d:	fb                   	sti    
c000c13e:	8b 1d 18 0d 02 c0    	mov    ebx,DWORD PTR ds:0xc0020d18
c000c144:	83 ec 08             	sub    esp,0x8
c000c147:	6a 01                	push   0x1
c000c149:	68 41 e1 01 c0       	push   0xc001e141
c000c14e:	e8 36 6c 00 00       	call   c0012d89 <Thr::loadDLL(char const*, bool)>
c000c153:	83 c4 10             	add    esp,0x10
c000c156:	83 ec 08             	sub    esp,0x8
c000c159:	53                   	push   ebx
c000c15a:	50                   	push   eax
c000c15b:	e8 5a 6e 00 00       	call   c0012fba <Thr::executeDLL(unsigned long, void*)>
c000c160:	83 c4 10             	add    esp,0x10
c000c163:	8b 1d 18 0d 02 c0    	mov    ebx,DWORD PTR ds:0xc0020d18
c000c169:	83 ec 08             	sub    esp,0x8
c000c16c:	6a 01                	push   0x1
c000c16e:	68 5b e1 01 c0       	push   0xc001e15b
c000c173:	e8 11 6c 00 00       	call   c0012d89 <Thr::loadDLL(char const*, bool)>
c000c178:	83 c4 10             	add    esp,0x10
c000c17b:	83 ec 08             	sub    esp,0x8
c000c17e:	53                   	push   ebx
c000c17f:	50                   	push   eax
c000c180:	e8 35 6e 00 00       	call   c0012fba <Thr::executeDLL(unsigned long, void*)>
c000c185:	83 c4 10             	add    esp,0x10
c000c188:	90                   	nop
c000c189:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c18c:	c9                   	leave  
c000c18d:	c3                   	ret    

c000c18e <startGUIVESA(void*)>:
c000c18e:	55                   	push   ebp
c000c18f:	89 e5                	mov    ebp,esp
c000c191:	53                   	push   ebx
c000c192:	83 ec 04             	sub    esp,0x4
c000c195:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c000c19a:	48                   	dec    eax
c000c19b:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c000c1a0:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c000c1a5:	85 c0                	test   eax,eax
c000c1a7:	75 01                	jne    c000c1aa <startGUIVESA(void*)+0x1c>
c000c1a9:	fb                   	sti    
c000c1aa:	8b 1d 18 0d 02 c0    	mov    ebx,DWORD PTR ds:0xc0020d18
c000c1b0:	83 ec 08             	sub    esp,0x8
c000c1b3:	6a 01                	push   0x1
c000c1b5:	68 79 e1 01 c0       	push   0xc001e179
c000c1ba:	e8 ca 6b 00 00       	call   c0012d89 <Thr::loadDLL(char const*, bool)>
c000c1bf:	83 c4 10             	add    esp,0x10
c000c1c2:	83 ec 08             	sub    esp,0x8
c000c1c5:	53                   	push   ebx
c000c1c6:	50                   	push   eax
c000c1c7:	e8 ee 6d 00 00       	call   c0012fba <Thr::executeDLL(unsigned long, void*)>
c000c1cc:	83 c4 10             	add    esp,0x10
c000c1cf:	8b 1d 18 0d 02 c0    	mov    ebx,DWORD PTR ds:0xc0020d18
c000c1d5:	83 ec 08             	sub    esp,0x8
c000c1d8:	6a 01                	push   0x1
c000c1da:	68 5b e1 01 c0       	push   0xc001e15b
c000c1df:	e8 a5 6b 00 00       	call   c0012d89 <Thr::loadDLL(char const*, bool)>
c000c1e4:	83 c4 10             	add    esp,0x10
c000c1e7:	83 ec 08             	sub    esp,0x8
c000c1ea:	53                   	push   ebx
c000c1eb:	50                   	push   eax
c000c1ec:	e8 c9 6d 00 00       	call   c0012fba <Thr::executeDLL(unsigned long, void*)>
c000c1f1:	83 c4 10             	add    esp,0x10
c000c1f4:	90                   	nop
c000c1f5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c1f8:	c9                   	leave  
c000c1f9:	c3                   	ret    

c000c1fa <sendKeyToTerminal(unsigned char)>:
c000c1fa:	55                   	push   ebp
c000c1fb:	89 e5                	mov    ebp,esp
c000c1fd:	83 ec 28             	sub    esp,0x28
c000c200:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c203:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c206:	8b 15 64 0d 02 c0    	mov    edx,DWORD PTR ds:0xc0020d64
c000c20c:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c20f:	25 ff 00 00 00       	and    eax,0xff
c000c214:	83 ec 08             	sub    esp,0x8
c000c217:	50                   	push   eax
c000c218:	52                   	push   edx
c000c219:	e8 28 c8 ff ff       	call   c0008a46 <VgaText::receiveKey(unsigned char)>
c000c21e:	83 c4 10             	add    esp,0x10
c000c221:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c225:	74 0a                	je     c000c231 <sendKeyToTerminal(unsigned char)+0x37>
c000c227:	80 7d e4 03          	cmp    BYTE PTR [ebp-0x1c],0x3
c000c22b:	0f 85 8f 00 00 00    	jne    c000c2c0 <sendKeyToTerminal(unsigned char)+0xc6>
c000c231:	fa                   	cli    
c000c232:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c000c237:	40                   	inc    eax
c000c238:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c000c23d:	a1 c4 3f 02 c0       	mov    eax,ds:0xc0023fc4
c000c242:	40                   	inc    eax
c000c243:	a3 c4 3f 02 c0       	mov    ds:0xc0023fc4,eax
c000c248:	a1 20 2e 02 c0       	mov    eax,ds:0xc0022e20
c000c24d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c250:	c7 05 20 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022e20,0x0
c000c25a:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c25e:	74 1f                	je     c000c27f <sendKeyToTerminal(unsigned char)+0x85>
c000c260:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c263:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c266:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c269:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c26c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c26f:	83 ec 0c             	sub    esp,0xc
c000c272:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c275:	e8 46 7b 00 00       	call   c0013dc0 <unblockTask(ThreadControlBlock*)>
c000c27a:	83 c4 10             	add    esp,0x10
c000c27d:	eb db                	jmp    c000c25a <sendKeyToTerminal(unsigned char)+0x60>
c000c27f:	a1 c4 3f 02 c0       	mov    eax,ds:0xc0023fc4
c000c284:	48                   	dec    eax
c000c285:	a3 c4 3f 02 c0       	mov    ds:0xc0023fc4,eax
c000c28a:	a1 c4 3f 02 c0       	mov    eax,ds:0xc0023fc4
c000c28f:	85 c0                	test   eax,eax
c000c291:	75 18                	jne    c000c2ab <sendKeyToTerminal(unsigned char)+0xb1>
c000c293:	a1 c0 3f 02 c0       	mov    eax,ds:0xc0023fc0
c000c298:	85 c0                	test   eax,eax
c000c29a:	74 0f                	je     c000c2ab <sendKeyToTerminal(unsigned char)+0xb1>
c000c29c:	c7 05 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023fc0,0x0
c000c2a6:	e8 51 76 00 00       	call   c00138fc <schedule()>
c000c2ab:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c000c2b0:	48                   	dec    eax
c000c2b1:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c000c2b6:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c000c2bb:	85 c0                	test   eax,eax
c000c2bd:	75 01                	jne    c000c2c0 <sendKeyToTerminal(unsigned char)+0xc6>
c000c2bf:	fb                   	sti    
c000c2c0:	90                   	nop
c000c2c1:	c9                   	leave  
c000c2c2:	c3                   	ret    

c000c2c3 <sendKeyboardToken(KeyboardToken)>:
c000c2c3:	55                   	push   ebp
c000c2c4:	89 e5                	mov    ebp,esp
c000c2c6:	83 ec 18             	sub    esp,0x18
c000c2c9:	e8 c5 3e 00 00       	call   c0010193 <Krnl::userIOReceived()>
c000c2ce:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c2d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2d4:	25 ff ff 00 00       	and    eax,0xffff
c000c2d9:	83 f2 01             	xor    edx,0x1
c000c2dc:	88 90 40 2e 02 c0    	mov    BYTE PTR [eax-0x3ffdd1c0],dl
c000c2e2:	a1 28 2e 02 c0       	mov    eax,ds:0xc0022e28
c000c2e7:	85 c0                	test   eax,eax
c000c2e9:	74 24                	je     c000c30f <sendKeyboardToken(KeyboardToken)+0x4c>
c000c2eb:	8b 0d 28 2e 02 c0    	mov    ecx,DWORD PTR ds:0xc0022e28
c000c2f1:	83 ec 04             	sub    esp,0x4
c000c2f4:	68 40 2e 02 c0       	push   0xc0022e40
c000c2f9:	83 ec 08             	sub    esp,0x8
c000c2fc:	89 e2                	mov    edx,esp
c000c2fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c301:	89 02                	mov    DWORD PTR [edx],eax
c000c303:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c306:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c30a:	ff d1                	call   ecx
c000c30c:	83 c4 10             	add    esp,0x10
c000c30f:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c313:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c316:	a0 48 32 02 c0       	mov    al,ds:0xc0023248
c000c31b:	38 c2                	cmp    dl,al
c000c31d:	74 1e                	je     c000c33d <sendKeyboardToken(KeyboardToken)+0x7a>
c000c31f:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c322:	a2 48 32 02 c0       	mov    ds:0xc0023248,al
c000c327:	a0 48 32 02 c0       	mov    al,ds:0xc0023248
c000c32c:	25 ff 00 00 00       	and    eax,0xff
c000c331:	83 ec 0c             	sub    esp,0xc
c000c334:	50                   	push   eax
c000c335:	e8 5e be ff ff       	call   c0008198 <setTerminalScrollLock(bool)>
c000c33a:	83 c4 10             	add    esp,0x10
c000c33d:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c340:	84 c0                	test   al,al
c000c342:	0f 84 ae 00 00 00    	je     c000c3f6 <sendKeyboardToken(KeyboardToken)+0x133>
c000c348:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c34b:	66 3d 10 03          	cmp    ax,0x310
c000c34f:	75 06                	jne    c000c357 <sendKeyboardToken(KeyboardToken)+0x94>
c000c351:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c357:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c35a:	66 3d 11 03          	cmp    ax,0x311
c000c35e:	75 06                	jne    c000c366 <sendKeyboardToken(KeyboardToken)+0xa3>
c000c360:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c366:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c369:	66 3d 12 03          	cmp    ax,0x312
c000c36d:	75 06                	jne    c000c375 <sendKeyboardToken(KeyboardToken)+0xb2>
c000c36f:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c375:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c378:	66 3d 13 03          	cmp    ax,0x313
c000c37c:	75 06                	jne    c000c384 <sendKeyboardToken(KeyboardToken)+0xc1>
c000c37e:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c384:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c387:	66 3d 14 03          	cmp    ax,0x314
c000c38b:	75 06                	jne    c000c393 <sendKeyboardToken(KeyboardToken)+0xd0>
c000c38d:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c393:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c396:	66 3d 15 03          	cmp    ax,0x315
c000c39a:	75 06                	jne    c000c3a2 <sendKeyboardToken(KeyboardToken)+0xdf>
c000c39c:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c3a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3a5:	66 3d 16 03          	cmp    ax,0x316
c000c3a9:	75 06                	jne    c000c3b1 <sendKeyboardToken(KeyboardToken)+0xee>
c000c3ab:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c3b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3b4:	66 3d 17 03          	cmp    ax,0x317
c000c3b8:	75 06                	jne    c000c3c0 <sendKeyboardToken(KeyboardToken)+0xfd>
c000c3ba:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c3c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3c3:	66 3d 18 03          	cmp    ax,0x318
c000c3c7:	75 06                	jne    c000c3cf <sendKeyboardToken(KeyboardToken)+0x10c>
c000c3c9:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c3cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3d2:	66 3d 19 03          	cmp    ax,0x319
c000c3d6:	75 06                	jne    c000c3de <sendKeyboardToken(KeyboardToken)+0x11b>
c000c3d8:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c3de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3e1:	66 3d 1a 03          	cmp    ax,0x31a
c000c3e5:	0f 85 c9 00 00 00    	jne    c000c4b4 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c3eb:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c3f1:	e9 be 00 00 00       	jmp    c000c4b4 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c3f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3f9:	66 3d 10 03          	cmp    ax,0x310
c000c3fd:	75 0a                	jne    c000c409 <sendKeyboardToken(KeyboardToken)+0x146>
c000c3ff:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c405:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c409:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c40c:	66 3d 11 03          	cmp    ax,0x311
c000c410:	75 0a                	jne    c000c41c <sendKeyboardToken(KeyboardToken)+0x159>
c000c412:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c418:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c41c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c41f:	66 3d 12 03          	cmp    ax,0x312
c000c423:	75 0a                	jne    c000c42f <sendKeyboardToken(KeyboardToken)+0x16c>
c000c425:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c42b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c42f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c432:	66 3d 13 03          	cmp    ax,0x313
c000c436:	75 0a                	jne    c000c442 <sendKeyboardToken(KeyboardToken)+0x17f>
c000c438:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c43e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c442:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c445:	66 3d 14 03          	cmp    ax,0x314
c000c449:	75 0a                	jne    c000c455 <sendKeyboardToken(KeyboardToken)+0x192>
c000c44b:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c451:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c455:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c458:	66 3d 15 03          	cmp    ax,0x315
c000c45c:	75 0a                	jne    c000c468 <sendKeyboardToken(KeyboardToken)+0x1a5>
c000c45e:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c464:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c468:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c46b:	66 3d 16 03          	cmp    ax,0x316
c000c46f:	75 0a                	jne    c000c47b <sendKeyboardToken(KeyboardToken)+0x1b8>
c000c471:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c477:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c47b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c47e:	66 3d 17 03          	cmp    ax,0x317
c000c482:	75 0a                	jne    c000c48e <sendKeyboardToken(KeyboardToken)+0x1cb>
c000c484:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c48a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c48e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c491:	66 3d 18 03          	cmp    ax,0x318
c000c495:	75 0a                	jne    c000c4a1 <sendKeyboardToken(KeyboardToken)+0x1de>
c000c497:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c49d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4a4:	66 3d 19 03          	cmp    ax,0x319
c000c4a8:	75 0a                	jne    c000c4b4 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c4aa:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c4b0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4b7:	66 3d 00 02          	cmp    ax,0x200
c000c4bb:	75 2c                	jne    c000c4e9 <sendKeyboardToken(KeyboardToken)+0x226>
c000c4bd:	a0 40 32 02 c0       	mov    al,ds:0xc0023240
c000c4c2:	83 f0 01             	xor    eax,0x1
c000c4c5:	84 c0                	test   al,al
c000c4c7:	74 20                	je     c000c4e9 <sendKeyboardToken(KeyboardToken)+0x226>
c000c4c9:	a1 f0 3f 02 c0       	mov    eax,ds:0xc0023ff0
c000c4ce:	6a 01                	push   0x1
c000c4d0:	6a 00                	push   0x0
c000c4d2:	68 22 c1 00 c0       	push   0xc000c122
c000c4d7:	50                   	push   eax
c000c4d8:	e8 ff 71 00 00       	call   c00136dc <Process::createThread(void (*)(void*), void*, int)>
c000c4dd:	83 c4 10             	add    esp,0x10
c000c4e0:	c6 05 40 32 02 c0 01 	mov    BYTE PTR ds:0xc0023240,0x1
c000c4e7:	eb 33                	jmp    c000c51c <sendKeyboardToken(KeyboardToken)+0x259>
c000c4e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4ec:	66 3d 01 02          	cmp    ax,0x201
c000c4f0:	75 2a                	jne    c000c51c <sendKeyboardToken(KeyboardToken)+0x259>
c000c4f2:	a0 40 32 02 c0       	mov    al,ds:0xc0023240
c000c4f7:	83 f0 01             	xor    eax,0x1
c000c4fa:	84 c0                	test   al,al
c000c4fc:	74 1e                	je     c000c51c <sendKeyboardToken(KeyboardToken)+0x259>
c000c4fe:	a1 f0 3f 02 c0       	mov    eax,ds:0xc0023ff0
c000c503:	6a 01                	push   0x1
c000c505:	6a 00                	push   0x0
c000c507:	68 8e c1 00 c0       	push   0xc000c18e
c000c50c:	50                   	push   eax
c000c50d:	e8 ca 71 00 00       	call   c00136dc <Process::createThread(void (*)(void*), void*, int)>
c000c512:	83 c4 10             	add    esp,0x10
c000c515:	c6 05 40 32 02 c0 01 	mov    BYTE PTR ds:0xc0023240,0x1
c000c51c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c51f:	66 3d 1d 03          	cmp    ax,0x31d
c000c523:	75 06                	jne    c000c52b <sendKeyboardToken(KeyboardToken)+0x268>
c000c525:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000c52b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c52e:	66 3d 1c 03          	cmp    ax,0x31c
c000c532:	75 06                	jne    c000c53a <sendKeyboardToken(KeyboardToken)+0x277>
c000c534:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000c53a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c53d:	66 3d 1b 03          	cmp    ax,0x31b
c000c541:	75 06                	jne    c000c549 <sendKeyboardToken(KeyboardToken)+0x286>
c000c543:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000c549:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c54c:	66 3d 1e 03          	cmp    ax,0x31e
c000c550:	75 06                	jne    c000c558 <sendKeyboardToken(KeyboardToken)+0x295>
c000c552:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000c558:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c55b:	66 3d 1f 03          	cmp    ax,0x31f
c000c55f:	75 06                	jne    c000c567 <sendKeyboardToken(KeyboardToken)+0x2a4>
c000c561:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000c567:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c56a:	66 3d 1a 03          	cmp    ax,0x31a
c000c56e:	75 06                	jne    c000c576 <sendKeyboardToken(KeyboardToken)+0x2b3>
c000c570:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000c576:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000c57a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c57d:	83 f0 01             	xor    eax,0x1
c000c580:	84 c0                	test   al,al
c000c582:	74 7b                	je     c000c5ff <sendKeyboardToken(KeyboardToken)+0x33c>
c000c584:	a0 41 2f 02 c0       	mov    al,ds:0xc0022f41
c000c589:	84 c0                	test   al,al
c000c58b:	74 43                	je     c000c5d0 <sendKeyboardToken(KeyboardToken)+0x30d>
c000c58d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c591:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000c595:	74 2d                	je     c000c5c4 <sendKeyboardToken(KeyboardToken)+0x301>
c000c597:	8b 15 44 32 02 c0    	mov    edx,DWORD PTR ds:0xc0023244
c000c59d:	89 d0                	mov    eax,edx
c000c59f:	c1 e0 02             	shl    eax,0x2
c000c5a2:	01 d0                	add    eax,edx
c000c5a4:	01 c0                	add    eax,eax
c000c5a6:	a3 44 32 02 c0       	mov    ds:0xc0023244,eax
c000c5ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5ae:	25 ff ff 00 00       	and    eax,0xffff
c000c5b3:	8d 50 d0             	lea    edx,[eax-0x30]
c000c5b6:	a1 44 32 02 c0       	mov    eax,ds:0xc0023244
c000c5bb:	01 d0                	add    eax,edx
c000c5bd:	a3 44 32 02 c0       	mov    ds:0xc0023244,eax
c000c5c2:	eb 71                	jmp    c000c635 <sendKeyboardToken(KeyboardToken)+0x372>
c000c5c4:	c7 05 44 32 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023244,0x0
c000c5ce:	eb 65                	jmp    c000c635 <sendKeyboardToken(KeyboardToken)+0x372>
c000c5d0:	a1 44 32 02 c0       	mov    eax,ds:0xc0023244
c000c5d5:	85 c0                	test   eax,eax
c000c5d7:	74 1a                	je     c000c5f3 <sendKeyboardToken(KeyboardToken)+0x330>
c000c5d9:	a1 44 32 02 c0       	mov    eax,ds:0xc0023244
c000c5de:	25 ff 00 00 00       	and    eax,0xff
c000c5e3:	83 ec 0c             	sub    esp,0xc
c000c5e6:	50                   	push   eax
c000c5e7:	e8 0e fc ff ff       	call   c000c1fa <sendKeyToTerminal(unsigned char)>
c000c5ec:	83 c4 10             	add    esp,0x10
c000c5ef:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c5f3:	c7 05 44 32 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023244,0x0
c000c5fd:	eb 36                	jmp    c000c635 <sendKeyboardToken(KeyboardToken)+0x372>
c000c5ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c602:	66 3d 01 01          	cmp    ax,0x101
c000c606:	75 2d                	jne    c000c635 <sendKeyboardToken(KeyboardToken)+0x372>
c000c608:	a1 44 32 02 c0       	mov    eax,ds:0xc0023244
c000c60d:	85 c0                	test   eax,eax
c000c60f:	74 1a                	je     c000c62b <sendKeyboardToken(KeyboardToken)+0x368>
c000c611:	a1 44 32 02 c0       	mov    eax,ds:0xc0023244
c000c616:	25 ff 00 00 00       	and    eax,0xff
c000c61b:	83 ec 0c             	sub    esp,0xc
c000c61e:	50                   	push   eax
c000c61f:	e8 d6 fb ff ff       	call   c000c1fa <sendKeyToTerminal(unsigned char)>
c000c624:	83 c4 10             	add    esp,0x10
c000c627:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c62b:	c7 05 44 32 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023244,0x0
c000c635:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c638:	83 f0 01             	xor    eax,0x1
c000c63b:	84 c0                	test   al,al
c000c63d:	74 4e                	je     c000c68d <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c63f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c642:	83 f0 01             	xor    eax,0x1
c000c645:	84 c0                	test   al,al
c000c647:	74 44                	je     c000c68d <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c649:	a0 40 2f 02 c0       	mov    al,ds:0xc0022f40
c000c64e:	83 f0 01             	xor    eax,0x1
c000c651:	84 c0                	test   al,al
c000c653:	74 38                	je     c000c68d <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c655:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c658:	66 83 f8 1f          	cmp    ax,0x1f
c000c65c:	76 09                	jbe    c000c667 <sendKeyboardToken(KeyboardToken)+0x3a4>
c000c65e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c661:	66 83 f8 7e          	cmp    ax,0x7e
c000c665:	76 12                	jbe    c000c679 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c667:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c66a:	66 83 f8 0a          	cmp    ax,0xa
c000c66e:	74 09                	je     c000c679 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c670:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c673:	66 83 f8 08          	cmp    ax,0x8
c000c677:	75 14                	jne    c000c68d <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c679:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c67c:	25 ff 00 00 00       	and    eax,0xff
c000c681:	83 ec 0c             	sub    esp,0xc
c000c684:	50                   	push   eax
c000c685:	e8 70 fb ff ff       	call   c000c1fa <sendKeyToTerminal(unsigned char)>
c000c68a:	83 c4 10             	add    esp,0x10
c000c68d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c690:	83 f0 01             	xor    eax,0x1
c000c693:	84 c0                	test   al,al
c000c695:	74 51                	je     c000c6e8 <sendKeyboardToken(KeyboardToken)+0x425>
c000c697:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c69a:	83 f0 01             	xor    eax,0x1
c000c69d:	84 c0                	test   al,al
c000c69f:	74 47                	je     c000c6e8 <sendKeyboardToken(KeyboardToken)+0x425>
c000c6a1:	a0 40 2f 02 c0       	mov    al,ds:0xc0022f40
c000c6a6:	84 c0                	test   al,al
c000c6a8:	74 3e                	je     c000c6e8 <sendKeyboardToken(KeyboardToken)+0x425>
c000c6aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6ad:	66 83 f8 3f          	cmp    ax,0x3f
c000c6b1:	76 35                	jbe    c000c6e8 <sendKeyboardToken(KeyboardToken)+0x425>
c000c6b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6b6:	66 83 f8 7f          	cmp    ax,0x7f
c000c6ba:	77 2c                	ja     c000c6e8 <sendKeyboardToken(KeyboardToken)+0x425>
c000c6bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6bf:	88 c2                	mov    dl,al
c000c6c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6c4:	66 83 f8 5f          	cmp    ax,0x5f
c000c6c8:	76 04                	jbe    c000c6ce <sendKeyboardToken(KeyboardToken)+0x40b>
c000c6ca:	b0 20                	mov    al,0x20
c000c6cc:	eb 02                	jmp    c000c6d0 <sendKeyboardToken(KeyboardToken)+0x40d>
c000c6ce:	b0 00                	mov    al,0x0
c000c6d0:	29 c2                	sub    edx,eax
c000c6d2:	88 d0                	mov    al,dl
c000c6d4:	83 e8 40             	sub    eax,0x40
c000c6d7:	25 ff 00 00 00       	and    eax,0xff
c000c6dc:	83 ec 0c             	sub    esp,0xc
c000c6df:	50                   	push   eax
c000c6e0:	e8 15 fb ff ff       	call   c000c1fa <sendKeyToTerminal(unsigned char)>
c000c6e5:	83 c4 10             	add    esp,0x10
c000c6e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6eb:	66 3d 00 03          	cmp    ax,0x300
c000c6ef:	75 0f                	jne    c000c700 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c6f1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c6f4:	83 f0 01             	xor    eax,0x1
c000c6f7:	84 c0                	test   al,al
c000c6f9:	74 05                	je     c000c700 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c6fb:	e8 99 ba ff ff       	call   c0008199 <doTerminalCycle()>
c000c700:	90                   	nop
c000c701:	c9                   	leave  
c000c702:	c3                   	ret    

c000c703 <clearInternalKeybuffer(VgaText*)>:
c000c703:	55                   	push   ebp
c000c704:	89 e5                	mov    ebp,esp
c000c706:	83 ec 08             	sub    esp,0x8
c000c709:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c70c:	05 b2 00 00 00       	add    eax,0xb2
c000c711:	83 ec 0c             	sub    esp,0xc
c000c714:	50                   	push   eax
c000c715:	e8 26 3e ff ff       	call   c0000540 <strlen>
c000c71a:	83 c4 10             	add    esp,0x10
c000c71d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c720:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c726:	83 ec 04             	sub    esp,0x4
c000c729:	50                   	push   eax
c000c72a:	6a 00                	push   0x0
c000c72c:	52                   	push   edx
c000c72d:	e8 9e 3d ff ff       	call   c00004d0 <memset>
c000c732:	83 c4 10             	add    esp,0x10
c000c735:	90                   	nop
c000c736:	c9                   	leave  
c000c737:	c3                   	ret    

c000c738 <readKeyboard(VgaText*, char*, unsigned long)>:
c000c738:	55                   	push   ebp
c000c739:	89 e5                	mov    ebp,esp
c000c73b:	83 ec 18             	sub    esp,0x18
c000c73e:	a1 28 2e 02 c0       	mov    eax,ds:0xc0022e28
c000c743:	85 c0                	test   eax,eax
c000c745:	74 2a                	je     c000c771 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000c747:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000c74d:	8b 0d 28 2e 02 c0    	mov    ecx,DWORD PTR ds:0xc0022e28
c000c753:	83 ec 04             	sub    esp,0x4
c000c756:	68 40 2e 02 c0       	push   0xc0022e40
c000c75b:	83 ec 08             	sub    esp,0x8
c000c75e:	89 e2                	mov    edx,esp
c000c760:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000c763:	89 02                	mov    DWORD PTR [edx],eax
c000c765:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c768:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c76c:	ff d1                	call   ecx
c000c76e:	83 c4 10             	add    esp,0x10
c000c771:	fb                   	sti    
c000c772:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000c779:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000c77d:	0f 84 c4 00 00 00    	je     c000c847 <readKeyboard(VgaText*, char*, unsigned long)+0x10f>
c000c783:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c786:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c78c:	84 c0                	test   al,al
c000c78e:	75 28                	jne    c000c7b8 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000c790:	fa                   	cli    
c000c791:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c000c796:	40                   	inc    eax
c000c797:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c000c79c:	e8 5b 71 00 00       	call   c00138fc <schedule()>
c000c7a1:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c000c7a6:	48                   	dec    eax
c000c7a7:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c000c7ac:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c000c7b1:	85 c0                	test   eax,eax
c000c7b3:	75 ce                	jne    c000c783 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c7b5:	fb                   	sti    
c000c7b6:	eb cb                	jmp    c000c783 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c7b8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c7bb:	8d 50 01             	lea    edx,[eax+0x1]
c000c7be:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c7c1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c7c4:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000c7ca:	88 10                	mov    BYTE PTR [eax],dl
c000c7cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7cf:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c7d5:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000c7d8:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c7dc:	75 1d                	jne    c000c7fb <readKeyboard(VgaText*, char*, unsigned long)+0xc3>
c000c7de:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c7e3:	8b 00                	mov    eax,DWORD PTR [eax]
c000c7e5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c7e8:	05 20 07 00 00       	add    eax,0x720
c000c7ed:	83 ec 08             	sub    esp,0x8
c000c7f0:	6a 02                	push   0x2
c000c7f2:	50                   	push   eax
c000c7f3:	e8 2e 3d 00 00       	call   c0010526 <KeRaiseSignal(SigHandlerBlock*, int)>
c000c7f8:	83 c4 10             	add    esp,0x10
c000c7fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7fe:	05 b2 00 00 00       	add    eax,0xb2
c000c803:	83 ec 0c             	sub    esp,0xc
c000c806:	50                   	push   eax
c000c807:	e8 34 3d ff ff       	call   c0000540 <strlen>
c000c80c:	83 c4 10             	add    esp,0x10
c000c80f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c812:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c818:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c81b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c81e:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c824:	83 ec 04             	sub    esp,0x4
c000c827:	50                   	push   eax
c000c828:	51                   	push   ecx
c000c829:	52                   	push   edx
c000c82a:	e8 b1 3b ff ff       	call   c00003e0 <memmove>
c000c82f:	83 c4 10             	add    esp,0x10
c000c832:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000c835:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000c838:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000c83c:	0f 85 37 ff ff ff    	jne    c000c779 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000c842:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c845:	eb 03                	jmp    c000c84a <readKeyboard(VgaText*, char*, unsigned long)+0x112>
c000c847:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c84a:	c9                   	leave  
c000c84b:	c3                   	ret    

c000c84c <Keyboard::Keyboard(char const*)>:
c000c84c:	83 ec 0c             	sub    esp,0xc
c000c84f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c853:	83 ec 08             	sub    esp,0x8
c000c856:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c85a:	50                   	push   eax
c000c85b:	e8 50 f2 ff ff       	call   c000bab0 <Device::Device(char const*)>
c000c860:	83 c4 10             	add    esp,0x10
c000c863:	ba 9c e1 01 c0       	mov    edx,0xc001e19c
c000c868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c86c:	89 10                	mov    DWORD PTR [eax],edx
c000c86e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c872:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000c87c:	c6 05 24 2e 02 c0 01 	mov    BYTE PTR ds:0xc0022e24,0x1
c000c883:	90                   	nop
c000c884:	83 c4 0c             	add    esp,0xc
c000c887:	c3                   	ret    

c000c888 <Keyboard::~Keyboard()>:
c000c888:	83 ec 0c             	sub    esp,0xc
c000c88b:	ba 9c e1 01 c0       	mov    edx,0xc001e19c
c000c890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c894:	89 10                	mov    DWORD PTR [eax],edx
c000c896:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c89a:	83 ec 0c             	sub    esp,0xc
c000c89d:	50                   	push   eax
c000c89e:	e8 77 ef ff ff       	call   c000b81a <Device::~Device()>
c000c8a3:	83 c4 10             	add    esp,0x10
c000c8a6:	90                   	nop
c000c8a7:	83 c4 0c             	add    esp,0xc
c000c8aa:	c3                   	ret    
c000c8ab:	90                   	nop

c000c8ac <Keyboard::~Keyboard()>:
c000c8ac:	83 ec 0c             	sub    esp,0xc
c000c8af:	83 ec 0c             	sub    esp,0xc
c000c8b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8b6:	e8 cd ff ff ff       	call   c000c888 <Keyboard::~Keyboard()>
c000c8bb:	83 c4 10             	add    esp,0x10
c000c8be:	83 ec 08             	sub    esp,0x8
c000c8c1:	68 5c 01 00 00       	push   0x15c
c000c8c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ca:	e8 13 db ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000c8cf:	83 c4 10             	add    esp,0x10
c000c8d2:	83 c4 0c             	add    esp,0xc
c000c8d5:	c3                   	ret    

c000c8d6 <LogicalDisk::close(int, int, void*)>:
c000c8d6:	83 c8 ff             	or     eax,0xffffffff
c000c8d9:	c3                   	ret    

c000c8da <LogicalDisk::~LogicalDisk()>:
c000c8da:	83 ec 0c             	sub    esp,0xc
c000c8dd:	ba 14 e2 01 c0       	mov    edx,0xc001e214
c000c8e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8e6:	89 10                	mov    DWORD PTR [eax],edx
c000c8e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8ec:	83 ec 0c             	sub    esp,0xc
c000c8ef:	50                   	push   eax
c000c8f0:	e8 25 ef ff ff       	call   c000b81a <Device::~Device()>
c000c8f5:	83 c4 10             	add    esp,0x10
c000c8f8:	90                   	nop
c000c8f9:	83 c4 0c             	add    esp,0xc
c000c8fc:	c3                   	ret    
c000c8fd:	90                   	nop

c000c8fe <LogicalDisk::~LogicalDisk()>:
c000c8fe:	83 ec 0c             	sub    esp,0xc
c000c901:	83 ec 0c             	sub    esp,0xc
c000c904:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c908:	e8 cd ff ff ff       	call   c000c8da <LogicalDisk::~LogicalDisk()>
c000c90d:	83 c4 10             	add    esp,0x10
c000c910:	83 ec 08             	sub    esp,0x8
c000c913:	68 74 01 00 00       	push   0x174
c000c918:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c91c:	e8 c1 da ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000c921:	83 c4 10             	add    esp,0x10
c000c924:	83 c4 0c             	add    esp,0xc
c000c927:	c3                   	ret    

c000c928 <LogicalDisk::open(int, int, void*)>:
c000c928:	83 ec 18             	sub    esp,0x18
c000c92b:	68 c8 e1 01 c0       	push   0xc001e1c8
c000c930:	e8 0e 38 00 00       	call   c0010143 <KePanic(char const*)>
c000c935:	83 c8 ff             	or     eax,0xffffffff
c000c938:	83 c4 1c             	add    esp,0x1c
c000c93b:	c3                   	ret    

c000c93c <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000c93c:	53                   	push   ebx
c000c93d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c941:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c945:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c949:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000c94f:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000c955:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000c95b:	77 10                	ja     c000c96d <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000c95d:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000c963:	89 d3                	mov    ebx,edx
c000c965:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000c96b:	72 05                	jb     c000c972 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000c96d:	83 c8 ff             	or     eax,0xffffffff
c000c970:	89 c2                	mov    edx,eax
c000c972:	5b                   	pop    ebx
c000c973:	c3                   	ret    

c000c974 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000c974:	56                   	push   esi
c000c975:	83 c8 ff             	or     eax,0xffffffff
c000c978:	53                   	push   ebx
c000c979:	89 c2                	mov    edx,eax
c000c97b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c97f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000c983:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c987:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000c98d:	77 27                	ja     c000c9b6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000c98f:	89 d8                	mov    eax,ebx
c000c991:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000c997:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000c99d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c9a2:	89 c2                	mov    edx,eax
c000c9a4:	73 10                	jae    c000c9b6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000c9a6:	89 c8                	mov    eax,ecx
c000c9a8:	89 da                	mov    edx,ebx
c000c9aa:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000c9b0:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000c9b6:	5b                   	pop    ebx
c000c9b7:	5e                   	pop    esi
c000c9b8:	c3                   	ret    
c000c9b9:	90                   	nop

c000c9ba <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000c9ba:	83 ec 1c             	sub    esp,0x1c
c000c9bd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c9c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c9c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c9cd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c9d1:	89 04 24             	mov    DWORD PTR [esp],eax
c000c9d4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c9d8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c9dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9e0:	83 ec 08             	sub    esp,0x8
c000c9e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9e7:	50                   	push   eax
c000c9e8:	e8 c3 f0 ff ff       	call   c000bab0 <Device::Device(char const*)>
c000c9ed:	83 c4 10             	add    esp,0x10
c000c9f0:	ba 14 e2 01 c0       	mov    edx,0xc001e214
c000c9f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9f9:	89 10                	mov    DWORD PTR [eax],edx
c000c9fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9ff:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ca06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca0a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ca11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca15:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000ca1f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ca23:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca27:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ca2b:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000ca31:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000ca37:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ca3b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ca3e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ca42:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000ca48:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000ca4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca52:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ca56:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000ca5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca60:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000ca6a:	90                   	nop
c000ca6b:	83 c4 1c             	add    esp,0x1c
c000ca6e:	c3                   	ret    
c000ca6f:	90                   	nop

c000ca70 <LogicalDisk::assignDriveLetter()>:
c000ca70:	55                   	push   ebp
c000ca71:	57                   	push   edi
c000ca72:	56                   	push   esi
c000ca73:	53                   	push   ebx
c000ca74:	83 ec 14             	sub    esp,0x14
c000ca77:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ca7b:	8b 3d 60 32 02 c0    	mov    edi,DWORD PTR ds:0xc0023260
c000ca81:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000ca87:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000ca8b:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000ca91:	8b 3d 64 32 02 c0    	mov    edi,DWORD PTR ds:0xc0023264
c000ca97:	3c 01                	cmp    al,0x1
c000ca99:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000ca9d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000caa1:	19 c0                	sbb    eax,eax
c000caa3:	83 e0 02             	and    eax,0x2
c000caa6:	83 c0 41             	add    eax,0x41
c000caa9:	0f be e8             	movsx  ebp,al
c000caac:	3c 43                	cmp    al,0x43
c000caae:	75 10                	jne    c000cac0 <LogicalDisk::assignDriveLetter()+0x50>
c000cab0:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000cab7:	75 5d                	jne    c000cb16 <LogicalDisk::assignDriveLetter()+0xa6>
c000cab9:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000cabe:	75 56                	jne    c000cb16 <LogicalDisk::assignDriveLetter()+0xa6>
c000cac0:	8d 75 bf             	lea    esi,[ebp-0x41]
c000cac3:	ba 01 00 00 00       	mov    edx,0x1
c000cac8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000cacc:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000cad0:	d3 e2                	shl    edx,cl
c000cad2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cad6:	89 d7                	mov    edi,edx
c000cad8:	89 d6                	mov    esi,edx
c000cada:	c1 ff 1f             	sar    edi,0x1f
c000cadd:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000cae1:	21 f9                	and    ecx,edi
c000cae3:	09 d1                	or     ecx,edx
c000cae5:	75 2f                	jne    c000cb16 <LogicalDisk::assignDriveLetter()+0xa6>
c000cae7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000caeb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000caef:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000caf5:	09 f2                	or     edx,esi
c000caf7:	89 15 60 32 02 c0    	mov    DWORD PTR ds:0xc0023260,edx
c000cafd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb01:	09 fa                	or     edx,edi
c000cb03:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000cb07:	89 15 64 32 02 c0    	mov    DWORD PTR ds:0xc0023264,edx
c000cb0d:	89 1c bd 80 32 02 c0 	mov    DWORD PTR [edi*4-0x3ffdcd80],ebx
c000cb14:	eb 08                	jmp    c000cb1e <LogicalDisk::assignDriveLetter()+0xae>
c000cb16:	45                   	inc    ebp
c000cb17:	40                   	inc    eax
c000cb18:	3c 5b                	cmp    al,0x5b
c000cb1a:	75 90                	jne    c000caac <LogicalDisk::assignDriveLetter()+0x3c>
c000cb1c:	31 c0                	xor    eax,eax
c000cb1e:	83 c4 14             	add    esp,0x14
c000cb21:	5b                   	pop    ebx
c000cb22:	5e                   	pop    esi
c000cb23:	5f                   	pop    edi
c000cb24:	5d                   	pop    ebp
c000cb25:	c3                   	ret    

c000cb26 <LogicalDisk::mount()>:
c000cb26:	56                   	push   esi
c000cb27:	53                   	push   ebx
c000cb28:	53                   	push   ebx
c000cb29:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cb2d:	8b 1d 14 0e 02 c0    	mov    ebx,DWORD PTR ds:0xc0020e14
c000cb33:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000cb3d:	85 db                	test   ebx,ebx
c000cb3f:	74 27                	je     c000cb68 <LogicalDisk::mount()+0x42>
c000cb41:	51                   	push   ecx
c000cb42:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000cb49:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cb4b:	83 e8 41             	sub    eax,0x41
c000cb4e:	50                   	push   eax
c000cb4f:	56                   	push   esi
c000cb50:	53                   	push   ebx
c000cb51:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cb54:	83 c4 10             	add    esp,0x10
c000cb57:	84 c0                	test   al,al
c000cb59:	74 08                	je     c000cb63 <LogicalDisk::mount()+0x3d>
c000cb5b:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000cb61:	eb 07                	jmp    c000cb6a <LogicalDisk::mount()+0x44>
c000cb63:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000cb66:	eb d5                	jmp    c000cb3d <LogicalDisk::mount()+0x17>
c000cb68:	31 c0                	xor    eax,eax
c000cb6a:	5a                   	pop    edx
c000cb6b:	5b                   	pop    ebx
c000cb6c:	5e                   	pop    esi
c000cb6d:	c3                   	ret    

c000cb6e <LogicalDisk::unmount()>:
c000cb6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cb72:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000cb7c:	c3                   	ret    
c000cb7d:	90                   	nop

c000cb7e <LogicalDisk::eject()>:
c000cb7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cb82:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000cb88:	8b 10                	mov    edx,DWORD PTR [eax]
c000cb8a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cb8e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000cb91:	90                   	nop

c000cb92 <LogicalDisk::unassignDriveLetter()>:
c000cb92:	57                   	push   edi
c000cb93:	56                   	push   esi
c000cb94:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb98:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000cb9f:	84 c9                	test   cl,cl
c000cba1:	75 0f                	jne    c000cbb2 <LogicalDisk::unassignDriveLetter()+0x20>
c000cba3:	c7 44 24 0c ec e1 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e1ec
c000cbab:	5e                   	pop    esi
c000cbac:	5f                   	pop    edi
c000cbad:	e9 91 35 00 00       	jmp    c0010143 <KePanic(char const*)>
c000cbb2:	83 e9 41             	sub    ecx,0x41
c000cbb5:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000cbbc:	b8 01 00 00 00       	mov    eax,0x1
c000cbc1:	c7 04 8d 80 32 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdcd80],0x0
c000cbcc:	d3 e0                	shl    eax,cl
c000cbce:	89 c7                	mov    edi,eax
c000cbd0:	f7 d0                	not    eax
c000cbd2:	c1 ff 1f             	sar    edi,0x1f
c000cbd5:	21 05 60 32 02 c0    	and    DWORD PTR ds:0xc0023260,eax
c000cbdb:	89 fe                	mov    esi,edi
c000cbdd:	f7 d6                	not    esi
c000cbdf:	21 35 64 32 02 c0    	and    DWORD PTR ds:0xc0023264,esi
c000cbe5:	5e                   	pop    esi
c000cbe6:	5f                   	pop    edi
c000cbe7:	c3                   	ret    

c000cbe8 <LogicalDisk::read(unsigned long long, int, void*)>:
c000cbe8:	57                   	push   edi
c000cbe9:	56                   	push   esi
c000cbea:	53                   	push   ebx
c000cbeb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cbef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cbf3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cbf7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cbfb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cc01:	77 41                	ja     c000cc44 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000cc03:	99                   	cdq    
c000cc04:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cc0a:	01 c8                	add    eax,ecx
c000cc0c:	11 da                	adc    edx,ebx
c000cc0e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cc14:	19 d7                	sbb    edi,edx
c000cc16:	72 33                	jb     c000cc4b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000cc18:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cc1e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cc24:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cc28:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cc2c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cc32:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cc38:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc3c:	5b                   	pop    ebx
c000cc3d:	5e                   	pop    esi
c000cc3e:	5f                   	pop    edi
c000cc3f:	e9 4e 0a 00 00       	jmp    c000d692 <VCache::read(unsigned long long, int, void*)>
c000cc44:	b8 05 00 00 00       	mov    eax,0x5
c000cc49:	eb 05                	jmp    c000cc50 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000cc4b:	b8 07 00 00 00       	mov    eax,0x7
c000cc50:	5b                   	pop    ebx
c000cc51:	5e                   	pop    esi
c000cc52:	5f                   	pop    edi
c000cc53:	c3                   	ret    

c000cc54 <LogicalDisk::write(unsigned long long, int, void*)>:
c000cc54:	57                   	push   edi
c000cc55:	56                   	push   esi
c000cc56:	53                   	push   ebx
c000cc57:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cc5b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cc5f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cc63:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cc67:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cc6d:	77 41                	ja     c000ccb0 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000cc6f:	99                   	cdq    
c000cc70:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cc76:	01 c8                	add    eax,ecx
c000cc78:	11 da                	adc    edx,ebx
c000cc7a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cc80:	19 d7                	sbb    edi,edx
c000cc82:	72 33                	jb     c000ccb7 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000cc84:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cc8a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cc90:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cc94:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cc98:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cc9e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cca4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cca8:	5b                   	pop    ebx
c000cca9:	5e                   	pop    esi
c000ccaa:	5f                   	pop    edi
c000ccab:	e9 cc 08 00 00       	jmp    c000d57c <VCache::write(unsigned long long, int, void*)>
c000ccb0:	b8 05 00 00 00       	mov    eax,0x5
c000ccb5:	eb 05                	jmp    c000ccbc <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000ccb7:	b8 07 00 00 00       	mov    eax,0x7
c000ccbc:	5b                   	pop    ebx
c000ccbd:	5e                   	pop    esi
c000ccbe:	5f                   	pop    edi
c000ccbf:	c3                   	ret    

c000ccc0 <Mouse::Mouse(char const*)>:
c000ccc0:	83 ec 0c             	sub    esp,0xc
c000ccc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccc7:	83 ec 08             	sub    esp,0x8
c000ccca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccce:	50                   	push   eax
c000cccf:	e8 dc ed ff ff       	call   c000bab0 <Device::Device(char const*)>
c000ccd4:	83 c4 10             	add    esp,0x10
c000ccd7:	ba 40 e2 01 c0       	mov    edx,0xc001e240
c000ccdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cce0:	89 10                	mov    DWORD PTR [eax],edx
c000cce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cce6:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000ccf0:	90                   	nop
c000ccf1:	83 c4 0c             	add    esp,0xc
c000ccf4:	c3                   	ret    
c000ccf5:	90                   	nop
c000ccf6:	66 90                	xchg   ax,ax

c000ccf8 <Mouse::~Mouse()>:
c000ccf8:	83 ec 0c             	sub    esp,0xc
c000ccfb:	ba 40 e2 01 c0       	mov    edx,0xc001e240
c000cd00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd04:	89 10                	mov    DWORD PTR [eax],edx
c000cd06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd0a:	83 ec 0c             	sub    esp,0xc
c000cd0d:	50                   	push   eax
c000cd0e:	e8 07 eb ff ff       	call   c000b81a <Device::~Device()>
c000cd13:	83 c4 10             	add    esp,0x10
c000cd16:	90                   	nop
c000cd17:	83 c4 0c             	add    esp,0xc
c000cd1a:	c3                   	ret    
c000cd1b:	90                   	nop

c000cd1c <Mouse::~Mouse()>:
c000cd1c:	83 ec 0c             	sub    esp,0xc
c000cd1f:	83 ec 0c             	sub    esp,0xc
c000cd22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd26:	e8 cd ff ff ff       	call   c000ccf8 <Mouse::~Mouse()>
c000cd2b:	83 c4 10             	add    esp,0x10
c000cd2e:	83 ec 08             	sub    esp,0x8
c000cd31:	68 58 01 00 00       	push   0x158
c000cd36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd3a:	e8 a3 d6 ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000cd3f:	83 c4 10             	add    esp,0x10
c000cd42:	83 c4 0c             	add    esp,0xc
c000cd45:	c3                   	ret    

c000cd46 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cd46:	55                   	push   ebp
c000cd47:	57                   	push   edi
c000cd48:	56                   	push   esi
c000cd49:	53                   	push   ebx
c000cd4a:	81 ec 28 01 00 00    	sub    esp,0x128
c000cd50:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000cd57:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000cd5e:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000cd65:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000cd6c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd70:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cd74:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cd7b:	e8 2c ee ff ff       	call   c000bbac <Device::getName()>
c000cd80:	5a                   	pop    edx
c000cd81:	59                   	pop    ecx
c000cd82:	50                   	push   eax
c000cd83:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000cd87:	55                   	push   ebp
c000cd88:	e8 73 38 ff ff       	call   c0000600 <strcpy>
c000cd8d:	5b                   	pop    ebx
c000cd8e:	58                   	pop    eax
c000cd8f:	68 64 e2 01 c0       	push   0xc001e264
c000cd94:	55                   	push   ebp
c000cd95:	e8 26 3a ff ff       	call   c00007c0 <strcat>
c000cd9a:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000cda1:	e8 13 aa ff ff       	call   c00077b9 <malloc>
c000cda6:	83 c4 0c             	add    esp,0xc
c000cda9:	89 c3                	mov    ebx,eax
c000cdab:	57                   	push   edi
c000cdac:	56                   	push   esi
c000cdad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cdb1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cdb5:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000cdbc:	55                   	push   ebp
c000cdbd:	50                   	push   eax
c000cdbe:	e8 f7 fb ff ff       	call   c000c9ba <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000cdc3:	83 c4 14             	add    esp,0x14
c000cdc6:	53                   	push   ebx
c000cdc7:	e8 a4 fc ff ff       	call   c000ca70 <LogicalDisk::assignDriveLetter()>
c000cdcc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cdcf:	e8 52 fd ff ff       	call   c000cb26 <LogicalDisk::mount()>
c000cdd4:	58                   	pop    eax
c000cdd5:	5a                   	pop    edx
c000cdd6:	53                   	push   ebx
c000cdd7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cdde:	e8 35 eb ff ff       	call   c000b918 <Device::addChild(Device*)>
c000cde3:	81 c4 2c 01 00 00    	add    esp,0x12c
c000cde9:	5b                   	pop    ebx
c000cdea:	5e                   	pop    esi
c000cdeb:	5f                   	pop    edi
c000cdec:	5d                   	pop    ebp
c000cded:	c3                   	ret    

c000cdee <createPartitionsForDisk(PhysicalDisk*)>:
c000cdee:	55                   	push   ebp
c000cdef:	57                   	push   edi
c000cdf0:	56                   	push   esi
c000cdf1:	53                   	push   ebx
c000cdf2:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000cdf8:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000cdff:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000ce05:	3d 00 02 00 00       	cmp    eax,0x200
c000ce0a:	74 27                	je     c000ce33 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000ce0c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000ce12:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000ce18:	83 ec 10             	sub    esp,0x10
c000ce1b:	0f a4 f7 0a          	shld   edi,esi,0xa
c000ce1f:	99                   	cdq    
c000ce20:	c1 e6 0a             	shl    esi,0xa
c000ce23:	52                   	push   edx
c000ce24:	89 fd                	mov    ebp,edi
c000ce26:	50                   	push   eax
c000ce27:	55                   	push   ebp
c000ce28:	56                   	push   esi
c000ce29:	e8 d2 f3 00 00       	call   c001c200 <__udivdi3>
c000ce2e:	e9 b1 00 00 00       	jmp    c000cee4 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000ce33:	83 ec 0c             	sub    esp,0xc
c000ce36:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ce38:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000ce3c:	56                   	push   esi
c000ce3d:	6a 01                	push   0x1
c000ce3f:	6a 00                	push   0x0
c000ce41:	6a 00                	push   0x0
c000ce43:	53                   	push   ebx
c000ce44:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ce47:	83 c4 20             	add    esp,0x20
c000ce4a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000ce52:	75 0a                	jne    c000ce5e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000ce54:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000ce5c:	74 2c                	je     c000ce8a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000ce5e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ce64:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ce6a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ce70:	83 ec 10             	sub    esp,0x10
c000ce73:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ce77:	89 f7                	mov    edi,esi
c000ce79:	c1 e0 0a             	shl    eax,0xa
c000ce7c:	c1 ff 1f             	sar    edi,0x1f
c000ce7f:	57                   	push   edi
c000ce80:	56                   	push   esi
c000ce81:	52                   	push   edx
c000ce82:	50                   	push   eax
c000ce83:	e8 78 f3 00 00       	call   c001c200 <__udivdi3>
c000ce88:	eb 5a                	jmp    c000cee4 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000ce8a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000ce91:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000ce98:	83 e1 7f             	and    ecx,0x7f
c000ce9b:	83 e0 7f             	and    eax,0x7f
c000ce9e:	01 c1                	add    ecx,eax
c000cea0:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000cea7:	83 e0 7f             	and    eax,0x7f
c000ceaa:	01 c1                	add    ecx,eax
c000ceac:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000ceb3:	83 e0 7f             	and    eax,0x7f
c000ceb6:	00 c1                	add    cl,al
c000ceb8:	74 41                	je     c000cefb <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000ceba:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000cec0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000cec6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cecc:	83 ec 10             	sub    esp,0x10
c000cecf:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ced3:	89 f7                	mov    edi,esi
c000ced5:	c1 e0 0a             	shl    eax,0xa
c000ced8:	c1 ff 1f             	sar    edi,0x1f
c000cedb:	57                   	push   edi
c000cedc:	56                   	push   esi
c000cedd:	52                   	push   edx
c000cede:	50                   	push   eax
c000cedf:	e8 1c f3 00 00       	call   c001c200 <__udivdi3>
c000cee4:	83 c4 14             	add    esp,0x14
c000cee7:	52                   	push   edx
c000cee8:	50                   	push   eax
c000cee9:	6a 00                	push   0x0
c000ceeb:	6a 00                	push   0x0
c000ceed:	53                   	push   ebx
c000ceee:	e8 53 fe ff ff       	call   c000cd46 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000cef3:	83 c4 20             	add    esp,0x20
c000cef6:	e9 79 01 00 00       	jmp    c000d074 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000cefb:	89 f0                	mov    eax,esi
c000cefd:	31 f6                	xor    esi,esi
c000ceff:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000cf06:	75 02                	jne    c000cf0a <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000cf08:	89 f1                	mov    ecx,esi
c000cf0a:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000cf11:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000cf18:	c1 e2 08             	shl    edx,0x8
c000cf1b:	c1 e7 10             	shl    edi,0x10
c000cf1e:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000cf26:	09 fa                	or     edx,edi
c000cf28:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000cf30:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000cf37:	83 c0 10             	add    eax,0x10
c000cf3a:	09 fa                	or     edx,edi
c000cf3c:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000cf43:	c1 e7 18             	shl    edi,0x18
c000cf46:	09 fa                	or     edx,edi
c000cf48:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000cf4f:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000cf53:	c1 e7 10             	shl    edi,0x10
c000cf56:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000cf5d:	c1 e2 08             	shl    edx,0x8
c000cf60:	09 fa                	or     edx,edi
c000cf62:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000cf69:	09 fa                	or     edx,edi
c000cf6b:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000cf72:	c1 e7 18             	shl    edi,0x18
c000cf75:	09 fa                	or     edx,edi
c000cf77:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000cf7b:	46                   	inc    esi
c000cf7c:	83 fe 04             	cmp    esi,0x4
c000cf7f:	0f 85 7a ff ff ff    	jne    c000ceff <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000cf85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf89:	83 f0 01             	xor    eax,0x1
c000cf8c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000cf90:	75 57                	jne    c000cfe9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000cf92:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cf96:	83 f0 01             	xor    eax,0x1
c000cf99:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000cf9d:	75 4a                	jne    c000cfe9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000cf9f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000cfa3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000cfab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000cfb3:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000cfb9:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000cfbf:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cfc5:	0f a4 c2 0a          	shld   edx,eax,0xa
c000cfc9:	89 f7                	mov    edi,esi
c000cfcb:	c1 e0 0a             	shl    eax,0xa
c000cfce:	c1 ff 1f             	sar    edi,0x1f
c000cfd1:	57                   	push   edi
c000cfd2:	56                   	push   esi
c000cfd3:	52                   	push   edx
c000cfd4:	50                   	push   eax
c000cfd5:	e8 26 f2 00 00       	call   c001c200 <__udivdi3>
c000cfda:	83 c4 10             	add    esp,0x10
c000cfdd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cfe1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cfe5:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000cfe9:	84 c9                	test   cl,cl
c000cfeb:	74 53                	je     c000d040 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000cfed:	0f b6 c9             	movzx  ecx,cl
c000cff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cff4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cff8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000cffc:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d000:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d004:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d008:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000d00c:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000d010:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d014:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d018:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d01c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d020:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d024:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d028:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d02c:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d030:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d034:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d038:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d03c:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d040:	31 ed                	xor    ebp,ebp
c000d042:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d046:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d04a:	89 f8                	mov    eax,edi
c000d04c:	09 f0                	or     eax,esi
c000d04e:	74 1e                	je     c000d06e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d050:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d054:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d058:	89 d1                	mov    ecx,edx
c000d05a:	09 c1                	or     ecx,eax
c000d05c:	74 10                	je     c000d06e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d05e:	83 ec 0c             	sub    esp,0xc
c000d061:	57                   	push   edi
c000d062:	56                   	push   esi
c000d063:	52                   	push   edx
c000d064:	50                   	push   eax
c000d065:	53                   	push   ebx
c000d066:	e8 db fc ff ff       	call   c000cd46 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d06b:	83 c4 20             	add    esp,0x20
c000d06e:	45                   	inc    ebp
c000d06f:	83 fd 04             	cmp    ebp,0x4
c000d072:	75 ce                	jne    c000d042 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d074:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d07a:	5b                   	pop    ebx
c000d07b:	5e                   	pop    esi
c000d07c:	5f                   	pop    edi
c000d07d:	5d                   	pop    ebp
c000d07e:	c3                   	ret    
c000d07f:	90                   	nop

c000d080 <Serial::Serial(char const*)>:
c000d080:	83 ec 0c             	sub    esp,0xc
c000d083:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d087:	83 ec 08             	sub    esp,0x8
c000d08a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d08e:	50                   	push   eax
c000d08f:	e8 1c ea ff ff       	call   c000bab0 <Device::Device(char const*)>
c000d094:	83 c4 10             	add    esp,0x10
c000d097:	ba 78 e2 01 c0       	mov    edx,0xc001e278
c000d09c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0a0:	89 10                	mov    DWORD PTR [eax],edx
c000d0a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0a6:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d0b0:	90                   	nop
c000d0b1:	83 c4 0c             	add    esp,0xc
c000d0b4:	c3                   	ret    
c000d0b5:	90                   	nop
c000d0b6:	66 90                	xchg   ax,ax

c000d0b8 <Serial::~Serial()>:
c000d0b8:	83 ec 0c             	sub    esp,0xc
c000d0bb:	ba 78 e2 01 c0       	mov    edx,0xc001e278
c000d0c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0c4:	89 10                	mov    DWORD PTR [eax],edx
c000d0c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0ca:	83 ec 0c             	sub    esp,0xc
c000d0cd:	50                   	push   eax
c000d0ce:	e8 47 e7 ff ff       	call   c000b81a <Device::~Device()>
c000d0d3:	83 c4 10             	add    esp,0x10
c000d0d6:	90                   	nop
c000d0d7:	83 c4 0c             	add    esp,0xc
c000d0da:	c3                   	ret    
c000d0db:	90                   	nop

c000d0dc <Serial::~Serial()>:
c000d0dc:	83 ec 0c             	sub    esp,0xc
c000d0df:	83 ec 0c             	sub    esp,0xc
c000d0e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0e6:	e8 cd ff ff ff       	call   c000d0b8 <Serial::~Serial()>
c000d0eb:	83 c4 10             	add    esp,0x10
c000d0ee:	83 ec 08             	sub    esp,0x8
c000d0f1:	68 58 01 00 00       	push   0x158
c000d0f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0fa:	e8 e3 d2 ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	83 c4 0c             	add    esp,0xc
c000d105:	c3                   	ret    
c000d106:	66 90                	xchg   ax,ax

c000d108 <Timer::Timer(char const*)>:
c000d108:	83 ec 0c             	sub    esp,0xc
c000d10b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d10f:	83 ec 08             	sub    esp,0x8
c000d112:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d116:	50                   	push   eax
c000d117:	e8 94 e9 ff ff       	call   c000bab0 <Device::Device(char const*)>
c000d11c:	83 c4 10             	add    esp,0x10
c000d11f:	ba bc e2 01 c0       	mov    edx,0xc001e2bc
c000d124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d128:	89 10                	mov    DWORD PTR [eax],edx
c000d12a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d12e:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000d138:	90                   	nop
c000d139:	83 c4 0c             	add    esp,0xc
c000d13c:	c3                   	ret    
c000d13d:	90                   	nop
c000d13e:	66 90                	xchg   ax,ax

c000d140 <Timer::~Timer()>:
c000d140:	83 ec 0c             	sub    esp,0xc
c000d143:	ba bc e2 01 c0       	mov    edx,0xc001e2bc
c000d148:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d14c:	89 10                	mov    DWORD PTR [eax],edx
c000d14e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d152:	83 ec 0c             	sub    esp,0xc
c000d155:	50                   	push   eax
c000d156:	e8 bf e6 ff ff       	call   c000b81a <Device::~Device()>
c000d15b:	83 c4 10             	add    esp,0x10
c000d15e:	90                   	nop
c000d15f:	83 c4 0c             	add    esp,0xc
c000d162:	c3                   	ret    
c000d163:	90                   	nop

c000d164 <Timer::~Timer()>:
c000d164:	83 ec 0c             	sub    esp,0xc
c000d167:	83 ec 0c             	sub    esp,0xc
c000d16a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d16e:	e8 cd ff ff ff       	call   c000d140 <Timer::~Timer()>
c000d173:	83 c4 10             	add    esp,0x10
c000d176:	83 ec 08             	sub    esp,0x8
c000d179:	68 5c 01 00 00       	push   0x15c
c000d17e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d182:	e8 5b d2 ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000d187:	83 c4 10             	add    esp,0x10
c000d18a:	83 c4 0c             	add    esp,0xc
c000d18d:	c3                   	ret    

c000d18e <Timer::read()>:
c000d18e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d192:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d198:	c3                   	ret    

c000d199 <setupTimer(int)>:
c000d199:	53                   	push   ebx
c000d19a:	83 ec 14             	sub    esp,0x14
c000d19d:	68 5c 01 00 00       	push   0x15c
c000d1a2:	e8 12 a6 ff ff       	call   c00077b9 <malloc>
c000d1a7:	89 04 24             	mov    DWORD PTR [esp],eax
c000d1aa:	89 c3                	mov    ebx,eax
c000d1ac:	e8 bf e9 00 00       	call   c001bb70 <PIT::PIT()>
c000d1b1:	58                   	pop    eax
c000d1b2:	5a                   	pop    edx
c000d1b3:	53                   	push   ebx
c000d1b4:	ff 35 18 0d 02 c0    	push   DWORD PTR ds:0xc0020d18
c000d1ba:	e8 59 e7 ff ff       	call   c000b918 <Device::addChild(Device*)>
c000d1bf:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d1c1:	6a 00                	push   0x0
c000d1c3:	6a 00                	push   0x0
c000d1c5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d1c9:	53                   	push   ebx
c000d1ca:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d1cd:	89 d8                	mov    eax,ebx
c000d1cf:	83 c4 28             	add    esp,0x28
c000d1d2:	5b                   	pop    ebx
c000d1d3:	c3                   	ret    

c000d1d4 <timerHandler(unsigned int)>:
c000d1d4:	56                   	push   esi
c000d1d5:	53                   	push   ebx
c000d1d6:	51                   	push   ecx
c000d1d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1db:	01 05 ec 32 02 c0    	add    DWORD PTR ds:0xc00232ec,eax
c000d1e1:	80 3d 1d 0d 02 c0 00 	cmp    BYTE PTR ds:0xc0020d1d,0x0
c000d1e8:	0f 84 4a 01 00 00    	je     c000d338 <timerHandler(unsigned int)+0x164>
c000d1ee:	fa                   	cli    
c000d1ef:	ff 05 c8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fc8
c000d1f5:	83 ec 0c             	sub    esp,0xc
c000d1f8:	ff 05 c4 3f 02 c0    	inc    DWORD PTR ds:0xc0023fc4
c000d1fe:	68 d8 3f 02 c0       	push   0xc0023fd8
c000d203:	e8 c8 f5 00 00       	call   c001c7d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d208:	83 c4 10             	add    esp,0x10
c000d20b:	84 c0                	test   al,al
c000d20d:	0f 85 a1 00 00 00    	jne    c000d2b4 <timerHandler(unsigned int)+0xe0>
c000d213:	83 ec 0c             	sub    esp,0xc
c000d216:	68 d8 3f 02 c0       	push   0xc0023fd8
c000d21b:	e8 cc f5 00 00       	call   c001c7ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d220:	83 c4 10             	add    esp,0x10
c000d223:	89 c6                	mov    esi,eax
c000d225:	8d 76 00             	lea    esi,[esi+0x0]
c000d228:	83 ec 0c             	sub    esp,0xc
c000d22b:	68 d8 3f 02 c0       	push   0xc0023fd8
c000d230:	e8 b7 f5 00 00       	call   c001c7ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d235:	c7 04 24 d8 3f 02 c0 	mov    DWORD PTR [esp],0xc0023fd8
c000d23c:	89 c3                	mov    ebx,eax
c000d23e:	e8 b1 f5 00 00       	call   c001c7f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d243:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d246:	83 c4 10             	add    esp,0x10
c000d249:	3b 05 ec 32 02 c0    	cmp    eax,DWORD PTR ds:0xc00232ec
c000d24f:	77 23                	ja     c000d274 <timerHandler(unsigned int)+0xa0>
c000d251:	83 ec 0c             	sub    esp,0xc
c000d254:	53                   	push   ebx
c000d255:	e8 66 6b 00 00       	call   c0013dc0 <unblockTask(ThreadControlBlock*)>
c000d25a:	83 c4 10             	add    esp,0x10
c000d25d:	39 de                	cmp    esi,ebx
c000d25f:	75 27                	jne    c000d288 <timerHandler(unsigned int)+0xb4>
c000d261:	83 ec 0c             	sub    esp,0xc
c000d264:	68 d8 3f 02 c0       	push   0xc0023fd8
c000d269:	e8 7e f5 00 00       	call   c001c7ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d26e:	89 c6                	mov    esi,eax
c000d270:	eb 12                	jmp    c000d284 <timerHandler(unsigned int)+0xb0>
c000d272:	66 90                	xchg   ax,ax
c000d274:	52                   	push   edx
c000d275:	52                   	push   edx
c000d276:	53                   	push   ebx
c000d277:	68 d8 3f 02 c0       	push   0xc0023fd8
c000d27c:	e8 2b f6 00 00       	call   c001c8ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d281:	8d 76 00             	lea    esi,[esi+0x0]
c000d284:	83 c4 10             	add    esp,0x10
c000d287:	90                   	nop
c000d288:	83 ec 0c             	sub    esp,0xc
c000d28b:	68 d8 3f 02 c0       	push   0xc0023fd8
c000d290:	e8 3b f5 00 00       	call   c001c7d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d295:	83 c4 10             	add    esp,0x10
c000d298:	84 c0                	test   al,al
c000d29a:	75 18                	jne    c000d2b4 <timerHandler(unsigned int)+0xe0>
c000d29c:	83 ec 0c             	sub    esp,0xc
c000d29f:	68 d8 3f 02 c0       	push   0xc0023fd8
c000d2a4:	e8 43 f5 00 00       	call   c001c7ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d2a9:	83 c4 10             	add    esp,0x10
c000d2ac:	39 f0                	cmp    eax,esi
c000d2ae:	0f 85 74 ff ff ff    	jne    c000d228 <timerHandler(unsigned int)+0x54>
c000d2b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d2b9:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d2bd:	74 41                	je     c000d300 <timerHandler(unsigned int)+0x12c>
c000d2bf:	80 3d 1c 0d 02 c0 00 	cmp    BYTE PTR ds:0xc0020d1c,0x0
c000d2c6:	74 38                	je     c000d300 <timerHandler(unsigned int)+0x12c>
c000d2c8:	fa                   	cli    
c000d2c9:	ff 05 c8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fc8
c000d2cf:	a1 ec 32 02 c0       	mov    eax,ds:0xc00232ec
c000d2d4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d2da:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d2dd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d2e3:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d2e6:	72 08                	jb     c000d2f0 <timerHandler(unsigned int)+0x11c>
c000d2e8:	e8 0f 66 00 00       	call   c00138fc <schedule()>
c000d2ed:	8d 76 00             	lea    esi,[esi+0x0]
c000d2f0:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c000d2f5:	48                   	dec    eax
c000d2f6:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c000d2fb:	75 03                	jne    c000d300 <timerHandler(unsigned int)+0x12c>
c000d2fd:	fb                   	sti    
c000d2fe:	66 90                	xchg   ax,ax
c000d300:	a1 c4 3f 02 c0       	mov    eax,ds:0xc0023fc4
c000d305:	48                   	dec    eax
c000d306:	a3 c4 3f 02 c0       	mov    ds:0xc0023fc4,eax
c000d30b:	75 1b                	jne    c000d328 <timerHandler(unsigned int)+0x154>
c000d30d:	83 3d c0 3f 02 c0 00 	cmp    DWORD PTR ds:0xc0023fc0,0x0
c000d314:	74 12                	je     c000d328 <timerHandler(unsigned int)+0x154>
c000d316:	c7 05 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023fc0,0x0
c000d320:	e8 d7 65 00 00       	call   c00138fc <schedule()>
c000d325:	8d 76 00             	lea    esi,[esi+0x0]
c000d328:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c000d32d:	48                   	dec    eax
c000d32e:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c000d333:	75 03                	jne    c000d338 <timerHandler(unsigned int)+0x164>
c000d335:	fb                   	sti    
c000d336:	66 90                	xchg   ax,ax
c000d338:	58                   	pop    eax
c000d339:	5b                   	pop    ebx
c000d33a:	5e                   	pop    esi
c000d33b:	c3                   	ret    

c000d33c <VCache::VCache(PhysicalDisk*)>:
c000d33c:	53                   	push   ebx
c000d33d:	83 ec 18             	sub    esp,0x18
c000d340:	ba ec e2 01 c0       	mov    edx,0xc001e2ec
c000d345:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d349:	89 10                	mov    DWORD PTR [eax],edx
c000d34b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d34f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d356:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d35a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d361:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d365:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d36c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d373:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d377:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d37e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d385:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d389:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d390:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d394:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d398:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d39c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d3a3:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d3aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3ae:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d3b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3b6:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d3ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3be:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d3c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3c6:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d3cd:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000d3d5:	83 ec 0c             	sub    esp,0xc
c000d3d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d3dc:	e8 d8 a3 ff ff       	call   c00077b9 <malloc>
c000d3e1:	83 c4 10             	add    esp,0x10
c000d3e4:	89 c3                	mov    ebx,eax
c000d3e6:	83 ec 0c             	sub    esp,0xc
c000d3e9:	53                   	push   ebx
c000d3ea:	e8 d9 62 00 00       	call   c00136c8 <Mutex::Mutex()>
c000d3ef:	83 c4 10             	add    esp,0x10
c000d3f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000d3f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3fd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d401:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000d404:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d408:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000d40f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d413:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d419:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d41d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d420:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d424:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000d42a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000d430:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d434:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000d437:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000d43a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d43e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d442:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d446:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d44c:	05 00 01 00 00       	add    eax,0x100
c000d451:	c1 e0 04             	shl    eax,0x4
c000d454:	83 ec 0c             	sub    esp,0xc
c000d457:	50                   	push   eax
c000d458:	e8 5c a3 ff ff       	call   c00077b9 <malloc>
c000d45d:	83 c4 10             	add    esp,0x10
c000d460:	89 c2                	mov    edx,eax
c000d462:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d466:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d469:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d46d:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d474:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d478:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d47c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d480:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d486:	c1 e0 06             	shl    eax,0x6
c000d489:	83 ec 0c             	sub    esp,0xc
c000d48c:	50                   	push   eax
c000d48d:	e8 27 a3 ff ff       	call   c00077b9 <malloc>
c000d492:	83 c4 10             	add    esp,0x10
c000d495:	89 c2                	mov    edx,eax
c000d497:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d49b:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d49e:	90                   	nop
c000d49f:	83 c4 18             	add    esp,0x18
c000d4a2:	5b                   	pop    ebx
c000d4a3:	c3                   	ret    

c000d4a4 <VCache::invalidateReadBuffer()>:
c000d4a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d4a8:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000d4ae:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d4b2:	c3                   	ret    
c000d4b3:	90                   	nop

c000d4b4 <VCache::writeWriteBuffer()>:
c000d4b4:	53                   	push   ebx
c000d4b5:	83 ec 08             	sub    esp,0x8
c000d4b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d4bc:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d4c0:	74 1e                	je     c000d4e0 <VCache::writeWriteBuffer()+0x2c>
c000d4c2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d4c5:	83 ec 0c             	sub    esp,0xc
c000d4c8:	8b 10                	mov    edx,DWORD PTR [eax]
c000d4ca:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000d4cd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000d4d0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000d4d3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d4d6:	50                   	push   eax
c000d4d7:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000d4da:	83 c4 20             	add    esp,0x20
c000d4dd:	8d 76 00             	lea    esi,[esi+0x0]
c000d4e0:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d4e7:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000d4ee:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000d4f2:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000d4f9:	83 c4 08             	add    esp,0x8
c000d4fc:	5b                   	pop    ebx
c000d4fd:	c3                   	ret    
c000d4fe:	66 90                	xchg   ax,ax

c000d500 <VCache::~VCache()>:
c000d500:	83 ec 0c             	sub    esp,0xc
c000d503:	ba ec e2 01 c0       	mov    edx,0xc001e2ec
c000d508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d50c:	89 10                	mov    DWORD PTR [eax],edx
c000d50e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d512:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000d515:	84 c0                	test   al,al
c000d517:	74 0f                	je     c000d528 <VCache::~VCache()+0x28>
c000d519:	83 ec 0c             	sub    esp,0xc
c000d51c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d520:	e8 8f ff ff ff       	call   c000d4b4 <VCache::writeWriteBuffer()>
c000d525:	83 c4 10             	add    esp,0x10
c000d528:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d52c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d52f:	83 ec 0c             	sub    esp,0xc
c000d532:	50                   	push   eax
c000d533:	e8 91 a2 ff ff       	call   c00077c9 <free>
c000d538:	83 c4 10             	add    esp,0x10
c000d53b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d53f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000d542:	83 ec 0c             	sub    esp,0xc
c000d545:	50                   	push   eax
c000d546:	e8 7e a2 ff ff       	call   c00077c9 <free>
c000d54b:	83 c4 10             	add    esp,0x10
c000d54e:	90                   	nop
c000d54f:	83 c4 0c             	add    esp,0xc
c000d552:	c3                   	ret    
c000d553:	90                   	nop

c000d554 <VCache::~VCache()>:
c000d554:	83 ec 0c             	sub    esp,0xc
c000d557:	83 ec 0c             	sub    esp,0xc
c000d55a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d55e:	e8 9d ff ff ff       	call   c000d500 <VCache::~VCache()>
c000d563:	83 c4 10             	add    esp,0x10
c000d566:	83 ec 08             	sub    esp,0x8
c000d569:	6a 44                	push   0x44
c000d56b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d56f:	e8 6e ce ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000d574:	83 c4 10             	add    esp,0x10
c000d577:	83 c4 0c             	add    esp,0xc
c000d57a:	c3                   	ret    
c000d57b:	90                   	nop

c000d57c <VCache::write(unsigned long long, int, void*)>:
c000d57c:	55                   	push   ebp
c000d57d:	57                   	push   edi
c000d57e:	56                   	push   esi
c000d57f:	53                   	push   ebx
c000d580:	83 ec 1c             	sub    esp,0x1c
c000d583:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d587:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d58b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d58f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d593:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d597:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d59b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d59f:	31 c0                	xor    eax,eax
c000d5a1:	8d 76 00             	lea    esi,[esi+0x0]
c000d5a4:	39 e8                	cmp    eax,ebp
c000d5a6:	7d 18                	jge    c000d5c0 <VCache::write(unsigned long long, int, void*)+0x44>
c000d5a8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000d5ab:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000d5b1:	0f af c8             	imul   ecx,eax
c000d5b4:	89 ca                	mov    edx,ecx
c000d5b6:	01 f2                	add    edx,esi
c000d5b8:	8b 3a                	mov    edi,DWORD PTR [edx]
c000d5ba:	40                   	inc    eax
c000d5bb:	eb e7                	jmp    c000d5a4 <VCache::write(unsigned long long, int, void*)+0x28>
c000d5bd:	8d 76 00             	lea    esi,[esi+0x0]
c000d5c0:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000d5c4:	74 0a                	je     c000d5d0 <VCache::write(unsigned long long, int, void*)+0x54>
c000d5c6:	53                   	push   ebx
c000d5c7:	e8 d8 fe ff ff       	call   c000d4a4 <VCache::invalidateReadBuffer()>
c000d5cc:	58                   	pop    eax
c000d5cd:	8d 76 00             	lea    esi,[esi+0x0]
c000d5d0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d5d4:	74 5a                	je     c000d630 <VCache::write(unsigned long long, int, void*)+0xb4>
c000d5d6:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c000d5d9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d5dd:	89 f8                	mov    eax,edi
c000d5df:	99                   	cdq    
c000d5e0:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000d5e3:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000d5e6:	31 c1                	xor    ecx,eax
c000d5e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d5ec:	31 d0                	xor    eax,edx
c000d5ee:	09 c1                	or     ecx,eax
c000d5f0:	75 32                	jne    c000d624 <VCache::write(unsigned long long, int, void*)+0xa8>
c000d5f2:	83 fd 01             	cmp    ebp,0x1
c000d5f5:	75 2d                	jne    c000d624 <VCache::write(unsigned long long, int, void*)+0xa8>
c000d5f7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d5fa:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d600:	0f af f9             	imul   edi,ecx
c000d603:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000d606:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d608:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d60b:	40                   	inc    eax
c000d60c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000d60f:	83 f8 40             	cmp    eax,0x40
c000d612:	75 74                	jne    c000d688 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d614:	83 ec 0c             	sub    esp,0xc
c000d617:	53                   	push   ebx
c000d618:	e8 97 fe ff ff       	call   c000d4b4 <VCache::writeWriteBuffer()>
c000d61d:	83 c4 10             	add    esp,0x10
c000d620:	eb 66                	jmp    c000d688 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d622:	66 90                	xchg   ax,ax
c000d624:	83 ec 0c             	sub    esp,0xc
c000d627:	53                   	push   ebx
c000d628:	e8 87 fe ff ff       	call   c000d4b4 <VCache::writeWriteBuffer()>
c000d62d:	83 c4 10             	add    esp,0x10
c000d630:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d633:	83 fd 3f             	cmp    ebp,0x3f
c000d636:	7f 24                	jg     c000d65c <VCache::write(unsigned long long, int, void*)+0xe0>
c000d638:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d63c:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c000d63f:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000d642:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000d646:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d64a:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d64d:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000d650:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d656:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d658:	eb 2e                	jmp    c000d688 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d65a:	66 90                	xchg   ax,ax
c000d65c:	8b 10                	mov    edx,DWORD PTR [eax]
c000d65e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000d662:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d666:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000d66a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d66e:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d672:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d676:	89 74 24 38          	mov    DWORD PTR [esp+0x38],esi
c000d67a:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000d67d:	83 c4 1c             	add    esp,0x1c
c000d680:	5b                   	pop    ebx
c000d681:	5e                   	pop    esi
c000d682:	5f                   	pop    edi
c000d683:	5d                   	pop    ebp
c000d684:	ff e0                	jmp    eax
c000d686:	66 90                	xchg   ax,ax
c000d688:	83 c4 1c             	add    esp,0x1c
c000d68b:	31 c0                	xor    eax,eax
c000d68d:	5b                   	pop    ebx
c000d68e:	5e                   	pop    esi
c000d68f:	5f                   	pop    edi
c000d690:	5d                   	pop    ebp
c000d691:	c3                   	ret    

c000d692 <VCache::read(unsigned long long, int, void*)>:
c000d692:	55                   	push   ebp
c000d693:	57                   	push   edi
c000d694:	56                   	push   esi
c000d695:	53                   	push   ebx
c000d696:	83 ec 1c             	sub    esp,0x1c
c000d699:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d69d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d6a1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000d6a5:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d6a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d6ad:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000d6b1:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000d6b5:	74 0d                	je     c000d6c4 <VCache::read(unsigned long long, int, void*)+0x32>
c000d6b7:	83 ec 0c             	sub    esp,0xc
c000d6ba:	55                   	push   ebp
c000d6bb:	e8 f4 fd ff ff       	call   c000d4b4 <VCache::writeWriteBuffer()>
c000d6c0:	83 c4 10             	add    esp,0x10
c000d6c3:	90                   	nop
c000d6c4:	83 ec 0c             	sub    esp,0xc
c000d6c7:	55                   	push   ebp
c000d6c8:	e8 d7 fd ff ff       	call   c000d4a4 <VCache::invalidateReadBuffer()>
c000d6cd:	83 c4 0c             	add    esp,0xc
c000d6d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6d3:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c000d6d9:	6a 00                	push   0x0
c000d6db:	53                   	push   ebx
c000d6dc:	e8 ef 2d ff ff       	call   c00004d0 <memset>
c000d6e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6e4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000d6e8:	8b 10                	mov    edx,DWORD PTR [eax]
c000d6ea:	89 5c 24 50          	mov    DWORD PTR [esp+0x50],ebx
c000d6ee:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c000d6f2:	89 7c 24 48          	mov    DWORD PTR [esp+0x48],edi
c000d6f6:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
c000d6fa:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d6fe:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000d701:	83 c4 2c             	add    esp,0x2c
c000d704:	5b                   	pop    ebx
c000d705:	5e                   	pop    esi
c000d706:	5f                   	pop    edi
c000d707:	5d                   	pop    ebp
c000d708:	ff e0                	jmp    eax

c000d70a <Video::putrect(int, int, int, int, unsigned int)>:
c000d70a:	55                   	push   ebp
c000d70b:	57                   	push   edi
c000d70c:	56                   	push   esi
c000d70d:	53                   	push   ebx
c000d70e:	83 ec 1c             	sub    esp,0x1c
c000d711:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000d715:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d719:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000d71d:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000d721:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d725:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d729:	01 df                	add    edi,ebx
c000d72b:	39 fb                	cmp    ebx,edi
c000d72d:	7d 1f                	jge    c000d74e <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000d72f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d733:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000d737:	7d 12                	jge    c000d74b <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000d739:	8b 16                	mov    edx,DWORD PTR [esi]
c000d73b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d73f:	53                   	push   ebx
c000d740:	55                   	push   ebp
c000d741:	45                   	inc    ebp
c000d742:	56                   	push   esi
c000d743:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d746:	83 c4 10             	add    esp,0x10
c000d749:	eb e8                	jmp    c000d733 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000d74b:	43                   	inc    ebx
c000d74c:	eb dd                	jmp    c000d72b <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000d74e:	83 c4 1c             	add    esp,0x1c
c000d751:	5b                   	pop    ebx
c000d752:	5e                   	pop    esi
c000d753:	5f                   	pop    edi
c000d754:	5d                   	pop    ebp
c000d755:	c3                   	ret    

c000d756 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000d756:	55                   	push   ebp
c000d757:	57                   	push   edi
c000d758:	31 ff                	xor    edi,edi
c000d75a:	56                   	push   esi
c000d75b:	53                   	push   ebx
c000d75c:	83 ec 1c             	sub    esp,0x1c
c000d75f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000d763:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d767:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000d76e:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000d773:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d777:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000d77b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d77f:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000d782:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d786:	01 f9                	add    ecx,edi
c000d788:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000d78c:	7d 2f                	jge    c000d7bd <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000d78e:	31 f6                	xor    esi,esi
c000d790:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d794:	01 f2                	add    edx,esi
c000d796:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000d79a:	7d 1a                	jge    c000d7b6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000d79c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d79f:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000d7a2:	46                   	inc    esi
c000d7a3:	51                   	push   ecx
c000d7a4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d7a8:	52                   	push   edx
c000d7a9:	55                   	push   ebp
c000d7aa:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d7ad:	83 c4 10             	add    esp,0x10
c000d7b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d7b4:	eb da                	jmp    c000d790 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000d7b6:	47                   	inc    edi
c000d7b7:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000d7bb:	eb c5                	jmp    c000d782 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000d7bd:	83 c4 1c             	add    esp,0x1c
c000d7c0:	5b                   	pop    ebx
c000d7c1:	5e                   	pop    esi
c000d7c2:	5f                   	pop    edi
c000d7c3:	5d                   	pop    ebp
c000d7c4:	c3                   	ret    
c000d7c5:	90                   	nop

c000d7c6 <Video::blit(unsigned int*, int, int, int, int)>:
c000d7c6:	55                   	push   ebp
c000d7c7:	57                   	push   edi
c000d7c8:	56                   	push   esi
c000d7c9:	53                   	push   ebx
c000d7ca:	83 ec 1c             	sub    esp,0x1c
c000d7cd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d7d1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d7d5:	85 c0                	test   eax,eax
c000d7d7:	79 02                	jns    c000d7db <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000d7d9:	31 c0                	xor    eax,eax
c000d7db:	c1 e0 02             	shl    eax,0x2
c000d7de:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000d7e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d7e6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d7ea:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000d7ee:	39 d8                	cmp    eax,ebx
c000d7f0:	7e 49                	jle    c000d83b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d7f2:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d7f8:	7c 41                	jl     c000d83b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d7fa:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d7fe:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d802:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d806:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000d80a:	39 f9                	cmp    ecx,edi
c000d80c:	7e 22                	jle    c000d830 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000d80e:	83 c5 04             	add    ebp,0x4
c000d811:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d817:	7c 14                	jl     c000d82d <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000d819:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d81b:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000d81e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d822:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d826:	56                   	push   esi
c000d827:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000d82a:	83 c4 10             	add    esp,0x10
c000d82d:	47                   	inc    edi
c000d82e:	eb d2                	jmp    c000d802 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000d830:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d834:	43                   	inc    ebx
c000d835:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000d839:	eb ab                	jmp    c000d7e6 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000d83b:	83 c4 1c             	add    esp,0x1c
c000d83e:	5b                   	pop    ebx
c000d83f:	5e                   	pop    esi
c000d840:	5f                   	pop    edi
c000d841:	5d                   	pop    ebp
c000d842:	c3                   	ret    
c000d843:	90                   	nop

c000d844 <Video::clearScreen(unsigned int)>:
c000d844:	57                   	push   edi
c000d845:	56                   	push   esi
c000d846:	53                   	push   ebx
c000d847:	31 db                	xor    ebx,ebx
c000d849:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d84d:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d853:	7e 1f                	jle    c000d874 <Video::clearScreen(unsigned int)+0x30>
c000d855:	31 ff                	xor    edi,edi
c000d857:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d85d:	7e 12                	jle    c000d871 <Video::clearScreen(unsigned int)+0x2d>
c000d85f:	8b 06                	mov    eax,DWORD PTR [esi]
c000d861:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d865:	53                   	push   ebx
c000d866:	57                   	push   edi
c000d867:	47                   	inc    edi
c000d868:	56                   	push   esi
c000d869:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d86c:	83 c4 10             	add    esp,0x10
c000d86f:	eb e6                	jmp    c000d857 <Video::clearScreen(unsigned int)+0x13>
c000d871:	43                   	inc    ebx
c000d872:	eb d9                	jmp    c000d84d <Video::clearScreen(unsigned int)+0x9>
c000d874:	5b                   	pop    ebx
c000d875:	5e                   	pop    esi
c000d876:	5f                   	pop    edi
c000d877:	c3                   	ret    

c000d878 <Video::putpixel(int, int, unsigned int)>:
c000d878:	c7 44 24 04 f4 e2 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e2f4
c000d880:	e9 be 28 00 00       	jmp    c0010143 <KePanic(char const*)>
c000d885:	90                   	nop

c000d886 <Video::Video(char const*)>:
c000d886:	83 ec 0c             	sub    esp,0xc
c000d889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d88d:	83 ec 08             	sub    esp,0x8
c000d890:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d894:	50                   	push   eax
c000d895:	e8 16 e2 ff ff       	call   c000bab0 <Device::Device(char const*)>
c000d89a:	83 c4 10             	add    esp,0x10
c000d89d:	ba 64 e3 01 c0       	mov    edx,0xc001e364
c000d8a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a6:	89 10                	mov    DWORD PTR [eax],edx
c000d8a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8ac:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000d8b6:	90                   	nop
c000d8b7:	83 c4 0c             	add    esp,0xc
c000d8ba:	c3                   	ret    
c000d8bb:	90                   	nop

c000d8bc <Video::~Video()>:
c000d8bc:	83 ec 0c             	sub    esp,0xc
c000d8bf:	ba 64 e3 01 c0       	mov    edx,0xc001e364
c000d8c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8c8:	89 10                	mov    DWORD PTR [eax],edx
c000d8ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8ce:	83 ec 0c             	sub    esp,0xc
c000d8d1:	50                   	push   eax
c000d8d2:	e8 43 df ff ff       	call   c000b81a <Device::~Device()>
c000d8d7:	83 c4 10             	add    esp,0x10
c000d8da:	90                   	nop
c000d8db:	83 c4 0c             	add    esp,0xc
c000d8de:	c3                   	ret    
c000d8df:	90                   	nop

c000d8e0 <Video::~Video()>:
c000d8e0:	83 ec 0c             	sub    esp,0xc
c000d8e3:	83 ec 0c             	sub    esp,0xc
c000d8e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8ea:	e8 cd ff ff ff       	call   c000d8bc <Video::~Video()>
c000d8ef:	83 c4 10             	add    esp,0x10
c000d8f2:	83 ec 08             	sub    esp,0x8
c000d8f5:	68 64 01 00 00       	push   0x164
c000d8fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8fe:	e8 df ca ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c000d903:	83 c4 10             	add    esp,0x10
c000d906:	83 c4 0c             	add    esp,0xc
c000d909:	c3                   	ret    

c000d90a <Video::isMonochrome()>:
c000d90a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d90e:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000d914:	c3                   	ret    
c000d915:	90                   	nop

c000d916 <Video::getWidth()>:
c000d916:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d91a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d920:	c3                   	ret    
c000d921:	90                   	nop

c000d922 <Video::getHeight()>:
c000d922:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d926:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d92c:	c3                   	ret    
c000d92d:	90                   	nop

c000d92e <Video::drawCursor(int, int, unsigned char*, int)>:
c000d92e:	55                   	push   ebp
c000d92f:	57                   	push   edi
c000d930:	56                   	push   esi
c000d931:	53                   	push   ebx
c000d932:	83 ec 2c             	sub    esp,0x2c
c000d935:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d939:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d93d:	83 f8 01             	cmp    eax,0x1
c000d940:	19 c9                	sbb    ecx,ecx
c000d942:	31 db                	xor    ebx,ebx
c000d944:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000d948:	89 cd                	mov    ebp,ecx
c000d94a:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000d952:	f7 d5                	not    ebp
c000d954:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000d95a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000d95e:	01 d8                	add    eax,ebx
c000d960:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d964:	56                   	push   esi
c000d965:	e8 b8 ff ff ff       	call   c000d922 <Video::getHeight()>
c000d96a:	59                   	pop    ecx
c000d96b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d96f:	7e 70                	jle    c000d9e1 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000d971:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d975:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000d979:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000d97c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d980:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d984:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000d98b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d98f:	89 f8                	mov    eax,edi
c000d991:	83 c0 20             	add    eax,0x20
c000d994:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d998:	56                   	push   esi
c000d999:	e8 78 ff ff ff       	call   c000d916 <Video::getWidth()>
c000d99e:	5a                   	pop    edx
c000d99f:	39 c7                	cmp    edi,eax
c000d9a1:	7d 34                	jge    c000d9d7 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000d9a3:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000d9a8:	74 05                	je     c000d9af <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000d9aa:	8b 06                	mov    eax,DWORD PTR [esi]
c000d9ac:	55                   	push   ebp
c000d9ad:	eb 0d                	jmp    c000d9bc <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000d9af:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000d9b4:	74 12                	je     c000d9c8 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000d9b6:	8b 06                	mov    eax,DWORD PTR [esi]
c000d9b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d9bc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d9c0:	57                   	push   edi
c000d9c1:	56                   	push   esi
c000d9c2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d9c5:	83 c4 10             	add    esp,0x10
c000d9c8:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000d9cc:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000d9d0:	47                   	inc    edi
c000d9d1:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000d9d5:	75 c1                	jne    c000d998 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000d9d7:	43                   	inc    ebx
c000d9d8:	83 fb 20             	cmp    ebx,0x20
c000d9db:	0f 85 79 ff ff ff    	jne    c000d95a <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000d9e1:	83 c4 2c             	add    esp,0x2c
c000d9e4:	5b                   	pop    ebx
c000d9e5:	5e                   	pop    esi
c000d9e6:	5f                   	pop    edi
c000d9e7:	5d                   	pop    ebp
c000d9e8:	c3                   	ret    
c000d9e9:	90                   	nop

c000d9ea <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000d9ea:	55                   	push   ebp
c000d9eb:	57                   	push   edi
c000d9ec:	56                   	push   esi
c000d9ed:	53                   	push   ebx
c000d9ee:	83 ec 28             	sub    esp,0x28
c000d9f1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000d9f5:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000d9f9:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000d9fd:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000da01:	c1 e6 08             	shl    esi,0x8
c000da04:	01 c6                	add    esi,eax
c000da06:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000da0a:	c1 e0 08             	shl    eax,0x8
c000da0d:	01 d0                	add    eax,edx
c000da0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000da13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000da17:	0f af c6             	imul   eax,esi
c000da1a:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000da21:	50                   	push   eax
c000da22:	e8 92 9d ff ff       	call   c00077b9 <malloc>
c000da27:	83 c4 10             	add    esp,0x10
c000da2a:	89 c7                	mov    edi,eax
c000da2c:	85 c0                	test   eax,eax
c000da2e:	75 10                	jne    c000da40 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000da30:	83 ec 0c             	sub    esp,0xc
c000da33:	68 15 e3 01 c0       	push   0xc001e315
c000da38:	e8 06 27 00 00       	call   c0010143 <KePanic(char const*)>
c000da3d:	83 c4 10             	add    esp,0x10
c000da40:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000da43:	ba 12 00 00 00       	mov    edx,0x12
c000da48:	84 c0                	test   al,al
c000da4a:	74 11                	je     c000da5d <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000da4c:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000da50:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000da54:	c1 fa 03             	sar    edx,0x3
c000da57:	0f af d1             	imul   edx,ecx
c000da5a:	83 c2 12             	add    edx,0x12
c000da5d:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000da61:	74 04                	je     c000da67 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000da63:	85 f6                	test   esi,esi
c000da65:	75 12                	jne    c000da79 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000da67:	83 ec 0c             	sub    esp,0xc
c000da6a:	68 25 e3 01 c0       	push   0xc001e325
c000da6f:	e8 64 ca ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000da74:	e9 b8 00 00 00       	jmp    c000db31 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000da79:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000da7d:	80 f9 02             	cmp    cl,0x2
c000da80:	0f 85 96 00 00 00    	jne    c000db1c <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000da86:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000da8b:	75 0e                	jne    c000da9b <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000da8d:	84 c0                	test   al,al
c000da8f:	75 0a                	jne    c000da9b <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000da91:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000da94:	83 e8 18             	sub    eax,0x18
c000da97:	a8 f7                	test   al,0xf7
c000da99:	74 0a                	je     c000daa5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000da9b:	83 ec 0c             	sub    esp,0xc
c000da9e:	68 3a e3 01 c0       	push   0xc001e33a
c000daa3:	eb 7f                	jmp    c000db24 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000daa5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000daad:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000dab5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000dab9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dac1:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000dac5:	75 0c                	jne    c000dad3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000dac7:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000dacc:	c1 e0 18             	shl    eax,0x18
c000dacf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dad3:	45                   	inc    ebp
c000dad4:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000dad9:	c1 e1 10             	shl    ecx,0x10
c000dadc:	89 c8                	mov    eax,ecx
c000dade:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000dae3:	c1 e1 08             	shl    ecx,0x8
c000dae6:	09 c1                	or     ecx,eax
c000dae8:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000daec:	09 c1                	or     ecx,eax
c000daee:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000daf2:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000daf6:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000dafa:	c1 f8 03             	sar    eax,0x3
c000dafd:	01 c2                	add    edx,eax
c000daff:	89 e8                	mov    eax,ebp
c000db01:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000db05:	39 c6                	cmp    esi,eax
c000db07:	7f b0                	jg     c000dab9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000db09:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000db0d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000db11:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000db14:	7e 22                	jle    c000db38 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000db16:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000db1a:	eb 99                	jmp    c000dab5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000db1c:	50                   	push   eax
c000db1d:	50                   	push   eax
c000db1e:	51                   	push   ecx
c000db1f:	68 48 e3 01 c0       	push   0xc001e348
c000db24:	e8 af c9 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000db29:	89 3c 24             	mov    DWORD PTR [esp],edi
c000db2c:	e8 98 9c ff ff       	call   c00077c9 <free>
c000db31:	83 c4 10             	add    esp,0x10
c000db34:	31 ff                	xor    edi,edi
c000db36:	eb 0f                	jmp    c000db47 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000db38:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000db3c:	89 30                	mov    DWORD PTR [eax],esi
c000db3e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000db42:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000db45:	89 30                	mov    DWORD PTR [eax],esi
c000db47:	83 c4 1c             	add    esp,0x1c
c000db4a:	89 f8                	mov    eax,edi
c000db4c:	5b                   	pop    ebx
c000db4d:	5e                   	pop    esi
c000db4e:	5f                   	pop    edi
c000db4f:	5d                   	pop    ebp
c000db50:	c3                   	ret    
c000db51:	90                   	nop

c000db52 <Video::putTGA(int, int, unsigned char*, int)>:
c000db52:	55                   	push   ebp
c000db53:	57                   	push   edi
c000db54:	56                   	push   esi
c000db55:	53                   	push   ebx
c000db56:	83 ec 28             	sub    esp,0x28
c000db59:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000db5d:	8d 44 24 18          	lea    eax,[esp+0x18]
c000db61:	50                   	push   eax
c000db62:	8d 44 24 18          	lea    eax,[esp+0x18]
c000db66:	50                   	push   eax
c000db67:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000db6b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000db6f:	56                   	push   esi
c000db70:	e8 75 fe ff ff       	call   c000d9ea <Video::tgaParse(unsigned char*, int, int*, int*)>
c000db75:	83 c4 20             	add    esp,0x20
c000db78:	85 c0                	test   eax,eax
c000db7a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000db7e:	74 35                	je     c000dbb5 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000db80:	89 c7                	mov    edi,eax
c000db82:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000db86:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000db8a:	39 d8                	cmp    eax,ebx
c000db8c:	7e 27                	jle    c000dbb5 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000db8e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000db92:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000db96:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000db9a:	39 e8                	cmp    eax,ebp
c000db9c:	7e 14                	jle    c000dbb2 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000db9e:	8b 06                	mov    eax,DWORD PTR [esi]
c000dba0:	83 c7 04             	add    edi,0x4
c000dba3:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000dba6:	53                   	push   ebx
c000dba7:	55                   	push   ebp
c000dba8:	45                   	inc    ebp
c000dba9:	56                   	push   esi
c000dbaa:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dbad:	83 c4 10             	add    esp,0x10
c000dbb0:	eb e0                	jmp    c000db92 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000dbb2:	43                   	inc    ebx
c000dbb3:	eb cd                	jmp    c000db82 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000dbb5:	83 c4 1c             	add    esp,0x1c
c000dbb8:	5b                   	pop    ebx
c000dbb9:	5e                   	pop    esi
c000dbba:	5f                   	pop    edi
c000dbbb:	5d                   	pop    ebp
c000dbbc:	c3                   	ret    
c000dbbd:	66 90                	xchg   ax,ax
c000dbbf:	90                   	nop

c000dbc0 <ACPI::close(int, int, void*)>:
c000dbc0:	83 ec 1c             	sub    esp,0x1c
c000dbc3:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000dbcb:	74 0b                	je     c000dbd8 <ACPI::close(int, int, void*)+0x18>
c000dbcd:	b8 00 00 00 00       	mov    eax,0x0
c000dbd2:	e9 9d 00 00 00       	jmp    c000dc74 <ACPI::close(int, int, void*)+0xb4>
c000dbd7:	90                   	nop
c000dbd8:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000dbdd:	75 29                	jne    c000dc08 <ACPI::close(int, int, void*)+0x48>
c000dbdf:	a1 08 33 02 c0       	mov    eax,ds:0xc0023308
c000dbe4:	85 c0                	test   eax,eax
c000dbe6:	74 08                	je     c000dbf0 <ACPI::close(int, int, void*)+0x30>
c000dbe8:	a1 08 33 02 c0       	mov    eax,ds:0xc0023308
c000dbed:	ff d0                	call   eax
c000dbef:	90                   	nop
c000dbf0:	83 ec 0c             	sub    esp,0xc
c000dbf3:	68 a4 e3 01 c0       	push   0xc001e3a4
c000dbf8:	e8 46 25 00 00       	call   c0010143 <KePanic(char const*)>
c000dbfd:	83 c4 10             	add    esp,0x10
c000dc00:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dc05:	eb 6d                	jmp    c000dc74 <ACPI::close(int, int, void*)+0xb4>
c000dc07:	90                   	nop
c000dc08:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000dc0d:	75 5d                	jne    c000dc6c <ACPI::close(int, int, void*)+0xac>
c000dc0f:	a1 04 33 02 c0       	mov    eax,ds:0xc0023304
c000dc14:	85 c0                	test   eax,eax
c000dc16:	74 08                	je     c000dc20 <ACPI::close(int, int, void*)+0x60>
c000dc18:	a1 04 33 02 c0       	mov    eax,ds:0xc0023304
c000dc1d:	ff d0                	call   eax
c000dc1f:	90                   	nop
c000dc20:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000dc25:	8d 76 00             	lea    esi,[esi+0x0]
c000dc28:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000dc2c:	25 ff 00 00 00       	and    eax,0xff
c000dc31:	83 e0 02             	and    eax,0x2
c000dc34:	74 1e                	je     c000dc54 <ACPI::close(int, int, void*)+0x94>
c000dc36:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000dc3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dc41:	89 c2                	mov    edx,eax
c000dc43:	ec                   	in     al,dx
c000dc44:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000dc48:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000dc4c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000dc50:	eb d6                	jmp    c000dc28 <ACPI::close(int, int, void*)+0x68>
c000dc52:	66 90                	xchg   ax,ax
c000dc54:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000dc5b:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000dc60:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000dc64:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dc68:	ee                   	out    dx,al
c000dc69:	8d 76 00             	lea    esi,[esi+0x0]
c000dc6c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dc71:	8d 76 00             	lea    esi,[esi+0x0]
c000dc74:	83 c4 1c             	add    esp,0x1c
c000dc77:	c3                   	ret    

c000dc78 <findRSDP()>:
c000dc78:	83 ec 1c             	sub    esp,0x1c
c000dc7b:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c000dc80:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dc86:	83 e0 04             	and    eax,0x4
c000dc89:	84 c0                	test   al,al
c000dc8b:	75 07                	jne    c000dc94 <findRSDP()+0x1c>
c000dc8d:	b8 00 00 00 00       	mov    eax,0x0
c000dc92:	eb 70                	jmp    c000dd04 <findRSDP()+0x8c>
c000dc94:	a1 48 0d 02 c0       	mov    eax,ds:0xc0020d48
c000dc99:	3d ff 07 00 00       	cmp    eax,0x7ff
c000dc9e:	7f 1c                	jg     c000dcbc <findRSDP()+0x44>
c000dca0:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c000dca5:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000dcab:	83 e2 fb             	and    edx,0xfffffffb
c000dcae:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000dcb4:	b8 00 00 00 00       	mov    eax,0x0
c000dcb9:	eb 49                	jmp    c000dd04 <findRSDP()+0x8c>
c000dcbb:	90                   	nop
c000dcbc:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000dcc4:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000dccc:	77 2e                	ja     c000dcfc <findRSDP()+0x84>
c000dcce:	83 ec 04             	sub    esp,0x4
c000dcd1:	6a 08                	push   0x8
c000dcd3:	68 3f e4 01 c0       	push   0xc001e43f
c000dcd8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dcdc:	e8 af 26 ff ff       	call   c0000390 <memcmp>
c000dce1:	83 c4 10             	add    esp,0x10
c000dce4:	85 c0                	test   eax,eax
c000dce6:	0f 94 c0             	sete   al
c000dce9:	84 c0                	test   al,al
c000dceb:	74 07                	je     c000dcf4 <findRSDP()+0x7c>
c000dced:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dcf1:	eb 11                	jmp    c000dd04 <findRSDP()+0x8c>
c000dcf3:	90                   	nop
c000dcf4:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000dcf9:	eb c9                	jmp    c000dcc4 <findRSDP()+0x4c>
c000dcfb:	90                   	nop
c000dcfc:	b8 00 00 00 00       	mov    eax,0x0
c000dd01:	8d 76 00             	lea    esi,[esi+0x0]
c000dd04:	83 c4 1c             	add    esp,0x1c
c000dd07:	c3                   	ret    

c000dd08 <loadACPITables(unsigned char*)>:
c000dd08:	57                   	push   edi
c000dd09:	56                   	push   esi
c000dd0a:	53                   	push   ebx
c000dd0b:	83 ec 60             	sub    esp,0x60
c000dd0e:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c000dd13:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dd19:	83 e0 04             	and    eax,0x4
c000dd1c:	84 c0                	test   al,al
c000dd1e:	0f 84 3c 02 00 00    	je     c000df60 <loadACPITables(unsigned char*)+0x258>
c000dd24:	a0 20 35 02 c0       	mov    al,ds:0xc0023520
c000dd29:	84 c0                	test   al,al
c000dd2b:	74 77                	je     c000dda4 <loadACPITables(unsigned char*)+0x9c>
c000dd2d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dd31:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000dd35:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dd39:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dd3c:	83 e8 24             	sub    eax,0x24
c000dd3f:	c1 e8 03             	shr    eax,0x3
c000dd42:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000dd46:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000dd4e:	66 90                	xchg   ax,ax
c000dd50:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000dd54:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000dd58:	0f 8d b6 00 00 00    	jge    c000de14 <loadACPITables(unsigned char*)+0x10c>
c000dd5e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dd62:	83 c0 24             	add    eax,0x24
c000dd65:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dd69:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000dd6d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000dd71:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000dd75:	c1 e0 03             	shl    eax,0x3
c000dd78:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000dd7c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000dd80:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000dd83:	8b 00                	mov    eax,DWORD PTR [eax]
c000dd85:	89 c1                	mov    ecx,eax
c000dd87:	a1 0c 33 02 c0       	mov    eax,ds:0xc002330c
c000dd8c:	8d 50 01             	lea    edx,[eax+0x1]
c000dd8f:	89 15 0c 33 02 c0    	mov    DWORD PTR ds:0xc002330c,edx
c000dd95:	89 ca                	mov    edx,ecx
c000dd97:	89 14 c5 24 33 02 c0 	mov    DWORD PTR [eax*8-0x3ffdccdc],edx
c000dd9e:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000dda2:	eb ac                	jmp    c000dd50 <loadACPITables(unsigned char*)+0x48>
c000dda4:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dda8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ddac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ddb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ddb3:	83 e8 24             	sub    eax,0x24
c000ddb6:	c1 e8 02             	shr    eax,0x2
c000ddb9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ddbd:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000ddc5:	8d 76 00             	lea    esi,[esi+0x0]
c000ddc8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ddcc:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000ddd0:	7d 42                	jge    c000de14 <loadACPITables(unsigned char*)+0x10c>
c000ddd2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ddd6:	83 c0 24             	add    eax,0x24
c000ddd9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dddd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dde1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000dde5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000dde9:	c1 e0 02             	shl    eax,0x2
c000ddec:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000ddf0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ddf4:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ddf6:	a1 0c 33 02 c0       	mov    eax,ds:0xc002330c
c000ddfb:	8d 50 01             	lea    edx,[eax+0x1]
c000ddfe:	89 15 0c 33 02 c0    	mov    DWORD PTR ds:0xc002330c,edx
c000de04:	89 ca                	mov    edx,ecx
c000de06:	89 14 c5 24 33 02 c0 	mov    DWORD PTR [eax*8-0x3ffdccdc],edx
c000de0d:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000de11:	eb b5                	jmp    c000ddc8 <loadACPITables(unsigned char*)+0xc0>
c000de13:	90                   	nop
c000de14:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000de1c:	a1 0c 33 02 c0       	mov    eax,ds:0xc002330c
c000de21:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000de25:	0f 8d 39 01 00 00    	jge    c000df64 <loadACPITables(unsigned char*)+0x25c>
c000de2b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000de2f:	8b 04 c5 24 33 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdccdc]
c000de36:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000de3a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de3e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000de42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de46:	25 ff 0f 00 00       	and    eax,0xfff
c000de4b:	89 c6                	mov    esi,eax
c000de4d:	8b 1d 10 0e 02 c0    	mov    ebx,DWORD PTR ds:0xc0020e10
c000de53:	83 ec 0c             	sub    esp,0xc
c000de56:	6a 01                	push   0x1
c000de58:	e8 28 b4 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000de5d:	83 c4 10             	add    esp,0x10
c000de60:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000de64:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000de6a:	83 ec 0c             	sub    esp,0xc
c000de6d:	6a 01                	push   0x1
c000de6f:	6a 01                	push   0x1
c000de71:	50                   	push   eax
c000de72:	52                   	push   edx
c000de73:	53                   	push   ebx
c000de74:	e8 9b bd ff ff       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000de79:	83 c4 20             	add    esp,0x20
c000de7c:	09 f0                	or     eax,esi
c000de7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000de82:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000de86:	c1 e0 03             	shl    eax,0x3
c000de89:	05 20 33 02 c0       	add    eax,0xc0023320
c000de8e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000de92:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de96:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de9a:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000dea2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dea6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000deaa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000deae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000deb2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000deb6:	89 c6                	mov    esi,eax
c000deb8:	89 d7                	mov    edi,edx
c000deba:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000debc:	89 c8                	mov    eax,ecx
c000debe:	89 fa                	mov    edx,edi
c000dec0:	89 f3                	mov    ebx,esi
c000dec2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000dec6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000deca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dece:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ded2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ded5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ded9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000dedd:	05 00 10 00 00       	add    eax,0x1000
c000dee2:	c1 e8 0c             	shr    eax,0xc
c000dee5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000dee9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000deed:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000def1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000def5:	25 ff 0f 00 00       	and    eax,0xfff
c000defa:	89 c6                	mov    esi,eax
c000defc:	8b 1d 10 0e 02 c0    	mov    ebx,DWORD PTR ds:0xc0020e10
c000df02:	83 ec 0c             	sub    esp,0xc
c000df05:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000df09:	e8 77 b3 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000df0e:	83 c4 10             	add    esp,0x10
c000df11:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000df15:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000df1b:	83 ec 0c             	sub    esp,0xc
c000df1e:	6a 01                	push   0x1
c000df20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000df24:	50                   	push   eax
c000df25:	52                   	push   edx
c000df26:	53                   	push   ebx
c000df27:	e8 e8 bc ff ff       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000df2c:	83 c4 20             	add    esp,0x20
c000df2f:	09 f0                	or     eax,esi
c000df31:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000df35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df39:	83 ec 0c             	sub    esp,0xc
c000df3c:	50                   	push   eax
c000df3d:	e8 73 b6 ff ff       	call   c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>
c000df42:	83 c4 10             	add    esp,0x10
c000df45:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000df49:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000df4d:	89 14 c5 24 33 02 c0 	mov    DWORD PTR [eax*8-0x3ffdccdc],edx
c000df54:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000df58:	e9 bf fe ff ff       	jmp    c000de1c <loadACPITables(unsigned char*)+0x114>
c000df5d:	8d 76 00             	lea    esi,[esi+0x0]
c000df60:	90                   	nop
c000df61:	8d 76 00             	lea    esi,[esi+0x0]
c000df64:	83 c4 60             	add    esp,0x60
c000df67:	5b                   	pop    ebx
c000df68:	5e                   	pop    esi
c000df69:	5f                   	pop    edi
c000df6a:	c3                   	ret    
c000df6b:	90                   	nop

c000df6c <findRSDT(unsigned char*)>:
c000df6c:	57                   	push   edi
c000df6d:	56                   	push   esi
c000df6e:	53                   	push   ebx
c000df6f:	83 ec 50             	sub    esp,0x50
c000df72:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c000df77:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000df7d:	83 e0 04             	and    eax,0x4
c000df80:	84 c0                	test   al,al
c000df82:	75 0c                	jne    c000df90 <findRSDT(unsigned char*)+0x24>
c000df84:	b8 00 00 00 00       	mov    eax,0x0
c000df89:	e9 26 01 00 00       	jmp    c000e0b4 <findRSDT(unsigned char*)+0x148>
c000df8e:	66 90                	xchg   ax,ax
c000df90:	89 e0                	mov    eax,esp
c000df92:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000df96:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000df9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000df9e:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000dfa6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000dfaa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dfae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dfb2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000dfb6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000dfba:	89 c6                	mov    esi,eax
c000dfbc:	89 d7                	mov    edi,edx
c000dfbe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dfc0:	89 c8                	mov    eax,ecx
c000dfc2:	89 fa                	mov    edx,edi
c000dfc4:	89 f3                	mov    ebx,esi
c000dfc6:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000dfca:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000dfce:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000dfd2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000dfd6:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000dfda:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000dfe2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dfe6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000dfea:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000dfee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dff2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dff6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000dffa:	25 ff 0f 00 00       	and    eax,0xfff
c000dfff:	89 c6                	mov    esi,eax
c000e001:	8b 1d 10 0e 02 c0    	mov    ebx,DWORD PTR ds:0xc0020e10
c000e007:	83 ec 0c             	sub    esp,0xc
c000e00a:	6a 02                	push   0x2
c000e00c:	e8 74 b2 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000e011:	83 c4 10             	add    esp,0x10
c000e014:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e018:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e01e:	83 ec 0c             	sub    esp,0xc
c000e021:	6a 01                	push   0x1
c000e023:	6a 02                	push   0x2
c000e025:	50                   	push   eax
c000e026:	52                   	push   edx
c000e027:	53                   	push   ebx
c000e028:	e8 e7 bb ff ff       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e02d:	83 c4 20             	add    esp,0x20
c000e030:	09 f0                	or     eax,esi
c000e032:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e036:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e03a:	25 ff 0f 00 00       	and    eax,0xfff
c000e03f:	89 c6                	mov    esi,eax
c000e041:	8b 1d 10 0e 02 c0    	mov    ebx,DWORD PTR ds:0xc0020e10
c000e047:	83 ec 0c             	sub    esp,0xc
c000e04a:	6a 02                	push   0x2
c000e04c:	e8 34 b2 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000e051:	83 c4 10             	add    esp,0x10
c000e054:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e058:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e05e:	83 ec 0c             	sub    esp,0xc
c000e061:	6a 01                	push   0x1
c000e063:	6a 02                	push   0x2
c000e065:	50                   	push   eax
c000e066:	52                   	push   edx
c000e067:	53                   	push   ebx
c000e068:	e8 a7 bb ff ff       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e06d:	83 c4 20             	add    esp,0x20
c000e070:	09 f0                	or     eax,esi
c000e072:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e076:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e07b:	75 13                	jne    c000e090 <findRSDT(unsigned char*)+0x124>
c000e07d:	c6 05 20 35 02 c0 00 	mov    BYTE PTR ds:0xc0023520,0x0
c000e084:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e088:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e08c:	eb 22                	jmp    c000e0b0 <findRSDT(unsigned char*)+0x144>
c000e08e:	66 90                	xchg   ax,ax
c000e090:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e095:	75 11                	jne    c000e0a8 <findRSDT(unsigned char*)+0x13c>
c000e097:	c6 05 20 35 02 c0 01 	mov    BYTE PTR ds:0xc0023520,0x1
c000e09e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e0a2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e0a6:	eb 08                	jmp    c000e0b0 <findRSDT(unsigned char*)+0x144>
c000e0a8:	b8 00 00 00 00       	mov    eax,0x0
c000e0ad:	eb 05                	jmp    c000e0b4 <findRSDT(unsigned char*)+0x148>
c000e0af:	90                   	nop
c000e0b0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e0b4:	83 c4 50             	add    esp,0x50
c000e0b7:	5b                   	pop    ebx
c000e0b8:	5e                   	pop    esi
c000e0b9:	5f                   	pop    edi
c000e0ba:	c3                   	ret    
c000e0bb:	90                   	nop

c000e0bc <findDataTable(unsigned char*, char*)>:
c000e0bc:	83 ec 1c             	sub    esp,0x1c
c000e0bf:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c000e0c4:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e0ca:	83 e0 04             	and    eax,0x4
c000e0cd:	84 c0                	test   al,al
c000e0cf:	75 07                	jne    c000e0d8 <findDataTable(unsigned char*, char*)+0x1c>
c000e0d1:	b8 00 00 00 00       	mov    eax,0x0
c000e0d6:	eb 58                	jmp    c000e130 <findDataTable(unsigned char*, char*)+0x74>
c000e0d8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e0e0:	a1 0c 33 02 c0       	mov    eax,ds:0xc002330c
c000e0e5:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e0e9:	7d 3d                	jge    c000e128 <findDataTable(unsigned char*, char*)+0x6c>
c000e0eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e0ef:	c1 e0 03             	shl    eax,0x3
c000e0f2:	05 20 33 02 c0       	add    eax,0xc0023320
c000e0f7:	83 ec 04             	sub    esp,0x4
c000e0fa:	6a 04                	push   0x4
c000e0fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e100:	50                   	push   eax
c000e101:	e8 8a 22 ff ff       	call   c0000390 <memcmp>
c000e106:	83 c4 10             	add    esp,0x10
c000e109:	85 c0                	test   eax,eax
c000e10b:	0f 94 c0             	sete   al
c000e10e:	84 c0                	test   al,al
c000e110:	74 0e                	je     c000e120 <findDataTable(unsigned char*, char*)+0x64>
c000e112:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e116:	8b 04 c5 24 33 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdccdc]
c000e11d:	eb 11                	jmp    c000e130 <findDataTable(unsigned char*, char*)+0x74>
c000e11f:	90                   	nop
c000e120:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e124:	eb ba                	jmp    c000e0e0 <findDataTable(unsigned char*, char*)+0x24>
c000e126:	66 90                	xchg   ax,ax
c000e128:	b8 00 00 00 00       	mov    eax,0x0
c000e12d:	8d 76 00             	lea    esi,[esi+0x0]
c000e130:	83 c4 1c             	add    esp,0x1c
c000e133:	c3                   	ret    

c000e134 <scanMADT()>:
c000e134:	53                   	push   ebx
c000e135:	83 ec 38             	sub    esp,0x38
c000e138:	a1 30 0d 02 c0       	mov    eax,ds:0xc0020d30
c000e13d:	25 00 04 00 00       	and    eax,0x400
c000e142:	74 14                	je     c000e158 <scanMADT()+0x24>
c000e144:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c000e149:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e14f:	83 e2 fb             	and    edx,0xfffffffb
c000e152:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e158:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c000e15d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e163:	83 e0 04             	and    eax,0x4
c000e166:	84 c0                	test   al,al
c000e168:	0f 84 8a 04 00 00    	je     c000e5f8 <scanMADT()+0x4c4>
c000e16e:	e8 05 fb ff ff       	call   c000dc78 <findRSDP()>
c000e173:	a3 2c 35 02 c0       	mov    ds:0xc002352c,eax
c000e178:	a1 2c 35 02 c0       	mov    eax,ds:0xc002352c
c000e17d:	85 c0                	test   eax,eax
c000e17f:	75 1b                	jne    c000e19c <scanMADT()+0x68>
c000e181:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c000e186:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e18c:	83 e2 fb             	and    edx,0xfffffffb
c000e18f:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e195:	e9 66 04 00 00       	jmp    c000e600 <scanMADT()+0x4cc>
c000e19a:	66 90                	xchg   ax,ax
c000e19c:	a1 2c 35 02 c0       	mov    eax,ds:0xc002352c
c000e1a1:	83 ec 0c             	sub    esp,0xc
c000e1a4:	50                   	push   eax
c000e1a5:	e8 c2 fd ff ff       	call   c000df6c <findRSDT(unsigned char*)>
c000e1aa:	83 c4 10             	add    esp,0x10
c000e1ad:	a3 28 35 02 c0       	mov    ds:0xc0023528,eax
c000e1b2:	a1 28 35 02 c0       	mov    eax,ds:0xc0023528
c000e1b7:	85 c0                	test   eax,eax
c000e1b9:	75 19                	jne    c000e1d4 <scanMADT()+0xa0>
c000e1bb:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c000e1c0:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e1c6:	83 e2 fb             	and    edx,0xfffffffb
c000e1c9:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e1cf:	e9 2c 04 00 00       	jmp    c000e600 <scanMADT()+0x4cc>
c000e1d4:	a1 28 35 02 c0       	mov    eax,ds:0xc0023528
c000e1d9:	83 ec 0c             	sub    esp,0xc
c000e1dc:	50                   	push   eax
c000e1dd:	e8 26 fb ff ff       	call   c000dd08 <loadACPITables(unsigned char*)>
c000e1e2:	83 c4 10             	add    esp,0x10
c000e1e5:	a1 28 35 02 c0       	mov    eax,ds:0xc0023528
c000e1ea:	83 ec 08             	sub    esp,0x8
c000e1ed:	68 48 e4 01 c0       	push   0xc001e448
c000e1f2:	50                   	push   eax
c000e1f3:	e8 c4 fe ff ff       	call   c000e0bc <findDataTable(unsigned char*, char*)>
c000e1f8:	83 c4 10             	add    esp,0x10
c000e1fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e1ff:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e204:	75 1a                	jne    c000e220 <scanMADT()+0xec>
c000e206:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c000e20b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e211:	83 e2 fe             	and    edx,0xfffffffe
c000e214:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e21a:	e9 e1 03 00 00       	jmp    c000e600 <scanMADT()+0x4cc>
c000e21f:	90                   	nop
c000e220:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e228:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e22c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e22f:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e233:	0f 87 c7 03 00 00    	ja     c000e600 <scanMADT()+0x4cc>
c000e239:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e241:	0f 87 b9 03 00 00    	ja     c000e600 <scanMADT()+0x4cc>
c000e247:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e24b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e24f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e253:	8d 50 01             	lea    edx,[eax+0x1]
c000e256:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e25a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e25e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e262:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e266:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e26a:	8d 50 01             	lea    edx,[eax+0x1]
c000e26d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e271:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e275:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e279:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e27d:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e282:	0f 86 74 03 00 00    	jbe    c000e5fc <scanMADT()+0x4c8>
c000e288:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e28d:	75 5d                	jne    c000e2ec <scanMADT()+0x1b8>
c000e28f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e293:	8d 50 01             	lea    edx,[eax+0x1]
c000e296:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e29a:	8a 15 20 37 02 c0    	mov    dl,BYTE PTR ds:0xc0023720
c000e2a0:	81 e2 ff 00 00 00    	and    edx,0xff
c000e2a6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e2aa:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e2ae:	88 82 60 37 02 c0    	mov    BYTE PTR [edx-0x3ffdc8a0],al
c000e2b4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e2b8:	8d 42 01             	lea    eax,[edx+0x1]
c000e2bb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e2bf:	a0 20 37 02 c0       	mov    al,ds:0xc0023720
c000e2c4:	8d 48 01             	lea    ecx,[eax+0x1]
c000e2c7:	88 0d 20 37 02 c0    	mov    BYTE PTR ds:0xc0023720,cl
c000e2cd:	25 ff 00 00 00       	and    eax,0xff
c000e2d2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e2d6:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e2da:	88 90 40 37 02 c0    	mov    BYTE PTR [eax-0x3ffdc8c0],dl
c000e2e0:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e2e5:	e9 f6 02 00 00       	jmp    c000e5e0 <scanMADT()+0x4ac>
c000e2ea:	66 90                	xchg   ax,ax
c000e2ec:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000e2f1:	0f 85 29 01 00 00    	jne    c000e420 <scanMADT()+0x2ec>
c000e2f7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e2fb:	8d 50 01             	lea    edx,[eax+0x1]
c000e2fe:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e302:	8a 15 e0 35 02 c0    	mov    dl,BYTE PTR ds:0xc00235e0
c000e308:	81 e2 ff 00 00 00    	and    edx,0xff
c000e30e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e312:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e316:	88 82 00 36 02 c0    	mov    BYTE PTR [edx-0x3ffdca00],al
c000e31c:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000e320:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e324:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e328:	01 d0                	add    eax,edx
c000e32a:	83 c0 2c             	add    eax,0x2c
c000e32d:	8a 00                	mov    al,BYTE PTR [eax]
c000e32f:	31 d2                	xor    edx,edx
c000e331:	88 c2                	mov    dl,al
c000e333:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e337:	8d 48 01             	lea    ecx,[eax+0x1]
c000e33a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e33e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e342:	25 ff 00 00 00       	and    eax,0xff
c000e347:	c1 e0 08             	shl    eax,0x8
c000e34a:	89 d1                	mov    ecx,edx
c000e34c:	09 c1                	or     ecx,eax
c000e34e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e352:	8d 50 02             	lea    edx,[eax+0x2]
c000e355:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e359:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e35d:	25 ff 00 00 00       	and    eax,0xff
c000e362:	c1 e0 10             	shl    eax,0x10
c000e365:	09 c1                	or     ecx,eax
c000e367:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e36b:	8d 50 03             	lea    edx,[eax+0x3]
c000e36e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e372:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e376:	25 ff 00 00 00       	and    eax,0xff
c000e37b:	c1 e0 18             	shl    eax,0x18
c000e37e:	09 c1                	or     ecx,eax
c000e380:	89 ca                	mov    edx,ecx
c000e382:	a0 e0 35 02 c0       	mov    al,ds:0xc00235e0
c000e387:	25 ff 00 00 00       	and    eax,0xff
c000e38c:	89 14 85 20 36 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc9e0],edx
c000e393:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e398:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e39c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3a0:	01 d0                	add    eax,edx
c000e3a2:	83 c0 2c             	add    eax,0x2c
c000e3a5:	8a 00                	mov    al,BYTE PTR [eax]
c000e3a7:	31 d2                	xor    edx,edx
c000e3a9:	88 c2                	mov    dl,al
c000e3ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3af:	8d 48 01             	lea    ecx,[eax+0x1]
c000e3b2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e3b6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e3ba:	25 ff 00 00 00       	and    eax,0xff
c000e3bf:	c1 e0 08             	shl    eax,0x8
c000e3c2:	89 d1                	mov    ecx,edx
c000e3c4:	09 c1                	or     ecx,eax
c000e3c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3ca:	8d 50 02             	lea    edx,[eax+0x2]
c000e3cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e3d1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e3d5:	25 ff 00 00 00       	and    eax,0xff
c000e3da:	c1 e0 10             	shl    eax,0x10
c000e3dd:	09 c1                	or     ecx,eax
c000e3df:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3e3:	8d 50 03             	lea    edx,[eax+0x3]
c000e3e6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e3ea:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e3ee:	25 ff 00 00 00       	and    eax,0xff
c000e3f3:	c1 e0 18             	shl    eax,0x18
c000e3f6:	09 c1                	or     ecx,eax
c000e3f8:	89 ca                	mov    edx,ecx
c000e3fa:	a0 e0 35 02 c0       	mov    al,ds:0xc00235e0
c000e3ff:	25 ff 00 00 00       	and    eax,0xff
c000e404:	89 14 85 a0 36 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc960],edx
c000e40b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e410:	a0 e0 35 02 c0       	mov    al,ds:0xc00235e0
c000e415:	40                   	inc    eax
c000e416:	a2 e0 35 02 c0       	mov    ds:0xc00235e0,al
c000e41b:	e9 c0 01 00 00       	jmp    c000e5e0 <scanMADT()+0x4ac>
c000e420:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000e425:	0f 85 fd 00 00 00    	jne    c000e528 <scanMADT()+0x3f4>
c000e42b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e42f:	8d 50 01             	lea    edx,[eax+0x1]
c000e432:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e436:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e43a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e43e:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000e442:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e446:	8d 50 01             	lea    edx,[eax+0x1]
c000e449:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e44d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e451:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e455:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000e459:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e45d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e461:	01 d0                	add    eax,edx
c000e463:	83 c0 2c             	add    eax,0x2c
c000e466:	8a 00                	mov    al,BYTE PTR [eax]
c000e468:	31 d2                	xor    edx,edx
c000e46a:	88 c2                	mov    dl,al
c000e46c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e470:	8d 48 01             	lea    ecx,[eax+0x1]
c000e473:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e477:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e47b:	25 ff 00 00 00       	and    eax,0xff
c000e480:	c1 e0 08             	shl    eax,0x8
c000e483:	89 d1                	mov    ecx,edx
c000e485:	09 c1                	or     ecx,eax
c000e487:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e48b:	8d 50 02             	lea    edx,[eax+0x2]
c000e48e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e492:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e496:	25 ff 00 00 00       	and    eax,0xff
c000e49b:	c1 e0 10             	shl    eax,0x10
c000e49e:	09 c1                	or     ecx,eax
c000e4a0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4a4:	8d 50 03             	lea    edx,[eax+0x3]
c000e4a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4ab:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e4af:	25 ff 00 00 00       	and    eax,0xff
c000e4b4:	c1 e0 18             	shl    eax,0x18
c000e4b7:	09 c8                	or     eax,ecx
c000e4b9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e4bd:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e4c2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4ca:	01 d0                	add    eax,edx
c000e4cc:	83 c0 2c             	add    eax,0x2c
c000e4cf:	8a 00                	mov    al,BYTE PTR [eax]
c000e4d1:	25 ff 00 00 00       	and    eax,0xff
c000e4d6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e4da:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e4dd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4e1:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000e4e5:	81 e2 ff 00 00 00    	and    edx,0xff
c000e4eb:	c1 e2 08             	shl    edx,0x8
c000e4ee:	09 d0                	or     eax,edx
c000e4f0:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000e4f5:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e4fa:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e4fe:	25 ff 00 00 00       	and    eax,0xff
c000e503:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e507:	88 90 e0 f9 01 c0    	mov    BYTE PTR [eax-0x3ffe0620],dl
c000e50d:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e511:	31 d2                	xor    edx,edx
c000e513:	88 c2                	mov    dl,al
c000e515:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000e51a:	66 89 84 12 c0 35 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffdca40],ax
c000e522:	e9 b9 00 00 00       	jmp    c000e5e0 <scanMADT()+0x4ac>
c000e527:	90                   	nop
c000e528:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000e52d:	0f 85 a1 00 00 00    	jne    c000e5d4 <scanMADT()+0x4a0>
c000e533:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e537:	8d 50 01             	lea    edx,[eax+0x1]
c000e53a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e53e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e542:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e546:	25 ff 00 00 00       	and    eax,0xff
c000e54b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e54f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e553:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e557:	01 d0                	add    eax,edx
c000e559:	83 c0 2c             	add    eax,0x2c
c000e55c:	8a 00                	mov    al,BYTE PTR [eax]
c000e55e:	31 d2                	xor    edx,edx
c000e560:	88 c2                	mov    dl,al
c000e562:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e566:	8d 48 01             	lea    ecx,[eax+0x1]
c000e569:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e56d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e571:	25 ff 00 00 00       	and    eax,0xff
c000e576:	c1 e0 08             	shl    eax,0x8
c000e579:	09 d0                	or     eax,edx
c000e57b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e57f:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e584:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e588:	8d 50 01             	lea    edx,[eax+0x1]
c000e58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e58f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e593:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e597:	25 ff 00 00 00       	and    eax,0xff
c000e59c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e5a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5a4:	c1 e0 08             	shl    eax,0x8
c000e5a7:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e5ab:	89 c1                	mov    ecx,eax
c000e5ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5b1:	c1 e0 18             	shl    eax,0x18
c000e5b4:	89 c3                	mov    ebx,eax
c000e5b6:	a1 30 35 02 c0       	mov    eax,ds:0xc0023530
c000e5bb:	8d 50 01             	lea    edx,[eax+0x1]
c000e5be:	89 15 30 35 02 c0    	mov    DWORD PTR ds:0xc0023530,edx
c000e5c4:	09 d9                	or     ecx,ebx
c000e5c6:	89 ca                	mov    edx,ecx
c000e5c8:	89 14 85 40 35 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcac0],edx
c000e5cf:	eb 0f                	jmp    c000e5e0 <scanMADT()+0x4ac>
c000e5d1:	8d 76 00             	lea    esi,[esi+0x0]
c000e5d4:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000e5d9:	75 05                	jne    c000e5e0 <scanMADT()+0x4ac>
c000e5db:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000e5e0:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000e5e4:	31 d2                	xor    edx,edx
c000e5e6:	88 c2                	mov    dl,al
c000e5e8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e5ec:	01 d0                	add    eax,edx
c000e5ee:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e5f2:	e9 31 fc ff ff       	jmp    c000e228 <scanMADT()+0xf4>
c000e5f7:	90                   	nop
c000e5f8:	90                   	nop
c000e5f9:	eb 05                	jmp    c000e600 <scanMADT()+0x4cc>
c000e5fb:	90                   	nop
c000e5fc:	90                   	nop
c000e5fd:	8d 76 00             	lea    esi,[esi+0x0]
c000e600:	83 c4 38             	add    esp,0x38
c000e603:	5b                   	pop    ebx
c000e604:	c3                   	ret    
c000e605:	90                   	nop
c000e606:	66 90                	xchg   ax,ax

c000e608 <ACPI::ACPI()>:
c000e608:	83 ec 0c             	sub    esp,0xc
c000e60b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e60f:	83 ec 08             	sub    esp,0x8
c000e612:	68 4d e4 01 c0       	push   0xc001e44d
c000e617:	50                   	push   eax
c000e618:	e8 93 d4 ff ff       	call   c000bab0 <Device::Device(char const*)>
c000e61d:	83 c4 10             	add    esp,0x10
c000e620:	ba 84 e5 01 c0       	mov    edx,0xc001e584
c000e625:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e629:	89 10                	mov    DWORD PTR [eax],edx
c000e62b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e62f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000e636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e63a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e644:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e648:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000e652:	e8 dd fa ff ff       	call   c000e134 <scanMADT()>
c000e657:	90                   	nop
c000e658:	83 c4 0c             	add    esp,0xc
c000e65b:	c3                   	ret    

c000e65c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000e65c:	83 ec 2c             	sub    esp,0x2c
c000e65f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e663:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e667:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e66b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000e66f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e674:	88 d0                	mov    al,dl
c000e676:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e67a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e67f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e687:	90                   	nop
c000e688:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e68c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e692:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000e696:	0f 8d 9c 00 00 00    	jge    c000e738 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000e69c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e6a0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6a4:	83 c2 2a             	add    edx,0x2a
c000e6a7:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000e6ab:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000e6b0:	75 7a                	jne    c000e72c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e6b2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e6b6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6ba:	83 c2 2a             	add    edx,0x2a
c000e6bd:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000e6c1:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000e6c5:	75 65                	jne    c000e72c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e6c7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e6cc:	74 3a                	je     c000e708 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000e6ce:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e6d2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6d6:	83 c2 2a             	add    edx,0x2a
c000e6d9:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000e6dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e6e1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e6e4:	39 c2                	cmp    edx,eax
c000e6e6:	74 10                	je     c000e6f8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000e6e8:	83 ec 0c             	sub    esp,0xc
c000e6eb:	68 c8 e3 01 c0       	push   0xc001e3c8
c000e6f0:	e8 4e 1a 00 00       	call   c0010143 <KePanic(char const*)>
c000e6f5:	83 c4 10             	add    esp,0x10
c000e6f8:	83 ec 0c             	sub    esp,0xc
c000e6fb:	68 52 e4 01 c0       	push   0xc001e452
c000e700:	e8 3e 1a 00 00       	call   c0010143 <KePanic(char const*)>
c000e705:	83 c4 10             	add    esp,0x10
c000e708:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000e70c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e710:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e714:	83 c2 2a             	add    edx,0x2a
c000e717:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000e71b:	8b 02                	mov    eax,DWORD PTR [edx]
c000e71d:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e720:	89 01                	mov    DWORD PTR [ecx],eax
c000e722:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000e725:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e72a:	66 90                	xchg   ax,ax
c000e72c:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e730:	e9 53 ff ff ff       	jmp    c000e688 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000e735:	8d 76 00             	lea    esi,[esi+0x0]
c000e738:	90                   	nop
c000e739:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e73d:	83 c4 2c             	add    esp,0x2c
c000e740:	c2 04 00             	ret    0x4
c000e743:	90                   	nop

c000e744 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000e744:	83 ec 1c             	sub    esp,0x1c
c000e747:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e74b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e74f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e753:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000e758:	88 c8                	mov    al,cl
c000e75a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000e75e:	88 d0                	mov    al,dl
c000e760:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e764:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e768:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e76e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e772:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e775:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000e779:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000e77d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e781:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e787:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e78b:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000e78e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e792:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000e797:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e79b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e7a1:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000e7a5:	8d 48 01             	lea    ecx,[eax+0x1]
c000e7a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7ac:	83 c2 2a             	add    edx,0x2a
c000e7af:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000e7b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7b7:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e7bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7c1:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e7c4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e7c8:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000e7cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7d0:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e7d6:	8d 50 01             	lea    edx,[eax+0x1]
c000e7d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7dd:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000e7e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7e7:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e7ed:	3d 00 02 00 00       	cmp    eax,0x200
c000e7f2:	75 10                	jne    c000e804 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000e7f4:	83 ec 0c             	sub    esp,0xc
c000e7f7:	68 61 e4 01 c0       	push   0xc001e461
c000e7fc:	e8 42 19 00 00       	call   c0010143 <KePanic(char const*)>
c000e801:	83 c4 10             	add    esp,0x10
c000e804:	90                   	nop
c000e805:	83 c4 1c             	add    esp,0x1c
c000e808:	c3                   	ret    
c000e809:	90                   	nop
c000e80a:	66 90                	xchg   ax,ax

c000e80c <ACPI::setScreenBrightnessLevel(void*, int)>:
c000e80c:	b8 00 00 00 00       	mov    eax,0x0
c000e811:	c3                   	ret    
c000e812:	66 90                	xchg   ax,ax

c000e814 <ACPI::detectPCI()>:
c000e814:	53                   	push   ebx
c000e815:	83 ec 28             	sub    esp,0x28
c000e818:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e81d:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000e822:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c000e827:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e82d:	83 e0 04             	and    eax,0x4
c000e830:	84 c0                	test   al,al
c000e832:	74 2c                	je     c000e860 <ACPI::detectPCI()+0x4c>
c000e834:	a1 28 35 02 c0       	mov    eax,ds:0xc0023528
c000e839:	83 ec 08             	sub    esp,0x8
c000e83c:	68 7e e4 01 c0       	push   0xc001e47e
c000e841:	50                   	push   eax
c000e842:	e8 75 f8 ff ff       	call   c000e0bc <findDataTable(unsigned char*, char*)>
c000e847:	83 c4 10             	add    esp,0x10
c000e84a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e84e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000e853:	74 0b                	je     c000e860 <ACPI::detectPCI()+0x4c>
c000e855:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e85a:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e85f:	90                   	nop
c000e860:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000e868:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e86c:	8a 00                	mov    al,BYTE PTR [eax]
c000e86e:	3c 01                	cmp    al,0x1
c000e870:	75 0e                	jne    c000e880 <ACPI::detectPCI()+0x6c>
c000e872:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e877:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e87c:	eb 2a                	jmp    c000e8a8 <ACPI::detectPCI()+0x94>
c000e87e:	66 90                	xchg   ax,ax
c000e880:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e884:	8a 00                	mov    al,BYTE PTR [eax]
c000e886:	3c 02                	cmp    al,0x2
c000e888:	75 1e                	jne    c000e8a8 <ACPI::detectPCI()+0x94>
c000e88a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e88f:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e894:	74 12                	je     c000e8a8 <ACPI::detectPCI()+0x94>
c000e896:	83 ec 0c             	sub    esp,0xc
c000e899:	68 f8 e3 01 c0       	push   0xc001e3f8
c000e89e:	e8 a0 18 00 00       	call   c0010143 <KePanic(char const*)>
c000e8a3:	83 c4 10             	add    esp,0x10
c000e8a6:	66 90                	xchg   ax,ax
c000e8a8:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000e8ac:	83 f0 01             	xor    eax,0x1
c000e8af:	84 c0                	test   al,al
c000e8b1:	74 41                	je     c000e8f4 <ACPI::detectPCI()+0xe0>
c000e8b3:	e8 78 18 ff ff       	call   c0000130 <manualPCIProbe>
c000e8b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e8bc:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e8c1:	75 0d                	jne    c000e8d0 <ACPI::detectPCI()+0xbc>
c000e8c3:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e8c8:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e8cd:	eb 25                	jmp    c000e8f4 <ACPI::detectPCI()+0xe0>
c000e8cf:	90                   	nop
c000e8d0:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000e8d5:	75 1d                	jne    c000e8f4 <ACPI::detectPCI()+0xe0>
c000e8d7:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e8dc:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e8e1:	74 11                	je     c000e8f4 <ACPI::detectPCI()+0xe0>
c000e8e3:	83 ec 0c             	sub    esp,0xc
c000e8e6:	68 f8 e3 01 c0       	push   0xc001e3f8
c000e8eb:	e8 53 18 00 00       	call   c0010143 <KePanic(char const*)>
c000e8f0:	83 c4 10             	add    esp,0x10
c000e8f3:	90                   	nop
c000e8f4:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e8f9:	0f 84 85 00 00 00    	je     c000e984 <ACPI::detectPCI()+0x170>
c000e8ff:	83 ec 0c             	sub    esp,0xc
c000e902:	68 83 e4 01 c0       	push   0xc001e483
c000e907:	e8 bf 11 00 00       	call   c000facb <KeSetBootMessage(char const*)>
c000e90c:	83 c4 10             	add    esp,0x10
c000e90f:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000e917:	83 ec 0c             	sub    esp,0xc
c000e91a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e91e:	e8 96 8e ff ff       	call   c00077b9 <malloc>
c000e923:	83 c4 10             	add    esp,0x10
c000e926:	89 c3                	mov    ebx,eax
c000e928:	83 ec 0c             	sub    esp,0xc
c000e92b:	53                   	push   ebx
c000e92c:	e8 71 9c 00 00       	call   c00185a2 <PCI::PCI()>
c000e931:	83 c4 10             	add    esp,0x10
c000e934:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e938:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e93c:	83 ec 08             	sub    esp,0x8
c000e93f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e943:	50                   	push   eax
c000e944:	e8 cf cf ff ff       	call   c000b918 <Device::addChild(Device*)>
c000e949:	83 c4 10             	add    esp,0x10
c000e94c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e950:	8b 00                	mov    eax,DWORD PTR [eax]
c000e952:	83 c0 08             	add    eax,0x8
c000e955:	8b 00                	mov    eax,DWORD PTR [eax]
c000e957:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e95c:	74 0a                	je     c000e968 <ACPI::detectPCI()+0x154>
c000e95e:	ba 01 00 00 00       	mov    edx,0x1
c000e963:	eb 0b                	jmp    c000e970 <ACPI::detectPCI()+0x15c>
c000e965:	8d 76 00             	lea    esi,[esi+0x0]
c000e968:	ba 02 00 00 00       	mov    edx,0x2
c000e96d:	8d 76 00             	lea    esi,[esi+0x0]
c000e970:	6a 00                	push   0x0
c000e972:	6a 00                	push   0x0
c000e974:	52                   	push   edx
c000e975:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e979:	ff d0                	call   eax
c000e97b:	83 c4 10             	add    esp,0x10
c000e97e:	e9 91 00 00 00       	jmp    c000ea14 <ACPI::detectPCI()+0x200>
c000e983:	90                   	nop
c000e984:	83 ec 0c             	sub    esp,0xc
c000e987:	68 9b e4 01 c0       	push   0xc001e49b
c000e98c:	e8 3a 11 00 00       	call   c000facb <KeSetBootMessage(char const*)>
c000e991:	83 c4 10             	add    esp,0x10
c000e994:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000e99b:	83 ec 0c             	sub    esp,0xc
c000e99e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e9a2:	e8 12 8e ff ff       	call   c00077b9 <malloc>
c000e9a7:	83 c4 10             	add    esp,0x10
c000e9aa:	89 c3                	mov    ebx,eax
c000e9ac:	83 ec 0c             	sub    esp,0xc
c000e9af:	53                   	push   ebx
c000e9b0:	e8 19 a7 00 00       	call   c00190ce <IDE::IDE()>
c000e9b5:	83 c4 10             	add    esp,0x10
c000e9b8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000e9bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9c0:	83 ec 08             	sub    esp,0x8
c000e9c3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e9c7:	50                   	push   eax
c000e9c8:	e8 4b cf ff ff       	call   c000b918 <Device::addChild(Device*)>
c000e9cd:	83 c4 10             	add    esp,0x10
c000e9d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9d4:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000e9de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9e2:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000e9eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9ef:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000e9f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9fc:	8b 00                	mov    eax,DWORD PTR [eax]
c000e9fe:	83 c0 08             	add    eax,0x8
c000ea01:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea03:	6a 00                	push   0x0
c000ea05:	6a 00                	push   0x0
c000ea07:	6a 00                	push   0x0
c000ea09:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ea0d:	ff d0                	call   eax
c000ea0f:	83 c4 10             	add    esp,0x10
c000ea12:	66 90                	xchg   ax,ax
c000ea14:	90                   	nop
c000ea15:	83 c4 28             	add    esp,0x28
c000ea18:	5b                   	pop    ebx
c000ea19:	c3                   	ret    
c000ea1a:	66 90                	xchg   ax,ax

c000ea1c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000ea1c:	83 ec 1c             	sub    esp,0x1c
c000ea1f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ea23:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ea26:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ea2a:	8b 15 18 0d 02 c0    	mov    edx,DWORD PTR ds:0xc0020d18
c000ea30:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ea34:	25 ff 00 00 00       	and    eax,0xff
c000ea39:	83 ec 08             	sub    esp,0x8
c000ea3c:	50                   	push   eax
c000ea3d:	52                   	push   edx
c000ea3e:	e8 63 84 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c000ea43:	83 c4 10             	add    esp,0x10
c000ea46:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000ea4a:	8b 15 18 0d 02 c0    	mov    edx,DWORD PTR ds:0xc0020d18
c000ea50:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ea54:	25 ff 00 00 00       	and    eax,0xff
c000ea59:	83 ec 04             	sub    esp,0x4
c000ea5c:	6a 01                	push   0x1
c000ea5e:	50                   	push   eax
c000ea5f:	52                   	push   edx
c000ea60:	e8 57 85 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c000ea65:	83 c4 10             	add    esp,0x10
c000ea68:	90                   	nop
c000ea69:	83 c4 1c             	add    esp,0x1c
c000ea6c:	c3                   	ret    
c000ea6d:	90                   	nop
c000ea6e:	66 90                	xchg   ax,ax

c000ea70 <ACPI::sleep()>:
c000ea70:	83 ec 0c             	sub    esp,0xc
c000ea73:	a1 00 33 02 c0       	mov    eax,ds:0xc0023300
c000ea78:	85 c0                	test   eax,eax
c000ea7a:	74 08                	je     c000ea84 <ACPI::sleep()+0x14>
c000ea7c:	a1 00 33 02 c0       	mov    eax,ds:0xc0023300
c000ea81:	ff d0                	call   eax
c000ea83:	90                   	nop
c000ea84:	90                   	nop
c000ea85:	83 c4 0c             	add    esp,0xc
c000ea88:	c3                   	ret    
c000ea89:	90                   	nop
c000ea8a:	66 90                	xchg   ax,ax

c000ea8c <ACPI::open(int, int, void*)>:
c000ea8c:	57                   	push   edi
c000ea8d:	56                   	push   esi
c000ea8e:	53                   	push   ebx
c000ea8f:	81 ec 70 01 00 00    	sub    esp,0x170
c000ea95:	83 ec 0c             	sub    esp,0xc
c000ea98:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ea9f:	e8 70 fd ff ff       	call   c000e814 <ACPI::detectPCI()>
c000eaa4:	83 c4 10             	add    esp,0x10
c000eaa7:	83 ec 0c             	sub    esp,0xc
c000eaaa:	68 20 e4 01 c0       	push   0xc001e420
c000eaaf:	e8 17 10 00 00       	call   c000facb <KeSetBootMessage(char const*)>
c000eab4:	83 c4 10             	add    esp,0x10
c000eab7:	83 ec 0c             	sub    esp,0xc
c000eaba:	68 b0 e4 01 c0       	push   0xc001e4b0
c000eabf:	e8 4e 38 00 00       	call   c0012312 <Thr::loadKernelSymbolTable(char const*)>
c000eac4:	83 c4 10             	add    esp,0x10
c000eac7:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000eacf:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000eada:	83 ec 0c             	sub    esp,0xc
c000eadd:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000eae4:	e8 d0 8c ff ff       	call   c00077b9 <malloc>
c000eae9:	83 c4 10             	add    esp,0x10
c000eaec:	89 c3                	mov    ebx,eax
c000eaee:	a1 f0 3f 02 c0       	mov    eax,ds:0xc0023ff0
c000eaf3:	83 ec 04             	sub    esp,0x4
c000eaf6:	50                   	push   eax
c000eaf7:	68 ce e4 01 c0       	push   0xc001e4ce
c000eafc:	53                   	push   ebx
c000eafd:	e8 4c bf ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c000eb02:	83 c4 10             	add    esp,0x10
c000eb05:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000eb0c:	83 ec 08             	sub    esp,0x8
c000eb0f:	6a 01                	push   0x1
c000eb11:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eb18:	e8 f1 bf ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c000eb1d:	83 c4 10             	add    esp,0x10
c000eb20:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000eb27:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000eb2f:	75 17                	jne    c000eb48 <ACPI::open(int, int, void*)+0xbc>
c000eb31:	83 ec 0c             	sub    esp,0xc
c000eb34:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eb3b:	e8 2c c0 ff ff       	call   c000ab6c <File::close()>
c000eb40:	83 c4 10             	add    esp,0x10
c000eb43:	eb 0b                	jmp    c000eb50 <ACPI::open(int, int, void*)+0xc4>
c000eb45:	8d 76 00             	lea    esi,[esi+0x0]
c000eb48:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000eb50:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000eb58:	74 1e                	je     c000eb78 <ACPI::open(int, int, void*)+0xec>
c000eb5a:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000eb61:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb63:	83 c0 08             	add    eax,0x8
c000eb66:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb68:	83 ec 0c             	sub    esp,0xc
c000eb6b:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eb72:	ff d0                	call   eax
c000eb74:	83 c4 10             	add    esp,0x10
c000eb77:	90                   	nop
c000eb78:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000eb7f:	83 f0 01             	xor    eax,0x1
c000eb82:	84 c0                	test   al,al
c000eb84:	74 42                	je     c000ebc8 <ACPI::open(int, int, void*)+0x13c>
c000eb86:	83 ec 0c             	sub    esp,0xc
c000eb89:	68 ec e4 01 c0       	push   0xc001e4ec
c000eb8e:	e8 38 0f 00 00       	call   c000facb <KeSetBootMessage(char const*)>
c000eb93:	83 c4 10             	add    esp,0x10
c000eb96:	83 ec 04             	sub    esp,0x4
c000eb99:	6a 0c                	push   0xc
c000eb9b:	68 07 e5 01 c0       	push   0xc001e507
c000eba0:	68 18 e5 01 c0       	push   0xc001e518
c000eba5:	e8 58 2d 00 00       	call   c0011902 <Reg::readIntWithDefault(char*, char*, int)>
c000ebaa:	83 c4 10             	add    esp,0x10
c000ebad:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000ebb4:	83 ec 0c             	sub    esp,0xc
c000ebb7:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ebbe:	e8 cc a8 ff ff       	call   c000948f <Virt::setupPageSwapping(int)>
c000ebc3:	83 c4 10             	add    esp,0x10
c000ebc6:	66 90                	xchg   ax,ax
c000ebc8:	83 ec 0c             	sub    esp,0xc
c000ebcb:	68 97 d5 01 c0       	push   0xc001d597
c000ebd0:	e8 f6 0e 00 00       	call   c000facb <KeSetBootMessage(char const*)>
c000ebd5:	83 c4 10             	add    esp,0x10
c000ebd8:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000ebdf:	83 ec 08             	sub    esp,0x8
c000ebe2:	6a 12                	push   0x12
c000ebe4:	50                   	push   eax
c000ebe5:	e8 46 d0 ff ff       	call   c000bc30 <getDevicesOfType(DeviceType)>
c000ebea:	83 c4 0c             	add    esp,0xc
c000ebed:	8d 76 00             	lea    esi,[esi+0x0]
c000ebf0:	83 ec 0c             	sub    esp,0xc
c000ebf3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ebfa:	50                   	push   eax
c000ebfb:	e8 dc dd 00 00       	call   c001c9dc <LinkedList<Device>::isEmpty()>
c000ec00:	83 c4 10             	add    esp,0x10
c000ec03:	83 f0 01             	xor    eax,0x1
c000ec06:	84 c0                	test   al,al
c000ec08:	0f 84 46 01 00 00    	je     c000ed54 <ACPI::open(int, int, void*)+0x2c8>
c000ec0e:	83 ec 0c             	sub    esp,0xc
c000ec11:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ec18:	50                   	push   eax
c000ec19:	e8 da dd 00 00       	call   c001c9f8 <LinkedList<Device>::getFirstElement()>
c000ec1e:	83 c4 10             	add    esp,0x10
c000ec21:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000ec28:	83 ec 0c             	sub    esp,0xc
c000ec2b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ec32:	50                   	push   eax
c000ec33:	e8 c8 dd 00 00       	call   c001ca00 <LinkedList<Device>::removeFirst()>
c000ec38:	83 c4 10             	add    esp,0x10
c000ec3b:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000ec42:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000ec49:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000ec50:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ec54:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000ec5a:	ba 09 00 00 00       	mov    edx,0x9
c000ec5f:	fc                   	cld    
c000ec60:	89 c7                	mov    edi,eax
c000ec62:	89 de                	mov    esi,ebx
c000ec64:	89 d1                	mov    ecx,edx
c000ec66:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ec68:	83 ec 08             	sub    esp,0x8
c000ec6b:	8d 44 24 38          	lea    eax,[esp+0x38]
c000ec6f:	50                   	push   eax
c000ec70:	83 ec 24             	sub    esp,0x24
c000ec73:	89 e0                	mov    eax,esp
c000ec75:	89 c3                	mov    ebx,eax
c000ec77:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000ec7b:	ba 09 00 00 00       	mov    edx,0x9
c000ec80:	89 df                	mov    edi,ebx
c000ec82:	89 c6                	mov    esi,eax
c000ec84:	89 d1                	mov    ecx,edx
c000ec86:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ec88:	e8 f7 9d 00 00       	call   c0018a84 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ec8d:	83 c4 30             	add    esp,0x30
c000ec90:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000ec97:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000ec9f:	0f 84 4b ff ff ff    	je     c000ebf0 <ACPI::open(int, int, void*)+0x164>
c000eca5:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000ecb0:	83 ec 0c             	sub    esp,0xc
c000ecb3:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ecba:	e8 fa 8a ff ff       	call   c00077b9 <malloc>
c000ecbf:	83 c4 10             	add    esp,0x10
c000ecc2:	89 c3                	mov    ebx,eax
c000ecc4:	a1 f0 3f 02 c0       	mov    eax,ds:0xc0023ff0
c000ecc9:	83 ec 04             	sub    esp,0x4
c000eccc:	50                   	push   eax
c000eccd:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ecd4:	53                   	push   ebx
c000ecd5:	e8 74 bd ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c000ecda:	83 c4 10             	add    esp,0x10
c000ecdd:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000ece4:	83 ec 0c             	sub    esp,0xc
c000ece7:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ecee:	e8 89 c0 ff ff       	call   c000ad7c <File::exists()>
c000ecf3:	83 c4 10             	add    esp,0x10
c000ecf6:	84 c0                	test   al,al
c000ecf8:	74 2a                	je     c000ed24 <ACPI::open(int, int, void*)+0x298>
c000ecfa:	83 ec 08             	sub    esp,0x8
c000ecfd:	6a 01                	push   0x1
c000ecff:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ed06:	e8 7e 40 00 00       	call   c0012d89 <Thr::loadDLL(char const*, bool)>
c000ed0b:	83 c4 10             	add    esp,0x10
c000ed0e:	83 ec 08             	sub    esp,0x8
c000ed11:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ed18:	50                   	push   eax
c000ed19:	e8 9c 42 00 00       	call   c0012fba <Thr::executeDLL(unsigned long, void*)>
c000ed1e:	83 c4 10             	add    esp,0x10
c000ed21:	8d 76 00             	lea    esi,[esi+0x0]
c000ed24:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000ed2c:	0f 84 be fe ff ff    	je     c000ebf0 <ACPI::open(int, int, void*)+0x164>
c000ed32:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000ed39:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed3b:	83 c0 08             	add    eax,0x8
c000ed3e:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed40:	83 ec 0c             	sub    esp,0xc
c000ed43:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ed4a:	ff d0                	call   eax
c000ed4c:	83 c4 10             	add    esp,0x10
c000ed4f:	e9 9c fe ff ff       	jmp    c000ebf0 <ACPI::open(int, int, void*)+0x164>
c000ed54:	83 ec 0c             	sub    esp,0xc
c000ed57:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ed5e:	50                   	push   eax
c000ed5f:	e8 74 dc 00 00       	call   c001c9d8 <LinkedList<Device>::~LinkedList()>
c000ed64:	83 c4 10             	add    esp,0x10
c000ed67:	8b 1d 18 0d 02 c0    	mov    ebx,DWORD PTR ds:0xc0020d18
c000ed6d:	83 ec 08             	sub    esp,0x8
c000ed70:	6a 01                	push   0x1
c000ed72:	68 1f e5 01 c0       	push   0xc001e51f
c000ed77:	e8 0d 40 00 00       	call   c0012d89 <Thr::loadDLL(char const*, bool)>
c000ed7c:	83 c4 10             	add    esp,0x10
c000ed7f:	83 ec 08             	sub    esp,0x8
c000ed82:	53                   	push   ebx
c000ed83:	50                   	push   eax
c000ed84:	e8 31 42 00 00       	call   c0012fba <Thr::executeDLL(unsigned long, void*)>
c000ed89:	83 c4 10             	add    esp,0x10
c000ed8c:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c000ed91:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ed97:	83 e0 04             	and    eax,0x4
c000ed9a:	84 c0                	test   al,al
c000ed9c:	0f 84 16 01 00 00    	je     c000eeb8 <ACPI::open(int, int, void*)+0x42c>
c000eda2:	83 ec 0c             	sub    esp,0xc
c000eda5:	68 3c e5 01 c0       	push   0xc001e53c
c000edaa:	e8 1c 0d 00 00       	call   c000facb <KeSetBootMessage(char const*)>
c000edaf:	83 c4 10             	add    esp,0x10
c000edb2:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000edbd:	83 ec 0c             	sub    esp,0xc
c000edc0:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000edc7:	e8 ed 89 ff ff       	call   c00077b9 <malloc>
c000edcc:	83 c4 10             	add    esp,0x10
c000edcf:	89 c3                	mov    ebx,eax
c000edd1:	a1 f0 3f 02 c0       	mov    eax,ds:0xc0023ff0
c000edd6:	83 ec 04             	sub    esp,0x4
c000edd9:	50                   	push   eax
c000edda:	68 59 e5 01 c0       	push   0xc001e559
c000eddf:	53                   	push   ebx
c000ede0:	e8 69 bc ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c000ede5:	83 c4 10             	add    esp,0x10
c000ede8:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000edef:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000edf7:	74 1b                	je     c000ee14 <ACPI::open(int, int, void*)+0x388>
c000edf9:	83 ec 0c             	sub    esp,0xc
c000edfc:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000ee03:	e8 74 bf ff ff       	call   c000ad7c <File::exists()>
c000ee08:	83 c4 10             	add    esp,0x10
c000ee0b:	84 c0                	test   al,al
c000ee0d:	74 05                	je     c000ee14 <ACPI::open(int, int, void*)+0x388>
c000ee0f:	b0 01                	mov    al,0x1
c000ee11:	eb 05                	jmp    c000ee18 <ACPI::open(int, int, void*)+0x38c>
c000ee13:	90                   	nop
c000ee14:	b0 00                	mov    al,0x0
c000ee16:	66 90                	xchg   ax,ax
c000ee18:	84 c0                	test   al,al
c000ee1a:	74 28                	je     c000ee44 <ACPI::open(int, int, void*)+0x3b8>
c000ee1c:	83 ec 08             	sub    esp,0x8
c000ee1f:	6a 01                	push   0x1
c000ee21:	68 59 e5 01 c0       	push   0xc001e559
c000ee26:	e8 5e 3f 00 00       	call   c0012d89 <Thr::loadDLL(char const*, bool)>
c000ee2b:	83 c4 10             	add    esp,0x10
c000ee2e:	83 ec 08             	sub    esp,0x8
c000ee31:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000ee38:	50                   	push   eax
c000ee39:	e8 7c 41 00 00       	call   c0012fba <Thr::executeDLL(unsigned long, void*)>
c000ee3e:	83 c4 10             	add    esp,0x10
c000ee41:	8d 76 00             	lea    esi,[esi+0x0]
c000ee44:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ee4c:	74 2a                	je     c000ee78 <ACPI::open(int, int, void*)+0x3ec>
c000ee4e:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ee56:	74 20                	je     c000ee78 <ACPI::open(int, int, void*)+0x3ec>
c000ee58:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000ee5f:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee61:	83 c0 08             	add    eax,0x8
c000ee64:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee66:	83 ec 0c             	sub    esp,0xc
c000ee69:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000ee70:	ff d0                	call   eax
c000ee72:	83 c4 10             	add    esp,0x10
c000ee75:	8d 76 00             	lea    esi,[esi+0x0]
c000ee78:	a1 28 35 02 c0       	mov    eax,ds:0xc0023528
c000ee7d:	83 ec 08             	sub    esp,0x8
c000ee80:	68 76 e5 01 c0       	push   0xc001e576
c000ee85:	50                   	push   eax
c000ee86:	e8 31 f2 ff ff       	call   c000e0bc <findDataTable(unsigned char*, char*)>
c000ee8b:	83 c4 10             	add    esp,0x10
c000ee8e:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000ee95:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000ee9d:	74 19                	je     c000eeb8 <ACPI::open(int, int, void*)+0x42c>
c000ee9f:	83 ec 08             	sub    esp,0x8
c000eea2:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000eea9:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000eeb0:	e8 67 fb ff ff       	call   c000ea1c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000eeb5:	83 c4 10             	add    esp,0x10
c000eeb8:	b8 00 00 00 00       	mov    eax,0x0
c000eebd:	81 c4 70 01 00 00    	add    esp,0x170
c000eec3:	5b                   	pop    ebx
c000eec4:	5e                   	pop    esi
c000eec5:	5f                   	pop    edi
c000eec6:	c3                   	ret    
c000eec7:	90                   	nop

c000eec8 <CPU::close(int, int, void*)>:
c000eec8:	31 c0                	xor    eax,eax
c000eeca:	c3                   	ret    
c000eecb:	90                   	nop

c000eecc <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000eecc:	60                   	pusha  
c000eecd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000eed1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eed5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eed9:	9c                   	pushf  
c000eeda:	fa                   	cli    
c000eedb:	0f 09                	wbinvd 
c000eedd:	0f 30                	wrmsr  
c000eedf:	9d                   	popf   
c000eee0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000eee4:	89 02                	mov    DWORD PTR [edx],eax
c000eee6:	61                   	popa   
c000eee7:	c3                   	ret    

c000eee8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000eee8:	60                   	pusha  
c000eee9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000eeed:	9c                   	pushf  
c000eeee:	fa                   	cli    
c000eeef:	0f 09                	wbinvd 
c000eef1:	31 c0                	xor    eax,eax
c000eef3:	31 d2                	xor    edx,edx
c000eef5:	0f 32                	rdmsr  
c000eef7:	9d                   	popf   
c000eef8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eefc:	89 02                	mov    DWORD PTR [edx],eax
c000eefe:	61                   	popa   
c000eeff:	c3                   	ret    

c000ef00 <CPU::AMD_K6_writeback(int, int, int)>:
c000ef00:	56                   	push   esi
c000ef01:	53                   	push   ebx
c000ef02:	83 ec 10             	sub    esp,0x10
c000ef05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef09:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000ef0e:	75 5d                	jne    c000ef6d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ef10:	83 f8 08             	cmp    eax,0x8
c000ef13:	75 09                	jne    c000ef1e <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000ef15:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000ef1a:	7e 13                	jle    c000ef2f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ef1c:	eb 30                	jmp    c000ef4e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ef1e:	83 f8 06             	cmp    eax,0x6
c000ef21:	7c 4a                	jl     c000ef6d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ef23:	83 f8 07             	cmp    eax,0x7
c000ef26:	7e 07                	jle    c000ef2f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ef28:	83 f8 09             	cmp    eax,0x9
c000ef2b:	74 21                	je     c000ef4e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ef2d:	eb 3e                	jmp    c000ef6d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ef2f:	89 e6                	mov    esi,esp
c000ef31:	8b 1d 3c 0d 02 c0    	mov    ebx,DWORD PTR ds:0xc0020d3c
c000ef37:	56                   	push   esi
c000ef38:	c1 eb 15             	shr    ebx,0x15
c000ef3b:	68 82 00 00 c0       	push   0xc0000082
c000ef40:	83 e3 7e             	and    ebx,0x7e
c000ef43:	e8 a0 ff ff ff       	call   c000eee8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ef48:	56                   	push   esi
c000ef49:	6a 00                	push   0x0
c000ef4b:	53                   	push   ebx
c000ef4c:	eb 12                	jmp    c000ef60 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000ef4e:	89 e3                	mov    ebx,esp
c000ef50:	53                   	push   ebx
c000ef51:	68 82 00 00 c0       	push   0xc0000082
c000ef56:	e8 8d ff ff ff       	call   c000eee8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ef5b:	53                   	push   ebx
c000ef5c:	6a 00                	push   0x0
c000ef5e:	6a 00                	push   0x0
c000ef60:	68 82 00 00 c0       	push   0xc0000082
c000ef65:	e8 62 ff ff ff       	call   c000eecc <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000ef6a:	83 c4 18             	add    esp,0x18
c000ef6d:	83 c4 10             	add    esp,0x10
c000ef70:	5b                   	pop    ebx
c000ef71:	5e                   	pop    esi
c000ef72:	c3                   	ret    
c000ef73:	90                   	nop

c000ef74 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000ef74:	55                   	push   ebp
c000ef75:	57                   	push   edi
c000ef76:	56                   	push   esi
c000ef77:	53                   	push   ebx
c000ef78:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef7c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ef80:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ef84:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000ef88:	39 05 f0 f9 01 c0    	cmp    DWORD PTR ds:0xc001f9f0,eax
c000ef8e:	75 23                	jne    c000efb3 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000ef90:	a1 8c 37 02 c0       	mov    eax,ds:0xc002378c
c000ef95:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ef99:	89 06                	mov    DWORD PTR [esi],eax
c000ef9b:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c000efa0:	89 07                	mov    DWORD PTR [edi],eax
c000efa2:	a1 84 37 02 c0       	mov    eax,ds:0xc0023784
c000efa7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000efaa:	a1 80 37 02 c0       	mov    eax,ds:0xc0023780
c000efaf:	89 02                	mov    DWORD PTR [edx],eax
c000efb1:	eb 3f                	jmp    c000eff2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000efb3:	31 c9                	xor    ecx,ecx
c000efb5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000efb9:	0f a2                	cpuid  
c000efbb:	89 06                	mov    DWORD PTR [esi],eax
c000efbd:	89 1f                	mov    DWORD PTR [edi],ebx
c000efbf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000efc3:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000efc6:	89 10                	mov    DWORD PTR [eax],edx
c000efc8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000efcc:	a3 f0 f9 01 c0       	mov    ds:0xc001f9f0,eax
c000efd1:	8b 06                	mov    eax,DWORD PTR [esi]
c000efd3:	a3 8c 37 02 c0       	mov    ds:0xc002378c,eax
c000efd8:	8b 07                	mov    eax,DWORD PTR [edi]
c000efda:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c000efdf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000efe2:	a3 84 37 02 c0       	mov    ds:0xc0023784,eax
c000efe7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000efeb:	8b 00                	mov    eax,DWORD PTR [eax]
c000efed:	a3 80 37 02 c0       	mov    ds:0xc0023780,eax
c000eff2:	5b                   	pop    ebx
c000eff3:	5e                   	pop    esi
c000eff4:	5f                   	pop    edi
c000eff5:	5d                   	pop    ebp
c000eff6:	c3                   	ret    
c000eff7:	90                   	nop

c000eff8 <CPU::cpuidCheckEDX(unsigned int)>:
c000eff8:	83 ec 10             	sub    esp,0x10
c000effb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000efff:	50                   	push   eax
c000f000:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f004:	50                   	push   eax
c000f005:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f009:	50                   	push   eax
c000f00a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f00e:	50                   	push   eax
c000f00f:	6a 01                	push   0x1
c000f011:	e8 5e ff ff ff       	call   c000ef74 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f016:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f01a:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f01e:	0f 95 c0             	setne  al
c000f021:	83 c4 24             	add    esp,0x24
c000f024:	c3                   	ret    
c000f025:	90                   	nop

c000f026 <CPU::cpuidCheckECX(unsigned int)>:
c000f026:	83 ec 10             	sub    esp,0x10
c000f029:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f02d:	50                   	push   eax
c000f02e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f032:	50                   	push   eax
c000f033:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f037:	50                   	push   eax
c000f038:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f03c:	50                   	push   eax
c000f03d:	6a 01                	push   0x1
c000f03f:	e8 30 ff ff ff       	call   c000ef74 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f044:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f048:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f04c:	0f 95 c0             	setne  al
c000f04f:	83 c4 24             	add    esp,0x24
c000f052:	c3                   	ret    
c000f053:	90                   	nop

c000f054 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f054:	83 ec 10             	sub    esp,0x10
c000f057:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f05b:	50                   	push   eax
c000f05c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f060:	50                   	push   eax
c000f061:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f065:	50                   	push   eax
c000f066:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f06a:	50                   	push   eax
c000f06b:	6a 07                	push   0x7
c000f06d:	e8 02 ff ff ff       	call   c000ef74 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f072:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f076:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f07a:	0f 95 c0             	setne  al
c000f07d:	83 c4 24             	add    esp,0x24
c000f080:	c3                   	ret    
c000f081:	90                   	nop

c000f082 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f082:	83 ec 10             	sub    esp,0x10
c000f085:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f089:	50                   	push   eax
c000f08a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f08e:	50                   	push   eax
c000f08f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f093:	50                   	push   eax
c000f094:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f098:	50                   	push   eax
c000f099:	6a 07                	push   0x7
c000f09b:	e8 d4 fe ff ff       	call   c000ef74 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f0a0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f0a4:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f0a8:	0f 95 c0             	setne  al
c000f0ab:	83 c4 24             	add    esp,0x24
c000f0ae:	c3                   	ret    
c000f0af:	90                   	nop

c000f0b0 <CPU::CPU()>:
c000f0b0:	83 ec 0c             	sub    esp,0xc
c000f0b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0b7:	83 ec 08             	sub    esp,0x8
c000f0ba:	68 99 e6 01 c0       	push   0xc001e699
c000f0bf:	50                   	push   eax
c000f0c0:	e8 eb c9 ff ff       	call   c000bab0 <Device::Device(char const*)>
c000f0c5:	83 c4 10             	add    esp,0x10
c000f0c8:	ba 20 e7 01 c0       	mov    edx,0xc001e720
c000f0cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0d1:	89 10                	mov    DWORD PTR [eax],edx
c000f0d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0d7:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f0e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0e5:	05 78 01 00 00       	add    eax,0x178
c000f0ea:	83 ec 0c             	sub    esp,0xc
c000f0ed:	50                   	push   eax
c000f0ee:	e8 87 7f ff ff       	call   c000707a <GDT::GDT()>
c000f0f3:	83 c4 10             	add    esp,0x10
c000f0f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0fa:	05 7c 09 00 00       	add    eax,0x97c
c000f0ff:	83 ec 0c             	sub    esp,0xc
c000f102:	50                   	push   eax
c000f103:	e8 ac 81 ff ff       	call   c00072b4 <IDT::IDT()>
c000f108:	83 c4 10             	add    esp,0x10
c000f10b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f10f:	05 7c 11 00 00       	add    eax,0x117c
c000f114:	83 ec 0c             	sub    esp,0xc
c000f117:	50                   	push   eax
c000f118:	e8 ab 9a ff ff       	call   c0008bc8 <TSS::TSS()>
c000f11d:	83 c4 10             	add    esp,0x10
c000f120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f124:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f12b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f12f:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000f139:	90                   	nop
c000f13a:	83 c4 0c             	add    esp,0xc
c000f13d:	c3                   	ret    

c000f13e <CPU::displayFeatures()>:
c000f13e:	c3                   	ret    
c000f13f:	90                   	nop

c000f140 <CPU::detectFeatures()>:
c000f140:	55                   	push   ebp
c000f141:	57                   	push   edi
c000f142:	56                   	push   esi
c000f143:	53                   	push   ebx
c000f144:	83 ec 30             	sub    esp,0x30
c000f147:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f14b:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f155:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f15c:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f162:	6a 0d                	push   0xd
c000f164:	6a 00                	push   0x0
c000f166:	55                   	push   ebp
c000f167:	e8 64 13 ff ff       	call   c00004d0 <memset>
c000f16c:	83 c4 10             	add    esp,0x10
c000f16f:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c000f174:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f17b:	0f 84 d5 05 00 00    	je     c000f756 <CPU::detectFeatures()+0x616>
c000f181:	83 ec 0c             	sub    esp,0xc
c000f184:	89 ef                	mov    edi,ebp
c000f186:	6a 10                	push   0x10
c000f188:	e8 6b fe ff ff       	call   c000eff8 <CPU::cpuidCheckEDX(unsigned int)>
c000f18d:	83 e0 01             	and    eax,0x1
c000f190:	8d 14 00             	lea    edx,[eax+eax*1]
c000f193:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f199:	83 e0 fd             	and    eax,0xfffffffd
c000f19c:	09 d0                	or     eax,edx
c000f19e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f1a4:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f1ab:	e8 48 fe ff ff       	call   c000eff8 <CPU::cpuidCheckEDX(unsigned int)>
c000f1b0:	83 e0 01             	and    eax,0x1
c000f1b3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f1ba:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f1c0:	83 e0 fb             	and    eax,0xfffffffb
c000f1c3:	09 d0                	or     eax,edx
c000f1c5:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f1cb:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f1d2:	e8 21 fe ff ff       	call   c000eff8 <CPU::cpuidCheckEDX(unsigned int)>
c000f1d7:	83 e0 01             	and    eax,0x1
c000f1da:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f1e1:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f1e7:	83 e0 f7             	and    eax,0xfffffff7
c000f1ea:	09 d0                	or     eax,edx
c000f1ec:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f1f2:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f1f9:	e8 fa fd ff ff       	call   c000eff8 <CPU::cpuidCheckEDX(unsigned int)>
c000f1fe:	83 e0 01             	and    eax,0x1
c000f201:	c1 e0 04             	shl    eax,0x4
c000f204:	88 c2                	mov    dl,al
c000f206:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f20c:	83 e0 ef             	and    eax,0xffffffef
c000f20f:	09 d0                	or     eax,edx
c000f211:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f217:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f21e:	e8 d5 fd ff ff       	call   c000eff8 <CPU::cpuidCheckEDX(unsigned int)>
c000f223:	83 e0 01             	and    eax,0x1
c000f226:	c1 e0 05             	shl    eax,0x5
c000f229:	88 c2                	mov    dl,al
c000f22b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f231:	83 e0 df             	and    eax,0xffffffdf
c000f234:	09 d0                	or     eax,edx
c000f236:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f23c:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f243:	e8 b0 fd ff ff       	call   c000eff8 <CPU::cpuidCheckEDX(unsigned int)>
c000f248:	83 e0 01             	and    eax,0x1
c000f24b:	8d 14 00             	lea    edx,[eax+eax*1]
c000f24e:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f254:	83 e0 fd             	and    eax,0xfffffffd
c000f257:	09 d0                	or     eax,edx
c000f259:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f25f:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f266:	e8 8d fd ff ff       	call   c000eff8 <CPU::cpuidCheckEDX(unsigned int)>
c000f26b:	83 e0 01             	and    eax,0x1
c000f26e:	c1 e0 06             	shl    eax,0x6
c000f271:	88 c2                	mov    dl,al
c000f273:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f279:	83 e0 bf             	and    eax,0xffffffbf
c000f27c:	09 d0                	or     eax,edx
c000f27e:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f284:	58                   	pop    eax
c000f285:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f289:	50                   	push   eax
c000f28a:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f28e:	50                   	push   eax
c000f28f:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f293:	56                   	push   esi
c000f294:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f298:	50                   	push   eax
c000f299:	6a 00                	push   0x0
c000f29b:	e8 d4 fc ff ff       	call   c000ef74 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f2a0:	b8 04 00 00 00       	mov    eax,0x4
c000f2a5:	89 c1                	mov    ecx,eax
c000f2a7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f2a9:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f2af:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f2b3:	89 c1                	mov    ecx,eax
c000f2b5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f2b7:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f2bd:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f2c1:	89 c1                	mov    ecx,eax
c000f2c3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f2c5:	83 c4 18             	add    esp,0x18
c000f2c8:	68 a8 e5 01 c0       	push   0xc001e5a8
c000f2cd:	55                   	push   ebp
c000f2ce:	e8 0d 14 ff ff       	call   c00006e0 <strcmp>
c000f2d3:	83 c4 10             	add    esp,0x10
c000f2d6:	85 c0                	test   eax,eax
c000f2d8:	75 0f                	jne    c000f2e9 <CPU::detectFeatures()+0x1a9>
c000f2da:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f2e4:	e9 22 02 00 00       	jmp    c000f50b <CPU::detectFeatures()+0x3cb>
c000f2e9:	50                   	push   eax
c000f2ea:	50                   	push   eax
c000f2eb:	68 b5 e5 01 c0       	push   0xc001e5b5
c000f2f0:	55                   	push   ebp
c000f2f1:	e8 ea 13 ff ff       	call   c00006e0 <strcmp>
c000f2f6:	83 c4 10             	add    esp,0x10
c000f2f9:	85 c0                	test   eax,eax
c000f2fb:	74 dd                	je     c000f2da <CPU::detectFeatures()+0x19a>
c000f2fd:	50                   	push   eax
c000f2fe:	50                   	push   eax
c000f2ff:	68 c2 e5 01 c0       	push   0xc001e5c2
c000f304:	55                   	push   ebp
c000f305:	e8 d6 13 ff ff       	call   c00006e0 <strcmp>
c000f30a:	83 c4 10             	add    esp,0x10
c000f30d:	85 c0                	test   eax,eax
c000f30f:	74 2a                	je     c000f33b <CPU::detectFeatures()+0x1fb>
c000f311:	50                   	push   eax
c000f312:	50                   	push   eax
c000f313:	68 cf e5 01 c0       	push   0xc001e5cf
c000f318:	55                   	push   ebp
c000f319:	e8 c2 13 ff ff       	call   c00006e0 <strcmp>
c000f31e:	83 c4 10             	add    esp,0x10
c000f321:	85 c0                	test   eax,eax
c000f323:	74 16                	je     c000f33b <CPU::detectFeatures()+0x1fb>
c000f325:	50                   	push   eax
c000f326:	50                   	push   eax
c000f327:	68 dc e5 01 c0       	push   0xc001e5dc
c000f32c:	55                   	push   ebp
c000f32d:	e8 ae 13 ff ff       	call   c00006e0 <strcmp>
c000f332:	83 c4 10             	add    esp,0x10
c000f335:	85 c0                	test   eax,eax
c000f337:	74 48                	je     c000f381 <CPU::detectFeatures()+0x241>
c000f339:	eb 0f                	jmp    c000f34a <CPU::detectFeatures()+0x20a>
c000f33b:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f345:	e9 c1 01 00 00       	jmp    c000f50b <CPU::detectFeatures()+0x3cb>
c000f34a:	50                   	push   eax
c000f34b:	50                   	push   eax
c000f34c:	68 e9 e5 01 c0       	push   0xc001e5e9
c000f351:	55                   	push   ebp
c000f352:	e8 89 13 ff ff       	call   c00006e0 <strcmp>
c000f357:	83 c4 10             	add    esp,0x10
c000f35a:	85 c0                	test   eax,eax
c000f35c:	74 23                	je     c000f381 <CPU::detectFeatures()+0x241>
c000f35e:	57                   	push   edi
c000f35f:	57                   	push   edi
c000f360:	68 f6 e5 01 c0       	push   0xc001e5f6
c000f365:	55                   	push   ebp
c000f366:	e8 75 13 ff ff       	call   c00006e0 <strcmp>
c000f36b:	83 c4 10             	add    esp,0x10
c000f36e:	85 c0                	test   eax,eax
c000f370:	75 1e                	jne    c000f390 <CPU::detectFeatures()+0x250>
c000f372:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f37c:	e9 8a 01 00 00       	jmp    c000f50b <CPU::detectFeatures()+0x3cb>
c000f381:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000f38b:	e9 7b 01 00 00       	jmp    c000f50b <CPU::detectFeatures()+0x3cb>
c000f390:	56                   	push   esi
c000f391:	56                   	push   esi
c000f392:	68 03 e6 01 c0       	push   0xc001e603
c000f397:	55                   	push   ebp
c000f398:	e8 43 13 ff ff       	call   c00006e0 <strcmp>
c000f39d:	83 c4 10             	add    esp,0x10
c000f3a0:	85 c0                	test   eax,eax
c000f3a2:	75 0f                	jne    c000f3b3 <CPU::detectFeatures()+0x273>
c000f3a4:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000f3ae:	e9 58 01 00 00       	jmp    c000f50b <CPU::detectFeatures()+0x3cb>
c000f3b3:	51                   	push   ecx
c000f3b4:	51                   	push   ecx
c000f3b5:	68 c2 e5 01 c0       	push   0xc001e5c2
c000f3ba:	55                   	push   ebp
c000f3bb:	e8 20 13 ff ff       	call   c00006e0 <strcmp>
c000f3c0:	83 c4 10             	add    esp,0x10
c000f3c3:	85 c0                	test   eax,eax
c000f3c5:	75 0f                	jne    c000f3d6 <CPU::detectFeatures()+0x296>
c000f3c7:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000f3d1:	e9 35 01 00 00       	jmp    c000f50b <CPU::detectFeatures()+0x3cb>
c000f3d6:	52                   	push   edx
c000f3d7:	52                   	push   edx
c000f3d8:	68 10 e6 01 c0       	push   0xc001e610
c000f3dd:	55                   	push   ebp
c000f3de:	e8 fd 12 ff ff       	call   c00006e0 <strcmp>
c000f3e3:	83 c4 10             	add    esp,0x10
c000f3e6:	85 c0                	test   eax,eax
c000f3e8:	75 0f                	jne    c000f3f9 <CPU::detectFeatures()+0x2b9>
c000f3ea:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000f3f4:	e9 12 01 00 00       	jmp    c000f50b <CPU::detectFeatures()+0x3cb>
c000f3f9:	50                   	push   eax
c000f3fa:	50                   	push   eax
c000f3fb:	68 1d e6 01 c0       	push   0xc001e61d
c000f400:	55                   	push   ebp
c000f401:	e8 da 12 ff ff       	call   c00006e0 <strcmp>
c000f406:	83 c4 10             	add    esp,0x10
c000f409:	85 c0                	test   eax,eax
c000f40b:	75 0f                	jne    c000f41c <CPU::detectFeatures()+0x2dc>
c000f40d:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000f417:	e9 ef 00 00 00       	jmp    c000f50b <CPU::detectFeatures()+0x3cb>
c000f41c:	50                   	push   eax
c000f41d:	50                   	push   eax
c000f41e:	68 2a e6 01 c0       	push   0xc001e62a
c000f423:	55                   	push   ebp
c000f424:	e8 b7 12 ff ff       	call   c00006e0 <strcmp>
c000f429:	83 c4 10             	add    esp,0x10
c000f42c:	85 c0                	test   eax,eax
c000f42e:	75 0f                	jne    c000f43f <CPU::detectFeatures()+0x2ff>
c000f430:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000f43a:	e9 cc 00 00 00       	jmp    c000f50b <CPU::detectFeatures()+0x3cb>
c000f43f:	50                   	push   eax
c000f440:	50                   	push   eax
c000f441:	68 37 e6 01 c0       	push   0xc001e637
c000f446:	55                   	push   ebp
c000f447:	e8 94 12 ff ff       	call   c00006e0 <strcmp>
c000f44c:	83 c4 10             	add    esp,0x10
c000f44f:	85 c0                	test   eax,eax
c000f451:	75 0f                	jne    c000f462 <CPU::detectFeatures()+0x322>
c000f453:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000f45d:	e9 a9 00 00 00       	jmp    c000f50b <CPU::detectFeatures()+0x3cb>
c000f462:	50                   	push   eax
c000f463:	50                   	push   eax
c000f464:	68 44 e6 01 c0       	push   0xc001e644
c000f469:	55                   	push   ebp
c000f46a:	e8 71 12 ff ff       	call   c00006e0 <strcmp>
c000f46f:	83 c4 10             	add    esp,0x10
c000f472:	85 c0                	test   eax,eax
c000f474:	75 0f                	jne    c000f485 <CPU::detectFeatures()+0x345>
c000f476:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000f480:	e9 86 00 00 00       	jmp    c000f50b <CPU::detectFeatures()+0x3cb>
c000f485:	50                   	push   eax
c000f486:	50                   	push   eax
c000f487:	68 51 e6 01 c0       	push   0xc001e651
c000f48c:	55                   	push   ebp
c000f48d:	e8 4e 12 ff ff       	call   c00006e0 <strcmp>
c000f492:	83 c4 10             	add    esp,0x10
c000f495:	85 c0                	test   eax,eax
c000f497:	75 0c                	jne    c000f4a5 <CPU::detectFeatures()+0x365>
c000f499:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000f4a3:	eb 66                	jmp    c000f50b <CPU::detectFeatures()+0x3cb>
c000f4a5:	50                   	push   eax
c000f4a6:	50                   	push   eax
c000f4a7:	68 5e e6 01 c0       	push   0xc001e65e
c000f4ac:	55                   	push   ebp
c000f4ad:	e8 2e 12 ff ff       	call   c00006e0 <strcmp>
c000f4b2:	83 c4 10             	add    esp,0x10
c000f4b5:	85 c0                	test   eax,eax
c000f4b7:	75 0c                	jne    c000f4c5 <CPU::detectFeatures()+0x385>
c000f4b9:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000f4c3:	eb 46                	jmp    c000f50b <CPU::detectFeatures()+0x3cb>
c000f4c5:	57                   	push   edi
c000f4c6:	57                   	push   edi
c000f4c7:	68 6b e6 01 c0       	push   0xc001e66b
c000f4cc:	55                   	push   ebp
c000f4cd:	e8 0e 12 ff ff       	call   c00006e0 <strcmp>
c000f4d2:	83 c4 10             	add    esp,0x10
c000f4d5:	85 c0                	test   eax,eax
c000f4d7:	74 e0                	je     c000f4b9 <CPU::detectFeatures()+0x379>
c000f4d9:	56                   	push   esi
c000f4da:	56                   	push   esi
c000f4db:	68 78 e6 01 c0       	push   0xc001e678
c000f4e0:	55                   	push   ebp
c000f4e1:	e8 fa 11 ff ff       	call   c00006e0 <strcmp>
c000f4e6:	83 c4 10             	add    esp,0x10
c000f4e9:	85 c0                	test   eax,eax
c000f4eb:	74 cc                	je     c000f4b9 <CPU::detectFeatures()+0x379>
c000f4ed:	51                   	push   ecx
c000f4ee:	51                   	push   ecx
c000f4ef:	68 85 e6 01 c0       	push   0xc001e685
c000f4f4:	55                   	push   ebp
c000f4f5:	e8 e6 11 ff ff       	call   c00006e0 <strcmp>
c000f4fa:	83 c4 10             	add    esp,0x10
c000f4fd:	85 c0                	test   eax,eax
c000f4ff:	74 b8                	je     c000f4b9 <CPU::detectFeatures()+0x379>
c000f501:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000f50b:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000f510:	0f 86 be 00 00 00    	jbe    c000f5d4 <CPU::detectFeatures()+0x494>
c000f516:	83 ec 0c             	sub    esp,0xc
c000f519:	68 80 00 00 00       	push   0x80
c000f51e:	e8 31 fb ff ff       	call   c000f054 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f523:	83 e0 01             	and    eax,0x1
c000f526:	c1 e0 06             	shl    eax,0x6
c000f529:	88 c2                	mov    dl,al
c000f52b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f531:	83 e0 bf             	and    eax,0xffffffbf
c000f534:	09 d0                	or     eax,edx
c000f536:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f53c:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000f543:	e8 0c fb ff ff       	call   c000f054 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f548:	83 e0 01             	and    eax,0x1
c000f54b:	c1 e0 04             	shl    eax,0x4
c000f54e:	88 c2                	mov    dl,al
c000f550:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f556:	83 e0 ef             	and    eax,0xffffffef
c000f559:	09 d0                	or     eax,edx
c000f55b:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f561:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000f568:	e8 e7 fa ff ff       	call   c000f054 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f56d:	c1 e0 07             	shl    eax,0x7
c000f570:	88 c2                	mov    dl,al
c000f572:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f578:	83 e0 7f             	and    eax,0x7f
c000f57b:	09 d0                	or     eax,edx
c000f57d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f583:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000f58a:	e8 f3 fa ff ff       	call   c000f082 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f58f:	83 e0 01             	and    eax,0x1
c000f592:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f599:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f59f:	83 e0 f7             	and    eax,0xfffffff7
c000f5a2:	09 d0                	or     eax,edx
c000f5a4:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f5aa:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000f5b1:	e8 cc fa ff ff       	call   c000f082 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f5b6:	83 c4 10             	add    esp,0x10
c000f5b9:	83 e0 01             	and    eax,0x1
c000f5bc:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f5c3:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f5c9:	83 e0 fb             	and    eax,0xfffffffb
c000f5cc:	09 d0                	or     eax,edx
c000f5ce:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f5d4:	83 ec 0c             	sub    esp,0xc
c000f5d7:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f5db:	50                   	push   eax
c000f5dc:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f5e0:	50                   	push   eax
c000f5e1:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f5e5:	56                   	push   esi
c000f5e6:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f5ea:	50                   	push   eax
c000f5eb:	6a 01                	push   0x1
c000f5ed:	e8 82 f9 ff ff       	call   c000ef74 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f5f2:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f5f6:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000f5fc:	88 ca                	mov    dl,cl
c000f5fe:	83 e0 f0             	and    eax,0xfffffff0
c000f601:	83 e2 0f             	and    edx,0xf
c000f604:	09 d0                	or     eax,edx
c000f606:	88 ca                	mov    dl,cl
c000f608:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000f60e:	c0 ea 04             	shr    dl,0x4
c000f611:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000f615:	0f b6 c2             	movzx  eax,dl
c000f618:	83 c4 20             	add    esp,0x20
c000f61b:	c1 e0 06             	shl    eax,0x6
c000f61e:	89 c7                	mov    edi,eax
c000f620:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000f626:	66 25 3f c0          	and    ax,0xc03f
c000f62a:	09 f8                	or     eax,edi
c000f62c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000f633:	89 c8                	mov    eax,ecx
c000f635:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000f63c:	c1 e8 08             	shr    eax,0x8
c000f63f:	83 e5 3f             	and    ebp,0x3f
c000f642:	83 e0 0f             	and    eax,0xf
c000f645:	89 c7                	mov    edi,eax
c000f647:	c1 e7 06             	shl    edi,0x6
c000f64a:	09 ef                	or     edi,ebp
c000f64c:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000f653:	89 fa                	mov    edx,edi
c000f655:	83 e5 c0             	and    ebp,0xffffffc0
c000f658:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000f65e:	88 c2                	mov    dl,al
c000f660:	c0 ea 02             	shr    dl,0x2
c000f663:	89 d7                	mov    edi,edx
c000f665:	09 ef                	or     edi,ebp
c000f667:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000f66d:	89 fa                	mov    edx,edi
c000f66f:	83 e5 cf             	and    ebp,0xffffffcf
c000f672:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000f678:	89 cf                	mov    edi,ecx
c000f67a:	c1 ef 0c             	shr    edi,0xc
c000f67d:	83 e7 03             	and    edi,0x3
c000f680:	c1 e7 04             	shl    edi,0x4
c000f683:	09 ef                	or     edi,ebp
c000f685:	3c 06                	cmp    al,0x6
c000f687:	89 fa                	mov    edx,edi
c000f689:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000f68f:	74 04                	je     c000f695 <CPU::detectFeatures()+0x555>
c000f691:	3c 0f                	cmp    al,0xf
c000f693:	75 5c                	jne    c000f6f1 <CPU::detectFeatures()+0x5b1>
c000f695:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000f699:	89 cf                	mov    edi,ecx
c000f69b:	c1 ef 10             	shr    edi,0x10
c000f69e:	c1 e7 04             	shl    edi,0x4
c000f6a1:	09 fa                	or     edx,edi
c000f6a3:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000f6a9:	0f b6 d2             	movzx  edx,dl
c000f6ac:	66 81 e7 3f c0       	and    di,0xc03f
c000f6b1:	c1 e2 06             	shl    edx,0x6
c000f6b4:	09 fa                	or     edx,edi
c000f6b6:	3c 0f                	cmp    al,0xf
c000f6b8:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000f6bf:	75 30                	jne    c000f6f1 <CPU::detectFeatures()+0x5b1>
c000f6c1:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000f6c7:	c1 e9 14             	shr    ecx,0x14
c000f6ca:	83 e0 3f             	and    eax,0x3f
c000f6cd:	83 c1 0f             	add    ecx,0xf
c000f6d0:	88 ca                	mov    dl,cl
c000f6d2:	c0 e9 02             	shr    cl,0x2
c000f6d5:	c1 e2 06             	shl    edx,0x6
c000f6d8:	09 d0                	or     eax,edx
c000f6da:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000f6e0:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000f6e6:	83 e0 c0             	and    eax,0xffffffc0
c000f6e9:	09 c1                	or     ecx,eax
c000f6eb:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000f6f1:	83 ec 0c             	sub    esp,0xc
c000f6f4:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000f6fb:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f6ff:	50                   	push   eax
c000f700:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000f704:	55                   	push   ebp
c000f705:	56                   	push   esi
c000f706:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000f70a:	57                   	push   edi
c000f70b:	68 00 00 00 80       	push   0x80000000
c000f710:	e8 5f f8 ff ff       	call   c000ef74 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f715:	83 c4 20             	add    esp,0x20
c000f718:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000f720:	76 22                	jbe    c000f744 <CPU::detectFeatures()+0x604>
c000f722:	83 ec 0c             	sub    esp,0xc
c000f725:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f729:	50                   	push   eax
c000f72a:	55                   	push   ebp
c000f72b:	56                   	push   esi
c000f72c:	57                   	push   edi
c000f72d:	68 01 00 00 80       	push   0x80000001
c000f732:	e8 3d f8 ff ff       	call   c000ef74 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f737:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000f741:	83 c4 20             	add    esp,0x20
c000f744:	52                   	push   edx
c000f745:	52                   	push   edx
c000f746:	68 91 e6 01 c0       	push   0xc001e691
c000f74b:	53                   	push   ebx
c000f74c:	e8 51 c3 ff ff       	call   c000baa2 <Device::setName(char const*)>
c000f751:	83 c4 10             	add    esp,0x10
c000f754:	eb 67                	jmp    c000f7bd <CPU::detectFeatures()+0x67d>
c000f756:	50                   	push   eax
c000f757:	50                   	push   eax
c000f758:	68 f6 e5 01 c0       	push   0xc001e5f6
c000f75d:	55                   	push   ebp
c000f75e:	e8 9d 0e ff ff       	call   c0000600 <strcpy>
c000f763:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f76d:	e8 51 0a ff ff       	call   c00001c3 <is486>
c000f772:	83 c4 10             	add    esp,0x10
c000f775:	85 c0                	test   eax,eax
c000f777:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f77d:	74 1d                	je     c000f79c <CPU::detectFeatures()+0x65c>
c000f77f:	83 c8 07             	or     eax,0x7
c000f782:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f788:	0f 20 c0             	mov    eax,cr0
c000f78b:	83 e0 14             	and    eax,0x14
c000f78e:	83 f8 04             	cmp    eax,0x4
c000f791:	75 0e                	jne    c000f7a1 <CPU::detectFeatures()+0x661>
c000f793:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000f79a:	eb 21                	jmp    c000f7bd <CPU::detectFeatures()+0x67d>
c000f79c:	83 e0 f8             	and    eax,0xfffffff8
c000f79f:	eb e1                	jmp    c000f782 <CPU::detectFeatures()+0x642>
c000f7a1:	e8 f8 09 ff ff       	call   c000019e <hasLegacyFPU>
c000f7a6:	83 e0 01             	and    eax,0x1
c000f7a9:	8d 14 00             	lea    edx,[eax+eax*1]
c000f7ac:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f7b2:	83 e0 fd             	and    eax,0xfffffffd
c000f7b5:	09 d0                	or     eax,edx
c000f7b7:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f7bd:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000f7c4:	74 0e                	je     c000f7d4 <CPU::detectFeatures()+0x694>
c000f7c6:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c000f7cb:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000f7d2:	eb 20                	jmp    c000f7f4 <CPU::detectFeatures()+0x6b4>
c000f7d4:	e8 c5 09 ff ff       	call   c000019e <hasLegacyFPU>
c000f7d9:	83 e0 01             	and    eax,0x1
c000f7dc:	8d 14 00             	lea    edx,[eax+eax*1]
c000f7df:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f7e5:	83 e0 fd             	and    eax,0xfffffffd
c000f7e8:	09 d0                	or     eax,edx
c000f7ea:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f7f0:	a8 02                	test   al,0x2
c000f7f2:	75 d2                	jne    c000f7c6 <CPU::detectFeatures()+0x686>
c000f7f4:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000f7fb:	83 c4 2c             	add    esp,0x2c
c000f7fe:	5b                   	pop    ebx
c000f7ff:	5e                   	pop    esi
c000f800:	5f                   	pop    edi
c000f801:	5d                   	pop    ebp
c000f802:	c3                   	ret    
c000f803:	90                   	nop

c000f804 <CPU::setupSMEP()>:
c000f804:	0f 20 e0             	mov    eax,cr4
c000f807:	0d 00 00 10 00       	or     eax,0x100000
c000f80c:	0f 22 e0             	mov    cr4,eax
c000f80f:	c3                   	ret    

c000f810 <CPU::setupUMIP()>:
c000f810:	0f 20 e0             	mov    eax,cr4
c000f813:	80 cc 08             	or     ah,0x8
c000f816:	0f 22 e0             	mov    cr4,eax
c000f819:	c3                   	ret    

c000f81a <CPU::setupTSC()>:
c000f81a:	0f 20 e0             	mov    eax,cr4
c000f81d:	83 c8 04             	or     eax,0x4
c000f820:	0f 22 e0             	mov    cr4,eax
c000f823:	c3                   	ret    

c000f824 <CPU::setupLargePages()>:
c000f824:	0f 20 e0             	mov    eax,cr4
c000f827:	83 c8 10             	or     eax,0x10
c000f82a:	0f 22 e0             	mov    cr4,eax
c000f82d:	c3                   	ret    

c000f82e <CPU::setupPAT()>:
c000f82e:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c000f833:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000f83a:	74 2c                	je     c000f868 <CPU::setupPAT()+0x3a>
c000f83c:	53                   	push   ebx
c000f83d:	83 ec 10             	sub    esp,0x10
c000f840:	68 77 02 00 00       	push   0x277
c000f845:	50                   	push   eax
c000f846:	e8 a7 75 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c000f84b:	83 e2 f8             	and    edx,0xfffffff8
c000f84e:	83 ca 01             	or     edx,0x1
c000f851:	52                   	push   edx
c000f852:	50                   	push   eax
c000f853:	68 77 02 00 00       	push   0x277
c000f858:	ff 35 18 0d 02 c0    	push   DWORD PTR ds:0xc0020d18
c000f85e:	e8 bb 75 ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c000f863:	83 c4 28             	add    esp,0x28
c000f866:	5b                   	pop    ebx
c000f867:	c3                   	ret    
c000f868:	c3                   	ret    
c000f869:	90                   	nop

c000f86a <CPU::setupMTRR()>:
c000f86a:	c3                   	ret    
c000f86b:	90                   	nop

c000f86c <CPU::setupGlobalPages()>:
c000f86c:	0f 20 e0             	mov    eax,cr4
c000f86f:	0c 80                	or     al,0x80
c000f871:	0f 22 e0             	mov    cr4,eax
c000f874:	c3                   	ret    
c000f875:	90                   	nop

c000f876 <CPU::allowUsermodeDataAccess()>:
c000f876:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f87a:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f881:	74 03                	je     c000f886 <CPU::allowUsermodeDataAccess()+0x10>
c000f883:	0f 01 cb             	stac   
c000f886:	c3                   	ret    
c000f887:	90                   	nop

c000f888 <CPU::prohibitUsermodeDataAccess()>:
c000f888:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f88c:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f893:	74 03                	je     c000f898 <CPU::prohibitUsermodeDataAccess()+0x10>
c000f895:	0f 01 ca             	clac   
c000f898:	c3                   	ret    
c000f899:	90                   	nop

c000f89a <CPU::setupSMAP()>:
c000f89a:	0f 20 e0             	mov    eax,cr4
c000f89d:	0d 00 00 20 00       	or     eax,0x200000
c000f8a2:	0f 22 e0             	mov    cr4,eax
c000f8a5:	eb e1                	jmp    c000f888 <CPU::prohibitUsermodeDataAccess()>
c000f8a7:	90                   	nop

c000f8a8 <CPU::setupFeatures()>:
c000f8a8:	53                   	push   ebx
c000f8a9:	83 ec 08             	sub    esp,0x8
c000f8ac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f8b0:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000f8b7:	74 18                	je     c000f8d1 <CPU::setupFeatures()+0x29>
c000f8b9:	83 ec 0c             	sub    esp,0xc
c000f8bc:	68 9d e6 01 c0       	push   0xc001e69d
c000f8c1:	e8 12 ac ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000f8c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f8c9:	e8 42 ff ff ff       	call   c000f810 <CPU::setupUMIP()>
c000f8ce:	83 c4 10             	add    esp,0x10
c000f8d1:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000f8d8:	74 18                	je     c000f8f2 <CPU::setupFeatures()+0x4a>
c000f8da:	83 ec 0c             	sub    esp,0xc
c000f8dd:	68 a7 e6 01 c0       	push   0xc001e6a7
c000f8e2:	e8 f1 ab ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000f8e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f8ea:	e8 2b ff ff ff       	call   c000f81a <CPU::setupTSC()>
c000f8ef:	83 c4 10             	add    esp,0x10
c000f8f2:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000f8f9:	74 18                	je     c000f913 <CPU::setupFeatures()+0x6b>
c000f8fb:	83 ec 0c             	sub    esp,0xc
c000f8fe:	68 b0 e6 01 c0       	push   0xc001e6b0
c000f903:	e8 d0 ab ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000f908:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f90b:	e8 14 ff ff ff       	call   c000f824 <CPU::setupLargePages()>
c000f910:	83 c4 10             	add    esp,0x10
c000f913:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000f91a:	74 18                	je     c000f934 <CPU::setupFeatures()+0x8c>
c000f91c:	83 ec 0c             	sub    esp,0xc
c000f91f:	68 b9 e6 01 c0       	push   0xc001e6b9
c000f924:	e8 af ab ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000f929:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f92c:	e8 3b ff ff ff       	call   c000f86c <CPU::setupGlobalPages()>
c000f931:	83 c4 10             	add    esp,0x10
c000f934:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000f93b:	74 18                	je     c000f955 <CPU::setupFeatures()+0xad>
c000f93d:	83 ec 0c             	sub    esp,0xc
c000f940:	68 cb e6 01 c0       	push   0xc001e6cb
c000f945:	e8 8e ab ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c000f94a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f94d:	e8 dc fe ff ff       	call   c000f82e <CPU::setupPAT()>
c000f952:	83 c4 10             	add    esp,0x10
c000f955:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000f95c:	74 11                	je     c000f96f <CPU::setupFeatures()+0xc7>
c000f95e:	c7 44 24 10 d4 e6 01 c0 	mov    DWORD PTR [esp+0x10],0xc001e6d4
c000f966:	83 c4 08             	add    esp,0x8
c000f969:	5b                   	pop    ebx
c000f96a:	e9 69 ab ff ff       	jmp    c000a4d8 <Dbg::kprintf(char const*, ...)>
c000f96f:	83 c4 08             	add    esp,0x8
c000f972:	5b                   	pop    ebx
c000f973:	c3                   	ret    

c000f974 <CPU::open(int, int, void*)>:
c000f974:	57                   	push   edi
c000f975:	56                   	push   esi
c000f976:	53                   	push   ebx
c000f977:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f97b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f97f:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000f985:	83 ec 0c             	sub    esp,0xc
c000f988:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000f98e:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000f994:	50                   	push   eax
c000f995:	e8 42 77 ff ff       	call   c00070dc <GDT::setup()>
c000f99a:	83 c4 0c             	add    esp,0xc
c000f99d:	6a 00                	push   0x0
c000f99f:	68 ef be ad de       	push   0xdeadbeef
c000f9a4:	57                   	push   edi
c000f9a5:	e8 62 92 ff ff       	call   c0008c0c <TSS::setup(unsigned long, unsigned long)>
c000f9aa:	89 3c 24             	mov    DWORD PTR [esp],edi
c000f9ad:	e8 3a 92 ff ff       	call   c0008bec <TSS::flush()>
c000f9b2:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000f9b8:	89 04 24             	mov    DWORD PTR [esp],eax
c000f9bb:	e8 6a 79 ff ff       	call   c000732a <IDT::setup()>
c000f9c0:	b8 00 04 00 00       	mov    eax,0x400
c000f9c5:	0f 23 f8             	mov    db7,eax
c000f9c8:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000f9d2:	e8 be 80 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000f9d7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000f9dd:	89 30                	mov    DWORD PTR [eax],esi
c000f9df:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000f9e5:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000f9e8:	58                   	pop    eax
c000f9e9:	5a                   	pop    edx
c000f9ea:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000f9f0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f9f4:	e8 fd a1 ff ff       	call   c0009bf6 <VAS::setCPUSpecific(unsigned long)>
c000f9f9:	c7 04 24 de e6 01 c0 	mov    DWORD PTR [esp],0xc001e6de
c000fa00:	e8 c6 00 00 00       	call   c000facb <KeSetBootMessage(char const*)>
c000fa05:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa08:	e8 33 f7 ff ff       	call   c000f140 <CPU::detectFeatures()>
c000fa0d:	c7 04 24 01 e7 01 c0 	mov    DWORD PTR [esp],0xc001e701
c000fa14:	e8 b2 00 00 00       	call   c000facb <KeSetBootMessage(char const*)>
c000fa19:	e8 ea 5d 00 00       	call   c0015808 <HalInitialise()>
c000fa1e:	a1 30 0d 02 c0       	mov    eax,ds:0xc0020d30
c000fa23:	83 e0 10             	and    eax,0x10
c000fa26:	83 f8 01             	cmp    eax,0x1
c000fa29:	19 c0                	sbb    eax,eax
c000fa2b:	83 e0 46             	and    eax,0x46
c000fa2e:	83 c0 1e             	add    eax,0x1e
c000fa31:	89 04 24             	mov    DWORD PTR [esp],eax
c000fa34:	e8 60 d7 ff ff       	call   c000d199 <setupTimer(int)>
c000fa39:	83 c4 10             	add    esp,0x10
c000fa3c:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000fa42:	f6 05 30 0d 02 c0 20 	test   BYTE PTR ds:0xc0020d30,0x20
c000fa49:	74 0c                	je     c000fa57 <CPU::open(int, int, void*)+0xe3>
c000fa4b:	83 ec 0c             	sub    esp,0xc
c000fa4e:	53                   	push   ebx
c000fa4f:	e8 54 fe ff ff       	call   c000f8a8 <CPU::setupFeatures()>
c000fa54:	83 c4 10             	add    esp,0x10
c000fa57:	5b                   	pop    ebx
c000fa58:	31 c0                	xor    eax,eax
c000fa5a:	5e                   	pop    esi
c000fa5b:	5f                   	pop    edi
c000fa5c:	c3                   	ret    

c000fa5d <KeDisplaySplashScreen()>:
c000fa5d:	55                   	push   ebp
c000fa5e:	bd 05 00 00 00       	mov    ebp,0x5
c000fa63:	57                   	push   edi
c000fa64:	bf 00 fa 01 c0       	mov    edi,0xc001fa00
c000fa69:	56                   	push   esi
c000fa6a:	be 0a 00 00 00       	mov    esi,0xa
c000fa6f:	53                   	push   ebx
c000fa70:	31 db                	xor    ebx,ebx
c000fa72:	83 ec 0c             	sub    esp,0xc
c000fa75:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000fa78:	84 c0                	test   al,al
c000fa7a:	74 47                	je     c000fac3 <KeDisplaySplashScreen()+0x66>
c000fa7c:	80 bb 36 fa 01 c0 db 	cmp    BYTE PTR [ebx-0x3ffe05ca],0xdb
c000fa83:	75 13                	jne    c000fa98 <KeDisplaySplashScreen()+0x3b>
c000fa85:	0f b6 93 35 fa 01 c0 	movzx  edx,BYTE PTR [ebx-0x3ffe05cb]
c000fa8c:	83 e2 fe             	and    edx,0xfffffffe
c000fa8f:	81 fa ba 00 00 00    	cmp    edx,0xba
c000fa95:	75 01                	jne    c000fa98 <KeDisplaySplashScreen()+0x3b>
c000fa97:	46                   	inc    esi
c000fa98:	3c 0d                	cmp    al,0xd
c000fa9a:	74 24                	je     c000fac0 <KeDisplaySplashScreen()+0x63>
c000fa9c:	3c 0a                	cmp    al,0xa
c000fa9e:	75 0a                	jne    c000faaa <KeDisplaySplashScreen()+0x4d>
c000faa0:	45                   	inc    ebp
c000faa1:	be 0a 00 00 00       	mov    esi,0xa
c000faa6:	31 db                	xor    ebx,ebx
c000faa8:	eb 16                	jmp    c000fac0 <KeDisplaySplashScreen()+0x63>
c000faaa:	83 ec 0c             	sub    esp,0xc
c000faad:	8d 14 33             	lea    edx,[ebx+esi*1]
c000fab0:	55                   	push   ebp
c000fab1:	43                   	inc    ebx
c000fab2:	52                   	push   edx
c000fab3:	6a 00                	push   0x0
c000fab5:	6a 0e                	push   0xe
c000fab7:	50                   	push   eax
c000fab8:	e8 af 69 00 00       	call   c001646c <HalConsoleWriteCharacter(char, int, int, int, int)>
c000fabd:	83 c4 20             	add    esp,0x20
c000fac0:	47                   	inc    edi
c000fac1:	eb b2                	jmp    c000fa75 <KeDisplaySplashScreen()+0x18>
c000fac3:	83 c4 0c             	add    esp,0xc
c000fac6:	5b                   	pop    ebx
c000fac7:	5e                   	pop    esi
c000fac8:	5f                   	pop    edi
c000fac9:	5d                   	pop    ebp
c000faca:	c3                   	ret    

c000facb <KeSetBootMessage(char const*)>:
c000facb:	57                   	push   edi
c000facc:	56                   	push   esi
c000facd:	53                   	push   ebx
c000face:	81 ec a4 00 00 00    	sub    esp,0xa4
c000fad4:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000fadb:	68 9e 00 00 00       	push   0x9e
c000fae0:	6a 00                	push   0x0
c000fae2:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000fae6:	56                   	push   esi
c000fae7:	e8 e4 09 ff ff       	call   c00004d0 <memset>
c000faec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000faef:	e8 4c 0a ff ff       	call   c0000540 <strlen>
c000faf4:	ba 50 00 00 00       	mov    edx,0x50
c000faf9:	83 c4 10             	add    esp,0x10
c000fafc:	29 c2                	sub    edx,eax
c000fafe:	31 c9                	xor    ecx,ecx
c000fb00:	83 e2 fe             	and    edx,0xfffffffe
c000fb03:	01 f2                	add    edx,esi
c000fb05:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000fb0a:	84 c0                	test   al,al
c000fb0c:	74 0a                	je     c000fb18 <KeSetBootMessage(char const*)+0x4d>
c000fb0e:	80 cc 0f             	or     ah,0xf
c000fb11:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000fb15:	41                   	inc    ecx
c000fb16:	eb ed                	jmp    c000fb05 <KeSetBootMessage(char const*)+0x3a>
c000fb18:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000fb1d:	b9 9e 00 00 00       	mov    ecx,0x9e
c000fb22:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fb24:	81 c4 a0 00 00 00    	add    esp,0xa0
c000fb2a:	5b                   	pop    ebx
c000fb2b:	5e                   	pop    esi
c000fb2c:	5f                   	pop    edi
c000fb2d:	c3                   	ret    

c000fb2e <EnvVarContainer::getEnv(char const*)>:
c000fb2e:	57                   	push   edi
c000fb2f:	56                   	push   esi
c000fb30:	53                   	push   ebx
c000fb31:	31 db                	xor    ebx,ebx
c000fb33:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fb37:	39 1e                	cmp    DWORD PTR [esi],ebx
c000fb39:	7e 2b                	jle    c000fb66 <EnvVarContainer::getEnv(char const*)+0x38>
c000fb3b:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000fb42:	50                   	push   eax
c000fb43:	50                   	push   eax
c000fb44:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fb47:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000fb4a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fb4e:	e8 8d 0b ff ff       	call   c00006e0 <strcmp>
c000fb53:	83 c4 10             	add    esp,0x10
c000fb56:	85 c0                	test   eax,eax
c000fb58:	75 09                	jne    c000fb63 <EnvVarContainer::getEnv(char const*)+0x35>
c000fb5a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fb5d:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000fb61:	eb 05                	jmp    c000fb68 <EnvVarContainer::getEnv(char const*)+0x3a>
c000fb63:	43                   	inc    ebx
c000fb64:	eb d1                	jmp    c000fb37 <EnvVarContainer::getEnv(char const*)+0x9>
c000fb66:	31 c0                	xor    eax,eax
c000fb68:	5b                   	pop    ebx
c000fb69:	5e                   	pop    esi
c000fb6a:	5f                   	pop    edi
c000fb6b:	c3                   	ret    

c000fb6c <EnvVarContainer::setEnv(char const*, char const*)>:
c000fb6c:	55                   	push   ebp
c000fb6d:	57                   	push   edi
c000fb6e:	56                   	push   esi
c000fb6f:	53                   	push   ebx
c000fb70:	83 ec 28             	sub    esp,0x28
c000fb73:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000fb77:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fb7b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000fb7f:	56                   	push   esi
c000fb80:	e8 bb 09 ff ff       	call   c0000540 <strlen>
c000fb85:	40                   	inc    eax
c000fb86:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb89:	e8 2b 7c ff ff       	call   c00077b9 <malloc>
c000fb8e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb91:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fb95:	e8 a6 09 ff ff       	call   c0000540 <strlen>
c000fb9a:	40                   	inc    eax
c000fb9b:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb9e:	e8 16 7c ff ff       	call   c00077b9 <malloc>
c000fba3:	89 34 24             	mov    DWORD PTR [esp],esi
c000fba6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fbaa:	e8 91 09 ff ff       	call   c0000540 <strlen>
c000fbaf:	83 c4 0c             	add    esp,0xc
c000fbb2:	40                   	inc    eax
c000fbb3:	50                   	push   eax
c000fbb4:	6a 00                	push   0x0
c000fbb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fbba:	e8 11 09 ff ff       	call   c00004d0 <memset>
c000fbbf:	89 34 24             	mov    DWORD PTR [esp],esi
c000fbc2:	e8 79 09 ff ff       	call   c0000540 <strlen>
c000fbc7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fbcb:	8d 48 01             	lea    ecx,[eax+0x1]
c000fbce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fbd0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbd3:	89 de                	mov    esi,ebx
c000fbd5:	e8 66 09 ff ff       	call   c0000540 <strlen>
c000fbda:	83 c4 0c             	add    esp,0xc
c000fbdd:	40                   	inc    eax
c000fbde:	50                   	push   eax
c000fbdf:	6a 00                	push   0x0
c000fbe1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fbe5:	e8 e6 08 ff ff       	call   c00004d0 <memset>
c000fbea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbed:	e8 4e 09 ff ff       	call   c0000540 <strlen>
c000fbf2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fbf6:	8d 48 01             	lea    ecx,[eax+0x1]
c000fbf9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fbfb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fbfe:	40                   	inc    eax
c000fbff:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fc02:	c1 e0 03             	shl    eax,0x3
c000fc05:	5a                   	pop    edx
c000fc06:	59                   	pop    ecx
c000fc07:	50                   	push   eax
c000fc08:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000fc0b:	e8 95 7b ff ff       	call   c00077a5 <realloc>
c000fc10:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fc14:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fc17:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fc1a:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fc1e:	b9 08 00 00 00       	mov    ecx,0x8
c000fc23:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc25:	83 c4 2c             	add    esp,0x2c
c000fc28:	5b                   	pop    ebx
c000fc29:	5e                   	pop    esi
c000fc2a:	5f                   	pop    edi
c000fc2b:	5d                   	pop    ebp
c000fc2c:	c3                   	ret    
c000fc2d:	90                   	nop

c000fc2e <EnvVarContainer::deleteEnv(char const*)>:
c000fc2e:	c3                   	ret    
c000fc2f:	90                   	nop

c000fc30 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000fc30:	55                   	push   ebp
c000fc31:	57                   	push   edi
c000fc32:	56                   	push   esi
c000fc33:	53                   	push   ebx
c000fc34:	81 ec 38 01 00 00    	sub    esp,0x138
c000fc3a:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000fc41:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000fc48:	68 14 01 00 00       	push   0x114
c000fc4d:	e8 67 7b ff ff       	call   c00077b9 <malloc>
c000fc52:	83 c4 0c             	add    esp,0xc
c000fc55:	89 c3                	mov    ebx,eax
c000fc57:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fc5a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fc61:	50                   	push   eax
c000fc62:	e8 e7 ad ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c000fc67:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc6a:	e8 0d b1 ff ff       	call   c000ad7c <File::exists()>
c000fc6f:	83 c4 10             	add    esp,0x10
c000fc72:	84 c0                	test   al,al
c000fc74:	75 31                	jne    c000fca7 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000fc76:	50                   	push   eax
c000fc77:	50                   	push   eax
c000fc78:	6a 12                	push   0x12
c000fc7a:	53                   	push   ebx
c000fc7b:	e8 8e ae ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c000fc80:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fc82:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000fc85:	89 34 24             	mov    DWORD PTR [esp],esi
c000fc88:	e8 b3 08 ff ff       	call   c0000540 <strlen>
c000fc8d:	5a                   	pop    edx
c000fc8e:	31 d2                	xor    edx,edx
c000fc90:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fc94:	51                   	push   ecx
c000fc95:	56                   	push   esi
c000fc96:	52                   	push   edx
c000fc97:	50                   	push   eax
c000fc98:	53                   	push   ebx
c000fc99:	ff d7                	call   edi
c000fc9b:	83 c4 14             	add    esp,0x14
c000fc9e:	53                   	push   ebx
c000fc9f:	e8 c8 ae ff ff       	call   c000ab6c <File::close()>
c000fca4:	83 c4 10             	add    esp,0x10
c000fca7:	56                   	push   esi
c000fca8:	31 f6                	xor    esi,esi
c000fcaa:	68 00 01 00 00       	push   0x100
c000fcaf:	6a 00                	push   0x0
c000fcb1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fcb5:	50                   	push   eax
c000fcb6:	e8 15 08 ff ff       	call   c00004d0 <memset>
c000fcbb:	5f                   	pop    edi
c000fcbc:	58                   	pop    eax
c000fcbd:	6a 01                	push   0x1
c000fcbf:	53                   	push   ebx
c000fcc0:	e8 49 ae ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c000fcc5:	83 c4 10             	add    esp,0x10
c000fcc8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fcd0:	83 ec 0c             	sub    esp,0xc
c000fcd3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fcd5:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fcd9:	51                   	push   ecx
c000fcda:	8d 54 24 23          	lea    edx,[esp+0x23]
c000fcde:	52                   	push   edx
c000fcdf:	6a 00                	push   0x0
c000fce1:	6a 01                	push   0x1
c000fce3:	53                   	push   ebx
c000fce4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fce7:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000fceb:	83 c4 20             	add    esp,0x20
c000fcee:	3c 0d                	cmp    al,0xd
c000fcf0:	0f 84 09 01 00 00    	je     c000fdff <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fcf6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fcfb:	0f 84 ef 00 00 00    	je     c000fdf0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fd01:	3c 0a                	cmp    al,0xa
c000fd03:	74 13                	je     c000fd18 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fd05:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fd0a:	74 0c                	je     c000fd18 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fd0c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000fd12:	0f 8e d8 00 00 00    	jle    c000fdf0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fd18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd1c:	83 ec 0c             	sub    esp,0xc
c000fd1f:	8d 78 01             	lea    edi,[eax+0x1]
c000fd22:	57                   	push   edi
c000fd23:	e8 91 7a ff ff       	call   c00077b9 <malloc>
c000fd28:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000fd2c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fd30:	8d 56 04             	lea    edx,[esi+0x4]
c000fd33:	89 14 24             	mov    DWORD PTR [esp],edx
c000fd36:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fd3a:	e8 7a 7a ff ff       	call   c00077b9 <malloc>
c000fd3f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000fd43:	83 c4 0c             	add    esp,0xc
c000fd46:	57                   	push   edi
c000fd47:	6a 00                	push   0x0
c000fd49:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fd4d:	e8 7e 07 ff ff       	call   c00004d0 <memset>
c000fd52:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fd56:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000fd5a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000fd5e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd60:	83 c4 0c             	add    esp,0xc
c000fd63:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fd67:	52                   	push   edx
c000fd68:	6a 00                	push   0x0
c000fd6a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fd6e:	e8 5d 07 ff ff       	call   c00004d0 <memset>
c000fd73:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fd77:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000fd7b:	89 34 24             	mov    DWORD PTR [esp],esi
c000fd7e:	e8 bd 07 ff ff       	call   c0000540 <strlen>
c000fd83:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000fd87:	89 c1                	mov    ecx,eax
c000fd89:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd8b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fd8e:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000fd91:	40                   	inc    eax
c000fd92:	83 c4 10             	add    esp,0x10
c000fd95:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fd98:	85 d2                	test   edx,edx
c000fd9a:	75 0c                	jne    c000fda8 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c000fd9c:	83 ec 0c             	sub    esp,0xc
c000fd9f:	6a 08                	push   0x8
c000fda1:	e8 13 7a ff ff       	call   c00077b9 <malloc>
c000fda6:	eb 0c                	jmp    c000fdb4 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c000fda8:	c1 e0 03             	shl    eax,0x3
c000fdab:	51                   	push   ecx
c000fdac:	51                   	push   ecx
c000fdad:	50                   	push   eax
c000fdae:	52                   	push   edx
c000fdaf:	e8 f1 79 ff ff       	call   c00077a5 <realloc>
c000fdb4:	83 c4 10             	add    esp,0x10
c000fdb7:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fdba:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fdbd:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000fdc0:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fdc4:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fdc8:	b9 08 00 00 00       	mov    ecx,0x8
c000fdcd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fdcf:	31 f6                	xor    esi,esi
c000fdd1:	50                   	push   eax
c000fdd2:	68 00 01 00 00       	push   0x100
c000fdd7:	6a 00                	push   0x0
c000fdd9:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fddd:	50                   	push   eax
c000fdde:	e8 ed 06 ff ff       	call   c00004d0 <memset>
c000fde3:	83 c4 10             	add    esp,0x10
c000fde6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fdee:	eb 0f                	jmp    c000fdff <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fdf0:	3c 3d                	cmp    al,0x3d
c000fdf2:	74 07                	je     c000fdfb <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c000fdf4:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c000fdf8:	46                   	inc    esi
c000fdf9:	eb 04                	jmp    c000fdff <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fdfb:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000fdff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fe04:	0f 85 c6 fe ff ff    	jne    c000fcd0 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000fe0a:	81 c4 2c 01 00 00    	add    esp,0x12c
c000fe10:	5b                   	pop    ebx
c000fe11:	5e                   	pop    esi
c000fe12:	5f                   	pop    edi
c000fe13:	5d                   	pop    ebp
c000fe14:	c3                   	ret    
c000fe15:	90                   	nop

c000fe16 <EnvVarContainer::__loadSystem()>:
c000fe16:	83 ec 10             	sub    esp,0x10
c000fe19:	68 60 fb 01 c0       	push   0xc001fb60
c000fe1e:	68 44 e7 01 c0       	push   0xc001e744
c000fe23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe27:	e8 04 fe ff ff       	call   c000fc30 <EnvVarContainer::loadFrom(char const*, char const*)>
c000fe2c:	83 c4 1c             	add    esp,0x1c
c000fe2f:	c3                   	ret    

c000fe30 <EnvVarContainer::__loadUser()>:
c000fe30:	c3                   	ret    
c000fe31:	90                   	nop

c000fe32 <EnvVarContainer::EnvVarContainer(Process*)>:
c000fe32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe36:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000fe3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe40:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe44:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000fe47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe4b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000fe52:	90                   	nop
c000fe53:	c3                   	ret    

c000fe54 <EnvVarContainer::~EnvVarContainer()>:
c000fe54:	83 ec 0c             	sub    esp,0xc
c000fe57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe5b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe5e:	85 c0                	test   eax,eax
c000fe60:	74 1d                	je     c000fe7f <EnvVarContainer::~EnvVarContainer()+0x2b>
c000fe62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe66:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe68:	85 c0                	test   eax,eax
c000fe6a:	74 13                	je     c000fe7f <EnvVarContainer::~EnvVarContainer()+0x2b>
c000fe6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe73:	83 ec 0c             	sub    esp,0xc
c000fe76:	50                   	push   eax
c000fe77:	e8 4d 79 ff ff       	call   c00077c9 <free>
c000fe7c:	83 c4 10             	add    esp,0x10
c000fe7f:	90                   	nop
c000fe80:	83 c4 0c             	add    esp,0xc
c000fe83:	c3                   	ret    

c000fe84 <Krnl::getEnv(Process*, char const*)>:
c000fe84:	53                   	push   ebx
c000fe85:	83 ec 08             	sub    esp,0x8
c000fe88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe8c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fe90:	39 05 f0 3f 02 c0    	cmp    DWORD PTR ds:0xc0023ff0,eax
c000fe96:	74 04                	je     c000fe9c <Krnl::getEnv(Process*, char const*)+0x18>
c000fe98:	85 c0                	test   eax,eax
c000fe9a:	75 0b                	jne    c000fea7 <Krnl::getEnv(Process*, char const*)+0x23>
c000fe9c:	a1 90 37 02 c0       	mov    eax,ds:0xc0023790
c000fea1:	85 c0                	test   eax,eax
c000fea3:	75 19                	jne    c000febe <Krnl::getEnv(Process*, char const*)+0x3a>
c000fea5:	eb 27                	jmp    c000fece <Krnl::getEnv(Process*, char const*)+0x4a>
c000fea7:	52                   	push   edx
c000fea8:	52                   	push   edx
c000fea9:	53                   	push   ebx
c000feaa:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000feb0:	e8 79 fc ff ff       	call   c000fb2e <EnvVarContainer::getEnv(char const*)>
c000feb5:	83 c4 10             	add    esp,0x10
c000feb8:	85 c0                	test   eax,eax
c000feba:	75 28                	jne    c000fee4 <Krnl::getEnv(Process*, char const*)+0x60>
c000febc:	eb de                	jmp    c000fe9c <Krnl::getEnv(Process*, char const*)+0x18>
c000febe:	52                   	push   edx
c000febf:	52                   	push   edx
c000fec0:	53                   	push   ebx
c000fec1:	50                   	push   eax
c000fec2:	e8 67 fc ff ff       	call   c000fb2e <EnvVarContainer::getEnv(char const*)>
c000fec7:	83 c4 10             	add    esp,0x10
c000feca:	85 c0                	test   eax,eax
c000fecc:	75 16                	jne    c000fee4 <Krnl::getEnv(Process*, char const*)+0x60>
c000fece:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000fed2:	a1 94 37 02 c0       	mov    eax,ds:0xc0023794
c000fed7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fedb:	83 c4 08             	add    esp,0x8
c000fede:	5b                   	pop    ebx
c000fedf:	e9 4a fc ff ff       	jmp    c000fb2e <EnvVarContainer::getEnv(char const*)>
c000fee4:	83 c4 08             	add    esp,0x8
c000fee7:	5b                   	pop    ebx
c000fee8:	c3                   	ret    

c000fee9 <Krnl::setEnvSystem(char const*, char const*)>:
c000fee9:	83 ec 10             	sub    esp,0x10
c000feec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fef0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fef4:	ff 35 94 37 02 c0    	push   DWORD PTR ds:0xc0023794
c000fefa:	e8 6d fc ff ff       	call   c000fb6c <EnvVarContainer::setEnv(char const*, char const*)>
c000feff:	83 c4 1c             	add    esp,0x1c
c000ff02:	c3                   	ret    

c000ff03 <Krnl::setEnvUser(char const*, char const*)>:
c000ff03:	a1 90 37 02 c0       	mov    eax,ds:0xc0023790
c000ff08:	85 c0                	test   eax,eax
c000ff0a:	74 15                	je     c000ff21 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c000ff0c:	83 ec 10             	sub    esp,0x10
c000ff0f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff13:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff17:	50                   	push   eax
c000ff18:	e8 4f fc ff ff       	call   c000fb6c <EnvVarContainer::setEnv(char const*, char const*)>
c000ff1d:	83 c4 1c             	add    esp,0x1c
c000ff20:	c3                   	ret    
c000ff21:	c3                   	ret    

c000ff22 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c000ff22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff26:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000ff2c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ff30:	e9 37 fc ff ff       	jmp    c000fb6c <EnvVarContainer::setEnv(char const*, char const*)>

c000ff35 <Krnl::deleteEnvSystem(char const*)>:
c000ff35:	c3                   	ret    

c000ff36 <Krnl::deleteEnvUser(char const*)>:
c000ff36:	c3                   	ret    

c000ff37 <Krnl::deleteEnvProcess(Process*, char const*)>:
c000ff37:	c3                   	ret    

c000ff38 <Krnl::newProcessEnv(Process*)>:
c000ff38:	83 ec 28             	sub    esp,0x28
c000ff3b:	6a 0c                	push   0xc
c000ff3d:	e8 77 78 ff ff       	call   c00077b9 <malloc>
c000ff42:	5a                   	pop    edx
c000ff43:	59                   	pop    ecx
c000ff44:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ff48:	50                   	push   eax
c000ff49:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ff4d:	e8 e0 fe ff ff       	call   c000fe32 <EnvVarContainer::EnvVarContainer(Process*)>
c000ff52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ff56:	83 c4 2c             	add    esp,0x2c
c000ff59:	c3                   	ret    

c000ff5a <Krnl::copyProcessEnv(Process*, Process*)>:
c000ff5a:	57                   	push   edi
c000ff5b:	56                   	push   esi
c000ff5c:	53                   	push   ebx
c000ff5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff61:	83 ec 0c             	sub    esp,0xc
c000ff64:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000ff6a:	6a 0c                	push   0xc
c000ff6c:	e8 48 78 ff ff       	call   c00077b9 <malloc>
c000ff71:	89 c3                	mov    ebx,eax
c000ff73:	58                   	pop    eax
c000ff74:	5a                   	pop    edx
c000ff75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff79:	53                   	push   ebx
c000ff7a:	e8 b3 fe ff ff       	call   c000fe32 <EnvVarContainer::EnvVarContainer(Process*)>
c000ff7f:	8b 07                	mov    eax,DWORD PTR [edi]
c000ff81:	89 03                	mov    DWORD PTR [ebx],eax
c000ff83:	c1 e0 03             	shl    eax,0x3
c000ff86:	89 04 24             	mov    DWORD PTR [esp],eax
c000ff89:	e8 2b 78 ff ff       	call   c00077b9 <malloc>
c000ff8e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ff91:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000ff93:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000ff96:	c1 e1 03             	shl    ecx,0x3
c000ff99:	89 c7                	mov    edi,eax
c000ff9b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff9d:	83 c4 10             	add    esp,0x10
c000ffa0:	89 d8                	mov    eax,ebx
c000ffa2:	5b                   	pop    ebx
c000ffa3:	5e                   	pop    esi
c000ffa4:	5f                   	pop    edi
c000ffa5:	c3                   	ret    

c000ffa6 <Krnl::loadSystemEnv()>:
c000ffa6:	53                   	push   ebx
c000ffa7:	83 ec 14             	sub    esp,0x14
c000ffaa:	6a 0c                	push   0xc
c000ffac:	e8 08 78 ff ff       	call   c00077b9 <malloc>
c000ffb1:	89 c3                	mov    ebx,eax
c000ffb3:	58                   	pop    eax
c000ffb4:	5a                   	pop    edx
c000ffb5:	ff 35 f0 3f 02 c0    	push   DWORD PTR ds:0xc0023ff0
c000ffbb:	53                   	push   ebx
c000ffbc:	e8 71 fe ff ff       	call   c000fe32 <EnvVarContainer::EnvVarContainer(Process*)>
c000ffc1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffc4:	89 1d 94 37 02 c0    	mov    DWORD PTR ds:0xc0023794,ebx
c000ffca:	e8 47 fe ff ff       	call   c000fe16 <EnvVarContainer::__loadSystem()>
c000ffcf:	83 c4 18             	add    esp,0x18
c000ffd2:	5b                   	pop    ebx
c000ffd3:	c3                   	ret    

c000ffd4 <Krnl::loadUserEnv()>:
c000ffd4:	53                   	push   ebx
c000ffd5:	83 ec 14             	sub    esp,0x14
c000ffd8:	6a 0c                	push   0xc
c000ffda:	e8 da 77 ff ff       	call   c00077b9 <malloc>
c000ffdf:	89 c3                	mov    ebx,eax
c000ffe1:	58                   	pop    eax
c000ffe2:	5a                   	pop    edx
c000ffe3:	ff 35 f0 3f 02 c0    	push   DWORD PTR ds:0xc0023ff0
c000ffe9:	53                   	push   ebx
c000ffea:	e8 43 fe ff ff       	call   c000fe32 <EnvVarContainer::EnvVarContainer(Process*)>
c000ffef:	89 1d 90 37 02 c0    	mov    DWORD PTR ds:0xc0023790,ebx
c000fff5:	83 c4 18             	add    esp,0x18
c000fff8:	5b                   	pop    ebx
c000fff9:	c3                   	ret    

c000fffa <Krnl::flushEnv()>:
c000fffa:	c3                   	ret    

c000fffb <Krnl::getProcessTotalEnvCount(Process*)>:
c000fffb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffff:	8b 15 90 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023790
c0010005:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001000b:	a1 94 37 02 c0       	mov    eax,ds:0xc0023794
c0010010:	8b 00                	mov    eax,DWORD PTR [eax]
c0010012:	03 01                	add    eax,DWORD PTR [ecx]
c0010014:	85 d2                	test   edx,edx
c0010016:	74 02                	je     c001001a <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0010018:	03 02                	add    eax,DWORD PTR [edx]
c001001a:	c3                   	ret    

c001001b <Krnl::getProcessEnvPair(Process*, int)>:
c001001b:	57                   	push   edi
c001001c:	56                   	push   esi
c001001d:	8b 35 90 37 02 c0    	mov    esi,DWORD PTR ds:0xc0023790
c0010023:	53                   	push   ebx
c0010024:	85 f6                	test   esi,esi
c0010026:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001002a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001002e:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010034:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010038:	8b 01                	mov    eax,DWORD PTR [ecx]
c001003a:	75 16                	jne    c0010052 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c001003c:	39 c2                	cmp    edx,eax
c001003e:	7c 16                	jl     c0010056 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010040:	8b 0d 94 37 02 c0    	mov    ecx,DWORD PTR ds:0xc0023794
c0010046:	8b 31                	mov    esi,DWORD PTR [ecx]
c0010048:	01 c6                	add    esi,eax
c001004a:	39 d6                	cmp    esi,edx
c001004c:	7e 3c                	jle    c001008a <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001004e:	29 c2                	sub    edx,eax
c0010050:	eb 04                	jmp    c0010056 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010052:	39 c2                	cmp    edx,eax
c0010054:	7d 05                	jge    c001005b <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0010056:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0010059:	eb 20                	jmp    c001007b <Krnl::getProcessEnvPair(Process*, int)+0x60>
c001005b:	8b 3e                	mov    edi,DWORD PTR [esi]
c001005d:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0010060:	39 d1                	cmp    ecx,edx
c0010062:	7e 04                	jle    c0010068 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0010064:	29 c2                	sub    edx,eax
c0010066:	eb 10                	jmp    c0010078 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0010068:	8b 35 94 37 02 c0    	mov    esi,DWORD PTR ds:0xc0023794
c001006e:	03 0e                	add    ecx,DWORD PTR [esi]
c0010070:	39 d1                	cmp    ecx,edx
c0010072:	7e 16                	jle    c001008a <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010074:	29 c2                	sub    edx,eax
c0010076:	29 fa                	sub    edx,edi
c0010078:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001007b:	8d 14 d0             	lea    edx,[eax+edx*8]
c001007e:	8b 02                	mov    eax,DWORD PTR [edx]
c0010080:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0010083:	89 03                	mov    DWORD PTR [ebx],eax
c0010085:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0010088:	eb 1d                	jmp    c00100a7 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c001008a:	83 ec 0c             	sub    esp,0xc
c001008d:	68 66 e7 01 c0       	push   0xc001e766
c0010092:	e8 ac 00 00 00       	call   c0010143 <KePanic(char const*)>
c0010097:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001009d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00100a4:	83 c4 10             	add    esp,0x10
c00100a7:	89 d8                	mov    eax,ebx
c00100a9:	5b                   	pop    ebx
c00100aa:	5e                   	pop    esi
c00100ab:	5f                   	pop    edi
c00100ac:	c2 04 00             	ret    0x4

c00100af <CPU::current()>:
c00100af:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c00100b4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00100ba:	c3                   	ret    

c00100bb <operator new(unsigned long)>:
c00100bb:	e9 f9 76 ff ff       	jmp    c00077b9 <malloc>

c00100c0 <operator delete(void*)>:
c00100c0:	e9 14 77 ff ff       	jmp    c00077d9 <rfree>

c00100c5 <disableIRQs()>:
c00100c5:	fa                   	cli    
c00100c6:	c3                   	ret    

c00100c7 <enableIRQs()>:
c00100c7:	fb                   	sti    
c00100c8:	c3                   	ret    

c00100c9 <lockScheduler()>:
c00100c9:	fa                   	cli    
c00100ca:	ff 05 c8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fc8
c00100d0:	c3                   	ret    

c00100d1 <unlockScheduler()>:
c00100d1:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c00100d6:	48                   	dec    eax
c00100d7:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c00100dc:	75 01                	jne    c00100df <unlockScheduler()+0xe>
c00100de:	fb                   	sti    
c00100df:	c3                   	ret    

c00100e0 <lockStuff()>:
c00100e0:	fa                   	cli    
c00100e1:	ff 05 c8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fc8
c00100e7:	ff 05 c4 3f 02 c0    	inc    DWORD PTR ds:0xc0023fc4
c00100ed:	c3                   	ret    

c00100ee <unlockStuff()>:
c00100ee:	83 ec 0c             	sub    esp,0xc
c00100f1:	a1 c4 3f 02 c0       	mov    eax,ds:0xc0023fc4
c00100f6:	48                   	dec    eax
c00100f7:	a3 c4 3f 02 c0       	mov    ds:0xc0023fc4,eax
c00100fc:	75 18                	jne    c0010116 <unlockStuff()+0x28>
c00100fe:	83 3d c0 3f 02 c0 00 	cmp    DWORD PTR ds:0xc0023fc0,0x0
c0010105:	74 0f                	je     c0010116 <unlockStuff()+0x28>
c0010107:	c7 05 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023fc0,0x0
c0010111:	e8 e6 37 00 00       	call   c00138fc <schedule()>
c0010116:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c001011b:	48                   	dec    eax
c001011c:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c0010121:	75 01                	jne    c0010124 <unlockStuff()+0x36>
c0010123:	fb                   	sti    
c0010124:	83 c4 0c             	add    esp,0xc
c0010127:	c3                   	ret    

c0010128 <Virt::getAKernelVAS()>:
c0010128:	a1 10 0e 02 c0       	mov    eax,ds:0xc0020e10
c001012d:	c3                   	ret    

c001012e <__not_memcpy>:
c001012e:	57                   	push   edi
c001012f:	56                   	push   esi
c0010130:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010134:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010138:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001013c:	89 c7                	mov    edi,eax
c001013e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010140:	5e                   	pop    esi
c0010141:	5f                   	pop    edi
c0010142:	c3                   	ret    

c0010143 <KePanic(char const*)>:
c0010143:	c6 05 98 37 02 c0 01 	mov    BYTE PTR ds:0xc0023798,0x1
c001014a:	e9 a5 55 00 00       	jmp    c00156f4 <HalPanic(char const*)>

c001014f <Krnl::powerThread(void*)>:
c001014f:	83 ec 0c             	sub    esp,0xc
c0010152:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c0010157:	48                   	dec    eax
c0010158:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c001015d:	75 01                	jne    c0010160 <Krnl::powerThread(void*)+0x11>
c001015f:	fb                   	sti    
c0010160:	83 ec 0c             	sub    esp,0xc
c0010163:	c6 05 a0 37 02 c0 00 	mov    BYTE PTR ds:0xc00237a0,0x0
c001016a:	6a 0a                	push   0xa
c001016c:	e8 9b 3a 00 00       	call   c0013c0c <sleep(unsigned int)>
c0010171:	83 05 e4 37 02 c0 0a 	add    DWORD PTR ds:0xc00237e4,0xa
c0010178:	83 c4 10             	add    esp,0x10
c001017b:	eb e3                	jmp    c0010160 <Krnl::powerThread(void*)+0x11>

c001017d <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c001017d:	57                   	push   edi
c001017e:	b9 09 00 00 00       	mov    ecx,0x9
c0010183:	56                   	push   esi
c0010184:	bf c0 37 02 c0       	mov    edi,0xc00237c0
c0010189:	fc                   	cld    
c001018a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001018e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010190:	5e                   	pop    esi
c0010191:	5f                   	pop    edi
c0010192:	c3                   	ret    

c0010193 <Krnl::userIOReceived()>:
c0010193:	c7 05 e4 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00237e4,0x0
c001019d:	c3                   	ret    

c001019e <Krnl::handlePowerButton()>:
c001019e:	83 ec 0c             	sub    esp,0xc
c00101a1:	a1 c0 37 02 c0       	mov    eax,ds:0xc00237c0
c00101a6:	83 f8 02             	cmp    eax,0x2
c00101a9:	75 10                	jne    c00101bb <Krnl::handlePowerButton()+0x1d>
c00101ab:	83 ec 0c             	sub    esp,0xc
c00101ae:	ff 35 18 0d 02 c0    	push   DWORD PTR ds:0xc0020d18
c00101b4:	e8 9d 6c ff ff       	call   c0006e56 <Computer::shutdown()>
c00101b9:	eb 11                	jmp    c00101cc <Krnl::handlePowerButton()+0x2e>
c00101bb:	48                   	dec    eax
c00101bc:	75 11                	jne    c00101cf <Krnl::handlePowerButton()+0x31>
c00101be:	83 ec 0c             	sub    esp,0xc
c00101c1:	ff 35 18 0d 02 c0    	push   DWORD PTR ds:0xc0020d18
c00101c7:	e8 ba 6c ff ff       	call   c0006e86 <Computer::sleep()>
c00101cc:	83 c4 10             	add    esp,0x10
c00101cf:	83 c4 0c             	add    esp,0xc
c00101d2:	c3                   	ret    

c00101d3 <Krnl::handleSleepButton()>:
c00101d3:	83 ec 0c             	sub    esp,0xc
c00101d6:	a1 c4 37 02 c0       	mov    eax,ds:0xc00237c4
c00101db:	83 f8 02             	cmp    eax,0x2
c00101de:	75 10                	jne    c00101f0 <Krnl::handleSleepButton()+0x1d>
c00101e0:	83 ec 0c             	sub    esp,0xc
c00101e3:	ff 35 18 0d 02 c0    	push   DWORD PTR ds:0xc0020d18
c00101e9:	e8 68 6c ff ff       	call   c0006e56 <Computer::shutdown()>
c00101ee:	eb 11                	jmp    c0010201 <Krnl::handleSleepButton()+0x2e>
c00101f0:	48                   	dec    eax
c00101f1:	75 11                	jne    c0010204 <Krnl::handleSleepButton()+0x31>
c00101f3:	83 ec 0c             	sub    esp,0xc
c00101f6:	ff 35 18 0d 02 c0    	push   DWORD PTR ds:0xc0020d18
c00101fc:	e8 85 6c ff ff       	call   c0006e86 <Computer::sleep()>
c0010201:	83 c4 10             	add    esp,0x10
c0010204:	83 c4 0c             	add    esp,0xc
c0010207:	c3                   	ret    

c0010208 <Krnl::setupPowerManager()>:
c0010208:	83 ec 0c             	sub    esp,0xc
c001020b:	c7 05 e4 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00237e4,0x0
c0010215:	68 f0 00 00 00       	push   0xf0
c001021a:	c6 05 a0 37 02 c0 00 	mov    BYTE PTR ds:0xc00237a0,0x0
c0010221:	6a 00                	push   0x0
c0010223:	68 4f 01 01 c0       	push   0xc001014f
c0010228:	ff 35 f0 3f 02 c0    	push   DWORD PTR ds:0xc0023ff0
c001022e:	e8 a9 34 00 00       	call   c00136dc <Process::createThread(void (*)(void*), void*, int)>
c0010233:	c7 05 c0 37 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc00237c0,0x2
c001023d:	c7 05 c4 37 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00237c4,0x1
c0010247:	c7 05 c8 37 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc00237c8,0x3
c0010251:	c7 05 cc 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00237cc,0x0
c001025b:	c7 05 d8 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00237d8,0x0
c0010265:	c7 05 d0 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00237d0,0x0
c001026f:	c7 05 dc 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00237dc,0x0
c0010279:	c7 05 d4 37 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00237d4,0x3c
c0010283:	c7 05 e0 37 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00237e0,0x3c
c001028d:	83 c4 1c             	add    esp,0x1c
c0010290:	c3                   	ret    
c0010291:	66 90                	xchg   ax,ax
c0010293:	90                   	nop

c0010294 <KeResolveCompatibilitySymbol(char*)>:
c0010294:	83 ec 0c             	sub    esp,0xc
c0010297:	83 ec 08             	sub    esp,0x8
c001029a:	68 80 e7 01 c0       	push   0xc001e780
c001029f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102a3:	e8 38 04 ff ff       	call   c00006e0 <strcmp>
c00102a8:	83 c4 10             	add    esp,0x10
c00102ab:	85 c0                	test   eax,eax
c00102ad:	0f 94 c0             	sete   al
c00102b0:	84 c0                	test   al,al
c00102b2:	74 0c                	je     c00102c0 <KeResolveCompatibilitySymbol(char*)+0x2c>
c00102b4:	b8 18 0d 02 c0       	mov    eax,0xc0020d18
c00102b9:	e9 62 01 00 00       	jmp    c0010420 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00102be:	66 90                	xchg   ax,ax
c00102c0:	83 ec 08             	sub    esp,0x8
c00102c3:	68 89 e7 01 c0       	push   0xc001e789
c00102c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102cc:	e8 0f 04 ff ff       	call   c00006e0 <strcmp>
c00102d1:	83 c4 10             	add    esp,0x10
c00102d4:	85 c0                	test   eax,eax
c00102d6:	0f 94 c0             	sete   al
c00102d9:	84 c0                	test   al,al
c00102db:	74 0b                	je     c00102e8 <KeResolveCompatibilitySymbol(char*)+0x54>
c00102dd:	b8 00 c2 01 c0       	mov    eax,0xc001c200
c00102e2:	e9 39 01 00 00       	jmp    c0010420 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00102e7:	90                   	nop
c00102e8:	83 ec 08             	sub    esp,0x8
c00102eb:	68 93 e7 01 c0       	push   0xc001e793
c00102f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102f4:	e8 e7 03 ff ff       	call   c00006e0 <strcmp>
c00102f9:	83 c4 10             	add    esp,0x10
c00102fc:	85 c0                	test   eax,eax
c00102fe:	0f 94 c0             	sete   al
c0010301:	84 c0                	test   al,al
c0010303:	74 0b                	je     c0010310 <KeResolveCompatibilitySymbol(char*)+0x7c>
c0010305:	b8 34 bf 01 c0       	mov    eax,0xc001bf34
c001030a:	e9 11 01 00 00       	jmp    c0010420 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001030f:	90                   	nop
c0010310:	83 ec 08             	sub    esp,0x8
c0010313:	68 9c e7 01 c0       	push   0xc001e79c
c0010318:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001031c:	e8 bf 03 ff ff       	call   c00006e0 <strcmp>
c0010321:	83 c4 10             	add    esp,0x10
c0010324:	85 c0                	test   eax,eax
c0010326:	0f 94 c0             	sete   al
c0010329:	84 c0                	test   al,al
c001032b:	74 0b                	je     c0010338 <KeResolveCompatibilitySymbol(char*)+0xa4>
c001032d:	b8 43 01 01 c0       	mov    eax,0xc0010143
c0010332:	e9 e9 00 00 00       	jmp    c0010420 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010337:	90                   	nop
c0010338:	83 ec 08             	sub    esp,0x8
c001033b:	68 af e7 01 c0       	push   0xc001e7af
c0010340:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010344:	e8 97 03 ff ff       	call   c00006e0 <strcmp>
c0010349:	83 c4 10             	add    esp,0x10
c001034c:	85 c0                	test   eax,eax
c001034e:	0f 94 c0             	sete   al
c0010351:	84 c0                	test   al,al
c0010353:	74 0b                	je     c0010360 <KeResolveCompatibilitySymbol(char*)+0xcc>
c0010355:	b8 cb fa 00 c0       	mov    eax,0xc000facb
c001035a:	e9 c1 00 00 00       	jmp    c0010420 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001035f:	90                   	nop
c0010360:	83 ec 08             	sub    esp,0x8
c0010363:	68 cc e7 01 c0       	push   0xc001e7cc
c0010368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001036c:	e8 6f 03 ff ff       	call   c00006e0 <strcmp>
c0010371:	83 c4 10             	add    esp,0x10
c0010374:	85 c0                	test   eax,eax
c0010376:	0f 94 c0             	sete   al
c0010379:	84 c0                	test   al,al
c001037b:	74 0b                	je     c0010388 <KeResolveCompatibilitySymbol(char*)+0xf4>
c001037d:	b8 00 c3 01 c0       	mov    eax,0xc001c300
c0010382:	e9 99 00 00 00       	jmp    c0010420 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010387:	90                   	nop
c0010388:	83 ec 08             	sub    esp,0x8
c001038b:	68 d6 e7 01 c0       	push   0xc001e7d6
c0010390:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010394:	e8 47 03 ff ff       	call   c00006e0 <strcmp>
c0010399:	83 c4 10             	add    esp,0x10
c001039c:	85 c0                	test   eax,eax
c001039e:	0f 94 c0             	sete   al
c00103a1:	84 c0                	test   al,al
c00103a3:	74 07                	je     c00103ac <KeResolveCompatibilitySymbol(char*)+0x118>
c00103a5:	b8 80 c0 01 c0       	mov    eax,0xc001c080
c00103aa:	eb 74                	jmp    c0010420 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103ac:	83 ec 08             	sub    esp,0x8
c00103af:	68 df e7 01 c0       	push   0xc001e7df
c00103b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103b8:	e8 23 03 ff ff       	call   c00006e0 <strcmp>
c00103bd:	83 c4 10             	add    esp,0x10
c00103c0:	85 c0                	test   eax,eax
c00103c2:	0f 94 c0             	sete   al
c00103c5:	84 c0                	test   al,al
c00103c7:	74 07                	je     c00103d0 <KeResolveCompatibilitySymbol(char*)+0x13c>
c00103c9:	b8 1c 0d 02 c0       	mov    eax,0xc0020d1c
c00103ce:	eb 50                	jmp    c0010420 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103d0:	83 ec 08             	sub    esp,0x8
c00103d3:	68 f7 e7 01 c0       	push   0xc001e7f7
c00103d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103dc:	e8 ff 02 ff ff       	call   c00006e0 <strcmp>
c00103e1:	83 c4 10             	add    esp,0x10
c00103e4:	85 c0                	test   eax,eax
c00103e6:	0f 94 c0             	sete   al
c00103e9:	84 c0                	test   al,al
c00103eb:	74 07                	je     c00103f4 <KeResolveCompatibilitySymbol(char*)+0x160>
c00103ed:	b8 1c 0d 02 c0       	mov    eax,0xc0020d1c
c00103f2:	eb 2c                	jmp    c0010420 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103f4:	83 ec 08             	sub    esp,0x8
c00103f7:	68 04 e8 01 c0       	push   0xc001e804
c00103fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010400:	e8 db 02 ff ff       	call   c00006e0 <strcmp>
c0010405:	83 c4 10             	add    esp,0x10
c0010408:	85 c0                	test   eax,eax
c001040a:	0f 94 c0             	sete   al
c001040d:	84 c0                	test   al,al
c001040f:	74 07                	je     c0010418 <KeResolveCompatibilitySymbol(char*)+0x184>
c0010411:	b8 1d 0d 02 c0       	mov    eax,0xc0020d1d
c0010416:	eb 08                	jmp    c0010420 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010418:	b8 00 00 00 00       	mov    eax,0x0
c001041d:	8d 76 00             	lea    esi,[esi+0x0]
c0010420:	83 c4 0c             	add    esp,0xc
c0010423:	c3                   	ret    

c0010424 <KiDefaultSignalHandlerAbort(int)>:
c0010424:	c7 44 24 04 11 e8 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e811
c001042c:	e9 12 fd ff ff       	jmp    c0010143 <KePanic(char const*)>

c0010431 <KiDefaultSignalHandlerTerminate(int)>:
c0010431:	c7 44 24 04 2d e8 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e82d
c0010439:	e9 05 fd ff ff       	jmp    c0010143 <KePanic(char const*)>

c001043e <KiSigKill(int)>:
c001043e:	c7 44 24 04 4d e8 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e84d
c0010446:	e9 f8 fc ff ff       	jmp    c0010143 <KePanic(char const*)>

c001044b <KiDefaultSignalHandlerIgnore(int)>:
c001044b:	c3                   	ret    

c001044c <KiDefaultSignalHandlerPause(int)>:
c001044c:	c7 44 24 04 57 e8 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e857
c0010454:	e9 ea fc ff ff       	jmp    c0010143 <KePanic(char const*)>

c0010459 <KiDefaultSignalHandlerResume(int)>:
c0010459:	c7 44 24 04 73 e8 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e873
c0010461:	e9 dd fc ff ff       	jmp    c0010143 <KePanic(char const*)>

c0010466 <KeInitSignals()>:
c0010466:	53                   	push   ebx
c0010467:	83 ec 14             	sub    esp,0x14
c001046a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001046e:	68 90 e8 01 c0       	push   0xc001e890
c0010473:	e8 60 a0 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0010478:	83 c4 0c             	add    esp,0xc
c001047b:	c7 83 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xbc],0x0
c0010485:	c7 83 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xc0],0x0
c001048f:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0010495:	6a 20                	push   0x20
c0010497:	6a 00                	push   0x0
c0010499:	50                   	push   eax
c001049a:	e8 31 00 ff ff       	call   c00004d0 <memset>
c001049f:	83 c4 0c             	add    esp,0xc
c00104a2:	6a 44                	push   0x44
c00104a4:	6a 00                	push   0x0
c00104a6:	53                   	push   ebx
c00104a7:	e8 24 00 ff ff       	call   c00004d0 <memset>
c00104ac:	c7 04 24 a1 e8 01 c0 	mov    DWORD PTR [esp],0xc001e8a1
c00104b3:	e8 20 a0 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c00104b8:	89 d8                	mov    eax,ebx
c00104ba:	83 c4 18             	add    esp,0x18
c00104bd:	5b                   	pop    ebx
c00104be:	c2 04 00             	ret    0x4

c00104c1 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c00104c1:	57                   	push   edi
c00104c2:	56                   	push   esi
c00104c3:	53                   	push   ebx
c00104c4:	bb 01 00 00 00       	mov    ebx,0x1
c00104c9:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00104cd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00104d1:	83 ec 0c             	sub    esp,0xc
c00104d4:	68 b2 e8 01 c0       	push   0xc001e8b2
c00104d9:	e8 fa 9f ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c00104de:	83 c4 10             	add    esp,0x10
c00104e1:	83 fe 10             	cmp    esi,0x10
c00104e4:	7f 3a                	jg     c0010520 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x5f>
c00104e6:	83 ec 0c             	sub    esp,0xc
c00104e9:	68 cd e8 01 c0       	push   0xc001e8cd
c00104ee:	e8 e5 9f ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c00104f3:	8d 04 b7             	lea    eax,[edi+esi*4]
c00104f6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00104fa:	89 f1                	mov    ecx,esi
c00104fc:	89 10                	mov    DWORD PTR [eax],edx
c00104fe:	d3 e3                	shl    ebx,cl
c0010500:	0b 5c 24 2c          	or     ebx,DWORD PTR [esp+0x2c]
c0010504:	89 58 44             	mov    DWORD PTR [eax+0x44],ebx
c0010507:	c6 84 37 88 00 00 00 00 	mov    BYTE PTR [edi+esi*1+0x88],0x0
c001050f:	31 db                	xor    ebx,ebx
c0010511:	c7 04 24 e8 e8 01 c0 	mov    DWORD PTR [esp],0xc001e8e8
c0010518:	e8 bb 9f ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001051d:	83 c4 10             	add    esp,0x10
c0010520:	89 d8                	mov    eax,ebx
c0010522:	5b                   	pop    ebx
c0010523:	5e                   	pop    esi
c0010524:	5f                   	pop    edi
c0010525:	c3                   	ret    

c0010526 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010526:	55                   	push   ebp
c0010527:	57                   	push   edi
c0010528:	56                   	push   esi
c0010529:	be 08 00 00 00       	mov    esi,0x8
c001052e:	53                   	push   ebx
c001052f:	83 ec 18             	sub    esp,0x18
c0010532:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010536:	68 03 e9 01 c0       	push   0xc001e903
c001053b:	e8 98 9f ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0010540:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010547:	8b bb bc 00 00 00    	mov    edi,DWORD PTR [ebx+0xbc]
c001054d:	83 c4 10             	add    esp,0x10
c0010550:	31 c9                	xor    ecx,ecx
c0010552:	8d 04 0f             	lea    eax,[edi+ecx*1]
c0010555:	99                   	cdq    
c0010556:	f7 fe                	idiv   esi
c0010558:	83 c2 24             	add    edx,0x24
c001055b:	8b 6c 93 0c          	mov    ebp,DWORD PTR [ebx+edx*4+0xc]
c001055f:	85 ed                	test   ebp,ebp
c0010561:	75 1a                	jne    c001057d <KeRaiseSignal(SigHandlerBlock*, int)+0x57>
c0010563:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010567:	83 ec 0c             	sub    esp,0xc
c001056a:	89 44 93 0c          	mov    DWORD PTR [ebx+edx*4+0xc],eax
c001056e:	68 14 e9 01 c0       	push   0xc001e914
c0010573:	e8 60 9f ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0010578:	83 c4 10             	add    esp,0x10
c001057b:	eb 1b                	jmp    c0010598 <KeRaiseSignal(SigHandlerBlock*, int)+0x72>
c001057d:	41                   	inc    ecx
c001057e:	83 f9 08             	cmp    ecx,0x8
c0010581:	75 cf                	jne    c0010552 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0010583:	83 ec 0c             	sub    esp,0xc
c0010586:	bd 01 00 00 00       	mov    ebp,0x1
c001058b:	68 25 e9 01 c0       	push   0xc001e925
c0010590:	e8 43 9f ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0010595:	83 c4 10             	add    esp,0x10
c0010598:	83 c4 0c             	add    esp,0xc
c001059b:	89 e8                	mov    eax,ebp
c001059d:	5b                   	pop    ebx
c001059e:	5e                   	pop    esi
c001059f:	5f                   	pop    edi
c00105a0:	5d                   	pop    ebp
c00105a1:	c3                   	ret    

c00105a2 <KeCheckSignal(SigHandlerBlock*)>:
c00105a2:	55                   	push   ebp
c00105a3:	57                   	push   edi
c00105a4:	56                   	push   esi
c00105a5:	31 f6                	xor    esi,esi
c00105a7:	53                   	push   ebx
c00105a8:	83 ec 18             	sub    esp,0x18
c00105ab:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00105af:	68 36 e9 01 c0       	push   0xc001e936
c00105b4:	e8 1f 9f ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c00105b9:	83 c4 10             	add    esp,0x10
c00105bc:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c00105c3:	0f 84 55 01 00 00    	je     c001071e <KeCheckSignal(SigHandlerBlock*)+0x17c>
c00105c9:	83 ec 0c             	sub    esp,0xc
c00105cc:	bd 08 00 00 00       	mov    ebp,0x8
c00105d1:	68 47 e9 01 c0       	push   0xc001e947
c00105d6:	e8 fd 9e ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c00105db:	83 c4 10             	add    esp,0x10
c00105de:	31 c9                	xor    ecx,ecx
c00105e0:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c00105e6:	8d 04 0e             	lea    eax,[esi+ecx*1]
c00105e9:	99                   	cdq    
c00105ea:	f7 fd                	idiv   ebp
c00105ec:	8b bc 93 9c 00 00 00 	mov    edi,DWORD PTR [ebx+edx*4+0x9c]
c00105f3:	85 ff                	test   edi,edi
c00105f5:	0f 84 00 01 00 00    	je     c00106fb <KeCheckSignal(SigHandlerBlock*)+0x159>
c00105fb:	83 ec 0c             	sub    esp,0xc
c00105fe:	be 01 00 00 00       	mov    esi,0x1
c0010603:	68 58 e9 01 c0       	push   0xc001e958
c0010608:	e8 cb 9e ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001060d:	89 f9                	mov    ecx,edi
c001060f:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0010615:	d3 e6                	shl    esi,cl
c0010617:	83 c4 10             	add    esp,0x10
c001061a:	31 c9                	xor    ecx,ecx
c001061c:	ba 01 00 00 00       	mov    edx,0x1
c0010621:	89 d5                	mov    ebp,edx
c0010623:	d3 e5                	shl    ebp,cl
c0010625:	85 c5                	test   ebp,eax
c0010627:	74 13                	je     c001063c <KeCheckSignal(SigHandlerBlock*)+0x9a>
c0010629:	85 74 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],esi
c001062d:	74 0d                	je     c001063c <KeCheckSignal(SigHandlerBlock*)+0x9a>
c001062f:	83 ec 0c             	sub    esp,0xc
c0010632:	68 69 e9 01 c0       	push   0xc001e969
c0010637:	e9 d8 00 00 00       	jmp    c0010714 <KeCheckSignal(SigHandlerBlock*)+0x172>
c001063c:	41                   	inc    ecx
c001063d:	83 f9 11             	cmp    ecx,0x11
c0010640:	75 df                	jne    c0010621 <KeCheckSignal(SigHandlerBlock*)+0x7f>
c0010642:	83 ec 0c             	sub    esp,0xc
c0010645:	68 7a e9 01 c0       	push   0xc001e97a
c001064a:	e8 89 9e ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001064f:	8b 83 bc 00 00 00    	mov    eax,DWORD PTR [ebx+0xbc]
c0010655:	83 c4 10             	add    esp,0x10
c0010658:	8d 50 01             	lea    edx,[eax+0x1]
c001065b:	89 93 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],edx
c0010661:	c7 84 83 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+eax*4+0x9c],0x0
c001066c:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010673:	09 b3 c0 00 00 00    	or     DWORD PTR [ebx+0xc0],esi
c0010679:	31 c0                	xor    eax,eax
c001067b:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0010683:	74 09                	je     c001068e <KeCheckSignal(SigHandlerBlock*)+0xec>
c0010685:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001068c:	eb 06                	jmp    c0010694 <KeCheckSignal(SigHandlerBlock*)+0xf2>
c001068e:	40                   	inc    eax
c001068f:	83 f8 08             	cmp    eax,0x8
c0010692:	75 e7                	jne    c001067b <KeCheckSignal(SigHandlerBlock*)+0xd9>
c0010694:	83 ec 0c             	sub    esp,0xc
c0010697:	68 8b e9 01 c0       	push   0xc001e98b
c001069c:	e8 37 9e ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c00106a1:	83 c4 10             	add    esp,0x10
c00106a4:	8b 34 bb             	mov    esi,DWORD PTR [ebx+edi*4]
c00106a7:	83 ff 09             	cmp    edi,0x9
c00106aa:	75 14                	jne    c00106c0 <KeCheckSignal(SigHandlerBlock*)+0x11e>
c00106ac:	83 ec 0c             	sub    esp,0xc
c00106af:	be 3e 04 01 c0       	mov    esi,0xc001043e
c00106b4:	68 9c e9 01 c0       	push   0xc001e99c
c00106b9:	e8 1a 9e ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c00106be:	eb 36                	jmp    c00106f6 <KeCheckSignal(SigHandlerBlock*)+0x154>
c00106c0:	83 fe 01             	cmp    esi,0x1
c00106c3:	75 0a                	jne    c00106cf <KeCheckSignal(SigHandlerBlock*)+0x12d>
c00106c5:	83 ec 0c             	sub    esp,0xc
c00106c8:	68 ad e9 01 c0       	push   0xc001e9ad
c00106cd:	eb 45                	jmp    c0010714 <KeCheckSignal(SigHandlerBlock*)+0x172>
c00106cf:	85 f6                	test   esi,esi
c00106d1:	75 16                	jne    c00106e9 <KeCheckSignal(SigHandlerBlock*)+0x147>
c00106d3:	83 ec 0c             	sub    esp,0xc
c00106d6:	68 be e9 01 c0       	push   0xc001e9be
c00106db:	e8 f8 9d ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c00106e0:	8b 34 bd c0 fb 01 c0 	mov    esi,DWORD PTR [edi*4-0x3ffe0440]
c00106e7:	eb 0d                	jmp    c00106f6 <KeCheckSignal(SigHandlerBlock*)+0x154>
c00106e9:	83 ec 0c             	sub    esp,0xc
c00106ec:	68 cf e9 01 c0       	push   0xc001e9cf
c00106f1:	e8 e2 9d ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c00106f6:	83 c4 10             	add    esp,0x10
c00106f9:	eb 23                	jmp    c001071e <KeCheckSignal(SigHandlerBlock*)+0x17c>
c00106fb:	46                   	inc    esi
c00106fc:	41                   	inc    ecx
c00106fd:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010703:	83 f9 08             	cmp    ecx,0x8
c0010706:	0f 85 d4 fe ff ff    	jne    c00105e0 <KeCheckSignal(SigHandlerBlock*)+0x3e>
c001070c:	83 ec 0c             	sub    esp,0xc
c001070f:	68 e0 e9 01 c0       	push   0xc001e9e0
c0010714:	e8 bf 9d ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0010719:	31 f6                	xor    esi,esi
c001071b:	83 c4 10             	add    esp,0x10
c001071e:	83 c4 0c             	add    esp,0xc
c0010721:	89 f0                	mov    eax,esi
c0010723:	5b                   	pop    ebx
c0010724:	5e                   	pop    esi
c0010725:	5f                   	pop    edi
c0010726:	5d                   	pop    ebp
c0010727:	c3                   	ret    

c0010728 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0010728:	56                   	push   esi
c0010729:	53                   	push   ebx
c001072a:	bb 01 00 00 00       	mov    ebx,0x1
c001072f:	52                   	push   edx
c0010730:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010734:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010738:	d3 e3                	shl    ebx,cl
c001073a:	83 f9 10             	cmp    ecx,0x10
c001073d:	7f 08                	jg     c0010747 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c001073f:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0010745:	75 10                	jne    c0010757 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0010747:	83 ec 0c             	sub    esp,0xc
c001074a:	68 f1 e9 01 c0       	push   0xc001e9f1
c001074f:	e8 ef f9 ff ff       	call   c0010143 <KePanic(char const*)>
c0010754:	83 c4 10             	add    esp,0x10
c0010757:	f7 d3                	not    ebx
c0010759:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c001075f:	58                   	pop    eax
c0010760:	5b                   	pop    ebx
c0010761:	5e                   	pop    esi
c0010762:	c3                   	ret    

c0010763 <SysSeekDir(regs*)>:
c0010763:	31 c0                	xor    eax,eax
c0010765:	31 d2                	xor    edx,edx
c0010767:	c3                   	ret    

c0010768 <SysTellDir(regs*)>:
c0010768:	31 c0                	xor    eax,eax
c001076a:	31 d2                	xor    edx,edx
c001076c:	c3                   	ret    

c001076d <SysVerify(regs*)>:
c001076d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010771:	31 d2                	xor    edx,edx
c0010773:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010776:	c3                   	ret    

c0010777 <SysGetArgc(regs*)>:
c0010777:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001077c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001077f:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010785:	99                   	cdq    
c0010786:	c3                   	ret    

c0010787 <SysTTYName(regs*)>:
c0010787:	b8 01 00 00 00       	mov    eax,0x1
c001078c:	31 d2                	xor    edx,edx
c001078e:	c3                   	ret    

c001078f <SysFormatDisk(regs*)>:
c001078f:	56                   	push   esi
c0010790:	53                   	push   ebx
c0010791:	50                   	push   eax
c0010792:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010796:	8b 1d 14 0e 02 c0    	mov    ebx,DWORD PTR ds:0xc0020e14
c001079c:	eb 28                	jmp    c00107c6 <SysFormatDisk(regs*)+0x37>
c001079e:	83 ec 0c             	sub    esp,0xc
c00107a1:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00107a4:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c00107a7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00107a9:	51                   	push   ecx
c00107aa:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c00107ad:	51                   	push   ecx
c00107ae:	50                   	push   eax
c00107af:	8b 04 85 80 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcd80]
c00107b6:	50                   	push   eax
c00107b7:	53                   	push   ebx
c00107b8:	ff 52 48             	call   DWORD PTR [edx+0x48]
c00107bb:	83 c4 20             	add    esp,0x20
c00107be:	83 f8 08             	cmp    eax,0x8
c00107c1:	75 12                	jne    c00107d5 <SysFormatDisk(regs*)+0x46>
c00107c3:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00107c6:	85 db                	test   ebx,ebx
c00107c8:	75 d4                	jne    c001079e <SysFormatDisk(regs*)+0xf>
c00107ca:	59                   	pop    ecx
c00107cb:	b8 03 00 00 00       	mov    eax,0x3
c00107d0:	31 d2                	xor    edx,edx
c00107d2:	5b                   	pop    ebx
c00107d3:	5e                   	pop    esi
c00107d4:	c3                   	ret    
c00107d5:	85 c0                	test   eax,eax
c00107d7:	74 1b                	je     c00107f4 <SysFormatDisk(regs*)+0x65>
c00107d9:	83 f8 09             	cmp    eax,0x9
c00107dc:	74 0b                	je     c00107e9 <SysFormatDisk(regs*)+0x5a>
c00107de:	59                   	pop    ecx
c00107df:	b8 02 00 00 00       	mov    eax,0x2
c00107e4:	31 d2                	xor    edx,edx
c00107e6:	5b                   	pop    ebx
c00107e7:	5e                   	pop    esi
c00107e8:	c3                   	ret    
c00107e9:	59                   	pop    ecx
c00107ea:	b8 01 00 00 00       	mov    eax,0x1
c00107ef:	31 d2                	xor    edx,edx
c00107f1:	5b                   	pop    ebx
c00107f2:	5e                   	pop    esi
c00107f3:	c3                   	ret    
c00107f4:	59                   	pop    ecx
c00107f5:	31 c0                	xor    eax,eax
c00107f7:	31 d2                	xor    edx,edx
c00107f9:	5b                   	pop    ebx
c00107fa:	5e                   	pop    esi
c00107fb:	c3                   	ret    

c00107fc <SysSetDiskVolumeLabel(regs*)>:
c00107fc:	56                   	push   esi
c00107fd:	53                   	push   ebx
c00107fe:	53                   	push   ebx
c00107ff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010803:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010806:	83 f8 19             	cmp    eax,0x19
c0010809:	77 2d                	ja     c0010838 <SysSetDiskVolumeLabel(regs*)+0x3c>
c001080b:	8b 0c 85 80 32 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdcd80]
c0010812:	85 c9                	test   ecx,ecx
c0010814:	74 22                	je     c0010838 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010816:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010819:	85 db                	test   ebx,ebx
c001081b:	74 1b                	je     c0010838 <SysSetDiskVolumeLabel(regs*)+0x3c>
c001081d:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c0010823:	85 d2                	test   edx,edx
c0010825:	74 11                	je     c0010838 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010827:	8b 32                	mov    esi,DWORD PTR [edx]
c0010829:	53                   	push   ebx
c001082a:	50                   	push   eax
c001082b:	51                   	push   ecx
c001082c:	52                   	push   edx
c001082d:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0010830:	83 c4 10             	add    esp,0x10
c0010833:	99                   	cdq    
c0010834:	59                   	pop    ecx
c0010835:	5b                   	pop    ebx
c0010836:	5e                   	pop    esi
c0010837:	c3                   	ret    
c0010838:	59                   	pop    ecx
c0010839:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001083e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010843:	5b                   	pop    ebx
c0010844:	5e                   	pop    esi
c0010845:	c3                   	ret    

c0010846 <SysGetDiskVolumeLabel(regs*)>:
c0010846:	57                   	push   edi
c0010847:	56                   	push   esi
c0010848:	53                   	push   ebx
c0010849:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001084d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010850:	83 fa 19             	cmp    edx,0x19
c0010853:	77 38                	ja     c001088d <SysGetDiskVolumeLabel(regs*)+0x47>
c0010855:	8b 0c 95 80 32 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdcd80]
c001085c:	85 c9                	test   ecx,ecx
c001085e:	74 2d                	je     c001088d <SysGetDiskVolumeLabel(regs*)+0x47>
c0010860:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010863:	85 db                	test   ebx,ebx
c0010865:	74 26                	je     c001088d <SysGetDiskVolumeLabel(regs*)+0x47>
c0010867:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001086a:	85 f6                	test   esi,esi
c001086c:	74 1f                	je     c001088d <SysGetDiskVolumeLabel(regs*)+0x47>
c001086e:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0010874:	85 c0                	test   eax,eax
c0010876:	74 15                	je     c001088d <SysGetDiskVolumeLabel(regs*)+0x47>
c0010878:	83 ec 0c             	sub    esp,0xc
c001087b:	8b 38                	mov    edi,DWORD PTR [eax]
c001087d:	56                   	push   esi
c001087e:	53                   	push   ebx
c001087f:	52                   	push   edx
c0010880:	51                   	push   ecx
c0010881:	50                   	push   eax
c0010882:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0010885:	83 c4 20             	add    esp,0x20
c0010888:	99                   	cdq    
c0010889:	5b                   	pop    ebx
c001088a:	5e                   	pop    esi
c001088b:	5f                   	pop    edi
c001088c:	c3                   	ret    
c001088d:	5b                   	pop    ebx
c001088e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010893:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010898:	5e                   	pop    esi
c0010899:	5f                   	pop    edi
c001089a:	c3                   	ret    

c001089b <SysShutdown(regs*)>:
c001089b:	83 ec 0c             	sub    esp,0xc
c001089e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108a2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00108a5:	85 c0                	test   eax,eax
c00108a7:	74 18                	je     c00108c1 <SysShutdown(regs*)+0x26>
c00108a9:	83 f8 01             	cmp    eax,0x1
c00108ac:	74 38                	je     c00108e6 <SysShutdown(regs*)+0x4b>
c00108ae:	83 f8 02             	cmp    eax,0x2
c00108b1:	74 24                	je     c00108d7 <SysShutdown(regs*)+0x3c>
c00108b3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00108b8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00108bd:	83 c4 0c             	add    esp,0xc
c00108c0:	c3                   	ret    
c00108c1:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c00108c6:	8b 10                	mov    edx,DWORD PTR [eax]
c00108c8:	6a 00                	push   0x0
c00108ca:	6a 00                	push   0x0
c00108cc:	6a 00                	push   0x0
c00108ce:	50                   	push   eax
c00108cf:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00108d2:	83 c4 10             	add    esp,0x10
c00108d5:	eb dc                	jmp    c00108b3 <SysShutdown(regs*)+0x18>
c00108d7:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c00108dc:	8b 10                	mov    edx,DWORD PTR [eax]
c00108de:	6a 00                	push   0x0
c00108e0:	6a 00                	push   0x0
c00108e2:	6a 01                	push   0x1
c00108e4:	eb e8                	jmp    c00108ce <SysShutdown(regs*)+0x33>
c00108e6:	a1 00 33 02 c0       	mov    eax,ds:0xc0023300
c00108eb:	85 c0                	test   eax,eax
c00108ed:	74 02                	je     c00108f1 <SysShutdown(regs*)+0x56>
c00108ef:	ff d0                	call   eax
c00108f1:	31 c0                	xor    eax,eax
c00108f3:	31 d2                	xor    edx,edx
c00108f5:	83 c4 0c             	add    esp,0xc
c00108f8:	c3                   	ret    

c00108f9 <SysRealpath(regs*)>:
c00108f9:	83 ec 0c             	sub    esp,0xc
c00108fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010900:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010903:	85 d2                	test   edx,edx
c0010905:	74 07                	je     c001090e <SysRealpath(regs*)+0x15>
c0010907:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001090a:	85 c0                	test   eax,eax
c001090c:	75 0b                	jne    c0010919 <SysRealpath(regs*)+0x20>
c001090e:	b8 01 00 00 00       	mov    eax,0x1
c0010913:	31 d2                	xor    edx,edx
c0010915:	83 c4 0c             	add    esp,0xc
c0010918:	c3                   	ret    
c0010919:	51                   	push   ecx
c001091a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010920:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010923:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0010929:	51                   	push   ecx
c001092a:	52                   	push   edx
c001092b:	50                   	push   eax
c001092c:	e8 73 9f ff ff       	call   c000a8a4 <Fs::standardiseFiles(char*, char const*, char const*)>
c0010931:	83 c4 10             	add    esp,0x10
c0010934:	31 c0                	xor    eax,eax
c0010936:	31 d2                	xor    edx,edx
c0010938:	83 c4 0c             	add    esp,0xc
c001093b:	c3                   	ret    

c001093c <SysReadDir(regs*)>:
c001093c:	53                   	push   ebx
c001093d:	83 ec 18             	sub    esp,0x18
c0010940:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010944:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010947:	83 f8 02             	cmp    eax,0x2
c001094a:	76 61                	jbe    c00109ad <SysReadDir(regs*)+0x71>
c001094c:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0010953:	77 49                	ja     c001099e <SysReadDir(regs*)+0x62>
c0010955:	83 ec 0c             	sub    esp,0xc
c0010958:	50                   	push   eax
c0010959:	e8 d1 87 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c001095e:	83 c4 10             	add    esp,0x10
c0010961:	85 c0                	test   eax,eax
c0010963:	74 39                	je     c001099e <SysReadDir(regs*)+0x62>
c0010965:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001096d:	83 ec 0c             	sub    esp,0xc
c0010970:	8b 10                	mov    edx,DWORD PTR [eax]
c0010972:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0010976:	51                   	push   ecx
c0010977:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001097a:	51                   	push   ecx
c001097b:	6a 00                	push   0x0
c001097d:	68 10 01 00 00       	push   0x110
c0010982:	50                   	push   eax
c0010983:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010986:	83 c4 20             	add    esp,0x20
c0010989:	85 c0                	test   eax,eax
c001098b:	74 29                	je     c00109b6 <SysReadDir(regs*)+0x7a>
c001098d:	83 f8 07             	cmp    eax,0x7
c0010990:	74 1b                	je     c00109ad <SysReadDir(regs*)+0x71>
c0010992:	b8 02 00 00 00       	mov    eax,0x2
c0010997:	31 d2                	xor    edx,edx
c0010999:	83 c4 18             	add    esp,0x18
c001099c:	5b                   	pop    ebx
c001099d:	c3                   	ret    
c001099e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00109a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00109a8:	83 c4 18             	add    esp,0x18
c00109ab:	5b                   	pop    ebx
c00109ac:	c3                   	ret    
c00109ad:	b8 01 00 00 00       	mov    eax,0x1
c00109b2:	31 d2                	xor    edx,edx
c00109b4:	eb e3                	jmp    c0010999 <SysReadDir(regs*)+0x5d>
c00109b6:	31 c0                	xor    eax,eax
c00109b8:	31 d2                	xor    edx,edx
c00109ba:	eb dd                	jmp    c0010999 <SysReadDir(regs*)+0x5d>

c00109bc <SysIsATTY(regs*)>:
c00109bc:	83 ec 0c             	sub    esp,0xc
c00109bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109c3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00109c6:	83 f8 02             	cmp    eax,0x2
c00109c9:	76 07                	jbe    c00109d2 <SysIsATTY(regs*)+0x16>
c00109cb:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00109d0:	75 28                	jne    c00109fa <SysIsATTY(regs*)+0x3e>
c00109d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00109d7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00109da:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00109e0:	85 c0                	test   eax,eax
c00109e2:	74 26                	je     c0010a0a <SysIsATTY(regs*)+0x4e>
c00109e4:	83 ec 0c             	sub    esp,0xc
c00109e7:	8b 10                	mov    edx,DWORD PTR [eax]
c00109e9:	50                   	push   eax
c00109ea:	ff 12                	call   DWORD PTR [edx]
c00109ec:	31 d2                	xor    edx,edx
c00109ee:	25 ff 00 00 00       	and    eax,0xff
c00109f3:	83 c4 10             	add    esp,0x10
c00109f6:	83 c4 0c             	add    esp,0xc
c00109f9:	c3                   	ret    
c00109fa:	83 ec 0c             	sub    esp,0xc
c00109fd:	50                   	push   eax
c00109fe:	e8 2c 87 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010a03:	83 c4 10             	add    esp,0x10
c0010a06:	85 c0                	test   eax,eax
c0010a08:	75 da                	jne    c00109e4 <SysIsATTY(regs*)+0x28>
c0010a0a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a0f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a14:	83 c4 0c             	add    esp,0xc
c0010a17:	c3                   	ret    

c0010a18 <SysSeek(regs*)>:
c0010a18:	53                   	push   ebx
c0010a19:	83 ec 08             	sub    esp,0x8
c0010a1c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010a20:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010a23:	8d 50 fd             	lea    edx,[eax-0x3]
c0010a26:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010a2c:	77 34                	ja     c0010a62 <SysSeek(regs*)+0x4a>
c0010a2e:	83 ec 0c             	sub    esp,0xc
c0010a31:	50                   	push   eax
c0010a32:	e8 f8 86 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010a37:	83 c4 0c             	add    esp,0xc
c0010a3a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010a3d:	31 db                	xor    ebx,ebx
c0010a3f:	53                   	push   ebx
c0010a40:	51                   	push   ecx
c0010a41:	50                   	push   eax
c0010a42:	e8 85 a1 ff ff       	call   c000abcc <File::seek(unsigned long long)>
c0010a47:	83 c4 10             	add    esp,0x10
c0010a4a:	85 c0                	test   eax,eax
c0010a4c:	0f 95 c0             	setne  al
c0010a4f:	31 d2                	xor    edx,edx
c0010a51:	25 ff 00 00 00       	and    eax,0xff
c0010a56:	f7 d8                	neg    eax
c0010a58:	83 d2 00             	adc    edx,0x0
c0010a5b:	83 c4 08             	add    esp,0x8
c0010a5e:	f7 da                	neg    edx
c0010a60:	5b                   	pop    ebx
c0010a61:	c3                   	ret    
c0010a62:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a67:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a6c:	83 c4 08             	add    esp,0x8
c0010a6f:	5b                   	pop    ebx
c0010a70:	c3                   	ret    

c0010a71 <SysTell(regs*)>:
c0010a71:	53                   	push   ebx
c0010a72:	83 ec 08             	sub    esp,0x8
c0010a75:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010a79:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010a7c:	83 f8 02             	cmp    eax,0x2
c0010a7f:	76 50                	jbe    c0010ad1 <SysTell(regs*)+0x60>
c0010a81:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010a86:	76 19                	jbe    c0010aa1 <SysTell(regs*)+0x30>
c0010a88:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010a8b:	31 d2                	xor    edx,edx
c0010a8d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010a93:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010a9a:	31 c0                	xor    eax,eax
c0010a9c:	83 c4 08             	add    esp,0x8
c0010a9f:	5b                   	pop    ebx
c0010aa0:	c3                   	ret    
c0010aa1:	83 ec 0c             	sub    esp,0xc
c0010aa4:	50                   	push   eax
c0010aa5:	e8 85 86 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010aaa:	5a                   	pop    edx
c0010aab:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010aae:	59                   	pop    ecx
c0010aaf:	53                   	push   ebx
c0010ab0:	50                   	push   eax
c0010ab1:	e8 6c a1 ff ff       	call   c000ac22 <File::tell(unsigned long long*)>
c0010ab6:	83 c4 10             	add    esp,0x10
c0010ab9:	85 c0                	test   eax,eax
c0010abb:	0f 95 c0             	setne  al
c0010abe:	31 d2                	xor    edx,edx
c0010ac0:	25 ff 00 00 00       	and    eax,0xff
c0010ac5:	f7 d8                	neg    eax
c0010ac7:	83 d2 00             	adc    edx,0x0
c0010aca:	83 c4 08             	add    esp,0x8
c0010acd:	f7 da                	neg    edx
c0010acf:	5b                   	pop    ebx
c0010ad0:	c3                   	ret    
c0010ad1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010ad6:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010adb:	83 c4 08             	add    esp,0x8
c0010ade:	5b                   	pop    ebx
c0010adf:	c3                   	ret    

c0010ae0 <SysSize(regs*)>:
c0010ae0:	53                   	push   ebx
c0010ae1:	83 ec 18             	sub    esp,0x18
c0010ae4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010ae8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010aeb:	83 f8 02             	cmp    eax,0x2
c0010aee:	76 56                	jbe    c0010b46 <SysSize(regs*)+0x66>
c0010af0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010af5:	76 19                	jbe    c0010b10 <SysSize(regs*)+0x30>
c0010af7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010afa:	31 d2                	xor    edx,edx
c0010afc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010b02:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b09:	31 c0                	xor    eax,eax
c0010b0b:	83 c4 18             	add    esp,0x18
c0010b0e:	5b                   	pop    ebx
c0010b0f:	c3                   	ret    
c0010b10:	83 ec 0c             	sub    esp,0xc
c0010b13:	50                   	push   eax
c0010b14:	e8 16 86 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010b19:	83 c4 0c             	add    esp,0xc
c0010b1c:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010b20:	52                   	push   edx
c0010b21:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010b24:	52                   	push   edx
c0010b25:	50                   	push   eax
c0010b26:	e8 8f a2 ff ff       	call   c000adba <File::stat(unsigned long long*, bool*)>
c0010b2b:	83 c4 10             	add    esp,0x10
c0010b2e:	85 c0                	test   eax,eax
c0010b30:	0f 95 c0             	setne  al
c0010b33:	31 d2                	xor    edx,edx
c0010b35:	25 ff 00 00 00       	and    eax,0xff
c0010b3a:	f7 d8                	neg    eax
c0010b3c:	83 d2 00             	adc    edx,0x0
c0010b3f:	83 c4 18             	add    esp,0x18
c0010b42:	f7 da                	neg    edx
c0010b44:	5b                   	pop    ebx
c0010b45:	c3                   	ret    
c0010b46:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b4b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b50:	83 c4 18             	add    esp,0x18
c0010b53:	5b                   	pop    ebx
c0010b54:	c3                   	ret    

c0010b55 <SysSizeFromFilename(regs*)>:
c0010b55:	57                   	push   edi
c0010b56:	56                   	push   esi
c0010b57:	53                   	push   ebx
c0010b58:	83 ec 20             	sub    esp,0x20
c0010b5b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010b5f:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0010b62:	83 fb 02             	cmp    ebx,0x2
c0010b65:	0f 86 8c 00 00 00    	jbe    c0010bf7 <SysSizeFromFilename(regs*)+0xa2>
c0010b6b:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0010b71:	76 1b                	jbe    c0010b8e <SysSizeFromFilename(regs*)+0x39>
c0010b73:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010b76:	31 d2                	xor    edx,edx
c0010b78:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010b7e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b85:	83 c4 20             	add    esp,0x20
c0010b88:	31 c0                	xor    eax,eax
c0010b8a:	5b                   	pop    ebx
c0010b8b:	5e                   	pop    esi
c0010b8c:	5f                   	pop    edi
c0010b8d:	c3                   	ret    
c0010b8e:	83 ec 0c             	sub    esp,0xc
c0010b91:	68 14 01 00 00       	push   0x114
c0010b96:	e8 1e 6c ff ff       	call   c00077b9 <malloc>
c0010b9b:	83 c4 0c             	add    esp,0xc
c0010b9e:	89 c7                	mov    edi,eax
c0010ba0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ba5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010ba8:	50                   	push   eax
c0010ba9:	53                   	push   ebx
c0010baa:	57                   	push   edi
c0010bab:	e8 9e 9e ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c0010bb0:	83 c4 0c             	add    esp,0xc
c0010bb3:	8d 44 24 23          	lea    eax,[esp+0x23]
c0010bb7:	50                   	push   eax
c0010bb8:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0010bbb:	52                   	push   edx
c0010bbc:	57                   	push   edi
c0010bbd:	e8 f8 a1 ff ff       	call   c000adba <File::stat(unsigned long long*, bool*)>
c0010bc2:	83 c4 10             	add    esp,0x10
c0010bc5:	85 ff                	test   edi,edi
c0010bc7:	74 14                	je     c0010bdd <SysSizeFromFilename(regs*)+0x88>
c0010bc9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010bcd:	8b 17                	mov    edx,DWORD PTR [edi]
c0010bcf:	83 ec 0c             	sub    esp,0xc
c0010bd2:	57                   	push   edi
c0010bd3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010bd6:	83 c4 10             	add    esp,0x10
c0010bd9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010bdd:	85 c0                	test   eax,eax
c0010bdf:	0f 95 c0             	setne  al
c0010be2:	31 d2                	xor    edx,edx
c0010be4:	25 ff 00 00 00       	and    eax,0xff
c0010be9:	f7 d8                	neg    eax
c0010beb:	83 d2 00             	adc    edx,0x0
c0010bee:	83 c4 20             	add    esp,0x20
c0010bf1:	f7 da                	neg    edx
c0010bf3:	5b                   	pop    ebx
c0010bf4:	5e                   	pop    esi
c0010bf5:	5f                   	pop    edi
c0010bf6:	c3                   	ret    
c0010bf7:	83 c4 20             	add    esp,0x20
c0010bfa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010bff:	5b                   	pop    ebx
c0010c00:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010c05:	5e                   	pop    esi
c0010c06:	5f                   	pop    edi
c0010c07:	c3                   	ret    

c0010c08 <SysClose(regs*)>:
c0010c08:	53                   	push   ebx
c0010c09:	83 ec 08             	sub    esp,0x8
c0010c0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c10:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010c13:	83 f8 02             	cmp    eax,0x2
c0010c16:	76 41                	jbe    c0010c59 <SysClose(regs*)+0x51>
c0010c18:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010c1e:	83 fa 01             	cmp    edx,0x1
c0010c21:	76 2d                	jbe    c0010c50 <SysClose(regs*)+0x48>
c0010c23:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010c28:	77 2f                	ja     c0010c59 <SysClose(regs*)+0x51>
c0010c2a:	83 ec 0c             	sub    esp,0xc
c0010c2d:	50                   	push   eax
c0010c2e:	e8 fc 84 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010c33:	89 c3                	mov    ebx,eax
c0010c35:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c38:	e8 2f 9f ff ff       	call   c000ab6c <File::close()>
c0010c3d:	83 c4 10             	add    esp,0x10
c0010c40:	85 db                	test   ebx,ebx
c0010c42:	74 0c                	je     c0010c50 <SysClose(regs*)+0x48>
c0010c44:	83 ec 0c             	sub    esp,0xc
c0010c47:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010c49:	53                   	push   ebx
c0010c4a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010c4d:	83 c4 10             	add    esp,0x10
c0010c50:	31 c0                	xor    eax,eax
c0010c52:	31 d2                	xor    edx,edx
c0010c54:	83 c4 08             	add    esp,0x8
c0010c57:	5b                   	pop    ebx
c0010c58:	c3                   	ret    
c0010c59:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c5e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010c63:	83 c4 08             	add    esp,0x8
c0010c66:	5b                   	pop    ebx
c0010c67:	c3                   	ret    

c0010c68 <SysOpenDir(regs*)>:
c0010c68:	57                   	push   edi
c0010c69:	56                   	push   esi
c0010c6a:	53                   	push   ebx
c0010c6b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c6f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010c72:	85 c0                	test   eax,eax
c0010c74:	0f 84 e7 00 00 00    	je     c0010d61 <SysOpenDir(regs*)+0xf9>
c0010c7a:	83 ec 0c             	sub    esp,0xc
c0010c7d:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010c80:	56                   	push   esi
c0010c81:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0010c84:	57                   	push   edi
c0010c85:	50                   	push   eax
c0010c86:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010c89:	50                   	push   eax
c0010c8a:	68 04 ea 01 c0       	push   0xc001ea04
c0010c8f:	e8 44 98 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0010c94:	83 c4 18             	add    esp,0x18
c0010c97:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c9a:	50                   	push   eax
c0010c9b:	68 2a ea 01 c0       	push   0xc001ea2a
c0010ca0:	e8 33 98 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0010ca5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0010cac:	e8 08 6b ff ff       	call   c00077b9 <malloc>
c0010cb1:	83 c4 0c             	add    esp,0xc
c0010cb4:	89 c6                	mov    esi,eax
c0010cb6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010cbb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010cbe:	50                   	push   eax
c0010cbf:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010cc2:	50                   	push   eax
c0010cc3:	56                   	push   esi
c0010cc4:	e8 af a2 ff ff       	call   c000af78 <Directory::Directory(char const*, Process*)>
c0010cc9:	c7 04 24 1e f8 01 c0 	mov    DWORD PTR [esp],0xc001f81e
c0010cd0:	e8 03 98 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0010cd5:	83 c4 10             	add    esp,0x10
c0010cd8:	85 f6                	test   esi,esi
c0010cda:	0f 84 8f 00 00 00    	je     c0010d6f <SysOpenDir(regs*)+0x107>
c0010ce0:	83 ec 0c             	sub    esp,0xc
c0010ce3:	68 3f ea 01 c0       	push   0xc001ea3f
c0010ce8:	e8 eb 97 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0010ced:	58                   	pop    eax
c0010cee:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010cf1:	5a                   	pop    edx
c0010cf2:	51                   	push   ecx
c0010cf3:	68 43 ea 01 c0       	push   0xc001ea43
c0010cf8:	e8 db 97 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0010cfd:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d00:	e8 33 a3 ff ff       	call   c000b038 <Directory::open()>
c0010d05:	c7 04 24 6b d7 01 c0 	mov    DWORD PTR [esp],0xc001d76b
c0010d0c:	89 c7                	mov    edi,eax
c0010d0e:	e8 c5 97 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0010d13:	83 c4 10             	add    esp,0x10
c0010d16:	85 ff                	test   edi,edi
c0010d18:	75 37                	jne    c0010d51 <SysOpenDir(regs*)+0xe9>
c0010d1a:	83 ec 0c             	sub    esp,0xc
c0010d1d:	68 54 ea 01 c0       	push   0xc001ea54
c0010d22:	e8 b1 97 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0010d27:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d2a:	e8 0b 81 ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c0010d2f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010d32:	89 02                	mov    DWORD PTR [edx],eax
c0010d34:	c1 f8 1f             	sar    eax,0x1f
c0010d37:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010d3a:	c7 04 24 58 ea 01 c0 	mov    DWORD PTR [esp],0xc001ea58
c0010d41:	e8 92 97 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0010d46:	83 c4 10             	add    esp,0x10
c0010d49:	31 c0                	xor    eax,eax
c0010d4b:	5b                   	pop    ebx
c0010d4c:	31 d2                	xor    edx,edx
c0010d4e:	5e                   	pop    esi
c0010d4f:	5f                   	pop    edi
c0010d50:	c3                   	ret    
c0010d51:	83 ec 0c             	sub    esp,0xc
c0010d54:	68 50 ea 01 c0       	push   0xc001ea50
c0010d59:	e8 7a 97 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0010d5e:	83 c4 10             	add    esp,0x10
c0010d61:	5b                   	pop    ebx
c0010d62:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d67:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010d6c:	5e                   	pop    esi
c0010d6d:	5f                   	pop    edi
c0010d6e:	c3                   	ret    
c0010d6f:	83 ec 0c             	sub    esp,0xc
c0010d72:	68 3b ea 01 c0       	push   0xc001ea3b
c0010d77:	eb e0                	jmp    c0010d59 <SysOpenDir(regs*)+0xf1>

c0010d79 <SysCloseDir(regs*)>:
c0010d79:	53                   	push   ebx
c0010d7a:	83 ec 08             	sub    esp,0x8
c0010d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d81:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010d84:	8d 50 fd             	lea    edx,[eax-0x3]
c0010d87:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010d8d:	77 2f                	ja     c0010dbe <SysCloseDir(regs*)+0x45>
c0010d8f:	83 ec 0c             	sub    esp,0xc
c0010d92:	50                   	push   eax
c0010d93:	e8 97 83 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010d98:	89 c3                	mov    ebx,eax
c0010d9a:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d9d:	e8 f2 a2 ff ff       	call   c000b094 <Directory::close()>
c0010da2:	83 c4 10             	add    esp,0x10
c0010da5:	85 db                	test   ebx,ebx
c0010da7:	74 0c                	je     c0010db5 <SysCloseDir(regs*)+0x3c>
c0010da9:	83 ec 0c             	sub    esp,0xc
c0010dac:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010dae:	53                   	push   ebx
c0010daf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010db2:	83 c4 10             	add    esp,0x10
c0010db5:	31 c0                	xor    eax,eax
c0010db7:	31 d2                	xor    edx,edx
c0010db9:	83 c4 08             	add    esp,0x8
c0010dbc:	5b                   	pop    ebx
c0010dbd:	c3                   	ret    
c0010dbe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010dc3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010dc8:	83 c4 08             	add    esp,0x8
c0010dcb:	5b                   	pop    ebx
c0010dcc:	c3                   	ret    

c0010dcd <SysMakeDir(regs*)>:
c0010dcd:	56                   	push   esi
c0010dce:	53                   	push   ebx
c0010dcf:	83 ec 10             	sub    esp,0x10
c0010dd2:	68 14 01 00 00       	push   0x114
c0010dd7:	e8 dd 69 ff ff       	call   c00077b9 <malloc>
c0010ddc:	83 c4 0c             	add    esp,0xc
c0010ddf:	89 c3                	mov    ebx,eax
c0010de1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010de6:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c0010de9:	56                   	push   esi
c0010dea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010dee:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010df1:	50                   	push   eax
c0010df2:	53                   	push   ebx
c0010df3:	e8 80 a1 ff ff       	call   c000af78 <Directory::Directory(char const*, Process*)>
c0010df8:	83 c4 10             	add    esp,0x10
c0010dfb:	85 db                	test   ebx,ebx
c0010dfd:	74 32                	je     c0010e31 <SysMakeDir(regs*)+0x64>
c0010dff:	83 ec 0c             	sub    esp,0xc
c0010e02:	53                   	push   ebx
c0010e03:	e8 10 a4 ff ff       	call   c000b218 <Directory::create()>
c0010e08:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e0b:	89 c6                	mov    esi,eax
c0010e0d:	e8 82 a2 ff ff       	call   c000b094 <Directory::close()>
c0010e12:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010e14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e17:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010e1a:	83 c4 10             	add    esp,0x10
c0010e1d:	31 c0                	xor    eax,eax
c0010e1f:	59                   	pop    ecx
c0010e20:	85 f6                	test   esi,esi
c0010e22:	5b                   	pop    ebx
c0010e23:	0f 95 c0             	setne  al
c0010e26:	5e                   	pop    esi
c0010e27:	31 d2                	xor    edx,edx
c0010e29:	f7 d8                	neg    eax
c0010e2b:	83 d2 00             	adc    edx,0x0
c0010e2e:	f7 da                	neg    edx
c0010e30:	c3                   	ret    
c0010e31:	59                   	pop    ecx
c0010e32:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e37:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e3c:	5b                   	pop    ebx
c0010e3d:	5e                   	pop    esi
c0010e3e:	c3                   	ret    

c0010e3f <SysWait(regs*)>:
c0010e3f:	83 ec 10             	sub    esp,0x10
c0010e42:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010e46:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010e49:	52                   	push   edx
c0010e4a:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0010e4d:	51                   	push   ecx
c0010e4e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010e51:	50                   	push   eax
c0010e52:	e8 d1 2c 00 00       	call   c0013b28 <waitTask(int, int*, int)>
c0010e57:	83 c4 1c             	add    esp,0x1c
c0010e5a:	99                   	cdq    
c0010e5b:	c3                   	ret    

c0010e5c <SysNotImpl(regs*)>:
c0010e5c:	83 ec 18             	sub    esp,0x18
c0010e5f:	68 5c ea 01 c0       	push   0xc001ea5c
c0010e64:	e8 da f2 ff ff       	call   c0010143 <KePanic(char const*)>
c0010e69:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e6e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e73:	83 c4 1c             	add    esp,0x1c
c0010e76:	c3                   	ret    

c0010e77 <SysPanic(regs*)>:
c0010e77:	83 ec 18             	sub    esp,0x18
c0010e7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010e7e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010e81:	50                   	push   eax
c0010e82:	e8 bc f2 ff ff       	call   c0010143 <KePanic(char const*)>
c0010e87:	b8 01 00 00 00       	mov    eax,0x1
c0010e8c:	31 d2                	xor    edx,edx
c0010e8e:	83 c4 1c             	add    esp,0x1c
c0010e91:	c3                   	ret    

c0010e92 <SysRmdir(regs*)>:
c0010e92:	56                   	push   esi
c0010e93:	53                   	push   ebx
c0010e94:	83 ec 20             	sub    esp,0x20
c0010e97:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010e9b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010e9e:	68 14 01 00 00       	push   0x114
c0010ea3:	e8 11 69 ff ff       	call   c00077b9 <malloc>
c0010ea8:	83 c4 0c             	add    esp,0xc
c0010eab:	89 c3                	mov    ebx,eax
c0010ead:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010eb2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010eb5:	50                   	push   eax
c0010eb6:	56                   	push   esi
c0010eb7:	53                   	push   ebx
c0010eb8:	e8 91 9b ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c0010ebd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ec0:	e8 c1 9d ff ff       	call   c000ac86 <File::unlink()>
c0010ec5:	83 c4 10             	add    esp,0x10
c0010ec8:	85 db                	test   ebx,ebx
c0010eca:	74 14                	je     c0010ee0 <SysRmdir(regs*)+0x4e>
c0010ecc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010ed0:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010ed2:	83 ec 0c             	sub    esp,0xc
c0010ed5:	53                   	push   ebx
c0010ed6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010ed9:	83 c4 10             	add    esp,0x10
c0010edc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010ee0:	85 c0                	test   eax,eax
c0010ee2:	0f 95 c0             	setne  al
c0010ee5:	31 d2                	xor    edx,edx
c0010ee7:	25 ff 00 00 00       	and    eax,0xff
c0010eec:	f7 d8                	neg    eax
c0010eee:	83 d2 00             	adc    edx,0x0
c0010ef1:	83 c4 14             	add    esp,0x14
c0010ef4:	f7 da                	neg    edx
c0010ef6:	5b                   	pop    ebx
c0010ef7:	5e                   	pop    esi
c0010ef8:	c3                   	ret    

c0010ef9 <SysUnlink(regs*)>:
c0010ef9:	56                   	push   esi
c0010efa:	53                   	push   ebx
c0010efb:	83 ec 20             	sub    esp,0x20
c0010efe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010f02:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010f05:	68 14 01 00 00       	push   0x114
c0010f0a:	e8 aa 68 ff ff       	call   c00077b9 <malloc>
c0010f0f:	83 c4 0c             	add    esp,0xc
c0010f12:	89 c3                	mov    ebx,eax
c0010f14:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f19:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f1c:	50                   	push   eax
c0010f1d:	56                   	push   esi
c0010f1e:	53                   	push   ebx
c0010f1f:	e8 2a 9b ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c0010f24:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f27:	e8 5a 9d ff ff       	call   c000ac86 <File::unlink()>
c0010f2c:	83 c4 10             	add    esp,0x10
c0010f2f:	85 db                	test   ebx,ebx
c0010f31:	74 14                	je     c0010f47 <SysUnlink(regs*)+0x4e>
c0010f33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f37:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010f39:	83 ec 0c             	sub    esp,0xc
c0010f3c:	53                   	push   ebx
c0010f3d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010f40:	83 c4 10             	add    esp,0x10
c0010f43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f47:	85 c0                	test   eax,eax
c0010f49:	0f 95 c0             	setne  al
c0010f4c:	31 d2                	xor    edx,edx
c0010f4e:	25 ff 00 00 00       	and    eax,0xff
c0010f53:	f7 d8                	neg    eax
c0010f55:	83 d2 00             	adc    edx,0x0
c0010f58:	83 c4 14             	add    esp,0x14
c0010f5b:	f7 da                	neg    edx
c0010f5d:	5b                   	pop    ebx
c0010f5e:	5e                   	pop    esi
c0010f5f:	c3                   	ret    

c0010f60 <SysGetArgv(regs*)>:
c0010f60:	83 ec 0c             	sub    esp,0xc
c0010f63:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010f67:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010f6a:	85 c0                	test   eax,eax
c0010f6c:	78 2c                	js     c0010f9a <SysGetArgv(regs*)+0x3a>
c0010f6e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010f74:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010f77:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0010f7d:	7d 1b                	jge    c0010f9a <SysGetArgv(regs*)+0x3a>
c0010f7f:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0010f86:	85 c0                	test   eax,eax
c0010f88:	74 18                	je     c0010fa2 <SysGetArgv(regs*)+0x42>
c0010f8a:	83 ec 08             	sub    esp,0x8
c0010f8d:	50                   	push   eax
c0010f8e:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0010f91:	50                   	push   eax
c0010f92:	e8 69 f6 fe ff       	call   c0000600 <strcpy>
c0010f97:	83 c4 10             	add    esp,0x10
c0010f9a:	31 c0                	xor    eax,eax
c0010f9c:	31 d2                	xor    edx,edx
c0010f9e:	83 c4 0c             	add    esp,0xc
c0010fa1:	c3                   	ret    
c0010fa2:	b8 01 00 00 00       	mov    eax,0x1
c0010fa7:	31 d2                	xor    edx,edx
c0010fa9:	83 c4 0c             	add    esp,0xc
c0010fac:	c3                   	ret    

c0010fad <SysUSleep(regs*)>:
c0010fad:	83 ec 1c             	sub    esp,0x1c
c0010fb0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010fb4:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0010fb7:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0010fba:	6a 00                	push   0x0
c0010fbc:	6a 64                	push   0x64
c0010fbe:	52                   	push   edx
c0010fbf:	50                   	push   eax
c0010fc0:	e8 3b b2 00 00       	call   c001c200 <__udivdi3>
c0010fc5:	83 c4 14             	add    esp,0x14
c0010fc8:	50                   	push   eax
c0010fc9:	e8 2e 2c 00 00       	call   c0013bfc <milliTenthSleep(unsigned int)>
c0010fce:	31 c0                	xor    eax,eax
c0010fd0:	31 d2                	xor    edx,edx
c0010fd2:	83 c4 1c             	add    esp,0x1c
c0010fd5:	c3                   	ret    

c0010fd6 <SysSpawn(regs*)>:
c0010fd6:	56                   	push   esi
c0010fd7:	53                   	push   ebx
c0010fd8:	50                   	push   eax
c0010fd9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010fdd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010fe0:	85 c0                	test   eax,eax
c0010fe2:	75 08                	jne    c0010fec <SysSpawn(regs*)+0x16>
c0010fe4:	59                   	pop    ecx
c0010fe5:	31 c0                	xor    eax,eax
c0010fe7:	31 d2                	xor    edx,edx
c0010fe9:	5b                   	pop    ebx
c0010fea:	5e                   	pop    esi
c0010feb:	c3                   	ret    
c0010fec:	83 ec 0c             	sub    esp,0xc
c0010fef:	68 e8 07 00 00       	push   0x7e8
c0010ff4:	e8 c0 67 ff ff       	call   c00077b9 <malloc>
c0010ff9:	83 c4 10             	add    esp,0x10
c0010ffc:	89 c6                	mov    esi,eax
c0010ffe:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011001:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011004:	85 c0                	test   eax,eax
c0011006:	75 33                	jne    c001103b <SysSpawn(regs*)+0x65>
c0011008:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001100d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011010:	52                   	push   edx
c0011011:	50                   	push   eax
c0011012:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0011015:	53                   	push   ebx
c0011016:	56                   	push   esi
c0011017:	e8 44 21 00 00       	call   c0013160 <Process::Process(char const*, Process*, char**)>
c001101c:	83 c4 10             	add    esp,0x10
c001101f:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0011026:	75 bc                	jne    c0010fe4 <SysSpawn(regs*)+0xe>
c0011028:	83 ec 0c             	sub    esp,0xc
c001102b:	56                   	push   esi
c001102c:	e8 a3 27 00 00       	call   c00137d4 <Process::createUserThread()>
c0011031:	8b 06                	mov    eax,DWORD PTR [esi]
c0011033:	83 c4 10             	add    esp,0x10
c0011036:	99                   	cdq    
c0011037:	59                   	pop    ecx
c0011038:	5b                   	pop    ebx
c0011039:	5e                   	pop    esi
c001103a:	c3                   	ret    
c001103b:	31 c0                	xor    eax,eax
c001103d:	eb d1                	jmp    c0011010 <SysSpawn(regs*)+0x3a>

c001103f <SysGetEnv(regs*)>:
c001103f:	57                   	push   edi
c0011040:	56                   	push   esi
c0011041:	53                   	push   ebx
c0011042:	83 ec 1c             	sub    esp,0x1c
c0011045:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011049:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001104e:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011051:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011054:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011057:	50                   	push   eax
c0011058:	e8 9e ef ff ff       	call   c000fffb <Krnl::getProcessTotalEnvCount(Process*)>
c001105d:	83 c4 10             	add    esp,0x10
c0011060:	39 c7                	cmp    edi,eax
c0011062:	7c 14                	jl     c0011078 <SysGetEnv(regs*)+0x39>
c0011064:	85 f6                	test   esi,esi
c0011066:	75 0b                	jne    c0011073 <SysGetEnv(regs*)+0x34>
c0011068:	83 c4 10             	add    esp,0x10
c001106b:	31 c0                	xor    eax,eax
c001106d:	5b                   	pop    ebx
c001106e:	31 d2                	xor    edx,edx
c0011070:	5e                   	pop    esi
c0011071:	5f                   	pop    edi
c0011072:	c3                   	ret    
c0011073:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011076:	eb f0                	jmp    c0011068 <SysGetEnv(regs*)+0x29>
c0011078:	8d 44 24 08          	lea    eax,[esp+0x8]
c001107c:	52                   	push   edx
c001107d:	57                   	push   edi
c001107e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011084:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0011087:	51                   	push   ecx
c0011088:	50                   	push   eax
c0011089:	e8 8d ef ff ff       	call   c001001b <Krnl::getProcessEnvPair(Process*, int)>
c001108e:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011091:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011095:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011099:	83 c4 0c             	add    esp,0xc
c001109c:	85 db                	test   ebx,ebx
c001109e:	75 23                	jne    c00110c3 <SysGetEnv(regs*)+0x84>
c00110a0:	83 ec 0c             	sub    esp,0xc
c00110a3:	50                   	push   eax
c00110a4:	e8 97 f4 fe ff       	call   c0000540 <strlen>
c00110a9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00110ac:	89 c3                	mov    ebx,eax
c00110ae:	e8 8d f4 fe ff       	call   c0000540 <strlen>
c00110b3:	31 d2                	xor    edx,edx
c00110b5:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00110b9:	83 c4 10             	add    esp,0x10
c00110bc:	83 c4 10             	add    esp,0x10
c00110bf:	5b                   	pop    ebx
c00110c0:	5e                   	pop    esi
c00110c1:	5f                   	pop    edi
c00110c2:	c3                   	ret    
c00110c3:	83 ec 08             	sub    esp,0x8
c00110c6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00110c9:	50                   	push   eax
c00110ca:	56                   	push   esi
c00110cb:	e8 30 f5 fe ff       	call   c0000600 <strcpy>
c00110d0:	58                   	pop    eax
c00110d1:	5a                   	pop    edx
c00110d2:	68 76 ea 01 c0       	push   0xc001ea76
c00110d7:	56                   	push   esi
c00110d8:	e8 e3 f6 fe ff       	call   c00007c0 <strcat>
c00110dd:	59                   	pop    ecx
c00110de:	5b                   	pop    ebx
c00110df:	57                   	push   edi
c00110e0:	56                   	push   esi
c00110e1:	e8 da f6 fe ff       	call   c00007c0 <strcat>
c00110e6:	83 c4 10             	add    esp,0x10
c00110e9:	e9 7a ff ff ff       	jmp    c0011068 <SysGetEnv(regs*)+0x29>

c00110ee <SysSetFatAttrib(regs*)>:
c00110ee:	57                   	push   edi
c00110ef:	56                   	push   esi
c00110f0:	53                   	push   ebx
c00110f1:	83 ec 1c             	sub    esp,0x1c
c00110f4:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00110f8:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00110fb:	68 14 01 00 00       	push   0x114
c0011100:	e8 b4 66 ff ff       	call   c00077b9 <malloc>
c0011105:	83 c4 0c             	add    esp,0xc
c0011108:	89 c3                	mov    ebx,eax
c001110a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001110f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011112:	50                   	push   eax
c0011113:	57                   	push   edi
c0011114:	53                   	push   ebx
c0011115:	e8 34 99 ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c001111a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001111d:	83 c4 0c             	add    esp,0xc
c0011120:	0f b6 d4             	movzx  edx,ah
c0011123:	25 ff 00 00 00       	and    eax,0xff
c0011128:	52                   	push   edx
c0011129:	50                   	push   eax
c001112a:	53                   	push   ebx
c001112b:	e8 f0 9b ff ff       	call   c000ad20 <File::chfatattr(unsigned char, unsigned char)>
c0011130:	83 c4 10             	add    esp,0x10
c0011133:	85 db                	test   ebx,ebx
c0011135:	74 14                	je     c001114b <SysSetFatAttrib(regs*)+0x5d>
c0011137:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001113b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001113d:	83 ec 0c             	sub    esp,0xc
c0011140:	53                   	push   ebx
c0011141:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011144:	83 c4 10             	add    esp,0x10
c0011147:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001114b:	85 c0                	test   eax,eax
c001114d:	0f 95 c0             	setne  al
c0011150:	31 d2                	xor    edx,edx
c0011152:	25 ff 00 00 00       	and    eax,0xff
c0011157:	f7 d8                	neg    eax
c0011159:	83 d2 00             	adc    edx,0x0
c001115c:	83 c4 10             	add    esp,0x10
c001115f:	f7 da                	neg    edx
c0011161:	5b                   	pop    ebx
c0011162:	5e                   	pop    esi
c0011163:	5f                   	pop    edi
c0011164:	c3                   	ret    

c0011165 <SysPipe(regs*)>:
c0011165:	57                   	push   edi
c0011166:	56                   	push   esi
c0011167:	53                   	push   ebx
c0011168:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001116c:	83 ec 0c             	sub    esp,0xc
c001116f:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011172:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011175:	6a 20                	push   0x20
c0011177:	e8 3d 66 ff ff       	call   c00077b9 <malloc>
c001117c:	89 c3                	mov    ebx,eax
c001117e:	58                   	pop    eax
c001117f:	5a                   	pop    edx
c0011180:	68 00 50 00 00       	push   0x5000
c0011185:	53                   	push   ebx
c0011186:	e8 33 6f ff ff       	call   c00080be <Pipe::Pipe(int)>
c001118b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001118e:	e8 a7 7c ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c0011193:	89 07                	mov    DWORD PTR [edi],eax
c0011195:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011198:	e8 9d 7c ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c001119d:	83 c4 10             	add    esp,0x10
c00111a0:	89 06                	mov    DWORD PTR [esi],eax
c00111a2:	31 d2                	xor    edx,edx
c00111a4:	5b                   	pop    ebx
c00111a5:	31 c0                	xor    eax,eax
c00111a7:	5e                   	pop    esi
c00111a8:	5f                   	pop    edi
c00111a9:	c3                   	ret    

c00111aa <SysGetUnixTime(regs*)>:
c00111aa:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c00111af:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00111b5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00111b9:	e9 a0 a2 ff ff       	jmp    c000b45e <Clock::timeInSecondsLocal()>

c00111be <string_ends_with(char const*, char const*)>:
c00111be:	57                   	push   edi
c00111bf:	56                   	push   esi
c00111c0:	53                   	push   ebx
c00111c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00111c5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00111c9:	83 ec 0c             	sub    esp,0xc
c00111cc:	53                   	push   ebx
c00111cd:	e8 6e f3 fe ff       	call   c0000540 <strlen>
c00111d2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00111d5:	89 c6                	mov    esi,eax
c00111d7:	e8 64 f3 fe ff       	call   c0000540 <strlen>
c00111dc:	83 c4 10             	add    esp,0x10
c00111df:	39 c6                	cmp    esi,eax
c00111e1:	7d 06                	jge    c00111e9 <string_ends_with(char const*, char const*)+0x2b>
c00111e3:	5b                   	pop    ebx
c00111e4:	31 c0                	xor    eax,eax
c00111e6:	5e                   	pop    esi
c00111e7:	5f                   	pop    edi
c00111e8:	c3                   	ret    
c00111e9:	83 ec 08             	sub    esp,0x8
c00111ec:	29 c6                	sub    esi,eax
c00111ee:	57                   	push   edi
c00111ef:	01 f3                	add    ebx,esi
c00111f1:	53                   	push   ebx
c00111f2:	e8 e9 f4 fe ff       	call   c00006e0 <strcmp>
c00111f7:	83 c4 10             	add    esp,0x10
c00111fa:	85 c0                	test   eax,eax
c00111fc:	5b                   	pop    ebx
c00111fd:	0f 94 c0             	sete   al
c0011200:	5e                   	pop    esi
c0011201:	25 ff 00 00 00       	and    eax,0xff
c0011206:	5f                   	pop    edi
c0011207:	c3                   	ret    

c0011208 <SysOpen(regs*)>:
c0011208:	56                   	push   esi
c0011209:	53                   	push   ebx
c001120a:	81 ec 04 01 00 00    	sub    esp,0x104
c0011210:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011217:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001121a:	85 d2                	test   edx,edx
c001121c:	0f 84 cc 01 00 00    	je     c00113ee <SysOpen(regs*)+0x1e6>
c0011222:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011225:	85 c0                	test   eax,eax
c0011227:	0f 84 c1 01 00 00    	je     c00113ee <SysOpen(regs*)+0x1e6>
c001122d:	83 ec 08             	sub    esp,0x8
c0011230:	50                   	push   eax
c0011231:	68 78 ea 01 c0       	push   0xc001ea78
c0011236:	e8 9d 92 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001123b:	83 c4 0c             	add    esp,0xc
c001123e:	68 85 ea 01 c0       	push   0xc001ea85
c0011243:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011246:	50                   	push   eax
c0011247:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001124b:	56                   	push   esi
c001124c:	e8 53 96 ff ff       	call   c000a8a4 <Fs::standardiseFiles(char*, char const*, char const*)>
c0011251:	89 34 24             	mov    DWORD PTR [esp],esi
c0011254:	e8 e7 f2 fe ff       	call   c0000540 <strlen>
c0011259:	83 c4 10             	add    esp,0x10
c001125c:	48                   	dec    eax
c001125d:	74 1d                	je     c001127c <SysOpen(regs*)+0x74>
c001125f:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0011262:	eb 0f                	jmp    c0011273 <SysOpen(regs*)+0x6b>
c0011264:	80 fa 3a             	cmp    dl,0x3a
c0011267:	74 0f                	je     c0011278 <SysOpen(regs*)+0x70>
c0011269:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001126d:	48                   	dec    eax
c001126e:	74 0c                	je     c001127c <SysOpen(regs*)+0x74>
c0011270:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0011273:	80 fa 2e             	cmp    dl,0x2e
c0011276:	75 ec                	jne    c0011264 <SysOpen(regs*)+0x5c>
c0011278:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001127c:	83 ec 08             	sub    esp,0x8
c001127f:	68 89 ea 01 c0       	push   0xc001ea89
c0011284:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011287:	50                   	push   eax
c0011288:	e8 31 ff ff ff       	call   c00111be <string_ends_with(char const*, char const*)>
c001128d:	83 c4 10             	add    esp,0x10
c0011290:	85 c0                	test   eax,eax
c0011292:	74 1d                	je     c00112b1 <SysOpen(regs*)+0xa9>
c0011294:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011297:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001129d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00112a4:	81 c4 04 01 00 00    	add    esp,0x104
c00112aa:	31 c0                	xor    eax,eax
c00112ac:	31 d2                	xor    edx,edx
c00112ae:	5b                   	pop    ebx
c00112af:	5e                   	pop    esi
c00112b0:	c3                   	ret    
c00112b1:	83 ec 08             	sub    esp,0x8
c00112b4:	68 8e ea 01 c0       	push   0xc001ea8e
c00112b9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00112bc:	50                   	push   eax
c00112bd:	e8 fc fe ff ff       	call   c00111be <string_ends_with(char const*, char const*)>
c00112c2:	83 c4 10             	add    esp,0x10
c00112c5:	85 c0                	test   eax,eax
c00112c7:	75 cb                	jne    c0011294 <SysOpen(regs*)+0x8c>
c00112c9:	83 ec 08             	sub    esp,0x8
c00112cc:	68 8a ea 01 c0       	push   0xc001ea8a
c00112d1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00112d4:	50                   	push   eax
c00112d5:	e8 06 f4 fe ff       	call   c00006e0 <strcmp>
c00112da:	83 c4 10             	add    esp,0x10
c00112dd:	85 c0                	test   eax,eax
c00112df:	74 b3                	je     c0011294 <SysOpen(regs*)+0x8c>
c00112e1:	83 ec 08             	sub    esp,0x8
c00112e4:	68 89 ea 01 c0       	push   0xc001ea89
c00112e9:	56                   	push   esi
c00112ea:	e8 cf fe ff ff       	call   c00111be <string_ends_with(char const*, char const*)>
c00112ef:	83 c4 10             	add    esp,0x10
c00112f2:	85 c0                	test   eax,eax
c00112f4:	75 9e                	jne    c0011294 <SysOpen(regs*)+0x8c>
c00112f6:	83 ec 08             	sub    esp,0x8
c00112f9:	68 93 ea 01 c0       	push   0xc001ea93
c00112fe:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011301:	50                   	push   eax
c0011302:	e8 b7 fe ff ff       	call   c00111be <string_ends_with(char const*, char const*)>
c0011307:	83 c4 10             	add    esp,0x10
c001130a:	85 c0                	test   eax,eax
c001130c:	0f 85 ef 00 00 00    	jne    c0011401 <SysOpen(regs*)+0x1f9>
c0011312:	83 ec 08             	sub    esp,0x8
c0011315:	68 98 ea 01 c0       	push   0xc001ea98
c001131a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001131d:	50                   	push   eax
c001131e:	e8 9b fe ff ff       	call   c00111be <string_ends_with(char const*, char const*)>
c0011323:	83 c4 10             	add    esp,0x10
c0011326:	85 c0                	test   eax,eax
c0011328:	0f 85 d3 00 00 00    	jne    c0011401 <SysOpen(regs*)+0x1f9>
c001132e:	83 ec 08             	sub    esp,0x8
c0011331:	68 94 ea 01 c0       	push   0xc001ea94
c0011336:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011339:	51                   	push   ecx
c001133a:	e8 a1 f3 fe ff       	call   c00006e0 <strcmp>
c001133f:	83 c4 10             	add    esp,0x10
c0011342:	85 c0                	test   eax,eax
c0011344:	0f 84 b7 00 00 00    	je     c0011401 <SysOpen(regs*)+0x1f9>
c001134a:	83 ec 08             	sub    esp,0x8
c001134d:	68 93 ea 01 c0       	push   0xc001ea93
c0011352:	56                   	push   esi
c0011353:	e8 66 fe ff ff       	call   c00111be <string_ends_with(char const*, char const*)>
c0011358:	83 c4 10             	add    esp,0x10
c001135b:	85 c0                	test   eax,eax
c001135d:	0f 85 9e 00 00 00    	jne    c0011401 <SysOpen(regs*)+0x1f9>
c0011363:	83 ec 0c             	sub    esp,0xc
c0011366:	68 14 01 00 00       	push   0x114
c001136b:	e8 49 64 ff ff       	call   c00077b9 <malloc>
c0011370:	83 c4 0c             	add    esp,0xc
c0011373:	89 c6                	mov    esi,eax
c0011375:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001137a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001137d:	50                   	push   eax
c001137e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011381:	52                   	push   edx
c0011382:	56                   	push   esi
c0011383:	e8 c6 96 ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c0011388:	83 c4 10             	add    esp,0x10
c001138b:	85 f6                	test   esi,esi
c001138d:	74 5f                	je     c00113ee <SysOpen(regs*)+0x1e6>
c001138f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011392:	89 d0                	mov    eax,edx
c0011394:	25 ff 00 00 00       	and    eax,0xff
c0011399:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001139c:	89 d0                	mov    eax,edx
c001139e:	83 e0 01             	and    eax,0x1
c00113a1:	f6 c2 02             	test   dl,0x2
c00113a4:	74 03                	je     c00113a9 <SysOpen(regs*)+0x1a1>
c00113a6:	83 c8 02             	or     eax,0x2
c00113a9:	f6 c2 04             	test   dl,0x4
c00113ac:	74 03                	je     c00113b1 <SysOpen(regs*)+0x1a9>
c00113ae:	83 c8 04             	or     eax,0x4
c00113b1:	f6 c2 08             	test   dl,0x8
c00113b4:	74 03                	je     c00113b9 <SysOpen(regs*)+0x1b1>
c00113b6:	83 c8 0a             	or     eax,0xa
c00113b9:	83 e2 10             	and    edx,0x10
c00113bc:	74 03                	je     c00113c1 <SysOpen(regs*)+0x1b9>
c00113be:	83 c8 12             	or     eax,0x12
c00113c1:	83 ec 08             	sub    esp,0x8
c00113c4:	50                   	push   eax
c00113c5:	56                   	push   esi
c00113c6:	e8 43 97 ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c00113cb:	83 c4 10             	add    esp,0x10
c00113ce:	85 c0                	test   eax,eax
c00113d0:	75 1c                	jne    c00113ee <SysOpen(regs*)+0x1e6>
c00113d2:	83 ec 0c             	sub    esp,0xc
c00113d5:	56                   	push   esi
c00113d6:	e8 5f 7a ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c00113db:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00113de:	83 c4 10             	add    esp,0x10
c00113e1:	89 02                	mov    DWORD PTR [edx],eax
c00113e3:	c1 f8 1f             	sar    eax,0x1f
c00113e6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00113e9:	e9 b6 fe ff ff       	jmp    c00112a4 <SysOpen(regs*)+0x9c>
c00113ee:	81 c4 04 01 00 00    	add    esp,0x104
c00113f4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00113f9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00113fe:	5b                   	pop    ebx
c00113ff:	5e                   	pop    esi
c0011400:	c3                   	ret    
c0011401:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011404:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001140a:	e9 8e fe ff ff       	jmp    c001129d <SysOpen(regs*)+0x95>

c001140f <KeSystemCall(regs*, void*)>:
c001140f:	53                   	push   ebx
c0011410:	83 ec 10             	sub    esp,0x10
c0011413:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011417:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001141a:	68 9d ea 01 c0       	push   0xc001ea9d
c001141f:	e8 b4 90 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0011424:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011427:	83 c4 10             	add    esp,0x10
c001142a:	83 f8 32             	cmp    eax,0x32
c001142d:	77 16                	ja     c0011445 <KeSystemCall(regs*, void*)+0x36>
c001142f:	8b 14 85 20 fc 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe03e0]
c0011436:	85 d2                	test   edx,edx
c0011438:	74 0b                	je     c0011445 <KeSystemCall(regs*, void*)+0x36>
c001143a:	83 ec 0c             	sub    esp,0xc
c001143d:	53                   	push   ebx
c001143e:	ff d2                	call   edx
c0011440:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011443:	eb 0d                	jmp    c0011452 <KeSystemCall(regs*, void*)+0x43>
c0011445:	52                   	push   edx
c0011446:	52                   	push   edx
c0011447:	50                   	push   eax
c0011448:	68 ad ea 01 c0       	push   0xc001eaad
c001144d:	e8 86 90 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0011452:	83 c4 10             	add    esp,0x10
c0011455:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001145a:	31 d2                	xor    edx,edx
c001145c:	83 c4 08             	add    esp,0x8
c001145f:	5b                   	pop    ebx
c0011460:	c3                   	ret    

c0011461 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0011461:	55                   	push   ebp
c0011462:	57                   	push   edi
c0011463:	56                   	push   esi
c0011464:	53                   	push   ebx
c0011465:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001146b:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0011472:	8a 1e                	mov    bl,BYTE PTR [esi]
c0011474:	8d 6e 01             	lea    ebp,[esi+0x1]
c0011477:	80 fb 40             	cmp    bl,0x40
c001147a:	75 1b                	jne    c0011497 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001147c:	8a 16                	mov    dl,BYTE PTR [esi]
c001147e:	84 d2                	test   dl,dl
c0011480:	0f 84 f1 00 00 00    	je     c0011577 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011486:	8d 46 01             	lea    eax,[esi+0x1]
c0011489:	80 fa 3a             	cmp    dl,0x3a
c001148c:	74 04                	je     c0011492 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001148e:	89 c6                	mov    esi,eax
c0011490:	eb ea                	jmp    c001147c <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0011492:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011495:	89 c6                	mov    esi,eax
c0011497:	50                   	push   eax
c0011498:	6a 40                	push   0x40
c001149a:	6a 00                	push   0x0
c001149c:	8d 44 24 24          	lea    eax,[esp+0x24]
c00114a0:	50                   	push   eax
c00114a1:	e8 2a f0 fe ff       	call   c00004d0 <memset>
c00114a6:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00114ad:	31 c0                	xor    eax,eax
c00114af:	83 c4 10             	add    esp,0x10
c00114b2:	8a 0f                	mov    cl,BYTE PTR [edi]
c00114b4:	84 c9                	test   cl,cl
c00114b6:	0f 84 bb 00 00 00    	je     c0011577 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00114bc:	3d c7 00 00 00       	cmp    eax,0xc7
c00114c1:	0f 8f b0 00 00 00    	jg     c0011577 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00114c7:	80 f9 0a             	cmp    cl,0xa
c00114ca:	0f 85 98 00 00 00    	jne    c0011568 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c00114d0:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00114d5:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c00114d9:	a8 df                	test   al,0xdf
c00114db:	0f 94 c1             	sete   cl
c00114de:	3c 23                	cmp    al,0x23
c00114e0:	0f 94 c2             	sete   dl
c00114e3:	08 d1                	or     cl,dl
c00114e5:	75 4a                	jne    c0011531 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00114e7:	8d 50 f7             	lea    edx,[eax-0x9]
c00114ea:	80 fa 01             	cmp    dl,0x1
c00114ed:	76 42                	jbe    c0011531 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00114ef:	3c 5b                	cmp    al,0x5b
c00114f1:	75 42                	jne    c0011535 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c00114f3:	80 fb 40             	cmp    bl,0x40
c00114f6:	75 39                	jne    c0011531 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00114f8:	83 ec 0c             	sub    esp,0xc
c00114fb:	8d 54 24 65          	lea    edx,[esp+0x65]
c00114ff:	52                   	push   edx
c0011500:	e8 3b f0 fe ff       	call   c0000540 <strlen>
c0011505:	83 c4 10             	add    esp,0x10
c0011508:	83 f8 3f             	cmp    eax,0x3f
c001150b:	77 6a                	ja     c0011577 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001150d:	50                   	push   eax
c001150e:	50                   	push   eax
c001150f:	8d 54 24 61          	lea    edx,[esp+0x61]
c0011513:	52                   	push   edx
c0011514:	8d 54 24 24          	lea    edx,[esp+0x24]
c0011518:	52                   	push   edx
c0011519:	e8 e2 f0 fe ff       	call   c0000600 <strcpy>
c001151e:	58                   	pop    eax
c001151f:	8d 54 24 24          	lea    edx,[esp+0x24]
c0011523:	52                   	push   edx
c0011524:	e8 17 f0 fe ff       	call   c0000540 <strlen>
c0011529:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001152e:	83 c4 10             	add    esp,0x10
c0011531:	31 d2                	xor    edx,edx
c0011533:	eb 3a                	jmp    c001156f <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0011535:	80 fb 40             	cmp    bl,0x40
c0011538:	74 06                	je     c0011540 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001153a:	8d 44 24 58          	lea    eax,[esp+0x58]
c001153e:	eb 20                	jmp    c0011560 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0011540:	50                   	push   eax
c0011541:	50                   	push   eax
c0011542:	55                   	push   ebp
c0011543:	8d 44 24 24          	lea    eax,[esp+0x24]
c0011547:	50                   	push   eax
c0011548:	e8 93 f1 fe ff       	call   c00006e0 <strcmp>
c001154d:	83 c4 10             	add    esp,0x10
c0011550:	85 c0                	test   eax,eax
c0011552:	75 dd                	jne    c0011531 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011554:	eb e4                	jmp    c001153a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0011556:	8d 50 01             	lea    edx,[eax+0x1]
c0011559:	80 f9 3d             	cmp    cl,0x3d
c001155c:	74 1d                	je     c001157b <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001155e:	89 d0                	mov    eax,edx
c0011560:	8a 08                	mov    cl,BYTE PTR [eax]
c0011562:	84 c9                	test   cl,cl
c0011564:	75 f0                	jne    c0011556 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0011566:	eb 0f                	jmp    c0011577 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011568:	8d 50 01             	lea    edx,[eax+0x1]
c001156b:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001156f:	47                   	inc    edi
c0011570:	89 d0                	mov    eax,edx
c0011572:	e9 3b ff ff ff       	jmp    c00114b2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0011577:	31 c0                	xor    eax,eax
c0011579:	eb 33                	jmp    c00115ae <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001157b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001157f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011582:	50                   	push   eax
c0011583:	50                   	push   eax
c0011584:	8d 44 24 60          	lea    eax,[esp+0x60]
c0011588:	50                   	push   eax
c0011589:	56                   	push   esi
c001158a:	e8 51 f1 fe ff       	call   c00006e0 <strcmp>
c001158f:	83 c4 10             	add    esp,0x10
c0011592:	85 c0                	test   eax,eax
c0011594:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011598:	75 97                	jne    c0011531 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001159a:	51                   	push   ecx
c001159b:	51                   	push   ecx
c001159c:	52                   	push   edx
c001159d:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00115a4:	e8 57 f0 fe ff       	call   c0000600 <strcpy>
c00115a9:	83 c4 10             	add    esp,0x10
c00115ac:	b0 01                	mov    al,0x1
c00115ae:	81 c4 2c 01 00 00    	add    esp,0x12c
c00115b4:	5b                   	pop    ebx
c00115b5:	5e                   	pop    esi
c00115b6:	5f                   	pop    edi
c00115b7:	5d                   	pop    ebp
c00115b8:	c3                   	ret    

c00115b9 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c00115b9:	57                   	push   edi
c00115ba:	56                   	push   esi
c00115bb:	53                   	push   ebx
c00115bc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00115c2:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00115c9:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00115d0:	53                   	push   ebx
c00115d1:	e8 6a ef fe ff       	call   c0000540 <strlen>
c00115d6:	89 34 24             	mov    DWORD PTR [esp],esi
c00115d9:	89 c7                	mov    edi,eax
c00115db:	e8 60 ef fe ff       	call   c0000540 <strlen>
c00115e0:	83 c4 10             	add    esp,0x10
c00115e3:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00115e7:	3d ff 00 00 00       	cmp    eax,0xff
c00115ec:	0f 87 d3 00 00 00    	ja     c00116c5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00115f2:	57                   	push   edi
c00115f3:	57                   	push   edi
c00115f4:	56                   	push   esi
c00115f5:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00115f9:	56                   	push   esi
c00115fa:	e8 01 f0 fe ff       	call   c0000600 <strcpy>
c00115ff:	58                   	pop    eax
c0011600:	5a                   	pop    edx
c0011601:	68 6a ed 01 c0       	push   0xc001ed6a
c0011606:	56                   	push   esi
c0011607:	e8 b4 f1 fe ff       	call   c00007c0 <strcat>
c001160c:	59                   	pop    ecx
c001160d:	5f                   	pop    edi
c001160e:	53                   	push   ebx
c001160f:	56                   	push   esi
c0011610:	e8 ab f1 fe ff       	call   c00007c0 <strcat>
c0011615:	58                   	pop    eax
c0011616:	5a                   	pop    edx
c0011617:	68 c1 ea 01 c0       	push   0xc001eac1
c001161c:	56                   	push   esi
c001161d:	e8 9e f1 fe ff       	call   c00007c0 <strcat>
c0011622:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011629:	e8 8b 61 ff ff       	call   c00077b9 <malloc>
c001162e:	83 c4 0c             	add    esp,0xc
c0011631:	89 c3                	mov    ebx,eax
c0011633:	ff 35 f0 3f 02 c0    	push   DWORD PTR ds:0xc0023ff0
c0011639:	56                   	push   esi
c001163a:	50                   	push   eax
c001163b:	e8 0e 94 ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c0011640:	83 c4 10             	add    esp,0x10
c0011643:	85 db                	test   ebx,ebx
c0011645:	74 7e                	je     c00116c5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0011647:	51                   	push   ecx
c0011648:	51                   	push   ecx
c0011649:	6a 01                	push   0x1
c001164b:	53                   	push   ebx
c001164c:	e8 bd 94 ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c0011651:	83 c4 10             	add    esp,0x10
c0011654:	85 c0                	test   eax,eax
c0011656:	74 08                	je     c0011660 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0011658:	83 ec 0c             	sub    esp,0xc
c001165b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001165d:	53                   	push   ebx
c001165e:	eb 5f                	jmp    c00116bf <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0011660:	52                   	push   edx
c0011661:	8d 44 24 17          	lea    eax,[esp+0x17]
c0011665:	50                   	push   eax
c0011666:	8d 44 24 20          	lea    eax,[esp+0x20]
c001166a:	50                   	push   eax
c001166b:	53                   	push   ebx
c001166c:	e8 49 97 ff ff       	call   c000adba <File::stat(unsigned long long*, bool*)>
c0011671:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011675:	83 c4 10             	add    esp,0x10
c0011678:	89 c1                	mov    ecx,eax
c001167a:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001167e:	74 31                	je     c00116b1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0011680:	83 ec 0c             	sub    esp,0xc
c0011683:	50                   	push   eax
c0011684:	e8 30 61 ff ff       	call   c00077b9 <malloc>
c0011689:	89 c6                	mov    esi,eax
c001168b:	58                   	pop    eax
c001168c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001168e:	8d 54 24 20          	lea    edx,[esp+0x20]
c0011692:	52                   	push   edx
c0011693:	56                   	push   esi
c0011694:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011698:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001169c:	53                   	push   ebx
c001169d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00116a0:	83 c4 20             	add    esp,0x20
c00116a3:	85 c0                	test   eax,eax
c00116a5:	75 0a                	jne    c00116b1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00116a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00116ab:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00116af:	74 18                	je     c00116c9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c00116b1:	83 ec 0c             	sub    esp,0xc
c00116b4:	53                   	push   ebx
c00116b5:	e8 b2 94 ff ff       	call   c000ab6c <File::close()>
c00116ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00116bf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00116c2:	83 c4 10             	add    esp,0x10
c00116c5:	31 c0                	xor    eax,eax
c00116c7:	eb 3b                	jmp    c0011704 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00116c9:	83 ec 0c             	sub    esp,0xc
c00116cc:	53                   	push   ebx
c00116cd:	e8 9a 94 ff ff       	call   c000ab6c <File::close()>
c00116d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116d4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00116d7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00116da:	83 c4 0c             	add    esp,0xc
c00116dd:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00116e4:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00116eb:	56                   	push   esi
c00116ec:	e8 70 fd ff ff       	call   c0011461 <Reg::findLineFromLoadedData(char*, char*, char*)>
c00116f1:	89 34 24             	mov    DWORD PTR [esp],esi
c00116f4:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00116f8:	e8 cc 60 ff ff       	call   c00077c9 <free>
c00116fd:	83 c4 10             	add    esp,0x10
c0011700:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011704:	81 c4 20 01 00 00    	add    esp,0x120
c001170a:	5b                   	pop    ebx
c001170b:	5e                   	pop    esi
c001170c:	5f                   	pop    edi
c001170d:	c3                   	ret    

c001170e <Reg::getLine(char*, char*, char*)>:
c001170e:	57                   	push   edi
c001170f:	56                   	push   esi
c0011710:	53                   	push   ebx
c0011711:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011715:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0011719:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001171d:	57                   	push   edi
c001171e:	56                   	push   esi
c001171f:	53                   	push   ebx
c0011720:	68 c6 ea 01 c0       	push   0xc001eac6
c0011725:	e8 8f fe ff ff       	call   c00115b9 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001172a:	83 c4 10             	add    esp,0x10
c001172d:	84 c0                	test   al,al
c001172f:	75 10                	jne    c0011741 <Reg::getLine(char*, char*, char*)+0x33>
c0011731:	57                   	push   edi
c0011732:	56                   	push   esi
c0011733:	53                   	push   ebx
c0011734:	68 eb ea 01 c0       	push   0xc001eaeb
c0011739:	e8 7b fe ff ff       	call   c00115b9 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001173e:	83 c4 10             	add    esp,0x10
c0011741:	5b                   	pop    ebx
c0011742:	5e                   	pop    esi
c0011743:	5f                   	pop    edi
c0011744:	c3                   	ret    

c0011745 <Reg::readInt(char*, char*, int*)>:
c0011745:	55                   	push   ebp
c0011746:	57                   	push   edi
c0011747:	56                   	push   esi
c0011748:	53                   	push   ebx
c0011749:	81 ec f0 00 00 00    	sub    esp,0xf0
c001174f:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0011753:	57                   	push   edi
c0011754:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001175b:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0011762:	e8 a7 ff ff ff       	call   c001170e <Reg::getLine(char*, char*, char*)>
c0011767:	83 c4 10             	add    esp,0x10
c001176a:	84 c0                	test   al,al
c001176c:	0f 84 b3 00 00 00    	je     c0011825 <Reg::readInt(char*, char*, int*)+0xe0>
c0011772:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0011776:	80 fa 2b             	cmp    dl,0x2b
c0011779:	74 0c                	je     c0011787 <Reg::readInt(char*, char*, int*)+0x42>
c001177b:	80 fa 2d             	cmp    dl,0x2d
c001177e:	75 0e                	jne    c001178e <Reg::readInt(char*, char*, int*)+0x49>
c0011780:	ba 01 00 00 00       	mov    edx,0x1
c0011785:	eb 0b                	jmp    c0011792 <Reg::readInt(char*, char*, int*)+0x4d>
c0011787:	ba 01 00 00 00       	mov    edx,0x1
c001178c:	eb 02                	jmp    c0011790 <Reg::readInt(char*, char*, int*)+0x4b>
c001178e:	31 d2                	xor    edx,edx
c0011790:	31 c0                	xor    eax,eax
c0011792:	be 0a 00 00 00       	mov    esi,0xa
c0011797:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001179c:	75 20                	jne    c00117be <Reg::readInt(char*, char*, int*)+0x79>
c001179e:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c00117a2:	80 f9 78             	cmp    cl,0x78
c00117a5:	75 0a                	jne    c00117b1 <Reg::readInt(char*, char*, int*)+0x6c>
c00117a7:	83 c2 02             	add    edx,0x2
c00117aa:	be 10 00 00 00       	mov    esi,0x10
c00117af:	eb 0d                	jmp    c00117be <Reg::readInt(char*, char*, int*)+0x79>
c00117b1:	80 f9 62             	cmp    cl,0x62
c00117b4:	75 08                	jne    c00117be <Reg::readInt(char*, char*, int*)+0x79>
c00117b6:	83 c2 02             	add    edx,0x2
c00117b9:	be 02 00 00 00       	mov    esi,0x2
c00117be:	01 d7                	add    edi,edx
c00117c0:	31 d2                	xor    edx,edx
c00117c2:	8a 1f                	mov    bl,BYTE PTR [edi]
c00117c4:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c00117c8:	80 fb 0d             	cmp    bl,0xd
c00117cb:	0f 94 c3             	sete   bl
c00117ce:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00117d3:	0f 94 c1             	sete   cl
c00117d6:	08 cb                	or     bl,cl
c00117d8:	75 3a                	jne    c0011814 <Reg::readInt(char*, char*, int*)+0xcf>
c00117da:	0f af d6             	imul   edx,esi
c00117dd:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c00117e2:	83 fe 10             	cmp    esi,0x10
c00117e5:	75 26                	jne    c001180d <Reg::readInt(char*, char*, int*)+0xc8>
c00117e7:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00117eb:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00117ee:	89 e9                	mov    ecx,ebp
c00117f0:	80 f9 05             	cmp    cl,0x5
c00117f3:	77 06                	ja     c00117fb <Reg::readInt(char*, char*, int*)+0xb6>
c00117f5:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c00117f9:	eb 16                	jmp    c0011811 <Reg::readInt(char*, char*, int*)+0xcc>
c00117fb:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00117ff:	83 e9 61             	sub    ecx,0x61
c0011802:	80 f9 05             	cmp    cl,0x5
c0011805:	77 06                	ja     c001180d <Reg::readInt(char*, char*, int*)+0xc8>
c0011807:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001180b:	eb 04                	jmp    c0011811 <Reg::readInt(char*, char*, int*)+0xcc>
c001180d:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0011811:	47                   	inc    edi
c0011812:	eb ae                	jmp    c00117c2 <Reg::readInt(char*, char*, int*)+0x7d>
c0011814:	84 c0                	test   al,al
c0011816:	74 02                	je     c001181a <Reg::readInt(char*, char*, int*)+0xd5>
c0011818:	f7 da                	neg    edx
c001181a:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0011821:	89 10                	mov    DWORD PTR [eax],edx
c0011823:	88 d8                	mov    al,bl
c0011825:	81 c4 ec 00 00 00    	add    esp,0xec
c001182b:	5b                   	pop    ebx
c001182c:	5e                   	pop    esi
c001182d:	5f                   	pop    edi
c001182e:	5d                   	pop    ebp
c001182f:	c3                   	ret    

c0011830 <Reg::readString(char*, char*, char*, int)>:
c0011830:	57                   	push   edi
c0011831:	56                   	push   esi
c0011832:	53                   	push   ebx
c0011833:	81 ec d4 00 00 00    	sub    esp,0xd4
c0011839:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0011840:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0011844:	57                   	push   edi
c0011845:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001184c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0011853:	e8 b6 fe ff ff       	call   c001170e <Reg::getLine(char*, char*, char*)>
c0011858:	83 c4 10             	add    esp,0x10
c001185b:	89 c6                	mov    esi,eax
c001185d:	84 c0                	test   al,al
c001185f:	74 44                	je     c00118a5 <Reg::readString(char*, char*, char*, int)+0x75>
c0011861:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0011868:	31 c0                	xor    eax,eax
c001186a:	4a                   	dec    edx
c001186b:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001186e:	84 c9                	test   cl,cl
c0011870:	74 0f                	je     c0011881 <Reg::readString(char*, char*, char*, int)+0x51>
c0011872:	39 c2                	cmp    edx,eax
c0011874:	7e 0b                	jle    c0011881 <Reg::readString(char*, char*, char*, int)+0x51>
c0011876:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0011879:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001187e:	40                   	inc    eax
c001187f:	eb ea                	jmp    c001186b <Reg::readString(char*, char*, char*, int)+0x3b>
c0011881:	83 ec 0c             	sub    esp,0xc
c0011884:	53                   	push   ebx
c0011885:	e8 b6 ec fe ff       	call   c0000540 <strlen>
c001188a:	83 c4 10             	add    esp,0x10
c001188d:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0011892:	75 11                	jne    c00118a5 <Reg::readString(char*, char*, char*, int)+0x75>
c0011894:	83 ec 0c             	sub    esp,0xc
c0011897:	53                   	push   ebx
c0011898:	e8 a3 ec fe ff       	call   c0000540 <strlen>
c001189d:	83 c4 10             	add    esp,0x10
c00118a0:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00118a5:	81 c4 d0 00 00 00    	add    esp,0xd0
c00118ab:	89 f0                	mov    eax,esi
c00118ad:	5b                   	pop    ebx
c00118ae:	5e                   	pop    esi
c00118af:	5f                   	pop    edi
c00118b0:	c3                   	ret    

c00118b1 <Reg::readBool(char*, char*, bool*)>:
c00118b1:	83 ec 20             	sub    esp,0x20
c00118b4:	8d 44 24 10          	lea    eax,[esp+0x10]
c00118b8:	50                   	push   eax
c00118b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118c1:	e8 7f fe ff ff       	call   c0011745 <Reg::readInt(char*, char*, int*)>
c00118c6:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00118cb:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00118cf:	0f 95 02             	setne  BYTE PTR [edx]
c00118d2:	83 c4 2c             	add    esp,0x2c
c00118d5:	c3                   	ret    

c00118d6 <Reg::readBoolWithDefault(char*, char*, bool)>:
c00118d6:	53                   	push   ebx
c00118d7:	83 ec 1c             	sub    esp,0x1c
c00118da:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00118de:	8d 44 24 13          	lea    eax,[esp+0x13]
c00118e2:	50                   	push   eax
c00118e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118eb:	e8 c1 ff ff ff       	call   c00118b1 <Reg::readBool(char*, char*, bool*)>
c00118f0:	83 c4 10             	add    esp,0x10
c00118f3:	84 c0                	test   al,al
c00118f5:	74 04                	je     c00118fb <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00118f7:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00118fb:	88 d8                	mov    al,bl
c00118fd:	83 c4 18             	add    esp,0x18
c0011900:	5b                   	pop    ebx
c0011901:	c3                   	ret    

c0011902 <Reg::readIntWithDefault(char*, char*, int)>:
c0011902:	53                   	push   ebx
c0011903:	83 ec 1c             	sub    esp,0x1c
c0011906:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001190a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001190e:	50                   	push   eax
c001190f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011913:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011917:	e8 29 fe ff ff       	call   c0011745 <Reg::readInt(char*, char*, int*)>
c001191c:	83 c4 10             	add    esp,0x10
c001191f:	84 c0                	test   al,al
c0011921:	74 04                	je     c0011927 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0011923:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011927:	89 d8                	mov    eax,ebx
c0011929:	83 c4 18             	add    esp,0x18
c001192c:	5b                   	pop    ebx
c001192d:	c3                   	ret    

c001192e <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001192e:	57                   	push   edi
c001192f:	56                   	push   esi
c0011930:	56                   	push   esi
c0011931:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011935:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0011939:	56                   	push   esi
c001193a:	57                   	push   edi
c001193b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001193f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011943:	e8 e8 fe ff ff       	call   c0011830 <Reg::readString(char*, char*, char*, int)>
c0011948:	83 c4 10             	add    esp,0x10
c001194b:	84 c0                	test   al,al
c001194d:	75 1a                	jne    c0011969 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001194f:	51                   	push   ecx
c0011950:	56                   	push   esi
c0011951:	6a 00                	push   0x0
c0011953:	57                   	push   edi
c0011954:	e8 77 eb fe ff       	call   c00004d0 <memset>
c0011959:	8d 4e ff             	lea    ecx,[esi-0x1]
c001195c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011960:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011962:	83 c4 10             	add    esp,0x10
c0011965:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011969:	89 f8                	mov    eax,edi
c001196b:	5a                   	pop    edx
c001196c:	5e                   	pop    esi
c001196d:	5f                   	pop    edi
c001196e:	c3                   	ret    

c001196f <SysEject(regs*)>:
c001196f:	83 ec 0c             	sub    esp,0xc
c0011972:	83 ca ff             	or     edx,0xffffffff
c0011975:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011979:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001197c:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011981:	83 e9 41             	sub    ecx,0x41
c0011984:	83 f9 19             	cmp    ecx,0x19
c0011987:	77 18                	ja     c00119a1 <SysEject(regs*)+0x32>
c0011989:	8b 0c 8d 80 32 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcd80]
c0011990:	85 c9                	test   ecx,ecx
c0011992:	74 0d                	je     c00119a1 <SysEject(regs*)+0x32>
c0011994:	83 ec 0c             	sub    esp,0xc
c0011997:	51                   	push   ecx
c0011998:	e8 e1 b1 ff ff       	call   c000cb7e <LogicalDisk::eject()>
c001199d:	83 c4 10             	add    esp,0x10
c00119a0:	99                   	cdq    
c00119a1:	83 c4 0c             	add    esp,0xc
c00119a4:	c3                   	ret    

c00119a5 <SysExit(regs*)>:
c00119a5:	83 ec 18             	sub    esp,0x18
c00119a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00119ac:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00119af:	e8 6c 28 00 00       	call   c0014220 <terminateTask(int)>
c00119b4:	83 c8 ff             	or     eax,0xffffffff
c00119b7:	83 c4 1c             	add    esp,0x1c
c00119ba:	89 c2                	mov    edx,eax
c00119bc:	c3                   	ret    

c00119bd <SysGetCwd(regs*)>:
c00119bd:	83 ec 10             	sub    esp,0x10
c00119c0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00119c4:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00119c7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00119ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119cf:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00119d2:	e8 79 8e ff ff       	call   c000a850 <Fs::getcwd(Process*, char*, int)>
c00119d7:	83 c4 1c             	add    esp,0x1c
c00119da:	99                   	cdq    
c00119db:	c3                   	ret    

c00119dc <SysGetPID(regs*)>:
c00119dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119e1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00119e6:	99                   	cdq    
c00119e7:	c3                   	ret    

c00119e8 <SysGetRAMData(regs*)>:
c00119e8:	8b 0d 48 0d 02 c0    	mov    ecx,DWORD PTR ds:0xc0020d48
c00119ee:	69 05 44 0d 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0020d44,0xc8
c00119f8:	99                   	cdq    
c00119f9:	f7 f9                	idiv   ecx
c00119fb:	c1 e0 18             	shl    eax,0x18
c00119fe:	09 c8                	or     eax,ecx
c0011a00:	99                   	cdq    
c0011a01:	c3                   	ret    

c0011a02 <SysGetVGAPtr(regs*)>:
c0011a02:	55                   	push   ebp
c0011a03:	57                   	push   edi
c0011a04:	56                   	push   esi
c0011a05:	53                   	push   ebx
c0011a06:	83 ec 18             	sub    esp,0x18
c0011a09:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011a0d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0011a10:	e8 0b 23 00 00       	call   c0013d20 <Thr::processFromPID(int)>
c0011a15:	83 c4 10             	add    esp,0x10
c0011a18:	89 c1                	mov    ecx,eax
c0011a1a:	b8 01 00 00 00       	mov    eax,0x1
c0011a1f:	85 c9                	test   ecx,ecx
c0011a21:	74 57                	je     c0011a7a <SysGetVGAPtr(regs*)+0x78>
c0011a23:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0011a29:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0011a2d:	74 0c                	je     c0011a3b <SysGetVGAPtr(regs*)+0x39>
c0011a2f:	83 ec 0c             	sub    esp,0xc
c0011a32:	55                   	push   ebp
c0011a33:	e8 bf 69 ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c0011a38:	83 c4 10             	add    esp,0x10
c0011a3b:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0011a3e:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011a41:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0011a46:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011a48:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0011a4b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a4e:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0011a54:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a57:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0011a5a:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0011a60:	50                   	push   eax
c0011a61:	50                   	push   eax
c0011a62:	68 06 eb 01 c0       	push   0xc001eb06
c0011a67:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a6a:	05 a8 0f 00 00       	add    eax,0xfa8
c0011a6f:	50                   	push   eax
c0011a70:	e8 8b eb fe ff       	call   c0000600 <strcpy>
c0011a75:	83 c4 10             	add    esp,0x10
c0011a78:	31 c0                	xor    eax,eax
c0011a7a:	83 c4 0c             	add    esp,0xc
c0011a7d:	31 d2                	xor    edx,edx
c0011a7f:	5b                   	pop    ebx
c0011a80:	5e                   	pop    esi
c0011a81:	5f                   	pop    edi
c0011a82:	5d                   	pop    ebp
c0011a83:	c3                   	ret    

c0011a84 <SysLoadDLL(regs*)>:
c0011a84:	56                   	push   esi
c0011a85:	53                   	push   ebx
c0011a86:	31 d2                	xor    edx,edx
c0011a88:	51                   	push   ecx
c0011a89:	b8 01 00 00 00       	mov    eax,0x1
c0011a8e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011a92:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0011a96:	0f 84 8c 00 00 00    	je     c0011b28 <SysLoadDLL(regs*)+0xa4>
c0011a9c:	83 ec 0c             	sub    esp,0xc
c0011a9f:	68 14 01 00 00       	push   0x114
c0011aa4:	e8 10 5d ff ff       	call   c00077b9 <malloc>
c0011aa9:	83 c4 0c             	add    esp,0xc
c0011aac:	89 c3                	mov    ebx,eax
c0011aae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ab3:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011ab6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011ab9:	53                   	push   ebx
c0011aba:	e8 8f 8f ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c0011abf:	83 c4 10             	add    esp,0x10
c0011ac2:	31 d2                	xor    edx,edx
c0011ac4:	b8 02 00 00 00       	mov    eax,0x2
c0011ac9:	85 db                	test   ebx,ebx
c0011acb:	74 5b                	je     c0011b28 <SysLoadDLL(regs*)+0xa4>
c0011acd:	83 ec 0c             	sub    esp,0xc
c0011ad0:	53                   	push   ebx
c0011ad1:	e8 a6 92 ff ff       	call   c000ad7c <File::exists()>
c0011ad6:	83 c4 10             	add    esp,0x10
c0011ad9:	84 c0                	test   al,al
c0011adb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011add:	75 11                	jne    c0011af0 <SysLoadDLL(regs*)+0x6c>
c0011adf:	83 ec 0c             	sub    esp,0xc
c0011ae2:	53                   	push   ebx
c0011ae3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011ae6:	83 c4 10             	add    esp,0x10
c0011ae9:	b8 03 00 00 00       	mov    eax,0x3
c0011aee:	eb 36                	jmp    c0011b26 <SysLoadDLL(regs*)+0xa2>
c0011af0:	83 ec 0c             	sub    esp,0xc
c0011af3:	53                   	push   ebx
c0011af4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011af7:	58                   	pop    eax
c0011af8:	5a                   	pop    edx
c0011af9:	6a 00                	push   0x0
c0011afb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011afe:	e8 86 12 00 00       	call   c0012d89 <Thr::loadDLL(char const*, bool)>
c0011b03:	83 c4 10             	add    esp,0x10
c0011b06:	89 c1                	mov    ecx,eax
c0011b08:	31 d2                	xor    edx,edx
c0011b0a:	b8 04 00 00 00       	mov    eax,0x4
c0011b0f:	85 c9                	test   ecx,ecx
c0011b11:	74 15                	je     c0011b28 <SysLoadDLL(regs*)+0xa4>
c0011b13:	53                   	push   ebx
c0011b14:	53                   	push   ebx
c0011b15:	ff 35 18 0d 02 c0    	push   DWORD PTR ds:0xc0020d18
c0011b1b:	51                   	push   ecx
c0011b1c:	e8 99 14 00 00       	call   c0012fba <Thr::executeDLL(unsigned long, void*)>
c0011b21:	83 c4 10             	add    esp,0x10
c0011b24:	31 c0                	xor    eax,eax
c0011b26:	31 d2                	xor    edx,edx
c0011b28:	59                   	pop    ecx
c0011b29:	5b                   	pop    ebx
c0011b2a:	5e                   	pop    esi
c0011b2b:	c3                   	ret    

c0011b2c <SysRead(regs*)>:
c0011b2c:	57                   	push   edi
c0011b2d:	56                   	push   esi
c0011b2e:	53                   	push   ebx
c0011b2f:	83 ec 10             	sub    esp,0x10
c0011b32:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011b36:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011b39:	83 f8 02             	cmp    eax,0x2
c0011b3c:	77 10                	ja     c0011b4e <SysRead(regs*)+0x22>
c0011b3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b43:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b46:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011b4c:	eb 0e                	jmp    c0011b5c <SysRead(regs*)+0x30>
c0011b4e:	83 ec 0c             	sub    esp,0xc
c0011b51:	50                   	push   eax
c0011b52:	e8 d8 75 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0011b57:	83 c4 10             	add    esp,0x10
c0011b5a:	89 c1                	mov    ecx,eax
c0011b5c:	83 c8 ff             	or     eax,0xffffffff
c0011b5f:	85 c9                	test   ecx,ecx
c0011b61:	89 c2                	mov    edx,eax
c0011b63:	74 28                	je     c0011b8d <SysRead(regs*)+0x61>
c0011b65:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011b6d:	31 ff                	xor    edi,edi
c0011b6f:	83 ec 0c             	sub    esp,0xc
c0011b72:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011b74:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011b78:	52                   	push   edx
c0011b79:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011b7c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011b7f:	57                   	push   edi
c0011b80:	56                   	push   esi
c0011b81:	51                   	push   ecx
c0011b82:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011b85:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b89:	83 c4 20             	add    esp,0x20
c0011b8c:	99                   	cdq    
c0011b8d:	83 c4 10             	add    esp,0x10
c0011b90:	5b                   	pop    ebx
c0011b91:	5e                   	pop    esi
c0011b92:	5f                   	pop    edi
c0011b93:	c3                   	ret    

c0011b94 <SysRegisterSignal(regs*)>:
c0011b94:	83 ec 18             	sub    esp,0x18
c0011b97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011b9b:	6a 00                	push   0x0
c0011b9d:	6a 00                	push   0x0
c0011b9f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011ba2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011ba5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011baa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011bad:	05 20 07 00 00       	add    eax,0x720
c0011bb2:	50                   	push   eax
c0011bb3:	e8 09 e9 ff ff       	call   c00104c1 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0011bb8:	83 c4 2c             	add    esp,0x2c
c0011bbb:	99                   	cdq    
c0011bbc:	c3                   	ret    

c0011bbd <SysSbrk(regs*)>:
c0011bbd:	56                   	push   esi
c0011bbe:	53                   	push   ebx
c0011bbf:	83 ec 0c             	sub    esp,0xc
c0011bc2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011bc6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011bc9:	68 10 eb 01 c0       	push   0xc001eb10
c0011bce:	e8 05 89 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0011bd3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bd8:	8b 5b 20             	mov    ebx,DWORD PTR [ebx+0x20]
c0011bdb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011bde:	83 c4 10             	add    esp,0x10
c0011be1:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0011be7:	85 db                	test   ebx,ebx
c0011be9:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0011bec:	74 02                	je     c0011bf0 <SysSbrk(regs*)+0x33>
c0011bee:	79 06                	jns    c0011bf6 <SysSbrk(regs*)+0x39>
c0011bf0:	89 f0                	mov    eax,esi
c0011bf2:	31 d2                	xor    edx,edx
c0011bf4:	eb 2a                	jmp    c0011c20 <SysSbrk(regs*)+0x63>
c0011bf6:	83 c8 ff             	or     eax,0xffffffff
c0011bf9:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0011bff:	89 c2                	mov    edx,eax
c0011c01:	77 1d                	ja     c0011c20 <SysSbrk(regs*)+0x63>
c0011c03:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0011c09:	50                   	push   eax
c0011c0a:	c1 ea 0c             	shr    edx,0xc
c0011c0d:	68 07 0c 00 00       	push   0xc07
c0011c12:	52                   	push   edx
c0011c13:	51                   	push   ecx
c0011c14:	e8 05 7e ff ff       	call   c0009a1e <VAS::allocatePages(int, int)>
c0011c19:	89 f0                	mov    eax,esi
c0011c1b:	31 d2                	xor    edx,edx
c0011c1d:	83 c4 10             	add    esp,0x10
c0011c20:	59                   	pop    ecx
c0011c21:	5b                   	pop    ebx
c0011c22:	5e                   	pop    esi
c0011c23:	c3                   	ret    

c0011c24 <SysSetCwd(regs*)>:
c0011c24:	83 ec 14             	sub    esp,0x14
c0011c27:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011c2b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011c2e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c33:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011c36:	e8 e0 91 ff ff       	call   c000ae1b <Fs::setcwd(Process*, char*)>
c0011c3b:	83 c4 1c             	add    esp,0x1c
c0011c3e:	99                   	cdq    
c0011c3f:	c3                   	ret    

c0011c40 <SysSetTime(regs*)>:
c0011c40:	55                   	push   ebp
c0011c41:	31 c9                	xor    ecx,ecx
c0011c43:	57                   	push   edi
c0011c44:	bd 0c 00 00 00       	mov    ebp,0xc
c0011c49:	56                   	push   esi
c0011c4a:	53                   	push   ebx
c0011c4b:	31 db                	xor    ebx,ebx
c0011c4d:	83 ec 10             	sub    esp,0x10
c0011c50:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011c54:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0011c57:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0011c5a:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0011c5d:	89 c2                	mov    edx,eax
c0011c5f:	66 81 ef 6c 07       	sub    di,0x76c
c0011c64:	83 e2 1f             	and    edx,0x1f
c0011c67:	c1 e7 10             	shl    edi,0x10
c0011c6a:	42                   	inc    edx
c0011c6b:	c1 e8 05             	shr    eax,0x5
c0011c6e:	88 d1                	mov    cl,dl
c0011c70:	31 d2                	xor    edx,edx
c0011c72:	f7 f5                	div    ebp
c0011c74:	89 dd                	mov    ebp,ebx
c0011c76:	88 d5                	mov    ch,dl
c0011c78:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0011c7e:	0f b7 c1             	movzx  eax,cx
c0011c81:	31 d2                	xor    edx,edx
c0011c83:	09 f8                	or     eax,edi
c0011c85:	bf 3c 00 00 00       	mov    edi,0x3c
c0011c8a:	89 c1                	mov    ecx,eax
c0011c8c:	89 f0                	mov    eax,esi
c0011c8e:	f7 f7                	div    edi
c0011c90:	c1 e2 10             	shl    edx,0x10
c0011c93:	09 d5                	or     ebp,edx
c0011c95:	31 d2                	xor    edx,edx
c0011c97:	89 eb                	mov    ebx,ebp
c0011c99:	f7 f7                	div    edi
c0011c9b:	bf 10 0e 00 00       	mov    edi,0xe10
c0011ca0:	88 d7                	mov    bh,dl
c0011ca2:	89 f0                	mov    eax,esi
c0011ca4:	31 d2                	xor    edx,edx
c0011ca6:	f7 f7                	div    edi
c0011ca8:	bf 18 00 00 00       	mov    edi,0x18
c0011cad:	31 d2                	xor    edx,edx
c0011caf:	f7 f7                	div    edi
c0011cb1:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c0011cb6:	88 d3                	mov    bl,dl
c0011cb8:	53                   	push   ebx
c0011cb9:	51                   	push   ecx
c0011cba:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0011cc0:	e8 67 99 ff ff       	call   c000b62c <Clock::setTimeInDatetimeLocal(datetime_t)>
c0011cc5:	83 c4 1c             	add    esp,0x1c
c0011cc8:	83 f0 01             	xor    eax,0x1
c0011ccb:	5b                   	pop    ebx
c0011ccc:	0f b6 c0             	movzx  eax,al
c0011ccf:	5e                   	pop    esi
c0011cd0:	31 d2                	xor    edx,edx
c0011cd2:	5f                   	pop    edi
c0011cd3:	5d                   	pop    ebp
c0011cd4:	c3                   	ret    

c0011cd5 <SysTimezone(regs*)>:
c0011cd5:	53                   	push   ebx
c0011cd6:	83 ec 08             	sub    esp,0x8
c0011cd9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011cdd:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0011ce1:	75 17                	jne    c0011cfa <SysTimezone(regs*)+0x25>
c0011ce3:	83 ec 0c             	sub    esp,0xc
c0011ce6:	68 1c eb 01 c0       	push   0xc001eb1c
c0011ceb:	e8 e8 87 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0011cf0:	83 c8 ff             	or     eax,0xffffffff
c0011cf3:	83 c4 10             	add    esp,0x10
c0011cf6:	89 c2                	mov    edx,eax
c0011cf8:	eb 20                	jmp    c0011d1a <SysTimezone(regs*)+0x45>
c0011cfa:	83 ec 0c             	sub    esp,0xc
c0011cfd:	68 31 eb 01 c0       	push   0xc001eb31
c0011d02:	e8 d1 87 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0011d07:	58                   	pop    eax
c0011d08:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011d0b:	e8 78 96 ff ff       	call   c000b388 <User::loadClockSettings(int)>
c0011d10:	83 c4 10             	add    esp,0x10
c0011d13:	b8 01 00 00 00       	mov    eax,0x1
c0011d18:	31 d2                	xor    edx,edx
c0011d1a:	83 c4 08             	add    esp,0x8
c0011d1d:	5b                   	pop    ebx
c0011d1e:	c3                   	ret    

c0011d1f <SysWrite(regs*)>:
c0011d1f:	57                   	push   edi
c0011d20:	56                   	push   esi
c0011d21:	53                   	push   ebx
c0011d22:	83 ec 10             	sub    esp,0x10
c0011d25:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011d29:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d2c:	83 f8 02             	cmp    eax,0x2
c0011d2f:	77 10                	ja     c0011d41 <SysWrite(regs*)+0x22>
c0011d31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d36:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d39:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011d3f:	eb 0e                	jmp    c0011d4f <SysWrite(regs*)+0x30>
c0011d41:	83 ec 0c             	sub    esp,0xc
c0011d44:	50                   	push   eax
c0011d45:	e8 e5 73 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0011d4a:	83 c4 10             	add    esp,0x10
c0011d4d:	89 c1                	mov    ecx,eax
c0011d4f:	83 c8 ff             	or     eax,0xffffffff
c0011d52:	85 c9                	test   ecx,ecx
c0011d54:	89 c2                	mov    edx,eax
c0011d56:	74 28                	je     c0011d80 <SysWrite(regs*)+0x61>
c0011d58:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011d60:	31 ff                	xor    edi,edi
c0011d62:	83 ec 0c             	sub    esp,0xc
c0011d65:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011d67:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011d6b:	52                   	push   edx
c0011d6c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011d6f:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011d72:	57                   	push   edi
c0011d73:	56                   	push   esi
c0011d74:	51                   	push   ecx
c0011d75:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011d78:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d7c:	83 c4 20             	add    esp,0x20
c0011d7f:	99                   	cdq    
c0011d80:	83 c4 10             	add    esp,0x10
c0011d83:	5b                   	pop    ebx
c0011d84:	5e                   	pop    esi
c0011d85:	5f                   	pop    edi
c0011d86:	c3                   	ret    

c0011d87 <SysWsbe(regs*)>:
c0011d87:	57                   	push   edi
c0011d88:	b9 0b 00 00 00       	mov    ecx,0xb
c0011d8d:	56                   	push   esi
c0011d8e:	be 70 eb 01 c0       	mov    esi,0xc001eb70
c0011d93:	53                   	push   ebx
c0011d94:	83 ec 30             	sub    esp,0x30
c0011d97:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011d9b:	fc                   	cld    
c0011d9c:	83 ec 0c             	sub    esp,0xc
c0011d9f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011da1:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0011da5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011daa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011dad:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0011db3:	8b 06                	mov    eax,DWORD PTR [esi]
c0011db5:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0011db8:	57                   	push   edi
c0011db9:	e8 82 e7 fe ff       	call   c0000540 <strlen>
c0011dbe:	5a                   	pop    edx
c0011dbf:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0011dc3:	52                   	push   edx
c0011dc4:	31 d2                	xor    edx,edx
c0011dc6:	57                   	push   edi
c0011dc7:	52                   	push   edx
c0011dc8:	50                   	push   eax
c0011dc9:	56                   	push   esi
c0011dca:	ff d3                	call   ebx
c0011dcc:	83 c4 14             	add    esp,0x14
c0011dcf:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011dd3:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011dd6:	e8 45 24 00 00       	call   c0014220 <terminateTask(int)>
c0011ddb:	83 c4 40             	add    esp,0x40
c0011dde:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011de3:	5b                   	pop    ebx
c0011de4:	31 d2                	xor    edx,edx
c0011de6:	5e                   	pop    esi
c0011de7:	5f                   	pop    edi
c0011de8:	c3                   	ret    

c0011de9 <SysYield(regs*)>:
c0011de9:	83 ec 0c             	sub    esp,0xc
c0011dec:	fa                   	cli    
c0011ded:	ff 05 c8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fc8
c0011df3:	e8 04 1b 00 00       	call   c00138fc <schedule()>
c0011df8:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c0011dfd:	48                   	dec    eax
c0011dfe:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c0011e03:	75 01                	jne    c0011e06 <SysYield(regs*)+0x1d>
c0011e05:	fb                   	sti    
c0011e06:	31 c0                	xor    eax,eax
c0011e08:	31 d2                	xor    edx,edx
c0011e0a:	83 c4 0c             	add    esp,0xc
c0011e0d:	c3                   	ret    

c0011e0e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0011e0e:	55                   	push   ebp
c0011e0f:	57                   	push   edi
c0011e10:	56                   	push   esi
c0011e11:	53                   	push   ebx
c0011e12:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0011e18:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0011e20:	0f 95 c2             	setne  dl
c0011e23:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0011e2b:	0f 94 c0             	sete   al
c0011e2e:	84 c2                	test   dl,al
c0011e30:	74 34                	je     c0011e66 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011e32:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0011e3d:	74 27                	je     c0011e66 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011e3f:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0011e46:	05 00 10 00 00       	add    eax,0x1000
c0011e4b:	89 c1                	mov    ecx,eax
c0011e4d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011e52:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0011e58:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0011e5f:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0011e66:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0011e6d:	83 ec 0c             	sub    esp,0xc
c0011e70:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011e76:	6a 01                	push   0x1
c0011e78:	e8 08 74 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0011e7d:	83 c4 10             	add    esp,0x10
c0011e80:	89 c3                	mov    ebx,eax
c0011e82:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011e88:	0f 86 25 01 00 00    	jbe    c0011fb3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c0011e8e:	c1 ee 0c             	shr    esi,0xc
c0011e91:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011e98:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0011e9c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011ea4:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0011eab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011eaf:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0011eb6:	29 ef                	sub    edi,ebp
c0011eb8:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0011ebc:	0f 83 f8 00 00 00    	jae    c0011fba <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0011ec2:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0011ec8:	76 05                	jbe    c0011ecf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c0011eca:	bf 00 10 00 00       	mov    edi,0x1000
c0011ecf:	83 ec 0c             	sub    esp,0xc
c0011ed2:	31 d2                	xor    edx,edx
c0011ed4:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011edb:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011edd:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011ee1:	50                   	push   eax
c0011ee2:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011ee6:	56                   	push   esi
c0011ee7:	52                   	push   edx
c0011ee8:	57                   	push   edi
c0011ee9:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0011ef0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011ef3:	83 c4 20             	add    esp,0x20
c0011ef6:	85 c0                	test   eax,eax
c0011ef8:	75 06                	jne    c0011f00 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c0011efa:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011efe:	74 13                	je     c0011f13 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0011f00:	83 ec 0c             	sub    esp,0xc
c0011f03:	53                   	push   ebx
c0011f04:	e8 ac 76 ff ff       	call   c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>
c0011f09:	83 c4 10             	add    esp,0x10
c0011f0c:	31 c0                	xor    eax,eax
c0011f0e:	e9 7c 01 00 00       	jmp    c001208f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0011f13:	fa                   	cli    
c0011f14:	ff 05 c8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fc8
c0011f1a:	e8 76 5b ff ff       	call   c0007a95 <Phys::allocatePage()>
c0011f1f:	6a 07                	push   0x7
c0011f21:	89 c7                	mov    edi,eax
c0011f23:	53                   	push   ebx
c0011f24:	50                   	push   eax
c0011f25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f2a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f2d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f33:	e8 e2 79 ff ff       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c0011f38:	83 c4 0c             	add    esp,0xc
c0011f3b:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011f42:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f48:	6a 00                	push   0x0
c0011f4a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f4f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f52:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f58:	e8 2f 78 ff ff       	call   c000978c <VAS::mapOtherVASIn(bool, VAS*)>
c0011f5d:	58                   	pop    eax
c0011f5e:	5a                   	pop    edx
c0011f5f:	68 07 0c 00 00       	push   0xc07
c0011f64:	55                   	push   ebp
c0011f65:	57                   	push   edi
c0011f66:	89 df                	mov    edi,ebx
c0011f68:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011f6f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f75:	6a 00                	push   0x0
c0011f77:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f7c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f7f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f85:	e8 50 7d ff ff       	call   c0009cda <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0011f8a:	b9 00 10 00 00       	mov    ecx,0x1000
c0011f8f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011f91:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c0011f96:	83 c4 20             	add    esp,0x20
c0011f99:	48                   	dec    eax
c0011f9a:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c0011f9f:	85 c0                	test   eax,eax
c0011fa1:	75 01                	jne    c0011fa4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c0011fa3:	fb                   	sti    
c0011fa4:	81 c5 00 10 00 00    	add    ebp,0x1000
c0011faa:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0011fae:	e9 f1 fe ff ff       	jmp    c0011ea4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c0011fb3:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011fba:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011fc1:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011fc7:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011fcd:	0f 86 ae 00 00 00    	jbe    c0012081 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0011fd3:	fa                   	cli    
c0011fd4:	ff 05 c8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fc8
c0011fda:	c1 ee 0c             	shr    esi,0xc
c0011fdd:	51                   	push   ecx
c0011fde:	31 ff                	xor    edi,edi
c0011fe0:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011fe7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011fed:	6a 00                	push   0x0
c0011fef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ff4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ff7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011ffd:	e8 8a 77 ff ff       	call   c000978c <VAS::mapOtherVASIn(bool, VAS*)>
c0012002:	83 c4 10             	add    esp,0x10
c0012005:	e8 8b 5a ff ff       	call   c0007a95 <Phys::allocatePage()>
c001200a:	47                   	inc    edi
c001200b:	6a 07                	push   0x7
c001200d:	53                   	push   ebx
c001200e:	50                   	push   eax
c001200f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012013:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012019:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001201c:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0012022:	e8 f3 78 ff ff       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c0012027:	58                   	pop    eax
c0012028:	5a                   	pop    edx
c0012029:	68 07 0c 00 00       	push   0xc07
c001202e:	55                   	push   ebp
c001202f:	81 c5 00 10 00 00    	add    ebp,0x1000
c0012035:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012039:	50                   	push   eax
c001203a:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0012041:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012047:	6a 00                	push   0x0
c0012049:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001204e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012051:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012057:	e8 7e 7c ff ff       	call   c0009cda <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001205c:	83 c4 1c             	add    esp,0x1c
c001205f:	68 00 10 00 00       	push   0x1000
c0012064:	6a 00                	push   0x0
c0012066:	53                   	push   ebx
c0012067:	e8 64 e4 fe ff       	call   c00004d0 <memset>
c001206c:	83 c4 10             	add    esp,0x10
c001206f:	39 fe                	cmp    esi,edi
c0012071:	77 92                	ja     c0012005 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c0012073:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c0012078:	48                   	dec    eax
c0012079:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c001207e:	75 01                	jne    c0012081 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0012080:	fb                   	sti    
c0012081:	83 ec 0c             	sub    esp,0xc
c0012084:	53                   	push   ebx
c0012085:	e8 2b 75 ff ff       	call   c00095b5 <Virt::freeKernelVirtualPages(unsigned long)>
c001208a:	83 c4 10             	add    esp,0x10
c001208d:	b0 01                	mov    al,0x1
c001208f:	81 c4 2c 10 00 00    	add    esp,0x102c
c0012095:	5b                   	pop    ebx
c0012096:	5e                   	pop    esi
c0012097:	5f                   	pop    edi
c0012098:	5d                   	pop    ebp
c0012099:	c3                   	ret    

c001209a <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001209a:	55                   	push   ebp
c001209b:	57                   	push   edi
c001209c:	56                   	push   esi
c001209d:	53                   	push   ebx
c001209e:	83 ec 48             	sub    esp,0x48
c00120a1:	68 14 01 00 00       	push   0x114
c00120a6:	e8 0e 57 ff ff       	call   c00077b9 <malloc>
c00120ab:	83 c4 0c             	add    esp,0xc
c00120ae:	89 c6                	mov    esi,eax
c00120b0:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00120b4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00120b8:	50                   	push   eax
c00120b9:	e8 90 89 ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c00120be:	58                   	pop    eax
c00120bf:	5a                   	pop    edx
c00120c0:	6a 01                	push   0x1
c00120c2:	56                   	push   esi
c00120c3:	e8 46 8a ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c00120c8:	83 c4 10             	add    esp,0x10
c00120cb:	85 c0                	test   eax,eax
c00120cd:	0f 85 47 01 00 00    	jne    c001221a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00120d3:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00120db:	83 ec 0c             	sub    esp,0xc
c00120de:	6a 34                	push   0x34
c00120e0:	e8 d4 56 ff ff       	call   c00077b9 <malloc>
c00120e5:	89 c3                	mov    ebx,eax
c00120e7:	58                   	pop    eax
c00120e8:	8b 06                	mov    eax,DWORD PTR [esi]
c00120ea:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00120ee:	57                   	push   edi
c00120ef:	53                   	push   ebx
c00120f0:	6a 00                	push   0x0
c00120f2:	6a 34                	push   0x34
c00120f4:	56                   	push   esi
c00120f5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00120f8:	83 c4 20             	add    esp,0x20
c00120fb:	85 c0                	test   eax,eax
c00120fd:	0f 85 17 01 00 00    	jne    c001221a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012103:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0012109:	0f 85 0b 01 00 00    	jne    c001221a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001210f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012112:	85 c0                	test   eax,eax
c0012114:	0f 84 00 01 00 00    	je     c001221a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001211a:	31 d2                	xor    edx,edx
c001211c:	55                   	push   ebp
c001211d:	52                   	push   edx
c001211e:	50                   	push   eax
c001211f:	56                   	push   esi
c0012120:	e8 a7 8a ff ff       	call   c000abcc <File::seek(unsigned long long)>
c0012125:	83 c4 10             	add    esp,0x10
c0012128:	85 c0                	test   eax,eax
c001212a:	0f 85 ea 00 00 00    	jne    c001221a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012130:	83 ec 0c             	sub    esp,0xc
c0012133:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012136:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001213a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001213e:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0012142:	0f af c2             	imul   eax,edx
c0012145:	50                   	push   eax
c0012146:	e8 6e 56 ff ff       	call   c00077b9 <malloc>
c001214b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001214d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012151:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012154:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012158:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001215c:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0012160:	0f af c2             	imul   eax,edx
c0012163:	99                   	cdq    
c0012164:	52                   	push   edx
c0012165:	50                   	push   eax
c0012166:	56                   	push   esi
c0012167:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001216a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001216d:	83 c4 20             	add    esp,0x20
c0012170:	85 c0                	test   eax,eax
c0012172:	0f 84 a2 00 00 00    	je     c001221a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012178:	31 d2                	xor    edx,edx
c001217a:	51                   	push   ecx
c001217b:	52                   	push   edx
c001217c:	50                   	push   eax
c001217d:	56                   	push   esi
c001217e:	e8 49 8a ff ff       	call   c000abcc <File::seek(unsigned long long)>
c0012183:	83 c4 10             	add    esp,0x10
c0012186:	85 c0                	test   eax,eax
c0012188:	0f 85 8c 00 00 00    	jne    c001221a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001218e:	83 ec 0c             	sub    esp,0xc
c0012191:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0012195:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0012199:	31 ed                	xor    ebp,ebp
c001219b:	0f af c2             	imul   eax,edx
c001219e:	50                   	push   eax
c001219f:	e8 15 56 ff ff       	call   c00077b9 <malloc>
c00121a4:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00121a6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00121aa:	89 3c 24             	mov    DWORD PTR [esp],edi
c00121ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00121b1:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00121b5:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00121b9:	0f af c2             	imul   eax,edx
c00121bc:	99                   	cdq    
c00121bd:	52                   	push   edx
c00121be:	50                   	push   eax
c00121bf:	56                   	push   esi
c00121c0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00121c3:	83 c4 20             	add    esp,0x20
c00121c6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00121ce:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00121d2:	0f 86 80 00 00 00    	jbe    c0012258 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00121d8:	0f b7 fd             	movzx  edi,bp
c00121db:	c1 e7 05             	shl    edi,0x5
c00121de:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00121e2:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00121e5:	75 6b                	jne    c0012252 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00121e7:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00121ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00121ee:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00121f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00121f5:	52                   	push   edx
c00121f6:	31 d2                	xor    edx,edx
c00121f8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00121fb:	52                   	push   edx
c00121fc:	50                   	push   eax
c00121fd:	56                   	push   esi
c00121fe:	e8 c9 89 ff ff       	call   c000abcc <File::seek(unsigned long long)>
c0012203:	83 c4 10             	add    esp,0x10
c0012206:	85 c0                	test   eax,eax
c0012208:	74 17                	je     c0012221 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001220a:	83 ec 0c             	sub    esp,0xc
c001220d:	68 9c eb 01 c0       	push   0xc001eb9c
c0012212:	e8 c1 82 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0012217:	83 c4 10             	add    esp,0x10
c001221a:	31 c0                	xor    eax,eax
c001221c:	e9 87 00 00 00       	jmp    c00122a8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0012221:	83 ec 0c             	sub    esp,0xc
c0012224:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0012227:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001222a:	50                   	push   eax
c001222b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001222f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012233:	56                   	push   esi
c0012234:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0012238:	e8 d1 fb ff ff       	call   c0011e0e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001223d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012241:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0012245:	83 c4 20             	add    esp,0x20
c0012248:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001224c:	73 04                	jae    c0012252 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001224e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012252:	45                   	inc    ebp
c0012253:	e9 76 ff ff ff       	jmp    c00121ce <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0012258:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001225c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012260:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012264:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c001226a:	83 ec 0c             	sub    esp,0xc
c001226d:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0012273:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012278:	05 00 10 00 00       	add    eax,0x1000
c001227d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012280:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012284:	e8 40 55 ff ff       	call   c00077c9 <free>
c0012289:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001228c:	e8 38 55 ff ff       	call   c00077c9 <free>
c0012291:	58                   	pop    eax
c0012292:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012296:	e8 2e 55 ff ff       	call   c00077c9 <free>
c001229b:	89 34 24             	mov    DWORD PTR [esp],esi
c001229e:	e8 c9 88 ff ff       	call   c000ab6c <File::close()>
c00122a3:	83 c4 10             	add    esp,0x10
c00122a6:	b0 01                	mov    al,0x1
c00122a8:	83 c4 3c             	add    esp,0x3c
c00122ab:	5b                   	pop    ebx
c00122ac:	5e                   	pop    esi
c00122ad:	5f                   	pop    edi
c00122ae:	5d                   	pop    ebp
c00122af:	c3                   	ret    

c00122b0 <Thr::runtimeReferenceHelper()>:
c00122b0:	83 ec 18             	sub    esp,0x18
c00122b3:	68 a4 eb 01 c0       	push   0xc001eba4
c00122b8:	e8 1b 82 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c00122bd:	fa                   	cli    
c00122be:	83 c4 10             	add    esp,0x10
c00122c1:	eb fe                	jmp    c00122c1 <Thr::runtimeReferenceHelper()+0x11>

c00122c3 <Thr::getAddressOfKernelSymbol(char const*)>:
c00122c3:	57                   	push   edi
c00122c4:	56                   	push   esi
c00122c5:	53                   	push   ebx
c00122c6:	31 db                	xor    ebx,ebx
c00122c8:	39 1d a0 3f 02 c0    	cmp    DWORD PTR ds:0xc0023fa0,ebx
c00122ce:	7e 3c                	jle    c001230c <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00122d0:	8b 34 9d 20 3f 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdc0e0]
c00122d7:	31 ff                	xor    edi,edi
c00122d9:	39 3c 9d 20 3e 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdc1e0],edi
c00122e0:	7e 27                	jle    c0012309 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00122e2:	50                   	push   eax
c00122e3:	50                   	push   eax
c00122e4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00122e8:	8b 06                	mov    eax,DWORD PTR [esi]
c00122ea:	03 04 9d a0 3e 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdc160]
c00122f1:	50                   	push   eax
c00122f2:	e8 e9 e3 fe ff       	call   c00006e0 <strcmp>
c00122f7:	83 c4 10             	add    esp,0x10
c00122fa:	85 c0                	test   eax,eax
c00122fc:	75 05                	jne    c0012303 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00122fe:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0012301:	eb 0b                	jmp    c001230e <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0012303:	83 c6 10             	add    esi,0x10
c0012306:	47                   	inc    edi
c0012307:	eb d0                	jmp    c00122d9 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0012309:	43                   	inc    ebx
c001230a:	eb bc                	jmp    c00122c8 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001230c:	31 c0                	xor    eax,eax
c001230e:	5b                   	pop    ebx
c001230f:	5e                   	pop    esi
c0012310:	5f                   	pop    edi
c0012311:	c3                   	ret    

c0012312 <Thr::loadKernelSymbolTable(char const*)>:
c0012312:	55                   	push   ebp
c0012313:	57                   	push   edi
c0012314:	56                   	push   esi
c0012315:	53                   	push   ebx
c0012316:	83 ec 68             	sub    esp,0x68
c0012319:	8b 35 f0 3f 02 c0    	mov    esi,DWORD PTR ds:0xc0023ff0
c001231f:	68 14 01 00 00       	push   0x114
c0012324:	e8 90 54 ff ff       	call   c00077b9 <malloc>
c0012329:	83 c4 0c             	add    esp,0xc
c001232c:	89 c3                	mov    ebx,eax
c001232e:	56                   	push   esi
c001232f:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0012333:	50                   	push   eax
c0012334:	e8 15 87 ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c0012339:	5e                   	pop    esi
c001233a:	5f                   	pop    edi
c001233b:	6a 01                	push   0x1
c001233d:	53                   	push   ebx
c001233e:	e8 cb 87 ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c0012343:	83 c4 10             	add    esp,0x10
c0012346:	85 c0                	test   eax,eax
c0012348:	74 0a                	je     c0012354 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001234a:	83 ec 0c             	sub    esp,0xc
c001234d:	68 c6 eb 01 c0       	push   0xc001ebc6
c0012352:	eb 34                	jmp    c0012388 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0012354:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001235c:	83 ec 0c             	sub    esp,0xc
c001235f:	6a 34                	push   0x34
c0012361:	e8 53 54 ff ff       	call   c00077b9 <malloc>
c0012366:	59                   	pop    ecx
c0012367:	89 c7                	mov    edi,eax
c0012369:	8d 74 24 34          	lea    esi,[esp+0x34]
c001236d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001236f:	56                   	push   esi
c0012370:	57                   	push   edi
c0012371:	6a 00                	push   0x0
c0012373:	6a 34                	push   0x34
c0012375:	53                   	push   ebx
c0012376:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012379:	83 c4 20             	add    esp,0x20
c001237c:	85 c0                	test   eax,eax
c001237e:	74 17                	je     c0012397 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0012380:	83 ec 0c             	sub    esp,0xc
c0012383:	68 dd eb 01 c0       	push   0xc001ebdd
c0012388:	e8 b6 dd ff ff       	call   c0010143 <KePanic(char const*)>
c001238d:	83 c4 10             	add    esp,0x10
c0012390:	31 c0                	xor    eax,eax
c0012392:	e9 31 02 00 00       	jmp    c00125c8 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0012397:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001239d:	75 e1                	jne    c0012380 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001239f:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00123a2:	85 c0                	test   eax,eax
c00123a4:	74 da                	je     c0012380 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00123a6:	52                   	push   edx
c00123a7:	31 d2                	xor    edx,edx
c00123a9:	52                   	push   edx
c00123aa:	50                   	push   eax
c00123ab:	53                   	push   ebx
c00123ac:	e8 1b 88 ff ff       	call   c000abcc <File::seek(unsigned long long)>
c00123b1:	83 c4 10             	add    esp,0x10
c00123b4:	85 c0                	test   eax,eax
c00123b6:	75 c8                	jne    c0012380 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00123b8:	83 ec 0c             	sub    esp,0xc
c00123bb:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00123bf:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00123c3:	31 ed                	xor    ebp,ebp
c00123c5:	0f af c2             	imul   eax,edx
c00123c8:	50                   	push   eax
c00123c9:	e8 eb 53 ff ff       	call   c00077b9 <malloc>
c00123ce:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00123d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00123d4:	89 34 24             	mov    DWORD PTR [esp],esi
c00123d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00123db:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00123df:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00123e3:	0f af c2             	imul   eax,edx
c00123e6:	99                   	cdq    
c00123e7:	52                   	push   edx
c00123e8:	50                   	push   eax
c00123e9:	53                   	push   ebx
c00123ea:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00123ed:	83 c4 20             	add    esp,0x20
c00123f0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00123f8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012400:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0012408:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012410:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0012414:	0f 86 aa 00 00 00    	jbe    c00124c4 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001241a:	0f b7 f5             	movzx  esi,bp
c001241d:	6b f6 28             	imul   esi,esi,0x28
c0012420:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0012424:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012427:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001242b:	50                   	push   eax
c001242c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012430:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0012434:	8b 16                	mov    edx,DWORD PTR [esi]
c0012436:	6b c0 28             	imul   eax,eax,0x28
c0012439:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001243d:	89 d0                	mov    eax,edx
c001243f:	31 d2                	xor    edx,edx
c0012441:	52                   	push   edx
c0012442:	50                   	push   eax
c0012443:	53                   	push   ebx
c0012444:	e8 83 87 ff ff       	call   c000abcc <File::seek(unsigned long long)>
c0012449:	83 c4 0c             	add    esp,0xc
c001244c:	6a 20                	push   0x20
c001244e:	6a 00                	push   0x0
c0012450:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0012454:	52                   	push   edx
c0012455:	e8 76 e0 fe ff       	call   c00004d0 <memset>
c001245a:	58                   	pop    eax
c001245b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001245d:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0012461:	51                   	push   ecx
c0012462:	8d 54 24 40          	lea    edx,[esp+0x40]
c0012466:	52                   	push   edx
c0012467:	6a 00                	push   0x0
c0012469:	6a 1f                	push   0x1f
c001246b:	53                   	push   ebx
c001246c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001246f:	83 c4 18             	add    esp,0x18
c0012472:	68 f4 eb 01 c0       	push   0xc001ebf4
c0012477:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001247b:	52                   	push   edx
c001247c:	e8 5f e2 fe ff       	call   c00006e0 <strcmp>
c0012481:	83 c4 10             	add    esp,0x10
c0012484:	85 c0                	test   eax,eax
c0012486:	75 0f                	jne    c0012497 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0012488:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001248b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001248f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012493:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012497:	50                   	push   eax
c0012498:	50                   	push   eax
c0012499:	68 fc eb 01 c0       	push   0xc001ebfc
c001249e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00124a2:	50                   	push   eax
c00124a3:	e8 38 e2 fe ff       	call   c00006e0 <strcmp>
c00124a8:	83 c4 10             	add    esp,0x10
c00124ab:	85 c0                	test   eax,eax
c00124ad:	75 0f                	jne    c00124be <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00124af:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00124b2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00124b6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00124ba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00124be:	45                   	inc    ebp
c00124bf:	e9 4c ff ff ff       	jmp    c0012410 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00124c4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00124c9:	75 10                	jne    c00124db <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00124cb:	83 ec 0c             	sub    esp,0xc
c00124ce:	68 04 ec 01 c0       	push   0xc001ec04
c00124d3:	e8 6b dc ff ff       	call   c0010143 <KePanic(char const*)>
c00124d8:	83 c4 10             	add    esp,0x10
c00124db:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00124e0:	75 10                	jne    c00124f2 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00124e2:	83 ec 0c             	sub    esp,0xc
c00124e5:	68 04 ec 01 c0       	push   0xc001ec04
c00124ea:	e8 54 dc ff ff       	call   c0010143 <KePanic(char const*)>
c00124ef:	83 c4 10             	add    esp,0x10
c00124f2:	31 d2                	xor    edx,edx
c00124f4:	50                   	push   eax
c00124f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124f9:	52                   	push   edx
c00124fa:	50                   	push   eax
c00124fb:	53                   	push   ebx
c00124fc:	e8 cb 86 ff ff       	call   c000abcc <File::seek(unsigned long long)>
c0012501:	5a                   	pop    edx
c0012502:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012506:	e8 ae 52 ff ff       	call   c00077b9 <malloc>
c001250b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001250f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012513:	31 c9                	xor    ecx,ecx
c0012515:	5e                   	pop    esi
c0012516:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012518:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001251c:	55                   	push   ebp
c001251d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012521:	51                   	push   ecx
c0012522:	52                   	push   edx
c0012523:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012527:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001252b:	53                   	push   ebx
c001252c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001252f:	83 c4 14             	add    esp,0x14
c0012532:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012536:	e8 7e 52 ff ff       	call   c00077b9 <malloc>
c001253b:	89 c6                	mov    esi,eax
c001253d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001253f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012542:	56                   	push   esi
c0012543:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0012547:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001254b:	51                   	push   ecx
c001254c:	52                   	push   edx
c001254d:	53                   	push   ebx
c001254e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012551:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012555:	8b 15 a0 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023fa0
c001255b:	83 c4 1c             	add    esp,0x1c
c001255e:	c1 e8 04             	shr    eax,0x4
c0012561:	89 04 95 20 3e 02 c0 	mov    DWORD PTR [edx*4-0x3ffdc1e0],eax
c0012568:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001256c:	31 d2                	xor    edx,edx
c001256e:	52                   	push   edx
c001256f:	50                   	push   eax
c0012570:	53                   	push   ebx
c0012571:	e8 56 86 ff ff       	call   c000abcc <File::seek(unsigned long long)>
c0012576:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012578:	31 d2                	xor    edx,edx
c001257a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001257d:	56                   	push   esi
c001257e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012582:	52                   	push   edx
c0012583:	50                   	push   eax
c0012584:	53                   	push   ebx
c0012585:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012588:	83 c4 14             	add    esp,0x14
c001258b:	53                   	push   ebx
c001258c:	e8 db 85 ff ff       	call   c000ab6c <File::close()>
c0012591:	5d                   	pop    ebp
c0012592:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012596:	e8 2e 52 ff ff       	call   c00077c9 <free>
c001259b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001259e:	e8 26 52 ff ff       	call   c00077c9 <free>
c00125a3:	a1 a0 3f 02 c0       	mov    eax,ds:0xc0023fa0
c00125a8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00125ac:	8d 50 01             	lea    edx,[eax+0x1]
c00125af:	89 0c 85 20 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0e0],ecx
c00125b6:	89 34 85 a0 3e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc160],esi
c00125bd:	89 15 a0 3f 02 c0    	mov    DWORD PTR ds:0xc0023fa0,edx
c00125c3:	83 c4 10             	add    esp,0x10
c00125c6:	b0 01                	mov    al,0x1
c00125c8:	83 c4 5c             	add    esp,0x5c
c00125cb:	5b                   	pop    ebx
c00125cc:	5e                   	pop    esi
c00125cd:	5f                   	pop    edi
c00125ce:	5d                   	pop    ebp
c00125cf:	c3                   	ret    

c00125d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00125d0:	55                   	push   ebp
c00125d1:	57                   	push   edi
c00125d2:	56                   	push   esi
c00125d3:	53                   	push   ebx
c00125d4:	81 ec 68 03 00 00    	sub    esp,0x368
c00125da:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00125e1:	8b 1d f0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023ff0
c00125e7:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00125eb:	68 14 01 00 00       	push   0x114
c00125f0:	e8 c4 51 ff ff       	call   c00077b9 <malloc>
c00125f5:	83 c4 0c             	add    esp,0xc
c00125f8:	89 c5                	mov    ebp,eax
c00125fa:	53                   	push   ebx
c00125fb:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0012602:	50                   	push   eax
c0012603:	e8 46 84 ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c0012608:	5e                   	pop    esi
c0012609:	5f                   	pop    edi
c001260a:	6a 01                	push   0x1
c001260c:	55                   	push   ebp
c001260d:	e8 fc 84 ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c0012612:	83 c4 10             	add    esp,0x10
c0012615:	85 c0                	test   eax,eax
c0012617:	0f 85 a7 06 00 00    	jne    c0012cc4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001261d:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0012625:	83 ec 0c             	sub    esp,0xc
c0012628:	6a 34                	push   0x34
c001262a:	e8 8a 51 ff ff       	call   c00077b9 <malloc>
c001262f:	5b                   	pop    ebx
c0012630:	89 c7                	mov    edi,eax
c0012632:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0012636:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012639:	53                   	push   ebx
c001263a:	57                   	push   edi
c001263b:	6a 00                	push   0x0
c001263d:	6a 34                	push   0x34
c001263f:	55                   	push   ebp
c0012640:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012643:	83 c4 20             	add    esp,0x20
c0012646:	85 c0                	test   eax,eax
c0012648:	0f 85 76 06 00 00    	jne    c0012cc4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001264e:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0012654:	0f 85 6a 06 00 00    	jne    c0012cc4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001265a:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001265d:	85 c0                	test   eax,eax
c001265f:	0f 84 5f 06 00 00    	je     c0012cc4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012665:	31 d2                	xor    edx,edx
c0012667:	51                   	push   ecx
c0012668:	52                   	push   edx
c0012669:	50                   	push   eax
c001266a:	55                   	push   ebp
c001266b:	e8 5c 85 ff ff       	call   c000abcc <File::seek(unsigned long long)>
c0012670:	83 c4 10             	add    esp,0x10
c0012673:	85 c0                	test   eax,eax
c0012675:	0f 85 49 06 00 00    	jne    c0012cc4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001267b:	83 ec 0c             	sub    esp,0xc
c001267e:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0012681:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012685:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0012689:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001268d:	0f af c2             	imul   eax,edx
c0012690:	50                   	push   eax
c0012691:	e8 23 51 ff ff       	call   c00077b9 <malloc>
c0012696:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012699:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001269d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00126a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00126a4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00126a8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00126ac:	0f af c2             	imul   eax,edx
c00126af:	99                   	cdq    
c00126b0:	52                   	push   edx
c00126b1:	50                   	push   eax
c00126b2:	55                   	push   ebp
c00126b3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00126b6:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c00126b9:	83 c4 20             	add    esp,0x20
c00126bc:	85 c0                	test   eax,eax
c00126be:	0f 84 00 06 00 00    	je     c0012cc4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00126c4:	52                   	push   edx
c00126c5:	31 d2                	xor    edx,edx
c00126c7:	52                   	push   edx
c00126c8:	50                   	push   eax
c00126c9:	55                   	push   ebp
c00126ca:	e8 fd 84 ff ff       	call   c000abcc <File::seek(unsigned long long)>
c00126cf:	83 c4 10             	add    esp,0x10
c00126d2:	85 c0                	test   eax,eax
c00126d4:	0f 85 ea 05 00 00    	jne    c0012cc4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00126da:	83 ec 0c             	sub    esp,0xc
c00126dd:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00126e1:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00126e5:	31 f6                	xor    esi,esi
c00126e7:	0f af c2             	imul   eax,edx
c00126ea:	50                   	push   eax
c00126eb:	e8 c9 50 ff ff       	call   c00077b9 <malloc>
c00126f0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00126f3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00126f7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00126fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00126fe:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0012702:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0012706:	0f af c2             	imul   eax,edx
c0012709:	99                   	cdq    
c001270a:	52                   	push   edx
c001270b:	50                   	push   eax
c001270c:	55                   	push   ebp
c001270d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012710:	83 c4 20             	add    esp,0x20
c0012713:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0012717:	0f 86 8a 00 00 00    	jbe    c00127a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001271d:	0f b7 de             	movzx  ebx,si
c0012720:	c1 e3 05             	shl    ebx,0x5
c0012723:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0012727:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001272a:	75 75                	jne    c00127a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001272c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001272f:	31 d2                	xor    edx,edx
c0012731:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012735:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0012738:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001273c:	50                   	push   eax
c001273d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0012740:	52                   	push   edx
c0012741:	50                   	push   eax
c0012742:	55                   	push   ebp
c0012743:	e8 84 84 ff ff       	call   c000abcc <File::seek(unsigned long long)>
c0012748:	83 c4 10             	add    esp,0x10
c001274b:	85 c0                	test   eax,eax
c001274d:	0f 85 71 05 00 00    	jne    c0012cc4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012753:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001275a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001275d:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0012761:	31 d2                	xor    edx,edx
c0012763:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0012767:	83 ec 0c             	sub    esp,0xc
c001276a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001276e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012775:	50                   	push   eax
c0012776:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001277a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001277e:	52                   	push   edx
c001277f:	50                   	push   eax
c0012780:	55                   	push   ebp
c0012781:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012784:	83 c4 1c             	add    esp,0x1c
c0012787:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001278a:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001278d:	50                   	push   eax
c001278e:	6a 00                	push   0x0
c0012790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012794:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0012798:	50                   	push   eax
c0012799:	e8 32 dd fe ff       	call   c00004d0 <memset>
c001279e:	83 c4 10             	add    esp,0x10
c00127a1:	46                   	inc    esi
c00127a2:	e9 6c ff ff ff       	jmp    c0012713 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c00127a7:	53                   	push   ebx
c00127a8:	31 db                	xor    ebx,ebx
c00127aa:	68 00 01 00 00       	push   0x100
c00127af:	6a 00                	push   0x0
c00127b1:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00127b5:	50                   	push   eax
c00127b6:	e8 15 dd fe ff       	call   c00004d0 <memset>
c00127bb:	83 c4 0c             	add    esp,0xc
c00127be:	68 00 01 00 00       	push   0x100
c00127c3:	6a 00                	push   0x0
c00127c5:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00127cc:	50                   	push   eax
c00127cd:	e8 fe dc fe ff       	call   c00004d0 <memset>
c00127d2:	83 c4 10             	add    esp,0x10
c00127d5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00127dd:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00127e5:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00127ed:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00127f5:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00127fd:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0012801:	0f 86 30 01 00 00    	jbe    c0012937 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0012807:	0f b7 f3             	movzx  esi,bx
c001280a:	6b f6 28             	imul   esi,esi,0x28
c001280d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0012811:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012814:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012818:	52                   	push   edx
c0012819:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001281d:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0012821:	8b 06                	mov    eax,DWORD PTR [esi]
c0012823:	6b d2 28             	imul   edx,edx,0x28
c0012826:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001282a:	31 d2                	xor    edx,edx
c001282c:	52                   	push   edx
c001282d:	50                   	push   eax
c001282e:	55                   	push   ebp
c001282f:	e8 98 83 ff ff       	call   c000abcc <File::seek(unsigned long long)>
c0012834:	83 c4 0c             	add    esp,0xc
c0012837:	6a 20                	push   0x20
c0012839:	6a 00                	push   0x0
c001283b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012842:	51                   	push   ecx
c0012843:	e8 88 dc fe ff       	call   c00004d0 <memset>
c0012848:	59                   	pop    ecx
c0012849:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001284c:	8d 54 24 58          	lea    edx,[esp+0x58]
c0012850:	52                   	push   edx
c0012851:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0012858:	51                   	push   ecx
c0012859:	6a 00                	push   0x0
c001285b:	6a 1f                	push   0x1f
c001285d:	55                   	push   ebp
c001285e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012861:	83 c4 1c             	add    esp,0x1c
c0012864:	6a 09                	push   0x9
c0012866:	68 1e ec 01 c0       	push   0xc001ec1e
c001286b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012872:	51                   	push   ecx
c0012873:	e8 18 db fe ff       	call   c0000390 <memcmp>
c0012878:	83 c4 10             	add    esp,0x10
c001287b:	85 c0                	test   eax,eax
c001287d:	75 21                	jne    c00128a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001287f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012883:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012887:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001288b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001288f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012892:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0012899:	89 d0                	mov    eax,edx
c001289b:	40                   	inc    eax
c001289c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00128a0:	50                   	push   eax
c00128a1:	6a 09                	push   0x9
c00128a3:	68 28 ec 01 c0       	push   0xc001ec28
c00128a8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00128af:	50                   	push   eax
c00128b0:	e8 db da fe ff       	call   c0000390 <memcmp>
c00128b5:	83 c4 10             	add    esp,0x10
c00128b8:	85 c0                	test   eax,eax
c00128ba:	75 21                	jne    c00128dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c00128bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128c0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00128c4:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00128c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00128cc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00128cf:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00128d6:	89 d0                	mov    eax,edx
c00128d8:	40                   	inc    eax
c00128d9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00128dd:	50                   	push   eax
c00128de:	50                   	push   eax
c00128df:	68 f4 eb 01 c0       	push   0xc001ebf4
c00128e4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00128eb:	50                   	push   eax
c00128ec:	e8 ef dd fe ff       	call   c00006e0 <strcmp>
c00128f1:	83 c4 10             	add    esp,0x10
c00128f4:	85 c0                	test   eax,eax
c00128f6:	75 0f                	jne    c0012907 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00128f8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00128fb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00128ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012903:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012907:	50                   	push   eax
c0012908:	50                   	push   eax
c0012909:	68 fc eb 01 c0       	push   0xc001ebfc
c001290e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012915:	50                   	push   eax
c0012916:	e8 c5 dd fe ff       	call   c00006e0 <strcmp>
c001291b:	83 c4 10             	add    esp,0x10
c001291e:	85 c0                	test   eax,eax
c0012920:	75 0f                	jne    c0012931 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0012922:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012925:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012929:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001292d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012931:	43                   	inc    ebx
c0012932:	e9 c6 fe ff ff       	jmp    c00127fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0012937:	31 d2                	xor    edx,edx
c0012939:	50                   	push   eax
c001293a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001293e:	52                   	push   edx
c001293f:	50                   	push   eax
c0012940:	55                   	push   ebp
c0012941:	e8 86 82 ff ff       	call   c000abcc <File::seek(unsigned long long)>
c0012946:	58                   	pop    eax
c0012947:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001294b:	e8 69 4e ff ff       	call   c00077b9 <malloc>
c0012950:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012953:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012957:	31 d2                	xor    edx,edx
c0012959:	58                   	pop    eax
c001295a:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001295e:	53                   	push   ebx
c001295f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012963:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012967:	52                   	push   edx
c0012968:	50                   	push   eax
c0012969:	55                   	push   ebp
c001296a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001296d:	83 c4 14             	add    esp,0x14
c0012970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012974:	e8 40 4e ff ff       	call   c00077b9 <malloc>
c0012979:	31 d2                	xor    edx,edx
c001297b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001297f:	83 c4 0c             	add    esp,0xc
c0012982:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012986:	52                   	push   edx
c0012987:	50                   	push   eax
c0012988:	55                   	push   ebp
c0012989:	e8 3e 82 ff ff       	call   c000abcc <File::seek(unsigned long long)>
c001298e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012991:	31 d2                	xor    edx,edx
c0012993:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012996:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001299a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001299e:	52                   	push   edx
c001299f:	50                   	push   eax
c00129a0:	55                   	push   ebp
c00129a1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00129a4:	83 c4 20             	add    esp,0x20
c00129a7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00129af:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00129b3:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00129b7:	0f 84 0b 03 00 00    	je     c0012cc8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c00129bd:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00129c4:	31 d2                	xor    edx,edx
c00129c6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00129ca:	c1 e8 03             	shr    eax,0x3
c00129cd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00129d1:	51                   	push   ecx
c00129d2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00129d6:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00129da:	52                   	push   edx
c00129db:	50                   	push   eax
c00129dc:	55                   	push   ebp
c00129dd:	e8 ea 81 ff ff       	call   c000abcc <File::seek(unsigned long long)>
c00129e2:	5b                   	pop    ebx
c00129e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00129e7:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00129ee:	e8 c6 4d ff ff       	call   c00077b9 <malloc>
c00129f3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00129f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00129fa:	31 d2                	xor    edx,edx
c00129fc:	5e                   	pop    esi
c00129fd:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012a01:	50                   	push   eax
c0012a02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a06:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012a0a:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0012a11:	52                   	push   edx
c0012a12:	50                   	push   eax
c0012a13:	55                   	push   ebp
c0012a14:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012a17:	83 c4 20             	add    esp,0x20
c0012a1a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012a22:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012a26:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0012a2a:	0f 8d 7c 02 00 00    	jge    c0012cac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0012a30:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012a34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012a38:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0012a3d:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0012a40:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012a48:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0012a4c:	89 d8                	mov    eax,ebx
c0012a4e:	c1 e8 08             	shr    eax,0x8
c0012a51:	89 c6                	mov    esi,eax
c0012a53:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012a57:	c1 e6 04             	shl    esi,0x4
c0012a5a:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0012a5e:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0012a61:	85 d2                	test   edx,edx
c0012a63:	0f 85 bf 00 00 00    	jne    c0012b28 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012a69:	83 ec 0c             	sub    esp,0xc
c0012a6c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012a70:	03 06                	add    eax,DWORD PTR [esi]
c0012a72:	50                   	push   eax
c0012a73:	e8 4b f8 ff ff       	call   c00122c3 <Thr::getAddressOfKernelSymbol(char const*)>
c0012a78:	83 c4 10             	add    esp,0x10
c0012a7b:	89 c2                	mov    edx,eax
c0012a7d:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0012a82:	85 c0                	test   eax,eax
c0012a84:	0f 85 9e 00 00 00    	jne    c0012b28 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012a8a:	83 ec 0c             	sub    esp,0xc
c0012a8d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012a91:	03 06                	add    eax,DWORD PTR [esi]
c0012a93:	50                   	push   eax
c0012a94:	e8 fb d7 ff ff       	call   c0010294 <KeResolveCompatibilitySymbol(char*)>
c0012a99:	83 c4 10             	add    esp,0x10
c0012a9c:	89 c2                	mov    edx,eax
c0012a9e:	85 c0                	test   eax,eax
c0012aa0:	0f 85 82 00 00 00    	jne    c0012b28 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012aa6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0012aaa:	50                   	push   eax
c0012aab:	50                   	push   eax
c0012aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ab0:	03 06                	add    eax,DWORD PTR [esi]
c0012ab2:	50                   	push   eax
c0012ab3:	68 32 ec 01 c0       	push   0xc001ec32
c0012ab8:	e8 1b 7a ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0012abd:	58                   	pop    eax
c0012abe:	5a                   	pop    edx
c0012abf:	68 4c ec 01 c0       	push   0xc001ec4c
c0012ac4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012acb:	50                   	push   eax
c0012acc:	e8 2f db fe ff       	call   c0000600 <strcpy>
c0012ad1:	59                   	pop    ecx
c0012ad2:	58                   	pop    eax
c0012ad3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ad7:	03 06                	add    eax,DWORD PTR [esi]
c0012ad9:	50                   	push   eax
c0012ada:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012ae1:	50                   	push   eax
c0012ae2:	e8 d9 dc fe ff       	call   c00007c0 <strcat>
c0012ae7:	58                   	pop    eax
c0012ae8:	5a                   	pop    edx
c0012ae9:	68 e2 ec 01 c0       	push   0xc001ece2
c0012aee:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012af5:	50                   	push   eax
c0012af6:	e8 c5 dc fe ff       	call   c00007c0 <strcat>
c0012afb:	83 c4 10             	add    esp,0x10
c0012afe:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012b03:	0f 84 5d 01 00 00    	je     c0012c66 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012b09:	83 ec 0c             	sub    esp,0xc
c0012b0c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012b13:	50                   	push   eax
c0012b14:	e8 2a d6 ff ff       	call   c0010143 <KePanic(char const*)>
c0012b19:	83 c4 10             	add    esp,0x10
c0012b1c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012b20:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012b24:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0012b28:	80 fb 01             	cmp    bl,0x1
c0012b2b:	0f 85 88 00 00 00    	jne    c0012bb9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0012b31:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0012b38:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0012b3c:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0012b40:	01 ce                	add    esi,ecx
c0012b42:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012b48:	0f 94 c0             	sete   al
c0012b4b:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012b51:	0f 94 c3             	sete   bl
c0012b54:	09 c3                	or     ebx,eax
c0012b56:	8b 06                	mov    eax,DWORD PTR [esi]
c0012b58:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012b5d:	74 41                	je     c0012ba0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0012b5f:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012b62:	84 db                	test   bl,bl
c0012b64:	75 15                	jne    c0012b7b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0012b66:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012b6a:	66 83 f8 0c          	cmp    ax,0xc
c0012b6e:	76 05                	jbe    c0012b75 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0012b70:	b8 0c 00 00 00       	mov    eax,0xc
c0012b75:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012b79:	76 37                	jbe    c0012bb2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012b7b:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0012b7f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012b84:	0f 84 dc 00 00 00    	je     c0012c66 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012b8a:	83 ec 0c             	sub    esp,0xc
c0012b8d:	68 63 ec 01 c0       	push   0xc001ec63
c0012b92:	e8 ac d5 ff ff       	call   c0010143 <KePanic(char const*)>
c0012b97:	83 c4 10             	add    esp,0x10
c0012b9a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012b9e:	eb 12                	jmp    c0012bb2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012ba0:	01 c1                	add    ecx,eax
c0012ba2:	84 db                	test   bl,bl
c0012ba4:	75 0c                	jne    c0012bb2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012ba6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012baa:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012bae:	77 02                	ja     c0012bb2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012bb0:	01 d1                	add    ecx,edx
c0012bb2:	89 0e                	mov    DWORD PTR [esi],ecx
c0012bb4:	e9 ea 00 00 00       	jmp    c0012ca3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012bb9:	80 fb 02             	cmp    bl,0x2
c0012bbc:	75 7c                	jne    c0012c3a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0012bbe:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0012bc5:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0012bc9:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0012bcd:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012bd3:	74 20                	je     c0012bf5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012bd5:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012bdb:	74 18                	je     c0012bf5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012bdd:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012be1:	b9 0a 00 00 00       	mov    ecx,0xa
c0012be6:	66 83 f8 0e          	cmp    ax,0xe
c0012bea:	77 03                	ja     c0012bef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0012bec:	8d 48 fc             	lea    ecx,[eax-0x4]
c0012bef:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0012bf3:	76 1f                	jbe    c0012c14 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0012bf5:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0012bf9:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012bfe:	74 66                	je     c0012c66 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012c00:	83 ec 0c             	sub    esp,0xc
c0012c03:	68 7f ec 01 c0       	push   0xc001ec7f
c0012c08:	e8 36 d5 ff ff       	call   c0010143 <KePanic(char const*)>
c0012c0d:	83 c4 10             	add    esp,0x10
c0012c10:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012c14:	8b 06                	mov    eax,DWORD PTR [esi]
c0012c16:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012c1b:	74 13                	je     c0012c30 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0012c1d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012c21:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0012c28:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0012c2c:	01 c8                	add    eax,ecx
c0012c2e:	eb 04                	jmp    c0012c34 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0012c30:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0012c34:	01 c2                	add    edx,eax
c0012c36:	89 16                	mov    DWORD PTR [esi],edx
c0012c38:	eb 69                	jmp    c0012ca3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012c3a:	0f b6 db             	movzx  ebx,bl
c0012c3d:	50                   	push   eax
c0012c3e:	50                   	push   eax
c0012c3f:	53                   	push   ebx
c0012c40:	68 9b ec 01 c0       	push   0xc001ec9b
c0012c45:	e8 8e 78 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0012c4a:	83 c4 10             	add    esp,0x10
c0012c4d:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012c52:	74 12                	je     c0012c66 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012c54:	83 ec 0c             	sub    esp,0xc
c0012c57:	68 a6 ec 01 c0       	push   0xc001eca6
c0012c5c:	e8 e2 d4 ff ff       	call   c0010143 <KePanic(char const*)>
c0012c61:	83 c4 10             	add    esp,0x10
c0012c64:	eb 3d                	jmp    c0012ca3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012c66:	83 ec 0c             	sub    esp,0xc
c0012c69:	55                   	push   ebp
c0012c6a:	e8 fd 7e ff ff       	call   c000ab6c <File::close()>
c0012c6f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012c72:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012c75:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012c78:	59                   	pop    ecx
c0012c79:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012c7d:	e8 47 4b ff ff       	call   c00077c9 <free>
c0012c82:	5b                   	pop    ebx
c0012c83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012c87:	e8 3d 4b ff ff       	call   c00077c9 <free>
c0012c8c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012c8f:	e8 35 4b ff ff       	call   c00077c9 <free>
c0012c94:	5e                   	pop    esi
c0012c95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c99:	e8 2b 4b ff ff       	call   c00077c9 <free>
c0012c9e:	83 c4 10             	add    esp,0x10
c0012ca1:	eb 21                	jmp    c0012cc4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012ca3:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0012ca7:	e9 76 fd ff ff       	jmp    c0012a22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0012cac:	83 ec 0c             	sub    esp,0xc
c0012caf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012cb3:	e8 11 4b ff ff       	call   c00077c9 <free>
c0012cb8:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0012cbc:	83 c4 10             	add    esp,0x10
c0012cbf:	e9 eb fc ff ff       	jmp    c00129af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0012cc4:	31 c0                	xor    eax,eax
c0012cc6:	eb 33                	jmp    c0012cfb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0012cc8:	83 ec 0c             	sub    esp,0xc
c0012ccb:	55                   	push   ebp
c0012ccc:	e8 9b 7e ff ff       	call   c000ab6c <File::close()>
c0012cd1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012cd4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012cd7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012cda:	58                   	pop    eax
c0012cdb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012cdf:	e8 e5 4a ff ff       	call   c00077c9 <free>
c0012ce4:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012ce7:	e8 dd 4a ff ff       	call   c00077c9 <free>
c0012cec:	5a                   	pop    edx
c0012ced:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cf1:	e8 d3 4a ff ff       	call   c00077c9 <free>
c0012cf6:	83 c4 10             	add    esp,0x10
c0012cf9:	b0 01                	mov    al,0x1
c0012cfb:	81 c4 5c 03 00 00    	add    esp,0x35c
c0012d01:	5b                   	pop    ebx
c0012d02:	5e                   	pop    esi
c0012d03:	5f                   	pop    edi
c0012d04:	5d                   	pop    ebp
c0012d05:	c3                   	ret    

c0012d06 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0012d06:	56                   	push   esi
c0012d07:	31 d2                	xor    edx,edx
c0012d09:	53                   	push   ebx
c0012d0a:	8b 1d 00 38 02 c0    	mov    ebx,DWORD PTR ds:0xc0023800
c0012d10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012d14:	39 d3                	cmp    ebx,edx
c0012d16:	7e 1b                	jle    c0012d33 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0012d18:	8b 04 95 20 3a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc5e0]
c0012d1f:	39 c8                	cmp    eax,ecx
c0012d21:	77 0d                	ja     c0012d30 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0012d23:	8b 34 95 20 38 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdc7e0]
c0012d2a:	01 c6                	add    esi,eax
c0012d2c:	39 ce                	cmp    esi,ecx
c0012d2e:	77 05                	ja     c0012d35 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0012d30:	42                   	inc    edx
c0012d31:	eb e1                	jmp    c0012d14 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0012d33:	31 c0                	xor    eax,eax
c0012d35:	5b                   	pop    ebx
c0012d36:	5e                   	pop    esi
c0012d37:	c3                   	ret    

c0012d38 <Thr::getDriverNameFromAddress(unsigned long)>:
c0012d38:	53                   	push   ebx
c0012d39:	31 c0                	xor    eax,eax
c0012d3b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012d3f:	8b 1d 00 38 02 c0    	mov    ebx,DWORD PTR ds:0xc0023800
c0012d45:	39 c3                	cmp    ebx,eax
c0012d47:	7e 22                	jle    c0012d6b <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0012d49:	8b 14 85 20 3a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc5e0]
c0012d50:	39 ca                	cmp    edx,ecx
c0012d52:	77 14                	ja     c0012d68 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012d54:	03 14 85 20 38 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdc7e0]
c0012d5b:	39 ca                	cmp    edx,ecx
c0012d5d:	76 09                	jbe    c0012d68 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012d5f:	8b 04 85 20 3c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc3e0]
c0012d66:	eb 05                	jmp    c0012d6d <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0012d68:	40                   	inc    eax
c0012d69:	eb da                	jmp    c0012d45 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0012d6b:	31 c0                	xor    eax,eax
c0012d6d:	5b                   	pop    ebx
c0012d6e:	c3                   	ret    

c0012d6f <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0012d6f:	53                   	push   ebx
c0012d70:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012d74:	53                   	push   ebx
c0012d75:	e8 8c ff ff ff       	call   c0012d06 <Thr::getDriverBaseFromAddress(unsigned long)>
c0012d7a:	5a                   	pop    edx
c0012d7b:	31 d2                	xor    edx,edx
c0012d7d:	85 c0                	test   eax,eax
c0012d7f:	74 04                	je     c0012d85 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0012d81:	89 da                	mov    edx,ebx
c0012d83:	29 c2                	sub    edx,eax
c0012d85:	89 d0                	mov    eax,edx
c0012d87:	5b                   	pop    ebx
c0012d88:	c3                   	ret    

c0012d89 <Thr::loadDLL(char const*, bool)>:
c0012d89:	55                   	push   ebp
c0012d8a:	57                   	push   edi
c0012d8b:	56                   	push   esi
c0012d8c:	53                   	push   ebx
c0012d8d:	81 ec 34 01 00 00    	sub    esp,0x134
c0012d93:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0012d9a:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0012da1:	56                   	push   esi
c0012da2:	68 be ec 01 c0       	push   0xc001ecbe
c0012da7:	e8 2c 77 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0012dac:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012db3:	e8 01 4a ff ff       	call   c00077b9 <malloc>
c0012db8:	83 c4 0c             	add    esp,0xc
c0012dbb:	89 c3                	mov    ebx,eax
c0012dbd:	ff 35 f0 3f 02 c0    	push   DWORD PTR ds:0xc0023ff0
c0012dc3:	56                   	push   esi
c0012dc4:	50                   	push   eax
c0012dc5:	e8 84 7c ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c0012dca:	83 c4 10             	add    esp,0x10
c0012dcd:	85 db                	test   ebx,ebx
c0012dcf:	75 3c                	jne    c0012e0d <Thr::loadDLL(char const*, bool)+0x84>
c0012dd1:	89 f8                	mov    eax,edi
c0012dd3:	84 c0                	test   al,al
c0012dd5:	0f 84 d2 01 00 00    	je     c0012fad <Thr::loadDLL(char const*, bool)+0x224>
c0012ddb:	55                   	push   ebp
c0012ddc:	55                   	push   ebp
c0012ddd:	68 cf ec 01 c0       	push   0xc001eccf
c0012de2:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0012de6:	55                   	push   ebp
c0012de7:	e8 14 d8 fe ff       	call   c0000600 <strcpy>
c0012dec:	58                   	pop    eax
c0012ded:	5a                   	pop    edx
c0012dee:	56                   	push   esi
c0012def:	55                   	push   ebp
c0012df0:	e8 cb d9 fe ff       	call   c00007c0 <strcat>
c0012df5:	59                   	pop    ecx
c0012df6:	58                   	pop    eax
c0012df7:	68 e2 ec 01 c0       	push   0xc001ece2
c0012dfc:	55                   	push   ebp
c0012dfd:	e8 be d9 fe ff       	call   c00007c0 <strcat>
c0012e02:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012e05:	e8 39 d3 ff ff       	call   c0010143 <KePanic(char const*)>
c0012e0a:	83 c4 10             	add    esp,0x10
c0012e0d:	51                   	push   ecx
c0012e0e:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0012e12:	50                   	push   eax
c0012e13:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012e17:	50                   	push   eax
c0012e18:	53                   	push   ebx
c0012e19:	e8 9c 7f ff ff       	call   c000adba <File::stat(unsigned long long*, bool*)>
c0012e1e:	83 c4 10             	add    esp,0x10
c0012e21:	85 db                	test   ebx,ebx
c0012e23:	74 0c                	je     c0012e31 <Thr::loadDLL(char const*, bool)+0xa8>
c0012e25:	83 ec 0c             	sub    esp,0xc
c0012e28:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012e2a:	53                   	push   ebx
c0012e2b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012e2e:	83 c4 10             	add    esp,0x10
c0012e31:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0012e36:	75 0a                	jne    c0012e42 <Thr::loadDLL(char const*, bool)+0xb9>
c0012e38:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012e3c:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0012e40:	75 3c                	jne    c0012e7e <Thr::loadDLL(char const*, bool)+0xf5>
c0012e42:	89 f8                	mov    eax,edi
c0012e44:	84 c0                	test   al,al
c0012e46:	0f 84 49 01 00 00    	je     c0012f95 <Thr::loadDLL(char const*, bool)+0x20c>
c0012e4c:	51                   	push   ecx
c0012e4d:	51                   	push   ecx
c0012e4e:	68 cf ec 01 c0       	push   0xc001eccf
c0012e53:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0012e57:	53                   	push   ebx
c0012e58:	e8 a3 d7 fe ff       	call   c0000600 <strcpy>
c0012e5d:	5d                   	pop    ebp
c0012e5e:	58                   	pop    eax
c0012e5f:	56                   	push   esi
c0012e60:	53                   	push   ebx
c0012e61:	e8 5a d9 fe ff       	call   c00007c0 <strcat>
c0012e66:	58                   	pop    eax
c0012e67:	5a                   	pop    edx
c0012e68:	68 e2 ec 01 c0       	push   0xc001ece2
c0012e6d:	53                   	push   ebx
c0012e6e:	e8 4d d9 fe ff       	call   c00007c0 <strcat>
c0012e73:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012e76:	e8 c8 d2 ff ff       	call   c0010143 <KePanic(char const*)>
c0012e7b:	83 c4 10             	add    esp,0x10
c0012e7e:	52                   	push   edx
c0012e7f:	6a 03                	push   0x3
c0012e81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e85:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012e89:	05 ff 0f 00 00       	add    eax,0xfff
c0012e8e:	83 d2 00             	adc    edx,0x0
c0012e91:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012e95:	50                   	push   eax
c0012e96:	ff 35 10 0e 02 c0    	push   DWORD PTR ds:0xc0020e10
c0012e9c:	e8 7d 6b ff ff       	call   c0009a1e <VAS::allocatePages(int, int)>
c0012ea1:	59                   	pop    ecx
c0012ea2:	89 c3                	mov    ebx,eax
c0012ea4:	5d                   	pop    ebp
c0012ea5:	50                   	push   eax
c0012ea6:	68 36 d8 01 c0       	push   0xc001d836
c0012eab:	e8 28 76 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0012eb0:	89 34 24             	mov    DWORD PTR [esp],esi
c0012eb3:	e8 88 d6 fe ff       	call   c0000540 <strlen>
c0012eb8:	8b 2d 00 38 02 c0    	mov    ebp,DWORD PTR ds:0xc0023800
c0012ebe:	40                   	inc    eax
c0012ebf:	89 04 24             	mov    DWORD PTR [esp],eax
c0012ec2:	e8 f2 48 ff ff       	call   c00077b9 <malloc>
c0012ec7:	89 04 ad 20 3c 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdc3e0],eax
c0012ece:	58                   	pop    eax
c0012ecf:	a1 00 38 02 c0       	mov    eax,ds:0xc0023800
c0012ed4:	5a                   	pop    edx
c0012ed5:	56                   	push   esi
c0012ed6:	ff 34 85 20 3c 02 c0 	push   DWORD PTR [eax*4-0x3ffdc3e0]
c0012edd:	e8 1e d7 fe ff       	call   c0000600 <strcpy>
c0012ee2:	a1 00 38 02 c0       	mov    eax,ds:0xc0023800
c0012ee7:	8d 50 01             	lea    edx,[eax+0x1]
c0012eea:	89 1c 85 20 3a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc5e0],ebx
c0012ef1:	89 15 00 38 02 c0    	mov    DWORD PTR ds:0xc0023800,edx
c0012ef7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012efb:	83 c4 0c             	add    esp,0xc
c0012efe:	89 14 85 20 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc7e0],edx
c0012f05:	6a 01                	push   0x1
c0012f07:	53                   	push   ebx
c0012f08:	56                   	push   esi
c0012f09:	e8 c2 f6 ff ff       	call   c00125d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0012f0e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012f12:	83 c4 10             	add    esp,0x10
c0012f15:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012f1a:	0f 85 89 00 00 00    	jne    c0012fa9 <Thr::loadDLL(char const*, bool)+0x220>
c0012f20:	89 f8                	mov    eax,edi
c0012f22:	84 c0                	test   al,al
c0012f24:	74 73                	je     c0012f99 <Thr::loadDLL(char const*, bool)+0x210>
c0012f26:	83 ec 0c             	sub    esp,0xc
c0012f29:	68 e4 ec 01 c0       	push   0xc001ece4
c0012f2e:	e8 10 d2 ff ff       	call   c0010143 <KePanic(char const*)>
c0012f33:	83 c4 10             	add    esp,0x10
c0012f36:	eb 61                	jmp    c0012f99 <Thr::loadDLL(char const*, bool)+0x210>
c0012f38:	50                   	push   eax
c0012f39:	50                   	push   eax
c0012f3a:	89 e8                	mov    eax,ebp
c0012f3c:	c1 e0 0c             	shl    eax,0xc
c0012f3f:	01 d8                	add    eax,ebx
c0012f41:	50                   	push   eax
c0012f42:	ff 35 10 0e 02 c0    	push   DWORD PTR ds:0xc0020e10
c0012f48:	e8 49 66 ff ff       	call   c0009596 <VAS::getPageTableEntry(unsigned long)>
c0012f4d:	83 c4 10             	add    esp,0x10
c0012f50:	8b 00                	mov    eax,DWORD PTR [eax]
c0012f52:	a8 60                	test   al,0x60
c0012f54:	75 11                	jne    c0012f67 <Thr::loadDLL(char const*, bool)+0x1de>
c0012f56:	83 ec 0c             	sub    esp,0xc
c0012f59:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012f5e:	50                   	push   eax
c0012f5f:	e8 cf 4a ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0012f64:	83 c4 10             	add    esp,0x10
c0012f67:	45                   	inc    ebp
c0012f68:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012f6c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012f70:	05 ff 0f 00 00       	add    eax,0xfff
c0012f75:	bf 00 00 00 00       	mov    edi,0x0
c0012f7a:	83 d2 00             	adc    edx,0x0
c0012f7d:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012f81:	c1 ea 0c             	shr    edx,0xc
c0012f84:	39 c5                	cmp    ebp,eax
c0012f86:	89 d1                	mov    ecx,edx
c0012f88:	89 f8                	mov    eax,edi
c0012f8a:	19 c8                	sbb    eax,ecx
c0012f8c:	72 aa                	jb     c0012f38 <Thr::loadDLL(char const*, bool)+0x1af>
c0012f8e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012f93:	75 18                	jne    c0012fad <Thr::loadDLL(char const*, bool)+0x224>
c0012f95:	31 db                	xor    ebx,ebx
c0012f97:	eb 14                	jmp    c0012fad <Thr::loadDLL(char const*, bool)+0x224>
c0012f99:	83 ec 0c             	sub    esp,0xc
c0012f9c:	68 03 ed 01 c0       	push   0xc001ed03
c0012fa1:	e8 9d d1 ff ff       	call   c0010143 <KePanic(char const*)>
c0012fa6:	83 c4 10             	add    esp,0x10
c0012fa9:	31 ed                	xor    ebp,ebp
c0012fab:	eb bb                	jmp    c0012f68 <Thr::loadDLL(char const*, bool)+0x1df>
c0012fad:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012fb3:	89 d8                	mov    eax,ebx
c0012fb5:	5b                   	pop    ebx
c0012fb6:	5e                   	pop    esi
c0012fb7:	5f                   	pop    edi
c0012fb8:	5d                   	pop    ebp
c0012fb9:	c3                   	ret    

c0012fba <Thr::executeDLL(unsigned long, void*)>:
c0012fba:	56                   	push   esi
c0012fbb:	53                   	push   ebx
c0012fbc:	52                   	push   edx
c0012fbd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012fc1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012fc5:	85 db                	test   ebx,ebx
c0012fc7:	75 10                	jne    c0012fd9 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0012fc9:	83 ec 0c             	sub    esp,0xc
c0012fcc:	68 1f ed 01 c0       	push   0xc001ed1f
c0012fd1:	e8 6d d1 ff ff       	call   c0010143 <KePanic(char const*)>
c0012fd6:	83 c4 10             	add    esp,0x10
c0012fd9:	50                   	push   eax
c0012fda:	50                   	push   eax
c0012fdb:	53                   	push   ebx
c0012fdc:	68 49 ed 01 c0       	push   0xc001ed49
c0012fe1:	e8 f2 74 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0012fe6:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0012fea:	89 d8                	mov    eax,ebx
c0012fec:	83 c4 14             	add    esp,0x14
c0012fef:	5b                   	pop    ebx
c0012ff0:	5e                   	pop    esi
c0012ff1:	ff e0                	jmp    eax
c0012ff3:	90                   	nop

c0012ff4 <userModeEntryPoint(void*)>:
c0012ff4:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c0012ff9:	48                   	dec    eax
c0012ffa:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c0012fff:	75 03                	jne    c0013004 <userModeEntryPoint(void*)+0x10>
c0013001:	fb                   	sti    
c0013002:	66 90                	xchg   ax,ax
c0013004:	fb                   	sti    
c0013005:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001300a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001300d:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0013013:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013017:	e9 23 d2 fe ff       	jmp    c000023f <goToUsermode>

c001301c <changeTSS>:
c001301c:	83 ec 14             	sub    esp,0x14
c001301f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013024:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0013027:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001302c:	c1 e2 15             	shl    edx,0x15
c001302f:	29 d0                	sub    eax,edx
c0013031:	50                   	push   eax
c0013032:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c0013037:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001303d:	05 7c 11 00 00       	add    eax,0x117c
c0013042:	50                   	push   eax
c0013043:	e8 90 5b ff ff       	call   c0008bd8 <TSS::setESP(unsigned long)>
c0013048:	83 c4 1c             	add    esp,0x1c
c001304b:	c3                   	ret    

c001304c <switchToThread(ThreadControlBlock*)>:
c001304c:	57                   	push   edi
c001304d:	a1 c4 3f 02 c0       	mov    eax,ds:0xc0023fc4
c0013052:	56                   	push   esi
c0013053:	85 c0                	test   eax,eax
c0013055:	53                   	push   ebx
c0013056:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001305a:	0f 85 90 00 00 00    	jne    c00130f0 <switchToThread(ThreadControlBlock*)+0xa4>
c0013060:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c0013063:	80 fa ff             	cmp    dl,0xff
c0013066:	0f 84 80 00 00 00    	je     c00130ec <switchToThread(ThreadControlBlock*)+0xa0>
c001306c:	81 e2 ff 00 00 00    	and    edx,0xff
c0013072:	b8 00 04 00 00       	mov    eax,0x400
c0013077:	29 d0                	sub    eax,edx
c0013079:	d1 f8                	sar    eax,1
c001307b:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c001307e:	66 90                	xchg   ax,ax
c0013080:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0013083:	e8 65 27 00 00       	call   c00157ed <HalQueryPerformanceCounter()>
c0013088:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c001308d:	89 15 0c 40 02 c0    	mov    DWORD PTR ds:0xc002400c,edx
c0013093:	89 c6                	mov    esi,eax
c0013095:	89 d7                	mov    edi,edx
c0013097:	2b 35 f8 3f 02 c0    	sub    esi,DWORD PTR ds:0xc0023ff8
c001309d:	a3 f8 3f 02 c0       	mov    ds:0xc0023ff8,eax
c00130a2:	1b 3d fc 3f 02 c0    	sbb    edi,DWORD PTR ds:0xc0023ffc
c00130a8:	89 35 00 40 02 c0    	mov    DWORD PTR ds:0xc0024000,esi
c00130ae:	89 3d 04 40 02 c0    	mov    DWORD PTR ds:0xc0024004,edi
c00130b4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00130ba:	89 15 fc 3f 02 c0    	mov    DWORD PTR ds:0xc0023ffc,edx
c00130c0:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00130c3:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00130c6:	01 c6                	add    esi,eax
c00130c8:	11 d7                	adc    edi,edx
c00130ca:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00130cd:	83 ec 0c             	sub    esp,0xc
c00130d0:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00130d3:	53                   	push   ebx
c00130d4:	e8 9e d1 fe ff       	call   c0000277 <switchToThreadASM>
c00130d9:	0f 20 c0             	mov    eax,cr0
c00130dc:	83 c8 08             	or     eax,0x8
c00130df:	0f 22 c0             	mov    cr0,eax
c00130e2:	83 c4 10             	add    esp,0x10
c00130e5:	5b                   	pop    ebx
c00130e6:	5e                   	pop    esi
c00130e7:	5f                   	pop    edi
c00130e8:	c3                   	ret    
c00130e9:	8d 76 00             	lea    esi,[esi+0x0]
c00130ec:	31 c0                	xor    eax,eax
c00130ee:	eb 90                	jmp    c0013080 <switchToThread(ThreadControlBlock*)+0x34>
c00130f0:	5b                   	pop    ebx
c00130f1:	c7 05 c0 3f 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023fc0,0x1
c00130fb:	5e                   	pop    esi
c00130fc:	5f                   	pop    edi
c00130fd:	c3                   	ret    
c00130fe:	66 90                	xchg   ax,ax

c0013100 <Process::addArgs(char**)>:
c0013100:	57                   	push   edi
c0013101:	56                   	push   esi
c0013102:	53                   	push   ebx
c0013103:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013107:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001310b:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0013115:	85 ff                	test   edi,edi
c0013117:	74 43                	je     c001315c <Process::addArgs(char**)+0x5c>
c0013119:	8b 07                	mov    eax,DWORD PTR [edi]
c001311b:	85 c0                	test   eax,eax
c001311d:	74 3d                	je     c001315c <Process::addArgs(char**)+0x5c>
c001311f:	31 db                	xor    ebx,ebx
c0013121:	8d 76 00             	lea    esi,[esi+0x0]
c0013124:	83 ec 0c             	sub    esp,0xc
c0013127:	50                   	push   eax
c0013128:	e8 13 d4 fe ff       	call   c0000540 <strlen>
c001312d:	40                   	inc    eax
c001312e:	89 04 24             	mov    DWORD PTR [esp],eax
c0013131:	e8 83 46 ff ff       	call   c00077b9 <malloc>
c0013136:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c001313d:	5a                   	pop    edx
c001313e:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0013141:	59                   	pop    ecx
c0013142:	43                   	inc    ebx
c0013143:	52                   	push   edx
c0013144:	50                   	push   eax
c0013145:	e8 b6 d4 fe ff       	call   c0000600 <strcpy>
c001314a:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0013150:	83 c4 10             	add    esp,0x10
c0013153:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0013156:	85 c0                	test   eax,eax
c0013158:	75 ca                	jne    c0013124 <Process::addArgs(char**)+0x24>
c001315a:	66 90                	xchg   ax,ax
c001315c:	5b                   	pop    ebx
c001315d:	5e                   	pop    esi
c001315e:	5f                   	pop    edi
c001315f:	c3                   	ret    

c0013160 <Process::Process(char const*, Process*, char**)>:
c0013160:	57                   	push   edi
c0013161:	56                   	push   esi
c0013162:	53                   	push   ebx
c0013163:	81 ec e0 00 00 00    	sub    esp,0xe0
c0013169:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c0013170:	05 0c 02 00 00       	add    eax,0x20c
c0013175:	bb 07 00 00 00       	mov    ebx,0x7
c001317a:	89 c6                	mov    esi,eax
c001317c:	85 db                	test   ebx,ebx
c001317e:	78 14                	js     c0013194 <Process::Process(char const*, Process*, char**)+0x34>
c0013180:	83 ec 0c             	sub    esp,0xc
c0013183:	56                   	push   esi
c0013184:	e8 83 99 00 00       	call   c001cb0c <ThreadControlBlock::ThreadControlBlock()>
c0013189:	83 c4 10             	add    esp,0x10
c001318c:	83 c6 5f             	add    esi,0x5f
c001318f:	4b                   	dec    ebx
c0013190:	eb ea                	jmp    c001317c <Process::Process(char const*, Process*, char**)+0x1c>
c0013192:	66 90                	xchg   ax,ax
c0013194:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c001319b:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00131a2:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c00131a9:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00131b0:	83 ec 0c             	sub    esp,0xc
c00131b3:	ff b4 24 fc 00 00 00 	push   DWORD PTR [esp+0xfc]
c00131ba:	e8 79 cd ff ff       	call   c000ff38 <Krnl::newProcessEnv(Process*)>
c00131bf:	83 c4 10             	add    esp,0x10
c00131c2:	89 c2                	mov    edx,eax
c00131c4:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c00131cb:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00131d1:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c00131d8:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00131e1:	a1 ec fc 01 c0       	mov    eax,ds:0xc001fcec
c00131e6:	8d 50 01             	lea    edx,[eax+0x1]
c00131e9:	89 15 ec fc 01 c0    	mov    DWORD PTR ds:0xc001fcec,edx
c00131ef:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c00131f6:	89 02                	mov    DWORD PTR [edx],eax
c00131f8:	c7 84 24 d8 00 00 00 14 00 00 00 	mov    DWORD PTR [esp+0xd8],0x14
c0013203:	83 ec 0c             	sub    esp,0xc
c0013206:	ff b4 24 e4 00 00 00 	push   DWORD PTR [esp+0xe4]
c001320d:	e8 a7 45 ff ff       	call   c00077b9 <malloc>
c0013212:	83 c4 10             	add    esp,0x10
c0013215:	89 c3                	mov    ebx,eax
c0013217:	83 ec 08             	sub    esp,0x8
c001321a:	6a 00                	push   0x0
c001321c:	53                   	push   ebx
c001321d:	e8 a6 6b ff ff       	call   c0009dc8 <VAS::VAS(bool)>
c0013222:	83 c4 10             	add    esp,0x10
c0013225:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c001322c:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0013232:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c0013239:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013243:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c001324a:	8b 94 24 f8 00 00 00 	mov    edx,DWORD PTR [esp+0xf8]
c0013251:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0013257:	8b 9c 24 f0 00 00 00 	mov    ebx,DWORD PTR [esp+0xf0]
c001325e:	89 e0                	mov    eax,esp
c0013260:	83 ec 0c             	sub    esp,0xc
c0013263:	50                   	push   eax
c0013264:	e8 fd d1 ff ff       	call   c0010466 <KeInitSignals()>
c0013269:	83 c4 0c             	add    esp,0xc
c001326c:	8d 93 20 07 00 00    	lea    edx,[ebx+0x720]
c0013272:	89 e0                	mov    eax,esp
c0013274:	b9 c8 00 00 00       	mov    ecx,0xc8
c0013279:	8b 18                	mov    ebx,DWORD PTR [eax]
c001327b:	89 1a                	mov    DWORD PTR [edx],ebx
c001327d:	8b 5c 08 fc          	mov    ebx,DWORD PTR [eax+ecx*1-0x4]
c0013281:	89 5c 0a fc          	mov    DWORD PTR [edx+ecx*1-0x4],ebx
c0013285:	8d 5a 04             	lea    ebx,[edx+0x4]
c0013288:	83 e3 fc             	and    ebx,0xfffffffc
c001328b:	29 da                	sub    edx,ebx
c001328d:	29 d0                	sub    eax,edx
c001328f:	01 d1                	add    ecx,edx
c0013291:	83 e1 fc             	and    ecx,0xfffffffc
c0013294:	c1 e9 02             	shr    ecx,0x2
c0013297:	89 ca                	mov    edx,ecx
c0013299:	fc                   	cld    
c001329a:	89 df                	mov    edi,ebx
c001329c:	89 c6                	mov    esi,eax
c001329e:	89 d1                	mov    ecx,edx
c00132a0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00132a2:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c00132a9:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00132af:	85 c0                	test   eax,eax
c00132b1:	74 51                	je     c0013304 <Process::Process(char const*, Process*, char**)+0x1a4>
c00132b3:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c00132ba:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00132c0:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00132c6:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c00132cd:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00132d3:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c00132da:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00132e0:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00132e6:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c00132ed:	05 0c 01 00 00       	add    eax,0x10c
c00132f2:	83 ec 08             	sub    esp,0x8
c00132f5:	52                   	push   edx
c00132f6:	50                   	push   eax
c00132f7:	e8 04 d3 fe ff       	call   c0000600 <strcpy>
c00132fc:	83 c4 10             	add    esp,0x10
c00132ff:	eb 7b                	jmp    c001337c <Process::Process(char const*, Process*, char**)+0x21c>
c0013301:	8d 76 00             	lea    esi,[esi+0x0]
c0013304:	c7 84 24 d4 00 00 00 34 01 00 00 	mov    DWORD PTR [esp+0xd4],0x134
c001330f:	83 ec 0c             	sub    esp,0xc
c0013312:	ff b4 24 e0 00 00 00 	push   DWORD PTR [esp+0xe0]
c0013319:	e8 9b 44 ff ff       	call   c00077b9 <malloc>
c001331e:	83 c4 10             	add    esp,0x10
c0013321:	89 c3                	mov    ebx,eax
c0013323:	83 ec 08             	sub    esp,0x8
c0013326:	ff b4 24 fc 00 00 00 	push   DWORD PTR [esp+0xfc]
c001332d:	53                   	push   ebx
c001332e:	e8 c7 55 ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c0013333:	83 c4 10             	add    esp,0x10
c0013336:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c001333d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0013343:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c001334a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013350:	83 ec 0c             	sub    esp,0xc
c0013353:	50                   	push   eax
c0013354:	e8 41 4e ff ff       	call   c000819a <addToTerminalCycle(VgaText*)>
c0013359:	83 c4 10             	add    esp,0x10
c001335c:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c0013363:	05 0c 01 00 00       	add    eax,0x10c
c0013368:	83 ec 08             	sub    esp,0x8
c001336b:	68 68 ed 01 c0       	push   0xc001ed68
c0013370:	50                   	push   eax
c0013371:	e8 8a d2 fe ff       	call   c0000600 <strcpy>
c0013376:	83 c4 10             	add    esp,0x10
c0013379:	8d 76 00             	lea    esi,[esi+0x0]
c001337c:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c0013383:	83 c0 0c             	add    eax,0xc
c0013386:	83 ec 08             	sub    esp,0x8
c0013389:	ff b4 24 fc 00 00 00 	push   DWORD PTR [esp+0xfc]
c0013390:	50                   	push   eax
c0013391:	e8 6a d2 fe ff       	call   c0000600 <strcpy>
c0013396:	83 c4 10             	add    esp,0x10
c0013399:	83 ec 08             	sub    esp,0x8
c001339c:	ff b4 24 04 01 00 00 	push   DWORD PTR [esp+0x104]
c00133a3:	ff b4 24 fc 00 00 00 	push   DWORD PTR [esp+0xfc]
c00133aa:	e8 51 fd ff ff       	call   c0013100 <Process::addArgs(char**)>
c00133af:	83 c4 10             	add    esp,0x10
c00133b2:	83 ec 08             	sub    esp,0x8
c00133b5:	ff b4 24 fc 00 00 00 	push   DWORD PTR [esp+0xfc]
c00133bc:	ff b4 24 fc 00 00 00 	push   DWORD PTR [esp+0xfc]
c00133c3:	e8 d2 ec ff ff       	call   c001209a <Thr::loadProgramIntoMemory(Process*, char const*)>
c00133c8:	83 c4 10             	add    esp,0x10
c00133cb:	88 84 24 df 00 00 00 	mov    BYTE PTR [esp+0xdf],al
c00133d2:	8a 84 24 df 00 00 00 	mov    al,BYTE PTR [esp+0xdf]
c00133d9:	83 f0 01             	xor    eax,0x1
c00133dc:	88 c2                	mov    dl,al
c00133de:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c00133e5:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c00133eb:	8a 84 24 df 00 00 00 	mov    al,BYTE PTR [esp+0xdf]
c00133f2:	25 ff 00 00 00       	and    eax,0xff
c00133f7:	83 ec 08             	sub    esp,0x8
c00133fa:	50                   	push   eax
c00133fb:	68 c0 ed 01 c0       	push   0xc001edc0
c0013400:	e8 d3 70 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0013405:	83 c4 10             	add    esp,0x10
c0013408:	90                   	nop
c0013409:	81 c4 e0 00 00 00    	add    esp,0xe0
c001340f:	5b                   	pop    ebx
c0013410:	5e                   	pop    esi
c0013411:	5f                   	pop    edi
c0013412:	c3                   	ret    
c0013413:	90                   	nop

c0013414 <Process::Process(bool, char const*, Process*, char**)>:
c0013414:	57                   	push   edi
c0013415:	56                   	push   esi
c0013416:	53                   	push   ebx
c0013417:	81 ec f0 00 00 00    	sub    esp,0xf0
c001341d:	8b 84 24 04 01 00 00 	mov    eax,DWORD PTR [esp+0x104]
c0013424:	88 84 24 dc 00 00 00 	mov    BYTE PTR [esp+0xdc],al
c001342b:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c0013432:	05 0c 02 00 00       	add    eax,0x20c
c0013437:	bb 07 00 00 00       	mov    ebx,0x7
c001343c:	89 c6                	mov    esi,eax
c001343e:	66 90                	xchg   ax,ax
c0013440:	85 db                	test   ebx,ebx
c0013442:	78 14                	js     c0013458 <Process::Process(bool, char const*, Process*, char**)+0x44>
c0013444:	83 ec 0c             	sub    esp,0xc
c0013447:	56                   	push   esi
c0013448:	e8 bf 96 00 00       	call   c001cb0c <ThreadControlBlock::ThreadControlBlock()>
c001344d:	83 c4 10             	add    esp,0x10
c0013450:	83 c6 5f             	add    esi,0x5f
c0013453:	4b                   	dec    ebx
c0013454:	eb ea                	jmp    c0013440 <Process::Process(bool, char const*, Process*, char**)+0x2c>
c0013456:	66 90                	xchg   ax,ax
c0013458:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c001345f:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0013466:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c001346d:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0013474:	83 ec 0c             	sub    esp,0xc
c0013477:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001347e:	e8 b5 ca ff ff       	call   c000ff38 <Krnl::newProcessEnv(Process*)>
c0013483:	83 c4 10             	add    esp,0x10
c0013486:	89 c2                	mov    edx,eax
c0013488:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c001348f:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0013495:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c001349c:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00134a5:	a1 ec fc 01 c0       	mov    eax,ds:0xc001fcec
c00134aa:	8d 50 01             	lea    edx,[eax+0x1]
c00134ad:	89 15 ec fc 01 c0    	mov    DWORD PTR ds:0xc001fcec,edx
c00134b3:	8b 94 24 00 01 00 00 	mov    edx,DWORD PTR [esp+0x100]
c00134ba:	89 02                	mov    DWORD PTR [edx],eax
c00134bc:	c7 84 24 ec 00 00 00 14 00 00 00 	mov    DWORD PTR [esp+0xec],0x14
c00134c7:	83 ec 0c             	sub    esp,0xc
c00134ca:	ff b4 24 f8 00 00 00 	push   DWORD PTR [esp+0xf8]
c00134d1:	e8 e3 42 ff ff       	call   c00077b9 <malloc>
c00134d6:	83 c4 10             	add    esp,0x10
c00134d9:	89 c3                	mov    ebx,eax
c00134db:	8a 84 24 dc 00 00 00 	mov    al,BYTE PTR [esp+0xdc]
c00134e2:	25 ff 00 00 00       	and    eax,0xff
c00134e7:	83 ec 08             	sub    esp,0x8
c00134ea:	50                   	push   eax
c00134eb:	53                   	push   ebx
c00134ec:	e8 d7 68 ff ff       	call   c0009dc8 <VAS::VAS(bool)>
c00134f1:	83 c4 10             	add    esp,0x10
c00134f4:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c00134fb:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0013501:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c0013508:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013512:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c0013519:	8b 94 24 0c 01 00 00 	mov    edx,DWORD PTR [esp+0x10c]
c0013520:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0013526:	8b 9c 24 00 01 00 00 	mov    ebx,DWORD PTR [esp+0x100]
c001352d:	89 e0                	mov    eax,esp
c001352f:	83 ec 0c             	sub    esp,0xc
c0013532:	50                   	push   eax
c0013533:	e8 2e cf ff ff       	call   c0010466 <KeInitSignals()>
c0013538:	83 c4 0c             	add    esp,0xc
c001353b:	8d 93 20 07 00 00    	lea    edx,[ebx+0x720]
c0013541:	89 e0                	mov    eax,esp
c0013543:	b9 c8 00 00 00       	mov    ecx,0xc8
c0013548:	8b 18                	mov    ebx,DWORD PTR [eax]
c001354a:	89 1a                	mov    DWORD PTR [edx],ebx
c001354c:	8b 5c 08 fc          	mov    ebx,DWORD PTR [eax+ecx*1-0x4]
c0013550:	89 5c 0a fc          	mov    DWORD PTR [edx+ecx*1-0x4],ebx
c0013554:	8d 5a 04             	lea    ebx,[edx+0x4]
c0013557:	83 e3 fc             	and    ebx,0xfffffffc
c001355a:	29 da                	sub    edx,ebx
c001355c:	29 d0                	sub    eax,edx
c001355e:	01 d1                	add    ecx,edx
c0013560:	83 e1 fc             	and    ecx,0xfffffffc
c0013563:	c1 e9 02             	shr    ecx,0x2
c0013566:	89 ca                	mov    edx,ecx
c0013568:	fc                   	cld    
c0013569:	89 df                	mov    edi,ebx
c001356b:	89 c6                	mov    esi,eax
c001356d:	89 d1                	mov    ecx,edx
c001356f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013571:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c0013578:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001357e:	85 c0                	test   eax,eax
c0013580:	74 4e                	je     c00135d0 <Process::Process(bool, char const*, Process*, char**)+0x1bc>
c0013582:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c0013589:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001358f:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013595:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c001359c:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00135a2:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c00135a9:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00135af:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00135b5:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c00135bc:	05 0c 01 00 00       	add    eax,0x10c
c00135c1:	83 ec 08             	sub    esp,0x8
c00135c4:	52                   	push   edx
c00135c5:	50                   	push   eax
c00135c6:	e8 35 d0 fe ff       	call   c0000600 <strcpy>
c00135cb:	83 c4 10             	add    esp,0x10
c00135ce:	eb 78                	jmp    c0013648 <Process::Process(bool, char const*, Process*, char**)+0x234>
c00135d0:	c7 84 24 e8 00 00 00 34 01 00 00 	mov    DWORD PTR [esp+0xe8],0x134
c00135db:	83 ec 0c             	sub    esp,0xc
c00135de:	ff b4 24 f4 00 00 00 	push   DWORD PTR [esp+0xf4]
c00135e5:	e8 cf 41 ff ff       	call   c00077b9 <malloc>
c00135ea:	83 c4 10             	add    esp,0x10
c00135ed:	89 c3                	mov    ebx,eax
c00135ef:	83 ec 08             	sub    esp,0x8
c00135f2:	ff b4 24 10 01 00 00 	push   DWORD PTR [esp+0x110]
c00135f9:	53                   	push   ebx
c00135fa:	e8 fb 52 ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c00135ff:	83 c4 10             	add    esp,0x10
c0013602:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c0013609:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001360f:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c0013616:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001361c:	83 ec 0c             	sub    esp,0xc
c001361f:	50                   	push   eax
c0013620:	e8 75 4b ff ff       	call   c000819a <addToTerminalCycle(VgaText*)>
c0013625:	83 c4 10             	add    esp,0x10
c0013628:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c001362f:	05 0c 01 00 00       	add    eax,0x10c
c0013634:	83 ec 08             	sub    esp,0x8
c0013637:	68 68 ed 01 c0       	push   0xc001ed68
c001363c:	50                   	push   eax
c001363d:	e8 be cf fe ff       	call   c0000600 <strcpy>
c0013642:	83 c4 10             	add    esp,0x10
c0013645:	8d 76 00             	lea    esi,[esi+0x0]
c0013648:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c001364f:	83 c0 0c             	add    eax,0xc
c0013652:	83 ec 08             	sub    esp,0x8
c0013655:	ff b4 24 10 01 00 00 	push   DWORD PTR [esp+0x110]
c001365c:	50                   	push   eax
c001365d:	e8 9e cf fe ff       	call   c0000600 <strcpy>
c0013662:	83 c4 10             	add    esp,0x10
c0013665:	83 ec 08             	sub    esp,0x8
c0013668:	ff b4 24 18 01 00 00 	push   DWORD PTR [esp+0x118]
c001366f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013676:	e8 85 fa ff ff       	call   c0013100 <Process::addArgs(char**)>
c001367b:	83 c4 10             	add    esp,0x10
c001367e:	90                   	nop
c001367f:	81 c4 f0 00 00 00    	add    esp,0xf0
c0013685:	5b                   	pop    ebx
c0013686:	5e                   	pop    esi
c0013687:	5f                   	pop    edi
c0013688:	c3                   	ret    
c0013689:	8d 76 00             	lea    esi,[esi+0x0]

c001368c <taskStartupFunction>:
c001368c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013691:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0013694:	c3                   	ret    
c0013695:	90                   	nop
c0013696:	66 90                	xchg   ax,ax

c0013698 <Semaphore::Semaphore(int)>:
c0013698:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001369c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00136a0:	89 10                	mov    DWORD PTR [eax],edx
c00136a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00136a6:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00136ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00136b1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00136b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00136bc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00136c3:	90                   	nop
c00136c4:	c3                   	ret    
c00136c5:	90                   	nop
c00136c6:	66 90                	xchg   ax,ax

c00136c8 <Mutex::Mutex()>:
c00136c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00136cc:	6a 01                	push   0x1
c00136ce:	50                   	push   eax
c00136cf:	e8 c4 ff ff ff       	call   c0013698 <Semaphore::Semaphore(int)>
c00136d4:	83 c4 08             	add    esp,0x8
c00136d7:	90                   	nop
c00136d8:	c3                   	ret    
c00136d9:	90                   	nop
c00136da:	66 90                	xchg   ax,ax

c00136dc <Process::createThread(void (*)(void*), void*, int)>:
c00136dc:	57                   	push   edi
c00136dd:	31 c9                	xor    ecx,ecx
c00136df:	56                   	push   esi
c00136e0:	53                   	push   ebx
c00136e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00136e5:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00136ec:	89 f2                	mov    edx,esi
c00136ee:	66 90                	xchg   ax,ax
c00136f0:	31 c0                	xor    eax,eax
c00136f2:	66 89 d0             	mov    ax,dx
c00136f5:	83 e2 01             	and    edx,0x1
c00136f8:	74 12                	je     c001370c <Process::createThread(void (*)(void*), void*, int)+0x30>
c00136fa:	d1 f8                	sar    eax,1
c00136fc:	41                   	inc    ecx
c00136fd:	89 c2                	mov    edx,eax
c00136ff:	83 f9 10             	cmp    ecx,0x10
c0013702:	75 ec                	jne    c00136f0 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0013704:	31 db                	xor    ebx,ebx
c0013706:	89 d8                	mov    eax,ebx
c0013708:	5b                   	pop    ebx
c0013709:	5e                   	pop    esi
c001370a:	5f                   	pop    edi
c001370b:	c3                   	ret    
c001370c:	b8 01 00 00 00       	mov    eax,0x1
c0013711:	d3 e0                	shl    eax,cl
c0013713:	09 c6                	or     esi,eax
c0013715:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0013718:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c001371f:	01 c0                	add    eax,eax
c0013721:	01 c8                	add    eax,ecx
c0013723:	8d 04 80             	lea    eax,[eax+eax*4]
c0013726:	01 d8                	add    eax,ebx
c0013728:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c001372f:	75 0b                	jne    c001373c <Process::createThread(void (*)(void*), void*, int)+0x60>
c0013731:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c001373b:	90                   	nop
c001373c:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0013742:	83 ec 08             	sub    esp,0x8
c0013745:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013748:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c001374b:	01 c0                	add    eax,eax
c001374d:	01 c8                	add    eax,ecx
c001374f:	8d 3c 80             	lea    edi,[eax+eax*4]
c0013752:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0013755:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001375b:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0013761:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013765:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c001376b:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0013771:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0013778:	89 ca                	mov    edx,ecx
c001377a:	f7 da                	neg    edx
c001377c:	c1 e2 15             	shl    edx,0x15
c001377f:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0013785:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001378b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001378f:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0013799:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c001379f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00137a3:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00137a9:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00137b3:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00137bd:	53                   	push   ebx
c00137be:	68 e4 3f 02 c0       	push   0xc0023fe4
c00137c3:	e8 e4 90 00 00       	call   c001c8ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00137c8:	83 c4 10             	add    esp,0x10
c00137cb:	89 d8                	mov    eax,ebx
c00137cd:	5b                   	pop    ebx
c00137ce:	5e                   	pop    esi
c00137cf:	5f                   	pop    edi
c00137d0:	c3                   	ret    
c00137d1:	90                   	nop
c00137d2:	66 90                	xchg   ax,ax

c00137d4 <Process::createUserThread()>:
c00137d4:	83 ec 0c             	sub    esp,0xc
c00137d7:	68 80 00 00 00       	push   0x80
c00137dc:	6a 00                	push   0x0
c00137de:	68 f4 2f 01 c0       	push   0xc0012ff4
c00137e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00137e7:	50                   	push   eax
c00137e8:	e8 ef fe ff ff       	call   c00136dc <Process::createThread(void (*)(void*), void*, int)>
c00137ed:	83 c4 1c             	add    esp,0x1c
c00137f0:	c3                   	ret    
c00137f1:	8d 76 00             	lea    esi,[esi+0x0]

c00137f4 <setupMultitasking(void (*)())>:
c00137f4:	56                   	push   esi
c00137f5:	53                   	push   ebx
c00137f6:	53                   	push   ebx
c00137f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00137fb:	eb 13                	jmp    c0013810 <setupMultitasking(void (*)())+0x1c>
c00137fd:	8d 76 00             	lea    esi,[esi+0x0]
c0013800:	83 ec 0c             	sub    esp,0xc
c0013803:	68 e4 3f 02 c0       	push   0xc0023fe4
c0013808:	e8 e7 8f 00 00       	call   c001c7f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001380d:	83 c4 10             	add    esp,0x10
c0013810:	83 ec 0c             	sub    esp,0xc
c0013813:	68 e4 3f 02 c0       	push   0xc0023fe4
c0013818:	e8 b3 8f 00 00       	call   c001c7d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001381d:	83 c4 10             	add    esp,0x10
c0013820:	84 c0                	test   al,al
c0013822:	74 dc                	je     c0013800 <setupMultitasking(void (*)())+0xc>
c0013824:	83 ec 0c             	sub    esp,0xc
c0013827:	68 e8 07 00 00       	push   0x7e8
c001382c:	e8 88 3f ff ff       	call   c00077b9 <malloc>
c0013831:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0013838:	89 c3                	mov    ebx,eax
c001383a:	6a 00                	push   0x0
c001383c:	68 6c ed 01 c0       	push   0xc001ed6c
c0013841:	6a 01                	push   0x1
c0013843:	50                   	push   eax
c0013844:	e8 cb fb ff ff       	call   c0013414 <Process::Process(bool, char const*, Process*, char**)>
c0013849:	83 c4 14             	add    esp,0x14
c001384c:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0013852:	89 1d f0 3f 02 c0    	mov    DWORD PTR ds:0xc0023ff0,ebx
c0013858:	50                   	push   eax
c0013859:	e8 99 4b ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c001385e:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0013866:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0013870:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0013876:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013879:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0013883:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0013889:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c001388f:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0013899:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00138a3:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00138ad:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00138b3:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00138b9:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00138c3:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00138c9:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00138d3:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00138d9:	5a                   	pop    edx
c00138da:	59                   	pop    ecx
c00138db:	68 68 ed 01 c0       	push   0xc001ed68
c00138e0:	50                   	push   eax
c00138e1:	e8 1a cd fe ff       	call   c0000600 <strcpy>
c00138e6:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00138ed:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00138f1:	83 c4 14             	add    esp,0x14
c00138f4:	5b                   	pop    ebx
c00138f5:	5e                   	pop    esi
c00138f6:	e9 6e c9 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c00138fb:	90                   	nop

c00138fc <schedule()>:
c00138fc:	8b 15 c4 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023fc4
c0013902:	85 d2                	test   edx,edx
c0013904:	74 0e                	je     c0013914 <schedule()+0x18>
c0013906:	c7 05 c0 3f 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023fc0,0x1
c0013910:	c3                   	ret    
c0013911:	8d 76 00             	lea    esi,[esi+0x0]
c0013914:	53                   	push   ebx
c0013915:	83 ec 14             	sub    esp,0x14
c0013918:	68 e4 3f 02 c0       	push   0xc0023fe4
c001391d:	e8 ae 8e 00 00       	call   c001c7d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013922:	83 c4 10             	add    esp,0x10
c0013925:	84 c0                	test   al,al
c0013927:	75 3b                	jne    c0013964 <schedule()+0x68>
c0013929:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001392e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0013931:	4a                   	dec    edx
c0013932:	74 38                	je     c001396c <schedule()+0x70>
c0013934:	83 ec 0c             	sub    esp,0xc
c0013937:	68 e4 3f 02 c0       	push   0xc0023fe4
c001393c:	e8 ab 8e 00 00       	call   c001c7ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013941:	c7 04 24 e4 3f 02 c0 	mov    DWORD PTR [esp],0xc0023fe4
c0013948:	89 c3                	mov    ebx,eax
c001394a:	e8 a5 8e 00 00       	call   c001c7f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001394f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0013956:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013959:	e8 ee f6 ff ff       	call   c001304c <switchToThread(ThreadControlBlock*)>
c001395e:	83 c4 10             	add    esp,0x10
c0013961:	8d 76 00             	lea    esi,[esi+0x0]
c0013964:	83 c4 08             	add    esp,0x8
c0013967:	5b                   	pop    ebx
c0013968:	c3                   	ret    
c0013969:	8d 76 00             	lea    esi,[esi+0x0]
c001396c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0013973:	83 ec 08             	sub    esp,0x8
c0013976:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001397b:	50                   	push   eax
c001397c:	68 e4 3f 02 c0       	push   0xc0023fe4
c0013981:	e8 26 8f 00 00       	call   c001c8ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013986:	83 c4 10             	add    esp,0x10
c0013989:	eb a9                	jmp    c0013934 <schedule()+0x38>
c001398b:	90                   	nop

c001398c <Semaphore::tryAcquire()>:
c001398c:	53                   	push   ebx
c001398d:	83 ec 08             	sub    esp,0x8
c0013990:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013994:	fa                   	cli    
c0013995:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c001399a:	8d 50 01             	lea    edx,[eax+0x1]
c001399d:	89 15 c8 3f 02 c0    	mov    DWORD PTR ds:0xc0023fc8,edx
c00139a3:	8b 15 c4 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023fc4
c00139a9:	8d 5a 01             	lea    ebx,[edx+0x1]
c00139ac:	89 1d c4 3f 02 c0    	mov    DWORD PTR ds:0xc0023fc4,ebx
c00139b2:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00139b5:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00139b7:	7c 33                	jl     c00139ec <Semaphore::tryAcquire()+0x60>
c00139b9:	89 15 c4 3f 02 c0    	mov    DWORD PTR ds:0xc0023fc4,edx
c00139bf:	85 d2                	test   edx,edx
c00139c1:	75 0d                	jne    c00139d0 <Semaphore::tryAcquire()+0x44>
c00139c3:	8b 15 c0 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023fc0
c00139c9:	85 d2                	test   edx,edx
c00139cb:	75 6b                	jne    c0013a38 <Semaphore::tryAcquire()+0xac>
c00139cd:	8d 76 00             	lea    esi,[esi+0x0]
c00139d0:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c00139d5:	85 c0                	test   eax,eax
c00139d7:	74 0b                	je     c00139e4 <Semaphore::tryAcquire()+0x58>
c00139d9:	8d 76 00             	lea    esi,[esi+0x0]
c00139dc:	31 c0                	xor    eax,eax
c00139de:	83 c4 08             	add    esp,0x8
c00139e1:	5b                   	pop    ebx
c00139e2:	c3                   	ret    
c00139e3:	90                   	nop
c00139e4:	fb                   	sti    
c00139e5:	83 c4 08             	add    esp,0x8
c00139e8:	5b                   	pop    ebx
c00139e9:	c3                   	ret    
c00139ea:	66 90                	xchg   ax,ax
c00139ec:	43                   	inc    ebx
c00139ed:	89 15 c4 3f 02 c0    	mov    DWORD PTR ds:0xc0023fc4,edx
c00139f3:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c00139f6:	85 d2                	test   edx,edx
c00139f8:	75 22                	jne    c0013a1c <Semaphore::tryAcquire()+0x90>
c00139fa:	8b 0d c0 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fc0
c0013a00:	85 c9                	test   ecx,ecx
c0013a02:	74 18                	je     c0013a1c <Semaphore::tryAcquire()+0x90>
c0013a04:	c7 05 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023fc0,0x0
c0013a0e:	e8 e9 fe ff ff       	call   c00138fc <schedule()>
c0013a13:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c0013a18:	48                   	dec    eax
c0013a19:	8d 76 00             	lea    esi,[esi+0x0]
c0013a1c:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c0013a21:	85 c0                	test   eax,eax
c0013a23:	75 0b                	jne    c0013a30 <Semaphore::tryAcquire()+0xa4>
c0013a25:	fb                   	sti    
c0013a26:	b0 01                	mov    al,0x1
c0013a28:	83 c4 08             	add    esp,0x8
c0013a2b:	5b                   	pop    ebx
c0013a2c:	c3                   	ret    
c0013a2d:	8d 76 00             	lea    esi,[esi+0x0]
c0013a30:	b0 01                	mov    al,0x1
c0013a32:	83 c4 08             	add    esp,0x8
c0013a35:	5b                   	pop    ebx
c0013a36:	c3                   	ret    
c0013a37:	90                   	nop
c0013a38:	c7 05 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023fc0,0x0
c0013a42:	e8 b5 fe ff ff       	call   c00138fc <schedule()>
c0013a47:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c0013a4c:	48                   	dec    eax
c0013a4d:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c0013a52:	85 c0                	test   eax,eax
c0013a54:	75 86                	jne    c00139dc <Semaphore::tryAcquire()+0x50>
c0013a56:	eb 8c                	jmp    c00139e4 <Semaphore::tryAcquire()+0x58>

c0013a58 <Semaphore::assertLocked(char const*)>:
c0013a58:	83 ec 0c             	sub    esp,0xc
c0013a5b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a5f:	fa                   	cli    
c0013a60:	ff 05 c8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fc8
c0013a66:	a1 c4 3f 02 c0       	mov    eax,ds:0xc0023fc4
c0013a6b:	8d 48 01             	lea    ecx,[eax+0x1]
c0013a6e:	89 0d c4 3f 02 c0    	mov    DWORD PTR ds:0xc0023fc4,ecx
c0013a74:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013a76:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0013a79:	7c 29                	jl     c0013aa4 <Semaphore::assertLocked(char const*)+0x4c>
c0013a7b:	90                   	nop
c0013a7c:	a3 c4 3f 02 c0       	mov    ds:0xc0023fc4,eax
c0013a81:	85 c0                	test   eax,eax
c0013a83:	75 0b                	jne    c0013a90 <Semaphore::assertLocked(char const*)+0x38>
c0013a85:	a1 c0 3f 02 c0       	mov    eax,ds:0xc0023fc0
c0013a8a:	85 c0                	test   eax,eax
c0013a8c:	75 2e                	jne    c0013abc <Semaphore::assertLocked(char const*)+0x64>
c0013a8e:	66 90                	xchg   ax,ax
c0013a90:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c0013a95:	48                   	dec    eax
c0013a96:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c0013a9b:	75 03                	jne    c0013aa0 <Semaphore::assertLocked(char const*)+0x48>
c0013a9d:	fb                   	sti    
c0013a9e:	66 90                	xchg   ax,ax
c0013aa0:	83 c4 0c             	add    esp,0xc
c0013aa3:	c3                   	ret    
c0013aa4:	83 ec 0c             	sub    esp,0xc
c0013aa7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013aab:	52                   	push   edx
c0013aac:	e8 92 c6 ff ff       	call   c0010143 <KePanic(char const*)>
c0013ab1:	a1 c4 3f 02 c0       	mov    eax,ds:0xc0023fc4
c0013ab6:	83 c4 10             	add    esp,0x10
c0013ab9:	48                   	dec    eax
c0013aba:	eb c0                	jmp    c0013a7c <Semaphore::assertLocked(char const*)+0x24>
c0013abc:	c7 05 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023fc0,0x0
c0013ac6:	e8 31 fe ff ff       	call   c00138fc <schedule()>
c0013acb:	eb c3                	jmp    c0013a90 <Semaphore::assertLocked(char const*)+0x38>
c0013acd:	8d 76 00             	lea    esi,[esi+0x0]

c0013ad0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0013ad0:	83 ec 0c             	sub    esp,0xc
c0013ad3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ad8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013adc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013adf:	e8 18 fe ff ff       	call   c00138fc <schedule()>
c0013ae4:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c0013ae9:	48                   	dec    eax
c0013aea:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c0013aef:	75 03                	jne    c0013af4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0013af1:	fb                   	sti    
c0013af2:	66 90                	xchg   ax,ax
c0013af4:	83 c4 0c             	add    esp,0xc
c0013af7:	c3                   	ret    

c0013af8 <blockTask(TaskState)>:
c0013af8:	83 ec 0c             	sub    esp,0xc
c0013afb:	fa                   	cli    
c0013afc:	ff 05 c8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fc8
c0013b02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b06:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b0b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013b0e:	e8 e9 fd ff ff       	call   c00138fc <schedule()>
c0013b13:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c0013b18:	48                   	dec    eax
c0013b19:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c0013b1e:	75 04                	jne    c0013b24 <blockTask(TaskState)+0x2c>
c0013b20:	fb                   	sti    
c0013b21:	8d 76 00             	lea    esi,[esi+0x0]
c0013b24:	83 c4 0c             	add    esp,0xc
c0013b27:	c3                   	ret    

c0013b28 <waitTask(int, int*, int)>:
c0013b28:	83 ec 18             	sub    esp,0x18
c0013b2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b30:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013b34:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0013b37:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013b3b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b40:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0013b43:	6a 07                	push   0x7
c0013b45:	e8 ae ff ff ff       	call   c0013af8 <blockTask(TaskState)>
c0013b4a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b4f:	83 c4 10             	add    esp,0x10
c0013b52:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0013b55:	85 d2                	test   edx,edx
c0013b57:	74 0b                	je     c0013b64 <waitTask(int, int*, int)+0x3c>
c0013b59:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0013b5c:	89 02                	mov    DWORD PTR [edx],eax
c0013b5e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b63:	90                   	nop
c0013b64:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0013b67:	83 c4 0c             	add    esp,0xc
c0013b6a:	c3                   	ret    
c0013b6b:	90                   	nop

c0013b6c <milliTenthSleepUntil(unsigned int)>:
c0013b6c:	83 ec 0c             	sub    esp,0xc
c0013b6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b73:	39 05 ec 32 02 c0    	cmp    DWORD PTR ds:0xc00232ec,eax
c0013b79:	76 05                	jbe    c0013b80 <milliTenthSleepUntil(unsigned int)+0x14>
c0013b7b:	90                   	nop
c0013b7c:	83 c4 0c             	add    esp,0xc
c0013b7f:	c3                   	ret    
c0013b80:	fa                   	cli    
c0013b81:	ff 05 c8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fc8
c0013b87:	83 ec 08             	sub    esp,0x8
c0013b8a:	ff 05 c4 3f 02 c0    	inc    DWORD PTR ds:0xc0023fc4
c0013b90:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013b96:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0013b99:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013b9f:	52                   	push   edx
c0013ba0:	68 d8 3f 02 c0       	push   0xc0023fd8
c0013ba5:	e8 02 8d 00 00       	call   c001c8ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013baa:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013bb1:	e8 42 ff ff ff       	call   c0013af8 <blockTask(TaskState)>
c0013bb6:	a1 c4 3f 02 c0       	mov    eax,ds:0xc0023fc4
c0013bbb:	83 c4 10             	add    esp,0x10
c0013bbe:	48                   	dec    eax
c0013bbf:	a3 c4 3f 02 c0       	mov    ds:0xc0023fc4,eax
c0013bc4:	85 c0                	test   eax,eax
c0013bc6:	75 0c                	jne    c0013bd4 <milliTenthSleepUntil(unsigned int)+0x68>
c0013bc8:	a1 c0 3f 02 c0       	mov    eax,ds:0xc0023fc0
c0013bcd:	85 c0                	test   eax,eax
c0013bcf:	75 17                	jne    c0013be8 <milliTenthSleepUntil(unsigned int)+0x7c>
c0013bd1:	8d 76 00             	lea    esi,[esi+0x0]
c0013bd4:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c0013bd9:	48                   	dec    eax
c0013bda:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c0013bdf:	75 9b                	jne    c0013b7c <milliTenthSleepUntil(unsigned int)+0x10>
c0013be1:	fb                   	sti    
c0013be2:	83 c4 0c             	add    esp,0xc
c0013be5:	c3                   	ret    
c0013be6:	66 90                	xchg   ax,ax
c0013be8:	c7 05 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023fc0,0x0
c0013bf2:	e8 05 fd ff ff       	call   c00138fc <schedule()>
c0013bf7:	eb db                	jmp    c0013bd4 <milliTenthSleepUntil(unsigned int)+0x68>
c0013bf9:	8d 76 00             	lea    esi,[esi+0x0]

c0013bfc <milliTenthSleep(unsigned int)>:
c0013bfc:	a1 ec 32 02 c0       	mov    eax,ds:0xc00232ec
c0013c01:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0013c05:	e9 62 ff ff ff       	jmp    c0013b6c <milliTenthSleepUntil(unsigned int)>
c0013c0a:	66 90                	xchg   ax,ax

c0013c0c <sleep(unsigned int)>:
c0013c0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c10:	8d 04 80             	lea    eax,[eax+eax*4]
c0013c13:	8d 04 80             	lea    eax,[eax+eax*4]
c0013c16:	8d 04 80             	lea    eax,[eax+eax*4]
c0013c19:	8d 04 80             	lea    eax,[eax+eax*4]
c0013c1c:	c1 e0 04             	shl    eax,0x4
c0013c1f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013c23:	eb d7                	jmp    c0013bfc <milliTenthSleep(unsigned int)>
c0013c25:	90                   	nop
c0013c26:	66 90                	xchg   ax,ax

c0013c28 <Semaphore::acquire()>:
c0013c28:	83 ec 0c             	sub    esp,0xc
c0013c2b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013c2f:	fa                   	cli    
c0013c30:	a1 c4 3f 02 c0       	mov    eax,ds:0xc0023fc4
c0013c35:	ff 05 c8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fc8
c0013c3b:	8d 48 01             	lea    ecx,[eax+0x1]
c0013c3e:	89 0d c4 3f 02 c0    	mov    DWORD PTR ds:0xc0023fc4,ecx
c0013c44:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0013c47:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0013c49:	7d 2d                	jge    c0013c78 <Semaphore::acquire()+0x50>
c0013c4b:	41                   	inc    ecx
c0013c4c:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0013c4f:	90                   	nop
c0013c50:	a3 c4 3f 02 c0       	mov    ds:0xc0023fc4,eax
c0013c55:	85 c0                	test   eax,eax
c0013c57:	75 0b                	jne    c0013c64 <Semaphore::acquire()+0x3c>
c0013c59:	a1 c0 3f 02 c0       	mov    eax,ds:0xc0023fc0
c0013c5e:	85 c0                	test   eax,eax
c0013c60:	75 62                	jne    c0013cc4 <Semaphore::acquire()+0x9c>
c0013c62:	66 90                	xchg   ax,ax
c0013c64:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c0013c69:	48                   	dec    eax
c0013c6a:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c0013c6f:	75 03                	jne    c0013c74 <Semaphore::acquire()+0x4c>
c0013c71:	fb                   	sti    
c0013c72:	66 90                	xchg   ax,ax
c0013c74:	83 c4 0c             	add    esp,0xc
c0013c77:	c3                   	ret    
c0013c78:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c7d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0013c84:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013c87:	85 c9                	test   ecx,ecx
c0013c89:	74 4d                	je     c0013cd8 <Semaphore::acquire()+0xb0>
c0013c8b:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0013c8e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013c94:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0013c97:	90                   	nop
c0013c98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c9d:	83 ec 0c             	sub    esp,0xc
c0013ca0:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0013ca3:	68 e8 ed 01 c0       	push   0xc001ede8
c0013ca8:	e8 2b 68 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0013cad:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0013cb4:	e8 3f fe ff ff       	call   c0013af8 <blockTask(TaskState)>
c0013cb9:	a1 c4 3f 02 c0       	mov    eax,ds:0xc0023fc4
c0013cbe:	83 c4 10             	add    esp,0x10
c0013cc1:	48                   	dec    eax
c0013cc2:	eb 8c                	jmp    c0013c50 <Semaphore::acquire()+0x28>
c0013cc4:	c7 05 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023fc0,0x0
c0013cce:	e8 29 fc ff ff       	call   c00138fc <schedule()>
c0013cd3:	eb 8f                	jmp    c0013c64 <Semaphore::acquire()+0x3c>
c0013cd5:	8d 76 00             	lea    esi,[esi+0x0]
c0013cd8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013cdd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013ce0:	eb b6                	jmp    c0013c98 <Semaphore::acquire()+0x70>
c0013ce2:	66 90                	xchg   ax,ax

c0013ce4 <taskReturned>:
c0013ce4:	83 ec 18             	sub    esp,0x18
c0013ce7:	68 08 ee 01 c0       	push   0xc001ee08
c0013cec:	e8 52 c4 ff ff       	call   c0010143 <KePanic(char const*)>
c0013cf1:	83 c4 10             	add    esp,0x10
c0013cf4:	83 ec 0c             	sub    esp,0xc
c0013cf7:	6a 02                	push   0x2
c0013cf9:	e8 fa fd ff ff       	call   c0013af8 <blockTask(TaskState)>
c0013cfe:	fa                   	cli    
c0013cff:	ff 05 c8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fc8
c0013d05:	e8 f2 fb ff ff       	call   c00138fc <schedule()>
c0013d0a:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c0013d0f:	83 c4 10             	add    esp,0x10
c0013d12:	48                   	dec    eax
c0013d13:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c0013d18:	85 c0                	test   eax,eax
c0013d1a:	75 d8                	jne    c0013cf4 <taskReturned+0x10>
c0013d1c:	fb                   	sti    
c0013d1d:	eb d5                	jmp    c0013cf4 <taskReturned+0x10>
c0013d1f:	90                   	nop

c0013d20 <Thr::processFromPID(int)>:
c0013d20:	57                   	push   edi
c0013d21:	56                   	push   esi
c0013d22:	53                   	push   ebx
c0013d23:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d27:	fa                   	cli    
c0013d28:	ff 05 c8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fc8
c0013d2e:	83 ec 0c             	sub    esp,0xc
c0013d31:	68 e4 3f 02 c0       	push   0xc0023fe4
c0013d36:	e8 b1 8a 00 00       	call   c001c7ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013d3b:	83 c4 10             	add    esp,0x10
c0013d3e:	89 c7                	mov    edi,eax
c0013d40:	eb 16                	jmp    c0013d58 <Thr::processFromPID(int)+0x38>
c0013d42:	66 90                	xchg   ax,ax
c0013d44:	83 ec 0c             	sub    esp,0xc
c0013d47:	68 e4 3f 02 c0       	push   0xc0023fe4
c0013d4c:	e8 9b 8a 00 00       	call   c001c7ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013d51:	83 c4 10             	add    esp,0x10
c0013d54:	39 f8                	cmp    eax,edi
c0013d56:	74 4c                	je     c0013da4 <Thr::processFromPID(int)+0x84>
c0013d58:	83 ec 0c             	sub    esp,0xc
c0013d5b:	68 e4 3f 02 c0       	push   0xc0023fe4
c0013d60:	e8 87 8a 00 00       	call   c001c7ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013d65:	c7 04 24 e4 3f 02 c0 	mov    DWORD PTR [esp],0xc0023fe4
c0013d6c:	89 c3                	mov    ebx,eax
c0013d6e:	e8 81 8a 00 00       	call   c001c7f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013d73:	58                   	pop    eax
c0013d74:	5a                   	pop    edx
c0013d75:	53                   	push   ebx
c0013d76:	68 e4 3f 02 c0       	push   0xc0023fe4
c0013d7b:	e8 2c 8b 00 00       	call   c001c8ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013d80:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013d83:	83 c4 10             	add    esp,0x10
c0013d86:	39 30                	cmp    DWORD PTR [eax],esi
c0013d88:	75 ba                	jne    c0013d44 <Thr::processFromPID(int)+0x24>
c0013d8a:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c0013d8f:	48                   	dec    eax
c0013d90:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c0013d95:	74 09                	je     c0013da0 <Thr::processFromPID(int)+0x80>
c0013d97:	90                   	nop
c0013d98:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013d9b:	5b                   	pop    ebx
c0013d9c:	5e                   	pop    esi
c0013d9d:	5f                   	pop    edi
c0013d9e:	c3                   	ret    
c0013d9f:	90                   	nop
c0013da0:	fb                   	sti    
c0013da1:	eb f5                	jmp    c0013d98 <Thr::processFromPID(int)+0x78>
c0013da3:	90                   	nop
c0013da4:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c0013da9:	48                   	dec    eax
c0013daa:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c0013daf:	75 07                	jne    c0013db8 <Thr::processFromPID(int)+0x98>
c0013db1:	fb                   	sti    
c0013db2:	5b                   	pop    ebx
c0013db3:	5e                   	pop    esi
c0013db4:	5f                   	pop    edi
c0013db5:	c3                   	ret    
c0013db6:	66 90                	xchg   ax,ax
c0013db8:	5b                   	pop    ebx
c0013db9:	31 c0                	xor    eax,eax
c0013dbb:	5e                   	pop    esi
c0013dbc:	5f                   	pop    edi
c0013dbd:	c3                   	ret    
c0013dbe:	66 90                	xchg   ax,ax

c0013dc0 <unblockTask(ThreadControlBlock*)>:
c0013dc0:	53                   	push   ebx
c0013dc1:	83 ec 08             	sub    esp,0x8
c0013dc4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013dc8:	fa                   	cli    
c0013dc9:	ff 05 c8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fc8
c0013dcf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013dd2:	85 c0                	test   eax,eax
c0013dd4:	74 66                	je     c0013e3c <unblockTask(ThreadControlBlock*)+0x7c>
c0013dd6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013dd9:	48                   	dec    eax
c0013dda:	74 38                	je     c0013e14 <unblockTask(ThreadControlBlock*)+0x54>
c0013ddc:	83 ec 0c             	sub    esp,0xc
c0013ddf:	68 e4 3f 02 c0       	push   0xc0023fe4
c0013de4:	e8 03 8a 00 00       	call   c001c7ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013de9:	83 c4 10             	add    esp,0x10
c0013dec:	85 c0                	test   eax,eax
c0013dee:	75 1c                	jne    c0013e0c <unblockTask(ThreadControlBlock*)+0x4c>
c0013df0:	eb 5e                	jmp    c0013e50 <unblockTask(ThreadControlBlock*)+0x90>
c0013df2:	66 90                	xchg   ax,ax
c0013df4:	83 ec 08             	sub    esp,0x8
c0013df7:	50                   	push   eax
c0013df8:	68 e4 3f 02 c0       	push   0xc0023fe4
c0013dfd:	e8 9a 8d 00 00       	call   c001cb9c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013e02:	83 c4 10             	add    esp,0x10
c0013e05:	85 c0                	test   eax,eax
c0013e07:	74 47                	je     c0013e50 <unblockTask(ThreadControlBlock*)+0x90>
c0013e09:	8d 76 00             	lea    esi,[esi+0x0]
c0013e0c:	39 c3                	cmp    ebx,eax
c0013e0e:	75 e4                	jne    c0013df4 <unblockTask(ThreadControlBlock*)+0x34>
c0013e10:	eb 12                	jmp    c0013e24 <unblockTask(ThreadControlBlock*)+0x64>
c0013e12:	66 90                	xchg   ax,ax
c0013e14:	83 ec 0c             	sub    esp,0xc
c0013e17:	68 8a ed 01 c0       	push   0xc001ed8a
c0013e1c:	e8 b7 66 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0013e21:	83 c4 10             	add    esp,0x10
c0013e24:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c0013e29:	48                   	dec    eax
c0013e2a:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c0013e2f:	75 03                	jne    c0013e34 <unblockTask(ThreadControlBlock*)+0x74>
c0013e31:	fb                   	sti    
c0013e32:	66 90                	xchg   ax,ax
c0013e34:	83 c4 08             	add    esp,0x8
c0013e37:	5b                   	pop    ebx
c0013e38:	c3                   	ret    
c0013e39:	8d 76 00             	lea    esi,[esi+0x0]
c0013e3c:	83 ec 0c             	sub    esp,0xc
c0013e3f:	68 73 ed 01 c0       	push   0xc001ed73
c0013e44:	e8 8f 66 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0013e49:	83 c4 10             	add    esp,0x10
c0013e4c:	eb d6                	jmp    c0013e24 <unblockTask(ThreadControlBlock*)+0x64>
c0013e4e:	66 90                	xchg   ax,ax
c0013e50:	83 ec 08             	sub    esp,0x8
c0013e53:	53                   	push   ebx
c0013e54:	68 e4 3f 02 c0       	push   0xc0023fe4
c0013e59:	e8 4e 8a 00 00       	call   c001c8ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013e5e:	83 c4 10             	add    esp,0x10
c0013e61:	eb c1                	jmp    c0013e24 <unblockTask(ThreadControlBlock*)+0x64>
c0013e63:	90                   	nop

c0013e64 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0013e64:	55                   	push   ebp
c0013e65:	57                   	push   edi
c0013e66:	56                   	push   esi
c0013e67:	53                   	push   ebx
c0013e68:	83 ec 1c             	sub    esp,0x1c
c0013e6b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0013e6f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013e72:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0013e78:	85 ed                	test   ebp,ebp
c0013e7a:	7e 24                	jle    c0013ea0 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0013e7c:	31 f6                	xor    esi,esi
c0013e7e:	66 90                	xchg   ax,ax
c0013e80:	83 ec 0c             	sub    esp,0xc
c0013e83:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0013e8a:	46                   	inc    esi
c0013e8b:	57                   	push   edi
c0013e8c:	e8 38 39 ff ff       	call   c00077c9 <free>
c0013e91:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013e94:	83 c4 10             	add    esp,0x10
c0013e97:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0013e9d:	7f e1                	jg     c0013e80 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0013e9f:	90                   	nop
c0013ea0:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013eaa:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013eaf:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0013eb2:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0013eb5:	d3 c0                	rol    eax,cl
c0013eb7:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0013ebe:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013ec1:	89 f7                	mov    edi,esi
c0013ec3:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0013ecb:	0f 85 77 01 00 00    	jne    c0014048 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013ed1:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0013ed7:	85 ed                	test   ebp,ebp
c0013ed9:	74 1d                	je     c0013ef8 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0013edb:	83 ec 0c             	sub    esp,0xc
c0013ede:	55                   	push   ebp
c0013edf:	e8 70 bf ff ff       	call   c000fe54 <EnvVarContainer::~EnvVarContainer()>
c0013ee4:	59                   	pop    ecx
c0013ee5:	5e                   	pop    esi
c0013ee6:	6a 0c                	push   0xc
c0013ee8:	55                   	push   ebp
c0013ee9:	e8 f4 64 ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c0013eee:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013ef1:	83 c4 10             	add    esp,0x10
c0013ef4:	89 f7                	mov    edi,esi
c0013ef6:	66 90                	xchg   ax,ax
c0013ef8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013efe:	85 c0                	test   eax,eax
c0013f00:	0f 84 b6 00 00 00    	je     c0013fbc <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013f06:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0013f09:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013f0d:	31 c9                	xor    ecx,ecx
c0013f0f:	eb 17                	jmp    c0013f28 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0013f11:	8d 76 00             	lea    esi,[esi+0x0]
c0013f14:	41                   	inc    ecx
c0013f15:	83 f9 10             	cmp    ecx,0x10
c0013f18:	0f 84 9e 00 00 00    	je     c0013fbc <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013f1e:	66 90                	xchg   ax,ax
c0013f20:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013f26:	66 90                	xchg   ax,ax
c0013f28:	31 d2                	xor    edx,edx
c0013f2a:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c0013f31:	d3 fa                	sar    edx,cl
c0013f33:	83 e2 01             	and    edx,0x1
c0013f36:	74 dc                	je     c0013f14 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013f38:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0013f3b:	01 d2                	add    edx,edx
c0013f3d:	01 ca                	add    edx,ecx
c0013f3f:	8d 14 92             	lea    edx,[edx+edx*4]
c0013f42:	01 d0                	add    eax,edx
c0013f44:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0013f4a:	83 fd 07             	cmp    ebp,0x7
c0013f4d:	75 c5                	jne    c0013f14 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013f4f:	05 40 02 00 00       	add    eax,0x240
c0013f54:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0013f57:	83 fd ff             	cmp    ebp,0xffffffff
c0013f5a:	0f 8c f0 00 00 00    	jl     c0014050 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0013f60:	0f 84 ae 01 00 00    	je     c0014114 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c0013f66:	85 ed                	test   ebp,ebp
c0013f68:	0f 84 92 01 00 00    	je     c0014100 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c0013f6e:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0013f70:	75 a2                	jne    c0013f14 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013f72:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013f78:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013f7c:	01 d0                	add    eax,edx
c0013f7e:	66 90                	xchg   ax,ax
c0013f80:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0013f84:	83 ec 0c             	sub    esp,0xc
c0013f87:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0013f8d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013f90:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013f96:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0013f9d:	50                   	push   eax
c0013f9e:	e8 1d fe ff ff       	call   c0013dc0 <unblockTask(ThreadControlBlock*)>
c0013fa3:	83 c4 10             	add    esp,0x10
c0013fa6:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013fa9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013fad:	89 f7                	mov    edi,esi
c0013faf:	41                   	inc    ecx
c0013fb0:	83 f9 10             	cmp    ecx,0x10
c0013fb3:	0f 85 67 ff ff ff    	jne    c0013f20 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0013fb9:	8d 76 00             	lea    esi,[esi+0x0]
c0013fbc:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0013fc2:	85 c0                	test   eax,eax
c0013fc4:	74 62                	je     c0014028 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013fc6:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0013fcc:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0013fd2:	74 54                	je     c0014028 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013fd4:	83 ec 0c             	sub    esp,0xc
c0013fd7:	68 e4 3f 02 c0       	push   0xc0023fe4
c0013fdc:	e8 0b 88 00 00       	call   c001c7ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013fe1:	c7 04 24 e4 3f 02 c0 	mov    DWORD PTR [esp],0xc0023fe4
c0013fe8:	89 c7                	mov    edi,eax
c0013fea:	e8 e1 87 00 00       	call   c001c7d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013fef:	83 c4 10             	add    esp,0x10
c0013ff2:	84 c0                	test   al,al
c0013ff4:	0f 84 ce 00 00 00    	je     c00140c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c0013ffa:	66 90                	xchg   ax,ax
c0013ffc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013fff:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014005:	85 d2                	test   edx,edx
c0014007:	74 0f                	je     c0014018 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0014009:	83 ec 0c             	sub    esp,0xc
c001400c:	8b 02                	mov    eax,DWORD PTR [edx]
c001400e:	52                   	push   edx
c001400f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014012:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014015:	83 c4 10             	add    esp,0x10
c0014018:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0014022:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0014025:	8d 76 00             	lea    esi,[esi+0x0]
c0014028:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c001402e:	85 db                	test   ebx,ebx
c0014030:	74 16                	je     c0014048 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0014032:	83 ec 0c             	sub    esp,0xc
c0014035:	53                   	push   ebx
c0014036:	e8 7b 57 ff ff       	call   c00097b6 <VAS::~VAS()>
c001403b:	58                   	pop    eax
c001403c:	5a                   	pop    edx
c001403d:	6a 14                	push   0x14
c001403f:	53                   	push   ebx
c0014040:	e8 9d 63 ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c0014045:	83 c4 10             	add    esp,0x10
c0014048:	83 c4 1c             	add    esp,0x1c
c001404b:	5b                   	pop    ebx
c001404c:	5e                   	pop    esi
c001404d:	5f                   	pop    edi
c001404e:	5d                   	pop    ebp
c001404f:	c3                   	ret    
c0014050:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014054:	83 ec 0c             	sub    esp,0xc
c0014057:	68 3c ee 01 c0       	push   0xc001ee3c
c001405c:	e8 e2 c0 ff ff       	call   c0010143 <KePanic(char const*)>
c0014061:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0014064:	83 c4 10             	add    esp,0x10
c0014067:	89 f7                	mov    edi,esi
c0014069:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001406d:	e9 a2 fe ff ff       	jmp    c0013f14 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0014072:	66 90                	xchg   ax,ax
c0014074:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001407a:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0014080:	75 1e                	jne    c00140a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0014082:	83 ec 0c             	sub    esp,0xc
c0014085:	68 a4 ee 01 c0       	push   0xc001eea4
c001408a:	e8 49 64 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001408f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0014096:	e8 5d fa ff ff       	call   c0013af8 <blockTask(TaskState)>
c001409b:	83 c4 10             	add    esp,0x10
c001409e:	66 90                	xchg   ax,ax
c00140a0:	83 ec 08             	sub    esp,0x8
c00140a3:	56                   	push   esi
c00140a4:	68 e4 3f 02 c0       	push   0xc0023fe4
c00140a9:	e8 fe 87 00 00       	call   c001c8ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00140ae:	c7 04 24 e4 3f 02 c0 	mov    DWORD PTR [esp],0xc0023fe4
c00140b5:	e8 32 87 00 00       	call   c001c7ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00140ba:	83 c4 10             	add    esp,0x10
c00140bd:	39 f8                	cmp    eax,edi
c00140bf:	0f 84 37 ff ff ff    	je     c0013ffc <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c00140c5:	8d 76 00             	lea    esi,[esi+0x0]
c00140c8:	83 ec 0c             	sub    esp,0xc
c00140cb:	68 e4 3f 02 c0       	push   0xc0023fe4
c00140d0:	e8 17 87 00 00       	call   c001c7ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00140d5:	c7 04 24 e4 3f 02 c0 	mov    DWORD PTR [esp],0xc0023fe4
c00140dc:	89 c6                	mov    esi,eax
c00140de:	e8 11 87 00 00       	call   c001c7f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00140e3:	83 c4 10             	add    esp,0x10
c00140e6:	39 f3                	cmp    ebx,esi
c00140e8:	74 b6                	je     c00140a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c00140ea:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00140ed:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00140f0:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00140f6:	75 a8                	jne    c00140a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c00140f8:	e9 77 ff ff ff       	jmp    c0014074 <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c00140fd:	8d 76 00             	lea    esi,[esi+0x0]
c0014100:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014104:	83 ec 0c             	sub    esp,0xc
c0014107:	68 70 ee 01 c0       	push   0xc001ee70
c001410c:	e9 4b ff ff ff       	jmp    c001405c <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0014111:	8d 76 00             	lea    esi,[esi+0x0]
c0014114:	8b 36                	mov    esi,DWORD PTR [esi]
c0014116:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001411a:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c001411d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014120:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0014126:	01 d7                	add    edi,edx
c0014128:	89 f8                	mov    eax,edi
c001412a:	e9 51 fe ff ff       	jmp    c0013f80 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c001412f:	90                   	nop

c0014130 <cleanerTaskFunction(void*)>:
c0014130:	53                   	push   ebx
c0014131:	83 ec 08             	sub    esp,0x8
c0014134:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c0014139:	48                   	dec    eax
c001413a:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c001413f:	75 03                	jne    c0014144 <cleanerTaskFunction(void*)+0x14>
c0014141:	fb                   	sti    
c0014142:	66 90                	xchg   ax,ax
c0014144:	fa                   	cli    
c0014145:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c001414a:	80 3d ac 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023fac,0x0
c0014151:	8d 50 01             	lea    edx,[eax+0x1]
c0014154:	89 15 c8 3f 02 c0    	mov    DWORD PTR ds:0xc0023fc8,edx
c001415a:	0f 84 ac 00 00 00    	je     c001420c <cleanerTaskFunction(void*)+0xdc>
c0014160:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c0014165:	85 c0                	test   eax,eax
c0014167:	75 03                	jne    c001416c <cleanerTaskFunction(void*)+0x3c>
c0014169:	fb                   	sti    
c001416a:	66 90                	xchg   ax,ax
c001416c:	c6 05 ac 3f 02 c0 00 	mov    BYTE PTR ds:0xc0023fac,0x0
c0014173:	fa                   	cli    
c0014174:	ff 05 c8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fc8
c001417a:	ff 05 c4 3f 02 c0    	inc    DWORD PTR ds:0xc0023fc4
c0014180:	fa                   	cli    
c0014181:	ff 05 c8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fc8
c0014187:	eb 2b                	jmp    c00141b4 <cleanerTaskFunction(void*)+0x84>
c0014189:	8d 76 00             	lea    esi,[esi+0x0]
c001418c:	83 ec 0c             	sub    esp,0xc
c001418f:	68 cc 3f 02 c0       	push   0xc0023fcc
c0014194:	e8 53 86 00 00       	call   c001c7ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014199:	c7 04 24 cc 3f 02 c0 	mov    DWORD PTR [esp],0xc0023fcc
c00141a0:	89 c3                	mov    ebx,eax
c00141a2:	e8 4d 86 00 00       	call   c001c7f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00141a7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00141aa:	e8 b5 fc ff ff       	call   c0013e64 <cleanupTerminatedTask(ThreadControlBlock*)>
c00141af:	83 c4 10             	add    esp,0x10
c00141b2:	66 90                	xchg   ax,ax
c00141b4:	83 ec 0c             	sub    esp,0xc
c00141b7:	68 cc 3f 02 c0       	push   0xc0023fcc
c00141bc:	e8 0f 86 00 00       	call   c001c7d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00141c1:	83 c4 10             	add    esp,0x10
c00141c4:	84 c0                	test   al,al
c00141c6:	74 c4                	je     c001418c <cleanerTaskFunction(void*)+0x5c>
c00141c8:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c00141cd:	48                   	dec    eax
c00141ce:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c00141d3:	75 03                	jne    c00141d8 <cleanerTaskFunction(void*)+0xa8>
c00141d5:	fb                   	sti    
c00141d6:	66 90                	xchg   ax,ax
c00141d8:	a1 c4 3f 02 c0       	mov    eax,ds:0xc0023fc4
c00141dd:	48                   	dec    eax
c00141de:	a3 c4 3f 02 c0       	mov    ds:0xc0023fc4,eax
c00141e3:	0f 85 4b ff ff ff    	jne    c0014134 <cleanerTaskFunction(void*)+0x4>
c00141e9:	a1 c0 3f 02 c0       	mov    eax,ds:0xc0023fc0
c00141ee:	85 c0                	test   eax,eax
c00141f0:	0f 84 3e ff ff ff    	je     c0014134 <cleanerTaskFunction(void*)+0x4>
c00141f6:	c7 05 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023fc0,0x0
c0014200:	e8 f7 f6 ff ff       	call   c00138fc <schedule()>
c0014205:	e9 2a ff ff ff       	jmp    c0014134 <cleanerTaskFunction(void*)+0x4>
c001420a:	66 90                	xchg   ax,ax
c001420c:	83 ec 0c             	sub    esp,0xc
c001420f:	6a 02                	push   0x2
c0014211:	e8 ba f8 ff ff       	call   c0013ad0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0014216:	83 c4 10             	add    esp,0x10
c0014219:	e9 4e ff ff ff       	jmp    c001416c <cleanerTaskFunction(void*)+0x3c>
c001421e:	66 90                	xchg   ax,ax

c0014220 <terminateTask(int)>:
c0014220:	83 ec 14             	sub    esp,0x14
c0014223:	fa                   	cli    
c0014224:	ff 05 c8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fc8
c001422a:	ff 05 c4 3f 02 c0    	inc    DWORD PTR ds:0xc0023fc4
c0014230:	fa                   	cli    
c0014231:	ff 05 c8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fc8
c0014237:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001423b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014240:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0014243:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014248:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001424b:	50                   	push   eax
c001424c:	68 cc 3f 02 c0       	push   0xc0023fcc
c0014251:	e8 56 86 00 00       	call   c001c8ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014256:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001425b:	83 c4 10             	add    esp,0x10
c001425e:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0014265:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c001426a:	85 c0                	test   eax,eax
c001426c:	74 5e                	je     c00142cc <terminateTask(int)+0xac>
c001426e:	83 ec 0c             	sub    esp,0xc
c0014271:	c6 05 ac 3f 02 c0 01 	mov    BYTE PTR ds:0xc0023fac,0x1
c0014278:	50                   	push   eax
c0014279:	e8 42 fb ff ff       	call   c0013dc0 <unblockTask(ThreadControlBlock*)>
c001427e:	83 c4 10             	add    esp,0x10
c0014281:	8d 76 00             	lea    esi,[esi+0x0]
c0014284:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c0014289:	48                   	dec    eax
c001428a:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c001428f:	75 03                	jne    c0014294 <terminateTask(int)+0x74>
c0014291:	fb                   	sti    
c0014292:	66 90                	xchg   ax,ax
c0014294:	a1 c4 3f 02 c0       	mov    eax,ds:0xc0023fc4
c0014299:	48                   	dec    eax
c001429a:	a3 c4 3f 02 c0       	mov    ds:0xc0023fc4,eax
c001429f:	75 0b                	jne    c00142ac <terminateTask(int)+0x8c>
c00142a1:	83 3d c0 3f 02 c0 00 	cmp    DWORD PTR ds:0xc0023fc0,0x0
c00142a8:	75 36                	jne    c00142e0 <terminateTask(int)+0xc0>
c00142aa:	66 90                	xchg   ax,ax
c00142ac:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c00142b1:	48                   	dec    eax
c00142b2:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c00142b7:	75 03                	jne    c00142bc <terminateTask(int)+0x9c>
c00142b9:	fb                   	sti    
c00142ba:	66 90                	xchg   ax,ax
c00142bc:	fa                   	cli    
c00142bd:	ff 05 c8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fc8
c00142c3:	90                   	nop
c00142c4:	e8 33 f6 ff ff       	call   c00138fc <schedule()>
c00142c9:	eb e1                	jmp    c00142ac <terminateTask(int)+0x8c>
c00142cb:	90                   	nop
c00142cc:	83 ec 0c             	sub    esp,0xc
c00142cf:	68 a1 ed 01 c0       	push   0xc001eda1
c00142d4:	e8 ff 61 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c00142d9:	83 c4 10             	add    esp,0x10
c00142dc:	eb a6                	jmp    c0014284 <terminateTask(int)+0x64>
c00142de:	66 90                	xchg   ax,ax
c00142e0:	c7 05 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023fc0,0x0
c00142ea:	eb d8                	jmp    c00142c4 <terminateTask(int)+0xa4>

c00142ec <Thr::terminateFromIRQ(int)>:
c00142ec:	83 ec 18             	sub    esp,0x18
c00142ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00142f3:	50                   	push   eax
c00142f4:	e8 27 ff ff ff       	call   c0014220 <terminateTask(int)>
c00142f9:	90                   	nop
c00142fa:	66 90                	xchg   ax,ax

c00142fc <Semaphore::release()>:
c00142fc:	83 ec 0c             	sub    esp,0xc
c00142ff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014303:	fa                   	cli    
c0014304:	a1 c4 3f 02 c0       	mov    eax,ds:0xc0023fc4
c0014309:	ff 05 c8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fc8
c001430f:	8d 48 01             	lea    ecx,[eax+0x1]
c0014312:	89 0d c4 3f 02 c0    	mov    DWORD PTR ds:0xc0023fc4,ecx
c0014318:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001431b:	85 c9                	test   ecx,ecx
c001431d:	74 41                	je     c0014360 <Semaphore::release()+0x64>
c001431f:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0014322:	83 ec 0c             	sub    esp,0xc
c0014325:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014328:	51                   	push   ecx
c0014329:	e8 92 fa ff ff       	call   c0013dc0 <unblockTask(ThreadControlBlock*)>
c001432e:	a1 c4 3f 02 c0       	mov    eax,ds:0xc0023fc4
c0014333:	83 c4 10             	add    esp,0x10
c0014336:	48                   	dec    eax
c0014337:	90                   	nop
c0014338:	a3 c4 3f 02 c0       	mov    ds:0xc0023fc4,eax
c001433d:	85 c0                	test   eax,eax
c001433f:	75 0b                	jne    c001434c <Semaphore::release()+0x50>
c0014341:	a1 c0 3f 02 c0       	mov    eax,ds:0xc0023fc0
c0014346:	85 c0                	test   eax,eax
c0014348:	75 1e                	jne    c0014368 <Semaphore::release()+0x6c>
c001434a:	66 90                	xchg   ax,ax
c001434c:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c0014351:	48                   	dec    eax
c0014352:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c0014357:	75 03                	jne    c001435c <Semaphore::release()+0x60>
c0014359:	fb                   	sti    
c001435a:	66 90                	xchg   ax,ax
c001435c:	83 c4 0c             	add    esp,0xc
c001435f:	c3                   	ret    
c0014360:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0014363:	eb d3                	jmp    c0014338 <Semaphore::release()+0x3c>
c0014365:	8d 76 00             	lea    esi,[esi+0x0]
c0014368:	c7 05 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023fc0,0x0
c0014372:	e8 85 f5 ff ff       	call   c00138fc <schedule()>
c0014377:	eb d3                	jmp    c001434c <Semaphore::release()+0x50>
c0014379:	8d 76 00             	lea    esi,[esi+0x0]

c001437c <__static_initialization_and_destruction_0(int, int)>:
c001437c:	83 ec 0c             	sub    esp,0xc
c001437f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0014384:	0f 85 8e 00 00 00    	jne    c0014418 <__static_initialization_and_destruction_0(int, int)+0x9c>
c001438a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0014392:	0f 85 80 00 00 00    	jne    c0014418 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0014398:	83 ec 0c             	sub    esp,0xc
c001439b:	68 e4 3f 02 c0       	push   0xc0023fe4
c00143a0:	e8 b3 87 00 00       	call   c001cb58 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00143a5:	83 c4 10             	add    esp,0x10
c00143a8:	83 ec 04             	sub    esp,0x4
c00143ab:	68 54 f9 01 c0       	push   0xc001f954
c00143b0:	68 e4 3f 02 c0       	push   0xc0023fe4
c00143b5:	68 08 cb 01 c0       	push   0xc001cb08
c00143ba:	e8 d3 5f ff ff       	call   c000a392 <__cxa_atexit>
c00143bf:	83 c4 10             	add    esp,0x10
c00143c2:	83 ec 0c             	sub    esp,0xc
c00143c5:	68 d8 3f 02 c0       	push   0xc0023fd8
c00143ca:	e8 89 87 00 00       	call   c001cb58 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00143cf:	83 c4 10             	add    esp,0x10
c00143d2:	83 ec 04             	sub    esp,0x4
c00143d5:	68 54 f9 01 c0       	push   0xc001f954
c00143da:	68 d8 3f 02 c0       	push   0xc0023fd8
c00143df:	68 08 cb 01 c0       	push   0xc001cb08
c00143e4:	e8 a9 5f ff ff       	call   c000a392 <__cxa_atexit>
c00143e9:	83 c4 10             	add    esp,0x10
c00143ec:	83 ec 0c             	sub    esp,0xc
c00143ef:	68 cc 3f 02 c0       	push   0xc0023fcc
c00143f4:	e8 5f 87 00 00       	call   c001cb58 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00143f9:	83 c4 10             	add    esp,0x10
c00143fc:	83 ec 04             	sub    esp,0x4
c00143ff:	68 54 f9 01 c0       	push   0xc001f954
c0014404:	68 cc 3f 02 c0       	push   0xc0023fcc
c0014409:	68 08 cb 01 c0       	push   0xc001cb08
c001440e:	e8 7f 5f ff ff       	call   c000a392 <__cxa_atexit>
c0014413:	83 c4 10             	add    esp,0x10
c0014416:	66 90                	xchg   ax,ax
c0014418:	90                   	nop
c0014419:	83 c4 0c             	add    esp,0xc
c001441c:	c3                   	ret    
c001441d:	8d 76 00             	lea    esi,[esi+0x0]

c0014420 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0014420:	83 ec 0c             	sub    esp,0xc
c0014423:	83 ec 08             	sub    esp,0x8
c0014426:	68 ff ff 00 00       	push   0xffff
c001442b:	6a 01                	push   0x1
c001442d:	e8 4a ff ff ff       	call   c001437c <__static_initialization_and_destruction_0(int, int)>
c0014432:	83 c4 10             	add    esp,0x10
c0014435:	83 c4 0c             	add    esp,0xc
c0014438:	c3                   	ret    

c0014439 <Vm::inbv(unsigned short)>:
c0014439:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001443d:	66 81 fa fe fe       	cmp    dx,0xfefe
c0014442:	75 06                	jne    c001444a <Vm::inbv(unsigned short)+0x11>
c0014444:	a0 2c 40 02 c0       	mov    al,ds:0xc002402c
c0014449:	c3                   	ret    
c001444a:	ec                   	in     al,dx
c001444b:	c3                   	ret    

c001444c <Vm::outbv(unsigned short, unsigned char)>:
c001444c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014450:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014454:	66 81 fa fe fe       	cmp    dx,0xfefe
c0014459:	75 25                	jne    c0014480 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001445b:	8b 0d 2c 40 02 c0    	mov    ecx,DWORD PTR ds:0xc002402c
c0014461:	8d 51 01             	lea    edx,[ecx+0x1]
c0014464:	88 81 40 40 02 c0    	mov    BYTE PTR [ecx-0x3ffdbfc0],al
c001446a:	89 15 2c 40 02 c0    	mov    DWORD PTR ds:0xc002402c,edx
c0014470:	83 fa 20             	cmp    edx,0x20
c0014473:	75 0c                	jne    c0014481 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0014475:	c7 05 2c 40 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002402c,0x1f
c001447f:	c3                   	ret    
c0014480:	ee                   	out    dx,al
c0014481:	c3                   	ret    

c0014482 <Vm::realToLinear(unsigned short, unsigned short)>:
c0014482:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014487:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001448c:	c1 e0 04             	shl    eax,0x4
c001448f:	01 d0                	add    eax,edx
c0014491:	c3                   	ret    

c0014492 <Vm::getSegment(unsigned int)>:
c0014492:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014496:	c1 e8 10             	shr    eax,0x10
c0014499:	c3                   	ret    

c001449a <Vm::getOffset(unsigned int)>:
c001449a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001449e:	c3                   	ret    

c001449f <Vm::mainloop2()>:
c001449f:	83 ec 18             	sub    esp,0x18
c00144a2:	fa                   	cli    
c00144a3:	ff 05 c8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fc8
c00144a9:	6a 02                	push   0x2
c00144ab:	c6 05 25 40 02 c0 01 	mov    BYTE PTR ds:0xc0024025,0x1
c00144b2:	e8 19 f6 ff ff       	call   c0013ad0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00144b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00144bc:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00144c0:	52                   	push   edx
c00144c1:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c00144c5:	52                   	push   edx
c00144c6:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c00144ca:	52                   	push   edx
c00144cb:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c00144cf:	50                   	push   eax
c00144d0:	e8 3a bd fe ff       	call   c000020f <goToVM86>
c00144d5:	83 c4 2c             	add    esp,0x2c
c00144d8:	c3                   	ret    

c00144d9 <Vm::mainVm8086Loop(void*)>:
c00144d9:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c00144de:	48                   	dec    eax
c00144df:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c00144e4:	75 01                	jne    c00144e7 <Vm::mainVm8086Loop(void*)+0xe>
c00144e6:	fb                   	sti    
c00144e7:	eb b6                	jmp    c001449f <Vm::mainloop2()>

c00144e9 <Vm::mainloop3(unsigned long)>:
c00144e9:	83 ec 18             	sub    esp,0x18
c00144ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00144f0:	fa                   	cli    
c00144f1:	ff 05 c8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fc8
c00144f7:	6a 02                	push   0x2
c00144f9:	c6 05 24 40 02 c0 01 	mov    BYTE PTR ds:0xc0024024,0x1
c0014500:	a3 20 40 02 c0       	mov    ds:0xc0024020,eax
c0014505:	e8 c6 f5 ff ff       	call   c0013ad0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001450a:	83 c4 1c             	add    esp,0x1c
c001450d:	eb 90                	jmp    c001449f <Vm::mainloop2()>

c001450f <Vm::initialise8086()>:
c001450f:	83 ec 0c             	sub    esp,0xc
c0014512:	68 80 00 00 00       	push   0x80
c0014517:	6a 00                	push   0x0
c0014519:	68 d9 44 01 c0       	push   0xc00144d9
c001451e:	ff 35 f0 3f 02 c0    	push   DWORD PTR ds:0xc0023ff0
c0014524:	e8 b3 f1 ff ff       	call   c00136dc <Process::createThread(void (*)(void*), void*, int)>
c0014529:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0014530:	a3 28 40 02 c0       	mov    ds:0xc0024028,eax
c0014535:	68 00 01 00 00       	push   0x100
c001453a:	a1 f0 3f 02 c0       	mov    eax,ds:0xc0023ff0
c001453f:	6a 00                	push   0x0
c0014541:	6a 00                	push   0x0
c0014543:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014549:	e8 c6 56 ff ff       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001454e:	83 c4 2c             	add    esp,0x2c
c0014551:	c3                   	ret    

c0014552 <Vm::finish8086()>:
c0014552:	53                   	push   ebx
c0014553:	83 ec 08             	sub    esp,0x8
c0014556:	fa                   	cli    
c0014557:	ff 05 c8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fc8
c001455d:	80 3d 24 40 02 c0 00 	cmp    BYTE PTR ds:0xc0024024,0x0
c0014564:	75 15                	jne    c001457b <Vm::finish8086()+0x29>
c0014566:	e8 91 f3 ff ff       	call   c00138fc <schedule()>
c001456b:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c0014570:	48                   	dec    eax
c0014571:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c0014576:	75 de                	jne    c0014556 <Vm::finish8086()+0x4>
c0014578:	fb                   	sti    
c0014579:	eb db                	jmp    c0014556 <Vm::finish8086()+0x4>
c001457b:	83 ec 0c             	sub    esp,0xc
c001457e:	8b 1d 20 40 02 c0    	mov    ebx,DWORD PTR ds:0xc0024020
c0014584:	ff 35 28 40 02 c0    	push   DWORD PTR ds:0xc0024028
c001458a:	c6 05 24 40 02 c0 00 	mov    BYTE PTR ds:0xc0024024,0x0
c0014591:	e8 2a f8 ff ff       	call   c0013dc0 <unblockTask(ThreadControlBlock*)>
c0014596:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c001459b:	83 c4 10             	add    esp,0x10
c001459e:	8d 50 ff             	lea    edx,[eax-0x1]
c00145a1:	89 15 c8 3f 02 c0    	mov    DWORD PTR ds:0xc0023fc8,edx
c00145a7:	85 d2                	test   edx,edx
c00145a9:	75 01                	jne    c00145ac <Vm::finish8086()+0x5a>
c00145ab:	fb                   	sti    
c00145ac:	89 d8                	mov    eax,ebx
c00145ae:	83 c4 08             	add    esp,0x8
c00145b1:	5b                   	pop    ebx
c00145b2:	c3                   	ret    

c00145b3 <Vm::getOutput8086(unsigned char*)>:
c00145b3:	57                   	push   edi
c00145b4:	8b 0d 2c 40 02 c0    	mov    ecx,DWORD PTR ds:0xc002402c
c00145ba:	56                   	push   esi
c00145bb:	be 40 40 02 c0       	mov    esi,0xc0024040
c00145c0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00145c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00145c6:	a1 2c 40 02 c0       	mov    eax,ds:0xc002402c
c00145cb:	5e                   	pop    esi
c00145cc:	c7 05 2c 40 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002402c,0x0
c00145d6:	5f                   	pop    edi
c00145d7:	c3                   	ret    

c00145d8 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00145d8:	55                   	push   ebp
c00145d9:	57                   	push   edi
c00145da:	56                   	push   esi
c00145db:	53                   	push   ebx
c00145dc:	83 ec 0c             	sub    esp,0xc
c00145df:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00145e3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00145e7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00145eb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00145ef:	fa                   	cli    
c00145f0:	ff 05 c8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fc8
c00145f6:	80 3d 25 40 02 c0 00 	cmp    BYTE PTR ds:0xc0024025,0x0
c00145fd:	75 15                	jne    c0014614 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c00145ff:	e8 f8 f2 ff ff       	call   c00138fc <schedule()>
c0014604:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c0014609:	48                   	dec    eax
c001460a:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c001460f:	75 de                	jne    c00145ef <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014611:	fb                   	sti    
c0014612:	eb db                	jmp    c00145ef <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014614:	a1 28 40 02 c0       	mov    eax,ds:0xc0024028
c0014619:	c7 05 2c 40 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002402c,0x0
c0014623:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0014627:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001462b:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001462f:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0014633:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0014637:	0f b7 ff             	movzx  edi,di
c001463a:	0f b7 f6             	movzx  esi,si
c001463d:	50                   	push   eax
c001463e:	6a 20                	push   0x20
c0014640:	6a 00                	push   0x0
c0014642:	68 40 40 02 c0       	push   0xc0024040
c0014647:	e8 84 be fe ff       	call   c00004d0 <memset>
c001464c:	5a                   	pop    edx
c001464d:	59                   	pop    ecx
c001464e:	57                   	push   edi
c001464f:	56                   	push   esi
c0014650:	e8 2d fe ff ff       	call   c0014482 <Vm::realToLinear(unsigned short, unsigned short)>
c0014655:	83 c4 10             	add    esp,0x10
c0014658:	89 c7                	mov    edi,eax
c001465a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001465e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0014662:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014664:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c0014669:	c6 05 25 40 02 c0 00 	mov    BYTE PTR ds:0xc0024025,0x0
c0014670:	48                   	dec    eax
c0014671:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c0014676:	75 01                	jne    c0014679 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0014678:	fb                   	sti    
c0014679:	83 ec 0c             	sub    esp,0xc
c001467c:	ff 35 28 40 02 c0    	push   DWORD PTR ds:0xc0024028
c0014682:	e8 39 f7 ff ff       	call   c0013dc0 <unblockTask(ThreadControlBlock*)>
c0014687:	83 c4 1c             	add    esp,0x1c
c001468a:	b0 01                	mov    al,0x1
c001468c:	5b                   	pop    ebx
c001468d:	5e                   	pop    esi
c001468e:	5f                   	pop    edi
c001468f:	5d                   	pop    ebp
c0014690:	c3                   	ret    

c0014691 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0014691:	55                   	push   ebp
c0014692:	57                   	push   edi
c0014693:	56                   	push   esi
c0014694:	53                   	push   ebx
c0014695:	83 ec 2c             	sub    esp,0x2c
c0014698:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001469c:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00146a0:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00146a4:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00146a8:	fa                   	cli    
c00146a9:	ff 05 c8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fc8
c00146af:	0f b6 35 25 40 02 c0 	movzx  esi,BYTE PTR ds:0xc0024025
c00146b6:	89 f0                	mov    eax,esi
c00146b8:	84 c0                	test   al,al
c00146ba:	75 1d                	jne    c00146d9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c00146bc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00146c0:	e8 37 f2 ff ff       	call   c00138fc <schedule()>
c00146c5:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c00146ca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00146ce:	48                   	dec    eax
c00146cf:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c00146d4:	75 d2                	jne    c00146a8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00146d6:	fb                   	sti    
c00146d7:	eb cf                	jmp    c00146a8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00146d9:	a1 28 40 02 c0       	mov    eax,ds:0xc0024028
c00146de:	c7 05 2c 40 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002402c,0x0
c00146e8:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c00146ec:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00146f0:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c00146f4:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c00146f8:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00146fc:	50                   	push   eax
c00146fd:	6a 20                	push   0x20
c00146ff:	6a 00                	push   0x0
c0014701:	68 40 40 02 c0       	push   0xc0024040
c0014706:	e8 c5 bd fe ff       	call   c00004d0 <memset>
c001470b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014712:	e8 a2 30 ff ff       	call   c00077b9 <malloc>
c0014717:	83 c4 0c             	add    esp,0xc
c001471a:	89 c3                	mov    ebx,eax
c001471c:	ff 35 f0 3f 02 c0    	push   DWORD PTR ds:0xc0023ff0
c0014722:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0014726:	50                   	push   eax
c0014727:	e8 22 63 ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c001472c:	83 c4 10             	add    esp,0x10
c001472f:	85 db                	test   ebx,ebx
c0014731:	75 0a                	jne    c001473d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0014733:	83 ec 0c             	sub    esp,0xc
c0014736:	68 cc ee 01 c0       	push   0xc001eecc
c001473b:	eb 3e                	jmp    c001477b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001473d:	50                   	push   eax
c001473e:	8d 44 24 17          	lea    eax,[esp+0x17]
c0014742:	50                   	push   eax
c0014743:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014747:	50                   	push   eax
c0014748:	53                   	push   ebx
c0014749:	e8 6c 66 ff ff       	call   c000adba <File::stat(unsigned long long*, bool*)>
c001474e:	83 c4 10             	add    esp,0x10
c0014751:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0014756:	74 0a                	je     c0014762 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0014758:	83 ec 0c             	sub    esp,0xc
c001475b:	68 e0 ee 01 c0       	push   0xc001eee0
c0014760:	eb 19                	jmp    c001477b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0014762:	51                   	push   ecx
c0014763:	51                   	push   ecx
c0014764:	6a 01                	push   0x1
c0014766:	53                   	push   ebx
c0014767:	e8 a2 63 ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c001476c:	83 c4 10             	add    esp,0x10
c001476f:	85 c0                	test   eax,eax
c0014771:	74 24                	je     c0014797 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0014773:	83 ec 0c             	sub    esp,0xc
c0014776:	68 f9 ee 01 c0       	push   0xc001eef9
c001477b:	e8 c3 b9 ff ff       	call   c0010143 <KePanic(char const*)>
c0014780:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c0014785:	83 c4 10             	add    esp,0x10
c0014788:	48                   	dec    eax
c0014789:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c001478e:	85 c0                	test   eax,eax
c0014790:	75 01                	jne    c0014793 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0014792:	fb                   	sti    
c0014793:	31 f6                	xor    esi,esi
c0014795:	eb 58                	jmp    c00147ef <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0014797:	0f b7 ed             	movzx  ebp,bp
c001479a:	50                   	push   eax
c001479b:	0f b7 ff             	movzx  edi,di
c001479e:	50                   	push   eax
c001479f:	55                   	push   ebp
c00147a0:	57                   	push   edi
c00147a1:	e8 dc fc ff ff       	call   c0014482 <Vm::realToLinear(unsigned short, unsigned short)>
c00147a6:	5a                   	pop    edx
c00147a7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00147a9:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00147ad:	51                   	push   ecx
c00147ae:	50                   	push   eax
c00147af:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00147b3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00147b7:	53                   	push   ebx
c00147b8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00147bb:	83 c4 14             	add    esp,0x14
c00147be:	53                   	push   ebx
c00147bf:	e8 a8 63 ff ff       	call   c000ab6c <File::close()>
c00147c4:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c00147c9:	83 c4 10             	add    esp,0x10
c00147cc:	48                   	dec    eax
c00147cd:	c6 05 25 40 02 c0 00 	mov    BYTE PTR ds:0xc0024025,0x0
c00147d4:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c00147d9:	85 c0                	test   eax,eax
c00147db:	75 01                	jne    c00147de <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c00147dd:	fb                   	sti    
c00147de:	83 ec 0c             	sub    esp,0xc
c00147e1:	ff 35 28 40 02 c0    	push   DWORD PTR ds:0xc0024028
c00147e7:	e8 d4 f5 ff ff       	call   c0013dc0 <unblockTask(ThreadControlBlock*)>
c00147ec:	83 c4 10             	add    esp,0x10
c00147ef:	83 c4 2c             	add    esp,0x2c
c00147f2:	89 f0                	mov    eax,esi
c00147f4:	5b                   	pop    ebx
c00147f5:	5e                   	pop    esi
c00147f6:	5f                   	pop    edi
c00147f7:	5d                   	pop    ebp
c00147f8:	c3                   	ret    

c00147f9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00147f9:	57                   	push   edi
c00147fa:	56                   	push   esi
c00147fb:	53                   	push   ebx
c00147fc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014800:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014804:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014808:	83 e8 06             	sub    eax,0x6
c001480b:	0f b7 c0             	movzx  eax,ax
c001480e:	50                   	push   eax
c001480f:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0014814:	50                   	push   eax
c0014815:	e8 68 fc ff ff       	call   c0014482 <Vm::realToLinear(unsigned short, unsigned short)>
c001481a:	5a                   	pop    edx
c001481b:	5e                   	pop    esi
c001481c:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001481f:	8d 56 fa             	lea    edx,[esi-0x6]
c0014822:	81 e2 ff ff 00 00    	and    edx,0xffff
c0014828:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001482b:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001482e:	83 c2 02             	add    edx,0x2
c0014831:	66 89 10             	mov    WORD PTR [eax],dx
c0014834:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0014837:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001483b:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001483e:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0014842:	89 d6                	mov    esi,edx
c0014844:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001484a:	66 81 e6 ff fd       	and    si,0xfdff
c001484f:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0014853:	74 07                	je     c001485c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0014855:	89 d6                	mov    esi,edx
c0014857:	66 81 ce 00 02       	or     si,0x200
c001485c:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0014860:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014865:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014869:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0014871:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0014874:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001487c:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001487f:	5b                   	pop    ebx
c0014880:	5e                   	pop    esi
c0014881:	5f                   	pop    edi
c0014882:	c3                   	ret    

c0014883 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0014883:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014888:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001488d:	c1 e0 04             	shl    eax,0x4
c0014890:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0014893:	c3                   	ret    

c0014894 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0014894:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014899:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001489e:	c1 e0 04             	shl    eax,0x4
c00148a1:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00148a5:	c3                   	ret    

c00148a6 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00148a6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00148ab:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00148b0:	c1 e0 04             	shl    eax,0x4
c00148b3:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00148b6:	c3                   	ret    

c00148b7 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00148b7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00148bc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00148c1:	c1 e0 04             	shl    eax,0x4
c00148c4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00148c8:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00148cb:	c3                   	ret    

c00148cc <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00148cc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00148d1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00148d6:	c1 e0 04             	shl    eax,0x4
c00148d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00148dd:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00148e1:	c3                   	ret    

c00148e2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00148e2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00148e7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00148ec:	c1 e0 04             	shl    eax,0x4
c00148ef:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00148f3:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00148f6:	c3                   	ret    

c00148f7 <Vm::faultHandler(regs*)>:
c00148f7:	55                   	push   ebp
c00148f8:	57                   	push   edi
c00148f9:	56                   	push   esi
c00148fa:	53                   	push   ebx
c00148fb:	83 ec 1c             	sub    esp,0x1c
c00148fe:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0014902:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014905:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0014909:	0f b7 f8             	movzx  edi,ax
c001490c:	52                   	push   edx
c001490d:	0f b7 c0             	movzx  eax,ax
c0014910:	50                   	push   eax
c0014911:	e8 6c fb ff ff       	call   c0014482 <Vm::realToLinear(unsigned short, unsigned short)>
c0014916:	5a                   	pop    edx
c0014917:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001491a:	59                   	pop    ecx
c001491b:	89 c1                	mov    ecx,eax
c001491d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014920:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014924:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014929:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001492d:	0f b7 c5             	movzx  eax,bp
c0014930:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014934:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0014938:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001493c:	e8 41 fb ff ff       	call   c0014482 <Vm::realToLinear(unsigned short, unsigned short)>
c0014941:	5e                   	pop    esi
c0014942:	be 06 00 00 00       	mov    esi,0x6
c0014947:	5a                   	pop    edx
c0014948:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001494d:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0014952:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0014955:	80 fa 9d             	cmp    dl,0x9d
c0014958:	0f 84 2c 02 00 00    	je     c0014b8a <Vm::faultHandler(regs*)+0x293>
c001495e:	0f 87 91 00 00 00    	ja     c00149f5 <Vm::faultHandler(regs*)+0xfe>
c0014964:	80 fa 66             	cmp    dl,0x66
c0014967:	0f 84 98 01 00 00    	je     c0014b05 <Vm::faultHandler(regs*)+0x20e>
c001496d:	77 47                	ja     c00149b6 <Vm::faultHandler(regs*)+0xbf>
c001496f:	80 fa 36             	cmp    dl,0x36
c0014972:	0f 84 80 01 00 00    	je     c0014af8 <Vm::faultHandler(regs*)+0x201>
c0014978:	77 1a                	ja     c0014994 <Vm::faultHandler(regs*)+0x9d>
c001497a:	80 fa 26             	cmp    dl,0x26
c001497d:	0f 84 4e 01 00 00    	je     c0014ad1 <Vm::faultHandler(regs*)+0x1da>
c0014983:	80 fa 2e             	cmp    dl,0x2e
c0014986:	0f 85 e2 05 00 00    	jne    c0014f6e <Vm::faultHandler(regs*)+0x677>
c001498c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001498f:	31 f6                	xor    esi,esi
c0014991:	41                   	inc    ecx
c0014992:	eb be                	jmp    c0014952 <Vm::faultHandler(regs*)+0x5b>
c0014994:	80 fa 64             	cmp    dl,0x64
c0014997:	0f 84 41 01 00 00    	je     c0014ade <Vm::faultHandler(regs*)+0x1e7>
c001499d:	0f 87 48 01 00 00    	ja     c0014aeb <Vm::faultHandler(regs*)+0x1f4>
c00149a3:	80 fa 3e             	cmp    dl,0x3e
c00149a6:	0f 85 c2 05 00 00    	jne    c0014f6e <Vm::faultHandler(regs*)+0x677>
c00149ac:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149af:	be 01 00 00 00       	mov    esi,0x1
c00149b4:	eb db                	jmp    c0014991 <Vm::faultHandler(regs*)+0x9a>
c00149b6:	80 fa 6d             	cmp    dl,0x6d
c00149b9:	0f 84 ec 02 00 00    	je     c0014cab <Vm::faultHandler(regs*)+0x3b4>
c00149bf:	77 17                	ja     c00149d8 <Vm::faultHandler(regs*)+0xe1>
c00149c1:	80 fa 67             	cmp    dl,0x67
c00149c4:	0f 84 48 01 00 00    	je     c0014b12 <Vm::faultHandler(regs*)+0x21b>
c00149ca:	80 fa 6c             	cmp    dl,0x6c
c00149cd:	0f 84 69 02 00 00    	je     c0014c3c <Vm::faultHandler(regs*)+0x345>
c00149d3:	e9 96 05 00 00       	jmp    c0014f6e <Vm::faultHandler(regs*)+0x677>
c00149d8:	80 fa 6f             	cmp    dl,0x6f
c00149db:	0f 84 f4 03 00 00    	je     c0014dd5 <Vm::faultHandler(regs*)+0x4de>
c00149e1:	0f 82 59 03 00 00    	jb     c0014d40 <Vm::faultHandler(regs*)+0x449>
c00149e7:	80 fa 9c             	cmp    dl,0x9c
c00149ea:	0f 84 2f 01 00 00    	je     c0014b1f <Vm::faultHandler(regs*)+0x228>
c00149f0:	e9 79 05 00 00       	jmp    c0014f6e <Vm::faultHandler(regs*)+0x677>
c00149f5:	80 fa ec             	cmp    dl,0xec
c00149f8:	0f 84 14 05 00 00    	je     c0014f12 <Vm::faultHandler(regs*)+0x61b>
c00149fe:	77 7b                	ja     c0014a7b <Vm::faultHandler(regs*)+0x184>
c0014a00:	80 fa e4             	cmp    dl,0xe4
c0014a03:	0f 84 93 04 00 00    	je     c0014e9c <Vm::faultHandler(regs*)+0x5a5>
c0014a09:	77 53                	ja     c0014a5e <Vm::faultHandler(regs*)+0x167>
c0014a0b:	80 fa cd             	cmp    dl,0xcd
c0014a0e:	0f 84 d9 01 00 00    	je     c0014bed <Vm::faultHandler(regs*)+0x2f6>
c0014a14:	80 fa cf             	cmp    dl,0xcf
c0014a17:	0f 85 51 05 00 00    	jne    c0014f6e <Vm::faultHandler(regs*)+0x677>
c0014a1d:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014a20:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0014a23:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0014a27:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0014a2a:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0014a2e:	81 ca 00 02 02 00    	or     edx,0x20200
c0014a34:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014a37:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014a3b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014a41:	66 c1 e8 09          	shr    ax,0x9
c0014a45:	83 e0 01             	and    eax,0x1
c0014a48:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014a4b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014a4e:	83 c0 06             	add    eax,0x6
c0014a51:	25 ff ff 00 00       	and    eax,0xffff
c0014a56:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014a59:	e9 0c 05 00 00       	jmp    c0014f6a <Vm::faultHandler(regs*)+0x673>
c0014a5e:	80 fa e6             	cmp    dl,0xe6
c0014a61:	0f 84 7f 04 00 00    	je     c0014ee6 <Vm::faultHandler(regs*)+0x5ef>
c0014a67:	0f 82 4b 04 00 00    	jb     c0014eb8 <Vm::faultHandler(regs*)+0x5c1>
c0014a6d:	80 fa e7             	cmp    dl,0xe7
c0014a70:	0f 84 87 04 00 00    	je     c0014efd <Vm::faultHandler(regs*)+0x606>
c0014a76:	e9 f3 04 00 00       	jmp    c0014f6e <Vm::faultHandler(regs*)+0x677>
c0014a7b:	80 fa ef             	cmp    dl,0xef
c0014a7e:	0f 84 d1 04 00 00    	je     c0014f55 <Vm::faultHandler(regs*)+0x65e>
c0014a84:	77 28                	ja     c0014aae <Vm::faultHandler(regs*)+0x1b7>
c0014a86:	80 fa ed             	cmp    dl,0xed
c0014a89:	0f 84 9f 04 00 00    	je     c0014f2e <Vm::faultHandler(regs*)+0x637>
c0014a8f:	80 fa ee             	cmp    dl,0xee
c0014a92:	0f 85 d6 04 00 00    	jne    c0014f6e <Vm::faultHandler(regs*)+0x677>
c0014a98:	50                   	push   eax
c0014a99:	50                   	push   eax
c0014a9a:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014a9e:	50                   	push   eax
c0014a9f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014aa3:	50                   	push   eax
c0014aa4:	e8 a3 f9 ff ff       	call   c001444c <Vm::outbv(unsigned short, unsigned char)>
c0014aa9:	e9 9f 04 00 00       	jmp    c0014f4d <Vm::faultHandler(regs*)+0x656>
c0014aae:	80 fa fa             	cmp    dl,0xfa
c0014ab1:	0f 84 69 01 00 00    	je     c0014c20 <Vm::faultHandler(regs*)+0x329>
c0014ab7:	80 fa fb             	cmp    dl,0xfb
c0014aba:	0f 84 6e 01 00 00    	je     c0014c2e <Vm::faultHandler(regs*)+0x337>
c0014ac0:	80 fa f3             	cmp    dl,0xf3
c0014ac3:	0f 85 a5 04 00 00    	jne    c0014f6e <Vm::faultHandler(regs*)+0x677>
c0014ac9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014acc:	e9 c0 fe ff ff       	jmp    c0014991 <Vm::faultHandler(regs*)+0x9a>
c0014ad1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014ad4:	be 02 00 00 00       	mov    esi,0x2
c0014ad9:	e9 b3 fe ff ff       	jmp    c0014991 <Vm::faultHandler(regs*)+0x9a>
c0014ade:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014ae1:	be 03 00 00 00       	mov    esi,0x3
c0014ae6:	e9 a6 fe ff ff       	jmp    c0014991 <Vm::faultHandler(regs*)+0x9a>
c0014aeb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014aee:	be 04 00 00 00       	mov    esi,0x4
c0014af3:	e9 99 fe ff ff       	jmp    c0014991 <Vm::faultHandler(regs*)+0x9a>
c0014af8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014afb:	be 05 00 00 00       	mov    esi,0x5
c0014b00:	e9 8c fe ff ff       	jmp    c0014991 <Vm::faultHandler(regs*)+0x9a>
c0014b05:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014b08:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0014b0d:	e9 7f fe ff ff       	jmp    c0014991 <Vm::faultHandler(regs*)+0x9a>
c0014b12:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014b15:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0014b1a:	e9 72 fe ff ff       	jmp    c0014991 <Vm::faultHandler(regs*)+0x9a>
c0014b1f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0014b22:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0014b26:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014b2b:	74 30                	je     c0014b5d <Vm::faultHandler(regs*)+0x266>
c0014b2d:	83 e9 04             	sub    ecx,0x4
c0014b30:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014b36:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014b3c:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014b3f:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014b42:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014b48:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014b4c:	0f 84 15 04 00 00    	je     c0014f67 <Vm::faultHandler(regs*)+0x670>
c0014b52:	80 ce 02             	or     dh,0x2
c0014b55:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014b58:	e9 0a 04 00 00       	jmp    c0014f67 <Vm::faultHandler(regs*)+0x670>
c0014b5d:	83 e9 02             	sub    ecx,0x2
c0014b60:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014b66:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014b69:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014b6d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014b73:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014b77:	74 05                	je     c0014b7e <Vm::faultHandler(regs*)+0x287>
c0014b79:	80 ce 02             	or     dh,0x2
c0014b7c:	eb 03                	jmp    c0014b81 <Vm::faultHandler(regs*)+0x28a>
c0014b7e:	80 e6 fd             	and    dh,0xfd
c0014b81:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014b85:	e9 dd 03 00 00       	jmp    c0014f67 <Vm::faultHandler(regs*)+0x670>
c0014b8a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014b8f:	74 2a                	je     c0014bbb <Vm::faultHandler(regs*)+0x2c4>
c0014b91:	8b 10                	mov    edx,DWORD PTR [eax]
c0014b93:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014b99:	81 ca 00 02 02 00    	or     edx,0x20200
c0014b9f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014ba2:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ba4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014baa:	c1 e8 09             	shr    eax,0x9
c0014bad:	83 e0 01             	and    eax,0x1
c0014bb0:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014bb3:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014bb6:	83 c0 04             	add    eax,0x4
c0014bb9:	eb 25                	jmp    c0014be0 <Vm::faultHandler(regs*)+0x2e9>
c0014bbb:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014bbe:	81 ca 00 02 02 00    	or     edx,0x20200
c0014bc4:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014bc7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014bca:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014bd0:	66 c1 e8 09          	shr    ax,0x9
c0014bd4:	83 e0 01             	and    eax,0x1
c0014bd7:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014bda:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014bdd:	83 c0 02             	add    eax,0x2
c0014be0:	25 ff ff 00 00       	and    eax,0xffff
c0014be5:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014be8:	e9 7a 03 00 00       	jmp    c0014f67 <Vm::faultHandler(regs*)+0x670>
c0014bed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014bf1:	3c ee                	cmp    al,0xee
c0014bf3:	75 10                	jne    c0014c05 <Vm::faultHandler(regs*)+0x30e>
c0014bf5:	83 ec 0c             	sub    esp,0xc
c0014bf8:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014bfb:	e8 e9 f8 ff ff       	call   c00144e9 <Vm::mainloop3(unsigned long)>
c0014c00:	e9 4b 03 00 00       	jmp    c0014f50 <Vm::faultHandler(regs*)+0x659>
c0014c05:	83 ec 0c             	sub    esp,0xc
c0014c08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014c0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c10:	51                   	push   ecx
c0014c11:	50                   	push   eax
c0014c12:	53                   	push   ebx
c0014c13:	e8 e1 fb ff ff       	call   c00147f9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0014c18:	83 c4 20             	add    esp,0x20
c0014c1b:	e9 4a 03 00 00       	jmp    c0014f6a <Vm::faultHandler(regs*)+0x673>
c0014c20:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c25:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014c29:	e9 39 03 00 00       	jmp    c0014f67 <Vm::faultHandler(regs*)+0x670>
c0014c2e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c33:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0014c37:	e9 2b 03 00 00       	jmp    c0014f67 <Vm::faultHandler(regs*)+0x670>
c0014c3c:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014c3f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014c44:	74 2b                	je     c0014c71 <Vm::faultHandler(regs*)+0x37a>
c0014c46:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0014c4d:	76 22                	jbe    c0014c71 <Vm::faultHandler(regs*)+0x37a>
c0014c4f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014c53:	50                   	push   eax
c0014c54:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014c58:	50                   	push   eax
c0014c59:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014c5d:	50                   	push   eax
c0014c5e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014c62:	50                   	push   eax
c0014c63:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014c67:	50                   	push   eax
c0014c68:	6a 6c                	push   0x6c
c0014c6a:	6a 6c                	push   0x6c
c0014c6c:	e9 b9 01 00 00       	jmp    c0014e2a <Vm::faultHandler(regs*)+0x533>
c0014c71:	83 ec 0c             	sub    esp,0xc
c0014c74:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014c78:	0f b7 f6             	movzx  esi,si
c0014c7b:	50                   	push   eax
c0014c7c:	e8 b8 f7 ff ff       	call   c0014439 <Vm::inbv(unsigned short)>
c0014c81:	83 c4 0c             	add    esp,0xc
c0014c84:	0f b6 c0             	movzx  eax,al
c0014c87:	50                   	push   eax
c0014c88:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0014c8c:	50                   	push   eax
c0014c8d:	56                   	push   esi
c0014c8e:	e8 24 fc ff ff       	call   c00148b7 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0014c93:	83 c4 10             	add    esp,0x10
c0014c96:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014c99:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014c9d:	74 03                	je     c0014ca2 <Vm::faultHandler(regs*)+0x3ab>
c0014c9f:	48                   	dec    eax
c0014ca0:	eb 01                	jmp    c0014ca3 <Vm::faultHandler(regs*)+0x3ac>
c0014ca2:	40                   	inc    eax
c0014ca3:	0f b7 c0             	movzx  eax,ax
c0014ca6:	e9 8d 00 00 00       	jmp    c0014d38 <Vm::faultHandler(regs*)+0x441>
c0014cab:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014cae:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014cb1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014cb6:	74 29                	je     c0014ce1 <Vm::faultHandler(regs*)+0x3ea>
c0014cb8:	3d ff ff 00 00       	cmp    eax,0xffff
c0014cbd:	76 22                	jbe    c0014ce1 <Vm::faultHandler(regs*)+0x3ea>
c0014cbf:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014cc3:	50                   	push   eax
c0014cc4:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014cc8:	50                   	push   eax
c0014cc9:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014ccd:	50                   	push   eax
c0014cce:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014cd2:	50                   	push   eax
c0014cd3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014cd7:	50                   	push   eax
c0014cd8:	6a 6d                	push   0x6d
c0014cda:	6a 6d                	push   0x6d
c0014cdc:	e9 49 01 00 00       	jmp    c0014e2a <Vm::faultHandler(regs*)+0x533>
c0014ce1:	0f b7 c8             	movzx  ecx,ax
c0014ce4:	0f b7 f6             	movzx  esi,si
c0014ce7:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014cea:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014cef:	74 20                	je     c0014d11 <Vm::faultHandler(regs*)+0x41a>
c0014cf1:	ed                   	in     eax,dx
c0014cf2:	55                   	push   ebp
c0014cf3:	50                   	push   eax
c0014cf4:	51                   	push   ecx
c0014cf5:	56                   	push   esi
c0014cf6:	e8 e7 fb ff ff       	call   c00148e2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0014cfb:	83 c4 10             	add    esp,0x10
c0014cfe:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014d01:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014d05:	74 05                	je     c0014d0c <Vm::faultHandler(regs*)+0x415>
c0014d07:	83 e8 04             	sub    eax,0x4
c0014d0a:	eb 27                	jmp    c0014d33 <Vm::faultHandler(regs*)+0x43c>
c0014d0c:	83 c0 04             	add    eax,0x4
c0014d0f:	eb 22                	jmp    c0014d33 <Vm::faultHandler(regs*)+0x43c>
c0014d11:	66 ed                	in     ax,dx
c0014d13:	0f b7 c0             	movzx  eax,ax
c0014d16:	57                   	push   edi
c0014d17:	50                   	push   eax
c0014d18:	51                   	push   ecx
c0014d19:	56                   	push   esi
c0014d1a:	e8 ad fb ff ff       	call   c00148cc <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0014d1f:	83 c4 10             	add    esp,0x10
c0014d22:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014d25:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014d29:	74 05                	je     c0014d30 <Vm::faultHandler(regs*)+0x439>
c0014d2b:	83 e8 02             	sub    eax,0x2
c0014d2e:	eb 03                	jmp    c0014d33 <Vm::faultHandler(regs*)+0x43c>
c0014d30:	83 c0 02             	add    eax,0x2
c0014d33:	25 ff ff 00 00       	and    eax,0xffff
c0014d38:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0014d3b:	e9 27 02 00 00       	jmp    c0014f67 <Vm::faultHandler(regs*)+0x670>
c0014d40:	8d 46 ff             	lea    eax,[esi-0x1]
c0014d43:	3c 05                	cmp    al,0x5
c0014d45:	77 24                	ja     c0014d6b <Vm::faultHandler(regs*)+0x474>
c0014d47:	0f b6 c0             	movzx  eax,al
c0014d4a:	ff 24 85 6c ef 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1094]
c0014d51:	0f b7 fd             	movzx  edi,bp
c0014d54:	eb 15                	jmp    c0014d6b <Vm::faultHandler(regs*)+0x474>
c0014d56:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0014d5a:	eb 0f                	jmp    c0014d6b <Vm::faultHandler(regs*)+0x474>
c0014d5c:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0014d60:	eb 09                	jmp    c0014d6b <Vm::faultHandler(regs*)+0x474>
c0014d62:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0014d66:	eb 03                	jmp    c0014d6b <Vm::faultHandler(regs*)+0x474>
c0014d68:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0014d6b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014d6e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014d73:	74 29                	je     c0014d9e <Vm::faultHandler(regs*)+0x4a7>
c0014d75:	3d ff ff 00 00       	cmp    eax,0xffff
c0014d7a:	76 22                	jbe    c0014d9e <Vm::faultHandler(regs*)+0x4a7>
c0014d7c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014d80:	50                   	push   eax
c0014d81:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014d85:	50                   	push   eax
c0014d86:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014d8a:	50                   	push   eax
c0014d8b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014d8f:	50                   	push   eax
c0014d90:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014d94:	50                   	push   eax
c0014d95:	6a 6e                	push   0x6e
c0014d97:	6a 6e                	push   0x6e
c0014d99:	e9 8c 00 00 00       	jmp    c0014e2a <Vm::faultHandler(regs*)+0x533>
c0014d9e:	0f b7 c0             	movzx  eax,ax
c0014da1:	52                   	push   edx
c0014da2:	52                   	push   edx
c0014da3:	50                   	push   eax
c0014da4:	57                   	push   edi
c0014da5:	e8 d9 fa ff ff       	call   c0014883 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0014daa:	59                   	pop    ecx
c0014dab:	0f b6 c0             	movzx  eax,al
c0014dae:	5e                   	pop    esi
c0014daf:	50                   	push   eax
c0014db0:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014db4:	50                   	push   eax
c0014db5:	e8 92 f6 ff ff       	call   c001444c <Vm::outbv(unsigned short, unsigned char)>
c0014dba:	83 c4 10             	add    esp,0x10
c0014dbd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014dc0:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014dc4:	74 03                	je     c0014dc9 <Vm::faultHandler(regs*)+0x4d2>
c0014dc6:	48                   	dec    eax
c0014dc7:	eb 01                	jmp    c0014dca <Vm::faultHandler(regs*)+0x4d3>
c0014dc9:	40                   	inc    eax
c0014dca:	0f b7 c0             	movzx  eax,ax
c0014dcd:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0014dd0:	e9 92 01 00 00       	jmp    c0014f67 <Vm::faultHandler(regs*)+0x670>
c0014dd5:	8d 46 ff             	lea    eax,[esi-0x1]
c0014dd8:	3c 05                	cmp    al,0x5
c0014dda:	77 1f                	ja     c0014dfb <Vm::faultHandler(regs*)+0x504>
c0014ddc:	0f b6 c0             	movzx  eax,al
c0014ddf:	ff 24 85 84 ef 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe107c]
c0014de6:	89 ef                	mov    edi,ebp
c0014de8:	eb 11                	jmp    c0014dfb <Vm::faultHandler(regs*)+0x504>
c0014dea:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0014ded:	eb 0c                	jmp    c0014dfb <Vm::faultHandler(regs*)+0x504>
c0014def:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0014df2:	eb 07                	jmp    c0014dfb <Vm::faultHandler(regs*)+0x504>
c0014df4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0014df7:	eb 02                	jmp    c0014dfb <Vm::faultHandler(regs*)+0x504>
c0014df9:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0014dfb:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0014dfe:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014e03:	74 37                	je     c0014e3c <Vm::faultHandler(regs*)+0x545>
c0014e05:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0014e0b:	76 2f                	jbe    c0014e3c <Vm::faultHandler(regs*)+0x545>
c0014e0d:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014e11:	50                   	push   eax
c0014e12:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014e16:	50                   	push   eax
c0014e17:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014e1b:	50                   	push   eax
c0014e1c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014e20:	50                   	push   eax
c0014e21:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014e25:	50                   	push   eax
c0014e26:	6a 6f                	push   0x6f
c0014e28:	6a 6f                	push   0x6f
c0014e2a:	68 12 ef 01 c0       	push   0xc001ef12
c0014e2f:	e8 a4 56 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0014e34:	83 c4 20             	add    esp,0x20
c0014e37:	e9 86 01 00 00       	jmp    c0014fc2 <Vm::faultHandler(regs*)+0x6cb>
c0014e3c:	0f b7 d7             	movzx  edx,di
c0014e3f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0014e42:	0f b7 c6             	movzx  eax,si
c0014e45:	81 e1 00 04 00 00    	and    ecx,0x400
c0014e4b:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0014e4e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014e53:	74 1d                	je     c0014e72 <Vm::faultHandler(regs*)+0x57b>
c0014e55:	55                   	push   ebp
c0014e56:	55                   	push   ebp
c0014e57:	50                   	push   eax
c0014e58:	52                   	push   edx
c0014e59:	e8 48 fa ff ff       	call   c00148a6 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0014e5e:	83 c4 10             	add    esp,0x10
c0014e61:	89 fa                	mov    edx,edi
c0014e63:	ef                   	out    dx,eax
c0014e64:	85 c9                	test   ecx,ecx
c0014e66:	74 05                	je     c0014e6d <Vm::faultHandler(regs*)+0x576>
c0014e68:	83 ee 04             	sub    esi,0x4
c0014e6b:	eb 21                	jmp    c0014e8e <Vm::faultHandler(regs*)+0x597>
c0014e6d:	83 c6 04             	add    esi,0x4
c0014e70:	eb 1c                	jmp    c0014e8e <Vm::faultHandler(regs*)+0x597>
c0014e72:	55                   	push   ebp
c0014e73:	55                   	push   ebp
c0014e74:	50                   	push   eax
c0014e75:	52                   	push   edx
c0014e76:	e8 19 fa ff ff       	call   c0014894 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0014e7b:	83 c4 10             	add    esp,0x10
c0014e7e:	89 fa                	mov    edx,edi
c0014e80:	66 ef                	out    dx,ax
c0014e82:	85 c9                	test   ecx,ecx
c0014e84:	74 05                	je     c0014e8b <Vm::faultHandler(regs*)+0x594>
c0014e86:	83 ee 02             	sub    esi,0x2
c0014e89:	eb 03                	jmp    c0014e8e <Vm::faultHandler(regs*)+0x597>
c0014e8b:	83 c6 02             	add    esi,0x2
c0014e8e:	81 e6 ff ff 00 00    	and    esi,0xffff
c0014e94:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0014e97:	e9 cb 00 00 00       	jmp    c0014f67 <Vm::faultHandler(regs*)+0x670>
c0014e9c:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014ea3:	83 ec 0c             	sub    esp,0xc
c0014ea6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014eaa:	50                   	push   eax
c0014eab:	e8 89 f5 ff ff       	call   c0014439 <Vm::inbv(unsigned short)>
c0014eb0:	0f b6 c0             	movzx  eax,al
c0014eb3:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014eb6:	eb 3f                	jmp    c0014ef7 <Vm::faultHandler(regs*)+0x600>
c0014eb8:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014ebd:	74 07                	je     c0014ec6 <Vm::faultHandler(regs*)+0x5cf>
c0014ebf:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014ec3:	ed                   	in     eax,dx
c0014ec4:	eb 14                	jmp    c0014eda <Vm::faultHandler(regs*)+0x5e3>
c0014ec6:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0014ec9:	66 31 f6             	xor    si,si
c0014ecc:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0014ecf:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014ed3:	66 ed                	in     ax,dx
c0014ed5:	0f b7 c0             	movzx  eax,ax
c0014ed8:	09 f0                	or     eax,esi
c0014eda:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014edd:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014ee1:	e9 84 00 00 00       	jmp    c0014f6a <Vm::faultHandler(regs*)+0x673>
c0014ee6:	52                   	push   edx
c0014ee7:	52                   	push   edx
c0014ee8:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014eec:	50                   	push   eax
c0014eed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014ef1:	50                   	push   eax
c0014ef2:	e8 55 f5 ff ff       	call   c001444c <Vm::outbv(unsigned short, unsigned char)>
c0014ef7:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014efb:	eb 53                	jmp    c0014f50 <Vm::faultHandler(regs*)+0x659>
c0014efd:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014f00:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014f04:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014f09:	74 03                	je     c0014f0e <Vm::faultHandler(regs*)+0x617>
c0014f0b:	ef                   	out    dx,eax
c0014f0c:	eb cf                	jmp    c0014edd <Vm::faultHandler(regs*)+0x5e6>
c0014f0e:	66 ef                	out    dx,ax
c0014f10:	eb cb                	jmp    c0014edd <Vm::faultHandler(regs*)+0x5e6>
c0014f12:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014f19:	83 ec 0c             	sub    esp,0xc
c0014f1c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014f20:	50                   	push   eax
c0014f21:	e8 13 f5 ff ff       	call   c0014439 <Vm::inbv(unsigned short)>
c0014f26:	0f b6 c0             	movzx  eax,al
c0014f29:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014f2c:	eb 1f                	jmp    c0014f4d <Vm::faultHandler(regs*)+0x656>
c0014f2e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014f31:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014f36:	74 03                	je     c0014f3b <Vm::faultHandler(regs*)+0x644>
c0014f38:	ed                   	in     eax,dx
c0014f39:	eb 0d                	jmp    c0014f48 <Vm::faultHandler(regs*)+0x651>
c0014f3b:	66 ed                	in     ax,dx
c0014f3d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0014f40:	0f b7 c0             	movzx  eax,ax
c0014f43:	66 31 d2             	xor    dx,dx
c0014f46:	09 d0                	or     eax,edx
c0014f48:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014f4b:	eb 1a                	jmp    c0014f67 <Vm::faultHandler(regs*)+0x670>
c0014f4d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014f50:	83 c4 10             	add    esp,0x10
c0014f53:	eb 15                	jmp    c0014f6a <Vm::faultHandler(regs*)+0x673>
c0014f55:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014f58:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014f5b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014f60:	74 03                	je     c0014f65 <Vm::faultHandler(regs*)+0x66e>
c0014f62:	ef                   	out    dx,eax
c0014f63:	eb 02                	jmp    c0014f67 <Vm::faultHandler(regs*)+0x670>
c0014f65:	66 ef                	out    dx,ax
c0014f67:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014f6a:	b0 01                	mov    al,0x1
c0014f6c:	eb 56                	jmp    c0014fc4 <Vm::faultHandler(regs*)+0x6cd>
c0014f6e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014f72:	50                   	push   eax
c0014f73:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014f77:	50                   	push   eax
c0014f78:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014f7c:	50                   	push   eax
c0014f7d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014f81:	50                   	push   eax
c0014f82:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014f86:	50                   	push   eax
c0014f87:	52                   	push   edx
c0014f88:	52                   	push   edx
c0014f89:	68 3f ef 01 c0       	push   0xc001ef3f
c0014f8e:	e8 45 55 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0014f93:	83 c4 20             	add    esp,0x20
c0014f96:	83 ec 0c             	sub    esp,0xc
c0014f99:	6a 60                	push   0x60
c0014f9b:	e8 99 f4 ff ff       	call   c0014439 <Vm::inbv(unsigned short)>
c0014fa0:	83 c4 10             	add    esp,0x10
c0014fa3:	3c 1c                	cmp    al,0x1c
c0014fa5:	74 04                	je     c0014fab <Vm::faultHandler(regs*)+0x6b4>
c0014fa7:	3c 5a                	cmp    al,0x5a
c0014fa9:	75 eb                	jne    c0014f96 <Vm::faultHandler(regs*)+0x69f>
c0014fab:	3c 5a                	cmp    al,0x5a
c0014fad:	74 04                	je     c0014fb3 <Vm::faultHandler(regs*)+0x6bc>
c0014faf:	3c 1c                	cmp    al,0x1c
c0014fb1:	75 0f                	jne    c0014fc2 <Vm::faultHandler(regs*)+0x6cb>
c0014fb3:	83 ec 0c             	sub    esp,0xc
c0014fb6:	6a 60                	push   0x60
c0014fb8:	e8 7c f4 ff ff       	call   c0014439 <Vm::inbv(unsigned short)>
c0014fbd:	83 c4 10             	add    esp,0x10
c0014fc0:	eb e9                	jmp    c0014fab <Vm::faultHandler(regs*)+0x6b4>
c0014fc2:	31 c0                	xor    eax,eax
c0014fc4:	83 c4 1c             	add    esp,0x1c
c0014fc7:	5b                   	pop    ebx
c0014fc8:	5e                   	pop    esi
c0014fc9:	5f                   	pop    edi
c0014fca:	5d                   	pop    ebp
c0014fcb:	c3                   	ret    

c0014fcc <noCopro(unsigned long)>:
c0014fcc:	c3                   	ret    

c0014fcd <nmiHandler(regs*, void*)>:
c0014fcd:	83 ec 0c             	sub    esp,0xc
c0014fd0:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c0014fd5:	83 ec 0c             	sub    esp,0xc
c0014fd8:	50                   	push   eax
c0014fd9:	e8 fc 1f ff ff       	call   c0006fda <Computer::handleNMI()>
c0014fde:	83 c4 10             	add    esp,0x10
c0014fe1:	90                   	nop
c0014fe2:	83 c4 0c             	add    esp,0xc
c0014fe5:	c3                   	ret    

c0014fe6 <doubleFault(regs*, void*)>:
c0014fe6:	55                   	push   ebp
c0014fe7:	89 e5                	mov    ebp,esp
c0014fe9:	83 ec 08             	sub    esp,0x8
c0014fec:	83 ec 0c             	sub    esp,0xc
c0014fef:	68 9c ef 01 c0       	push   0xc001ef9c
c0014ff4:	e8 4a b1 ff ff       	call   c0010143 <KePanic(char const*)>
c0014ff9:	83 c4 10             	add    esp,0x10
c0014ffc:	90                   	nop
c0014ffd:	c9                   	leave  
c0014ffe:	c3                   	ret    

c0014fff <displayDebugInfo(regs*)>:
c0014fff:	83 ec 1c             	sub    esp,0x1c
c0015002:	0f 20 c0             	mov    eax,cr0
c0015005:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015009:	0f 20 d0             	mov    eax,cr2
c001500c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015010:	0f 20 d8             	mov    eax,cr3
c0015013:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015017:	0f 20 e0             	mov    eax,cr4
c001501a:	89 04 24             	mov    DWORD PTR [esp],eax
c001501d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015021:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0015024:	83 ec 08             	sub    esp,0x8
c0015027:	50                   	push   eax
c0015028:	68 b8 ef 01 c0       	push   0xc001efb8
c001502d:	e8 a6 54 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0015032:	83 c4 10             	add    esp,0x10
c0015035:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015039:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001503c:	83 ec 08             	sub    esp,0x8
c001503f:	50                   	push   eax
c0015040:	68 a9 ef 01 c0       	push   0xc001efa9
c0015045:	e8 8e 54 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001504a:	83 c4 10             	add    esp,0x10
c001504d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015051:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0015054:	83 ec 08             	sub    esp,0x8
c0015057:	50                   	push   eax
c0015058:	68 b4 ef 01 c0       	push   0xc001efb4
c001505d:	e8 76 54 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0015062:	83 c4 10             	add    esp,0x10
c0015065:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015069:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001506c:	83 ec 08             	sub    esp,0x8
c001506f:	50                   	push   eax
c0015070:	68 c3 ef 01 c0       	push   0xc001efc3
c0015075:	e8 5e 54 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001507a:	83 c4 10             	add    esp,0x10
c001507d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015081:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0015084:	83 ec 08             	sub    esp,0x8
c0015087:	50                   	push   eax
c0015088:	68 ce ef 01 c0       	push   0xc001efce
c001508d:	e8 46 54 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0015092:	83 c4 10             	add    esp,0x10
c0015095:	83 ec 08             	sub    esp,0x8
c0015098:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001509c:	68 d9 ef 01 c0       	push   0xc001efd9
c00150a1:	e8 32 54 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c00150a6:	83 c4 10             	add    esp,0x10
c00150a9:	83 ec 08             	sub    esp,0x8
c00150ac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00150b0:	68 e4 ef 01 c0       	push   0xc001efe4
c00150b5:	e8 1e 54 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c00150ba:	83 c4 10             	add    esp,0x10
c00150bd:	a1 f0 3f 02 c0       	mov    eax,ds:0xc0023ff0
c00150c2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150c8:	83 ec 0c             	sub    esp,0xc
c00150cb:	50                   	push   eax
c00150cc:	e8 26 33 ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c00150d1:	83 c4 10             	add    esp,0x10
c00150d4:	a1 f0 3f 02 c0       	mov    eax,ds:0xc0023ff0
c00150d9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150df:	83 ec 08             	sub    esp,0x8
c00150e2:	68 ef ef 01 c0       	push   0xc001efef
c00150e7:	50                   	push   eax
c00150e8:	e8 49 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00150ed:	83 c4 10             	add    esp,0x10
c00150f0:	a1 f0 3f 02 c0       	mov    eax,ds:0xc0023ff0
c00150f5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150fb:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0015100:	8b 12                	mov    edx,DWORD PTR [edx]
c0015102:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0015105:	83 c2 0c             	add    edx,0xc
c0015108:	83 ec 08             	sub    esp,0x8
c001510b:	52                   	push   edx
c001510c:	50                   	push   eax
c001510d:	e8 24 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015112:	83 c4 10             	add    esp,0x10
c0015115:	a1 f0 3f 02 c0       	mov    eax,ds:0xc0023ff0
c001511a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015120:	83 ec 08             	sub    esp,0x8
c0015123:	68 f8 ef 01 c0       	push   0xc001eff8
c0015128:	50                   	push   eax
c0015129:	e8 08 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001512e:	83 c4 10             	add    esp,0x10
c0015131:	a1 f0 3f 02 c0       	mov    eax,ds:0xc0023ff0
c0015136:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001513c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015140:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0015143:	83 ec 08             	sub    esp,0x8
c0015146:	52                   	push   edx
c0015147:	50                   	push   eax
c0015148:	e8 a3 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c001514d:	83 c4 10             	add    esp,0x10
c0015150:	a1 f0 3f 02 c0       	mov    eax,ds:0xc0023ff0
c0015155:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001515b:	83 ec 08             	sub    esp,0x8
c001515e:	68 00 f0 01 c0       	push   0xc001f000
c0015163:	50                   	push   eax
c0015164:	e8 cd 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015169:	83 c4 10             	add    esp,0x10
c001516c:	a1 f0 3f 02 c0       	mov    eax,ds:0xc0023ff0
c0015171:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015177:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001517b:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001517e:	83 ec 08             	sub    esp,0x8
c0015181:	52                   	push   edx
c0015182:	50                   	push   eax
c0015183:	e8 68 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015188:	83 c4 10             	add    esp,0x10
c001518b:	a1 f0 3f 02 c0       	mov    eax,ds:0xc0023ff0
c0015190:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015196:	83 ec 08             	sub    esp,0x8
c0015199:	68 08 f0 01 c0       	push   0xc001f008
c001519e:	50                   	push   eax
c001519f:	e8 92 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00151a4:	83 c4 10             	add    esp,0x10
c00151a7:	a1 f0 3f 02 c0       	mov    eax,ds:0xc0023ff0
c00151ac:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151b2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00151b6:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c00151b9:	83 ec 08             	sub    esp,0x8
c00151bc:	52                   	push   edx
c00151bd:	50                   	push   eax
c00151be:	e8 2d 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00151c3:	83 c4 10             	add    esp,0x10
c00151c6:	a1 f0 3f 02 c0       	mov    eax,ds:0xc0023ff0
c00151cb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151d1:	83 ec 08             	sub    esp,0x8
c00151d4:	68 10 f0 01 c0       	push   0xc001f010
c00151d9:	50                   	push   eax
c00151da:	e8 57 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00151df:	83 c4 10             	add    esp,0x10
c00151e2:	a1 f0 3f 02 c0       	mov    eax,ds:0xc0023ff0
c00151e7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151ed:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00151f1:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00151f4:	83 ec 08             	sub    esp,0x8
c00151f7:	52                   	push   edx
c00151f8:	50                   	push   eax
c00151f9:	e8 f2 34 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00151fe:	83 c4 10             	add    esp,0x10
c0015201:	a1 f0 3f 02 c0       	mov    eax,ds:0xc0023ff0
c0015206:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001520c:	83 ec 08             	sub    esp,0x8
c001520f:	68 18 f0 01 c0       	push   0xc001f018
c0015214:	50                   	push   eax
c0015215:	e8 1c 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001521a:	83 c4 10             	add    esp,0x10
c001521d:	a1 f0 3f 02 c0       	mov    eax,ds:0xc0023ff0
c0015222:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015228:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001522c:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001522f:	83 ec 08             	sub    esp,0x8
c0015232:	52                   	push   edx
c0015233:	50                   	push   eax
c0015234:	e8 b7 34 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015239:	83 c4 10             	add    esp,0x10
c001523c:	a1 f0 3f 02 c0       	mov    eax,ds:0xc0023ff0
c0015241:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015247:	83 ec 08             	sub    esp,0x8
c001524a:	68 20 f0 01 c0       	push   0xc001f020
c001524f:	50                   	push   eax
c0015250:	e8 e1 34 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015255:	83 c4 10             	add    esp,0x10
c0015258:	a1 f0 3f 02 c0       	mov    eax,ds:0xc0023ff0
c001525d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015263:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015267:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001526a:	83 ec 08             	sub    esp,0x8
c001526d:	52                   	push   edx
c001526e:	50                   	push   eax
c001526f:	e8 7c 34 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015274:	83 c4 10             	add    esp,0x10
c0015277:	a1 f0 3f 02 c0       	mov    eax,ds:0xc0023ff0
c001527c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015282:	83 ec 08             	sub    esp,0x8
c0015285:	68 28 f0 01 c0       	push   0xc001f028
c001528a:	50                   	push   eax
c001528b:	e8 a6 34 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015290:	83 c4 10             	add    esp,0x10
c0015293:	a1 f0 3f 02 c0       	mov    eax,ds:0xc0023ff0
c0015298:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001529e:	83 ec 08             	sub    esp,0x8
c00152a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00152a5:	50                   	push   eax
c00152a6:	e8 45 34 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00152ab:	83 c4 10             	add    esp,0x10
c00152ae:	a1 f0 3f 02 c0       	mov    eax,ds:0xc0023ff0
c00152b3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152b9:	83 ec 08             	sub    esp,0x8
c00152bc:	68 31 f0 01 c0       	push   0xc001f031
c00152c1:	50                   	push   eax
c00152c2:	e8 6f 34 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00152c7:	83 c4 10             	add    esp,0x10
c00152ca:	a1 f0 3f 02 c0       	mov    eax,ds:0xc0023ff0
c00152cf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152d5:	83 ec 08             	sub    esp,0x8
c00152d8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00152dc:	50                   	push   eax
c00152dd:	e8 0e 34 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00152e2:	83 c4 10             	add    esp,0x10
c00152e5:	a1 f0 3f 02 c0       	mov    eax,ds:0xc0023ff0
c00152ea:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152f0:	83 ec 08             	sub    esp,0x8
c00152f3:	68 39 f0 01 c0       	push   0xc001f039
c00152f8:	50                   	push   eax
c00152f9:	e8 38 34 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00152fe:	83 c4 10             	add    esp,0x10
c0015301:	a1 f0 3f 02 c0       	mov    eax,ds:0xc0023ff0
c0015306:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001530c:	83 ec 08             	sub    esp,0x8
c001530f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0015313:	50                   	push   eax
c0015314:	e8 d7 33 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015319:	83 c4 10             	add    esp,0x10
c001531c:	fa                   	cli    
c001531d:	f4                   	hlt    
c001531e:	eb fe                	jmp    c001531e <displayDebugInfo(regs*)+0x31f>

c0015320 <HalSystemIdle()>:
c0015320:	56                   	push   esi
c0015321:	53                   	push   ebx
c0015322:	83 ec 14             	sub    esp,0x14
c0015325:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c001532a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015330:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0015336:	83 e0 04             	and    eax,0x4
c0015339:	84 c0                	test   al,al
c001533b:	0f 95 c0             	setne  al
c001533e:	84 c0                	test   al,al
c0015340:	74 4c                	je     c001538e <HalSystemIdle()+0x6e>
c0015342:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c0015347:	83 ec 08             	sub    esp,0x8
c001534a:	68 e1 00 00 00       	push   0xe1
c001534f:	50                   	push   eax
c0015350:	e8 9d 1a ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c0015355:	83 c4 10             	add    esp,0x10
c0015358:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001535c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015360:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c0015365:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015369:	83 e2 02             	and    edx,0x2
c001536c:	89 d3                	mov    ebx,edx
c001536e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015372:	83 e2 00             	and    edx,0x0
c0015375:	89 d6                	mov    esi,edx
c0015377:	56                   	push   esi
c0015378:	53                   	push   ebx
c0015379:	68 e1 00 00 00       	push   0xe1
c001537e:	50                   	push   eax
c001537f:	e8 9a 1a ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c0015384:	83 c4 10             	add    esp,0x10
c0015387:	e8 08 ae fe ff       	call   c0000194 <doTPAUSE>
c001538c:	eb 01                	jmp    c001538f <HalSystemIdle()+0x6f>
c001538e:	f4                   	hlt    
c001538f:	90                   	nop
c0015390:	83 c4 14             	add    esp,0x14
c0015393:	5b                   	pop    ebx
c0015394:	5e                   	pop    esi
c0015395:	c3                   	ret    

c0015396 <displayProgramFault(char const*)>:
c0015396:	83 ec 0c             	sub    esp,0xc
c0015399:	83 ec 0c             	sub    esp,0xc
c001539c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00153a0:	e8 33 51 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c00153a5:	83 c4 10             	add    esp,0x10
c00153a8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00153ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00153af:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00153b2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00153b8:	85 c0                	test   eax,eax
c00153ba:	74 21                	je     c00153dd <displayProgramFault(char const*)+0x47>
c00153bc:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00153c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00153c3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00153c6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00153cc:	6a 04                	push   0x4
c00153ce:	6a 0f                	push   0xf
c00153d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00153d4:	50                   	push   eax
c00153d5:	e8 ce 33 ff ff       	call   c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00153da:	83 c4 10             	add    esp,0x10
c00153dd:	90                   	nop
c00153de:	83 c4 0c             	add    esp,0xc
c00153e1:	c3                   	ret    

c00153e2 <gpFault(regs*, void*)>:
c00153e2:	83 ec 1c             	sub    esp,0x1c
c00153e5:	c7 05 70 40 02 c0 f7 48 01 c0 	mov    DWORD PTR ds:0xc0024070,0xc00148f7
c00153ef:	a1 70 40 02 c0       	mov    eax,ds:0xc0024070
c00153f4:	85 c0                	test   eax,eax
c00153f6:	74 1c                	je     c0015414 <gpFault(regs*, void*)+0x32>
c00153f8:	a1 70 40 02 c0       	mov    eax,ds:0xc0024070
c00153fd:	83 ec 0c             	sub    esp,0xc
c0015400:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015404:	ff d0                	call   eax
c0015406:	83 c4 10             	add    esp,0x10
c0015409:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001540d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0015412:	75 2e                	jne    c0015442 <gpFault(regs*, void*)+0x60>
c0015414:	83 ec 0c             	sub    esp,0xc
c0015417:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001541b:	e8 df fb ff ff       	call   c0014fff <displayDebugInfo(regs*)>
c0015420:	83 c4 10             	add    esp,0x10
c0015423:	83 ec 0c             	sub    esp,0xc
c0015426:	68 41 f0 01 c0       	push   0xc001f041
c001542b:	e8 66 ff ff ff       	call   c0015396 <displayProgramFault(char const*)>
c0015430:	83 c4 10             	add    esp,0x10
c0015433:	83 ec 0c             	sub    esp,0xc
c0015436:	6a 00                	push   0x0
c0015438:	e8 af ee ff ff       	call   c00142ec <Thr::terminateFromIRQ(int)>
c001543d:	83 c4 10             	add    esp,0x10
c0015440:	eb 01                	jmp    c0015443 <gpFault(regs*, void*)+0x61>
c0015442:	90                   	nop
c0015443:	83 c4 1c             	add    esp,0x1c
c0015446:	c3                   	ret    

c0015447 <pgFault(regs*, void*)>:
c0015447:	83 ec 1c             	sub    esp,0x1c
c001544a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001544e:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015451:	0f 20 d0             	mov    eax,cr2
c0015454:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015458:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001545c:	83 ec 04             	sub    esp,0x4
c001545f:	52                   	push   edx
c0015460:	50                   	push   eax
c0015461:	68 20 f1 01 c0       	push   0xc001f120
c0015466:	e8 6d 50 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001546b:	83 c4 10             	add    esp,0x10
c001546e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0015473:	8b 00                	mov    eax,DWORD PTR [eax]
c0015475:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015478:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c001547e:	0f 20 d2             	mov    edx,cr2
c0015481:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015485:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015489:	83 ec 08             	sub    esp,0x8
c001548c:	52                   	push   edx
c001548d:	50                   	push   eax
c001548e:	e8 77 4c ff ff       	call   c000a10a <VAS::tryLoadBackOffDisk(unsigned long)>
c0015493:	83 c4 10             	add    esp,0x10
c0015496:	84 c0                	test   al,al
c0015498:	75 2e                	jne    c00154c8 <pgFault(regs*, void*)+0x81>
c001549a:	83 ec 0c             	sub    esp,0xc
c001549d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00154a1:	e8 59 fb ff ff       	call   c0014fff <displayDebugInfo(regs*)>
c00154a6:	83 c4 10             	add    esp,0x10
c00154a9:	83 ec 0c             	sub    esp,0xc
c00154ac:	68 5a f0 01 c0       	push   0xc001f05a
c00154b1:	e8 e0 fe ff ff       	call   c0015396 <displayProgramFault(char const*)>
c00154b6:	83 c4 10             	add    esp,0x10
c00154b9:	83 ec 0c             	sub    esp,0xc
c00154bc:	6a 00                	push   0x0
c00154be:	e8 29 ee ff ff       	call   c00142ec <Thr::terminateFromIRQ(int)>
c00154c3:	83 c4 10             	add    esp,0x10
c00154c6:	eb 01                	jmp    c00154c9 <pgFault(regs*, void*)+0x82>
c00154c8:	90                   	nop
c00154c9:	83 c4 1c             	add    esp,0x1c
c00154cc:	c3                   	ret    

c00154cd <otherISRHandler(regs*, void*)>:
c00154cd:	83 ec 0c             	sub    esp,0xc
c00154d0:	83 ec 0c             	sub    esp,0xc
c00154d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00154d7:	e8 23 fb ff ff       	call   c0014fff <displayDebugInfo(regs*)>
c00154dc:	83 c4 10             	add    esp,0x10
c00154df:	83 ec 0c             	sub    esp,0xc
c00154e2:	68 48 f1 01 c0       	push   0xc001f148
c00154e7:	e8 aa fe ff ff       	call   c0015396 <displayProgramFault(char const*)>
c00154ec:	83 c4 10             	add    esp,0x10
c00154ef:	83 ec 0c             	sub    esp,0xc
c00154f2:	6a 00                	push   0x0
c00154f4:	e8 f3 ed ff ff       	call   c00142ec <Thr::terminateFromIRQ(int)>
c00154f9:	83 c4 10             	add    esp,0x10
c00154fc:	90                   	nop
c00154fd:	83 c4 0c             	add    esp,0xc
c0015500:	c3                   	ret    

c0015501 <opcodeFault(regs*, void*)>:
c0015501:	55                   	push   ebp
c0015502:	89 e5                	mov    ebp,esp
c0015504:	83 ec 08             	sub    esp,0x8
c0015507:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001550a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001550d:	83 ec 08             	sub    esp,0x8
c0015510:	50                   	push   eax
c0015511:	68 65 f0 01 c0       	push   0xc001f065
c0015516:	e8 bd 4f ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001551b:	83 c4 10             	add    esp,0x10
c001551e:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c0015523:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015529:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001552f:	84 c0                	test   al,al
c0015531:	74 21                	je     c0015554 <opcodeFault(regs*, void*)+0x53>
c0015533:	83 ec 0c             	sub    esp,0xc
c0015536:	68 70 f1 01 c0       	push   0xc001f170
c001553b:	e8 98 4f ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0015540:	83 c4 10             	add    esp,0x10
c0015543:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015546:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015549:	8d 50 19             	lea    edx,[eax+0x19]
c001554c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001554f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015552:	eb 2b                	jmp    c001557f <opcodeFault(regs*, void*)+0x7e>
c0015554:	83 ec 0c             	sub    esp,0xc
c0015557:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001555a:	e8 a0 fa ff ff       	call   c0014fff <displayDebugInfo(regs*)>
c001555f:	83 c4 10             	add    esp,0x10
c0015562:	83 ec 0c             	sub    esp,0xc
c0015565:	68 73 f0 01 c0       	push   0xc001f073
c001556a:	e8 27 fe ff ff       	call   c0015396 <displayProgramFault(char const*)>
c001556f:	83 c4 10             	add    esp,0x10
c0015572:	83 ec 0c             	sub    esp,0xc
c0015575:	6a 00                	push   0x0
c0015577:	e8 70 ed ff ff       	call   c00142ec <Thr::terminateFromIRQ(int)>
c001557c:	83 c4 10             	add    esp,0x10
c001557f:	c9                   	leave  
c0015580:	c3                   	ret    

c0015581 <i386SaveCoprocessor(void*)>:
c0015581:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015585:	83 c0 3f             	add    eax,0x3f
c0015588:	83 e0 c0             	and    eax,0xffffffc0
c001558b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001558f:	ff 25 6c 40 02 c0    	jmp    DWORD PTR ds:0xc002406c

c0015595 <i386LoadCoprocessor(void*)>:
c0015595:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015599:	83 c0 3f             	add    eax,0x3f
c001559c:	83 e0 c0             	and    eax,0xffffffc0
c001559f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00155a3:	ff 25 68 40 02 c0    	jmp    DWORD PTR ds:0xc0024068

c00155a9 <x87EmulHandler(regs*, void*)>:
c00155a9:	53                   	push   ebx
c00155aa:	83 ec 08             	sub    esp,0x8
c00155ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155b2:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00155b6:	74 10                	je     c00155c8 <x87EmulHandler(regs*, void*)+0x1f>
c00155b8:	83 ec 0c             	sub    esp,0xc
c00155bb:	68 80 f0 01 c0       	push   0xc001f080
c00155c0:	e8 7e ab ff ff       	call   c0010143 <KePanic(char const*)>
c00155c5:	83 c4 10             	add    esp,0x10
c00155c8:	0f 20 c0             	mov    eax,cr0
c00155cb:	a8 08                	test   al,0x8
c00155cd:	74 59                	je     c0015628 <x87EmulHandler(regs*, void*)+0x7f>
c00155cf:	0f 06                	clts   
c00155d1:	a1 64 40 02 c0       	mov    eax,ds:0xc0024064
c00155d6:	85 c0                	test   eax,eax
c00155d8:	74 0e                	je     c00155e8 <x87EmulHandler(regs*, void*)+0x3f>
c00155da:	83 ec 0c             	sub    esp,0xc
c00155dd:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00155e0:	e8 9c ff ff ff       	call   c0015581 <i386SaveCoprocessor(void*)>
c00155e5:	83 c4 10             	add    esp,0x10
c00155e8:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00155ee:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c00155f2:	75 12                	jne    c0015606 <x87EmulHandler(regs*, void*)+0x5d>
c00155f4:	83 ec 0c             	sub    esp,0xc
c00155f7:	68 40 02 00 00       	push   0x240
c00155fc:	e8 b8 21 ff ff       	call   c00077b9 <malloc>
c0015601:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0015604:	eb 10                	jmp    c0015616 <x87EmulHandler(regs*, void*)+0x6d>
c0015606:	83 ec 0c             	sub    esp,0xc
c0015609:	a1 64 40 02 c0       	mov    eax,ds:0xc0024064
c001560e:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0015611:	e8 7f ff ff ff       	call   c0015595 <i386LoadCoprocessor(void*)>
c0015616:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001561b:	83 c4 10             	add    esp,0x10
c001561e:	a3 64 40 02 c0       	mov    ds:0xc0024064,eax
c0015623:	83 c4 08             	add    esp,0x8
c0015626:	5b                   	pop    ebx
c0015627:	c3                   	ret    
c0015628:	83 ec 0c             	sub    esp,0xc
c001562b:	68 94 f0 01 c0       	push   0xc001f094
c0015630:	e8 a3 4e ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0015635:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001563d:	83 c4 18             	add    esp,0x18
c0015640:	5b                   	pop    ebx
c0015641:	e9 a6 ec ff ff       	jmp    c00142ec <Thr::terminateFromIRQ(int)>

c0015646 <HalInitialiseCoprocessor()>:
c0015646:	83 ec 10             	sub    esp,0x10
c0015649:	c7 05 64 40 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024064,0x0
c0015653:	6a 00                	push   0x0
c0015655:	68 a9 55 01 c0       	push   0xc00155a9
c001565a:	6a 07                	push   0x7
c001565c:	e8 eb 67 ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015661:	e8 9a 65 00 00       	call   c001bc00 <avxDetect>
c0015666:	83 c4 10             	add    esp,0x10
c0015669:	85 c0                	test   eax,eax
c001566b:	74 1c                	je     c0015689 <HalInitialiseCoprocessor()+0x43>
c001566d:	c7 05 6c 40 02 c0 2a bc 01 c0 	mov    DWORD PTR ds:0xc002406c,0xc001bc2a
c0015677:	c7 05 68 40 02 c0 3b bc 01 c0 	mov    DWORD PTR ds:0xc0024068,0xc001bc3b
c0015681:	83 c4 0c             	add    esp,0xc
c0015684:	e9 c3 65 00 00       	jmp    c001bc4c <avxInit>
c0015689:	e8 f2 67 00 00       	call   c001be80 <absolutelyNoChanceInHell>
c001568e:	85 c0                	test   eax,eax
c0015690:	74 1c                	je     c00156ae <HalInitialiseCoprocessor()+0x68>
c0015692:	c7 05 6c 40 02 c0 98 be 01 c0 	mov    DWORD PTR ds:0xc002406c,0xc001be98
c001569c:	c7 05 68 40 02 c0 a0 be 01 c0 	mov    DWORD PTR ds:0xc0024068,0xc001bea0
c00156a6:	83 c4 0c             	add    esp,0xc
c00156a9:	e9 fa 67 00 00       	jmp    c001bea8 <sseInit>
c00156ae:	e8 13 68 00 00       	call   c001bec6 <x87Detect>
c00156b3:	85 c0                	test   eax,eax
c00156b5:	74 1c                	je     c00156d3 <HalInitialiseCoprocessor()+0x8d>
c00156b7:	c7 05 6c 40 02 c0 e1 be 01 c0 	mov    DWORD PTR ds:0xc002406c,0xc001bee1
c00156c1:	c7 05 68 40 02 c0 e8 be 01 c0 	mov    DWORD PTR ds:0xc0024068,0xc001bee8
c00156cb:	83 c4 0c             	add    esp,0xc
c00156ce:	e9 1c 68 00 00       	jmp    c001beef <x87Init>
c00156d3:	c7 05 6c 40 02 c0 cc 4f 01 c0 	mov    DWORD PTR ds:0xc002406c,0xc0014fcc
c00156dd:	c7 05 68 40 02 c0 cc 4f 01 c0 	mov    DWORD PTR ds:0xc0024068,0xc0014fcc
c00156e7:	0f 20 c0             	mov    eax,cr0
c00156ea:	83 c8 04             	or     eax,0x4
c00156ed:	0f 22 c0             	mov    cr0,eax
c00156f0:	83 c4 0c             	add    esp,0xc
c00156f3:	c3                   	ret    

c00156f4 <HalPanic(char const*)>:
c00156f4:	53                   	push   ebx
c00156f5:	83 ec 10             	sub    esp,0x10
c00156f8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00156fc:	fa                   	cli    
c00156fd:	53                   	push   ebx
c00156fe:	68 aa f0 01 c0       	push   0xc001f0aa
c0015703:	e8 d0 4d ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0015708:	83 c4 0c             	add    esp,0xc
c001570b:	6a 01                	push   0x1
c001570d:	6a 0f                	push   0xf
c001570f:	ff 35 64 0d 02 c0    	push   DWORD PTR ds:0xc0020d64
c0015715:	e8 30 2b ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001571a:	58                   	pop    eax
c001571b:	ff 35 64 0d 02 c0    	push   DWORD PTR ds:0xc0020d64
c0015721:	e8 1c 2d ff ff       	call   c0008442 <VgaText::clearScreen()>
c0015726:	5a                   	pop    edx
c0015727:	59                   	pop    ecx
c0015728:	68 e8 d8 01 c0       	push   0xc001d8e8
c001572d:	ff 35 64 0d 02 c0    	push   DWORD PTR ds:0xc0020d64
c0015733:	e8 4a 2b ff ff       	call   c0008282 <VgaText::setTitle(char*)>
c0015738:	83 c4 0c             	add    esp,0xc
c001573b:	6a 01                	push   0x1
c001573d:	6a 0f                	push   0xf
c001573f:	ff 35 64 0d 02 c0    	push   DWORD PTR ds:0xc0020d64
c0015745:	e8 00 2b ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001574a:	58                   	pop    eax
c001574b:	5a                   	pop    edx
c001574c:	68 c3 f0 01 c0       	push   0xc001f0c3
c0015751:	ff 35 64 0d 02 c0    	push   DWORD PTR ds:0xc0020d64
c0015757:	e8 da 2f ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001575c:	83 c4 0c             	add    esp,0xc
c001575f:	6a 0f                	push   0xf
c0015761:	6a 01                	push   0x1
c0015763:	ff 35 64 0d 02 c0    	push   DWORD PTR ds:0xc0020d64
c0015769:	e8 dc 2a ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001576e:	59                   	pop    ecx
c001576f:	58                   	pop    eax
c0015770:	68 cc f0 01 c0       	push   0xc001f0cc
c0015775:	ff 35 64 0d 02 c0    	push   DWORD PTR ds:0xc0020d64
c001577b:	e8 b6 2f ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015780:	83 c4 0c             	add    esp,0xc
c0015783:	6a 01                	push   0x1
c0015785:	6a 0f                	push   0xf
c0015787:	ff 35 64 0d 02 c0    	push   DWORD PTR ds:0xc0020d64
c001578d:	e8 b8 2a ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015792:	58                   	pop    eax
c0015793:	5a                   	pop    edx
c0015794:	68 10 f1 01 c0       	push   0xc001f110
c0015799:	ff 35 64 0d 02 c0    	push   DWORD PTR ds:0xc0020d64
c001579f:	e8 92 2f ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00157a4:	59                   	pop    ecx
c00157a5:	58                   	pop    eax
c00157a6:	68 d9 f0 01 c0       	push   0xc001f0d9
c00157ab:	ff 35 64 0d 02 c0    	push   DWORD PTR ds:0xc0020d64
c00157b1:	e8 80 2f ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00157b6:	58                   	pop    eax
c00157b7:	5a                   	pop    edx
c00157b8:	68 13 f1 01 c0       	push   0xc001f113
c00157bd:	ff 35 64 0d 02 c0    	push   DWORD PTR ds:0xc0020d64
c00157c3:	e8 6e 2f ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00157c8:	59                   	pop    ecx
c00157c9:	58                   	pop    eax
c00157ca:	53                   	push   ebx
c00157cb:	ff 35 64 0d 02 c0    	push   DWORD PTR ds:0xc0020d64
c00157d1:	e8 60 2f ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00157d6:	58                   	pop    eax
c00157d7:	5a                   	pop    edx
c00157d8:	68 10 f1 01 c0       	push   0xc001f110
c00157dd:	ff 35 64 0d 02 c0    	push   DWORD PTR ds:0xc0020d64
c00157e3:	e8 4e 2f ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00157e8:	83 c4 10             	add    esp,0x10
c00157eb:	eb fe                	jmp    c00157eb <HalPanic(char const*)+0xf7>

c00157ed <HalQueryPerformanceCounter()>:
c00157ed:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c00157f2:	31 d2                	xor    edx,edx
c00157f4:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00157fa:	31 c0                	xor    eax,eax
c00157fc:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0015803:	74 02                	je     c0015807 <HalQueryPerformanceCounter()+0x1a>
c0015805:	0f 31                	rdtsc  
c0015807:	c3                   	ret    

c0015808 <HalInitialise()>:
c0015808:	53                   	push   ebx
c0015809:	83 ec 08             	sub    esp,0x8
c001580c:	e8 6e 68 ff ff       	call   c000c07f <setupINTS()>
c0015811:	80 3d e0 35 02 c0 00 	cmp    BYTE PTR ds:0xc00235e0,0x0
c0015818:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c001581d:	75 07                	jne    c0015826 <HalInitialise()+0x1e>
c001581f:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c0015826:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001582c:	83 e0 01             	and    eax,0x1
c001582f:	a2 60 40 02 c0       	mov    ds:0xc0024060,al
c0015834:	e8 a7 02 00 00       	call   c0015ae0 <picOpen()>
c0015839:	80 3d 60 40 02 c0 00 	cmp    BYTE PTR ds:0xc0024060,0x0
c0015840:	74 0a                	je     c001584c <HalInitialise()+0x44>
c0015842:	e8 e1 01 00 00       	call   c0015a28 <picDisable()>
c0015847:	e8 26 5d 00 00       	call   c001b572 <apicOpen()>
c001584c:	bb 0f 00 00 00       	mov    ebx,0xf
c0015851:	50                   	push   eax
c0015852:	6a 00                	push   0x0
c0015854:	68 cd 54 01 c0       	push   0xc00154cd
c0015859:	6a 00                	push   0x0
c001585b:	e8 ec 65 ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015860:	83 c4 0c             	add    esp,0xc
c0015863:	6a 00                	push   0x0
c0015865:	68 cd 54 01 c0       	push   0xc00154cd
c001586a:	6a 01                	push   0x1
c001586c:	e8 db 65 ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015871:	83 c4 0c             	add    esp,0xc
c0015874:	6a 00                	push   0x0
c0015876:	68 cd 4f 01 c0       	push   0xc0014fcd
c001587b:	6a 02                	push   0x2
c001587d:	e8 ca 65 ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015882:	83 c4 0c             	add    esp,0xc
c0015885:	6a 00                	push   0x0
c0015887:	68 cd 54 01 c0       	push   0xc00154cd
c001588c:	6a 03                	push   0x3
c001588e:	e8 b9 65 ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015893:	83 c4 0c             	add    esp,0xc
c0015896:	6a 00                	push   0x0
c0015898:	68 cd 54 01 c0       	push   0xc00154cd
c001589d:	6a 04                	push   0x4
c001589f:	e8 a8 65 ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158a4:	83 c4 0c             	add    esp,0xc
c00158a7:	6a 00                	push   0x0
c00158a9:	68 cd 54 01 c0       	push   0xc00154cd
c00158ae:	6a 05                	push   0x5
c00158b0:	e8 97 65 ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158b5:	83 c4 0c             	add    esp,0xc
c00158b8:	6a 00                	push   0x0
c00158ba:	68 01 55 01 c0       	push   0xc0015501
c00158bf:	6a 06                	push   0x6
c00158c1:	e8 86 65 ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158c6:	83 c4 0c             	add    esp,0xc
c00158c9:	6a 00                	push   0x0
c00158cb:	68 e6 4f 01 c0       	push   0xc0014fe6
c00158d0:	6a 08                	push   0x8
c00158d2:	e8 75 65 ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158d7:	83 c4 0c             	add    esp,0xc
c00158da:	6a 00                	push   0x0
c00158dc:	68 cd 54 01 c0       	push   0xc00154cd
c00158e1:	6a 09                	push   0x9
c00158e3:	e8 64 65 ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158e8:	83 c4 0c             	add    esp,0xc
c00158eb:	6a 00                	push   0x0
c00158ed:	68 cd 54 01 c0       	push   0xc00154cd
c00158f2:	6a 0a                	push   0xa
c00158f4:	e8 53 65 ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158f9:	83 c4 0c             	add    esp,0xc
c00158fc:	6a 00                	push   0x0
c00158fe:	68 cd 54 01 c0       	push   0xc00154cd
c0015903:	6a 0b                	push   0xb
c0015905:	e8 42 65 ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001590a:	83 c4 0c             	add    esp,0xc
c001590d:	6a 00                	push   0x0
c001590f:	68 e2 53 01 c0       	push   0xc00153e2
c0015914:	6a 0d                	push   0xd
c0015916:	e8 31 65 ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001591b:	83 c4 0c             	add    esp,0xc
c001591e:	6a 00                	push   0x0
c0015920:	68 47 54 01 c0       	push   0xc0015447
c0015925:	6a 0e                	push   0xe
c0015927:	e8 20 65 ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001592c:	83 c4 10             	add    esp,0x10
c001592f:	50                   	push   eax
c0015930:	6a 00                	push   0x0
c0015932:	68 cd 54 01 c0       	push   0xc00154cd
c0015937:	53                   	push   ebx
c0015938:	43                   	inc    ebx
c0015939:	e8 0e 65 ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001593e:	83 c4 10             	add    esp,0x10
c0015941:	83 fb 1e             	cmp    ebx,0x1e
c0015944:	75 e9                	jne    c001592f <HalInitialise()+0x127>
c0015946:	50                   	push   eax
c0015947:	6a 00                	push   0x0
c0015949:	68 0f 14 01 c0       	push   0xc001140f
c001594e:	6a 60                	push   0x60
c0015950:	e8 f7 64 ff ff       	call   c000be4c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015955:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c001595a:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0015964:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001596b:	e8 49 1e ff ff       	call   c00077b9 <malloc>
c0015970:	89 04 24             	mov    DWORD PTR [esp],eax
c0015973:	89 c3                	mov    ebx,eax
c0015975:	e8 2e 09 00 00       	call   c00162a8 <RTC::RTC()>
c001597a:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0015984:	5a                   	pop    edx
c0015985:	59                   	pop    ecx
c0015986:	53                   	push   ebx
c0015987:	ff 35 18 0d 02 c0    	push   DWORD PTR ds:0xc0020d18
c001598d:	e8 86 5f ff ff       	call   c000b918 <Device::addChild(Device*)>
c0015992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015994:	6a 00                	push   0x0
c0015996:	6a 00                	push   0x0
c0015998:	6a 00                	push   0x0
c001599a:	53                   	push   ebx
c001599b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001599e:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c00159a3:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00159a9:	83 c4 28             	add    esp,0x28
c00159ac:	5b                   	pop    ebx
c00159ad:	c3                   	ret    

c00159ae <HalMakeBeep(int)>:
c00159ae:	53                   	push   ebx
c00159af:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00159b3:	85 db                	test   ebx,ebx
c00159b5:	75 07                	jne    c00159be <HalMakeBeep(int)+0x10>
c00159b7:	e4 61                	in     al,0x61
c00159b9:	83 e0 fc             	and    eax,0xfffffffc
c00159bc:	eb 26                	jmp    c00159e4 <HalMakeBeep(int)+0x36>
c00159be:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00159c3:	99                   	cdq    
c00159c4:	f7 fb                	idiv   ebx
c00159c6:	89 c1                	mov    ecx,eax
c00159c8:	b0 b6                	mov    al,0xb6
c00159ca:	e6 43                	out    0x43,al
c00159cc:	88 c8                	mov    al,cl
c00159ce:	e6 42                	out    0x42,al
c00159d0:	89 c8                	mov    eax,ecx
c00159d2:	c1 e8 08             	shr    eax,0x8
c00159d5:	e6 42                	out    0x42,al
c00159d7:	e4 61                	in     al,0x61
c00159d9:	88 c2                	mov    dl,al
c00159db:	83 ca 03             	or     edx,0x3
c00159de:	38 c2                	cmp    dl,al
c00159e0:	74 04                	je     c00159e6 <HalMakeBeep(int)+0x38>
c00159e2:	88 d0                	mov    al,dl
c00159e4:	e6 61                	out    0x61,al
c00159e6:	5b                   	pop    ebx
c00159e7:	c3                   	ret    

c00159e8 <HalGetRand()>:
c00159e8:	31 c0                	xor    eax,eax
c00159ea:	c3                   	ret    

c00159eb <HalEndOfInterrupt(int)>:
c00159eb:	80 3d 60 40 02 c0 00 	cmp    BYTE PTR ds:0xc0024060,0x0
c00159f2:	74 23                	je     c0015a17 <HalEndOfInterrupt(int)+0x2c>
c00159f4:	83 ec 14             	sub    esp,0x14
c00159f7:	6a 1b                	push   0x1b
c00159f9:	ff 35 18 0d 02 c0    	push   DWORD PTR ds:0xc0020d18
c00159ff:	e8 ee 13 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c0015a04:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015a09:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0015a13:	83 c4 1c             	add    esp,0x1c
c0015a16:	c3                   	ret    
c0015a17:	e9 54 02 00 00       	jmp    c0015c70 <picEOI(int)>

c0015a1c <HalRestart()>:
c0015a1c:	c3                   	ret    

c0015a1d <HalShutdown()>:
c0015a1d:	c3                   	ret    

c0015a1e <HalSleep()>:
c0015a1e:	c3                   	ret    
c0015a1f:	90                   	nop

c0015a20 <picIoWait()>:
c0015a20:	eb 00                	jmp    c0015a22 <picIoWait()+0x2>
c0015a22:	eb 00                	jmp    c0015a24 <picIoWait()+0x4>
c0015a24:	90                   	nop
c0015a25:	c3                   	ret    
c0015a26:	66 90                	xchg   ax,ax

c0015a28 <picDisable()>:
c0015a28:	83 ec 10             	sub    esp,0x10
c0015a2b:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0015a32:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0015a37:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015a3b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015a40:	ee                   	out    dx,al
c0015a41:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0015a48:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0015a4d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015a51:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0015a56:	ee                   	out    dx,al
c0015a57:	90                   	nop
c0015a58:	83 c4 10             	add    esp,0x10
c0015a5b:	c3                   	ret    

c0015a5c <picGetIRQReg(int)>:
c0015a5c:	83 ec 10             	sub    esp,0x10
c0015a5f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015a63:	25 ff 00 00 00       	and    eax,0xff
c0015a68:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015a6f:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0015a73:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015a77:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015a7c:	ee                   	out    dx,al
c0015a7d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015a81:	25 ff 00 00 00       	and    eax,0xff
c0015a86:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015a8d:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0015a91:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015a95:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015a9a:	ee                   	out    dx,al
c0015a9b:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0015aa2:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0015aa7:	89 c2                	mov    edx,eax
c0015aa9:	ec                   	in     al,dx
c0015aaa:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0015aae:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015ab2:	25 ff 00 00 00       	and    eax,0xff
c0015ab7:	c1 e0 08             	shl    eax,0x8
c0015aba:	89 c1                	mov    ecx,eax
c0015abc:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0015ac3:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015ac8:	89 c2                	mov    edx,eax
c0015aca:	ec                   	in     al,dx
c0015acb:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0015acf:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015ad3:	25 ff 00 00 00       	and    eax,0xff
c0015ad8:	09 c8                	or     eax,ecx
c0015ada:	83 c4 10             	add    esp,0x10
c0015add:	c3                   	ret    
c0015ade:	66 90                	xchg   ax,ax

c0015ae0 <picOpen()>:
c0015ae0:	83 ec 50             	sub    esp,0x50
c0015ae3:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0015aea:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0015aef:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015af3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015af7:	ee                   	out    dx,al
c0015af8:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0015aff:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0015b04:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0015b08:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015b0c:	ee                   	out    dx,al
c0015b0d:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0015b15:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0015b1d:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0015b24:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015b28:	89 c2                	mov    edx,eax
c0015b2a:	ec                   	in     al,dx
c0015b2b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0015b2f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0015b33:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0015b37:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0015b3e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015b42:	89 c2                	mov    edx,eax
c0015b44:	ec                   	in     al,dx
c0015b45:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015b49:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0015b4d:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0015b51:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0015b58:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0015b5d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0015b61:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015b65:	ee                   	out    dx,al
c0015b66:	e8 b5 fe ff ff       	call   c0015a20 <picIoWait()>
c0015b6b:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0015b72:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0015b77:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015b7b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015b7f:	ee                   	out    dx,al
c0015b80:	e8 9b fe ff ff       	call   c0015a20 <picIoWait()>
c0015b85:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015b89:	25 ff 00 00 00       	and    eax,0xff
c0015b8e:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0015b95:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0015b99:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0015b9d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015ba1:	ee                   	out    dx,al
c0015ba2:	e8 79 fe ff ff       	call   c0015a20 <picIoWait()>
c0015ba7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015bab:	25 ff 00 00 00       	and    eax,0xff
c0015bb0:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0015bb7:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015bbb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0015bbf:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015bc3:	ee                   	out    dx,al
c0015bc4:	e8 57 fe ff ff       	call   c0015a20 <picIoWait()>
c0015bc9:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0015bd0:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0015bd5:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0015bd9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015bdd:	ee                   	out    dx,al
c0015bde:	e8 3d fe ff ff       	call   c0015a20 <picIoWait()>
c0015be3:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0015bea:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0015bef:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0015bf3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015bf7:	ee                   	out    dx,al
c0015bf8:	e8 23 fe ff ff       	call   c0015a20 <picIoWait()>
c0015bfd:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0015c04:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0015c09:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015c0d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015c11:	ee                   	out    dx,al
c0015c12:	e8 09 fe ff ff       	call   c0015a20 <picIoWait()>
c0015c17:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0015c1e:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0015c23:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0015c27:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015c2b:	ee                   	out    dx,al
c0015c2c:	e8 ef fd ff ff       	call   c0015a20 <picIoWait()>
c0015c31:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0015c35:	25 ff 00 00 00       	and    eax,0xff
c0015c3a:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0015c41:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0015c45:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0015c49:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015c4d:	ee                   	out    dx,al
c0015c4e:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0015c52:	25 ff 00 00 00       	and    eax,0xff
c0015c57:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0015c5e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0015c62:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0015c66:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0015c6a:	ee                   	out    dx,al
c0015c6b:	90                   	nop
c0015c6c:	83 c4 50             	add    esp,0x50
c0015c6f:	c3                   	ret    

c0015c70 <picEOI(int)>:
c0015c70:	83 ec 10             	sub    esp,0x10
c0015c73:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015c78:	75 22                	jne    c0015c9c <picEOI(int)+0x2c>
c0015c7a:	6a 0b                	push   0xb
c0015c7c:	e8 db fd ff ff       	call   c0015a5c <picGetIRQReg(int)>
c0015c81:	83 c4 04             	add    esp,0x4
c0015c84:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0015c89:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015c8e:	25 ff ff 00 00       	and    eax,0xffff
c0015c93:	25 80 00 00 00       	and    eax,0x80
c0015c98:	74 72                	je     c0015d0c <picEOI(int)+0x9c>
c0015c9a:	66 90                	xchg   ax,ax
c0015c9c:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0015ca1:	75 31                	jne    c0015cd4 <picEOI(int)+0x64>
c0015ca3:	6a 0b                	push   0xb
c0015ca5:	e8 b2 fd ff ff       	call   c0015a5c <picGetIRQReg(int)>
c0015caa:	83 c4 04             	add    esp,0x4
c0015cad:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0015cb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015cb6:	66 85 c0             	test   ax,ax
c0015cb9:	78 19                	js     c0015cd4 <picEOI(int)+0x64>
c0015cbb:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0015cc2:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0015cc7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015ccb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015cd0:	ee                   	out    dx,al
c0015cd1:	eb 3d                	jmp    c0015d10 <picEOI(int)+0xa0>
c0015cd3:	90                   	nop
c0015cd4:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015cd9:	7e 19                	jle    c0015cf4 <picEOI(int)+0x84>
c0015cdb:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015ce2:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0015ce7:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015ceb:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015cf0:	ee                   	out    dx,al
c0015cf1:	8d 76 00             	lea    esi,[esi+0x0]
c0015cf4:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015cfb:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0015d00:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015d04:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015d09:	ee                   	out    dx,al
c0015d0a:	eb 04                	jmp    c0015d10 <picEOI(int)+0xa0>
c0015d0c:	90                   	nop
c0015d0d:	8d 76 00             	lea    esi,[esi+0x0]
c0015d10:	83 c4 10             	add    esp,0x10
c0015d13:	c3                   	ret    

c0015d14 <RTC::open(int, int, void*)>:
c0015d14:	31 c0                	xor    eax,eax
c0015d16:	c3                   	ret    
c0015d17:	90                   	nop

c0015d18 <RTC::close(int, int, void*)>:
c0015d18:	31 c0                	xor    eax,eax
c0015d1a:	c3                   	ret    
c0015d1b:	90                   	nop

c0015d1c <RTC::timeInSecondsUTC()>:
c0015d1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d20:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0015d26:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015d2c:	c3                   	ret    
c0015d2d:	90                   	nop

c0015d2e <RTC::timeInDatetimeUTC()>:
c0015d2e:	53                   	push   ebx
c0015d2f:	83 ec 14             	sub    esp,0x14
c0015d32:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015d36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d3a:	8b 10                	mov    edx,DWORD PTR [eax]
c0015d3c:	50                   	push   eax
c0015d3d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015d40:	83 c4 0c             	add    esp,0xc
c0015d43:	52                   	push   edx
c0015d44:	50                   	push   eax
c0015d45:	53                   	push   ebx
c0015d46:	e8 41 59 ff ff       	call   c000b68c <secondsToDatetime(unsigned long long)>
c0015d4b:	89 d8                	mov    eax,ebx
c0015d4d:	83 c4 14             	add    esp,0x14
c0015d50:	5b                   	pop    ebx
c0015d51:	c2 04 00             	ret    0x4

c0015d54 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0015d54:	56                   	push   esi
c0015d55:	53                   	push   ebx
c0015d56:	83 ec 14             	sub    esp,0x14
c0015d59:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015d5d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015d5f:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0015d62:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015d66:	52                   	push   edx
c0015d67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d6f:	50                   	push   eax
c0015d70:	e8 17 59 ff ff       	call   c000b68c <secondsToDatetime(unsigned long long)>
c0015d75:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015d79:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015d7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015d81:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0015d85:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015d89:	89 f0                	mov    eax,esi
c0015d8b:	83 c4 20             	add    esp,0x20
c0015d8e:	5b                   	pop    ebx
c0015d8f:	5e                   	pop    esi
c0015d90:	ff e0                	jmp    eax

c0015d92 <RTC::~RTC()>:
c0015d92:	83 ec 0c             	sub    esp,0xc
c0015d95:	ba b0 f1 01 c0       	mov    edx,0xc001f1b0
c0015d9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d9e:	89 10                	mov    DWORD PTR [eax],edx
c0015da0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015da4:	83 ec 0c             	sub    esp,0xc
c0015da7:	50                   	push   eax
c0015da8:	e8 63 56 ff ff       	call   c000b410 <Clock::~Clock()>
c0015dad:	83 c4 10             	add    esp,0x10
c0015db0:	90                   	nop
c0015db1:	83 c4 0c             	add    esp,0xc
c0015db4:	c3                   	ret    
c0015db5:	90                   	nop

c0015db6 <RTC::~RTC()>:
c0015db6:	83 ec 0c             	sub    esp,0xc
c0015db9:	83 ec 0c             	sub    esp,0xc
c0015dbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015dc0:	e8 cd ff ff ff       	call   c0015d92 <RTC::~RTC()>
c0015dc5:	83 c4 10             	add    esp,0x10
c0015dc8:	83 ec 08             	sub    esp,0x8
c0015dcb:	68 60 01 00 00       	push   0x160
c0015dd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015dd4:	e8 09 46 ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c0015dd9:	83 c4 10             	add    esp,0x10
c0015ddc:	83 c4 0c             	add    esp,0xc
c0015ddf:	c3                   	ret    

c0015de0 <RTC::get_update_in_progress_flag()>:
c0015de0:	83 ec 14             	sub    esp,0x14
c0015de3:	6a 0a                	push   0xa
c0015de5:	ff 35 18 0d 02 c0    	push   DWORD PTR ds:0xc0020d18
c0015deb:	e8 b6 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015df0:	83 c4 1c             	add    esp,0x1c
c0015df3:	c0 e8 07             	shr    al,0x7
c0015df6:	c3                   	ret    
c0015df7:	90                   	nop

c0015df8 <RTC::completeRTCRefresh()>:
c0015df8:	55                   	push   ebp
c0015df9:	57                   	push   edi
c0015dfa:	56                   	push   esi
c0015dfb:	53                   	push   ebx
c0015dfc:	83 ec 2c             	sub    esp,0x2c
c0015dff:	8b 1d ec 32 02 c0    	mov    ebx,DWORD PTR ds:0xc00232ec
c0015e05:	83 ec 0c             	sub    esp,0xc
c0015e08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015e0c:	e8 cf ff ff ff       	call   c0015de0 <RTC::get_update_in_progress_flag()>
c0015e11:	83 c4 10             	add    esp,0x10
c0015e14:	84 c0                	test   al,al
c0015e16:	74 0e                	je     c0015e26 <RTC::completeRTCRefresh()+0x2e>
c0015e18:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015e1e:	3b 05 ec 32 02 c0    	cmp    eax,DWORD PTR ds:0xc00232ec
c0015e24:	73 df                	jae    c0015e05 <RTC::completeRTCRefresh()+0xd>
c0015e26:	55                   	push   ebp
c0015e27:	55                   	push   ebp
c0015e28:	6a 00                	push   0x0
c0015e2a:	ff 35 18 0d 02 c0    	push   DWORD PTR ds:0xc0020d18
c0015e30:	e8 71 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e35:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015e39:	58                   	pop    eax
c0015e3a:	5a                   	pop    edx
c0015e3b:	6a 02                	push   0x2
c0015e3d:	ff 35 18 0d 02 c0    	push   DWORD PTR ds:0xc0020d18
c0015e43:	e8 5e 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e48:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0015e4c:	59                   	pop    ecx
c0015e4d:	5b                   	pop    ebx
c0015e4e:	6a 04                	push   0x4
c0015e50:	ff 35 18 0d 02 c0    	push   DWORD PTR ds:0xc0020d18
c0015e56:	e8 4b 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e5b:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0015e5f:	5e                   	pop    esi
c0015e60:	5f                   	pop    edi
c0015e61:	6a 07                	push   0x7
c0015e63:	ff 35 18 0d 02 c0    	push   DWORD PTR ds:0xc0020d18
c0015e69:	e8 38 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e6e:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015e72:	5d                   	pop    ebp
c0015e73:	58                   	pop    eax
c0015e74:	6a 08                	push   0x8
c0015e76:	ff 35 18 0d 02 c0    	push   DWORD PTR ds:0xc0020d18
c0015e7c:	e8 25 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e81:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0015e85:	58                   	pop    eax
c0015e86:	5a                   	pop    edx
c0015e87:	6a 09                	push   0x9
c0015e89:	ff 35 18 0d 02 c0    	push   DWORD PTR ds:0xc0020d18
c0015e8f:	e8 12 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e94:	83 c4 10             	add    esp,0x10
c0015e97:	0f b6 e8             	movzx  ebp,al
c0015e9a:	8b 1d ec 32 02 c0    	mov    ebx,DWORD PTR ds:0xc00232ec
c0015ea0:	83 ec 0c             	sub    esp,0xc
c0015ea3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015ea7:	e8 34 ff ff ff       	call   c0015de0 <RTC::get_update_in_progress_flag()>
c0015eac:	83 c4 10             	add    esp,0x10
c0015eaf:	84 c0                	test   al,al
c0015eb1:	74 0e                	je     c0015ec1 <RTC::completeRTCRefresh()+0xc9>
c0015eb3:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015eb9:	3b 05 ec 32 02 c0    	cmp    eax,DWORD PTR ds:0xc00232ec
c0015ebf:	73 df                	jae    c0015ea0 <RTC::completeRTCRefresh()+0xa8>
c0015ec1:	50                   	push   eax
c0015ec2:	50                   	push   eax
c0015ec3:	6a 00                	push   0x0
c0015ec5:	ff 35 18 0d 02 c0    	push   DWORD PTR ds:0xc0020d18
c0015ecb:	e8 d6 0f ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015ed0:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0015ed4:	58                   	pop    eax
c0015ed5:	5a                   	pop    edx
c0015ed6:	6a 02                	push   0x2
c0015ed8:	ff 35 18 0d 02 c0    	push   DWORD PTR ds:0xc0020d18
c0015ede:	e8 c3 0f ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015ee3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015ee7:	59                   	pop    ecx
c0015ee8:	5b                   	pop    ebx
c0015ee9:	6a 04                	push   0x4
c0015eeb:	ff 35 18 0d 02 c0    	push   DWORD PTR ds:0xc0020d18
c0015ef1:	e8 b0 0f ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015ef6:	5e                   	pop    esi
c0015ef7:	88 c3                	mov    bl,al
c0015ef9:	5f                   	pop    edi
c0015efa:	6a 07                	push   0x7
c0015efc:	ff 35 18 0d 02 c0    	push   DWORD PTR ds:0xc0020d18
c0015f02:	e8 9f 0f ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015f07:	89 c6                	mov    esi,eax
c0015f09:	58                   	pop    eax
c0015f0a:	5a                   	pop    edx
c0015f0b:	6a 08                	push   0x8
c0015f0d:	ff 35 18 0d 02 c0    	push   DWORD PTR ds:0xc0020d18
c0015f13:	e8 8e 0f ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015f18:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0015f1c:	59                   	pop    ecx
c0015f1d:	5f                   	pop    edi
c0015f1e:	6a 09                	push   0x9
c0015f20:	ff 35 18 0d 02 c0    	push   DWORD PTR ds:0xc0020d18
c0015f26:	e8 7b 0f ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015f2b:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0015f2f:	0f b6 f8             	movzx  edi,al
c0015f32:	83 c4 10             	add    esp,0x10
c0015f35:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0015f39:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015f3d:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0015f41:	89 f1                	mov    ecx,esi
c0015f43:	0f 94 c0             	sete   al
c0015f46:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0015f4a:	0f 94 c2             	sete   dl
c0015f4d:	21 d0                	and    eax,edx
c0015f4f:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0015f53:	0f 94 c2             	sete   dl
c0015f56:	21 c2                	and    edx,eax
c0015f58:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0015f5c:	0f 94 c0             	sete   al
c0015f5f:	21 d0                	and    eax,edx
c0015f61:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015f65:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0015f69:	0f 94 c1             	sete   cl
c0015f6c:	84 c8                	test   al,cl
c0015f6e:	75 29                	jne    c0015f99 <RTC::completeRTCRefresh()+0x1a1>
c0015f70:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015f74:	89 fd                	mov    ebp,edi
c0015f76:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015f7a:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0015f7e:	89 f0                	mov    eax,esi
c0015f80:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0015f84:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015f88:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015f8c:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015f90:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015f94:	e9 01 ff ff ff       	jmp    c0015e9a <RTC::completeRTCRefresh()+0xa2>
c0015f99:	39 fd                	cmp    ebp,edi
c0015f9b:	75 d3                	jne    c0015f70 <RTC::completeRTCRefresh()+0x178>
c0015f9d:	55                   	push   ebp
c0015f9e:	55                   	push   ebp
c0015f9f:	6a 0b                	push   0xb
c0015fa1:	ff 35 18 0d 02 c0    	push   DWORD PTR ds:0xc0020d18
c0015fa7:	e8 fa 0e ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015fac:	83 c4 10             	add    esp,0x10
c0015faf:	89 c5                	mov    ebp,eax
c0015fb1:	a8 04                	test   al,0x4
c0015fb3:	75 78                	jne    c001602d <RTC::completeRTCRefresh()+0x235>
c0015fb5:	b1 0a                	mov    cl,0xa
c0015fb7:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0015fbb:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015fbf:	83 e2 0f             	and    edx,0xf
c0015fc2:	c0 e8 04             	shr    al,0x4
c0015fc5:	c1 ef 04             	shr    edi,0x4
c0015fc8:	f6 e1                	mul    cl
c0015fca:	6b ff 0a             	imul   edi,edi,0xa
c0015fcd:	01 d0                	add    eax,edx
c0015fcf:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015fd3:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0015fd7:	83 e2 0f             	and    edx,0xf
c0015fda:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015fde:	c0 e8 04             	shr    al,0x4
c0015fe1:	f6 e1                	mul    cl
c0015fe3:	01 d0                	add    eax,edx
c0015fe5:	88 da                	mov    dl,bl
c0015fe7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015feb:	83 e2 0f             	and    edx,0xf
c0015fee:	88 d8                	mov    al,bl
c0015ff0:	83 e3 80             	and    ebx,0xffffff80
c0015ff3:	c0 e8 04             	shr    al,0x4
c0015ff6:	83 e0 07             	and    eax,0x7
c0015ff9:	f6 e1                	mul    cl
c0015ffb:	01 d0                	add    eax,edx
c0015ffd:	89 f2                	mov    edx,esi
c0015fff:	09 c3                	or     ebx,eax
c0016001:	83 e2 0f             	and    edx,0xf
c0016004:	89 f0                	mov    eax,esi
c0016006:	c0 e8 04             	shr    al,0x4
c0016009:	f6 e1                	mul    cl
c001600b:	8d 34 02             	lea    esi,[edx+eax*1]
c001600e:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0016012:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0016016:	83 e2 0f             	and    edx,0xf
c0016019:	c0 e8 04             	shr    al,0x4
c001601c:	f6 e1                	mul    cl
c001601e:	01 d0                	add    eax,edx
c0016020:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0016024:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016028:	83 e0 0f             	and    eax,0xf
c001602b:	01 c7                	add    edi,eax
c001602d:	83 e5 02             	and    ebp,0x2
c0016030:	75 14                	jne    c0016046 <RTC::completeRTCRefresh()+0x24e>
c0016032:	84 db                	test   bl,bl
c0016034:	79 10                	jns    c0016046 <RTC::completeRTCRefresh()+0x24e>
c0016036:	83 e3 7f             	and    ebx,0x7f
c0016039:	b9 18 00 00 00       	mov    ecx,0x18
c001603e:	8d 43 0c             	lea    eax,[ebx+0xc]
c0016041:	99                   	cdq    
c0016042:	f7 f9                	idiv   ecx
c0016044:	88 d3                	mov    bl,dl
c0016046:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c001604c:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0016052:	77 06                	ja     c001605a <RTC::completeRTCRefresh()+0x262>
c0016054:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c001605a:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c001605f:	31 d2                	xor    edx,edx
c0016061:	c1 e1 10             	shl    ecx,0x10
c0016064:	89 d7                	mov    edi,edx
c0016066:	c1 e5 10             	shl    ebp,0x10
c0016069:	31 c0                	xor    eax,eax
c001606b:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0016071:	09 cf                	or     edi,ecx
c0016073:	89 fa                	mov    edx,edi
c0016075:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0016079:	88 da                	mov    dl,bl
c001607b:	89 f3                	mov    ebx,esi
c001607d:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0016081:	88 d8                	mov    al,bl
c0016083:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0016087:	0f b7 c8             	movzx  ecx,ax
c001608a:	09 e9                	or     ecx,ebp
c001608c:	89 c8                	mov    eax,ecx
c001608e:	51                   	push   ecx
c001608f:	51                   	push   ecx
c0016090:	52                   	push   edx
c0016091:	50                   	push   eax
c0016092:	e8 68 54 ff ff       	call   c000b4ff <datetimeToSeconds(datetime_t)>
c0016097:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001609b:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c00160a1:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c00160a7:	83 c4 3c             	add    esp,0x3c
c00160aa:	5b                   	pop    ebx
c00160ab:	5e                   	pop    esi
c00160ac:	5f                   	pop    edi
c00160ad:	5d                   	pop    ebp
c00160ae:	c3                   	ret    
c00160af:	90                   	nop

c00160b0 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c00160b0:	55                   	push   ebp
c00160b1:	57                   	push   edi
c00160b2:	56                   	push   esi
c00160b3:	53                   	push   ebx
c00160b4:	83 ec 30             	sub    esp,0x30
c00160b7:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00160bb:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00160bf:	6a 00                	push   0x0
c00160c1:	6a 00                	push   0x0
c00160c3:	ff 35 18 0d 02 c0    	push   DWORD PTR ds:0xc0020d18
c00160c9:	e8 ee 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00160ce:	83 c4 0c             	add    esp,0xc
c00160d1:	6a 00                	push   0x0
c00160d3:	6a 02                	push   0x2
c00160d5:	ff 35 18 0d 02 c0    	push   DWORD PTR ds:0xc0020d18
c00160db:	e8 dc 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00160e0:	31 d2                	xor    edx,edx
c00160e2:	89 f9                	mov    ecx,edi
c00160e4:	89 f8                	mov    eax,edi
c00160e6:	c1 e9 10             	shr    ecx,0x10
c00160e9:	0f b6 c4             	movzx  eax,ah
c00160ec:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c00160f0:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00160f4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00160f8:	b9 64 00 00 00       	mov    ecx,0x64
c00160fd:	89 f0                	mov    eax,esi
c00160ff:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0016103:	89 f0                	mov    eax,esi
c0016105:	0f b6 c4             	movzx  eax,ah
c0016108:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001610c:	89 f0                	mov    eax,esi
c001610e:	c1 e8 10             	shr    eax,0x10
c0016111:	66 f7 f1             	div    cx
c0016114:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0016119:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c001611e:	59                   	pop    ecx
c001611f:	5b                   	pop    ebx
c0016120:	89 fb                	mov    ebx,edi
c0016122:	6a 0b                	push   0xb
c0016124:	ff 35 18 0d 02 c0    	push   DWORD PTR ds:0xc0020d18
c001612a:	e8 77 0d ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c001612f:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c0016133:	83 c4 10             	add    esp,0x10
c0016136:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c001613b:	75 74                	jne    c00161b1 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c001613d:	b2 0a                	mov    dl,0xa
c001613f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0016143:	0f b6 c1             	movzx  eax,cl
c0016146:	f6 f2                	div    dl
c0016148:	88 c3                	mov    bl,al
c001614a:	88 e0                	mov    al,ah
c001614c:	c1 e3 04             	shl    ebx,0x4
c001614f:	09 c3                	or     ebx,eax
c0016151:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0016156:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c001615a:	f6 f2                	div    dl
c001615c:	88 c1                	mov    cl,al
c001615e:	88 e0                	mov    al,ah
c0016160:	c1 e1 04             	shl    ecx,0x4
c0016163:	09 c1                	or     ecx,eax
c0016165:	89 f8                	mov    eax,edi
c0016167:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001616b:	0f b6 c0             	movzx  eax,al
c001616e:	f6 f2                	div    dl
c0016170:	88 c3                	mov    bl,al
c0016172:	88 e0                	mov    al,ah
c0016174:	c1 e3 04             	shl    ebx,0x4
c0016177:	09 c3                	or     ebx,eax
c0016179:	89 f0                	mov    eax,esi
c001617b:	0f b6 c0             	movzx  eax,al
c001617e:	f6 f2                	div    dl
c0016180:	88 c1                	mov    cl,al
c0016182:	88 e0                	mov    al,ah
c0016184:	c1 e1 04             	shl    ecx,0x4
c0016187:	09 c1                	or     ecx,eax
c0016189:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001618e:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c0016192:	f6 f2                	div    dl
c0016194:	88 c1                	mov    cl,al
c0016196:	88 e0                	mov    al,ah
c0016198:	c1 e1 04             	shl    ecx,0x4
c001619b:	09 c1                	or     ecx,eax
c001619d:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c00161a2:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00161a6:	f6 f2                	div    dl
c00161a8:	89 c5                	mov    ebp,eax
c00161aa:	88 e0                	mov    al,ah
c00161ac:	c1 e5 04             	shl    ebp,0x4
c00161af:	09 c5                	or     ebp,eax
c00161b1:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c00161b6:	75 17                	jne    c00161cf <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00161b8:	80 fb 0b             	cmp    bl,0xb
c00161bb:	76 0c                	jbe    c00161c9 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c00161bd:	80 eb 0c             	sub    bl,0xc
c00161c0:	75 02                	jne    c00161c4 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c00161c2:	b3 0c                	mov    bl,0xc
c00161c4:	83 cb 80             	or     ebx,0xffffff80
c00161c7:	eb 06                	jmp    c00161cf <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00161c9:	84 db                	test   bl,bl
c00161cb:	75 02                	jne    c00161cf <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00161cd:	b3 0c                	mov    bl,0xc
c00161cf:	0f b6 db             	movzx  ebx,bl
c00161d2:	50                   	push   eax
c00161d3:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00161d8:	50                   	push   eax
c00161d9:	6a 00                	push   0x0
c00161db:	ff 35 18 0d 02 c0    	push   DWORD PTR ds:0xc0020d18
c00161e1:	e8 d6 0d ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00161e6:	83 c4 0c             	add    esp,0xc
c00161e9:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00161ee:	50                   	push   eax
c00161ef:	6a 02                	push   0x2
c00161f1:	ff 35 18 0d 02 c0    	push   DWORD PTR ds:0xc0020d18
c00161f7:	e8 c0 0d ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00161fc:	83 c4 0c             	add    esp,0xc
c00161ff:	53                   	push   ebx
c0016200:	6a 04                	push   0x4
c0016202:	ff 35 18 0d 02 c0    	push   DWORD PTR ds:0xc0020d18
c0016208:	e8 af 0d ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c001620d:	83 c4 0c             	add    esp,0xc
c0016210:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0016215:	50                   	push   eax
c0016216:	6a 07                	push   0x7
c0016218:	ff 35 18 0d 02 c0    	push   DWORD PTR ds:0xc0020d18
c001621e:	e8 99 0d ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0016223:	83 c4 0c             	add    esp,0xc
c0016226:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001622b:	50                   	push   eax
c001622c:	6a 08                	push   0x8
c001622e:	ff 35 18 0d 02 c0    	push   DWORD PTR ds:0xc0020d18
c0016234:	e8 83 0d ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0016239:	83 c4 0c             	add    esp,0xc
c001623c:	89 e8                	mov    eax,ebp
c001623e:	0f b6 e8             	movzx  ebp,al
c0016241:	55                   	push   ebp
c0016242:	6a 09                	push   0x9
c0016244:	ff 35 18 0d 02 c0    	push   DWORD PTR ds:0xc0020d18
c001624a:	e8 6d 0d ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c001624f:	5a                   	pop    edx
c0016250:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016254:	e8 9f fb ff ff       	call   c0015df8 <RTC::completeRTCRefresh()>
c0016259:	83 c4 3c             	add    esp,0x3c
c001625c:	b0 01                	mov    al,0x1
c001625e:	5b                   	pop    ebx
c001625f:	5e                   	pop    esi
c0016260:	5f                   	pop    edi
c0016261:	5d                   	pop    ebp
c0016262:	c3                   	ret    

c0016263 <rtcIRQHandler(regs*, void*)>:
c0016263:	53                   	push   ebx
c0016264:	83 ec 10             	sub    esp,0x10
c0016267:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001626b:	6a 0c                	push   0xc
c001626d:	ff 35 18 0d 02 c0    	push   DWORD PTR ds:0xc0020d18
c0016273:	e8 2e 0c ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0016278:	83 c4 10             	add    esp,0x10
c001627b:	84 c0                	test   al,al
c001627d:	79 24                	jns    c00162a3 <rtcIRQHandler(regs*, void*)+0x40>
c001627f:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0016286:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001628d:	66 ff 05 74 40 02 c0 	inc    WORD PTR ds:0xc0024074
c0016294:	75 0d                	jne    c00162a3 <rtcIRQHandler(regs*, void*)+0x40>
c0016296:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001629a:	83 c4 08             	add    esp,0x8
c001629d:	5b                   	pop    ebx
c001629e:	e9 55 fb ff ff       	jmp    c0015df8 <RTC::completeRTCRefresh()>
c00162a3:	83 c4 08             	add    esp,0x8
c00162a6:	5b                   	pop    ebx
c00162a7:	c3                   	ret    

c00162a8 <RTC::RTC()>:
c00162a8:	83 ec 1c             	sub    esp,0x1c
c00162ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162af:	83 ec 08             	sub    esp,0x8
c00162b2:	68 93 f1 01 c0       	push   0xc001f193
c00162b7:	50                   	push   eax
c00162b8:	e8 1d 51 ff ff       	call   c000b3da <Clock::Clock(char const*)>
c00162bd:	83 c4 10             	add    esp,0x10
c00162c0:	ba b0 f1 01 c0       	mov    edx,0xc001f1b0
c00162c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162c9:	89 10                	mov    DWORD PTR [eax],edx
c00162cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162cf:	83 ec 0c             	sub    esp,0xc
c00162d2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00162d6:	6a 01                	push   0x1
c00162d8:	68 63 62 01 c0       	push   0xc0016263
c00162dd:	6a 08                	push   0x8
c00162df:	50                   	push   eax
c00162e0:	e8 df 55 ff ff       	call   c000b8c4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00162e5:	83 c4 20             	add    esp,0x20
c00162e8:	89 c2                	mov    edx,eax
c00162ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162ee:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00162f4:	fa                   	cli    
c00162f5:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c00162fa:	40                   	inc    eax
c00162fb:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c0016300:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c0016305:	83 ec 08             	sub    esp,0x8
c0016308:	6a 0b                	push   0xb
c001630a:	50                   	push   eax
c001630b:	e8 96 0b ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0016310:	83 c4 10             	add    esp,0x10
c0016313:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016317:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c001631c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0016320:	83 ca 10             	or     edx,0x10
c0016323:	81 e2 ff 00 00 00    	and    edx,0xff
c0016329:	83 ec 04             	sub    esp,0x4
c001632c:	52                   	push   edx
c001632d:	6a 0b                	push   0xb
c001632f:	50                   	push   eax
c0016330:	e8 87 0c ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0016335:	83 c4 10             	add    esp,0x10
c0016338:	83 ec 0c             	sub    esp,0xc
c001633b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001633f:	e8 b4 fa ff ff       	call   c0015df8 <RTC::completeRTCRefresh()>
c0016344:	83 c4 10             	add    esp,0x10
c0016347:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c001634c:	48                   	dec    eax
c001634d:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c0016352:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c0016357:	85 c0                	test   eax,eax
c0016359:	75 01                	jne    c001635c <RTC::RTC()+0xb4>
c001635b:	fb                   	sti    
c001635c:	90                   	nop
c001635d:	83 c4 1c             	add    esp,0x1c
c0016360:	c3                   	ret    
c0016361:	66 90                	xchg   ax,ax
c0016363:	90                   	nop

c0016364 <HalConsoleScroll(int, int)>:
c0016364:	83 ec 10             	sub    esp,0x10
c0016367:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001636f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0016377:	90                   	nop
c0016378:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001637d:	0f 8f e1 00 00 00    	jg     c0016464 <HalConsoleScroll(int, int)+0x100>
c0016383:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001638b:	90                   	nop
c001638c:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0016394:	0f 8f be 00 00 00    	jg     c0016458 <HalConsoleScroll(int, int)+0xf4>
c001639a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001639e:	89 d0                	mov    eax,edx
c00163a0:	c1 e0 02             	shl    eax,0x2
c00163a3:	01 d0                	add    eax,edx
c00163a5:	c1 e0 05             	shl    eax,0x5
c00163a8:	89 c2                	mov    edx,eax
c00163aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00163ae:	01 d0                	add    eax,edx
c00163b0:	89 c2                	mov    edx,eax
c00163b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163b6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00163b9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00163bd:	89 d0                	mov    eax,edx
c00163bf:	c1 e0 02             	shl    eax,0x2
c00163c2:	01 d0                	add    eax,edx
c00163c4:	c1 e0 05             	shl    eax,0x5
c00163c7:	89 c2                	mov    edx,eax
c00163c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00163cd:	01 d0                	add    eax,edx
c00163cf:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c00163d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163d9:	01 c2                	add    edx,eax
c00163db:	8a 01                	mov    al,BYTE PTR [ecx]
c00163dd:	88 02                	mov    BYTE PTR [edx],al
c00163df:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00163e4:	75 66                	jne    c001644c <HalConsoleScroll(int, int)+0xe8>
c00163e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00163ea:	83 e0 01             	and    eax,0x1
c00163ed:	74 39                	je     c0016428 <HalConsoleScroll(int, int)+0xc4>
c00163ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00163f3:	83 e0 0f             	and    eax,0xf
c00163f6:	88 c2                	mov    dl,al
c00163f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00163fc:	c1 e0 04             	shl    eax,0x4
c00163ff:	88 d1                	mov    cl,dl
c0016401:	09 c1                	or     ecx,eax
c0016403:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016407:	89 d0                	mov    eax,edx
c0016409:	c1 e0 02             	shl    eax,0x2
c001640c:	01 d0                	add    eax,edx
c001640e:	c1 e0 05             	shl    eax,0x5
c0016411:	89 c2                	mov    edx,eax
c0016413:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016417:	01 d0                	add    eax,edx
c0016419:	89 c2                	mov    edx,eax
c001641b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001641f:	01 d0                	add    eax,edx
c0016421:	88 ca                	mov    dl,cl
c0016423:	88 10                	mov    BYTE PTR [eax],dl
c0016425:	eb 25                	jmp    c001644c <HalConsoleScroll(int, int)+0xe8>
c0016427:	90                   	nop
c0016428:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001642c:	89 d0                	mov    eax,edx
c001642e:	c1 e0 02             	shl    eax,0x2
c0016431:	01 d0                	add    eax,edx
c0016433:	c1 e0 05             	shl    eax,0x5
c0016436:	89 c2                	mov    edx,eax
c0016438:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001643c:	01 d0                	add    eax,edx
c001643e:	89 c2                	mov    edx,eax
c0016440:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016444:	01 d0                	add    eax,edx
c0016446:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0016449:	8d 76 00             	lea    esi,[esi+0x0]
c001644c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0016450:	e9 37 ff ff ff       	jmp    c001638c <HalConsoleScroll(int, int)+0x28>
c0016455:	8d 76 00             	lea    esi,[esi+0x0]
c0016458:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001645c:	e9 17 ff ff ff       	jmp    c0016378 <HalConsoleScroll(int, int)+0x14>
c0016461:	8d 76 00             	lea    esi,[esi+0x0]
c0016464:	90                   	nop
c0016465:	83 c4 10             	add    esp,0x10
c0016468:	c3                   	ret    
c0016469:	8d 76 00             	lea    esi,[esi+0x0]

c001646c <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001646c:	83 ec 14             	sub    esp,0x14
c001646f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016473:	88 04 24             	mov    BYTE PTR [esp],al
c0016476:	8a 04 24             	mov    al,BYTE PTR [esp]
c0016479:	25 ff 00 00 00       	and    eax,0xff
c001647e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016482:	89 d1                	mov    ecx,edx
c0016484:	83 e1 0f             	and    ecx,0xf
c0016487:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001648b:	c1 e2 04             	shl    edx,0x4
c001648e:	81 e2 ff 00 00 00    	and    edx,0xff
c0016494:	09 ca                	or     edx,ecx
c0016496:	c1 e2 08             	shl    edx,0x8
c0016499:	09 d0                	or     eax,edx
c001649b:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00164a0:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c00164a8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00164ac:	89 d0                	mov    eax,edx
c00164ae:	c1 e0 02             	shl    eax,0x2
c00164b1:	01 d0                	add    eax,edx
c00164b3:	c1 e0 04             	shl    eax,0x4
c00164b6:	89 c2                	mov    edx,eax
c00164b8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00164bc:	01 d0                	add    eax,edx
c00164be:	01 c0                	add    eax,eax
c00164c0:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00164c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00164c8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00164cd:	66 89 02             	mov    WORD PTR [edx],ax
c00164d0:	90                   	nop
c00164d1:	83 c4 14             	add    esp,0x14
c00164d4:	c3                   	ret    
c00164d5:	8d 76 00             	lea    esi,[esi+0x0]

c00164d8 <HalConsoleCursorUpdate(int, int)>:
c00164d8:	83 ec 20             	sub    esp,0x20
c00164db:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00164df:	89 c2                	mov    edx,eax
c00164e1:	89 d0                	mov    eax,edx
c00164e3:	c1 e0 02             	shl    eax,0x2
c00164e6:	01 d0                	add    eax,edx
c00164e8:	c1 e0 04             	shl    eax,0x4
c00164eb:	89 c2                	mov    edx,eax
c00164ed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00164f1:	01 d0                	add    eax,edx
c00164f3:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00164f8:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c00164ff:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0016504:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016508:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001650c:	ee                   	out    dx,al
c001650d:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0016512:	25 ff 00 00 00       	and    eax,0xff
c0016517:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001651e:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0016522:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0016526:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001652a:	ee                   	out    dx,al
c001652b:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0016532:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0016537:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001653b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001653f:	ee                   	out    dx,al
c0016540:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0016545:	66 c1 e8 08          	shr    ax,0x8
c0016549:	25 ff 00 00 00       	and    eax,0xff
c001654e:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0016555:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0016559:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001655d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016561:	ee                   	out    dx,al
c0016562:	90                   	nop
c0016563:	83 c4 20             	add    esp,0x20
c0016566:	c3                   	ret    
c0016567:	90                   	nop

c0016568 <FAT::getName()>:
c0016568:	b8 e4 f1 01 c0       	mov    eax,0xc001f1e4
c001656d:	c3                   	ret    
c001656e:	66 90                	xchg   ax,ax

c0016570 <FAT::tell(void*, unsigned long long*)>:
c0016570:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016575:	75 09                	jne    c0016580 <FAT::tell(void*, unsigned long long*)+0x10>
c0016577:	b8 04 00 00 00       	mov    eax,0x4
c001657c:	c3                   	ret    
c001657d:	8d 76 00             	lea    esi,[esi+0x0]
c0016580:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016585:	75 09                	jne    c0016590 <FAT::tell(void*, unsigned long long*)+0x20>
c0016587:	b8 04 00 00 00       	mov    eax,0x4
c001658c:	c3                   	ret    
c001658d:	8d 76 00             	lea    esi,[esi+0x0]
c0016590:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016594:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0016597:	ba 00 00 00 00       	mov    edx,0x0
c001659c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00165a0:	89 01                	mov    DWORD PTR [ecx],eax
c00165a2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00165a5:	b8 00 00 00 00       	mov    eax,0x0
c00165aa:	c3                   	ret    
c00165ab:	90                   	nop

c00165ac <FAT::stat(void*, unsigned long long*)>:
c00165ac:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00165b1:	75 09                	jne    c00165bc <FAT::stat(void*, unsigned long long*)+0x10>
c00165b3:	b8 04 00 00 00       	mov    eax,0x4
c00165b8:	c3                   	ret    
c00165b9:	8d 76 00             	lea    esi,[esi+0x0]
c00165bc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00165c1:	75 09                	jne    c00165cc <FAT::stat(void*, unsigned long long*)+0x20>
c00165c3:	b8 04 00 00 00       	mov    eax,0x4
c00165c8:	c3                   	ret    
c00165c9:	8d 76 00             	lea    esi,[esi+0x0]
c00165cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165d0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00165d3:	ba 00 00 00 00       	mov    edx,0x0
c00165d8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00165dc:	89 01                	mov    DWORD PTR [ecx],eax
c00165de:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00165e1:	b8 00 00 00 00       	mov    eax,0x0
c00165e6:	c3                   	ret    
c00165e7:	90                   	nop

c00165e8 <FAT::~FAT()>:
c00165e8:	83 ec 0c             	sub    esp,0xc
c00165eb:	ba 30 f2 01 c0       	mov    edx,0xc001f230
c00165f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165f4:	89 10                	mov    DWORD PTR [eax],edx
c00165f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165fa:	83 ec 0c             	sub    esp,0xc
c00165fd:	50                   	push   eax
c00165fe:	e8 1b 42 ff ff       	call   c000a81e <Filesystem::~Filesystem()>
c0016603:	83 c4 10             	add    esp,0x10
c0016606:	90                   	nop
c0016607:	83 c4 0c             	add    esp,0xc
c001660a:	c3                   	ret    
c001660b:	90                   	nop

c001660c <FAT::~FAT()>:
c001660c:	83 ec 0c             	sub    esp,0xc
c001660f:	83 ec 0c             	sub    esp,0xc
c0016612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016616:	e8 cd ff ff ff       	call   c00165e8 <FAT::~FAT()>
c001661b:	83 c4 10             	add    esp,0x10
c001661e:	83 ec 08             	sub    esp,0x8
c0016621:	6a 08                	push   0x8
c0016623:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016627:	e8 b6 3d ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001662c:	83 c4 10             	add    esp,0x10
c001662f:	83 c4 0c             	add    esp,0xc
c0016632:	c3                   	ret    
c0016633:	90                   	nop

c0016634 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0016634:	83 ec 1c             	sub    esp,0x1c
c0016637:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001663e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0016643:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016647:	8b 04 85 a0 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf60]
c001664e:	83 f8 ff             	cmp    eax,0xffffffff
c0016651:	75 35                	jne    c0016688 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0016653:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016657:	88 c2                	mov    dl,al
c0016659:	a1 80 40 02 c0       	mov    eax,ds:0xc0024080
c001665e:	01 d0                	add    eax,edx
c0016660:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0016664:	8b 15 80 40 02 c0    	mov    edx,DWORD PTR ds:0xc0024080
c001666a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001666e:	89 14 85 a0 40 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbf60],edx
c0016675:	a1 80 40 02 c0       	mov    eax,ds:0xc0024080
c001667a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001667e:	89 14 85 20 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbee0],edx
c0016685:	eb 19                	jmp    c00166a0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0016687:	90                   	nop
c0016688:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001668c:	88 c2                	mov    dl,al
c001668e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016692:	8b 04 85 a0 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf60]
c0016699:	01 d0                	add    eax,edx
c001669b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001669f:	90                   	nop
c00166a0:	83 ec 04             	sub    esp,0x4
c00166a3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00166a7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00166ab:	8d 44 24 15          	lea    eax,[esp+0x15]
c00166af:	50                   	push   eax
c00166b0:	e8 9f e7 fe ff       	call   c0004e54 <f_getlabel>
c00166b5:	83 c4 10             	add    esp,0x10
c00166b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00166bc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00166c1:	75 09                	jne    c00166cc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c00166c3:	b8 00 00 00 00       	mov    eax,0x0
c00166c8:	eb 0a                	jmp    c00166d4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c00166ca:	66 90                	xchg   ax,ax
c00166cc:	b8 01 00 00 00       	mov    eax,0x1
c00166d1:	8d 76 00             	lea    esi,[esi+0x0]
c00166d4:	83 c4 1c             	add    esp,0x1c
c00166d7:	c3                   	ret    

c00166d8 <FAT::setlabel(LogicalDisk*, int, char*)>:
c00166d8:	57                   	push   edi
c00166d9:	83 ec 58             	sub    esp,0x58
c00166dc:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00166e4:	8d 54 24 10          	lea    edx,[esp+0x10]
c00166e8:	b8 00 00 00 00       	mov    eax,0x0
c00166ed:	b9 0f 00 00 00       	mov    ecx,0xf
c00166f2:	fc                   	cld    
c00166f3:	89 d7                	mov    edi,edx
c00166f5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00166f7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00166fb:	8b 04 85 a0 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf60]
c0016702:	83 f8 ff             	cmp    eax,0xffffffff
c0016705:	75 35                	jne    c001673c <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0016707:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001670b:	88 c2                	mov    dl,al
c001670d:	a1 80 40 02 c0       	mov    eax,ds:0xc0024080
c0016712:	01 d0                	add    eax,edx
c0016714:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016718:	8b 15 80 40 02 c0    	mov    edx,DWORD PTR ds:0xc0024080
c001671e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016722:	89 14 85 a0 40 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbf60],edx
c0016729:	a1 80 40 02 c0       	mov    eax,ds:0xc0024080
c001672e:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0016732:	89 14 85 20 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbee0],edx
c0016739:	eb 19                	jmp    c0016754 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001673b:	90                   	nop
c001673c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016740:	88 c2                	mov    dl,al
c0016742:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016746:	8b 04 85 a0 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf60]
c001674d:	01 d0                	add    eax,edx
c001674f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016753:	90                   	nop
c0016754:	83 ec 08             	sub    esp,0x8
c0016757:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001675b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001675f:	50                   	push   eax
c0016760:	e8 5b a0 fe ff       	call   c00007c0 <strcat>
c0016765:	83 c4 10             	add    esp,0x10
c0016768:	83 ec 0c             	sub    esp,0xc
c001676b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001676f:	50                   	push   eax
c0016770:	e8 30 e8 fe ff       	call   c0004fa5 <f_setlabel>
c0016775:	83 c4 10             	add    esp,0x10
c0016778:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001677c:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0016781:	75 09                	jne    c001678c <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0016783:	b8 00 00 00 00       	mov    eax,0x0
c0016788:	eb 0a                	jmp    c0016794 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001678a:	66 90                	xchg   ax,ax
c001678c:	b8 01 00 00 00       	mov    eax,0x1
c0016791:	8d 76 00             	lea    esi,[esi+0x0]
c0016794:	83 c4 58             	add    esp,0x58
c0016797:	5f                   	pop    edi
c0016798:	c3                   	ret    
c0016799:	90                   	nop
c001679a:	66 90                	xchg   ax,ax

c001679c <FAT::format(LogicalDisk*, int, char const*, int)>:
c001679c:	83 ec 2c             	sub    esp,0x2c
c001679f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00167a7:	83 ec 08             	sub    esp,0x8
c00167aa:	68 08 f2 01 c0       	push   0xc001f208
c00167af:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00167b3:	e8 28 9f fe ff       	call   c00006e0 <strcmp>
c00167b8:	83 c4 10             	add    esp,0x10
c00167bb:	85 c0                	test   eax,eax
c00167bd:	0f 94 c0             	sete   al
c00167c0:	84 c0                	test   al,al
c00167c2:	74 10                	je     c00167d4 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00167c4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00167cc:	e9 b3 00 00 00       	jmp    c0016884 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00167d1:	8d 76 00             	lea    esi,[esi+0x0]
c00167d4:	83 ec 08             	sub    esp,0x8
c00167d7:	68 fa f1 01 c0       	push   0xc001f1fa
c00167dc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00167e0:	e8 fb 9e fe ff       	call   c00006e0 <strcmp>
c00167e5:	83 c4 10             	add    esp,0x10
c00167e8:	85 c0                	test   eax,eax
c00167ea:	0f 94 c0             	sete   al
c00167ed:	84 c0                	test   al,al
c00167ef:	74 0f                	je     c0016800 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c00167f1:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00167f9:	e9 86 00 00 00       	jmp    c0016884 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00167fe:	66 90                	xchg   ax,ax
c0016800:	83 ec 08             	sub    esp,0x8
c0016803:	68 00 f2 01 c0       	push   0xc001f200
c0016808:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001680c:	e8 cf 9e fe ff       	call   c00006e0 <strcmp>
c0016811:	83 c4 10             	add    esp,0x10
c0016814:	85 c0                	test   eax,eax
c0016816:	0f 94 c0             	sete   al
c0016819:	84 c0                	test   al,al
c001681b:	74 0b                	je     c0016828 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001681d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016825:	eb 5d                	jmp    c0016884 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016827:	90                   	nop
c0016828:	83 ec 08             	sub    esp,0x8
c001682b:	68 fc cf 01 c0       	push   0xc001cffc
c0016830:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016834:	e8 a7 9e fe ff       	call   c00006e0 <strcmp>
c0016839:	83 c4 10             	add    esp,0x10
c001683c:	85 c0                	test   eax,eax
c001683e:	0f 94 c0             	sete   al
c0016841:	84 c0                	test   al,al
c0016843:	74 0b                	je     c0016850 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c0016845:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001684d:	eb 35                	jmp    c0016884 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001684f:	90                   	nop
c0016850:	83 ec 08             	sub    esp,0x8
c0016853:	68 06 f2 01 c0       	push   0xc001f206
c0016858:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001685c:	e8 7f 9e fe ff       	call   c00006e0 <strcmp>
c0016861:	83 c4 10             	add    esp,0x10
c0016864:	85 c0                	test   eax,eax
c0016866:	0f 94 c0             	sete   al
c0016869:	84 c0                	test   al,al
c001686b:	74 0b                	je     c0016878 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001686d:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0016875:	eb 0d                	jmp    c0016884 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016877:	90                   	nop
c0016878:	b8 08 00 00 00       	mov    eax,0x8
c001687d:	e9 ea 00 00 00       	jmp    c001696c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016882:	66 90                	xchg   ax,ax
c0016884:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001688b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0016890:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016894:	8b 04 85 a0 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf60]
c001689b:	83 f8 ff             	cmp    eax,0xffffffff
c001689e:	75 34                	jne    c00168d4 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c00168a0:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00168a4:	88 c2                	mov    dl,al
c00168a6:	a1 80 40 02 c0       	mov    eax,ds:0xc0024080
c00168ab:	01 d0                	add    eax,edx
c00168ad:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00168b1:	8b 15 80 40 02 c0    	mov    edx,DWORD PTR ds:0xc0024080
c00168b7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00168bb:	89 14 85 a0 40 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbf60],edx
c00168c2:	a1 80 40 02 c0       	mov    eax,ds:0xc0024080
c00168c7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00168cb:	89 14 85 20 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbee0],edx
c00168d2:	eb 18                	jmp    c00168ec <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c00168d4:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00168d8:	88 c2                	mov    dl,al
c00168da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00168de:	8b 04 85 a0 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf60]
c00168e5:	01 d0                	add    eax,edx
c00168e7:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00168eb:	90                   	nop
c00168ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00168f0:	88 04 24             	mov    BYTE PTR [esp],al
c00168f3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00168f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00168fb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016903:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0016908:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016910:	83 ec 0c             	sub    esp,0xc
c0016913:	68 00 20 00 00       	push   0x2000
c0016918:	e8 9c 0e ff ff       	call   c00077b9 <malloc>
c001691d:	83 c4 10             	add    esp,0x10
c0016920:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016924:	68 00 20 00 00       	push   0x2000
c0016929:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001692d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016931:	50                   	push   eax
c0016932:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0016936:	50                   	push   eax
c0016937:	e8 59 e9 fe ff       	call   c0005295 <f_mkfs>
c001693c:	83 c4 10             	add    esp,0x10
c001693f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016943:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0016948:	75 0a                	jne    c0016954 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001694a:	b8 00 00 00 00       	mov    eax,0x0
c001694f:	eb 1b                	jmp    c001696c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016951:	8d 76 00             	lea    esi,[esi+0x0]
c0016954:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0016959:	75 09                	jne    c0016964 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001695b:	b8 09 00 00 00       	mov    eax,0x9
c0016960:	eb 0a                	jmp    c001696c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016962:	66 90                	xchg   ax,ax
c0016964:	b8 01 00 00 00       	mov    eax,0x1
c0016969:	8d 76 00             	lea    esi,[esi+0x0]
c001696c:	83 c4 2c             	add    esp,0x2c
c001696f:	c3                   	ret    

c0016970 <FAT::tryMount(LogicalDisk*, int)>:
c0016970:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0016976:	a1 80 40 02 c0       	mov    eax,ds:0xc0024080
c001697b:	83 f8 14             	cmp    eax,0x14
c001697e:	75 18                	jne    c0016998 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0016980:	83 ec 0c             	sub    esp,0xc
c0016983:	68 0c f2 01 c0       	push   0xc001f20c
c0016988:	e8 b6 97 ff ff       	call   c0010143 <KePanic(char const*)>
c001698d:	83 c4 10             	add    esp,0x10
c0016990:	b0 00                	mov    al,0x0
c0016992:	e9 e9 01 00 00       	jmp    c0016b80 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016997:	90                   	nop
c0016998:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001699f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00169a5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00169ab:	3d 00 02 00 00       	cmp    eax,0x200
c00169b0:	74 0a                	je     c00169bc <FAT::tryMount(LogicalDisk*, int)+0x4c>
c00169b2:	b0 00                	mov    al,0x0
c00169b4:	e9 c7 01 00 00       	jmp    c0016b80 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00169b9:	8d 76 00             	lea    esi,[esi+0x0]
c00169bc:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00169c4:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00169cb:	8b 04 85 a0 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf60]
c00169d2:	83 f8 ff             	cmp    eax,0xffffffff
c00169d5:	74 09                	je     c00169e0 <FAT::tryMount(LogicalDisk*, int)+0x70>
c00169d7:	b0 01                	mov    al,0x1
c00169d9:	e9 a2 01 00 00       	jmp    c0016b80 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00169de:	66 90                	xchg   ax,ax
c00169e0:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c00169ea:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c00169f2:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c00169f9:	88 c2                	mov    dl,al
c00169fb:	a1 80 40 02 c0       	mov    eax,ds:0xc0024080
c0016a00:	01 d0                	add    eax,edx
c0016a02:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0016a09:	8b 15 80 40 02 c0    	mov    edx,DWORD PTR ds:0xc0024080
c0016a0f:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0016a16:	89 14 85 a0 40 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbf60],edx
c0016a1d:	a1 80 40 02 c0       	mov    eax,ds:0xc0024080
c0016a22:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0016a29:	89 14 85 20 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbee0],edx
c0016a30:	83 ec 0c             	sub    esp,0xc
c0016a33:	68 34 02 00 00       	push   0x234
c0016a38:	e8 7c 0d ff ff       	call   c00077b9 <malloc>
c0016a3d:	83 c4 10             	add    esp,0x10
c0016a40:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0016a47:	83 ec 04             	sub    esp,0x4
c0016a4a:	6a 00                	push   0x0
c0016a4c:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016a53:	50                   	push   eax
c0016a54:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016a5b:	e8 5b d0 fe ff       	call   c0003abb <f_mount>
c0016a60:	83 c4 10             	add    esp,0x10
c0016a63:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016a6a:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0016a72:	74 1c                	je     c0016a90 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0016a74:	83 ec 0c             	sub    esp,0xc
c0016a77:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016a7e:	e8 56 0d ff ff       	call   c00077d9 <rfree>
c0016a83:	83 c4 10             	add    esp,0x10
c0016a86:	b0 00                	mov    al,0x0
c0016a88:	e9 f3 00 00 00       	jmp    c0016b80 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016a8d:	8d 76 00             	lea    esi,[esi+0x0]
c0016a90:	83 ec 04             	sub    esp,0x4
c0016a93:	68 00 01 00 00       	push   0x100
c0016a98:	6a 00                	push   0x0
c0016a9a:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016aa1:	50                   	push   eax
c0016aa2:	e8 29 9a fe ff       	call   c00004d0 <memset>
c0016aa7:	83 c4 10             	add    esp,0x10
c0016aaa:	83 ec 08             	sub    esp,0x8
c0016aad:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016ab4:	50                   	push   eax
c0016ab5:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016abc:	50                   	push   eax
c0016abd:	e8 fe 9c fe ff       	call   c00007c0 <strcat>
c0016ac2:	83 c4 10             	add    esp,0x10
c0016ac5:	83 ec 08             	sub    esp,0x8
c0016ac8:	68 1a f2 01 c0       	push   0xc001f21a
c0016acd:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016ad4:	50                   	push   eax
c0016ad5:	e8 e6 9c fe ff       	call   c00007c0 <strcat>
c0016ada:	83 c4 10             	add    esp,0x10
c0016add:	83 ec 04             	sub    esp,0x4
c0016ae0:	6a 01                	push   0x1
c0016ae2:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0016ae9:	50                   	push   eax
c0016aea:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016aee:	50                   	push   eax
c0016aef:	e8 29 d0 fe ff       	call   c0003b1d <f_open>
c0016af4:	83 c4 10             	add    esp,0x10
c0016af7:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016afe:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0016b05:	85 c0                	test   eax,eax
c0016b07:	74 0b                	je     c0016b14 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0016b09:	78 31                	js     c0016b3c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016b0b:	83 e8 04             	sub    eax,0x4
c0016b0e:	83 f8 01             	cmp    eax,0x1
c0016b11:	77 29                	ja     c0016b3c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016b13:	90                   	nop
c0016b14:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0016b1c:	83 ec 0c             	sub    esp,0xc
c0016b1f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016b23:	50                   	push   eax
c0016b24:	e8 a7 d7 fe ff       	call   c00042d0 <f_close>
c0016b29:	83 c4 10             	add    esp,0x10
c0016b2c:	90                   	nop
c0016b2d:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c0016b35:	74 41                	je     c0016b78 <FAT::tryMount(LogicalDisk*, int)+0x208>
c0016b37:	eb 33                	jmp    c0016b6c <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0016b39:	8d 76 00             	lea    esi,[esi+0x0]
c0016b3c:	83 ec 0c             	sub    esp,0xc
c0016b3f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016b46:	e8 8e 0c ff ff       	call   c00077d9 <rfree>
c0016b4b:	83 c4 10             	add    esp,0x10
c0016b4e:	83 ec 04             	sub    esp,0x4
c0016b51:	6a 00                	push   0x0
c0016b53:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016b5a:	50                   	push   eax
c0016b5b:	6a 00                	push   0x0
c0016b5d:	e8 59 cf fe ff       	call   c0003abb <f_mount>
c0016b62:	83 c4 10             	add    esp,0x10
c0016b65:	b0 00                	mov    al,0x0
c0016b67:	eb 17                	jmp    c0016b80 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016b69:	8d 76 00             	lea    esi,[esi+0x0]
c0016b6c:	a1 80 40 02 c0       	mov    eax,ds:0xc0024080
c0016b71:	40                   	inc    eax
c0016b72:	a3 80 40 02 c0       	mov    ds:0xc0024080,eax
c0016b77:	90                   	nop
c0016b78:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0016b7f:	90                   	nop
c0016b80:	81 c4 4c 03 00 00    	add    esp,0x34c
c0016b86:	c3                   	ret    
c0016b87:	90                   	nop

c0016b88 <FAT::allocateSwapfile(char const*, int)>:
c0016b88:	55                   	push   ebp
c0016b89:	57                   	push   edi
c0016b8a:	56                   	push   esi
c0016b8b:	53                   	push   ebx
c0016b8c:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0016b92:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0016b9d:	83 ec 0c             	sub    esp,0xc
c0016ba0:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0016ba7:	e8 0d 0c ff ff       	call   c00077b9 <malloc>
c0016bac:	83 c4 10             	add    esp,0x10
c0016baf:	89 c7                	mov    edi,eax
c0016bb1:	a1 f0 3f 02 c0       	mov    eax,ds:0xc0023ff0
c0016bb6:	83 ec 04             	sub    esp,0x4
c0016bb9:	50                   	push   eax
c0016bba:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0016bc1:	57                   	push   edi
c0016bc2:	e8 87 3e ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c0016bc7:	83 c4 10             	add    esp,0x10
c0016bca:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0016bd1:	83 ec 04             	sub    esp,0x4
c0016bd4:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016bd8:	50                   	push   eax
c0016bd9:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016bdd:	50                   	push   eax
c0016bde:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016be5:	e8 d0 41 ff ff       	call   c000adba <File::stat(unsigned long long*, bool*)>
c0016bea:	83 c4 10             	add    esp,0x10
c0016bed:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016bf4:	c1 e0 14             	shl    eax,0x14
c0016bf7:	89 c7                	mov    edi,eax
c0016bf9:	89 c5                	mov    ebp,eax
c0016bfb:	c1 fd 1f             	sar    ebp,0x1f
c0016bfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c02:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016c06:	89 f9                	mov    ecx,edi
c0016c08:	31 c1                	xor    ecx,eax
c0016c0a:	89 cb                	mov    ebx,ecx
c0016c0c:	89 e9                	mov    ecx,ebp
c0016c0e:	31 d1                	xor    ecx,edx
c0016c10:	89 ce                	mov    esi,ecx
c0016c12:	89 f0                	mov    eax,esi
c0016c14:	09 d8                	or     eax,ebx
c0016c16:	0f 84 9c 00 00 00    	je     c0016cb8 <FAT::allocateSwapfile(char const*, int)+0x130>
c0016c1c:	83 ec 0c             	sub    esp,0xc
c0016c1f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c26:	e8 5b 40 ff ff       	call   c000ac86 <File::unlink()>
c0016c2b:	83 c4 10             	add    esp,0x10
c0016c2e:	83 ec 08             	sub    esp,0x8
c0016c31:	6a 12                	push   0x12
c0016c33:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c3a:	e8 cf 3e ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c0016c3f:	83 c4 10             	add    esp,0x10
c0016c42:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016c49:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016c4f:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016c56:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016c5d:	c1 e0 14             	shl    eax,0x14
c0016c60:	83 ec 04             	sub    esp,0x4
c0016c63:	6a 01                	push   0x1
c0016c65:	50                   	push   eax
c0016c66:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0016c6d:	e8 c3 e4 fe ff       	call   c0005135 <f_expand>
c0016c72:	83 c4 10             	add    esp,0x10
c0016c75:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016c7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c7e:	83 c0 10             	add    eax,0x10
c0016c81:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c83:	83 ec 0c             	sub    esp,0xc
c0016c86:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016c8a:	52                   	push   edx
c0016c8b:	8d 54 24 30          	lea    edx,[esp+0x30]
c0016c8f:	52                   	push   edx
c0016c90:	6a 00                	push   0x0
c0016c92:	68 00 04 00 00       	push   0x400
c0016c97:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016c9e:	ff d0                	call   eax
c0016ca0:	83 c4 20             	add    esp,0x20
c0016ca3:	83 ec 0c             	sub    esp,0xc
c0016ca6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016cad:	e8 ba 3e ff ff       	call   c000ab6c <File::close()>
c0016cb2:	83 c4 10             	add    esp,0x10
c0016cb5:	8d 76 00             	lea    esi,[esi+0x0]
c0016cb8:	83 ec 08             	sub    esp,0x8
c0016cbb:	6a 01                	push   0x1
c0016cbd:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016cc4:	e8 45 3e ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c0016cc9:	83 c4 10             	add    esp,0x10
c0016ccc:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016cd3:	8b 00                	mov    eax,DWORD PTR [eax]
c0016cd5:	83 c0 0c             	add    eax,0xc
c0016cd8:	8b 00                	mov    eax,DWORD PTR [eax]
c0016cda:	83 ec 0c             	sub    esp,0xc
c0016cdd:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016ce1:	52                   	push   edx
c0016ce2:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0016ce6:	52                   	push   edx
c0016ce7:	6a 00                	push   0x0
c0016ce9:	6a 04                	push   0x4
c0016ceb:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016cf2:	ff d0                	call   eax
c0016cf4:	83 c4 20             	add    esp,0x20
c0016cf7:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016cfe:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016d04:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016d0b:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0016d12:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016d15:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0016d1c:	83 ec 0c             	sub    esp,0xc
c0016d1f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016d26:	e8 41 3e ff ff       	call   c000ab6c <File::close()>
c0016d2b:	83 c4 10             	add    esp,0x10
c0016d2e:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0016d35:	ba 00 00 00 00       	mov    edx,0x0
c0016d3a:	81 c4 3c 04 00 00    	add    esp,0x43c
c0016d40:	5b                   	pop    ebx
c0016d41:	5e                   	pop    esi
c0016d42:	5f                   	pop    edi
c0016d43:	5d                   	pop    ebp
c0016d44:	c3                   	ret    
c0016d45:	90                   	nop
c0016d46:	66 90                	xchg   ax,ax

c0016d48 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0016d48:	57                   	push   edi
c0016d49:	56                   	push   esi
c0016d4a:	53                   	push   ebx
c0016d4b:	81 ec 50 02 00 00    	sub    esp,0x250
c0016d51:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0016d59:	74 0d                	je     c0016d68 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0016d5b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0016d63:	75 0f                	jne    c0016d74 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0016d65:	8d 76 00             	lea    esi,[esi+0x0]
c0016d68:	b8 04 00 00 00       	mov    eax,0x4
c0016d6d:	e9 36 01 00 00       	jmp    c0016ea8 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016d72:	66 90                	xchg   ax,ax
c0016d74:	83 ec 08             	sub    esp,0x8
c0016d77:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016d7e:	50                   	push   eax
c0016d7f:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0016d86:	e8 08 d8 fe ff       	call   c0004593 <f_readdir>
c0016d8b:	83 c4 10             	add    esp,0x10
c0016d8e:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0016d95:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0016d9c:	83 ec 0c             	sub    esp,0xc
c0016d9f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016da6:	83 c0 16             	add    eax,0x16
c0016da9:	50                   	push   eax
c0016daa:	e8 91 97 fe ff       	call   c0000540 <strlen>
c0016daf:	83 c4 10             	add    esp,0x10
c0016db2:	ba 00 00 00 00       	mov    edx,0x0
c0016db7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016dbb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016dbf:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0016dc6:	25 ff 00 00 00       	and    eax,0xff
c0016dcb:	83 e0 10             	and    eax,0x10
c0016dce:	74 08                	je     c0016dd8 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0016dd0:	b8 02 00 00 00       	mov    eax,0x2
c0016dd5:	eb 09                	jmp    c0016de0 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0016dd7:	90                   	nop
c0016dd8:	b8 01 00 00 00       	mov    eax,0x1
c0016ddd:	8d 76 00             	lea    esi,[esi+0x0]
c0016de0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016de4:	83 ec 08             	sub    esp,0x8
c0016de7:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016dee:	83 c0 16             	add    eax,0x16
c0016df1:	50                   	push   eax
c0016df2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016df6:	83 c0 10             	add    eax,0x10
c0016df9:	50                   	push   eax
c0016dfa:	e8 01 98 fe ff       	call   c0000600 <strcpy>
c0016dff:	83 c4 10             	add    esp,0x10
c0016e02:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0016e09:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0016e10:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016e14:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0016e1b:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0016e22:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0016e29:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0016e30:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0016e37:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0016e3e:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0016e45:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0016e4c:	89 c6                	mov    esi,eax
c0016e4e:	89 d7                	mov    edi,edx
c0016e50:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e52:	89 c8                	mov    eax,ecx
c0016e54:	89 fa                	mov    edx,edi
c0016e56:	89 f3                	mov    ebx,esi
c0016e58:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0016e5f:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0016e66:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0016e6d:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0016e74:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0016e7a:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0016e81:	84 c0                	test   al,al
c0016e83:	75 07                	jne    c0016e8c <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0016e85:	b8 07 00 00 00       	mov    eax,0x7
c0016e8a:	eb 1c                	jmp    c0016ea8 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016e8c:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0016e93:	85 c0                	test   eax,eax
c0016e95:	75 09                	jne    c0016ea0 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0016e97:	b8 00 00 00 00       	mov    eax,0x0
c0016e9c:	eb 0a                	jmp    c0016ea8 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016e9e:	66 90                	xchg   ax,ax
c0016ea0:	b8 01 00 00 00       	mov    eax,0x1
c0016ea5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ea8:	81 c4 50 02 00 00    	add    esp,0x250
c0016eae:	5b                   	pop    ebx
c0016eaf:	5e                   	pop    esi
c0016eb0:	5f                   	pop    edi
c0016eb1:	c3                   	ret    
c0016eb2:	66 90                	xchg   ax,ax

c0016eb4 <FAT::read(void*, unsigned long, void*, int*)>:
c0016eb4:	83 ec 1c             	sub    esp,0x1c
c0016eb7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016ebc:	74 0a                	je     c0016ec8 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0016ebe:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016ec3:	75 0b                	jne    c0016ed0 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0016ec5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ec8:	b8 04 00 00 00       	mov    eax,0x4
c0016ecd:	eb 41                	jmp    c0016f10 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016ecf:	90                   	nop
c0016ed0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016ed4:	50                   	push   eax
c0016ed5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016ed9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016edd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016ee1:	e8 02 cf fe ff       	call   c0003de8 <f_read>
c0016ee6:	83 c4 10             	add    esp,0x10
c0016ee9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016eed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016ef1:	89 c2                	mov    edx,eax
c0016ef3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ef7:	89 10                	mov    DWORD PTR [eax],edx
c0016ef9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016efd:	85 c0                	test   eax,eax
c0016eff:	75 07                	jne    c0016f08 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0016f01:	b8 00 00 00 00       	mov    eax,0x0
c0016f06:	eb 08                	jmp    c0016f10 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016f08:	b8 01 00 00 00       	mov    eax,0x1
c0016f0d:	8d 76 00             	lea    esi,[esi+0x0]
c0016f10:	83 c4 1c             	add    esp,0x1c
c0016f13:	c3                   	ret    

c0016f14 <FAT::write(void*, unsigned long, void*, int*)>:
c0016f14:	83 ec 1c             	sub    esp,0x1c
c0016f17:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016f1c:	74 0a                	je     c0016f28 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0016f1e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016f23:	75 0b                	jne    c0016f30 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0016f25:	8d 76 00             	lea    esi,[esi+0x0]
c0016f28:	b8 04 00 00 00       	mov    eax,0x4
c0016f2d:	eb 41                	jmp    c0016f70 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016f2f:	90                   	nop
c0016f30:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016f34:	50                   	push   eax
c0016f35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016f39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016f3d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f41:	e8 a1 d0 fe ff       	call   c0003fe7 <f_write>
c0016f46:	83 c4 10             	add    esp,0x10
c0016f49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f51:	89 c2                	mov    edx,eax
c0016f53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f57:	89 10                	mov    DWORD PTR [eax],edx
c0016f59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f5d:	85 c0                	test   eax,eax
c0016f5f:	75 07                	jne    c0016f68 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0016f61:	b8 00 00 00 00       	mov    eax,0x0
c0016f66:	eb 08                	jmp    c0016f70 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016f68:	b8 01 00 00 00       	mov    eax,0x1
c0016f6d:	8d 76 00             	lea    esi,[esi+0x0]
c0016f70:	83 c4 1c             	add    esp,0x1c
c0016f73:	c3                   	ret    

c0016f74 <FAT::close(void*)>:
c0016f74:	83 ec 1c             	sub    esp,0x1c
c0016f77:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016f7c:	75 0a                	jne    c0016f88 <FAT::close(void*)+0x14>
c0016f7e:	b8 04 00 00 00       	mov    eax,0x4
c0016f83:	eb 3f                	jmp    c0016fc4 <FAT::close(void*)+0x50>
c0016f85:	8d 76 00             	lea    esi,[esi+0x0]
c0016f88:	83 ec 0c             	sub    esp,0xc
c0016f8b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f8f:	e8 3c d3 fe ff       	call   c00042d0 <f_close>
c0016f94:	83 c4 10             	add    esp,0x10
c0016f97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f9b:	83 ec 0c             	sub    esp,0xc
c0016f9e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016fa2:	e8 22 08 ff ff       	call   c00077c9 <free>
c0016fa7:	83 c4 10             	add    esp,0x10
c0016faa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016fae:	85 c0                	test   eax,eax
c0016fb0:	75 0a                	jne    c0016fbc <FAT::close(void*)+0x48>
c0016fb2:	b8 00 00 00 00       	mov    eax,0x0
c0016fb7:	eb 0b                	jmp    c0016fc4 <FAT::close(void*)+0x50>
c0016fb9:	8d 76 00             	lea    esi,[esi+0x0]
c0016fbc:	b8 01 00 00 00       	mov    eax,0x1
c0016fc1:	8d 76 00             	lea    esi,[esi+0x0]
c0016fc4:	83 c4 1c             	add    esp,0x1c
c0016fc7:	c3                   	ret    

c0016fc8 <FAT::closeDir(void*)>:
c0016fc8:	83 ec 1c             	sub    esp,0x1c
c0016fcb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016fd0:	75 0a                	jne    c0016fdc <FAT::closeDir(void*)+0x14>
c0016fd2:	b8 04 00 00 00       	mov    eax,0x4
c0016fd7:	eb 3f                	jmp    c0017018 <FAT::closeDir(void*)+0x50>
c0016fd9:	8d 76 00             	lea    esi,[esi+0x0]
c0016fdc:	83 ec 0c             	sub    esp,0xc
c0016fdf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016fe3:	e8 89 d5 fe ff       	call   c0004571 <f_closedir>
c0016fe8:	83 c4 10             	add    esp,0x10
c0016feb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016fef:	83 ec 0c             	sub    esp,0xc
c0016ff2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016ff6:	e8 ce 07 ff ff       	call   c00077c9 <free>
c0016ffb:	83 c4 10             	add    esp,0x10
c0016ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017002:	85 c0                	test   eax,eax
c0017004:	75 0a                	jne    c0017010 <FAT::closeDir(void*)+0x48>
c0017006:	b8 00 00 00 00       	mov    eax,0x0
c001700b:	eb 0b                	jmp    c0017018 <FAT::closeDir(void*)+0x50>
c001700d:	8d 76 00             	lea    esi,[esi+0x0]
c0017010:	b8 01 00 00 00       	mov    eax,0x1
c0017015:	8d 76 00             	lea    esi,[esi+0x0]
c0017018:	83 c4 1c             	add    esp,0x1c
c001701b:	c3                   	ret    

c001701c <FAT::seek(void*, unsigned long long)>:
c001701c:	83 ec 2c             	sub    esp,0x2c
c001701f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017023:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017027:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001702b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001702f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0017034:	75 0a                	jne    c0017040 <FAT::seek(void*, unsigned long long)+0x24>
c0017036:	b8 04 00 00 00       	mov    eax,0x4
c001703b:	eb 33                	jmp    c0017070 <FAT::seek(void*, unsigned long long)+0x54>
c001703d:	8d 76 00             	lea    esi,[esi+0x0]
c0017040:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017044:	83 ec 08             	sub    esp,0x8
c0017047:	50                   	push   eax
c0017048:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001704c:	e8 ae d2 fe ff       	call   c00042ff <f_lseek>
c0017051:	83 c4 10             	add    esp,0x10
c0017054:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017058:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001705c:	85 c0                	test   eax,eax
c001705e:	75 08                	jne    c0017068 <FAT::seek(void*, unsigned long long)+0x4c>
c0017060:	b8 00 00 00 00       	mov    eax,0x0
c0017065:	eb 09                	jmp    c0017070 <FAT::seek(void*, unsigned long long)+0x54>
c0017067:	90                   	nop
c0017068:	b8 01 00 00 00       	mov    eax,0x1
c001706d:	8d 76 00             	lea    esi,[esi+0x0]
c0017070:	83 c4 2c             	add    esp,0x2c
c0017073:	c3                   	ret    

c0017074 <fatWrapperReadDisk>:
c0017074:	53                   	push   ebx
c0017075:	83 ec 18             	sub    esp,0x18
c0017078:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001707c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017080:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017084:	25 ff 00 00 00       	and    eax,0xff
c0017089:	8b 0c 85 80 32 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdcd80]
c0017090:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0017094:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017098:	ba 00 00 00 00       	mov    edx,0x0
c001709d:	83 ec 0c             	sub    esp,0xc
c00170a0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00170a4:	53                   	push   ebx
c00170a5:	52                   	push   edx
c00170a6:	50                   	push   eax
c00170a7:	51                   	push   ecx
c00170a8:	e8 3b 5b ff ff       	call   c000cbe8 <LogicalDisk::read(unsigned long long, int, void*)>
c00170ad:	83 c4 20             	add    esp,0x20
c00170b0:	83 c4 18             	add    esp,0x18
c00170b3:	5b                   	pop    ebx
c00170b4:	c3                   	ret    
c00170b5:	8d 76 00             	lea    esi,[esi+0x0]

c00170b8 <fatWrapperWriteDisk>:
c00170b8:	53                   	push   ebx
c00170b9:	83 ec 18             	sub    esp,0x18
c00170bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170c0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00170c4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00170c8:	25 ff 00 00 00       	and    eax,0xff
c00170cd:	8b 0c 85 80 32 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdcd80]
c00170d4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00170d8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00170dc:	ba 00 00 00 00       	mov    edx,0x0
c00170e1:	83 ec 0c             	sub    esp,0xc
c00170e4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00170e8:	53                   	push   ebx
c00170e9:	52                   	push   edx
c00170ea:	50                   	push   eax
c00170eb:	51                   	push   ecx
c00170ec:	e8 63 5b ff ff       	call   c000cc54 <LogicalDisk::write(unsigned long long, int, void*)>
c00170f1:	83 c4 20             	add    esp,0x20
c00170f4:	83 c4 18             	add    esp,0x18
c00170f7:	5b                   	pop    ebx
c00170f8:	c3                   	ret    
c00170f9:	8d 76 00             	lea    esi,[esi+0x0]

c00170fc <fatWrapperIoctl>:
c00170fc:	53                   	push   ebx
c00170fd:	83 ec 28             	sub    esp,0x28
c0017100:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017104:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017108:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001710c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017110:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0017115:	75 35                	jne    c001714c <fatWrapperIoctl+0x50>
c0017117:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001711b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001711f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017123:	25 ff 00 00 00       	and    eax,0xff
c0017128:	8b 04 85 80 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcd80]
c001712f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0017135:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001713b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001713f:	66 89 02             	mov    WORD PTR [edx],ax
c0017142:	b8 00 00 00 00       	mov    eax,0x0
c0017147:	e9 c4 00 00 00       	jmp    c0017210 <fatWrapperIoctl+0x114>
c001714c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0017151:	75 75                	jne    c00171c8 <fatWrapperIoctl+0xcc>
c0017153:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017157:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001715b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001715f:	25 ff 00 00 00       	and    eax,0xff
c0017164:	8b 04 85 80 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcd80]
c001716b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0017171:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017177:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001717d:	89 c8                	mov    eax,ecx
c001717f:	89 da                	mov    edx,ebx
c0017181:	0f a4 c2 0a          	shld   edx,eax,0xa
c0017185:	c1 e0 0a             	shl    eax,0xa
c0017188:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001718c:	81 e1 ff 00 00 00    	and    ecx,0xff
c0017192:	8b 0c 8d 80 32 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcd80]
c0017199:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001719f:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00171a5:	89 cb                	mov    ebx,ecx
c00171a7:	c1 fb 1f             	sar    ebx,0x1f
c00171aa:	53                   	push   ebx
c00171ab:	51                   	push   ecx
c00171ac:	52                   	push   edx
c00171ad:	50                   	push   eax
c00171ae:	e8 4d 50 00 00       	call   c001c200 <__udivdi3>
c00171b3:	83 c4 10             	add    esp,0x10
c00171b6:	89 c2                	mov    edx,eax
c00171b8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00171bc:	89 10                	mov    DWORD PTR [eax],edx
c00171be:	b8 00 00 00 00       	mov    eax,0x0
c00171c3:	eb 4b                	jmp    c0017210 <fatWrapperIoctl+0x114>
c00171c5:	8d 76 00             	lea    esi,[esi+0x0]
c00171c8:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00171cd:	75 09                	jne    c00171d8 <fatWrapperIoctl+0xdc>
c00171cf:	b8 00 00 00 00       	mov    eax,0x0
c00171d4:	eb 3a                	jmp    c0017210 <fatWrapperIoctl+0x114>
c00171d6:	66 90                	xchg   ax,ax
c00171d8:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00171dd:	75 19                	jne    c00171f8 <fatWrapperIoctl+0xfc>
c00171df:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00171e3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00171e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00171eb:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00171f1:	b8 00 00 00 00       	mov    eax,0x0
c00171f6:	eb 18                	jmp    c0017210 <fatWrapperIoctl+0x114>
c00171f8:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00171fd:	75 09                	jne    c0017208 <fatWrapperIoctl+0x10c>
c00171ff:	b8 00 00 00 00       	mov    eax,0x0
c0017204:	eb 0a                	jmp    c0017210 <fatWrapperIoctl+0x114>
c0017206:	66 90                	xchg   ax,ax
c0017208:	b8 04 00 00 00       	mov    eax,0x4
c001720d:	8d 76 00             	lea    esi,[esi+0x0]
c0017210:	83 c4 28             	add    esp,0x28
c0017213:	5b                   	pop    ebx
c0017214:	c3                   	ret    
c0017215:	90                   	nop
c0017216:	66 90                	xchg   ax,ax

c0017218 <FAT::FAT()>:
c0017218:	83 ec 1c             	sub    esp,0x1c
c001721b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001721f:	83 ec 0c             	sub    esp,0xc
c0017222:	50                   	push   eax
c0017223:	e8 d2 35 ff ff       	call   c000a7fa <Filesystem::Filesystem()>
c0017228:	83 c4 10             	add    esp,0x10
c001722b:	ba 30 f2 01 c0       	mov    edx,0xc001f230
c0017230:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017234:	89 10                	mov    DWORD PTR [eax],edx
c0017236:	c7 05 80 40 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024080,0x0
c0017240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017248:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001724d:	7f 15                	jg     c0017264 <FAT::FAT()+0x4c>
c001724f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017253:	c7 04 85 a0 40 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdbf60],0xffffffff
c001725e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017262:	eb e4                	jmp    c0017248 <FAT::FAT()+0x30>
c0017264:	90                   	nop
c0017265:	83 c4 1c             	add    esp,0x1c
c0017268:	c3                   	ret    
c0017269:	90                   	nop
c001726a:	66 90                	xchg   ax,ax

c001726c <FAT::fixFilepath(char*)>:
c001726c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017270:	8a 00                	mov    al,BYTE PTR [eax]
c0017272:	3c 40                	cmp    al,0x40
c0017274:	7e 2e                	jle    c00172a4 <FAT::fixFilepath(char*)+0x38>
c0017276:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001727a:	8a 00                	mov    al,BYTE PTR [eax]
c001727c:	83 e8 41             	sub    eax,0x41
c001727f:	88 c2                	mov    dl,al
c0017281:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017285:	88 10                	mov    BYTE PTR [eax],dl
c0017287:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001728b:	8a 00                	mov    al,BYTE PTR [eax]
c001728d:	0f be c0             	movsx  eax,al
c0017290:	8b 04 85 a0 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf60]
c0017297:	83 c0 30             	add    eax,0x30
c001729a:	88 c2                	mov    dl,al
c001729c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172a0:	88 10                	mov    BYTE PTR [eax],dl
c00172a2:	66 90                	xchg   ax,ax
c00172a4:	90                   	nop
c00172a5:	c3                   	ret    
c00172a6:	66 90                	xchg   ax,ax

c00172a8 <FAT::open(char const*, void**, FileOpenMode)>:
c00172a8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00172ae:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00172b6:	74 0c                	je     c00172c4 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c00172b8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00172c0:	75 0e                	jne    c00172d0 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c00172c2:	66 90                	xchg   ax,ax
c00172c4:	b8 04 00 00 00       	mov    eax,0x4
c00172c9:	e9 0a 01 00 00       	jmp    c00173d8 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c00172ce:	66 90                	xchg   ax,ax
c00172d0:	83 ec 08             	sub    esp,0x8
c00172d3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00172da:	8d 44 24 14          	lea    eax,[esp+0x14]
c00172de:	50                   	push   eax
c00172df:	e8 1c 93 fe ff       	call   c0000600 <strcpy>
c00172e4:	83 c4 10             	add    esp,0x10
c00172e7:	83 ec 08             	sub    esp,0x8
c00172ea:	8d 44 24 10          	lea    eax,[esp+0x10]
c00172ee:	50                   	push   eax
c00172ef:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00172f6:	e8 71 ff ff ff       	call   c001726c <FAT::fixFilepath(char*)>
c00172fb:	83 c4 10             	add    esp,0x10
c00172fe:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0017306:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001730d:	83 e0 01             	and    eax,0x1
c0017310:	74 0a                	je     c001731c <FAT::open(char const*, void**, FileOpenMode)+0x74>
c0017312:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001731a:	66 90                	xchg   ax,ax
c001731c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017323:	83 e0 04             	and    eax,0x4
c0017326:	74 10                	je     c0017338 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0017328:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0017330:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0017338:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001733f:	83 e0 02             	and    eax,0x2
c0017342:	74 08                	je     c001734c <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c0017344:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001734c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017353:	83 e0 08             	and    eax,0x8
c0017356:	74 08                	je     c0017360 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0017358:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0017360:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017367:	83 e0 10             	and    eax,0x10
c001736a:	74 08                	je     c0017374 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001736c:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0017374:	83 ec 0c             	sub    esp,0xc
c0017377:	68 28 02 00 00       	push   0x228
c001737c:	e8 38 04 ff ff       	call   c00077b9 <malloc>
c0017381:	83 c4 10             	add    esp,0x10
c0017384:	89 c2                	mov    edx,eax
c0017386:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001738d:	89 10                	mov    DWORD PTR [eax],edx
c001738f:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0017396:	31 d2                	xor    edx,edx
c0017398:	88 c2                	mov    dl,al
c001739a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00173a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00173a3:	83 ec 04             	sub    esp,0x4
c00173a6:	52                   	push   edx
c00173a7:	8d 54 24 10          	lea    edx,[esp+0x10]
c00173ab:	52                   	push   edx
c00173ac:	50                   	push   eax
c00173ad:	e8 6b c7 fe ff       	call   c0003b1d <f_open>
c00173b2:	83 c4 10             	add    esp,0x10
c00173b5:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00173bc:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00173c4:	74 0a                	je     c00173d0 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c00173c6:	b8 01 00 00 00       	mov    eax,0x1
c00173cb:	eb 0b                	jmp    c00173d8 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c00173cd:	8d 76 00             	lea    esi,[esi+0x0]
c00173d0:	b8 00 00 00 00       	mov    eax,0x0
c00173d5:	8d 76 00             	lea    esi,[esi+0x0]
c00173d8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00173de:	c3                   	ret    
c00173df:	90                   	nop

c00173e0 <FAT::openDir(char const*, void**)>:
c00173e0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00173e6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00173ee:	74 0c                	je     c00173fc <FAT::openDir(char const*, void**)+0x1c>
c00173f0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00173f8:	75 0e                	jne    c0017408 <FAT::openDir(char const*, void**)+0x28>
c00173fa:	66 90                	xchg   ax,ax
c00173fc:	b8 04 00 00 00       	mov    eax,0x4
c0017401:	e9 82 00 00 00       	jmp    c0017488 <FAT::openDir(char const*, void**)+0xa8>
c0017406:	66 90                	xchg   ax,ax
c0017408:	83 ec 08             	sub    esp,0x8
c001740b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017412:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017416:	50                   	push   eax
c0017417:	e8 e4 91 fe ff       	call   c0000600 <strcpy>
c001741c:	83 c4 10             	add    esp,0x10
c001741f:	83 ec 08             	sub    esp,0x8
c0017422:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017426:	50                   	push   eax
c0017427:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001742e:	e8 39 fe ff ff       	call   c001726c <FAT::fixFilepath(char*)>
c0017433:	83 c4 10             	add    esp,0x10
c0017436:	83 ec 0c             	sub    esp,0xc
c0017439:	6a 30                	push   0x30
c001743b:	e8 79 03 ff ff       	call   c00077b9 <malloc>
c0017440:	83 c4 10             	add    esp,0x10
c0017443:	89 c2                	mov    edx,eax
c0017445:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001744c:	89 10                	mov    DWORD PTR [eax],edx
c001744e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017455:	8b 00                	mov    eax,DWORD PTR [eax]
c0017457:	83 ec 08             	sub    esp,0x8
c001745a:	8d 54 24 14          	lea    edx,[esp+0x14]
c001745e:	52                   	push   edx
c001745f:	50                   	push   eax
c0017460:	e8 41 d0 fe ff       	call   c00044a6 <f_opendir>
c0017465:	83 c4 10             	add    esp,0x10
c0017468:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001746f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0017477:	74 07                	je     c0017480 <FAT::openDir(char const*, void**)+0xa0>
c0017479:	b8 01 00 00 00       	mov    eax,0x1
c001747e:	eb 08                	jmp    c0017488 <FAT::openDir(char const*, void**)+0xa8>
c0017480:	b8 00 00 00 00       	mov    eax,0x0
c0017485:	8d 76 00             	lea    esi,[esi+0x0]
c0017488:	81 c4 1c 01 00 00    	add    esp,0x11c
c001748e:	c3                   	ret    
c001748f:	90                   	nop

c0017490 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0017490:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0017496:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001749e:	75 0c                	jne    c00174ac <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c00174a0:	b8 04 00 00 00       	mov    eax,0x4
c00174a5:	e9 d6 00 00 00       	jmp    c0017580 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00174aa:	66 90                	xchg   ax,ax
c00174ac:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00174b4:	75 0a                	jne    c00174c0 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c00174b6:	b8 04 00 00 00       	mov    eax,0x4
c00174bb:	e9 c0 00 00 00       	jmp    c0017580 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00174c0:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00174c8:	75 0a                	jne    c00174d4 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c00174ca:	b8 04 00 00 00       	mov    eax,0x4
c00174cf:	e9 ac 00 00 00       	jmp    c0017580 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00174d4:	83 ec 08             	sub    esp,0x8
c00174d7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00174de:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00174e5:	50                   	push   eax
c00174e6:	e8 15 91 fe ff       	call   c0000600 <strcpy>
c00174eb:	83 c4 10             	add    esp,0x10
c00174ee:	83 ec 08             	sub    esp,0x8
c00174f1:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00174f8:	50                   	push   eax
c00174f9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017500:	e8 67 fd ff ff       	call   c001726c <FAT::fixFilepath(char*)>
c0017505:	83 c4 10             	add    esp,0x10
c0017508:	83 ec 08             	sub    esp,0x8
c001750b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001750f:	50                   	push   eax
c0017510:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0017517:	50                   	push   eax
c0017518:	e8 08 d1 fe ff       	call   c0004625 <f_stat>
c001751d:	83 c4 10             	add    esp,0x10
c0017520:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0017527:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001752e:	85 c0                	test   eax,eax
c0017530:	74 0a                	je     c001753c <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0017532:	83 f8 04             	cmp    eax,0x4
c0017535:	74 39                	je     c0017570 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0017537:	eb 3f                	jmp    c0017578 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0017539:	8d 76 00             	lea    esi,[esi+0x0]
c001753c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017540:	25 ff 00 00 00       	and    eax,0xff
c0017545:	83 e0 10             	and    eax,0x10
c0017548:	0f 95 c2             	setne  dl
c001754b:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0017552:	88 10                	mov    BYTE PTR [eax],dl
c0017554:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017558:	ba 00 00 00 00       	mov    edx,0x0
c001755d:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0017564:	89 01                	mov    DWORD PTR [ecx],eax
c0017566:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017569:	b8 00 00 00 00       	mov    eax,0x0
c001756e:	eb 10                	jmp    c0017580 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017570:	b8 02 00 00 00       	mov    eax,0x2
c0017575:	eb 09                	jmp    c0017580 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017577:	90                   	nop
c0017578:	b8 01 00 00 00       	mov    eax,0x1
c001757d:	8d 76 00             	lea    esi,[esi+0x0]
c0017580:	81 c4 2c 02 00 00    	add    esp,0x22c
c0017586:	c3                   	ret    
c0017587:	90                   	nop

c0017588 <FAT::unlink(char const*)>:
c0017588:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001758e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0017596:	75 08                	jne    c00175a0 <FAT::unlink(char const*)+0x18>
c0017598:	b8 04 00 00 00       	mov    eax,0x4
c001759d:	eb 61                	jmp    c0017600 <FAT::unlink(char const*)+0x78>
c001759f:	90                   	nop
c00175a0:	83 ec 08             	sub    esp,0x8
c00175a3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00175aa:	8d 44 24 18          	lea    eax,[esp+0x18]
c00175ae:	50                   	push   eax
c00175af:	e8 4c 90 fe ff       	call   c0000600 <strcpy>
c00175b4:	83 c4 10             	add    esp,0x10
c00175b7:	83 ec 08             	sub    esp,0x8
c00175ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00175be:	50                   	push   eax
c00175bf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00175c6:	e8 a1 fc ff ff       	call   c001726c <FAT::fixFilepath(char*)>
c00175cb:	83 c4 10             	add    esp,0x10
c00175ce:	83 ec 0c             	sub    esp,0xc
c00175d1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00175d5:	50                   	push   eax
c00175d6:	e8 af d2 fe ff       	call   c000488a <f_unlink>
c00175db:	83 c4 10             	add    esp,0x10
c00175de:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00175e5:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00175ec:	85 c0                	test   eax,eax
c00175ee:	75 08                	jne    c00175f8 <FAT::unlink(char const*)+0x70>
c00175f0:	b8 00 00 00 00       	mov    eax,0x0
c00175f5:	eb 09                	jmp    c0017600 <FAT::unlink(char const*)+0x78>
c00175f7:	90                   	nop
c00175f8:	b8 01 00 00 00       	mov    eax,0x1
c00175fd:	8d 76 00             	lea    esi,[esi+0x0]
c0017600:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017606:	c3                   	ret    
c0017607:	90                   	nop

c0017608 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0017608:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001760e:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0017615:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001761c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0017620:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017624:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001762c:	75 0a                	jne    c0017638 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001762e:	b8 04 00 00 00       	mov    eax,0x4
c0017633:	e9 54 01 00 00       	jmp    c001778c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0017638:	83 ec 08             	sub    esp,0x8
c001763b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0017642:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017646:	50                   	push   eax
c0017647:	e8 b4 8f fe ff       	call   c0000600 <strcpy>
c001764c:	83 c4 10             	add    esp,0x10
c001764f:	83 ec 08             	sub    esp,0x8
c0017652:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017656:	50                   	push   eax
c0017657:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001765e:	e8 09 fc ff ff       	call   c001726c <FAT::fixFilepath(char*)>
c0017663:	83 c4 10             	add    esp,0x10
c0017666:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001766e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0017676:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001767a:	25 ff 00 00 00       	and    eax,0xff
c001767f:	83 e0 01             	and    eax,0x1
c0017682:	74 08                	je     c001768c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c0017684:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001768c:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017690:	25 ff 00 00 00       	and    eax,0xff
c0017695:	83 e0 02             	and    eax,0x2
c0017698:	74 0a                	je     c00176a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c001769a:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00176a2:	66 90                	xchg   ax,ax
c00176a4:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00176a8:	25 ff 00 00 00       	and    eax,0xff
c00176ad:	83 e0 04             	and    eax,0x4
c00176b0:	74 0a                	je     c00176bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c00176b2:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00176ba:	66 90                	xchg   ax,ax
c00176bc:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00176c0:	25 ff 00 00 00       	and    eax,0xff
c00176c5:	83 e0 08             	and    eax,0x8
c00176c8:	74 0a                	je     c00176d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c00176ca:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00176d2:	66 90                	xchg   ax,ax
c00176d4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00176d8:	25 ff 00 00 00       	and    eax,0xff
c00176dd:	83 e0 01             	and    eax,0x1
c00176e0:	74 0a                	je     c00176ec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c00176e2:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00176ea:	66 90                	xchg   ax,ax
c00176ec:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00176f0:	25 ff 00 00 00       	and    eax,0xff
c00176f5:	83 e0 02             	and    eax,0x2
c00176f8:	74 0a                	je     c0017704 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c00176fa:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0017702:	66 90                	xchg   ax,ax
c0017704:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017708:	25 ff 00 00 00       	and    eax,0xff
c001770d:	83 e0 04             	and    eax,0x4
c0017710:	74 0a                	je     c001771c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c0017712:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001771a:	66 90                	xchg   ax,ax
c001771c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017720:	25 ff 00 00 00       	and    eax,0xff
c0017725:	83 e0 08             	and    eax,0x8
c0017728:	74 0a                	je     c0017734 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c001772a:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0017732:	66 90                	xchg   ax,ax
c0017734:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001773b:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0017742:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0017749:	31 d2                	xor    edx,edx
c001774b:	88 c2                	mov    dl,al
c001774d:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0017754:	25 ff 00 00 00       	and    eax,0xff
c0017759:	83 ec 04             	sub    esp,0x4
c001775c:	52                   	push   edx
c001775d:	50                   	push   eax
c001775e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017762:	50                   	push   eax
c0017763:	e8 95 d5 fe ff       	call   c0004cfd <f_chmod>
c0017768:	83 c4 10             	add    esp,0x10
c001776b:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0017772:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0017779:	85 c0                	test   eax,eax
c001777b:	75 07                	jne    c0017784 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c001777d:	b8 00 00 00 00       	mov    eax,0x0
c0017782:	eb 08                	jmp    c001778c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0017784:	b8 01 00 00 00       	mov    eax,0x1
c0017789:	8d 76 00             	lea    esi,[esi+0x0]
c001778c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0017792:	c3                   	ret    
c0017793:	90                   	nop

c0017794 <FAT::rename(char const*, char const*)>:
c0017794:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001779a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00177a2:	74 0c                	je     c00177b0 <FAT::rename(char const*, char const*)+0x1c>
c00177a4:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00177ac:	75 0e                	jne    c00177bc <FAT::rename(char const*, char const*)+0x28>
c00177ae:	66 90                	xchg   ax,ax
c00177b0:	b8 04 00 00 00       	mov    eax,0x4
c00177b5:	e9 9e 00 00 00       	jmp    c0017858 <FAT::rename(char const*, char const*)+0xc4>
c00177ba:	66 90                	xchg   ax,ax
c00177bc:	83 ec 08             	sub    esp,0x8
c00177bf:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00177c6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00177cd:	50                   	push   eax
c00177ce:	e8 2d 8e fe ff       	call   c0000600 <strcpy>
c00177d3:	83 c4 10             	add    esp,0x10
c00177d6:	83 ec 08             	sub    esp,0x8
c00177d9:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00177e0:	50                   	push   eax
c00177e1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00177e8:	e8 7f fa ff ff       	call   c001726c <FAT::fixFilepath(char*)>
c00177ed:	83 c4 10             	add    esp,0x10
c00177f0:	83 ec 08             	sub    esp,0x8
c00177f3:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00177fa:	8d 44 24 18          	lea    eax,[esp+0x18]
c00177fe:	50                   	push   eax
c00177ff:	e8 fc 8d fe ff       	call   c0000600 <strcpy>
c0017804:	83 c4 10             	add    esp,0x10
c0017807:	83 ec 08             	sub    esp,0x8
c001780a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001780e:	50                   	push   eax
c001780f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017816:	e8 51 fa ff ff       	call   c001726c <FAT::fixFilepath(char*)>
c001781b:	83 c4 10             	add    esp,0x10
c001781e:	83 ec 08             	sub    esp,0x8
c0017821:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017825:	50                   	push   eax
c0017826:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001782d:	50                   	push   eax
c001782e:	e8 14 d3 fe ff       	call   c0004b47 <f_rename>
c0017833:	83 c4 10             	add    esp,0x10
c0017836:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001783d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0017844:	85 c0                	test   eax,eax
c0017846:	75 08                	jne    c0017850 <FAT::rename(char const*, char const*)+0xbc>
c0017848:	b8 00 00 00 00       	mov    eax,0x0
c001784d:	eb 09                	jmp    c0017858 <FAT::rename(char const*, char const*)+0xc4>
c001784f:	90                   	nop
c0017850:	b8 01 00 00 00       	mov    eax,0x1
c0017855:	8d 76 00             	lea    esi,[esi+0x0]
c0017858:	81 c4 1c 02 00 00    	add    esp,0x21c
c001785e:	c3                   	ret    
c001785f:	90                   	nop

c0017860 <FAT::mkdir(char const*)>:
c0017860:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017866:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001786e:	75 08                	jne    c0017878 <FAT::mkdir(char const*)+0x18>
c0017870:	b8 04 00 00 00       	mov    eax,0x4
c0017875:	eb 61                	jmp    c00178d8 <FAT::mkdir(char const*)+0x78>
c0017877:	90                   	nop
c0017878:	83 ec 08             	sub    esp,0x8
c001787b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017882:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017886:	50                   	push   eax
c0017887:	e8 74 8d fe ff       	call   c0000600 <strcpy>
c001788c:	83 c4 10             	add    esp,0x10
c001788f:	83 ec 08             	sub    esp,0x8
c0017892:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017896:	50                   	push   eax
c0017897:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001789e:	e8 c9 f9 ff ff       	call   c001726c <FAT::fixFilepath(char*)>
c00178a3:	83 c4 10             	add    esp,0x10
c00178a6:	83 ec 0c             	sub    esp,0xc
c00178a9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00178ad:	50                   	push   eax
c00178ae:	e8 f9 d0 fe ff       	call   c00049ac <f_mkdir>
c00178b3:	83 c4 10             	add    esp,0x10
c00178b6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00178bd:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00178c4:	85 c0                	test   eax,eax
c00178c6:	75 08                	jne    c00178d0 <FAT::mkdir(char const*)+0x70>
c00178c8:	b8 00 00 00 00       	mov    eax,0x0
c00178cd:	eb 09                	jmp    c00178d8 <FAT::mkdir(char const*)+0x78>
c00178cf:	90                   	nop
c00178d0:	b8 01 00 00 00       	mov    eax,0x1
c00178d5:	8d 76 00             	lea    esi,[esi+0x0]
c00178d8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00178de:	c3                   	ret    
c00178df:	90                   	nop

c00178e0 <FAT::exists(char const*)>:
c00178e0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00178e6:	83 ec 08             	sub    esp,0x8
c00178e9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00178f0:	8d 44 24 10          	lea    eax,[esp+0x10]
c00178f4:	50                   	push   eax
c00178f5:	e8 06 8d fe ff       	call   c0000600 <strcpy>
c00178fa:	83 c4 10             	add    esp,0x10
c00178fd:	83 ec 08             	sub    esp,0x8
c0017900:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017904:	50                   	push   eax
c0017905:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001790c:	e8 5b f9 ff ff       	call   c001726c <FAT::fixFilepath(char*)>
c0017911:	83 c4 10             	add    esp,0x10
c0017914:	83 ec 08             	sub    esp,0x8
c0017917:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001791e:	50                   	push   eax
c001791f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017923:	50                   	push   eax
c0017924:	e8 fc cc fe ff       	call   c0004625 <f_stat>
c0017929:	83 c4 10             	add    esp,0x10
c001792c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0017933:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001793a:	85 c0                	test   eax,eax
c001793c:	75 06                	jne    c0017944 <FAT::exists(char const*)+0x64>
c001793e:	b0 01                	mov    al,0x1
c0017940:	eb 06                	jmp    c0017948 <FAT::exists(char const*)+0x68>
c0017942:	66 90                	xchg   ax,ax
c0017944:	b0 00                	mov    al,0x0
c0017946:	66 90                	xchg   ax,ax
c0017948:	81 c4 2c 02 00 00    	add    esp,0x22c
c001794e:	c3                   	ret    
c001794f:	90                   	nop

c0017950 <isoReadDiscSectorHelper>:
c0017950:	83 ec 2c             	sub    esp,0x2c
c0017953:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017957:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001795b:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0017960:	83 e8 41             	sub    eax,0x41
c0017963:	8b 0c 85 80 32 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdcd80]
c001796a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001796e:	ba 00 00 00 00       	mov    edx,0x0
c0017973:	83 ec 0c             	sub    esp,0xc
c0017976:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001797a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001797e:	52                   	push   edx
c001797f:	50                   	push   eax
c0017980:	51                   	push   ecx
c0017981:	e8 62 52 ff ff       	call   c000cbe8 <LogicalDisk::read(unsigned long long, int, void*)>
c0017986:	83 c4 20             	add    esp,0x20
c0017989:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001798d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0017992:	74 0c                	je     c00179a0 <isoReadDiscSectorHelper+0x50>
c0017994:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017998:	c1 e0 0b             	shl    eax,0xb
c001799b:	eb 0b                	jmp    c00179a8 <isoReadDiscSectorHelper+0x58>
c001799d:	8d 76 00             	lea    esi,[esi+0x0]
c00179a0:	b8 00 00 00 00       	mov    eax,0x0
c00179a5:	8d 76 00             	lea    esi,[esi+0x0]
c00179a8:	83 c4 2c             	add    esp,0x2c
c00179ab:	c3                   	ret    

c00179ac <iso_kprintf>:
c00179ac:	83 ec 0c             	sub    esp,0xc
c00179af:	a1 64 0d 02 c0       	mov    eax,ds:0xc0020d64
c00179b4:	83 ec 08             	sub    esp,0x8
c00179b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00179bb:	50                   	push   eax
c00179bc:	e8 75 0d ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00179c1:	83 c4 10             	add    esp,0x10
c00179c4:	90                   	nop
c00179c5:	83 c4 0c             	add    esp,0xc
c00179c8:	c3                   	ret    
c00179c9:	8d 76 00             	lea    esi,[esi+0x0]

c00179cc <iso_kprintfd>:
c00179cc:	83 ec 0c             	sub    esp,0xc
c00179cf:	a1 64 0d 02 c0       	mov    eax,ds:0xc0020d64
c00179d4:	83 ec 08             	sub    esp,0x8
c00179d7:	68 90 f2 01 c0       	push   0xc001f290
c00179dc:	50                   	push   eax
c00179dd:	e8 54 0d ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00179e2:	83 c4 10             	add    esp,0x10
c00179e5:	a1 64 0d 02 c0       	mov    eax,ds:0xc0020d64
c00179ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00179ee:	83 ec 08             	sub    esp,0x8
c00179f1:	52                   	push   edx
c00179f2:	50                   	push   eax
c00179f3:	e8 f8 0c ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00179f8:	83 c4 10             	add    esp,0x10
c00179fb:	a1 64 0d 02 c0       	mov    eax,ds:0xc0020d64
c0017a00:	83 ec 08             	sub    esp,0x8
c0017a03:	68 11 f1 01 c0       	push   0xc001f111
c0017a08:	50                   	push   eax
c0017a09:	e8 28 0d ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0017a0e:	83 c4 10             	add    esp,0x10
c0017a11:	90                   	nop
c0017a12:	83 c4 0c             	add    esp,0xc
c0017a15:	c3                   	ret    

c0017a16 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0017a16:	b8 08 00 00 00       	mov    eax,0x8
c0017a1b:	c3                   	ret    

c0017a1c <ISO9660::getName()>:
c0017a1c:	b8 93 f2 01 c0       	mov    eax,0xc001f293
c0017a21:	c3                   	ret    

c0017a22 <ISO9660::closeDir(void*)>:
c0017a22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a26:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a28:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0017a2b:	90                   	nop

c0017a2c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0017a2c:	b8 01 00 00 00       	mov    eax,0x1
c0017a31:	c3                   	ret    

c0017a32 <ISO9660::unlink(char const*)>:
c0017a32:	b8 01 00 00 00       	mov    eax,0x1
c0017a37:	c3                   	ret    

c0017a38 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0017a38:	b8 03 00 00 00       	mov    eax,0x3
c0017a3d:	c3                   	ret    

c0017a3e <ISO9660::rename(char const*, char const*)>:
c0017a3e:	b8 01 00 00 00       	mov    eax,0x1
c0017a43:	c3                   	ret    

c0017a44 <ISO9660::mkdir(char const*)>:
c0017a44:	b8 01 00 00 00       	mov    eax,0x1
c0017a49:	c3                   	ret    

c0017a4a <ISO9660::~ISO9660()>:
c0017a4a:	83 ec 0c             	sub    esp,0xc
c0017a4d:	ba e4 f2 01 c0       	mov    edx,0xc001f2e4
c0017a52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a56:	89 10                	mov    DWORD PTR [eax],edx
c0017a58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a5c:	83 ec 0c             	sub    esp,0xc
c0017a5f:	50                   	push   eax
c0017a60:	e8 b9 2d ff ff       	call   c000a81e <Filesystem::~Filesystem()>
c0017a65:	83 c4 10             	add    esp,0x10
c0017a68:	90                   	nop
c0017a69:	83 c4 0c             	add    esp,0xc
c0017a6c:	c3                   	ret    
c0017a6d:	90                   	nop

c0017a6e <ISO9660::~ISO9660()>:
c0017a6e:	83 ec 0c             	sub    esp,0xc
c0017a71:	83 ec 0c             	sub    esp,0xc
c0017a74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a78:	e8 cd ff ff ff       	call   c0017a4a <ISO9660::~ISO9660()>
c0017a7d:	83 c4 10             	add    esp,0x10
c0017a80:	83 ec 08             	sub    esp,0x8
c0017a83:	6a 08                	push   0x8
c0017a85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a89:	e8 54 29 ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c0017a8e:	83 c4 10             	add    esp,0x10
c0017a91:	83 c4 0c             	add    esp,0xc
c0017a94:	c3                   	ret    
c0017a95:	90                   	nop

c0017a96 <ISO9660::exists(char const*)>:
c0017a96:	83 ec 18             	sub    esp,0x18
c0017a99:	68 ae f2 01 c0       	push   0xc001f2ae
c0017a9e:	e8 a0 86 ff ff       	call   c0010143 <KePanic(char const*)>
c0017aa3:	31 c0                	xor    eax,eax
c0017aa5:	83 c4 1c             	add    esp,0x1c
c0017aa8:	c3                   	ret    
c0017aa9:	90                   	nop

c0017aaa <ISO9660::open(char const*, void**, FileOpenMode)>:
c0017aaa:	56                   	push   esi
c0017aab:	53                   	push   ebx
c0017aac:	50                   	push   eax
c0017aad:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017ab1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017ab5:	85 db                	test   ebx,ebx
c0017ab7:	0f 84 82 00 00 00    	je     c0017b3f <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c0017abd:	85 f6                	test   esi,esi
c0017abf:	74 7e                	je     c0017b3f <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c0017ac1:	ba 03 00 00 00       	mov    edx,0x3
c0017ac6:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0017acb:	75 77                	jne    c0017b44 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017acd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017ad0:	3a 05 80 41 02 c0    	cmp    al,BYTE PTR ds:0xc0024180
c0017ad6:	74 34                	je     c0017b0c <ISO9660::open(char const*, void**, FileOpenMode)+0x62>
c0017ad8:	83 ec 0c             	sub    esp,0xc
c0017adb:	50                   	push   eax
c0017adc:	e8 de ec fe ff       	call   c00067bf <init_percd>
c0017ae1:	83 c4 10             	add    esp,0x10
c0017ae4:	ba 0b 00 00 00       	mov    edx,0xb
c0017ae9:	40                   	inc    eax
c0017aea:	74 58                	je     c0017b44 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017aec:	80 3d 80 41 02 c0 00 	cmp    BYTE PTR ds:0xc0024180,0x0
c0017af3:	74 10                	je     c0017b05 <ISO9660::open(char const*, void**, FileOpenMode)+0x5b>
c0017af5:	83 ec 0c             	sub    esp,0xc
c0017af8:	68 cc f2 01 c0       	push   0xc001f2cc
c0017afd:	e8 41 86 ff ff       	call   c0010143 <KePanic(char const*)>
c0017b02:	83 c4 10             	add    esp,0x10
c0017b05:	8a 03                	mov    al,BYTE PTR [ebx]
c0017b07:	a2 80 41 02 c0       	mov    ds:0xc0024180,al
c0017b0c:	83 ec 0c             	sub    esp,0xc
c0017b0f:	0f be 05 80 41 02 c0 	movsx  eax,BYTE PTR ds:0xc0024180
c0017b16:	83 c3 03             	add    ebx,0x3
c0017b19:	50                   	push   eax
c0017b1a:	e8 a0 ec fe ff       	call   c00067bf <init_percd>
c0017b1f:	59                   	pop    ecx
c0017b20:	58                   	pop    eax
c0017b21:	6a 00                	push   0x0
c0017b23:	53                   	push   ebx
c0017b24:	e8 d4 e7 fe ff       	call   c00062fd <iso_open>
c0017b29:	83 c4 10             	add    esp,0x10
c0017b2c:	ba 01 00 00 00       	mov    edx,0x1
c0017b31:	83 f8 ff             	cmp    eax,0xffffffff
c0017b34:	74 0e                	je     c0017b44 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017b36:	83 c0 64             	add    eax,0x64
c0017b39:	31 d2                	xor    edx,edx
c0017b3b:	89 06                	mov    DWORD PTR [esi],eax
c0017b3d:	eb 05                	jmp    c0017b44 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017b3f:	ba 04 00 00 00       	mov    edx,0x4
c0017b44:	89 d0                	mov    eax,edx
c0017b46:	5a                   	pop    edx
c0017b47:	5b                   	pop    ebx
c0017b48:	5e                   	pop    esi
c0017b49:	c3                   	ret    

c0017b4a <ISO9660::openDir(char const*, void**)>:
c0017b4a:	56                   	push   esi
c0017b4b:	53                   	push   ebx
c0017b4c:	50                   	push   eax
c0017b4d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017b51:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017b55:	85 db                	test   ebx,ebx
c0017b57:	74 76                	je     c0017bcf <ISO9660::openDir(char const*, void**)+0x85>
c0017b59:	85 f6                	test   esi,esi
c0017b5b:	74 72                	je     c0017bcf <ISO9660::openDir(char const*, void**)+0x85>
c0017b5d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017b60:	3a 05 80 41 02 c0    	cmp    al,BYTE PTR ds:0xc0024180
c0017b66:	74 34                	je     c0017b9c <ISO9660::openDir(char const*, void**)+0x52>
c0017b68:	83 ec 0c             	sub    esp,0xc
c0017b6b:	50                   	push   eax
c0017b6c:	e8 4e ec fe ff       	call   c00067bf <init_percd>
c0017b71:	83 c4 10             	add    esp,0x10
c0017b74:	ba 0b 00 00 00       	mov    edx,0xb
c0017b79:	40                   	inc    eax
c0017b7a:	74 58                	je     c0017bd4 <ISO9660::openDir(char const*, void**)+0x8a>
c0017b7c:	80 3d 80 41 02 c0 00 	cmp    BYTE PTR ds:0xc0024180,0x0
c0017b83:	74 10                	je     c0017b95 <ISO9660::openDir(char const*, void**)+0x4b>
c0017b85:	83 ec 0c             	sub    esp,0xc
c0017b88:	68 cc f2 01 c0       	push   0xc001f2cc
c0017b8d:	e8 b1 85 ff ff       	call   c0010143 <KePanic(char const*)>
c0017b92:	83 c4 10             	add    esp,0x10
c0017b95:	8a 03                	mov    al,BYTE PTR [ebx]
c0017b97:	a2 80 41 02 c0       	mov    ds:0xc0024180,al
c0017b9c:	83 ec 0c             	sub    esp,0xc
c0017b9f:	0f be 05 80 41 02 c0 	movsx  eax,BYTE PTR ds:0xc0024180
c0017ba6:	83 c3 03             	add    ebx,0x3
c0017ba9:	50                   	push   eax
c0017baa:	e8 10 ec fe ff       	call   c00067bf <init_percd>
c0017baf:	59                   	pop    ecx
c0017bb0:	58                   	pop    eax
c0017bb1:	6a 01                	push   0x1
c0017bb3:	53                   	push   ebx
c0017bb4:	e8 44 e7 fe ff       	call   c00062fd <iso_open>
c0017bb9:	83 c4 10             	add    esp,0x10
c0017bbc:	ba 01 00 00 00       	mov    edx,0x1
c0017bc1:	83 f8 ff             	cmp    eax,0xffffffff
c0017bc4:	74 0e                	je     c0017bd4 <ISO9660::openDir(char const*, void**)+0x8a>
c0017bc6:	83 c0 64             	add    eax,0x64
c0017bc9:	31 d2                	xor    edx,edx
c0017bcb:	89 06                	mov    DWORD PTR [esi],eax
c0017bcd:	eb 05                	jmp    c0017bd4 <ISO9660::openDir(char const*, void**)+0x8a>
c0017bcf:	ba 04 00 00 00       	mov    edx,0x4
c0017bd4:	89 d0                	mov    eax,edx
c0017bd6:	5a                   	pop    edx
c0017bd7:	5b                   	pop    ebx
c0017bd8:	5e                   	pop    esi
c0017bd9:	c3                   	ret    

c0017bda <ISO9660::read(void*, unsigned long, void*, int*)>:
c0017bda:	53                   	push   ebx
c0017bdb:	83 ec 08             	sub    esp,0x8
c0017bde:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017be2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017be6:	85 c0                	test   eax,eax
c0017be8:	74 25                	je     c0017c0f <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017bea:	85 db                	test   ebx,ebx
c0017bec:	74 21                	je     c0017c0f <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017bee:	83 e8 64             	sub    eax,0x64
c0017bf1:	52                   	push   edx
c0017bf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017bf6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017bfa:	50                   	push   eax
c0017bfb:	e8 a5 e7 fe ff       	call   c00063a5 <iso_read>
c0017c00:	83 c4 10             	add    esp,0x10
c0017c03:	89 03                	mov    DWORD PTR [ebx],eax
c0017c05:	09 d0                	or     eax,edx
c0017c07:	0f 94 c0             	sete   al
c0017c0a:	0f b6 c0             	movzx  eax,al
c0017c0d:	eb 05                	jmp    c0017c14 <ISO9660::read(void*, unsigned long, void*, int*)+0x3a>
c0017c0f:	b8 04 00 00 00       	mov    eax,0x4
c0017c14:	83 c4 08             	add    esp,0x8
c0017c17:	5b                   	pop    ebx
c0017c18:	c3                   	ret    
c0017c19:	90                   	nop

c0017c1a <ISO9660::seek(void*, unsigned long long)>:
c0017c1a:	57                   	push   edi
c0017c1b:	56                   	push   esi
c0017c1c:	b8 04 00 00 00       	mov    eax,0x4
c0017c21:	51                   	push   ecx
c0017c22:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017c26:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017c2a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017c2e:	85 d2                	test   edx,edx
c0017c30:	74 1c                	je     c0017c4e <ISO9660::seek(void*, unsigned long long)+0x34>
c0017c32:	6a 00                	push   0x0
c0017c34:	83 ea 64             	sub    edx,0x64
c0017c37:	57                   	push   edi
c0017c38:	56                   	push   esi
c0017c39:	52                   	push   edx
c0017c3a:	e8 7c e8 fe ff       	call   c00064bb <iso_seek>
c0017c3f:	83 c4 10             	add    esp,0x10
c0017c42:	31 f0                	xor    eax,esi
c0017c44:	31 fa                	xor    edx,edi
c0017c46:	09 d0                	or     eax,edx
c0017c48:	0f 95 c0             	setne  al
c0017c4b:	0f b6 c0             	movzx  eax,al
c0017c4e:	5a                   	pop    edx
c0017c4f:	5e                   	pop    esi
c0017c50:	5f                   	pop    edi
c0017c51:	c3                   	ret    

c0017c52 <ISO9660::tell(void*, unsigned long long*)>:
c0017c52:	53                   	push   ebx
c0017c53:	83 ec 08             	sub    esp,0x8
c0017c56:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c5a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017c5e:	85 c0                	test   eax,eax
c0017c60:	74 1c                	je     c0017c7e <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017c62:	85 db                	test   ebx,ebx
c0017c64:	74 18                	je     c0017c7e <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017c66:	83 ec 0c             	sub    esp,0xc
c0017c69:	83 e8 64             	sub    eax,0x64
c0017c6c:	50                   	push   eax
c0017c6d:	e8 cd e8 fe ff       	call   c000653f <iso_tell>
c0017c72:	83 c4 10             	add    esp,0x10
c0017c75:	89 03                	mov    DWORD PTR [ebx],eax
c0017c77:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0017c7a:	31 c0                	xor    eax,eax
c0017c7c:	eb 05                	jmp    c0017c83 <ISO9660::tell(void*, unsigned long long*)+0x31>
c0017c7e:	b8 04 00 00 00       	mov    eax,0x4
c0017c83:	83 c4 08             	add    esp,0x8
c0017c86:	5b                   	pop    ebx
c0017c87:	c3                   	ret    

c0017c88 <ISO9660::stat(void*, unsigned long long*)>:
c0017c88:	53                   	push   ebx
c0017c89:	83 ec 08             	sub    esp,0x8
c0017c8c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c90:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017c94:	85 c0                	test   eax,eax
c0017c96:	74 20                	je     c0017cb8 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017c98:	85 db                	test   ebx,ebx
c0017c9a:	74 1c                	je     c0017cb8 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017c9c:	83 ec 0c             	sub    esp,0xc
c0017c9f:	83 e8 64             	sub    eax,0x64
c0017ca2:	50                   	push   eax
c0017ca3:	e8 c8 e8 fe ff       	call   c0006570 <iso_total>
c0017ca8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0017caf:	89 03                	mov    DWORD PTR [ebx],eax
c0017cb1:	83 c4 10             	add    esp,0x10
c0017cb4:	31 c0                	xor    eax,eax
c0017cb6:	eb 05                	jmp    c0017cbd <ISO9660::stat(void*, unsigned long long*)+0x35>
c0017cb8:	b8 04 00 00 00       	mov    eax,0x4
c0017cbd:	83 c4 08             	add    esp,0x8
c0017cc0:	5b                   	pop    ebx
c0017cc1:	c3                   	ret    

c0017cc2 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0017cc2:	55                   	push   ebp
c0017cc3:	57                   	push   edi
c0017cc4:	56                   	push   esi
c0017cc5:	53                   	push   ebx
c0017cc6:	83 ec 0c             	sub    esp,0xc
c0017cc9:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017ccd:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0017cd1:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017cd5:	85 ff                	test   edi,edi
c0017cd7:	0f 94 c2             	sete   dl
c0017cda:	85 f6                	test   esi,esi
c0017cdc:	0f 94 c0             	sete   al
c0017cdf:	08 c2                	or     dl,al
c0017ce1:	0f 85 9e 00 00 00    	jne    c0017d85 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0017ce7:	85 db                	test   ebx,ebx
c0017ce9:	0f 84 96 00 00 00    	je     c0017d85 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0017cef:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0017cf2:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0017cf8:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017cff:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017d02:	3a 05 80 41 02 c0    	cmp    al,BYTE PTR ds:0xc0024180
c0017d08:	74 34                	je     c0017d3e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x7c>
c0017d0a:	83 ec 0c             	sub    esp,0xc
c0017d0d:	50                   	push   eax
c0017d0e:	e8 ac ea fe ff       	call   c00067bf <init_percd>
c0017d13:	83 c4 10             	add    esp,0x10
c0017d16:	ba 0b 00 00 00       	mov    edx,0xb
c0017d1b:	40                   	inc    eax
c0017d1c:	74 6c                	je     c0017d8a <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c0017d1e:	80 3d 80 41 02 c0 00 	cmp    BYTE PTR ds:0xc0024180,0x0
c0017d25:	74 10                	je     c0017d37 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x75>
c0017d27:	83 ec 0c             	sub    esp,0xc
c0017d2a:	68 cc f2 01 c0       	push   0xc001f2cc
c0017d2f:	e8 0f 84 ff ff       	call   c0010143 <KePanic(char const*)>
c0017d34:	83 c4 10             	add    esp,0x10
c0017d37:	8a 03                	mov    al,BYTE PTR [ebx]
c0017d39:	a2 80 41 02 c0       	mov    ds:0xc0024180,al
c0017d3e:	83 c3 03             	add    ebx,0x3
c0017d41:	52                   	push   edx
c0017d42:	52                   	push   edx
c0017d43:	6a 00                	push   0x0
c0017d45:	53                   	push   ebx
c0017d46:	e8 b2 e5 fe ff       	call   c00062fd <iso_open>
c0017d4b:	83 c4 10             	add    esp,0x10
c0017d4e:	89 c5                	mov    ebp,eax
c0017d50:	83 f8 ff             	cmp    eax,0xffffffff
c0017d53:	75 0f                	jne    c0017d64 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xa2>
c0017d55:	50                   	push   eax
c0017d56:	50                   	push   eax
c0017d57:	6a 01                	push   0x1
c0017d59:	53                   	push   ebx
c0017d5a:	e8 9e e5 fe ff       	call   c00062fd <iso_open>
c0017d5f:	c6 07 01             	mov    BYTE PTR [edi],0x1
c0017d62:	eb 1a                	jmp    c0017d7e <ISO9660::stat(char const*, unsigned long long*, bool*)+0xbc>
c0017d64:	83 ec 0c             	sub    esp,0xc
c0017d67:	50                   	push   eax
c0017d68:	e8 03 e8 fe ff       	call   c0006570 <iso_total>
c0017d6d:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017d74:	89 06                	mov    DWORD PTR [esi],eax
c0017d76:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017d79:	e8 09 e6 fe ff       	call   c0006387 <iso_close>
c0017d7e:	83 c4 10             	add    esp,0x10
c0017d81:	31 d2                	xor    edx,edx
c0017d83:	eb 05                	jmp    c0017d8a <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c0017d85:	ba 04 00 00 00       	mov    edx,0x4
c0017d8a:	83 c4 0c             	add    esp,0xc
c0017d8d:	89 d0                	mov    eax,edx
c0017d8f:	5b                   	pop    ebx
c0017d90:	5e                   	pop    esi
c0017d91:	5f                   	pop    edi
c0017d92:	5d                   	pop    ebp
c0017d93:	c3                   	ret    

c0017d94 <ISO9660::close(void*)>:
c0017d94:	83 ec 0c             	sub    esp,0xc
c0017d97:	b8 04 00 00 00       	mov    eax,0x4
c0017d9c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017da0:	85 d2                	test   edx,edx
c0017da2:	74 11                	je     c0017db5 <ISO9660::close(void*)+0x21>
c0017da4:	83 ec 0c             	sub    esp,0xc
c0017da7:	83 ea 64             	sub    edx,0x64
c0017daa:	52                   	push   edx
c0017dab:	e8 d7 e5 fe ff       	call   c0006387 <iso_close>
c0017db0:	83 c4 10             	add    esp,0x10
c0017db3:	31 c0                	xor    eax,eax
c0017db5:	83 c4 0c             	add    esp,0xc
c0017db8:	c3                   	ret    
c0017db9:	90                   	nop

c0017dba <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0017dba:	55                   	push   ebp
c0017dbb:	57                   	push   edi
c0017dbc:	56                   	push   esi
c0017dbd:	53                   	push   ebx
c0017dbe:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017dc4:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c0017dcb:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0017dd2:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0017dd9:	85 c0                	test   eax,eax
c0017ddb:	0f 84 96 00 00 00    	je     c0017e77 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017de1:	85 db                	test   ebx,ebx
c0017de3:	0f 84 8e 00 00 00    	je     c0017e77 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017de9:	83 ec 0c             	sub    esp,0xc
c0017dec:	83 e8 64             	sub    eax,0x64
c0017def:	50                   	push   eax
c0017df0:	e8 cc e7 fe ff       	call   c00065c1 <iso_readdir>
c0017df5:	83 c4 10             	add    esp,0x10
c0017df8:	89 c6                	mov    esi,eax
c0017dfa:	85 c0                	test   eax,eax
c0017dfc:	75 18                	jne    c0017e16 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x5c>
c0017dfe:	52                   	push   edx
c0017dff:	68 10 01 00 00       	push   0x110
c0017e04:	6a 00                	push   0x0
c0017e06:	57                   	push   edi
c0017e07:	e8 c4 86 fe ff       	call   c00004d0 <memset>
c0017e0c:	83 c4 10             	add    esp,0x10
c0017e0f:	b8 01 00 00 00       	mov    eax,0x1
c0017e14:	eb 66                	jmp    c0017e7c <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017e16:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0017e1c:	8d 68 08             	lea    ebp,[eax+0x8]
c0017e1f:	83 ec 0c             	sub    esp,0xc
c0017e22:	55                   	push   ebp
c0017e23:	e8 18 87 fe ff       	call   c0000540 <strlen>
c0017e28:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017e30:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017e34:	83 c4 10             	add    esp,0x10
c0017e37:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0017e3b:	75 0a                	jne    c0017e47 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x8d>
c0017e3d:	b8 02 00 00 00       	mov    eax,0x2
c0017e42:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0017e45:	74 05                	je     c0017e4c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c0017e47:	b8 01 00 00 00       	mov    eax,0x1
c0017e4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017e50:	50                   	push   eax
c0017e51:	50                   	push   eax
c0017e52:	55                   	push   ebp
c0017e53:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017e57:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0017e5b:	50                   	push   eax
c0017e5c:	e8 9f 87 fe ff       	call   c0000600 <strcpy>
c0017e61:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0017e68:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017e6a:	31 c0                	xor    eax,eax
c0017e6c:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0017e72:	83 c4 10             	add    esp,0x10
c0017e75:	eb 05                	jmp    c0017e7c <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017e77:	b8 04 00 00 00       	mov    eax,0x4
c0017e7c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017e82:	5b                   	pop    ebx
c0017e83:	5e                   	pop    esi
c0017e84:	5f                   	pop    edi
c0017e85:	5d                   	pop    ebp
c0017e86:	c3                   	ret    

c0017e87 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0017e87:	57                   	push   edi
c0017e88:	56                   	push   esi
c0017e89:	53                   	push   ebx
c0017e8a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017e8e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017e92:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017e96:	39 35 84 41 02 c0    	cmp    DWORD PTR ds:0xc0024184,esi
c0017e9c:	75 08                	jne    c0017ea6 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0017e9e:	38 1d f0 fc 01 c0    	cmp    BYTE PTR ds:0xc001fcf0,bl
c0017ea4:	74 4a                	je     c0017ef0 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017ea6:	83 ec 0c             	sub    esp,0xc
c0017ea9:	31 d2                	xor    edx,edx
c0017eab:	68 a0 41 02 c0       	push   0xc00241a0
c0017eb0:	0f be c3             	movsx  eax,bl
c0017eb3:	6a 01                	push   0x1
c0017eb5:	52                   	push   edx
c0017eb6:	56                   	push   esi
c0017eb7:	ff 34 85 7c 31 02 c0 	push   DWORD PTR [eax*4-0x3ffdce84]
c0017ebe:	e8 25 4d ff ff       	call   c000cbe8 <LogicalDisk::read(unsigned long long, int, void*)>
c0017ec3:	83 c4 20             	add    esp,0x20
c0017ec6:	85 c0                	test   eax,eax
c0017ec8:	75 0e                	jne    c0017ed8 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0017eca:	89 35 84 41 02 c0    	mov    DWORD PTR ds:0xc0024184,esi
c0017ed0:	88 1d f0 fc 01 c0    	mov    BYTE PTR ds:0xc001fcf0,bl
c0017ed6:	eb 18                	jmp    c0017ef0 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017ed8:	50                   	push   eax
c0017ed9:	68 00 08 00 00       	push   0x800
c0017ede:	6a 00                	push   0x0
c0017ee0:	57                   	push   edi
c0017ee1:	e8 ea 85 fe ff       	call   c00004d0 <memset>
c0017ee6:	83 c4 10             	add    esp,0x10
c0017ee9:	b8 01 00 00 00       	mov    eax,0x1
c0017eee:	eb 0e                	jmp    c0017efe <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c0017ef0:	be a0 41 02 c0       	mov    esi,0xc00241a0
c0017ef5:	b9 00 08 00 00       	mov    ecx,0x800
c0017efa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017efc:	31 c0                	xor    eax,eax
c0017efe:	5b                   	pop    ebx
c0017eff:	5e                   	pop    esi
c0017f00:	5f                   	pop    edi
c0017f01:	c3                   	ret    

c0017f02 <ISO9660::tryMount(LogicalDisk*, int)>:
c0017f02:	53                   	push   ebx
c0017f03:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0017f09:	c7 05 84 41 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0024184,0xdeadbeef
c0017f13:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0017f1a:	8d 58 41             	lea    ebx,[eax+0x41]
c0017f1d:	0f be db             	movsx  ebx,bl
c0017f20:	53                   	push   ebx
c0017f21:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017f25:	50                   	push   eax
c0017f26:	6a 10                	push   0x10
c0017f28:	e8 5a ff ff ff       	call   c0017e87 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017f2d:	83 c4 10             	add    esp,0x10
c0017f30:	31 d2                	xor    edx,edx
c0017f32:	85 c0                	test   eax,eax
c0017f34:	75 33                	jne    c0017f69 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f36:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0017f3b:	75 2c                	jne    c0017f69 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f3d:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0017f42:	75 25                	jne    c0017f69 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f44:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0017f49:	75 1e                	jne    c0017f69 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f4b:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0017f50:	75 17                	jne    c0017f69 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f52:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0017f57:	75 10                	jne    c0017f69 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f59:	83 ec 0c             	sub    esp,0xc
c0017f5c:	53                   	push   ebx
c0017f5d:	e8 5d e8 fe ff       	call   c00067bf <init_percd>
c0017f62:	83 c4 10             	add    esp,0x10
c0017f65:	40                   	inc    eax
c0017f66:	0f 95 c2             	setne  dl
c0017f69:	88 d0                	mov    al,dl
c0017f6b:	81 c4 08 08 00 00    	add    esp,0x808
c0017f71:	5b                   	pop    ebx
c0017f72:	c3                   	ret    
c0017f73:	90                   	nop

c0017f74 <ISO9660::ISO9660()>:
c0017f74:	83 ec 0c             	sub    esp,0xc
c0017f77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f7b:	83 ec 0c             	sub    esp,0xc
c0017f7e:	50                   	push   eax
c0017f7f:	e8 76 28 ff ff       	call   c000a7fa <Filesystem::Filesystem()>
c0017f84:	83 c4 10             	add    esp,0x10
c0017f87:	ba e4 f2 01 c0       	mov    edx,0xc001f2e4
c0017f8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f90:	89 10                	mov    DWORD PTR [eax],edx
c0017f92:	e8 2a e9 fe ff       	call   c00068c1 <fs_iso9660_init>
c0017f97:	90                   	nop
c0017f98:	83 c4 0c             	add    esp,0xc
c0017f9b:	c3                   	ret    

c0017f9c <SoundCard::beginPlayback()>:
c0017f9c:	c7 44 24 04 44 f3 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f344
c0017fa4:	e9 9a 81 ff ff       	jmp    c0010143 <KePanic(char const*)>
c0017fa9:	90                   	nop

c0017faa <SoundCard::stopPlayback()>:
c0017faa:	c7 44 24 04 44 f3 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f344
c0017fb2:	e9 8c 81 ff ff       	jmp    c0010143 <KePanic(char const*)>
c0017fb7:	90                   	nop

c0017fb8 <SoundCard::SoundCard(char const*)>:
c0017fb8:	83 ec 1c             	sub    esp,0x1c
c0017fbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fbf:	83 ec 08             	sub    esp,0x8
c0017fc2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017fc6:	50                   	push   eax
c0017fc7:	e8 e4 3a ff ff       	call   c000bab0 <Device::Device(char const*)>
c0017fcc:	83 c4 10             	add    esp,0x10
c0017fcf:	ba 90 f3 01 c0       	mov    edx,0xc001f390
c0017fd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fd8:	89 10                	mov    DWORD PTR [eax],edx
c0017fda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fde:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017fe5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fe9:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0017ff3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ff7:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0018001:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018005:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001800f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018013:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001801d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0018025:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001802a:	7f 19                	jg     c0018045 <SoundCard::SoundCard(char const*)+0x8d>
c001802c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018030:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018034:	83 c2 54             	add    edx,0x54
c0018037:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001803f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0018043:	eb e0                	jmp    c0018025 <SoundCard::SoundCard(char const*)+0x6d>
c0018045:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018049:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0018050:	90                   	nop
c0018051:	83 c4 1c             	add    esp,0x1c
c0018054:	c3                   	ret    
c0018055:	90                   	nop

c0018056 <SoundCard::~SoundCard()>:
c0018056:	83 ec 0c             	sub    esp,0xc
c0018059:	ba 90 f3 01 c0       	mov    edx,0xc001f390
c001805e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018062:	89 10                	mov    DWORD PTR [eax],edx
c0018064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018068:	83 ec 0c             	sub    esp,0xc
c001806b:	50                   	push   eax
c001806c:	e8 a9 37 ff ff       	call   c000b81a <Device::~Device()>
c0018071:	83 c4 10             	add    esp,0x10
c0018074:	90                   	nop
c0018075:	83 c4 0c             	add    esp,0xc
c0018078:	c3                   	ret    
c0018079:	90                   	nop

c001807a <SoundCard::~SoundCard()>:
c001807a:	83 ec 0c             	sub    esp,0xc
c001807d:	83 ec 0c             	sub    esp,0xc
c0018080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018084:	e8 cd ff ff ff       	call   c0018056 <SoundCard::~SoundCard()>
c0018089:	83 c4 10             	add    esp,0x10
c001808c:	83 ec 08             	sub    esp,0x8
c001808f:	68 e8 01 00 00       	push   0x1e8
c0018094:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018098:	e8 45 23 ff ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001809d:	83 c4 10             	add    esp,0x10
c00180a0:	83 c4 0c             	add    esp,0xc
c00180a3:	c3                   	ret    

c00180a4 <SoundCard::configureRates(int, int, int)>:
c00180a4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00180a8:	31 c0                	xor    eax,eax
c00180aa:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c00180b1:	75 20                	jne    c00180d3 <SoundCard::configureRates(int, int, int)+0x2f>
c00180b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00180b7:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c00180bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180c1:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c00180c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180cb:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c00180d1:	b0 01                	mov    al,0x1
c00180d3:	c3                   	ret    

c00180d4 <SoundCard::getSamples16(int, short*)>:
c00180d4:	55                   	push   ebp
c00180d5:	57                   	push   edi
c00180d6:	31 ff                	xor    edi,edi
c00180d8:	56                   	push   esi
c00180d9:	53                   	push   ebx
c00180da:	31 db                	xor    ebx,ebx
c00180dc:	83 ec 10             	sub    esp,0x10
c00180df:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00180e3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00180e7:	8d 04 36             	lea    eax,[esi+esi*1]
c00180ea:	50                   	push   eax
c00180eb:	6a 00                	push   0x0
c00180ed:	55                   	push   ebp
c00180ee:	e8 dd 83 fe ff       	call   c00004d0 <memset>
c00180f3:	83 c4 10             	add    esp,0x10
c00180f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180fa:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0018101:	85 c0                	test   eax,eax
c0018103:	74 1b                	je     c0018120 <SoundCard::getSamples16(int, short*)+0x4c>
c0018105:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0018109:	75 15                	jne    c0018120 <SoundCard::getSamples16(int, short*)+0x4c>
c001810b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001810f:	55                   	push   ebp
c0018110:	56                   	push   esi
c0018111:	50                   	push   eax
c0018112:	e8 ed 02 00 00       	call   c0018404 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0018117:	83 c4 10             	add    esp,0x10
c001811a:	39 c7                	cmp    edi,eax
c001811c:	7d 02                	jge    c0018120 <SoundCard::getSamples16(int, short*)+0x4c>
c001811e:	89 c7                	mov    edi,eax
c0018120:	43                   	inc    ebx
c0018121:	83 fb 20             	cmp    ebx,0x20
c0018124:	75 d0                	jne    c00180f6 <SoundCard::getSamples16(int, short*)+0x22>
c0018126:	83 c4 0c             	add    esp,0xc
c0018129:	89 f8                	mov    eax,edi
c001812b:	5b                   	pop    ebx
c001812c:	5e                   	pop    esi
c001812d:	5f                   	pop    edi
c001812e:	5d                   	pop    ebp
c001812f:	c3                   	ret    

c0018130 <SoundCard::getSamples32(int, int*)>:
c0018130:	55                   	push   ebp
c0018131:	57                   	push   edi
c0018132:	31 ff                	xor    edi,edi
c0018134:	56                   	push   esi
c0018135:	31 f6                	xor    esi,esi
c0018137:	53                   	push   ebx
c0018138:	83 ec 10             	sub    esp,0x10
c001813b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001813f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0018143:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0018147:	c1 e0 02             	shl    eax,0x2
c001814a:	50                   	push   eax
c001814b:	6a 00                	push   0x0
c001814d:	55                   	push   ebp
c001814e:	e8 7d 83 fe ff       	call   c00004d0 <memset>
c0018153:	83 c4 10             	add    esp,0x10
c0018156:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001815d:	85 c0                	test   eax,eax
c001815f:	74 1b                	je     c001817c <SoundCard::getSamples32(int, int*)+0x4c>
c0018161:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0018165:	75 15                	jne    c001817c <SoundCard::getSamples32(int, int*)+0x4c>
c0018167:	53                   	push   ebx
c0018168:	55                   	push   ebp
c0018169:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001816d:	50                   	push   eax
c001816e:	e8 55 03 00 00       	call   c00184c8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0018173:	83 c4 10             	add    esp,0x10
c0018176:	39 c6                	cmp    esi,eax
c0018178:	7d 02                	jge    c001817c <SoundCard::getSamples32(int, int*)+0x4c>
c001817a:	89 c6                	mov    esi,eax
c001817c:	47                   	inc    edi
c001817d:	83 ff 20             	cmp    edi,0x20
c0018180:	75 d4                	jne    c0018156 <SoundCard::getSamples32(int, int*)+0x26>
c0018182:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c0018188:	85 f6                	test   esi,esi
c001818a:	75 0f                	jne    c001819b <SoundCard::getSamples32(int, int*)+0x6b>
c001818c:	84 c0                	test   al,al
c001818e:	74 1b                	je     c00181ab <SoundCard::getSamples32(int, int*)+0x7b>
c0018190:	83 ec 0c             	sub    esp,0xc
c0018193:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018195:	53                   	push   ebx
c0018196:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0018199:	eb 0d                	jmp    c00181a8 <SoundCard::getSamples32(int, int*)+0x78>
c001819b:	84 c0                	test   al,al
c001819d:	75 0c                	jne    c00181ab <SoundCard::getSamples32(int, int*)+0x7b>
c001819f:	83 ec 0c             	sub    esp,0xc
c00181a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00181a4:	53                   	push   ebx
c00181a5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00181a8:	83 c4 10             	add    esp,0x10
c00181ab:	83 c4 0c             	add    esp,0xc
c00181ae:	89 f0                	mov    eax,esi
c00181b0:	5b                   	pop    ebx
c00181b1:	5e                   	pop    esi
c00181b2:	5f                   	pop    edi
c00181b3:	5d                   	pop    ebp
c00181b4:	c3                   	ret    
c00181b5:	90                   	nop

c00181b6 <SoundCard::addChannel(SoundPort*)>:
c00181b6:	83 ec 0c             	sub    esp,0xc
c00181b9:	31 c0                	xor    eax,eax
c00181bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00181bf:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00181c7:	74 1b                	je     c00181e4 <SoundCard::addChannel(SoundPort*)+0x2e>
c00181c9:	40                   	inc    eax
c00181ca:	83 f8 20             	cmp    eax,0x20
c00181cd:	75 f0                	jne    c00181bf <SoundCard::addChannel(SoundPort*)+0x9>
c00181cf:	83 ec 0c             	sub    esp,0xc
c00181d2:	68 69 f3 01 c0       	push   0xc001f369
c00181d7:	e8 67 7f ff ff       	call   c0010143 <KePanic(char const*)>
c00181dc:	83 c4 10             	add    esp,0x10
c00181df:	83 c8 ff             	or     eax,0xffffffff
c00181e2:	eb 0b                	jmp    c00181ef <SoundCard::addChannel(SoundPort*)+0x39>
c00181e4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00181e8:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c00181ef:	83 c4 0c             	add    esp,0xc
c00181f2:	c3                   	ret    
c00181f3:	90                   	nop

c00181f4 <SoundCard::removeChannel(int)>:
c00181f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00181fc:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0018207:	c3                   	ret    

c0018208 <SoundPort::SoundPort(int, int, int, int)>:
c0018208:	83 ec 0c             	sub    esp,0xc
c001820b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001820f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018216:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001821a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001821e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018222:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018226:	89 10                	mov    DWORD PTR [eax],edx
c0018228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001822c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018230:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0018233:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018237:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001823b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001823e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0018243:	75 13                	jne    c0018258 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0018245:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018249:	8b 00                	mov    eax,DWORD PTR [eax]
c001824b:	05 a0 0f 00 00       	add    eax,0xfa0
c0018250:	01 c0                	add    eax,eax
c0018252:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018256:	66 90                	xchg   ax,ax
c0018258:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001825c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018260:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018263:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018267:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001826e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018272:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018275:	c1 e0 02             	shl    eax,0x2
c0018278:	83 ec 0c             	sub    esp,0xc
c001827b:	50                   	push   eax
c001827c:	e8 38 f5 fe ff       	call   c00077b9 <malloc>
c0018281:	83 c4 10             	add    esp,0x10
c0018284:	89 c2                	mov    edx,eax
c0018286:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001828a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001828d:	90                   	nop
c001828e:	83 c4 0c             	add    esp,0xc
c0018291:	c3                   	ret    
c0018292:	66 90                	xchg   ax,ax

c0018294 <SoundPort::~SoundPort()>:
c0018294:	83 ec 0c             	sub    esp,0xc
c0018297:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001829b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001829e:	85 c0                	test   eax,eax
c00182a0:	74 1e                	je     c00182c0 <SoundPort::~SoundPort()+0x2c>
c00182a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182a6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00182a9:	83 ec 0c             	sub    esp,0xc
c00182ac:	50                   	push   eax
c00182ad:	e8 17 f5 fe ff       	call   c00077c9 <free>
c00182b2:	83 c4 10             	add    esp,0x10
c00182b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182b9:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00182c0:	90                   	nop
c00182c1:	83 c4 0c             	add    esp,0xc
c00182c4:	c3                   	ret    
c00182c5:	90                   	nop
c00182c6:	66 90                	xchg   ax,ax

c00182c8 <SoundPort::unpause()>:
c00182c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00182cc:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c00182d0:	c3                   	ret    
c00182d1:	90                   	nop
c00182d2:	66 90                	xchg   ax,ax

c00182d4 <SoundPort::pause()>:
c00182d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00182d8:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c00182dc:	c3                   	ret    
c00182dd:	90                   	nop
c00182de:	66 90                	xchg   ax,ax

c00182e0 <SoundPort::getBufferUsed()>:
c00182e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00182e4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00182e7:	c3                   	ret    

c00182e8 <SoundPort::getBufferSize()>:
c00182e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00182ec:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00182ef:	c3                   	ret    

c00182f0 <SoundPort::buffer16(short*, int)>:
c00182f0:	55                   	push   ebp
c00182f1:	57                   	push   edi
c00182f2:	56                   	push   esi
c00182f3:	53                   	push   ebx
c00182f4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00182f8:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00182fc:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00182ff:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0018302:	74 68                	je     c001836c <SoundPort::buffer16(short*, int)+0x7c>
c0018304:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018308:	85 c9                	test   ecx,ecx
c001830a:	7e 60                	jle    c001836c <SoundPort::buffer16(short*, int)+0x7c>
c001830c:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0018310:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0018313:	c1 e1 0f             	shl    ecx,0xf
c0018316:	8d 70 01             	lea    esi,[eax+0x1]
c0018319:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001831c:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001831f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018322:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018325:	74 4d                	je     c0018374 <SoundPort::buffer16(short*, int)+0x84>
c0018327:	31 f6                	xor    esi,esi
c0018329:	eb 21                	jmp    c001834c <SoundPort::buffer16(short*, int)+0x5c>
c001832b:	90                   	nop
c001832c:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0018331:	8d 79 01             	lea    edi,[ecx+0x1]
c0018334:	c1 e3 0f             	shl    ebx,0xf
c0018337:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001833a:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001833d:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0018340:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018343:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018346:	74 1c                	je     c0018364 <SoundPort::buffer16(short*, int)+0x74>
c0018348:	89 c6                	mov    esi,eax
c001834a:	66 90                	xchg   ax,ax
c001834c:	8d 46 01             	lea    eax,[esi+0x1]
c001834f:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0018353:	75 d7                	jne    c001832c <SoundPort::buffer16(short*, int)+0x3c>
c0018355:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018359:	8d 76 00             	lea    esi,[esi+0x0]
c001835c:	5b                   	pop    ebx
c001835d:	5e                   	pop    esi
c001835e:	5f                   	pop    edi
c001835f:	5d                   	pop    ebp
c0018360:	c3                   	ret    
c0018361:	8d 76 00             	lea    esi,[esi+0x0]
c0018364:	5b                   	pop    ebx
c0018365:	8d 46 02             	lea    eax,[esi+0x2]
c0018368:	5e                   	pop    esi
c0018369:	5f                   	pop    edi
c001836a:	5d                   	pop    ebp
c001836b:	c3                   	ret    
c001836c:	5b                   	pop    ebx
c001836d:	31 c0                	xor    eax,eax
c001836f:	5e                   	pop    esi
c0018370:	5f                   	pop    edi
c0018371:	5d                   	pop    ebp
c0018372:	c3                   	ret    
c0018373:	90                   	nop
c0018374:	b8 01 00 00 00       	mov    eax,0x1
c0018379:	eb e1                	jmp    c001835c <SoundPort::buffer16(short*, int)+0x6c>
c001837b:	90                   	nop

c001837c <SoundPort::buffer32(int*, int)>:
c001837c:	55                   	push   ebp
c001837d:	57                   	push   edi
c001837e:	56                   	push   esi
c001837f:	53                   	push   ebx
c0018380:	51                   	push   ecx
c0018381:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018385:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018389:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001838c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018390:	89 04 24             	mov    DWORD PTR [esp],eax
c0018393:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018396:	74 5c                	je     c00183f4 <SoundPort::buffer32(int*, int)+0x78>
c0018398:	85 c0                	test   eax,eax
c001839a:	7e 58                	jle    c00183f4 <SoundPort::buffer32(int*, int)+0x78>
c001839c:	8d 71 01             	lea    esi,[ecx+0x1]
c001839f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c00183a2:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c00183a5:	8b 37                	mov    esi,DWORD PTR [edi]
c00183a7:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c00183aa:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00183ad:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00183b0:	74 4a                	je     c00183fc <SoundPort::buffer32(int*, int)+0x80>
c00183b2:	31 f6                	xor    esi,esi
c00183b4:	eb 1e                	jmp    c00183d4 <SoundPort::buffer32(int*, int)+0x58>
c00183b6:	66 90                	xchg   ax,ax
c00183b8:	8d 69 01             	lea    ebp,[ecx+0x1]
c00183bb:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c00183be:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00183c1:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00183c4:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c00183c8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00183cb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00183ce:	74 18                	je     c00183e8 <SoundPort::buffer32(int*, int)+0x6c>
c00183d0:	89 de                	mov    esi,ebx
c00183d2:	66 90                	xchg   ax,ax
c00183d4:	8d 5e 01             	lea    ebx,[esi+0x1]
c00183d7:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c00183da:	75 dc                	jne    c00183b8 <SoundPort::buffer32(int*, int)+0x3c>
c00183dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00183df:	90                   	nop
c00183e0:	5a                   	pop    edx
c00183e1:	5b                   	pop    ebx
c00183e2:	5e                   	pop    esi
c00183e3:	5f                   	pop    edi
c00183e4:	5d                   	pop    ebp
c00183e5:	c3                   	ret    
c00183e6:	66 90                	xchg   ax,ax
c00183e8:	5a                   	pop    edx
c00183e9:	8d 46 02             	lea    eax,[esi+0x2]
c00183ec:	5b                   	pop    ebx
c00183ed:	5e                   	pop    esi
c00183ee:	5f                   	pop    edi
c00183ef:	5d                   	pop    ebp
c00183f0:	c3                   	ret    
c00183f1:	8d 76 00             	lea    esi,[esi+0x0]
c00183f4:	5a                   	pop    edx
c00183f5:	31 c0                	xor    eax,eax
c00183f7:	5b                   	pop    ebx
c00183f8:	5e                   	pop    esi
c00183f9:	5f                   	pop    edi
c00183fa:	5d                   	pop    ebp
c00183fb:	c3                   	ret    
c00183fc:	b8 01 00 00 00       	mov    eax,0x1
c0018401:	eb dd                	jmp    c00183e0 <SoundPort::buffer32(int*, int)+0x64>
c0018403:	90                   	nop

c0018404 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0018404:	57                   	push   edi
c0018405:	56                   	push   esi
c0018406:	53                   	push   ebx
c0018407:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001840b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001840f:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0018415:	39 03                	cmp    DWORD PTR [ebx],eax
c0018417:	74 13                	je     c001842c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0018419:	83 ec 0c             	sub    esp,0xc
c001841c:	68 bc f3 01 c0       	push   0xc001f3bc
c0018421:	e8 1d 7d ff ff       	call   c0010143 <KePanic(char const*)>
c0018426:	83 c4 10             	add    esp,0x10
c0018429:	8d 76 00             	lea    esi,[esi+0x0]
c001842c:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c0018432:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0018435:	74 11                	je     c0018448 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c0018437:	83 ec 0c             	sub    esp,0xc
c001843a:	68 fb f3 01 c0       	push   0xc001f3fb
c001843f:	e8 ff 7c ff ff       	call   c0010143 <KePanic(char const*)>
c0018444:	83 c4 10             	add    esp,0x10
c0018447:	90                   	nop
c0018448:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001844e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0018451:	74 11                	je     c0018464 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c0018453:	83 ec 0c             	sub    esp,0xc
c0018456:	68 fb f3 01 c0       	push   0xc001f3fb
c001845b:	e8 e3 7c ff ff       	call   c0010143 <KePanic(char const*)>
c0018460:	83 c4 10             	add    esp,0x10
c0018463:	90                   	nop
c0018464:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0018467:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001846b:	7e 07                	jle    c0018474 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001846d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018471:	8d 76 00             	lea    esi,[esi+0x0]
c0018474:	85 f6                	test   esi,esi
c0018476:	7e 2c                	jle    c00184a4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0018478:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001847c:	8d 3c 36             	lea    edi,[esi+esi*1]
c001847f:	31 c9                	xor    ecx,ecx
c0018481:	01 d7                	add    edi,edx
c0018483:	90                   	nop
c0018484:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0018487:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001848a:	85 c0                	test   eax,eax
c001848c:	79 06                	jns    c0018494 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001848e:	05 ff 7f 00 00       	add    eax,0x7fff
c0018493:	90                   	nop
c0018494:	c1 f8 0f             	sar    eax,0xf
c0018497:	83 c1 04             	add    ecx,0x4
c001849a:	66 01 02             	add    WORD PTR [edx],ax
c001849d:	83 c2 02             	add    edx,0x2
c00184a0:	39 d7                	cmp    edi,edx
c00184a2:	75 e0                	jne    c0018484 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c00184a4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00184a7:	50                   	push   eax
c00184a8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00184ab:	29 f0                	sub    eax,esi
c00184ad:	c1 e0 02             	shl    eax,0x2
c00184b0:	50                   	push   eax
c00184b1:	8d 04 b2             	lea    eax,[edx+esi*4]
c00184b4:	50                   	push   eax
c00184b5:	52                   	push   edx
c00184b6:	e8 25 7f fe ff       	call   c00003e0 <memmove>
c00184bb:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c00184be:	83 c4 10             	add    esp,0x10
c00184c1:	89 f0                	mov    eax,esi
c00184c3:	5b                   	pop    ebx
c00184c4:	5e                   	pop    esi
c00184c5:	5f                   	pop    edi
c00184c6:	c3                   	ret    
c00184c7:	90                   	nop

c00184c8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c00184c8:	57                   	push   edi
c00184c9:	56                   	push   esi
c00184ca:	53                   	push   ebx
c00184cb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00184cf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00184d3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00184d7:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c00184dd:	39 06                	cmp    DWORD PTR [esi],eax
c00184df:	74 13                	je     c00184f4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c00184e1:	83 ec 0c             	sub    esp,0xc
c00184e4:	68 dc f3 01 c0       	push   0xc001f3dc
c00184e9:	e8 55 7c ff ff       	call   c0010143 <KePanic(char const*)>
c00184ee:	83 c4 10             	add    esp,0x10
c00184f1:	8d 76 00             	lea    esi,[esi+0x0]
c00184f4:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c00184fa:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c00184fd:	74 11                	je     c0018510 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c00184ff:	83 ec 0c             	sub    esp,0xc
c0018502:	68 17 f4 01 c0       	push   0xc001f417
c0018507:	e8 37 7c ff ff       	call   c0010143 <KePanic(char const*)>
c001850c:	83 c4 10             	add    esp,0x10
c001850f:	90                   	nop
c0018510:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c0018516:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0018519:	74 11                	je     c001852c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001851b:	83 ec 0c             	sub    esp,0xc
c001851e:	68 17 f4 01 c0       	push   0xc001f417
c0018523:	e8 1b 7c ff ff       	call   c0010143 <KePanic(char const*)>
c0018528:	83 c4 10             	add    esp,0x10
c001852b:	90                   	nop
c001852c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001852f:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c0018533:	7e 07                	jle    c001853c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c0018535:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0018539:	8d 76 00             	lea    esi,[esi+0x0]
c001853c:	85 ff                	test   edi,edi
c001853e:	7e 1c                	jle    c001855c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c0018540:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0018547:	31 c0                	xor    eax,eax
c0018549:	8d 76 00             	lea    esi,[esi+0x0]
c001854c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001854f:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c0018552:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c0018555:	83 c0 04             	add    eax,0x4
c0018558:	39 c1                	cmp    ecx,eax
c001855a:	75 f0                	jne    c001854c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001855c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001855f:	50                   	push   eax
c0018560:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0018563:	29 f8                	sub    eax,edi
c0018565:	c1 e0 02             	shl    eax,0x2
c0018568:	50                   	push   eax
c0018569:	8d 04 ba             	lea    eax,[edx+edi*4]
c001856c:	50                   	push   eax
c001856d:	52                   	push   edx
c001856e:	e8 6d 7e fe ff       	call   c00003e0 <memmove>
c0018573:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c0018576:	83 c4 10             	add    esp,0x10
c0018579:	89 f8                	mov    eax,edi
c001857b:	5b                   	pop    ebx
c001857c:	5e                   	pop    esi
c001857d:	5f                   	pop    edi
c001857e:	c3                   	ret    
c001857f:	90                   	nop

c0018580 <PCI::open(int, int, void*)>:
c0018580:	83 ec 18             	sub    esp,0x18
c0018583:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018587:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001858b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0018591:	8b 10                	mov    edx,DWORD PTR [eax]
c0018593:	50                   	push   eax
c0018594:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0018597:	31 c0                	xor    eax,eax
c0018599:	83 c4 1c             	add    esp,0x1c
c001859c:	c3                   	ret    
c001859d:	90                   	nop

c001859e <PCI::close(int, int, void*)>:
c001859e:	31 c0                	xor    eax,eax
c00185a0:	c3                   	ret    
c00185a1:	90                   	nop

c00185a2 <PCI::PCI()>:
c00185a2:	83 ec 0c             	sub    esp,0xc
c00185a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185a9:	83 ec 08             	sub    esp,0x8
c00185ac:	68 33 f4 01 c0       	push   0xc001f433
c00185b1:	50                   	push   eax
c00185b2:	e8 b5 2c ff ff       	call   c000b26c <Bus::Bus(char const*)>
c00185b7:	83 c4 10             	add    esp,0x10
c00185ba:	ba dc f4 01 c0       	mov    edx,0xc001f4dc
c00185bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185c3:	89 10                	mov    DWORD PTR [eax],edx
c00185c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185c9:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c00185d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185d7:	a3 a0 49 02 c0       	mov    ds:0xc00249a0,eax
c00185dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185e0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00185e6:	31 d2                	xor    edx,edx
c00185e8:	88 c2                	mov    dl,al
c00185ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185ee:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00185f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185f9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00185ff:	31 d2                	xor    edx,edx
c0018601:	88 c2                	mov    dl,al
c0018603:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018607:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001860c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018610:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0018616:	8d 50 01             	lea    edx,[eax+0x1]
c0018619:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001861d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0018623:	31 d2                	xor    edx,edx
c0018625:	88 c2                	mov    dl,al
c0018627:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001862b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001862f:	83 c9 c0             	or     ecx,0xffffffc0
c0018632:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0018636:	90                   	nop
c0018637:	83 c4 0c             	add    esp,0xc
c001863a:	c3                   	ret    
c001863b:	90                   	nop

c001863c <PCI::readBAR8(unsigned int, int)>:
c001863c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018640:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018644:	f6 c2 01             	test   dl,0x1
c0018647:	74 07                	je     c0018650 <PCI::readBAR8(unsigned int, int)+0x14>
c0018649:	83 e2 fc             	and    edx,0xfffffffc
c001864c:	01 c2                	add    edx,eax
c001864e:	ec                   	in     al,dx
c001864f:	c3                   	ret    
c0018650:	83 e2 f0             	and    edx,0xfffffff0
c0018653:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0018656:	c3                   	ret    
c0018657:	90                   	nop

c0018658 <PCI::readBAR16(unsigned int, int)>:
c0018658:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001865c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018660:	f6 c2 01             	test   dl,0x1
c0018663:	74 08                	je     c001866d <PCI::readBAR16(unsigned int, int)+0x15>
c0018665:	83 e2 fc             	and    edx,0xfffffffc
c0018668:	01 c2                	add    edx,eax
c001866a:	66 ed                	in     ax,dx
c001866c:	c3                   	ret    
c001866d:	83 e2 f0             	and    edx,0xfffffff0
c0018670:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0018674:	c3                   	ret    
c0018675:	90                   	nop

c0018676 <PCI::readBAR32(unsigned int, int)>:
c0018676:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001867a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001867e:	f6 c2 01             	test   dl,0x1
c0018681:	74 07                	je     c001868a <PCI::readBAR32(unsigned int, int)+0x14>
c0018683:	83 e2 fc             	and    edx,0xfffffffc
c0018686:	01 c2                	add    edx,eax
c0018688:	ed                   	in     eax,dx
c0018689:	c3                   	ret    
c001868a:	83 e2 f0             	and    edx,0xfffffff0
c001868d:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0018690:	c3                   	ret    
c0018691:	90                   	nop

c0018692 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0018692:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018696:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001869a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001869e:	f6 c2 01             	test   dl,0x1
c00186a1:	74 07                	je     c00186aa <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c00186a3:	83 e2 fc             	and    edx,0xfffffffc
c00186a6:	01 ca                	add    edx,ecx
c00186a8:	ee                   	out    dx,al
c00186a9:	c3                   	ret    
c00186aa:	83 e2 f0             	and    edx,0xfffffff0
c00186ad:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c00186b0:	c3                   	ret    
c00186b1:	90                   	nop

c00186b2 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c00186b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00186b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00186ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00186be:	f6 c2 01             	test   dl,0x1
c00186c1:	74 08                	je     c00186cb <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c00186c3:	83 e2 fc             	and    edx,0xfffffffc
c00186c6:	01 ca                	add    edx,ecx
c00186c8:	66 ef                	out    dx,ax
c00186ca:	c3                   	ret    
c00186cb:	83 e2 f0             	and    edx,0xfffffff0
c00186ce:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c00186d2:	c3                   	ret    
c00186d3:	90                   	nop

c00186d4 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c00186d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00186d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00186dc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00186e0:	f6 c2 01             	test   dl,0x1
c00186e3:	74 07                	je     c00186ec <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c00186e5:	83 e2 fc             	and    edx,0xfffffffc
c00186e8:	01 ca                	add    edx,ecx
c00186ea:	ef                   	out    dx,eax
c00186eb:	c3                   	ret    
c00186ec:	83 e2 f0             	and    edx,0xfffffff0
c00186ef:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c00186f2:	c3                   	ret    
c00186f3:	90                   	nop

c00186f4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00186f4:	55                   	push   ebp
c00186f5:	57                   	push   edi
c00186f6:	56                   	push   esi
c00186f7:	53                   	push   ebx
c00186f8:	83 ec 0c             	sub    esp,0xc
c00186fb:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00186ff:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0018703:	89 f0                	mov    eax,esi
c0018705:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0018709:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001870d:	3c 07                	cmp    al,0x7
c001870f:	76 10                	jbe    c0018721 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0018711:	83 ec 0c             	sub    esp,0xc
c0018714:	68 3b f4 01 c0       	push   0xc001f43b
c0018719:	e8 25 7a ff ff       	call   c0010143 <KePanic(char const*)>
c001871e:	83 c4 10             	add    esp,0x10
c0018721:	80 fb 0f             	cmp    bl,0xf
c0018724:	76 10                	jbe    c0018736 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0018726:	83 ec 0c             	sub    esp,0xc
c0018729:	68 6b f4 01 c0       	push   0xc001f46b
c001872e:	e8 10 7a ff ff       	call   c0010143 <KePanic(char const*)>
c0018733:	83 c4 10             	add    esp,0x10
c0018736:	8d 04 36             	lea    eax,[esi+esi*1]
c0018739:	ba f8 0c 00 00       	mov    edx,0xcf8
c001873e:	83 c8 f0             	or     eax,0xfffffff0
c0018741:	ee                   	out    dx,al
c0018742:	ba fa 0c 00 00       	mov    edx,0xcfa
c0018747:	89 e8                	mov    eax,ebp
c0018749:	ee                   	out    dx,al
c001874a:	83 c4 0c             	add    esp,0xc
c001874d:	89 d8                	mov    eax,ebx
c001874f:	66 81 e7 fc 00       	and    di,0xfc
c0018754:	5b                   	pop    ebx
c0018755:	c1 e0 08             	shl    eax,0x8
c0018758:	5e                   	pop    esi
c0018759:	09 f8                	or     eax,edi
c001875b:	5f                   	pop    edi
c001875c:	66 0d 00 c0          	or     ax,0xc000
c0018760:	5d                   	pop    ebp
c0018761:	c3                   	ret    

c0018762 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018762:	57                   	push   edi
c0018763:	56                   	push   esi
c0018764:	53                   	push   ebx
c0018765:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018769:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001876d:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0018773:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018777:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001877b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001877f:	83 ff 01             	cmp    edi,0x1
c0018782:	75 3e                	jne    c00187c2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0018784:	89 de                	mov    esi,ebx
c0018786:	0f b6 c0             	movzx  eax,al
c0018789:	81 e6 fc 00 00 00    	and    esi,0xfc
c001878f:	c1 e0 10             	shl    eax,0x10
c0018792:	0f b6 c9             	movzx  ecx,cl
c0018795:	09 f0                	or     eax,esi
c0018797:	c1 e1 08             	shl    ecx,0x8
c001879a:	0f b6 d2             	movzx  edx,dl
c001879d:	09 c8                	or     eax,ecx
c001879f:	c1 e2 0b             	shl    edx,0xb
c00187a2:	09 d0                	or     eax,edx
c00187a4:	ba f8 0c 00 00       	mov    edx,0xcf8
c00187a9:	0d 00 00 00 80       	or     eax,0x80000000
c00187ae:	ef                   	out    dx,eax
c00187af:	ba fc 0c 00 00       	mov    edx,0xcfc
c00187b4:	ed                   	in     eax,dx
c00187b5:	83 e3 02             	and    ebx,0x2
c00187b8:	0f b6 cb             	movzx  ecx,bl
c00187bb:	c1 e1 03             	shl    ecx,0x3
c00187be:	d3 e8                	shr    eax,cl
c00187c0:	eb 43                	jmp    c0018805 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00187c2:	83 ff 02             	cmp    edi,0x2
c00187c5:	75 2c                	jne    c00187f3 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c00187c7:	83 ec 0c             	sub    esp,0xc
c00187ca:	0f b6 c9             	movzx  ecx,cl
c00187cd:	0f b6 d2             	movzx  edx,dl
c00187d0:	0f b6 fb             	movzx  edi,bl
c00187d3:	0f b6 c0             	movzx  eax,al
c00187d6:	57                   	push   edi
c00187d7:	51                   	push   ecx
c00187d8:	52                   	push   edx
c00187d9:	50                   	push   eax
c00187da:	56                   	push   esi
c00187db:	e8 14 ff ff ff       	call   c00186f4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187e0:	89 c2                	mov    edx,eax
c00187e2:	ed                   	in     eax,dx
c00187e3:	83 e3 02             	and    ebx,0x2
c00187e6:	83 c4 20             	add    esp,0x20
c00187e9:	0f b6 cb             	movzx  ecx,bl
c00187ec:	c1 e1 03             	shl    ecx,0x3
c00187ef:	d3 e8                	shr    eax,cl
c00187f1:	eb 12                	jmp    c0018805 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00187f3:	83 ec 0c             	sub    esp,0xc
c00187f6:	68 9b f4 01 c0       	push   0xc001f49b
c00187fb:	e8 43 79 ff ff       	call   c0010143 <KePanic(char const*)>
c0018800:	83 c4 10             	add    esp,0x10
c0018803:	31 c0                	xor    eax,eax
c0018805:	5b                   	pop    ebx
c0018806:	5e                   	pop    esi
c0018807:	5f                   	pop    edi
c0018808:	c3                   	ret    
c0018809:	90                   	nop

c001880a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001880a:	83 ec 18             	sub    esp,0x18
c001880d:	6a 00                	push   0x0
c001880f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018814:	50                   	push   eax
c0018815:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001881a:	50                   	push   eax
c001881b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018820:	50                   	push   eax
c0018821:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018825:	e8 38 ff ff ff       	call   c0018762 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001882a:	83 c4 2c             	add    esp,0x2c
c001882d:	c3                   	ret    

c001882e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001882e:	83 ec 18             	sub    esp,0x18
c0018831:	6a 0e                	push   0xe
c0018833:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018838:	50                   	push   eax
c0018839:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001883e:	50                   	push   eax
c001883f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018844:	50                   	push   eax
c0018845:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018849:	e8 14 ff ff ff       	call   c0018762 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001884e:	83 c4 2c             	add    esp,0x2c
c0018851:	0f b6 c0             	movzx  eax,al
c0018854:	c3                   	ret    
c0018855:	90                   	nop

c0018856 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0018856:	55                   	push   ebp
c0018857:	57                   	push   edi
c0018858:	56                   	push   esi
c0018859:	53                   	push   ebx
c001885a:	83 ec 18             	sub    esp,0x18
c001885d:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0018862:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0018867:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001886c:	6a 0a                	push   0xa
c001886e:	56                   	push   esi
c001886f:	55                   	push   ebp
c0018870:	57                   	push   edi
c0018871:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018875:	e8 e8 fe ff ff       	call   c0018762 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001887a:	83 c4 14             	add    esp,0x14
c001887d:	89 c3                	mov    ebx,eax
c001887f:	6a 0a                	push   0xa
c0018881:	0f b6 db             	movzx  ebx,bl
c0018884:	56                   	push   esi
c0018885:	55                   	push   ebp
c0018886:	57                   	push   edi
c0018887:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001888b:	e8 d2 fe ff ff       	call   c0018762 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018890:	83 c4 2c             	add    esp,0x2c
c0018893:	25 00 ff 00 00       	and    eax,0xff00
c0018898:	09 d8                	or     eax,ebx
c001889a:	5b                   	pop    ebx
c001889b:	5e                   	pop    esi
c001889c:	5f                   	pop    edi
c001889d:	5d                   	pop    ebp
c001889e:	c3                   	ret    
c001889f:	90                   	nop

c00188a0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00188a0:	83 ec 18             	sub    esp,0x18
c00188a3:	6a 08                	push   0x8
c00188a5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188aa:	50                   	push   eax
c00188ab:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188b0:	50                   	push   eax
c00188b1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188b6:	50                   	push   eax
c00188b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00188bb:	e8 a2 fe ff ff       	call   c0018762 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188c0:	83 c4 2c             	add    esp,0x2c
c00188c3:	0f b6 c4             	movzx  eax,ah
c00188c6:	c3                   	ret    
c00188c7:	90                   	nop

c00188c8 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c00188c8:	83 ec 18             	sub    esp,0x18
c00188cb:	6a 08                	push   0x8
c00188cd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188d2:	50                   	push   eax
c00188d3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188d8:	50                   	push   eax
c00188d9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188de:	50                   	push   eax
c00188df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00188e3:	e8 7a fe ff ff       	call   c0018762 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188e8:	83 c4 2c             	add    esp,0x2c
c00188eb:	c3                   	ret    

c00188ec <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00188ec:	83 ec 18             	sub    esp,0x18
c00188ef:	6a 3c                	push   0x3c
c00188f1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188f6:	50                   	push   eax
c00188f7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188fc:	50                   	push   eax
c00188fd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018902:	50                   	push   eax
c0018903:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018907:	e8 56 fe ff ff       	call   c0018762 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001890c:	83 c4 2c             	add    esp,0x2c
c001890f:	c3                   	ret    

c0018910 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0018910:	83 ec 18             	sub    esp,0x18
c0018913:	6a 18                	push   0x18
c0018915:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001891a:	50                   	push   eax
c001891b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018920:	50                   	push   eax
c0018921:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018926:	50                   	push   eax
c0018927:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001892b:	e8 32 fe ff ff       	call   c0018762 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018930:	83 c4 2c             	add    esp,0x2c
c0018933:	0f b6 c4             	movzx  eax,ah
c0018936:	c3                   	ret    
c0018937:	90                   	nop

c0018938 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018938:	55                   	push   ebp
c0018939:	57                   	push   edi
c001893a:	56                   	push   esi
c001893b:	53                   	push   ebx
c001893c:	83 ec 28             	sub    esp,0x28
c001893f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0018943:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0018948:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001894d:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0018952:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0018959:	8d 43 12             	lea    eax,[ebx+0x12]
c001895c:	83 c3 10             	add    ebx,0x10
c001895f:	0f b6 c0             	movzx  eax,al
c0018962:	0f b6 db             	movzx  ebx,bl
c0018965:	50                   	push   eax
c0018966:	51                   	push   ecx
c0018967:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001896b:	57                   	push   edi
c001896c:	55                   	push   ebp
c001896d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018971:	e8 ec fd ff ff       	call   c0018762 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018976:	83 c4 14             	add    esp,0x14
c0018979:	89 c6                	mov    esi,eax
c001897b:	53                   	push   ebx
c001897c:	c1 e6 10             	shl    esi,0x10
c001897f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018983:	51                   	push   ecx
c0018984:	57                   	push   edi
c0018985:	55                   	push   ebp
c0018986:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001898a:	e8 d3 fd ff ff       	call   c0018762 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001898f:	83 c4 3c             	add    esp,0x3c
c0018992:	0f b7 c0             	movzx  eax,ax
c0018995:	5b                   	pop    ebx
c0018996:	09 f0                	or     eax,esi
c0018998:	5e                   	pop    esi
c0018999:	5f                   	pop    edi
c001899a:	5d                   	pop    ebp
c001899b:	c3                   	ret    

c001899c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001899c:	55                   	push   ebp
c001899d:	57                   	push   edi
c001899e:	56                   	push   esi
c001899f:	53                   	push   ebx
c00189a0:	83 ec 0c             	sub    esp,0xc
c00189a3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00189a7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00189ab:	89 f5                	mov    ebp,esi
c00189ad:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c00189b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00189b7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00189bb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00189bf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00189c3:	83 f9 01             	cmp    ecx,0x1
c00189c6:	75 5d                	jne    c0018a25 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c00189c8:	0f b6 c8             	movzx  ecx,al
c00189cb:	0f b6 d2             	movzx  edx,dl
c00189ce:	c1 e1 10             	shl    ecx,0x10
c00189d1:	c1 e2 0b             	shl    edx,0xb
c00189d4:	89 f0                	mov    eax,esi
c00189d6:	25 fc 00 00 00       	and    eax,0xfc
c00189db:	09 c1                	or     ecx,eax
c00189dd:	89 e8                	mov    eax,ebp
c00189df:	0f b6 c0             	movzx  eax,al
c00189e2:	c1 e0 08             	shl    eax,0x8
c00189e5:	09 c1                	or     ecx,eax
c00189e7:	09 d1                	or     ecx,edx
c00189e9:	ba f8 0c 00 00       	mov    edx,0xcf8
c00189ee:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00189f4:	89 c8                	mov    eax,ecx
c00189f6:	ef                   	out    dx,eax
c00189f7:	ba fc 0c 00 00       	mov    edx,0xcfc
c00189fc:	ed                   	in     eax,dx
c00189fd:	0f b7 db             	movzx  ebx,bx
c0018a00:	83 e6 02             	and    esi,0x2
c0018a03:	74 0a                	je     c0018a0f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0018a05:	0f b7 d0             	movzx  edx,ax
c0018a08:	c1 e3 10             	shl    ebx,0x10
c0018a0b:	09 d3                	or     ebx,edx
c0018a0d:	eb 05                	jmp    c0018a14 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0018a0f:	66 31 c0             	xor    ax,ax
c0018a12:	09 c3                	or     ebx,eax
c0018a14:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018a19:	89 c8                	mov    eax,ecx
c0018a1b:	ef                   	out    dx,eax
c0018a1c:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018a21:	89 d8                	mov    eax,ebx
c0018a23:	eb 41                	jmp    c0018a66 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0018a25:	83 f9 02             	cmp    ecx,0x2
c0018a28:	75 45                	jne    c0018a6f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0018a2a:	83 ec 0c             	sub    esp,0xc
c0018a2d:	0f b6 d2             	movzx  edx,dl
c0018a30:	89 f1                	mov    ecx,esi
c0018a32:	0f b6 c0             	movzx  eax,al
c0018a35:	0f b6 f1             	movzx  esi,cl
c0018a38:	89 e9                	mov    ecx,ebp
c0018a3a:	56                   	push   esi
c0018a3b:	0f b6 c9             	movzx  ecx,cl
c0018a3e:	51                   	push   ecx
c0018a3f:	52                   	push   edx
c0018a40:	50                   	push   eax
c0018a41:	57                   	push   edi
c0018a42:	e8 ad fc ff ff       	call   c00186f4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018a47:	89 c2                	mov    edx,eax
c0018a49:	ed                   	in     eax,dx
c0018a4a:	83 c4 20             	add    esp,0x20
c0018a4d:	0f b7 db             	movzx  ebx,bx
c0018a50:	f6 c2 02             	test   dl,0x2
c0018a53:	74 0c                	je     c0018a61 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0018a55:	0f b7 c8             	movzx  ecx,ax
c0018a58:	89 d8                	mov    eax,ebx
c0018a5a:	c1 e0 10             	shl    eax,0x10
c0018a5d:	09 c8                	or     eax,ecx
c0018a5f:	eb 05                	jmp    c0018a66 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0018a61:	66 31 c0             	xor    ax,ax
c0018a64:	09 d8                	or     eax,ebx
c0018a66:	ef                   	out    dx,eax
c0018a67:	83 c4 0c             	add    esp,0xc
c0018a6a:	5b                   	pop    ebx
c0018a6b:	5e                   	pop    esi
c0018a6c:	5f                   	pop    edi
c0018a6d:	5d                   	pop    ebp
c0018a6e:	c3                   	ret    
c0018a6f:	c7 44 24 20 9b f4 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f49b
c0018a77:	83 c4 0c             	add    esp,0xc
c0018a7a:	5b                   	pop    ebx
c0018a7b:	5e                   	pop    esi
c0018a7c:	5f                   	pop    edi
c0018a7d:	5d                   	pop    ebp
c0018a7e:	e9 c0 76 ff ff       	jmp    c0010143 <KePanic(char const*)>
c0018a83:	90                   	nop

c0018a84 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0018a84:	55                   	push   ebp
c0018a85:	57                   	push   edi
c0018a86:	56                   	push   esi
c0018a87:	53                   	push   ebx
c0018a88:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018a8e:	80 3d ac 49 02 c0 00 	cmp    BYTE PTR ds:0xc00249ac,0x0
c0018a95:	0f 85 84 00 00 00    	jne    c0018b1f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0018a9b:	83 ec 0c             	sub    esp,0xc
c0018a9e:	68 14 01 00 00       	push   0x114
c0018aa3:	e8 11 ed fe ff       	call   c00077b9 <malloc>
c0018aa8:	83 c4 0c             	add    esp,0xc
c0018aab:	89 c3                	mov    ebx,eax
c0018aad:	ff 35 f0 3f 02 c0    	push   DWORD PTR ds:0xc0023ff0
c0018ab3:	68 a1 f4 01 c0       	push   0xc001f4a1
c0018ab8:	50                   	push   eax
c0018ab9:	e8 90 1f ff ff       	call   c000aa4e <File::File(char const*, Process*)>
c0018abe:	5a                   	pop    edx
c0018abf:	59                   	pop    ecx
c0018ac0:	6a 01                	push   0x1
c0018ac2:	53                   	push   ebx
c0018ac3:	e8 46 20 ff ff       	call   c000ab0e <File::open(FileOpenMode)>
c0018ac8:	83 c4 0c             	add    esp,0xc
c0018acb:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0018acf:	50                   	push   eax
c0018ad0:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018ad4:	50                   	push   eax
c0018ad5:	53                   	push   ebx
c0018ad6:	e8 df 22 ff ff       	call   c000adba <File::stat(unsigned long long*, bool*)>
c0018adb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018adf:	40                   	inc    eax
c0018ae0:	89 04 24             	mov    DWORD PTR [esp],eax
c0018ae3:	e8 d1 ec fe ff       	call   c00077b9 <malloc>
c0018ae8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018aec:	a3 a8 49 02 c0       	mov    ds:0xc00249a8,eax
c0018af1:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0018af5:	5e                   	pop    esi
c0018af6:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018af8:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0018afc:	51                   	push   ecx
c0018afd:	50                   	push   eax
c0018afe:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018b02:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018b06:	53                   	push   ebx
c0018b07:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018b0a:	83 c4 14             	add    esp,0x14
c0018b0d:	53                   	push   ebx
c0018b0e:	e8 59 20 ff ff       	call   c000ab6c <File::close()>
c0018b13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b17:	83 c4 10             	add    esp,0x10
c0018b1a:	a3 a4 49 02 c0       	mov    ds:0xc00249a4,eax
c0018b1f:	a1 a4 49 02 c0       	mov    eax,ds:0xc00249a4
c0018b24:	8b 15 a8 49 02 c0    	mov    edx,DWORD PTR ds:0xc00249a8
c0018b2a:	89 04 24             	mov    DWORD PTR [esp],eax
c0018b2d:	31 ff                	xor    edi,edi
c0018b2f:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0018b37:	31 f6                	xor    esi,esi
c0018b39:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018b3e:	31 db                	xor    ebx,ebx
c0018b40:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0018b48:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018b4d:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0018b54:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0018b58:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0018b5f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0018b63:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018b66:	0f 8e 6b 01 00 00    	jle    c0018cd7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0018b6c:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018b6f:	d4 40                	aam    0x40
c0018b71:	d5 39                	aad    0x39
c0018b73:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018b77:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0018b7b:	d4 40                	aam    0x40
c0018b7d:	d5 39                	aad    0x39
c0018b7f:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018b83:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0018b87:	d4 40                	aam    0x40
c0018b89:	d5 39                	aad    0x39
c0018b8b:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018b8f:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0018b93:	d4 40                	aam    0x40
c0018b95:	d5 39                	aad    0x39
c0018b97:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018b9b:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0018b9f:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018ba3:	3c 56                	cmp    al,0x56
c0018ba5:	74 45                	je     c0018bec <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0018ba7:	d4 40                	aam    0x40
c0018ba9:	d5 39                	aad    0x39
c0018bab:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018bae:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0018bb2:	0f b6 c9             	movzx  ecx,cl
c0018bb5:	c1 e1 04             	shl    ecx,0x4
c0018bb8:	d4 40                	aam    0x40
c0018bba:	d5 39                	aad    0x39
c0018bbc:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018bbf:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0018bc3:	0f b6 db             	movzx  ebx,bl
c0018bc6:	09 cb                	or     ebx,ecx
c0018bc8:	c1 e3 04             	shl    ebx,0x4
c0018bcb:	d4 40                	aam    0x40
c0018bcd:	d5 39                	aad    0x39
c0018bcf:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018bd2:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0018bd6:	0f b6 c9             	movzx  ecx,cl
c0018bd9:	09 cb                	or     ebx,ecx
c0018bdb:	c1 e3 04             	shl    ebx,0x4
c0018bde:	89 d9                	mov    ecx,ebx
c0018be0:	d4 40                	aam    0x40
c0018be2:	d5 39                	aad    0x39
c0018be4:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018be7:	0f b6 db             	movzx  ebx,bl
c0018bea:	09 cb                	or     ebx,ecx
c0018bec:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0018bf0:	80 f9 44             	cmp    cl,0x44
c0018bf3:	74 47                	je     c0018c3c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0018bf5:	88 c8                	mov    al,cl
c0018bf7:	d4 40                	aam    0x40
c0018bf9:	d5 39                	aad    0x39
c0018bfb:	83 e8 30             	sub    eax,0x30
c0018bfe:	0f b6 e8             	movzx  ebp,al
c0018c01:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0018c05:	c1 e5 04             	shl    ebp,0x4
c0018c08:	d4 40                	aam    0x40
c0018c0a:	d5 39                	aad    0x39
c0018c0c:	83 e8 30             	sub    eax,0x30
c0018c0f:	0f b6 f0             	movzx  esi,al
c0018c12:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0018c16:	09 ee                	or     esi,ebp
c0018c18:	c1 e6 04             	shl    esi,0x4
c0018c1b:	d4 40                	aam    0x40
c0018c1d:	d5 39                	aad    0x39
c0018c1f:	83 e8 30             	sub    eax,0x30
c0018c22:	0f b6 e8             	movzx  ebp,al
c0018c25:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0018c29:	09 ee                	or     esi,ebp
c0018c2b:	c1 e6 04             	shl    esi,0x4
c0018c2e:	89 f5                	mov    ebp,esi
c0018c30:	d4 40                	aam    0x40
c0018c32:	d5 39                	aad    0x39
c0018c34:	83 e8 30             	sub    eax,0x30
c0018c37:	0f b6 f0             	movzx  esi,al
c0018c3a:	09 ee                	or     esi,ebp
c0018c3c:	83 c7 10             	add    edi,0x10
c0018c3f:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0018c43:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018c46:	3c 0a                	cmp    al,0xa
c0018c48:	74 09                	je     c0018c53 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0018c4a:	45                   	inc    ebp
c0018c4b:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018c4e:	75 16                	jne    c0018c66 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0018c50:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0018c53:	3c 0a                	cmp    al,0xa
c0018c55:	0f 94 c0             	sete   al
c0018c58:	0f b6 c0             	movzx  eax,al
c0018c5b:	01 c7                	add    edi,eax
c0018c5d:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0018c62:	75 0c                	jne    c0018c70 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0018c64:	eb 15                	jmp    c0018c7b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0018c66:	47                   	inc    edi
c0018c67:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0018c6a:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0018c6e:	eb d3                	jmp    c0018c43 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0018c70:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0018c75:	0f 85 e8 fe ff ff    	jne    c0018b63 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c7b:	80 f9 44             	cmp    cl,0x44
c0018c7e:	74 0b                	je     c0018c8b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0018c80:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0018c85:	0f 85 d8 fe ff ff    	jne    c0018b63 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c8b:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018c8f:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018c93:	c1 e1 04             	shl    ecx,0x4
c0018c96:	83 e8 30             	sub    eax,0x30
c0018c99:	09 c8                	or     eax,ecx
c0018c9b:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0018c9f:	0f 85 be fe ff ff    	jne    c0018b63 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018ca5:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0018ca9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018cad:	c1 e1 04             	shl    ecx,0x4
c0018cb0:	83 e8 30             	sub    eax,0x30
c0018cb3:	09 c8                	or     eax,ecx
c0018cb5:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0018cb9:	0f 85 a4 fe ff ff    	jne    c0018b63 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018cbf:	50                   	push   eax
c0018cc0:	50                   	push   eax
c0018cc1:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018cc5:	50                   	push   eax
c0018cc6:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0018ccd:	e8 2e 79 fe ff       	call   c0000600 <strcpy>
c0018cd2:	83 c4 10             	add    esp,0x10
c0018cd5:	eb 15                	jmp    c0018cec <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0018cd7:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018cde:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0018ce9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018cec:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018cf3:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018cf9:	5b                   	pop    ebx
c0018cfa:	5e                   	pop    esi
c0018cfb:	5f                   	pop    edi
c0018cfc:	5d                   	pop    ebp
c0018cfd:	c3                   	ret    

c0018cfe <PCI::checkBus(unsigned char)>:
c0018cfe:	56                   	push   esi
c0018cff:	53                   	push   ebx
c0018d00:	31 f6                	xor    esi,esi
c0018d02:	51                   	push   ecx
c0018d03:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0018d07:	0f b6 c3             	movzx  eax,bl
c0018d0a:	52                   	push   edx
c0018d0b:	56                   	push   esi
c0018d0c:	46                   	inc    esi
c0018d0d:	50                   	push   eax
c0018d0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018d12:	e8 f3 02 00 00       	call   c001900a <PCI::checkDevice(unsigned char, unsigned char)>
c0018d17:	83 c4 10             	add    esp,0x10
c0018d1a:	83 fe 20             	cmp    esi,0x20
c0018d1d:	75 e8                	jne    c0018d07 <PCI::checkBus(unsigned char)+0x9>
c0018d1f:	58                   	pop    eax
c0018d20:	5b                   	pop    ebx
c0018d21:	5e                   	pop    esi
c0018d22:	c3                   	ret    
c0018d23:	90                   	nop

c0018d24 <PCI::foundDevice(PCIDeviceInfo)>:
c0018d24:	55                   	push   ebp
c0018d25:	57                   	push   edi
c0018d26:	56                   	push   esi
c0018d27:	53                   	push   ebx
c0018d28:	83 ec 1c             	sub    esp,0x1c
c0018d2b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018d2f:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0018d35:	0f 84 52 01 00 00    	je     c0018e8d <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018d3b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0018d3f:	66 81 f9 06 04       	cmp    cx,0x406
c0018d44:	75 2c                	jne    c0018d72 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0018d46:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0018d4b:	50                   	push   eax
c0018d4c:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0018d51:	50                   	push   eax
c0018d52:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0018d57:	50                   	push   eax
c0018d58:	56                   	push   esi
c0018d59:	e8 b2 fb ff ff       	call   c0018910 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0018d5e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0018d62:	0f b6 c0             	movzx  eax,al
c0018d65:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018d69:	83 c4 2c             	add    esp,0x2c
c0018d6c:	5b                   	pop    ebx
c0018d6d:	5e                   	pop    esi
c0018d6e:	5f                   	pop    edi
c0018d6f:	5d                   	pop    ebp
c0018d70:	eb 8c                	jmp    c0018cfe <PCI::checkBus(unsigned char)>
c0018d72:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018d76:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0018d7c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018d80:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018d84:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0018d88:	88 d3                	mov    bl,dl
c0018d8a:	85 c0                	test   eax,eax
c0018d8c:	74 33                	je     c0018dc1 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0018d8e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018d91:	85 d2                	test   edx,edx
c0018d93:	74 28                	je     c0018dbd <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018d95:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0018d9b:	31 ef                	xor    edi,ebp
c0018d9d:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0018da3:	75 18                	jne    c0018dbd <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018da5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018da9:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0018daf:	75 0c                	jne    c0018dbd <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018db1:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0018db7:	0f 84 d0 00 00 00    	je     c0018e8d <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018dbd:	8b 00                	mov    eax,DWORD PTR [eax]
c0018dbf:	eb c9                	jmp    c0018d8a <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0018dc1:	66 81 f9 01 06       	cmp    cx,0x601
c0018dc6:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0018dca:	75 19                	jne    c0018de5 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0018dcc:	83 ec 0c             	sub    esp,0xc
c0018dcf:	68 64 01 00 00       	push   0x164
c0018dd4:	e8 e0 e9 fe ff       	call   c00077b9 <malloc>
c0018dd9:	89 c5                	mov    ebp,eax
c0018ddb:	89 04 24             	mov    DWORD PTR [esp],eax
c0018dde:	e8 47 0e 00 00       	call   c0019c2a <SATABus::SATABus()>
c0018de3:	eb 1e                	jmp    c0018e03 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0018de5:	66 81 f9 01 01       	cmp    cx,0x101
c0018dea:	75 60                	jne    c0018e4c <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0018dec:	83 ec 0c             	sub    esp,0xc
c0018def:	68 70 02 00 00       	push   0x270
c0018df4:	e8 c0 e9 fe ff       	call   c00077b9 <malloc>
c0018df9:	89 c5                	mov    ebp,eax
c0018dfb:	89 04 24             	mov    DWORD PTR [esp],eax
c0018dfe:	e8 cb 02 00 00       	call   c00190ce <IDE::IDE()>
c0018e03:	58                   	pop    eax
c0018e04:	5a                   	pop    edx
c0018e05:	55                   	push   ebp
c0018e06:	56                   	push   esi
c0018e07:	e8 0c 2b ff ff       	call   c000b918 <Device::addChild(Device*)>
c0018e0c:	83 ec 1c             	sub    esp,0x1c
c0018e0f:	b9 09 00 00 00       	mov    ecx,0x9
c0018e14:	fc                   	cld    
c0018e15:	89 e7                	mov    edi,esp
c0018e17:	89 de                	mov    esi,ebx
c0018e19:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018e1b:	55                   	push   ebp
c0018e1c:	e8 3d 2a ff ff       	call   c000b85e <Device::preOpenPCI(PCIDeviceInfo)>
c0018e21:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018e24:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0018e28:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0018e30:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0018e38:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0018e40:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018e43:	83 c4 4c             	add    esp,0x4c
c0018e46:	5b                   	pop    ebx
c0018e47:	5e                   	pop    esi
c0018e48:	5f                   	pop    edi
c0018e49:	5d                   	pop    ebp
c0018e4a:	ff e0                	jmp    eax
c0018e4c:	83 ec 0c             	sub    esp,0xc
c0018e4f:	68 58 01 00 00       	push   0x158
c0018e54:	e8 60 e9 fe ff       	call   c00077b9 <malloc>
c0018e59:	89 c5                	mov    ebp,eax
c0018e5b:	58                   	pop    eax
c0018e5c:	5a                   	pop    edx
c0018e5d:	68 ba f4 01 c0       	push   0xc001f4ba
c0018e62:	55                   	push   ebp
c0018e63:	e8 4e 2d ff ff       	call   c000bbb6 <DriverlessDevice::DriverlessDevice(char const*)>
c0018e68:	59                   	pop    ecx
c0018e69:	5f                   	pop    edi
c0018e6a:	55                   	push   ebp
c0018e6b:	56                   	push   esi
c0018e6c:	e8 a7 2a ff ff       	call   c000b918 <Device::addChild(Device*)>
c0018e71:	b9 09 00 00 00       	mov    ecx,0x9
c0018e76:	fc                   	cld    
c0018e77:	89 df                	mov    edi,ebx
c0018e79:	89 de                	mov    esi,ebx
c0018e7b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018e7d:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0018e81:	83 c4 2c             	add    esp,0x2c
c0018e84:	5b                   	pop    ebx
c0018e85:	5e                   	pop    esi
c0018e86:	5f                   	pop    edi
c0018e87:	5d                   	pop    ebp
c0018e88:	e9 d1 29 ff ff       	jmp    c000b85e <Device::preOpenPCI(PCIDeviceInfo)>
c0018e8d:	83 c4 1c             	add    esp,0x1c
c0018e90:	5b                   	pop    ebx
c0018e91:	5e                   	pop    esi
c0018e92:	5f                   	pop    edi
c0018e93:	5d                   	pop    ebp
c0018e94:	c3                   	ret    
c0018e95:	90                   	nop

c0018e96 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0018e96:	55                   	push   ebp
c0018e97:	57                   	push   edi
c0018e98:	56                   	push   esi
c0018e99:	53                   	push   ebx
c0018e9a:	83 ec 68             	sub    esp,0x68
c0018e9d:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0018ea1:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018ea8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018eac:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0018eb3:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0018eb8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018ebc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0018ec3:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c0018ec8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018ecc:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018ed1:	6a 0c                	push   0xc
c0018ed3:	57                   	push   edi
c0018ed4:	53                   	push   ebx
c0018ed5:	56                   	push   esi
c0018ed6:	55                   	push   ebp
c0018ed7:	e8 86 f8 ff ff       	call   c0018762 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018edc:	83 c4 20             	add    esp,0x20
c0018edf:	57                   	push   edi
c0018ee0:	53                   	push   ebx
c0018ee1:	56                   	push   esi
c0018ee2:	55                   	push   ebp
c0018ee3:	e8 6e f9 ff ff       	call   c0018856 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0018ee8:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0018eed:	57                   	push   edi
c0018eee:	53                   	push   ebx
c0018eef:	56                   	push   esi
c0018ef0:	55                   	push   ebp
c0018ef1:	e8 f6 f9 ff ff       	call   c00188ec <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0018ef6:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0018efa:	83 c4 14             	add    esp,0x14
c0018efd:	6a 3c                	push   0x3c
c0018eff:	57                   	push   edi
c0018f00:	53                   	push   ebx
c0018f01:	56                   	push   esi
c0018f02:	55                   	push   ebp
c0018f03:	e8 5a f8 ff ff       	call   c0018762 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018f08:	0f b6 c4             	movzx  eax,ah
c0018f0b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018f0f:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0018f13:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0018f17:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c0018f1c:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c0018f22:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0018f28:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018f2c:	83 c4 20             	add    esp,0x20
c0018f2f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018f34:	74 30                	je     c0018f66 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018f36:	31 c0                	xor    eax,eax
c0018f38:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018f3c:	7e 28                	jle    c0018f66 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018f3e:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c0018f46:	39 cb                	cmp    ebx,ecx
c0018f48:	75 19                	jne    c0018f63 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018f4a:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c0018f52:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0018f56:	75 0b                	jne    c0018f63 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018f58:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c0018f5f:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c0018f63:	40                   	inc    eax
c0018f64:	eb d2                	jmp    c0018f38 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c0018f66:	31 d2                	xor    edx,edx
c0018f68:	83 ec 0c             	sub    esp,0xc
c0018f6b:	57                   	push   edi
c0018f6c:	53                   	push   ebx
c0018f6d:	56                   	push   esi
c0018f6e:	52                   	push   edx
c0018f6f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0018f73:	55                   	push   ebp
c0018f74:	e8 bf f9 ff ff       	call   c0018938 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018f79:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018f7d:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0018f81:	42                   	inc    edx
c0018f82:	83 c4 20             	add    esp,0x20
c0018f85:	83 fa 06             	cmp    edx,0x6
c0018f88:	75 de                	jne    c0018f68 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c0018f8a:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018f8f:	83 ec 0c             	sub    esp,0xc
c0018f92:	86 e0                	xchg   al,ah
c0018f94:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0018f99:	6a 02                	push   0x2
c0018f9b:	57                   	push   edi
c0018f9c:	53                   	push   ebx
c0018f9d:	56                   	push   esi
c0018f9e:	55                   	push   ebp
c0018f9f:	e8 be f7 ff ff       	call   c0018762 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018fa4:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0018fa9:	83 c4 20             	add    esp,0x20
c0018fac:	57                   	push   edi
c0018fad:	53                   	push   ebx
c0018fae:	56                   	push   esi
c0018faf:	55                   	push   ebp
c0018fb0:	e8 eb f8 ff ff       	call   c00188a0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0018fb5:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018fb9:	57                   	push   edi
c0018fba:	53                   	push   ebx
c0018fbb:	56                   	push   esi
c0018fbc:	55                   	push   ebp
c0018fbd:	e8 48 f8 ff ff       	call   c001880a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018fc2:	b9 09 00 00 00       	mov    ecx,0x9
c0018fc7:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0018fcc:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c0018fd0:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0018fd4:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0018fd8:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0018fdc:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0018fe0:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0018fe4:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c0018fe8:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0018fec:	83 ec 0c             	sub    esp,0xc
c0018fef:	fc                   	cld    
c0018ff0:	89 e7                	mov    edi,esp
c0018ff2:	8d 74 24 58          	lea    esi,[esp+0x58]
c0018ff6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018ff8:	55                   	push   ebp
c0018ff9:	e8 26 fd ff ff       	call   c0018d24 <PCI::foundDevice(PCIDeviceInfo)>
c0018ffe:	81 c4 8c 00 00 00    	add    esp,0x8c
c0019004:	5b                   	pop    ebx
c0019005:	5e                   	pop    esi
c0019006:	5f                   	pop    edi
c0019007:	5d                   	pop    ebp
c0019008:	c3                   	ret    
c0019009:	90                   	nop

c001900a <PCI::checkDevice(unsigned char, unsigned char)>:
c001900a:	55                   	push   ebp
c001900b:	57                   	push   edi
c001900c:	56                   	push   esi
c001900d:	53                   	push   ebx
c001900e:	83 ec 0c             	sub    esp,0xc
c0019011:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0019015:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001901a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001901f:	6a 00                	push   0x0
c0019021:	56                   	push   esi
c0019022:	57                   	push   edi
c0019023:	55                   	push   ebp
c0019024:	e8 e1 f7 ff ff       	call   c001880a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0019029:	6a 00                	push   0x0
c001902b:	56                   	push   esi
c001902c:	57                   	push   edi
c001902d:	55                   	push   ebp
c001902e:	e8 63 fe ff ff       	call   c0018e96 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0019033:	83 c4 20             	add    esp,0x20
c0019036:	6a 00                	push   0x0
c0019038:	56                   	push   esi
c0019039:	57                   	push   edi
c001903a:	55                   	push   ebp
c001903b:	e8 ee f7 ff ff       	call   c001882e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0019040:	83 c4 10             	add    esp,0x10
c0019043:	84 c0                	test   al,al
c0019045:	79 27                	jns    c001906e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0019047:	bb 01 00 00 00       	mov    ebx,0x1
c001904c:	53                   	push   ebx
c001904d:	56                   	push   esi
c001904e:	57                   	push   edi
c001904f:	55                   	push   ebp
c0019050:	e8 b5 f7 ff ff       	call   c001880a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0019055:	83 c4 10             	add    esp,0x10
c0019058:	66 40                	inc    ax
c001905a:	74 0c                	je     c0019068 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001905c:	53                   	push   ebx
c001905d:	56                   	push   esi
c001905e:	57                   	push   edi
c001905f:	55                   	push   ebp
c0019060:	e8 31 fe ff ff       	call   c0018e96 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0019065:	83 c4 10             	add    esp,0x10
c0019068:	43                   	inc    ebx
c0019069:	83 fb 08             	cmp    ebx,0x8
c001906c:	75 de                	jne    c001904c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001906e:	83 c4 0c             	add    esp,0xc
c0019071:	5b                   	pop    ebx
c0019072:	5e                   	pop    esi
c0019073:	5f                   	pop    edi
c0019074:	5d                   	pop    ebp
c0019075:	c3                   	ret    

c0019076 <PCI::detect()>:
c0019076:	56                   	push   esi
c0019077:	53                   	push   ebx
c0019078:	53                   	push   ebx
c0019079:	31 db                	xor    ebx,ebx
c001907b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001907f:	6a 00                	push   0x0
c0019081:	6a 00                	push   0x0
c0019083:	6a 00                	push   0x0
c0019085:	56                   	push   esi
c0019086:	e8 a3 f7 ff ff       	call   c001882e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001908b:	83 c4 10             	add    esp,0x10
c001908e:	a8 80                	test   al,0x80
c0019090:	75 21                	jne    c00190b3 <PCI::detect()+0x3d>
c0019092:	51                   	push   ecx
c0019093:	51                   	push   ecx
c0019094:	6a 00                	push   0x0
c0019096:	56                   	push   esi
c0019097:	e8 62 fc ff ff       	call   c0018cfe <PCI::checkBus(unsigned char)>
c001909c:	83 c4 10             	add    esp,0x10
c001909f:	eb 24                	jmp    c00190c5 <PCI::detect()+0x4f>
c00190a1:	52                   	push   edx
c00190a2:	52                   	push   edx
c00190a3:	53                   	push   ebx
c00190a4:	43                   	inc    ebx
c00190a5:	56                   	push   esi
c00190a6:	e8 53 fc ff ff       	call   c0018cfe <PCI::checkBus(unsigned char)>
c00190ab:	83 c4 10             	add    esp,0x10
c00190ae:	83 fb 08             	cmp    ebx,0x8
c00190b1:	74 12                	je     c00190c5 <PCI::detect()+0x4f>
c00190b3:	53                   	push   ebx
c00190b4:	6a 00                	push   0x0
c00190b6:	6a 00                	push   0x0
c00190b8:	56                   	push   esi
c00190b9:	e8 4c f7 ff ff       	call   c001880a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00190be:	83 c4 10             	add    esp,0x10
c00190c1:	66 40                	inc    ax
c00190c3:	74 dc                	je     c00190a1 <PCI::detect()+0x2b>
c00190c5:	58                   	pop    eax
c00190c6:	5b                   	pop    ebx
c00190c7:	5e                   	pop    esi
c00190c8:	c3                   	ret    
c00190c9:	90                   	nop

c00190ca <IDE::close(int, int, void*)>:
c00190ca:	83 c8 ff             	or     eax,0xffffffff
c00190cd:	c3                   	ret    

c00190ce <IDE::IDE()>:
c00190ce:	83 ec 0c             	sub    esp,0xc
c00190d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190d5:	83 ec 08             	sub    esp,0x8
c00190d8:	68 00 f5 01 c0       	push   0xc001f500
c00190dd:	50                   	push   eax
c00190de:	e8 79 2b ff ff       	call   c000bc5c <HardDiskController::HardDiskController(char const*)>
c00190e3:	83 c4 10             	add    esp,0x10
c00190e6:	ba 90 f5 01 c0       	mov    edx,0xc001f590
c00190eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190ef:	89 10                	mov    DWORD PTR [eax],edx
c00190f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190f5:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00190fc:	90                   	nop
c00190fd:	83 c4 0c             	add    esp,0xc
c0019100:	c3                   	ret    
c0019101:	90                   	nop

c0019102 <IDE::prepareInterrupt(unsigned char)>:
c0019102:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019107:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001910b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0019113:	c3                   	ret    

c0019114 <selectDrive(unsigned char, unsigned char)>:
c0019114:	c3                   	ret    
c0019115:	90                   	nop

c0019116 <IDE::getBase(unsigned char)>:
c0019116:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001911b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001911f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0019127:	c3                   	ret    

c0019128 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0019128:	55                   	push   ebp
c0019129:	57                   	push   edi
c001912a:	56                   	push   esi
c001912b:	53                   	push   ebx
c001912c:	83 ec 1c             	sub    esp,0x1c
c001912f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0019133:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019137:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001913a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001913e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019142:	80 f9 03             	cmp    cl,0x3
c0019145:	77 51                	ja     c0019198 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0019147:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001914b:	0f b6 f2             	movzx  esi,dl
c001914e:	0f b6 db             	movzx  ebx,bl
c0019151:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0019154:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0019158:	83 ca 80             	or     edx,0xffffff80
c001915b:	0f b6 d2             	movzx  edx,dl
c001915e:	52                   	push   edx
c001915f:	6a 0c                	push   0xc
c0019161:	56                   	push   esi
c0019162:	57                   	push   edi
c0019163:	e8 c0 ff ff ff       	call   c0019128 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019168:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001916d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019171:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0019175:	ee                   	out    dx,al
c0019176:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001917b:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001917f:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0019183:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019187:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001918f:	83 c4 2c             	add    esp,0x2c
c0019192:	5b                   	pop    ebx
c0019193:	5e                   	pop    esi
c0019194:	5f                   	pop    edi
c0019195:	5d                   	pop    ebp
c0019196:	eb 90                	jmp    c0019128 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019198:	80 fb 07             	cmp    bl,0x7
c001919b:	77 12                	ja     c00191af <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001919d:	0f b6 d2             	movzx  edx,dl
c00191a0:	0f b6 db             	movzx  ebx,bl
c00191a3:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c00191ab:	89 da                	mov    edx,ebx
c00191ad:	eb 2f                	jmp    c00191de <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00191af:	80 fb 0d             	cmp    bl,0xd
c00191b2:	77 13                	ja     c00191c7 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c00191b4:	0f b6 d2             	movzx  edx,dl
c00191b7:	0f b6 db             	movzx  ebx,bl
c00191ba:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c00191c1:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c00191c5:	eb 17                	jmp    c00191de <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00191c7:	80 fb 15             	cmp    bl,0x15
c00191ca:	77 13                	ja     c00191df <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c00191cc:	0f b6 d2             	movzx  edx,dl
c00191cf:	0f b6 db             	movzx  ebx,bl
c00191d2:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c00191da:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00191de:	ee                   	out    dx,al
c00191df:	83 c4 1c             	add    esp,0x1c
c00191e2:	5b                   	pop    ebx
c00191e3:	5e                   	pop    esi
c00191e4:	5f                   	pop    edi
c00191e5:	5d                   	pop    ebp
c00191e6:	c3                   	ret    
c00191e7:	90                   	nop

c00191e8 <IDE::read(unsigned char, unsigned char)>:
c00191e8:	55                   	push   ebp
c00191e9:	57                   	push   edi
c00191ea:	56                   	push   esi
c00191eb:	53                   	push   ebx
c00191ec:	83 ec 1c             	sub    esp,0x1c
c00191ef:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00191f3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00191f7:	8d 43 f8             	lea    eax,[ebx-0x8]
c00191fa:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00191fe:	3c 03                	cmp    al,0x3
c0019200:	77 43                	ja     c0019245 <IDE::read(unsigned char, unsigned char)+0x5d>
c0019202:	0f b6 f2             	movzx  esi,dl
c0019205:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0019208:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001920c:	83 c8 80             	or     eax,0xffffff80
c001920f:	0f b6 c0             	movzx  eax,al
c0019212:	50                   	push   eax
c0019213:	6a 0c                	push   0xc
c0019215:	56                   	push   esi
c0019216:	57                   	push   edi
c0019217:	e8 0c ff ff ff       	call   c0019128 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001921c:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0019221:	0f b6 c3             	movzx  eax,bl
c0019224:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0019228:	ec                   	in     al,dx
c0019229:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001922d:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0019232:	52                   	push   edx
c0019233:	6a 0c                	push   0xc
c0019235:	56                   	push   esi
c0019236:	57                   	push   edi
c0019237:	e8 ec fe ff ff       	call   c0019128 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001923c:	83 c4 20             	add    esp,0x20
c001923f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0019243:	eb 49                	jmp    c001928e <IDE::read(unsigned char, unsigned char)+0xa6>
c0019245:	80 fb 07             	cmp    bl,0x7
c0019248:	77 12                	ja     c001925c <IDE::read(unsigned char, unsigned char)+0x74>
c001924a:	0f b6 d2             	movzx  edx,dl
c001924d:	0f b6 c3             	movzx  eax,bl
c0019250:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0019258:	89 c2                	mov    edx,eax
c001925a:	eb 31                	jmp    c001928d <IDE::read(unsigned char, unsigned char)+0xa5>
c001925c:	80 fb 0d             	cmp    bl,0xd
c001925f:	77 13                	ja     c0019274 <IDE::read(unsigned char, unsigned char)+0x8c>
c0019261:	0f b6 d2             	movzx  edx,dl
c0019264:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001926b:	0f b6 d3             	movzx  edx,bl
c001926e:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0019272:	eb 19                	jmp    c001928d <IDE::read(unsigned char, unsigned char)+0xa5>
c0019274:	31 c0                	xor    eax,eax
c0019276:	80 fb 15             	cmp    bl,0x15
c0019279:	77 13                	ja     c001928e <IDE::read(unsigned char, unsigned char)+0xa6>
c001927b:	0f b6 d2             	movzx  edx,dl
c001927e:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0019286:	0f b6 d3             	movzx  edx,bl
c0019289:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001928d:	ec                   	in     al,dx
c001928e:	83 c4 1c             	add    esp,0x1c
c0019291:	5b                   	pop    ebx
c0019292:	5e                   	pop    esi
c0019293:	5f                   	pop    edi
c0019294:	5d                   	pop    ebp
c0019295:	c3                   	ret    

c0019296 <IDE::waitInterrupt(unsigned char)>:
c0019296:	57                   	push   edi
c0019297:	56                   	push   esi
c0019298:	31 f6                	xor    esi,esi
c001929a:	53                   	push   ebx
c001929b:	83 ec 10             	sub    esp,0x10
c001929e:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c00192a2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00192a6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00192aa:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00192af:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c00192b6:	84 db                	test   bl,bl
c00192b8:	75 33                	jne    c00192ed <IDE::waitInterrupt(unsigned char)+0x57>
c00192ba:	52                   	push   edx
c00192bb:	6a 0c                	push   0xc
c00192bd:	50                   	push   eax
c00192be:	57                   	push   edi
c00192bf:	e8 24 ff ff ff       	call   c00191e8 <IDE::read(unsigned char, unsigned char)>
c00192c4:	83 c4 10             	add    esp,0x10
c00192c7:	a8 01                	test   al,0x1
c00192c9:	75 2a                	jne    c00192f5 <IDE::waitInterrupt(unsigned char)+0x5f>
c00192cb:	f7 c6 04 00 00 00    	test   esi,0x4
c00192d1:	75 12                	jne    c00192e5 <IDE::waitInterrupt(unsigned char)+0x4f>
c00192d3:	83 fe 32             	cmp    esi,0x32
c00192d6:	7e 0d                	jle    c00192e5 <IDE::waitInterrupt(unsigned char)+0x4f>
c00192d8:	83 ec 0c             	sub    esp,0xc
c00192db:	6a 64                	push   0x64
c00192dd:	e8 1a a9 ff ff       	call   c0013bfc <milliTenthSleep(unsigned int)>
c00192e2:	83 c4 10             	add    esp,0x10
c00192e5:	83 fe 3c             	cmp    esi,0x3c
c00192e8:	74 0b                	je     c00192f5 <IDE::waitInterrupt(unsigned char)+0x5f>
c00192ea:	46                   	inc    esi
c00192eb:	eb bd                	jmp    c00192aa <IDE::waitInterrupt(unsigned char)+0x14>
c00192ed:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c00192f5:	83 c4 10             	add    esp,0x10
c00192f8:	88 d8                	mov    al,bl
c00192fa:	5b                   	pop    ebx
c00192fb:	5e                   	pop    esi
c00192fc:	5f                   	pop    edi
c00192fd:	c3                   	ret    

c00192fe <ideChannel0IRQHandler(regs*, void*)>:
c00192fe:	83 ec 10             	sub    esp,0x10
c0019301:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019305:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001930c:	6a 07                	push   0x7
c001930e:	6a 00                	push   0x0
c0019310:	50                   	push   eax
c0019311:	e8 d2 fe ff ff       	call   c00191e8 <IDE::read(unsigned char, unsigned char)>
c0019316:	83 c4 1c             	add    esp,0x1c
c0019319:	c3                   	ret    

c001931a <ideChannel1IRQHandler(regs*, void*)>:
c001931a:	83 ec 10             	sub    esp,0x10
c001931d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019321:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0019328:	6a 07                	push   0x7
c001932a:	6a 01                	push   0x1
c001932c:	50                   	push   eax
c001932d:	e8 b6 fe ff ff       	call   c00191e8 <IDE::read(unsigned char, unsigned char)>
c0019332:	83 c4 1c             	add    esp,0x1c
c0019335:	c3                   	ret    

c0019336 <IDE::enableIRQs(unsigned char, bool)>:
c0019336:	57                   	push   edi
c0019337:	56                   	push   esi
c0019338:	be 04 00 00 00       	mov    esi,0x4
c001933d:	53                   	push   ebx
c001933e:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0019343:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019347:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001934c:	0f 94 c0             	sete   al
c001934f:	01 c0                	add    eax,eax
c0019351:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0019358:	0f b6 c0             	movzx  eax,al
c001935b:	50                   	push   eax
c001935c:	6a 0c                	push   0xc
c001935e:	57                   	push   edi
c001935f:	53                   	push   ebx
c0019360:	e8 c3 fd ff ff       	call   c0019128 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019365:	83 c4 10             	add    esp,0x10
c0019368:	50                   	push   eax
c0019369:	6a 0c                	push   0xc
c001936b:	57                   	push   edi
c001936c:	53                   	push   ebx
c001936d:	e8 76 fe ff ff       	call   c00191e8 <IDE::read(unsigned char, unsigned char)>
c0019372:	83 c4 10             	add    esp,0x10
c0019375:	4e                   	dec    esi
c0019376:	75 f0                	jne    c0019368 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0019378:	5b                   	pop    ebx
c0019379:	5e                   	pop    esi
c001937a:	5f                   	pop    edi
c001937b:	c3                   	ret    

c001937c <IDE::open(int, int, void*)>:
c001937c:	55                   	push   ebp
c001937d:	57                   	push   edi
c001937e:	56                   	push   esi
c001937f:	53                   	push   ebx
c0019380:	83 ec 1c             	sub    esp,0x1c
c0019383:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019387:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0019390:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0019399:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00193a0:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00193a7:	0f 85 b0 02 00 00    	jne    c001965d <IDE::open(int, int, void*)+0x2e1>
c00193ad:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00193b3:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00193b7:	83 e0 7f             	and    eax,0x7f
c00193ba:	3c 05                	cmp    al,0x5
c00193bc:	74 04                	je     c00193c2 <IDE::open(int, int, void*)+0x46>
c00193be:	3c 0f                	cmp    al,0xf
c00193c0:	75 32                	jne    c00193f4 <IDE::open(int, int, void*)+0x78>
c00193c2:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00193c8:	83 e0 fc             	and    eax,0xfffffffc
c00193cb:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00193d2:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00193d8:	83 e0 fc             	and    eax,0xfffffffc
c00193db:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00193e2:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00193e8:	83 e0 fc             	and    eax,0xfffffffc
c00193eb:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00193f2:	eb 14                	jmp    c0019408 <IDE::open(int, int, void*)+0x8c>
c00193f4:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00193fe:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0019408:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001940f:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0019416:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001941a:	89 c6                	mov    esi,eax
c001941c:	bf f8 0c 00 00       	mov    edi,0xcf8
c0019421:	c1 e6 10             	shl    esi,0x10
c0019424:	89 e8                	mov    eax,ebp
c0019426:	89 fa                	mov    edx,edi
c0019428:	c1 e0 0b             	shl    eax,0xb
c001942b:	09 f0                	or     eax,esi
c001942d:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0019434:	c1 e6 08             	shl    esi,0x8
c0019437:	09 c6                	or     esi,eax
c0019439:	89 f0                	mov    eax,esi
c001943b:	0d 08 00 00 80       	or     eax,0x80000008
c0019440:	ef                   	out    dx,eax
c0019441:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0019446:	89 ca                	mov    edx,ecx
c0019448:	ed                   	in     eax,dx
c0019449:	c1 e8 10             	shr    eax,0x10
c001944c:	3d ff ff 00 00       	cmp    eax,0xffff
c0019451:	0f 84 f5 00 00 00    	je     c001954c <IDE::open(int, int, void*)+0x1d0>
c0019457:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001945d:	89 fa                	mov    edx,edi
c001945f:	89 f0                	mov    eax,esi
c0019461:	ef                   	out    dx,eax
c0019462:	b0 fe                	mov    al,0xfe
c0019464:	89 ca                	mov    edx,ecx
c0019466:	ee                   	out    dx,al
c0019467:	89 f0                	mov    eax,esi
c0019469:	89 fa                	mov    edx,edi
c001946b:	ef                   	out    dx,eax
c001946c:	89 ca                	mov    edx,ecx
c001946e:	ed                   	in     eax,dx
c001946f:	3c fe                	cmp    al,0xfe
c0019471:	0f 85 a9 00 00 00    	jne    c0019520 <IDE::open(int, int, void*)+0x1a4>
c0019477:	8b 15 18 0d 02 c0    	mov    edx,DWORD PTR ds:0xc0020d18
c001947d:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c0019484:	74 33                	je     c00194b9 <IDE::open(int, int, void*)+0x13d>
c0019486:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001948c:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0019490:	40                   	inc    eax
c0019491:	83 ec 0c             	sub    esp,0xc
c0019494:	0f b6 c0             	movzx  eax,al
c0019497:	50                   	push   eax
c0019498:	55                   	push   ebp
c0019499:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001949d:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c00194a3:	51                   	push   ecx
c00194a4:	e8 b3 51 ff ff       	call   c000e65c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00194a9:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00194ae:	83 c4 1c             	add    esp,0x1c
c00194b1:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00194b7:	eb 0a                	jmp    c00194c3 <IDE::open(int, int, void*)+0x147>
c00194b9:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00194c3:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00194ca:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00194d1:	c1 e1 10             	shl    ecx,0x10
c00194d4:	c1 e0 08             	shl    eax,0x8
c00194d7:	bf f8 0c 00 00       	mov    edi,0xcf8
c00194dc:	09 c1                	or     ecx,eax
c00194de:	89 fa                	mov    edx,edi
c00194e0:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00194e7:	c1 e0 0b             	shl    eax,0xb
c00194ea:	09 c1                	or     ecx,eax
c00194ec:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00194f2:	89 c8                	mov    eax,ecx
c00194f4:	ef                   	out    dx,eax
c00194f5:	be fc 0c 00 00       	mov    esi,0xcfc
c00194fa:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0019500:	89 f2                	mov    edx,esi
c0019502:	ee                   	out    dx,al
c0019503:	89 c8                	mov    eax,ecx
c0019505:	89 fa                	mov    edx,edi
c0019507:	ef                   	out    dx,eax
c0019508:	89 f2                	mov    edx,esi
c001950a:	ed                   	in     eax,dx
c001950b:	0f b6 c0             	movzx  eax,al
c001950e:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0019514:	74 46                	je     c001955c <IDE::open(int, int, void*)+0x1e0>
c0019516:	83 ec 0c             	sub    esp,0xc
c0019519:	68 18 f5 01 c0       	push   0xc001f518
c001951e:	eb 34                	jmp    c0019554 <IDE::open(int, int, void*)+0x1d8>
c0019520:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0019529:	75 17                	jne    c0019542 <IDE::open(int, int, void*)+0x1c6>
c001952b:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0019530:	74 07                	je     c0019539 <IDE::open(int, int, void*)+0x1bd>
c0019532:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0019537:	75 09                	jne    c0019542 <IDE::open(int, int, void*)+0x1c6>
c0019539:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0019540:	eb 1a                	jmp    c001955c <IDE::open(int, int, void*)+0x1e0>
c0019542:	83 ec 0c             	sub    esp,0xc
c0019545:	68 20 f5 01 c0       	push   0xc001f520
c001954a:	eb 08                	jmp    c0019554 <IDE::open(int, int, void*)+0x1d8>
c001954c:	83 ec 0c             	sub    esp,0xc
c001954f:	68 51 f5 01 c0       	push   0xc001f551
c0019554:	e8 ea 6b ff ff       	call   c0010143 <KePanic(char const*)>
c0019559:	83 c4 10             	add    esp,0x10
c001955c:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0019563:	79 1a                	jns    c001957f <IDE::open(int, int, void*)+0x203>
c0019565:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001956b:	83 e0 fc             	and    eax,0xfffffffc
c001956e:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0019575:	83 c0 08             	add    eax,0x8
c0019578:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001957f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019585:	89 c2                	mov    edx,eax
c0019587:	83 e2 0f             	and    edx,0xf
c001958a:	66 83 fa 08          	cmp    dx,0x8
c001958e:	75 0a                	jne    c001959a <IDE::open(int, int, void*)+0x21e>
c0019590:	83 e8 02             	sub    eax,0x2
c0019593:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001959a:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00195a0:	89 c2                	mov    edx,eax
c00195a2:	83 e2 0f             	and    edx,0xf
c00195a5:	66 83 fa 08          	cmp    dx,0x8
c00195a9:	75 0a                	jne    c00195b5 <IDE::open(int, int, void*)+0x239>
c00195ab:	83 e8 02             	sub    eax,0x2
c00195ae:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00195b5:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00195bc:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00195c3:	89 d0                	mov    eax,edx
c00195c5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00195c8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00195cc:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00195d0:	8d 4a 01             	lea    ecx,[edx+0x1]
c00195d3:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00195d8:	0f b6 c9             	movzx  ecx,cl
c00195db:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00195e2:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00195e5:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00195e9:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00195ed:	8d 50 02             	lea    edx,[eax+0x2]
c00195f0:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00195f5:	0f b6 d2             	movzx  edx,dl
c00195f8:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00195fe:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019601:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019605:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0019609:	8d 48 03             	lea    ecx,[eax+0x3]
c001960c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019611:	0f b6 c9             	movzx  ecx,cl
c0019614:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001961a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001961d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0019621:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0019625:	8d 50 04             	lea    edx,[eax+0x4]
c0019628:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001962e:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0019633:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001963a:	66 85 f6             	test   si,si
c001963d:	74 5b                	je     c001969a <IDE::open(int, int, void*)+0x31e>
c001963f:	0f b6 d2             	movzx  edx,dl
c0019642:	83 c0 05             	add    eax,0x5
c0019645:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019648:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001964c:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0019650:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019656:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001965b:	eb 3d                	jmp    c001969a <IDE::open(int, int, void*)+0x31e>
c001965d:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c0019663:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001966a:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0019671:	66 05 06 02          	add    ax,0x206
c0019675:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001967c:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c0019683:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001968a:	66 05 06 02          	add    ax,0x206
c001968e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0019695:	e9 e5 fe ff ff       	jmp    c001957f <IDE::open(int, int, void*)+0x203>
c001969a:	50                   	push   eax
c001969b:	50                   	push   eax
c001969c:	6a 00                	push   0x0
c001969e:	53                   	push   ebx
c001969f:	e8 5e fa ff ff       	call   c0019102 <IDE::prepareInterrupt(unsigned char)>
c00196a4:	5a                   	pop    edx
c00196a5:	59                   	pop    ecx
c00196a6:	6a 01                	push   0x1
c00196a8:	53                   	push   ebx
c00196a9:	e8 54 fa ff ff       	call   c0019102 <IDE::prepareInterrupt(unsigned char)>
c00196ae:	83 c4 0c             	add    esp,0xc
c00196b1:	6a 00                	push   0x0
c00196b3:	6a 00                	push   0x0
c00196b5:	53                   	push   ebx
c00196b6:	e8 7b fc ff ff       	call   c0019336 <IDE::enableIRQs(unsigned char, bool)>
c00196bb:	83 c4 0c             	add    esp,0xc
c00196be:	6a 00                	push   0x0
c00196c0:	6a 01                	push   0x1
c00196c2:	53                   	push   ebx
c00196c3:	e8 6e fc ff ff       	call   c0019336 <IDE::enableIRQs(unsigned char, bool)>
c00196c8:	83 c4 10             	add    esp,0x10
c00196cb:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00196d2:	74 34                	je     c0019708 <IDE::open(int, int, void*)+0x38c>
c00196d4:	83 ec 0c             	sub    esp,0xc
c00196d7:	53                   	push   ebx
c00196d8:	6a 01                	push   0x1
c00196da:	68 fe 92 01 c0       	push   0xc00192fe
c00196df:	6a 0e                	push   0xe
c00196e1:	53                   	push   ebx
c00196e2:	e8 dd 21 ff ff       	call   c000b8c4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00196e7:	83 c4 14             	add    esp,0x14
c00196ea:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00196f0:	53                   	push   ebx
c00196f1:	6a 01                	push   0x1
c00196f3:	68 1a 93 01 c0       	push   0xc001931a
c00196f8:	6a 0f                	push   0xf
c00196fa:	53                   	push   ebx
c00196fb:	e8 c4 21 ff ff       	call   c000b8c4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019700:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0019706:	eb 38                	jmp    c0019740 <IDE::open(int, int, void*)+0x3c4>
c0019708:	83 ec 0c             	sub    esp,0xc
c001970b:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0019715:	53                   	push   ebx
c0019716:	6a 00                	push   0x0
c0019718:	68 fe 92 01 c0       	push   0xc00192fe
c001971d:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0019723:	53                   	push   ebx
c0019724:	e8 9b 21 ff ff       	call   c000b8c4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019729:	83 c4 14             	add    esp,0x14
c001972c:	53                   	push   ebx
c001972d:	6a 00                	push   0x0
c001972f:	68 1a 93 01 c0       	push   0xc001931a
c0019734:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001973a:	53                   	push   ebx
c001973b:	e8 84 21 ff ff       	call   c000b8c4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019740:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019742:	83 c4 20             	add    esp,0x20
c0019745:	83 ec 0c             	sub    esp,0xc
c0019748:	53                   	push   ebx
c0019749:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001974c:	83 c4 0c             	add    esp,0xc
c001974f:	6a 07                	push   0x7
c0019751:	6a 00                	push   0x0
c0019753:	53                   	push   ebx
c0019754:	e8 8f fa ff ff       	call   c00191e8 <IDE::read(unsigned char, unsigned char)>
c0019759:	83 c4 0c             	add    esp,0xc
c001975c:	6a 07                	push   0x7
c001975e:	6a 01                	push   0x1
c0019760:	53                   	push   ebx
c0019761:	e8 82 fa ff ff       	call   c00191e8 <IDE::read(unsigned char, unsigned char)>
c0019766:	83 c4 0c             	add    esp,0xc
c0019769:	6a 01                	push   0x1
c001976b:	6a 00                	push   0x0
c001976d:	53                   	push   ebx
c001976e:	e8 c3 fb ff ff       	call   c0019336 <IDE::enableIRQs(unsigned char, bool)>
c0019773:	83 c4 0c             	add    esp,0xc
c0019776:	6a 01                	push   0x1
c0019778:	6a 01                	push   0x1
c001977a:	53                   	push   ebx
c001977b:	e8 b6 fb ff ff       	call   c0019336 <IDE::enableIRQs(unsigned char, bool)>
c0019780:	83 c4 2c             	add    esp,0x2c
c0019783:	31 c0                	xor    eax,eax
c0019785:	5b                   	pop    ebx
c0019786:	5e                   	pop    esi
c0019787:	5f                   	pop    edi
c0019788:	5d                   	pop    ebp
c0019789:	c3                   	ret    

c001978a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001978a:	55                   	push   ebp
c001978b:	57                   	push   edi
c001978c:	56                   	push   esi
c001978d:	53                   	push   ebx
c001978e:	83 ec 1c             	sub    esp,0x1c
c0019791:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019795:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019799:	8d 50 f8             	lea    edx,[eax-0x8]
c001979c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00197a0:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00197a4:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00197a8:	80 fa 03             	cmp    dl,0x3
c00197ab:	77 5d                	ja     c001980a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00197ad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00197b1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00197b5:	0f b6 db             	movzx  ebx,bl
c00197b8:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00197bb:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00197bf:	83 ca 80             	or     edx,0xffffff80
c00197c2:	0f b6 d2             	movzx  edx,dl
c00197c5:	52                   	push   edx
c00197c6:	6a 0c                	push   0xc
c00197c8:	53                   	push   ebx
c00197c9:	56                   	push   esi
c00197ca:	e8 59 f9 ff ff       	call   c0019128 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00197cf:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00197d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00197d8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00197dc:	0f b6 c0             	movzx  eax,al
c00197df:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00197e3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00197e5:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00197ea:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00197ee:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00197f2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00197f6:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00197fe:	83 c4 2c             	add    esp,0x2c
c0019801:	5b                   	pop    ebx
c0019802:	5e                   	pop    esi
c0019803:	5f                   	pop    edi
c0019804:	5d                   	pop    ebp
c0019805:	e9 1e f9 ff ff       	jmp    c0019128 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001980a:	3c 07                	cmp    al,0x7
c001980c:	77 10                	ja     c001981e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001980e:	0f b6 db             	movzx  ebx,bl
c0019811:	0f b6 d0             	movzx  edx,al
c0019814:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001981c:	eb 2d                	jmp    c001984b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001981e:	3c 0d                	cmp    al,0xd
c0019820:	77 13                	ja     c0019835 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0019822:	0f b6 db             	movzx  ebx,bl
c0019825:	0f b6 c0             	movzx  eax,al
c0019828:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001982f:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0019833:	eb 16                	jmp    c001984b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0019835:	3c 15                	cmp    al,0x15
c0019837:	77 14                	ja     c001984d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0019839:	0f b6 db             	movzx  ebx,bl
c001983c:	0f b6 c0             	movzx  eax,al
c001983f:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0019847:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001984b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001984d:	83 c4 1c             	add    esp,0x1c
c0019850:	5b                   	pop    ebx
c0019851:	5e                   	pop    esi
c0019852:	5f                   	pop    edi
c0019853:	5d                   	pop    ebp
c0019854:	c3                   	ret    
c0019855:	90                   	nop

c0019856 <IDE::detect()>:
c0019856:	55                   	push   ebp
c0019857:	57                   	push   edi
c0019858:	56                   	push   esi
c0019859:	53                   	push   ebx
c001985a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019860:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0019867:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001986e:	0f 85 97 02 00 00    	jne    c0019b0b <IDE::detect()+0x2b5>
c0019874:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001987b:	31 f6                	xor    esi,esi
c001987d:	31 ed                	xor    ebp,ebp
c001987f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019887:	89 e8                	mov    eax,ebp
c0019889:	c1 e0 06             	shl    eax,0x6
c001988c:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0019894:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019898:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001989c:	c1 e0 04             	shl    eax,0x4
c001989f:	83 c8 a0             	or     eax,0xffffffa0
c00198a2:	0f b6 c0             	movzx  eax,al
c00198a5:	50                   	push   eax
c00198a6:	6a 06                	push   0x6
c00198a8:	56                   	push   esi
c00198a9:	53                   	push   ebx
c00198aa:	e8 79 f8 ff ff       	call   c0019128 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00198af:	83 c4 0c             	add    esp,0xc
c00198b2:	6a 0c                	push   0xc
c00198b4:	56                   	push   esi
c00198b5:	53                   	push   ebx
c00198b6:	e8 2d f9 ff ff       	call   c00191e8 <IDE::read(unsigned char, unsigned char)>
c00198bb:	83 c4 0c             	add    esp,0xc
c00198be:	6a 0c                	push   0xc
c00198c0:	56                   	push   esi
c00198c1:	53                   	push   ebx
c00198c2:	e8 21 f9 ff ff       	call   c00191e8 <IDE::read(unsigned char, unsigned char)>
c00198c7:	83 c4 0c             	add    esp,0xc
c00198ca:	6a 0c                	push   0xc
c00198cc:	56                   	push   esi
c00198cd:	53                   	push   ebx
c00198ce:	e8 15 f9 ff ff       	call   c00191e8 <IDE::read(unsigned char, unsigned char)>
c00198d3:	83 c4 0c             	add    esp,0xc
c00198d6:	6a 0c                	push   0xc
c00198d8:	56                   	push   esi
c00198d9:	53                   	push   ebx
c00198da:	e8 09 f9 ff ff       	call   c00191e8 <IDE::read(unsigned char, unsigned char)>
c00198df:	68 ec 00 00 00       	push   0xec
c00198e4:	6a 07                	push   0x7
c00198e6:	56                   	push   esi
c00198e7:	53                   	push   ebx
c00198e8:	e8 3b f8 ff ff       	call   c0019128 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00198ed:	83 c4 1c             	add    esp,0x1c
c00198f0:	6a 0c                	push   0xc
c00198f2:	56                   	push   esi
c00198f3:	53                   	push   ebx
c00198f4:	e8 ef f8 ff ff       	call   c00191e8 <IDE::read(unsigned char, unsigned char)>
c00198f9:	83 c4 0c             	add    esp,0xc
c00198fc:	6a 0c                	push   0xc
c00198fe:	56                   	push   esi
c00198ff:	53                   	push   ebx
c0019900:	e8 e3 f8 ff ff       	call   c00191e8 <IDE::read(unsigned char, unsigned char)>
c0019905:	83 c4 0c             	add    esp,0xc
c0019908:	6a 0c                	push   0xc
c001990a:	56                   	push   esi
c001990b:	53                   	push   ebx
c001990c:	e8 d7 f8 ff ff       	call   c00191e8 <IDE::read(unsigned char, unsigned char)>
c0019911:	83 c4 0c             	add    esp,0xc
c0019914:	6a 0c                	push   0xc
c0019916:	56                   	push   esi
c0019917:	53                   	push   ebx
c0019918:	e8 cb f8 ff ff       	call   c00191e8 <IDE::read(unsigned char, unsigned char)>
c001991d:	83 c4 0c             	add    esp,0xc
c0019920:	6a 0c                	push   0xc
c0019922:	56                   	push   esi
c0019923:	53                   	push   ebx
c0019924:	e8 bf f8 ff ff       	call   c00191e8 <IDE::read(unsigned char, unsigned char)>
c0019929:	83 c4 10             	add    esp,0x10
c001992c:	84 c0                	test   al,al
c001992e:	0f 84 5f 01 00 00    	je     c0019a93 <IDE::detect()+0x23d>
c0019934:	31 ff                	xor    edi,edi
c0019936:	50                   	push   eax
c0019937:	6a 0c                	push   0xc
c0019939:	56                   	push   esi
c001993a:	53                   	push   ebx
c001993b:	e8 a8 f8 ff ff       	call   c00191e8 <IDE::read(unsigned char, unsigned char)>
c0019940:	83 c4 10             	add    esp,0x10
c0019943:	a8 01                	test   al,0x1
c0019945:	0f 85 69 01 00 00    	jne    c0019ab4 <IDE::detect()+0x25e>
c001994b:	84 c0                	test   al,al
c001994d:	78 04                	js     c0019953 <IDE::detect()+0xfd>
c001994f:	a8 08                	test   al,0x8
c0019951:	75 23                	jne    c0019976 <IDE::detect()+0x120>
c0019953:	47                   	inc    edi
c0019954:	81 ff 17 01 00 00    	cmp    edi,0x117
c001995a:	7e da                	jle    c0019936 <IDE::detect()+0xe0>
c001995c:	83 ec 0c             	sub    esp,0xc
c001995f:	6a 32                	push   0x32
c0019961:	e8 96 a2 ff ff       	call   c0013bfc <milliTenthSleep(unsigned int)>
c0019966:	83 c4 10             	add    esp,0x10
c0019969:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001996f:	75 c5                	jne    c0019936 <IDE::detect()+0xe0>
c0019971:	e9 3e 01 00 00       	jmp    c0019ab4 <IDE::detect()+0x25e>
c0019976:	31 c9                	xor    ecx,ecx
c0019978:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001997c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0019980:	83 ec 0c             	sub    esp,0xc
c0019983:	68 80 00 00 00       	push   0x80
c0019988:	57                   	push   edi
c0019989:	6a 00                	push   0x0
c001998b:	56                   	push   esi
c001998c:	53                   	push   ebx
c001998d:	e8 f8 fd ff ff       	call   c001978a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0019992:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0019997:	89 e8                	mov    eax,ebp
c0019999:	89 d1                	mov    ecx,edx
c001999b:	c1 e0 06             	shl    eax,0x6
c001999e:	01 d8                	add    eax,ebx
c00199a0:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00199a7:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00199ae:	89 f2                	mov    edx,esi
c00199b0:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00199b6:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00199ba:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00199c0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00199c4:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00199cb:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00199d3:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00199da:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00199e2:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00199e8:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00199ef:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00199f5:	8d 54 24 58          	lea    edx,[esp+0x58]
c00199f9:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00199fd:	83 c4 20             	add    esp,0x20
c0019a00:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0019a03:	83 c0 02             	add    eax,0x2
c0019a06:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0019a0c:	83 c7 02             	add    edi,0x2
c0019a0f:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0019a12:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0019a18:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0019a1c:	75 e2                	jne    c0019a00 <IDE::detect()+0x1aa>
c0019a1e:	89 e8                	mov    eax,ebp
c0019a20:	c1 e0 06             	shl    eax,0x6
c0019a23:	01 d8                	add    eax,ebx
c0019a25:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0019a2b:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0019a32:	66 c1 ea 09          	shr    dx,0x9
c0019a36:	83 e2 01             	and    edx,0x1
c0019a39:	84 c9                	test   cl,cl
c0019a3b:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0019a41:	75 22                	jne    c0019a65 <IDE::detect()+0x20f>
c0019a43:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0019a4a:	74 46                	je     c0019a92 <IDE::detect()+0x23c>
c0019a4c:	83 ec 0c             	sub    esp,0xc
c0019a4f:	68 7c 01 00 00       	push   0x17c
c0019a54:	e8 60 dd fe ff       	call   c00077b9 <malloc>
c0019a59:	89 c7                	mov    edi,eax
c0019a5b:	89 04 24             	mov    DWORD PTR [esp],eax
c0019a5e:	e8 11 05 00 00       	call   c0019f74 <ATA::ATA()>
c0019a63:	eb 17                	jmp    c0019a7c <IDE::detect()+0x226>
c0019a65:	83 ec 0c             	sub    esp,0xc
c0019a68:	68 84 01 00 00       	push   0x184
c0019a6d:	e8 47 dd fe ff       	call   c00077b9 <malloc>
c0019a72:	89 c7                	mov    edi,eax
c0019a74:	89 04 24             	mov    DWORD PTR [esp],eax
c0019a77:	e8 f0 0a 00 00       	call   c001a56c <ATAPI::ATAPI()>
c0019a7c:	5a                   	pop    edx
c0019a7d:	59                   	pop    ecx
c0019a7e:	57                   	push   edi
c0019a7f:	53                   	push   ebx
c0019a80:	e8 93 1e ff ff       	call   c000b918 <Device::addChild(Device*)>
c0019a85:	8b 07                	mov    eax,DWORD PTR [edi]
c0019a87:	53                   	push   ebx
c0019a88:	55                   	push   ebp
c0019a89:	6a 00                	push   0x0
c0019a8b:	57                   	push   edi
c0019a8c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019a8f:	83 c4 20             	add    esp,0x20
c0019a92:	45                   	inc    ebp
c0019a93:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0019a98:	74 0d                	je     c0019aa7 <IDE::detect()+0x251>
c0019a9a:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0019aa2:	e9 e0 fd ff ff       	jmp    c0019887 <IDE::detect()+0x31>
c0019aa7:	4e                   	dec    esi
c0019aa8:	74 61                	je     c0019b0b <IDE::detect()+0x2b5>
c0019aaa:	be 01 00 00 00       	mov    esi,0x1
c0019aaf:	e9 cb fd ff ff       	jmp    c001987f <IDE::detect()+0x29>
c0019ab4:	50                   	push   eax
c0019ab5:	6a 04                	push   0x4
c0019ab7:	56                   	push   esi
c0019ab8:	53                   	push   ebx
c0019ab9:	e8 2a f7 ff ff       	call   c00191e8 <IDE::read(unsigned char, unsigned char)>
c0019abe:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0019ac2:	83 c4 0c             	add    esp,0xc
c0019ac5:	6a 05                	push   0x5
c0019ac7:	56                   	push   esi
c0019ac8:	53                   	push   ebx
c0019ac9:	e8 1a f7 ff ff       	call   c00191e8 <IDE::read(unsigned char, unsigned char)>
c0019ace:	83 c4 10             	add    esp,0x10
c0019ad1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019ad5:	80 fa 14             	cmp    dl,0x14
c0019ad8:	75 04                	jne    c0019ade <IDE::detect()+0x288>
c0019ada:	3c eb                	cmp    al,0xeb
c0019adc:	eb 07                	jmp    c0019ae5 <IDE::detect()+0x28f>
c0019ade:	3c 96                	cmp    al,0x96
c0019ae0:	75 b1                	jne    c0019a93 <IDE::detect()+0x23d>
c0019ae2:	80 fa 69             	cmp    dl,0x69
c0019ae5:	75 ac                	jne    c0019a93 <IDE::detect()+0x23d>
c0019ae7:	68 a1 00 00 00       	push   0xa1
c0019aec:	6a 07                	push   0x7
c0019aee:	56                   	push   esi
c0019aef:	53                   	push   ebx
c0019af0:	e8 33 f6 ff ff       	call   c0019128 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019af5:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0019afc:	e8 fb a0 ff ff       	call   c0013bfc <milliTenthSleep(unsigned int)>
c0019b01:	83 c4 10             	add    esp,0x10
c0019b04:	b1 01                	mov    cl,0x1
c0019b06:	e9 6d fe ff ff       	jmp    c0019978 <IDE::detect()+0x122>
c0019b0b:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019b11:	5b                   	pop    ebx
c0019b12:	5e                   	pop    esi
c0019b13:	5f                   	pop    edi
c0019b14:	5d                   	pop    ebp
c0019b15:	c3                   	ret    

c0019b16 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0019b16:	55                   	push   ebp
c0019b17:	57                   	push   edi
c0019b18:	56                   	push   esi
c0019b19:	53                   	push   ebx
c0019b1a:	83 ec 1c             	sub    esp,0x1c
c0019b1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019b21:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019b25:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019b29:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0019b2d:	88 c3                	mov    bl,al
c0019b2f:	84 c0                	test   al,al
c0019b31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019b35:	0f 84 81 00 00 00    	je     c0019bbc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b3b:	83 ec 0c             	sub    esp,0xc
c0019b3e:	68 7b f5 01 c0       	push   0xc001f57b
c0019b43:	e8 90 09 ff ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c0019b48:	83 c4 10             	add    esp,0x10
c0019b4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019b4f:	3c 01                	cmp    al,0x1
c0019b51:	74 63                	je     c0019bb6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0019b53:	3c 02                	cmp    al,0x2
c0019b55:	75 53                	jne    c0019baa <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0019b57:	01 f6                	add    esi,esi
c0019b59:	09 ee                	or     esi,ebp
c0019b5b:	50                   	push   eax
c0019b5c:	89 f0                	mov    eax,esi
c0019b5e:	6a 01                	push   0x1
c0019b60:	0f b6 f0             	movzx  esi,al
c0019b63:	c1 e6 06             	shl    esi,0x6
c0019b66:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0019b6e:	50                   	push   eax
c0019b6f:	57                   	push   edi
c0019b70:	e8 73 f6 ff ff       	call   c00191e8 <IDE::read(unsigned char, unsigned char)>
c0019b75:	83 c4 10             	add    esp,0x10
c0019b78:	a8 01                	test   al,0x1
c0019b7a:	74 02                	je     c0019b7e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0019b7c:	b3 07                	mov    bl,0x7
c0019b7e:	a8 02                	test   al,0x2
c0019b80:	74 02                	je     c0019b84 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0019b82:	b3 03                	mov    bl,0x3
c0019b84:	a8 04                	test   al,0x4
c0019b86:	74 02                	je     c0019b8a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0019b88:	b3 14                	mov    bl,0x14
c0019b8a:	a8 08                	test   al,0x8
c0019b8c:	74 02                	je     c0019b90 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0019b8e:	b3 03                	mov    bl,0x3
c0019b90:	a8 10                	test   al,0x10
c0019b92:	74 02                	je     c0019b96 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0019b94:	b3 15                	mov    bl,0x15
c0019b96:	a8 20                	test   al,0x20
c0019b98:	74 02                	je     c0019b9c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0019b9a:	b3 03                	mov    bl,0x3
c0019b9c:	a8 40                	test   al,0x40
c0019b9e:	74 02                	je     c0019ba2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0019ba0:	b3 16                	mov    bl,0x16
c0019ba2:	84 c0                	test   al,al
c0019ba4:	79 16                	jns    c0019bbc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019ba6:	b3 0d                	mov    bl,0xd
c0019ba8:	eb 12                	jmp    c0019bbc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019baa:	3c 03                	cmp    al,0x3
c0019bac:	74 0c                	je     c0019bba <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0019bae:	3c 04                	cmp    al,0x4
c0019bb0:	75 0a                	jne    c0019bbc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019bb2:	b3 08                	mov    bl,0x8
c0019bb4:	eb 06                	jmp    c0019bbc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019bb6:	b3 13                	mov    bl,0x13
c0019bb8:	eb 02                	jmp    c0019bbc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019bba:	b3 17                	mov    bl,0x17
c0019bbc:	83 c4 1c             	add    esp,0x1c
c0019bbf:	88 d8                	mov    al,bl
c0019bc1:	5b                   	pop    ebx
c0019bc2:	5e                   	pop    esi
c0019bc3:	5f                   	pop    edi
c0019bc4:	5d                   	pop    ebp
c0019bc5:	c3                   	ret    

c0019bc6 <IDE::polling(unsigned char, unsigned int)>:
c0019bc6:	55                   	push   ebp
c0019bc7:	bd 04 00 00 00       	mov    ebp,0x4
c0019bcc:	57                   	push   edi
c0019bcd:	56                   	push   esi
c0019bce:	53                   	push   ebx
c0019bcf:	83 ec 0c             	sub    esp,0xc
c0019bd2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019bd6:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c0019bda:	0f b6 f3             	movzx  esi,bl
c0019bdd:	52                   	push   edx
c0019bde:	6a 0c                	push   0xc
c0019be0:	56                   	push   esi
c0019be1:	57                   	push   edi
c0019be2:	e8 01 f6 ff ff       	call   c00191e8 <IDE::read(unsigned char, unsigned char)>
c0019be7:	83 c4 10             	add    esp,0x10
c0019bea:	4d                   	dec    ebp
c0019beb:	75 ed                	jne    c0019bda <IDE::polling(unsigned char, unsigned int)+0x14>
c0019bed:	bb a0 86 01 00       	mov    ebx,0x186a0
c0019bf2:	50                   	push   eax
c0019bf3:	6a 0c                	push   0xc
c0019bf5:	56                   	push   esi
c0019bf6:	57                   	push   edi
c0019bf7:	e8 ec f5 ff ff       	call   c00191e8 <IDE::read(unsigned char, unsigned char)>
c0019bfc:	83 c4 10             	add    esp,0x10
c0019bff:	a8 01                	test   al,0x1
c0019c01:	75 17                	jne    c0019c1a <IDE::polling(unsigned char, unsigned int)+0x54>
c0019c03:	a8 20                	test   al,0x20
c0019c05:	75 0f                	jne    c0019c16 <IDE::polling(unsigned char, unsigned int)+0x50>
c0019c07:	4b                   	dec    ebx
c0019c08:	74 10                	je     c0019c1a <IDE::polling(unsigned char, unsigned int)+0x54>
c0019c0a:	84 c0                	test   al,al
c0019c0c:	78 e4                	js     c0019bf2 <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019c0e:	a8 08                	test   al,0x8
c0019c10:	74 e0                	je     c0019bf2 <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019c12:	31 c0                	xor    eax,eax
c0019c14:	eb 06                	jmp    c0019c1c <IDE::polling(unsigned char, unsigned int)+0x56>
c0019c16:	b0 01                	mov    al,0x1
c0019c18:	eb 02                	jmp    c0019c1c <IDE::polling(unsigned char, unsigned int)+0x56>
c0019c1a:	b0 02                	mov    al,0x2
c0019c1c:	83 c4 0c             	add    esp,0xc
c0019c1f:	5b                   	pop    ebx
c0019c20:	5e                   	pop    esi
c0019c21:	5f                   	pop    edi
c0019c22:	5d                   	pop    ebp
c0019c23:	c3                   	ret    

c0019c24 <SATABus::close(int, int, void*)>:
c0019c24:	31 c0                	xor    eax,eax
c0019c26:	c3                   	ret    
c0019c27:	90                   	nop

c0019c28 <SATABus::detect()>:
c0019c28:	c3                   	ret    
c0019c29:	90                   	nop

c0019c2a <SATABus::SATABus()>:
c0019c2a:	83 ec 0c             	sub    esp,0xc
c0019c2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c31:	83 ec 08             	sub    esp,0x8
c0019c34:	68 b4 f5 01 c0       	push   0xc001f5b4
c0019c39:	50                   	push   eax
c0019c3a:	e8 1d 20 ff ff       	call   c000bc5c <HardDiskController::HardDiskController(char const*)>
c0019c3f:	83 c4 10             	add    esp,0x10
c0019c42:	ba e0 f5 01 c0       	mov    edx,0xc001f5e0
c0019c47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c4b:	89 10                	mov    DWORD PTR [eax],edx
c0019c4d:	83 ec 0c             	sub    esp,0xc
c0019c50:	6a 50                	push   0x50
c0019c52:	e8 fc de fe ff       	call   c0007b53 <Phys::allocateContiguousPages(int)>
c0019c57:	83 c4 10             	add    esp,0x10
c0019c5a:	89 c2                	mov    edx,eax
c0019c5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c60:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0019c66:	83 ec 0c             	sub    esp,0xc
c0019c69:	6a 50                	push   0x50
c0019c6b:	e8 15 f6 fe ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0019c70:	83 c4 10             	add    esp,0x10
c0019c73:	89 c2                	mov    edx,eax
c0019c75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c79:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019c7f:	a1 10 0e 02 c0       	mov    eax,ds:0xc0020e10
c0019c84:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c88:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0019c8e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c92:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0019c98:	83 ec 0c             	sub    esp,0xc
c0019c9b:	6a 03                	push   0x3
c0019c9d:	6a 50                	push   0x50
c0019c9f:	51                   	push   ecx
c0019ca0:	52                   	push   edx
c0019ca1:	50                   	push   eax
c0019ca2:	e8 6d ff fe ff       	call   c0009c14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019ca7:	83 c4 20             	add    esp,0x20
c0019caa:	90                   	nop
c0019cab:	83 c4 0c             	add    esp,0xc
c0019cae:	c3                   	ret    
c0019caf:	90                   	nop

c0019cb0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0019cb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019cb4:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0019cb7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019cba:	09 c2                	or     edx,eax
c0019cbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019cc0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0019cc6:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019cc8:	31 c0                	xor    eax,eax
c0019cca:	c1 e9 08             	shr    ecx,0x8
c0019ccd:	83 e1 0f             	and    ecx,0xf
c0019cd0:	39 c8                	cmp    eax,ecx
c0019cd2:	74 0a                	je     c0019cde <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c0019cd4:	f6 c2 01             	test   dl,0x1
c0019cd7:	74 08                	je     c0019ce1 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0019cd9:	d1 ea                	shr    edx,1
c0019cdb:	40                   	inc    eax
c0019cdc:	eb f2                	jmp    c0019cd0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c0019cde:	83 c8 ff             	or     eax,0xffffffff
c0019ce1:	c3                   	ret    

c0019ce2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0019ce2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019ce6:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0019ce9:	89 c2                	mov    edx,eax
c0019ceb:	c1 ea 08             	shr    edx,0x8
c0019cee:	83 e2 0f             	and    edx,0xf
c0019cf1:	fe ca                	dec    dl
c0019cf3:	75 31                	jne    c0019d26 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019cf5:	83 e0 0f             	and    eax,0xf
c0019cf8:	3c 03                	cmp    al,0x3
c0019cfa:	75 2a                	jne    c0019d26 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019cfc:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0019cff:	b8 02 00 00 00       	mov    eax,0x2
c0019d04:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0019d0a:	74 1c                	je     c0019d28 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019d0c:	b8 04 00 00 00       	mov    eax,0x4
c0019d11:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0019d17:	74 0f                	je     c0019d28 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019d19:	31 c0                	xor    eax,eax
c0019d1b:	83 fa 03             	cmp    edx,0x3
c0019d1e:	0f 94 c0             	sete   al
c0019d21:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0019d25:	c3                   	ret    
c0019d26:	31 c0                	xor    eax,eax
c0019d28:	c3                   	ret    
c0019d29:	90                   	nop

c0019d2a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0019d2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d2e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d31:	0f ba e2 0f          	bt     edx,0xf
c0019d35:	72 f7                	jb     c0019d2e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0019d37:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d3a:	83 ca 10             	or     edx,0x10
c0019d3d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019d40:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d43:	83 ca 01             	or     edx,0x1
c0019d46:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019d49:	c3                   	ret    

c0019d4a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0019d4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d4e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d51:	83 e2 fe             	and    edx,0xfffffffe
c0019d54:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019d57:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d5a:	83 e2 ef             	and    edx,0xffffffef
c0019d5d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019d60:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d63:	0f ba e2 0e          	bt     edx,0xe
c0019d67:	72 f7                	jb     c0019d60 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019d69:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d6c:	0f ba e2 0f          	bt     edx,0xf
c0019d70:	72 ee                	jb     c0019d60 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019d72:	c3                   	ret    
c0019d73:	90                   	nop

c0019d74 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0019d74:	55                   	push   ebp
c0019d75:	57                   	push   edi
c0019d76:	56                   	push   esi
c0019d77:	53                   	push   ebx
c0019d78:	83 ec 1c             	sub    esp,0x1c
c0019d7b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019d7f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019d83:	53                   	push   ebx
c0019d84:	56                   	push   esi
c0019d85:	e8 c0 ff ff ff       	call   c0019d4a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0019d8a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0019d8e:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019d94:	83 ec 0c             	sub    esp,0xc
c0019d97:	c1 e5 0a             	shl    ebp,0xa
c0019d9a:	01 e8                	add    eax,ebp
c0019d9c:	89 03                	mov    DWORD PTR [ebx],eax
c0019d9e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019da0:	68 00 04 00 00       	push   0x400
c0019da5:	6a 00                	push   0x0
c0019da7:	50                   	push   eax
c0019da8:	e8 23 67 fe ff       	call   c00004d0 <memset>
c0019dad:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0019db3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0019db7:	01 e8                	add    eax,ebp
c0019db9:	83 c4 1c             	add    esp,0x1c
c0019dbc:	89 03                	mov    DWORD PTR [ebx],eax
c0019dbe:	c1 e2 08             	shl    edx,0x8
c0019dc1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019dc8:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c0019dce:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019dd4:	01 f8                	add    eax,edi
c0019dd6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0019dd9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0019ddc:	68 00 01 00 00       	push   0x100
c0019de1:	6a 00                	push   0x0
c0019de3:	50                   	push   eax
c0019de4:	e8 e7 66 fe ff       	call   c00004d0 <memset>
c0019de9:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c0019def:	01 fa                	add    edx,edi
c0019df1:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019df5:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0019df8:	c1 e7 0d             	shl    edi,0xd
c0019dfb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0019e02:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0019e08:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0019e0e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019e12:	31 ff                	xor    edi,edi
c0019e14:	83 c4 10             	add    esp,0x10
c0019e17:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0019e1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019e21:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0019e27:	83 c5 20             	add    ebp,0x20
c0019e2a:	01 f8                	add    eax,edi
c0019e2c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019e2f:	52                   	push   edx
c0019e30:	68 00 01 00 00       	push   0x100
c0019e35:	6a 00                	push   0x0
c0019e37:	50                   	push   eax
c0019e38:	e8 93 66 fe ff       	call   c00004d0 <memset>
c0019e3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019e41:	83 c4 10             	add    esp,0x10
c0019e44:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0019e4a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0019e51:	01 f8                	add    eax,edi
c0019e53:	81 c7 00 01 00 00    	add    edi,0x100
c0019e59:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019e5c:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0019e62:	75 b3                	jne    c0019e17 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c0019e64:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019e6b:	50                   	push   eax
c0019e6c:	50                   	push   eax
c0019e6d:	53                   	push   ebx
c0019e6e:	56                   	push   esi
c0019e6f:	e8 b6 fe ff ff       	call   c0019d2a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0019e74:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019e7b:	83 c4 2c             	add    esp,0x2c
c0019e7e:	5b                   	pop    ebx
c0019e7f:	5e                   	pop    esi
c0019e80:	5f                   	pop    edi
c0019e81:	5d                   	pop    ebp
c0019e82:	c3                   	ret    
c0019e83:	90                   	nop

c0019e84 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0019e84:	55                   	push   ebp
c0019e85:	57                   	push   edi
c0019e86:	56                   	push   esi
c0019e87:	53                   	push   ebx
c0019e88:	31 db                	xor    ebx,ebx
c0019e8a:	83 ec 0c             	sub    esp,0xc
c0019e8d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019e91:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019e95:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0019e98:	f7 c7 01 00 00 00    	test   edi,0x1
c0019e9e:	74 7a                	je     c0019f1a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019ea0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019ea4:	89 d8                	mov    eax,ebx
c0019ea6:	c1 e0 07             	shl    eax,0x7
c0019ea9:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0019eb0:	55                   	push   ebp
c0019eb1:	56                   	push   esi
c0019eb2:	e8 2b fe ff ff       	call   c0019ce2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0019eb7:	5a                   	pop    edx
c0019eb8:	83 f8 01             	cmp    eax,0x1
c0019ebb:	59                   	pop    ecx
c0019ebc:	75 21                	jne    c0019edf <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0019ebe:	50                   	push   eax
c0019ebf:	53                   	push   ebx
c0019ec0:	55                   	push   ebp
c0019ec1:	56                   	push   esi
c0019ec2:	e8 ad fe ff ff       	call   c0019d74 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019ec7:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0019ece:	e8 e6 d8 fe ff       	call   c00077b9 <malloc>
c0019ed3:	89 c5                	mov    ebp,eax
c0019ed5:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ed8:	e8 43 0d 00 00       	call   c001ac20 <SATA::SATA()>
c0019edd:	eb 24                	jmp    c0019f03 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0019edf:	83 f8 04             	cmp    eax,0x4
c0019ee2:	75 36                	jne    c0019f1a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019ee4:	51                   	push   ecx
c0019ee5:	53                   	push   ebx
c0019ee6:	55                   	push   ebp
c0019ee7:	56                   	push   esi
c0019ee8:	e8 87 fe ff ff       	call   c0019d74 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019eed:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0019ef4:	e8 c0 d8 fe ff       	call   c00077b9 <malloc>
c0019ef9:	89 c5                	mov    ebp,eax
c0019efb:	89 04 24             	mov    DWORD PTR [esp],eax
c0019efe:	e8 79 10 00 00       	call   c001af7c <SATAPI::SATAPI()>
c0019f03:	58                   	pop    eax
c0019f04:	5a                   	pop    edx
c0019f05:	55                   	push   ebp
c0019f06:	56                   	push   esi
c0019f07:	e8 0c 1a ff ff       	call   c000b918 <Device::addChild(Device*)>
c0019f0c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019f0f:	56                   	push   esi
c0019f10:	6a 00                	push   0x0
c0019f12:	53                   	push   ebx
c0019f13:	55                   	push   ebp
c0019f14:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0019f17:	83 c4 20             	add    esp,0x20
c0019f1a:	d1 ef                	shr    edi,1
c0019f1c:	43                   	inc    ebx
c0019f1d:	83 fb 20             	cmp    ebx,0x20
c0019f20:	0f 85 72 ff ff ff    	jne    c0019e98 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0019f26:	83 c4 0c             	add    esp,0xc
c0019f29:	5b                   	pop    ebx
c0019f2a:	5e                   	pop    esi
c0019f2b:	5f                   	pop    edi
c0019f2c:	5d                   	pop    ebp
c0019f2d:	c3                   	ret    

c0019f2e <SATABus::open(int, int, void*)>:
c0019f2e:	83 ec 14             	sub    esp,0x14
c0019f31:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019f35:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0019f3b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0019f41:	52                   	push   edx
c0019f42:	50                   	push   eax
c0019f43:	e8 3c ff ff ff       	call   c0019e84 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0019f48:	31 c0                	xor    eax,eax
c0019f4a:	83 c4 1c             	add    esp,0x1c
c0019f4d:	c3                   	ret    

c0019f4e <ATA::close(int, int, void*)>:
c0019f4e:	83 ec 0c             	sub    esp,0xc
c0019f51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f55:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019f5b:	85 c0                	test   eax,eax
c0019f5d:	74 0c                	je     c0019f6b <ATA::close(int, int, void*)+0x1d>
c0019f5f:	83 ec 0c             	sub    esp,0xc
c0019f62:	8b 10                	mov    edx,DWORD PTR [eax]
c0019f64:	50                   	push   eax
c0019f65:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019f68:	83 c4 10             	add    esp,0x10
c0019f6b:	31 c0                	xor    eax,eax
c0019f6d:	83 c4 0c             	add    esp,0xc
c0019f70:	c3                   	ret    
c0019f71:	90                   	nop

c0019f72 <ATA::powerSaving(PowerSavingLevel)>:
c0019f72:	c3                   	ret    
c0019f73:	90                   	nop

c0019f74 <ATA::ATA()>:
c0019f74:	83 ec 0c             	sub    esp,0xc
c0019f77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f7b:	83 ec 04             	sub    esp,0x4
c0019f7e:	68 00 02 00 00       	push   0x200
c0019f83:	68 ad f6 01 c0       	push   0xc001f6ad
c0019f88:	50                   	push   eax
c0019f89:	e8 58 1d ff ff       	call   c000bce6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019f8e:	83 c4 10             	add    esp,0x10
c0019f91:	ba 20 f6 01 c0       	mov    edx,0xc001f620
c0019f96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f9a:	89 10                	mov    DWORD PTR [eax],edx
c0019f9c:	90                   	nop
c0019f9d:	83 c4 0c             	add    esp,0xc
c0019fa0:	c3                   	ret    
c0019fa1:	90                   	nop

c0019fa2 <ATA::flush(bool)>:
c0019fa2:	53                   	push   ebx
c0019fa3:	83 ec 08             	sub    esp,0x8
c0019fa6:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0019fab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019faf:	19 c0                	sbb    eax,eax
c0019fb1:	83 e0 fd             	and    eax,0xfffffffd
c0019fb4:	05 ea 00 00 00       	add    eax,0xea
c0019fb9:	50                   	push   eax
c0019fba:	6a 07                	push   0x7
c0019fbc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019fc3:	50                   	push   eax
c0019fc4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019fca:	e8 59 f1 ff ff       	call   c0019128 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019fcf:	83 c4 0c             	add    esp,0xc
c0019fd2:	6a 00                	push   0x0
c0019fd4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019fdb:	50                   	push   eax
c0019fdc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019fe2:	e8 df fb ff ff       	call   c0019bc6 <IDE::polling(unsigned char, unsigned int)>
c0019fe7:	83 c4 18             	add    esp,0x18
c0019fea:	5b                   	pop    ebx
c0019feb:	c3                   	ret    

c0019fec <ATA::readyForCommand()>:
c0019fec:	56                   	push   esi
c0019fed:	53                   	push   ebx
c0019fee:	53                   	push   ebx
c0019fef:	31 db                	xor    ebx,ebx
c0019ff1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019ff5:	51                   	push   ecx
c0019ff6:	6a 0c                	push   0xc
c0019ff8:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019fff:	50                   	push   eax
c001a000:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a006:	e8 dd f1 ff ff       	call   c00191e8 <IDE::read(unsigned char, unsigned char)>
c001a00b:	83 c4 10             	add    esp,0x10
c001a00e:	a8 88                	test   al,0x88
c001a010:	74 1f                	je     c001a031 <ATA::readyForCommand()+0x45>
c001a012:	43                   	inc    ebx
c001a013:	83 fb 63             	cmp    ebx,0x63
c001a016:	7e dd                	jle    c0019ff5 <ATA::readyForCommand()+0x9>
c001a018:	83 ec 0c             	sub    esp,0xc
c001a01b:	6a 0a                	push   0xa
c001a01d:	e8 da 9b ff ff       	call   c0013bfc <milliTenthSleep(unsigned int)>
c001a022:	83 c4 10             	add    esp,0x10
c001a025:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001a02b:	75 c8                	jne    c0019ff5 <ATA::readyForCommand()+0x9>
c001a02d:	31 c0                	xor    eax,eax
c001a02f:	eb 02                	jmp    c001a033 <ATA::readyForCommand()+0x47>
c001a031:	b0 01                	mov    al,0x1
c001a033:	5a                   	pop    edx
c001a034:	5b                   	pop    ebx
c001a035:	5e                   	pop    esi
c001a036:	c3                   	ret    
c001a037:	90                   	nop

c001a038 <ATA::access(unsigned long long, int, void*, bool)>:
c001a038:	55                   	push   ebp
c001a039:	57                   	push   edi
c001a03a:	56                   	push   esi
c001a03b:	53                   	push   ebx
c001a03c:	83 ec 2c             	sub    esp,0x2c
c001a03f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001a043:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a047:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a04b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a04f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001a053:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001a057:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a05b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001a061:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a065:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a06b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a06f:	c1 e0 06             	shl    eax,0x6
c001a072:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001a07a:	74 5d                	je     c001a0d9 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001a07c:	89 fa                	mov    edx,edi
c001a07e:	89 f0                	mov    eax,esi
c001a080:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001a084:	c1 ea 1c             	shr    edx,0x1c
c001a087:	89 d1                	mov    ecx,edx
c001a089:	09 c1                	or     ecx,eax
c001a08b:	74 25                	je     c001a0b2 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001a08d:	31 ed                	xor    ebp,ebp
c001a08f:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001a096:	89 fa                	mov    edx,edi
c001a098:	89 f0                	mov    eax,esi
c001a09a:	0f ad d0             	shrd   eax,edx,cl
c001a09d:	d3 ea                	shr    edx,cl
c001a09f:	f6 c1 20             	test   cl,0x20
c001a0a2:	74 02                	je     c001a0a6 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001a0a4:	89 d0                	mov    eax,edx
c001a0a6:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001a0aa:	45                   	inc    ebp
c001a0ab:	83 fd 06             	cmp    ebp,0x6
c001a0ae:	75 df                	jne    c001a08f <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001a0b0:	eb 76                	jmp    c001a128 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001a0b2:	89 f0                	mov    eax,esi
c001a0b4:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001a0b9:	89 fa                	mov    edx,edi
c001a0bb:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a0c2:	0f ac d0 10          	shrd   eax,edx,0x10
c001a0c6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a0cb:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a0cf:	c1 ee 18             	shr    esi,0x18
c001a0d2:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001a0d7:	eb 56                	jmp    c001a12f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a0d9:	6a 00                	push   0x0
c001a0db:	6a 3f                	push   0x3f
c001a0dd:	57                   	push   edi
c001a0de:	56                   	push   esi
c001a0df:	e8 1c 22 00 00       	call   c001c300 <__umoddi3>
c001a0e4:	83 c4 10             	add    esp,0x10
c001a0e7:	40                   	inc    eax
c001a0e8:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001a0ec:	6a 00                	push   0x0
c001a0ee:	68 f0 03 00 00       	push   0x3f0
c001a0f3:	57                   	push   edi
c001a0f4:	56                   	push   esi
c001a0f5:	e8 06 21 00 00       	call   c001c200 <__udivdi3>
c001a0fa:	83 c4 10             	add    esp,0x10
c001a0fd:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001a102:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a109:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a10e:	6a 00                	push   0x0
c001a110:	6a 3f                	push   0x3f
c001a112:	57                   	push   edi
c001a113:	56                   	push   esi
c001a114:	e8 e7 20 00 00       	call   c001c200 <__udivdi3>
c001a119:	83 c4 10             	add    esp,0x10
c001a11c:	89 c6                	mov    esi,eax
c001a11e:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001a123:	83 e6 0f             	and    esi,0xf
c001a126:	eb 07                	jmp    c001a12f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a128:	31 f6                	xor    esi,esi
c001a12a:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001a12f:	bf 01 00 00 00       	mov    edi,0x1
c001a134:	50                   	push   eax
c001a135:	6a 00                	push   0x0
c001a137:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a13e:	50                   	push   eax
c001a13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a143:	e8 ee f1 ff ff       	call   c0019336 <IDE::enableIRQs(unsigned char, bool)>
c001a148:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a14b:	e8 9c fe ff ff       	call   c0019fec <ATA::readyForCommand()>
c001a150:	83 c4 10             	add    esp,0x10
c001a153:	84 c0                	test   al,al
c001a155:	0f 84 4e 02 00 00    	je     c001a3a9 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a15b:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a161:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a167:	c1 e0 04             	shl    eax,0x4
c001a16a:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001a171:	09 c6                	or     esi,eax
c001a173:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001a178:	75 05                	jne    c001a17f <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001a17a:	83 ce a0             	or     esi,0xffffffa0
c001a17d:	eb 03                	jmp    c001a182 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001a17f:	83 ce e0             	or     esi,0xffffffe0
c001a182:	89 f0                	mov    eax,esi
c001a184:	0f b6 f0             	movzx  esi,al
c001a187:	56                   	push   esi
c001a188:	6a 06                	push   0x6
c001a18a:	51                   	push   ecx
c001a18b:	52                   	push   edx
c001a18c:	e8 97 ef ff ff       	call   c0019128 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a191:	83 c4 10             	add    esp,0x10
c001a194:	6a 00                	push   0x0
c001a196:	6a 01                	push   0x1
c001a198:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a19f:	50                   	push   eax
c001a1a0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1a6:	e8 7d ef ff ff       	call   c0019128 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1ab:	83 c4 10             	add    esp,0x10
c001a1ae:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a1b3:	75 6e                	jne    c001a223 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001a1b5:	6a 00                	push   0x0
c001a1b7:	6a 08                	push   0x8
c001a1b9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1c0:	50                   	push   eax
c001a1c1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1c7:	e8 5c ef ff ff       	call   c0019128 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1cc:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001a1d1:	50                   	push   eax
c001a1d2:	6a 09                	push   0x9
c001a1d4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1db:	50                   	push   eax
c001a1dc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1e2:	e8 41 ef ff ff       	call   c0019128 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1e7:	83 c4 20             	add    esp,0x20
c001a1ea:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001a1ef:	50                   	push   eax
c001a1f0:	6a 0a                	push   0xa
c001a1f2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1f9:	50                   	push   eax
c001a1fa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a200:	e8 23 ef ff ff       	call   c0019128 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a205:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001a20a:	50                   	push   eax
c001a20b:	6a 0b                	push   0xb
c001a20d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a214:	50                   	push   eax
c001a215:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a21b:	e8 08 ef ff ff       	call   c0019128 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a220:	83 c4 20             	add    esp,0x20
c001a223:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001a228:	50                   	push   eax
c001a229:	6a 02                	push   0x2
c001a22b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a232:	50                   	push   eax
c001a233:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a239:	e8 ea ee ff ff       	call   c0019128 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a23e:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001a243:	50                   	push   eax
c001a244:	6a 03                	push   0x3
c001a246:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a24d:	50                   	push   eax
c001a24e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a254:	e8 cf ee ff ff       	call   c0019128 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a259:	83 c4 20             	add    esp,0x20
c001a25c:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001a261:	50                   	push   eax
c001a262:	6a 04                	push   0x4
c001a264:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a26b:	50                   	push   eax
c001a26c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a272:	e8 b1 ee ff ff       	call   c0019128 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a277:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a27c:	50                   	push   eax
c001a27d:	6a 05                	push   0x5
c001a27f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a286:	50                   	push   eax
c001a287:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a28d:	e8 96 ee ff ff       	call   c0019128 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a292:	83 c4 20             	add    esp,0x20
c001a295:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a29a:	0f 94 c0             	sete   al
c001a29d:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a2a2:	74 09                	je     c001a2ad <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001a2a4:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001a2ab:	eb 07                	jmp    c001a2b4 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001a2ad:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001a2b4:	0f b6 c0             	movzx  eax,al
c001a2b7:	50                   	push   eax
c001a2b8:	6a 07                	push   0x7
c001a2ba:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a2c1:	50                   	push   eax
c001a2c2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a2c8:	e8 5b ee ff ff       	call   c0019128 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a2cd:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001a2d1:	83 c4 10             	add    esp,0x10
c001a2d4:	85 f6                	test   esi,esi
c001a2d6:	0f 84 ae 00 00 00    	je     c001a38a <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001a2dc:	50                   	push   eax
c001a2dd:	6a 01                	push   0x1
c001a2df:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a2e6:	50                   	push   eax
c001a2e7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a2ed:	e8 d4 f8 ff ff       	call   c0019bc6 <IDE::polling(unsigned char, unsigned int)>
c001a2f2:	83 c4 10             	add    esp,0x10
c001a2f5:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001a2fb:	84 c0                	test   al,al
c001a2fd:	74 20                	je     c001a31f <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c001a2ff:	0f b6 f8             	movzx  edi,al
c001a302:	0f b6 d2             	movzx  edx,dl
c001a305:	57                   	push   edi
c001a306:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001a30d:	50                   	push   eax
c001a30e:	52                   	push   edx
c001a30f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a315:	e8 fc f7 ff ff       	call   c0019b16 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a31a:	e9 87 00 00 00       	jmp    c001a3a6 <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c001a31f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a324:	74 33                	je     c001a359 <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001a326:	31 ed                	xor    ebp,ebp
c001a328:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a32c:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001a330:	50                   	push   eax
c001a331:	50                   	push   eax
c001a332:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a339:	50                   	push   eax
c001a33a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a340:	e8 d1 ed ff ff       	call   c0019116 <IDE::getBase(unsigned char)>
c001a345:	89 c2                	mov    edx,eax
c001a347:	89 f8                	mov    eax,edi
c001a349:	66 ef                	out    dx,ax
c001a34b:	45                   	inc    ebp
c001a34c:	83 c4 10             	add    esp,0x10
c001a34f:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001a355:	75 d1                	jne    c001a328 <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c001a357:	eb 23                	jmp    c001a37c <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001a359:	0f b6 d2             	movzx  edx,dl
c001a35c:	51                   	push   ecx
c001a35d:	51                   	push   ecx
c001a35e:	52                   	push   edx
c001a35f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a365:	e8 ac ed ff ff       	call   c0019116 <IDE::getBase(unsigned char)>
c001a36a:	b9 00 01 00 00       	mov    ecx,0x100
c001a36f:	89 c2                	mov    edx,eax
c001a371:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001a375:	fc                   	cld    
c001a376:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001a379:	83 c4 10             	add    esp,0x10
c001a37c:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001a384:	4e                   	dec    esi
c001a385:	e9 4a ff ff ff       	jmp    c001a2d4 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001a38a:	31 ff                	xor    edi,edi
c001a38c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a391:	74 16                	je     c001a3a9 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a393:	50                   	push   eax
c001a394:	50                   	push   eax
c001a395:	31 c0                	xor    eax,eax
c001a397:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001a39c:	0f 94 c0             	sete   al
c001a39f:	50                   	push   eax
c001a3a0:	53                   	push   ebx
c001a3a1:	e8 fc fb ff ff       	call   c0019fa2 <ATA::flush(bool)>
c001a3a6:	83 c4 10             	add    esp,0x10
c001a3a9:	83 c4 2c             	add    esp,0x2c
c001a3ac:	89 f8                	mov    eax,edi
c001a3ae:	5b                   	pop    ebx
c001a3af:	5e                   	pop    esi
c001a3b0:	5f                   	pop    edi
c001a3b1:	5d                   	pop    ebp
c001a3b2:	c3                   	ret    
c001a3b3:	90                   	nop

c001a3b4 <ATA::read(unsigned long long, int, void*)>:
c001a3b4:	57                   	push   edi
c001a3b5:	b8 04 00 00 00       	mov    eax,0x4
c001a3ba:	56                   	push   esi
c001a3bb:	53                   	push   ebx
c001a3bc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a3c0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a3c4:	8d 7a ff             	lea    edi,[edx-0x1]
c001a3c7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a3cb:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a3cf:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a3d5:	77 25                	ja     c001a3fc <ATA::read(unsigned long long, int, void*)+0x48>
c001a3d7:	b8 06 00 00 00       	mov    eax,0x6
c001a3dc:	85 f6                	test   esi,esi
c001a3de:	74 1c                	je     c001a3fc <ATA::read(unsigned long long, int, void*)+0x48>
c001a3e0:	50                   	push   eax
c001a3e1:	50                   	push   eax
c001a3e2:	6a 00                	push   0x0
c001a3e4:	56                   	push   esi
c001a3e5:	52                   	push   edx
c001a3e6:	53                   	push   ebx
c001a3e7:	51                   	push   ecx
c001a3e8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3ec:	e8 47 fc ff ff       	call   c001a038 <ATA::access(unsigned long long, int, void*, bool)>
c001a3f1:	83 c4 20             	add    esp,0x20
c001a3f4:	85 c0                	test   eax,eax
c001a3f6:	0f 95 c0             	setne  al
c001a3f9:	0f b6 c0             	movzx  eax,al
c001a3fc:	5b                   	pop    ebx
c001a3fd:	5e                   	pop    esi
c001a3fe:	5f                   	pop    edi
c001a3ff:	c3                   	ret    

c001a400 <ATA::write(unsigned long long, int, void*)>:
c001a400:	57                   	push   edi
c001a401:	b8 04 00 00 00       	mov    eax,0x4
c001a406:	56                   	push   esi
c001a407:	53                   	push   ebx
c001a408:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a40c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a410:	8d 7a ff             	lea    edi,[edx-0x1]
c001a413:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a417:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a41b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a421:	77 25                	ja     c001a448 <ATA::write(unsigned long long, int, void*)+0x48>
c001a423:	b8 06 00 00 00       	mov    eax,0x6
c001a428:	85 f6                	test   esi,esi
c001a42a:	74 1c                	je     c001a448 <ATA::write(unsigned long long, int, void*)+0x48>
c001a42c:	50                   	push   eax
c001a42d:	50                   	push   eax
c001a42e:	6a 01                	push   0x1
c001a430:	56                   	push   esi
c001a431:	52                   	push   edx
c001a432:	53                   	push   ebx
c001a433:	51                   	push   ecx
c001a434:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a438:	e8 fb fb ff ff       	call   c001a038 <ATA::access(unsigned long long, int, void*, bool)>
c001a43d:	83 c4 20             	add    esp,0x20
c001a440:	85 c0                	test   eax,eax
c001a442:	0f 95 c0             	setne  al
c001a445:	0f b6 c0             	movzx  eax,al
c001a448:	5b                   	pop    ebx
c001a449:	5e                   	pop    esi
c001a44a:	5f                   	pop    edi
c001a44b:	c3                   	ret    

c001a44c <ATA::detectCHS()>:
c001a44c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a450:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001a456:	c1 e0 06             	shl    eax,0x6
c001a459:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001a45f:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001a469:	c7 44 24 04 04 f6 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f604
c001a471:	e9 cd 5c ff ff       	jmp    c0010143 <KePanic(char const*)>

c001a476 <ATA::open(int, int, void*)>:
c001a476:	53                   	push   ebx
c001a477:	83 ec 08             	sub    esp,0x8
c001a47a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a47e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a482:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a486:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a48c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a492:	c1 e0 06             	shl    eax,0x6
c001a495:	01 d0                	add    eax,edx
c001a497:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001a49e:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001a4a4:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001a4ab:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a4b5:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001a4bb:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a4c2:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001a4c9:	75 0c                	jne    c001a4d7 <ATA::open(int, int, void*)+0x61>
c001a4cb:	83 ec 0c             	sub    esp,0xc
c001a4ce:	53                   	push   ebx
c001a4cf:	e8 78 ff ff ff       	call   c001a44c <ATA::detectCHS()>
c001a4d4:	83 c4 10             	add    esp,0x10
c001a4d7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a4dd:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a4e3:	c1 e0 06             	shl    eax,0x6
c001a4e6:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001a4ed:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a4f7:	d1 e8                	shr    eax,1
c001a4f9:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001a4ff:	6a 04                	push   0x4
c001a501:	6a 0c                	push   0xc
c001a503:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a50a:	50                   	push   eax
c001a50b:	52                   	push   edx
c001a50c:	e8 17 ec ff ff       	call   c0019128 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a511:	90                   	nop
c001a512:	90                   	nop
c001a513:	6a 00                	push   0x0
c001a515:	6a 0c                	push   0xc
c001a517:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a51e:	50                   	push   eax
c001a51f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a525:	e8 fe eb ff ff       	call   c0019128 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a52a:	83 c4 14             	add    esp,0x14
c001a52d:	53                   	push   ebx
c001a52e:	e8 1b 18 ff ff       	call   c000bd4e <PhysicalDisk::startCache()>
c001a533:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a536:	e8 b3 28 ff ff       	call   c000cdee <createPartitionsForDisk(PhysicalDisk*)>
c001a53b:	31 c0                	xor    eax,eax
c001a53d:	83 c4 18             	add    esp,0x18
c001a540:	5b                   	pop    ebx
c001a541:	c3                   	ret    

c001a542 <ATAPI::write(unsigned long long, int, void*)>:
c001a542:	b8 03 00 00 00       	mov    eax,0x3
c001a547:	c3                   	ret    

c001a548 <ATAPI::close(int, int, void*)>:
c001a548:	83 ec 0c             	sub    esp,0xc
c001a54b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a54f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a555:	85 c0                	test   eax,eax
c001a557:	74 0c                	je     c001a565 <ATAPI::close(int, int, void*)+0x1d>
c001a559:	83 ec 0c             	sub    esp,0xc
c001a55c:	8b 10                	mov    edx,DWORD PTR [eax]
c001a55e:	50                   	push   eax
c001a55f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a562:	83 c4 10             	add    esp,0x10
c001a565:	31 c0                	xor    eax,eax
c001a567:	83 c4 0c             	add    esp,0xc
c001a56a:	c3                   	ret    
c001a56b:	90                   	nop

c001a56c <ATAPI::ATAPI()>:
c001a56c:	83 ec 0c             	sub    esp,0xc
c001a56f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a573:	83 ec 04             	sub    esp,0x4
c001a576:	68 00 08 00 00       	push   0x800
c001a57b:	68 4d f7 01 c0       	push   0xc001f74d
c001a580:	50                   	push   eax
c001a581:	e8 60 17 ff ff       	call   c000bce6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a586:	83 c4 10             	add    esp,0x10
c001a589:	ba 68 f6 01 c0       	mov    edx,0xc001f668
c001a58e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a592:	89 10                	mov    DWORD PTR [eax],edx
c001a594:	90                   	nop
c001a595:	83 c4 0c             	add    esp,0xc
c001a598:	c3                   	ret    
c001a599:	90                   	nop

c001a59a <ATAPI::readyForCommand()>:
c001a59a:	56                   	push   esi
c001a59b:	53                   	push   ebx
c001a59c:	53                   	push   ebx
c001a59d:	31 db                	xor    ebx,ebx
c001a59f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a5a3:	51                   	push   ecx
c001a5a4:	6a 0c                	push   0xc
c001a5a6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001a5ad:	50                   	push   eax
c001a5ae:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a5b4:	e8 2f ec ff ff       	call   c00191e8 <IDE::read(unsigned char, unsigned char)>
c001a5b9:	83 c4 10             	add    esp,0x10
c001a5bc:	a8 88                	test   al,0x88
c001a5be:	74 25                	je     c001a5e5 <ATAPI::readyForCommand()+0x4b>
c001a5c0:	43                   	inc    ebx
c001a5c1:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001a5c7:	7e da                	jle    c001a5a3 <ATAPI::readyForCommand()+0x9>
c001a5c9:	83 ec 0c             	sub    esp,0xc
c001a5cc:	68 5e 01 00 00       	push   0x15e
c001a5d1:	e8 26 96 ff ff       	call   c0013bfc <milliTenthSleep(unsigned int)>
c001a5d6:	83 c4 10             	add    esp,0x10
c001a5d9:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001a5df:	75 c2                	jne    c001a5a3 <ATAPI::readyForCommand()+0x9>
c001a5e1:	31 c0                	xor    eax,eax
c001a5e3:	eb 02                	jmp    c001a5e7 <ATAPI::readyForCommand()+0x4d>
c001a5e5:	b0 01                	mov    al,0x1
c001a5e7:	5a                   	pop    edx
c001a5e8:	5b                   	pop    ebx
c001a5e9:	5e                   	pop    esi
c001a5ea:	c3                   	ret    
c001a5eb:	90                   	nop

c001a5ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001a5ec:	55                   	push   ebp
c001a5ed:	57                   	push   edi
c001a5ee:	56                   	push   esi
c001a5ef:	53                   	push   ebx
c001a5f0:	83 ec 20             	sub    esp,0x20
c001a5f3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a5f7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001a5fb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a5ff:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a603:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a607:	6a 01                	push   0x1
c001a609:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a610:	50                   	push   eax
c001a611:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a617:	e8 1a ed ff ff       	call   c0019336 <IDE::enableIRQs(unsigned char, bool)>
c001a61c:	5e                   	pop    esi
c001a61d:	58                   	pop    eax
c001a61e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a625:	50                   	push   eax
c001a626:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a62c:	e8 d1 ea ff ff       	call   c0019102 <IDE::prepareInterrupt(unsigned char)>
c001a631:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a634:	e8 61 ff ff ff       	call   c001a59a <ATAPI::readyForCommand()>
c001a639:	83 c4 10             	add    esp,0x10
c001a63c:	84 c0                	test   al,al
c001a63e:	75 0a                	jne    c001a64a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001a640:	bb 01 00 00 00       	mov    ebx,0x1
c001a645:	e9 57 02 00 00       	jmp    c001a8a1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a64a:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001a650:	c1 e0 04             	shl    eax,0x4
c001a653:	0f b6 c0             	movzx  eax,al
c001a656:	50                   	push   eax
c001a657:	6a 06                	push   0x6
c001a659:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a660:	50                   	push   eax
c001a661:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a667:	e8 bc ea ff ff       	call   c0019128 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a66c:	6a 00                	push   0x0
c001a66e:	6a 01                	push   0x1
c001a670:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a677:	50                   	push   eax
c001a678:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a67e:	e8 a5 ea ff ff       	call   c0019128 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a683:	83 c4 20             	add    esp,0x20
c001a686:	0f b6 c3             	movzx  eax,bl
c001a689:	0f b6 df             	movzx  ebx,bh
c001a68c:	50                   	push   eax
c001a68d:	6a 04                	push   0x4
c001a68f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a696:	50                   	push   eax
c001a697:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a69d:	e8 86 ea ff ff       	call   c0019128 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a6a2:	53                   	push   ebx
c001a6a3:	6a 05                	push   0x5
c001a6a5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a6ac:	50                   	push   eax
c001a6ad:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6b3:	e8 70 ea ff ff       	call   c0019128 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a6b8:	83 c4 20             	add    esp,0x20
c001a6bb:	68 a0 00 00 00       	push   0xa0
c001a6c0:	6a 07                	push   0x7
c001a6c2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a6c9:	50                   	push   eax
c001a6ca:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6d0:	e8 53 ea ff ff       	call   c0019128 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a6d5:	83 c4 0c             	add    esp,0xc
c001a6d8:	6a 01                	push   0x1
c001a6da:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a6e1:	50                   	push   eax
c001a6e2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6e8:	e8 d9 f4 ff ff       	call   c0019bc6 <IDE::polling(unsigned char, unsigned int)>
c001a6ed:	83 c4 10             	add    esp,0x10
c001a6f0:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001a6f6:	84 c0                	test   al,al
c001a6f8:	74 23                	je     c001a71d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001a6fa:	0f b6 d8             	movzx  ebx,al
c001a6fd:	0f b6 d2             	movzx  edx,dl
c001a700:	53                   	push   ebx
c001a701:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001a708:	50                   	push   eax
c001a709:	52                   	push   edx
c001a70a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a710:	e8 01 f4 ff ff       	call   c0019b16 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a715:	83 c4 10             	add    esp,0x10
c001a718:	e9 84 01 00 00       	jmp    c001a8a1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a71d:	0f b6 d2             	movzx  edx,dl
c001a720:	53                   	push   ebx
c001a721:	53                   	push   ebx
c001a722:	52                   	push   edx
c001a723:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a729:	e8 e8 e9 ff ff       	call   c0019116 <IDE::getBase(unsigned char)>
c001a72e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a732:	b9 06 00 00 00       	mov    ecx,0x6
c001a737:	89 c2                	mov    edx,eax
c001a739:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001a73c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001a740:	83 c4 10             	add    esp,0x10
c001a743:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a749:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a750:	85 db                	test   ebx,ebx
c001a752:	0f 84 ec 00 00 00    	je     c001a844 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001a758:	51                   	push   ecx
c001a759:	51                   	push   ecx
c001a75a:	52                   	push   edx
c001a75b:	50                   	push   eax
c001a75c:	e8 35 eb ff ff       	call   c0019296 <IDE::waitInterrupt(unsigned char)>
c001a761:	83 c4 10             	add    esp,0x10
c001a764:	84 c0                	test   al,al
c001a766:	0f 84 d4 fe ff ff    	je     c001a640 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a76c:	56                   	push   esi
c001a76d:	56                   	push   esi
c001a76e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a775:	50                   	push   eax
c001a776:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a77c:	e8 81 e9 ff ff       	call   c0019102 <IDE::prepareInterrupt(unsigned char)>
c001a781:	83 c4 0c             	add    esp,0xc
c001a784:	6a 04                	push   0x4
c001a786:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a78d:	50                   	push   eax
c001a78e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a794:	e8 4f ea ff ff       	call   c00191e8 <IDE::read(unsigned char, unsigned char)>
c001a799:	83 c4 0c             	add    esp,0xc
c001a79c:	89 c6                	mov    esi,eax
c001a79e:	6a 05                	push   0x5
c001a7a0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a7a7:	50                   	push   eax
c001a7a8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a7ae:	e8 35 ea ff ff       	call   c00191e8 <IDE::read(unsigned char, unsigned char)>
c001a7b3:	89 f1                	mov    ecx,esi
c001a7b5:	0f b6 c0             	movzx  eax,al
c001a7b8:	0f b6 f1             	movzx  esi,cl
c001a7bb:	c1 e0 08             	shl    eax,0x8
c001a7be:	09 c6                	or     esi,eax
c001a7c0:	d1 fe                	sar    esi,1
c001a7c2:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001a7c6:	83 c4 10             	add    esp,0x10
c001a7c9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001a7ce:	74 41                	je     c001a811 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001a7d0:	31 c9                	xor    ecx,ecx
c001a7d2:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a7d8:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a7df:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001a7e3:	75 0a                	jne    c001a7ef <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001a7e5:	01 c9                	add    ecx,ecx
c001a7e7:	01 cd                	add    ebp,ecx
c001a7e9:	4b                   	dec    ebx
c001a7ea:	e9 54 ff ff ff       	jmp    c001a743 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001a7ef:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001a7f4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a7f8:	51                   	push   ecx
c001a7f9:	51                   	push   ecx
c001a7fa:	52                   	push   edx
c001a7fb:	50                   	push   eax
c001a7fc:	e8 15 e9 ff ff       	call   c0019116 <IDE::getBase(unsigned char)>
c001a801:	89 c2                	mov    edx,eax
c001a803:	89 f0                	mov    eax,esi
c001a805:	66 ef                	out    dx,ax
c001a807:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a80b:	83 c4 10             	add    esp,0x10
c001a80e:	41                   	inc    ecx
c001a80f:	eb c1                	jmp    c001a7d2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001a811:	31 f6                	xor    esi,esi
c001a813:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a819:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a820:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001a824:	75 06                	jne    c001a82c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001a826:	01 f6                	add    esi,esi
c001a828:	01 f5                	add    ebp,esi
c001a82a:	eb bd                	jmp    c001a7e9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001a82c:	51                   	push   ecx
c001a82d:	51                   	push   ecx
c001a82e:	52                   	push   edx
c001a82f:	50                   	push   eax
c001a830:	e8 e1 e8 ff ff       	call   c0019116 <IDE::getBase(unsigned char)>
c001a835:	89 c2                	mov    edx,eax
c001a837:	66 ed                	in     ax,dx
c001a839:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001a83e:	83 c4 10             	add    esp,0x10
c001a841:	46                   	inc    esi
c001a842:	eb cf                	jmp    c001a813 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001a844:	51                   	push   ecx
c001a845:	51                   	push   ecx
c001a846:	52                   	push   edx
c001a847:	50                   	push   eax
c001a848:	e8 49 ea ff ff       	call   c0019296 <IDE::waitInterrupt(unsigned char)>
c001a84d:	83 c4 10             	add    esp,0x10
c001a850:	84 c0                	test   al,al
c001a852:	0f 84 e8 fd ff ff    	je     c001a640 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a858:	bb a0 86 01 00       	mov    ebx,0x186a0
c001a85d:	52                   	push   edx
c001a85e:	52                   	push   edx
c001a85f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a866:	50                   	push   eax
c001a867:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a86d:	e8 90 e8 ff ff       	call   c0019102 <IDE::prepareInterrupt(unsigned char)>
c001a872:	83 c4 10             	add    esp,0x10
c001a875:	50                   	push   eax
c001a876:	50                   	push   eax
c001a877:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a87e:	50                   	push   eax
c001a87f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a885:	e8 8c e8 ff ff       	call   c0019116 <IDE::getBase(unsigned char)>
c001a88a:	8d 50 07             	lea    edx,[eax+0x7]
c001a88d:	ec                   	in     al,dx
c001a88e:	83 c4 10             	add    esp,0x10
c001a891:	a8 88                	test   al,0x88
c001a893:	74 0a                	je     c001a89f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001a895:	4b                   	dec    ebx
c001a896:	75 dd                	jne    c001a875 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001a898:	bb 02 00 00 00       	mov    ebx,0x2
c001a89d:	eb 02                	jmp    c001a8a1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a89f:	31 db                	xor    ebx,ebx
c001a8a1:	83 c4 1c             	add    esp,0x1c
c001a8a4:	89 d8                	mov    eax,ebx
c001a8a6:	5b                   	pop    ebx
c001a8a7:	5e                   	pop    esi
c001a8a8:	5f                   	pop    edi
c001a8a9:	5d                   	pop    ebp
c001a8aa:	c3                   	ret    
c001a8ab:	90                   	nop

c001a8ac <ATAPI::diskRemoved()>:
c001a8ac:	53                   	push   ebx
c001a8ad:	83 ec 14             	sub    esp,0x14
c001a8b0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a8b4:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a8bb:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001a8c1:	e8 a8 22 ff ff       	call   c000cb6e <LogicalDisk::unmount()>
c001a8c6:	58                   	pop    eax
c001a8c7:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a8cd:	e8 e2 2b ff ff       	call   c000d4b4 <VCache::writeWriteBuffer()>
c001a8d2:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a8d8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a8dc:	83 c4 18             	add    esp,0x18
c001a8df:	5b                   	pop    ebx
c001a8e0:	e9 bf 2b ff ff       	jmp    c000d4a4 <VCache::invalidateReadBuffer()>
c001a8e5:	90                   	nop

c001a8e6 <ATAPI::eject()>:
c001a8e6:	57                   	push   edi
c001a8e7:	b9 03 00 00 00       	mov    ecx,0x3
c001a8ec:	53                   	push   ebx
c001a8ed:	83 ec 14             	sub    esp,0x14
c001a8f0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a8f4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a8f8:	fc                   	cld    
c001a8f9:	31 c0                	xor    eax,eax
c001a8fb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a8fd:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001a902:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001a907:	50                   	push   eax
c001a908:	50                   	push   eax
c001a909:	6a 00                	push   0x0
c001a90b:	6a 00                	push   0x0
c001a90d:	6a 00                	push   0x0
c001a90f:	6a 02                	push   0x2
c001a911:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a915:	50                   	push   eax
c001a916:	53                   	push   ebx
c001a917:	e8 d0 fc ff ff       	call   c001a5ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a91c:	83 c4 14             	add    esp,0x14
c001a91f:	53                   	push   ebx
c001a920:	e8 87 ff ff ff       	call   c001a8ac <ATAPI::diskRemoved()>
c001a925:	83 c4 24             	add    esp,0x24
c001a928:	31 c0                	xor    eax,eax
c001a92a:	5b                   	pop    ebx
c001a92b:	5f                   	pop    edi
c001a92c:	c3                   	ret    
c001a92d:	90                   	nop

c001a92e <ATAPI::diskInserted()>:
c001a92e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a932:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001a939:	c3                   	ret    

c001a93a <ATAPI::detectMedia()>:
c001a93a:	56                   	push   esi
c001a93b:	53                   	push   ebx
c001a93c:	83 ec 28             	sub    esp,0x28
c001a93f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a943:	6a 0c                	push   0xc
c001a945:	6a 00                	push   0x0
c001a947:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001a94b:	56                   	push   esi
c001a94c:	e8 7f 5b fe ff       	call   c00004d0 <memset>
c001a951:	58                   	pop    eax
c001a952:	5a                   	pop    edx
c001a953:	6a 00                	push   0x0
c001a955:	6a 00                	push   0x0
c001a957:	6a 00                	push   0x0
c001a959:	6a 00                	push   0x0
c001a95b:	56                   	push   esi
c001a95c:	53                   	push   ebx
c001a95d:	e8 8a fc ff ff       	call   c001a5ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a962:	83 c4 1c             	add    esp,0x1c
c001a965:	6a 0c                	push   0xc
c001a967:	6a 00                	push   0x0
c001a969:	56                   	push   esi
c001a96a:	e8 61 5b fe ff       	call   c00004d0 <memset>
c001a96f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001a974:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001a979:	59                   	pop    ecx
c001a97a:	58                   	pop    eax
c001a97b:	6a 01                	push   0x1
c001a97d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a981:	50                   	push   eax
c001a982:	6a 00                	push   0x0
c001a984:	6a 12                	push   0x12
c001a986:	56                   	push   esi
c001a987:	53                   	push   ebx
c001a988:	e8 5f fc ff ff       	call   c001a5ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a98d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001a991:	83 c4 20             	add    esp,0x20
c001a994:	83 e0 7f             	and    eax,0x7f
c001a997:	3c 70                	cmp    al,0x70
c001a999:	74 15                	je     c001a9b0 <ATAPI::detectMedia()+0x76>
c001a99b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a9a2:	75 0c                	jne    c001a9b0 <ATAPI::detectMedia()+0x76>
c001a9a4:	83 ec 0c             	sub    esp,0xc
c001a9a7:	53                   	push   ebx
c001a9a8:	e8 81 ff ff ff       	call   c001a92e <ATAPI::diskInserted()>
c001a9ad:	83 c4 10             	add    esp,0x10
c001a9b0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a9b4:	83 e0 0f             	and    eax,0xf
c001a9b7:	3c 02                	cmp    al,0x2
c001a9b9:	75 1b                	jne    c001a9d6 <ATAPI::detectMedia()+0x9c>
c001a9bb:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001a9c0:	75 2d                	jne    c001a9ef <ATAPI::detectMedia()+0xb5>
c001a9c2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a9c9:	74 24                	je     c001a9ef <ATAPI::detectMedia()+0xb5>
c001a9cb:	83 ec 0c             	sub    esp,0xc
c001a9ce:	53                   	push   ebx
c001a9cf:	e8 d8 fe ff ff       	call   c001a8ac <ATAPI::diskRemoved()>
c001a9d4:	eb 16                	jmp    c001a9ec <ATAPI::detectMedia()+0xb2>
c001a9d6:	84 c0                	test   al,al
c001a9d8:	75 15                	jne    c001a9ef <ATAPI::detectMedia()+0xb5>
c001a9da:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a9e1:	75 0c                	jne    c001a9ef <ATAPI::detectMedia()+0xb5>
c001a9e3:	83 ec 0c             	sub    esp,0xc
c001a9e6:	53                   	push   ebx
c001a9e7:	e8 42 ff ff ff       	call   c001a92e <ATAPI::diskInserted()>
c001a9ec:	83 c4 10             	add    esp,0x10
c001a9ef:	83 c4 24             	add    esp,0x24
c001a9f2:	5b                   	pop    ebx
c001a9f3:	5e                   	pop    esi
c001a9f4:	c3                   	ret    
c001a9f5:	90                   	nop

c001a9f6 <ATAPI::open(int, int, void*)>:
c001a9f6:	56                   	push   esi
c001a9f7:	53                   	push   ebx
c001a9f8:	50                   	push   eax
c001a9f9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a9fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aa01:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001aa05:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001aa0b:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001aa11:	c1 e0 06             	shl    eax,0x6
c001aa14:	01 d0                	add    eax,edx
c001aa16:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001aa1d:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001aa23:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001aa2a:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001aa34:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001aa3a:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001aa41:	6a 04                	push   0x4
c001aa43:	6a 0c                	push   0xc
c001aa45:	51                   	push   ecx
c001aa46:	52                   	push   edx
c001aa47:	e8 dc e6 ff ff       	call   c0019128 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001aa4c:	90                   	nop
c001aa4d:	90                   	nop
c001aa4e:	6a 00                	push   0x0
c001aa50:	6a 0c                	push   0xc
c001aa52:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001aa59:	50                   	push   eax
c001aa5a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001aa60:	e8 c3 e6 ff ff       	call   c0019128 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001aa65:	83 c4 14             	add    esp,0x14
c001aa68:	68 74 01 00 00       	push   0x174
c001aa6d:	e8 47 cd fe ff       	call   c00077b9 <malloc>
c001aa72:	83 c4 0c             	add    esp,0xc
c001aa75:	89 c6                	mov    esi,eax
c001aa77:	6a 00                	push   0x0
c001aa79:	68 ff ff ff 7f       	push   0x7fffffff
c001aa7e:	6a 00                	push   0x0
c001aa80:	6a 00                	push   0x0
c001aa82:	53                   	push   ebx
c001aa83:	68 04 f8 01 c0       	push   0xc001f804
c001aa88:	50                   	push   eax
c001aa89:	e8 2c 1f ff ff       	call   c000c9ba <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001aa8e:	83 c4 14             	add    esp,0x14
c001aa91:	56                   	push   esi
c001aa92:	e8 d9 1f ff ff       	call   c000ca70 <LogicalDisk::assignDriveLetter()>
c001aa97:	5a                   	pop    edx
c001aa98:	0f be c0             	movsx  eax,al
c001aa9b:	59                   	pop    ecx
c001aa9c:	50                   	push   eax
c001aa9d:	68 50 f6 01 c0       	push   0xc001f650
c001aaa2:	e8 31 fa fe ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001aaa7:	58                   	pop    eax
c001aaa8:	5a                   	pop    edx
c001aaa9:	56                   	push   esi
c001aaaa:	53                   	push   ebx
c001aaab:	e8 68 0e ff ff       	call   c000b918 <Device::addChild(Device*)>
c001aab0:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001aab6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aab9:	e8 90 12 ff ff       	call   c000bd4e <PhysicalDisk::startCache()>
c001aabe:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001aac5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aac8:	e8 6d fe ff ff       	call   c001a93a <ATAPI::detectMedia()>
c001aacd:	83 c4 14             	add    esp,0x14
c001aad0:	31 c0                	xor    eax,eax
c001aad2:	5b                   	pop    ebx
c001aad3:	5e                   	pop    esi
c001aad4:	c3                   	ret    
c001aad5:	90                   	nop

c001aad6 <ATAPI::read(unsigned long long, int, void*)>:
c001aad6:	55                   	push   ebp
c001aad7:	57                   	push   edi
c001aad8:	56                   	push   esi
c001aad9:	53                   	push   ebx
c001aada:	83 ec 1c             	sub    esp,0x1c
c001aadd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001aae1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001aae5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001aae9:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001aaf0:	74 3c                	je     c001ab2e <ATAPI::read(unsigned long long, int, void*)+0x58>
c001aaf2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001aaf6:	b9 03 00 00 00       	mov    ecx,0x3
c001aafb:	fc                   	cld    
c001aafc:	31 c0                	xor    eax,eax
c001aafe:	0f ce                	bswap  esi
c001ab00:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ab02:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001ab07:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001ab0b:	89 e8                	mov    eax,ebp
c001ab0d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001ab11:	50                   	push   eax
c001ab12:	50                   	push   eax
c001ab13:	55                   	push   ebp
c001ab14:	c1 e5 0b             	shl    ebp,0xb
c001ab17:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ab1b:	6a 00                	push   0x0
c001ab1d:	55                   	push   ebp
c001ab1e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ab22:	50                   	push   eax
c001ab23:	53                   	push   ebx
c001ab24:	e8 c3 fa ff ff       	call   c001a5ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ab29:	83 c4 20             	add    esp,0x20
c001ab2c:	eb 1a                	jmp    c001ab48 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001ab2e:	83 ec 0c             	sub    esp,0xc
c001ab31:	53                   	push   ebx
c001ab32:	e8 03 fe ff ff       	call   c001a93a <ATAPI::detectMedia()>
c001ab37:	83 c4 10             	add    esp,0x10
c001ab3a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ab41:	75 af                	jne    c001aaf2 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001ab43:	b8 02 00 00 00       	mov    eax,0x2
c001ab48:	83 c4 1c             	add    esp,0x1c
c001ab4b:	5b                   	pop    ebx
c001ab4c:	5e                   	pop    esi
c001ab4d:	5f                   	pop    edi
c001ab4e:	5d                   	pop    ebp
c001ab4f:	c3                   	ret    

c001ab50 <SATA::close(int, int, void*)>:
c001ab50:	83 ec 0c             	sub    esp,0xc
c001ab53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab57:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ab5d:	85 c0                	test   eax,eax
c001ab5f:	74 0c                	je     c001ab6d <SATA::close(int, int, void*)+0x1d>
c001ab61:	83 ec 0c             	sub    esp,0xc
c001ab64:	8b 10                	mov    edx,DWORD PTR [eax]
c001ab66:	50                   	push   eax
c001ab67:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ab6a:	83 c4 10             	add    esp,0x10
c001ab6d:	31 c0                	xor    eax,eax
c001ab6f:	83 c4 0c             	add    esp,0xc
c001ab72:	c3                   	ret    
c001ab73:	90                   	nop

c001ab74 <SATA::powerSaving(PowerSavingLevel)>:
c001ab74:	c3                   	ret    
c001ab75:	90                   	nop

c001ab76 <SATA::open(int, int, void*)>:
c001ab76:	56                   	push   esi
c001ab77:	53                   	push   ebx
c001ab78:	50                   	push   eax
c001ab79:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ab7d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ab81:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001ab8b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001ab91:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001ab9b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ab9f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001aba9:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001abaf:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001abb6:	e8 da ce fe ff       	call   c0007a95 <Phys::allocatePage()>
c001abbb:	89 c6                	mov    esi,eax
c001abbd:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001abc3:	81 c6 00 10 00 00    	add    esi,0x1000
c001abc9:	e8 c7 ce fe ff       	call   c0007a95 <Phys::allocatePage()>
c001abce:	39 c6                	cmp    esi,eax
c001abd0:	74 10                	je     c001abe2 <SATA::open(int, int, void*)+0x6c>
c001abd2:	83 ec 0c             	sub    esp,0xc
c001abd5:	68 98 f6 01 c0       	push   0xc001f698
c001abda:	e8 64 55 ff ff       	call   c0010143 <KePanic(char const*)>
c001abdf:	83 c4 10             	add    esp,0x10
c001abe2:	83 ec 0c             	sub    esp,0xc
c001abe5:	6a 02                	push   0x2
c001abe7:	e8 99 e6 fe ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c001abec:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001abf2:	6a 03                	push   0x3
c001abf4:	50                   	push   eax
c001abf5:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001abfb:	ff 35 10 0e 02 c0    	push   DWORD PTR ds:0xc0020e10
c001ac01:	e8 14 ed fe ff       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c001ac06:	83 c4 14             	add    esp,0x14
c001ac09:	53                   	push   ebx
c001ac0a:	e8 3f 11 ff ff       	call   c000bd4e <PhysicalDisk::startCache()>
c001ac0f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ac12:	e8 d7 21 ff ff       	call   c000cdee <createPartitionsForDisk(PhysicalDisk*)>
c001ac17:	83 c4 14             	add    esp,0x14
c001ac1a:	31 c0                	xor    eax,eax
c001ac1c:	5b                   	pop    ebx
c001ac1d:	5e                   	pop    esi
c001ac1e:	c3                   	ret    
c001ac1f:	90                   	nop

c001ac20 <SATA::SATA()>:
c001ac20:	83 ec 0c             	sub    esp,0xc
c001ac23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac27:	83 ec 04             	sub    esp,0x4
c001ac2a:	68 00 02 00 00       	push   0x200
c001ac2f:	68 ac f6 01 c0       	push   0xc001f6ac
c001ac34:	50                   	push   eax
c001ac35:	e8 ac 10 ff ff       	call   c000bce6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ac3a:	83 c4 10             	add    esp,0x10
c001ac3d:	ba 1c f7 01 c0       	mov    edx,0xc001f71c
c001ac42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac46:	89 10                	mov    DWORD PTR [eax],edx
c001ac48:	90                   	nop
c001ac49:	83 c4 0c             	add    esp,0xc
c001ac4c:	c3                   	ret    
c001ac4d:	90                   	nop

c001ac4e <SATA::access(unsigned long long, int, void*, bool)>:
c001ac4e:	55                   	push   ebp
c001ac4f:	57                   	push   edi
c001ac50:	56                   	push   esi
c001ac51:	53                   	push   ebx
c001ac52:	83 ec 2c             	sub    esp,0x2c
c001ac55:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001ac59:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001ac5d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ac61:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ac65:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ac69:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001ac6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ac72:	7e 10                	jle    c001ac84 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001ac74:	83 ec 0c             	sub    esp,0xc
c001ac77:	68 bc f6 01 c0       	push   0xc001f6bc
c001ac7c:	e8 c2 54 ff ff       	call   c0010143 <KePanic(char const*)>
c001ac81:	83 c4 10             	add    esp,0x10
c001ac84:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ac8a:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001ac90:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ac96:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ac9a:	89 d0                	mov    eax,edx
c001ac9c:	c1 e0 07             	shl    eax,0x7
c001ac9f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001aca3:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001acad:	51                   	push   ecx
c001acae:	8d 42 02             	lea    eax,[edx+0x2]
c001acb1:	51                   	push   ecx
c001acb2:	c1 e0 07             	shl    eax,0x7
c001acb5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001acb9:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001acbd:	50                   	push   eax
c001acbe:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001acc4:	e8 e7 ef ff ff       	call   c0019cb0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001acc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001accd:	83 c4 10             	add    esp,0x10
c001acd0:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001acd5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001acd9:	0f 84 4f 01 00 00    	je     c001ae2e <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001acdf:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ace3:	c1 e0 09             	shl    eax,0x9
c001ace6:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001aceb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001acef:	74 0e                	je     c001acff <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001acf1:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001acf7:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001acfb:	89 c1                	mov    ecx,eax
c001acfd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001acff:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ad03:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ad09:	8d 42 02             	lea    eax,[edx+0x2]
c001ad0c:	c1 e0 07             	shl    eax,0x7
c001ad0f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ad13:	8b 00                	mov    eax,DWORD PTR [eax]
c001ad15:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001ad1b:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001ad21:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ad25:	c1 e1 05             	shl    ecx,0x5
c001ad28:	01 c8                	add    eax,ecx
c001ad2a:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001ad2e:	83 e1 01             	and    ecx,0x1
c001ad31:	89 ce                	mov    esi,ecx
c001ad33:	8a 08                	mov    cl,BYTE PTR [eax]
c001ad35:	c1 e6 06             	shl    esi,0x6
c001ad38:	83 e1 bf             	and    ecx,0xffffffbf
c001ad3b:	09 f1                	or     ecx,esi
c001ad3d:	88 08                	mov    BYTE PTR [eax],cl
c001ad3f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ad41:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001ad47:	81 c9 05 00 01 00    	or     ecx,0x10005
c001ad4d:	89 08                	mov    DWORD PTR [eax],ecx
c001ad4f:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ad55:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001ad5b:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001ad61:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001ad64:	50                   	push   eax
c001ad65:	68 90 00 00 00       	push   0x90
c001ad6a:	6a 00                	push   0x0
c001ad6c:	56                   	push   esi
c001ad6d:	e8 5e 57 fe ff       	call   c00004d0 <memset>
c001ad72:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ad78:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001ad7c:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001ad82:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001ad86:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ad8a:	83 c4 10             	add    esp,0x10
c001ad8d:	48                   	dec    eax
c001ad8e:	25 ff ff 3f 00       	and    eax,0x3fffff
c001ad93:	89 c1                	mov    ecx,eax
c001ad95:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001ad9b:	25 00 00 c0 ff       	and    eax,0xffc00000
c001ada0:	09 c8                	or     eax,ecx
c001ada2:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001ada8:	66 8b 06             	mov    ax,WORD PTR [esi]
c001adab:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001adb2:	66 25 00 7f          	and    ax,0x7f00
c001adb6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001adba:	66 0d 27 80          	or     ax,0x8027
c001adbe:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001adc3:	66 89 06             	mov    WORD PTR [esi],ax
c001adc6:	19 c0                	sbb    eax,eax
c001adc8:	83 e0 f0             	and    eax,0xfffffff0
c001adcb:	83 c0 35             	add    eax,0x35
c001adce:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001add1:	89 e8                	mov    eax,ebp
c001add3:	c1 e8 10             	shr    eax,0x10
c001add6:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001add9:	89 e8                	mov    eax,ebp
c001addb:	c1 e8 18             	shr    eax,0x18
c001adde:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001ade1:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001ade5:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001ade8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001adec:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001adef:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001adf3:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001adf7:	89 d6                	mov    esi,edx
c001adf9:	31 c0                	xor    eax,eax
c001adfb:	c1 e6 07             	shl    esi,0x7
c001adfe:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ae02:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001ae08:	80 e1 88             	and    cl,0x88
c001ae0b:	74 0a                	je     c001ae17 <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001ae0d:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ae12:	74 0a                	je     c001ae1e <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001ae14:	40                   	inc    eax
c001ae15:	eb eb                	jmp    c001ae02 <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001ae17:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ae1c:	75 17                	jne    c001ae35 <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001ae1e:	83 ec 0c             	sub    esp,0xc
c001ae21:	68 f5 f6 01 c0       	push   0xc001f6f5
c001ae26:	e8 ad f6 fe ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001ae2b:	83 c4 10             	add    esp,0x10
c001ae2e:	b8 01 00 00 00       	mov    eax,0x1
c001ae33:	eb 5d                	jmp    c001ae92 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001ae35:	b8 01 00 00 00       	mov    eax,0x1
c001ae3a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001ae3e:	c1 e2 07             	shl    edx,0x7
c001ae41:	d3 e0                	shl    eax,cl
c001ae43:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001ae47:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001ae4d:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001ae53:	85 c8                	test   eax,ecx
c001ae55:	74 16                	je     c001ae6d <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001ae57:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001ae5d:	0f ba e1 1e          	bt     ecx,0x1e
c001ae61:	73 ea                	jae    c001ae4d <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001ae63:	83 ec 0c             	sub    esp,0xc
c001ae66:	68 03 f7 01 c0       	push   0xc001f703
c001ae6b:	eb b9                	jmp    c001ae26 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001ae6d:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001ae73:	0f ba e0 1e          	bt     eax,0x1e
c001ae77:	72 b5                	jb     c001ae2e <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001ae79:	31 c0                	xor    eax,eax
c001ae7b:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ae80:	75 10                	jne    c001ae92 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001ae82:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001ae88:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ae8c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ae90:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ae92:	83 c4 2c             	add    esp,0x2c
c001ae95:	5b                   	pop    ebx
c001ae96:	5e                   	pop    esi
c001ae97:	5f                   	pop    edi
c001ae98:	5d                   	pop    ebp
c001ae99:	c3                   	ret    

c001ae9a <SATA::read(unsigned long long, int, void*)>:
c001ae9a:	57                   	push   edi
c001ae9b:	b8 04 00 00 00       	mov    eax,0x4
c001aea0:	56                   	push   esi
c001aea1:	53                   	push   ebx
c001aea2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001aea6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001aeaa:	8d 7a ff             	lea    edi,[edx-0x1]
c001aead:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001aeb1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001aeb5:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001aebb:	77 25                	ja     c001aee2 <SATA::read(unsigned long long, int, void*)+0x48>
c001aebd:	b8 06 00 00 00       	mov    eax,0x6
c001aec2:	85 f6                	test   esi,esi
c001aec4:	74 1c                	je     c001aee2 <SATA::read(unsigned long long, int, void*)+0x48>
c001aec6:	50                   	push   eax
c001aec7:	50                   	push   eax
c001aec8:	6a 00                	push   0x0
c001aeca:	56                   	push   esi
c001aecb:	52                   	push   edx
c001aecc:	53                   	push   ebx
c001aecd:	51                   	push   ecx
c001aece:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aed2:	e8 77 fd ff ff       	call   c001ac4e <SATA::access(unsigned long long, int, void*, bool)>
c001aed7:	83 c4 20             	add    esp,0x20
c001aeda:	85 c0                	test   eax,eax
c001aedc:	0f 95 c0             	setne  al
c001aedf:	0f b6 c0             	movzx  eax,al
c001aee2:	5b                   	pop    ebx
c001aee3:	5e                   	pop    esi
c001aee4:	5f                   	pop    edi
c001aee5:	c3                   	ret    

c001aee6 <SATA::write(unsigned long long, int, void*)>:
c001aee6:	55                   	push   ebp
c001aee7:	b8 04 00 00 00       	mov    eax,0x4
c001aeec:	57                   	push   edi
c001aeed:	56                   	push   esi
c001aeee:	53                   	push   ebx
c001aeef:	83 ec 0c             	sub    esp,0xc
c001aef2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001aef6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aefa:	8d 73 ff             	lea    esi,[ebx-0x1]
c001aefd:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001af01:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001af05:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001af0b:	77 3d                	ja     c001af4a <SATA::write(unsigned long long, int, void*)+0x64>
c001af0d:	b8 06 00 00 00       	mov    eax,0x6
c001af12:	85 ed                	test   ebp,ebp
c001af14:	74 34                	je     c001af4a <SATA::write(unsigned long long, int, void*)+0x64>
c001af16:	c1 e3 09             	shl    ebx,0x9
c001af19:	01 eb                	add    ebx,ebp
c001af1b:	89 d6                	mov    esi,edx
c001af1d:	89 cf                	mov    edi,ecx
c001af1f:	83 c6 01             	add    esi,0x1
c001af22:	83 d7 00             	adc    edi,0x0
c001af25:	50                   	push   eax
c001af26:	50                   	push   eax
c001af27:	6a 01                	push   0x1
c001af29:	55                   	push   ebp
c001af2a:	81 c5 00 02 00 00    	add    ebp,0x200
c001af30:	6a 01                	push   0x1
c001af32:	51                   	push   ecx
c001af33:	52                   	push   edx
c001af34:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001af38:	e8 11 fd ff ff       	call   c001ac4e <SATA::access(unsigned long long, int, void*, bool)>
c001af3d:	83 c4 20             	add    esp,0x20
c001af40:	89 f2                	mov    edx,esi
c001af42:	89 f9                	mov    ecx,edi
c001af44:	39 dd                	cmp    ebp,ebx
c001af46:	75 d3                	jne    c001af1b <SATA::write(unsigned long long, int, void*)+0x35>
c001af48:	31 c0                	xor    eax,eax
c001af4a:	83 c4 0c             	add    esp,0xc
c001af4d:	5b                   	pop    ebx
c001af4e:	5e                   	pop    esi
c001af4f:	5f                   	pop    edi
c001af50:	5d                   	pop    ebp
c001af51:	c3                   	ret    

c001af52 <SATAPI::write(unsigned long long, int, void*)>:
c001af52:	b8 03 00 00 00       	mov    eax,0x3
c001af57:	c3                   	ret    

c001af58 <SATAPI::close(int, int, void*)>:
c001af58:	83 ec 0c             	sub    esp,0xc
c001af5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af5f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001af65:	85 c0                	test   eax,eax
c001af67:	74 0c                	je     c001af75 <SATAPI::close(int, int, void*)+0x1d>
c001af69:	83 ec 0c             	sub    esp,0xc
c001af6c:	8b 10                	mov    edx,DWORD PTR [eax]
c001af6e:	50                   	push   eax
c001af6f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001af72:	83 c4 10             	add    esp,0x10
c001af75:	31 c0                	xor    eax,eax
c001af77:	83 c4 0c             	add    esp,0xc
c001af7a:	c3                   	ret    
c001af7b:	90                   	nop

c001af7c <SATAPI::SATAPI()>:
c001af7c:	83 ec 0c             	sub    esp,0xc
c001af7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af83:	83 ec 04             	sub    esp,0x4
c001af86:	68 00 08 00 00       	push   0x800
c001af8b:	68 4c f7 01 c0       	push   0xc001f74c
c001af90:	50                   	push   eax
c001af91:	e8 50 0d ff ff       	call   c000bce6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001af96:	83 c4 10             	add    esp,0x10
c001af99:	ba 54 f8 01 c0       	mov    edx,0xc001f854
c001af9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afa2:	89 10                	mov    DWORD PTR [eax],edx
c001afa4:	90                   	nop
c001afa5:	83 c4 0c             	add    esp,0xc
c001afa8:	c3                   	ret    
c001afa9:	90                   	nop

c001afaa <SATAPI::diskRemoved()>:
c001afaa:	c3                   	ret    
c001afab:	90                   	nop

c001afac <SATAPI::diskInserted()>:
c001afac:	83 ec 18             	sub    esp,0x18
c001afaf:	68 58 f7 01 c0       	push   0xc001f758
c001afb4:	e8 1f f5 fe ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001afb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001afbd:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001afc4:	83 c4 1c             	add    esp,0x1c
c001afc7:	c3                   	ret    

c001afc8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001afc8:	55                   	push   ebp
c001afc9:	57                   	push   edi
c001afca:	56                   	push   esi
c001afcb:	53                   	push   ebx
c001afcc:	83 ec 38             	sub    esp,0x38
c001afcf:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001afd3:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001afd7:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001afdb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001afdf:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001afe3:	68 70 f7 01 c0       	push   0xc001f770
c001afe8:	e8 eb f4 fe ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001afed:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001aff3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001aff9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001affd:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001b003:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b007:	83 c0 02             	add    eax,0x2
c001b00a:	c1 e0 07             	shl    eax,0x7
c001b00d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001b011:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b015:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b019:	c1 e0 07             	shl    eax,0x7
c001b01c:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001b020:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b024:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001b02e:	58                   	pop    eax
c001b02f:	5a                   	pop    edx
c001b030:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b034:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b03a:	e8 71 ec ff ff       	call   c0019cb0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001b03f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b043:	83 c4 10             	add    esp,0x10
c001b046:	b8 01 00 00 00       	mov    eax,0x1
c001b04b:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001b050:	0f 84 49 02 00 00    	je     c001b29f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c001b056:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001b05c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b060:	8b 00                	mov    eax,DWORD PTR [eax]
c001b062:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001b068:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001b06e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b072:	c1 e1 05             	shl    ecx,0x5
c001b075:	01 c8                	add    eax,ecx
c001b077:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b079:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001b07f:	81 c9 25 00 01 00    	or     ecx,0x10025
c001b085:	89 08                	mov    DWORD PTR [eax],ecx
c001b087:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001b08d:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001b093:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001b099:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001b09c:	8d 7b 40             	lea    edi,[ebx+0x40]
c001b09f:	50                   	push   eax
c001b0a0:	68 90 00 00 00       	push   0x90
c001b0a5:	6a 00                	push   0x0
c001b0a7:	53                   	push   ebx
c001b0a8:	e8 23 54 fe ff       	call   c00004d0 <memset>
c001b0ad:	b9 0c 00 00 00       	mov    ecx,0xc
c001b0b2:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001b0b6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b0b8:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001b0be:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001b0c2:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001b0c8:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001b0cc:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001b0d0:	48                   	dec    eax
c001b0d1:	25 ff ff 3f 00       	and    eax,0x3fffff
c001b0d6:	89 c1                	mov    ecx,eax
c001b0d8:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001b0de:	25 00 00 c0 ff       	and    eax,0xffc00000
c001b0e3:	09 c8                	or     eax,ecx
c001b0e5:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001b0eb:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001b0ee:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001b0f5:	66 25 00 7f          	and    ax,0x7f00
c001b0f9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b0fd:	66 0d 27 80          	or     ax,0x8027
c001b101:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001b105:	66 89 03             	mov    WORD PTR [ebx],ax
c001b108:	89 d0                	mov    eax,edx
c001b10a:	c1 ea 18             	shr    edx,0x18
c001b10d:	c1 e8 10             	shr    eax,0x10
c001b110:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001b113:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001b116:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b11a:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001b11d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b121:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001b124:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b128:	83 c4 10             	add    esp,0x10
c001b12b:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001b12f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b133:	31 c0                	xor    eax,eax
c001b135:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001b13b:	80 e1 88             	and    cl,0x88
c001b13e:	74 0a                	je     c001b14a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x182>
c001b140:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b145:	74 0a                	je     c001b151 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x189>
c001b147:	40                   	inc    eax
c001b148:	eb eb                	jmp    c001b135 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16d>
c001b14a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b14f:	75 43                	jne    c001b194 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cc>
c001b151:	83 ec 0c             	sub    esp,0xc
c001b154:	68 8a f7 01 c0       	push   0xc001f78a
c001b159:	e8 7a f3 fe ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001b15e:	58                   	pop    eax
c001b15f:	5a                   	pop    edx
c001b160:	68 9f f7 01 c0       	push   0xc001f79f
c001b165:	ff 35 64 0d 02 c0    	push   DWORD PTR ds:0xc0020d64
c001b16b:	e8 c6 d5 fe ff       	call   c0008736 <VgaText::puts(char const*)>
c001b170:	59                   	pop    ecx
c001b171:	5b                   	pop    ebx
c001b172:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b176:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b17c:	e8 c9 eb ff ff       	call   c0019d4a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001b181:	5e                   	pop    esi
c001b182:	5f                   	pop    edi
c001b183:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b187:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b18d:	e8 98 eb ff ff       	call   c0019d2a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001b192:	eb 48                	jmp    c001b1dc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x214>
c001b194:	be 01 00 00 00       	mov    esi,0x1
c001b199:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b19d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b1a1:	d3 e6                	shl    esi,cl
c001b1a3:	c1 e7 07             	shl    edi,0x7
c001b1a6:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001b1ac:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001b1b1:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001b1b5:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001b1bb:	85 c6                	test   esi,eax
c001b1bd:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001b1c3:	0f 84 a3 00 00 00    	je     c001b26c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a4>
c001b1c9:	0f ba e0 1e          	bt     eax,0x1e
c001b1cd:	73 1a                	jae    c001b1e9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x221>
c001b1cf:	83 ec 0c             	sub    esp,0xc
c001b1d2:	68 b1 f7 01 c0       	push   0xc001f7b1
c001b1d7:	e8 fc f2 fe ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001b1dc:	83 c4 10             	add    esp,0x10
c001b1df:	b8 01 00 00 00       	mov    eax,0x1
c001b1e4:	e9 b6 00 00 00       	jmp    c001b29f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c001b1e9:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001b1ef:	83 f8 0d             	cmp    eax,0xd
c001b1f2:	77 0a                	ja     c001b1fe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x236>
c001b1f4:	83 ec 0c             	sub    esp,0xc
c001b1f7:	68 c8 00 00 00       	push   0xc8
c001b1fc:	eb 28                	jmp    c001b226 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25e>
c001b1fe:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001b204:	83 f8 0d             	cmp    eax,0xd
c001b207:	77 0a                	ja     c001b213 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24b>
c001b209:	83 ec 0c             	sub    esp,0xc
c001b20c:	68 58 02 00 00       	push   0x258
c001b211:	eb 13                	jmp    c001b226 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25e>
c001b213:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001b219:	83 f8 06             	cmp    eax,0x6
c001b21c:	77 10                	ja     c001b22e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c001b21e:	83 ec 0c             	sub    esp,0xc
c001b221:	68 dc 05 00 00       	push   0x5dc
c001b226:	e8 d1 89 ff ff       	call   c0013bfc <milliTenthSleep(unsigned int)>
c001b22b:	83 c4 10             	add    esp,0x10
c001b22e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001b232:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001b235:	75 06                	jne    c001b23d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x275>
c001b237:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001b23b:	74 15                	je     c001b252 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28a>
c001b23d:	83 fb 06             	cmp    ebx,0x6
c001b240:	77 10                	ja     c001b252 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28a>
c001b242:	83 ec 0c             	sub    esp,0xc
c001b245:	68 c4 09 00 00       	push   0x9c4
c001b24a:	e8 ad 89 ff ff       	call   c0013bfc <milliTenthSleep(unsigned int)>
c001b24f:	83 c4 10             	add    esp,0x10
c001b252:	43                   	inc    ebx
c001b253:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001b259:	0f 85 56 ff ff ff    	jne    c001b1b5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ed>
c001b25f:	83 ec 0c             	sub    esp,0xc
c001b262:	68 c4 f7 01 c0       	push   0xc001f7c4
c001b267:	e9 6b ff ff ff       	jmp    c001b1d7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20f>
c001b26c:	0f ba e0 1e          	bt     eax,0x1e
c001b270:	73 0d                	jae    c001b27f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b7>
c001b272:	83 ec 0c             	sub    esp,0xc
c001b275:	68 d8 f7 01 c0       	push   0xc001f7d8
c001b27a:	e9 58 ff ff ff       	jmp    c001b1d7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20f>
c001b27f:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001b284:	74 17                	je     c001b29d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001b286:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001b28b:	74 10                	je     c001b29d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001b28d:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001b293:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001b297:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001b29b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b29d:	31 c0                	xor    eax,eax
c001b29f:	83 c4 2c             	add    esp,0x2c
c001b2a2:	5b                   	pop    ebx
c001b2a3:	5e                   	pop    esi
c001b2a4:	5f                   	pop    edi
c001b2a5:	5d                   	pop    ebp
c001b2a6:	c3                   	ret    
c001b2a7:	90                   	nop

c001b2a8 <SATAPI::eject()>:
c001b2a8:	57                   	push   edi
c001b2a9:	b9 03 00 00 00       	mov    ecx,0x3
c001b2ae:	83 ec 18             	sub    esp,0x18
c001b2b1:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b2b5:	fc                   	cld    
c001b2b6:	31 c0                	xor    eax,eax
c001b2b8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b2ba:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001b2bf:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001b2c4:	50                   	push   eax
c001b2c5:	6a 00                	push   0x0
c001b2c7:	6a 00                	push   0x0
c001b2c9:	6a 00                	push   0x0
c001b2cb:	6a 00                	push   0x0
c001b2cd:	6a 02                	push   0x2
c001b2cf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b2d3:	50                   	push   eax
c001b2d4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b2d8:	e8 eb fc ff ff       	call   c001afc8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b2dd:	31 c0                	xor    eax,eax
c001b2df:	83 c4 38             	add    esp,0x38
c001b2e2:	5f                   	pop    edi
c001b2e3:	c3                   	ret    

c001b2e4 <SATAPI::detectMedia()>:
c001b2e4:	53                   	push   ebx
c001b2e5:	83 ec 14             	sub    esp,0x14
c001b2e8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b2ec:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001b2f2:	e8 bd 21 ff ff       	call   c000d4b4 <VCache::writeWriteBuffer()>
c001b2f7:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001b2fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b301:	83 c4 18             	add    esp,0x18
c001b304:	5b                   	pop    ebx
c001b305:	e9 9a 21 ff ff       	jmp    c000d4a4 <VCache::invalidateReadBuffer()>

c001b30a <SATAPI::open(int, int, void*)>:
c001b30a:	56                   	push   esi
c001b30b:	53                   	push   ebx
c001b30c:	51                   	push   ecx
c001b30d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b311:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b315:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001b31f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001b325:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001b32f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b333:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001b33d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001b343:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001b34a:	e8 46 c7 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001b34f:	89 c6                	mov    esi,eax
c001b351:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001b357:	81 c6 00 10 00 00    	add    esi,0x1000
c001b35d:	e8 33 c7 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001b362:	39 c6                	cmp    esi,eax
c001b364:	74 10                	je     c001b376 <SATAPI::open(int, int, void*)+0x6c>
c001b366:	83 ec 0c             	sub    esp,0xc
c001b369:	68 ed f7 01 c0       	push   0xc001f7ed
c001b36e:	e8 d0 4d ff ff       	call   c0010143 <KePanic(char const*)>
c001b373:	83 c4 10             	add    esp,0x10
c001b376:	83 ec 0c             	sub    esp,0xc
c001b379:	6a 02                	push   0x2
c001b37b:	e8 05 df fe ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c001b380:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001b386:	6a 03                	push   0x3
c001b388:	50                   	push   eax
c001b389:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001b38f:	ff 35 10 0e 02 c0    	push   DWORD PTR ds:0xc0020e10
c001b395:	e8 80 e5 fe ff       	call   c000991a <VAS::mapPage(unsigned long, unsigned long, int)>
c001b39a:	83 c4 14             	add    esp,0x14
c001b39d:	68 74 01 00 00       	push   0x174
c001b3a2:	e8 12 c4 fe ff       	call   c00077b9 <malloc>
c001b3a7:	83 c4 0c             	add    esp,0xc
c001b3aa:	89 c6                	mov    esi,eax
c001b3ac:	6a 00                	push   0x0
c001b3ae:	68 ff ff ff 7f       	push   0x7fffffff
c001b3b3:	6a 00                	push   0x0
c001b3b5:	6a 00                	push   0x0
c001b3b7:	53                   	push   ebx
c001b3b8:	68 03 f8 01 c0       	push   0xc001f803
c001b3bd:	50                   	push   eax
c001b3be:	e8 f7 15 ff ff       	call   c000c9ba <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001b3c3:	83 c4 14             	add    esp,0x14
c001b3c6:	56                   	push   esi
c001b3c7:	e8 a4 16 ff ff       	call   c000ca70 <LogicalDisk::assignDriveLetter()>
c001b3cc:	5a                   	pop    edx
c001b3cd:	0f be c0             	movsx  eax,al
c001b3d0:	59                   	pop    ecx
c001b3d1:	50                   	push   eax
c001b3d2:	68 50 f6 01 c0       	push   0xc001f650
c001b3d7:	e8 fc f0 fe ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001b3dc:	58                   	pop    eax
c001b3dd:	5a                   	pop    edx
c001b3de:	56                   	push   esi
c001b3df:	53                   	push   ebx
c001b3e0:	e8 33 05 ff ff       	call   c000b918 <Device::addChild(Device*)>
c001b3e5:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001b3eb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b3ee:	e8 5b 09 ff ff       	call   c000bd4e <PhysicalDisk::startCache()>
c001b3f3:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001b3fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b3fd:	e8 e2 fe ff ff       	call   c001b2e4 <SATAPI::detectMedia()>
c001b402:	83 c4 14             	add    esp,0x14
c001b405:	31 c0                	xor    eax,eax
c001b407:	5b                   	pop    ebx
c001b408:	5e                   	pop    esi
c001b409:	c3                   	ret    

c001b40a <SATAPI::read(unsigned long long, int, void*)>:
c001b40a:	57                   	push   edi
c001b40b:	56                   	push   esi
c001b40c:	53                   	push   ebx
c001b40d:	83 ec 3c             	sub    esp,0x3c
c001b410:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b414:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001b418:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001b41c:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001b420:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b424:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b428:	68 11 f8 01 c0       	push   0xc001f811
c001b42d:	e8 a6 f0 fe ff       	call   c000a4d8 <Dbg::kprintf(char const*, ...)>
c001b432:	83 c4 10             	add    esp,0x10
c001b435:	83 fe 04             	cmp    esi,0x4
c001b438:	7e 10                	jle    c001b44a <SATAPI::read(unsigned long long, int, void*)+0x40>
c001b43a:	83 ec 0c             	sub    esp,0xc
c001b43d:	68 22 f8 01 c0       	push   0xc001f822
c001b442:	e8 fc 4c ff ff       	call   c0010143 <KePanic(char const*)>
c001b447:	83 c4 10             	add    esp,0x10
c001b44a:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001b450:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001b456:	51                   	push   ecx
c001b457:	50                   	push   eax
c001b458:	83 c0 02             	add    eax,0x2
c001b45b:	c1 e0 07             	shl    eax,0x7
c001b45e:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001b464:	50                   	push   eax
c001b465:	52                   	push   edx
c001b466:	e8 09 e9 ff ff       	call   c0019d74 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b46b:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001b46f:	b9 03 00 00 00       	mov    ecx,0x3
c001b474:	fc                   	cld    
c001b475:	31 c0                	xor    eax,eax
c001b477:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b479:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001b47e:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001b483:	83 c4 0c             	add    esp,0xc
c001b486:	6a 00                	push   0x0
c001b488:	6a 00                	push   0x0
c001b48a:	6a 00                	push   0x0
c001b48c:	6a 00                	push   0x0
c001b48e:	6a 02                	push   0x2
c001b490:	8d 44 24 30          	lea    eax,[esp+0x30]
c001b494:	50                   	push   eax
c001b495:	53                   	push   ebx
c001b496:	e8 2d fb ff ff       	call   c001afc8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b49b:	83 c4 20             	add    esp,0x20
c001b49e:	85 c0                	test   eax,eax
c001b4a0:	75 44                	jne    c001b4e6 <SATAPI::read(unsigned long long, int, void*)+0xdc>
c001b4a2:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001b4a6:	b9 03 00 00 00       	mov    ecx,0x3
c001b4ab:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b4ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b4b1:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001b4b6:	0f c8                	bswap  eax
c001b4b8:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001b4bc:	89 f0                	mov    eax,esi
c001b4be:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b4c2:	50                   	push   eax
c001b4c3:	56                   	push   esi
c001b4c4:	c1 e6 0b             	shl    esi,0xb
c001b4c7:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b4cb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b4cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b4d3:	56                   	push   esi
c001b4d4:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001b4d8:	50                   	push   eax
c001b4d9:	53                   	push   ebx
c001b4da:	e8 e9 fa ff ff       	call   c001afc8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b4df:	83 c4 20             	add    esp,0x20
c001b4e2:	85 c0                	test   eax,eax
c001b4e4:	74 14                	je     c001b4fa <SATAPI::read(unsigned long long, int, void*)+0xf0>
c001b4e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b4ea:	83 ec 0c             	sub    esp,0xc
c001b4ed:	53                   	push   ebx
c001b4ee:	e8 f1 fd ff ff       	call   c001b2e4 <SATAPI::detectMedia()>
c001b4f3:	83 c4 10             	add    esp,0x10
c001b4f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b4fa:	83 c4 30             	add    esp,0x30
c001b4fd:	5b                   	pop    ebx
c001b4fe:	5e                   	pop    esi
c001b4ff:	5f                   	pop    edi
c001b500:	c3                   	ret    
c001b501:	90                   	nop

c001b502 <IOAPIC::close(int, int, void*)>:
c001b502:	b8 00 00 00 00       	mov    eax,0x0
c001b507:	c3                   	ret    

c001b508 <apicGetBase()>:
c001b508:	55                   	push   ebp
c001b509:	89 e5                	mov    ebp,esp
c001b50b:	83 ec 18             	sub    esp,0x18
c001b50e:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c001b513:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001b519:	83 e0 08             	and    eax,0x8
c001b51c:	84 c0                	test   al,al
c001b51e:	75 07                	jne    c001b527 <apicGetBase()+0x1f>
c001b520:	b8 00 00 00 00       	mov    eax,0x0
c001b525:	eb 21                	jmp    c001b548 <apicGetBase()+0x40>
c001b527:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c001b52c:	83 ec 08             	sub    esp,0x8
c001b52f:	6a 1b                	push   0x1b
c001b531:	50                   	push   eax
c001b532:	e8 bb b8 fe ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c001b537:	83 c4 10             	add    esp,0x10
c001b53a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b53d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001b540:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b543:	25 00 00 ff ff       	and    eax,0xffff0000
c001b548:	c9                   	leave  
c001b549:	c3                   	ret    

c001b54a <IOAPIC::IOAPIC()>:
c001b54a:	83 ec 0c             	sub    esp,0xc
c001b54d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b551:	83 ec 08             	sub    esp,0x8
c001b554:	68 84 f8 01 c0       	push   0xc001f884
c001b559:	50                   	push   eax
c001b55a:	e8 51 05 ff ff       	call   c000bab0 <Device::Device(char const*)>
c001b55f:	83 c4 10             	add    esp,0x10
c001b562:	ba 94 f8 01 c0       	mov    edx,0xc001f894
c001b567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b56b:	89 10                	mov    DWORD PTR [eax],edx
c001b56d:	90                   	nop
c001b56e:	83 c4 0c             	add    esp,0xc
c001b571:	c3                   	ret    

c001b572 <apicOpen()>:
c001b572:	55                   	push   ebp
c001b573:	89 e5                	mov    ebp,esp
c001b575:	53                   	push   ebx
c001b576:	83 ec 34             	sub    esp,0x34
c001b579:	a0 00 4a 02 c0       	mov    al,ds:0xc0024a00
c001b57e:	83 f0 01             	xor    eax,0x1
c001b581:	84 c0                	test   al,al
c001b583:	0f 84 9d 00 00 00    	je     c001b626 <apicOpen()+0xb4>
c001b589:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001b58d:	a0 e0 35 02 c0       	mov    al,ds:0xc00235e0
c001b592:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001b595:	0f 83 84 00 00 00    	jae    c001b61f <apicOpen()+0xad>
c001b59b:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001b5a2:	83 ec 0c             	sub    esp,0xc
c001b5a5:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001b5a8:	e8 0c c2 fe ff       	call   c00077b9 <malloc>
c001b5ad:	83 c4 10             	add    esp,0x10
c001b5b0:	89 c3                	mov    ebx,eax
c001b5b2:	83 ec 0c             	sub    esp,0xc
c001b5b5:	53                   	push   ebx
c001b5b6:	e8 8f ff ff ff       	call   c001b54a <IOAPIC::IOAPIC()>
c001b5bb:	83 c4 10             	add    esp,0x10
c001b5be:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001b5c1:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b5c4:	25 ff 00 00 00       	and    eax,0xff
c001b5c9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001b5cc:	89 14 85 e0 49 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb620],edx
c001b5d3:	a1 c0 49 02 c0       	mov    eax,ds:0xc00249c0
c001b5d8:	40                   	inc    eax
c001b5d9:	a3 c0 49 02 c0       	mov    ds:0xc00249c0,eax
c001b5de:	a1 18 0d 02 c0       	mov    eax,ds:0xc0020d18
c001b5e3:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001b5e9:	83 ec 08             	sub    esp,0x8
c001b5ec:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b5ef:	50                   	push   eax
c001b5f0:	e8 23 03 ff ff       	call   c000b918 <Device::addChild(Device*)>
c001b5f5:	83 c4 10             	add    esp,0x10
c001b5f8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b5fb:	8b 00                	mov    eax,DWORD PTR [eax]
c001b5fd:	83 c0 08             	add    eax,0x8
c001b600:	8b 10                	mov    edx,DWORD PTR [eax]
c001b602:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b605:	25 ff 00 00 00       	and    eax,0xff
c001b60a:	6a 00                	push   0x0
c001b60c:	6a 00                	push   0x0
c001b60e:	50                   	push   eax
c001b60f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b612:	ff d2                	call   edx
c001b614:	83 c4 10             	add    esp,0x10
c001b617:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001b61a:	e9 6e ff ff ff       	jmp    c001b58d <apicOpen()+0x1b>
c001b61f:	c6 05 00 4a 02 c0 01 	mov    BYTE PTR ds:0xc0024a00,0x1
c001b626:	e8 dd fe ff ff       	call   c001b508 <apicGetBase()>
c001b62b:	05 f0 00 00 00       	add    eax,0xf0
c001b630:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b633:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b636:	8b 00                	mov    eax,DWORD PTR [eax]
c001b638:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001b63b:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001b642:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001b649:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b64c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001b64f:	89 10                	mov    DWORD PTR [eax],edx
c001b651:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001b658:	a1 30 35 02 c0       	mov    eax,ds:0xc0023530
c001b65d:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001b660:	7d 70                	jge    c001b6d2 <apicOpen()+0x160>
c001b662:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b665:	8b 04 85 40 35 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcac0]
c001b66c:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001b66f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b672:	8b 04 85 40 35 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcac0]
c001b679:	c1 e8 08             	shr    eax,0x8
c001b67c:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001b680:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b683:	8b 04 85 40 35 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcac0]
c001b68a:	c1 e8 18             	shr    eax,0x18
c001b68d:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001b690:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001b694:	75 37                	jne    c001b6cd <apicOpen()+0x15b>
c001b696:	e8 6d fe ff ff       	call   c001b508 <apicGetBase()>
c001b69b:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001b69f:	75 07                	jne    c001b6a8 <apicOpen()+0x136>
c001b6a1:	ba 60 03 00 00       	mov    edx,0x360
c001b6a6:	eb 05                	jmp    c001b6ad <apicOpen()+0x13b>
c001b6a8:	ba 50 03 00 00       	mov    edx,0x350
c001b6ad:	01 d0                	add    eax,edx
c001b6af:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b6b2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b6b5:	8b 00                	mov    eax,DWORD PTR [eax]
c001b6b7:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001b6ba:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001b6c1:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001b6c5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b6c8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001b6cb:	89 10                	mov    DWORD PTR [eax],edx
c001b6cd:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001b6d0:	eb 86                	jmp    c001b658 <apicOpen()+0xe6>
c001b6d2:	90                   	nop
c001b6d3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b6d6:	c9                   	leave  
c001b6d7:	c3                   	ret    

c001b6d8 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001b6d8:	55                   	push   ebp
c001b6d9:	89 e5                	mov    ebp,esp
c001b6db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6de:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b6e4:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b6e7:	72 1d                	jb     c001b706 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b6e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6ec:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001b6f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6f5:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001b6fb:	01 d0                	add    eax,edx
c001b6fd:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b700:	73 04                	jae    c001b706 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b702:	b0 01                	mov    al,0x1
c001b704:	eb 02                	jmp    c001b708 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001b706:	b0 00                	mov    al,0x0
c001b708:	5d                   	pop    ebp
c001b709:	c3                   	ret    

c001b70a <IOAPIC::read(int)>:
c001b70a:	55                   	push   ebp
c001b70b:	89 e5                	mov    ebp,esp
c001b70d:	83 ec 10             	sub    esp,0x10
c001b710:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b713:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b719:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b71c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b71f:	31 d2                	xor    edx,edx
c001b721:	88 c2                	mov    dl,al
c001b723:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b726:	89 10                	mov    DWORD PTR [eax],edx
c001b728:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b72b:	83 c0 10             	add    eax,0x10
c001b72e:	8b 00                	mov    eax,DWORD PTR [eax]
c001b730:	c9                   	leave  
c001b731:	c3                   	ret    

c001b732 <IOAPIC::open(int, int, void*)>:
c001b732:	55                   	push   ebp
c001b733:	89 e5                	mov    ebp,esp
c001b735:	57                   	push   edi
c001b736:	56                   	push   esi
c001b737:	53                   	push   ebx
c001b738:	83 ec 04             	sub    esp,0x4
c001b73b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b73e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001b741:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b747:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b74a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b750:	8b 14 85 20 36 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc9e0]
c001b757:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b75a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b760:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b763:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b769:	8b 14 85 a0 36 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc960]
c001b770:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b773:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b779:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b77c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b782:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b785:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b78b:	89 c6                	mov    esi,eax
c001b78d:	81 e6 ff 00 00 00    	and    esi,0xff
c001b793:	89 d0                	mov    eax,edx
c001b795:	ba 00 00 00 00       	mov    edx,0x0
c001b79a:	89 c7                	mov    edi,eax
c001b79c:	83 e7 ff             	and    edi,0xffffffff
c001b79f:	89 f9                	mov    ecx,edi
c001b7a1:	89 d0                	mov    eax,edx
c001b7a3:	25 ff 00 00 00       	and    eax,0xff
c001b7a8:	89 c3                	mov    ebx,eax
c001b7aa:	89 c8                	mov    eax,ecx
c001b7ac:	89 da                	mov    edx,ebx
c001b7ae:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b7b1:	8d 5e 08             	lea    ebx,[esi+0x8]
c001b7b4:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001b7b8:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001b7bc:	83 e0 00             	and    eax,0x0
c001b7bf:	09 d0                	or     eax,edx
c001b7c1:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001b7c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b7c8:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b7ce:	8d 50 01             	lea    edx,[eax+0x1]
c001b7d1:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b7d4:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001b7da:	31 d2                	xor    edx,edx
c001b7dc:	88 c2                	mov    dl,al
c001b7de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b7e1:	83 c2 08             	add    edx,0x8
c001b7e4:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001b7e8:	81 e1 ff 00 00 00    	and    ecx,0xff
c001b7ee:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001b7f4:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001b7f8:	6a 01                	push   0x1
c001b7fa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b7fd:	e8 08 ff ff ff       	call   c001b70a <IOAPIC::read(int)>
c001b802:	83 c4 08             	add    esp,0x8
c001b805:	c1 f8 10             	sar    eax,0x10
c001b808:	25 ff 00 00 00       	and    eax,0xff
c001b80d:	8d 50 01             	lea    edx,[eax+0x1]
c001b810:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b813:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001b819:	b8 00 00 00 00       	mov    eax,0x0
c001b81e:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b821:	5b                   	pop    ebx
c001b822:	5e                   	pop    esi
c001b823:	5f                   	pop    edi
c001b824:	5d                   	pop    ebp
c001b825:	c3                   	ret    

c001b826 <IOAPIC::write(int, int)>:
c001b826:	55                   	push   ebp
c001b827:	89 e5                	mov    ebp,esp
c001b829:	83 ec 10             	sub    esp,0x10
c001b82c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b82f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b835:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b838:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b83b:	31 d2                	xor    edx,edx
c001b83d:	88 c2                	mov    dl,al
c001b83f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b842:	89 10                	mov    DWORD PTR [eax],edx
c001b844:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b847:	8d 50 10             	lea    edx,[eax+0x10]
c001b84a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b84d:	89 02                	mov    DWORD PTR [edx],eax
c001b84f:	90                   	nop
c001b850:	c9                   	leave  
c001b851:	c3                   	ret    

c001b852 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001b852:	55                   	push   ebp
c001b853:	89 e5                	mov    ebp,esp
c001b855:	53                   	push   ebx
c001b856:	83 ec 2c             	sub    esp,0x2c
c001b859:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b85c:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001b85f:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001b862:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001b865:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001b868:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b86b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b86e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001b871:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001b874:	88 d8                	mov    al,bl
c001b876:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001b879:	88 c8                	mov    al,cl
c001b87b:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001b87e:	88 d0                	mov    al,dl
c001b880:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001b883:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b886:	25 ff 00 00 00       	and    eax,0xff
c001b88b:	83 c0 08             	add    eax,0x8
c001b88e:	01 c0                	add    eax,eax
c001b890:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b893:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b896:	25 ff 00 00 00       	and    eax,0xff
c001b89b:	83 c0 08             	add    eax,0x8
c001b89e:	01 c0                	add    eax,eax
c001b8a0:	40                   	inc    eax
c001b8a1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001b8a4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b8a7:	50                   	push   eax
c001b8a8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b8ab:	e8 5a fe ff ff       	call   c001b70a <IOAPIC::read(int)>
c001b8b0:	83 c4 08             	add    esp,0x8
c001b8b3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b8b6:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001b8bd:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b8c0:	c1 e0 18             	shl    eax,0x18
c001b8c3:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001b8c6:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001b8c9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b8cc:	52                   	push   edx
c001b8cd:	50                   	push   eax
c001b8ce:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b8d1:	e8 50 ff ff ff       	call   c001b826 <IOAPIC::write(int, int)>
c001b8d6:	83 c4 0c             	add    esp,0xc
c001b8d9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b8dc:	50                   	push   eax
c001b8dd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b8e0:	e8 25 fe ff ff       	call   c001b70a <IOAPIC::read(int)>
c001b8e5:	83 c4 08             	add    esp,0x8
c001b8e8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001b8eb:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001b8f2:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001b8f9:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001b900:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001b904:	74 09                	je     c001b90f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001b906:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001b90d:	eb 07                	jmp    c001b916 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001b90f:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001b916:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001b91a:	74 09                	je     c001b925 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001b91c:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001b923:	eb 07                	jmp    c001b92c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001b925:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001b92c:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001b933:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001b936:	25 ff 00 00 00       	and    eax,0xff
c001b93b:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001b93e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001b941:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b944:	52                   	push   edx
c001b945:	50                   	push   eax
c001b946:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b949:	e8 d8 fe ff ff       	call   c001b826 <IOAPIC::write(int, int)>
c001b94e:	83 c4 0c             	add    esp,0xc
c001b951:	90                   	nop
c001b952:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b955:	c9                   	leave  
c001b956:	c3                   	ret    
c001b957:	90                   	nop

c001b958 <APICTimer::close(int, int, void*)>:
c001b958:	b8 00 00 00 00       	mov    eax,0x0
c001b95d:	c3                   	ret    
c001b95e:	66 90                	xchg   ax,ax

c001b960 <apicTimerHandler(regs*, void*)>:
c001b960:	83 ec 0c             	sub    esp,0xc
c001b963:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b967:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b969:	b8 10 27 00 00       	mov    eax,0x2710
c001b96e:	ba 00 00 00 00       	mov    edx,0x0
c001b973:	f7 f1                	div    ecx
c001b975:	83 ec 0c             	sub    esp,0xc
c001b978:	50                   	push   eax
c001b979:	e8 56 18 ff ff       	call   c000d1d4 <timerHandler(unsigned int)>
c001b97e:	83 c4 10             	add    esp,0x10
c001b981:	90                   	nop
c001b982:	83 c4 0c             	add    esp,0xc
c001b985:	c3                   	ret    
c001b986:	66 90                	xchg   ax,ax

c001b988 <APICTimer::open(int, int, void*)>:
c001b988:	83 ec 0c             	sub    esp,0xc
c001b98b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b98f:	8b 00                	mov    eax,DWORD PTR [eax]
c001b991:	83 c0 24             	add    eax,0x24
c001b994:	8b 00                	mov    eax,DWORD PTR [eax]
c001b996:	83 ec 08             	sub    esp,0x8
c001b999:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b99d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9a1:	ff d0                	call   eax
c001b9a3:	83 c4 10             	add    esp,0x10
c001b9a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9aa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b9ae:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b9b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b9bc:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001b9c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b9c6:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b9cc:	83 ec 0c             	sub    esp,0xc
c001b9cf:	51                   	push   ecx
c001b9d0:	6a 01                	push   0x1
c001b9d2:	68 60 b9 01 c0       	push   0xc001b960
c001b9d7:	52                   	push   edx
c001b9d8:	50                   	push   eax
c001b9d9:	e8 e6 fe fe ff       	call   c000b8c4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b9de:	83 c4 20             	add    esp,0x20
c001b9e1:	89 c2                	mov    edx,eax
c001b9e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9e7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b9ed:	b8 00 00 00 00       	mov    eax,0x0
c001b9f2:	83 c4 0c             	add    esp,0xc
c001b9f5:	c3                   	ret    
c001b9f6:	66 90                	xchg   ax,ax

c001b9f8 <APICTimer::write(int)>:
c001b9f8:	83 ec 0c             	sub    esp,0xc
c001b9fb:	83 ec 0c             	sub    esp,0xc
c001b9fe:	68 b8 f8 01 c0       	push   0xc001f8b8
c001ba03:	e8 3b 47 ff ff       	call   c0010143 <KePanic(char const*)>
c001ba08:	83 c4 10             	add    esp,0x10
c001ba0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba0f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ba13:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ba19:	90                   	nop
c001ba1a:	83 c4 0c             	add    esp,0xc
c001ba1d:	c3                   	ret    
c001ba1e:	66 90                	xchg   ax,ax

c001ba20 <APICTimer::APICTimer()>:
c001ba20:	83 ec 0c             	sub    esp,0xc
c001ba23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba27:	83 ec 08             	sub    esp,0x8
c001ba2a:	68 c8 f8 01 c0       	push   0xc001f8c8
c001ba2f:	50                   	push   eax
c001ba30:	e8 d3 16 ff ff       	call   c000d108 <Timer::Timer(char const*)>
c001ba35:	83 c4 10             	add    esp,0x10
c001ba38:	ba dc f8 01 c0       	mov    edx,0xc001f8dc
c001ba3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba41:	89 10                	mov    DWORD PTR [eax],edx
c001ba43:	90                   	nop
c001ba44:	83 c4 0c             	add    esp,0xc
c001ba47:	c3                   	ret    

c001ba48 <PIT::write(int)>:
c001ba48:	83 ec 10             	sub    esp,0x10
c001ba4b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ba4f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ba53:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ba59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba5d:	a3 04 4a 02 c0       	mov    ds:0xc0024a04,eax
c001ba62:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ba67:	99                   	cdq    
c001ba68:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001ba6c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ba70:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001ba77:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001ba7c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ba80:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ba85:	ee                   	out    dx,al
c001ba86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba8a:	25 ff 00 00 00       	and    eax,0xff
c001ba8f:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ba96:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ba9a:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ba9e:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001baa3:	ee                   	out    dx,al
c001baa4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001baa8:	c1 f8 08             	sar    eax,0x8
c001baab:	25 ff 00 00 00       	and    eax,0xff
c001bab0:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001bab7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001babb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001babf:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001bac4:	ee                   	out    dx,al
c001bac5:	90                   	nop
c001bac6:	83 c4 10             	add    esp,0x10
c001bac9:	c3                   	ret    
c001baca:	66 90                	xchg   ax,ax

c001bacc <pitHandler(regs*, void*)>:
c001bacc:	83 ec 0c             	sub    esp,0xc
c001bacf:	8b 0d 04 4a 02 c0    	mov    ecx,DWORD PTR ds:0xc0024a04
c001bad5:	b8 10 27 00 00       	mov    eax,0x2710
c001bada:	99                   	cdq    
c001badb:	f7 f9                	idiv   ecx
c001badd:	83 ec 0c             	sub    esp,0xc
c001bae0:	50                   	push   eax
c001bae1:	e8 ee 16 ff ff       	call   c000d1d4 <timerHandler(unsigned int)>
c001bae6:	83 c4 10             	add    esp,0x10
c001bae9:	90                   	nop
c001baea:	83 c4 0c             	add    esp,0xc
c001baed:	c3                   	ret    
c001baee:	66 90                	xchg   ax,ax

c001baf0 <PIT::open(int, int, void*)>:
c001baf0:	83 ec 0c             	sub    esp,0xc
c001baf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baf7:	8b 00                	mov    eax,DWORD PTR [eax]
c001baf9:	83 c0 24             	add    eax,0x24
c001bafc:	8b 00                	mov    eax,DWORD PTR [eax]
c001bafe:	83 ec 08             	sub    esp,0x8
c001bb01:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bb05:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bb09:	ff d0                	call   eax
c001bb0b:	83 c4 10             	add    esp,0x10
c001bb0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb12:	83 ec 0c             	sub    esp,0xc
c001bb15:	6a 00                	push   0x0
c001bb17:	6a 01                	push   0x1
c001bb19:	68 cc ba 01 c0       	push   0xc001bacc
c001bb1e:	6a 00                	push   0x0
c001bb20:	50                   	push   eax
c001bb21:	e8 9e fd fe ff       	call   c000b8c4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bb26:	83 c4 20             	add    esp,0x20
c001bb29:	89 c2                	mov    edx,eax
c001bb2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb2f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001bb35:	b8 00 00 00 00       	mov    eax,0x0
c001bb3a:	83 c4 0c             	add    esp,0xc
c001bb3d:	c3                   	ret    
c001bb3e:	66 90                	xchg   ax,ax

c001bb40 <PIT::close(int, int, void*)>:
c001bb40:	83 ec 0c             	sub    esp,0xc
c001bb43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb47:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001bb51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb55:	6a 01                	push   0x1
c001bb57:	68 cc ba 01 c0       	push   0xc001bacc
c001bb5c:	6a 00                	push   0x0
c001bb5e:	50                   	push   eax
c001bb5f:	e8 96 fd fe ff       	call   c000b8fa <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001bb64:	83 c4 10             	add    esp,0x10
c001bb67:	b8 00 00 00 00       	mov    eax,0x0
c001bb6c:	83 c4 0c             	add    esp,0xc
c001bb6f:	c3                   	ret    

c001bb70 <PIT::PIT()>:
c001bb70:	83 ec 0c             	sub    esp,0xc
c001bb73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb77:	83 ec 08             	sub    esp,0x8
c001bb7a:	68 04 f9 01 c0       	push   0xc001f904
c001bb7f:	50                   	push   eax
c001bb80:	e8 83 15 ff ff       	call   c000d108 <Timer::Timer(char const*)>
c001bb85:	83 c4 10             	add    esp,0x10
c001bb88:	ba 2c f9 01 c0       	mov    edx,0xc001f92c
c001bb8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb91:	89 10                	mov    DWORD PTR [eax],edx
c001bb93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb97:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bb9d:	31 d2                	xor    edx,edx
c001bb9f:	88 c2                	mov    dl,al
c001bba1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bba5:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001bbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbb0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bbb6:	31 d2                	xor    edx,edx
c001bbb8:	88 c2                	mov    dl,al
c001bbba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbbe:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001bbc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbc7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bbcd:	8d 50 01             	lea    edx,[eax+0x1]
c001bbd0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bbd4:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001bbda:	31 d2                	xor    edx,edx
c001bbdc:	88 c2                	mov    dl,al
c001bbde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbe2:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001bbe6:	83 e1 3f             	and    ecx,0x3f
c001bbe9:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001bbed:	90                   	nop
c001bbee:	83 c4 0c             	add    esp,0xc
c001bbf1:	c3                   	ret    
c001bbf2:	66 90                	xchg   ax,ax
c001bbf4:	66 90                	xchg   ax,ax
c001bbf6:	66 90                	xchg   ax,ax
c001bbf8:	66 90                	xchg   ax,ax
c001bbfa:	66 90                	xchg   ax,ax
c001bbfc:	66 90                	xchg   ax,ax
c001bbfe:	66 90                	xchg   ax,ax

c001bc00 <avxDetect>:
c001bc00:	b8 01 00 00 00       	mov    eax,0x1
c001bc05:	0f a2                	cpuid  
c001bc07:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001bc0d:	74 15                	je     c001bc24 <avxDetect.noAVX>
c001bc0f:	b8 01 00 00 00       	mov    eax,0x1
c001bc14:	0f a2                	cpuid  
c001bc16:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001bc1c:	74 06                	je     c001bc24 <avxDetect.noAVX>
c001bc1e:	b8 01 00 00 00       	mov    eax,0x1
c001bc23:	c3                   	ret    

c001bc24 <avxDetect.noAVX>:
c001bc24:	b8 00 00 00 00       	mov    eax,0x0
c001bc29:	c3                   	ret    

c001bc2a <avxSave>:
c001bc2a:	53                   	push   ebx
c001bc2b:	52                   	push   edx
c001bc2c:	31 c0                	xor    eax,eax
c001bc2e:	48                   	dec    eax
c001bc2f:	89 c2                	mov    edx,eax
c001bc31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bc35:	0f ae 23             	xsave  [ebx]
c001bc38:	5a                   	pop    edx
c001bc39:	5b                   	pop    ebx
c001bc3a:	c3                   	ret    

c001bc3b <avxLoad>:
c001bc3b:	53                   	push   ebx
c001bc3c:	52                   	push   edx
c001bc3d:	31 c0                	xor    eax,eax
c001bc3f:	48                   	dec    eax
c001bc40:	89 c2                	mov    edx,eax
c001bc42:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bc46:	0f ae 2b             	xrstor [ebx]
c001bc49:	5a                   	pop    edx
c001bc4a:	5b                   	pop    ebx
c001bc4b:	c3                   	ret    

c001bc4c <avxInit>:
c001bc4c:	e8 57 02 00 00       	call   c001bea8 <sseInit>
c001bc51:	50                   	push   eax
c001bc52:	51                   	push   ecx
c001bc53:	0f 20 e0             	mov    eax,cr4
c001bc56:	0d 00 00 04 00       	or     eax,0x40000
c001bc5b:	0f 22 e0             	mov    cr4,eax
c001bc5e:	31 c9                	xor    ecx,ecx
c001bc60:	0f 01 d0             	xgetbv 
c001bc63:	0d 07 00 00 00       	or     eax,0x7
c001bc68:	0f 01 d1             	xsetbv 
c001bc6b:	59                   	pop    ecx
c001bc6c:	58                   	pop    eax
c001bc6d:	c3                   	ret    

c001bc6e <avxClose>:
c001bc6e:	c3                   	ret    

c001bc6f <wouldSheSayYes>:
c001bc6f:	c3                   	ret    
c001bc70:	49                   	dec    ecx
c001bc71:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001bc75:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001bc79:	75 20                	jne    c001bc9b <isr0+0xb>
c001bc7b:	4e                   	dec    esi
c001bc7c:	79 61                	jns    c001bcdf <isr7+0x3>
c001bc7e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001bc83:	66 90                	xchg   ax,ax
c001bc85:	66 90                	xchg   ax,ax
c001bc87:	66 90                	xchg   ax,ax
c001bc89:	66 90                	xchg   ax,ax
c001bc8b:	66 90                	xchg   ax,ax
c001bc8d:	66 90                	xchg   ax,ax
c001bc8f:	90                   	nop

c001bc90 <isr0>:
c001bc90:	fa                   	cli    
c001bc91:	68 00 00 00 00       	push   0x0
c001bc96:	68 00 00 00 00       	push   0x0
c001bc9b:	e9 44 01 00 00       	jmp    c001bde4 <int_common_stub>

c001bca0 <isr1>:
c001bca0:	fa                   	cli    
c001bca1:	6a 00                	push   0x0
c001bca3:	6a 01                	push   0x1
c001bca5:	e9 3a 01 00 00       	jmp    c001bde4 <int_common_stub>

c001bcaa <isr2>:
c001bcaa:	fa                   	cli    
c001bcab:	6a 00                	push   0x0
c001bcad:	6a 02                	push   0x2
c001bcaf:	e9 30 01 00 00       	jmp    c001bde4 <int_common_stub>

c001bcb4 <isr3>:
c001bcb4:	fa                   	cli    
c001bcb5:	6a 00                	push   0x0
c001bcb7:	6a 03                	push   0x3
c001bcb9:	e9 26 01 00 00       	jmp    c001bde4 <int_common_stub>

c001bcbe <isr4>:
c001bcbe:	fa                   	cli    
c001bcbf:	6a 00                	push   0x0
c001bcc1:	6a 04                	push   0x4
c001bcc3:	e9 1c 01 00 00       	jmp    c001bde4 <int_common_stub>

c001bcc8 <isr5>:
c001bcc8:	fa                   	cli    
c001bcc9:	6a 00                	push   0x0
c001bccb:	6a 05                	push   0x5
c001bccd:	e9 12 01 00 00       	jmp    c001bde4 <int_common_stub>

c001bcd2 <isr6>:
c001bcd2:	fa                   	cli    
c001bcd3:	6a 00                	push   0x0
c001bcd5:	6a 06                	push   0x6
c001bcd7:	e9 08 01 00 00       	jmp    c001bde4 <int_common_stub>

c001bcdc <isr7>:
c001bcdc:	fa                   	cli    
c001bcdd:	6a 00                	push   0x0
c001bcdf:	6a 07                	push   0x7
c001bce1:	e9 fe 00 00 00       	jmp    c001bde4 <int_common_stub>

c001bce6 <isr8>:
c001bce6:	fa                   	cli    
c001bce7:	6a 08                	push   0x8
c001bce9:	e9 f6 00 00 00       	jmp    c001bde4 <int_common_stub>

c001bcee <isr9>:
c001bcee:	fa                   	cli    
c001bcef:	6a 00                	push   0x0
c001bcf1:	6a 09                	push   0x9
c001bcf3:	e9 ec 00 00 00       	jmp    c001bde4 <int_common_stub>

c001bcf8 <isr10>:
c001bcf8:	fa                   	cli    
c001bcf9:	6a 0a                	push   0xa
c001bcfb:	e9 e4 00 00 00       	jmp    c001bde4 <int_common_stub>

c001bd00 <isr11>:
c001bd00:	fa                   	cli    
c001bd01:	6a 0b                	push   0xb
c001bd03:	e9 dc 00 00 00       	jmp    c001bde4 <int_common_stub>

c001bd08 <isr12>:
c001bd08:	fa                   	cli    
c001bd09:	6a 0c                	push   0xc
c001bd0b:	e9 d4 00 00 00       	jmp    c001bde4 <int_common_stub>

c001bd10 <isr13>:
c001bd10:	fa                   	cli    
c001bd11:	6a 0d                	push   0xd
c001bd13:	e9 cc 00 00 00       	jmp    c001bde4 <int_common_stub>

c001bd18 <isr14>:
c001bd18:	fa                   	cli    
c001bd19:	6a 0e                	push   0xe
c001bd1b:	e9 c4 00 00 00       	jmp    c001bde4 <int_common_stub>

c001bd20 <isr15>:
c001bd20:	fa                   	cli    
c001bd21:	6a 00                	push   0x0
c001bd23:	6a 0f                	push   0xf
c001bd25:	e9 ba 00 00 00       	jmp    c001bde4 <int_common_stub>

c001bd2a <isr16>:
c001bd2a:	fa                   	cli    
c001bd2b:	6a 00                	push   0x0
c001bd2d:	6a 10                	push   0x10
c001bd2f:	e9 b0 00 00 00       	jmp    c001bde4 <int_common_stub>

c001bd34 <isr17>:
c001bd34:	fa                   	cli    
c001bd35:	6a 00                	push   0x0
c001bd37:	6a 11                	push   0x11
c001bd39:	e9 a6 00 00 00       	jmp    c001bde4 <int_common_stub>

c001bd3e <isr18>:
c001bd3e:	fa                   	cli    
c001bd3f:	6a 00                	push   0x0
c001bd41:	6a 12                	push   0x12
c001bd43:	e9 9c 00 00 00       	jmp    c001bde4 <int_common_stub>

c001bd48 <irq3>:
c001bd48:	fa                   	cli    
c001bd49:	6a 00                	push   0x0
c001bd4b:	6a 23                	push   0x23
c001bd4d:	e9 92 00 00 00       	jmp    c001bde4 <int_common_stub>

c001bd52 <irq4>:
c001bd52:	fa                   	cli    
c001bd53:	6a 00                	push   0x0
c001bd55:	6a 24                	push   0x24
c001bd57:	e9 88 00 00 00       	jmp    c001bde4 <int_common_stub>

c001bd5c <irq5>:
c001bd5c:	fa                   	cli    
c001bd5d:	6a 00                	push   0x0
c001bd5f:	6a 25                	push   0x25
c001bd61:	e9 7e 00 00 00       	jmp    c001bde4 <int_common_stub>

c001bd66 <irq6>:
c001bd66:	fa                   	cli    
c001bd67:	6a 00                	push   0x0
c001bd69:	6a 26                	push   0x26
c001bd6b:	e9 74 00 00 00       	jmp    c001bde4 <int_common_stub>

c001bd70 <irq7>:
c001bd70:	fa                   	cli    
c001bd71:	6a 00                	push   0x0
c001bd73:	6a 27                	push   0x27
c001bd75:	e9 6a 00 00 00       	jmp    c001bde4 <int_common_stub>

c001bd7a <irq8>:
c001bd7a:	fa                   	cli    
c001bd7b:	6a 00                	push   0x0
c001bd7d:	6a 28                	push   0x28
c001bd7f:	e9 60 00 00 00       	jmp    c001bde4 <int_common_stub>

c001bd84 <irq9>:
c001bd84:	fa                   	cli    
c001bd85:	6a 00                	push   0x0
c001bd87:	6a 29                	push   0x29
c001bd89:	e9 56 00 00 00       	jmp    c001bde4 <int_common_stub>

c001bd8e <irq10>:
c001bd8e:	fa                   	cli    
c001bd8f:	6a 00                	push   0x0
c001bd91:	6a 2a                	push   0x2a
c001bd93:	e9 4c 00 00 00       	jmp    c001bde4 <int_common_stub>

c001bd98 <irq11>:
c001bd98:	fa                   	cli    
c001bd99:	6a 00                	push   0x0
c001bd9b:	6a 2b                	push   0x2b
c001bd9d:	e9 42 00 00 00       	jmp    c001bde4 <int_common_stub>

c001bda2 <irq12>:
c001bda2:	fa                   	cli    
c001bda3:	6a 00                	push   0x0
c001bda5:	6a 2c                	push   0x2c
c001bda7:	e9 38 00 00 00       	jmp    c001bde4 <int_common_stub>

c001bdac <irq13>:
c001bdac:	fa                   	cli    
c001bdad:	6a 00                	push   0x0
c001bdaf:	6a 2d                	push   0x2d
c001bdb1:	e9 2e 00 00 00       	jmp    c001bde4 <int_common_stub>

c001bdb6 <irq14>:
c001bdb6:	fa                   	cli    
c001bdb7:	6a 00                	push   0x0
c001bdb9:	6a 2e                	push   0x2e
c001bdbb:	e9 24 00 00 00       	jmp    c001bde4 <int_common_stub>

c001bdc0 <irq15>:
c001bdc0:	fa                   	cli    
c001bdc1:	6a 00                	push   0x0
c001bdc3:	6a 2f                	push   0x2f
c001bdc5:	e9 1a 00 00 00       	jmp    c001bde4 <int_common_stub>

c001bdca <irq1>:
c001bdca:	fa                   	cli    
c001bdcb:	6a 00                	push   0x0
c001bdcd:	6a 21                	push   0x21
c001bdcf:	eb 13                	jmp    c001bde4 <int_common_stub>

c001bdd1 <irq2>:
c001bdd1:	fa                   	cli    
c001bdd2:	6a 00                	push   0x0
c001bdd4:	6a 22                	push   0x22
c001bdd6:	eb 0c                	jmp    c001bde4 <int_common_stub>

c001bdd8 <isr96>:
c001bdd8:	6a 00                	push   0x0
c001bdda:	6a 60                	push   0x60
c001bddc:	fb                   	sti    
c001bddd:	eb 05                	jmp    c001bde4 <int_common_stub>

c001bddf <irq0>:
c001bddf:	fa                   	cli    
c001bde0:	6a 00                	push   0x0
c001bde2:	6a 20                	push   0x20

c001bde4 <int_common_stub>:
c001bde4:	60                   	pusha  
c001bde5:	1e                   	push   ds
c001bde6:	06                   	push   es
c001bde7:	0f a0                	push   fs
c001bde9:	0f a8                	push   gs
c001bdeb:	66 b8 10 00          	mov    ax,0x10
c001bdef:	66 8e d8             	mov    ds,ax
c001bdf2:	66 8e c0             	mov    es,ax
c001bdf5:	66 8e e0             	mov    fs,ax
c001bdf8:	66 8e e8             	mov    gs,ax
c001bdfb:	54                   	push   esp
c001bdfc:	fc                   	cld    
c001bdfd:	e8 c2 ff fe ff       	call   c000bdc4 <int_handler>
c001be02:	81 c4 04 00 00 00    	add    esp,0x4
c001be08:	0f a9                	pop    gs
c001be0a:	0f a1                	pop    fs
c001be0c:	07                   	pop    es
c001be0d:	1f                   	pop    ds
c001be0e:	61                   	popa   
c001be0f:	81 c4 08 00 00 00    	add    esp,0x8
c001be15:	cf                   	iret   

c001be16 <irq16>:
c001be16:	fa                   	cli    
c001be17:	6a 00                	push   0x0
c001be19:	6a 30                	push   0x30
c001be1b:	e9 c4 ff ff ff       	jmp    c001bde4 <int_common_stub>

c001be20 <irq17>:
c001be20:	fa                   	cli    
c001be21:	6a 00                	push   0x0
c001be23:	6a 31                	push   0x31
c001be25:	e9 ba ff ff ff       	jmp    c001bde4 <int_common_stub>

c001be2a <irq18>:
c001be2a:	fa                   	cli    
c001be2b:	6a 00                	push   0x0
c001be2d:	6a 32                	push   0x32
c001be2f:	e9 b0 ff ff ff       	jmp    c001bde4 <int_common_stub>

c001be34 <irq19>:
c001be34:	fa                   	cli    
c001be35:	6a 00                	push   0x0
c001be37:	6a 33                	push   0x33
c001be39:	e9 a6 ff ff ff       	jmp    c001bde4 <int_common_stub>

c001be3e <irq20>:
c001be3e:	fa                   	cli    
c001be3f:	6a 00                	push   0x0
c001be41:	6a 34                	push   0x34
c001be43:	e9 9c ff ff ff       	jmp    c001bde4 <int_common_stub>

c001be48 <irq21>:
c001be48:	fa                   	cli    
c001be49:	6a 00                	push   0x0
c001be4b:	6a 35                	push   0x35
c001be4d:	e9 92 ff ff ff       	jmp    c001bde4 <int_common_stub>

c001be52 <irq22>:
c001be52:	fa                   	cli    
c001be53:	6a 00                	push   0x0
c001be55:	6a 36                	push   0x36
c001be57:	e9 88 ff ff ff       	jmp    c001bde4 <int_common_stub>

c001be5c <irq23>:
c001be5c:	fa                   	cli    
c001be5d:	6a 00                	push   0x0
c001be5f:	6a 37                	push   0x37
c001be61:	e9 7e ff ff ff       	jmp    c001bde4 <int_common_stub>
c001be66:	66 90                	xchg   ax,ax
c001be68:	66 90                	xchg   ax,ax
c001be6a:	66 90                	xchg   ax,ax
c001be6c:	66 90                	xchg   ax,ax
c001be6e:	66 90                	xchg   ax,ax

c001be70 <i386GetRDRAND>:
c001be70:	b9 64 00 00 00       	mov    ecx,0x64

c001be75 <retry>:
c001be75:	0f c7 f0             	rdrand eax
c001be78:	72 05                	jb     c001be7f <retry.done>
c001be7a:	e2 f9                	loop   c001be75 <retry>

c001be7c <retry.fail>:
c001be7c:	31 c0                	xor    eax,eax
c001be7e:	c3                   	ret    

c001be7f <retry.done>:
c001be7f:	c3                   	ret    

c001be80 <absolutelyNoChanceInHell>:
c001be80:	b8 01 00 00 00       	mov    eax,0x1
c001be85:	0f a2                	cpuid  
c001be87:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001be8d:	74 06                	je     c001be95 <sseDetect.noSSE>
c001be8f:	b8 01 00 00 00       	mov    eax,0x1
c001be94:	c3                   	ret    

c001be95 <sseDetect.noSSE>:
c001be95:	31 c0                	xor    eax,eax
c001be97:	c3                   	ret    

c001be98 <sseSave>:
c001be98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be9c:	0f ae 00             	fxsave [eax]
c001be9f:	c3                   	ret    

c001bea0 <sseLoad>:
c001bea0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bea4:	0f ae 08             	fxrstor [eax]
c001bea7:	c3                   	ret    

c001bea8 <sseInit>:
c001bea8:	e8 42 00 00 00       	call   c001beef <x87Init>
c001bead:	0f 20 e0             	mov    eax,cr4
c001beb0:	66 0d 00 06          	or     ax,0x600
c001beb4:	0f 22 e0             	mov    cr4,eax
c001beb7:	c3                   	ret    

c001beb8 <sseClose>:
c001beb8:	c3                   	ret    
c001beb9:	66 90                	xchg   ax,ax
c001bebb:	66 90                	xchg   ax,ax
c001bebd:	66 90                	xchg   ax,ax
c001bebf:	90                   	nop

c001bec0 <value_37F>:
c001bec0:	7f 03                	jg     c001bec5 <value_37A+0x1>

c001bec2 <value_37E>:
c001bec2:	7e 03                	jle    c001bec7 <x87Detect+0x1>

c001bec4 <value_37A>:
c001bec4:	7a 03                	jp     c001bec9 <x87Detect+0x3>

c001bec6 <x87Detect>:
c001bec6:	b8 01 00 00 00       	mov    eax,0x1
c001becb:	0f a2                	cpuid  
c001becd:	f7 c2 01 00 00 00    	test   edx,0x1
c001bed3:	74 06                	je     c001bedb <x87Detect.nox87>
c001bed5:	b8 01 00 00 00       	mov    eax,0x1
c001beda:	c3                   	ret    

c001bedb <x87Detect.nox87>:
c001bedb:	b8 00 00 00 00       	mov    eax,0x0
c001bee0:	c3                   	ret    

c001bee1 <x87Save>:
c001bee1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bee5:	dd 30                	fnsave [eax]
c001bee7:	c3                   	ret    

c001bee8 <x87Load>:
c001bee8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001beec:	dd 20                	frstor [eax]
c001beee:	c3                   	ret    

c001beef <x87Init>:
c001beef:	0f 20 c0             	mov    eax,cr0
c001bef2:	66 25 fb ff          	and    ax,0xfffb
c001bef6:	66 0d 22 00          	or     ax,0x22
c001befa:	0f 22 c0             	mov    cr0,eax
c001befd:	db e3                	fninit 
c001beff:	0f 06                	clts   
c001bf01:	d9 2d c4 be 01 c0    	fldcw  WORD PTR ds:0xc001bec4
c001bf07:	c3                   	ret    

c001bf08 <x87Close>:
c001bf08:	c3                   	ret    
c001bf09:	66 90                	xchg   ax,ax
c001bf0b:	90                   	nop

c001bf0c <__do_global_ctors_aux>:
c001bf0c:	a1 bc ce 01 c0       	mov    eax,ds:0xc001cebc
c001bf11:	83 f8 ff             	cmp    eax,0xffffffff
c001bf14:	74 1a                	je     c001bf30 <__do_global_ctors_aux+0x24>
c001bf16:	55                   	push   ebp
c001bf17:	89 e5                	mov    ebp,esp
c001bf19:	53                   	push   ebx
c001bf1a:	52                   	push   edx
c001bf1b:	bb bc ce 01 c0       	mov    ebx,0xc001cebc
c001bf20:	ff d0                	call   eax
c001bf22:	83 eb 04             	sub    ebx,0x4
c001bf25:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bf27:	83 f8 ff             	cmp    eax,0xffffffff
c001bf2a:	75 f4                	jne    c001bf20 <__do_global_ctors_aux+0x14>
c001bf2c:	58                   	pop    eax
c001bf2d:	5b                   	pop    ebx
c001bf2e:	5d                   	pop    ebp
c001bf2f:	c3                   	ret    
c001bf30:	c3                   	ret    
c001bf31:	66 90                	xchg   ax,ax
c001bf33:	90                   	nop

c001bf34 <__divdi3>:
c001bf34:	55                   	push   ebp
c001bf35:	57                   	push   edi
c001bf36:	56                   	push   esi
c001bf37:	53                   	push   ebx
c001bf38:	83 ec 1c             	sub    esp,0x1c
c001bf3b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001bf3f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bf43:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001bf46:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001bf4a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bf4e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bf52:	85 db                	test   ebx,ebx
c001bf54:	0f 88 8e 00 00 00    	js     c001bfe8 <__divdi3+0xb4>
c001bf5a:	89 dd                	mov    ebp,ebx
c001bf5c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001bf64:	89 d3                	mov    ebx,edx
c001bf66:	85 d2                	test   edx,edx
c001bf68:	79 0d                	jns    c001bf77 <__divdi3+0x43>
c001bf6a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001bf6e:	f7 d8                	neg    eax
c001bf70:	83 d2 00             	adc    edx,0x0
c001bf73:	f7 da                	neg    edx
c001bf75:	89 d3                	mov    ebx,edx
c001bf77:	89 c7                	mov    edi,eax
c001bf79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bf7c:	85 db                	test   ebx,ebx
c001bf7e:	75 48                	jne    c001bfc8 <__divdi3+0x94>
c001bf80:	39 ef                	cmp    edi,ebp
c001bf82:	76 24                	jbe    c001bfa8 <__divdi3+0x74>
c001bf84:	89 ea                	mov    edx,ebp
c001bf86:	f7 f7                	div    edi
c001bf88:	89 c1                	mov    ecx,eax
c001bf8a:	31 f6                	xor    esi,esi
c001bf8c:	89 c8                	mov    eax,ecx
c001bf8e:	89 f2                	mov    edx,esi
c001bf90:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bf94:	85 c9                	test   ecx,ecx
c001bf96:	74 07                	je     c001bf9f <__divdi3+0x6b>
c001bf98:	f7 d8                	neg    eax
c001bf9a:	83 d2 00             	adc    edx,0x0
c001bf9d:	f7 da                	neg    edx
c001bf9f:	83 c4 1c             	add    esp,0x1c
c001bfa2:	5b                   	pop    ebx
c001bfa3:	5e                   	pop    esi
c001bfa4:	5f                   	pop    edi
c001bfa5:	5d                   	pop    ebp
c001bfa6:	c3                   	ret    
c001bfa7:	90                   	nop
c001bfa8:	85 ff                	test   edi,edi
c001bfaa:	75 0b                	jne    c001bfb7 <__divdi3+0x83>
c001bfac:	b8 01 00 00 00       	mov    eax,0x1
c001bfb1:	31 d2                	xor    edx,edx
c001bfb3:	f7 f3                	div    ebx
c001bfb5:	89 c7                	mov    edi,eax
c001bfb7:	31 d2                	xor    edx,edx
c001bfb9:	89 e8                	mov    eax,ebp
c001bfbb:	f7 f7                	div    edi
c001bfbd:	89 c6                	mov    esi,eax
c001bfbf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bfc2:	f7 f7                	div    edi
c001bfc4:	89 c1                	mov    ecx,eax
c001bfc6:	eb c4                	jmp    c001bf8c <__divdi3+0x58>
c001bfc8:	39 eb                	cmp    ebx,ebp
c001bfca:	77 3c                	ja     c001c008 <__divdi3+0xd4>
c001bfcc:	0f bd f3             	bsr    esi,ebx
c001bfcf:	83 f6 1f             	xor    esi,0x1f
c001bfd2:	75 40                	jne    c001c014 <__divdi3+0xe0>
c001bfd4:	39 eb                	cmp    ebx,ebp
c001bfd6:	72 09                	jb     c001bfe1 <__divdi3+0xad>
c001bfd8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001bfdb:	0f 87 97 00 00 00    	ja     c001c078 <__divdi3+0x144>
c001bfe1:	b9 01 00 00 00       	mov    ecx,0x1
c001bfe6:	eb a4                	jmp    c001bf8c <__divdi3+0x58>
c001bfe8:	f7 d9                	neg    ecx
c001bfea:	83 d3 00             	adc    ebx,0x0
c001bfed:	f7 db                	neg    ebx
c001bfef:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001bff2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001bff6:	89 dd                	mov    ebp,ebx
c001bff8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001c000:	e9 5f ff ff ff       	jmp    c001bf64 <__divdi3+0x30>
c001c005:	8d 76 00             	lea    esi,[esi+0x0]
c001c008:	31 f6                	xor    esi,esi
c001c00a:	31 c9                	xor    ecx,ecx
c001c00c:	e9 7b ff ff ff       	jmp    c001bf8c <__divdi3+0x58>
c001c011:	8d 76 00             	lea    esi,[esi+0x0]
c001c014:	b8 20 00 00 00       	mov    eax,0x20
c001c019:	29 f0                	sub    eax,esi
c001c01b:	89 f1                	mov    ecx,esi
c001c01d:	d3 e3                	shl    ebx,cl
c001c01f:	89 fa                	mov    edx,edi
c001c021:	88 c1                	mov    cl,al
c001c023:	d3 ea                	shr    edx,cl
c001c025:	09 da                	or     edx,ebx
c001c027:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c02b:	89 f1                	mov    ecx,esi
c001c02d:	d3 e7                	shl    edi,cl
c001c02f:	89 eb                	mov    ebx,ebp
c001c031:	88 c1                	mov    cl,al
c001c033:	d3 eb                	shr    ebx,cl
c001c035:	89 f1                	mov    ecx,esi
c001c037:	d3 e5                	shl    ebp,cl
c001c039:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001c03c:	88 c1                	mov    cl,al
c001c03e:	d3 ea                	shr    edx,cl
c001c040:	09 d5                	or     ebp,edx
c001c042:	89 e8                	mov    eax,ebp
c001c044:	89 da                	mov    edx,ebx
c001c046:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001c04a:	89 d3                	mov    ebx,edx
c001c04c:	89 c5                	mov    ebp,eax
c001c04e:	f7 e7                	mul    edi
c001c050:	39 d3                	cmp    ebx,edx
c001c052:	72 18                	jb     c001c06c <__divdi3+0x138>
c001c054:	74 0a                	je     c001c060 <__divdi3+0x12c>
c001c056:	89 e9                	mov    ecx,ebp
c001c058:	31 f6                	xor    esi,esi
c001c05a:	e9 2d ff ff ff       	jmp    c001bf8c <__divdi3+0x58>
c001c05f:	90                   	nop
c001c060:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001c063:	89 f1                	mov    ecx,esi
c001c065:	d3 e7                	shl    edi,cl
c001c067:	39 c7                	cmp    edi,eax
c001c069:	73 eb                	jae    c001c056 <__divdi3+0x122>
c001c06b:	90                   	nop
c001c06c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001c06f:	31 f6                	xor    esi,esi
c001c071:	e9 16 ff ff ff       	jmp    c001bf8c <__divdi3+0x58>
c001c076:	66 90                	xchg   ax,ax
c001c078:	31 c9                	xor    ecx,ecx
c001c07a:	e9 0d ff ff ff       	jmp    c001bf8c <__divdi3+0x58>
c001c07f:	90                   	nop

c001c080 <__moddi3>:
c001c080:	55                   	push   ebp
c001c081:	57                   	push   edi
c001c082:	56                   	push   esi
c001c083:	53                   	push   ebx
c001c084:	83 ec 2c             	sub    esp,0x2c
c001c087:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c08b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001c08f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001c093:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001c097:	85 db                	test   ebx,ebx
c001c099:	0f 88 85 00 00 00    	js     c001c124 <__moddi3+0xa4>
c001c09f:	89 de                	mov    esi,ebx
c001c0a1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c0a9:	89 d7                	mov    edi,edx
c001c0ab:	85 d2                	test   edx,edx
c001c0ad:	79 09                	jns    c001c0b8 <__moddi3+0x38>
c001c0af:	f7 d8                	neg    eax
c001c0b1:	83 d2 00             	adc    edx,0x0
c001c0b4:	f7 da                	neg    edx
c001c0b6:	89 d7                	mov    edi,edx
c001c0b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c0bc:	89 cd                	mov    ebp,ecx
c001c0be:	85 ff                	test   edi,edi
c001c0c0:	75 52                	jne    c001c114 <__moddi3+0x94>
c001c0c2:	89 c3                	mov    ebx,eax
c001c0c4:	39 f0                	cmp    eax,esi
c001c0c6:	76 24                	jbe    c001c0ec <__moddi3+0x6c>
c001c0c8:	89 c8                	mov    eax,ecx
c001c0ca:	89 f2                	mov    edx,esi
c001c0cc:	f7 f3                	div    ebx
c001c0ce:	89 d6                	mov    esi,edx
c001c0d0:	89 f0                	mov    eax,esi
c001c0d2:	31 d2                	xor    edx,edx
c001c0d4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c0d8:	85 c9                	test   ecx,ecx
c001c0da:	74 07                	je     c001c0e3 <__moddi3+0x63>
c001c0dc:	f7 d8                	neg    eax
c001c0de:	83 d2 00             	adc    edx,0x0
c001c0e1:	f7 da                	neg    edx
c001c0e3:	83 c4 2c             	add    esp,0x2c
c001c0e6:	5b                   	pop    ebx
c001c0e7:	5e                   	pop    esi
c001c0e8:	5f                   	pop    edi
c001c0e9:	5d                   	pop    ebp
c001c0ea:	c3                   	ret    
c001c0eb:	90                   	nop
c001c0ec:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001c0f0:	85 db                	test   ebx,ebx
c001c0f2:	75 0d                	jne    c001c101 <__moddi3+0x81>
c001c0f4:	b8 01 00 00 00       	mov    eax,0x1
c001c0f9:	31 d2                	xor    edx,edx
c001c0fb:	f7 f7                	div    edi
c001c0fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c101:	89 f0                	mov    eax,esi
c001c103:	31 d2                	xor    edx,edx
c001c105:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c109:	f7 f7                	div    edi
c001c10b:	89 e8                	mov    eax,ebp
c001c10d:	f7 f7                	div    edi
c001c10f:	89 d6                	mov    esi,edx
c001c111:	eb bd                	jmp    c001c0d0 <__moddi3+0x50>
c001c113:	90                   	nop
c001c114:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c118:	39 f7                	cmp    edi,esi
c001c11a:	76 20                	jbe    c001c13c <__moddi3+0xbc>
c001c11c:	89 c8                	mov    eax,ecx
c001c11e:	89 f2                	mov    edx,esi
c001c120:	eb b2                	jmp    c001c0d4 <__moddi3+0x54>
c001c122:	66 90                	xchg   ax,ax
c001c124:	f7 d9                	neg    ecx
c001c126:	83 d3 00             	adc    ebx,0x0
c001c129:	f7 db                	neg    ebx
c001c12b:	89 de                	mov    esi,ebx
c001c12d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001c135:	e9 6f ff ff ff       	jmp    c001c0a9 <__moddi3+0x29>
c001c13a:	66 90                	xchg   ax,ax
c001c13c:	0f bd c7             	bsr    eax,edi
c001c13f:	83 f0 1f             	xor    eax,0x1f
c001c142:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c146:	75 24                	jne    c001c16c <__moddi3+0xec>
c001c148:	39 f7                	cmp    edi,esi
c001c14a:	72 06                	jb     c001c152 <__moddi3+0xd2>
c001c14c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001c150:	77 0c                	ja     c001c15e <__moddi3+0xde>
c001c152:	89 e9                	mov    ecx,ebp
c001c154:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001c158:	19 fe                	sbb    esi,edi
c001c15a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c15e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c162:	89 f2                	mov    edx,esi
c001c164:	e9 6b ff ff ff       	jmp    c001c0d4 <__moddi3+0x54>
c001c169:	8d 76 00             	lea    esi,[esi+0x0]
c001c16c:	b8 20 00 00 00       	mov    eax,0x20
c001c171:	89 c2                	mov    edx,eax
c001c173:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c177:	29 da                	sub    edx,ebx
c001c179:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c17d:	88 d9                	mov    cl,bl
c001c17f:	d3 e7                	shl    edi,cl
c001c181:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c185:	88 d1                	mov    cl,dl
c001c187:	d3 e8                	shr    eax,cl
c001c189:	09 c7                	or     edi,eax
c001c18b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001c18f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c193:	89 d8                	mov    eax,ebx
c001c195:	88 d9                	mov    cl,bl
c001c197:	d3 e7                	shl    edi,cl
c001c199:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c19d:	89 f3                	mov    ebx,esi
c001c19f:	88 d1                	mov    cl,dl
c001c1a1:	d3 eb                	shr    ebx,cl
c001c1a3:	89 c7                	mov    edi,eax
c001c1a5:	88 c1                	mov    cl,al
c001c1a7:	d3 e6                	shl    esi,cl
c001c1a9:	89 e8                	mov    eax,ebp
c001c1ab:	88 d1                	mov    cl,dl
c001c1ad:	d3 e8                	shr    eax,cl
c001c1af:	09 f0                	or     eax,esi
c001c1b1:	89 f9                	mov    ecx,edi
c001c1b3:	d3 e5                	shl    ebp,cl
c001c1b5:	89 da                	mov    edx,ebx
c001c1b7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001c1bb:	89 d3                	mov    ebx,edx
c001c1bd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c1c1:	89 c6                	mov    esi,eax
c001c1c3:	89 d1                	mov    ecx,edx
c001c1c5:	39 d3                	cmp    ebx,edx
c001c1c7:	72 27                	jb     c001c1f0 <__moddi3+0x170>
c001c1c9:	74 21                	je     c001c1ec <__moddi3+0x16c>
c001c1cb:	29 f5                	sub    ebp,esi
c001c1cd:	19 cb                	sbb    ebx,ecx
c001c1cf:	89 de                	mov    esi,ebx
c001c1d1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001c1d5:	d3 e6                	shl    esi,cl
c001c1d7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c1db:	89 f9                	mov    ecx,edi
c001c1dd:	d3 ed                	shr    ebp,cl
c001c1df:	09 ee                	or     esi,ebp
c001c1e1:	89 f0                	mov    eax,esi
c001c1e3:	d3 eb                	shr    ebx,cl
c001c1e5:	89 da                	mov    edx,ebx
c001c1e7:	e9 e8 fe ff ff       	jmp    c001c0d4 <__moddi3+0x54>
c001c1ec:	39 c5                	cmp    ebp,eax
c001c1ee:	73 db                	jae    c001c1cb <__moddi3+0x14b>
c001c1f0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c1f4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001c1f8:	89 d1                	mov    ecx,edx
c001c1fa:	89 c6                	mov    esi,eax
c001c1fc:	eb cd                	jmp    c001c1cb <__moddi3+0x14b>
c001c1fe:	66 90                	xchg   ax,ax

c001c200 <__udivdi3>:
c001c200:	55                   	push   ebp
c001c201:	57                   	push   edi
c001c202:	56                   	push   esi
c001c203:	53                   	push   ebx
c001c204:	83 ec 1c             	sub    esp,0x1c
c001c207:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c20b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c20f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c213:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c217:	85 d2                	test   edx,edx
c001c219:	75 41                	jne    c001c25c <__udivdi3+0x5c>
c001c21b:	39 f7                	cmp    edi,esi
c001c21d:	76 15                	jbe    c001c234 <__udivdi3+0x34>
c001c21f:	89 e8                	mov    eax,ebp
c001c221:	89 f2                	mov    edx,esi
c001c223:	f7 f7                	div    edi
c001c225:	31 db                	xor    ebx,ebx
c001c227:	89 da                	mov    edx,ebx
c001c229:	83 c4 1c             	add    esp,0x1c
c001c22c:	5b                   	pop    ebx
c001c22d:	5e                   	pop    esi
c001c22e:	5f                   	pop    edi
c001c22f:	5d                   	pop    ebp
c001c230:	c3                   	ret    
c001c231:	8d 76 00             	lea    esi,[esi+0x0]
c001c234:	89 f9                	mov    ecx,edi
c001c236:	85 ff                	test   edi,edi
c001c238:	75 0b                	jne    c001c245 <__udivdi3+0x45>
c001c23a:	b8 01 00 00 00       	mov    eax,0x1
c001c23f:	31 d2                	xor    edx,edx
c001c241:	f7 f7                	div    edi
c001c243:	89 c1                	mov    ecx,eax
c001c245:	31 d2                	xor    edx,edx
c001c247:	89 f0                	mov    eax,esi
c001c249:	f7 f1                	div    ecx
c001c24b:	89 c3                	mov    ebx,eax
c001c24d:	89 e8                	mov    eax,ebp
c001c24f:	f7 f1                	div    ecx
c001c251:	89 da                	mov    edx,ebx
c001c253:	83 c4 1c             	add    esp,0x1c
c001c256:	5b                   	pop    ebx
c001c257:	5e                   	pop    esi
c001c258:	5f                   	pop    edi
c001c259:	5d                   	pop    ebp
c001c25a:	c3                   	ret    
c001c25b:	90                   	nop
c001c25c:	39 f2                	cmp    edx,esi
c001c25e:	77 1c                	ja     c001c27c <__udivdi3+0x7c>
c001c260:	0f bd da             	bsr    ebx,edx
c001c263:	83 f3 1f             	xor    ebx,0x1f
c001c266:	75 24                	jne    c001c28c <__udivdi3+0x8c>
c001c268:	39 f2                	cmp    edx,esi
c001c26a:	72 08                	jb     c001c274 <__udivdi3+0x74>
c001c26c:	39 ef                	cmp    edi,ebp
c001c26e:	0f 87 84 00 00 00    	ja     c001c2f8 <__udivdi3+0xf8>
c001c274:	b8 01 00 00 00       	mov    eax,0x1
c001c279:	eb ac                	jmp    c001c227 <__udivdi3+0x27>
c001c27b:	90                   	nop
c001c27c:	31 db                	xor    ebx,ebx
c001c27e:	31 c0                	xor    eax,eax
c001c280:	89 da                	mov    edx,ebx
c001c282:	83 c4 1c             	add    esp,0x1c
c001c285:	5b                   	pop    ebx
c001c286:	5e                   	pop    esi
c001c287:	5f                   	pop    edi
c001c288:	5d                   	pop    ebp
c001c289:	c3                   	ret    
c001c28a:	66 90                	xchg   ax,ax
c001c28c:	b8 20 00 00 00       	mov    eax,0x20
c001c291:	29 d8                	sub    eax,ebx
c001c293:	88 d9                	mov    cl,bl
c001c295:	d3 e2                	shl    edx,cl
c001c297:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c29b:	89 fa                	mov    edx,edi
c001c29d:	88 c1                	mov    cl,al
c001c29f:	d3 ea                	shr    edx,cl
c001c2a1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c2a5:	09 d1                	or     ecx,edx
c001c2a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c2ab:	88 d9                	mov    cl,bl
c001c2ad:	d3 e7                	shl    edi,cl
c001c2af:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c2b3:	89 f7                	mov    edi,esi
c001c2b5:	88 c1                	mov    cl,al
c001c2b7:	d3 ef                	shr    edi,cl
c001c2b9:	88 d9                	mov    cl,bl
c001c2bb:	d3 e6                	shl    esi,cl
c001c2bd:	89 ea                	mov    edx,ebp
c001c2bf:	88 c1                	mov    cl,al
c001c2c1:	d3 ea                	shr    edx,cl
c001c2c3:	09 d6                	or     esi,edx
c001c2c5:	89 f0                	mov    eax,esi
c001c2c7:	89 fa                	mov    edx,edi
c001c2c9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c2cd:	89 d7                	mov    edi,edx
c001c2cf:	89 c6                	mov    esi,eax
c001c2d1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c2d5:	39 d7                	cmp    edi,edx
c001c2d7:	72 13                	jb     c001c2ec <__udivdi3+0xec>
c001c2d9:	74 09                	je     c001c2e4 <__udivdi3+0xe4>
c001c2db:	89 f0                	mov    eax,esi
c001c2dd:	31 db                	xor    ebx,ebx
c001c2df:	e9 43 ff ff ff       	jmp    c001c227 <__udivdi3+0x27>
c001c2e4:	88 d9                	mov    cl,bl
c001c2e6:	d3 e5                	shl    ebp,cl
c001c2e8:	39 c5                	cmp    ebp,eax
c001c2ea:	73 ef                	jae    c001c2db <__udivdi3+0xdb>
c001c2ec:	8d 46 ff             	lea    eax,[esi-0x1]
c001c2ef:	31 db                	xor    ebx,ebx
c001c2f1:	e9 31 ff ff ff       	jmp    c001c227 <__udivdi3+0x27>
c001c2f6:	66 90                	xchg   ax,ax
c001c2f8:	31 c0                	xor    eax,eax
c001c2fa:	e9 28 ff ff ff       	jmp    c001c227 <__udivdi3+0x27>
c001c2ff:	90                   	nop

c001c300 <__umoddi3>:
c001c300:	55                   	push   ebp
c001c301:	57                   	push   edi
c001c302:	56                   	push   esi
c001c303:	53                   	push   ebx
c001c304:	83 ec 1c             	sub    esp,0x1c
c001c307:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c30b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c30f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c313:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c317:	89 da                	mov    edx,ebx
c001c319:	85 c0                	test   eax,eax
c001c31b:	75 37                	jne    c001c354 <__umoddi3+0x54>
c001c31d:	39 df                	cmp    edi,ebx
c001c31f:	76 13                	jbe    c001c334 <__umoddi3+0x34>
c001c321:	89 f0                	mov    eax,esi
c001c323:	f7 f7                	div    edi
c001c325:	89 d0                	mov    eax,edx
c001c327:	31 d2                	xor    edx,edx
c001c329:	83 c4 1c             	add    esp,0x1c
c001c32c:	5b                   	pop    ebx
c001c32d:	5e                   	pop    esi
c001c32e:	5f                   	pop    edi
c001c32f:	5d                   	pop    ebp
c001c330:	c3                   	ret    
c001c331:	8d 76 00             	lea    esi,[esi+0x0]
c001c334:	89 fd                	mov    ebp,edi
c001c336:	85 ff                	test   edi,edi
c001c338:	75 0b                	jne    c001c345 <__umoddi3+0x45>
c001c33a:	b8 01 00 00 00       	mov    eax,0x1
c001c33f:	31 d2                	xor    edx,edx
c001c341:	f7 f7                	div    edi
c001c343:	89 c5                	mov    ebp,eax
c001c345:	89 d8                	mov    eax,ebx
c001c347:	31 d2                	xor    edx,edx
c001c349:	f7 f5                	div    ebp
c001c34b:	89 f0                	mov    eax,esi
c001c34d:	f7 f5                	div    ebp
c001c34f:	89 d0                	mov    eax,edx
c001c351:	eb d4                	jmp    c001c327 <__umoddi3+0x27>
c001c353:	90                   	nop
c001c354:	89 f1                	mov    ecx,esi
c001c356:	39 d8                	cmp    eax,ebx
c001c358:	76 0a                	jbe    c001c364 <__umoddi3+0x64>
c001c35a:	89 f0                	mov    eax,esi
c001c35c:	83 c4 1c             	add    esp,0x1c
c001c35f:	5b                   	pop    ebx
c001c360:	5e                   	pop    esi
c001c361:	5f                   	pop    edi
c001c362:	5d                   	pop    ebp
c001c363:	c3                   	ret    
c001c364:	0f bd e8             	bsr    ebp,eax
c001c367:	83 f5 1f             	xor    ebp,0x1f
c001c36a:	75 1c                	jne    c001c388 <__umoddi3+0x88>
c001c36c:	39 d8                	cmp    eax,ebx
c001c36e:	72 04                	jb     c001c374 <__umoddi3+0x74>
c001c370:	39 f7                	cmp    edi,esi
c001c372:	77 08                	ja     c001c37c <__umoddi3+0x7c>
c001c374:	89 da                	mov    edx,ebx
c001c376:	29 fe                	sub    esi,edi
c001c378:	19 c2                	sbb    edx,eax
c001c37a:	89 f1                	mov    ecx,esi
c001c37c:	89 c8                	mov    eax,ecx
c001c37e:	83 c4 1c             	add    esp,0x1c
c001c381:	5b                   	pop    ebx
c001c382:	5e                   	pop    esi
c001c383:	5f                   	pop    edi
c001c384:	5d                   	pop    ebp
c001c385:	c3                   	ret    
c001c386:	66 90                	xchg   ax,ax
c001c388:	ba 20 00 00 00       	mov    edx,0x20
c001c38d:	29 ea                	sub    edx,ebp
c001c38f:	89 e9                	mov    ecx,ebp
c001c391:	d3 e0                	shl    eax,cl
c001c393:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c397:	89 f8                	mov    eax,edi
c001c399:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c39d:	88 d1                	mov    cl,dl
c001c39f:	d3 e8                	shr    eax,cl
c001c3a1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c3a5:	09 c1                	or     ecx,eax
c001c3a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c3ab:	89 e9                	mov    ecx,ebp
c001c3ad:	d3 e7                	shl    edi,cl
c001c3af:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c3b3:	89 d8                	mov    eax,ebx
c001c3b5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c3b9:	88 d1                	mov    cl,dl
c001c3bb:	d3 e8                	shr    eax,cl
c001c3bd:	89 c7                	mov    edi,eax
c001c3bf:	89 e9                	mov    ecx,ebp
c001c3c1:	d3 e3                	shl    ebx,cl
c001c3c3:	89 f0                	mov    eax,esi
c001c3c5:	88 d1                	mov    cl,dl
c001c3c7:	d3 e8                	shr    eax,cl
c001c3c9:	09 d8                	or     eax,ebx
c001c3cb:	89 e9                	mov    ecx,ebp
c001c3cd:	d3 e6                	shl    esi,cl
c001c3cf:	89 f3                	mov    ebx,esi
c001c3d1:	89 fa                	mov    edx,edi
c001c3d3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c3d7:	89 d1                	mov    ecx,edx
c001c3d9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c3dd:	89 c6                	mov    esi,eax
c001c3df:	89 d7                	mov    edi,edx
c001c3e1:	39 d1                	cmp    ecx,edx
c001c3e3:	72 27                	jb     c001c40c <__umoddi3+0x10c>
c001c3e5:	74 21                	je     c001c408 <__umoddi3+0x108>
c001c3e7:	89 ca                	mov    edx,ecx
c001c3e9:	29 f3                	sub    ebx,esi
c001c3eb:	19 fa                	sbb    edx,edi
c001c3ed:	89 d0                	mov    eax,edx
c001c3ef:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001c3f3:	d3 e0                	shl    eax,cl
c001c3f5:	89 e9                	mov    ecx,ebp
c001c3f7:	d3 eb                	shr    ebx,cl
c001c3f9:	09 d8                	or     eax,ebx
c001c3fb:	d3 ea                	shr    edx,cl
c001c3fd:	83 c4 1c             	add    esp,0x1c
c001c400:	5b                   	pop    ebx
c001c401:	5e                   	pop    esi
c001c402:	5f                   	pop    edi
c001c403:	5d                   	pop    ebp
c001c404:	c3                   	ret    
c001c405:	8d 76 00             	lea    esi,[esi+0x0]
c001c408:	39 c3                	cmp    ebx,eax
c001c40a:	73 db                	jae    c001c3e7 <__umoddi3+0xe7>
c001c40c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c410:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001c414:	89 d7                	mov    edi,edx
c001c416:	89 c6                	mov    esi,eax
c001c418:	eb cd                	jmp    c001c3e7 <__umoddi3+0xe7>

Disassembly of section .init:

c001c41a <_init>:
c001c41a:	55                   	push   ebp
c001c41b:	89 e5                	mov    ebp,esp
c001c41d:	e8 d2 3c fe ff       	call   c00000f4 <frame_dummy>
c001c422:	e8 e5 fa ff ff       	call   c001bf0c <__do_global_ctors_aux>
c001c427:	5d                   	pop    ebp
c001c428:	c3                   	ret    

Disassembly of section .fini:

c001c429 <_fini>:
c001c429:	55                   	push   ebp
c001c42a:	89 e5                	mov    ebp,esp
c001c42c:	e8 53 3c fe ff       	call   c0000084 <__do_global_dtors_aux>
c001c431:	5d                   	pop    ebp
c001c432:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001c434 <Computer::~Computer()>:
c001c434:	83 ec 0c             	sub    esp,0xc
c001c437:	ba f8 d6 01 c0       	mov    edx,0xc001d6f8
c001c43c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c440:	89 10                	mov    DWORD PTR [eax],edx
c001c442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c446:	83 ec 0c             	sub    esp,0xc
c001c449:	50                   	push   eax
c001c44a:	e8 cb f3 fe ff       	call   c000b81a <Device::~Device()>
c001c44f:	83 c4 10             	add    esp,0x10
c001c452:	90                   	nop
c001c453:	83 c4 0c             	add    esp,0xc
c001c456:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001c458 <Computer::~Computer()>:
c001c458:	83 ec 0c             	sub    esp,0xc
c001c45b:	83 ec 0c             	sub    esp,0xc
c001c45e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c462:	e8 cd ff ff ff       	call   c001c434 <Computer::~Computer()>
c001c467:	83 c4 10             	add    esp,0x10
c001c46a:	83 ec 08             	sub    esp,0x8
c001c46d:	68 70 01 00 00       	push   0x170
c001c472:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c476:	e8 67 df fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001c47b:	83 c4 10             	add    esp,0x10
c001c47e:	83 c4 0c             	add    esp,0xc
c001c481:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001c482 <idleCommon()>:
c001c482:	83 ec 0c             	sub    esp,0xc
c001c485:	fa                   	cli    
c001c486:	ff 05 c8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fc8
c001c48c:	e8 6b 74 ff ff       	call   c00138fc <schedule()>
c001c491:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c001c496:	48                   	dec    eax
c001c497:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c001c49c:	75 01                	jne    c001c49f <idleCommon()+0x1d>
c001c49e:	fb                   	sti    
c001c49f:	83 c4 0c             	add    esp,0xc
c001c4a2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001c4a4 <LinkedList<UnixFile>::~LinkedList()>:
c001c4a4:	90                   	nop
c001c4a5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001c4a6 <LinkedList<UnixFile>::LinkedList()>:
c001c4a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4aa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c4b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4b4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c4bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4bf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c4c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4ca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c4d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4d4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c4db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4df:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c4e6:	90                   	nop
c001c4e7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001c4e8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001c4e8:	83 ec 0c             	sub    esp,0xc
c001c4eb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c4f0:	75 10                	jne    c001c502 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001c4f2:	83 ec 0c             	sub    esp,0xc
c001c4f5:	68 58 d9 01 c0       	push   0xc001d958
c001c4fa:	e8 44 3c ff ff       	call   c0010143 <KePanic(char const*)>
c001c4ff:	83 c4 10             	add    esp,0x10
c001c502:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c506:	8b 00                	mov    eax,DWORD PTR [eax]
c001c508:	85 c0                	test   eax,eax
c001c50a:	74 34                	je     c001c540 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c50c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c510:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c513:	85 c0                	test   eax,eax
c001c515:	74 29                	je     c001c540 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c517:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c51b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c51e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c522:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c525:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c529:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c52d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c530:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c534:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c537:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c53e:	eb 65                	jmp    c001c5a5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c544:	8b 00                	mov    eax,DWORD PTR [eax]
c001c546:	85 c0                	test   eax,eax
c001c548:	75 4b                	jne    c001c595 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c54a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c54e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c551:	85 c0                	test   eax,eax
c001c553:	75 40                	jne    c001c595 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c555:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c559:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c55d:	89 10                	mov    DWORD PTR [eax],edx
c001c55f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c563:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c567:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c56a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c56e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c571:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c57c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c57f:	85 c0                	test   eax,eax
c001c581:	74 22                	je     c001c5a5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c583:	83 ec 0c             	sub    esp,0xc
c001c586:	68 7a d9 01 c0       	push   0xc001d97a
c001c58b:	e8 b3 3b ff ff       	call   c0010143 <KePanic(char const*)>
c001c590:	83 c4 10             	add    esp,0x10
c001c593:	eb 10                	jmp    c001c5a5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c595:	83 ec 0c             	sub    esp,0xc
c001c598:	68 84 d9 01 c0       	push   0xc001d984
c001c59d:	e8 a1 3b ff ff       	call   c0010143 <KePanic(char const*)>
c001c5a2:	83 c4 10             	add    esp,0x10
c001c5a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5a9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c5ac:	8d 50 01             	lea    edx,[eax+0x1]
c001c5af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5b3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c5b6:	90                   	nop
c001c5b7:	83 c4 0c             	add    esp,0xc
c001c5ba:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001c5bc <LinkedList<UnixFile>::getFirstElement()>:
c001c5bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5c0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c5c2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001c5c4 <LinkedList<UnixFile>::removeFirst()>:
c001c5c4:	83 ec 0c             	sub    esp,0xc
c001c5c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5cb:	8b 00                	mov    eax,DWORD PTR [eax]
c001c5cd:	85 c0                	test   eax,eax
c001c5cf:	75 12                	jne    c001c5e3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001c5d1:	83 ec 0c             	sub    esp,0xc
c001c5d4:	68 90 d9 01 c0       	push   0xc001d990
c001c5d9:	e8 65 3b ff ff       	call   c0010143 <KePanic(char const*)>
c001c5de:	83 c4 10             	add    esp,0x10
c001c5e1:	eb 7e                	jmp    c001c661 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001c5e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5e7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c5ea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c5ed:	85 c0                	test   eax,eax
c001c5ef:	74 10                	je     c001c601 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001c5f1:	83 ec 0c             	sub    esp,0xc
c001c5f4:	68 db d9 01 c0       	push   0xc001d9db
c001c5f9:	e8 45 3b ff ff       	call   c0010143 <KePanic(char const*)>
c001c5fe:	83 c4 10             	add    esp,0x10
c001c601:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c605:	8b 00                	mov    eax,DWORD PTR [eax]
c001c607:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c60a:	85 c0                	test   eax,eax
c001c60c:	75 33                	jne    c001c641 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001c60e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c612:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c61c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c627:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c62a:	83 f8 01             	cmp    eax,0x1
c001c62d:	74 21                	je     c001c650 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c62f:	83 ec 0c             	sub    esp,0xc
c001c632:	68 b4 d9 01 c0       	push   0xc001d9b4
c001c637:	e8 07 3b ff ff       	call   c0010143 <KePanic(char const*)>
c001c63c:	83 c4 10             	add    esp,0x10
c001c63f:	eb 0f                	jmp    c001c650 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c641:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c645:	8b 00                	mov    eax,DWORD PTR [eax]
c001c647:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001c64a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c64e:	89 10                	mov    DWORD PTR [eax],edx
c001c650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c654:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c657:	8d 50 ff             	lea    edx,[eax-0x1]
c001c65a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c65e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c661:	83 c4 0c             	add    esp,0xc
c001c664:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001c666 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001c666:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c66a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c66d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001c66e <DriverlessDevice::~DriverlessDevice()>:
c001c66e:	ba 1c e0 01 c0       	mov    edx,0xc001e01c
c001c673:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c677:	89 10                	mov    DWORD PTR [eax],edx
c001c679:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c67d:	50                   	push   eax
c001c67e:	e8 97 f1 fe ff       	call   c000b81a <Device::~Device()>
c001c683:	83 c4 04             	add    esp,0x4
c001c686:	90                   	nop
c001c687:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001c688 <DriverlessDevice::~DriverlessDevice()>:
c001c688:	83 ec 0c             	sub    esp,0xc
c001c68b:	83 ec 0c             	sub    esp,0xc
c001c68e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c692:	e8 d7 ff ff ff       	call   c001c66e <DriverlessDevice::~DriverlessDevice()>
c001c697:	83 c4 10             	add    esp,0x10
c001c69a:	83 ec 08             	sub    esp,0x8
c001c69d:	68 58 01 00 00       	push   0x158
c001c6a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6a6:	e8 37 dd fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001c6ab:	83 c4 10             	add    esp,0x10
c001c6ae:	83 c4 0c             	add    esp,0xc
c001c6b1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001c6b2 <LinkedList<Device>::addElement(Device*)>:
c001c6b2:	83 ec 0c             	sub    esp,0xc
c001c6b5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c6ba:	75 10                	jne    c001c6cc <LinkedList<Device>::addElement(Device*)+0x1a>
c001c6bc:	83 ec 0c             	sub    esp,0xc
c001c6bf:	68 58 d9 01 c0       	push   0xc001d958
c001c6c4:	e8 7a 3a ff ff       	call   c0010143 <KePanic(char const*)>
c001c6c9:	83 c4 10             	add    esp,0x10
c001c6cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6d0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c6d2:	85 c0                	test   eax,eax
c001c6d4:	74 3a                	je     c001c710 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c6d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c6dd:	85 c0                	test   eax,eax
c001c6df:	74 2f                	je     c001c710 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c6e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6e5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c6e8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c6ec:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001c6f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6f6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c6fa:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c6fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c701:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c704:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c70e:	eb 68                	jmp    c001c778 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c714:	8b 00                	mov    eax,DWORD PTR [eax]
c001c716:	85 c0                	test   eax,eax
c001c718:	75 4e                	jne    c001c768 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c71a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c71e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c721:	85 c0                	test   eax,eax
c001c723:	75 43                	jne    c001c768 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c725:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c729:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c72d:	89 10                	mov    DWORD PTR [eax],edx
c001c72f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c733:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c73a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c73e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c741:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c74b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c74f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c752:	85 c0                	test   eax,eax
c001c754:	74 22                	je     c001c778 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c756:	83 ec 0c             	sub    esp,0xc
c001c759:	68 7a d9 01 c0       	push   0xc001d97a
c001c75e:	e8 e0 39 ff ff       	call   c0010143 <KePanic(char const*)>
c001c763:	83 c4 10             	add    esp,0x10
c001c766:	eb 10                	jmp    c001c778 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c768:	83 ec 0c             	sub    esp,0xc
c001c76b:	68 84 d9 01 c0       	push   0xc001d984
c001c770:	e8 ce 39 ff ff       	call   c0010143 <KePanic(char const*)>
c001c775:	83 c4 10             	add    esp,0x10
c001c778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c77c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c77f:	8d 50 01             	lea    edx,[eax+0x1]
c001c782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c786:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c789:	90                   	nop
c001c78a:	83 c4 0c             	add    esp,0xc
c001c78d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001c78e <LinkedList<Device>::LinkedList()>:
c001c78e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c792:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c798:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c79c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c7a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7a7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c7ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7b2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c7b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7bc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c7c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7c7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c7ce:	90                   	nop
c001c7cf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001c7d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001c7d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7d4:	8b 00                	mov    eax,DWORD PTR [eax]
c001c7d6:	85 c0                	test   eax,eax
c001c7d8:	75 0e                	jne    c001c7e8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c7da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c7e1:	85 c0                	test   eax,eax
c001c7e3:	75 03                	jne    c001c7e8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c7e5:	b0 01                	mov    al,0x1
c001c7e7:	c3                   	ret    
c001c7e8:	b0 00                	mov    al,0x0
c001c7ea:	90                   	nop
c001c7eb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001c7ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001c7ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7f0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c7f2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001c7f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001c7f4:	83 ec 0c             	sub    esp,0xc
c001c7f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7fb:	8b 00                	mov    eax,DWORD PTR [eax]
c001c7fd:	85 c0                	test   eax,eax
c001c7ff:	75 17                	jne    c001c818 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001c801:	83 ec 0c             	sub    esp,0xc
c001c804:	68 90 d9 01 c0       	push   0xc001d990
c001c809:	e8 35 39 ff ff       	call   c0010143 <KePanic(char const*)>
c001c80e:	83 c4 10             	add    esp,0x10
c001c811:	e9 92 00 00 00       	jmp    c001c8a8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001c816:	66 90                	xchg   ax,ax
c001c818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c81c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c81f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c822:	85 c0                	test   eax,eax
c001c824:	0f 95 c0             	setne  al
c001c827:	84 c0                	test   al,al
c001c829:	74 11                	je     c001c83c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001c82b:	83 ec 0c             	sub    esp,0xc
c001c82e:	68 db d9 01 c0       	push   0xc001d9db
c001c833:	e8 0b 39 ff ff       	call   c0010143 <KePanic(char const*)>
c001c838:	83 c4 10             	add    esp,0x10
c001c83b:	90                   	nop
c001c83c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c840:	8b 00                	mov    eax,DWORD PTR [eax]
c001c842:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c845:	85 c0                	test   eax,eax
c001c847:	0f 94 c0             	sete   al
c001c84a:	84 c0                	test   al,al
c001c84c:	74 36                	je     c001c884 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001c84e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c852:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c85c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c863:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c867:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c86a:	83 f8 01             	cmp    eax,0x1
c001c86d:	74 25                	je     c001c894 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c86f:	83 ec 0c             	sub    esp,0xc
c001c872:	68 b4 d9 01 c0       	push   0xc001d9b4
c001c877:	e8 c7 38 ff ff       	call   c0010143 <KePanic(char const*)>
c001c87c:	83 c4 10             	add    esp,0x10
c001c87f:	eb 13                	jmp    c001c894 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c881:	8d 76 00             	lea    esi,[esi+0x0]
c001c884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c888:	8b 00                	mov    eax,DWORD PTR [eax]
c001c88a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c88d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c891:	89 10                	mov    DWORD PTR [eax],edx
c001c893:	90                   	nop
c001c894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c898:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c89b:	8d 50 ff             	lea    edx,[eax-0x1]
c001c89e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8a2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c8a5:	8d 76 00             	lea    esi,[esi+0x0]
c001c8a8:	83 c4 0c             	add    esp,0xc
c001c8ab:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001c8ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001c8ac:	83 ec 0c             	sub    esp,0xc
c001c8af:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c8b4:	75 12                	jne    c001c8c8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001c8b6:	83 ec 0c             	sub    esp,0xc
c001c8b9:	68 58 d9 01 c0       	push   0xc001d958
c001c8be:	e8 80 38 ff ff       	call   c0010143 <KePanic(char const*)>
c001c8c3:	83 c4 10             	add    esp,0x10
c001c8c6:	66 90                	xchg   ax,ax
c001c8c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8cc:	8b 00                	mov    eax,DWORD PTR [eax]
c001c8ce:	85 c0                	test   eax,eax
c001c8d0:	74 36                	je     c001c908 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c8d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c8d9:	85 c0                	test   eax,eax
c001c8db:	74 2b                	je     c001c908 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c8dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8e1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c8e4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c8e8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001c8eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8ef:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c8f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c8f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c8fd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c904:	eb 6a                	jmp    c001c970 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c906:	66 90                	xchg   ax,ax
c001c908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c90c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c90e:	85 c0                	test   eax,eax
c001c910:	75 4e                	jne    c001c960 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c916:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c919:	85 c0                	test   eax,eax
c001c91b:	75 43                	jne    c001c960 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c91d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c921:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c925:	89 10                	mov    DWORD PTR [eax],edx
c001c927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c92b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c92f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c936:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c939:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c944:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c947:	85 c0                	test   eax,eax
c001c949:	74 25                	je     c001c970 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c94b:	83 ec 0c             	sub    esp,0xc
c001c94e:	68 7a d9 01 c0       	push   0xc001d97a
c001c953:	e8 eb 37 ff ff       	call   c0010143 <KePanic(char const*)>
c001c958:	83 c4 10             	add    esp,0x10
c001c95b:	eb 13                	jmp    c001c970 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c95d:	8d 76 00             	lea    esi,[esi+0x0]
c001c960:	83 ec 0c             	sub    esp,0xc
c001c963:	68 84 d9 01 c0       	push   0xc001d984
c001c968:	e8 d6 37 ff ff       	call   c0010143 <KePanic(char const*)>
c001c96d:	83 c4 10             	add    esp,0x10
c001c970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c974:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c977:	8d 50 01             	lea    edx,[eax+0x1]
c001c97a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c97e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c981:	90                   	nop
c001c982:	83 c4 0c             	add    esp,0xc
c001c985:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001c988 <ACPI::~ACPI()>:
c001c988:	83 ec 0c             	sub    esp,0xc
c001c98b:	ba 84 e5 01 c0       	mov    edx,0xc001e584
c001c990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c994:	89 10                	mov    DWORD PTR [eax],edx
c001c996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c99a:	83 ec 0c             	sub    esp,0xc
c001c99d:	50                   	push   eax
c001c99e:	e8 77 ee fe ff       	call   c000b81a <Device::~Device()>
c001c9a3:	83 c4 10             	add    esp,0x10
c001c9a6:	90                   	nop
c001c9a7:	83 c4 0c             	add    esp,0xc
c001c9aa:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001c9ac <ACPI::~ACPI()>:
c001c9ac:	83 ec 0c             	sub    esp,0xc
c001c9af:	83 ec 0c             	sub    esp,0xc
c001c9b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c9b6:	e8 cd ff ff ff       	call   c001c988 <ACPI::~ACPI()>
c001c9bb:	83 c4 10             	add    esp,0x10
c001c9be:	83 ec 08             	sub    esp,0x8
c001c9c1:	68 64 12 00 00       	push   0x1264
c001c9c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c9ca:	e8 13 da fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001c9cf:	83 c4 10             	add    esp,0x10
c001c9d2:	83 c4 0c             	add    esp,0xc
c001c9d5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001c9d8 <LinkedList<Device>::~LinkedList()>:
c001c9d8:	90                   	nop
c001c9d9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001c9dc <LinkedList<Device>::isEmpty()>:
c001c9dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9e0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c9e2:	85 c0                	test   eax,eax
c001c9e4:	75 0e                	jne    c001c9f4 <LinkedList<Device>::isEmpty()+0x18>
c001c9e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c9ed:	85 c0                	test   eax,eax
c001c9ef:	75 03                	jne    c001c9f4 <LinkedList<Device>::isEmpty()+0x18>
c001c9f1:	b0 01                	mov    al,0x1
c001c9f3:	c3                   	ret    
c001c9f4:	b0 00                	mov    al,0x0
c001c9f6:	90                   	nop
c001c9f7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001c9f8 <LinkedList<Device>::getFirstElement()>:
c001c9f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9fc:	8b 00                	mov    eax,DWORD PTR [eax]
c001c9fe:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001ca00 <LinkedList<Device>::removeFirst()>:
c001ca00:	83 ec 0c             	sub    esp,0xc
c001ca03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca07:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca09:	85 c0                	test   eax,eax
c001ca0b:	75 17                	jne    c001ca24 <LinkedList<Device>::removeFirst()+0x24>
c001ca0d:	83 ec 0c             	sub    esp,0xc
c001ca10:	68 90 d9 01 c0       	push   0xc001d990
c001ca15:	e8 29 37 ff ff       	call   c0010143 <KePanic(char const*)>
c001ca1a:	83 c4 10             	add    esp,0x10
c001ca1d:	e9 92 00 00 00       	jmp    c001cab4 <LinkedList<Device>::removeFirst()+0xb4>
c001ca22:	66 90                	xchg   ax,ax
c001ca24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ca2b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ca31:	85 c0                	test   eax,eax
c001ca33:	74 13                	je     c001ca48 <LinkedList<Device>::removeFirst()+0x48>
c001ca35:	83 ec 0c             	sub    esp,0xc
c001ca38:	68 db d9 01 c0       	push   0xc001d9db
c001ca3d:	e8 01 37 ff ff       	call   c0010143 <KePanic(char const*)>
c001ca42:	83 c4 10             	add    esp,0x10
c001ca45:	8d 76 00             	lea    esi,[esi+0x0]
c001ca48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca4c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca4e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ca54:	85 c0                	test   eax,eax
c001ca56:	75 34                	jne    c001ca8c <LinkedList<Device>::removeFirst()+0x8c>
c001ca58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca5c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ca62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca66:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ca6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca71:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ca74:	83 f8 01             	cmp    eax,0x1
c001ca77:	74 27                	je     c001caa0 <LinkedList<Device>::removeFirst()+0xa0>
c001ca79:	83 ec 0c             	sub    esp,0xc
c001ca7c:	68 b4 d9 01 c0       	push   0xc001d9b4
c001ca81:	e8 bd 36 ff ff       	call   c0010143 <KePanic(char const*)>
c001ca86:	83 c4 10             	add    esp,0x10
c001ca89:	eb 15                	jmp    c001caa0 <LinkedList<Device>::removeFirst()+0xa0>
c001ca8b:	90                   	nop
c001ca8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca90:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca92:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001ca98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca9c:	89 10                	mov    DWORD PTR [eax],edx
c001ca9e:	66 90                	xchg   ax,ax
c001caa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caa4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001caa7:	8d 50 ff             	lea    edx,[eax-0x1]
c001caaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caae:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cab1:	8d 76 00             	lea    esi,[esi+0x0]
c001cab4:	83 c4 0c             	add    esp,0xc
c001cab7:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001cab8 <CPU::~CPU()>:
c001cab8:	83 ec 0c             	sub    esp,0xc
c001cabb:	ba 20 e7 01 c0       	mov    edx,0xc001e720
c001cac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cac4:	89 10                	mov    DWORD PTR [eax],edx
c001cac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caca:	83 ec 0c             	sub    esp,0xc
c001cacd:	50                   	push   eax
c001cace:	e8 47 ed fe ff       	call   c000b81a <Device::~Device()>
c001cad3:	83 c4 10             	add    esp,0x10
c001cad6:	90                   	nop
c001cad7:	83 c4 0c             	add    esp,0xc
c001cada:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001cadc <CPU::~CPU()>:
c001cadc:	83 ec 0c             	sub    esp,0xc
c001cadf:	83 ec 0c             	sub    esp,0xc
c001cae2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cae6:	e8 cd ff ff ff       	call   c001cab8 <CPU::~CPU()>
c001caeb:	83 c4 10             	add    esp,0x10
c001caee:	83 ec 08             	sub    esp,0x8
c001caf1:	68 94 11 00 00       	push   0x1194
c001caf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cafa:	e8 e3 d8 fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001caff:	83 c4 10             	add    esp,0x10
c001cb02:	83 c4 0c             	add    esp,0xc
c001cb05:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001cb08 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001cb08:	90                   	nop
c001cb09:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001cb0c <ThreadControlBlock::ThreadControlBlock()>:
c001cb0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb10:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001cb17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb1b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001cb22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb26:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001cb2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb31:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001cb38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb3c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001cb43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb47:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001cb4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb4f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001cb53:	90                   	nop
c001cb54:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001cb58 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001cb58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb5c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cb62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb66:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cb6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb71:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cb78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb7c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cb82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb86:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cb8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb91:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cb98:	90                   	nop
c001cb99:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001cb9c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001cb9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cba0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001cba3:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001cba4 <PCI::~PCI()>:
c001cba4:	83 ec 0c             	sub    esp,0xc
c001cba7:	ba dc f4 01 c0       	mov    edx,0xc001f4dc
c001cbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbb0:	89 10                	mov    DWORD PTR [eax],edx
c001cbb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbb6:	83 ec 0c             	sub    esp,0xc
c001cbb9:	50                   	push   eax
c001cbba:	e8 e5 e6 fe ff       	call   c000b2a4 <Bus::~Bus()>
c001cbbf:	83 c4 10             	add    esp,0x10
c001cbc2:	90                   	nop
c001cbc3:	83 c4 0c             	add    esp,0xc
c001cbc6:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001cbc8 <PCI::~PCI()>:
c001cbc8:	83 ec 0c             	sub    esp,0xc
c001cbcb:	83 ec 0c             	sub    esp,0xc
c001cbce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbd2:	e8 cd ff ff ff       	call   c001cba4 <PCI::~PCI()>
c001cbd7:	83 c4 10             	add    esp,0x10
c001cbda:	83 ec 08             	sub    esp,0x8
c001cbdd:	68 5c 01 00 00       	push   0x15c
c001cbe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbe6:	e8 f7 d7 fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001cbeb:	83 c4 10             	add    esp,0x10
c001cbee:	83 c4 0c             	add    esp,0xc
c001cbf1:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001cbf2 <IDE::~IDE()>:
c001cbf2:	83 ec 0c             	sub    esp,0xc
c001cbf5:	ba 90 f5 01 c0       	mov    edx,0xc001f590
c001cbfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbfe:	89 10                	mov    DWORD PTR [eax],edx
c001cc00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc04:	83 ec 0c             	sub    esp,0xc
c001cc07:	50                   	push   eax
c001cc08:	e8 87 f0 fe ff       	call   c000bc94 <HardDiskController::~HardDiskController()>
c001cc0d:	83 c4 10             	add    esp,0x10
c001cc10:	90                   	nop
c001cc11:	83 c4 0c             	add    esp,0xc
c001cc14:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001cc16 <IDE::~IDE()>:
c001cc16:	83 ec 0c             	sub    esp,0xc
c001cc19:	83 ec 0c             	sub    esp,0xc
c001cc1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc20:	e8 cd ff ff ff       	call   c001cbf2 <IDE::~IDE()>
c001cc25:	83 c4 10             	add    esp,0x10
c001cc28:	83 ec 08             	sub    esp,0x8
c001cc2b:	68 70 02 00 00       	push   0x270
c001cc30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc34:	e8 a9 d7 fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001cc39:	83 c4 10             	add    esp,0x10
c001cc3c:	83 c4 0c             	add    esp,0xc
c001cc3f:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001cc40 <SATABus::~SATABus()>:
c001cc40:	83 ec 0c             	sub    esp,0xc
c001cc43:	ba e0 f5 01 c0       	mov    edx,0xc001f5e0
c001cc48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc4c:	89 10                	mov    DWORD PTR [eax],edx
c001cc4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc52:	83 ec 0c             	sub    esp,0xc
c001cc55:	50                   	push   eax
c001cc56:	e8 39 f0 fe ff       	call   c000bc94 <HardDiskController::~HardDiskController()>
c001cc5b:	83 c4 10             	add    esp,0x10
c001cc5e:	90                   	nop
c001cc5f:	83 c4 0c             	add    esp,0xc
c001cc62:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001cc64 <SATABus::~SATABus()>:
c001cc64:	83 ec 0c             	sub    esp,0xc
c001cc67:	83 ec 0c             	sub    esp,0xc
c001cc6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc6e:	e8 cd ff ff ff       	call   c001cc40 <SATABus::~SATABus()>
c001cc73:	83 c4 10             	add    esp,0x10
c001cc76:	83 ec 08             	sub    esp,0x8
c001cc79:	68 64 01 00 00       	push   0x164
c001cc7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc82:	e8 5b d7 fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001cc87:	83 c4 10             	add    esp,0x10
c001cc8a:	83 c4 0c             	add    esp,0xc
c001cc8d:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001cc8e <ATA::~ATA()>:
c001cc8e:	83 ec 0c             	sub    esp,0xc
c001cc91:	ba 20 f6 01 c0       	mov    edx,0xc001f620
c001cc96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc9a:	89 10                	mov    DWORD PTR [eax],edx
c001cc9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cca0:	83 ec 0c             	sub    esp,0xc
c001cca3:	50                   	push   eax
c001cca4:	e8 cd f0 fe ff       	call   c000bd76 <PhysicalDisk::~PhysicalDisk()>
c001cca9:	83 c4 10             	add    esp,0x10
c001ccac:	90                   	nop
c001ccad:	83 c4 0c             	add    esp,0xc
c001ccb0:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001ccb2 <ATA::~ATA()>:
c001ccb2:	83 ec 0c             	sub    esp,0xc
c001ccb5:	83 ec 0c             	sub    esp,0xc
c001ccb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccbc:	e8 cd ff ff ff       	call   c001cc8e <ATA::~ATA()>
c001ccc1:	83 c4 10             	add    esp,0x10
c001ccc4:	83 ec 08             	sub    esp,0x8
c001ccc7:	68 7c 01 00 00       	push   0x17c
c001cccc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccd0:	e8 0d d7 fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001ccd5:	83 c4 10             	add    esp,0x10
c001ccd8:	83 c4 0c             	add    esp,0xc
c001ccdb:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001ccdc <ATAPI::~ATAPI()>:
c001ccdc:	83 ec 0c             	sub    esp,0xc
c001ccdf:	ba 68 f6 01 c0       	mov    edx,0xc001f668
c001cce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cce8:	89 10                	mov    DWORD PTR [eax],edx
c001ccea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccee:	83 ec 0c             	sub    esp,0xc
c001ccf1:	50                   	push   eax
c001ccf2:	e8 7f f0 fe ff       	call   c000bd76 <PhysicalDisk::~PhysicalDisk()>
c001ccf7:	83 c4 10             	add    esp,0x10
c001ccfa:	90                   	nop
c001ccfb:	83 c4 0c             	add    esp,0xc
c001ccfe:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001cd00 <ATAPI::~ATAPI()>:
c001cd00:	83 ec 0c             	sub    esp,0xc
c001cd03:	83 ec 0c             	sub    esp,0xc
c001cd06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd0a:	e8 cd ff ff ff       	call   c001ccdc <ATAPI::~ATAPI()>
c001cd0f:	83 c4 10             	add    esp,0x10
c001cd12:	83 ec 08             	sub    esp,0x8
c001cd15:	68 84 01 00 00       	push   0x184
c001cd1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd1e:	e8 bf d6 fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001cd23:	83 c4 10             	add    esp,0x10
c001cd26:	83 c4 0c             	add    esp,0xc
c001cd29:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001cd2a <SATA::~SATA()>:
c001cd2a:	83 ec 0c             	sub    esp,0xc
c001cd2d:	ba 1c f7 01 c0       	mov    edx,0xc001f71c
c001cd32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd36:	89 10                	mov    DWORD PTR [eax],edx
c001cd38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd3c:	83 ec 0c             	sub    esp,0xc
c001cd3f:	50                   	push   eax
c001cd40:	e8 31 f0 fe ff       	call   c000bd76 <PhysicalDisk::~PhysicalDisk()>
c001cd45:	83 c4 10             	add    esp,0x10
c001cd48:	90                   	nop
c001cd49:	83 c4 0c             	add    esp,0xc
c001cd4c:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001cd4e <SATA::~SATA()>:
c001cd4e:	83 ec 0c             	sub    esp,0xc
c001cd51:	83 ec 0c             	sub    esp,0xc
c001cd54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd58:	e8 cd ff ff ff       	call   c001cd2a <SATA::~SATA()>
c001cd5d:	83 c4 10             	add    esp,0x10
c001cd60:	83 ec 08             	sub    esp,0x8
c001cd63:	68 7c 01 00 00       	push   0x17c
c001cd68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd6c:	e8 71 d6 fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001cd71:	83 c4 10             	add    esp,0x10
c001cd74:	83 c4 0c             	add    esp,0xc
c001cd77:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001cd78 <SATAPI::~SATAPI()>:
c001cd78:	83 ec 0c             	sub    esp,0xc
c001cd7b:	ba 54 f8 01 c0       	mov    edx,0xc001f854
c001cd80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd84:	89 10                	mov    DWORD PTR [eax],edx
c001cd86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd8a:	83 ec 0c             	sub    esp,0xc
c001cd8d:	50                   	push   eax
c001cd8e:	e8 e3 ef fe ff       	call   c000bd76 <PhysicalDisk::~PhysicalDisk()>
c001cd93:	83 c4 10             	add    esp,0x10
c001cd96:	90                   	nop
c001cd97:	83 c4 0c             	add    esp,0xc
c001cd9a:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001cd9c <SATAPI::~SATAPI()>:
c001cd9c:	83 ec 0c             	sub    esp,0xc
c001cd9f:	83 ec 0c             	sub    esp,0xc
c001cda2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cda6:	e8 cd ff ff ff       	call   c001cd78 <SATAPI::~SATAPI()>
c001cdab:	83 c4 10             	add    esp,0x10
c001cdae:	83 ec 08             	sub    esp,0x8
c001cdb1:	68 84 01 00 00       	push   0x184
c001cdb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdba:	e8 23 d6 fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001cdbf:	83 c4 10             	add    esp,0x10
c001cdc2:	83 c4 0c             	add    esp,0xc
c001cdc5:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001cdc6 <IOAPIC::~IOAPIC()>:
c001cdc6:	83 ec 0c             	sub    esp,0xc
c001cdc9:	ba 94 f8 01 c0       	mov    edx,0xc001f894
c001cdce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdd2:	89 10                	mov    DWORD PTR [eax],edx
c001cdd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdd8:	83 ec 0c             	sub    esp,0xc
c001cddb:	50                   	push   eax
c001cddc:	e8 39 ea fe ff       	call   c000b81a <Device::~Device()>
c001cde1:	83 c4 10             	add    esp,0x10
c001cde4:	90                   	nop
c001cde5:	83 c4 0c             	add    esp,0xc
c001cde8:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001cdea <IOAPIC::~IOAPIC()>:
c001cdea:	83 ec 0c             	sub    esp,0xc
c001cded:	83 ec 0c             	sub    esp,0xc
c001cdf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdf4:	e8 cd ff ff ff       	call   c001cdc6 <IOAPIC::~IOAPIC()>
c001cdf9:	83 c4 10             	add    esp,0x10
c001cdfc:	83 ec 08             	sub    esp,0x8
c001cdff:	68 68 01 00 00       	push   0x168
c001ce04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce08:	e8 d5 d5 fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001ce0d:	83 c4 10             	add    esp,0x10
c001ce10:	83 c4 0c             	add    esp,0xc
c001ce13:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001ce14 <APICTimer::~APICTimer()>:
c001ce14:	83 ec 0c             	sub    esp,0xc
c001ce17:	ba dc f8 01 c0       	mov    edx,0xc001f8dc
c001ce1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce20:	89 10                	mov    DWORD PTR [eax],edx
c001ce22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce26:	83 ec 0c             	sub    esp,0xc
c001ce29:	50                   	push   eax
c001ce2a:	e8 11 03 ff ff       	call   c000d140 <Timer::~Timer()>
c001ce2f:	83 c4 10             	add    esp,0x10
c001ce32:	90                   	nop
c001ce33:	83 c4 0c             	add    esp,0xc
c001ce36:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001ce38 <APICTimer::~APICTimer()>:
c001ce38:	83 ec 0c             	sub    esp,0xc
c001ce3b:	83 ec 0c             	sub    esp,0xc
c001ce3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce42:	e8 cd ff ff ff       	call   c001ce14 <APICTimer::~APICTimer()>
c001ce47:	83 c4 10             	add    esp,0x10
c001ce4a:	83 ec 08             	sub    esp,0x8
c001ce4d:	68 60 01 00 00       	push   0x160
c001ce52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce56:	e8 87 d5 fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001ce5b:	83 c4 10             	add    esp,0x10
c001ce5e:	83 c4 0c             	add    esp,0xc
c001ce61:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001ce64 <PIT::~PIT()>:
c001ce64:	83 ec 0c             	sub    esp,0xc
c001ce67:	ba 2c f9 01 c0       	mov    edx,0xc001f92c
c001ce6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce70:	89 10                	mov    DWORD PTR [eax],edx
c001ce72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce76:	83 ec 0c             	sub    esp,0xc
c001ce79:	50                   	push   eax
c001ce7a:	e8 c1 02 ff ff       	call   c000d140 <Timer::~Timer()>
c001ce7f:	83 c4 10             	add    esp,0x10
c001ce82:	90                   	nop
c001ce83:	83 c4 0c             	add    esp,0xc
c001ce86:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001ce88 <PIT::~PIT()>:
c001ce88:	83 ec 0c             	sub    esp,0xc
c001ce8b:	83 ec 0c             	sub    esp,0xc
c001ce8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce92:	e8 cd ff ff ff       	call   c001ce64 <PIT::~PIT()>
c001ce97:	83 c4 10             	add    esp,0x10
c001ce9a:	83 ec 08             	sub    esp,0x8
c001ce9d:	68 5c 01 00 00       	push   0x15c
c001cea2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cea6:	e8 37 d5 fe ff       	call   c000a3e2 <operator delete(void*, unsigned long)>
c001ceab:	83 c4 10             	add    esp,0x10
c001ceae:	83 c4 0c             	add    esp,0xc
c001ceb1:	c3                   	ret    
