
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 3f f6 00 00       	call   c000f65f <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 73 85 02 00       	call   c0028598 <_init>
c0000025:	c3                   	ret    
c0000026:	bb ec 91 02 c0       	mov    ebx,0xc00291ec
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb f8 91 02 c0    	cmp    ebx,0xc00291f8
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 58 d3 02 c0       	mov    eax,0xc002d358
c0000049:	3d 58 d3 02 c0       	cmp    eax,0xc002d358
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 58 d3 02 c0       	push   0xc002d358
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 58 d3 02 c0       	mov    eax,0xc002d358
c0000075:	2d 58 d3 02 c0       	sub    eax,0xc002d358
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 58 d3 02 c0       	push   0xc002d358
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 88 d9 02 c0 00 	cmp    BYTE PTR ds:0xc002d988,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 00 92 02 c0       	mov    ebx,0xc0029200
c00000bb:	81 eb fc 91 02 c0    	sub    ebx,0xc00291fc
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be fc 91 02 c0       	mov    esi,0xc00291fc
c00000ca:	a1 8c d9 02 c0       	mov    eax,ds:0xc002d98c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 8c d9 02 c0       	mov    ds:0xc002d98c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 8c d9 02 c0       	mov    eax,ds:0xc002d98c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 58 d3 02 c0       	push   0xc002d358
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 88 d9 02 c0 01 	mov    BYTE PTR ds:0xc002d988,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 90 d9 02 c0       	push   0xc002d990
c000012c:	68 58 d3 02 c0       	push   0xc002d358
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 43 d0 01 00       	call   c001d3e6 <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 58 21 01 00       	call   c0012513 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 21 d0 01 00       	call   c001d3e6 <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 c9 d4 01 00       	call   c001d8ad <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 ee da 01 00       	call   c001dedb <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 d0 dd 02 c0 	lgdtd  ds:0xc002ddd0
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 c1 3e 01 00       	call   c00144a3 <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 df de 00 00       	jmp    c000e52a <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 a8 d9 02 c0       	mov    ds:0xc002d9a8,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 a8 d9 02 c0    	mov    DWORD PTR ds:0xc002d9a8,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d a8 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9a8
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 20 92 02 c0 02 	test   BYTE PTR [edx-0x3ffd6de0],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 20 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6de0],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 20 92 02 c0 08 	test   BYTE PTR [edx-0x3ffd6de0],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 20 92 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6de0],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 20 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6de0],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d c0 d9 02 c0    	mov    ecx,DWORD PTR ds:0xc002d9c0
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d c0 d9 02 c0    	mov    DWORD PTR ds:0xc002d9c0,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 c4 d9 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd263c]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 c4 d9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd263c],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d c0 d9 02 c0    	mov    DWORD PTR ds:0xc002d9c0,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 ec d9 02 c0    	cmp    DWORD PTR ds:0xc002d9ec,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d fc d9 02 c0    	mov    ecx,DWORD PTR ds:0xc002d9fc
c0000e38:	c7 42 0c f4 d9 02 c0 	mov    DWORD PTR [edx+0xc],0xc002d9f4
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 fc d9 02 c0    	mov    DWORD PTR ds:0xc002d9fc,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 ec d9 02 c0    	mov    DWORD PTR ds:0xc002d9ec,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 c0 d9 02 c0 02 	test   BYTE PTR ds:0xc002d9c0,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 df e4 00 00       	call   c000f3f8 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 21 e4 00 00       	call   c000f3f8 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 0b e4 00 00       	call   c000f3f8 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 e7 e3 00 00       	call   c000f3f8 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d c0 d9 02 c0    	mov    edi,DWORD PTR ds:0xc002d9c0
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 c4 d9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd263c]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 c4 d9 02 c0 	mov    DWORD PTR [edx*4-0x3ffd263c],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 f4 d9 02 c0 	lea    edx,[eax*8-0x3ffd260c]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d 00 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da00
c00011ba:	81 fb f4 d9 02 c0    	cmp    ebx,0xc002d9f4
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d f4 d9 02 c0       	cmp    eax,0xc002d9f4
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d f0 d9 02 c0    	cmp    DWORD PTR ds:0xc002d9f0,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 fc d9 02 c0       	mov    ds:0xc002d9fc,eax
c00011f6:	a3 00 da 02 c0       	mov    ds:0xc002da00,eax
c00011fb:	a3 f0 d9 02 c0       	mov    ds:0xc002d9f0,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 f4 d9 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d9f4
c0001209:	c7 40 0c f4 d9 02 c0 	mov    DWORD PTR [eax+0xc],0xc002d9f4
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 00 da 02 c0       	mov    ds:0xc002da00,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 f4 d9 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d9f4
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 b8 d9 02 c0 	lea    ebp,[edx*4-0x3ffd2648]
c000125a:	8b 14 95 c0 d9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2640]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 c0 d9 02 c0 	lea    ecx,[edx*4-0x3ffd2640]
c0001275:	8b 14 95 c0 d9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2640]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd f4 dc 02 c0 	or     DWORD PTR [edi*4-0x3ffd230c],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 f4 d9 02 c0 	lea    eax,[eax*8-0x3ffd260c]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d fc d9 02 c0    	mov    DWORD PTR ds:0xc002d9fc,ecx
c000132f:	89 0d 00 da 02 c0    	mov    DWORD PTR ds:0xc002da00,ecx
c0001335:	c7 41 08 f4 d9 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002d9f4
c000133c:	c7 41 0c f4 d9 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002d9f4
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd ec d9 02 c0 	lea    edx,[ecx*8-0x3ffd2614]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d f4 dc 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd230c]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d f4 dc 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd230c]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 ec d9 02 c0 	lea    edx,[eax*4-0x3ffd2614]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d f4 dc 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd230c],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d fc d9 02 c0    	mov    DWORD PTR ds:0xc002d9fc,edi
c0001402:	89 3d 00 da 02 c0    	mov    DWORD PTR ds:0xc002da00,edi
c0001408:	c7 47 08 f4 d9 02 c0 	mov    DWORD PTR [edi+0x8],0xc002d9f4
c000140f:	c7 47 0c f4 d9 02 c0 	mov    DWORD PTR [edi+0xc],0xc002d9f4
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d f0 d9 02 c0    	mov    DWORD PTR ds:0xc002d9f0,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 ec d9 02 c0       	mov    eax,ds:0xc002d9ec
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d ec d9 02 c0    	mov    DWORD PTR ds:0xc002d9ec,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba c0 d9 02 c0       	mov    edx,0xc002d9c0
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d c0 d9 02 c0 00 	cmp    DWORD PTR ds:0xc002d9c0,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d 14 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dd14
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 14 dd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dd14,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d 14 dd 02 c0    	mov    DWORD PTR ds:0xc002dd14,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 ec d9 02 c0    	cmp    DWORD PTR ds:0xc002d9ec,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d ec d9 02 c0    	mov    DWORD PTR ds:0xc002d9ec,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d c0 d9 02 c0 00 	cmp    DWORD PTR ds:0xc002d9c0,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 1c dd 02 c0    	push   DWORD PTR ds:0xc002dd1c
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d c0 d9 02 c0 00 	cmp    DWORD PTR ds:0xc002d9c0,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 1c dd 02 c0       	mov    eax,ds:0xc002dd1c
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d ec d9 02 c0 00 	cmp    DWORD PTR ds:0xc002d9ec,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 ec d9 02 c0       	mov    eax,ds:0xc002d9ec
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 c4 d9 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd263c]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 f4 d9 02 c0       	mov    eax,0xc002d9f4
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d ec dc 02 c0       	cmp    eax,0xc002dcec
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 28 dd 02 c0       	mov    eax,ds:0xc002dd28
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 10 dd 02 c0    	mov    esi,DWORD PTR ds:0xc002dd10
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 24 dd 02 c0    	mov    esi,DWORD PTR ds:0xc002dd24
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 34 dd 02 c0    	mov    esi,DWORD PTR ds:0xc002dd34
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 24 93 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6cdc]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 c0 d9 02 c0       	mov    eax,ds:0xc002d9c0
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 c0 d9 02 c0       	mov    ds:0xc002d9c0,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d 04 dd 02 c0    	mov    DWORD PTR ds:0xc002dd04,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d 08 dd 02 c0    	mov    DWORD PTR ds:0xc002dd08,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d 0c dd 02 c0    	mov    DWORD PTR ds:0xc002dd0c,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 14 dd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dd14,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 60 f4 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd0ba0]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 1a ed 01 00       	jmp    c002090c <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 60 f4 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd0ba0]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 4b ed 01 00       	jmp    c0020953 <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 60 f4 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd0ba0]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 73 ed 01 00       	jmp    c002099a <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 ea 49 02 00       	call   c00268f4 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 40 94 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6bc0]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 40 94 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6bc0]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba 40 93 02 c0       	mov    edx,0xc0029340
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba 60 94 02 c0       	mov    edx,0xc0029460
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba 60 c2 02 c0       	mov    edx,0xc002c260
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba 6c 94 02 c0       	mov    edx,0xc002946c
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba 50 94 02 c0       	mov    edx,0xc0029450
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 60 dd 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd22a0]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 40 dd 02 c0    	mov    ax,ds:0xc002dd40
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 40 dd 02 c0    	mov    ds:0xc002dd40,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 e7 37 02 00       	call   c00268f4 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 35 4e 00 00       	call   c000845a <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 c7 4d 00 00       	call   c0008470 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 72 94 02 c0       	mov    eax,0xc0029472
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 48 46 00 00       	call   c0008487 <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad c0 93 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6c40]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 7b 94 02 c0       	mov    eax,0xc002947b
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 1e 46 00 00       	call   c0008583 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 40 94 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6bc0]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 fa 44 00 00       	call   c0008583 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 e1 44 00 00       	call   c0008583 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 0e 44 00 00       	call   c0008583 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 fb 43 00 00       	call   c0008583 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 b2 21 02 00       	call   c00268f4 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba 50 94 02 c0       	mov    edx,0xc0029450
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba 40 93 02 c0       	mov    edx,0xc0029340
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba 50 93 02 c0       	mov    edx,0xc0029350
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 46 38 00 00       	call   c0008517 <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 60 dd 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd22a0]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 60 dd 02 c0 	mov    DWORD PTR [edx*4-0x3ffd22a0],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 a3 34 00 00       	call   c000845a <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 f4 30 00 00       	call   c0008470 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 f0 2a 00 00       	call   c000845a <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 2f 2a 00 00       	call   c0008470 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 79 0b 02 00       	call   c00268f4 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 5f 0b 02 00       	call   c00268f4 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 8b 24 00 00       	call   c000845a <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 02 24 00 00       	call   c0008470 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 6e 23 00 00       	call   c000845a <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 30 23 00 00       	call   c0008470 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 db 22 00 00       	call   c000845a <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 9f 22 00 00       	call   c0008470 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 80 1f 00 00       	call   c000845a <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 5d 1e 00 00       	call   c0008470 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 f8 1d 00 00       	call   c000845a <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 8f 1d 00 00       	call   c0008470 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 c3 1b 00 00       	call   c000845a <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 40 19 00 00       	call   c0008470 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 db 18 00 00       	call   c000845a <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 5e 18 00 00       	call   c0008470 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 02 18 00 00       	call   c000845a <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 7f 17 00 00       	call   c0008470 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 03 17 00 00       	call   c0008517 <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 97 93 02 c0       	mov    eax,0xc0029397
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 97 15 00 00       	call   c0008583 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 8e 14 00 00       	call   c0008487 <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 90 93 02 c0       	mov    eax,0xc0029390
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_forward>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 2c             	sub    esp,0x2c
c0007160:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007164:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007168:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000716e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0007172:	89 d8                	mov    eax,ebx
c0007174:	e8 b1 b1 ff ff       	call   c000232a <validate>
c0007179:	89 c5                	mov    ebp,eax
c000717b:	85 c0                	test   eax,eax
c000717d:	0f 85 aa 01 00 00    	jne    c000732d <f_forward+0x1d4>
c0007183:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007187:	85 ed                	test   ebp,ebp
c0007189:	0f 85 9e 01 00 00    	jne    c000732d <f_forward+0x1d4>
c000718f:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007193:	0f 84 8f 01 00 00    	je     c0007328 <f_forward+0x1cf>
c0007199:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000719c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000719f:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071a2:	bf 00 00 00 00       	mov    edi,0x0
c00071a7:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071aa:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071ae:	89 d1                	mov    ecx,edx
c00071b0:	19 f9                	sbb    ecx,edi
c00071b2:	0f 83 cf 00 00 00    	jae    c0007287 <f_forward+0x12e>
c00071b8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071bc:	e9 c6 00 00 00       	jmp    c0007287 <f_forward+0x12e>
c00071c1:	50                   	push   eax
c00071c2:	50                   	push   eax
c00071c3:	6a 00                	push   0x0
c00071c5:	6a 00                	push   0x0
c00071c7:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071cb:	83 c4 10             	add    esp,0x10
c00071ce:	85 c0                	test   eax,eax
c00071d0:	0f 84 57 01 00 00    	je     c000732d <f_forward+0x1d4>
c00071d6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071e0:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c00071e4:	89 d7                	mov    edi,edx
c00071e6:	8d 4e ff             	lea    ecx,[esi-0x1]
c00071e9:	89 c6                	mov    esi,eax
c00071eb:	0f ac fe 09          	shrd   esi,edi,0x9
c00071ef:	21 ce                	and    esi,ecx
c00071f1:	89 c1                	mov    ecx,eax
c00071f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00071f9:	0f 84 98 00 00 00    	je     c0007297 <f_forward+0x13e>
c00071ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007203:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007206:	89 c8                	mov    eax,ecx
c0007208:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000720c:	e8 af ac ff ff       	call   c0001ec0 <clst2sect>
c0007211:	89 d7                	mov    edi,edx
c0007213:	09 c7                	or     edi,eax
c0007215:	0f 84 9e 00 00 00    	je     c00072b9 <f_forward+0x160>
c000721b:	31 ff                	xor    edi,edi
c000721d:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007220:	01 c6                	add    esi,eax
c0007222:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007226:	11 d7                	adc    edi,edx
c0007228:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000722b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000722e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007232:	39 fa                	cmp    edx,edi
c0007234:	0f 85 a2 00 00 00    	jne    c00072dc <f_forward+0x183>
c000723a:	39 f0                	cmp    eax,esi
c000723c:	0f 85 9a 00 00 00    	jne    c00072dc <f_forward+0x183>
c0007242:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007245:	ba 00 02 00 00       	mov    edx,0x200
c000724a:	25 ff 01 00 00       	and    eax,0x1ff
c000724f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007253:	29 c2                	sub    edx,eax
c0007255:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007258:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000725b:	39 d1                	cmp    ecx,edx
c000725d:	76 02                	jbe    c0007261 <f_forward+0x108>
c000725f:	89 d1                	mov    ecx,edx
c0007261:	8d 73 50             	lea    esi,[ebx+0x50]
c0007264:	52                   	push   edx
c0007265:	01 c6                	add    esi,eax
c0007267:	52                   	push   edx
c0007268:	51                   	push   ecx
c0007269:	56                   	push   esi
c000726a:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000726e:	83 c4 10             	add    esp,0x10
c0007271:	85 c0                	test   eax,eax
c0007273:	74 44                	je     c00072b9 <f_forward+0x160>
c0007275:	31 ff                	xor    edi,edi
c0007277:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000727a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000727d:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007281:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007285:	01 07                	add    DWORD PTR [edi],eax
c0007287:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000728c:	0f 85 2f ff ff ff    	jne    c00071c1 <f_forward+0x68>
c0007292:	e9 96 00 00 00       	jmp    c000732d <f_forward+0x1d4>
c0007297:	85 f6                	test   esi,esi
c0007299:	0f 85 60 ff ff ff    	jne    c00071ff <f_forward+0xa6>
c000729f:	89 d7                	mov    edi,edx
c00072a1:	09 c7                	or     edi,eax
c00072a3:	75 05                	jne    c00072aa <f_forward+0x151>
c00072a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072a8:	eb 0a                	jmp    c00072b4 <f_forward+0x15b>
c00072aa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ad:	89 d8                	mov    eax,ebx
c00072af:	e8 d9 bc ff ff       	call   c0002f8d <get_fat>
c00072b4:	83 f8 01             	cmp    eax,0x1
c00072b7:	77 0b                	ja     c00072c4 <f_forward+0x16b>
c00072b9:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072bd:	bd 02 00 00 00       	mov    ebp,0x2
c00072c2:	eb 69                	jmp    c000732d <f_forward+0x1d4>
c00072c4:	83 f8 ff             	cmp    eax,0xffffffff
c00072c7:	75 0b                	jne    c00072d4 <f_forward+0x17b>
c00072c9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072cd:	bd 01 00 00 00       	mov    ebp,0x1
c00072d2:	eb 59                	jmp    c000732d <f_forward+0x1d4>
c00072d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072d7:	e9 23 ff ff ff       	jmp    c00071ff <f_forward+0xa6>
c00072dc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072e0:	79 20                	jns    c0007302 <f_forward+0x1a9>
c00072e2:	83 ec 0c             	sub    esp,0xc
c00072e5:	6a 01                	push   0x1
c00072e7:	52                   	push   edx
c00072e8:	50                   	push   eax
c00072e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072ed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00072f1:	50                   	push   eax
c00072f2:	e8 fb a8 ff ff       	call   c0001bf2 <disk_write>
c00072f7:	83 c4 20             	add    esp,0x20
c00072fa:	85 c0                	test   eax,eax
c00072fc:	75 cb                	jne    c00072c9 <f_forward+0x170>
c00072fe:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007302:	83 ec 0c             	sub    esp,0xc
c0007305:	6a 01                	push   0x1
c0007307:	57                   	push   edi
c0007308:	56                   	push   esi
c0007309:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000730d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007311:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007315:	50                   	push   eax
c0007316:	e8 c1 a8 ff ff       	call   c0001bdc <disk_read>
c000731b:	83 c4 20             	add    esp,0x20
c000731e:	85 c0                	test   eax,eax
c0007320:	0f 84 1c ff ff ff    	je     c0007242 <f_forward+0xe9>
c0007326:	eb a1                	jmp    c00072c9 <f_forward+0x170>
c0007328:	bd 07 00 00 00       	mov    ebp,0x7
c000732d:	83 c4 2c             	add    esp,0x2c
c0007330:	89 e8                	mov    eax,ebp
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	5f                   	pop    edi
c0007335:	5d                   	pop    ebp
c0007336:	c3                   	ret    

c0007337 <f_mkfs>:
c0007337:	55                   	push   ebp
c0007338:	57                   	push   edi
c0007339:	56                   	push   esi
c000733a:	53                   	push   ebx
c000733b:	bb 0b 00 00 00       	mov    ebx,0xb
c0007340:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007346:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000734d:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007354:	e8 b0 ae ff ff       	call   c0002209 <get_ldnumber>
c0007359:	85 c0                	test   eax,eax
c000735b:	0f 88 ec 10 00 00    	js     c000844d <f_mkfs+0x1116>
c0007361:	8b 14 85 60 dd 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd22a0]
c0007368:	85 d2                	test   edx,edx
c000736a:	74 03                	je     c000736f <f_mkfs+0x38>
c000736c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000736f:	85 f6                	test   esi,esi
c0007371:	75 05                	jne    c0007378 <f_mkfs+0x41>
c0007373:	be 80 93 02 c0       	mov    esi,0xc0029380
c0007378:	83 ec 0c             	sub    esp,0xc
c000737b:	0f b6 c0             	movzx  eax,al
c000737e:	bb 03 00 00 00       	mov    ebx,0x3
c0007383:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007387:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000738b:	e8 49 a8 ff ff       	call   c0001bd9 <disk_initialize>
c0007390:	83 c4 10             	add    esp,0x10
c0007393:	a8 01                	test   al,0x1
c0007395:	0f 85 b2 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c000739b:	bb 0a 00 00 00       	mov    ebx,0xa
c00073a0:	a8 04                	test   al,0x4
c00073a2:	0f 85 a5 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c00073a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ab:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073af:	85 c0                	test   eax,eax
c00073b1:	75 20                	jne    c00073d3 <f_mkfs+0x9c>
c00073b3:	51                   	push   ecx
c00073b4:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073b8:	50                   	push   eax
c00073b9:	6a 03                	push   0x3
c00073bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073bf:	e8 44 a8 ff ff       	call   c0001c08 <disk_ioctl>
c00073c4:	83 c4 10             	add    esp,0x10
c00073c7:	85 c0                	test   eax,eax
c00073c9:	74 08                	je     c00073d3 <f_mkfs+0x9c>
c00073cb:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073d3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073d7:	8d 42 ff             	lea    eax,[edx-0x1]
c00073da:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073df:	77 04                	ja     c00073e5 <f_mkfs+0xae>
c00073e1:	85 c2                	test   edx,eax
c00073e3:	74 08                	je     c00073ed <f_mkfs+0xb6>
c00073e5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ed:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00073f0:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00073f4:	48                   	dec    eax
c00073f5:	3c 01                	cmp    al,0x1
c00073f7:	76 05                	jbe    c00073fe <f_mkfs+0xc7>
c00073f9:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00073fe:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007401:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007405:	48                   	dec    eax
c0007406:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000740b:	77 07                	ja     c0007414 <f_mkfs+0xdd>
c000740d:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007412:	74 08                	je     c000741c <f_mkfs+0xe5>
c0007414:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000741c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000741f:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007425:	77 07                	ja     c000742e <f_mkfs+0xf7>
c0007427:	8d 43 ff             	lea    eax,[ebx-0x1]
c000742a:	85 d8                	test   eax,ebx
c000742c:	74 02                	je     c0007430 <f_mkfs+0xf9>
c000742e:	31 db                	xor    ebx,ebx
c0007430:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000743b:	77 0a                	ja     c0007447 <f_mkfs+0x110>
c000743d:	bb 11 00 00 00       	mov    ebx,0x11
c0007442:	e9 06 10 00 00       	jmp    c000844d <f_mkfs+0x1116>
c0007447:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000744e:	8b 36                	mov    esi,DWORD PTR [esi]
c0007450:	85 ed                	test   ebp,ebp
c0007452:	75 1e                	jne    c0007472 <f_mkfs+0x13b>
c0007454:	83 ec 0c             	sub    esp,0xc
c0007457:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000745e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007463:	50                   	push   eax
c0007464:	e8 f1 0f 00 00       	call   c000845a <ff_memalloc>
c0007469:	83 c4 10             	add    esp,0x10
c000746c:	89 c5                	mov    ebp,eax
c000746e:	85 c0                	test   eax,eax
c0007470:	74 cb                	je     c000743d <f_mkfs+0x106>
c0007472:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000747a:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007482:	52                   	push   edx
c0007483:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007487:	50                   	push   eax
c0007488:	6a 01                	push   0x1
c000748a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000748e:	e8 75 a7 ff ff       	call   c0001c08 <disk_ioctl>
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	85 c0                	test   eax,eax
c0007498:	0f 85 4a 0f 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000749e:	89 f1                	mov    ecx,esi
c00074a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074a8:	83 e1 0f             	and    ecx,0xf
c00074ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074b3:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074b7:	83 e6 08             	and    esi,0x8
c00074ba:	75 56                	jne    c0007512 <f_mkfs+0x1db>
c00074bc:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074c0:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074c4:	83 ff 00             	cmp    edi,0x0
c00074c7:	76 20                	jbe    c00074e9 <f_mkfs+0x1b2>
c00074c9:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074ce:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074d6:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074dc:	83 d7 ff             	adc    edi,0xffffffff
c00074df:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074e3:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00074e7:	eb 21                	jmp    c000750a <f_mkfs+0x1d3>
c00074e9:	ba 3f 00 00 00       	mov    edx,0x3f
c00074ee:	39 f2                	cmp    edx,esi
c00074f0:	19 f8                	sbb    eax,edi
c00074f2:	73 1e                	jae    c0007512 <f_mkfs+0x1db>
c00074f4:	83 c6 c1             	add    esi,0xffffffc1
c00074f7:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00074ff:	83 d7 ff             	adc    edi,0xffffffff
c0007502:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007506:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000750a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007512:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007516:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000751a:	89 04 24             	mov    DWORD PTR [esp],eax
c000751d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007521:	31 c0                	xor    eax,eax
c0007523:	ba 7f 00 00 00       	mov    edx,0x7f
c0007528:	89 c7                	mov    edi,eax
c000752a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000752d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007531:	0f 83 c5 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c0007537:	89 df                	mov    edi,ebx
c0007539:	c1 ef 09             	shr    edi,0x9
c000753c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007540:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007547:	c1 ef 09             	shr    edi,0x9
c000754a:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000754f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007553:	74 29                	je     c000757e <f_mkfs+0x247>
c0007555:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000755b:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007560:	0f 97 c2             	seta   dl
c0007563:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007566:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000756a:	0f 92 c0             	setb   al
c000756d:	08 c2                	or     dl,al
c000756f:	75 5b                	jne    c00075cc <f_mkfs+0x295>
c0007571:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007575:	83 e0 07             	and    eax,0x7
c0007578:	3c 04                	cmp    al,0x4
c000757a:	74 50                	je     c00075cc <f_mkfs+0x295>
c000757c:	eb 1b                	jmp    c0007599 <f_mkfs+0x262>
c000757e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007583:	0f 87 73 0a 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007589:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000758f:	76 08                	jbe    c0007599 <f_mkfs+0x262>
c0007591:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007599:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000759d:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075a1:	83 e0 01             	and    eax,0x1
c00075a4:	80 e1 02             	and    cl,0x2
c00075a7:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ab:	74 0d                	je     c00075ba <f_mkfs+0x283>
c00075ad:	84 c0                	test   al,al
c00075af:	0f 84 53 09 00 00    	je     c0007f08 <f_mkfs+0xbd1>
c00075b5:	e9 12 08 00 00       	jmp    c0007dcc <f_mkfs+0xa95>
c00075ba:	bb 13 00 00 00       	mov    ebx,0x13
c00075bf:	84 c0                	test   al,al
c00075c1:	0f 85 05 08 00 00    	jne    c0007dcc <f_mkfs+0xa95>
c00075c7:	e9 39 0e 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c00075cc:	31 c0                	xor    eax,eax
c00075ce:	ba ff 0f 00 00       	mov    edx,0xfff
c00075d3:	89 c7                	mov    edi,eax
c00075d5:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075d8:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075dc:	0f 83 1a 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00075e2:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00075e8:	77 39                	ja     c0007623 <f_mkfs+0x2ec>
c00075ea:	ba ff ff 07 00       	mov    edx,0x7ffff
c00075ef:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00075f7:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075fa:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075fe:	73 08                	jae    c0007608 <f_mkfs+0x2d1>
c0007600:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007608:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000760d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007610:	b8 00 00 00 00       	mov    eax,0x0
c0007615:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007619:	73 08                	jae    c0007623 <f_mkfs+0x2ec>
c000761b:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000762b:	83 c0 20             	add    eax,0x20
c000762e:	83 d2 00             	adc    edx,0x0
c0007631:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007635:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000763d:	31 d2                	xor    edx,edx
c000763f:	31 ff                	xor    edi,edi
c0007641:	52                   	push   edx
c0007642:	89 fb                	mov    ebx,edi
c0007644:	50                   	push   eax
c0007645:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007649:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000764d:	e8 a2 f2 01 00       	call   c00268f4 <__udivdi3>
c0007652:	83 c4 10             	add    esp,0x10
c0007655:	c1 e0 02             	shl    eax,0x2
c0007658:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000765c:	05 07 02 00 00       	add    eax,0x207
c0007661:	89 f1                	mov    ecx,esi
c0007663:	c1 e8 09             	shr    eax,0x9
c0007666:	83 c1 ff             	add    ecx,0xffffffff
c0007669:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000766d:	83 d3 ff             	adc    ebx,0xffffffff
c0007670:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007674:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007678:	31 d2                	xor    edx,edx
c000767a:	01 c8                	add    eax,ecx
c000767c:	11 da                	adc    edx,ebx
c000767e:	89 c1                	mov    ecx,eax
c0007680:	f7 de                	neg    esi
c0007682:	89 d0                	mov    eax,edx
c0007684:	83 d7 00             	adc    edi,0x0
c0007687:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000768b:	f7 df                	neg    edi
c000768d:	21 f1                	and    ecx,esi
c000768f:	21 f8                	and    eax,edi
c0007691:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007695:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007699:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000769d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076a1:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076a8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ac:	0f ac d0 01          	shrd   eax,edx,0x1
c00076b0:	89 df                	mov    edi,ebx
c00076b2:	d1 ea                	shr    edx,1
c00076b4:	39 c1                	cmp    ecx,eax
c00076b6:	19 d7                	sbb    edi,edx
c00076b8:	0f 83 3e 09 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00076be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076c2:	31 d2                	xor    edx,edx
c00076c4:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076cc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076d3:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076d7:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076db:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076e3:	83 f8 0f             	cmp    eax,0xf
c00076e6:	0f 86 10 09 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c00076ec:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00076f4:	0f 87 02 09 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c00076fa:	31 d2                	xor    edx,edx
c00076fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007700:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007708:	83 c0 07             	add    eax,0x7
c000770b:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007713:	c1 e8 03             	shr    eax,0x3
c0007716:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000771d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007725:	c1 e0 09             	shl    eax,0x9
c0007728:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000772c:	48                   	dec    eax
c000772d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007731:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007735:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007739:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000773d:	31 d2                	xor    edx,edx
c000773f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007743:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000774a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000774e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007753:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007757:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000775b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000775f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007763:	31 ff                	xor    edi,edi
c0007765:	31 f6                	xor    esi,esi
c0007767:	31 db                	xor    ebx,ebx
c0007769:	85 ff                	test   edi,edi
c000776b:	74 05                	je     c0007772 <f_mkfs+0x43b>
c000776d:	4f                   	dec    edi
c000776e:	74 44                	je     c00077b4 <f_mkfs+0x47d>
c0007770:	eb 4f                	jmp    c00077c1 <f_mkfs+0x48a>
c0007772:	83 ec 0c             	sub    esp,0xc
c0007775:	0f b7 c3             	movzx  eax,bx
c0007778:	50                   	push   eax
c0007779:	e8 05 0e 00 00       	call   c0008583 <ff_wtoupper>
c000777e:	83 c4 10             	add    esp,0x10
c0007781:	89 c1                	mov    ecx,eax
c0007783:	8d 53 01             	lea    edx,[ebx+0x1]
c0007786:	66 39 c3             	cmp    bx,ax
c0007789:	75 3e                	jne    c00077c9 <f_mkfs+0x492>
c000778b:	be 01 00 00 00       	mov    esi,0x1
c0007790:	89 df                	mov    edi,ebx
c0007792:	66 01 f7             	add    di,si
c0007795:	75 07                	jne    c000779e <f_mkfs+0x467>
c0007797:	83 fe 7f             	cmp    esi,0x7f
c000779a:	77 31                	ja     c00077cd <f_mkfs+0x496>
c000779c:	eb 16                	jmp    c00077b4 <f_mkfs+0x47d>
c000779e:	83 ec 0c             	sub    esp,0xc
c00077a1:	0f b7 ff             	movzx  edi,di
c00077a4:	57                   	push   edi
c00077a5:	e8 d9 0d 00 00       	call   c0008583 <ff_wtoupper>
c00077aa:	83 c4 10             	add    esp,0x10
c00077ad:	39 c7                	cmp    edi,eax
c00077af:	75 e6                	jne    c0007797 <f_mkfs+0x460>
c00077b1:	46                   	inc    esi
c00077b2:	eb dc                	jmp    c0007790 <f_mkfs+0x459>
c00077b4:	31 c0                	xor    eax,eax
c00077b6:	89 d9                	mov    ecx,ebx
c00077b8:	4e                   	dec    esi
c00077b9:	0f 95 c0             	setne  al
c00077bc:	43                   	inc    ebx
c00077bd:	89 c7                	mov    edi,eax
c00077bf:	eb 14                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c1:	89 f1                	mov    ecx,esi
c00077c3:	01 f3                	add    ebx,esi
c00077c5:	31 ff                	xor    edi,edi
c00077c7:	eb 0c                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c9:	89 d3                	mov    ebx,edx
c00077cb:	eb 08                	jmp    c00077d5 <f_mkfs+0x49e>
c00077cd:	bf 02 00 00 00       	mov    edi,0x2
c00077d2:	83 c9 ff             	or     ecx,0xffffffff
c00077d5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077dc:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077e0:	0f b6 c1             	movzx  eax,cl
c00077e3:	e8 3a a9 ff ff       	call   c0002122 <xsum32>
c00077e8:	66 c1 e9 08          	shr    cx,0x8
c00077ec:	89 c2                	mov    edx,eax
c00077ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f1:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00077f5:	0f b7 c1             	movzx  eax,cx
c00077f8:	e8 25 a9 ff ff       	call   c0002122 <xsum32>
c00077fd:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007802:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007806:	66 85 db             	test   bx,bx
c0007809:	74 1f                	je     c000782a <f_mkfs+0x4f3>
c000780b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780e:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007815:	83 c0 02             	add    eax,0x2
c0007818:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000781e:	39 c2                	cmp    edx,eax
c0007820:	74 08                	je     c000782a <f_mkfs+0x4f3>
c0007822:	89 04 24             	mov    DWORD PTR [esp],eax
c0007825:	e9 3f ff ff ff       	jmp    c0007769 <f_mkfs+0x432>
c000782a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782d:	83 ec 0c             	sub    esp,0xc
c0007830:	05 01 02 00 00       	add    eax,0x201
c0007835:	c1 e8 09             	shr    eax,0x9
c0007838:	50                   	push   eax
c0007839:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000783d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007841:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007845:	55                   	push   ebp
c0007846:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000784a:	e8 a3 a3 ff ff       	call   c0001bf2 <disk_write>
c000784f:	83 c4 20             	add    esp,0x20
c0007852:	85 c0                	test   eax,eax
c0007854:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007857:	0f 85 8b 0b 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000785d:	89 d0                	mov    eax,edx
c000785f:	31 d2                	xor    edx,edx
c0007861:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007865:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007869:	66 85 db             	test   bx,bx
c000786c:	74 04                	je     c0007872 <f_mkfs+0x53b>
c000786e:	31 c0                	xor    eax,eax
c0007870:	eb b0                	jmp    c0007822 <f_mkfs+0x4eb>
c0007872:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007876:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000787a:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000787e:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007884:	31 d2                	xor    edx,edx
c0007886:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007891:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007895:	c1 eb 09             	shr    ebx,0x9
c0007898:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000789f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078a3:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078af:	8d 70 01             	lea    esi,[eax+0x1]
c00078b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078ba:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078c1:	31 d2                	xor    edx,edx
c00078c3:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00078cb:	89 c1                	mov    ecx,eax
c00078cd:	89 e8                	mov    eax,ebp
c00078cf:	e8 e7 a3 ff ff       	call   c0001cbb <mem_set>
c00078d4:	31 c0                	xor    eax,eax
c00078d6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078d9:	76 10                	jbe    c00078eb <f_mkfs+0x5b4>
c00078db:	83 fe 07             	cmp    esi,0x7
c00078de:	76 0b                	jbe    c00078eb <f_mkfs+0x5b4>
c00078e0:	40                   	inc    eax
c00078e1:	83 ee 08             	sub    esi,0x8
c00078e4:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00078e9:	eb eb                	jmp    c00078d6 <f_mkfs+0x59f>
c00078eb:	b2 01                	mov    dl,0x1
c00078ed:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00078f1:	85 f6                	test   esi,esi
c00078f3:	74 0c                	je     c0007901 <f_mkfs+0x5ca>
c00078f5:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f8:	76 07                	jbe    c0007901 <f_mkfs+0x5ca>
c00078fa:	08 11                	or     BYTE PTR [ecx],dl
c00078fc:	4e                   	dec    esi
c00078fd:	d1 e2                	shl    edx,1
c00078ff:	eb f0                	jmp    c00078f1 <f_mkfs+0x5ba>
c0007901:	89 df                	mov    edi,ebx
c0007903:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007907:	76 04                	jbe    c000790d <f_mkfs+0x5d6>
c0007909:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000790d:	83 ec 0c             	sub    esp,0xc
c0007910:	57                   	push   edi
c0007911:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007915:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007919:	55                   	push   ebp
c000791a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000791e:	e8 cf a2 ff ff       	call   c0001bf2 <disk_write>
c0007923:	83 c4 20             	add    esp,0x20
c0007926:	85 c0                	test   eax,eax
c0007928:	0f 85 ba 0a 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000792e:	31 d2                	xor    edx,edx
c0007930:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007934:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007938:	29 fb                	sub    ebx,edi
c000793a:	0f 85 7a ff ff ff    	jne    c00078ba <f_mkfs+0x583>
c0007940:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007944:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000794c:	31 f6                	xor    esi,esi
c000794e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007952:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007955:	31 d2                	xor    edx,edx
c0007957:	89 e8                	mov    eax,ebp
c0007959:	e8 5d a3 ff ff       	call   c0001cbb <mem_set>
c000795e:	31 c9                	xor    ecx,ecx
c0007960:	85 db                	test   ebx,ebx
c0007962:	75 40                	jne    c00079a4 <f_mkfs+0x66d>
c0007964:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007969:	89 e8                	mov    eax,ebp
c000796b:	bb 02 00 00 00       	mov    ebx,0x2
c0007970:	e8 28 a3 ff ff       	call   c0001c9d <st_dword>
c0007975:	8d 45 04             	lea    eax,[ebp+0x4]
c0007978:	83 ca ff             	or     edx,0xffffffff
c000797b:	e8 1d a3 ff ff       	call   c0001c9d <st_dword>
c0007980:	b9 08 00 00 00       	mov    ecx,0x8
c0007985:	eb 1d                	jmp    c00079a4 <f_mkfs+0x66d>
c0007987:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000798a:	76 3b                	jbe    c00079c7 <f_mkfs+0x690>
c000798c:	43                   	inc    ebx
c000798d:	83 fe 01             	cmp    esi,0x1
c0007990:	89 da                	mov    edx,ebx
c0007992:	77 03                	ja     c0007997 <f_mkfs+0x660>
c0007994:	83 ca ff             	or     edx,0xffffffff
c0007997:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000799b:	4e                   	dec    esi
c000799c:	e8 fc a2 ff ff       	call   c0001c9d <st_dword>
c00079a1:	83 c1 04             	add    ecx,0x4
c00079a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079a8:	85 f6                	test   esi,esi
c00079aa:	75 db                	jne    c0007987 <f_mkfs+0x650>
c00079ac:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079b1:	77 14                	ja     c00079c7 <f_mkfs+0x690>
c00079b3:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079b7:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079be:	85 f6                	test   esi,esi
c00079c0:	74 05                	je     c00079c7 <f_mkfs+0x690>
c00079c2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c5:	77 dd                	ja     c00079a4 <f_mkfs+0x66d>
c00079c7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079cf:	39 cf                	cmp    edi,ecx
c00079d1:	76 02                	jbe    c00079d5 <f_mkfs+0x69e>
c00079d3:	89 cf                	mov    edi,ecx
c00079d5:	83 ec 0c             	sub    esp,0xc
c00079d8:	57                   	push   edi
c00079d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079e1:	55                   	push   ebp
c00079e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e6:	e8 07 a2 ff ff       	call   c0001bf2 <disk_write>
c00079eb:	83 c4 20             	add    esp,0x20
c00079ee:	85 c0                	test   eax,eax
c00079f0:	0f 85 f2 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00079f6:	31 d2                	xor    edx,edx
c00079f8:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00079fc:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a00:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a04:	0f 85 48 ff ff ff    	jne    c0007952 <f_mkfs+0x61b>
c0007a0a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a0d:	31 d2                	xor    edx,edx
c0007a0f:	89 e8                	mov    eax,ebp
c0007a11:	31 ff                	xor    edi,edi
c0007a13:	e8 a3 a2 ff ff       	call   c0001cbb <mem_set>
c0007a18:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a1b:	ba 02 00 00 00       	mov    edx,0x2
c0007a20:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a24:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a28:	e8 70 a2 ff ff       	call   c0001c9d <st_dword>
c0007a2d:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a30:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a34:	e8 64 a2 ff ff       	call   c0001c9d <st_dword>
c0007a39:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a3c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a40:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a44:	e8 54 a2 ff ff       	call   c0001c9d <st_dword>
c0007a49:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a54:	83 c2 02             	add    edx,0x2
c0007a57:	e8 41 a2 ff ff       	call   c0001c9d <st_dword>
c0007a5c:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a5f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a63:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a67:	e8 31 a2 ff ff       	call   c0001c9d <st_dword>
c0007a6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a70:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a75:	89 c6                	mov    esi,eax
c0007a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a7b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a82:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007a86:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007a89:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a8d:	39 cb                	cmp    ebx,ecx
c0007a8f:	76 02                	jbe    c0007a93 <f_mkfs+0x75c>
c0007a91:	89 cb                	mov    ebx,ecx
c0007a93:	83 ec 0c             	sub    esp,0xc
c0007a96:	53                   	push   ebx
c0007a97:	57                   	push   edi
c0007a98:	56                   	push   esi
c0007a99:	55                   	push   ebp
c0007a9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a9e:	e8 4f a1 ff ff       	call   c0001bf2 <disk_write>
c0007aa3:	83 c4 20             	add    esp,0x20
c0007aa6:	85 c0                	test   eax,eax
c0007aa8:	0f 85 3a 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007aae:	31 d2                	xor    edx,edx
c0007ab0:	b9 00 02 00 00       	mov    ecx,0x200
c0007ab5:	89 e8                	mov    eax,ebp
c0007ab7:	e8 ff a1 ff ff       	call   c0001cbb <mem_set>
c0007abc:	31 d2                	xor    edx,edx
c0007abe:	01 de                	add    esi,ebx
c0007ac0:	11 d7                	adc    edi,edx
c0007ac2:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007ac5:	75 bf                	jne    c0007a86 <f_mkfs+0x74f>
c0007ac7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007acb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007acf:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007ad7:	b9 00 02 00 00       	mov    ecx,0x200
c0007adc:	31 d2                	xor    edx,edx
c0007ade:	89 e8                	mov    eax,ebp
c0007ae0:	e8 d6 a1 ff ff       	call   c0001cbb <mem_set>
c0007ae5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007aea:	ba 60 94 02 c0       	mov    edx,0xc0029460
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 b0 a1 ff ff       	call   c0001ca6 <mem_cpy>
c0007af6:	8d 45 40             	lea    eax,[ebp+0x40]
c0007af9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007afd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b01:	e8 9a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b06:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b0a:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b0d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b11:	e8 8a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b16:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b19:	ba 20 00 00 00       	mov    edx,0x20
c0007b1e:	e8 7a a1 ff ff       	call   c0001c9d <st_dword>
c0007b23:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b2b:	e8 6d a1 ff ff       	call   c0001c9d <st_dword>
c0007b30:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b34:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b38:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b3c:	e8 5c a1 ff ff       	call   c0001c9d <st_dword>
c0007b41:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b44:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b48:	e8 50 a1 ff ff       	call   c0001c9d <st_dword>
c0007b4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b51:	8d 50 02             	lea    edx,[eax+0x2]
c0007b54:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b57:	e8 41 a1 ff ff       	call   c0001c9d <st_dword>
c0007b5c:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b5f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b64:	e8 34 a1 ff ff       	call   c0001c9d <st_dword>
c0007b69:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b6c:	ba 00 01 00 00       	mov    edx,0x100
c0007b71:	e8 23 a1 ff ff       	call   c0001c99 <st_word>
c0007b76:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b7a:	b8 0a 00 00 00       	mov    eax,0xa
c0007b7f:	48                   	dec    eax
c0007b80:	74 05                	je     c0007b87 <f_mkfs+0x850>
c0007b82:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b85:	eb f8                	jmp    c0007b7f <f_mkfs+0x848>
c0007b87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b8b:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007b8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b93:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007b97:	74 05                	je     c0007b9e <f_mkfs+0x867>
c0007b99:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007b9c:	eb f5                	jmp    c0007b93 <f_mkfs+0x85c>
c0007b9e:	8d 45 78             	lea    eax,[ebp+0x78]
c0007ba1:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ba6:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bac:	31 db                	xor    ebx,ebx
c0007bae:	e8 e6 a0 ff ff       	call   c0001c99 <st_word>
c0007bb3:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bc1:	e8 d3 a0 ff ff       	call   c0001c99 <st_word>
c0007bc6:	31 c9                	xor    ecx,ecx
c0007bc8:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007bcb:	83 f8 01             	cmp    eax,0x1
c0007bce:	76 13                	jbe    c0007be3 <f_mkfs+0x8ac>
c0007bd0:	83 f9 70             	cmp    ecx,0x70
c0007bd3:	74 0e                	je     c0007be3 <f_mkfs+0x8ac>
c0007bd5:	89 da                	mov    edx,ebx
c0007bd7:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bdc:	e8 41 a5 ff ff       	call   c0002122 <xsum32>
c0007be1:	89 c3                	mov    ebx,eax
c0007be3:	41                   	inc    ecx
c0007be4:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007bea:	75 dc                	jne    c0007bc8 <f_mkfs+0x891>
c0007bec:	89 f0                	mov    eax,esi
c0007bee:	89 fa                	mov    edx,edi
c0007bf0:	83 c0 01             	add    eax,0x1
c0007bf3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007bf7:	83 d2 00             	adc    edx,0x0
c0007bfa:	83 ec 0c             	sub    esp,0xc
c0007bfd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c01:	6a 01                	push   0x1
c0007c03:	57                   	push   edi
c0007c04:	56                   	push   esi
c0007c05:	55                   	push   ebp
c0007c06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c0a:	e8 e3 9f ff ff       	call   c0001bf2 <disk_write>
c0007c0f:	83 c4 20             	add    esp,0x20
c0007c12:	85 c0                	test   eax,eax
c0007c14:	0f 85 ce 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	b9 00 02 00 00       	mov    ecx,0x200
c0007c21:	89 e8                	mov    eax,ebp
c0007c23:	e8 93 a0 ff ff       	call   c0001cbb <mem_set>
c0007c28:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c30:	e8 64 a0 ff ff       	call   c0001c99 <st_word>
c0007c35:	89 f0                	mov    eax,esi
c0007c37:	89 fa                	mov    edx,edi
c0007c39:	83 c0 09             	add    eax,0x9
c0007c3c:	83 d2 00             	adc    edx,0x0
c0007c3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c46:	31 c9                	xor    ecx,ecx
c0007c48:	41                   	inc    ecx
c0007c49:	89 da                	mov    edx,ebx
c0007c4b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c50:	e8 cd a4 ff ff       	call   c0002122 <xsum32>
c0007c55:	89 c3                	mov    ebx,eax
c0007c57:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c5d:	75 e9                	jne    c0007c48 <f_mkfs+0x911>
c0007c5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c63:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c67:	83 c0 01             	add    eax,0x1
c0007c6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c6e:	83 d2 00             	adc    edx,0x0
c0007c71:	83 ec 0c             	sub    esp,0xc
c0007c74:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c78:	6a 01                	push   0x1
c0007c7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c82:	55                   	push   ebp
c0007c83:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c87:	e8 66 9f ff ff       	call   c0001bf2 <disk_write>
c0007c8c:	83 c4 20             	add    esp,0x20
c0007c8f:	85 c0                	test   eax,eax
c0007c91:	0f 85 51 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c9b:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007c9f:	75 09                	jne    c0007caa <f_mkfs+0x973>
c0007ca1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ca4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ca8:	74 12                	je     c0007cbc <f_mkfs+0x985>
c0007caa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cb2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cb6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cba:	eb 8a                	jmp    c0007c46 <f_mkfs+0x90f>
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	b9 00 02 00 00       	mov    ecx,0x200
c0007cc3:	89 e8                	mov    eax,ebp
c0007cc5:	e8 f1 9f ff ff       	call   c0001cbb <mem_set>
c0007cca:	83 c6 0b             	add    esi,0xb
c0007ccd:	83 d7 00             	adc    edi,0x0
c0007cd0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cd4:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cd8:	31 c9                	xor    ecx,ecx
c0007cda:	41                   	inc    ecx
c0007cdb:	89 da                	mov    edx,ebx
c0007cdd:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ce2:	e8 3b a4 ff ff       	call   c0002122 <xsum32>
c0007ce7:	89 c3                	mov    ebx,eax
c0007ce9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007cef:	75 e9                	jne    c0007cda <f_mkfs+0x9a3>
c0007cf1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007cf4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007cf8:	83 c6 01             	add    esi,0x1
c0007cfb:	83 d7 00             	adc    edi,0x0
c0007cfe:	83 ec 0c             	sub    esp,0xc
c0007d01:	6a 01                	push   0x1
c0007d03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d0b:	55                   	push   ebp
c0007d0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d10:	e8 dd 9e ff ff       	call   c0001bf2 <disk_write>
c0007d15:	83 c4 20             	add    esp,0x20
c0007d18:	85 c0                	test   eax,eax
c0007d1a:	0f 85 c8 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d20:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d24:	75 06                	jne    c0007d2c <f_mkfs+0x9f5>
c0007d26:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d2a:	74 09                	je     c0007d35 <f_mkfs+0x9fe>
c0007d2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d2f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d33:	eb a3                	jmp    c0007cd8 <f_mkfs+0x9a1>
c0007d35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d39:	89 da                	mov    edx,ebx
c0007d3b:	01 e8                	add    eax,ebp
c0007d3d:	e8 5b 9f ff ff       	call   c0001c9d <st_dword>
c0007d42:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d47:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d4f:	75 e4                	jne    c0007d35 <f_mkfs+0x9fe>
c0007d51:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d54:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d58:	83 c6 02             	add    esi,0x2
c0007d5b:	83 d7 00             	adc    edi,0x0
c0007d5e:	83 ec 0c             	sub    esp,0xc
c0007d61:	6a 01                	push   0x1
c0007d63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d6b:	55                   	push   ebp
c0007d6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d70:	e8 7d 9e ff ff       	call   c0001bf2 <disk_write>
c0007d75:	83 c4 20             	add    esp,0x20
c0007d78:	85 c0                	test   eax,eax
c0007d7a:	0f 85 68 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d80:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d85:	74 0d                	je     c0007d94 <f_mkfs+0xa5d>
c0007d87:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007d8f:	e9 43 fd ff ff       	jmp    c0007ad7 <f_mkfs+0x7a0>
c0007d94:	b1 07                	mov    cl,0x7
c0007d96:	e9 e3 05 00 00       	jmp    c000837e <f_mkfs+0x1047>
c0007d9b:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007da0:	0f 85 4f 02 00 00    	jne    c0007ff5 <f_mkfs+0xcbe>
c0007da6:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dab:	0f 86 22 02 00 00    	jbe    c0007fd3 <f_mkfs+0xc9c>
c0007db1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db6:	0f 85 81 06 00 00    	jne    c000843d <f_mkfs+0x1106>
c0007dbc:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc3:	83 f8 40             	cmp    eax,0x40
c0007dc6:	0f 87 51 06 00 00    	ja     c000841d <f_mkfs+0x10e6>
c0007dcc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dd0:	85 ff                	test   edi,edi
c0007dd2:	75 1c                	jne    c0007df0 <f_mkfs+0xab9>
c0007dd4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007dd7:	ba 60 93 02 c0       	mov    edx,0xc0029360
c0007ddc:	c1 e9 0c             	shr    ecx,0xc
c0007ddf:	bf 01 00 00 00       	mov    edi,0x1
c0007de4:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007de7:	66 85 c0             	test   ax,ax
c0007dea:	0f 85 95 01 00 00    	jne    c0007f85 <f_mkfs+0xc4e>
c0007df0:	31 d2                	xor    edx,edx
c0007df2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007df5:	f7 f7                	div    edi
c0007df7:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfc:	0f 86 95 01 00 00    	jbe    c0007f97 <f_mkfs+0xc60>
c0007e02:	83 c0 02             	add    eax,0x2
c0007e05:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e0a:	01 c0                	add    eax,eax
c0007e0c:	05 ff 01 00 00       	add    eax,0x1ff
c0007e11:	be 01 00 00 00       	mov    esi,0x1
c0007e16:	c1 e8 09             	shr    eax,0x9
c0007e19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e21:	c1 e0 05             	shl    eax,0x5
c0007e24:	c1 e8 09             	shr    eax,0x9
c0007e27:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e2b:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e30:	31 d2                	xor    edx,edx
c0007e32:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e36:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e3a:	89 f0                	mov    eax,esi
c0007e3c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e40:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e44:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e48:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e57:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e5b:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e5f:	31 db                	xor    ebx,ebx
c0007e61:	01 c8                	add    eax,ecx
c0007e63:	11 da                	adc    edx,ebx
c0007e65:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e69:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e6d:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e71:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e75:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e79:	f7 da                	neg    edx
c0007e7b:	21 d1                	and    ecx,edx
c0007e7d:	29 d9                	sub    ecx,ebx
c0007e7f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e84:	0f 85 20 01 00 00    	jne    c0007faa <f_mkfs+0xc73>
c0007e8a:	31 db                	xor    ebx,ebx
c0007e8c:	01 ce                	add    esi,ecx
c0007e8e:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007e92:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007e96:	31 d2                	xor    edx,edx
c0007e98:	89 f8                	mov    eax,edi
c0007e9a:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007e9e:	c1 e0 04             	shl    eax,0x4
c0007ea1:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ea5:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ea9:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ead:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eb1:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eb4:	19 d3                	sbb    ebx,edx
c0007eb6:	0f 82 40 01 00 00    	jb     c0007ffc <f_mkfs+0xcc5>
c0007ebc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ebf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec3:	89 c8                	mov    eax,ecx
c0007ec5:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007eca:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ece:	29 f0                	sub    eax,esi
c0007ed0:	29 d0                	sub    eax,edx
c0007ed2:	31 d2                	xor    edx,edx
c0007ed4:	f7 f7                	div    edi
c0007ed6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007edb:	89 c3                	mov    ebx,eax
c0007edd:	0f 85 b8 fe ff ff    	jne    c0007d9b <f_mkfs+0xa64>
c0007ee3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ee8:	0f 87 1d 01 00 00    	ja     c000800b <f_mkfs+0xcd4>
c0007eee:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ef3:	0f 85 03 01 00 00    	jne    c0007ffc <f_mkfs+0xcc5>
c0007ef9:	83 ff 01             	cmp    edi,0x1
c0007efc:	0f 86 fa 00 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c0007f02:	d1 ef                	shr    edi,1
c0007f04:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f08:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f0c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f0f:	85 db                	test   ebx,ebx
c0007f11:	75 2d                	jne    c0007f40 <f_mkfs+0xc09>
c0007f13:	89 cb                	mov    ebx,ecx
c0007f15:	ba 70 93 02 c0       	mov    edx,0xc0029370
c0007f1a:	c1 eb 11             	shr    ebx,0x11
c0007f1d:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f25:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f28:	66 85 c0             	test   ax,ax
c0007f2b:	74 11                	je     c0007f3e <f_mkfs+0xc07>
c0007f2d:	83 c2 02             	add    edx,0x2
c0007f30:	39 d8                	cmp    eax,ebx
c0007f32:	77 0a                	ja     c0007f3e <f_mkfs+0xc07>
c0007f34:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f38:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f3c:	eb e7                	jmp    c0007f25 <f_mkfs+0xbee>
c0007f3e:	31 db                	xor    ebx,ebx
c0007f40:	31 d2                	xor    edx,edx
c0007f42:	89 c8                	mov    eax,ecx
c0007f44:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f48:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f4f:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f54:	c1 ea 09             	shr    edx,0x9
c0007f57:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f5c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f60:	0f 87 96 00 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007f66:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f6a:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f72:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f76:	be 20 00 00 00       	mov    esi,0x20
c0007f7b:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f80:	e9 a6 fe ff ff       	jmp    c0007e2b <f_mkfs+0xaf4>
c0007f85:	83 c2 02             	add    edx,0x2
c0007f88:	39 c8                	cmp    eax,ecx
c0007f8a:	0f 87 60 fe ff ff    	ja     c0007df0 <f_mkfs+0xab9>
c0007f90:	01 ff                	add    edi,edi
c0007f92:	e9 4d fe ff ff       	jmp    c0007de4 <f_mkfs+0xaad>
c0007f97:	8d 04 40             	lea    eax,[eax+eax*2]
c0007f9a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f9f:	40                   	inc    eax
c0007fa0:	d1 e8                	shr    eax,1
c0007fa2:	83 c0 03             	add    eax,0x3
c0007fa5:	e9 62 fe ff ff       	jmp    c0007e0c <f_mkfs+0xad5>
c0007faa:	31 d2                	xor    edx,edx
c0007fac:	89 c8                	mov    eax,ecx
c0007fae:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fb2:	85 d2                	test   edx,edx
c0007fb4:	74 0c                	je     c0007fc2 <f_mkfs+0xc8b>
c0007fb6:	49                   	dec    ecx
c0007fb7:	46                   	inc    esi
c0007fb8:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fbd:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fc2:	89 c8                	mov    eax,ecx
c0007fc4:	31 d2                	xor    edx,edx
c0007fc6:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fca:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fce:	e9 c3 fe ff ff       	jmp    c0007e96 <f_mkfs+0xb5f>
c0007fd3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007fd8:	77 31                	ja     c000800b <f_mkfs+0xcd4>
c0007fda:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fdf:	75 1b                	jne    c0007ffc <f_mkfs+0xcc5>
c0007fe1:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007fe4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007fe8:	3d 80 00 00 00       	cmp    eax,0x80
c0007fed:	0f 86 d9 fd ff ff    	jbe    c0007dcc <f_mkfs+0xa95>
c0007ff3:	eb 07                	jmp    c0007ffc <f_mkfs+0xcc5>
c0007ff5:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ffa:	76 0a                	jbe    c0008006 <f_mkfs+0xccf>
c0007ffc:	bb 0e 00 00 00       	mov    ebx,0xe
c0008001:	e9 ff 03 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c0008006:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000800b:	31 d2                	xor    edx,edx
c000800d:	b9 00 02 00 00       	mov    ecx,0x200
c0008012:	89 e8                	mov    eax,ebp
c0008014:	e8 a2 9c ff ff       	call   c0001cbb <mem_set>
c0008019:	b9 0b 00 00 00       	mov    ecx,0xb
c000801e:	ba 82 94 02 c0       	mov    edx,0xc0029482
c0008023:	89 e8                	mov    eax,ebp
c0008025:	e8 7c 9c ff ff       	call   c0001ca6 <mem_cpy>
c000802a:	8d 45 0b             	lea    eax,[ebp+0xb]
c000802d:	ba 00 02 00 00       	mov    edx,0x200
c0008032:	e8 62 9c ff ff       	call   c0001c99 <st_word>
c0008037:	89 f8                	mov    eax,edi
c0008039:	0f b7 d6             	movzx  edx,si
c000803c:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000803f:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008042:	e8 52 9c ff ff       	call   c0001c99 <st_word>
c0008047:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000804b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008050:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008053:	75 08                	jne    c000805d <f_mkfs+0xd26>
c0008055:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000805d:	8d 45 11             	lea    eax,[ebp+0x11]
c0008060:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008064:	e8 30 9c ff ff       	call   c0001c99 <st_word>
c0008069:	b8 ff ff 00 00       	mov    eax,0xffff
c000806e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0008072:	39 d0                	cmp    eax,edx
c0008074:	b8 00 00 00 00       	mov    eax,0x0
c0008079:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c000807d:	72 0a                	jb     c0008089 <f_mkfs+0xd52>
c000807f:	8d 45 13             	lea    eax,[ebp+0x13]
c0008082:	e8 12 9c ff ff       	call   c0001c99 <st_word>
c0008087:	eb 08                	jmp    c0008091 <f_mkfs+0xd5a>
c0008089:	8d 45 20             	lea    eax,[ebp+0x20]
c000808c:	e8 0c 9c ff ff       	call   c0001c9d <st_dword>
c0008091:	8d 45 18             	lea    eax,[ebp+0x18]
c0008094:	ba 3f 00 00 00       	mov    edx,0x3f
c0008099:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c000809d:	e8 f7 9b ff ff       	call   c0001c99 <st_word>
c00080a2:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080a5:	ba ff 00 00 00       	mov    edx,0xff
c00080aa:	e8 ea 9b ff ff       	call   c0001c99 <st_word>
c00080af:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080b6:	e8 e2 9b ff ff       	call   c0001c9d <st_dword>
c00080bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c0:	75 57                	jne    c0008119 <f_mkfs+0xde2>
c00080c2:	8d 45 43             	lea    eax,[ebp+0x43]
c00080c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00080ca:	e8 ce 9b ff ff       	call   c0001c9d <st_dword>
c00080cf:	8d 45 24             	lea    eax,[ebp+0x24]
c00080d2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080d6:	e8 c2 9b ff ff       	call   c0001c9d <st_dword>
c00080db:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080de:	ba 02 00 00 00       	mov    edx,0x2
c00080e3:	e8 b5 9b ff ff       	call   c0001c9d <st_dword>
c00080e8:	8d 45 30             	lea    eax,[ebp+0x30]
c00080eb:	ba 01 00 00 00       	mov    edx,0x1
c00080f0:	e8 a4 9b ff ff       	call   c0001c99 <st_word>
c00080f5:	8d 45 32             	lea    eax,[ebp+0x32]
c00080f8:	ba 06 00 00 00       	mov    edx,0x6
c00080fd:	e8 97 9b ff ff       	call   c0001c99 <st_word>
c0008102:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008106:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000810a:	8d 45 47             	lea    eax,[ebp+0x47]
c000810d:	b9 13 00 00 00       	mov    ecx,0x13
c0008112:	ba 8e 94 02 c0       	mov    edx,0xc002948e
c0008117:	eb 2f                	jmp    c0008148 <f_mkfs+0xe11>
c0008119:	8d 45 27             	lea    eax,[ebp+0x27]
c000811c:	ba 00 00 21 50       	mov    edx,0x50210000
c0008121:	e8 77 9b ff ff       	call   c0001c9d <st_dword>
c0008126:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000812b:	8d 45 16             	lea    eax,[ebp+0x16]
c000812e:	e8 66 9b ff ff       	call   c0001c99 <st_word>
c0008133:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008137:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000813b:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000813e:	b9 13 00 00 00       	mov    ecx,0x13
c0008143:	ba a2 94 02 c0       	mov    edx,0xc00294a2
c0008148:	e8 59 9b ff ff       	call   c0001ca6 <mem_cpy>
c000814d:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008153:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008158:	89 f0                	mov    eax,esi
c000815a:	e8 3a 9b ff ff       	call   c0001c99 <st_word>
c000815f:	83 ec 0c             	sub    esp,0xc
c0008162:	6a 01                	push   0x1
c0008164:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008168:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000816c:	55                   	push   ebp
c000816d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008171:	e8 7c 9a ff ff       	call   c0001bf2 <disk_write>
c0008176:	83 c4 20             	add    esp,0x20
c0008179:	85 c0                	test   eax,eax
c000817b:	0f 85 67 02 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0008181:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008186:	0f 85 b7 00 00 00    	jne    c0008243 <f_mkfs+0xf0c>
c000818c:	83 ec 0c             	sub    esp,0xc
c000818f:	6a 01                	push   0x1
c0008191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008195:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008199:	83 c0 06             	add    eax,0x6
c000819c:	83 d2 00             	adc    edx,0x0
c000819f:	52                   	push   edx
c00081a0:	50                   	push   eax
c00081a1:	55                   	push   ebp
c00081a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081a6:	e8 47 9a ff ff       	call   c0001bf2 <disk_write>
c00081ab:	83 c4 20             	add    esp,0x20
c00081ae:	b9 00 02 00 00       	mov    ecx,0x200
c00081b3:	31 d2                	xor    edx,edx
c00081b5:	89 e8                	mov    eax,ebp
c00081b7:	e8 ff 9a ff ff       	call   c0001cbb <mem_set>
c00081bc:	ba 52 52 61 41       	mov    edx,0x41615252
c00081c1:	89 e8                	mov    eax,ebp
c00081c3:	e8 d5 9a ff ff       	call   c0001c9d <st_dword>
c00081c8:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081ce:	ba 72 72 41 61       	mov    edx,0x61417272
c00081d3:	e8 c5 9a ff ff       	call   c0001c9d <st_dword>
c00081d8:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081db:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081e1:	e8 b7 9a ff ff       	call   c0001c9d <st_dword>
c00081e6:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c00081ec:	ba 02 00 00 00       	mov    edx,0x2
c00081f1:	e8 a7 9a ff ff       	call   c0001c9d <st_dword>
c00081f6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081fb:	89 f0                	mov    eax,esi
c00081fd:	e8 97 9a ff ff       	call   c0001c99 <st_word>
c0008202:	83 ec 0c             	sub    esp,0xc
c0008205:	6a 01                	push   0x1
c0008207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000820b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000820f:	83 c0 07             	add    eax,0x7
c0008212:	83 d2 00             	adc    edx,0x0
c0008215:	52                   	push   edx
c0008216:	50                   	push   eax
c0008217:	55                   	push   ebp
c0008218:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000821c:	e8 d1 99 ff ff       	call   c0001bf2 <disk_write>
c0008221:	83 c4 14             	add    esp,0x14
c0008224:	6a 01                	push   0x1
c0008226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000822a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000822e:	83 c0 01             	add    eax,0x1
c0008231:	83 d2 00             	adc    edx,0x0
c0008234:	52                   	push   edx
c0008235:	50                   	push   eax
c0008236:	55                   	push   ebp
c0008237:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000823b:	e8 b2 99 ff ff       	call   c0001bf2 <disk_write>
c0008240:	83 c4 20             	add    esp,0x20
c0008243:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000824a:	31 d2                	xor    edx,edx
c000824c:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008252:	31 db                	xor    ebx,ebx
c0008254:	89 e8                	mov    eax,ebp
c0008256:	e8 60 9a ff ff       	call   c0001cbb <mem_set>
c000825b:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008260:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008267:	0f 94 c3             	sete   bl
c000826a:	4b                   	dec    ebx
c000826b:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008271:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008277:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000827c:	75 21                	jne    c000829f <f_mkfs+0xf68>
c000827e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008283:	89 e8                	mov    eax,ebp
c0008285:	e8 13 9a ff ff       	call   c0001c9d <st_dword>
c000828a:	8d 45 04             	lea    eax,[ebp+0x4]
c000828d:	83 ca ff             	or     edx,0xffffffff
c0008290:	e8 08 9a ff ff       	call   c0001c9d <st_dword>
c0008295:	8d 45 08             	lea    eax,[ebp+0x8]
c0008298:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000829d:	eb 04                	jmp    c00082a3 <f_mkfs+0xf6c>
c000829f:	89 da                	mov    edx,ebx
c00082a1:	89 e8                	mov    eax,ebp
c00082a3:	e8 f5 99 ff ff       	call   c0001c9d <st_dword>
c00082a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082b8:	39 ce                	cmp    esi,ecx
c00082ba:	76 02                	jbe    c00082be <f_mkfs+0xf87>
c00082bc:	89 ce                	mov    esi,ecx
c00082be:	83 ec 0c             	sub    esp,0xc
c00082c1:	56                   	push   esi
c00082c2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082c6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082ca:	55                   	push   ebp
c00082cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082cf:	e8 1e 99 ff ff       	call   c0001bf2 <disk_write>
c00082d4:	83 c4 20             	add    esp,0x20
c00082d7:	85 c0                	test   eax,eax
c00082d9:	0f 85 09 01 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00082df:	31 d2                	xor    edx,edx
c00082e1:	b9 00 02 00 00       	mov    ecx,0x200
c00082e6:	89 e8                	mov    eax,ebp
c00082e8:	e8 ce 99 ff ff       	call   c0001cbb <mem_set>
c00082ed:	31 d2                	xor    edx,edx
c00082ef:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00082f3:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00082f7:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00082fb:	75 b3                	jne    c00082b0 <f_mkfs+0xf79>
c00082fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008300:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008307:	40                   	inc    eax
c0008308:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000830c:	0f 87 65 ff ff ff    	ja     c0008277 <f_mkfs+0xf40>
c0008312:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008317:	74 04                	je     c000831d <f_mkfs+0xfe6>
c0008319:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000831d:	89 fb                	mov    ebx,edi
c000831f:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008323:	76 04                	jbe    c0008329 <f_mkfs+0xff2>
c0008325:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	53                   	push   ebx
c000832d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008331:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008335:	55                   	push   ebp
c0008336:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000833a:	e8 b3 98 ff ff       	call   c0001bf2 <disk_write>
c000833f:	83 c4 20             	add    esp,0x20
c0008342:	85 c0                	test   eax,eax
c0008344:	0f 85 9e 00 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000834a:	31 d2                	xor    edx,edx
c000834c:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008350:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008354:	29 df                	sub    edi,ebx
c0008356:	75 c5                	jne    c000831d <f_mkfs+0xfe6>
c0008358:	b1 0c                	mov    cl,0xc
c000835a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000835f:	74 1d                	je     c000837e <f_mkfs+0x1047>
c0008361:	b8 ff ff 00 00       	mov    eax,0xffff
c0008366:	b1 06                	mov    cl,0x6
c0008368:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000836c:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008370:	72 0c                	jb     c000837e <f_mkfs+0x1047>
c0008372:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008377:	0f 94 c1             	sete   cl
c000837a:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000837e:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008383:	75 4c                	jne    c00083d1 <f_mkfs+0x109a>
c0008385:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008389:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000838d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008394:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000839b:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083a6:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083b1:	0f b6 c9             	movzx  ecx,cl
c00083b4:	83 ec 0c             	sub    esp,0xc
c00083b7:	55                   	push   ebp
c00083b8:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083c3:	e8 2f c2 ff ff       	call   c00045f7 <create_partition>
c00083c8:	83 c4 10             	add    esp,0x10
c00083cb:	89 c3                	mov    ebx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	75 34                	jne    c0008405 <f_mkfs+0x10ce>
c00083d1:	31 db                	xor    ebx,ebx
c00083d3:	50                   	push   eax
c00083d4:	6a 00                	push   0x0
c00083d6:	6a 00                	push   0x0
c00083d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083dc:	e8 27 98 ff ff       	call   c0001c08 <disk_ioctl>
c00083e1:	83 c4 10             	add    esp,0x10
c00083e4:	85 c0                	test   eax,eax
c00083e6:	74 1d                	je     c0008405 <f_mkfs+0x10ce>
c00083e8:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00083f0:	75 0c                	jne    c00083fe <f_mkfs+0x10c7>
c00083f2:	83 ec 0c             	sub    esp,0xc
c00083f5:	55                   	push   ebp
c00083f6:	e8 75 00 00 00       	call   c0008470 <ff_memfree>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	bb 01 00 00 00       	mov    ebx,0x1
c0008403:	eb 48                	jmp    c000844d <f_mkfs+0x1116>
c0008405:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840d:	75 3e                	jne    c000844d <f_mkfs+0x1116>
c000840f:	83 ec 0c             	sub    esp,0xc
c0008412:	55                   	push   ebp
c0008413:	e8 58 00 00 00       	call   c0008470 <ff_memfree>
c0008418:	83 c4 10             	add    esp,0x10
c000841b:	eb 30                	jmp    c000844d <f_mkfs+0x1116>
c000841d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008422:	0f 85 eb fa ff ff    	jne    c0007f13 <f_mkfs+0xbdc>
c0008428:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000842c:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008432:	0f 86 b8 f9 ff ff    	jbe    c0007df0 <f_mkfs+0xab9>
c0008438:	e9 bf fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000843d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008442:	0f 85 c0 fa ff ff    	jne    c0007f08 <f_mkfs+0xbd1>
c0008448:	e9 af fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000844d:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008453:	89 d8                	mov    eax,ebx
c0008455:	5b                   	pop    ebx
c0008456:	5e                   	pop    esi
c0008457:	5f                   	pop    edi
c0008458:	5d                   	pop    ebp
c0008459:	c3                   	ret    

c000845a <ff_memalloc>:
c000845a:	83 ec 0c             	sub    esp,0xc
c000845d:	83 ec 0c             	sub    esp,0xc
c0008460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008464:	e8 30 71 00 00       	call   c000f599 <malloc>
c0008469:	83 c4 10             	add    esp,0x10
c000846c:	83 c4 0c             	add    esp,0xc
c000846f:	c3                   	ret    

c0008470 <ff_memfree>:
c0008470:	83 ec 0c             	sub    esp,0xc
c0008473:	83 ec 0c             	sub    esp,0xc
c0008476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000847a:	e8 2a 71 00 00       	call   c000f5a9 <free>
c000847f:	83 c4 10             	add    esp,0x10
c0008482:	90                   	nop
c0008483:	83 c4 0c             	add    esp,0xc
c0008486:	c3                   	ret    

c0008487 <ff_uni2oem>:
c0008487:	83 ec 14             	sub    esp,0x14
c000848a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000848e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008492:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008499:	c7 44 24 0c c0 97 02 c0 	mov    DWORD PTR [esp+0xc],0xc00297c0
c00084a1:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084a6:	77 0b                	ja     c00084b3 <ff_uni2oem+0x2c>
c00084a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ac:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084b1:	eb 5b                	jmp    c000850e <ff_uni2oem+0x87>
c00084b3:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084bb:	77 51                	ja     c000850e <ff_uni2oem+0x87>
c00084bd:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084c3:	75 49                	jne    c000850e <ff_uni2oem+0x87>
c00084c5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084cc:	eb 0b                	jmp    c00084d9 <ff_uni2oem+0x52>
c00084ce:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084d3:	40                   	inc    eax
c00084d4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084d9:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084df:	77 1b                	ja     c00084fc <ff_uni2oem+0x75>
c00084e1:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00084e6:	01 c0                	add    eax,eax
c00084e8:	89 c2                	mov    edx,eax
c00084ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084ee:	01 d0                	add    eax,edx
c00084f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00084f3:	0f b7 c0             	movzx  eax,ax
c00084f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00084fa:	75 d2                	jne    c00084ce <ff_uni2oem+0x47>
c00084fc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008501:	83 e8 80             	sub    eax,0xffffff80
c0008504:	25 ff 00 00 00       	and    eax,0xff
c0008509:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000850e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008513:	83 c4 14             	add    esp,0x14
c0008516:	c3                   	ret    

c0008517 <ff_oem2uni>:
c0008517:	83 ec 18             	sub    esp,0x18
c000851a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000851e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008522:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008527:	66 89 04 24          	mov    WORD PTR [esp],ax
c000852b:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008532:	c7 44 24 10 c0 97 02 c0 	mov    DWORD PTR [esp+0x10],0xc00297c0
c000853a:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008540:	77 0b                	ja     c000854d <ff_oem2uni+0x36>
c0008542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008546:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000854b:	eb 2d                	jmp    c000857a <ff_oem2uni+0x63>
c000854d:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008553:	75 25                	jne    c000857a <ff_oem2uni+0x63>
c0008555:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000855c:	77 1c                	ja     c000857a <ff_oem2uni+0x63>
c000855e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008563:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008568:	01 c0                	add    eax,eax
c000856a:	89 c2                	mov    edx,eax
c000856c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008570:	01 d0                	add    eax,edx
c0008572:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008575:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000857a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000857f:	83 c4 18             	add    esp,0x18
c0008582:	c3                   	ret    

c0008583 <ff_wtoupper>:
c0008583:	83 ec 10             	sub    esp,0x10
c0008586:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000858e:	0f 87 3e 01 00 00    	ja     c00086d2 <ff_wtoupper+0x14f>
c0008594:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008598:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000859d:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085a4:	77 07                	ja     c00085ad <ff_wtoupper+0x2a>
c00085a6:	b8 c0 95 02 c0       	mov    eax,0xc00295c0
c00085ab:	eb 05                	jmp    c00085b2 <ff_wtoupper+0x2f>
c00085ad:	b8 00 95 02 c0       	mov    eax,0xc0029500
c00085b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085ba:	8d 50 02             	lea    edx,[eax+0x2]
c00085bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085c1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085c4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085c9:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085cf:	0f 84 f4 00 00 00    	je     c00086c9 <ff_wtoupper+0x146>
c00085d5:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085da:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085df:	0f 82 e4 00 00 00    	jb     c00086c9 <ff_wtoupper+0x146>
c00085e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085e9:	8d 50 02             	lea    edx,[eax+0x2]
c00085ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085f3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00085f8:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00085fd:	66 c1 e8 08          	shr    ax,0x8
c0008601:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008606:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000860d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008612:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008617:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000861c:	01 ca                	add    edx,ecx
c000861e:	39 d0                	cmp    eax,edx
c0008620:	0f 8d 86 00 00 00    	jge    c00086ac <ff_wtoupper+0x129>
c0008626:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000862b:	83 f8 08             	cmp    eax,0x8
c000862e:	0f 87 94 00 00 00    	ja     c00086c8 <ff_wtoupper+0x145>
c0008634:	8b 04 85 c0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b40]
c000863b:	ff e0                	jmp    eax
c000863d:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008642:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008647:	29 c2                	sub    edx,eax
c0008649:	89 d0                	mov    eax,edx
c000864b:	01 c0                	add    eax,eax
c000864d:	89 c2                	mov    edx,eax
c000864f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008653:	01 d0                	add    eax,edx
c0008655:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008658:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000865d:	eb 4b                	jmp    c00086aa <ff_wtoupper+0x127>
c000865f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008664:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008668:	83 e0 01             	and    eax,0x1
c000866b:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008670:	eb 38                	jmp    c00086aa <ff_wtoupper+0x127>
c0008672:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008678:	eb 30                	jmp    c00086aa <ff_wtoupper+0x127>
c000867a:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008680:	eb 28                	jmp    c00086aa <ff_wtoupper+0x127>
c0008682:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008688:	eb 20                	jmp    c00086aa <ff_wtoupper+0x127>
c000868a:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008690:	eb 18                	jmp    c00086aa <ff_wtoupper+0x127>
c0008692:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008698:	eb 10                	jmp    c00086aa <ff_wtoupper+0x127>
c000869a:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086a0:	eb 08                	jmp    c00086aa <ff_wtoupper+0x127>
c00086a2:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086a9:	90                   	nop
c00086aa:	eb 1c                	jmp    c00086c8 <ff_wtoupper+0x145>
c00086ac:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086b2:	0f 85 fe fe ff ff    	jne    c00085b6 <ff_wtoupper+0x33>
c00086b8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086bd:	01 c0                	add    eax,eax
c00086bf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086c3:	e9 ee fe ff ff       	jmp    c00085b6 <ff_wtoupper+0x33>
c00086c8:	90                   	nop
c00086c9:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086d6:	83 c4 10             	add    esp,0x10
c00086d9:	c3                   	ret    

c00086da <psrc_set_converter>:
c00086da:	56                   	push   esi
c00086db:	89 d6                	mov    esi,edx
c00086dd:	53                   	push   ebx
c00086de:	89 c3                	mov    ebx,eax
c00086e0:	83 ec 0c             	sub    esp,0xc
c00086e3:	52                   	push   edx
c00086e4:	50                   	push   eax
c00086e5:	e8 6f 55 00 00       	call   c000dc59 <sinc_set_converter>
c00086ea:	83 c4 10             	add    esp,0x10
c00086ed:	85 c0                	test   eax,eax
c00086ef:	74 25                	je     c0008716 <psrc_set_converter+0x3c>
c00086f1:	50                   	push   eax
c00086f2:	50                   	push   eax
c00086f3:	56                   	push   esi
c00086f4:	53                   	push   ebx
c00086f5:	e8 17 5d 00 00       	call   c000e411 <zoh_set_converter>
c00086fa:	83 c4 10             	add    esp,0x10
c00086fd:	85 c0                	test   eax,eax
c00086ff:	74 15                	je     c0008716 <psrc_set_converter+0x3c>
c0008701:	51                   	push   ecx
c0008702:	51                   	push   ecx
c0008703:	56                   	push   esi
c0008704:	53                   	push   ebx
c0008705:	e8 0f 11 00 00       	call   c0009819 <linear_set_converter>
c000870a:	83 c4 10             	add    esp,0x10
c000870d:	ba 0a 00 00 00       	mov    edx,0xa
c0008712:	85 c0                	test   eax,eax
c0008714:	75 02                	jne    c0008718 <psrc_set_converter+0x3e>
c0008716:	31 d2                	xor    edx,edx
c0008718:	89 d0                	mov    eax,edx
c000871a:	5a                   	pop    edx
c000871b:	5b                   	pop    ebx
c000871c:	5e                   	pop    esi
c000871d:	c3                   	ret    

c000871e <src_delete>:
c000871e:	53                   	push   ebx
c000871f:	83 ec 08             	sub    esp,0x8
c0008722:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008726:	85 db                	test   ebx,ebx
c0008728:	74 29                	je     c0008753 <src_delete+0x35>
c000872a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000872d:	85 c0                	test   eax,eax
c000872f:	74 0c                	je     c000873d <src_delete+0x1f>
c0008731:	83 ec 0c             	sub    esp,0xc
c0008734:	50                   	push   eax
c0008735:	e8 6f 6e 00 00       	call   c000f5a9 <free>
c000873a:	83 c4 10             	add    esp,0x10
c000873d:	50                   	push   eax
c000873e:	6a 3c                	push   0x3c
c0008740:	6a 00                	push   0x0
c0008742:	53                   	push   ebx
c0008743:	e8 08 80 ff ff       	call   c0000750 <memset>
c0008748:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000874b:	e8 59 6e 00 00       	call   c000f5a9 <free>
c0008750:	83 c4 10             	add    esp,0x10
c0008753:	31 c0                	xor    eax,eax
c0008755:	83 c4 08             	add    esp,0x8
c0008758:	5b                   	pop    ebx
c0008759:	c3                   	ret    

c000875a <src_process>:
c000875a:	55                   	push   ebp
c000875b:	57                   	push   edi
c000875c:	56                   	push   esi
c000875d:	53                   	push   ebx
c000875e:	83 ec 1c             	sub    esp,0x1c
c0008761:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008765:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008769:	85 ed                	test   ebp,ebp
c000876b:	0f 84 6f 01 00 00    	je     c00088e0 <src_process+0x186>
c0008771:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008775:	0f 84 6c 01 00 00    	je     c00088e7 <src_process+0x18d>
c000877b:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000877f:	0f 84 62 01 00 00    	je     c00088e7 <src_process+0x18d>
c0008785:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c000878c:	0f 85 5c 01 00 00    	jne    c00088ee <src_process+0x194>
c0008792:	85 db                	test   ebx,ebx
c0008794:	0f 84 5b 01 00 00    	je     c00088f5 <src_process+0x19b>
c000879a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000879c:	85 f6                	test   esi,esi
c000879e:	0f 84 58 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087a4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087a7:	85 ff                	test   edi,edi
c00087a9:	0f 84 4d 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087af:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087b2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087bd:	68 00 00 70 3f       	push   0x3f700000
c00087c2:	6a 00                	push   0x0
c00087c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087cc:	e8 f6 fb 01 00       	call   c00283c7 <__ltdf2>
c00087d1:	83 c4 10             	add    esp,0x10
c00087d4:	85 c0                	test   eax,eax
c00087d6:	0f 88 27 01 00 00    	js     c0008903 <src_process+0x1a9>
c00087dc:	68 00 00 70 40       	push   0x40700000
c00087e1:	6a 00                	push   0x0
c00087e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087eb:	e8 b9 fb 01 00       	call   c00283a9 <__gtdf2>
c00087f0:	83 c4 10             	add    esp,0x10
c00087f3:	85 c0                	test   eax,eax
c00087f5:	0f 8f 08 01 00 00    	jg     c0008903 <src_process+0x1a9>
c00087fb:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00087ff:	79 07                	jns    c0008808 <src_process+0xae>
c0008801:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008808:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000880b:	85 c0                	test   eax,eax
c000880d:	79 50                	jns    c000885f <src_process+0x105>
c000880f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008816:	39 fe                	cmp    esi,edi
c0008818:	72 37                	jb     c0008851 <src_process+0xf7>
c000881a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008821:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008828:	68 00 00 70 3f       	push   0x3f700000
c000882d:	6a 00                	push   0x0
c000882f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008832:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008835:	e8 8d fb 01 00       	call   c00283c7 <__ltdf2>
c000883a:	83 c4 10             	add    esp,0x10
c000883d:	85 c0                	test   eax,eax
c000883f:	79 37                	jns    c0008878 <src_process+0x11e>
c0008841:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008845:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008849:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000884c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000884f:	eb 27                	jmp    c0008878 <src_process+0x11e>
c0008851:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008854:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008858:	8d 04 86             	lea    eax,[esi+eax*4]
c000885b:	39 c7                	cmp    edi,eax
c000885d:	eb 0d                	jmp    c000886c <src_process+0x112>
c000885f:	39 fe                	cmp    esi,edi
c0008861:	72 ee                	jb     c0008851 <src_process+0xf7>
c0008863:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008867:	8d 04 87             	lea    eax,[edi+eax*4]
c000886a:	39 c6                	cmp    esi,eax
c000886c:	73 ac                	jae    c000881a <src_process+0xc0>
c000886e:	b8 10 00 00 00       	mov    eax,0x10
c0008873:	e9 90 00 00 00       	jmp    c0008908 <src_process+0x1ae>
c0008878:	83 ec 10             	sub    esp,0x10
c000887b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000887e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008881:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008884:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008887:	e8 40 f2 01 00       	call   c0027acc <__subdf3>
c000888c:	83 c4 18             	add    esp,0x18
c000888f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008893:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008897:	52                   	push   edx
c0008898:	50                   	push   eax
c0008899:	e8 c2 fc 01 00       	call   c0028560 <fabs>
c000889e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088a6:	83 c4 10             	add    esp,0x10
c00088a9:	68 af 03 d2 3c       	push   0x3cd203af
c00088ae:	68 16 56 e7 9e       	push   0x9ee75616
c00088b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088bb:	e8 07 fb 01 00       	call   c00283c7 <__ltdf2>
c00088c0:	83 c4 10             	add    esp,0x10
c00088c3:	85 c0                	test   eax,eax
c00088c5:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088c9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088cd:	79 05                	jns    c00088d4 <src_process+0x17a>
c00088cf:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088d2:	eb 03                	jmp    c00088d7 <src_process+0x17d>
c00088d4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088d7:	83 c4 1c             	add    esp,0x1c
c00088da:	5b                   	pop    ebx
c00088db:	5e                   	pop    esi
c00088dc:	5f                   	pop    edi
c00088dd:	5d                   	pop    ebp
c00088de:	ff e0                	jmp    eax
c00088e0:	b8 02 00 00 00       	mov    eax,0x2
c00088e5:	eb 21                	jmp    c0008908 <src_process+0x1ae>
c00088e7:	b8 07 00 00 00       	mov    eax,0x7
c00088ec:	eb 1a                	jmp    c0008908 <src_process+0x1ae>
c00088ee:	b8 12 00 00 00       	mov    eax,0x12
c00088f3:	eb 13                	jmp    c0008908 <src_process+0x1ae>
c00088f5:	b8 03 00 00 00       	mov    eax,0x3
c00088fa:	eb 0c                	jmp    c0008908 <src_process+0x1ae>
c00088fc:	b8 04 00 00 00       	mov    eax,0x4
c0008901:	eb 05                	jmp    c0008908 <src_process+0x1ae>
c0008903:	b8 06 00 00 00       	mov    eax,0x6
c0008908:	83 c4 1c             	add    esp,0x1c
c000890b:	5b                   	pop    ebx
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	5d                   	pop    ebp
c000890f:	c3                   	ret    

c0008910 <src_callback_read>:
c0008910:	55                   	push   ebp
c0008911:	57                   	push   edi
c0008912:	56                   	push   esi
c0008913:	53                   	push   ebx
c0008914:	83 ec 3c             	sub    esp,0x3c
c0008917:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000891b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000891f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008923:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008927:	85 ed                	test   ebp,ebp
c0008929:	0f 8e 52 01 00 00    	jle    c0008a81 <src_callback_read+0x171>
c000892f:	85 db                	test   ebx,ebx
c0008931:	0f 84 4a 01 00 00    	je     c0008a81 <src_callback_read+0x171>
c0008937:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000893e:	74 0c                	je     c000894c <src_callback_read+0x3c>
c0008940:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008947:	e9 35 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000894c:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008950:	75 0c                	jne    c000895e <src_callback_read+0x4e>
c0008952:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008959:	e9 23 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000895e:	51                   	push   ecx
c000895f:	6a 24                	push   0x24
c0008961:	6a 00                	push   0x0
c0008963:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008967:	50                   	push   eax
c0008968:	e8 e3 7d ff ff       	call   c0000750 <memset>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	68 00 00 70 3f       	push   0x3f700000
c0008975:	6a 00                	push   0x0
c0008977:	57                   	push   edi
c0008978:	56                   	push   esi
c0008979:	e8 49 fa 01 00       	call   c00283c7 <__ltdf2>
c000897e:	83 c4 10             	add    esp,0x10
c0008981:	85 c0                	test   eax,eax
c0008983:	78 3e                	js     c00089c3 <src_callback_read+0xb3>
c0008985:	68 00 00 70 40       	push   0x40700000
c000898a:	6a 00                	push   0x0
c000898c:	57                   	push   edi
c000898d:	56                   	push   esi
c000898e:	e8 16 fa 01 00       	call   c00283a9 <__gtdf2>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	85 c0                	test   eax,eax
c0008998:	7f 29                	jg     c00089c3 <src_callback_read+0xb3>
c000899a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000899e:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089a6:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089aa:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ad:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089b5:	31 f6                	xor    esi,esi
c00089b7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089be:	e9 97 00 00 00       	jmp    c0008a5a <src_callback_read+0x14a>
c00089c3:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089ca:	e9 b2 00 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c00089cf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089d7:	52                   	push   edx
c00089d8:	52                   	push   edx
c00089d9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089dd:	50                   	push   eax
c00089de:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089e1:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00089e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00089e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00089ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	85 c0                	test   eax,eax
c00089f5:	75 08                	jne    c00089ff <src_callback_read+0xef>
c00089f7:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00089ff:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a06:	50                   	push   eax
c0008a07:	50                   	push   eax
c0008a08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a0c:	50                   	push   eax
c0008a0d:	53                   	push   ebx
c0008a0e:	e8 47 fd ff ff       	call   c000875a <src_process>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a1d:	85 c0                	test   eax,eax
c0008a1f:	75 49                	jne    c0008a6a <src_callback_read+0x15a>
c0008a21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a25:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a28:	89 f9                	mov    ecx,edi
c0008a2a:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a2e:	0f af ca             	imul   ecx,edx
c0008a31:	c1 e1 02             	shl    ecx,0x2
c0008a34:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a38:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a3c:	0f af d1             	imul   edx,ecx
c0008a3f:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a43:	c1 e2 02             	shl    edx,0x2
c0008a46:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a4a:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a4d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a52:	74 12                	je     c0008a66 <src_callback_read+0x156>
c0008a54:	39 d5                	cmp    ebp,edx
c0008a56:	7e 14                	jle    c0008a6c <src_callback_read+0x15c>
c0008a58:	89 d6                	mov    esi,edx
c0008a5a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a5f:	75 9e                	jne    c00089ff <src_callback_read+0xef>
c0008a61:	e9 69 ff ff ff       	jmp    c00089cf <src_callback_read+0xbf>
c0008a66:	85 c9                	test   ecx,ecx
c0008a68:	75 ea                	jne    c0008a54 <src_callback_read+0x144>
c0008a6a:	89 f2                	mov    edx,esi
c0008a6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a70:	85 c0                	test   eax,eax
c0008a72:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a75:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a79:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a7c:	74 05                	je     c0008a83 <src_callback_read+0x173>
c0008a7e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a81:	31 d2                	xor    edx,edx
c0008a83:	83 c4 3c             	add    esp,0x3c
c0008a86:	89 d0                	mov    eax,edx
c0008a88:	5b                   	pop    ebx
c0008a89:	5e                   	pop    esi
c0008a8a:	5f                   	pop    edi
c0008a8b:	5d                   	pop    ebp
c0008a8c:	c3                   	ret    

c0008a8d <src_set_ratio>:
c0008a8d:	57                   	push   edi
c0008a8e:	ba 02 00 00 00       	mov    edx,0x2
c0008a93:	56                   	push   esi
c0008a94:	53                   	push   ebx
c0008a95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a9d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008aa1:	85 db                	test   ebx,ebx
c0008aa3:	74 4c                	je     c0008af1 <src_set_ratio+0x64>
c0008aa5:	ba 07 00 00 00       	mov    edx,0x7
c0008aaa:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008aae:	74 41                	je     c0008af1 <src_set_ratio+0x64>
c0008ab0:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008ab4:	74 3b                	je     c0008af1 <src_set_ratio+0x64>
c0008ab6:	68 00 00 70 3f       	push   0x3f700000
c0008abb:	6a 00                	push   0x0
c0008abd:	57                   	push   edi
c0008abe:	56                   	push   esi
c0008abf:	e8 03 f9 01 00       	call   c00283c7 <__ltdf2>
c0008ac4:	83 c4 10             	add    esp,0x10
c0008ac7:	ba 06 00 00 00       	mov    edx,0x6
c0008acc:	85 c0                	test   eax,eax
c0008ace:	78 21                	js     c0008af1 <src_set_ratio+0x64>
c0008ad0:	68 00 00 70 40       	push   0x40700000
c0008ad5:	6a 00                	push   0x0
c0008ad7:	57                   	push   edi
c0008ad8:	56                   	push   esi
c0008ad9:	e8 cb f8 01 00       	call   c00283a9 <__gtdf2>
c0008ade:	83 c4 10             	add    esp,0x10
c0008ae1:	ba 06 00 00 00       	mov    edx,0x6
c0008ae6:	85 c0                	test   eax,eax
c0008ae8:	7f 07                	jg     c0008af1 <src_set_ratio+0x64>
c0008aea:	89 33                	mov    DWORD PTR [ebx],esi
c0008aec:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008aef:	31 d2                	xor    edx,edx
c0008af1:	5b                   	pop    ebx
c0008af2:	89 d0                	mov    eax,edx
c0008af4:	5e                   	pop    esi
c0008af5:	5f                   	pop    edi
c0008af6:	c3                   	ret    

c0008af7 <src_get_channels>:
c0008af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008afb:	b8 02 00 00 00       	mov    eax,0x2
c0008b00:	85 d2                	test   edx,edx
c0008b02:	74 14                	je     c0008b18 <src_get_channels+0x21>
c0008b04:	b8 07 00 00 00       	mov    eax,0x7
c0008b09:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b0d:	74 09                	je     c0008b18 <src_get_channels+0x21>
c0008b0f:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b13:	74 03                	je     c0008b18 <src_get_channels+0x21>
c0008b15:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b18:	c3                   	ret    

c0008b19 <src_reset>:
c0008b19:	53                   	push   ebx
c0008b1a:	b8 02 00 00 00       	mov    eax,0x2
c0008b1f:	83 ec 08             	sub    esp,0x8
c0008b22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b26:	85 db                	test   ebx,ebx
c0008b28:	74 36                	je     c0008b60 <src_reset+0x47>
c0008b2a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b2d:	85 c0                	test   eax,eax
c0008b2f:	74 09                	je     c0008b3a <src_reset+0x21>
c0008b31:	83 ec 0c             	sub    esp,0xc
c0008b34:	53                   	push   ebx
c0008b35:	ff d0                	call   eax
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	31 c0                	xor    eax,eax
c0008b3c:	31 d2                	xor    edx,edx
c0008b3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b41:	89 03                	mov    DWORD PTR [ebx],eax
c0008b43:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b46:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b49:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b50:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b5e:	31 c0                	xor    eax,eax
c0008b60:	83 c4 08             	add    esp,0x8
c0008b63:	5b                   	pop    ebx
c0008b64:	c3                   	ret    

c0008b65 <src_new>:
c0008b65:	57                   	push   edi
c0008b66:	56                   	push   esi
c0008b67:	53                   	push   ebx
c0008b68:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b6c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b70:	85 f6                	test   esi,esi
c0008b72:	74 73                	je     c0008be7 <src_new+0x82>
c0008b74:	85 ff                	test   edi,edi
c0008b76:	7f 08                	jg     c0008b80 <src_new+0x1b>
c0008b78:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b7e:	eb 1e                	jmp    c0008b9e <src_new+0x39>
c0008b80:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008b86:	50                   	push   eax
c0008b87:	50                   	push   eax
c0008b88:	6a 3c                	push   0x3c
c0008b8a:	6a 01                	push   0x1
c0008b8c:	e8 38 6a 00 00       	call   c000f5c9 <calloc>
c0008b91:	83 c4 10             	add    esp,0x10
c0008b94:	89 c3                	mov    ebx,eax
c0008b96:	85 c0                	test   eax,eax
c0008b98:	75 10                	jne    c0008baa <src_new+0x45>
c0008b9a:	85 f6                	test   esi,esi
c0008b9c:	75 04                	jne    c0008ba2 <src_new+0x3d>
c0008b9e:	31 db                	xor    ebx,ebx
c0008ba0:	eb 4b                	jmp    c0008bed <src_new+0x88>
c0008ba2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008ba8:	eb 43                	jmp    c0008bed <src_new+0x88>
c0008baa:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bad:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bb8:	e8 1d fb ff ff       	call   c00086da <psrc_set_converter>
c0008bbd:	85 c0                	test   eax,eax
c0008bbf:	74 18                	je     c0008bd9 <src_new+0x74>
c0008bc1:	85 f6                	test   esi,esi
c0008bc3:	74 06                	je     c0008bcb <src_new+0x66>
c0008bc5:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bcb:	83 ec 0c             	sub    esp,0xc
c0008bce:	53                   	push   ebx
c0008bcf:	31 db                	xor    ebx,ebx
c0008bd1:	e8 d3 69 00 00       	call   c000f5a9 <free>
c0008bd6:	83 c4 10             	add    esp,0x10
c0008bd9:	83 ec 0c             	sub    esp,0xc
c0008bdc:	53                   	push   ebx
c0008bdd:	e8 37 ff ff ff       	call   c0008b19 <src_reset>
c0008be2:	83 c4 10             	add    esp,0x10
c0008be5:	eb 06                	jmp    c0008bed <src_new+0x88>
c0008be7:	85 ff                	test   edi,edi
c0008be9:	7f 9b                	jg     c0008b86 <src_new+0x21>
c0008beb:	eb b1                	jmp    c0008b9e <src_new+0x39>
c0008bed:	89 d8                	mov    eax,ebx
c0008bef:	5b                   	pop    ebx
c0008bf0:	5e                   	pop    esi
c0008bf1:	5f                   	pop    edi
c0008bf2:	c3                   	ret    

c0008bf3 <src_callback_new>:
c0008bf3:	56                   	push   esi
c0008bf4:	53                   	push   ebx
c0008bf5:	53                   	push   ebx
c0008bf6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008bfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bfe:	85 f6                	test   esi,esi
c0008c00:	75 0e                	jne    c0008c10 <src_callback_new+0x1d>
c0008c02:	31 db                	xor    ebx,ebx
c0008c04:	85 c0                	test   eax,eax
c0008c06:	74 47                	je     c0008c4f <src_callback_new+0x5c>
c0008c08:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c0e:	eb 3f                	jmp    c0008c4f <src_callback_new+0x5c>
c0008c10:	85 c0                	test   eax,eax
c0008c12:	74 06                	je     c0008c1a <src_callback_new+0x27>
c0008c14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c1a:	51                   	push   ecx
c0008c1b:	50                   	push   eax
c0008c1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c24:	e8 3c ff ff ff       	call   c0008b65 <src_new>
c0008c29:	83 c4 10             	add    esp,0x10
c0008c2c:	89 c3                	mov    ebx,eax
c0008c2e:	85 c0                	test   eax,eax
c0008c30:	74 1d                	je     c0008c4f <src_callback_new+0x5c>
c0008c32:	83 ec 0c             	sub    esp,0xc
c0008c35:	50                   	push   eax
c0008c36:	e8 de fe ff ff       	call   c0008b19 <src_reset>
c0008c3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c3f:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c46:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c49:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c4c:	83 c4 10             	add    esp,0x10
c0008c4f:	89 d8                	mov    eax,ebx
c0008c51:	5a                   	pop    edx
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	c3                   	ret    

c0008c55 <src_get_name>:
c0008c55:	53                   	push   ebx
c0008c56:	83 ec 14             	sub    esp,0x14
c0008c59:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c5d:	53                   	push   ebx
c0008c5e:	e8 d0 4f 00 00       	call   c000dc33 <sinc_get_name>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	85 c0                	test   eax,eax
c0008c68:	75 1d                	jne    c0008c87 <src_get_name+0x32>
c0008c6a:	83 ec 0c             	sub    esp,0xc
c0008c6d:	53                   	push   ebx
c0008c6e:	e8 80 57 00 00       	call   c000e3f3 <zoh_get_name>
c0008c73:	83 c4 10             	add    esp,0x10
c0008c76:	85 c0                	test   eax,eax
c0008c78:	75 0d                	jne    c0008c87 <src_get_name+0x32>
c0008c7a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c7e:	83 c4 08             	add    esp,0x8
c0008c81:	5b                   	pop    ebx
c0008c82:	e9 74 0b 00 00       	jmp    c00097fb <linear_get_name>
c0008c87:	83 c4 08             	add    esp,0x8
c0008c8a:	5b                   	pop    ebx
c0008c8b:	c3                   	ret    

c0008c8c <src_get_description>:
c0008c8c:	53                   	push   ebx
c0008c8d:	83 ec 14             	sub    esp,0x14
c0008c90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c94:	53                   	push   ebx
c0008c95:	e8 ac 4f 00 00       	call   c000dc46 <sinc_get_description>
c0008c9a:	83 c4 10             	add    esp,0x10
c0008c9d:	85 c0                	test   eax,eax
c0008c9f:	75 1d                	jne    c0008cbe <src_get_description+0x32>
c0008ca1:	83 ec 0c             	sub    esp,0xc
c0008ca4:	53                   	push   ebx
c0008ca5:	e8 58 57 00 00       	call   c000e402 <zoh_get_description>
c0008caa:	83 c4 10             	add    esp,0x10
c0008cad:	85 c0                	test   eax,eax
c0008caf:	75 0d                	jne    c0008cbe <src_get_description+0x32>
c0008cb1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb5:	83 c4 08             	add    esp,0x8
c0008cb8:	5b                   	pop    ebx
c0008cb9:	e9 4c 0b 00 00       	jmp    c000980a <linear_get_description>
c0008cbe:	83 c4 08             	add    esp,0x8
c0008cc1:	5b                   	pop    ebx
c0008cc2:	c3                   	ret    

c0008cc3 <src_get_version>:
c0008cc3:	b8 c0 98 02 c0       	mov    eax,0xc00298c0
c0008cc8:	c3                   	ret    

c0008cc9 <src_is_valid_ratio>:
c0008cc9:	83 ec 1c             	sub    esp,0x1c
c0008ccc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cdc:	68 00 00 70 3f       	push   0x3f700000
c0008ce1:	6a 00                	push   0x0
c0008ce3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ceb:	e8 d7 f6 01 00       	call   c00283c7 <__ltdf2>
c0008cf0:	83 c4 10             	add    esp,0x10
c0008cf3:	31 d2                	xor    edx,edx
c0008cf5:	85 c0                	test   eax,eax
c0008cf7:	78 1e                	js     c0008d17 <src_is_valid_ratio+0x4e>
c0008cf9:	68 00 00 70 40       	push   0x40700000
c0008cfe:	6a 00                	push   0x0
c0008d00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d08:	e8 9c f6 01 00       	call   c00283a9 <__gtdf2>
c0008d0d:	31 d2                	xor    edx,edx
c0008d0f:	83 c4 10             	add    esp,0x10
c0008d12:	85 c0                	test   eax,eax
c0008d14:	0f 9e c2             	setle  dl
c0008d17:	89 d0                	mov    eax,edx
c0008d19:	83 c4 1c             	add    esp,0x1c
c0008d1c:	c3                   	ret    

c0008d1d <src_error>:
c0008d1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d21:	31 c0                	xor    eax,eax
c0008d23:	85 d2                	test   edx,edx
c0008d25:	74 03                	je     c0008d2a <src_error+0xd>
c0008d27:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d2a:	c3                   	ret    

c0008d2b <src_strerror>:
c0008d2b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d2f:	31 c0                	xor    eax,eax
c0008d31:	83 fa 17             	cmp    edx,0x17
c0008d34:	77 07                	ja     c0008d3d <src_strerror+0x12>
c0008d36:	8b 04 95 20 9d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd62e0]
c0008d3d:	c3                   	ret    

c0008d3e <src_simple>:
c0008d3e:	56                   	push   esi
c0008d3f:	53                   	push   ebx
c0008d40:	83 ec 18             	sub    esp,0x18
c0008d43:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d47:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d4b:	50                   	push   eax
c0008d4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d54:	e8 0c fe ff ff       	call   c0008b65 <src_new>
c0008d59:	83 c4 10             	add    esp,0x10
c0008d5c:	85 c0                	test   eax,eax
c0008d5e:	75 06                	jne    c0008d66 <src_simple+0x28>
c0008d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d64:	eb 25                	jmp    c0008d8b <src_simple+0x4d>
c0008d66:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d6d:	89 c3                	mov    ebx,eax
c0008d6f:	50                   	push   eax
c0008d70:	50                   	push   eax
c0008d71:	56                   	push   esi
c0008d72:	53                   	push   ebx
c0008d73:	e8 e2 f9 ff ff       	call   c000875a <src_process>
c0008d78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d7f:	e8 9a f9 ff ff       	call   c000871e <src_delete>
c0008d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008d88:	83 c4 10             	add    esp,0x10
c0008d8b:	83 c4 14             	add    esp,0x14
c0008d8e:	5b                   	pop    ebx
c0008d8f:	5e                   	pop    esi
c0008d90:	c3                   	ret    

c0008d91 <src_short_to_float_array>:
c0008d91:	53                   	push   ebx
c0008d92:	83 ec 18             	sub    esp,0x18
c0008d95:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d99:	85 db                	test   ebx,ebx
c0008d9b:	74 54                	je     c0008df1 <src_short_to_float_array+0x60>
c0008d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008da1:	4b                   	dec    ebx
c0008da2:	83 ec 0c             	sub    esp,0xc
c0008da5:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008da9:	50                   	push   eax
c0008daa:	e8 ac f3 01 00       	call   c002815b <__floatsidf>
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008db6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dba:	68 00 00 00 3f       	push   0x3f000000
c0008dbf:	6a 00                	push   0x0
c0008dc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc9:	e8 2a ed 01 00       	call   c0027af8 <__muldf3>
c0008dce:	59                   	pop    ecx
c0008dcf:	59                   	pop    ecx
c0008dd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008dd4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008dd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ddc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de0:	e8 e6 f5 01 00       	call   c00283cb <__truncdfsf2>
c0008de5:	83 c4 10             	add    esp,0x10
c0008de8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008dec:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008def:	eb a8                	jmp    c0008d99 <src_short_to_float_array+0x8>
c0008df1:	83 c4 18             	add    esp,0x18
c0008df4:	5b                   	pop    ebx
c0008df5:	c3                   	ret    

c0008df6 <src_float_to_short_array>:
c0008df6:	56                   	push   esi
c0008df7:	53                   	push   ebx
c0008df8:	83 ec 14             	sub    esp,0x14
c0008dfb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008dff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e03:	85 db                	test   ebx,ebx
c0008e05:	0f 84 a4 00 00 00    	je     c0008eaf <src_float_to_short_array+0xb9>
c0008e0b:	83 ec 0c             	sub    esp,0xc
c0008e0e:	4b                   	dec    ebx
c0008e0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e13:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e16:	e8 d4 f6 01 00       	call   c00284ef <__extendsfdf2>
c0008e1b:	83 c4 10             	add    esp,0x10
c0008e1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e26:	68 00 00 e0 41       	push   0x41e00000
c0008e2b:	6a 00                	push   0x0
c0008e2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e35:	e8 be ec 01 00       	call   c0027af8 <__muldf3>
c0008e3a:	83 c4 10             	add    esp,0x10
c0008e3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e45:	68 ff ff df 41       	push   0x41dfffff
c0008e4a:	68 00 00 c0 ff       	push   0xffc00000
c0008e4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e57:	e8 69 f5 01 00       	call   c00283c5 <__gedf2>
c0008e5c:	83 c4 10             	add    esp,0x10
c0008e5f:	85 c0                	test   eax,eax
c0008e61:	78 08                	js     c0008e6b <src_float_to_short_array+0x75>
c0008e63:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e69:	eb 98                	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e6b:	68 00 00 e0 c1       	push   0xc1e00000
c0008e70:	6a 00                	push   0x0
c0008e72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e7a:	e8 4a f5 01 00       	call   c00283c9 <__ledf2>
c0008e7f:	83 c4 10             	add    esp,0x10
c0008e82:	85 c0                	test   eax,eax
c0008e84:	7f 0b                	jg     c0008e91 <src_float_to_short_array+0x9b>
c0008e86:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008e8c:	e9 72 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e91:	50                   	push   eax
c0008e92:	50                   	push   eax
c0008e93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e9b:	e8 e0 f6 01 00       	call   c0028580 <lrint>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	c1 f8 10             	sar    eax,0x10
c0008ea6:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eaa:	e9 54 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008eaf:	83 c4 14             	add    esp,0x14
c0008eb2:	5b                   	pop    ebx
c0008eb3:	5e                   	pop    esi
c0008eb4:	c3                   	ret    

c0008eb5 <src_int_to_float_array>:
c0008eb5:	53                   	push   ebx
c0008eb6:	83 ec 18             	sub    esp,0x18
c0008eb9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ebd:	85 db                	test   ebx,ebx
c0008ebf:	74 52                	je     c0008f13 <src_int_to_float_array+0x5e>
c0008ec1:	83 ec 0c             	sub    esp,0xc
c0008ec4:	4b                   	dec    ebx
c0008ec5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ec9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ecc:	e8 8a f2 01 00       	call   c002815b <__floatsidf>
c0008ed1:	83 c4 10             	add    esp,0x10
c0008ed4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ed8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008edc:	68 00 00 00 3e       	push   0x3e000000
c0008ee1:	6a 00                	push   0x0
c0008ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eeb:	e8 08 ec 01 00       	call   c0027af8 <__muldf3>
c0008ef0:	59                   	pop    ecx
c0008ef1:	59                   	pop    ecx
c0008ef2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ef6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008efa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008efe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f02:	e8 c4 f4 01 00       	call   c00283cb <__truncdfsf2>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f0e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f11:	eb aa                	jmp    c0008ebd <src_int_to_float_array+0x8>
c0008f13:	83 c4 18             	add    esp,0x18
c0008f16:	5b                   	pop    ebx
c0008f17:	c3                   	ret    

c0008f18 <src_float_to_int_array>:
c0008f18:	56                   	push   esi
c0008f19:	53                   	push   ebx
c0008f1a:	83 ec 14             	sub    esp,0x14
c0008f1d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f25:	85 db                	test   ebx,ebx
c0008f27:	0f 84 a2 00 00 00    	je     c0008fcf <src_float_to_int_array+0xb7>
c0008f2d:	83 ec 0c             	sub    esp,0xc
c0008f30:	4b                   	dec    ebx
c0008f31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f35:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f38:	e8 b2 f5 01 00       	call   c00284ef <__extendsfdf2>
c0008f3d:	83 c4 10             	add    esp,0x10
c0008f40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f48:	68 00 00 e0 41       	push   0x41e00000
c0008f4d:	6a 00                	push   0x0
c0008f4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f57:	e8 9c eb 01 00       	call   c0027af8 <__muldf3>
c0008f5c:	83 c4 10             	add    esp,0x10
c0008f5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f67:	68 ff ff df 41       	push   0x41dfffff
c0008f6c:	68 00 00 c0 ff       	push   0xffc00000
c0008f71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f79:	e8 47 f4 01 00       	call   c00283c5 <__gedf2>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	85 c0                	test   eax,eax
c0008f83:	78 09                	js     c0008f8e <src_float_to_int_array+0x76>
c0008f85:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008f8c:	eb 97                	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008f8e:	68 00 00 e0 c1       	push   0xc1e00000
c0008f93:	6a 00                	push   0x0
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9d:	e8 27 f4 01 00       	call   c00283c9 <__ledf2>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	85 c0                	test   eax,eax
c0008fa7:	7f 0c                	jg     c0008fb5 <src_float_to_int_array+0x9d>
c0008fa9:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fb0:	e9 70 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fb5:	50                   	push   eax
c0008fb6:	50                   	push   eax
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbf:	e8 bc f5 01 00       	call   c0028580 <lrint>
c0008fc4:	83 c4 10             	add    esp,0x10
c0008fc7:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fca:	e9 56 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fcf:	83 c4 14             	add    esp,0x14
c0008fd2:	5b                   	pop    ebx
c0008fd3:	5e                   	pop    esi
c0008fd4:	c3                   	ret    

c0008fd5 <linear_vari_process>:
c0008fd5:	55                   	push   ebp
c0008fd6:	31 d2                	xor    edx,edx
c0008fd8:	57                   	push   edi
c0008fd9:	56                   	push   esi
c0008fda:	53                   	push   ebx
c0008fdb:	83 ec 3c             	sub    esp,0x3c
c0008fde:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008fe2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008fe6:	0f 8e d3 07 00 00    	jle    c00097bf <linear_vari_process+0x7ea>
c0008fec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ff0:	ba 05 00 00 00       	mov    edx,0x5
c0008ff5:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ff8:	85 db                	test   ebx,ebx
c0008ffa:	0f 84 bf 07 00 00    	je     c00097bf <linear_vari_process+0x7ea>
c0009000:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009003:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009007:	74 19                	je     c0009022 <linear_vari_process+0x4d>
c0009009:	31 d2                	xor    edx,edx
c000900b:	39 c2                	cmp    edx,eax
c000900d:	7d 0c                	jge    c000901b <linear_vari_process+0x46>
c000900f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009011:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009014:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009018:	42                   	inc    edx
c0009019:	eb f0                	jmp    c000900b <linear_vari_process+0x36>
c000901b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009022:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009025:	0f af d0             	imul   edx,eax
c0009028:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000902b:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000902f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009036:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009039:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009040:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009047:	8b 00                	mov    eax,DWORD PTR [eax]
c0009049:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000904d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009051:	68 00 00 70 3f       	push   0x3f700000
c0009056:	6a 00                	push   0x0
c0009058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000905c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009060:	e8 62 f3 01 00       	call   c00283c7 <__ltdf2>
c0009065:	83 c4 10             	add    esp,0x10
c0009068:	ba 16 00 00 00       	mov    edx,0x16
c000906d:	85 c0                	test   eax,eax
c000906f:	0f 88 4a 07 00 00    	js     c00097bf <linear_vari_process+0x7ea>
c0009075:	68 00 00 70 40       	push   0x40700000
c000907a:	6a 00                	push   0x0
c000907c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009084:	e8 20 f3 01 00       	call   c00283a9 <__gtdf2>
c0009089:	83 c4 10             	add    esp,0x10
c000908c:	ba 16 00 00 00       	mov    edx,0x16
c0009091:	85 c0                	test   eax,eax
c0009093:	0f 8f 26 07 00 00    	jg     c00097bf <linear_vari_process+0x7ea>
c0009099:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000909d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ab:	68 00 00 f0 3f       	push   0x3ff00000
c00090b0:	6a 00                	push   0x0
c00090b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ba:	e8 08 f3 01 00       	call   c00283c7 <__ltdf2>
c00090bf:	83 c4 10             	add    esp,0x10
c00090c2:	85 c0                	test   eax,eax
c00090c4:	0f 89 89 02 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c00090ca:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090cd:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090d0:	0f 8d 7d 02 00 00    	jge    c0009353 <linear_vari_process+0x37e>
c00090d6:	83 ec 0c             	sub    esp,0xc
c00090d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090dc:	e8 7a f0 01 00       	call   c002815b <__floatsidf>
c00090e1:	83 c4 10             	add    esp,0x10
c00090e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00090e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00090eb:	68 00 00 f0 3f       	push   0x3ff00000
c00090f0:	6a 00                	push   0x0
c00090f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fa:	e8 7c e3 01 00       	call   c002747b <__adddf3>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009106:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000910a:	52                   	push   edx
c000910b:	50                   	push   eax
c000910c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009114:	e8 df e9 01 00       	call   c0027af8 <__muldf3>
c0009119:	5d                   	pop    ebp
c000911a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000911e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009122:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009125:	e8 31 f0 01 00       	call   c002815b <__floatsidf>
c000912a:	83 c4 10             	add    esp,0x10
c000912d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009131:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009135:	52                   	push   edx
c0009136:	50                   	push   eax
c0009137:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913f:	e8 37 e3 01 00       	call   c002747b <__adddf3>
c0009144:	59                   	pop    ecx
c0009145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009149:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000914d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009150:	e8 06 f0 01 00       	call   c002815b <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000915c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009166:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000916a:	e8 56 f2 01 00       	call   c00283c5 <__gedf2>
c000916f:	83 c4 10             	add    esp,0x10
c0009172:	85 c0                	test   eax,eax
c0009174:	0f 89 d9 01 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c000917a:	85 ff                	test   edi,edi
c000917c:	0f 8e f4 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c0009182:	83 ec 10             	sub    esp,0x10
c0009185:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009188:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000918b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000918f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009192:	ff 30                	push   DWORD PTR [eax]
c0009194:	e8 33 e9 01 00       	call   c0027acc <__subdf3>
c0009199:	83 c4 18             	add    esp,0x18
c000919c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091a4:	52                   	push   edx
c00091a5:	50                   	push   eax
c00091a6:	e8 b5 f3 01 00       	call   c0028560 <fabs>
c00091ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091bb:	68 23 42 92 0c       	push   0xc924223
c00091c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c8:	e8 dc f1 01 00       	call   c00283a9 <__gtdf2>
c00091cd:	83 c4 10             	add    esp,0x10
c00091d0:	85 c0                	test   eax,eax
c00091d2:	0f 8e 9e 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c00091d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091df:	8b 00                	mov    eax,DWORD PTR [eax]
c00091e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e8:	52                   	push   edx
c00091e9:	50                   	push   eax
c00091ea:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ed:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091f0:	e8 d7 e8 01 00       	call   c0027acc <__subdf3>
c00091f5:	59                   	pop    ecx
c00091f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00091fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009201:	e8 55 ef 01 00       	call   c002815b <__floatsidf>
c0009206:	83 c4 10             	add    esp,0x10
c0009209:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000920d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009211:	52                   	push   edx
c0009212:	50                   	push   eax
c0009213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000921b:	e8 d8 e8 01 00       	call   c0027af8 <__muldf3>
c0009220:	5f                   	pop    edi
c0009221:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009225:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009229:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000922c:	e8 2a ef 01 00       	call   c002815b <__floatsidf>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009238:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000923c:	52                   	push   edx
c000923d:	50                   	push   eax
c000923e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009246:	e8 91 eb 01 00       	call   c0027ddc <__divdf3>
c000924b:	83 c4 10             	add    esp,0x10
c000924e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009252:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009256:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009266:	e8 10 e2 01 00       	call   c002747b <__adddf3>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009272:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009276:	31 ff                	xor    edi,edi
c0009278:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000927b:	0f 8e 9d 00 00 00    	jle    c000931e <linear_vari_process+0x349>
c0009281:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009284:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009288:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000928b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000928f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009292:	8b 06                	mov    eax,DWORD PTR [esi]
c0009294:	52                   	push   edx
c0009295:	52                   	push   edx
c0009296:	55                   	push   ebp
c0009297:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c000929a:	47                   	inc    edi
c000929b:	e8 70 db 01 00       	call   c0026e10 <__subsf3>
c00092a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00092a3:	e8 47 f2 01 00       	call   c00284ef <__extendsfdf2>
c00092a8:	83 c4 10             	add    esp,0x10
c00092ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092c3:	e8 30 e8 01 00       	call   c0027af8 <__muldf3>
c00092c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092d3:	e8 17 f2 01 00       	call   c00284ef <__extendsfdf2>
c00092d8:	83 c4 10             	add    esp,0x10
c00092db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092e3:	52                   	push   edx
c00092e4:	50                   	push   eax
c00092e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092ed:	e8 89 e1 01 00       	call   c002747b <__adddf3>
c00092f2:	59                   	pop    ecx
c00092f3:	5d                   	pop    ebp
c00092f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009300:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009304:	e8 c2 f0 01 00       	call   c00283cb <__truncdfsf2>
c0009309:	83 c4 10             	add    esp,0x10
c000930c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000930f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009313:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009316:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009319:	e9 5a ff ff ff       	jmp    c0009278 <linear_vari_process+0x2a3>
c000931e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009322:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009326:	68 00 00 f0 3f       	push   0x3ff00000
c000932b:	6a 00                	push   0x0
c000932d:	e8 aa ea 01 00       	call   c0027ddc <__divdf3>
c0009332:	83 c4 10             	add    esp,0x10
c0009335:	89 04 24             	mov    DWORD PTR [esp],eax
c0009338:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000933c:	52                   	push   edx
c000933d:	50                   	push   eax
c000933e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009346:	e8 30 e1 01 00       	call   c002747b <__adddf3>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	e9 50 fd ff ff       	jmp    c00090a3 <linear_vari_process+0xce>
c0009353:	50                   	push   eax
c0009354:	50                   	push   eax
c0009355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009359:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935d:	e8 1e f2 01 00       	call   c0028580 <lrint>
c0009362:	83 ec 0c             	sub    esp,0xc
c0009365:	50                   	push   eax
c0009366:	e8 f0 ed 01 00       	call   c002815b <__floatsidf>
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009372:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000937c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009380:	e8 47 e7 01 00       	call   c0027acc <__subdf3>
c0009385:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009389:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000938d:	83 c4 20             	add    esp,0x20
c0009390:	6a 00                	push   0x0
c0009392:	6a 00                	push   0x0
c0009394:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	e8 26 f0 01 00       	call   c00283c7 <__ltdf2>
c00093a1:	83 c4 10             	add    esp,0x10
c00093a4:	85 c0                	test   eax,eax
c00093a6:	79 1e                	jns    c00093c6 <linear_vari_process+0x3f1>
c00093a8:	68 00 00 f0 3f       	push   0x3ff00000
c00093ad:	6a 00                	push   0x0
c00093af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b7:	e8 bf e0 01 00       	call   c002747b <__adddf3>
c00093bc:	83 c4 10             	add    esp,0x10
c00093bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093c9:	83 ec 10             	sub    esp,0x10
c00093cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093dc:	e8 eb e6 01 00       	call   c0027acc <__subdf3>
c00093e1:	83 c4 18             	add    esp,0x18
c00093e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093ec:	52                   	push   edx
c00093ed:	50                   	push   eax
c00093ee:	e8 8d f1 01 00       	call   c0028580 <lrint>
c00093f3:	83 c4 10             	add    esp,0x10
c00093f6:	0f af f8             	imul   edi,eax
c00093f9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00093fc:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00093ff:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009402:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009405:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009408:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000940c:	0f 8d 13 03 00 00    	jge    c0009725 <linear_vari_process+0x750>
c0009412:	83 ec 0c             	sub    esp,0xc
c0009415:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009418:	e8 3e ed 01 00       	call   c002815b <__floatsidf>
c000941d:	83 c4 10             	add    esp,0x10
c0009420:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009424:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009428:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000942c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009438:	e8 bb e6 01 00       	call   c0027af8 <__muldf3>
c000943d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009440:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009444:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009448:	e8 0e ed 01 00       	call   c002815b <__floatsidf>
c000944d:	83 c4 10             	add    esp,0x10
c0009450:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009454:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009458:	52                   	push   edx
c0009459:	50                   	push   eax
c000945a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009462:	e8 14 e0 01 00       	call   c002747b <__adddf3>
c0009467:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	e8 e4 ec 01 00       	call   c002815b <__floatsidf>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	52                   	push   edx
c0009483:	50                   	push   eax
c0009484:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000948c:	e8 36 ef 01 00       	call   c00283c7 <__ltdf2>
c0009491:	83 c4 10             	add    esp,0x10
c0009494:	85 c0                	test   eax,eax
c0009496:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000949a:	0f 89 85 02 00 00    	jns    c0009725 <linear_vari_process+0x750>
c00094a0:	85 c9                	test   ecx,ecx
c00094a2:	0f 8e f5 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094a8:	83 ec 10             	sub    esp,0x10
c00094ab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094ae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094b1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094b8:	ff 30                	push   DWORD PTR [eax]
c00094ba:	e8 0d e6 01 00       	call   c0027acc <__subdf3>
c00094bf:	83 c4 18             	add    esp,0x18
c00094c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ca:	52                   	push   edx
c00094cb:	50                   	push   eax
c00094cc:	e8 8f f0 01 00       	call   c0028560 <fabs>
c00094d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094d9:	83 c4 10             	add    esp,0x10
c00094dc:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094e1:	68 23 42 92 0c       	push   0xc924223
c00094e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ee:	e8 b6 ee 01 00       	call   c00283a9 <__gtdf2>
c00094f3:	83 c4 10             	add    esp,0x10
c00094f6:	85 c0                	test   eax,eax
c00094f8:	0f 8e 9f 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009502:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009505:	8b 00                	mov    eax,DWORD PTR [eax]
c0009507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000950b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000950f:	52                   	push   edx
c0009510:	50                   	push   eax
c0009511:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009514:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009517:	e8 b0 e5 01 00       	call   c0027acc <__subdf3>
c000951c:	5f                   	pop    edi
c000951d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009521:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009525:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009528:	e8 2e ec 01 00       	call   c002815b <__floatsidf>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009534:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009538:	52                   	push   edx
c0009539:	50                   	push   eax
c000953a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000953e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009542:	e8 b1 e5 01 00       	call   c0027af8 <__muldf3>
c0009547:	5d                   	pop    ebp
c0009548:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000954c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009550:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009553:	e8 03 ec 01 00       	call   c002815b <__floatsidf>
c0009558:	83 c4 10             	add    esp,0x10
c000955b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000955f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009563:	52                   	push   edx
c0009564:	50                   	push   eax
c0009565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009569:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000956d:	e8 6a e8 01 00       	call   c0027ddc <__divdf3>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009579:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000957d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009581:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009589:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000958d:	e8 e9 de 01 00       	call   c002747b <__adddf3>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009599:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000959d:	31 ff                	xor    edi,edi
c000959f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095a2:	39 f8                	cmp    eax,edi
c00095a4:	0f 8e ac 00 00 00    	jle    c0009656 <linear_vari_process+0x681>
c00095aa:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ac:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095af:	29 c1                	sub    ecx,eax
c00095b1:	89 c8                	mov    eax,ecx
c00095b3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095b6:	01 f8                	add    eax,edi
c00095b8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095bc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095c9:	51                   	push   ecx
c00095ca:	01 f8                	add    eax,edi
c00095cc:	51                   	push   ecx
c00095cd:	47                   	inc    edi
c00095ce:	55                   	push   ebp
c00095cf:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095d2:	e8 39 d8 01 00       	call   c0026e10 <__subsf3>
c00095d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00095da:	e8 10 ef 01 00       	call   c00284ef <__extendsfdf2>
c00095df:	83 c4 10             	add    esp,0x10
c00095e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095ea:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095ee:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095fa:	e8 f9 e4 01 00       	call   c0027af8 <__muldf3>
c00095ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000960a:	e8 e0 ee 01 00       	call   c00284ef <__extendsfdf2>
c000960f:	83 c4 10             	add    esp,0x10
c0009612:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009616:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000961a:	52                   	push   edx
c000961b:	50                   	push   eax
c000961c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009620:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009624:	e8 52 de 01 00       	call   c002747b <__adddf3>
c0009629:	5d                   	pop    ebp
c000962a:	59                   	pop    ecx
c000962b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000962f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009633:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009637:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963b:	e8 8b ed 01 00       	call   c00283cb <__truncdfsf2>
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009647:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000964b:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000964e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009651:	e9 49 ff ff ff       	jmp    c000959f <linear_vari_process+0x5ca>
c0009656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965e:	68 00 00 f0 3f       	push   0x3ff00000
c0009663:	6a 00                	push   0x0
c0009665:	e8 72 e7 01 00       	call   c0027ddc <__divdf3>
c000966a:	83 c4 10             	add    esp,0x10
c000966d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009671:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009675:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009679:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000967d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009681:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009685:	e8 f1 dd 01 00       	call   c002747b <__adddf3>
c000968a:	59                   	pop    ecx
c000968b:	5f                   	pop    edi
c000968c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009690:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	e8 df ee 01 00       	call   c0028580 <lrint>
c00096a1:	83 ec 0c             	sub    esp,0xc
c00096a4:	50                   	push   eax
c00096a5:	e8 b1 ea 01 00       	call   c002815b <__floatsidf>
c00096aa:	83 c4 10             	add    esp,0x10
c00096ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096b5:	52                   	push   edx
c00096b6:	50                   	push   eax
c00096b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bf:	e8 08 e4 01 00       	call   c0027acc <__subdf3>
c00096c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096cc:	83 c4 20             	add    esp,0x20
c00096cf:	6a 00                	push   0x0
c00096d1:	6a 00                	push   0x0
c00096d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096db:	e8 e7 ec 01 00       	call   c00283c7 <__ltdf2>
c00096e0:	83 c4 10             	add    esp,0x10
c00096e3:	85 c0                	test   eax,eax
c00096e5:	79 1e                	jns    c0009705 <linear_vari_process+0x730>
c00096e7:	68 00 00 f0 3f       	push   0x3ff00000
c00096ec:	6a 00                	push   0x0
c00096ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f6:	e8 80 dd 01 00       	call   c002747b <__adddf3>
c00096fb:	83 c4 10             	add    esp,0x10
c00096fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0009701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009705:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009708:	83 ec 10             	sub    esp,0x10
c000970b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000970f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009713:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009717:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000971b:	e8 ac e3 01 00       	call   c0027acc <__subdf3>
c0009720:	e9 bc fc ff ff       	jmp    c00093e1 <linear_vari_process+0x40c>
c0009725:	39 fd                	cmp    ebp,edi
c0009727:	7d 38                	jge    c0009761 <linear_vari_process+0x78c>
c0009729:	83 ec 0c             	sub    esp,0xc
c000972c:	89 f8                	mov    eax,edi
c000972e:	29 e8                	sub    eax,ebp
c0009730:	99                   	cdq    
c0009731:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009734:	50                   	push   eax
c0009735:	e8 21 ea 01 00       	call   c002815b <__floatsidf>
c000973a:	83 c4 10             	add    esp,0x10
c000973d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009741:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974f:	e8 27 dd 01 00       	call   c002747b <__adddf3>
c0009754:	83 c4 10             	add    esp,0x10
c0009757:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000975a:	89 04 24             	mov    DWORD PTR [esp],eax
c000975d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009761:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009765:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009768:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000976c:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000976f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009772:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009775:	85 c0                	test   eax,eax
c0009777:	7f 29                	jg     c00097a2 <linear_vari_process+0x7cd>
c0009779:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000977d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009785:	89 01                	mov    DWORD PTR [ecx],eax
c0009787:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000978a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000978d:	99                   	cdq    
c000978e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009791:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009794:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009797:	99                   	cdq    
c0009798:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000979b:	31 d2                	xor    edx,edx
c000979d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097a0:	eb 1d                	jmp    c00097bf <linear_vari_process+0x7ea>
c00097a2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097a5:	31 d2                	xor    edx,edx
c00097a7:	29 c8                	sub    eax,ecx
c00097a9:	c1 e0 02             	shl    eax,0x2
c00097ac:	39 d1                	cmp    ecx,edx
c00097ae:	7e c9                	jle    c0009779 <linear_vari_process+0x7a4>
c00097b0:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097b2:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097b5:	83 c0 04             	add    eax,0x4
c00097b8:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097bc:	42                   	inc    edx
c00097bd:	eb ed                	jmp    c00097ac <linear_vari_process+0x7d7>
c00097bf:	83 c4 3c             	add    esp,0x3c
c00097c2:	89 d0                	mov    eax,edx
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <linear_reset>:
c00097c9:	83 ec 0c             	sub    esp,0xc
c00097cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097d3:	85 c0                	test   eax,eax
c00097d5:	74 20                	je     c00097f7 <linear_reset+0x2e>
c00097d7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097da:	83 c0 1c             	add    eax,0x1c
c00097dd:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097e0:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00097e7:	c1 e2 02             	shl    edx,0x2
c00097ea:	51                   	push   ecx
c00097eb:	52                   	push   edx
c00097ec:	6a 00                	push   0x0
c00097ee:	50                   	push   eax
c00097ef:	e8 5c 6f ff ff       	call   c0000750 <memset>
c00097f4:	83 c4 10             	add    esp,0x10
c00097f7:	83 c4 0c             	add    esp,0xc
c00097fa:	c3                   	ret    

c00097fb <linear_get_name>:
c00097fb:	31 c0                	xor    eax,eax
c00097fd:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009802:	75 05                	jne    c0009809 <linear_get_name+0xe>
c0009804:	b8 80 9d 02 c0       	mov    eax,0xc0029d80
c0009809:	c3                   	ret    

c000980a <linear_get_description>:
c000980a:	31 c0                	xor    eax,eax
c000980c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009811:	75 05                	jne    c0009818 <linear_get_description+0xe>
c0009813:	b8 94 9d 02 c0       	mov    eax,0xc0029d94
c0009818:	c3                   	ret    

c0009819 <linear_set_converter>:
c0009819:	53                   	push   ebx
c000981a:	b8 0a 00 00 00       	mov    eax,0xa
c000981f:	83 ec 08             	sub    esp,0x8
c0009822:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009826:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000982b:	75 6e                	jne    c000989b <linear_set_converter+0x82>
c000982d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009830:	85 c0                	test   eax,eax
c0009832:	74 13                	je     c0009847 <linear_set_converter+0x2e>
c0009834:	83 ec 0c             	sub    esp,0xc
c0009837:	50                   	push   eax
c0009838:	e8 6c 5d 00 00       	call   c000f5a9 <free>
c000983d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009844:	83 c4 10             	add    esp,0x10
c0009847:	50                   	push   eax
c0009848:	50                   	push   eax
c0009849:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000984c:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009853:	50                   	push   eax
c0009854:	6a 01                	push   0x1
c0009856:	e8 6e 5d 00 00       	call   c000f5c9 <calloc>
c000985b:	83 c4 10             	add    esp,0x10
c000985e:	89 c2                	mov    edx,eax
c0009860:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009863:	85 d2                	test   edx,edx
c0009865:	b8 01 00 00 00       	mov    eax,0x1
c000986a:	74 2f                	je     c000989b <linear_set_converter+0x82>
c000986c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000986f:	83 ec 0c             	sub    esp,0xc
c0009872:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009875:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000987b:	c7 43 24 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008fd5
c0009882:	c7 43 20 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008fd5
c0009889:	c7 43 28 c9 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097c9
c0009890:	53                   	push   ebx
c0009891:	e8 33 ff ff ff       	call   c00097c9 <linear_reset>
c0009896:	83 c4 10             	add    esp,0x10
c0009899:	31 c0                	xor    eax,eax
c000989b:	83 c4 08             	add    esp,0x8
c000989e:	5b                   	pop    ebx
c000989f:	c3                   	ret    

c00098a0 <int_to_fp>:
c00098a0:	c1 e0 0c             	shl    eax,0xc
c00098a3:	c3                   	ret    

c00098a4 <fp_to_int>:
c00098a4:	c1 f8 0c             	sar    eax,0xc
c00098a7:	c3                   	ret    

c00098a8 <fp_fraction_part>:
c00098a8:	25 ff 0f 00 00       	and    eax,0xfff
c00098ad:	c3                   	ret    

c00098ae <fp_to_double>:
c00098ae:	83 ec 1c             	sub    esp,0x1c
c00098b1:	e8 f2 ff ff ff       	call   c00098a8 <fp_fraction_part>
c00098b6:	83 ec 0c             	sub    esp,0xc
c00098b9:	50                   	push   eax
c00098ba:	e8 9c e8 01 00       	call   c002815b <__floatsidf>
c00098bf:	83 c4 10             	add    esp,0x10
c00098c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ca:	68 00 00 30 3f       	push   0x3f300000
c00098cf:	6a 00                	push   0x0
c00098d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d9:	e8 1a e2 01 00       	call   c0027af8 <__muldf3>
c00098de:	83 c4 2c             	add    esp,0x2c
c00098e1:	c3                   	ret    

c00098e2 <calc_output_single>:
c00098e2:	55                   	push   ebp
c00098e3:	57                   	push   edi
c00098e4:	56                   	push   esi
c00098e5:	89 c6                	mov    esi,eax
c00098e7:	53                   	push   ebx
c00098e8:	89 d3                	mov    ebx,edx
c00098ea:	83 ec 4c             	sub    esp,0x4c
c00098ed:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00098f1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00098f4:	e8 a7 ff ff ff       	call   c00098a0 <int_to_fp>
c00098f9:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00098fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009900:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009904:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009908:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000990b:	99                   	cdq    
c000990c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009914:	f7 fb                	idiv   ebx
c0009916:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000991e:	89 da                	mov    edx,ebx
c0009920:	0f af d0             	imul   edx,eax
c0009923:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009927:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000992b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000992f:	29 c2                	sub    edx,eax
c0009931:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009938:	83 c5 04             	add    ebp,0x4
c000993b:	e8 6e ff ff ff       	call   c00098ae <fp_to_double>
c0009940:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009944:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000994c:	e8 53 ff ff ff       	call   c00098a4 <fp_to_int>
c0009951:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009954:	52                   	push   edx
c0009955:	52                   	push   edx
c0009956:	51                   	push   ecx
c0009957:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000995b:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000995f:	e8 ac d4 01 00       	call   c0026e10 <__subsf3>
c0009964:	89 04 24             	mov    DWORD PTR [esp],eax
c0009967:	e8 83 eb 01 00       	call   c00284ef <__extendsfdf2>
c000996c:	83 c4 10             	add    esp,0x10
c000996f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009977:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009983:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009987:	e8 6c e1 01 00       	call   c0027af8 <__muldf3>
c000998c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009990:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009994:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009997:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000999b:	e8 4f eb 01 00       	call   c00284ef <__extendsfdf2>
c00099a0:	83 c4 10             	add    esp,0x10
c00099a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ab:	52                   	push   edx
c00099ac:	50                   	push   eax
c00099ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b5:	e8 c1 da 01 00       	call   c002747b <__adddf3>
c00099ba:	59                   	pop    ecx
c00099bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099c3:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099c9:	e8 21 eb 01 00       	call   c00284ef <__extendsfdf2>
c00099ce:	83 c4 10             	add    esp,0x10
c00099d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099d9:	52                   	push   edx
c00099da:	50                   	push   eax
c00099db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099e3:	e8 10 e1 01 00       	call   c0027af8 <__muldf3>
c00099e8:	83 c4 10             	add    esp,0x10
c00099eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00099ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00099f3:	52                   	push   edx
c00099f4:	50                   	push   eax
c00099f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099fd:	e8 79 da 01 00       	call   c002747b <__adddf3>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a0d:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a11:	0f 89 1d ff ff ff    	jns    c0009934 <calc_output_single+0x52>
c0009a17:	89 d9                	mov    ecx,ebx
c0009a19:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a1d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a21:	89 dd                	mov    ebp,ebx
c0009a23:	29 c8                	sub    eax,ecx
c0009a25:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a2d:	99                   	cdq    
c0009a2e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a36:	f7 fb                	idiv   ebx
c0009a38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a3c:	0f af e8             	imul   ebp,eax
c0009a3f:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a43:	01 cd                	add    ebp,ecx
c0009a45:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a48:	89 e8                	mov    eax,ebp
c0009a4a:	83 ee 04             	sub    esi,0x4
c0009a4d:	e8 5c fe ff ff       	call   c00098ae <fp_to_double>
c0009a52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a5a:	89 e8                	mov    eax,ebp
c0009a5c:	29 dd                	sub    ebp,ebx
c0009a5e:	e8 41 fe ff ff       	call   c00098a4 <fp_to_int>
c0009a63:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a66:	52                   	push   edx
c0009a67:	52                   	push   edx
c0009a68:	51                   	push   ecx
c0009a69:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a6d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a71:	e8 9a d3 01 00       	call   c0026e10 <__subsf3>
c0009a76:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a79:	e8 71 ea 01 00       	call   c00284ef <__extendsfdf2>
c0009a7e:	83 c4 10             	add    esp,0x10
c0009a81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009a85:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009a89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a99:	e8 5a e0 01 00       	call   c0027af8 <__muldf3>
c0009a9e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009aa2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009aa6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aa9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aad:	e8 3d ea 01 00       	call   c00284ef <__extendsfdf2>
c0009ab2:	83 c4 10             	add    esp,0x10
c0009ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ab9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009abd:	52                   	push   edx
c0009abe:	50                   	push   eax
c0009abf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac7:	e8 af d9 01 00       	call   c002747b <__adddf3>
c0009acc:	59                   	pop    ecx
c0009acd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ad1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009ad5:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009adb:	e8 0f ea 01 00       	call   c00284ef <__extendsfdf2>
c0009ae0:	83 c4 10             	add    esp,0x10
c0009ae3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ae7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aeb:	52                   	push   edx
c0009aec:	50                   	push   eax
c0009aed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af5:	e8 fe df 01 00       	call   c0027af8 <__muldf3>
c0009afa:	83 c4 10             	add    esp,0x10
c0009afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b01:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b05:	52                   	push   edx
c0009b06:	50                   	push   eax
c0009b07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0f:	e8 67 d9 01 00       	call   c002747b <__adddf3>
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	85 ed                	test   ebp,ebp
c0009b19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b1d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b21:	0f 8f 21 ff ff ff    	jg     c0009a48 <calc_output_single+0x166>
c0009b27:	52                   	push   edx
c0009b28:	50                   	push   eax
c0009b29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b31:	e8 45 d9 01 00       	call   c002747b <__adddf3>
c0009b36:	83 c4 5c             	add    esp,0x5c
c0009b39:	5b                   	pop    ebx
c0009b3a:	5e                   	pop    esi
c0009b3b:	5f                   	pop    edi
c0009b3c:	5d                   	pop    ebp
c0009b3d:	c3                   	ret    

c0009b3e <calc_output_stereo>:
c0009b3e:	55                   	push   ebp
c0009b3f:	89 cd                	mov    ebp,ecx
c0009b41:	57                   	push   edi
c0009b42:	56                   	push   esi
c0009b43:	53                   	push   ebx
c0009b44:	89 c3                	mov    ebx,eax
c0009b46:	83 ec 6c             	sub    esp,0x6c
c0009b49:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b4d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b54:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b5b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b5f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b63:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b66:	e8 35 fd ff ff       	call   c00098a0 <int_to_fp>
c0009b6b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b77:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b7f:	29 c8                	sub    eax,ecx
c0009b81:	99                   	cdq    
c0009b82:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b8a:	0f af d0             	imul   edx,eax
c0009b8d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009b90:	31 d2                	xor    edx,edx
c0009b92:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009b96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b9a:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009b9d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009ba1:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009ba4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009ba8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bac:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009baf:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bb4:	29 c1                	sub    ecx,eax
c0009bb6:	31 c0                	xor    eax,eax
c0009bb8:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bc3:	83 c7 08             	add    edi,0x8
c0009bc6:	e8 e3 fc ff ff       	call   c00098ae <fp_to_double>
c0009bcb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009bcf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bd7:	e8 c8 fc ff ff       	call   c00098a4 <fp_to_int>
c0009bdc:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bdf:	52                   	push   edx
c0009be0:	52                   	push   edx
c0009be1:	51                   	push   ecx
c0009be2:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009be6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bea:	e8 21 d2 01 00       	call   c0026e10 <__subsf3>
c0009bef:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bf2:	e8 f8 e8 01 00       	call   c00284ef <__extendsfdf2>
c0009bf7:	83 c4 10             	add    esp,0x10
c0009bfa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009bfe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c0a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c0e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c12:	e8 e1 de 01 00       	call   c0027af8 <__muldf3>
c0009c17:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c1b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c1f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c26:	e8 c4 e8 01 00       	call   c00284ef <__extendsfdf2>
c0009c2b:	83 c4 10             	add    esp,0x10
c0009c2e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c32:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c36:	52                   	push   edx
c0009c37:	50                   	push   eax
c0009c38:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c3c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c40:	e8 36 d8 01 00       	call   c002747b <__adddf3>
c0009c45:	59                   	pop    ecx
c0009c46:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c4a:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c4e:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c54:	e8 96 e8 01 00       	call   c00284ef <__extendsfdf2>
c0009c59:	83 c4 10             	add    esp,0x10
c0009c5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c6c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c70:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c74:	e8 7f de 01 00       	call   c0027af8 <__muldf3>
c0009c79:	83 c4 10             	add    esp,0x10
c0009c7c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c80:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c84:	52                   	push   edx
c0009c85:	50                   	push   eax
c0009c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8e:	e8 e8 d7 01 00       	call   c002747b <__adddf3>
c0009c93:	59                   	pop    ecx
c0009c94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c98:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009c9c:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ca2:	e8 48 e8 01 00       	call   c00284ef <__extendsfdf2>
c0009ca7:	83 c4 10             	add    esp,0x10
c0009caa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cae:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cb2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cb6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cbe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cc2:	e8 31 de 01 00       	call   c0027af8 <__muldf3>
c0009cc7:	83 c4 10             	add    esp,0x10
c0009cca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009cce:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cd2:	52                   	push   edx
c0009cd3:	50                   	push   eax
c0009cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cdc:	e8 9a d7 01 00       	call   c002747b <__adddf3>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ce8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cec:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf0:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009cf4:	0f 89 c5 fe ff ff    	jns    c0009bbf <calc_output_stereo+0x81>
c0009cfa:	29 e9                	sub    ecx,ebp
c0009cfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d04:	29 c8                	sub    eax,ecx
c0009d06:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d0e:	99                   	cdq    
c0009d0f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d13:	31 d2                	xor    edx,edx
c0009d15:	0f af f8             	imul   edi,eax
c0009d18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d1c:	40                   	inc    eax
c0009d1d:	01 cf                	add    edi,ecx
c0009d1f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d24:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d28:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d30:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d33:	31 c0                	xor    eax,eax
c0009d35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d39:	89 f8                	mov    eax,edi
c0009d3b:	83 eb 08             	sub    ebx,0x8
c0009d3e:	e8 6b fb ff ff       	call   c00098ae <fp_to_double>
c0009d43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d4b:	89 f8                	mov    eax,edi
c0009d4d:	e8 52 fb ff ff       	call   c00098a4 <fp_to_int>
c0009d52:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	55                   	push   ebp
c0009d58:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d5c:	e8 af d0 01 00       	call   c0026e10 <__subsf3>
c0009d61:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d64:	e8 86 e7 01 00       	call   c00284ef <__extendsfdf2>
c0009d69:	83 c4 10             	add    esp,0x10
c0009d6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d78:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d80:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d84:	e8 6f dd 01 00       	call   c0027af8 <__muldf3>
c0009d89:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009d8c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d90:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d94:	e8 56 e7 01 00       	call   c00284ef <__extendsfdf2>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009da0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009da4:	52                   	push   edx
c0009da5:	50                   	push   eax
c0009da6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009daa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dae:	e8 c8 d6 01 00       	call   c002747b <__adddf3>
c0009db3:	59                   	pop    ecx
c0009db4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009db8:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dbc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dc2:	e8 28 e7 01 00       	call   c00284ef <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009de2:	e8 11 dd 01 00       	call   c0027af8 <__muldf3>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009df2:	52                   	push   edx
c0009df3:	50                   	push   eax
c0009df4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009df8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009dfc:	e8 7a d6 01 00       	call   c002747b <__adddf3>
c0009e01:	5d                   	pop    ebp
c0009e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e06:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e0a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e10:	e8 da e6 01 00       	call   c00284ef <__extendsfdf2>
c0009e15:	83 c4 10             	add    esp,0x10
c0009e18:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e1c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e30:	e8 c3 dc 01 00       	call   c0027af8 <__muldf3>
c0009e35:	83 c4 10             	add    esp,0x10
c0009e38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e40:	52                   	push   edx
c0009e41:	50                   	push   eax
c0009e42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e4a:	e8 2c d6 01 00       	call   c002747b <__adddf3>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e56:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e5e:	85 ff                	test   edi,edi
c0009e60:	0f 8f d3 fe ff ff    	jg     c0009d39 <calc_output_stereo+0x1fb>
c0009e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e76:	e8 00 d6 01 00       	call   c002747b <__adddf3>
c0009e7b:	83 c4 10             	add    esp,0x10
c0009e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e96:	e8 5d dc 01 00       	call   c0027af8 <__muldf3>
c0009e9b:	59                   	pop    ecx
c0009e9c:	5b                   	pop    ebx
c0009e9d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ea1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ea5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ead:	e8 19 e5 01 00       	call   c00283cb <__truncdfsf2>
c0009eb2:	83 c4 10             	add    esp,0x10
c0009eb5:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ebc:	89 03                	mov    DWORD PTR [ebx],eax
c0009ebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ece:	e8 a8 d5 01 00       	call   c002747b <__adddf3>
c0009ed3:	83 c4 10             	add    esp,0x10
c0009ed6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ede:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eee:	e8 05 dc 01 00       	call   c0027af8 <__muldf3>
c0009ef3:	5e                   	pop    esi
c0009ef4:	5f                   	pop    edi
c0009ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ef9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009efd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f05:	e8 c1 e4 01 00       	call   c00283cb <__truncdfsf2>
c0009f0a:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f11:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f14:	83 c4 7c             	add    esp,0x7c
c0009f17:	5b                   	pop    ebx
c0009f18:	5e                   	pop    esi
c0009f19:	5f                   	pop    edi
c0009f1a:	5d                   	pop    ebp
c0009f1b:	c3                   	ret    

c0009f1c <calc_output_quad>:
c0009f1c:	55                   	push   ebp
c0009f1d:	57                   	push   edi
c0009f1e:	56                   	push   esi
c0009f1f:	89 c6                	mov    esi,eax
c0009f21:	53                   	push   ebx
c0009f22:	83 ec 7c             	sub    esp,0x7c
c0009f25:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f29:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f2d:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f34:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f43:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f46:	e8 55 f9 ff ff       	call   c00098a0 <int_to_fp>
c0009f4b:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f4e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f55:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f59:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f5d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f61:	99                   	cdq    
c0009f62:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f66:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f6a:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f6d:	31 d2                	xor    edx,edx
c0009f6f:	0f af d8             	imul   ebx,eax
c0009f72:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f7a:	0f af c7             	imul   eax,edi
c0009f7d:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f81:	29 c1                	sub    ecx,eax
c0009f83:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009f8b:	31 c0                	xor    eax,eax
c0009f8d:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009f90:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f94:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f9c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fa0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fa4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fa8:	89 d8                	mov    eax,ebx
c0009faa:	83 c7 10             	add    edi,0x10
c0009fad:	e8 fc f8 ff ff       	call   c00098ae <fp_to_double>
c0009fb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fba:	89 d8                	mov    eax,ebx
c0009fbc:	e8 e3 f8 ff ff       	call   c00098a4 <fp_to_int>
c0009fc1:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fc5:	52                   	push   edx
c0009fc6:	52                   	push   edx
c0009fc7:	51                   	push   ecx
c0009fc8:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fcc:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fd0:	e8 3b ce 01 00       	call   c0026e10 <__subsf3>
c0009fd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd8:	e8 12 e5 01 00       	call   c00284ef <__extendsfdf2>
c0009fdd:	83 c4 10             	add    esp,0x10
c0009fe0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fe4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff8:	e8 fb da 01 00       	call   c0027af8 <__muldf3>
c0009ffd:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a001:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a005:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a008:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a00c:	e8 de e4 01 00       	call   c00284ef <__extendsfdf2>
c000a011:	83 c4 10             	add    esp,0x10
c000a014:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a018:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a01c:	52                   	push   edx
c000a01d:	50                   	push   eax
c000a01e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a022:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a026:	e8 50 d4 01 00       	call   c002747b <__adddf3>
c000a02b:	59                   	pop    ecx
c000a02c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a030:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a034:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a03a:	e8 b0 e4 01 00       	call   c00284ef <__extendsfdf2>
c000a03f:	83 c4 10             	add    esp,0x10
c000a042:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a046:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a052:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a056:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05a:	e8 99 da 01 00       	call   c0027af8 <__muldf3>
c000a05f:	83 c4 10             	add    esp,0x10
c000a062:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a066:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a06a:	52                   	push   edx
c000a06b:	50                   	push   eax
c000a06c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a074:	e8 02 d4 01 00       	call   c002747b <__adddf3>
c000a079:	59                   	pop    ecx
c000a07a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a07e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a082:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a088:	e8 62 e4 01 00       	call   c00284ef <__extendsfdf2>
c000a08d:	83 c4 10             	add    esp,0x10
c000a090:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a094:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a8:	e8 4b da 01 00       	call   c0027af8 <__muldf3>
c000a0ad:	83 c4 10             	add    esp,0x10
c000a0b0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b8:	52                   	push   edx
c000a0b9:	50                   	push   eax
c000a0ba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c2:	e8 b4 d3 01 00       	call   c002747b <__adddf3>
c000a0c7:	59                   	pop    ecx
c000a0c8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0cc:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0d0:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0d6:	e8 14 e4 01 00       	call   c00284ef <__extendsfdf2>
c000a0db:	83 c4 10             	add    esp,0x10
c000a0de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ee:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f6:	e8 fd d9 01 00       	call   c0027af8 <__muldf3>
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a102:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a106:	52                   	push   edx
c000a107:	50                   	push   eax
c000a108:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a10c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a110:	e8 66 d3 01 00       	call   c002747b <__adddf3>
c000a115:	59                   	pop    ecx
c000a116:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a11a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a11e:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a124:	e8 c6 e3 01 00       	call   c00284ef <__extendsfdf2>
c000a129:	83 c4 10             	add    esp,0x10
c000a12c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a130:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a140:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a144:	e8 af d9 01 00       	call   c0027af8 <__muldf3>
c000a149:	83 c4 10             	add    esp,0x10
c000a14c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a150:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a154:	52                   	push   edx
c000a155:	50                   	push   eax
c000a156:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15e:	e8 18 d3 01 00       	call   c002747b <__adddf3>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a16a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a16e:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a172:	0f 89 30 fe ff ff    	jns    c0009fa8 <calc_output_quad+0x8c>
c000a178:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a17c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a180:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a184:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a188:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a190:	29 c8                	sub    eax,ecx
c000a192:	99                   	cdq    
c000a193:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a197:	31 d2                	xor    edx,edx
c000a199:	0f af d8             	imul   ebx,eax
c000a19c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1a0:	40                   	inc    eax
c000a1a1:	01 cb                	add    ebx,ecx
c000a1a3:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1a8:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ac:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1b4:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1b7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1bf:	31 c0                	xor    eax,eax
c000a1c1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1c5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1cd:	89 d8                	mov    eax,ebx
c000a1cf:	83 ee 10             	sub    esi,0x10
c000a1d2:	e8 d7 f6 ff ff       	call   c00098ae <fp_to_double>
c000a1d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1df:	89 d8                	mov    eax,ebx
c000a1e1:	e8 be f6 ff ff       	call   c00098a4 <fp_to_int>
c000a1e6:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a1ea:	52                   	push   edx
c000a1eb:	52                   	push   edx
c000a1ec:	57                   	push   edi
c000a1ed:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a1f1:	e8 1a cc 01 00       	call   c0026e10 <__subsf3>
c000a1f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a1f9:	e8 f1 e2 01 00       	call   c00284ef <__extendsfdf2>
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a205:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a211:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a215:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a219:	e8 da d8 01 00       	call   c0027af8 <__muldf3>
c000a21e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a221:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a225:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a229:	e8 c1 e2 01 00       	call   c00284ef <__extendsfdf2>
c000a22e:	83 c4 10             	add    esp,0x10
c000a231:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a235:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a239:	52                   	push   edx
c000a23a:	50                   	push   eax
c000a23b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a23f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a243:	e8 33 d2 01 00       	call   c002747b <__adddf3>
c000a248:	59                   	pop    ecx
c000a249:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a24d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a251:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a257:	e8 93 e2 01 00       	call   c00284ef <__extendsfdf2>
c000a25c:	83 c4 10             	add    esp,0x10
c000a25f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a263:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a273:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a277:	e8 7c d8 01 00       	call   c0027af8 <__muldf3>
c000a27c:	83 c4 10             	add    esp,0x10
c000a27f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a283:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a287:	52                   	push   edx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a28d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a291:	e8 e5 d1 01 00       	call   c002747b <__adddf3>
c000a296:	5f                   	pop    edi
c000a297:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a29b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a29f:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2a5:	e8 45 e2 01 00       	call   c00284ef <__extendsfdf2>
c000a2aa:	83 c4 10             	add    esp,0x10
c000a2ad:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2b1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2bd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c5:	e8 2e d8 01 00       	call   c0027af8 <__muldf3>
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2d1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d5:	52                   	push   edx
c000a2d6:	50                   	push   eax
c000a2d7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2db:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2df:	e8 97 d1 01 00       	call   c002747b <__adddf3>
c000a2e4:	59                   	pop    ecx
c000a2e5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a2e9:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a2ed:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a2f3:	e8 f7 e1 01 00       	call   c00284ef <__extendsfdf2>
c000a2f8:	83 c4 10             	add    esp,0x10
c000a2fb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a30b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a30f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a313:	e8 e0 d7 01 00       	call   c0027af8 <__muldf3>
c000a318:	83 c4 10             	add    esp,0x10
c000a31b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a323:	52                   	push   edx
c000a324:	50                   	push   eax
c000a325:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a329:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a32d:	e8 49 d1 01 00       	call   c002747b <__adddf3>
c000a332:	5f                   	pop    edi
c000a333:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a337:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a33b:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a341:	e8 a9 e1 01 00       	call   c00284ef <__extendsfdf2>
c000a346:	83 c4 10             	add    esp,0x10
c000a349:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a34d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a359:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a35d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a361:	e8 92 d7 01 00       	call   c0027af8 <__muldf3>
c000a366:	83 c4 10             	add    esp,0x10
c000a369:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a36d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a371:	52                   	push   edx
c000a372:	50                   	push   eax
c000a373:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a377:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a37b:	e8 fb d0 01 00       	call   c002747b <__adddf3>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a387:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a38b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a38f:	85 db                	test   ebx,ebx
c000a391:	0f 8f 36 fe ff ff    	jg     c000a1cd <calc_output_quad+0x2b1>
c000a397:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a7:	e8 cf d0 01 00       	call   c002747b <__adddf3>
c000a3ac:	83 c4 10             	add    esp,0x10
c000a3af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c7:	e8 2c d7 01 00       	call   c0027af8 <__muldf3>
c000a3cc:	59                   	pop    ecx
c000a3cd:	5b                   	pop    ebx
c000a3ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3de:	e8 e8 df 01 00       	call   c00283cb <__truncdfsf2>
c000a3e3:	83 c4 10             	add    esp,0x10
c000a3e6:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a3ed:	89 06                	mov    DWORD PTR [esi],eax
c000a3ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3ff:	e8 77 d0 01 00       	call   c002747b <__adddf3>
c000a404:	83 c4 10             	add    esp,0x10
c000a407:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a40b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a40f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41f:	e8 d4 d6 01 00       	call   c0027af8 <__muldf3>
c000a424:	5e                   	pop    esi
c000a425:	5f                   	pop    edi
c000a426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a42a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a436:	e8 90 df 01 00       	call   c00283cb <__truncdfsf2>
c000a43b:	83 c4 10             	add    esp,0x10
c000a43e:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a445:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a448:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a44c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a450:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a454:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a458:	e8 1e d0 01 00       	call   c002747b <__adddf3>
c000a45d:	83 c4 10             	add    esp,0x10
c000a460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 7b d6 01 00       	call   c0027af8 <__muldf3>
c000a47d:	5d                   	pop    ebp
c000a47e:	59                   	pop    ecx
c000a47f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a483:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48f:	e8 37 df 01 00       	call   c00283cb <__truncdfsf2>
c000a494:	83 c4 10             	add    esp,0x10
c000a497:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a49e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4b1:	e8 c5 cf 01 00       	call   c002747b <__adddf3>
c000a4b6:	83 c4 10             	add    esp,0x10
c000a4b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 22 d6 01 00       	call   c0027af8 <__muldf3>
c000a4d6:	5b                   	pop    ebx
c000a4d7:	5e                   	pop    esi
c000a4d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e8:	e8 de de 01 00       	call   c00283cb <__truncdfsf2>
c000a4ed:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a4f4:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a4f7:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a4fd:	5b                   	pop    ebx
c000a4fe:	5e                   	pop    esi
c000a4ff:	5f                   	pop    edi
c000a500:	5d                   	pop    ebp
c000a501:	c3                   	ret    

c000a502 <calc_output_hex>:
c000a502:	55                   	push   ebp
c000a503:	89 cd                	mov    ebp,ecx
c000a505:	57                   	push   edi
c000a506:	56                   	push   esi
c000a507:	53                   	push   ebx
c000a508:	89 c3                	mov    ebx,eax
c000a50a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a510:	89 14 24             	mov    DWORD PTR [esp],edx
c000a513:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a51a:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a521:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a525:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a529:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a52c:	e8 6f f3 ff ff       	call   c00098a0 <int_to_fp>
c000a531:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a534:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a538:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a53b:	29 c8                	sub    eax,ecx
c000a53d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a541:	99                   	cdq    
c000a542:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a54a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a54d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a555:	0f af f8             	imul   edi,eax
c000a558:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a55b:	01 cf                	add    edi,ecx
c000a55d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a561:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a564:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a568:	0f af c2             	imul   eax,edx
c000a56b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a56f:	29 c1                	sub    ecx,eax
c000a571:	31 d2                	xor    edx,edx
c000a573:	31 c0                	xor    eax,eax
c000a575:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a580:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a584:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a588:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a58c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a590:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a594:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a598:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a59c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a0:	89 f8                	mov    eax,edi
c000a5a2:	e8 07 f3 ff ff       	call   c00098ae <fp_to_double>
c000a5a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5af:	89 f8                	mov    eax,edi
c000a5b1:	e8 ee f2 ff ff       	call   c00098a4 <fp_to_int>
c000a5b6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5ba:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5bd:	52                   	push   edx
c000a5be:	52                   	push   edx
c000a5bf:	51                   	push   ecx
c000a5c0:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5c4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5cb:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5cf:	e8 3c c8 01 00       	call   c0026e10 <__subsf3>
c000a5d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5d7:	e8 13 df 01 00       	call   c00284ef <__extendsfdf2>
c000a5dc:	83 c4 10             	add    esp,0x10
c000a5df:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5e3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ef:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f7:	e8 fc d4 01 00       	call   c0027af8 <__muldf3>
c000a5fc:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a600:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a604:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a607:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a60b:	e8 df de 01 00       	call   c00284ef <__extendsfdf2>
c000a610:	83 c4 10             	add    esp,0x10
c000a613:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a617:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a61b:	52                   	push   edx
c000a61c:	50                   	push   eax
c000a61d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a625:	e8 51 ce 01 00       	call   c002747b <__adddf3>
c000a62a:	59                   	pop    ecx
c000a62b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a62f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a633:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a639:	e8 b1 de 01 00       	call   c00284ef <__extendsfdf2>
c000a63e:	83 c4 10             	add    esp,0x10
c000a641:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a645:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a655:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a659:	e8 9a d4 01 00       	call   c0027af8 <__muldf3>
c000a65e:	83 c4 10             	add    esp,0x10
c000a661:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a665:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a669:	52                   	push   edx
c000a66a:	50                   	push   eax
c000a66b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a66f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a673:	e8 03 ce 01 00       	call   c002747b <__adddf3>
c000a678:	59                   	pop    ecx
c000a679:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a67d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a681:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a687:	e8 63 de 01 00       	call   c00284ef <__extendsfdf2>
c000a68c:	83 c4 10             	add    esp,0x10
c000a68f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a693:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a7:	e8 4c d4 01 00       	call   c0027af8 <__muldf3>
c000a6ac:	83 c4 10             	add    esp,0x10
c000a6af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b7:	52                   	push   edx
c000a6b8:	50                   	push   eax
c000a6b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6c1:	e8 b5 cd 01 00       	call   c002747b <__adddf3>
c000a6c6:	59                   	pop    ecx
c000a6c7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6cb:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6cf:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6d5:	e8 15 de 01 00       	call   c00284ef <__extendsfdf2>
c000a6da:	83 c4 10             	add    esp,0x10
c000a6dd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6e1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f5:	e8 fe d3 01 00       	call   c0027af8 <__muldf3>
c000a6fa:	83 c4 10             	add    esp,0x10
c000a6fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a701:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a705:	52                   	push   edx
c000a706:	50                   	push   eax
c000a707:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70f:	e8 67 cd 01 00       	call   c002747b <__adddf3>
c000a714:	59                   	pop    ecx
c000a715:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a719:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a71d:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a723:	e8 c7 dd 01 00       	call   c00284ef <__extendsfdf2>
c000a728:	83 c4 10             	add    esp,0x10
c000a72b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a72f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a73f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a743:	e8 b0 d3 01 00       	call   c0027af8 <__muldf3>
c000a748:	83 c4 10             	add    esp,0x10
c000a74b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a753:	52                   	push   edx
c000a754:	50                   	push   eax
c000a755:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a759:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a75d:	e8 19 cd 01 00       	call   c002747b <__adddf3>
c000a762:	59                   	pop    ecx
c000a763:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a767:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a76b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a771:	e8 79 dd 01 00       	call   c00284ef <__extendsfdf2>
c000a776:	83 c4 10             	add    esp,0x10
c000a779:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a77d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a781:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a789:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a78d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a791:	e8 62 d3 01 00       	call   c0027af8 <__muldf3>
c000a796:	83 c4 10             	add    esp,0x10
c000a799:	83 c6 18             	add    esi,0x18
c000a79c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7a4:	52                   	push   edx
c000a7a5:	50                   	push   eax
c000a7a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ae:	e8 c8 cc 01 00       	call   c002747b <__adddf3>
c000a7b3:	59                   	pop    ecx
c000a7b4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7b8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7bc:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7c2:	e8 28 dd 01 00       	call   c00284ef <__extendsfdf2>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7e2:	e8 11 d3 01 00       	call   c0027af8 <__muldf3>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7f2:	52                   	push   edx
c000a7f3:	50                   	push   eax
c000a7f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7fc:	e8 7a cc 01 00       	call   c002747b <__adddf3>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a808:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a80c:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a80f:	0f 89 8b fd ff ff    	jns    c000a5a0 <calc_output_hex+0x9e>
c000a815:	31 f6                	xor    esi,esi
c000a817:	31 ff                	xor    edi,edi
c000a819:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a81d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a820:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a824:	29 e9                	sub    ecx,ebp
c000a826:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a82a:	29 c8                	sub    eax,ecx
c000a82c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a82f:	99                   	cdq    
c000a830:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a834:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a837:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a83b:	0f af e8             	imul   ebp,eax
c000a83e:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a842:	40                   	inc    eax
c000a843:	01 cd                	add    ebp,ecx
c000a845:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a84a:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a84e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a852:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a856:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a859:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a85d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a861:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a865:	89 e8                	mov    eax,ebp
c000a867:	e8 42 f0 ff ff       	call   c00098ae <fp_to_double>
c000a86c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a870:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a874:	89 e8                	mov    eax,ebp
c000a876:	e8 29 f0 ff ff       	call   c00098a4 <fp_to_int>
c000a87b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a87f:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a882:	52                   	push   edx
c000a883:	52                   	push   edx
c000a884:	51                   	push   ecx
c000a885:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a88c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a893:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a897:	e8 74 c5 01 00       	call   c0026e10 <__subsf3>
c000a89c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a89f:	e8 4b dc 01 00       	call   c00284ef <__extendsfdf2>
c000a8a4:	83 c4 10             	add    esp,0x10
c000a8a7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ab:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bf:	e8 34 d2 01 00       	call   c0027af8 <__muldf3>
c000a8c4:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8d2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8d6:	e8 14 dc 01 00       	call   c00284ef <__extendsfdf2>
c000a8db:	83 c4 10             	add    esp,0x10
c000a8de:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e6:	52                   	push   edx
c000a8e7:	50                   	push   eax
c000a8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f0:	e8 86 cb 01 00       	call   c002747b <__adddf3>
c000a8f5:	59                   	pop    ecx
c000a8f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a8fe:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a904:	e8 e6 db 01 00       	call   c00284ef <__extendsfdf2>
c000a909:	83 c4 10             	add    esp,0x10
c000a90c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a910:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a914:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a918:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a920:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a924:	e8 cf d1 01 00       	call   c0027af8 <__muldf3>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a930:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a934:	52                   	push   edx
c000a935:	50                   	push   eax
c000a936:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93e:	e8 38 cb 01 00       	call   c002747b <__adddf3>
c000a943:	59                   	pop    ecx
c000a944:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a948:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a94c:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a952:	e8 98 db 01 00       	call   c00284ef <__extendsfdf2>
c000a957:	83 c4 10             	add    esp,0x10
c000a95a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a95e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a96e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a972:	e8 81 d1 01 00       	call   c0027af8 <__muldf3>
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a97e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a982:	52                   	push   edx
c000a983:	50                   	push   eax
c000a984:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a988:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a98c:	e8 ea ca 01 00       	call   c002747b <__adddf3>
c000a991:	59                   	pop    ecx
c000a992:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a996:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a99a:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9a0:	e8 4a db 01 00       	call   c00284ef <__extendsfdf2>
c000a9a5:	83 c4 10             	add    esp,0x10
c000a9a8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ac:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9bc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9c0:	e8 33 d1 01 00       	call   c0027af8 <__muldf3>
c000a9c5:	83 c4 10             	add    esp,0x10
c000a9c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9d0:	52                   	push   edx
c000a9d1:	50                   	push   eax
c000a9d2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9da:	e8 9c ca 01 00       	call   c002747b <__adddf3>
c000a9df:	59                   	pop    ecx
c000a9e0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a9e4:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a9e8:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a9ee:	e8 fc da 01 00       	call   c00284ef <__extendsfdf2>
c000a9f3:	83 c4 10             	add    esp,0x10
c000a9f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa06:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0e:	e8 e5 d0 01 00       	call   c0027af8 <__muldf3>
c000aa13:	83 c4 10             	add    esp,0x10
c000aa16:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa1a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa1e:	52                   	push   edx
c000aa1f:	50                   	push   eax
c000aa20:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa24:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa28:	e8 4e ca 01 00       	call   c002747b <__adddf3>
c000aa2d:	59                   	pop    ecx
c000aa2e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa32:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa36:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa3c:	e8 ae da 01 00       	call   c00284ef <__extendsfdf2>
c000aa41:	83 c4 10             	add    esp,0x10
c000aa44:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa48:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa54:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa58:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa5c:	e8 97 d0 01 00       	call   c0027af8 <__muldf3>
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	83 eb 18             	sub    ebx,0x18
c000aa67:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa6b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa6f:	52                   	push   edx
c000aa70:	50                   	push   eax
c000aa71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa75:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa79:	e8 fd c9 01 00       	call   c002747b <__adddf3>
c000aa7e:	59                   	pop    ecx
c000aa7f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa83:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aa87:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aa8d:	e8 5d da 01 00       	call   c00284ef <__extendsfdf2>
c000aa92:	83 c4 10             	add    esp,0x10
c000aa95:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa99:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaa9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaad:	e8 46 d0 01 00       	call   c0027af8 <__muldf3>
c000aab2:	83 c4 10             	add    esp,0x10
c000aab5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aabd:	52                   	push   edx
c000aabe:	50                   	push   eax
c000aabf:	57                   	push   edi
c000aac0:	56                   	push   esi
c000aac1:	e8 b5 c9 01 00       	call   c002747b <__adddf3>
c000aac6:	83 c4 10             	add    esp,0x10
c000aac9:	89 c6                	mov    esi,eax
c000aacb:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aace:	89 d7                	mov    edi,edx
c000aad0:	85 ed                	test   ebp,ebp
c000aad2:	0f 8f 8d fd ff ff    	jg     c000a865 <calc_output_hex+0x363>
c000aad8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aadc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae8:	e8 8e c9 01 00       	call   c002747b <__adddf3>
c000aaed:	83 c4 10             	add    esp,0x10
c000aaf0:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaf7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aafb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab07:	e8 ec cf 01 00       	call   c0027af8 <__muldf3>
c000ab0c:	59                   	pop    ecx
c000ab0d:	5b                   	pop    ebx
c000ab0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab16:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1e:	e8 a8 d8 01 00       	call   c00283cb <__truncdfsf2>
c000ab23:	83 c4 10             	add    esp,0x10
c000ab26:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab2d:	89 03                	mov    DWORD PTR [ebx],eax
c000ab2f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab33:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3f:	e8 37 c9 01 00       	call   c002747b <__adddf3>
c000ab44:	83 c4 10             	add    esp,0x10
c000ab47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab4a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5e:	e8 95 cf 01 00       	call   c0027af8 <__muldf3>
c000ab63:	5d                   	pop    ebp
c000ab64:	59                   	pop    ecx
c000ab65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab75:	e8 51 d8 01 00       	call   c00283cb <__truncdfsf2>
c000ab7a:	83 c4 10             	add    esp,0x10
c000ab7d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab84:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ab87:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab97:	e8 df c8 01 00       	call   c002747b <__adddf3>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aba6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb6:	e8 3d cf 01 00       	call   c0027af8 <__muldf3>
c000abbb:	5b                   	pop    ebx
c000abbc:	5d                   	pop    ebp
c000abbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abc5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcd:	e8 f9 d7 01 00       	call   c00283cb <__truncdfsf2>
c000abd2:	83 c4 10             	add    esp,0x10
c000abd5:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abdc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abdf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abef:	e8 87 c8 01 00       	call   c002747b <__adddf3>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abfa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0e:	e8 e5 ce 01 00       	call   c0027af8 <__muldf3>
c000ac13:	59                   	pop    ecx
c000ac14:	5b                   	pop    ebx
c000ac15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac25:	e8 a1 d7 01 00       	call   c00283cb <__truncdfsf2>
c000ac2a:	83 c4 10             	add    esp,0x10
c000ac2d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac47:	e8 2f c8 01 00       	call   c002747b <__adddf3>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac52:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac66:	e8 8d ce 01 00       	call   c0027af8 <__muldf3>
c000ac6b:	5d                   	pop    ebp
c000ac6c:	59                   	pop    ecx
c000ac6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7d:	e8 49 d7 01 00       	call   c00283cb <__truncdfsf2>
c000ac82:	83 c4 10             	add    esp,0x10
c000ac85:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac8c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ac8f:	57                   	push   edi
c000ac90:	56                   	push   esi
c000ac91:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac95:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac99:	e8 dd c7 01 00       	call   c002747b <__adddf3>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	89 04 24             	mov    DWORD PTR [esp],eax
c000aca4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aca8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb8:	e8 3b ce 01 00       	call   c0027af8 <__muldf3>
c000acbd:	5b                   	pop    ebx
c000acbe:	5e                   	pop    esi
c000acbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accf:	e8 f7 d6 01 00       	call   c00283cb <__truncdfsf2>
c000acd4:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acdb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acde:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ace4:	5b                   	pop    ebx
c000ace5:	5e                   	pop    esi
c000ace6:	5f                   	pop    edi
c000ace7:	5d                   	pop    ebp
c000ace8:	c3                   	ret    

c000ace9 <sinc_reset>:
c000ace9:	56                   	push   esi
c000acea:	53                   	push   ebx
c000aceb:	51                   	push   ecx
c000acec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acf0:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000acf3:	85 db                	test   ebx,ebx
c000acf5:	74 59                	je     c000ad50 <sinc_reset+0x67>
c000acf7:	31 d2                	xor    edx,edx
c000acf9:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad00:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad03:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad06:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad0d:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad14:	31 c0                	xor    eax,eax
c000ad16:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad1c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad1f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad22:	52                   	push   edx
c000ad23:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad26:	c1 e0 02             	shl    eax,0x2
c000ad29:	50                   	push   eax
c000ad2a:	6a 00                	push   0x0
c000ad2c:	56                   	push   esi
c000ad2d:	e8 1e 5a ff ff       	call   c0000750 <memset>
c000ad32:	83 c4 0c             	add    esp,0xc
c000ad35:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad38:	c1 e0 02             	shl    eax,0x2
c000ad3b:	50                   	push   eax
c000ad3c:	68 aa 00 00 00       	push   0xaa
c000ad41:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad44:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad47:	50                   	push   eax
c000ad48:	e8 03 5a ff ff       	call   c0000750 <memset>
c000ad4d:	83 c4 10             	add    esp,0x10
c000ad50:	58                   	pop    eax
c000ad51:	5b                   	pop    ebx
c000ad52:	5e                   	pop    esi
c000ad53:	c3                   	ret    

c000ad54 <calc_output_multi>:
c000ad54:	55                   	push   ebp
c000ad55:	57                   	push   edi
c000ad56:	56                   	push   esi
c000ad57:	89 c6                	mov    esi,eax
c000ad59:	53                   	push   ebx
c000ad5a:	83 ec 4c             	sub    esp,0x4c
c000ad5d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad61:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad65:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad69:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad6d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad79:	8d 46 44             	lea    eax,[esi+0x44]
c000ad7c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad7f:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ad85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ad89:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ad8c:	e8 0f eb ff ff       	call   c00098a0 <int_to_fp>
c000ad91:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ad94:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ad98:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ad9c:	99                   	cdq    
c000ad9d:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ada1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ada5:	0f af d0             	imul   edx,eax
c000ada8:	0f af c3             	imul   eax,ebx
c000adab:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adaf:	29 c1                	sub    ecx,eax
c000adb1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adb5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adb9:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adc0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adc4:	57                   	push   edi
c000adc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000adc9:	6a 00                	push   0x0
c000adcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adcf:	e8 7c 59 ff ff       	call   c0000750 <memset>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000addb:	89 df                	mov    edi,ebx
c000addd:	e8 cc ea ff ff       	call   c00098ae <fp_to_double>
c000ade2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ade6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000adea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adee:	e8 b1 ea ff ff       	call   c00098a4 <fp_to_int>
c000adf3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000adf6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000adf9:	51                   	push   ecx
c000adfa:	51                   	push   ecx
c000adfb:	55                   	push   ebp
c000adfc:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae00:	e8 0b c0 01 00       	call   c0026e10 <__subsf3>
c000ae05:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae08:	e8 e2 d6 01 00       	call   c00284ef <__extendsfdf2>
c000ae0d:	83 c4 10             	add    esp,0x10
c000ae10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae14:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae28:	e8 cb cc 01 00       	call   c0027af8 <__muldf3>
c000ae2d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae34:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae38:	e8 b2 d6 01 00       	call   c00284ef <__extendsfdf2>
c000ae3d:	83 c4 10             	add    esp,0x10
c000ae40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae48:	52                   	push   edx
c000ae49:	50                   	push   eax
c000ae4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae52:	e8 24 c6 01 00       	call   c002747b <__adddf3>
c000ae57:	83 c4 10             	add    esp,0x10
c000ae5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae62:	89 f8                	mov    eax,edi
c000ae64:	b9 08 00 00 00       	mov    ecx,0x8
c000ae69:	99                   	cdq    
c000ae6a:	f7 f9                	idiv   ecx
c000ae6c:	4a                   	dec    edx
c000ae6d:	83 fa 06             	cmp    edx,0x6
c000ae70:	77 07                	ja     c000ae79 <calc_output_multi+0x125>
c000ae72:	ff 24 95 c4 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd623c]
c000ae79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae7c:	4f                   	dec    edi
c000ae7d:	83 ec 0c             	sub    esp,0xc
c000ae80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae92:	e8 58 d6 01 00       	call   c00284ef <__extendsfdf2>
c000ae97:	83 c4 10             	add    esp,0x10
c000ae9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeb2:	e8 41 cc 01 00       	call   c0027af8 <__muldf3>
c000aeb7:	83 c4 10             	add    esp,0x10
c000aeba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aebe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec2:	52                   	push   edx
c000aec3:	50                   	push   eax
c000aec4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeca:	e8 ac c5 01 00       	call   c002747b <__adddf3>
c000aecf:	83 c4 10             	add    esp,0x10
c000aed2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aedb:	4f                   	dec    edi
c000aedc:	83 ec 0c             	sub    esp,0xc
c000aedf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aef1:	e8 f9 d5 01 00       	call   c00284ef <__extendsfdf2>
c000aef6:	83 c4 10             	add    esp,0x10
c000aef9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af11:	e8 e2 cb 01 00       	call   c0027af8 <__muldf3>
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af21:	52                   	push   edx
c000af22:	50                   	push   eax
c000af23:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af26:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af29:	e8 4d c5 01 00       	call   c002747b <__adddf3>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af34:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af3a:	4f                   	dec    edi
c000af3b:	83 ec 0c             	sub    esp,0xc
c000af3e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af45:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af50:	e8 9a d5 01 00       	call   c00284ef <__extendsfdf2>
c000af55:	83 c4 10             	add    esp,0x10
c000af58:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af68:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af70:	e8 83 cb 01 00       	call   c0027af8 <__muldf3>
c000af75:	83 c4 10             	add    esp,0x10
c000af78:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af80:	52                   	push   edx
c000af81:	50                   	push   eax
c000af82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af85:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af88:	e8 ee c4 01 00       	call   c002747b <__adddf3>
c000af8d:	83 c4 10             	add    esp,0x10
c000af90:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af93:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af96:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af99:	4f                   	dec    edi
c000af9a:	83 ec 0c             	sub    esp,0xc
c000af9d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afa4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afaf:	e8 3b d5 01 00       	call   c00284ef <__extendsfdf2>
c000afb4:	83 c4 10             	add    esp,0x10
c000afb7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcf:	e8 24 cb 01 00       	call   c0027af8 <__muldf3>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afdb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afdf:	52                   	push   edx
c000afe0:	50                   	push   eax
c000afe1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afe4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afe7:	e8 8f c4 01 00       	call   c002747b <__adddf3>
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aff2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aff5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aff8:	4f                   	dec    edi
c000aff9:	83 ec 0c             	sub    esp,0xc
c000affc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b003:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b00a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b00e:	e8 dc d4 01 00       	call   c00284ef <__extendsfdf2>
c000b013:	83 c4 10             	add    esp,0x10
c000b016:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b01e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b022:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b026:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02e:	e8 c5 ca 01 00       	call   c0027af8 <__muldf3>
c000b033:	83 c4 10             	add    esp,0x10
c000b036:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b03a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03e:	52                   	push   edx
c000b03f:	50                   	push   eax
c000b040:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b043:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b046:	e8 30 c4 01 00       	call   c002747b <__adddf3>
c000b04b:	83 c4 10             	add    esp,0x10
c000b04e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b051:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b057:	4f                   	dec    edi
c000b058:	83 ec 0c             	sub    esp,0xc
c000b05b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b062:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b069:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06d:	e8 7d d4 01 00       	call   c00284ef <__extendsfdf2>
c000b072:	83 c4 10             	add    esp,0x10
c000b075:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b079:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b081:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b085:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b089:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b08d:	e8 66 ca 01 00       	call   c0027af8 <__muldf3>
c000b092:	83 c4 10             	add    esp,0x10
c000b095:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b099:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b09d:	52                   	push   edx
c000b09e:	50                   	push   eax
c000b09f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a5:	e8 d1 c3 01 00       	call   c002747b <__adddf3>
c000b0aa:	83 c4 10             	add    esp,0x10
c000b0ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b6:	4f                   	dec    edi
c000b0b7:	83 ec 0c             	sub    esp,0xc
c000b0ba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cc:	e8 1e d4 01 00       	call   c00284ef <__extendsfdf2>
c000b0d1:	83 c4 10             	add    esp,0x10
c000b0d4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0ec:	e8 07 ca 01 00       	call   c0027af8 <__muldf3>
c000b0f1:	83 c4 10             	add    esp,0x10
c000b0f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0fc:	52                   	push   edx
c000b0fd:	50                   	push   eax
c000b0fe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b101:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b104:	e8 72 c3 01 00       	call   c002747b <__adddf3>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b112:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 bf d3 01 00       	call   c00284ef <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b137:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b14b:	e8 a8 c9 01 00       	call   c0027af8 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b157:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 13 c3 01 00       	call   c002747b <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	85 ff                	test   edi,edi
c000b173:	0f 8f e9 fc ff ff    	jg     c000ae62 <calc_output_multi+0x10e>
c000b179:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b17d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b181:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b185:	0f 89 4c fc ff ff    	jns    c000add7 <calc_output_multi+0x83>
c000b18b:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b18f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b193:	29 c8                	sub    eax,ecx
c000b195:	99                   	cdq    
c000b196:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b19a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b19e:	0f af d0             	imul   edx,eax
c000b1a1:	40                   	inc    eax
c000b1a2:	01 d1                	add    ecx,edx
c000b1a4:	0f af c3             	imul   eax,ebx
c000b1a7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ab:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1b2:	55                   	push   ebp
c000b1b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1b7:	6a 00                	push   0x0
c000b1b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1bd:	e8 8e 55 ff ff       	call   c0000750 <memset>
c000b1c2:	83 c4 10             	add    esp,0x10
c000b1c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1c9:	e8 e0 e6 ff ff       	call   c00098ae <fp_to_double>
c000b1ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1da:	e8 c5 e6 ff ff       	call   c00098a4 <fp_to_int>
c000b1df:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1e2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b1e5:	57                   	push   edi
c000b1e6:	57                   	push   edi
c000b1e7:	89 df                	mov    edi,ebx
c000b1e9:	55                   	push   ebp
c000b1ea:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b1ee:	e8 1d bc 01 00       	call   c0026e10 <__subsf3>
c000b1f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b1f6:	e8 f4 d2 01 00       	call   c00284ef <__extendsfdf2>
c000b1fb:	83 c4 10             	add    esp,0x10
c000b1fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b202:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b206:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b212:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b216:	e8 dd c8 01 00       	call   c0027af8 <__muldf3>
c000b21b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b21e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b222:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b226:	e8 c4 d2 01 00       	call   c00284ef <__extendsfdf2>
c000b22b:	83 c4 10             	add    esp,0x10
c000b22e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b232:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b240:	e8 36 c2 01 00       	call   c002747b <__adddf3>
c000b245:	83 c4 10             	add    esp,0x10
c000b248:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b24c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b250:	89 f8                	mov    eax,edi
c000b252:	b9 08 00 00 00       	mov    ecx,0x8
c000b257:	99                   	cdq    
c000b258:	f7 f9                	idiv   ecx
c000b25a:	4a                   	dec    edx
c000b25b:	83 fa 06             	cmp    edx,0x6
c000b25e:	77 07                	ja     c000b267 <calc_output_multi+0x513>
c000b260:	ff 24 95 e0 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6220]
c000b267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26b:	4f                   	dec    edi
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b272:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b276:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b27d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b281:	e8 69 d2 01 00       	call   c00284ef <__extendsfdf2>
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b291:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b299:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b29d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a1:	e8 52 c8 01 00       	call   c0027af8 <__muldf3>
c000b2a6:	83 c4 10             	add    esp,0x10
c000b2a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b1:	52                   	push   edx
c000b2b2:	50                   	push   eax
c000b2b3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2b9:	e8 bd c1 01 00       	call   c002747b <__adddf3>
c000b2be:	83 c4 10             	add    esp,0x10
c000b2c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2cb:	4f                   	dec    edi
c000b2cc:	83 ec 0c             	sub    esp,0xc
c000b2cf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2dd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e1:	e8 09 d2 01 00       	call   c00284ef <__extendsfdf2>
c000b2e6:	83 c4 10             	add    esp,0x10
c000b2e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b301:	e8 f2 c7 01 00       	call   c0027af8 <__muldf3>
c000b306:	83 c4 10             	add    esp,0x10
c000b309:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b30d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b311:	52                   	push   edx
c000b312:	50                   	push   eax
c000b313:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b316:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b319:	e8 5d c1 01 00       	call   c002747b <__adddf3>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b324:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b327:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32b:	4f                   	dec    edi
c000b32c:	83 ec 0c             	sub    esp,0xc
c000b32f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b332:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b336:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b33d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b341:	e8 a9 d1 01 00       	call   c00284ef <__extendsfdf2>
c000b346:	83 c4 10             	add    esp,0x10
c000b349:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b351:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b359:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b361:	e8 92 c7 01 00       	call   c0027af8 <__muldf3>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b36d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b371:	52                   	push   edx
c000b372:	50                   	push   eax
c000b373:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b376:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b379:	e8 fd c0 01 00       	call   c002747b <__adddf3>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b384:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4f                   	dec    edi
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b392:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b396:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b39d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3a1:	e8 49 d1 01 00       	call   c00284ef <__extendsfdf2>
c000b3a6:	83 c4 10             	add    esp,0x10
c000b3a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3c1:	e8 32 c7 01 00       	call   c0027af8 <__muldf3>
c000b3c6:	83 c4 10             	add    esp,0x10
c000b3c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3d1:	52                   	push   edx
c000b3d2:	50                   	push   eax
c000b3d3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3d6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3d9:	e8 9d c0 01 00       	call   c002747b <__adddf3>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3e4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3eb:	4f                   	dec    edi
c000b3ec:	83 ec 0c             	sub    esp,0xc
c000b3ef:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3f6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3fd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b401:	e8 e9 d0 01 00       	call   c00284ef <__extendsfdf2>
c000b406:	83 c4 10             	add    esp,0x10
c000b409:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b411:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b415:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b419:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b421:	e8 d2 c6 01 00       	call   c0027af8 <__muldf3>
c000b426:	83 c4 10             	add    esp,0x10
c000b429:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b42d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b431:	52                   	push   edx
c000b432:	50                   	push   eax
c000b433:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b436:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b439:	e8 3d c0 01 00       	call   c002747b <__adddf3>
c000b43e:	83 c4 10             	add    esp,0x10
c000b441:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b444:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b44b:	4f                   	dec    edi
c000b44c:	83 ec 0c             	sub    esp,0xc
c000b44f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b452:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b456:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b45d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b461:	e8 89 d0 01 00       	call   c00284ef <__extendsfdf2>
c000b466:	83 c4 10             	add    esp,0x10
c000b469:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b479:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b47d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b481:	e8 72 c6 01 00       	call   c0027af8 <__muldf3>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b48d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b491:	52                   	push   edx
c000b492:	50                   	push   eax
c000b493:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b496:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b499:	e8 dd bf 01 00       	call   c002747b <__adddf3>
c000b49e:	83 c4 10             	add    esp,0x10
c000b4a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ab:	4f                   	dec    edi
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4b6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4bd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4c1:	e8 29 d0 01 00       	call   c00284ef <__extendsfdf2>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4e1:	e8 12 c6 01 00       	call   c0027af8 <__muldf3>
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4f1:	52                   	push   edx
c000b4f2:	50                   	push   eax
c000b4f3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4f6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4f9:	e8 7d bf 01 00       	call   c002747b <__adddf3>
c000b4fe:	83 c4 10             	add    esp,0x10
c000b501:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b504:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50b:	4f                   	dec    edi
c000b50c:	83 ec 0c             	sub    esp,0xc
c000b50f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b512:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b516:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b51d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b521:	e8 c9 cf 01 00       	call   c00284ef <__extendsfdf2>
c000b526:	83 c4 10             	add    esp,0x10
c000b529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b539:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b53d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b541:	e8 b2 c5 01 00       	call   c0027af8 <__muldf3>
c000b546:	83 c4 10             	add    esp,0x10
c000b549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b54d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b551:	52                   	push   edx
c000b552:	50                   	push   eax
c000b553:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b556:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b559:	e8 1d bf 01 00       	call   c002747b <__adddf3>
c000b55e:	83 c4 10             	add    esp,0x10
c000b561:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b564:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b567:	85 ff                	test   edi,edi
c000b569:	0f 8f e1 fc ff ff    	jg     c000b250 <calc_output_multi+0x4fc>
c000b56f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b573:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b577:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b57b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b580:	0f 8f 3f fc ff ff    	jg     c000b1c5 <calc_output_multi+0x471>
c000b586:	be 08 00 00 00       	mov    esi,0x8
c000b58b:	89 d8                	mov    eax,ebx
c000b58d:	99                   	cdq    
c000b58e:	f7 fe                	idiv   esi
c000b590:	4a                   	dec    edx
c000b591:	83 fa 06             	cmp    edx,0x6
c000b594:	77 07                	ja     c000b59d <calc_output_multi+0x849>
c000b596:	ff 24 95 fc 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6204]
c000b59d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5a1:	4b                   	dec    ebx
c000b5a2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5b4:	e8 c2 be 01 00       	call   c002747b <__adddf3>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d4:	e8 1f c5 01 00       	call   c0027af8 <__muldf3>
c000b5d9:	5d                   	pop    ebp
c000b5da:	59                   	pop    ecx
c000b5db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	e8 db cd 01 00       	call   c00283cb <__truncdfsf2>
c000b5f0:	83 c4 10             	add    esp,0x10
c000b5f3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5f7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5fe:	4b                   	dec    ebx
c000b5ff:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b603:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b60a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b611:	e8 65 be 01 00       	call   c002747b <__adddf3>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b631:	e8 c2 c4 01 00       	call   c0027af8 <__muldf3>
c000b636:	59                   	pop    ecx
c000b637:	5f                   	pop    edi
c000b638:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b63c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b640:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b648:	e8 7e cd 01 00       	call   c00283cb <__truncdfsf2>
c000b64d:	83 c4 10             	add    esp,0x10
c000b650:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b654:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65b:	4b                   	dec    ebx
c000b65c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b660:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b667:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b66b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b66e:	e8 08 be 01 00       	call   c002747b <__adddf3>
c000b673:	83 c4 10             	add    esp,0x10
c000b676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b67a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68e:	e8 65 c4 01 00       	call   c0027af8 <__muldf3>
c000b693:	5f                   	pop    edi
c000b694:	5d                   	pop    ebp
c000b695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a5:	e8 21 cd 01 00       	call   c00283cb <__truncdfsf2>
c000b6aa:	83 c4 10             	add    esp,0x10
c000b6ad:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6b1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6b8:	4b                   	dec    ebx
c000b6b9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6bd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6c4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6c8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6cb:	e8 ab bd 01 00       	call   c002747b <__adddf3>
c000b6d0:	83 c4 10             	add    esp,0x10
c000b6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6eb:	e8 08 c4 01 00       	call   c0027af8 <__muldf3>
c000b6f0:	5d                   	pop    ebp
c000b6f1:	59                   	pop    ecx
c000b6f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b702:	e8 c4 cc 01 00       	call   c00283cb <__truncdfsf2>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b70e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b715:	4b                   	dec    ebx
c000b716:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b71a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b71d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b721:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b725:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b728:	e8 4e bd 01 00       	call   c002747b <__adddf3>
c000b72d:	83 c4 10             	add    esp,0x10
c000b730:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b734:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b748:	e8 ab c3 01 00       	call   c0027af8 <__muldf3>
c000b74d:	59                   	pop    ecx
c000b74e:	5f                   	pop    edi
c000b74f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b753:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b757:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75f:	e8 67 cc 01 00       	call   c00283cb <__truncdfsf2>
c000b764:	83 c4 10             	add    esp,0x10
c000b767:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b76b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b76e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b772:	4b                   	dec    ebx
c000b773:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b777:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b77a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b77e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b782:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b785:	e8 f1 bc 01 00       	call   c002747b <__adddf3>
c000b78a:	83 c4 10             	add    esp,0x10
c000b78d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b791:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a5:	e8 4e c3 01 00       	call   c0027af8 <__muldf3>
c000b7aa:	5f                   	pop    edi
c000b7ab:	5d                   	pop    ebp
c000b7ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bc:	e8 0a cc 01 00       	call   c00283cb <__truncdfsf2>
c000b7c1:	83 c4 10             	add    esp,0x10
c000b7c4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7c8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7cf:	4b                   	dec    ebx
c000b7d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7db:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7df:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7e2:	e8 94 bc 01 00       	call   c002747b <__adddf3>
c000b7e7:	83 c4 10             	add    esp,0x10
c000b7ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b802:	e8 f1 c2 01 00       	call   c0027af8 <__muldf3>
c000b807:	5d                   	pop    ebp
c000b808:	59                   	pop    ecx
c000b809:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b80d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b819:	e8 ad cb 01 00       	call   c00283cb <__truncdfsf2>
c000b81e:	83 c4 10             	add    esp,0x10
c000b821:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b825:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82c:	4b                   	dec    ebx
c000b82d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b831:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b838:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b83c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83f:	e8 37 bc 01 00       	call   c002747b <__adddf3>
c000b844:	83 c4 10             	add    esp,0x10
c000b847:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b84f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85f:	e8 94 c2 01 00       	call   c0027af8 <__muldf3>
c000b864:	59                   	pop    ecx
c000b865:	5f                   	pop    edi
c000b866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b872:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b876:	e8 50 cb 01 00       	call   c00283cb <__truncdfsf2>
c000b87b:	83 c4 10             	add    esp,0x10
c000b87e:	85 db                	test   ebx,ebx
c000b880:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b884:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b887:	0f 8f fe fc ff ff    	jg     c000b58b <calc_output_multi+0x837>
c000b88d:	83 c4 4c             	add    esp,0x4c
c000b890:	5b                   	pop    ebx
c000b891:	5e                   	pop    esi
c000b892:	5f                   	pop    edi
c000b893:	5d                   	pop    ebp
c000b894:	c3                   	ret    

c000b895 <double_to_fp>:
c000b895:	83 ec 0c             	sub    esp,0xc
c000b898:	68 00 00 b0 40       	push   0x40b00000
c000b89d:	6a 00                	push   0x0
c000b89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a7:	e8 4c c2 01 00       	call   c0027af8 <__muldf3>
c000b8ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8b0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8b4:	83 c4 1c             	add    esp,0x1c
c000b8b7:	e9 c4 cc 01 00       	jmp    c0028580 <lrint>

c000b8bc <prepare_data>:
c000b8bc:	55                   	push   ebp
c000b8bd:	57                   	push   edi
c000b8be:	56                   	push   esi
c000b8bf:	53                   	push   ebx
c000b8c0:	83 ec 1c             	sub    esp,0x1c
c000b8c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8cb:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8cf:	0f 89 57 01 00 00    	jns    c000ba2c <prepare_data+0x170>
c000b8d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8db:	85 d2                	test   edx,edx
c000b8dd:	75 0d                	jne    c000b8ec <prepare_data+0x30>
c000b8df:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8e2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b8e5:	29 d0                	sub    eax,edx
c000b8e7:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8ea:	eb 44                	jmp    c000b930 <prepare_data+0x74>
c000b8ec:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b8ef:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b8f2:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b8f5:	39 c1                	cmp    ecx,eax
c000b8f7:	7d 04                	jge    c000b8fd <prepare_data+0x41>
c000b8f9:	29 d0                	sub    eax,edx
c000b8fb:	eb 2d                	jmp    c000b92a <prepare_data+0x6e>
c000b8fd:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b903:	29 d7                	sub    edi,edx
c000b905:	01 f7                	add    edi,esi
c000b907:	51                   	push   ecx
c000b908:	29 f2                	sub    edx,esi
c000b90a:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b911:	8d 14 90             	lea    edx,[eax+edx*4]
c000b914:	51                   	push   ecx
c000b915:	52                   	push   edx
c000b916:	50                   	push   eax
c000b917:	e8 6c 4d ff ff       	call   c0000688 <memmove>
c000b91c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91f:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b922:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b925:	29 f0                	sub    eax,esi
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	29 f0                	sub    eax,esi
c000b92c:	79 02                	jns    c000b930 <prepare_data+0x74>
c000b92e:	31 c0                	xor    eax,eax
c000b930:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b933:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b936:	29 ef                	sub    edi,ebp
c000b938:	39 c7                	cmp    edi,eax
c000b93a:	7e 02                	jle    c000b93e <prepare_data+0x82>
c000b93c:	89 c7                	mov    edi,eax
c000b93e:	89 f8                	mov    eax,edi
c000b940:	99                   	cdq    
c000b941:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b944:	b8 15 00 00 00       	mov    eax,0x15
c000b949:	29 d7                	sub    edi,edx
c000b94b:	0f 88 dd 00 00 00    	js     c000ba2e <prepare_data+0x172>
c000b951:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b954:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b957:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b95a:	0f 8f ce 00 00 00    	jg     c000ba2e <prepare_data+0x172>
c000b960:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b966:	50                   	push   eax
c000b967:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b96e:	50                   	push   eax
c000b96f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b973:	8b 00                	mov    eax,DWORD PTR [eax]
c000b975:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b978:	50                   	push   eax
c000b979:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b97c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b980:	50                   	push   eax
c000b981:	e8 c0 4c ff ff       	call   c0000646 <memcpy>
c000b986:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b989:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b98c:	01 fd                	add    ebp,edi
c000b98e:	01 f9                	add    ecx,edi
c000b990:	83 c4 10             	add    esp,0x10
c000b993:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b996:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b999:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b99c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9a0:	0f 85 86 00 00 00    	jne    c000ba2c <prepare_data+0x170>
c000b9a6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9a9:	89 e8                	mov    eax,ebp
c000b9ab:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9ae:	29 c8                	sub    eax,ecx
c000b9b0:	39 f8                	cmp    eax,edi
c000b9b2:	7d 78                	jge    c000ba2c <prepare_data+0x170>
c000b9b4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9b8:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9bc:	74 6e                	je     c000ba2c <prepare_data+0x170>
c000b9be:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9c1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9c5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9c8:	29 ef                	sub    edi,ebp
c000b9ca:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9ce:	7c 29                	jl     c000b9f9 <prepare_data+0x13d>
c000b9d0:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9d3:	29 f1                	sub    ecx,esi
c000b9d5:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9dc:	55                   	push   ebp
c000b9dd:	50                   	push   eax
c000b9de:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9e1:	50                   	push   eax
c000b9e2:	52                   	push   edx
c000b9e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e7:	e8 9c 4c ff ff       	call   c0000688 <memmove>
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b9f2:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b9f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b9fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b9ff:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba02:	83 c6 05             	add    esi,0x5
c000ba05:	78 07                	js     c000ba0e <prepare_data+0x152>
c000ba07:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0a:	39 cf                	cmp    edi,ecx
c000ba0c:	7e 04                	jle    c000ba12 <prepare_data+0x156>
c000ba0e:	89 ce                	mov    esi,ecx
c000ba10:	29 c6                	sub    esi,eax
c000ba12:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba15:	51                   	push   ecx
c000ba16:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba1d:	51                   	push   ecx
c000ba1e:	6a 00                	push   0x0
c000ba20:	50                   	push   eax
c000ba21:	e8 2a 4d ff ff       	call   c0000750 <memset>
c000ba26:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba29:	83 c4 10             	add    esp,0x10
c000ba2c:	31 c0                	xor    eax,eax
c000ba2e:	83 c4 1c             	add    esp,0x1c
c000ba31:	5b                   	pop    ebx
c000ba32:	5e                   	pop    esi
c000ba33:	5f                   	pop    edi
c000ba34:	5d                   	pop    ebp
c000ba35:	c3                   	ret    

c000ba36 <sinc_multichan_vari_process>:
c000ba36:	55                   	push   ebp
c000ba37:	ba 05 00 00 00       	mov    edx,0x5
c000ba3c:	57                   	push   edi
c000ba3d:	56                   	push   esi
c000ba3e:	53                   	push   ebx
c000ba3f:	83 ec 4c             	sub    esp,0x4c
c000ba42:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba46:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba4a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba4d:	85 db                	test   ebx,ebx
c000ba4f:	0f 84 9b 06 00 00    	je     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000ba55:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba58:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba5b:	0f af c5             	imul   eax,ebp
c000ba5e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba61:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba64:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba6b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba72:	0f af c5             	imul   eax,ebp
c000ba75:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba78:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba7b:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba85:	68 00 00 70 3f       	push   0x3f700000
c000ba8a:	6a 00                	push   0x0
c000ba8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba94:	e8 2e c9 01 00       	call   c00283c7 <__ltdf2>
c000ba99:	83 c4 10             	add    esp,0x10
c000ba9c:	ba 16 00 00 00       	mov    edx,0x16
c000baa1:	85 c0                	test   eax,eax
c000baa3:	0f 88 47 06 00 00    	js     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000baa9:	68 00 00 70 40       	push   0x40700000
c000baae:	6a 00                	push   0x0
c000bab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab8:	e8 ec c8 01 00       	call   c00283a9 <__gtdf2>
c000babd:	83 c4 10             	add    esp,0x10
c000bac0:	ba 16 00 00 00       	mov    edx,0x16
c000bac5:	85 c0                	test   eax,eax
c000bac7:	0f 8f 23 06 00 00    	jg     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bacd:	83 ec 0c             	sub    esp,0xc
c000bad0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bad3:	e8 83 c6 01 00       	call   c002815b <__floatsidf>
c000bad8:	83 c4 10             	add    esp,0x10
c000badb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000badf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bae3:	68 00 00 00 40       	push   0x40000000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf2:	e8 84 b9 01 00       	call   c002747b <__adddf3>
c000baf7:	59                   	pop    ecx
c000baf8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bafc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb00:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb03:	e8 53 c6 01 00       	call   c002815b <__floatsidf>
c000bb08:	83 c4 10             	add    esp,0x10
c000bb0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb0f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb13:	52                   	push   edx
c000bb14:	50                   	push   eax
c000bb15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb1d:	e8 ba c2 01 00       	call   c0027ddc <__divdf3>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2d:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb30:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb4b:	e8 59 c8 01 00       	call   c00283a9 <__gtdf2>
c000bb50:	83 c4 10             	add    esp,0x10
c000bb53:	85 c0                	test   eax,eax
c000bb55:	7e 2d                	jle    c000bb84 <sinc_multichan_vari_process+0x14e>
c000bb57:	68 00 00 f0 3f       	push   0x3ff00000
c000bb5c:	6a 00                	push   0x0
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb66:	e8 5c c8 01 00       	call   c00283c7 <__ltdf2>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	85 c0                	test   eax,eax
c000bb70:	79 4d                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb82:	eb 1b                	jmp    c000bb9f <sinc_multichan_vari_process+0x169>
c000bb84:	68 00 00 f0 3f       	push   0x3ff00000
c000bb89:	6a 00                	push   0x0
c000bb8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb93:	e8 2f c8 01 00       	call   c00283c7 <__ltdf2>
c000bb98:	83 c4 10             	add    esp,0x10
c000bb9b:	85 c0                	test   eax,eax
c000bb9d:	79 20                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbaf:	e8 28 c2 01 00       	call   c0027ddc <__divdf3>
c000bbb4:	83 c4 10             	add    esp,0x10
c000bbb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbbb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbbf:	50                   	push   eax
c000bbc0:	50                   	push   eax
c000bbc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc9:	e8 b2 c9 01 00       	call   c0028580 <lrint>
c000bbce:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbd1:	40                   	inc    eax
c000bbd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbd6:	0f af c5             	imul   eax,ebp
c000bbd9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbdd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbe0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbe4:	58                   	pop    eax
c000bbe5:	5a                   	pop    edx
c000bbe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbee:	e8 8d c9 01 00       	call   c0028580 <lrint>
c000bbf3:	83 ec 0c             	sub    esp,0xc
c000bbf6:	50                   	push   eax
c000bbf7:	e8 5f c5 01 00       	call   c002815b <__floatsidf>
c000bbfc:	83 c4 10             	add    esp,0x10
c000bbff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc03:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc07:	52                   	push   edx
c000bc08:	50                   	push   eax
c000bc09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc0d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc11:	e8 b6 be 01 00       	call   c0027acc <__subdf3>
c000bc16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc1e:	83 c4 20             	add    esp,0x20
c000bc21:	6a 00                	push   0x0
c000bc23:	6a 00                	push   0x0
c000bc25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc2d:	e8 95 c7 01 00       	call   c00283c7 <__ltdf2>
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	85 c0                	test   eax,eax
c000bc37:	79 1f                	jns    c000bc58 <sinc_multichan_vari_process+0x222>
c000bc39:	68 00 00 f0 3f       	push   0x3ff00000
c000bc3e:	6a 00                	push   0x0
c000bc40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc48:	e8 2e b8 01 00       	call   c002747b <__adddf3>
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc58:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc5b:	83 ec 10             	sub    esp,0x10
c000bc5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc75:	e8 52 be 01 00       	call   c0027acc <__subdf3>
c000bc7a:	83 c4 18             	add    esp,0x18
c000bc7d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc85:	52                   	push   edx
c000bc86:	50                   	push   eax
c000bc87:	e8 f4 c8 01 00       	call   c0028580 <lrint>
c000bc8c:	0f af e8             	imul   ebp,eax
c000bc8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc93:	01 e8                	add    eax,ebp
c000bc95:	99                   	cdq    
c000bc96:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bc99:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bc9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca4:	68 00 00 f0 3f       	push   0x3ff00000
c000bca9:	6a 00                	push   0x0
c000bcab:	e8 2c c1 01 00       	call   c0027ddc <__divdf3>
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcbb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcc0:	68 23 42 92 0c       	push   0xc924223
c000bcc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bccd:	e8 a9 b7 01 00       	call   c002747b <__adddf3>
c000bcd2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcd6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcda:	83 c4 20             	add    esp,0x20
c000bcdd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bce5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bced:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bcf0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bcf3:	7d 50                	jge    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bcf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bcf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bcfb:	01 c8                	add    eax,ecx
c000bcfd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd00:	99                   	cdq    
c000bd01:	f7 f9                	idiv   ecx
c000bd03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd07:	7d 0c                	jge    c000bd15 <sinc_multichan_vari_process+0x2df>
c000bd09:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd0c:	85 ed                	test   ebp,ebp
c000bd0e:	79 6b                	jns    c000bd7b <sinc_multichan_vari_process+0x345>
c000bd10:	e9 e6 00 00 00       	jmp    c000bdfb <sinc_multichan_vari_process+0x3c5>
c000bd15:	50                   	push   eax
c000bd16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd1a:	57                   	push   edi
c000bd1b:	53                   	push   ebx
c000bd1c:	e8 9b fb ff ff       	call   c000b8bc <prepare_data>
c000bd21:	83 c4 10             	add    esp,0x10
c000bd24:	89 c2                	mov    edx,eax
c000bd26:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd29:	85 c0                	test   eax,eax
c000bd2b:	0f 85 bf 03 00 00    	jne    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd31:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd34:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd37:	01 c8                	add    eax,ecx
c000bd39:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3c:	99                   	cdq    
c000bd3d:	f7 f9                	idiv   ecx
c000bd3f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd43:	7c c4                	jl     c000bd09 <sinc_multichan_vari_process+0x2d3>
c000bd45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd4d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd50:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd5b:	89 06                	mov    DWORD PTR [esi],eax
c000bd5d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd60:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd63:	99                   	cdq    
c000bd64:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd67:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd6a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd6d:	99                   	cdq    
c000bd6e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd71:	31 d2                	xor    edx,edx
c000bd73:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd76:	e9 75 03 00 00       	jmp    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd7b:	83 ec 0c             	sub    esp,0xc
c000bd7e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd81:	e8 d5 c3 01 00       	call   c002815b <__floatsidf>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd8d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bda1:	e8 d5 b6 01 00       	call   c002747b <__adddf3>
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdc1:	e8 b5 b6 01 00       	call   c002747b <__adddf3>
c000bdc6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bdc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdd1:	e8 85 c3 01 00       	call   c002815b <__floatsidf>
c000bdd6:	83 c4 10             	add    esp,0x10
c000bdd9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bddd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bde1:	52                   	push   edx
c000bde2:	50                   	push   eax
c000bde3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdeb:	e8 d5 c5 01 00       	call   c00283c5 <__gedf2>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	85 c0                	test   eax,eax
c000bdf5:	0f 89 4a ff ff ff    	jns    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bdfb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bdff:	0f 8e ed 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be05:	83 ec 10             	sub    esp,0x10
c000be08:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be0b:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be0e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be11:	ff 36                	push   DWORD PTR [esi]
c000be13:	e8 b4 bc 01 00       	call   c0027acc <__subdf3>
c000be18:	83 c4 18             	add    esp,0x18
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	e8 36 c7 01 00       	call   c0028560 <fabs>
c000be2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be2e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be3a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be47:	e8 5d c5 01 00       	call   c00283a9 <__gtdf2>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	85 c0                	test   eax,eax
c000be51:	0f 8e 9b 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be57:	8b 06                	mov    eax,DWORD PTR [esi]
c000be59:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be64:	52                   	push   edx
c000be65:	50                   	push   eax
c000be66:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be69:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be6c:	e8 5b bc 01 00       	call   c0027acc <__subdf3>
c000be71:	59                   	pop    ecx
c000be72:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be76:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be7a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be7d:	e8 d9 c2 01 00       	call   c002815b <__floatsidf>
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8d:	52                   	push   edx
c000be8e:	50                   	push   eax
c000be8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be97:	e8 5c bc 01 00       	call   c0027af8 <__muldf3>
c000be9c:	5d                   	pop    ebp
c000be9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bea1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bea5:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bea8:	e8 ae c2 01 00       	call   c002815b <__floatsidf>
c000bead:	83 c4 10             	add    esp,0x10
c000beb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb8:	52                   	push   edx
c000beb9:	50                   	push   eax
c000beba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bec2:	e8 15 bf 01 00       	call   c0027ddc <__divdf3>
c000bec7:	83 c4 10             	add    esp,0x10
c000beca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bece:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bed2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bed6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bee2:	e8 94 b5 01 00       	call   c002747b <__adddf3>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000beee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bef2:	83 ec 0c             	sub    esp,0xc
c000bef5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bef8:	e8 5e c2 01 00       	call   c002815b <__floatsidf>
c000befd:	83 c4 10             	add    esp,0x10
c000bf00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf18:	e8 aa c4 01 00       	call   c00283c7 <__ltdf2>
c000bf1d:	83 c4 10             	add    esp,0x10
c000bf20:	85 c0                	test   eax,eax
c000bf22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf2a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf2e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf32:	78 10                	js     c000bf44 <sinc_multichan_vari_process+0x50e>
c000bf34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf40:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf54:	e8 9f bb 01 00       	call   c0027af8 <__muldf3>
c000bf59:	59                   	pop    ecx
c000bf5a:	5d                   	pop    ebp
c000bf5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf5f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf6b:	e8 25 f9 ff ff       	call   c000b895 <double_to_fp>
c000bf70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf74:	89 c5                	mov    ebp,eax
c000bf76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	e8 71 bb 01 00       	call   c0027af8 <__muldf3>
c000bf87:	83 c4 18             	add    esp,0x18
c000bf8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bf8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bf92:	52                   	push   edx
c000bf93:	50                   	push   eax
c000bf94:	e8 fc f8 ff ff       	call   c000b895 <double_to_fp>
c000bf99:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bf9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfa0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfa3:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfa6:	50                   	push   eax
c000bfa7:	50                   	push   eax
c000bfa8:	50                   	push   eax
c000bfa9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfac:	e8 aa c1 01 00       	call   c002815b <__floatsidf>
c000bfb1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfb5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfb9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfbd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc9:	e8 0e be 01 00       	call   c0027ddc <__divdf3>
c000bfce:	83 c4 1c             	add    esp,0x1c
c000bfd1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bfd5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bfd9:	52                   	push   edx
c000bfda:	89 ea                	mov    edx,ebp
c000bfdc:	50                   	push   eax
c000bfdd:	89 d8                	mov    eax,ebx
c000bfdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfe2:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bfe6:	e8 69 ed ff ff       	call   c000ad54 <calc_output_multi>
c000bfeb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bfee:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bff1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bffd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c001:	e8 d6 bd 01 00       	call   c0027ddc <__divdf3>
c000c006:	83 c4 10             	add    esp,0x10
c000c009:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c00d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c015:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c019:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c01d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c021:	e8 55 b4 01 00       	call   c002747b <__adddf3>
c000c026:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c02a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c02e:	83 c4 28             	add    esp,0x28
c000c031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c035:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c039:	e8 42 c5 01 00       	call   c0028580 <lrint>
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	50                   	push   eax
c000c042:	e8 14 c1 01 00       	call   c002815b <__floatsidf>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c04e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c052:	52                   	push   edx
c000c053:	50                   	push   eax
c000c054:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c058:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c05c:	e8 6b ba 01 00       	call   c0027acc <__subdf3>
c000c061:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c065:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c069:	83 c4 20             	add    esp,0x20
c000c06c:	6a 00                	push   0x0
c000c06e:	6a 00                	push   0x0
c000c070:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c078:	e8 4a c3 01 00       	call   c00283c7 <__ltdf2>
c000c07d:	83 c4 10             	add    esp,0x10
c000c080:	85 c0                	test   eax,eax
c000c082:	79 20                	jns    c000c0a4 <sinc_multichan_vari_process+0x66e>
c000c084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c08c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c094:	e8 e2 b3 01 00       	call   c002747b <__adddf3>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0a4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0a7:	83 ec 10             	sub    esp,0x10
c000c0aa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0ae:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0c1:	e8 06 ba 01 00       	call   c0027acc <__subdf3>
c000c0c6:	83 c4 18             	add    esp,0x18
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0d1:	52                   	push   edx
c000c0d2:	50                   	push   eax
c000c0d3:	e8 a8 c4 01 00       	call   c0028580 <lrint>
c000c0d8:	0f af e8             	imul   ebp,eax
c000c0db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0df:	83 c4 10             	add    esp,0x10
c000c0e2:	01 e8                	add    eax,ebp
c000c0e4:	99                   	cdq    
c000c0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c0eb:	e9 fd fb ff ff       	jmp    c000bced <sinc_multichan_vari_process+0x2b7>
c000c0f0:	83 c4 4c             	add    esp,0x4c
c000c0f3:	89 d0                	mov    eax,edx
c000c0f5:	5b                   	pop    ebx
c000c0f6:	5e                   	pop    esi
c000c0f7:	5f                   	pop    edi
c000c0f8:	5d                   	pop    ebp
c000c0f9:	c3                   	ret    

c000c0fa <sinc_hex_vari_process>:
c000c0fa:	55                   	push   ebp
c000c0fb:	ba 05 00 00 00       	mov    edx,0x5
c000c100:	57                   	push   edi
c000c101:	56                   	push   esi
c000c102:	53                   	push   ebx
c000c103:	83 ec 4c             	sub    esp,0x4c
c000c106:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c10a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c10e:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c111:	85 db                	test   ebx,ebx
c000c113:	0f 84 9c 06 00 00    	je     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c119:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c11c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c11f:	0f af c7             	imul   eax,edi
c000c122:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c125:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c128:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c12f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c136:	0f af c7             	imul   eax,edi
c000c139:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c13c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c13f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c142:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c146:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c14a:	68 00 00 70 3f       	push   0x3f700000
c000c14f:	6a 00                	push   0x0
c000c151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c159:	e8 69 c2 01 00       	call   c00283c7 <__ltdf2>
c000c15e:	83 c4 10             	add    esp,0x10
c000c161:	ba 16 00 00 00       	mov    edx,0x16
c000c166:	85 c0                	test   eax,eax
c000c168:	0f 88 47 06 00 00    	js     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c16e:	68 00 00 70 40       	push   0x40700000
c000c173:	6a 00                	push   0x0
c000c175:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17d:	e8 27 c2 01 00       	call   c00283a9 <__gtdf2>
c000c182:	83 c4 10             	add    esp,0x10
c000c185:	ba 16 00 00 00       	mov    edx,0x16
c000c18a:	85 c0                	test   eax,eax
c000c18c:	0f 8f 23 06 00 00    	jg     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c198:	e8 be bf 01 00       	call   c002815b <__floatsidf>
c000c19d:	83 c4 10             	add    esp,0x10
c000c1a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1a8:	68 00 00 00 40       	push   0x40000000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b7:	e8 bf b2 01 00       	call   c002747b <__adddf3>
c000c1bc:	59                   	pop    ecx
c000c1bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1c1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1c5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1c8:	e8 8e bf 01 00       	call   c002815b <__floatsidf>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1d8:	52                   	push   edx
c000c1d9:	50                   	push   eax
c000c1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1e2:	e8 f5 bb 01 00       	call   c0027ddc <__divdf3>
c000c1e7:	83 c4 10             	add    esp,0x10
c000c1ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c1f5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c1f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c200:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c210:	e8 94 c1 01 00       	call   c00283a9 <__gtdf2>
c000c215:	83 c4 10             	add    esp,0x10
c000c218:	85 c0                	test   eax,eax
c000c21a:	7e 2d                	jle    c000c249 <sinc_hex_vari_process+0x14f>
c000c21c:	68 00 00 f0 3f       	push   0x3ff00000
c000c221:	6a 00                	push   0x0
c000c223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c22b:	e8 97 c1 01 00       	call   c00283c7 <__ltdf2>
c000c230:	83 c4 10             	add    esp,0x10
c000c233:	85 c0                	test   eax,eax
c000c235:	79 4d                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c23f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c247:	eb 1b                	jmp    c000c264 <sinc_hex_vari_process+0x16a>
c000c249:	68 00 00 f0 3f       	push   0x3ff00000
c000c24e:	6a 00                	push   0x0
c000c250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c258:	e8 6a c1 01 00       	call   c00283c7 <__ltdf2>
c000c25d:	83 c4 10             	add    esp,0x10
c000c260:	85 c0                	test   eax,eax
c000c262:	79 20                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c264:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c268:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c26c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c270:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c274:	e8 63 bb 01 00       	call   c0027ddc <__divdf3>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c280:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c284:	50                   	push   eax
c000c285:	50                   	push   eax
c000c286:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28e:	e8 ed c2 01 00       	call   c0028580 <lrint>
c000c293:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c296:	40                   	inc    eax
c000c297:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29b:	0f af c7             	imul   eax,edi
c000c29e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2a9:	58                   	pop    eax
c000c2aa:	5a                   	pop    edx
c000c2ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b3:	e8 c8 c2 01 00       	call   c0028580 <lrint>
c000c2b8:	83 ec 0c             	sub    esp,0xc
c000c2bb:	50                   	push   eax
c000c2bc:	e8 9a be 01 00       	call   c002815b <__floatsidf>
c000c2c1:	83 c4 10             	add    esp,0x10
c000c2c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2cc:	52                   	push   edx
c000c2cd:	50                   	push   eax
c000c2ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d6:	e8 f1 b7 01 00       	call   c0027acc <__subdf3>
c000c2db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2e3:	83 c4 20             	add    esp,0x20
c000c2e6:	6a 00                	push   0x0
c000c2e8:	6a 00                	push   0x0
c000c2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2f2:	e8 d0 c0 01 00       	call   c00283c7 <__ltdf2>
c000c2f7:	83 c4 10             	add    esp,0x10
c000c2fa:	85 c0                	test   eax,eax
c000c2fc:	79 1f                	jns    c000c31d <sinc_hex_vari_process+0x223>
c000c2fe:	68 00 00 f0 3f       	push   0x3ff00000
c000c303:	6a 00                	push   0x0
c000c305:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30d:	e8 69 b1 01 00       	call   c002747b <__adddf3>
c000c312:	83 c4 10             	add    esp,0x10
c000c315:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c319:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c31d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c320:	83 ec 10             	sub    esp,0x10
c000c323:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c327:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c332:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c336:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c33a:	e8 8d b7 01 00       	call   c0027acc <__subdf3>
c000c33f:	83 c4 18             	add    esp,0x18
c000c342:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c34a:	52                   	push   edx
c000c34b:	50                   	push   eax
c000c34c:	e8 2f c2 01 00       	call   c0028580 <lrint>
c000c351:	0f af f8             	imul   edi,eax
c000c354:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c358:	01 f8                	add    eax,edi
c000c35a:	99                   	cdq    
c000c35b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c35e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c361:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c365:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c369:	68 00 00 f0 3f       	push   0x3ff00000
c000c36e:	6a 00                	push   0x0
c000c370:	e8 67 ba 01 00       	call   c0027ddc <__divdf3>
c000c375:	83 c4 10             	add    esp,0x10
c000c378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c37c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c380:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c385:	68 23 42 92 0c       	push   0xc924223
c000c38a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c38e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c392:	e8 e4 b0 01 00       	call   c002747b <__adddf3>
c000c397:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c39b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c39f:	83 c4 20             	add    esp,0x20
c000c3a2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3aa:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3b5:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3b8:	7d 50                	jge    c000c40a <sinc_hex_vari_process+0x310>
c000c3ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3c0:	01 c8                	add    eax,ecx
c000c3c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3c5:	99                   	cdq    
c000c3c6:	f7 f9                	idiv   ecx
c000c3c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3cc:	7d 0c                	jge    c000c3da <sinc_hex_vari_process+0x2e0>
c000c3ce:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3d1:	85 ff                	test   edi,edi
c000c3d3:	79 6c                	jns    c000c441 <sinc_hex_vari_process+0x347>
c000c3d5:	e9 e7 00 00 00       	jmp    c000c4c1 <sinc_hex_vari_process+0x3c7>
c000c3da:	50                   	push   eax
c000c3db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3df:	56                   	push   esi
c000c3e0:	53                   	push   ebx
c000c3e1:	e8 d6 f4 ff ff       	call   c000b8bc <prepare_data>
c000c3e6:	83 c4 10             	add    esp,0x10
c000c3e9:	89 c2                	mov    edx,eax
c000c3eb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c3ee:	85 c0                	test   eax,eax
c000c3f0:	0f 85 bf 03 00 00    	jne    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c3f6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fc:	01 c8                	add    eax,ecx
c000c3fe:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c401:	99                   	cdq    
c000c402:	f7 f9                	idiv   ecx
c000c404:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c408:	7c c4                	jl     c000c3ce <sinc_hex_vari_process+0x2d4>
c000c40a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c40e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c412:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c415:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c420:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c423:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c426:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c429:	99                   	cdq    
c000c42a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c42d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c430:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c433:	99                   	cdq    
c000c434:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c437:	31 d2                	xor    edx,edx
c000c439:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c43c:	e9 74 03 00 00       	jmp    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c441:	83 ec 0c             	sub    esp,0xc
c000c444:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c447:	e8 0f bd 01 00       	call   c002815b <__floatsidf>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c453:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c457:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c463:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c467:	e8 0f b0 01 00       	call   c002747b <__adddf3>
c000c46c:	83 c4 10             	add    esp,0x10
c000c46f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c473:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c477:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c483:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c487:	e8 ef af 01 00       	call   c002747b <__adddf3>
c000c48c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c48f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c493:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c497:	e8 bf bc 01 00       	call   c002815b <__floatsidf>
c000c49c:	83 c4 10             	add    esp,0x10
c000c49f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4a7:	52                   	push   edx
c000c4a8:	50                   	push   eax
c000c4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4b1:	e8 0f bf 01 00       	call   c00283c5 <__gedf2>
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	85 c0                	test   eax,eax
c000c4bb:	0f 89 49 ff ff ff    	jns    c000c40a <sinc_hex_vari_process+0x310>
c000c4c1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4c5:	0f 8e ef 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c4cb:	83 ec 10             	sub    esp,0x10
c000c4ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4d4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4d7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4da:	e8 ed b5 01 00       	call   c0027acc <__subdf3>
c000c4df:	83 c4 18             	add    esp,0x18
c000c4e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4ea:	52                   	push   edx
c000c4eb:	50                   	push   eax
c000c4ec:	e8 6f c0 01 00       	call   c0028560 <fabs>
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	83 c4 10             	add    esp,0x10
c000c4fc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c501:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c506:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50e:	e8 96 be 01 00       	call   c00283a9 <__gtdf2>
c000c513:	83 c4 10             	add    esp,0x10
c000c516:	85 c0                	test   eax,eax
c000c518:	0f 8e 9c 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c51e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c521:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c524:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c528:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c531:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c534:	e8 93 b5 01 00       	call   c0027acc <__subdf3>
c000c539:	59                   	pop    ecx
c000c53a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c53e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c542:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c545:	e8 11 bc 01 00       	call   c002815b <__floatsidf>
c000c54a:	83 c4 10             	add    esp,0x10
c000c54d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c551:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c555:	52                   	push   edx
c000c556:	50                   	push   eax
c000c557:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55f:	e8 94 b5 01 00       	call   c0027af8 <__muldf3>
c000c564:	5f                   	pop    edi
c000c565:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c569:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c56d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c570:	e8 e6 bb 01 00       	call   c002815b <__floatsidf>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c586:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c58a:	e8 4d b8 01 00       	call   c0027ddc <__divdf3>
c000c58f:	83 c4 10             	add    esp,0x10
c000c592:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c596:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c59a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5aa:	e8 cc ae 01 00       	call   c002747b <__adddf3>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5ba:	83 ec 0c             	sub    esp,0xc
c000c5bd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5c0:	e8 96 bb 01 00       	call   c002815b <__floatsidf>
c000c5c5:	83 c4 10             	add    esp,0x10
c000c5c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5e0:	e8 e2 bd 01 00       	call   c00283c7 <__ltdf2>
c000c5e5:	83 c4 10             	add    esp,0x10
c000c5e8:	85 c0                	test   eax,eax
c000c5ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c5f2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c5f6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c5fa:	78 10                	js     c000c60c <sinc_hex_vari_process+0x512>
c000c5fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c600:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c604:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c608:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c60c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c610:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c614:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c618:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c61c:	e8 d7 b4 01 00       	call   c0027af8 <__muldf3>
c000c621:	59                   	pop    ecx
c000c622:	5f                   	pop    edi
c000c623:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c627:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c62b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c62f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c633:	e8 5d f2 ff ff       	call   c000b895 <double_to_fp>
c000c638:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c63c:	89 c7                	mov    edi,eax
c000c63e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	e8 a9 b4 01 00       	call   c0027af8 <__muldf3>
c000c64f:	83 c4 18             	add    esp,0x18
c000c652:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c656:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c65a:	52                   	push   edx
c000c65b:	50                   	push   eax
c000c65c:	e8 34 f2 ff ff       	call   c000b895 <double_to_fp>
c000c661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c664:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c668:	83 c4 0c             	add    esp,0xc
c000c66b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c66e:	8d 04 90             	lea    eax,[eax+edx*4]
c000c671:	50                   	push   eax
c000c672:	50                   	push   eax
c000c673:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c676:	e8 e0 ba 01 00       	call   c002815b <__floatsidf>
c000c67b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c67f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c683:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c687:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c693:	e8 44 b7 01 00       	call   c0027ddc <__divdf3>
c000c698:	83 c4 18             	add    esp,0x18
c000c69b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c69f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6a3:	52                   	push   edx
c000c6a4:	89 fa                	mov    edx,edi
c000c6a6:	50                   	push   eax
c000c6a7:	89 d8                	mov    eax,ebx
c000c6a9:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ad:	e8 50 de ff ff       	call   c000a502 <calc_output_hex>
c000c6b2:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c6:	e8 11 b7 01 00       	call   c0027ddc <__divdf3>
c000c6cb:	83 c4 10             	add    esp,0x10
c000c6ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e6:	e8 90 ad 01 00       	call   c002747b <__adddf3>
c000c6eb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c6ef:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c6f3:	83 c4 18             	add    esp,0x18
c000c6f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fe:	e8 7d be 01 00       	call   c0028580 <lrint>
c000c703:	83 ec 0c             	sub    esp,0xc
c000c706:	50                   	push   eax
c000c707:	e8 4f ba 01 00       	call   c002815b <__floatsidf>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c713:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c717:	52                   	push   edx
c000c718:	50                   	push   eax
c000c719:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c721:	e8 a6 b3 01 00       	call   c0027acc <__subdf3>
c000c726:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c72a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c72e:	83 c4 20             	add    esp,0x20
c000c731:	6a 00                	push   0x0
c000c733:	6a 00                	push   0x0
c000c735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73d:	e8 85 bc 01 00       	call   c00283c7 <__ltdf2>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	85 c0                	test   eax,eax
c000c747:	79 20                	jns    c000c769 <sinc_hex_vari_process+0x66f>
c000c749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c74d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c759:	e8 1d ad 01 00       	call   c002747b <__adddf3>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c765:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c769:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c76c:	83 ec 10             	sub    esp,0x10
c000c76f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c773:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c782:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c786:	e8 41 b3 01 00       	call   c0027acc <__subdf3>
c000c78b:	83 c4 18             	add    esp,0x18
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c796:	52                   	push   edx
c000c797:	50                   	push   eax
c000c798:	e8 e3 bd 01 00       	call   c0028580 <lrint>
c000c79d:	0f af f8             	imul   edi,eax
c000c7a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7a4:	83 c4 10             	add    esp,0x10
c000c7a7:	01 f8                	add    eax,edi
c000c7a9:	99                   	cdq    
c000c7aa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ad:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7b0:	e9 fd fb ff ff       	jmp    c000c3b2 <sinc_hex_vari_process+0x2b8>
c000c7b5:	83 c4 4c             	add    esp,0x4c
c000c7b8:	89 d0                	mov    eax,edx
c000c7ba:	5b                   	pop    ebx
c000c7bb:	5e                   	pop    esi
c000c7bc:	5f                   	pop    edi
c000c7bd:	5d                   	pop    ebp
c000c7be:	c3                   	ret    

c000c7bf <sinc_quad_vari_process>:
c000c7bf:	55                   	push   ebp
c000c7c0:	ba 05 00 00 00       	mov    edx,0x5
c000c7c5:	57                   	push   edi
c000c7c6:	56                   	push   esi
c000c7c7:	53                   	push   ebx
c000c7c8:	83 ec 4c             	sub    esp,0x4c
c000c7cb:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7cf:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7d3:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7d6:	85 db                	test   ebx,ebx
c000c7d8:	0f 84 9c 06 00 00    	je     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c7de:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7e4:	0f af c7             	imul   eax,edi
c000c7e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c7ea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c7ed:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c7f4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c7fb:	0f af c7             	imul   eax,edi
c000c7fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c801:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c804:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c807:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c80b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c80f:	68 00 00 70 3f       	push   0x3f700000
c000c814:	6a 00                	push   0x0
c000c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81e:	e8 a4 bb 01 00       	call   c00283c7 <__ltdf2>
c000c823:	83 c4 10             	add    esp,0x10
c000c826:	ba 16 00 00 00       	mov    edx,0x16
c000c82b:	85 c0                	test   eax,eax
c000c82d:	0f 88 47 06 00 00    	js     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c833:	68 00 00 70 40       	push   0x40700000
c000c838:	6a 00                	push   0x0
c000c83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c842:	e8 62 bb 01 00       	call   c00283a9 <__gtdf2>
c000c847:	83 c4 10             	add    esp,0x10
c000c84a:	ba 16 00 00 00       	mov    edx,0x16
c000c84f:	85 c0                	test   eax,eax
c000c851:	0f 8f 23 06 00 00    	jg     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c857:	83 ec 0c             	sub    esp,0xc
c000c85a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c85d:	e8 f9 b8 01 00       	call   c002815b <__floatsidf>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c869:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c86d:	68 00 00 00 40       	push   0x40000000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c87c:	e8 fa ab 01 00       	call   c002747b <__adddf3>
c000c881:	59                   	pop    ecx
c000c882:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c886:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c88a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c88d:	e8 c9 b8 01 00       	call   c002815b <__floatsidf>
c000c892:	83 c4 10             	add    esp,0x10
c000c895:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c899:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c89d:	52                   	push   edx
c000c89e:	50                   	push   eax
c000c89f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a7:	e8 30 b5 01 00       	call   c0027ddc <__divdf3>
c000c8ac:	83 c4 10             	add    esp,0x10
c000c8af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8ba:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d5:	e8 cf ba 01 00       	call   c00283a9 <__gtdf2>
c000c8da:	83 c4 10             	add    esp,0x10
c000c8dd:	85 c0                	test   eax,eax
c000c8df:	7e 2d                	jle    c000c90e <sinc_quad_vari_process+0x14f>
c000c8e1:	68 00 00 f0 3f       	push   0x3ff00000
c000c8e6:	6a 00                	push   0x0
c000c8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8f0:	e8 d2 ba 01 00       	call   c00283c7 <__ltdf2>
c000c8f5:	83 c4 10             	add    esp,0x10
c000c8f8:	85 c0                	test   eax,eax
c000c8fa:	79 4d                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c900:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c90c:	eb 1b                	jmp    c000c929 <sinc_quad_vari_process+0x16a>
c000c90e:	68 00 00 f0 3f       	push   0x3ff00000
c000c913:	6a 00                	push   0x0
c000c915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c91d:	e8 a5 ba 01 00       	call   c00283c7 <__ltdf2>
c000c922:	83 c4 10             	add    esp,0x10
c000c925:	85 c0                	test   eax,eax
c000c927:	79 20                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c929:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c92d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c931:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c935:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c939:	e8 9e b4 01 00       	call   c0027ddc <__divdf3>
c000c93e:	83 c4 10             	add    esp,0x10
c000c941:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c945:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c949:	50                   	push   eax
c000c94a:	50                   	push   eax
c000c94b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c94f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c953:	e8 28 bc 01 00       	call   c0028580 <lrint>
c000c958:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c95b:	40                   	inc    eax
c000c95c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c960:	0f af c7             	imul   eax,edi
c000c963:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c96e:	58                   	pop    eax
c000c96f:	5a                   	pop    edx
c000c970:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c974:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c978:	e8 03 bc 01 00       	call   c0028580 <lrint>
c000c97d:	83 ec 0c             	sub    esp,0xc
c000c980:	50                   	push   eax
c000c981:	e8 d5 b7 01 00       	call   c002815b <__floatsidf>
c000c986:	83 c4 10             	add    esp,0x10
c000c989:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c98d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c991:	52                   	push   edx
c000c992:	50                   	push   eax
c000c993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c99b:	e8 2c b1 01 00       	call   c0027acc <__subdf3>
c000c9a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a8:	83 c4 20             	add    esp,0x20
c000c9ab:	6a 00                	push   0x0
c000c9ad:	6a 00                	push   0x0
c000c9af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b7:	e8 0b ba 01 00       	call   c00283c7 <__ltdf2>
c000c9bc:	83 c4 10             	add    esp,0x10
c000c9bf:	85 c0                	test   eax,eax
c000c9c1:	79 1f                	jns    c000c9e2 <sinc_quad_vari_process+0x223>
c000c9c3:	68 00 00 f0 3f       	push   0x3ff00000
c000c9c8:	6a 00                	push   0x0
c000c9ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d2:	e8 a4 aa 01 00       	call   c002747b <__adddf3>
c000c9d7:	83 c4 10             	add    esp,0x10
c000c9da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9e2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9e5:	83 ec 10             	sub    esp,0x10
c000c9e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9ec:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9ff:	e8 c8 b0 01 00       	call   c0027acc <__subdf3>
c000ca04:	83 c4 18             	add    esp,0x18
c000ca07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca0f:	52                   	push   edx
c000ca10:	50                   	push   eax
c000ca11:	e8 6a bb 01 00       	call   c0028580 <lrint>
c000ca16:	0f af f8             	imul   edi,eax
c000ca19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca1d:	01 f8                	add    eax,edi
c000ca1f:	99                   	cdq    
c000ca20:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca23:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2e:	68 00 00 f0 3f       	push   0x3ff00000
c000ca33:	6a 00                	push   0x0
c000ca35:	e8 a2 b3 01 00       	call   c0027ddc <__divdf3>
c000ca3a:	83 c4 10             	add    esp,0x10
c000ca3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca45:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca4a:	68 23 42 92 0c       	push   0xc924223
c000ca4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca57:	e8 1f aa 01 00       	call   c002747b <__adddf3>
c000ca5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca64:	83 c4 20             	add    esp,0x20
c000ca67:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca6f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca77:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca7a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca7d:	7d 50                	jge    c000cacf <sinc_quad_vari_process+0x310>
c000ca7f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca82:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ca85:	01 c8                	add    eax,ecx
c000ca87:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ca8a:	99                   	cdq    
c000ca8b:	f7 f9                	idiv   ecx
c000ca8d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ca91:	7d 0c                	jge    c000ca9f <sinc_quad_vari_process+0x2e0>
c000ca93:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000ca96:	85 ff                	test   edi,edi
c000ca98:	79 6c                	jns    c000cb06 <sinc_quad_vari_process+0x347>
c000ca9a:	e9 e7 00 00 00       	jmp    c000cb86 <sinc_quad_vari_process+0x3c7>
c000ca9f:	50                   	push   eax
c000caa0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000caa4:	56                   	push   esi
c000caa5:	53                   	push   ebx
c000caa6:	e8 11 ee ff ff       	call   c000b8bc <prepare_data>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	89 c2                	mov    edx,eax
c000cab0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cab3:	85 c0                	test   eax,eax
c000cab5:	0f 85 bf 03 00 00    	jne    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cabb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabe:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac1:	01 c8                	add    eax,ecx
c000cac3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac6:	99                   	cdq    
c000cac7:	f7 f9                	idiv   ecx
c000cac9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacd:	7c c4                	jl     c000ca93 <sinc_quad_vari_process+0x2d4>
c000cacf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cad7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cada:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cadd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cae1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cae5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cae8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000caeb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000caee:	99                   	cdq    
c000caef:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000caf2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000caf5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000caf8:	99                   	cdq    
c000caf9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cafc:	31 d2                	xor    edx,edx
c000cafe:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb01:	e9 74 03 00 00       	jmp    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cb06:	83 ec 0c             	sub    esp,0xc
c000cb09:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb0c:	e8 4a b6 01 00       	call   c002815b <__floatsidf>
c000cb11:	83 c4 10             	add    esp,0x10
c000cb14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb18:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb2c:	e8 4a a9 01 00       	call   c002747b <__adddf3>
c000cb31:	83 c4 10             	add    esp,0x10
c000cb34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb38:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4c:	e8 2a a9 01 00       	call   c002747b <__adddf3>
c000cb51:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb5c:	e8 fa b5 01 00       	call   c002815b <__floatsidf>
c000cb61:	83 c4 10             	add    esp,0x10
c000cb64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb68:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb6c:	52                   	push   edx
c000cb6d:	50                   	push   eax
c000cb6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb76:	e8 4a b8 01 00       	call   c00283c5 <__gedf2>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	85 c0                	test   eax,eax
c000cb80:	0f 89 49 ff ff ff    	jns    c000cacf <sinc_quad_vari_process+0x310>
c000cb86:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cb8a:	0f 8e ef 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cb90:	83 ec 10             	sub    esp,0x10
c000cb93:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cb96:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cb99:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cb9c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cb9f:	e8 28 af 01 00       	call   c0027acc <__subdf3>
c000cba4:	83 c4 18             	add    esp,0x18
c000cba7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbaf:	52                   	push   edx
c000cbb0:	50                   	push   eax
c000cbb1:	e8 aa b9 01 00       	call   c0028560 <fabs>
c000cbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbe:	83 c4 10             	add    esp,0x10
c000cbc1:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbc6:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd3:	e8 d1 b7 01 00       	call   c00283a9 <__gtdf2>
c000cbd8:	83 c4 10             	add    esp,0x10
c000cbdb:	85 c0                	test   eax,eax
c000cbdd:	0f 8e 9c 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cbe3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cbe9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbf6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbf9:	e8 ce ae 01 00       	call   c0027acc <__subdf3>
c000cbfe:	59                   	pop    ecx
c000cbff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc03:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc07:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc0a:	e8 4c b5 01 00       	call   c002815b <__floatsidf>
c000cc0f:	83 c4 10             	add    esp,0x10
c000cc12:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc1a:	52                   	push   edx
c000cc1b:	50                   	push   eax
c000cc1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc24:	e8 cf ae 01 00       	call   c0027af8 <__muldf3>
c000cc29:	5f                   	pop    edi
c000cc2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc2e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc35:	e8 21 b5 01 00       	call   c002815b <__floatsidf>
c000cc3a:	83 c4 10             	add    esp,0x10
c000cc3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4f:	e8 88 b1 01 00       	call   c0027ddc <__divdf3>
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6f:	e8 07 a8 01 00       	call   c002747b <__adddf3>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc7f:	83 ec 0c             	sub    esp,0xc
c000cc82:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cc85:	e8 d1 b4 01 00       	call   c002815b <__floatsidf>
c000cc8a:	83 c4 10             	add    esp,0x10
c000cc8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca5:	e8 1d b7 01 00       	call   c00283c7 <__ltdf2>
c000ccaa:	83 c4 10             	add    esp,0x10
c000ccad:	85 c0                	test   eax,eax
c000ccaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccb3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccb7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccbb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccbf:	78 10                	js     c000ccd1 <sinc_quad_vari_process+0x512>
c000ccc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cccd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cce1:	e8 12 ae 01 00       	call   c0027af8 <__muldf3>
c000cce6:	59                   	pop    ecx
c000cce7:	5f                   	pop    edi
c000cce8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf8:	e8 98 eb ff ff       	call   c000b895 <double_to_fp>
c000ccfd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd01:	89 c7                	mov    edi,eax
c000cd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	e8 e4 ad 01 00       	call   c0027af8 <__muldf3>
c000cd14:	83 c4 18             	add    esp,0x18
c000cd17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd1f:	52                   	push   edx
c000cd20:	50                   	push   eax
c000cd21:	e8 6f eb ff ff       	call   c000b895 <double_to_fp>
c000cd26:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd29:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd2d:	83 c4 0c             	add    esp,0xc
c000cd30:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd33:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd36:	50                   	push   eax
c000cd37:	50                   	push   eax
c000cd38:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3b:	e8 1b b4 01 00       	call   c002815b <__floatsidf>
c000cd40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd48:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd58:	e8 7f b0 01 00       	call   c0027ddc <__divdf3>
c000cd5d:	83 c4 18             	add    esp,0x18
c000cd60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd68:	52                   	push   edx
c000cd69:	89 fa                	mov    edx,edi
c000cd6b:	50                   	push   eax
c000cd6c:	89 d8                	mov    eax,ebx
c000cd6e:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd72:	e8 a5 d1 ff ff       	call   c0009f1c <calc_output_quad>
c000cd77:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd8b:	e8 4c b0 01 00       	call   c0027ddc <__divdf3>
c000cd90:	83 c4 10             	add    esp,0x10
c000cd93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd97:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cda7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdab:	e8 cb a6 01 00       	call   c002747b <__adddf3>
c000cdb0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdb4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdb8:	83 c4 18             	add    esp,0x18
c000cdbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdc3:	e8 b8 b7 01 00       	call   c0028580 <lrint>
c000cdc8:	83 ec 0c             	sub    esp,0xc
c000cdcb:	50                   	push   eax
c000cdcc:	e8 8a b3 01 00       	call   c002815b <__floatsidf>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cddc:	52                   	push   edx
c000cddd:	50                   	push   eax
c000cdde:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde6:	e8 e1 ac 01 00       	call   c0027acc <__subdf3>
c000cdeb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdf3:	83 c4 20             	add    esp,0x20
c000cdf6:	6a 00                	push   0x0
c000cdf8:	6a 00                	push   0x0
c000cdfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce02:	e8 c0 b5 01 00       	call   c00283c7 <__ltdf2>
c000ce07:	83 c4 10             	add    esp,0x10
c000ce0a:	85 c0                	test   eax,eax
c000ce0c:	79 20                	jns    c000ce2e <sinc_quad_vari_process+0x66f>
c000ce0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1e:	e8 58 a6 01 00       	call   c002747b <__adddf3>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce2e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce31:	83 ec 10             	sub    esp,0x10
c000ce34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce38:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce4b:	e8 7c ac 01 00       	call   c0027acc <__subdf3>
c000ce50:	83 c4 18             	add    esp,0x18
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce5b:	52                   	push   edx
c000ce5c:	50                   	push   eax
c000ce5d:	e8 1e b7 01 00       	call   c0028580 <lrint>
c000ce62:	0f af f8             	imul   edi,eax
c000ce65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce69:	83 c4 10             	add    esp,0x10
c000ce6c:	01 f8                	add    eax,edi
c000ce6e:	99                   	cdq    
c000ce6f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce72:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce75:	e9 fd fb ff ff       	jmp    c000ca77 <sinc_quad_vari_process+0x2b8>
c000ce7a:	83 c4 4c             	add    esp,0x4c
c000ce7d:	89 d0                	mov    eax,edx
c000ce7f:	5b                   	pop    ebx
c000ce80:	5e                   	pop    esi
c000ce81:	5f                   	pop    edi
c000ce82:	5d                   	pop    ebp
c000ce83:	c3                   	ret    

c000ce84 <sinc_stereo_vari_process>:
c000ce84:	55                   	push   ebp
c000ce85:	ba 05 00 00 00       	mov    edx,0x5
c000ce8a:	57                   	push   edi
c000ce8b:	56                   	push   esi
c000ce8c:	53                   	push   ebx
c000ce8d:	83 ec 4c             	sub    esp,0x4c
c000ce90:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ce94:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ce98:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ce9b:	85 db                	test   ebx,ebx
c000ce9d:	0f 84 9c 06 00 00    	je     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cea3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cea6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cea9:	0f af c7             	imul   eax,edi
c000ceac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ceaf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceb2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ceb9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cec0:	0f af c7             	imul   eax,edi
c000cec3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cec6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cec9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cecc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ced0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ced4:	68 00 00 70 3f       	push   0x3f700000
c000ced9:	6a 00                	push   0x0
c000cedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee3:	e8 df b4 01 00       	call   c00283c7 <__ltdf2>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	ba 16 00 00 00       	mov    edx,0x16
c000cef0:	85 c0                	test   eax,eax
c000cef2:	0f 88 47 06 00 00    	js     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cef8:	68 00 00 70 40       	push   0x40700000
c000cefd:	6a 00                	push   0x0
c000ceff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf07:	e8 9d b4 01 00       	call   c00283a9 <__gtdf2>
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	ba 16 00 00 00       	mov    edx,0x16
c000cf14:	85 c0                	test   eax,eax
c000cf16:	0f 8f 23 06 00 00    	jg     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cf1c:	83 ec 0c             	sub    esp,0xc
c000cf1f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf22:	e8 34 b2 01 00       	call   c002815b <__floatsidf>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf32:	68 00 00 00 40       	push   0x40000000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf41:	e8 35 a5 01 00       	call   c002747b <__adddf3>
c000cf46:	59                   	pop    ecx
c000cf47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf4b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf4f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf52:	e8 04 b2 01 00       	call   c002815b <__floatsidf>
c000cf57:	83 c4 10             	add    esp,0x10
c000cf5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf62:	52                   	push   edx
c000cf63:	50                   	push   eax
c000cf64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf6c:	e8 6b ae 01 00       	call   c0027ddc <__divdf3>
c000cf71:	83 c4 10             	add    esp,0x10
c000cf74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf78:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf7f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf9a:	e8 0a b4 01 00       	call   c00283a9 <__gtdf2>
c000cf9f:	83 c4 10             	add    esp,0x10
c000cfa2:	85 c0                	test   eax,eax
c000cfa4:	7e 2d                	jle    c000cfd3 <sinc_stereo_vari_process+0x14f>
c000cfa6:	68 00 00 f0 3f       	push   0x3ff00000
c000cfab:	6a 00                	push   0x0
c000cfad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb5:	e8 0d b4 01 00       	call   c00283c7 <__ltdf2>
c000cfba:	83 c4 10             	add    esp,0x10
c000cfbd:	85 c0                	test   eax,eax
c000cfbf:	79 4d                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfd1:	eb 1b                	jmp    c000cfee <sinc_stereo_vari_process+0x16a>
c000cfd3:	68 00 00 f0 3f       	push   0x3ff00000
c000cfd8:	6a 00                	push   0x0
c000cfda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfe2:	e8 e0 b3 01 00       	call   c00283c7 <__ltdf2>
c000cfe7:	83 c4 10             	add    esp,0x10
c000cfea:	85 c0                	test   eax,eax
c000cfec:	79 20                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffe:	e8 d9 ad 01 00       	call   c0027ddc <__divdf3>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d00e:	50                   	push   eax
c000d00f:	50                   	push   eax
c000d010:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d014:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d018:	e8 63 b5 01 00       	call   c0028580 <lrint>
c000d01d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d020:	40                   	inc    eax
c000d021:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d025:	0f af c7             	imul   eax,edi
c000d028:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d02c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d02f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d033:	58                   	pop    eax
c000d034:	5a                   	pop    edx
c000d035:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d039:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03d:	e8 3e b5 01 00       	call   c0028580 <lrint>
c000d042:	83 ec 0c             	sub    esp,0xc
c000d045:	50                   	push   eax
c000d046:	e8 10 b1 01 00       	call   c002815b <__floatsidf>
c000d04b:	83 c4 10             	add    esp,0x10
c000d04e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d052:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d056:	52                   	push   edx
c000d057:	50                   	push   eax
c000d058:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d060:	e8 67 aa 01 00       	call   c0027acc <__subdf3>
c000d065:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d069:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d06d:	83 c4 20             	add    esp,0x20
c000d070:	6a 00                	push   0x0
c000d072:	6a 00                	push   0x0
c000d074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d07c:	e8 46 b3 01 00       	call   c00283c7 <__ltdf2>
c000d081:	83 c4 10             	add    esp,0x10
c000d084:	85 c0                	test   eax,eax
c000d086:	79 1f                	jns    c000d0a7 <sinc_stereo_vari_process+0x223>
c000d088:	68 00 00 f0 3f       	push   0x3ff00000
c000d08d:	6a 00                	push   0x0
c000d08f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d093:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d097:	e8 df a3 01 00       	call   c002747b <__adddf3>
c000d09c:	83 c4 10             	add    esp,0x10
c000d09f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0a7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0aa:	83 ec 10             	sub    esp,0x10
c000d0ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0b1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c4:	e8 03 aa 01 00       	call   c0027acc <__subdf3>
c000d0c9:	83 c4 18             	add    esp,0x18
c000d0cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0d4:	52                   	push   edx
c000d0d5:	50                   	push   eax
c000d0d6:	e8 a5 b4 01 00       	call   c0028580 <lrint>
c000d0db:	0f af f8             	imul   edi,eax
c000d0de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0e2:	01 f8                	add    eax,edi
c000d0e4:	99                   	cdq    
c000d0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0f3:	68 00 00 f0 3f       	push   0x3ff00000
c000d0f8:	6a 00                	push   0x0
c000d0fa:	e8 dd ac 01 00       	call   c0027ddc <__divdf3>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d106:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d10a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d10f:	68 23 42 92 0c       	push   0xc924223
c000d114:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d118:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d11c:	e8 5a a3 01 00       	call   c002747b <__adddf3>
c000d121:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d125:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d129:	83 c4 20             	add    esp,0x20
c000d12c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d134:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d13c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d13f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d142:	7d 50                	jge    c000d194 <sinc_stereo_vari_process+0x310>
c000d144:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d147:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d14a:	01 c8                	add    eax,ecx
c000d14c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d14f:	99                   	cdq    
c000d150:	f7 f9                	idiv   ecx
c000d152:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d156:	7d 0c                	jge    c000d164 <sinc_stereo_vari_process+0x2e0>
c000d158:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d15b:	85 ff                	test   edi,edi
c000d15d:	79 6c                	jns    c000d1cb <sinc_stereo_vari_process+0x347>
c000d15f:	e9 e7 00 00 00       	jmp    c000d24b <sinc_stereo_vari_process+0x3c7>
c000d164:	50                   	push   eax
c000d165:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d169:	56                   	push   esi
c000d16a:	53                   	push   ebx
c000d16b:	e8 4c e7 ff ff       	call   c000b8bc <prepare_data>
c000d170:	83 c4 10             	add    esp,0x10
c000d173:	89 c2                	mov    edx,eax
c000d175:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d178:	85 c0                	test   eax,eax
c000d17a:	0f 85 bf 03 00 00    	jne    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d180:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d183:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d186:	01 c8                	add    eax,ecx
c000d188:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d18b:	99                   	cdq    
c000d18c:	f7 f9                	idiv   ecx
c000d18e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d192:	7c c4                	jl     c000d158 <sinc_stereo_vari_process+0x2d4>
c000d194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d198:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d19c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d19f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ad:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1b3:	99                   	cdq    
c000d1b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1bd:	99                   	cdq    
c000d1be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1c1:	31 d2                	xor    edx,edx
c000d1c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1c6:	e9 74 03 00 00       	jmp    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d1cb:	83 ec 0c             	sub    esp,0xc
c000d1ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1d1:	e8 85 af 01 00       	call   c002815b <__floatsidf>
c000d1d6:	83 c4 10             	add    esp,0x10
c000d1d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1f1:	e8 85 a2 01 00       	call   c002747b <__adddf3>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d201:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d205:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d211:	e8 65 a2 01 00       	call   c002747b <__adddf3>
c000d216:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d219:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d21d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d221:	e8 35 af 01 00       	call   c002815b <__floatsidf>
c000d226:	83 c4 10             	add    esp,0x10
c000d229:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d22d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d231:	52                   	push   edx
c000d232:	50                   	push   eax
c000d233:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d237:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d23b:	e8 85 b1 01 00       	call   c00283c5 <__gedf2>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	85 c0                	test   eax,eax
c000d245:	0f 89 49 ff ff ff    	jns    c000d194 <sinc_stereo_vari_process+0x310>
c000d24b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d24f:	0f 8e ef 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d255:	83 ec 10             	sub    esp,0x10
c000d258:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d25b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d25e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d261:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d264:	e8 63 a8 01 00       	call   c0027acc <__subdf3>
c000d269:	83 c4 18             	add    esp,0x18
c000d26c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d270:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d274:	52                   	push   edx
c000d275:	50                   	push   eax
c000d276:	e8 e5 b2 01 00       	call   c0028560 <fabs>
c000d27b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d283:	83 c4 10             	add    esp,0x10
c000d286:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d28b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d290:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d294:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d298:	e8 0c b1 01 00       	call   c00283a9 <__gtdf2>
c000d29d:	83 c4 10             	add    esp,0x10
c000d2a0:	85 c0                	test   eax,eax
c000d2a2:	0f 8e 9c 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d2a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ab:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2be:	e8 09 a8 01 00       	call   c0027acc <__subdf3>
c000d2c3:	59                   	pop    ecx
c000d2c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2c8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2cc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2cf:	e8 87 ae 01 00       	call   c002815b <__floatsidf>
c000d2d4:	83 c4 10             	add    esp,0x10
c000d2d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2df:	52                   	push   edx
c000d2e0:	50                   	push   eax
c000d2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e9:	e8 0a a8 01 00       	call   c0027af8 <__muldf3>
c000d2ee:	5f                   	pop    edi
c000d2ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2f3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2f7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d2fa:	e8 5c ae 01 00       	call   c002815b <__floatsidf>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d306:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d314:	e8 c3 aa 01 00       	call   c0027ddc <__divdf3>
c000d319:	83 c4 10             	add    esp,0x10
c000d31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d330:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d334:	e8 42 a1 01 00       	call   c002747b <__adddf3>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d344:	83 ec 0c             	sub    esp,0xc
c000d347:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d34a:	e8 0c ae 01 00       	call   c002815b <__floatsidf>
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d356:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d35a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36a:	e8 58 b0 01 00       	call   c00283c7 <__ltdf2>
c000d36f:	83 c4 10             	add    esp,0x10
c000d372:	85 c0                	test   eax,eax
c000d374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d378:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d37c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d380:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d384:	78 10                	js     c000d396 <sinc_stereo_vari_process+0x512>
c000d386:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d38a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d38e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d392:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a6:	e8 4d a7 01 00       	call   c0027af8 <__muldf3>
c000d3ab:	59                   	pop    ecx
c000d3ac:	5f                   	pop    edi
c000d3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3bd:	e8 d3 e4 ff ff       	call   c000b895 <double_to_fp>
c000d3c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c6:	89 c7                	mov    edi,eax
c000d3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	e8 1f a7 01 00       	call   c0027af8 <__muldf3>
c000d3d9:	83 c4 18             	add    esp,0x18
c000d3dc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3e4:	52                   	push   edx
c000d3e5:	50                   	push   eax
c000d3e6:	e8 aa e4 ff ff       	call   c000b895 <double_to_fp>
c000d3eb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d3ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d3f2:	83 c4 0c             	add    esp,0xc
c000d3f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d3f8:	8d 04 90             	lea    eax,[eax+edx*4]
c000d3fb:	50                   	push   eax
c000d3fc:	50                   	push   eax
c000d3fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d400:	e8 56 ad 01 00       	call   c002815b <__floatsidf>
c000d405:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d409:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d40d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d411:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d419:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d41d:	e8 ba a9 01 00       	call   c0027ddc <__divdf3>
c000d422:	83 c4 18             	add    esp,0x18
c000d425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d42d:	52                   	push   edx
c000d42e:	89 fa                	mov    edx,edi
c000d430:	50                   	push   eax
c000d431:	89 d8                	mov    eax,ebx
c000d433:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d437:	e8 02 c7 ff ff       	call   c0009b3e <calc_output_stereo>
c000d43c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d440:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d444:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d44c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d450:	e8 87 a9 01 00       	call   c0027ddc <__divdf3>
c000d455:	83 c4 10             	add    esp,0x10
c000d458:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d45c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d468:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d46c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d470:	e8 06 a0 01 00       	call   c002747b <__adddf3>
c000d475:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d479:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d47d:	83 c4 18             	add    esp,0x18
c000d480:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d488:	e8 f3 b0 01 00       	call   c0028580 <lrint>
c000d48d:	83 ec 0c             	sub    esp,0xc
c000d490:	50                   	push   eax
c000d491:	e8 c5 ac 01 00       	call   c002815b <__floatsidf>
c000d496:	83 c4 10             	add    esp,0x10
c000d499:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d49d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4a1:	52                   	push   edx
c000d4a2:	50                   	push   eax
c000d4a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ab:	e8 1c a6 01 00       	call   c0027acc <__subdf3>
c000d4b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4b8:	83 c4 20             	add    esp,0x20
c000d4bb:	6a 00                	push   0x0
c000d4bd:	6a 00                	push   0x0
c000d4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c7:	e8 fb ae 01 00       	call   c00283c7 <__ltdf2>
c000d4cc:	83 c4 10             	add    esp,0x10
c000d4cf:	85 c0                	test   eax,eax
c000d4d1:	79 20                	jns    c000d4f3 <sinc_stereo_vari_process+0x66f>
c000d4d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e3:	e8 93 9f 01 00       	call   c002747b <__adddf3>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d4f6:	83 ec 10             	sub    esp,0x10
c000d4f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d4fd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d508:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d50c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d510:	e8 b7 a5 01 00       	call   c0027acc <__subdf3>
c000d515:	83 c4 18             	add    esp,0x18
c000d518:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d520:	52                   	push   edx
c000d521:	50                   	push   eax
c000d522:	e8 59 b0 01 00       	call   c0028580 <lrint>
c000d527:	0f af f8             	imul   edi,eax
c000d52a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d52e:	83 c4 10             	add    esp,0x10
c000d531:	01 f8                	add    eax,edi
c000d533:	99                   	cdq    
c000d534:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d537:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d53a:	e9 fd fb ff ff       	jmp    c000d13c <sinc_stereo_vari_process+0x2b8>
c000d53f:	83 c4 4c             	add    esp,0x4c
c000d542:	89 d0                	mov    eax,edx
c000d544:	5b                   	pop    ebx
c000d545:	5e                   	pop    esi
c000d546:	5f                   	pop    edi
c000d547:	5d                   	pop    ebp
c000d548:	c3                   	ret    

c000d549 <sinc_mono_vari_process>:
c000d549:	55                   	push   ebp
c000d54a:	ba 05 00 00 00       	mov    edx,0x5
c000d54f:	57                   	push   edi
c000d550:	56                   	push   esi
c000d551:	53                   	push   ebx
c000d552:	83 ec 4c             	sub    esp,0x4c
c000d555:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d559:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d55d:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d560:	85 db                	test   ebx,ebx
c000d562:	0f 84 c1 06 00 00    	je     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d56b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d56e:	0f af c7             	imul   eax,edi
c000d571:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d574:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d577:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d57e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d585:	0f af c7             	imul   eax,edi
c000d588:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d58b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d58f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d592:	8b 00                	mov    eax,DWORD PTR [eax]
c000d594:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d598:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d59c:	68 00 00 70 3f       	push   0x3f700000
c000d5a1:	6a 00                	push   0x0
c000d5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ab:	e8 17 ae 01 00       	call   c00283c7 <__ltdf2>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	ba 16 00 00 00       	mov    edx,0x16
c000d5b8:	85 c0                	test   eax,eax
c000d5ba:	0f 88 69 06 00 00    	js     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5c0:	68 00 00 70 40       	push   0x40700000
c000d5c5:	6a 00                	push   0x0
c000d5c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cf:	e8 d5 ad 01 00       	call   c00283a9 <__gtdf2>
c000d5d4:	83 c4 10             	add    esp,0x10
c000d5d7:	ba 16 00 00 00       	mov    edx,0x16
c000d5dc:	85 c0                	test   eax,eax
c000d5de:	0f 8f 45 06 00 00    	jg     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5e4:	83 ec 0c             	sub    esp,0xc
c000d5e7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d5ea:	e8 6c ab 01 00       	call   c002815b <__floatsidf>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d5fa:	68 00 00 00 40       	push   0x40000000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d605:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d609:	e8 6d 9e 01 00       	call   c002747b <__adddf3>
c000d60e:	59                   	pop    ecx
c000d60f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d613:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d617:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d61a:	e8 3c ab 01 00       	call   c002815b <__floatsidf>
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d626:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d62a:	52                   	push   edx
c000d62b:	50                   	push   eax
c000d62c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d630:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d634:	e8 a3 a7 01 00       	call   c0027ddc <__divdf3>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d640:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d644:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d647:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d64a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d64e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d652:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d662:	e8 42 ad 01 00       	call   c00283a9 <__gtdf2>
c000d667:	83 c4 10             	add    esp,0x10
c000d66a:	85 c0                	test   eax,eax
c000d66c:	7e 2d                	jle    c000d69b <sinc_mono_vari_process+0x152>
c000d66e:	68 00 00 f0 3f       	push   0x3ff00000
c000d673:	6a 00                	push   0x0
c000d675:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d679:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d67d:	e8 45 ad 01 00       	call   c00283c7 <__ltdf2>
c000d682:	83 c4 10             	add    esp,0x10
c000d685:	85 c0                	test   eax,eax
c000d687:	79 4d                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d691:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d695:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d699:	eb 1b                	jmp    c000d6b6 <sinc_mono_vari_process+0x16d>
c000d69b:	68 00 00 f0 3f       	push   0x3ff00000
c000d6a0:	6a 00                	push   0x0
c000d6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6aa:	e8 18 ad 01 00       	call   c00283c7 <__ltdf2>
c000d6af:	83 c4 10             	add    esp,0x10
c000d6b2:	85 c0                	test   eax,eax
c000d6b4:	79 20                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d6b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c6:	e8 11 a7 01 00       	call   c0027ddc <__divdf3>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d6:	50                   	push   eax
c000d6d7:	50                   	push   eax
c000d6d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e0:	e8 9b ae 01 00       	call   c0028580 <lrint>
c000d6e5:	40                   	inc    eax
c000d6e6:	0f af c7             	imul   eax,edi
c000d6e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d6ed:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d6f1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d6f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d6f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ff:	58                   	pop    eax
c000d700:	5a                   	pop    edx
c000d701:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d705:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d709:	e8 72 ae 01 00       	call   c0028580 <lrint>
c000d70e:	83 ec 0c             	sub    esp,0xc
c000d711:	50                   	push   eax
c000d712:	e8 44 aa 01 00       	call   c002815b <__floatsidf>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d71e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d722:	52                   	push   edx
c000d723:	50                   	push   eax
c000d724:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d728:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d72c:	e8 9b a3 01 00       	call   c0027acc <__subdf3>
c000d731:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d735:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d739:	83 c4 20             	add    esp,0x20
c000d73c:	6a 00                	push   0x0
c000d73e:	6a 00                	push   0x0
c000d740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d748:	e8 7a ac 01 00       	call   c00283c7 <__ltdf2>
c000d74d:	83 c4 10             	add    esp,0x10
c000d750:	85 c0                	test   eax,eax
c000d752:	79 1f                	jns    c000d773 <sinc_mono_vari_process+0x22a>
c000d754:	68 00 00 f0 3f       	push   0x3ff00000
c000d759:	6a 00                	push   0x0
c000d75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d763:	e8 13 9d 01 00       	call   c002747b <__adddf3>
c000d768:	83 c4 10             	add    esp,0x10
c000d76b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d76f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d773:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d776:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d779:	83 ec 10             	sub    esp,0x10
c000d77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d784:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d788:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78c:	e8 3b a3 01 00       	call   c0027acc <__subdf3>
c000d791:	83 c4 18             	add    esp,0x18
c000d794:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d798:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d79c:	52                   	push   edx
c000d79d:	50                   	push   eax
c000d79e:	e8 dd ad 01 00       	call   c0028580 <lrint>
c000d7a3:	0f af f8             	imul   edi,eax
c000d7a6:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7a9:	31 ff                	xor    edi,edi
c000d7ab:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7b0:	99                   	cdq    
c000d7b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bf:	55                   	push   ebp
c000d7c0:	57                   	push   edi
c000d7c1:	e8 16 a6 01 00       	call   c0027ddc <__divdf3>
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7d1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7d6:	68 23 42 92 0c       	push   0xc924223
c000d7db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e3:	e8 93 9c 01 00       	call   c002747b <__adddf3>
c000d7e8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d7ec:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d7f0:	83 c4 20             	add    esp,0x20
c000d7f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d7f7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d7fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d7fe:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d801:	7d 54                	jge    c000d857 <sinc_mono_vari_process+0x30e>
c000d803:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d806:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d809:	01 c8                	add    eax,ecx
c000d80b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d80e:	99                   	cdq    
c000d80f:	f7 f9                	idiv   ecx
c000d811:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d815:	7d 0c                	jge    c000d823 <sinc_mono_vari_process+0x2da>
c000d817:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d81a:	85 ff                	test   edi,edi
c000d81c:	79 73                	jns    c000d891 <sinc_mono_vari_process+0x348>
c000d81e:	e9 ee 00 00 00       	jmp    c000d911 <sinc_mono_vari_process+0x3c8>
c000d823:	50                   	push   eax
c000d824:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d828:	56                   	push   esi
c000d829:	53                   	push   ebx
c000d82a:	e8 8d e0 ff ff       	call   c000b8bc <prepare_data>
c000d82f:	89 c2                	mov    edx,eax
c000d831:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d835:	83 c4 10             	add    esp,0x10
c000d838:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d83b:	85 d2                	test   edx,edx
c000d83d:	0f 85 e6 03 00 00    	jne    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d843:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d846:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d849:	01 c8                	add    eax,ecx
c000d84b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d84e:	99                   	cdq    
c000d84f:	f7 f9                	idiv   ecx
c000d851:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d855:	7c c0                	jl     c000d817 <sinc_mono_vari_process+0x2ce>
c000d857:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d85b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d85f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d863:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d866:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d871:	89 01                	mov    DWORD PTR [ecx],eax
c000d873:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d876:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d879:	99                   	cdq    
c000d87a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d87d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d880:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d883:	99                   	cdq    
c000d884:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d887:	31 d2                	xor    edx,edx
c000d889:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d88c:	e9 98 03 00 00       	jmp    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d891:	83 ec 0c             	sub    esp,0xc
c000d894:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d897:	e8 bf a8 01 00       	call   c002815b <__floatsidf>
c000d89c:	83 c4 10             	add    esp,0x10
c000d89f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b7:	e8 bf 9b 01 00       	call   c002747b <__adddf3>
c000d8bc:	83 c4 10             	add    esp,0x10
c000d8bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d7:	e8 9f 9b 01 00       	call   c002747b <__adddf3>
c000d8dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8e7:	e8 6f a8 01 00       	call   c002815b <__floatsidf>
c000d8ec:	83 c4 10             	add    esp,0x10
c000d8ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8f7:	52                   	push   edx
c000d8f8:	50                   	push   eax
c000d8f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d901:	e8 a3 aa 01 00       	call   c00283a9 <__gtdf2>
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	85 c0                	test   eax,eax
c000d90b:	0f 8f 46 ff ff ff    	jg     c000d857 <sinc_mono_vari_process+0x30e>
c000d911:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d915:	0f 8e f5 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d91b:	83 ec 10             	sub    esp,0x10
c000d91e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d921:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d924:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d928:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d92b:	ff 30                	push   DWORD PTR [eax]
c000d92d:	e8 9a a1 01 00       	call   c0027acc <__subdf3>
c000d932:	83 c4 18             	add    esp,0x18
c000d935:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d939:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d93d:	52                   	push   edx
c000d93e:	50                   	push   eax
c000d93f:	e8 1c ac 01 00       	call   c0028560 <fabs>
c000d944:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d948:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d94c:	83 c4 10             	add    esp,0x10
c000d94f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d954:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d959:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d961:	e8 43 aa 01 00       	call   c00283a9 <__gtdf2>
c000d966:	83 c4 10             	add    esp,0x10
c000d969:	85 c0                	test   eax,eax
c000d96b:	0f 8e 9f 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d971:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d975:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d978:	8b 00                	mov    eax,DWORD PTR [eax]
c000d97a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d97e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d982:	52                   	push   edx
c000d983:	50                   	push   eax
c000d984:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d987:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d98a:	e8 3d a1 01 00       	call   c0027acc <__subdf3>
c000d98f:	5f                   	pop    edi
c000d990:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d994:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d998:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d99b:	e8 bb a7 01 00       	call   c002815b <__floatsidf>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ab:	52                   	push   edx
c000d9ac:	50                   	push   eax
c000d9ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b5:	e8 3e a1 01 00       	call   c0027af8 <__muldf3>
c000d9ba:	5d                   	pop    ebp
c000d9bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9c3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9c6:	e8 90 a7 01 00       	call   c002815b <__floatsidf>
c000d9cb:	83 c4 10             	add    esp,0x10
c000d9ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9d6:	52                   	push   edx
c000d9d7:	50                   	push   eax
c000d9d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9e0:	e8 f7 a3 01 00       	call   c0027ddc <__divdf3>
c000d9e5:	83 c4 10             	add    esp,0x10
c000d9e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da00:	e8 76 9a 01 00       	call   c002747b <__adddf3>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da0c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da16:	e8 40 a7 01 00       	call   c002815b <__floatsidf>
c000da1b:	83 c4 10             	add    esp,0x10
c000da1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da36:	e8 8c a9 01 00       	call   c00283c7 <__ltdf2>
c000da3b:	83 c4 10             	add    esp,0x10
c000da3e:	85 c0                	test   eax,eax
c000da40:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da44:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da48:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da4c:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da50:	78 10                	js     c000da62 <sinc_mono_vari_process+0x519>
c000da52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da5e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da72:	e8 81 a0 01 00       	call   c0027af8 <__muldf3>
c000da77:	59                   	pop    ecx
c000da78:	5f                   	pop    edi
c000da79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da89:	e8 07 de ff ff       	call   c000b895 <double_to_fp>
c000da8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da92:	89 c7                	mov    edi,eax
c000da94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000da9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000daa0:	e8 53 a0 01 00       	call   c0027af8 <__muldf3>
c000daa5:	83 c4 18             	add    esp,0x18
c000daa8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dab0:	52                   	push   edx
c000dab1:	50                   	push   eax
c000dab2:	e8 de dd ff ff       	call   c000b895 <double_to_fp>
c000dab7:	83 ec 0c             	sub    esp,0xc
c000daba:	89 c5                	mov    ebp,eax
c000dabc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dabf:	e8 97 a6 01 00       	call   c002815b <__floatsidf>
c000dac4:	83 c4 10             	add    esp,0x10
c000dac7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dacb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dacf:	52                   	push   edx
c000dad0:	50                   	push   eax
c000dad1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad9:	e8 fe a2 01 00       	call   c0027ddc <__divdf3>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	89 e9                	mov    ecx,ebp
c000dae3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daeb:	89 d8                	mov    eax,ebx
c000daed:	89 fa                	mov    edx,edi
c000daef:	e8 ee bd ff ff       	call   c00098e2 <calc_output_single>
c000daf4:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000daf7:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dafa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dafe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db02:	52                   	push   edx
c000db03:	50                   	push   eax
c000db04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db0c:	e8 e7 9f 01 00       	call   c0027af8 <__muldf3>
c000db11:	59                   	pop    ecx
c000db12:	59                   	pop    ecx
c000db13:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db17:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db1b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db23:	e8 a3 a8 01 00       	call   c00283cb <__truncdfsf2>
c000db28:	83 c4 10             	add    esp,0x10
c000db2b:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db2e:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db41:	e8 96 a2 01 00       	call   c0027ddc <__divdf3>
c000db46:	83 c4 10             	add    esp,0x10
c000db49:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db4d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	e8 15 99 01 00       	call   c002747b <__adddf3>
c000db66:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db6a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db6e:	83 c4 18             	add    esp,0x18
c000db71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db79:	e8 02 aa 01 00       	call   c0028580 <lrint>
c000db7e:	83 ec 0c             	sub    esp,0xc
c000db81:	50                   	push   eax
c000db82:	e8 d4 a5 01 00       	call   c002815b <__floatsidf>
c000db87:	83 c4 10             	add    esp,0x10
c000db8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db92:	52                   	push   edx
c000db93:	50                   	push   eax
c000db94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9c:	e8 2b 9f 01 00       	call   c0027acc <__subdf3>
c000dba1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dba5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dba9:	83 c4 20             	add    esp,0x20
c000dbac:	6a 00                	push   0x0
c000dbae:	6a 00                	push   0x0
c000dbb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb8:	e8 0a a8 01 00       	call   c00283c7 <__ltdf2>
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	85 c0                	test   eax,eax
c000dbc2:	79 20                	jns    c000dbe4 <sinc_mono_vari_process+0x69b>
c000dbc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd4:	e8 a2 98 01 00       	call   c002747b <__adddf3>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbe0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbe4:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dbe7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dbea:	83 ec 10             	sub    esp,0x10
c000dbed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbfd:	e8 ca 9e 01 00       	call   c0027acc <__subdf3>
c000dc02:	83 c4 18             	add    esp,0x18
c000dc05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc0d:	52                   	push   edx
c000dc0e:	50                   	push   eax
c000dc0f:	e8 6c a9 01 00       	call   c0028580 <lrint>
c000dc14:	83 c4 10             	add    esp,0x10
c000dc17:	0f af f8             	imul   edi,eax
c000dc1a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc1d:	99                   	cdq    
c000dc1e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc21:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc24:	e9 d2 fb ff ff       	jmp    c000d7fb <sinc_mono_vari_process+0x2b2>
c000dc29:	83 c4 4c             	add    esp,0x4c
c000dc2c:	89 d0                	mov    eax,edx
c000dc2e:	5b                   	pop    ebx
c000dc2f:	5e                   	pop    esi
c000dc30:	5f                   	pop    edi
c000dc31:	5d                   	pop    ebp
c000dc32:	c3                   	ret    

c000dc33 <sinc_get_name>:
c000dc33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc37:	31 c0                	xor    eax,eax
c000dc39:	83 fa 02             	cmp    edx,0x2
c000dc3c:	77 07                	ja     c000dc45 <sinc_get_name+0x12>
c000dc3e:	8b 04 95 24 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd61dc]
c000dc45:	c3                   	ret    

c000dc46 <sinc_get_description>:
c000dc46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc4a:	31 c0                	xor    eax,eax
c000dc4c:	83 fa 02             	cmp    edx,0x2
c000dc4f:	77 07                	ja     c000dc58 <sinc_get_description+0x12>
c000dc51:	8b 04 95 18 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd61e8]
c000dc58:	c3                   	ret    

c000dc59 <sinc_set_converter>:
c000dc59:	53                   	push   ebx
c000dc5a:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc60:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc67:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc6a:	85 c0                	test   eax,eax
c000dc6c:	74 13                	je     c000dc81 <sinc_set_converter+0x28>
c000dc6e:	83 ec 0c             	sub    esp,0xc
c000dc71:	50                   	push   eax
c000dc72:	e8 32 19 00 00       	call   c000f5a9 <free>
c000dc77:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc7e:	83 c4 10             	add    esp,0x10
c000dc81:	50                   	push   eax
c000dc82:	68 44 08 00 00       	push   0x844
c000dc87:	6a 00                	push   0x0
c000dc89:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc8d:	50                   	push   eax
c000dc8e:	e8 bd 2a ff ff       	call   c0000750 <memset>
c000dc93:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	b8 0b 00 00 00       	mov    eax,0xb
c000dc9e:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dca4:	7f 6e                	jg     c000dd14 <sinc_set_converter+0xbb>
c000dca6:	83 fa 01             	cmp    edx,0x1
c000dca9:	75 10                	jne    c000dcbb <sinc_set_converter+0x62>
c000dcab:	c7 43 24 49 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d549
c000dcb2:	c7 43 20 49 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d549
c000dcb9:	eb 4d                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcbb:	83 fa 02             	cmp    edx,0x2
c000dcbe:	75 10                	jne    c000dcd0 <sinc_set_converter+0x77>
c000dcc0:	c7 43 24 84 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ce84
c000dcc7:	c7 43 20 84 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ce84
c000dcce:	eb 38                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcd0:	83 fa 04             	cmp    edx,0x4
c000dcd3:	75 10                	jne    c000dce5 <sinc_set_converter+0x8c>
c000dcd5:	c7 43 24 bf c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7bf
c000dcdc:	c7 43 20 bf c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7bf
c000dce3:	eb 23                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dce5:	83 fa 06             	cmp    edx,0x6
c000dce8:	75 10                	jne    c000dcfa <sinc_set_converter+0xa1>
c000dcea:	c7 43 24 fa c0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c0fa
c000dcf1:	c7 43 20 fa c0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c0fa
c000dcf8:	eb 0e                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcfa:	c7 43 24 36 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba36
c000dd01:	c7 43 20 36 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba36
c000dd08:	c7 43 28 e9 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ace9
c000dd0f:	b8 0a 00 00 00       	mov    eax,0xa
c000dd14:	81 c4 58 08 00 00    	add    esp,0x858
c000dd1a:	5b                   	pop    ebx
c000dd1b:	c3                   	ret    

c000dd1c <zoh_vari_process>:
c000dd1c:	55                   	push   ebp
c000dd1d:	31 d2                	xor    edx,edx
c000dd1f:	57                   	push   edi
c000dd20:	56                   	push   esi
c000dd21:	53                   	push   ebx
c000dd22:	83 ec 3c             	sub    esp,0x3c
c000dd25:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd29:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd2d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd31:	0f 8e 80 06 00 00    	jle    c000e3b7 <zoh_vari_process+0x69b>
c000dd37:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd3a:	ba 05 00 00 00       	mov    edx,0x5
c000dd3f:	85 db                	test   ebx,ebx
c000dd41:	0f 84 70 06 00 00    	je     c000e3b7 <zoh_vari_process+0x69b>
c000dd47:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd4a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd4e:	74 19                	je     c000dd69 <zoh_vari_process+0x4d>
c000dd50:	31 d2                	xor    edx,edx
c000dd52:	39 c2                	cmp    edx,eax
c000dd54:	7d 0c                	jge    c000dd62 <zoh_vari_process+0x46>
c000dd56:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd58:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd5b:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd5f:	42                   	inc    edx
c000dd60:	eb f0                	jmp    c000dd52 <zoh_vari_process+0x36>
c000dd62:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd69:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd6c:	0f af d0             	imul   edx,eax
c000dd6f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd72:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd76:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd7d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd80:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dd87:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd8a:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd94:	68 00 00 70 3f       	push   0x3f700000
c000dd99:	6a 00                	push   0x0
c000dd9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	e8 1f a6 01 00       	call   c00283c7 <__ltdf2>
c000dda8:	83 c4 10             	add    esp,0x10
c000ddab:	ba 16 00 00 00       	mov    edx,0x16
c000ddb0:	85 c0                	test   eax,eax
c000ddb2:	0f 88 ff 05 00 00    	js     c000e3b7 <zoh_vari_process+0x69b>
c000ddb8:	68 00 00 70 40       	push   0x40700000
c000ddbd:	6a 00                	push   0x0
c000ddbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc7:	e8 dd a5 01 00       	call   c00283a9 <__gtdf2>
c000ddcc:	83 c4 10             	add    esp,0x10
c000ddcf:	ba 16 00 00 00       	mov    edx,0x16
c000ddd4:	85 c0                	test   eax,eax
c000ddd6:	0f 8f db 05 00 00    	jg     c000e3b7 <zoh_vari_process+0x69b>
c000dddc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dddf:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dde2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dde6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddea:	68 00 00 f0 3f       	push   0x3ff00000
c000ddef:	6a 00                	push   0x0
c000ddf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 c9 a5 01 00       	call   c00283c7 <__ltdf2>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	85 c0                	test   eax,eax
c000de03:	0f 89 da 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000de09:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de0c:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de0f:	0f 8d ce 01 00 00    	jge    c000dfe3 <zoh_vari_process+0x2c7>
c000de15:	83 ec 0c             	sub    esp,0xc
c000de18:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de1b:	e8 3b a3 01 00       	call   c002815b <__floatsidf>
c000de20:	83 c4 10             	add    esp,0x10
c000de23:	89 04 24             	mov    DWORD PTR [esp],eax
c000de26:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de3a:	e8 b9 9c 01 00       	call   c0027af8 <__muldf3>
c000de3f:	59                   	pop    ecx
c000de40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de44:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de48:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de4b:	e8 0b a3 01 00       	call   c002815b <__floatsidf>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de5b:	52                   	push   edx
c000de5c:	50                   	push   eax
c000de5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de61:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de65:	e8 11 96 01 00       	call   c002747b <__adddf3>
c000de6a:	59                   	pop    ecx
c000de6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de6f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de73:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de76:	e8 e0 a2 01 00       	call   c002815b <__floatsidf>
c000de7b:	83 c4 10             	add    esp,0x10
c000de7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de86:	52                   	push   edx
c000de87:	50                   	push   eax
c000de88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de90:	e8 30 a5 01 00       	call   c00283c5 <__gedf2>
c000de95:	83 c4 10             	add    esp,0x10
c000de98:	85 c0                	test   eax,eax
c000de9a:	0f 89 43 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000dea0:	85 ed                	test   ebp,ebp
c000dea2:	0f 8e ec 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000dea8:	83 ec 10             	sub    esp,0x10
c000deab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000deae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deb1:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deb4:	ff 37                	push   DWORD PTR [edi]
c000deb6:	e8 11 9c 01 00       	call   c0027acc <__subdf3>
c000debb:	83 c4 18             	add    esp,0x18
c000debe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dec6:	52                   	push   edx
c000dec7:	50                   	push   eax
c000dec8:	e8 93 a6 01 00       	call   c0028560 <fabs>
c000decd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ded1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ded5:	83 c4 10             	add    esp,0x10
c000ded8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dedd:	68 23 42 92 0c       	push   0xc924223
c000dee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deea:	e8 ba a4 01 00       	call   c00283a9 <__gtdf2>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	85 c0                	test   eax,eax
c000def4:	0f 8e 9a 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000defa:	8b 07                	mov    eax,DWORD PTR [edi]
c000defc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000deff:	89 04 24             	mov    DWORD PTR [esp],eax
c000df02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df06:	52                   	push   edx
c000df07:	50                   	push   eax
c000df08:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df0b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df0e:	e8 b9 9b 01 00       	call   c0027acc <__subdf3>
c000df13:	59                   	pop    ecx
c000df14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df18:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df1c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df1f:	e8 37 a2 01 00       	call   c002815b <__floatsidf>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df2f:	52                   	push   edx
c000df30:	50                   	push   eax
c000df31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df39:	e8 ba 9b 01 00       	call   c0027af8 <__muldf3>
c000df3e:	5d                   	pop    ebp
c000df3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df47:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df4a:	e8 0c a2 01 00       	call   c002815b <__floatsidf>
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df56:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df5a:	52                   	push   edx
c000df5b:	50                   	push   eax
c000df5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df64:	e8 73 9e 01 00       	call   c0027ddc <__divdf3>
c000df69:	83 c4 10             	add    esp,0x10
c000df6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df78:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df84:	e8 f2 94 01 00       	call   c002747b <__adddf3>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df94:	31 c0                	xor    eax,eax
c000df96:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000df99:	7e 13                	jle    c000dfae <zoh_vari_process+0x292>
c000df9b:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000df9f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfa2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfa5:	40                   	inc    eax
c000dfa6:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfa9:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfac:	eb e8                	jmp    c000df96 <zoh_vari_process+0x27a>
c000dfae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb6:	68 00 00 f0 3f       	push   0x3ff00000
c000dfbb:	6a 00                	push   0x0
c000dfbd:	e8 1a 9e 01 00       	call   c0027ddc <__divdf3>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfc8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfcc:	52                   	push   edx
c000dfcd:	50                   	push   eax
c000dfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd6:	e8 a0 94 01 00       	call   c002747b <__adddf3>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	e9 ff fd ff ff       	jmp    c000dde2 <zoh_vari_process+0xc6>
c000dfe3:	55                   	push   ebp
c000dfe4:	55                   	push   ebp
c000dfe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfed:	e8 8e a5 01 00       	call   c0028580 <lrint>
c000dff2:	83 ec 0c             	sub    esp,0xc
c000dff5:	50                   	push   eax
c000dff6:	e8 60 a1 01 00       	call   c002815b <__floatsidf>
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e002:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e010:	e8 b7 9a 01 00       	call   c0027acc <__subdf3>
c000e015:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e019:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e01d:	83 c4 20             	add    esp,0x20
c000e020:	6a 00                	push   0x0
c000e022:	6a 00                	push   0x0
c000e024:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e02c:	e8 96 a3 01 00       	call   c00283c7 <__ltdf2>
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	85 c0                	test   eax,eax
c000e036:	79 1e                	jns    c000e056 <zoh_vari_process+0x33a>
c000e038:	68 00 00 f0 3f       	push   0x3ff00000
c000e03d:	6a 00                	push   0x0
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e047:	e8 2f 94 01 00       	call   c002747b <__adddf3>
c000e04c:	83 c4 10             	add    esp,0x10
c000e04f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e052:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e056:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e059:	83 ec 10             	sub    esp,0x10
c000e05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e068:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e06c:	e8 5b 9a 01 00       	call   c0027acc <__subdf3>
c000e071:	83 c4 18             	add    esp,0x18
c000e074:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e078:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e07c:	52                   	push   edx
c000e07d:	50                   	push   eax
c000e07e:	e8 fd a4 01 00       	call   c0028580 <lrint>
c000e083:	83 c4 10             	add    esp,0x10
c000e086:	0f af e8             	imul   ebp,eax
c000e089:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e08c:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e08f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e093:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e096:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e099:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e09d:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0a0:	0f 8d 7a 02 00 00    	jge    c000e320 <zoh_vari_process+0x604>
c000e0a6:	83 ec 0c             	sub    esp,0xc
c000e0a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ac:	e8 aa a0 01 00       	call   c002815b <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0cc:	e8 27 9a 01 00       	call   c0027af8 <__muldf3>
c000e0d1:	59                   	pop    ecx
c000e0d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0d6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0de:	e8 78 a0 01 00       	call   c002815b <__floatsidf>
c000e0e3:	83 c4 10             	add    esp,0x10
c000e0e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0ee:	52                   	push   edx
c000e0ef:	50                   	push   eax
c000e0f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f8:	e8 7e 93 01 00       	call   c002747b <__adddf3>
c000e0fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e100:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e104:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e108:	e8 4e a0 01 00       	call   c002815b <__floatsidf>
c000e10d:	83 c4 10             	add    esp,0x10
c000e110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e114:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e118:	52                   	push   edx
c000e119:	50                   	push   eax
c000e11a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e11e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e122:	e8 a2 a2 01 00       	call   c00283c9 <__ledf2>
c000e127:	83 c4 10             	add    esp,0x10
c000e12a:	85 c0                	test   eax,eax
c000e12c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e130:	0f 8f ea 01 00 00    	jg     c000e320 <zoh_vari_process+0x604>
c000e136:	85 c9                	test   ecx,ecx
c000e138:	0f 8e ed 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e13e:	83 ec 10             	sub    esp,0x10
c000e141:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e144:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e147:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e14a:	ff 37                	push   DWORD PTR [edi]
c000e14c:	e8 7b 99 01 00       	call   c0027acc <__subdf3>
c000e151:	83 c4 18             	add    esp,0x18
c000e154:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e158:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e15c:	52                   	push   edx
c000e15d:	50                   	push   eax
c000e15e:	e8 fd a3 01 00       	call   c0028560 <fabs>
c000e163:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e167:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e173:	68 23 42 92 0c       	push   0xc924223
c000e178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e180:	e8 24 a2 01 00       	call   c00283a9 <__gtdf2>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	85 c0                	test   eax,eax
c000e18a:	0f 8e 9b 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e190:	8b 07                	mov    eax,DWORD PTR [edi]
c000e192:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e19d:	52                   	push   edx
c000e19e:	50                   	push   eax
c000e19f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1a5:	e8 22 99 01 00       	call   c0027acc <__subdf3>
c000e1aa:	5d                   	pop    ebp
c000e1ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1af:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1b3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1b6:	e8 a0 9f 01 00       	call   c002815b <__floatsidf>
c000e1bb:	83 c4 10             	add    esp,0x10
c000e1be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1c6:	52                   	push   edx
c000e1c7:	50                   	push   eax
c000e1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1d0:	e8 23 99 01 00       	call   c0027af8 <__muldf3>
c000e1d5:	59                   	pop    ecx
c000e1d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1da:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1de:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1e1:	e8 75 9f 01 00       	call   c002815b <__floatsidf>
c000e1e6:	83 c4 10             	add    esp,0x10
c000e1e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1f1:	52                   	push   edx
c000e1f2:	50                   	push   eax
c000e1f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1fb:	e8 dc 9b 01 00       	call   c0027ddc <__divdf3>
c000e200:	83 c4 10             	add    esp,0x10
c000e203:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e207:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e20b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e20f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21b:	e8 5b 92 01 00       	call   c002747b <__adddf3>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e227:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e22b:	31 d2                	xor    edx,edx
c000e22d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e230:	39 d0                	cmp    eax,edx
c000e232:	7e 1d                	jle    c000e251 <zoh_vari_process+0x535>
c000e234:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e237:	29 c1                	sub    ecx,eax
c000e239:	89 c8                	mov    eax,ecx
c000e23b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e23d:	01 d0                	add    eax,edx
c000e23f:	42                   	inc    edx
c000e240:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e243:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e246:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e249:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e24c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e24f:	eb dc                	jmp    c000e22d <zoh_vari_process+0x511>
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e259:	68 00 00 f0 3f       	push   0x3ff00000
c000e25e:	6a 00                	push   0x0
c000e260:	e8 77 9b 01 00       	call   c0027ddc <__divdf3>
c000e265:	83 c4 10             	add    esp,0x10
c000e268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e26c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e270:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e274:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e27c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e280:	e8 f6 91 01 00       	call   c002747b <__adddf3>
c000e285:	5d                   	pop    ebp
c000e286:	59                   	pop    ecx
c000e287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e28b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e28f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e297:	e8 e4 a2 01 00       	call   c0028580 <lrint>
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	50                   	push   eax
c000e2a0:	e8 b6 9e 01 00       	call   c002815b <__floatsidf>
c000e2a5:	83 c4 10             	add    esp,0x10
c000e2a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b0:	52                   	push   edx
c000e2b1:	50                   	push   eax
c000e2b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ba:	e8 0d 98 01 00       	call   c0027acc <__subdf3>
c000e2bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2c7:	83 c4 20             	add    esp,0x20
c000e2ca:	6a 00                	push   0x0
c000e2cc:	6a 00                	push   0x0
c000e2ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d6:	e8 ec a0 01 00       	call   c00283c7 <__ltdf2>
c000e2db:	83 c4 10             	add    esp,0x10
c000e2de:	85 c0                	test   eax,eax
c000e2e0:	79 1e                	jns    c000e300 <zoh_vari_process+0x5e4>
c000e2e2:	68 00 00 f0 3f       	push   0x3ff00000
c000e2e7:	6a 00                	push   0x0
c000e2e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f1:	e8 85 91 01 00       	call   c002747b <__adddf3>
c000e2f6:	83 c4 10             	add    esp,0x10
c000e2f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e2fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e300:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e303:	83 ec 10             	sub    esp,0x10
c000e306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e312:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e316:	e8 b1 97 01 00       	call   c0027acc <__subdf3>
c000e31b:	e9 51 fd ff ff       	jmp    c000e071 <zoh_vari_process+0x355>
c000e320:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e324:	7d 3a                	jge    c000e360 <zoh_vari_process+0x644>
c000e326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32a:	83 ec 0c             	sub    esp,0xc
c000e32d:	29 e8                	sub    eax,ebp
c000e32f:	99                   	cdq    
c000e330:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e333:	50                   	push   eax
c000e334:	e8 22 9e 01 00       	call   c002815b <__floatsidf>
c000e339:	83 c4 10             	add    esp,0x10
c000e33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e344:	52                   	push   edx
c000e345:	50                   	push   eax
c000e346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34e:	e8 28 91 01 00       	call   c002747b <__adddf3>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e359:	89 04 24             	mov    DWORD PTR [esp],eax
c000e35c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e360:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e363:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e367:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e36a:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e36d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e370:	85 c0                	test   eax,eax
c000e372:	7f 25                	jg     c000e399 <zoh_vari_process+0x67d>
c000e374:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e378:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e37c:	89 07                	mov    DWORD PTR [edi],eax
c000e37e:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e381:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e384:	99                   	cdq    
c000e385:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e388:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e38b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e38e:	99                   	cdq    
c000e38f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e392:	31 d2                	xor    edx,edx
c000e394:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e397:	eb 1e                	jmp    c000e3b7 <zoh_vari_process+0x69b>
c000e399:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e39c:	31 d2                	xor    edx,edx
c000e39e:	29 c8                	sub    eax,ecx
c000e3a0:	c1 e0 02             	shl    eax,0x2
c000e3a3:	39 d1                	cmp    ecx,edx
c000e3a5:	7e cd                	jle    c000e374 <zoh_vari_process+0x658>
c000e3a7:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3a9:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ad:	83 c0 04             	add    eax,0x4
c000e3b0:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3b4:	42                   	inc    edx
c000e3b5:	eb ec                	jmp    c000e3a3 <zoh_vari_process+0x687>
c000e3b7:	83 c4 3c             	add    esp,0x3c
c000e3ba:	89 d0                	mov    eax,edx
c000e3bc:	5b                   	pop    ebx
c000e3bd:	5e                   	pop    esi
c000e3be:	5f                   	pop    edi
c000e3bf:	5d                   	pop    ebp
c000e3c0:	c3                   	ret    

c000e3c1 <zoh_reset>:
c000e3c1:	83 ec 0c             	sub    esp,0xc
c000e3c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3c8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3cb:	85 c0                	test   eax,eax
c000e3cd:	74 20                	je     c000e3ef <zoh_reset+0x2e>
c000e3cf:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3d2:	83 c0 1c             	add    eax,0x1c
c000e3d5:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3d8:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3df:	c1 e2 02             	shl    edx,0x2
c000e3e2:	51                   	push   ecx
c000e3e3:	52                   	push   edx
c000e3e4:	6a 00                	push   0x0
c000e3e6:	50                   	push   eax
c000e3e7:	e8 64 23 ff ff       	call   c0000750 <memset>
c000e3ec:	83 c4 10             	add    esp,0x10
c000e3ef:	83 c4 0c             	add    esp,0xc
c000e3f2:	c3                   	ret    

c000e3f3 <zoh_get_name>:
c000e3f3:	31 c0                	xor    eax,eax
c000e3f5:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e3fa:	75 05                	jne    c000e401 <zoh_get_name+0xe>
c000e3fc:	b8 3e 9f 02 c0       	mov    eax,0xc0029f3e
c000e401:	c3                   	ret    

c000e402 <zoh_get_description>:
c000e402:	31 c0                	xor    eax,eax
c000e404:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e409:	75 05                	jne    c000e410 <zoh_get_description+0xe>
c000e40b:	b8 4f 9f 02 c0       	mov    eax,0xc0029f4f
c000e410:	c3                   	ret    

c000e411 <zoh_set_converter>:
c000e411:	53                   	push   ebx
c000e412:	b8 0a 00 00 00       	mov    eax,0xa
c000e417:	83 ec 08             	sub    esp,0x8
c000e41a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e41e:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e423:	75 6e                	jne    c000e493 <zoh_set_converter+0x82>
c000e425:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e428:	85 c0                	test   eax,eax
c000e42a:	74 13                	je     c000e43f <zoh_set_converter+0x2e>
c000e42c:	83 ec 0c             	sub    esp,0xc
c000e42f:	50                   	push   eax
c000e430:	e8 74 11 00 00       	call   c000f5a9 <free>
c000e435:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e43c:	83 c4 10             	add    esp,0x10
c000e43f:	50                   	push   eax
c000e440:	50                   	push   eax
c000e441:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e444:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e44b:	50                   	push   eax
c000e44c:	6a 01                	push   0x1
c000e44e:	e8 76 11 00 00       	call   c000f5c9 <calloc>
c000e453:	83 c4 10             	add    esp,0x10
c000e456:	89 c2                	mov    edx,eax
c000e458:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e45b:	85 d2                	test   edx,edx
c000e45d:	b8 01 00 00 00       	mov    eax,0x1
c000e462:	74 2f                	je     c000e493 <zoh_set_converter+0x82>
c000e464:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e467:	83 ec 0c             	sub    esp,0xc
c000e46a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e46d:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e473:	c7 43 24 1c dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd1c
c000e47a:	c7 43 20 1c dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd1c
c000e481:	c7 43 28 c1 e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3c1
c000e488:	53                   	push   ebx
c000e489:	e8 33 ff ff ff       	call   c000e3c1 <zoh_reset>
c000e48e:	83 c4 10             	add    esp,0x10
c000e491:	31 c0                	xor    eax,eax
c000e493:	83 c4 08             	add    esp,0x8
c000e496:	5b                   	pop    ebx
c000e497:	c3                   	ret    

c000e498 <CPU::current()>:
c000e498:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c000e49d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4a3:	c3                   	ret    

c000e4a4 <operator new(unsigned long)>:
c000e4a4:	e9 f0 10 00 00       	jmp    c000f599 <malloc>

c000e4a9 <operator delete(void*)>:
c000e4a9:	e9 0b 11 00 00       	jmp    c000f5b9 <rfree>

c000e4ae <disableIRQs()>:
c000e4ae:	fa                   	cli    
c000e4af:	ff 05 c8 f2 02 c0    	inc    DWORD PTR ds:0xc002f2c8
c000e4b5:	c3                   	ret    

c000e4b6 <enableIRQs()>:
c000e4b6:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c000e4bb:	48                   	dec    eax
c000e4bc:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c000e4c1:	75 01                	jne    c000e4c4 <enableIRQs()+0xe>
c000e4c3:	fb                   	sti    
c000e4c4:	c3                   	ret    

c000e4c5 <lockScheduler()>:
c000e4c5:	fa                   	cli    
c000e4c6:	ff 05 c8 f2 02 c0    	inc    DWORD PTR ds:0xc002f2c8
c000e4cc:	c3                   	ret    

c000e4cd <unlockScheduler()>:
c000e4cd:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c000e4d2:	48                   	dec    eax
c000e4d3:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c000e4d8:	75 01                	jne    c000e4db <unlockScheduler()+0xe>
c000e4da:	fb                   	sti    
c000e4db:	c3                   	ret    

c000e4dc <lockStuff()>:
c000e4dc:	fa                   	cli    
c000e4dd:	ff 05 c8 f2 02 c0    	inc    DWORD PTR ds:0xc002f2c8
c000e4e3:	ff 05 c4 f2 02 c0    	inc    DWORD PTR ds:0xc002f2c4
c000e4e9:	c3                   	ret    

c000e4ea <unlockStuff()>:
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	a1 c4 f2 02 c0       	mov    eax,ds:0xc002f2c4
c000e4f2:	48                   	dec    eax
c000e4f3:	a3 c4 f2 02 c0       	mov    ds:0xc002f2c4,eax
c000e4f8:	75 18                	jne    c000e512 <unlockStuff()+0x28>
c000e4fa:	83 3d c0 f2 02 c0 00 	cmp    DWORD PTR ds:0xc002f2c0,0x0
c000e501:	74 0f                	je     c000e512 <unlockStuff()+0x28>
c000e503:	c7 05 c0 f2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f2c0,0x0
c000e50d:	e8 09 f6 00 00       	call   c001db1b <schedule()>
c000e512:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c000e517:	48                   	dec    eax
c000e518:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c000e51d:	75 01                	jne    c000e520 <unlockStuff()+0x36>
c000e51f:	fb                   	sti    
c000e520:	83 c4 0c             	add    esp,0xc
c000e523:	c3                   	ret    

c000e524 <Virt::getAKernelVAS()>:
c000e524:	a1 30 df 02 c0       	mov    eax,ds:0xc002df30
c000e529:	c3                   	ret    

c000e52a <__not_memcpy>:
c000e52a:	57                   	push   edi
c000e52b:	56                   	push   esi
c000e52c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e530:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e534:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e538:	89 c7                	mov    edi,eax
c000e53a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e53c:	5e                   	pop    esi
c000e53d:	5f                   	pop    edi
c000e53e:	c3                   	ret    

c000e53f <Krnl::resolveCompatibilitySymbol(char*)>:
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	83 ec 08             	sub    esp,0x8
c000e545:	68 86 9f 02 c0       	push   0xc0029f86
c000e54a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e54e:	e8 45 23 ff ff       	call   c0000898 <strcmp>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	85 c0                	test   eax,eax
c000e558:	0f 94 c0             	sete   al
c000e55b:	84 c0                	test   al,al
c000e55d:	74 0a                	je     c000e569 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e55f:	b8 c8 dd 02 c0       	mov    eax,0xc002ddc8
c000e564:	e9 e3 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e569:	83 ec 08             	sub    esp,0x8
c000e56c:	68 8f 9f 02 c0       	push   0xc0029f8f
c000e571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e575:	e8 1e 23 ff ff       	call   c0000898 <strcmp>
c000e57a:	83 c4 10             	add    esp,0x10
c000e57d:	85 c0                	test   eax,eax
c000e57f:	0f 94 c0             	sete   al
c000e582:	84 c0                	test   al,al
c000e584:	74 0a                	je     c000e590 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e586:	b8 f4 68 02 c0       	mov    eax,0xc00268f4
c000e58b:	e9 bc 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e590:	83 ec 08             	sub    esp,0x8
c000e593:	68 99 9f 02 c0       	push   0xc0029f99
c000e598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59c:	e8 f7 22 ff ff       	call   c0000898 <strcmp>
c000e5a1:	83 c4 10             	add    esp,0x10
c000e5a4:	85 c0                	test   eax,eax
c000e5a6:	0f 94 c0             	sete   al
c000e5a9:	84 c0                	test   al,al
c000e5ab:	74 0a                	je     c000e5b7 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5ad:	b8 28 66 02 c0       	mov    eax,0xc0026628
c000e5b2:	e9 95 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b7:	83 ec 08             	sub    esp,0x8
c000e5ba:	68 a2 9f 02 c0       	push   0xc0029fa2
c000e5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c3:	e8 d0 22 ff ff       	call   c0000898 <strcmp>
c000e5c8:	83 c4 10             	add    esp,0x10
c000e5cb:	85 c0                	test   eax,eax
c000e5cd:	0f 94 c0             	sete   al
c000e5d0:	84 c0                	test   al,al
c000e5d2:	74 07                	je     c000e5db <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5d4:	b8 f4 69 02 c0       	mov    eax,0xc00269f4
c000e5d9:	eb 71                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5db:	83 ec 08             	sub    esp,0x8
c000e5de:	68 ac 9f 02 c0       	push   0xc0029fac
c000e5e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e7:	e8 ac 22 ff ff       	call   c0000898 <strcmp>
c000e5ec:	83 c4 10             	add    esp,0x10
c000e5ef:	85 c0                	test   eax,eax
c000e5f1:	0f 94 c0             	sete   al
c000e5f4:	84 c0                	test   al,al
c000e5f6:	74 07                	je     c000e5ff <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5f8:	b8 74 67 02 c0       	mov    eax,0xc0026774
c000e5fd:	eb 4d                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5ff:	83 ec 08             	sub    esp,0x8
c000e602:	68 b5 9f 02 c0       	push   0xc0029fb5
c000e607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e60b:	e8 88 22 ff ff       	call   c0000898 <strcmp>
c000e610:	83 c4 10             	add    esp,0x10
c000e613:	85 c0                	test   eax,eax
c000e615:	0f 94 c0             	sete   al
c000e618:	84 c0                	test   al,al
c000e61a:	74 07                	je     c000e623 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e61c:	b8 cc dd 02 c0       	mov    eax,0xc002ddcc
c000e621:	eb 29                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e623:	83 ec 08             	sub    esp,0x8
c000e626:	68 c2 9f 02 c0       	push   0xc0029fc2
c000e62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e62f:	e8 64 22 ff ff       	call   c0000898 <strcmp>
c000e634:	83 c4 10             	add    esp,0x10
c000e637:	85 c0                	test   eax,eax
c000e639:	0f 94 c0             	sete   al
c000e63c:	84 c0                	test   al,al
c000e63e:	74 07                	je     c000e647 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e640:	b8 cd dd 02 c0       	mov    eax,0xc002ddcd
c000e645:	eb 05                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e647:	b8 00 00 00 00       	mov    eax,0x0
c000e64c:	83 c4 0c             	add    esp,0xc
c000e64f:	c3                   	ret    

c000e650 <Computer::close(int, int, void*)>:
c000e650:	57                   	push   edi
c000e651:	56                   	push   esi
c000e652:	53                   	push   ebx
c000e653:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e657:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e65b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e65f:	83 ec 0c             	sub    esp,0xc
c000e662:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e668:	e8 f3 56 00 00       	call   c0013d60 <Device::closeAll()>
c000e66d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e673:	83 c4 10             	add    esp,0x10
c000e676:	8b 10                	mov    edx,DWORD PTR [eax]
c000e678:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e67c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e684:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e688:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e68c:	5b                   	pop    ebx
c000e68d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e690:	5e                   	pop    esi
c000e691:	5f                   	pop    edi
c000e692:	ff e0                	jmp    eax

c000e694 <Krnl::firstTask()>:
c000e694:	53                   	push   ebx
c000e695:	83 ec 14             	sub    esp,0x14
c000e698:	fb                   	sti    
c000e699:	68 cf 9f 02 c0       	push   0xc0029fcf
c000e69e:	e8 50 0f 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e6a3:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c000e6aa:	e8 ea 0e 00 00       	call   c000f599 <malloc>
c000e6af:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6b6:	89 c3                	mov    ebx,eax
c000e6b8:	ff 35 f0 f2 02 c0    	push   DWORD PTR ds:0xc002f2f0
c000e6be:	68 e8 9f 02 c0       	push   0xc0029fe8
c000e6c3:	6a 01                	push   0x1
c000e6c5:	50                   	push   eax
c000e6c6:	e8 33 f0 00 00       	call   c001d6fe <Process::Process(bool, char const*, Process*, char**)>
c000e6cb:	83 c4 20             	add    esp,0x20
c000e6ce:	68 ff 00 00 00       	push   0xff
c000e6d3:	6a 00                	push   0x0
c000e6d5:	68 2f ef 00 c0       	push   0xc000ef2f
c000e6da:	53                   	push   ebx
c000e6db:	e8 16 f2 00 00       	call   c001d8f6 <Process::createThread(void (*)(void*), void*, int)>
c000e6e0:	6a 7a                	push   0x7a
c000e6e2:	6a 00                	push   0x0
c000e6e4:	68 e9 e2 01 c0       	push   0xc001e2e9
c000e6e9:	ff 35 f0 f2 02 c0    	push   DWORD PTR ds:0xc002f2f0
c000e6ef:	e8 02 f2 00 00       	call   c001d8f6 <Process::createThread(void (*)(void*), void*, int)>
c000e6f4:	83 c4 14             	add    esp,0x14
c000e6f7:	a3 a8 f2 02 c0       	mov    ds:0xc002f2a8,eax
c000e6fc:	68 cc a0 02 c0       	push   0xc002a0cc
c000e701:	c6 05 cd dd 02 c0 01 	mov    BYTE PTR ds:0xc002ddcd,0x1
c000e708:	e8 e6 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e70d:	e8 83 ff 00 00       	call   c001e695 <Vm::initialise8086()>
c000e712:	e8 11 44 00 00       	call   c0012b28 <Fs::initVFS()>
c000e717:	c7 04 24 f5 9f 02 c0 	mov    DWORD PTR [esp],0xc0029ff5
c000e71e:	e8 d0 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e723:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c000e728:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e72e:	8b 10                	mov    edx,DWORD PTR [eax]
c000e730:	6a 00                	push   0x0
c000e732:	6a 00                	push   0x0
c000e734:	6a 00                	push   0x0
c000e736:	50                   	push   eax
c000e737:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e73a:	83 c4 14             	add    esp,0x14
c000e73d:	68 cc a0 02 c0       	push   0xc002a0cc
c000e742:	e8 ac 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e747:	e8 3a d8 00 00       	call   c001bf86 <Sys::loadSyscalls()>
c000e74c:	e8 2f b7 00 00       	call   c0019e80 <Krnl::loadSystemEnv()>
c000e751:	83 c4 0c             	add    esp,0xc
c000e754:	6a 3a                	push   0x3a
c000e756:	68 0f a0 02 c0       	push   0xc002a00f
c000e75b:	68 18 a0 02 c0       	push   0xc002a018
c000e760:	e8 e0 c5 00 00       	call   c001ad45 <Reg::readIntWithDefault(char*, char*, int)>
c000e765:	89 04 24             	mov    DWORD PTR [esp],eax
c000e768:	e8 ab 4e 00 00       	call   c0013618 <User::loadClockSettings(int)>
c000e76d:	c7 04 24 f0 a0 02 c0 	mov    DWORD PTR [esp],0xc002a0f0
c000e774:	e8 7a 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e779:	58                   	pop    eax
c000e77a:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c000e77f:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e785:	e8 96 55 00 00       	call   c0013d20 <Device::loadDriversForAll()>
c000e78a:	c7 04 24 20 a0 02 c0 	mov    DWORD PTR [esp],0xc002a020
c000e791:	e8 5d 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e796:	e8 4d b2 00 00       	call   c00199e8 <Krnl::startCPUs()>
c000e79b:	c7 04 24 3a a0 02 c0 	mov    DWORD PTR [esp],0xc002a03a
c000e7a2:	e8 4c 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e7a7:	5a                   	pop    edx
c000e7a8:	8b 1d c8 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002ddc8
c000e7ae:	59                   	pop    ecx
c000e7af:	6a 01                	push   0x1
c000e7b1:	68 4b a0 02 c0       	push   0xc002a04b
c000e7b6:	e8 9b e9 00 00       	call   c001d156 <Thr::loadDLL(char const*, bool)>
c000e7bb:	5a                   	pop    edx
c000e7bc:	59                   	pop    ecx
c000e7bd:	53                   	push   ebx
c000e7be:	50                   	push   eax
c000e7bf:	e8 c3 eb 00 00       	call   c001d387 <Thr::executeDLL(unsigned long, void*)>
c000e7c4:	83 c4 10             	add    esp,0x10
c000e7c7:	83 ec 0c             	sub    esp,0xc
c000e7ca:	6a 02                	push   0x2
c000e7cc:	e8 20 f5 00 00       	call   c001dcf1 <blockTask(TaskState)>
c000e7d1:	83 c4 10             	add    esp,0x10
c000e7d4:	eb f1                	jmp    c000e7c7 <Krnl::firstTask()+0x133>

c000e7d6 <Computer::Computer()>:
c000e7d6:	83 ec 0c             	sub    esp,0xc
c000e7d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7dd:	83 ec 08             	sub    esp,0x8
c000e7e0:	68 67 a0 02 c0       	push   0xc002a067
c000e7e5:	50                   	push   eax
c000e7e6:	e8 ef 55 00 00       	call   c0013dda <Device::Device(char const*)>
c000e7eb:	83 c4 10             	add    esp,0x10
c000e7ee:	ba 3c a1 02 c0       	mov    edx,0xc002a13c
c000e7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f7:	89 10                	mov    DWORD PTR [eax],edx
c000e7f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fd:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e819:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e81f:	83 ca 04             	or     edx,0x4
c000e822:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e832:	0f b6 d0             	movzx  edx,al
c000e835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e839:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e844:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84a:	0f b6 d0             	movzx  edx,al
c000e84d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e851:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e860:	8d 50 01             	lea    edx,[eax+0x1]
c000e863:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e867:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e86d:	0f b6 d0             	movzx  edx,al
c000e870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e874:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e878:	83 e1 3f             	and    ecx,0x3f
c000e87b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e87f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e883:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e889:	0f b6 d0             	movzx  edx,al
c000e88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e890:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e89b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8a1:	0f b6 d0             	movzx  edx,al
c000e8a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a8:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8b7:	8d 50 01             	lea    edx,[eax+0x1]
c000e8ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8be:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8c4:	0f b6 d0             	movzx  edx,al
c000e8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8cb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8cf:	83 e1 3f             	and    ecx,0x3f
c000e8d2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8e0:	0f b6 d0             	movzx  edx,al
c000e8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e7:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e8ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8f8:	0f b6 d0             	movzx  edx,al
c000e8fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ff:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e908:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e90e:	8d 50 01             	lea    edx,[eax+0x1]
c000e911:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e915:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e91b:	0f b6 d0             	movzx  edx,al
c000e91e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e922:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e926:	83 e1 3f             	and    ecx,0x3f
c000e929:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e92d:	90                   	nop
c000e92e:	83 c4 0c             	add    esp,0xc
c000e931:	c3                   	ret    

c000e932 <Computer::setBootMessage(char const*)>:
c000e932:	c3                   	ret    
c000e933:	90                   	nop

c000e934 <Computer::detectFeatures()>:
c000e934:	55                   	push   ebp
c000e935:	57                   	push   edi
c000e936:	56                   	push   esi
c000e937:	53                   	push   ebx
c000e938:	83 ec 1c             	sub    esp,0x1c
c000e93b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e93f:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e949:	e8 96 19 ff ff       	call   c00002e4 <detectCPUID>
c000e94e:	85 c0                	test   eax,eax
c000e950:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e956:	0f 95 c2             	setne  dl
c000e959:	83 e0 fd             	and    eax,0xfffffffd
c000e95c:	d1 e2                	shl    edx,1
c000e95e:	09 d0                	or     eax,edx
c000e960:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e966:	a8 02                	test   al,0x2
c000e968:	75 46                	jne    c000e9b0 <Computer::detectFeatures()+0x7c>
c000e96a:	f6 05 e1 dd 02 c0 04 	test   BYTE PTR ds:0xc002dde1,0x4
c000e971:	74 07                	je     c000e97a <Computer::detectFeatures()+0x46>
c000e973:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e97a:	e8 37 7c 01 00       	call   c00265b6 <x87Detect>
c000e97f:	83 e0 01             	and    eax,0x1
c000e982:	c1 e0 04             	shl    eax,0x4
c000e985:	88 c2                	mov    dl,al
c000e987:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e98d:	83 e0 ef             	and    eax,0xffffffef
c000e990:	09 d0                	or     eax,edx
c000e992:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e998:	a8 10                	test   al,0x10
c000e99a:	0f 85 2a 01 00 00    	jne    c000eaca <Computer::detectFeatures()+0x196>
c000e9a0:	84 c0                	test   al,al
c000e9a2:	0f 88 45 01 00 00    	js     c000eaed <Computer::detectFeatures()+0x1b9>
c000e9a8:	83 c4 1c             	add    esp,0x1c
c000e9ab:	5b                   	pop    ebx
c000e9ac:	5e                   	pop    esi
c000e9ad:	5f                   	pop    edi
c000e9ae:	5d                   	pop    ebp
c000e9af:	c3                   	ret    
c000e9b0:	83 ec 0c             	sub    esp,0xc
c000e9b3:	6a 20                	push   0x20
c000e9b5:	e8 c0 9f 00 00       	call   c001897a <CPU::cpuidCheckEDX(unsigned int)>
c000e9ba:	83 e0 01             	and    eax,0x1
c000e9bd:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e9c4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9ca:	83 e0 f7             	and    eax,0xfffffff7
c000e9cd:	09 d0                	or     eax,edx
c000e9cf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d5:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e9dc:	e8 99 9f 00 00       	call   c001897a <CPU::cpuidCheckEDX(unsigned int)>
c000e9e1:	83 e0 01             	and    eax,0x1
c000e9e4:	88 c2                	mov    dl,al
c000e9e6:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9ec:	83 e0 fe             	and    eax,0xfffffffe
c000e9ef:	09 d0                	or     eax,edx
c000e9f1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9f7:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9fe:	e8 77 9f 00 00       	call   c001897a <CPU::cpuidCheckEDX(unsigned int)>
c000ea03:	c1 e0 07             	shl    eax,0x7
c000ea06:	88 c2                	mov    dl,al
c000ea08:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea0e:	83 e0 7f             	and    eax,0x7f
c000ea11:	09 d0                	or     eax,edx
c000ea13:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea19:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000ea20:	e8 55 9f 00 00       	call   c001897a <CPU::cpuidCheckEDX(unsigned int)>
c000ea25:	83 c4 10             	add    esp,0x10
c000ea28:	83 e0 01             	and    eax,0x1
c000ea2b:	c1 e0 05             	shl    eax,0x5
c000ea2e:	88 c2                	mov    dl,al
c000ea30:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea36:	83 e0 df             	and    eax,0xffffffdf
c000ea39:	09 d0                	or     eax,edx
c000ea3b:	f7 05 e0 dd 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002dde0,0x401
c000ea45:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea4b:	0f 84 c2 00 00 00    	je     c000eb13 <Computer::detectFeatures()+0x1df>
c000ea51:	83 e0 fe             	and    eax,0xfffffffe
c000ea54:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea5a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea60:	88 c2                	mov    dl,al
c000ea62:	83 e2 09             	and    edx,0x9
c000ea65:	fe ca                	dec    dl
c000ea67:	75 09                	jne    c000ea72 <Computer::detectFeatures()+0x13e>
c000ea69:	83 e0 fe             	and    eax,0xfffffffe
c000ea6c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea72:	83 ec 0c             	sub    esp,0xc
c000ea75:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea79:	50                   	push   eax
c000ea7a:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea7e:	55                   	push   ebp
c000ea7f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea83:	57                   	push   edi
c000ea84:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea88:	56                   	push   esi
c000ea89:	68 00 00 00 80       	push   0x80000000
c000ea8e:	e8 63 9e 00 00       	call   c00188f6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea93:	83 c4 20             	add    esp,0x20
c000ea96:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea9d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eaa1:	0f 86 c3 fe ff ff    	jbe    c000e96a <Computer::detectFeatures()+0x36>
c000eaa7:	83 ec 0c             	sub    esp,0xc
c000eaaa:	50                   	push   eax
c000eaab:	55                   	push   ebp
c000eaac:	57                   	push   edi
c000eaad:	56                   	push   esi
c000eaae:	68 01 00 00 80       	push   0x80000001
c000eab3:	e8 3e 9e 00 00       	call   c00188f6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eab8:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000eac2:	83 c4 20             	add    esp,0x20
c000eac5:	e9 a0 fe ff ff       	jmp    c000e96a <Computer::detectFeatures()+0x36>
c000eaca:	e8 a1 7a 01 00       	call   c0026570 <absolutelyNoChanceInHell>
c000eacf:	88 c2                	mov    dl,al
c000ead1:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ead7:	c1 e2 07             	shl    edx,0x7
c000eada:	83 e0 7f             	and    eax,0x7f
c000eadd:	09 d0                	or     eax,edx
c000eadf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eae5:	84 c0                	test   al,al
c000eae7:	0f 89 bb fe ff ff    	jns    c000e9a8 <Computer::detectFeatures()+0x74>
c000eaed:	e8 5e 7a 01 00       	call   c0026550 <avxDetect>
c000eaf2:	83 e0 01             	and    eax,0x1
c000eaf5:	c1 e0 05             	shl    eax,0x5
c000eaf8:	88 c2                	mov    dl,al
c000eafa:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eb00:	83 e0 df             	and    eax,0xffffffdf
c000eb03:	09 d0                	or     eax,edx
c000eb05:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eb0b:	83 c4 1c             	add    esp,0x1c
c000eb0e:	5b                   	pop    ebx
c000eb0f:	5e                   	pop    esi
c000eb10:	5f                   	pop    edi
c000eb11:	5d                   	pop    ebp
c000eb12:	c3                   	ret    
c000eb13:	83 ec 0c             	sub    esp,0xc
c000eb16:	68 00 02 00 00       	push   0x200
c000eb1b:	e8 5a 9e 00 00       	call   c001897a <CPU::cpuidCheckEDX(unsigned int)>
c000eb20:	83 c4 10             	add    esp,0x10
c000eb23:	83 e0 01             	and    eax,0x1
c000eb26:	88 c2                	mov    dl,al
c000eb28:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb2e:	83 e0 fe             	and    eax,0xfffffffe
c000eb31:	09 d0                	or     eax,edx
c000eb33:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb39:	e9 1c ff ff ff       	jmp    c000ea5a <Computer::detectFeatures()+0x126>

c000eb3e <Computer::displayFeatures()>:
c000eb3e:	c3                   	ret    
c000eb3f:	90                   	nop

c000eb40 <Computer::rdmsr(unsigned int)>:
c000eb40:	83 ec 0c             	sub    esp,0xc
c000eb43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb47:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb4e:	74 0a                	je     c000eb5a <Computer::rdmsr(unsigned int)+0x1a>
c000eb50:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb54:	0f 32                	rdmsr  
c000eb56:	83 c4 0c             	add    esp,0xc
c000eb59:	c3                   	ret    
c000eb5a:	83 ec 0c             	sub    esp,0xc
c000eb5d:	68 70 a0 02 c0       	push   0xc002a070
c000eb62:	e8 22 b4 00 00       	call   c0019f89 <Krnl::panic(char const*)>
c000eb67:	83 c4 10             	add    esp,0x10
c000eb6a:	eb e4                	jmp    c000eb50 <Computer::rdmsr(unsigned int)+0x10>

c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eb6c:	57                   	push   edi
c000eb6d:	56                   	push   esi
c000eb6e:	52                   	push   edx
c000eb6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb73:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eb77:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eb7b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb82:	74 0e                	je     c000eb92 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eb84:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb88:	89 f0                	mov    eax,esi
c000eb8a:	89 fa                	mov    edx,edi
c000eb8c:	0f 30                	wrmsr  
c000eb8e:	58                   	pop    eax
c000eb8f:	5e                   	pop    esi
c000eb90:	5f                   	pop    edi
c000eb91:	c3                   	ret    
c000eb92:	83 ec 0c             	sub    esp,0xc
c000eb95:	68 76 a0 02 c0       	push   0xc002a076
c000eb9a:	e8 ea b3 00 00       	call   c0019f89 <Krnl::panic(char const*)>
c000eb9f:	83 c4 10             	add    esp,0x10
c000eba2:	eb e0                	jmp    c000eb84 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eba4 <Computer::nmiEnabled()>:
c000eba4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eba8:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ebae:	c3                   	ret    
c000ebaf:	90                   	nop

c000ebb0 <Computer::readCMOS(unsigned char)>:
c000ebb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebb4:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ebbb:	19 c0                	sbb    eax,eax
c000ebbd:	83 e0 80             	and    eax,0xffffff80
c000ebc0:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ebc4:	e6 70                	out    0x70,al
c000ebc6:	e4 71                	in     al,0x71
c000ebc8:	c3                   	ret    
c000ebc9:	90                   	nop

c000ebca <Computer::enableNMI(bool)>:
c000ebca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ebce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebd2:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ebd8:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ebe0:	eb ce                	jmp    c000ebb0 <Computer::readCMOS(unsigned char)>

c000ebe2 <Computer::open(int, int, void*)>:
c000ebe2:	56                   	push   esi
c000ebe3:	53                   	push   ebx
c000ebe4:	83 ec 10             	sub    esp,0x10
c000ebe7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ebeb:	68 10 a1 02 c0       	push   0xc002a110
c000ebf0:	e8 fe 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ebf5:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000ebfc:	f6 05 e0 dd 02 c0 04 	test   BYTE PTR ds:0xc002dde0,0x4
c000ec03:	0f 94 05 00 cd 02 c0 	sete   BYTE PTR ds:0xc002cd00
c000ec0a:	e8 8a 09 00 00       	call   c000f599 <malloc>
c000ec0f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec12:	89 c6                	mov    esi,eax
c000ec14:	e8 d5 8f 00 00       	call   c0017bee <ACPI::ACPI()>
c000ec19:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ec1f:	58                   	pop    eax
c000ec20:	5a                   	pop    edx
c000ec21:	56                   	push   esi
c000ec22:	53                   	push   ebx
c000ec23:	e8 ae 4f 00 00       	call   c0013bd6 <Device::addChild(Device*)>
c000ec28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ec2b:	e8 04 fd ff ff       	call   c000e934 <Computer::detectFeatures()>
c000ec30:	59                   	pop    ecx
c000ec31:	5e                   	pop    esi
c000ec32:	6a 01                	push   0x1
c000ec34:	53                   	push   ebx
c000ec35:	e8 90 ff ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ec3a:	c7 04 24 20 a0 02 c0 	mov    DWORD PTR [esp],0xc002a020
c000ec41:	e8 ad 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ec46:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ec4d:	e8 47 09 00 00       	call   c000f599 <malloc>
c000ec52:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec55:	89 c6                	mov    esi,eax
c000ec57:	e8 d6 9d 00 00       	call   c0018a32 <CPU::CPU()>
c000ec5c:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ec62:	58                   	pop    eax
c000ec63:	5a                   	pop    edx
c000ec64:	56                   	push   esi
c000ec65:	53                   	push   ebx
c000ec66:	e8 6b 4f 00 00       	call   c0013bd6 <Device::addChild(Device*)>
c000ec6b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ec71:	8b 10                	mov    edx,DWORD PTR [eax]
c000ec73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ec77:	6a 00                	push   0x0
c000ec79:	6a 00                	push   0x0
c000ec7b:	50                   	push   eax
c000ec7c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ec7f:	83 c4 20             	add    esp,0x20
c000ec82:	e8 e7 54 00 00       	call   c001416e <setupFPU()>
c000ec87:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ec8d:	85 c0                	test   eax,eax
c000ec8f:	74 1f                	je     c000ecb0 <Computer::open(int, int, void*)+0xce>
c000ec91:	83 ec 08             	sub    esp,0x8
c000ec94:	50                   	push   eax
c000ec95:	53                   	push   ebx
c000ec96:	e8 3b 4f 00 00       	call   c0013bd6 <Device::addChild(Device*)>
c000ec9b:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000eca1:	8b 10                	mov    edx,DWORD PTR [eax]
c000eca3:	6a 00                	push   0x0
c000eca5:	6a 00                	push   0x0
c000eca7:	6a 00                	push   0x0
c000eca9:	50                   	push   eax
c000ecaa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ecad:	83 c4 20             	add    esp,0x20
c000ecb0:	83 ec 0c             	sub    esp,0xc
c000ecb3:	68 7c a0 02 c0       	push   0xc002a07c
c000ecb8:	e8 36 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ecbd:	c7 04 24 94 e6 00 c0 	mov    DWORD PTR [esp],0xc000e694
c000ecc4:	e8 4f ed 00 00       	call   c001da18 <setupMultitasking(void (*)())>
c000ecc9:	83 c4 14             	add    esp,0x14
c000eccc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ecd1:	5b                   	pop    ebx
c000ecd2:	5e                   	pop    esi
c000ecd3:	c3                   	ret    

c000ecd4 <Computer::disableNMI()>:
c000ecd4:	6a 00                	push   0x0
c000ecd6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ecda:	e8 eb fe ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ecdf:	58                   	pop    eax
c000ece0:	5a                   	pop    edx
c000ece1:	c3                   	ret    

c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ece2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ece6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eced:	19 c0                	sbb    eax,eax
c000ecef:	83 e0 80             	and    eax,0xffffff80
c000ecf2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ecf6:	e6 70                	out    0x70,al
c000ecf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecfc:	e6 71                	out    0x71,al
c000ecfe:	c3                   	ret    
c000ecff:	90                   	nop

c000ed00 <Computer::handleNMI()>:
c000ed00:	56                   	push   esi
c000ed01:	53                   	push   ebx
c000ed02:	83 ec 10             	sub    esp,0x10
c000ed05:	e4 92                	in     al,0x92
c000ed07:	89 c6                	mov    esi,eax
c000ed09:	e4 61                	in     al,0x61
c000ed0b:	68 97 a0 02 c0       	push   0xc002a097
c000ed10:	88 c3                	mov    bl,al
c000ed12:	e8 86 3a 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c000ed17:	83 c4 10             	add    esp,0x10
c000ed1a:	83 e6 10             	and    esi,0x10
c000ed1d:	75 0d                	jne    c000ed2c <Computer::handleNMI()+0x2c>
c000ed1f:	f6 c3 40             	test   bl,0x40
c000ed22:	75 1d                	jne    c000ed41 <Computer::handleNMI()+0x41>
c000ed24:	84 db                	test   bl,bl
c000ed26:	78 2d                	js     c000ed55 <Computer::handleNMI()+0x55>
c000ed28:	58                   	pop    eax
c000ed29:	5b                   	pop    ebx
c000ed2a:	5e                   	pop    esi
c000ed2b:	c3                   	ret    
c000ed2c:	83 ec 0c             	sub    esp,0xc
c000ed2f:	68 a8 a0 02 c0       	push   0xc002a0a8
c000ed34:	e8 50 b2 00 00       	call   c0019f89 <Krnl::panic(char const*)>
c000ed39:	83 c4 10             	add    esp,0x10
c000ed3c:	f6 c3 40             	test   bl,0x40
c000ed3f:	74 e3                	je     c000ed24 <Computer::handleNMI()+0x24>
c000ed41:	83 ec 0c             	sub    esp,0xc
c000ed44:	68 b5 a0 02 c0       	push   0xc002a0b5
c000ed49:	e8 3b b2 00 00       	call   c0019f89 <Krnl::panic(char const*)>
c000ed4e:	83 c4 10             	add    esp,0x10
c000ed51:	84 db                	test   bl,bl
c000ed53:	79 d3                	jns    c000ed28 <Computer::handleNMI()+0x28>
c000ed55:	c7 44 24 10 bf a0 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a0bf
c000ed5d:	5a                   	pop    edx
c000ed5e:	5b                   	pop    ebx
c000ed5f:	5e                   	pop    esi
c000ed60:	e9 24 b2 00 00       	jmp    c0019f89 <Krnl::panic(char const*)>
c000ed65:	90                   	nop

c000ed66 <Computer::setDiskActivityLight(int, bool)>:
c000ed66:	56                   	push   esi
c000ed67:	53                   	push   ebx
c000ed68:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ed6c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ed71:	77 1b                	ja     c000ed8e <Computer::setDiskActivityLight(int, bool)+0x28>
c000ed73:	e4 92                	in     al,0x92
c000ed75:	bb 40 00 00 00       	mov    ebx,0x40
c000ed7a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ed7e:	89 da                	mov    edx,ebx
c000ed80:	d3 e2                	shl    edx,cl
c000ed82:	89 f1                	mov    ecx,esi
c000ed84:	f7 d2                	not    edx
c000ed86:	d3 e3                	shl    ebx,cl
c000ed88:	21 d0                	and    eax,edx
c000ed8a:	09 d8                	or     eax,ebx
c000ed8c:	e6 92                	out    0x92,al
c000ed8e:	5b                   	pop    ebx
c000ed8f:	5e                   	pop    esi
c000ed90:	c3                   	ret    
c000ed91:	90                   	nop

c000ed92 <GDTEntry::setBase(unsigned int)>:
c000ed92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed96:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ed9a:	89 c1                	mov    ecx,eax
c000ed9c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000eda0:	c1 e9 10             	shr    ecx,0x10
c000eda3:	c1 e8 18             	shr    eax,0x18
c000eda6:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000eda9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000edac:	c3                   	ret    
c000edad:	90                   	nop

c000edae <GDTEntry::setLimit(unsigned int)>:
c000edae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000edb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000edb6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000edb9:	66 89 01             	mov    WORD PTR [ecx],ax
c000edbc:	83 e2 f0             	and    edx,0xfffffff0
c000edbf:	c1 e8 10             	shr    eax,0x10
c000edc2:	83 e0 0f             	and    eax,0xf
c000edc5:	09 d0                	or     eax,edx
c000edc7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000edca:	c3                   	ret    
c000edcb:	90                   	nop

c000edcc <GDT::GDT()>:
c000edcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edd0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000edd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edda:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ede0:	90                   	nop
c000ede1:	c3                   	ret    

c000ede2 <GDT::addEntry(GDTEntry)>:
c000ede2:	53                   	push   ebx
c000ede3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ede7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000edeb:	8b 02                	mov    eax,DWORD PTR [edx]
c000eded:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000edf1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000edf5:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000edf9:	8d 48 01             	lea    ecx,[eax+0x1]
c000edfc:	c1 e0 03             	shl    eax,0x3
c000edff:	89 0a                	mov    DWORD PTR [edx],ecx
c000ee01:	5b                   	pop    ebx
c000ee02:	c3                   	ret    
c000ee03:	90                   	nop

c000ee04 <GDT::getNumberOfEntries()>:
c000ee04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee08:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee0a:	c3                   	ret    
c000ee0b:	90                   	nop

c000ee0c <GDT::flush()>:
c000ee0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee10:	8b 10                	mov    edx,DWORD PTR [eax]
c000ee12:	83 c0 04             	add    eax,0x4
c000ee15:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ee1c:	a3 d2 dd 02 c0       	mov    ds:0xc002ddd2,eax
c000ee21:	66 89 15 d0 dd 02 c0 	mov    WORD PTR ds:0xc002ddd0,dx
c000ee28:	e9 23 16 ff ff       	jmp    c0000450 <loadGDT>
c000ee2d:	90                   	nop

c000ee2e <GDT::setup()>:
c000ee2e:	55                   	push   ebp
c000ee2f:	57                   	push   edi
c000ee30:	56                   	push   esi
c000ee31:	53                   	push   ebx
c000ee32:	83 ec 3c             	sub    esp,0x3c
c000ee35:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ee39:	6a 00                	push   0x0
c000ee3b:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ee3f:	53                   	push   ebx
c000ee40:	e8 4d ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee45:	6a 00                	push   0x0
c000ee47:	53                   	push   ebx
c000ee48:	e8 61 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee4d:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ee55:	6a 00                	push   0x0
c000ee57:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ee5b:	53                   	push   ebx
c000ee5c:	e8 31 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee61:	68 ff ff ff 00       	push   0xffffff
c000ee66:	53                   	push   ebx
c000ee67:	e8 42 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee6c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ee70:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ee75:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ee7a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ee7e:	83 c4 20             	add    esp,0x20
c000ee81:	6a 00                	push   0x0
c000ee83:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000ee87:	53                   	push   ebx
c000ee88:	e8 05 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee8d:	68 ff ff ff 00       	push   0xffffff
c000ee92:	53                   	push   ebx
c000ee93:	e8 16 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee98:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ee9c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eea0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000eea4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000eea8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eeac:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000eeb1:	0d 00 92 c0 00       	or     eax,0xc09200
c000eeb6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000eeba:	89 d8                	mov    eax,ebx
c000eebc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000eec0:	80 cc 60             	or     ah,0x60
c000eec3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eec7:	83 c4 0c             	add    esp,0xc
c000eeca:	89 f8                	mov    eax,edi
c000eecc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed0:	80 cc 60             	or     ah,0x60
c000eed3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed7:	89 c7                	mov    edi,eax
c000eed9:	55                   	push   ebp
c000eeda:	e8 03 ff ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eedf:	83 c4 0c             	add    esp,0xc
c000eee2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eee6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eeea:	55                   	push   ebp
c000eeeb:	e8 f2 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eef0:	83 c4 0c             	add    esp,0xc
c000eef3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eef7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eefb:	55                   	push   ebp
c000eefc:	e8 e1 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef01:	83 c4 0c             	add    esp,0xc
c000ef04:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef08:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef0c:	53                   	push   ebx
c000ef0d:	51                   	push   ecx
c000ef0e:	55                   	push   ebp
c000ef0f:	e8 ce fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef14:	83 c4 0c             	add    esp,0xc
c000ef17:	57                   	push   edi
c000ef18:	56                   	push   esi
c000ef19:	55                   	push   ebp
c000ef1a:	e8 c3 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef1f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ef22:	e8 e5 fe ff ff       	call   c000ee0c <GDT::flush()>
c000ef27:	83 c4 4c             	add    esp,0x4c
c000ef2a:	5b                   	pop    ebx
c000ef2b:	5e                   	pop    esi
c000ef2c:	5f                   	pop    edi
c000ef2d:	5d                   	pop    ebp
c000ef2e:	c3                   	ret    

c000ef2f <idleFunction(void*)>:
c000ef2f:	53                   	push   ebx
c000ef30:	83 ec 08             	sub    esp,0x8
c000ef33:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c000ef38:	48                   	dec    eax
c000ef39:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c000ef3e:	75 01                	jne    c000ef41 <idleFunction(void*)+0x12>
c000ef40:	fb                   	sti    
c000ef41:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c000ef46:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000ef4c:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000ef53:	74 3c                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef55:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ef5c:	74 33                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef5e:	31 db                	xor    ebx,ebx
c000ef60:	52                   	push   edx
c000ef61:	52                   	push   edx
c000ef62:	68 e1 00 00 00       	push   0xe1
c000ef67:	50                   	push   eax
c000ef68:	e8 d3 fb ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c000ef6d:	53                   	push   ebx
c000ef6e:	83 e0 02             	and    eax,0x2
c000ef71:	50                   	push   eax
c000ef72:	68 e1 00 00 00       	push   0xe1
c000ef77:	ff 35 c8 dd 02 c0    	push   DWORD PTR ds:0xc002ddc8
c000ef7d:	e8 ea fb ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c000ef82:	83 c4 20             	add    esp,0x20
c000ef85:	e8 f5 12 ff ff       	call   c000027f <doTPAUSE>
c000ef8a:	e8 71 96 01 00       	call   c0028600 <idleCommon()>
c000ef8f:	eb f4                	jmp    c000ef85 <idleFunction(void*)+0x56>
c000ef91:	fb                   	sti    
c000ef92:	f4                   	hlt    
c000ef93:	e8 68 96 01 00       	call   c0028600 <idleCommon()>
c000ef98:	eb f7                	jmp    c000ef91 <idleFunction(void*)+0x62>

c000ef9a <IDTEntry::IDTEntry(bool)>:
c000ef9a:	83 ec 04             	sub    esp,0x4
c000ef9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efa1:	88 04 24             	mov    BYTE PTR [esp],al
c000efa4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efa8:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000efae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efb2:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000efb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efba:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efbd:	83 e2 f0             	and    edx,0xfffffff0
c000efc0:	83 ca 0e             	or     edx,0xe
c000efc3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efca:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efcd:	83 e2 ef             	and    edx,0xffffffef
c000efd0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efd3:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000efd7:	74 04                	je     c000efdd <IDTEntry::IDTEntry(bool)+0x43>
c000efd9:	b2 03                	mov    dl,0x3
c000efdb:	eb 02                	jmp    c000efdf <IDTEntry::IDTEntry(bool)+0x45>
c000efdd:	b2 00                	mov    dl,0x0
c000efdf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efe3:	83 e2 03             	and    edx,0x3
c000efe6:	88 d1                	mov    cl,dl
c000efe8:	c1 e1 05             	shl    ecx,0x5
c000efeb:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efee:	83 e2 9f             	and    edx,0xffffff9f
c000eff1:	09 ca                	or     edx,ecx
c000eff3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000effa:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000effd:	83 ca 80             	or     edx,0xffffff80
c000f000:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f003:	90                   	nop
c000f004:	83 c4 04             	add    esp,0x4
c000f007:	c3                   	ret    

c000f008 <IDTEntry::setOffset(unsigned int)>:
c000f008:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f00c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f010:	66 89 02             	mov    WORD PTR [edx],ax
c000f013:	c1 e8 10             	shr    eax,0x10
c000f016:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f01a:	c3                   	ret    
c000f01b:	90                   	nop

c000f01c <IDT::IDT()>:
c000f01c:	90                   	nop
c000f01d:	c3                   	ret    

c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f01e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f022:	83 c0 30             	add    eax,0x30
c000f025:	c3                   	ret    

c000f026 <IDT::addEntry(IDTEntry, int)>:
c000f026:	53                   	push   ebx
c000f027:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f02b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f02f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f033:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f037:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f03a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f03e:	5b                   	pop    ebx
c000f03f:	c3                   	ret    

c000f040 <IDT::addEntry(int, void (*)(), bool)>:
c000f040:	53                   	push   ebx
c000f041:	83 ec 10             	sub    esp,0x10
c000f044:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f049:	50                   	push   eax
c000f04a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f04e:	53                   	push   ebx
c000f04f:	e8 46 ff ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f054:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f058:	53                   	push   ebx
c000f059:	e8 aa ff ff ff       	call   c000f008 <IDTEntry::setOffset(unsigned int)>
c000f05e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f062:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f066:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f06a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f06e:	e8 b3 ff ff ff       	call   c000f026 <IDT::addEntry(IDTEntry, int)>
c000f073:	83 c4 30             	add    esp,0x30
c000f076:	5b                   	pop    ebx
c000f077:	c3                   	ret    

c000f078 <IDT::flush()>:
c000f078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f07c:	66 c7 05 d8 dd 02 c0 ff 07 	mov    WORD PTR ds:0xc002ddd8,0x7ff
c000f085:	a3 da dd 02 c0       	mov    ds:0xc002ddda,eax
c000f08a:	0f 01 1d d8 dd 02 c0 	lidtd  ds:0xc002ddd8
c000f091:	c3                   	ret    

c000f092 <IDT::setup()>:
c000f092:	57                   	push   edi
c000f093:	56                   	push   esi
c000f094:	53                   	push   ebx
c000f095:	83 ec 10             	sub    esp,0x10
c000f098:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f09c:	6a 00                	push   0x0
c000f09e:	68 70 04 00 c0       	push   0xc0000470
c000f0a3:	6a 00                	push   0x0
c000f0a5:	53                   	push   ebx
c000f0a6:	e8 95 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ab:	6a 00                	push   0x0
c000f0ad:	68 80 04 00 c0       	push   0xc0000480
c000f0b2:	6a 01                	push   0x1
c000f0b4:	53                   	push   ebx
c000f0b5:	e8 86 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ba:	83 c4 20             	add    esp,0x20
c000f0bd:	6a 00                	push   0x0
c000f0bf:	68 8a 04 00 c0       	push   0xc000048a
c000f0c4:	6a 02                	push   0x2
c000f0c6:	53                   	push   ebx
c000f0c7:	e8 74 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0cc:	6a 00                	push   0x0
c000f0ce:	68 94 04 00 c0       	push   0xc0000494
c000f0d3:	6a 03                	push   0x3
c000f0d5:	53                   	push   ebx
c000f0d6:	e8 65 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0db:	83 c4 20             	add    esp,0x20
c000f0de:	6a 00                	push   0x0
c000f0e0:	68 9e 04 00 c0       	push   0xc000049e
c000f0e5:	6a 04                	push   0x4
c000f0e7:	53                   	push   ebx
c000f0e8:	e8 53 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ed:	6a 00                	push   0x0
c000f0ef:	68 a8 04 00 c0       	push   0xc00004a8
c000f0f4:	6a 05                	push   0x5
c000f0f6:	53                   	push   ebx
c000f0f7:	e8 44 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0fc:	83 c4 20             	add    esp,0x20
c000f0ff:	6a 00                	push   0x0
c000f101:	68 b2 04 00 c0       	push   0xc00004b2
c000f106:	6a 06                	push   0x6
c000f108:	53                   	push   ebx
c000f109:	e8 32 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f10e:	6a 00                	push   0x0
c000f110:	68 bc 04 00 c0       	push   0xc00004bc
c000f115:	6a 07                	push   0x7
c000f117:	53                   	push   ebx
c000f118:	e8 23 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f11d:	83 c4 20             	add    esp,0x20
c000f120:	6a 00                	push   0x0
c000f122:	68 c6 04 00 c0       	push   0xc00004c6
c000f127:	6a 08                	push   0x8
c000f129:	53                   	push   ebx
c000f12a:	e8 11 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f12f:	6a 00                	push   0x0
c000f131:	68 ce 04 00 c0       	push   0xc00004ce
c000f136:	6a 09                	push   0x9
c000f138:	53                   	push   ebx
c000f139:	e8 02 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f13e:	83 c4 20             	add    esp,0x20
c000f141:	6a 00                	push   0x0
c000f143:	68 d8 04 00 c0       	push   0xc00004d8
c000f148:	6a 0a                	push   0xa
c000f14a:	53                   	push   ebx
c000f14b:	e8 f0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f150:	6a 00                	push   0x0
c000f152:	68 e0 04 00 c0       	push   0xc00004e0
c000f157:	6a 0b                	push   0xb
c000f159:	53                   	push   ebx
c000f15a:	e8 e1 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f15f:	83 c4 20             	add    esp,0x20
c000f162:	6a 00                	push   0x0
c000f164:	68 e8 04 00 c0       	push   0xc00004e8
c000f169:	6a 0c                	push   0xc
c000f16b:	53                   	push   ebx
c000f16c:	e8 cf fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f171:	6a 00                	push   0x0
c000f173:	68 f0 04 00 c0       	push   0xc00004f0
c000f178:	6a 0d                	push   0xd
c000f17a:	53                   	push   ebx
c000f17b:	e8 c0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f180:	83 c4 20             	add    esp,0x20
c000f183:	6a 00                	push   0x0
c000f185:	68 f8 04 00 c0       	push   0xc00004f8
c000f18a:	6a 0e                	push   0xe
c000f18c:	53                   	push   ebx
c000f18d:	e8 ae fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f192:	6a 00                	push   0x0
c000f194:	68 00 05 00 c0       	push   0xc0000500
c000f199:	6a 0f                	push   0xf
c000f19b:	53                   	push   ebx
c000f19c:	e8 9f fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1a1:	83 c4 20             	add    esp,0x20
c000f1a4:	6a 00                	push   0x0
c000f1a6:	68 0a 05 00 c0       	push   0xc000050a
c000f1ab:	6a 10                	push   0x10
c000f1ad:	53                   	push   ebx
c000f1ae:	e8 8d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1b3:	6a 00                	push   0x0
c000f1b5:	68 14 05 00 c0       	push   0xc0000514
c000f1ba:	6a 11                	push   0x11
c000f1bc:	53                   	push   ebx
c000f1bd:	e8 7e fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1c2:	83 c4 20             	add    esp,0x20
c000f1c5:	6a 00                	push   0x0
c000f1c7:	68 1e 05 00 c0       	push   0xc000051e
c000f1cc:	6a 12                	push   0x12
c000f1ce:	53                   	push   ebx
c000f1cf:	e8 6c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1d4:	6a 01                	push   0x1
c000f1d6:	68 b8 05 00 c0       	push   0xc00005b8
c000f1db:	6a 60                	push   0x60
c000f1dd:	53                   	push   ebx
c000f1de:	e8 5d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1e3:	83 c4 20             	add    esp,0x20
c000f1e6:	6a 00                	push   0x0
c000f1e8:	68 bf 05 00 c0       	push   0xc00005bf
c000f1ed:	6a 20                	push   0x20
c000f1ef:	53                   	push   ebx
c000f1f0:	e8 4b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1f5:	6a 00                	push   0x0
c000f1f7:	68 aa 05 00 c0       	push   0xc00005aa
c000f1fc:	6a 21                	push   0x21
c000f1fe:	53                   	push   ebx
c000f1ff:	e8 3c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f204:	83 c4 20             	add    esp,0x20
c000f207:	6a 00                	push   0x0
c000f209:	68 b1 05 00 c0       	push   0xc00005b1
c000f20e:	6a 22                	push   0x22
c000f210:	53                   	push   ebx
c000f211:	e8 2a fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f216:	6a 00                	push   0x0
c000f218:	68 28 05 00 c0       	push   0xc0000528
c000f21d:	6a 23                	push   0x23
c000f21f:	53                   	push   ebx
c000f220:	e8 1b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f225:	83 c4 20             	add    esp,0x20
c000f228:	6a 00                	push   0x0
c000f22a:	68 32 05 00 c0       	push   0xc0000532
c000f22f:	6a 24                	push   0x24
c000f231:	53                   	push   ebx
c000f232:	e8 09 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f237:	6a 00                	push   0x0
c000f239:	68 3c 05 00 c0       	push   0xc000053c
c000f23e:	6a 25                	push   0x25
c000f240:	53                   	push   ebx
c000f241:	e8 fa fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f246:	83 c4 20             	add    esp,0x20
c000f249:	6a 00                	push   0x0
c000f24b:	68 46 05 00 c0       	push   0xc0000546
c000f250:	6a 26                	push   0x26
c000f252:	53                   	push   ebx
c000f253:	e8 e8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f258:	6a 00                	push   0x0
c000f25a:	68 50 05 00 c0       	push   0xc0000550
c000f25f:	6a 27                	push   0x27
c000f261:	53                   	push   ebx
c000f262:	e8 d9 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f267:	83 c4 20             	add    esp,0x20
c000f26a:	6a 00                	push   0x0
c000f26c:	68 5a 05 00 c0       	push   0xc000055a
c000f271:	6a 28                	push   0x28
c000f273:	53                   	push   ebx
c000f274:	e8 c7 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f279:	6a 00                	push   0x0
c000f27b:	68 64 05 00 c0       	push   0xc0000564
c000f280:	6a 29                	push   0x29
c000f282:	53                   	push   ebx
c000f283:	e8 b8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f288:	83 c4 20             	add    esp,0x20
c000f28b:	6a 00                	push   0x0
c000f28d:	68 6e 05 00 c0       	push   0xc000056e
c000f292:	6a 2a                	push   0x2a
c000f294:	53                   	push   ebx
c000f295:	e8 a6 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f29a:	6a 00                	push   0x0
c000f29c:	68 78 05 00 c0       	push   0xc0000578
c000f2a1:	6a 2b                	push   0x2b
c000f2a3:	53                   	push   ebx
c000f2a4:	e8 97 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2a9:	83 c4 20             	add    esp,0x20
c000f2ac:	6a 00                	push   0x0
c000f2ae:	68 82 05 00 c0       	push   0xc0000582
c000f2b3:	6a 2c                	push   0x2c
c000f2b5:	53                   	push   ebx
c000f2b6:	e8 85 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2bb:	6a 00                	push   0x0
c000f2bd:	68 8c 05 00 c0       	push   0xc000058c
c000f2c2:	6a 2d                	push   0x2d
c000f2c4:	53                   	push   ebx
c000f2c5:	e8 76 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2ca:	83 c4 20             	add    esp,0x20
c000f2cd:	6a 00                	push   0x0
c000f2cf:	68 96 05 00 c0       	push   0xc0000596
c000f2d4:	6a 2e                	push   0x2e
c000f2d6:	53                   	push   ebx
c000f2d7:	e8 64 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2dc:	6a 00                	push   0x0
c000f2de:	68 a0 05 00 c0       	push   0xc00005a0
c000f2e3:	6a 2f                	push   0x2f
c000f2e5:	53                   	push   ebx
c000f2e6:	e8 55 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2eb:	83 c4 20             	add    esp,0x20
c000f2ee:	6a 00                	push   0x0
c000f2f0:	68 f6 05 00 c0       	push   0xc00005f6
c000f2f5:	6a 30                	push   0x30
c000f2f7:	53                   	push   ebx
c000f2f8:	e8 43 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2fd:	6a 00                	push   0x0
c000f2ff:	68 00 06 00 c0       	push   0xc0000600
c000f304:	6a 31                	push   0x31
c000f306:	53                   	push   ebx
c000f307:	e8 34 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f30c:	83 c4 20             	add    esp,0x20
c000f30f:	6a 00                	push   0x0
c000f311:	68 0a 06 00 c0       	push   0xc000060a
c000f316:	6a 32                	push   0x32
c000f318:	53                   	push   ebx
c000f319:	e8 22 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f31e:	6a 00                	push   0x0
c000f320:	68 14 06 00 c0       	push   0xc0000614
c000f325:	6a 33                	push   0x33
c000f327:	53                   	push   ebx
c000f328:	e8 13 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f32d:	83 c4 20             	add    esp,0x20
c000f330:	6a 00                	push   0x0
c000f332:	68 1e 06 00 c0       	push   0xc000061e
c000f337:	6a 34                	push   0x34
c000f339:	53                   	push   ebx
c000f33a:	e8 01 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f33f:	6a 00                	push   0x0
c000f341:	68 28 06 00 c0       	push   0xc0000628
c000f346:	6a 35                	push   0x35
c000f348:	53                   	push   ebx
c000f349:	e8 f2 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f34e:	83 c4 20             	add    esp,0x20
c000f351:	6a 00                	push   0x0
c000f353:	68 32 06 00 c0       	push   0xc0000632
c000f358:	6a 36                	push   0x36
c000f35a:	53                   	push   ebx
c000f35b:	e8 e0 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f360:	6a 00                	push   0x0
c000f362:	68 3c 06 00 c0       	push   0xc000063c
c000f367:	6a 37                	push   0x37
c000f369:	53                   	push   ebx
c000f36a:	e8 d1 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f36f:	83 c4 1c             	add    esp,0x1c
c000f372:	6a 03                	push   0x3
c000f374:	6a 02                	push   0x2
c000f376:	ff 35 30 df 02 c0    	push   DWORD PTR ds:0xc002df30
c000f37c:	e8 f3 27 00 00       	call   c0011b74 <VAS::allocatePages(int, int)>
c000f381:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f388:	89 c6                	mov    esi,eax
c000f38a:	e8 0a 02 00 00       	call   c000f599 <malloc>
c000f38f:	81 c6 00 20 00 00    	add    esi,0x2000
c000f395:	89 04 24             	mov    DWORD PTR [esp],eax
c000f398:	89 c7                	mov    edi,eax
c000f39a:	e8 c7 17 00 00       	call   c0010b66 <TSS::TSS()>
c000f39f:	83 c4 0c             	add    esp,0xc
c000f3a2:	68 c6 04 00 c0       	push   0xc00004c6
c000f3a7:	56                   	push   esi
c000f3a8:	57                   	push   edi
c000f3a9:	e8 f8 17 00 00       	call   c0010ba6 <TSS::setup(unsigned long, unsigned long)>
c000f3ae:	89 c6                	mov    esi,eax
c000f3b0:	58                   	pop    eax
c000f3b1:	5a                   	pop    edx
c000f3b2:	6a 00                	push   0x0
c000f3b4:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f3b8:	50                   	push   eax
c000f3b9:	e8 dc fb ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f3be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3c2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f3c7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f3ce:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f3d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f3d8:	80 ce 05             	or     dh,0x5
c000f3db:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f3de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f3e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3e6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f3e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f3ec:	e8 87 fc ff ff       	call   c000f078 <IDT::flush()>
c000f3f1:	83 c4 20             	add    esp,0x20
c000f3f4:	5b                   	pop    ebx
c000f3f5:	5e                   	pop    esi
c000f3f6:	5f                   	pop    edi
c000f3f7:	c3                   	ret    

c000f3f8 <sbrk>:
c000f3f8:	55                   	push   ebp
c000f3f9:	57                   	push   edi
c000f3fa:	56                   	push   esi
c000f3fb:	53                   	push   ebx
c000f3fc:	83 ec 1c             	sub    esp,0x1c
c000f3ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f403:	85 c0                	test   eax,eax
c000f405:	74 3e                	je     c000f445 <sbrk+0x4d>
c000f407:	78 43                	js     c000f44c <sbrk+0x54>
c000f409:	8b 15 c8 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002ddc8
c000f40f:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f415:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f41b:	83 e2 01             	and    edx,0x1
c000f41e:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f422:	8b 0d 94 cb 02 c0    	mov    ecx,DWORD PTR ds:0xc002cb94
c000f428:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f42c:	05 ff 0f 00 00       	add    eax,0xfff
c000f431:	89 c2                	mov    edx,eax
c000f433:	78 2f                	js     c000f464 <sbrk+0x6c>
c000f435:	c1 fa 0c             	sar    edx,0xc
c000f438:	89 d7                	mov    edi,edx
c000f43a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f43e:	be 00 00 00 00       	mov    esi,0x0
c000f443:	eb 36                	jmp    c000f47b <sbrk+0x83>
c000f445:	a1 94 cb 02 c0       	mov    eax,ds:0xc002cb94
c000f44a:	eb 73                	jmp    c000f4bf <sbrk+0xc7>
c000f44c:	83 ec 08             	sub    esp,0x8
c000f44f:	50                   	push   eax
c000f450:	68 60 a1 02 c0       	push   0xc002a160
c000f455:	e8 43 33 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c000f45a:	83 c4 10             	add    esp,0x10
c000f45d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f462:	eb 5b                	jmp    c000f4bf <sbrk+0xc7>
c000f464:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f46a:	eb c9                	jmp    c000f435 <sbrk+0x3d>
c000f46c:	81 05 94 cb 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002cb94,0x1000
c000f476:	46                   	inc    esi
c000f477:	39 f7                	cmp    edi,esi
c000f479:	74 33                	je     c000f4ae <sbrk+0xb6>
c000f47b:	8b 1d 30 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002df30
c000f481:	8b 2d 94 cb 02 c0    	mov    ebp,DWORD PTR ds:0xc002cb94
c000f487:	e8 09 05 00 00       	call   c000f995 <Phys::allocatePage()>
c000f48c:	68 01 04 00 00       	push   0x401
c000f491:	55                   	push   ebp
c000f492:	50                   	push   eax
c000f493:	53                   	push   ebx
c000f494:	e8 d9 25 00 00       	call   c0011a72 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f499:	83 c4 10             	add    esp,0x10
c000f49c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4a1:	74 c9                	je     c000f46c <sbrk+0x74>
c000f4a3:	8b 1d 94 cb 02 c0    	mov    ebx,DWORD PTR ds:0xc002cb94
c000f4a9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4ac:	eb be                	jmp    c000f46c <sbrk+0x74>
c000f4ae:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4b3:	75 12                	jne    c000f4c7 <sbrk+0xcf>
c000f4b5:	0f 20 d8             	mov    eax,cr3
c000f4b8:	0f 22 d8             	mov    cr3,eax
c000f4bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f4bf:	83 c4 1c             	add    esp,0x1c
c000f4c2:	5b                   	pop    ebx
c000f4c3:	5e                   	pop    esi
c000f4c4:	5f                   	pop    edi
c000f4c5:	5d                   	pop    ebp
c000f4c6:	c3                   	ret    
c000f4c7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f4cb:	89 cb                	mov    ebx,ecx
c000f4cd:	c1 eb 0a             	shr    ebx,0xa
c000f4d0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f4d6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f4dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4e0:	c1 e0 0c             	shl    eax,0xc
c000f4e3:	01 c8                	add    eax,ecx
c000f4e5:	c1 e8 0a             	shr    eax,0xa
c000f4e8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f4ed:	2d 00 00 40 00       	sub    eax,0x400000
c000f4f2:	39 c3                	cmp    ebx,eax
c000f4f4:	77 c5                	ja     c000f4bb <sbrk+0xc3>
c000f4f6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4f9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f4ff:	39 d8                	cmp    eax,ebx
c000f501:	73 f3                	jae    c000f4f6 <sbrk+0xfe>
c000f503:	eb b6                	jmp    c000f4bb <sbrk+0xc3>

c000f505 <mmap>:
c000f505:	83 ec 18             	sub    esp,0x18
c000f508:	68 90 a1 02 c0       	push   0xc002a190
c000f50d:	e8 77 aa 00 00       	call   c0019f89 <Krnl::panic(char const*)>
c000f512:	b8 00 00 00 00       	mov    eax,0x0
c000f517:	83 c4 1c             	add    esp,0x1c
c000f51a:	c3                   	ret    

c000f51b <munmap>:
c000f51b:	83 ec 18             	sub    esp,0x18
c000f51e:	68 95 a1 02 c0       	push   0xc002a195
c000f523:	e8 61 aa 00 00       	call   c0019f89 <Krnl::panic(char const*)>
c000f528:	b8 00 00 00 00       	mov    eax,0x0
c000f52d:	83 c4 1c             	add    esp,0x1c
c000f530:	c3                   	ret    

c000f531 <liballoc_lock()>:
c000f531:	fa                   	cli    
c000f532:	ff 05 c8 f2 02 c0    	inc    DWORD PTR ds:0xc002f2c8
c000f538:	b8 00 00 00 00       	mov    eax,0x0
c000f53d:	c3                   	ret    

c000f53e <liballoc_unlock()>:
c000f53e:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c000f543:	48                   	dec    eax
c000f544:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c000f549:	75 01                	jne    c000f54c <liballoc_unlock()+0xe>
c000f54b:	fb                   	sti    
c000f54c:	b8 00 00 00 00       	mov    eax,0x0
c000f551:	c3                   	ret    

c000f552 <liballoc_alloc(int)>:
c000f552:	83 ec 10             	sub    esp,0x10
c000f555:	6a 01                	push   0x1
c000f557:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f55b:	ff 35 30 df 02 c0    	push   DWORD PTR ds:0xc002df30
c000f561:	e8 0e 26 00 00       	call   c0011b74 <VAS::allocatePages(int, int)>
c000f566:	83 c4 1c             	add    esp,0x1c
c000f569:	c3                   	ret    

c000f56a <liballoc_free(void*, int)>:
c000f56a:	83 ec 14             	sub    esp,0x14
c000f56d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f571:	ff 35 30 df 02 c0    	push   DWORD PTR ds:0xc002df30
c000f577:	e8 a2 22 00 00       	call   c001181e <VAS::freeAllocatedPages(unsigned long)>
c000f57c:	b8 00 00 00 00       	mov    eax,0x0
c000f581:	83 c4 1c             	add    esp,0x1c
c000f584:	c3                   	ret    

c000f585 <realloc>:
c000f585:	83 ec 14             	sub    esp,0x14
c000f588:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f58c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f590:	e8 97 20 ff ff       	call   c000162c <dlrealloc>
c000f595:	83 c4 1c             	add    esp,0x1c
c000f598:	c3                   	ret    

c000f599 <malloc>:
c000f599:	83 ec 18             	sub    esp,0x18
c000f59c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5a0:	e8 4a 1b ff ff       	call   c00010ef <dlmalloc>
c000f5a5:	83 c4 1c             	add    esp,0x1c
c000f5a8:	c3                   	ret    

c000f5a9 <free>:
c000f5a9:	83 ec 18             	sub    esp,0x18
c000f5ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5b0:	e8 df 17 ff ff       	call   c0000d94 <dlfree>
c000f5b5:	83 c4 1c             	add    esp,0x1c
c000f5b8:	c3                   	ret    

c000f5b9 <rfree>:
c000f5b9:	83 ec 18             	sub    esp,0x18
c000f5bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5c0:	e8 cf 17 ff ff       	call   c0000d94 <dlfree>
c000f5c5:	83 c4 1c             	add    esp,0x1c
c000f5c8:	c3                   	ret    

c000f5c9 <calloc>:
c000f5c9:	56                   	push   esi
c000f5ca:	53                   	push   ebx
c000f5cb:	83 ec 10             	sub    esp,0x10
c000f5ce:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f5d2:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 bc ff ff ff       	call   c000f599 <malloc>
c000f5dd:	89 c6                	mov    esi,eax
c000f5df:	83 c4 0c             	add    esp,0xc
c000f5e2:	53                   	push   ebx
c000f5e3:	6a 00                	push   0x0
c000f5e5:	50                   	push   eax
c000f5e6:	e8 65 11 ff ff       	call   c0000750 <memset>
c000f5eb:	89 f0                	mov    eax,esi
c000f5ed:	83 c4 14             	add    esp,0x14
c000f5f0:	5b                   	pop    ebx
c000f5f1:	5e                   	pop    esi
c000f5f2:	c3                   	ret    

c000f5f3 <Krnl::setBootMessage(char const*)>:
c000f5f3:	57                   	push   edi
c000f5f4:	56                   	push   esi
c000f5f5:	53                   	push   ebx
c000f5f6:	81 ec a4 00 00 00    	sub    esp,0xa4
c000f5fc:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000f603:	68 9e 00 00 00       	push   0x9e
c000f608:	6a 00                	push   0x0
c000f60a:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000f60e:	56                   	push   esi
c000f60f:	e8 3c 11 ff ff       	call   c0000750 <memset>
c000f614:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f617:	e8 50 11 ff ff       	call   c000076c <strlen>
c000f61c:	ba 50 00 00 00       	mov    edx,0x50
c000f621:	83 c4 10             	add    esp,0x10
c000f624:	29 c2                	sub    edx,eax
c000f626:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c000f62a:	d1 ea                	shr    edx,1
c000f62c:	84 c0                	test   al,al
c000f62e:	74 19                	je     c000f649 <Krnl::setBootMessage(char const*)+0x56>
c000f630:	01 d2                	add    edx,edx
c000f632:	43                   	inc    ebx
c000f633:	01 f2                	add    edx,esi
c000f635:	80 cc 0f             	or     ah,0xf
c000f638:	83 c2 02             	add    edx,0x2
c000f63b:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f63f:	43                   	inc    ebx
c000f640:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c000f645:	84 c0                	test   al,al
c000f647:	75 ec                	jne    c000f635 <Krnl::setBootMessage(char const*)+0x42>
c000f649:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000f64e:	b9 9e 00 00 00       	mov    ecx,0x9e
c000f653:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f655:	81 c4 a0 00 00 00    	add    esp,0xa0
c000f65b:	5b                   	pop    ebx
c000f65c:	5e                   	pop    esi
c000f65d:	5f                   	pop    edi
c000f65e:	c3                   	ret    

c000f65f <kernel_main>:
c000f65f:	57                   	push   edi
c000f660:	bf f9 03 00 00       	mov    edi,0x3f9
c000f665:	56                   	push   esi
c000f666:	89 fa                	mov    edx,edi
c000f668:	53                   	push   ebx
c000f669:	31 f6                	xor    esi,esi
c000f66b:	83 ec 2c             	sub    esp,0x2c
c000f66e:	89 f0                	mov    eax,esi
c000f670:	ee                   	out    dx,al
c000f671:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f676:	b0 80                	mov    al,0x80
c000f678:	89 da                	mov    edx,ebx
c000f67a:	ee                   	out    dx,al
c000f67b:	b1 03                	mov    cl,0x3
c000f67d:	ba f8 03 00 00       	mov    edx,0x3f8
c000f682:	88 c8                	mov    al,cl
c000f684:	ee                   	out    dx,al
c000f685:	89 f0                	mov    eax,esi
c000f687:	89 fa                	mov    edx,edi
c000f689:	ee                   	out    dx,al
c000f68a:	88 c8                	mov    al,cl
c000f68c:	89 da                	mov    edx,ebx
c000f68e:	ee                   	out    dx,al
c000f68f:	b0 c7                	mov    al,0xc7
c000f691:	ba fa 03 00 00       	mov    edx,0x3fa
c000f696:	ee                   	out    dx,al
c000f697:	b0 0b                	mov    al,0xb
c000f699:	ba fc 03 00 00       	mov    edx,0x3fc
c000f69e:	ee                   	out    dx,al
c000f69f:	68 9c a1 02 c0       	push   0xc002a19c
c000f6a4:	e8 f4 30 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c000f6a9:	e8 b8 09 00 00       	call   c0010066 <installVgaTextImplementation()>
c000f6ae:	0f b6 05 a0 cb 02 c0 	movzx  eax,BYTE PTR ds:0xc002cba0
c000f6b5:	83 c4 10             	add    esp,0x10
c000f6b8:	84 c0                	test   al,al
c000f6ba:	74 6c                	je     c000f728 <kernel_main+0xc9>
c000f6bc:	31 db                	xor    ebx,ebx
c000f6be:	bf 0a 00 00 00       	mov    edi,0xa
c000f6c3:	be 05 00 00 00       	mov    esi,0x5
c000f6c8:	31 c9                	xor    ecx,ecx
c000f6ca:	eb 2a                	jmp    c000f6f6 <kernel_main+0x97>
c000f6cc:	3c 0d                	cmp    al,0xd
c000f6ce:	74 1a                	je     c000f6ea <kernel_main+0x8b>
c000f6d0:	3c 0a                	cmp    al,0xa
c000f6d2:	74 40                	je     c000f714 <kernel_main+0xb5>
c000f6d4:	8d 14 b6             	lea    edx,[esi+esi*4]
c000f6d7:	80 cc 0e             	or     ah,0xe
c000f6da:	c1 e2 04             	shl    edx,0x4
c000f6dd:	01 ca                	add    edx,ecx
c000f6df:	41                   	inc    ecx
c000f6e0:	01 fa                	add    edx,edi
c000f6e2:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f6ea:	43                   	inc    ebx
c000f6eb:	0f b6 83 a0 cb 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd3460]
c000f6f2:	84 c0                	test   al,al
c000f6f4:	74 32                	je     c000f728 <kernel_main+0xc9>
c000f6f6:	80 b9 d6 cb 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd342a],0xdb
c000f6fd:	75 cd                	jne    c000f6cc <kernel_main+0x6d>
c000f6ff:	0f b6 91 d5 cb 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd342b]
c000f706:	83 e2 fe             	and    edx,0xfffffffe
c000f709:	81 fa ba 00 00 00    	cmp    edx,0xba
c000f70f:	75 bb                	jne    c000f6cc <kernel_main+0x6d>
c000f711:	47                   	inc    edi
c000f712:	eb b8                	jmp    c000f6cc <kernel_main+0x6d>
c000f714:	43                   	inc    ebx
c000f715:	46                   	inc    esi
c000f716:	31 c9                	xor    ecx,ecx
c000f718:	0f b6 83 a0 cb 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd3460]
c000f71f:	bf 0a 00 00 00       	mov    edi,0xa
c000f724:	84 c0                	test   al,al
c000f726:	75 ce                	jne    c000f6f6 <kernel_main+0x97>
c000f728:	83 ec 0c             	sub    esp,0xc
c000f72b:	68 b4 a1 02 c0       	push   0xc002a1b4
c000f730:	e8 be fe ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000f735:	a1 00 05 00 00       	mov    eax,ds:0x500
c000f73a:	a3 e0 dd 02 c0       	mov    ds:0xc002dde0,eax
c000f73f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f744:	05 ff 0f 00 00       	add    eax,0xfff
c000f749:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f74e:	89 04 24             	mov    DWORD PTR [esp],eax
c000f751:	e8 cb 03 00 00       	call   c000fb21 <Phys::physicalMemorySetup(unsigned int)>
c000f756:	e8 83 1c 00 00       	call   c00113de <Virt::virtualMemorySetup()>
c000f75b:	58                   	pop    eax
c000f75c:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000f760:	53                   	push   ebx
c000f761:	e8 e0 1e 00 00       	call   c0011646 <VAS::VAS()>
c000f766:	89 1d 30 df 02 c0    	mov    DWORD PTR ds:0xc002df30,ebx
c000f76c:	e8 af 08 ff ff       	call   c0000020 <callGlobalConstructors>
c000f771:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f778:	e8 1c fe ff ff       	call   c000f599 <malloc>
c000f77d:	89 04 24             	mov    DWORD PTR [esp],eax
c000f780:	89 c6                	mov    esi,eax
c000f782:	e8 4f f0 ff ff       	call   c000e7d6 <Computer::Computer()>
c000f787:	6a 00                	push   0x0
c000f789:	89 35 c8 dd 02 c0    	mov    DWORD PTR ds:0xc002ddc8,esi
c000f78f:	6a 00                	push   0x0
c000f791:	6a 00                	push   0x0
c000f793:	56                   	push   esi
c000f794:	e8 49 f4 ff ff       	call   c000ebe2 <Computer::open(int, int, void*)>
c000f799:	83 c4 14             	add    esp,0x14
c000f79c:	53                   	push   ebx
c000f79d:	e8 54 21 00 00       	call   c00118f6 <VAS::~VAS()>
c000f7a2:	83 c4 30             	add    esp,0x30
c000f7a5:	5b                   	pop    ebx
c000f7a6:	5e                   	pop    esi
c000f7a7:	5f                   	pop    edi
c000f7a8:	c3                   	ret    

c000f7a9 <Phys::allocateDMA(unsigned long)>:
c000f7a9:	55                   	push   ebp
c000f7aa:	31 ed                	xor    ebp,ebp
c000f7ac:	57                   	push   edi
c000f7ad:	56                   	push   esi
c000f7ae:	53                   	push   ebx
c000f7af:	31 db                	xor    ebx,ebx
c000f7b1:	83 ec 18             	sub    esp,0x18
c000f7b4:	68 d3 a1 02 c0       	push   0xc002a1d3
c000f7b9:	e8 df 2f 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c000f7be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f7c2:	31 d2                	xor    edx,edx
c000f7c4:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f7ca:	83 c4 10             	add    esp,0x10
c000f7cd:	c1 ee 0c             	shr    esi,0xc
c000f7d0:	31 c9                	xor    ecx,ecx
c000f7d2:	eb 17                	jmp    c000f7eb <Phys::allocateDMA(unsigned long)+0x42>
c000f7d4:	85 c9                	test   ecx,ecx
c000f7d6:	75 04                	jne    c000f7dc <Phys::allocateDMA(unsigned long)+0x33>
c000f7d8:	89 d5                	mov    ebp,edx
c000f7da:	89 d3                	mov    ebx,edx
c000f7dc:	8d 41 01             	lea    eax,[ecx+0x1]
c000f7df:	39 c6                	cmp    esi,eax
c000f7e1:	74 23                	je     c000f806 <Phys::allocateDMA(unsigned long)+0x5d>
c000f7e3:	42                   	inc    edx
c000f7e4:	89 c1                	mov    ecx,eax
c000f7e6:	83 fa 2f             	cmp    edx,0x2f
c000f7e9:	7f 11                	jg     c000f7fc <Phys::allocateDMA(unsigned long)+0x53>
c000f7eb:	80 ba 20 de 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd21e0],0x0
c000f7f2:	74 e0                	je     c000f7d4 <Phys::allocateDMA(unsigned long)+0x2b>
c000f7f4:	31 c9                	xor    ecx,ecx
c000f7f6:	42                   	inc    edx
c000f7f7:	83 fa 2f             	cmp    edx,0x2f
c000f7fa:	7e ef                	jle    c000f7eb <Phys::allocateDMA(unsigned long)+0x42>
c000f7fc:	83 c4 0c             	add    esp,0xc
c000f7ff:	31 c0                	xor    eax,eax
c000f801:	5b                   	pop    ebx
c000f802:	5e                   	pop    esi
c000f803:	5f                   	pop    edi
c000f804:	5d                   	pop    ebp
c000f805:	c3                   	ret    
c000f806:	8d 14 33             	lea    edx,[ebx+esi*1]
c000f809:	89 d7                	mov    edi,edx
c000f80b:	4f                   	dec    edi
c000f80c:	79 03                	jns    c000f811 <Phys::allocateDMA(unsigned long)+0x68>
c000f80e:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f811:	c1 ff 04             	sar    edi,0x4
c000f814:	89 da                	mov    edx,ebx
c000f816:	c1 fa 04             	sar    edx,0x4
c000f819:	39 fa                	cmp    edx,edi
c000f81b:	75 43                	jne    c000f860 <Phys::allocateDMA(unsigned long)+0xb7>
c000f81d:	85 c0                	test   eax,eax
c000f81f:	74 1a                	je     c000f83b <Phys::allocateDMA(unsigned long)+0x92>
c000f821:	be 20 de 02 c0       	mov    esi,0xc002de20
c000f826:	8d 93 20 de 02 c0    	lea    edx,[ebx-0x3ffd21e0]
c000f82c:	f7 d6                	not    esi
c000f82e:	29 de                	sub    esi,ebx
c000f830:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f833:	42                   	inc    edx
c000f834:	8d 04 16             	lea    eax,[esi+edx*1]
c000f837:	39 c1                	cmp    ecx,eax
c000f839:	7f f5                	jg     c000f830 <Phys::allocateDMA(unsigned long)+0x87>
c000f83b:	83 ec 0c             	sub    esp,0xc
c000f83e:	68 ec a1 02 c0       	push   0xc002a1ec
c000f843:	e8 55 2f 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c000f848:	83 c4 10             	add    esp,0x10
c000f84b:	85 ff                	test   edi,edi
c000f84d:	74 17                	je     c000f866 <Phys::allocateDMA(unsigned long)+0xbd>
c000f84f:	83 c4 0c             	add    esp,0xc
c000f852:	8d 83 50 20 0c 00    	lea    eax,[ebx+0xc2050]
c000f858:	5b                   	pop    ebx
c000f859:	c1 e0 0c             	shl    eax,0xc
c000f85c:	5e                   	pop    esi
c000f85d:	5f                   	pop    edi
c000f85e:	5d                   	pop    ebp
c000f85f:	c3                   	ret    
c000f860:	89 ea                	mov    edx,ebp
c000f862:	31 c9                	xor    ecx,ecx
c000f864:	eb 90                	jmp    c000f7f6 <Phys::allocateDMA(unsigned long)+0x4d>
c000f866:	83 c4 0c             	add    esp,0xc
c000f869:	c1 e3 0c             	shl    ebx,0xc
c000f86c:	8d 83 00 00 01 c2    	lea    eax,[ebx-0x3dff0000]
c000f872:	5b                   	pop    ebx
c000f873:	5e                   	pop    esi
c000f874:	5f                   	pop    edi
c000f875:	5d                   	pop    ebp
c000f876:	c3                   	ret    

c000f877 <Phys::freeDMA(unsigned long, unsigned long)>:
c000f877:	83 ec 18             	sub    esp,0x18
c000f87a:	68 03 a2 02 c0       	push   0xc002a203
c000f87f:	e8 19 2f 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c000f884:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f888:	83 c4 10             	add    esp,0x10
c000f88b:	8d 88 ff 0f 00 00    	lea    ecx,[eax+0xfff]
c000f891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f895:	c1 e9 0c             	shr    ecx,0xc
c000f898:	81 7c 24 10 ff ff 05 c2 	cmp    DWORD PTR [esp+0x10],0xc205ffff
c000f8a0:	76 29                	jbe    c000f8cb <Phys::freeDMA(unsigned long, unsigned long)+0x54>
c000f8a2:	8d 90 00 00 fa 3d    	lea    edx,[eax+0x3dfa0000]
c000f8a8:	c1 ea 0c             	shr    edx,0xc
c000f8ab:	83 c2 10             	add    edx,0x10
c000f8ae:	85 c9                	test   ecx,ecx
c000f8b0:	74 15                	je     c000f8c7 <Phys::freeDMA(unsigned long, unsigned long)+0x50>
c000f8b2:	8d 82 20 de 02 c0    	lea    eax,[edx-0x3ffd21e0]
c000f8b8:	8d 94 11 20 de 02 c0 	lea    edx,[ecx+edx*1-0x3ffd21e0]
c000f8bf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f8c2:	40                   	inc    eax
c000f8c3:	39 d0                	cmp    eax,edx
c000f8c5:	75 f8                	jne    c000f8bf <Phys::freeDMA(unsigned long, unsigned long)+0x48>
c000f8c7:	83 c4 0c             	add    esp,0xc
c000f8ca:	c3                   	ret    
c000f8cb:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f8d1:	c1 ea 0c             	shr    edx,0xc
c000f8d4:	eb d8                	jmp    c000f8ae <Phys::freeDMA(unsigned long, unsigned long)+0x37>

c000f8d6 <Phys::setPageState(unsigned long, bool)>:
c000f8d6:	56                   	push   esi
c000f8d7:	ba 01 00 00 00       	mov    edx,0x1
c000f8dc:	53                   	push   ebx
c000f8dd:	8b 35 e4 cc 02 c0    	mov    esi,DWORD PTR ds:0xc002cce4
c000f8e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f8e7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f8eb:	89 c8                	mov    eax,ecx
c000f8ed:	83 e1 07             	and    ecx,0x7
c000f8f0:	c1 e8 03             	shr    eax,0x3
c000f8f3:	d3 e3                	shl    ebx,cl
c000f8f5:	01 c6                	add    esi,eax
c000f8f7:	d3 e2                	shl    edx,cl
c000f8f9:	f7 d2                	not    edx
c000f8fb:	20 16                	and    BYTE PTR [esi],dl
c000f8fd:	03 05 e4 cc 02 c0    	add    eax,DWORD PTR ds:0xc002cce4
c000f903:	08 18                	or     BYTE PTR [eax],bl
c000f905:	5b                   	pop    ebx
c000f906:	5e                   	pop    esi
c000f907:	c3                   	ret    

c000f908 <Phys::getPageState(unsigned long)>:
c000f908:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f90c:	8b 15 e4 cc 02 c0    	mov    edx,DWORD PTR ds:0xc002cce4
c000f912:	89 c8                	mov    eax,ecx
c000f914:	83 e1 07             	and    ecx,0x7
c000f917:	c1 e8 03             	shr    eax,0x3
c000f91a:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f91e:	d3 f8                	sar    eax,cl
c000f920:	83 e0 01             	and    eax,0x1
c000f923:	c3                   	ret    

c000f924 <Phys::freePage(unsigned long)>:
c000f924:	53                   	push   ebx
c000f925:	83 ec 10             	sub    esp,0x10
c000f928:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f92c:	53                   	push   ebx
c000f92d:	68 19 a2 02 c0       	push   0xc002a219
c000f932:	e8 66 2e 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c000f937:	83 c4 10             	add    esp,0x10
c000f93a:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000f940:	76 3d                	jbe    c000f97f <Phys::freePage(unsigned long)+0x5b>
c000f942:	83 ec 0c             	sub    esp,0xc
c000f945:	c1 eb 0c             	shr    ebx,0xc
c000f948:	53                   	push   ebx
c000f949:	e8 ba ff ff ff       	call   c000f908 <Phys::getPageState(unsigned long)>
c000f94e:	83 c4 10             	add    esp,0x10
c000f951:	84 c0                	test   al,al
c000f953:	74 19                	je     c000f96e <Phys::freePage(unsigned long)+0x4a>
c000f955:	83 ec 08             	sub    esp,0x8
c000f958:	ff 0d 10 de 02 c0    	dec    DWORD PTR ds:0xc002de10
c000f95e:	6a 00                	push   0x0
c000f960:	53                   	push   ebx
c000f961:	e8 70 ff ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000f966:	83 c4 10             	add    esp,0x10
c000f969:	83 c4 08             	add    esp,0x8
c000f96c:	5b                   	pop    ebx
c000f96d:	c3                   	ret    
c000f96e:	c7 44 24 10 2c a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a22c
c000f976:	83 c4 08             	add    esp,0x8
c000f979:	5b                   	pop    ebx
c000f97a:	e9 0a a6 00 00       	jmp    c0019f89 <Krnl::panic(char const*)>
c000f97f:	83 ec 08             	sub    esp,0x8
c000f982:	68 00 10 00 00       	push   0x1000
c000f987:	53                   	push   ebx
c000f988:	e8 ea fe ff ff       	call   c000f877 <Phys::freeDMA(unsigned long, unsigned long)>
c000f98d:	83 c4 10             	add    esp,0x10
c000f990:	83 c4 08             	add    esp,0x8
c000f993:	5b                   	pop    ebx
c000f994:	c3                   	ret    

c000f995 <Phys::allocatePage()>:
c000f995:	56                   	push   esi
c000f996:	53                   	push   ebx
c000f997:	83 ec 14             	sub    esp,0x14
c000f99a:	8b 35 04 de 02 c0    	mov    esi,DWORD PTR ds:0xc002de04
c000f9a0:	89 f3                	mov    ebx,esi
c000f9a2:	eb 0a                	jmp    c000f9ae <Phys::allocatePage()+0x19>
c000f9a4:	89 1d 04 de 02 c0    	mov    DWORD PTR ds:0xc002de04,ebx
c000f9aa:	39 de                	cmp    esi,ebx
c000f9ac:	74 24                	je     c000f9d2 <Phys::allocatePage()+0x3d>
c000f9ae:	53                   	push   ebx
c000f9af:	e8 54 ff ff ff       	call   c000f908 <Phys::getPageState(unsigned long)>
c000f9b4:	5a                   	pop    edx
c000f9b5:	84 c0                	test   al,al
c000f9b7:	74 76                	je     c000fa2f <Phys::allocatePage()+0x9a>
c000f9b9:	43                   	inc    ebx
c000f9ba:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f9c0:	75 e2                	jne    c000f9a4 <Phys::allocatePage()+0xf>
c000f9c2:	31 db                	xor    ebx,ebx
c000f9c4:	c7 05 04 de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002de04,0x0
c000f9ce:	39 de                	cmp    esi,ebx
c000f9d0:	75 dc                	jne    c000f9ae <Phys::allocatePage()+0x19>
c000f9d2:	83 ec 0c             	sub    esp,0xc
c000f9d5:	68 60 a2 02 c0       	push   0xc002a260
c000f9da:	e8 be 2d 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c000f9df:	58                   	pop    eax
c000f9e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f9e5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f9e8:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000f9ee:	e8 39 2a 00 00       	call   c001242c <VAS::scanForEviction()>
c000f9f3:	83 c4 10             	add    esp,0x10
c000f9f6:	85 c0                	test   eax,eax
c000f9f8:	75 76                	jne    c000fa70 <Phys::allocatePage()+0xdb>
c000f9fa:	83 ec 0c             	sub    esp,0xc
c000f9fd:	68 00 10 00 00       	push   0x1000
c000fa02:	e8 a2 fd ff ff       	call   c000f7a9 <Phys::allocateDMA(unsigned long)>
c000fa07:	83 c4 10             	add    esp,0x10
c000fa0a:	85 c0                	test   eax,eax
c000fa0c:	75 5c                	jne    c000fa6a <Phys::allocatePage()+0xd5>
c000fa0e:	83 ec 0c             	sub    esp,0xc
c000fa11:	68 78 a2 02 c0       	push   0xc002a278
c000fa16:	e8 6e a5 00 00       	call   c0019f89 <Krnl::panic(char const*)>
c000fa1b:	83 c4 10             	add    esp,0x10
c000fa1e:	8b 1d 04 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002de04
c000fa24:	53                   	push   ebx
c000fa25:	e8 de fe ff ff       	call   c000f908 <Phys::getPageState(unsigned long)>
c000fa2a:	5a                   	pop    edx
c000fa2b:	84 c0                	test   al,al
c000fa2d:	75 8a                	jne    c000f9b9 <Phys::allocatePage()+0x24>
c000fa2f:	6a 01                	push   0x1
c000fa31:	53                   	push   ebx
c000fa32:	e8 9f fe ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fa37:	5a                   	pop    edx
c000fa38:	a1 10 de 02 c0       	mov    eax,ds:0xc002de10
c000fa3d:	59                   	pop    ecx
c000fa3e:	40                   	inc    eax
c000fa3f:	8b 15 04 de 02 c0    	mov    edx,DWORD PTR ds:0xc002de04
c000fa45:	a3 10 de 02 c0       	mov    ds:0xc002de10,eax
c000fa4a:	c1 e2 0c             	shl    edx,0xc
c000fa4d:	52                   	push   edx
c000fa4e:	ff 35 14 de 02 c0    	push   DWORD PTR ds:0xc002de14
c000fa54:	50                   	push   eax
c000fa55:	68 42 a2 02 c0       	push   0xc002a242
c000fa5a:	e8 3e 2d 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c000fa5f:	a1 04 de 02 c0       	mov    eax,ds:0xc002de04
c000fa64:	83 c4 10             	add    esp,0x10
c000fa67:	c1 e0 0c             	shl    eax,0xc
c000fa6a:	83 c4 14             	add    esp,0x14
c000fa6d:	5b                   	pop    ebx
c000fa6e:	5e                   	pop    esi
c000fa6f:	c3                   	ret    
c000fa70:	83 ec 08             	sub    esp,0x8
c000fa73:	89 c2                	mov    edx,eax
c000fa75:	6a 01                	push   0x1
c000fa77:	c1 ea 0c             	shr    edx,0xc
c000fa7a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fa7e:	52                   	push   edx
c000fa7f:	e8 52 fe ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fa84:	83 c4 10             	add    esp,0x10
c000fa87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa8b:	eb dd                	jmp    c000fa6a <Phys::allocatePage()+0xd5>

c000fa8d <Phys::allocateContiguousPages(int)>:
c000fa8d:	57                   	push   edi
c000fa8e:	56                   	push   esi
c000fa8f:	53                   	push   ebx
c000fa90:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fa94:	fa                   	cli    
c000fa95:	ff 05 c8 f2 02 c0    	inc    DWORD PTR ds:0xc002f2c8
c000fa9b:	31 db                	xor    ebx,ebx
c000fa9d:	85 db                	test   ebx,ebx
c000fa9f:	75 11                	jne    c000fab2 <Phys::allocateContiguousPages(int)+0x25>
c000faa1:	e8 ef fe ff ff       	call   c000f995 <Phys::allocatePage()>
c000faa6:	83 fe 01             	cmp    esi,0x1
c000faa9:	89 c7                	mov    edi,eax
c000faab:	74 21                	je     c000face <Phys::allocateContiguousPages(int)+0x41>
c000faad:	bb 01 00 00 00       	mov    ebx,0x1
c000fab2:	e8 de fe ff ff       	call   c000f995 <Phys::allocatePage()>
c000fab7:	89 da                	mov    edx,ebx
c000fab9:	c1 e2 0c             	shl    edx,0xc
c000fabc:	01 fa                	add    edx,edi
c000fabe:	39 c2                	cmp    edx,eax
c000fac0:	74 20                	je     c000fae2 <Phys::allocateContiguousPages(int)+0x55>
c000fac2:	bb 01 00 00 00       	mov    ebx,0x1
c000fac7:	89 c7                	mov    edi,eax
c000fac9:	83 fe 01             	cmp    esi,0x1
c000facc:	75 e4                	jne    c000fab2 <Phys::allocateContiguousPages(int)+0x25>
c000face:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c000fad3:	48                   	dec    eax
c000fad4:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c000fad9:	75 01                	jne    c000fadc <Phys::allocateContiguousPages(int)+0x4f>
c000fadb:	fb                   	sti    
c000fadc:	89 f8                	mov    eax,edi
c000fade:	5b                   	pop    ebx
c000fadf:	5e                   	pop    esi
c000fae0:	5f                   	pop    edi
c000fae1:	c3                   	ret    
c000fae2:	43                   	inc    ebx
c000fae3:	39 f3                	cmp    ebx,esi
c000fae5:	75 b6                	jne    c000fa9d <Phys::allocateContiguousPages(int)+0x10>
c000fae7:	eb e5                	jmp    c000face <Phys::allocateContiguousPages(int)+0x41>

c000fae9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fae9:	56                   	push   esi
c000faea:	53                   	push   ebx
c000faeb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000faef:	39 1d 08 de 02 c0    	cmp    DWORD PTR ds:0xc002de08,ebx
c000faf5:	73 06                	jae    c000fafd <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000faf7:	89 1d 08 de 02 c0    	mov    DWORD PTR ds:0xc002de08,ebx
c000fafd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb01:	c1 eb 0c             	shr    ebx,0xc
c000fb04:	c1 e8 0c             	shr    eax,0xc
c000fb07:	39 d8                	cmp    eax,ebx
c000fb09:	73 13                	jae    c000fb1e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fb0b:	6a 00                	push   0x0
c000fb0d:	8d 70 01             	lea    esi,[eax+0x1]
c000fb10:	50                   	push   eax
c000fb11:	e8 c0 fd ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fb16:	5a                   	pop    edx
c000fb17:	89 f0                	mov    eax,esi
c000fb19:	59                   	pop    ecx
c000fb1a:	39 f3                	cmp    ebx,esi
c000fb1c:	75 ed                	jne    c000fb0b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fb1e:	5b                   	pop    ebx
c000fb1f:	5e                   	pop    esi
c000fb20:	c3                   	ret    

c000fb21 <Phys::physicalMemorySetup(unsigned int)>:
c000fb21:	55                   	push   ebp
c000fb22:	57                   	push   edi
c000fb23:	56                   	push   esi
c000fb24:	53                   	push   ebx
c000fb25:	83 ec 40             	sub    esp,0x40
c000fb28:	6a 30                	push   0x30
c000fb2a:	6a 00                	push   0x0
c000fb2c:	68 20 de 02 c0       	push   0xc002de20
c000fb31:	e8 1a 0c ff ff       	call   c0000750 <memset>
c000fb36:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fb3a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fb3f:	05 00 10 00 00       	add    eax,0x1000
c000fb44:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fb48:	5b                   	pop    ebx
c000fb49:	31 db                	xor    ebx,ebx
c000fb4b:	5e                   	pop    esi
c000fb4c:	50                   	push   eax
c000fb4d:	68 86 a2 02 c0       	push   0xc002a286
c000fb52:	e8 46 2c 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c000fb57:	83 c4 10             	add    esp,0x10
c000fb5a:	83 ec 08             	sub    esp,0x8
c000fb5d:	6a 01                	push   0x1
c000fb5f:	53                   	push   ebx
c000fb60:	43                   	inc    ebx
c000fb61:	e8 70 fd ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fb66:	83 c4 10             	add    esp,0x10
c000fb69:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fb6f:	75 e9                	jne    c000fb5a <Phys::physicalMemorySetup(unsigned int)+0x39>
c000fb71:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fb78:	66 85 c0             	test   ax,ax
c000fb7b:	0f 84 8e 01 00 00    	je     c000fd0f <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000fb81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fb85:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fb8d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fb91:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fb96:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fb9a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fba2:	eb 15                	jmp    c000fbb9 <Phys::physicalMemorySetup(unsigned int)+0x98>
c000fba4:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fba8:	83 c3 18             	add    ebx,0x18
c000fbab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fbaf:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fbb3:	0f 84 66 01 00 00    	je     c000fd1f <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000fbb9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fbbc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fbbf:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fbc2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fbc6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fbca:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fbcc:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fbcf:	01 f0                	add    eax,esi
c000fbd1:	55                   	push   ebp
c000fbd2:	11 fa                	adc    edx,edi
c000fbd4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fbd8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fbdc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fbe0:	56                   	push   esi
c000fbe1:	68 c8 a2 02 c0       	push   0xc002a2c8
c000fbe6:	e8 b2 2b 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c000fbeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fbef:	83 c4 10             	add    esp,0x10
c000fbf2:	09 f8                	or     eax,edi
c000fbf4:	0f 85 25 01 00 00    	jne    c000fd1f <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000fbfa:	4d                   	dec    ebp
c000fbfb:	75 a7                	jne    c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fbfd:	ba 00 00 08 00       	mov    edx,0x80000
c000fc02:	89 c1                	mov    ecx,eax
c000fc04:	39 f2                	cmp    edx,esi
c000fc06:	19 f9                	sbb    ecx,edi
c000fc08:	0f 82 a7 00 00 00    	jb     c000fcb5 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000fc0e:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fc12:	89 c1                	mov    ecx,eax
c000fc14:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fc18:	0f 83 97 00 00 00    	jae    c000fcb5 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000fc1e:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fc23:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fc27:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fc2b:	39 fa                	cmp    edx,edi
c000fc2d:	19 e8                	sbb    eax,ebp
c000fc2f:	0f 82 14 01 00 00    	jb     c000fd49 <Phys::physicalMemorySetup(unsigned int)+0x228>
c000fc35:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fc39:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fc3d:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fc43:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fc48:	83 d5 ff             	adc    ebp,0xffffffff
c000fc4b:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fc4f:	31 c0                	xor    eax,eax
c000fc51:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fc55:	39 fa                	cmp    edx,edi
c000fc57:	89 c1                	mov    ecx,eax
c000fc59:	19 e9                	sbb    ecx,ebp
c000fc5b:	0f 83 43 ff ff ff    	jae    c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fc61:	be 00 00 08 00       	mov    esi,0x80000
c000fc66:	50                   	push   eax
c000fc67:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fc6b:	57                   	push   edi
c000fc6c:	56                   	push   esi
c000fc6d:	68 ec a2 02 c0       	push   0xc002a2ec
c000fc72:	e8 26 2b 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c000fc77:	5a                   	pop    edx
c000fc78:	59                   	pop    ecx
c000fc79:	57                   	push   edi
c000fc7a:	56                   	push   esi
c000fc7b:	e8 69 fe ff ff       	call   c000fae9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fc80:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fc84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fc88:	83 c4 0c             	add    esp,0xc
c000fc8b:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fc8f:	03 05 14 de 02 c0    	add    eax,DWORD PTR ds:0xc002de14
c000fc95:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fc9c:	a3 14 de 02 c0       	mov    ds:0xc002de14,eax
c000fca1:	52                   	push   edx
c000fca2:	50                   	push   eax
c000fca3:	68 ac a2 02 c0       	push   0xc002a2ac
c000fca8:	e8 f0 2a 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c000fcad:	83 c4 10             	add    esp,0x10
c000fcb0:	e9 ef fe ff ff       	jmp    c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fcb5:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fcb9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fcbd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fcc1:	39 ea                	cmp    edx,ebp
c000fcc3:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fcc7:	0f 82 d7 fe ff ff    	jb     c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fccd:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fcd2:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000fcd6:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000fcda:	0f 83 c4 fe ff ff    	jae    c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fce0:	39 ee                	cmp    esi,ebp
c000fce2:	89 f8                	mov    eax,edi
c000fce4:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000fce8:	0f 83 78 ff ff ff    	jae    c000fc66 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000fcee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fcf2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fcf6:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fcfa:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000fcfe:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fd02:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fd06:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fd0a:	e9 57 ff ff ff       	jmp    c000fc66 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000fd0f:	83 ec 0c             	sub    esp,0xc
c000fd12:	68 9e a2 02 c0       	push   0xc002a29e
c000fd17:	e8 6d a2 00 00       	call   c0019f89 <Krnl::panic(char const*)>
c000fd1c:	83 c4 10             	add    esp,0x10
c000fd1f:	bb 40 01 00 00       	mov    ebx,0x140
c000fd24:	83 ec 08             	sub    esp,0x8
c000fd27:	6a 00                	push   0x0
c000fd29:	53                   	push   ebx
c000fd2a:	43                   	inc    ebx
c000fd2b:	e8 a6 fb ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fd30:	ff 05 14 de 02 c0    	inc    DWORD PTR ds:0xc002de14
c000fd36:	83 c4 10             	add    esp,0x10
c000fd39:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fd3f:	75 e3                	jne    c000fd24 <Phys::physicalMemorySetup(unsigned int)+0x203>
c000fd41:	83 c4 3c             	add    esp,0x3c
c000fd44:	5b                   	pop    ebx
c000fd45:	5e                   	pop    esi
c000fd46:	5f                   	pop    edi
c000fd47:	5d                   	pop    ebp
c000fd48:	c3                   	ret    
c000fd49:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000fd51:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fd59:	e9 d7 fe ff ff       	jmp    c000fc35 <Phys::physicalMemorySetup(unsigned int)+0x114>

c000fd5e <Pipe::isAtty()>:
c000fd5e:	31 c0                	xor    eax,eax
c000fd60:	c3                   	ret    
c000fd61:	90                   	nop

c000fd62 <Pipe::~Pipe()>:
c000fd62:	83 ec 0c             	sub    esp,0xc
c000fd65:	ba 58 a3 02 c0       	mov    edx,0xc002a358
c000fd6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd6e:	89 10                	mov    DWORD PTR [eax],edx
c000fd70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd74:	83 ec 0c             	sub    esp,0xc
c000fd77:	50                   	push   eax
c000fd78:	e8 41 12 00 00       	call   c0010fbe <UnixFile::~UnixFile()>
c000fd7d:	83 c4 10             	add    esp,0x10
c000fd80:	90                   	nop
c000fd81:	83 c4 0c             	add    esp,0xc
c000fd84:	c3                   	ret    
c000fd85:	90                   	nop

c000fd86 <Pipe::~Pipe()>:
c000fd86:	83 ec 0c             	sub    esp,0xc
c000fd89:	83 ec 0c             	sub    esp,0xc
c000fd8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd90:	e8 cd ff ff ff       	call   c000fd62 <Pipe::~Pipe()>
c000fd95:	83 c4 10             	add    esp,0x10
c000fd98:	83 ec 08             	sub    esp,0x8
c000fd9b:	6a 20                	push   0x20
c000fd9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fda1:	e8 1f 29 00 00       	call   c00126c5 <operator delete(void*, unsigned long)>
c000fda6:	83 c4 10             	add    esp,0x10
c000fda9:	83 c4 0c             	add    esp,0xc
c000fdac:	c3                   	ret    
c000fdad:	90                   	nop

c000fdae <Pipe::read(unsigned long long, void*, int*)>:
c000fdae:	55                   	push   ebp
c000fdaf:	57                   	push   edi
c000fdb0:	56                   	push   esi
c000fdb1:	53                   	push   ebx
c000fdb2:	83 ec 1c             	sub    esp,0x1c
c000fdb5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fdb9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fdbd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fdc1:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fdc4:	89 c8                	mov    eax,ecx
c000fdc6:	99                   	cdq    
c000fdc7:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fdcb:	74 24                	je     c000fdf1 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fdcd:	39 f9                	cmp    ecx,edi
c000fdcf:	89 d1                	mov    ecx,edx
c000fdd1:	19 f1                	sbb    ecx,esi
c000fdd3:	73 1c                	jae    c000fdf1 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fdd5:	fa                   	cli    
c000fdd6:	ff 05 c8 f2 02 c0    	inc    DWORD PTR ds:0xc002f2c8
c000fddc:	e8 3a dd 00 00       	call   c001db1b <schedule()>
c000fde1:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c000fde6:	48                   	dec    eax
c000fde7:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c000fdec:	75 d3                	jne    c000fdc1 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fdee:	fb                   	sti    
c000fdef:	eb d0                	jmp    c000fdc1 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fdf1:	39 f8                	cmp    eax,edi
c000fdf3:	89 d1                	mov    ecx,edx
c000fdf5:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fdf8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000fdfc:	19 f1                	sbb    ecx,esi
c000fdfe:	73 07                	jae    c000fe07 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000fe00:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe03:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fe07:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000fe0a:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000fe0d:	29 f7                	sub    edi,esi
c000fe0f:	89 f8                	mov    eax,edi
c000fe11:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000fe15:	99                   	cdq    
c000fe16:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000fe19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe1d:	19 d0                	sbb    eax,edx
c000fe1f:	73 07                	jae    c000fe28 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000fe21:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000fe24:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe28:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000fe2b:	89 ea                	mov    edx,ebp
c000fe2d:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000fe31:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000fe36:	74 0d                	je     c000fe45 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000fe38:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000fe3b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000fe3f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe43:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe45:	85 d2                	test   edx,edx
c000fe47:	74 11                	je     c000fe5a <Pipe::read(unsigned long long, void*, int*)+0xac>
c000fe49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe4d:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000fe50:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000fe54:	89 d1                	mov    ecx,edx
c000fe56:	89 c7                	mov    edi,eax
c000fe58:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe5a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fe5d:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000fe60:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fe63:	99                   	cdq    
c000fe64:	89 f7                	mov    edi,esi
c000fe66:	03 04 24             	add    eax,DWORD PTR [esp]
c000fe69:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000fe6d:	c1 ff 1f             	sar    edi,0x1f
c000fe70:	57                   	push   edi
c000fe71:	56                   	push   esi
c000fe72:	52                   	push   edx
c000fe73:	50                   	push   eax
c000fe74:	e8 7b 6b 01 00       	call   c00269f4 <__umoddi3>
c000fe79:	83 c4 10             	add    esp,0x10
c000fe7c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000fe7f:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fe84:	75 10                	jne    c000fe96 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000fe86:	83 ec 0c             	sub    esp,0xc
c000fe89:	68 15 a3 02 c0       	push   0xc002a315
c000fe8e:	e8 f6 a0 00 00       	call   c0019f89 <Krnl::panic(char const*)>
c000fe93:	83 c4 10             	add    esp,0x10
c000fe96:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fe9a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000fe9d:	89 10                	mov    DWORD PTR [eax],edx
c000fe9f:	83 c4 1c             	add    esp,0x1c
c000fea2:	31 c0                	xor    eax,eax
c000fea4:	5b                   	pop    ebx
c000fea5:	5e                   	pop    esi
c000fea6:	5f                   	pop    edi
c000fea7:	5d                   	pop    ebp
c000fea8:	c3                   	ret    
c000fea9:	90                   	nop

c000feaa <Pipe::write(unsigned long long, void*, int*)>:
c000feaa:	55                   	push   ebp
c000feab:	57                   	push   edi
c000feac:	56                   	push   esi
c000fead:	53                   	push   ebx
c000feae:	83 ec 1c             	sub    esp,0x1c
c000feb1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000feb5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000feb9:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000febc:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fec0:	89 04 24             	mov    DWORD PTR [esp],eax
c000fec3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fec7:	89 d8                	mov    eax,ebx
c000fec9:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000fecc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fed0:	89 d6                	mov    esi,edx
c000fed2:	89 d7                	mov    edi,edx
c000fed4:	c1 ff 1f             	sar    edi,0x1f
c000fed7:	03 34 24             	add    esi,DWORD PTR [esp]
c000feda:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000fede:	c1 f8 1f             	sar    eax,0x1f
c000fee1:	39 f3                	cmp    ebx,esi
c000fee3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fee7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000feeb:	19 f8                	sbb    eax,edi
c000feed:	b8 01 00 00 00       	mov    eax,0x1
c000fef2:	72 6e                	jb     c000ff62 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000fef4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000fef7:	01 d0                	add    eax,edx
c000fef9:	99                   	cdq    
c000fefa:	f7 fb                	idiv   ebx
c000fefc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff00:	29 d3                	sub    ebx,edx
c000ff02:	89 d7                	mov    edi,edx
c000ff04:	89 de                	mov    esi,ebx
c000ff06:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000ff09:	c1 fb 1f             	sar    ebx,0x1f
c000ff0c:	39 f2                	cmp    edx,esi
c000ff0e:	19 d8                	sbb    eax,ebx
c000ff10:	b8 00 00 00 00       	mov    eax,0x0
c000ff15:	72 04                	jb     c000ff1b <Pipe::write(unsigned long long, void*, int*)+0x71>
c000ff17:	89 d0                	mov    eax,edx
c000ff19:	29 f0                	sub    eax,esi
c000ff1b:	89 d3                	mov    ebx,edx
c000ff1d:	29 c3                	sub    ebx,eax
c000ff1f:	74 0b                	je     c000ff2c <Pipe::write(unsigned long long, void*, int*)+0x82>
c000ff21:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000ff24:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ff28:	89 d9                	mov    ecx,ebx
c000ff2a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff2c:	85 c0                	test   eax,eax
c000ff2e:	74 0d                	je     c000ff3d <Pipe::write(unsigned long long, void*, int*)+0x93>
c000ff30:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ff34:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000ff37:	89 de                	mov    esi,ebx
c000ff39:	89 c1                	mov    ecx,eax
c000ff3b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff3d:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000ff40:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ff45:	75 10                	jne    c000ff57 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000ff47:	83 ec 0c             	sub    esp,0xc
c000ff4a:	68 31 a3 02 c0       	push   0xc002a331
c000ff4f:	e8 35 a0 00 00       	call   c0019f89 <Krnl::panic(char const*)>
c000ff54:	83 c4 10             	add    esp,0x10
c000ff57:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ff5b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000ff5e:	89 08                	mov    DWORD PTR [eax],ecx
c000ff60:	31 c0                	xor    eax,eax
c000ff62:	83 c4 1c             	add    esp,0x1c
c000ff65:	5b                   	pop    ebx
c000ff66:	5e                   	pop    esi
c000ff67:	5f                   	pop    edi
c000ff68:	5d                   	pop    ebp
c000ff69:	c3                   	ret    

c000ff6a <Pipe::Pipe(int)>:
c000ff6a:	83 ec 0c             	sub    esp,0xc
c000ff6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff71:	83 ec 08             	sub    esp,0x8
c000ff74:	6a 00                	push   0x0
c000ff76:	50                   	push   eax
c000ff77:	e8 60 0e 00 00       	call   c0010ddc <UnixFile::UnixFile(int)>
c000ff7c:	83 c4 10             	add    esp,0x10
c000ff7f:	ba 58 a3 02 c0       	mov    edx,0xc002a358
c000ff84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff88:	89 10                	mov    DWORD PTR [eax],edx
c000ff8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ff92:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ff95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff99:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ffa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffa4:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000ffab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ffaf:	83 ec 0c             	sub    esp,0xc
c000ffb2:	50                   	push   eax
c000ffb3:	e8 e1 f5 ff ff       	call   c000f599 <malloc>
c000ffb8:	83 c4 10             	add    esp,0x10
c000ffbb:	89 c2                	mov    edx,eax
c000ffbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffc1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ffc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffc8:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000ffcc:	90                   	nop
c000ffcd:	83 c4 0c             	add    esp,0xc
c000ffd0:	c3                   	ret    
c000ffd1:	90                   	nop

c000ffd2 <VgaText::isAtty()>:
c000ffd2:	b0 01                	mov    al,0x1
c000ffd4:	c3                   	ret    
c000ffd5:	90                   	nop

c000ffd6 <VgaText::~VgaText()>:
c000ffd6:	83 ec 0c             	sub    esp,0xc
c000ffd9:	ba e0 a3 02 c0       	mov    edx,0xc002a3e0
c000ffde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffe2:	89 10                	mov    DWORD PTR [eax],edx
c000ffe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffe8:	83 ec 0c             	sub    esp,0xc
c000ffeb:	50                   	push   eax
c000ffec:	e8 cd 0f 00 00       	call   c0010fbe <UnixFile::~UnixFile()>
c000fff1:	83 c4 10             	add    esp,0x10
c000fff4:	90                   	nop
c000fff5:	83 c4 0c             	add    esp,0xc
c000fff8:	c3                   	ret    
c000fff9:	90                   	nop

c000fffa <VgaText::~VgaText()>:
c000fffa:	83 ec 0c             	sub    esp,0xc
c000fffd:	83 ec 0c             	sub    esp,0xc
c0010000:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010004:	e8 cd ff ff ff       	call   c000ffd6 <VgaText::~VgaText()>
c0010009:	83 c4 10             	add    esp,0x10
c001000c:	83 ec 08             	sub    esp,0x8
c001000f:	68 c4 02 00 00       	push   0x2c4
c0010014:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010018:	e8 a8 26 00 00       	call   c00126c5 <operator delete(void*, unsigned long)>
c001001d:	83 c4 10             	add    esp,0x10
c0010020:	83 c4 0c             	add    esp,0xc
c0010023:	c3                   	ret    

c0010024 <VgaText::read(unsigned long long, void*, int*)>:
c0010024:	83 ec 10             	sub    esp,0x10
c0010027:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001002b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001002f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010033:	e8 32 5c 00 00       	call   c0015c6a <readKeyboard(VgaText*, char*, unsigned long)>
c0010038:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001003c:	89 02                	mov    DWORD PTR [edx],eax
c001003e:	31 c0                	xor    eax,eax
c0010040:	83 c4 1c             	add    esp,0x1c
c0010043:	c3                   	ret    

c0010044 <setTerminalScrollLock(bool)>:
c0010044:	c3                   	ret    

c0010045 <addToTerminalCycle(VgaText*)>:
c0010045:	8b 15 80 de 02 c0    	mov    edx,DWORD PTR ds:0xc002de80
c001004b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001004f:	85 d2                	test   edx,edx
c0010051:	75 09                	jne    c001005c <addToTerminalCycle(VgaText*)+0x17>
c0010053:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c0010056:	a3 80 de 02 c0       	mov    ds:0xc002de80,eax
c001005b:	c3                   	ret    
c001005c:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c001005f:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0010062:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c0010065:	c3                   	ret    

c0010066 <installVgaTextImplementation()>:
c0010066:	83 ec 10             	sub    esp,0x10
c0010069:	6a 20                	push   0x20
c001006b:	6a 00                	push   0x0
c001006d:	68 60 de 02 c0       	push   0xc002de60
c0010072:	e8 d9 06 ff ff       	call   c0000750 <memset>
c0010077:	83 c4 1c             	add    esp,0x1c
c001007a:	c3                   	ret    

c001007b <scrollTerminalScrollLock(int)>:
c001007b:	c3                   	ret    

c001007c <VgaText::updateTitle()>:
c001007c:	53                   	push   ebx
c001007d:	31 c0                	xor    eax,eax
c001007f:	83 ec 58             	sub    esp,0x58
c0010082:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010086:	89 e1                	mov    ecx,esp
c0010088:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c001008c:	40                   	inc    eax
c001008d:	83 f8 50             	cmp    eax,0x50
c0010090:	75 f6                	jne    c0010088 <VgaText::updateTitle()+0xc>
c0010092:	31 c0                	xor    eax,eax
c0010094:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c001009b:	84 db                	test   bl,bl
c001009d:	74 06                	je     c00100a5 <VgaText::updateTitle()+0x29>
c001009f:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c00100a2:	40                   	inc    eax
c00100a3:	eb ef                	jmp    c0010094 <VgaText::updateTitle()+0x18>
c00100a5:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c00100a8:	85 c0                	test   eax,eax
c00100aa:	74 09                	je     c00100b5 <VgaText::updateTitle()+0x39>
c00100ac:	53                   	push   ebx
c00100ad:	53                   	push   ebx
c00100ae:	51                   	push   ecx
c00100af:	52                   	push   edx
c00100b0:	ff d0                	call   eax
c00100b2:	83 c4 10             	add    esp,0x10
c00100b5:	83 c4 58             	add    esp,0x58
c00100b8:	5b                   	pop    ebx
c00100b9:	c3                   	ret    

c00100ba <VgaText::load()>:
c00100ba:	53                   	push   ebx
c00100bb:	31 c0                	xor    eax,eax
c00100bd:	83 ec 58             	sub    esp,0x58
c00100c0:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00100c4:	89 e2                	mov    edx,esp
c00100c6:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00100ca:	40                   	inc    eax
c00100cb:	83 f8 50             	cmp    eax,0x50
c00100ce:	75 f6                	jne    c00100c6 <VgaText::load()+0xc>
c00100d0:	31 c0                	xor    eax,eax
c00100d2:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c00100d9:	84 c9                	test   cl,cl
c00100db:	74 06                	je     c00100e3 <VgaText::load()+0x29>
c00100dd:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00100e0:	40                   	inc    eax
c00100e1:	eb ef                	jmp    c00100d2 <VgaText::load()+0x18>
c00100e3:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c00100e6:	85 c0                	test   eax,eax
c00100e8:	74 09                	je     c00100f3 <VgaText::load()+0x39>
c00100ea:	51                   	push   ecx
c00100eb:	51                   	push   ecx
c00100ec:	52                   	push   edx
c00100ed:	53                   	push   ebx
c00100ee:	ff d0                	call   eax
c00100f0:	83 c4 10             	add    esp,0x10
c00100f3:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c00100f6:	85 c0                	test   eax,eax
c00100f8:	74 09                	je     c0010103 <VgaText::load()+0x49>
c00100fa:	83 ec 0c             	sub    esp,0xc
c00100fd:	53                   	push   ebx
c00100fe:	ff d0                	call   eax
c0010100:	83 c4 10             	add    esp,0x10
c0010103:	83 c4 58             	add    esp,0x58
c0010106:	5b                   	pop    ebx
c0010107:	c3                   	ret    

c0010108 <VgaText::updateCursor()>:
c0010108:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001010c:	39 05 84 de 02 c0    	cmp    DWORD PTR ds:0xc002de84,eax
c0010112:	75 09                	jne    c001011d <VgaText::updateCursor()+0x15>
c0010114:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c0010117:	85 c0                	test   eax,eax
c0010119:	74 02                	je     c001011d <VgaText::updateCursor()+0x15>
c001011b:	ff e0                	jmp    eax
c001011d:	c3                   	ret    

c001011e <VgaText::doANSI_SGR(int)>:
c001011e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010122:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010126:	85 d2                	test   edx,edx
c0010128:	75 0b                	jne    c0010135 <VgaText::doANSI_SGR(int)+0x17>
c001012a:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c001012d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010130:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010133:	eb 59                	jmp    c001018e <VgaText::doANSI_SGR(int)+0x70>
c0010135:	83 fa 07             	cmp    edx,0x7
c0010138:	75 0b                	jne    c0010145 <VgaText::doANSI_SGR(int)+0x27>
c001013a:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001013d:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010140:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010143:	eb 49                	jmp    c001018e <VgaText::doANSI_SGR(int)+0x70>
c0010145:	83 fa 1b             	cmp    edx,0x1b
c0010148:	74 e0                	je     c001012a <VgaText::doANSI_SGR(int)+0xc>
c001014a:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001014d:	83 f9 07             	cmp    ecx,0x7
c0010150:	77 09                	ja     c001015b <VgaText::doANSI_SGR(int)+0x3d>
c0010152:	8b 14 8d 20 cd 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd32e0]
c0010159:	eb 20                	jmp    c001017b <VgaText::doANSI_SGR(int)+0x5d>
c001015b:	8d 4a d8             	lea    ecx,[edx-0x28]
c001015e:	83 f9 07             	cmp    ecx,0x7
c0010161:	77 09                	ja     c001016c <VgaText::doANSI_SGR(int)+0x4e>
c0010163:	8b 14 8d 20 cd 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd32e0]
c001016a:	eb 22                	jmp    c001018e <VgaText::doANSI_SGR(int)+0x70>
c001016c:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001016f:	83 f9 07             	cmp    ecx,0x7
c0010172:	77 0b                	ja     c001017f <VgaText::doANSI_SGR(int)+0x61>
c0010174:	8b 14 95 d8 cb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3428]
c001017b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001017e:	c3                   	ret    
c001017f:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010182:	83 f9 07             	cmp    ecx,0x7
c0010185:	77 0a                	ja     c0010191 <VgaText::doANSI_SGR(int)+0x73>
c0010187:	8b 14 95 b0 cb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3450]
c001018e:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010191:	c3                   	ret    

c0010192 <VgaText::setDefaultBgColour(VgaColour)>:
c0010192:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010196:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001019a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001019d:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00101a0:	c3                   	ret    
c00101a1:	90                   	nop

c00101a2 <VgaText::setDefaultFgColour(VgaColour)>:
c00101a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101aa:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00101ad:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00101b0:	c3                   	ret    
c00101b1:	90                   	nop

c00101b2 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00101b2:	53                   	push   ebx
c00101b3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00101b7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00101bb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00101bf:	51                   	push   ecx
c00101c0:	e8 cd ff ff ff       	call   c0010192 <VgaText::setDefaultBgColour(VgaColour)>
c00101c5:	58                   	pop    eax
c00101c6:	5a                   	pop    edx
c00101c7:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00101cb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00101cf:	5b                   	pop    ebx
c00101d0:	eb d0                	jmp    c00101a2 <VgaText::setDefaultFgColour(VgaColour)>

c00101d2 <VgaText::setTitleTextColour(VgaColour)>:
c00101d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101da:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00101dd:	e9 9a fe ff ff       	jmp    c001007c <VgaText::updateTitle()>

c00101e2 <VgaText::setTitleColour(VgaColour)>:
c00101e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101ea:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00101ed:	e9 8a fe ff ff       	jmp    c001007c <VgaText::updateTitle()>

c00101f2 <VgaText::setTitle(char*)>:
c00101f2:	53                   	push   ebx
c00101f3:	83 ec 10             	sub    esp,0x10
c00101f6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00101fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101fe:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c0010204:	50                   	push   eax
c0010205:	e8 02 06 ff ff       	call   c000080c <strcpy>
c001020a:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001020e:	83 c4 18             	add    esp,0x18
c0010211:	5b                   	pop    ebx
c0010212:	e9 65 fe ff ff       	jmp    c001007c <VgaText::updateTitle()>
c0010217:	90                   	nop

c0010218 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010218:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001021c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010221:	83 e0 0f             	and    eax,0xf
c0010224:	c1 e2 04             	shl    edx,0x4
c0010227:	09 d0                	or     eax,edx
c0010229:	c3                   	ret    

c001022a <VgaText::scrollScreen()>:
c001022a:	55                   	push   ebp
c001022b:	b9 01 00 00 00       	mov    ecx,0x1
c0010230:	57                   	push   edi
c0010231:	56                   	push   esi
c0010232:	53                   	push   ebx
c0010233:	83 ec 0c             	sub    esp,0xc
c0010236:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001023a:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0010240:	31 ff                	xor    edi,edi
c0010242:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0010245:	83 f9 17             	cmp    ecx,0x17
c0010248:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c001024b:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0010252:	75 27                	jne    c001027b <VgaText::scrollScreen()+0x51>
c0010254:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010257:	01 f5                	add    ebp,esi
c0010259:	f7 c7 01 00 00 00    	test   edi,0x1
c001025f:	74 16                	je     c0010277 <VgaText::scrollScreen()+0x4d>
c0010261:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010265:	50                   	push   eax
c0010266:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c001026a:	50                   	push   eax
c001026b:	e8 a8 ff ff ff       	call   c0010218 <VgaText::combineColours(unsigned char, unsigned char)>
c0010270:	5a                   	pop    edx
c0010271:	5a                   	pop    edx
c0010272:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0010275:	eb 04                	jmp    c001027b <VgaText::scrollScreen()+0x51>
c0010277:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c001027b:	47                   	inc    edi
c001027c:	46                   	inc    esi
c001027d:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010283:	75 bd                	jne    c0010242 <VgaText::scrollScreen()+0x18>
c0010285:	41                   	inc    ecx
c0010286:	83 f9 18             	cmp    ecx,0x18
c0010289:	75 af                	jne    c001023a <VgaText::scrollScreen()+0x10>
c001028b:	39 1d 84 de 02 c0    	cmp    DWORD PTR ds:0xc002de84,ebx
c0010291:	75 1b                	jne    c00102ae <VgaText::scrollScreen()+0x84>
c0010293:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010297:	74 05                	je     c001029e <VgaText::scrollScreen()+0x74>
c0010299:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c001029c:	eb 10                	jmp    c00102ae <VgaText::scrollScreen()+0x84>
c001029e:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c00102a1:	85 c0                	test   eax,eax
c00102a3:	74 09                	je     c00102ae <VgaText::scrollScreen()+0x84>
c00102a5:	83 ec 0c             	sub    esp,0xc
c00102a8:	53                   	push   ebx
c00102a9:	ff d0                	call   eax
c00102ab:	83 c4 10             	add    esp,0x10
c00102ae:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00102b2:	83 c4 0c             	add    esp,0xc
c00102b5:	5b                   	pop    ebx
c00102b6:	5e                   	pop    esi
c00102b7:	5f                   	pop    edi
c00102b8:	5d                   	pop    ebp
c00102b9:	e9 4a fe ff ff       	jmp    c0010108 <VgaText::updateCursor()>

c00102be <VgaText::combineCharAndColour(char, unsigned char)>:
c00102be:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00102c3:	c1 e0 08             	shl    eax,0x8
c00102c6:	89 c2                	mov    edx,eax
c00102c8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00102cd:	09 d0                	or     eax,edx
c00102cf:	c3                   	ret    

c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00102d0:	56                   	push   esi
c00102d1:	53                   	push   ebx
c00102d2:	51                   	push   ecx
c00102d3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00102d7:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00102dc:	50                   	push   eax
c00102dd:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00102e2:	50                   	push   eax
c00102e3:	e8 30 ff ff ff       	call   c0010218 <VgaText::combineColours(unsigned char, unsigned char)>
c00102e8:	5b                   	pop    ebx
c00102e9:	0f b6 c0             	movzx  eax,al
c00102ec:	5e                   	pop    esi
c00102ed:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00102f2:	50                   	push   eax
c00102f3:	53                   	push   ebx
c00102f4:	e8 c5 ff ff ff       	call   c00102be <VgaText::combineCharAndColour(char, unsigned char)>
c00102f9:	5a                   	pop    edx
c00102fa:	5e                   	pop    esi
c00102fb:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c00102fe:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010304:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010308:	0f b7 d2             	movzx  edx,dx
c001030b:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c001030f:	39 0d 84 de 02 c0    	cmp    DWORD PTR ds:0xc002de84,ecx
c0010315:	75 10                	jne    c0010327 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010317:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c001031a:	85 c0                	test   eax,eax
c001031c:	74 09                	je     c0010327 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c001031e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010322:	5a                   	pop    edx
c0010323:	5b                   	pop    ebx
c0010324:	5e                   	pop    esi
c0010325:	ff e0                	jmp    eax
c0010327:	58                   	pop    eax
c0010328:	5b                   	pop    ebx
c0010329:	5e                   	pop    esi
c001032a:	c3                   	ret    
c001032b:	90                   	nop

c001032c <VgaText::getCursorX()>:
c001032c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010330:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0010333:	c3                   	ret    

c0010334 <VgaText::getCursorY()>:
c0010334:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010338:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001033b:	c3                   	ret    

c001033c <VgaText::setCursor(int, int)>:
c001033c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010340:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010344:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0010347:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001034b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001034e:	e9 b5 fd ff ff       	jmp    c0010108 <VgaText::updateCursor()>

c0010353 <setActiveTerminal(VgaText*)>:
c0010353:	53                   	push   ebx
c0010354:	83 ec 08             	sub    esp,0x8
c0010357:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001035b:	85 db                	test   ebx,ebx
c001035d:	75 11                	jne    c0010370 <setActiveTerminal(VgaText*)+0x1d>
c001035f:	c7 44 24 10 6c a3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a36c
c0010367:	83 c4 08             	add    esp,0x8
c001036a:	5b                   	pop    ebx
c001036b:	e9 19 9c 00 00       	jmp    c0019f89 <Krnl::panic(char const*)>
c0010370:	a1 84 de 02 c0       	mov    eax,ds:0xc002de84
c0010375:	85 c0                	test   eax,eax
c0010377:	74 0c                	je     c0010385 <setActiveTerminal(VgaText*)+0x32>
c0010379:	83 ec 0c             	sub    esp,0xc
c001037c:	50                   	push   eax
c001037d:	e8 86 fd ff ff       	call   c0010108 <VgaText::updateCursor()>
c0010382:	83 c4 10             	add    esp,0x10
c0010385:	89 1d 84 de 02 c0    	mov    DWORD PTR ds:0xc002de84,ebx
c001038b:	51                   	push   ecx
c001038c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001038f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010392:	53                   	push   ebx
c0010393:	e8 a4 ff ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c0010398:	83 c4 10             	add    esp,0x10
c001039b:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c001039f:	75 07                	jne    c00103a8 <setActiveTerminal(VgaText*)+0x55>
c00103a1:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c00103a8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00103ac:	83 c4 08             	add    esp,0x8
c00103af:	5b                   	pop    ebx
c00103b0:	e9 05 fd ff ff       	jmp    c00100ba <VgaText::load()>

c00103b5 <doTerminalCycle()>:
c00103b5:	83 ec 18             	sub    esp,0x18
c00103b8:	a1 80 de 02 c0       	mov    eax,ds:0xc002de80
c00103bd:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00103c0:	50                   	push   eax
c00103c1:	a3 80 de 02 c0       	mov    ds:0xc002de80,eax
c00103c6:	e8 88 ff ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c00103cb:	83 c4 1c             	add    esp,0x1c
c00103ce:	c3                   	ret    
c00103cf:	90                   	nop

c00103d0 <VgaText::setCursorX(int)>:
c00103d0:	83 ec 10             	sub    esp,0x10
c00103d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103d7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00103da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103de:	50                   	push   eax
c00103df:	e8 58 ff ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00103e4:	83 c4 1c             	add    esp,0x1c
c00103e7:	c3                   	ret    

c00103e8 <VgaText::setCursorY(int)>:
c00103e8:	83 ec 10             	sub    esp,0x10
c00103eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00103f3:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00103f6:	50                   	push   eax
c00103f7:	e8 40 ff ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00103fc:	83 c4 1c             	add    esp,0x1c
c00103ff:	c3                   	ret    

c0010400 <VgaText::incrementCursor(bool)>:
c0010400:	56                   	push   esi
c0010401:	53                   	push   ebx
c0010402:	51                   	push   ecx
c0010403:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010407:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001040b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001040e:	40                   	inc    eax
c001040f:	83 f8 50             	cmp    eax,0x50
c0010412:	74 05                	je     c0010419 <VgaText::incrementCursor(bool)+0x19>
c0010414:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0010417:	eb 24                	jmp    c001043d <VgaText::incrementCursor(bool)+0x3d>
c0010419:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001041c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010423:	8d 50 01             	lea    edx,[eax+0x1]
c0010426:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010429:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001042c:	75 0f                	jne    c001043d <VgaText::incrementCursor(bool)+0x3d>
c001042e:	83 ec 0c             	sub    esp,0xc
c0010431:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010434:	53                   	push   ebx
c0010435:	e8 f0 fd ff ff       	call   c001022a <VgaText::scrollScreen()>
c001043a:	83 c4 10             	add    esp,0x10
c001043d:	89 f0                	mov    eax,esi
c001043f:	84 c0                	test   al,al
c0010441:	74 0c                	je     c001044f <VgaText::incrementCursor(bool)+0x4f>
c0010443:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010447:	5a                   	pop    edx
c0010448:	5b                   	pop    ebx
c0010449:	5e                   	pop    esi
c001044a:	e9 b9 fc ff ff       	jmp    c0010108 <VgaText::updateCursor()>
c001044f:	58                   	pop    eax
c0010450:	5b                   	pop    ebx
c0010451:	5e                   	pop    esi
c0010452:	c3                   	ret    
c0010453:	90                   	nop

c0010454 <VgaText::decrementCursor(bool)>:
c0010454:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010458:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001045c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001045f:	85 c0                	test   eax,eax
c0010461:	74 04                	je     c0010467 <VgaText::decrementCursor(bool)+0x13>
c0010463:	48                   	dec    eax
c0010464:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0010467:	84 c9                	test   cl,cl
c0010469:	74 09                	je     c0010474 <VgaText::decrementCursor(bool)+0x20>
c001046b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001046f:	e9 94 fc ff ff       	jmp    c0010108 <VgaText::updateCursor()>
c0010474:	c3                   	ret    
c0010475:	90                   	nop

c0010476 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010476:	53                   	push   ebx
c0010477:	83 ec 08             	sub    esp,0x8
c001047a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001047e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010482:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010486:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001048a:	3c 07                	cmp    al,0x7
c001048c:	75 2a                	jne    c00104b8 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c001048e:	a1 38 df 02 c0       	mov    eax,ds:0xc002df38
c0010493:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001049b:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c00104a3:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c00104ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00104af:	83 c4 08             	add    esp,0x8
c00104b2:	5b                   	pop    ebx
c00104b3:	e9 f2 30 00 00       	jmp    c00135aa <Buzzer::beep(int, int, bool)>
c00104b8:	3c 0d                	cmp    al,0xd
c00104ba:	75 09                	jne    c00104c5 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c00104bc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00104c3:	eb 2c                	jmp    c00104f1 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c00104c5:	3c 0a                	cmp    al,0xa
c00104c7:	75 31                	jne    c00104fa <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c00104c9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00104cc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00104d3:	8d 50 01             	lea    edx,[eax+0x1]
c00104d6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00104d9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00104dc:	75 0f                	jne    c00104ed <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c00104de:	83 ec 0c             	sub    esp,0xc
c00104e1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00104e4:	53                   	push   ebx
c00104e5:	e8 40 fd ff ff       	call   c001022a <VgaText::scrollScreen()>
c00104ea:	83 c4 10             	add    esp,0x10
c00104ed:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00104f1:	83 c4 08             	add    esp,0x8
c00104f4:	5b                   	pop    ebx
c00104f5:	e9 0e fc ff ff       	jmp    c0010108 <VgaText::updateCursor()>
c00104fa:	3c 08                	cmp    al,0x8
c00104fc:	75 25                	jne    c0010523 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c00104fe:	50                   	push   eax
c00104ff:	50                   	push   eax
c0010500:	6a 01                	push   0x1
c0010502:	53                   	push   ebx
c0010503:	e8 4c ff ff ff       	call   c0010454 <VgaText::decrementCursor(bool)>
c0010508:	5a                   	pop    edx
c0010509:	59                   	pop    ecx
c001050a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001050d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010510:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010513:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010516:	6a 20                	push   0x20
c0010518:	53                   	push   ebx
c0010519:	e8 b2 fd ff ff       	call   c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001051e:	83 c4 28             	add    esp,0x28
c0010521:	5b                   	pop    ebx
c0010522:	c3                   	ret    
c0010523:	83 ec 08             	sub    esp,0x8
c0010526:	0f be c0             	movsx  eax,al
c0010529:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001052c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001052f:	51                   	push   ecx
c0010530:	52                   	push   edx
c0010531:	50                   	push   eax
c0010532:	53                   	push   ebx
c0010533:	e8 98 fd ff ff       	call   c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010538:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c001053c:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010544:	83 c4 28             	add    esp,0x28
c0010547:	5b                   	pop    ebx
c0010548:	e9 b3 fe ff ff       	jmp    c0010400 <VgaText::incrementCursor(bool)>
c001054d:	90                   	nop

c001054e <VgaText::doUpdate()>:
c001054e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010552:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c0010555:	85 c0                	test   eax,eax
c0010557:	74 02                	je     c001055b <VgaText::doUpdate()+0xd>
c0010559:	ff e0                	jmp    eax
c001055b:	c3                   	ret    

c001055c <VgaText::puts(char const*, VgaColour, VgaColour)>:
c001055c:	55                   	push   ebp
c001055d:	31 ed                	xor    ebp,ebp
c001055f:	57                   	push   edi
c0010560:	56                   	push   esi
c0010561:	53                   	push   ebx
c0010562:	83 ec 1c             	sub    esp,0x1c
c0010565:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010569:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001056e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010575:	50                   	push   eax
c0010576:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001057b:	50                   	push   eax
c001057c:	e8 97 fc ff ff       	call   c0010218 <VgaText::combineColours(unsigned char, unsigned char)>
c0010581:	59                   	pop    ecx
c0010582:	0f b6 c0             	movzx  eax,al
c0010585:	5e                   	pop    esi
c0010586:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001058b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001058f:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010592:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010596:	0f b7 f6             	movzx  esi,si
c0010599:	01 f6                	add    esi,esi
c001059b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001059e:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00105a1:	84 c0                	test   al,al
c00105a3:	0f 84 fd 00 00 00    	je     c00106a6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c00105a9:	3c 0d                	cmp    al,0xd
c00105ab:	75 0c                	jne    c00105b9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c00105ad:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00105b4:	e9 e7 00 00 00       	jmp    c00106a0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00105b9:	3c 0a                	cmp    al,0xa
c00105bb:	75 47                	jne    c0010604 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c00105bd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00105c0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00105c7:	8d 48 01             	lea    ecx,[eax+0x1]
c00105ca:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00105cd:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c00105d0:	75 0f                	jne    c00105e1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c00105d2:	83 ec 0c             	sub    esp,0xc
c00105d5:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00105d8:	53                   	push   ebx
c00105d9:	e8 4c fc ff ff       	call   c001022a <VgaText::scrollScreen()>
c00105de:	83 c4 10             	add    esp,0x10
c00105e1:	83 ec 0c             	sub    esp,0xc
c00105e4:	31 ed                	xor    ebp,ebp
c00105e6:	53                   	push   ebx
c00105e7:	e8 1c fb ff ff       	call   c0010108 <VgaText::updateCursor()>
c00105ec:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00105f1:	83 c4 10             	add    esp,0x10
c00105f4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00105f7:	0f b7 f6             	movzx  esi,si
c00105fa:	01 f6                	add    esi,esi
c00105fc:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00105ff:	e9 9c 00 00 00       	jmp    c00106a0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010604:	3c 08                	cmp    al,0x8
c0010606:	75 35                	jne    c001063d <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010608:	56                   	push   esi
c0010609:	56                   	push   esi
c001060a:	6a 01                	push   0x1
c001060c:	53                   	push   ebx
c001060d:	e8 42 fe ff ff       	call   c0010454 <VgaText::decrementCursor(bool)>
c0010612:	58                   	pop    eax
c0010613:	5a                   	pop    edx
c0010614:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010617:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001061a:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001061d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010620:	6a 20                	push   0x20
c0010622:	53                   	push   ebx
c0010623:	e8 a8 fc ff ff       	call   c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010628:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001062d:	83 c4 20             	add    esp,0x20
c0010630:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010633:	0f b7 f6             	movzx  esi,si
c0010636:	01 f6                	add    esi,esi
c0010638:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001063b:	eb 63                	jmp    c00106a0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c001063d:	51                   	push   ecx
c001063e:	51                   	push   ecx
c001063f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010643:	50                   	push   eax
c0010644:	e8 75 fc ff ff       	call   c00102be <VgaText::combineCharAndColour(char, unsigned char)>
c0010649:	83 c4 10             	add    esp,0x10
c001064c:	66 89 06             	mov    WORD PTR [esi],ax
c001064f:	39 1d 84 de 02 c0    	cmp    DWORD PTR ds:0xc002de84,ebx
c0010655:	75 21                	jne    c0010678 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010657:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c001065a:	85 c0                	test   eax,eax
c001065c:	74 1a                	je     c0010678 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c001065e:	52                   	push   edx
c001065f:	52                   	push   edx
c0010660:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010663:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010666:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001066a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001066e:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010671:	51                   	push   ecx
c0010672:	53                   	push   ebx
c0010673:	ff d0                	call   eax
c0010675:	83 c4 20             	add    esp,0x20
c0010678:	83 c6 02             	add    esi,0x2
c001067b:	50                   	push   eax
c001067c:	50                   	push   eax
c001067d:	6a 00                	push   0x0
c001067f:	53                   	push   ebx
c0010680:	e8 7b fd ff ff       	call   c0010400 <VgaText::incrementCursor(bool)>
c0010685:	83 c4 10             	add    esp,0x10
c0010688:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c001068c:	75 0d                	jne    c001069b <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c001068e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010693:	0f b7 f6             	movzx  esi,si
c0010696:	01 f6                	add    esi,esi
c0010698:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001069b:	bd 01 00 00 00       	mov    ebp,0x1
c00106a0:	47                   	inc    edi
c00106a1:	e9 f8 fe ff ff       	jmp    c001059e <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c00106a6:	83 ec 0c             	sub    esp,0xc
c00106a9:	53                   	push   ebx
c00106aa:	e8 59 fa ff ff       	call   c0010108 <VgaText::updateCursor()>
c00106af:	83 c4 10             	add    esp,0x10
c00106b2:	89 e8                	mov    eax,ebp
c00106b4:	84 c0                	test   al,al
c00106b6:	74 0c                	je     c00106c4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c00106b8:	83 ec 0c             	sub    esp,0xc
c00106bb:	53                   	push   ebx
c00106bc:	e8 8d fe ff ff       	call   c001054e <VgaText::doUpdate()>
c00106c1:	83 c4 10             	add    esp,0x10
c00106c4:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00106cb:	83 c4 1c             	add    esp,0x1c
c00106ce:	5b                   	pop    ebx
c00106cf:	5e                   	pop    esi
c00106d0:	5f                   	pop    edi
c00106d1:	5d                   	pop    ebp
c00106d2:	c3                   	ret    
c00106d3:	90                   	nop

c00106d4 <VgaText::clearScreen()>:
c00106d4:	57                   	push   edi
c00106d5:	56                   	push   esi
c00106d6:	31 f6                	xor    esi,esi
c00106d8:	53                   	push   ebx
c00106d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106dd:	52                   	push   edx
c00106de:	6a 00                	push   0x0
c00106e0:	6a 00                	push   0x0
c00106e2:	53                   	push   ebx
c00106e3:	e8 54 fc ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00106e8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00106ef:	83 c4 10             	add    esp,0x10
c00106f2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00106f5:	7e 20                	jle    c0010717 <VgaText::clearScreen()+0x43>
c00106f7:	31 ff                	xor    edi,edi
c00106f9:	50                   	push   eax
c00106fa:	50                   	push   eax
c00106fb:	56                   	push   esi
c00106fc:	57                   	push   edi
c00106fd:	47                   	inc    edi
c00106fe:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010701:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010704:	6a 20                	push   0x20
c0010706:	53                   	push   ebx
c0010707:	e8 c4 fb ff ff       	call   c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001070c:	83 c4 20             	add    esp,0x20
c001070f:	83 ff 50             	cmp    edi,0x50
c0010712:	75 e5                	jne    c00106f9 <VgaText::clearScreen()+0x25>
c0010714:	46                   	inc    esi
c0010715:	eb db                	jmp    c00106f2 <VgaText::clearScreen()+0x1e>
c0010717:	83 ec 0c             	sub    esp,0xc
c001071a:	53                   	push   ebx
c001071b:	e8 2e fe ff ff       	call   c001054e <VgaText::doUpdate()>
c0010720:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010727:	83 c4 10             	add    esp,0x10
c001072a:	5b                   	pop    ebx
c001072b:	5e                   	pop    esi
c001072c:	5f                   	pop    edi
c001072d:	c3                   	ret    

c001072e <VgaText::putchar(char)>:
c001072e:	56                   	push   esi
c001072f:	53                   	push   ebx
c0010730:	83 ec 14             	sub    esp,0x14
c0010733:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010737:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001073b:	3c 5b                	cmp    al,0x5b
c001073d:	75 18                	jne    c0010757 <VgaText::putchar(char)+0x29>
c001073f:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010743:	74 1f                	je     c0010764 <VgaText::putchar(char)+0x36>
c0010745:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c001074b:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010752:	e9 bd 00 00 00       	jmp    c0010814 <VgaText::putchar(char)+0xe6>
c0010757:	3c 1b                	cmp    al,0x1b
c0010759:	75 09                	jne    c0010764 <VgaText::putchar(char)+0x36>
c001075b:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c001075f:	e9 b0 00 00 00       	jmp    c0010814 <VgaText::putchar(char)+0xe6>
c0010764:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010767:	84 c9                	test   cl,cl
c0010769:	0f 84 92 00 00 00    	je     c0010801 <VgaText::putchar(char)+0xd3>
c001076f:	8d 50 c0             	lea    edx,[eax-0x40]
c0010772:	80 fa 3e             	cmp    dl,0x3e
c0010775:	77 76                	ja     c00107ed <VgaText::putchar(char)+0xbf>
c0010777:	3c 6d                	cmp    al,0x6d
c0010779:	75 47                	jne    c00107c2 <VgaText::putchar(char)+0x94>
c001077b:	31 f6                	xor    esi,esi
c001077d:	31 d2                	xor    edx,edx
c001077f:	31 c0                	xor    eax,eax
c0010781:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010784:	7e 2d                	jle    c00107b3 <VgaText::putchar(char)+0x85>
c0010786:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c001078b:	80 fa 3b             	cmp    dl,0x3b
c001078e:	75 17                	jne    c00107a7 <VgaText::putchar(char)+0x79>
c0010790:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010794:	50                   	push   eax
c0010795:	53                   	push   ebx
c0010796:	e8 83 f9 ff ff       	call   c001011e <VgaText::doANSI_SGR(int)>
c001079b:	59                   	pop    ecx
c001079c:	31 d2                	xor    edx,edx
c001079e:	58                   	pop    eax
c001079f:	31 c0                	xor    eax,eax
c00107a1:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00107a5:	eb 09                	jmp    c00107b0 <VgaText::putchar(char)+0x82>
c00107a7:	6b c0 0a             	imul   eax,eax,0xa
c00107aa:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00107ae:	88 ca                	mov    dl,cl
c00107b0:	46                   	inc    esi
c00107b1:	eb ce                	jmp    c0010781 <VgaText::putchar(char)+0x53>
c00107b3:	84 d2                	test   dl,dl
c00107b5:	74 2e                	je     c00107e5 <VgaText::putchar(char)+0xb7>
c00107b7:	50                   	push   eax
c00107b8:	53                   	push   ebx
c00107b9:	e8 60 f9 ff ff       	call   c001011e <VgaText::doANSI_SGR(int)>
c00107be:	58                   	pop    eax
c00107bf:	5a                   	pop    edx
c00107c0:	eb 23                	jmp    c00107e5 <VgaText::putchar(char)+0xb7>
c00107c2:	3c 4a                	cmp    al,0x4a
c00107c4:	75 1f                	jne    c00107e5 <VgaText::putchar(char)+0xb7>
c00107c6:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00107ca:	75 19                	jne    c00107e5 <VgaText::putchar(char)+0xb7>
c00107cc:	83 ec 0c             	sub    esp,0xc
c00107cf:	53                   	push   ebx
c00107d0:	e8 ff fe ff ff       	call   c00106d4 <VgaText::clearScreen()>
c00107d5:	83 c4 0c             	add    esp,0xc
c00107d8:	6a 00                	push   0x0
c00107da:	6a 00                	push   0x0
c00107dc:	53                   	push   ebx
c00107dd:	e8 5a fb ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00107e2:	83 c4 10             	add    esp,0x10
c00107e5:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00107eb:	eb 27                	jmp    c0010814 <VgaText::putchar(char)+0xe6>
c00107ed:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c00107f0:	83 fa 0e             	cmp    edx,0xe
c00107f3:	7f 1f                	jg     c0010814 <VgaText::putchar(char)+0xe6>
c00107f5:	8d 4a 01             	lea    ecx,[edx+0x1]
c00107f8:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00107fb:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00107ff:	eb 13                	jmp    c0010814 <VgaText::putchar(char)+0xe6>
c0010801:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010804:	0f be c0             	movsx  eax,al
c0010807:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001080a:	50                   	push   eax
c001080b:	53                   	push   ebx
c001080c:	e8 65 fc ff ff       	call   c0010476 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010811:	83 c4 10             	add    esp,0x10
c0010814:	83 c4 14             	add    esp,0x14
c0010817:	5b                   	pop    ebx
c0010818:	5e                   	pop    esi
c0010819:	c3                   	ret    

c001081a <VgaText::putx(unsigned int)>:
c001081a:	57                   	push   edi
c001081b:	b9 11 00 00 00       	mov    ecx,0x11
c0010820:	56                   	push   esi
c0010821:	be 7a a3 02 c0       	mov    esi,0xc002a37a
c0010826:	53                   	push   ebx
c0010827:	83 ec 20             	sub    esp,0x20
c001082a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001082e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010832:	fc                   	cld    
c0010833:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010835:	be 08 00 00 00       	mov    esi,0x8
c001083a:	50                   	push   eax
c001083b:	50                   	push   eax
c001083c:	89 d8                	mov    eax,ebx
c001083e:	c1 e3 04             	shl    ebx,0x4
c0010841:	c1 e8 1c             	shr    eax,0x1c
c0010844:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010849:	50                   	push   eax
c001084a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001084e:	e8 db fe ff ff       	call   c001072e <VgaText::putchar(char)>
c0010853:	83 c4 10             	add    esp,0x10
c0010856:	4e                   	dec    esi
c0010857:	75 e1                	jne    c001083a <VgaText::putx(unsigned int)+0x20>
c0010859:	83 c4 20             	add    esp,0x20
c001085c:	5b                   	pop    ebx
c001085d:	5e                   	pop    esi
c001085e:	5f                   	pop    edi
c001085f:	c3                   	ret    

c0010860 <VgaText::puts(char const*)>:
c0010860:	53                   	push   ebx
c0010861:	83 ec 08             	sub    esp,0x8
c0010864:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010868:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001086b:	84 c0                	test   al,al
c001086d:	74 12                	je     c0010881 <VgaText::puts(char const*)+0x21>
c001086f:	43                   	inc    ebx
c0010870:	51                   	push   ecx
c0010871:	51                   	push   ecx
c0010872:	50                   	push   eax
c0010873:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010877:	e8 b2 fe ff ff       	call   c001072e <VgaText::putchar(char)>
c001087c:	83 c4 10             	add    esp,0x10
c001087f:	eb e7                	jmp    c0010868 <VgaText::puts(char const*)+0x8>
c0010881:	83 c4 08             	add    esp,0x8
c0010884:	5b                   	pop    ebx
c0010885:	c3                   	ret    

c0010886 <VgaText::VgaText(char const*)>:
c0010886:	57                   	push   edi
c0010887:	56                   	push   esi
c0010888:	53                   	push   ebx
c0010889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001088d:	83 ec 08             	sub    esp,0x8
c0010890:	6a 00                	push   0x0
c0010892:	50                   	push   eax
c0010893:	e8 44 05 00 00       	call   c0010ddc <UnixFile::UnixFile(int)>
c0010898:	83 c4 10             	add    esp,0x10
c001089b:	ba e0 a3 02 c0       	mov    edx,0xc002a3e0
c00108a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108a4:	89 10                	mov    DWORD PTR [eax],edx
c00108a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108aa:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00108b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108b5:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00108bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c0:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00108c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c8:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00108cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108d0:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00108d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108db:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00108e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108e6:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00108ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f1:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00108f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108fc:	8d 50 60             	lea    edx,[eax+0x60]
c00108ff:	bb 60 de 02 c0       	mov    ebx,0xc002de60
c0010904:	b8 08 00 00 00       	mov    eax,0x8
c0010909:	fc                   	cld    
c001090a:	89 d7                	mov    edi,edx
c001090c:	89 de                	mov    esi,ebx
c001090e:	89 c1                	mov    ecx,eax
c0010910:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010916:	05 82 00 00 00       	add    eax,0x82
c001091b:	83 ec 08             	sub    esp,0x8
c001091e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010922:	50                   	push   eax
c0010923:	e8 e4 fe fe ff       	call   c000080c <strcpy>
c0010928:	83 c4 10             	add    esp,0x10
c001092b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001092f:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c0010936:	83 ec 0c             	sub    esp,0xc
c0010939:	6a 01                	push   0x1
c001093b:	e8 df 08 00 00       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0010940:	83 c4 10             	add    esp,0x10
c0010943:	89 c2                	mov    edx,eax
c0010945:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010949:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001094c:	8b 1d 30 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002df30
c0010952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010956:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010959:	89 c6                	mov    esi,eax
c001095b:	e8 35 f0 ff ff       	call   c000f995 <Phys::allocatePage()>
c0010960:	68 05 0c 00 00       	push   0xc05
c0010965:	56                   	push   esi
c0010966:	50                   	push   eax
c0010967:	53                   	push   ebx
c0010968:	e8 05 11 00 00       	call   c0011a72 <VAS::mapPage(unsigned long, unsigned long, int)>
c001096d:	83 c4 10             	add    esp,0x10
c0010970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010974:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010977:	83 ec 04             	sub    esp,0x4
c001097a:	68 00 0f 00 00       	push   0xf00
c001097f:	6a 00                	push   0x0
c0010981:	50                   	push   eax
c0010982:	e8 c9 fd fe ff       	call   c0000750 <memset>
c0010987:	83 c4 10             	add    esp,0x10
c001098a:	83 ec 04             	sub    esp,0x4
c001098d:	6a 00                	push   0x0
c001098f:	6a 07                	push   0x7
c0010991:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010995:	e8 18 f8 ff ff       	call   c00101b2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001099a:	83 c4 10             	add    esp,0x10
c001099d:	83 ec 04             	sub    esp,0x4
c00109a0:	6a 00                	push   0x0
c00109a2:	6a 00                	push   0x0
c00109a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109a8:	e8 8f f9 ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00109ad:	83 c4 10             	add    esp,0x10
c00109b0:	83 ec 0c             	sub    esp,0xc
c00109b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109b7:	e8 18 fd ff ff       	call   c00106d4 <VgaText::clearScreen()>
c00109bc:	83 c4 10             	add    esp,0x10
c00109bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109c3:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c00109c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109cb:	05 02 01 00 00       	add    eax,0x102
c00109d0:	83 ec 04             	sub    esp,0x4
c00109d3:	68 96 00 00 00       	push   0x96
c00109d8:	6a 00                	push   0x0
c00109da:	50                   	push   eax
c00109db:	e8 70 fd fe ff       	call   c0000750 <memset>
c00109e0:	83 c4 10             	add    esp,0x10
c00109e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109e7:	05 98 01 00 00       	add    eax,0x198
c00109ec:	83 ec 04             	sub    esp,0x4
c00109ef:	68 2c 01 00 00       	push   0x12c
c00109f4:	6a 00                	push   0x0
c00109f6:	50                   	push   eax
c00109f7:	e8 54 fd fe ff       	call   c0000750 <memset>
c00109fc:	83 c4 10             	add    esp,0x10
c00109ff:	90                   	nop
c0010a00:	5b                   	pop    ebx
c0010a01:	5e                   	pop    esi
c0010a02:	5f                   	pop    edi
c0010a03:	c3                   	ret    

c0010a04 <VgaText::receiveKey(unsigned char)>:
c0010a04:	55                   	push   ebp
c0010a05:	57                   	push   edi
c0010a06:	56                   	push   esi
c0010a07:	53                   	push   ebx
c0010a08:	83 ec 1c             	sub    esp,0x1c
c0010a0b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010a0f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010a13:	84 db                	test   bl,bl
c0010a15:	0f 84 c9 00 00 00    	je     c0010ae4 <VgaText::receiveKey(unsigned char)+0xe0>
c0010a1b:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c0010a21:	80 fb 08             	cmp    bl,0x8
c0010a24:	75 2c                	jne    c0010a52 <VgaText::receiveKey(unsigned char)+0x4e>
c0010a26:	83 ec 0c             	sub    esp,0xc
c0010a29:	57                   	push   edi
c0010a2a:	e8 3d fd fe ff       	call   c000076c <strlen>
c0010a2f:	83 c4 10             	add    esp,0x10
c0010a32:	85 c0                	test   eax,eax
c0010a34:	74 41                	je     c0010a77 <VgaText::receiveKey(unsigned char)+0x73>
c0010a36:	50                   	push   eax
c0010a37:	50                   	push   eax
c0010a38:	6a 08                	push   0x8
c0010a3a:	56                   	push   esi
c0010a3b:	e8 ee fc ff ff       	call   c001072e <VgaText::putchar(char)>
c0010a40:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a43:	e8 24 fd fe ff       	call   c000076c <strlen>
c0010a48:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c0010a50:	eb 22                	jmp    c0010a74 <VgaText::receiveKey(unsigned char)+0x70>
c0010a52:	0f be c3             	movsx  eax,bl
c0010a55:	52                   	push   edx
c0010a56:	52                   	push   edx
c0010a57:	50                   	push   eax
c0010a58:	56                   	push   esi
c0010a59:	e8 d0 fc ff ff       	call   c001072e <VgaText::putchar(char)>
c0010a5e:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010a62:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010a67:	59                   	pop    ecx
c0010a68:	5d                   	pop    ebp
c0010a69:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010a6d:	50                   	push   eax
c0010a6e:	57                   	push   edi
c0010a6f:	e8 d8 fe fe ff       	call   c000094c <strcat>
c0010a74:	83 c4 10             	add    esp,0x10
c0010a77:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0010a7e:	75 05                	jne    c0010a85 <VgaText::receiveKey(unsigned char)+0x81>
c0010a80:	80 fb 0a             	cmp    bl,0xa
c0010a83:	75 53                	jne    c0010ad8 <VgaText::receiveKey(unsigned char)+0xd4>
c0010a85:	83 ec 0c             	sub    esp,0xc
c0010a88:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0010a8e:	53                   	push   ebx
c0010a8f:	e8 d8 fc fe ff       	call   c000076c <strlen>
c0010a94:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a97:	89 c5                	mov    ebp,eax
c0010a99:	e8 ce fc fe ff       	call   c000076c <strlen>
c0010a9e:	83 c4 10             	add    esp,0x10
c0010aa1:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010aa5:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010aaa:	76 10                	jbe    c0010abc <VgaText::receiveKey(unsigned char)+0xb8>
c0010aac:	83 ec 0c             	sub    esp,0xc
c0010aaf:	68 8b a3 02 c0       	push   0xc002a38b
c0010ab4:	e8 d0 94 00 00       	call   c0019f89 <Krnl::panic(char const*)>
c0010ab9:	83 c4 10             	add    esp,0x10
c0010abc:	50                   	push   eax
c0010abd:	50                   	push   eax
c0010abe:	57                   	push   edi
c0010abf:	53                   	push   ebx
c0010ac0:	e8 87 fe fe ff       	call   c000094c <strcat>
c0010ac5:	83 c4 0c             	add    esp,0xc
c0010ac8:	68 96 00 00 00       	push   0x96
c0010acd:	6a 00                	push   0x0
c0010acf:	57                   	push   edi
c0010ad0:	e8 7b fc fe ff       	call   c0000750 <memset>
c0010ad5:	83 c4 10             	add    esp,0x10
c0010ad8:	83 ec 0c             	sub    esp,0xc
c0010adb:	56                   	push   esi
c0010adc:	e8 6d fa ff ff       	call   c001054e <VgaText::doUpdate()>
c0010ae1:	83 c4 10             	add    esp,0x10
c0010ae4:	83 c4 1c             	add    esp,0x1c
c0010ae7:	5b                   	pop    ebx
c0010ae8:	5e                   	pop    esi
c0010ae9:	5f                   	pop    edi
c0010aea:	5d                   	pop    ebp
c0010aeb:	c3                   	ret    

c0010aec <VgaText::write(unsigned long long, void*, int*)>:
c0010aec:	55                   	push   ebp
c0010aed:	57                   	push   edi
c0010aee:	56                   	push   esi
c0010aef:	53                   	push   ebx
c0010af0:	83 ec 0c             	sub    esp,0xc
c0010af3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010af7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010afb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010aff:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0010b06:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010b09:	39 eb                	cmp    ebx,ebp
c0010b0b:	74 13                	je     c0010b20 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010b0d:	43                   	inc    ebx
c0010b0e:	50                   	push   eax
c0010b0f:	50                   	push   eax
c0010b10:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010b14:	50                   	push   eax
c0010b15:	56                   	push   esi
c0010b16:	e8 13 fc ff ff       	call   c001072e <VgaText::putchar(char)>
c0010b1b:	83 c4 10             	add    esp,0x10
c0010b1e:	eb e9                	jmp    c0010b09 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010b20:	83 ec 0c             	sub    esp,0xc
c0010b23:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0010b2a:	56                   	push   esi
c0010b2b:	e8 1e fa ff ff       	call   c001054e <VgaText::doUpdate()>
c0010b30:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010b34:	89 38                	mov    DWORD PTR [eax],edi
c0010b36:	83 c4 1c             	add    esp,0x1c
c0010b39:	31 c0                	xor    eax,eax
c0010b3b:	5b                   	pop    ebx
c0010b3c:	5e                   	pop    esi
c0010b3d:	5f                   	pop    edi
c0010b3e:	5d                   	pop    ebp
c0010b3f:	c3                   	ret    

c0010b40 <newTerminal(char*)>:
c0010b40:	83 ec 28             	sub    esp,0x28
c0010b43:	68 c4 02 00 00       	push   0x2c4
c0010b48:	e8 4c ea ff ff       	call   c000f599 <malloc>
c0010b4d:	5a                   	pop    edx
c0010b4e:	59                   	pop    ecx
c0010b4f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010b53:	50                   	push   eax
c0010b54:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010b58:	e8 29 fd ff ff       	call   c0010886 <VgaText::VgaText(char const*)>
c0010b5d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010b61:	83 c4 2c             	add    esp,0x2c
c0010b64:	c3                   	ret    
c0010b65:	90                   	nop

c0010b66 <TSS::TSS()>:
c0010b66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b6a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b71:	90                   	nop
c0010b72:	c3                   	ret    
c0010b73:	90                   	nop

c0010b74 <TSS::setESP(unsigned long)>:
c0010b74:	55                   	push   ebp
c0010b75:	89 e5                	mov    ebp,esp
c0010b77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b7d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010b80:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b83:	90                   	nop
c0010b84:	5d                   	pop    ebp
c0010b85:	c3                   	ret    

c0010b86 <TSS::flush()>:
c0010b86:	55                   	push   ebp
c0010b87:	89 e5                	mov    ebp,esp
c0010b89:	83 ec 10             	sub    esp,0x10
c0010b8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b91:	83 c8 03             	or     eax,0x3
c0010b94:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010b98:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010b9c:	66 89 d0             	mov    ax,dx
c0010b9f:	0f 00 d8             	ltr    ax
c0010ba2:	90                   	nop
c0010ba3:	c9                   	leave  
c0010ba4:	c3                   	ret    
c0010ba5:	90                   	nop

c0010ba6 <TSS::setup(unsigned long, unsigned long)>:
c0010ba6:	55                   	push   ebp
c0010ba7:	89 e5                	mov    ebp,esp
c0010ba9:	83 ec 18             	sub    esp,0x18
c0010bac:	83 ec 0c             	sub    esp,0xc
c0010baf:	6a 68                	push   0x68
c0010bb1:	e8 e3 e9 ff ff       	call   c000f599 <malloc>
c0010bb6:	83 c4 10             	add    esp,0x10
c0010bb9:	89 c2                	mov    edx,eax
c0010bbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bbe:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010bc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bc7:	83 ec 04             	sub    esp,0x4
c0010bca:	6a 68                	push   0x68
c0010bcc:	6a 00                	push   0x0
c0010bce:	50                   	push   eax
c0010bcf:	e8 7c fb fe ff       	call   c0000750 <memset>
c0010bd4:	83 c4 10             	add    esp,0x10
c0010bd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bdd:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010be3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010be6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010be9:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010bef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bf2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bf5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010bf8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010bfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bfe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c01:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010c07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c0d:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010c13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c19:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010c1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c22:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c25:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010c2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c31:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010c37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c3d:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010c43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c49:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010c4c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010c4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c52:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c55:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010c58:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010c5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c61:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010c68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c6b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c6e:	0f 20 da             	mov    edx,cr3
c0010c71:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0010c74:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0010c77:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010c7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c7d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c80:	83 ec 08             	sub    esp,0x8
c0010c83:	50                   	push   eax
c0010c84:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c87:	50                   	push   eax
c0010c88:	e8 05 e1 ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c0010c8d:	83 c4 10             	add    esp,0x10
c0010c90:	83 ec 08             	sub    esp,0x8
c0010c93:	6a 68                	push   0x68
c0010c95:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c98:	50                   	push   eax
c0010c99:	e8 10 e1 ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c0010c9e:	83 c4 10             	add    esp,0x10
c0010ca1:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0010ca5:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010ca8:	83 e0 0f             	and    eax,0xf
c0010cab:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010cae:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010cb1:	83 c8 40             	or     eax,0x40
c0010cb4:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010cb7:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c0010cbc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010cc2:	05 78 01 00 00       	add    eax,0x178
c0010cc7:	83 ec 04             	sub    esp,0x4
c0010cca:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010ccd:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0010cd0:	50                   	push   eax
c0010cd1:	e8 0c e1 ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c0010cd6:	83 c4 10             	add    esp,0x10
c0010cd9:	89 c2                	mov    edx,eax
c0010cdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cde:	89 10                	mov    DWORD PTR [eax],edx
c0010ce0:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c0010ce5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010ceb:	05 78 01 00 00       	add    eax,0x178
c0010cf0:	83 ec 0c             	sub    esp,0xc
c0010cf3:	50                   	push   eax
c0010cf4:	e8 13 e1 ff ff       	call   c000ee0c <GDT::flush()>
c0010cf9:	83 c4 10             	add    esp,0x10
c0010cfc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cff:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d01:	c9                   	leave  
c0010d02:	c3                   	ret    
c0010d03:	90                   	nop

c0010d04 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010d04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d08:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010d0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d0f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010d14:	75 08                	jne    c0010d1e <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010d16:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010d1c:	eb 38                	jmp    c0010d56 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010d1e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010d23:	75 17                	jne    c0010d3c <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010d25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d2a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010d2d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010d33:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d35:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010d39:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0010d3c:	89 c1                	mov    ecx,eax
c0010d3e:	83 e1 fd             	and    ecx,0xfffffffd
c0010d41:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0010d47:	74 cd                	je     c0010d16 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010d49:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010d4e:	83 e0 ef             	and    eax,0xffffffef
c0010d51:	83 f8 08             	cmp    eax,0x8
c0010d54:	76 c0                	jbe    c0010d16 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010d56:	31 c0                	xor    eax,eax
c0010d58:	c3                   	ret    
c0010d59:	90                   	nop

c0010d5a <ReservedFilename::isAtty()>:
c0010d5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d5e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010d61:	31 c0                	xor    eax,eax
c0010d63:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0010d69:	74 09                	je     c0010d74 <ReservedFilename::isAtty()+0x1a>
c0010d6b:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0010d71:	0f 94 c0             	sete   al
c0010d74:	c3                   	ret    
c0010d75:	90                   	nop

c0010d76 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010d76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d7a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010d7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d81:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010d85:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010d8a:	75 08                	jne    c0010d94 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0010d8c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010d92:	eb 3d                	jmp    c0010dd1 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010d94:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010d99:	75 17                	jne    c0010db2 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0010d9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010da0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010da3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010da9:	8b 10                	mov    edx,DWORD PTR [eax]
c0010dab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010daf:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0010db2:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010db7:	75 04                	jne    c0010dbd <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0010db9:	89 0a                	mov    DWORD PTR [edx],ecx
c0010dbb:	eb 14                	jmp    c0010dd1 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010dbd:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0010dc2:	74 c8                	je     c0010d8c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010dc4:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010dc9:	83 e0 ef             	and    eax,0xffffffef
c0010dcc:	83 f8 08             	cmp    eax,0x8
c0010dcf:	76 bb                	jbe    c0010d8c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010dd1:	31 c0                	xor    eax,eax
c0010dd3:	c3                   	ret    

c0010dd4 <UnixFile::getFileDescriptor()>:
c0010dd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dd8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ddb:	c3                   	ret    

c0010ddc <UnixFile::UnixFile(int)>:
c0010ddc:	53                   	push   ebx
c0010ddd:	83 ec 28             	sub    esp,0x28
c0010de0:	ba a8 a4 02 c0       	mov    edx,0xc002a4a8
c0010de5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010de9:	89 10                	mov    DWORD PTR [eax],edx
c0010deb:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0010df3:	0f 8f 8c 01 00 00    	jg     c0010f85 <UnixFile::UnixFile(int)+0x1a9>
c0010df9:	a1 60 cd 02 c0       	mov    eax,ds:0xc002cd60
c0010dfe:	8d 50 01             	lea    edx,[eax+0x1]
c0010e01:	89 15 60 cd 02 c0    	mov    DWORD PTR ds:0xc002cd60,edx
c0010e07:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010e0b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010e0e:	83 ec 08             	sub    esp,0x8
c0010e11:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010e15:	68 18 df 02 c0       	push   0xc002df18
c0010e1a:	e8 47 78 01 00       	call   c0028666 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010e1f:	83 c4 10             	add    esp,0x10
c0010e22:	a0 14 df 02 c0       	mov    al,ds:0xc002df14
c0010e27:	83 f0 01             	xor    eax,0x1
c0010e2a:	84 c0                	test   al,al
c0010e2c:	0f 84 54 01 00 00    	je     c0010f86 <UnixFile::UnixFile(int)+0x1aa>
c0010e32:	c6 05 14 df 02 c0 01 	mov    BYTE PTR ds:0xc002df14,0x1
c0010e39:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0010e41:	83 ec 0c             	sub    esp,0xc
c0010e44:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e48:	e8 4c e7 ff ff       	call   c000f599 <malloc>
c0010e4d:	83 c4 10             	add    esp,0x10
c0010e50:	89 c3                	mov    ebx,eax
c0010e52:	83 ec 08             	sub    esp,0x8
c0010e55:	68 03 ff ff 0f       	push   0xfffff03
c0010e5a:	53                   	push   ebx
c0010e5b:	e8 2c 01 00 00       	call   c0010f8c <ReservedFilename::ReservedFilename(int)>
c0010e60:	83 c4 10             	add    esp,0x10
c0010e63:	89 1d 0c df 02 c0    	mov    DWORD PTR ds:0xc002df0c,ebx
c0010e69:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0010e71:	83 ec 0c             	sub    esp,0xc
c0010e74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e78:	e8 1c e7 ff ff       	call   c000f599 <malloc>
c0010e7d:	83 c4 10             	add    esp,0x10
c0010e80:	89 c3                	mov    ebx,eax
c0010e82:	83 ec 08             	sub    esp,0x8
c0010e85:	68 01 ff ff 0f       	push   0xfffff01
c0010e8a:	53                   	push   ebx
c0010e8b:	e8 fc 00 00 00       	call   c0010f8c <ReservedFilename::ReservedFilename(int)>
c0010e90:	83 c4 10             	add    esp,0x10
c0010e93:	89 1d 10 df 02 c0    	mov    DWORD PTR ds:0xc002df10,ebx
c0010e99:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0010ea1:	83 ec 0c             	sub    esp,0xc
c0010ea4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010ea8:	e8 ec e6 ff ff       	call   c000f599 <malloc>
c0010ead:	83 c4 10             	add    esp,0x10
c0010eb0:	89 c3                	mov    ebx,eax
c0010eb2:	83 ec 08             	sub    esp,0x8
c0010eb5:	68 00 ff ff 0f       	push   0xfffff00
c0010eba:	53                   	push   ebx
c0010ebb:	e8 cc 00 00 00       	call   c0010f8c <ReservedFilename::ReservedFilename(int)>
c0010ec0:	83 c4 10             	add    esp,0x10
c0010ec3:	89 1d 04 df 02 c0    	mov    DWORD PTR ds:0xc002df04,ebx
c0010ec9:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0010ed1:	83 ec 0c             	sub    esp,0xc
c0010ed4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010ed8:	e8 bc e6 ff ff       	call   c000f599 <malloc>
c0010edd:	83 c4 10             	add    esp,0x10
c0010ee0:	89 c3                	mov    ebx,eax
c0010ee2:	83 ec 08             	sub    esp,0x8
c0010ee5:	68 02 ff ff 0f       	push   0xfffff02
c0010eea:	53                   	push   ebx
c0010eeb:	e8 9c 00 00 00       	call   c0010f8c <ReservedFilename::ReservedFilename(int)>
c0010ef0:	83 c4 10             	add    esp,0x10
c0010ef3:	89 1d 08 df 02 c0    	mov    DWORD PTR ds:0xc002df08,ebx
c0010ef9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010f01:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0010f06:	7f 7e                	jg     c0010f86 <UnixFile::UnixFile(int)+0x1aa>
c0010f08:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0010f10:	83 ec 0c             	sub    esp,0xc
c0010f13:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f17:	e8 7d e6 ff ff       	call   c000f599 <malloc>
c0010f1c:	83 c4 10             	add    esp,0x10
c0010f1f:	89 c3                	mov    ebx,eax
c0010f21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f25:	05 10 ff ff 0f       	add    eax,0xfffff10
c0010f2a:	83 ec 08             	sub    esp,0x8
c0010f2d:	50                   	push   eax
c0010f2e:	53                   	push   ebx
c0010f2f:	e8 58 00 00 00       	call   c0010f8c <ReservedFilename::ReservedFilename(int)>
c0010f34:	83 c4 10             	add    esp,0x10
c0010f37:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f3b:	89 1c 85 e0 de 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2120],ebx
c0010f42:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0010f4a:	83 ec 0c             	sub    esp,0xc
c0010f4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010f51:	e8 43 e6 ff ff       	call   c000f599 <malloc>
c0010f56:	83 c4 10             	add    esp,0x10
c0010f59:	89 c3                	mov    ebx,eax
c0010f5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f5f:	05 20 ff ff 0f       	add    eax,0xfffff20
c0010f64:	83 ec 08             	sub    esp,0x8
c0010f67:	50                   	push   eax
c0010f68:	53                   	push   ebx
c0010f69:	e8 1e 00 00 00       	call   c0010f8c <ReservedFilename::ReservedFilename(int)>
c0010f6e:	83 c4 10             	add    esp,0x10
c0010f71:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f75:	89 1c 85 a0 de 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2160],ebx
c0010f7c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0010f80:	e9 7c ff ff ff       	jmp    c0010f01 <UnixFile::UnixFile(int)+0x125>
c0010f85:	90                   	nop
c0010f86:	83 c4 28             	add    esp,0x28
c0010f89:	5b                   	pop    ebx
c0010f8a:	c3                   	ret    
c0010f8b:	90                   	nop

c0010f8c <ReservedFilename::ReservedFilename(int)>:
c0010f8c:	83 ec 0c             	sub    esp,0xc
c0010f8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f93:	83 ec 08             	sub    esp,0x8
c0010f96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f9a:	50                   	push   eax
c0010f9b:	e8 3c fe ff ff       	call   c0010ddc <UnixFile::UnixFile(int)>
c0010fa0:	83 c4 10             	add    esp,0x10
c0010fa3:	ba c4 a4 02 c0       	mov    edx,0xc002a4c4
c0010fa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fac:	89 10                	mov    DWORD PTR [eax],edx
c0010fae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fb2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010fb6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010fb9:	90                   	nop
c0010fba:	83 c4 0c             	add    esp,0xc
c0010fbd:	c3                   	ret    

c0010fbe <UnixFile::~UnixFile()>:
c0010fbe:	83 ec 1c             	sub    esp,0x1c
c0010fc1:	ba a8 a4 02 c0       	mov    edx,0xc002a4a8
c0010fc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fca:	89 10                	mov    DWORD PTR [eax],edx
c0010fcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fd0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fd3:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0010fd8:	7f 73                	jg     c001104d <UnixFile::~UnixFile()+0x8f>
c0010fda:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010fe2:	83 ec 0c             	sub    esp,0xc
c0010fe5:	68 18 df 02 c0       	push   0xc002df18
c0010fea:	e8 4b 77 01 00       	call   c002873a <LinkedList<UnixFile>::getFirstElement()>
c0010fef:	83 c4 10             	add    esp,0x10
c0010ff2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010ff6:	83 ec 0c             	sub    esp,0xc
c0010ff9:	68 18 df 02 c0       	push   0xc002df18
c0010ffe:	e8 3f 77 01 00       	call   c0028742 <LinkedList<UnixFile>::removeFirst()>
c0011003:	83 c4 10             	add    esp,0x10
c0011006:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001100a:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001100e:	74 40                	je     c0011050 <UnixFile::~UnixFile()+0x92>
c0011010:	83 ec 08             	sub    esp,0x8
c0011013:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011017:	68 18 df 02 c0       	push   0xc002df18
c001101c:	e8 45 76 01 00       	call   c0028666 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011021:	83 c4 10             	add    esp,0x10
c0011024:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011028:	8d 50 01             	lea    edx,[eax+0x1]
c001102b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001102f:	3d 88 13 00 00       	cmp    eax,0x1388
c0011034:	0f 94 c0             	sete   al
c0011037:	84 c0                	test   al,al
c0011039:	74 a7                	je     c0010fe2 <UnixFile::~UnixFile()+0x24>
c001103b:	83 ec 0c             	sub    esp,0xc
c001103e:	68 80 a4 02 c0       	push   0xc002a480
c0011043:	e8 41 8f 00 00       	call   c0019f89 <Krnl::panic(char const*)>
c0011048:	83 c4 10             	add    esp,0x10
c001104b:	eb 95                	jmp    c0010fe2 <UnixFile::~UnixFile()+0x24>
c001104d:	90                   	nop
c001104e:	eb 01                	jmp    c0011051 <UnixFile::~UnixFile()+0x93>
c0011050:	90                   	nop
c0011051:	90                   	nop
c0011052:	83 c4 1c             	add    esp,0x1c
c0011055:	c3                   	ret    

c0011056 <UnixFile::~UnixFile()>:
c0011056:	83 ec 0c             	sub    esp,0xc
c0011059:	83 ec 0c             	sub    esp,0xc
c001105c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011060:	e8 59 ff ff ff       	call   c0010fbe <UnixFile::~UnixFile()>
c0011065:	83 c4 10             	add    esp,0x10
c0011068:	83 ec 08             	sub    esp,0x8
c001106b:	6a 0c                	push   0xc
c001106d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011071:	e8 4f 16 00 00       	call   c00126c5 <operator delete(void*, unsigned long)>
c0011076:	83 c4 10             	add    esp,0x10
c0011079:	83 c4 0c             	add    esp,0xc
c001107c:	c3                   	ret    
c001107d:	90                   	nop

c001107e <ReservedFilename::~ReservedFilename()>:
c001107e:	83 ec 0c             	sub    esp,0xc
c0011081:	ba c4 a4 02 c0       	mov    edx,0xc002a4c4
c0011086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001108a:	89 10                	mov    DWORD PTR [eax],edx
c001108c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011090:	83 ec 0c             	sub    esp,0xc
c0011093:	50                   	push   eax
c0011094:	e8 25 ff ff ff       	call   c0010fbe <UnixFile::~UnixFile()>
c0011099:	83 c4 10             	add    esp,0x10
c001109c:	90                   	nop
c001109d:	83 c4 0c             	add    esp,0xc
c00110a0:	c3                   	ret    
c00110a1:	90                   	nop

c00110a2 <ReservedFilename::~ReservedFilename()>:
c00110a2:	83 ec 0c             	sub    esp,0xc
c00110a5:	83 ec 0c             	sub    esp,0xc
c00110a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110ac:	e8 cd ff ff ff       	call   c001107e <ReservedFilename::~ReservedFilename()>
c00110b1:	83 c4 10             	add    esp,0x10
c00110b4:	83 ec 08             	sub    esp,0x8
c00110b7:	6a 0c                	push   0xc
c00110b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110bd:	e8 03 16 00 00       	call   c00126c5 <operator delete(void*, unsigned long)>
c00110c2:	83 c4 10             	add    esp,0x10
c00110c5:	83 c4 0c             	add    esp,0xc
c00110c8:	c3                   	ret    

c00110c9 <getFromFileDescriptor(int)>:
c00110c9:	53                   	push   ebx
c00110ca:	83 ec 08             	sub    esp,0x8
c00110cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00110d1:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00110d7:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00110dd:	7f 2c                	jg     c001110b <getFromFileDescriptor(int)+0x42>
c00110df:	83 ec 0c             	sub    esp,0xc
c00110e2:	68 18 df 02 c0       	push   0xc002df18
c00110e7:	e8 4e 76 01 00       	call   c002873a <LinkedList<UnixFile>::getFirstElement()>
c00110ec:	83 c4 10             	add    esp,0x10
c00110ef:	85 c0                	test   eax,eax
c00110f1:	75 04                	jne    c00110f7 <getFromFileDescriptor(int)+0x2e>
c00110f3:	31 c0                	xor    eax,eax
c00110f5:	eb 6e                	jmp    c0011165 <getFromFileDescriptor(int)+0x9c>
c00110f7:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00110fa:	74 69                	je     c0011165 <getFromFileDescriptor(int)+0x9c>
c00110fc:	52                   	push   edx
c00110fd:	52                   	push   edx
c00110fe:	50                   	push   eax
c00110ff:	68 18 df 02 c0       	push   0xc002df18
c0011104:	e8 db 76 01 00       	call   c00287e4 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011109:	eb e1                	jmp    c00110ec <getFromFileDescriptor(int)+0x23>
c001110b:	a1 0c df 02 c0       	mov    eax,ds:0xc002df0c
c0011110:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011116:	74 4d                	je     c0011165 <getFromFileDescriptor(int)+0x9c>
c0011118:	a1 10 df 02 c0       	mov    eax,ds:0xc002df10
c001111d:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011123:	74 40                	je     c0011165 <getFromFileDescriptor(int)+0x9c>
c0011125:	a1 08 df 02 c0       	mov    eax,ds:0xc002df08
c001112a:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011130:	74 33                	je     c0011165 <getFromFileDescriptor(int)+0x9c>
c0011132:	a1 04 df 02 c0       	mov    eax,ds:0xc002df04
c0011137:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001113d:	74 26                	je     c0011165 <getFromFileDescriptor(int)+0x9c>
c001113f:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011145:	83 f8 08             	cmp    eax,0x8
c0011148:	77 09                	ja     c0011153 <getFromFileDescriptor(int)+0x8a>
c001114a:	8b 04 85 e0 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2120]
c0011151:	eb 12                	jmp    c0011165 <getFromFileDescriptor(int)+0x9c>
c0011153:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011159:	83 fb 08             	cmp    ebx,0x8
c001115c:	77 95                	ja     c00110f3 <getFromFileDescriptor(int)+0x2a>
c001115e:	8b 04 9d a0 de 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2160]
c0011165:	83 c4 08             	add    esp,0x8
c0011168:	5b                   	pop    ebx
c0011169:	c3                   	ret    

c001116a <__static_initialization_and_destruction_0(int, int)>:
c001116a:	83 ec 0c             	sub    esp,0xc
c001116d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011172:	75 34                	jne    c00111a8 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011174:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001117c:	75 2a                	jne    c00111a8 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001117e:	83 ec 0c             	sub    esp,0xc
c0011181:	68 18 df 02 c0       	push   0xc002df18
c0011186:	e8 99 74 01 00       	call   c0028624 <LinkedList<UnixFile>::LinkedList()>
c001118b:	83 c4 10             	add    esp,0x10
c001118e:	83 ec 04             	sub    esp,0x4
c0011191:	68 90 cb 02 c0       	push   0xc002cb90
c0011196:	68 18 df 02 c0       	push   0xc002df18
c001119b:	68 22 86 02 c0       	push   0xc0028622
c00111a0:	e8 9a 14 00 00       	call   c001263f <__cxa_atexit>
c00111a5:	83 c4 10             	add    esp,0x10
c00111a8:	90                   	nop
c00111a9:	83 c4 0c             	add    esp,0xc
c00111ac:	c3                   	ret    

c00111ad <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00111ad:	83 ec 0c             	sub    esp,0xc
c00111b0:	83 ec 08             	sub    esp,0x8
c00111b3:	68 ff ff 00 00       	push   0xffff
c00111b8:	6a 01                	push   0x1
c00111ba:	e8 ab ff ff ff       	call   c001116a <__static_initialization_and_destruction_0(int, int)>
c00111bf:	83 c4 10             	add    esp,0x10
c00111c2:	83 c4 0c             	add    esp,0xc
c00111c5:	c3                   	ret    

c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00111c6:	53                   	push   ebx
c00111c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00111cb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00111cf:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00111d5:	89 c8                	mov    eax,ecx
c00111d7:	d1 e8                	shr    eax,1
c00111d9:	03 05 68 cd 02 c0    	add    eax,DWORD PTR ds:0xc002cd68
c00111df:	83 e1 01             	and    ecx,0x1
c00111e2:	8a 10                	mov    dl,BYTE PTR [eax]
c00111e4:	75 09                	jne    c00111ef <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00111e6:	83 e2 f0             	and    edx,0xfffffff0
c00111e9:	09 da                	or     edx,ebx
c00111eb:	88 10                	mov    BYTE PTR [eax],dl
c00111ed:	5b                   	pop    ebx
c00111ee:	c3                   	ret    
c00111ef:	c1 e3 04             	shl    ebx,0x4
c00111f2:	83 e2 0f             	and    edx,0xf
c00111f5:	09 da                	or     edx,ebx
c00111f7:	88 10                	mov    BYTE PTR [eax],dl
c00111f9:	5b                   	pop    ebx
c00111fa:	c3                   	ret    

c00111fb <Virt::getPageState(unsigned long)>:
c00111fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111ff:	8b 0d 68 cd 02 c0    	mov    ecx,DWORD PTR ds:0xc002cd68
c0011205:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c001120b:	89 d0                	mov    eax,edx
c001120d:	d1 e8                	shr    eax,1
c001120f:	83 e2 01             	and    edx,0x1
c0011212:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011215:	75 04                	jne    c001121b <Virt::getPageState(unsigned long)+0x20>
c0011217:	83 e0 0f             	and    eax,0xf
c001121a:	c3                   	ret    
c001121b:	c0 e8 04             	shr    al,0x4
c001121e:	c3                   	ret    

c001121f <Virt::allocateKernelVirtualPages(int)>:
c001121f:	55                   	push   ebp
c0011220:	31 ed                	xor    ebp,ebp
c0011222:	57                   	push   edi
c0011223:	56                   	push   esi
c0011224:	53                   	push   ebx
c0011225:	31 db                	xor    ebx,ebx
c0011227:	83 ec 1c             	sub    esp,0x1c
c001122a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001122e:	8b 3d 64 cd 02 c0    	mov    edi,DWORD PTR ds:0xc002cd64
c0011234:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011239:	57                   	push   edi
c001123a:	e8 bc ff ff ff       	call   c00111fb <Virt::getPageState(unsigned long)>
c001123f:	5a                   	pop    edx
c0011240:	84 c0                	test   al,al
c0011242:	75 3a                	jne    c001127e <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011244:	85 db                	test   ebx,ebx
c0011246:	75 02                	jne    c001124a <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011248:	89 fd                	mov    ebp,edi
c001124a:	43                   	inc    ebx
c001124b:	39 f3                	cmp    ebx,esi
c001124d:	74 5a                	je     c00112a9 <Virt::allocateKernelVirtualPages(int)+0x8a>
c001124f:	47                   	inc    edi
c0011250:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011256:	76 31                	jbe    c0011289 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011258:	c7 05 64 cd 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002cd64,0xc8000
c0011262:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011267:	75 28                	jne    c0011291 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011269:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001126e:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011273:	57                   	push   edi
c0011274:	e8 82 ff ff ff       	call   c00111fb <Virt::getPageState(unsigned long)>
c0011279:	5a                   	pop    edx
c001127a:	84 c0                	test   al,al
c001127c:	74 c6                	je     c0011244 <Virt::allocateKernelVirtualPages(int)+0x25>
c001127e:	31 db                	xor    ebx,ebx
c0011280:	47                   	inc    edi
c0011281:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011287:	77 cf                	ja     c0011258 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011289:	89 3d 64 cd 02 c0    	mov    DWORD PTR ds:0xc002cd64,edi
c001128f:	eb a8                	jmp    c0011239 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011291:	83 ec 0c             	sub    esp,0xc
c0011294:	68 d8 a4 02 c0       	push   0xc002a4d8
c0011299:	e8 eb 8c 00 00       	call   c0019f89 <Krnl::panic(char const*)>
c001129e:	8b 3d 64 cd 02 c0    	mov    edi,DWORD PTR ds:0xc002cd64
c00112a4:	83 c4 10             	add    esp,0x10
c00112a7:	eb 90                	jmp    c0011239 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00112a9:	89 2d 64 cd 02 c0    	mov    DWORD PTR ds:0xc002cd64,ebp
c00112af:	4b                   	dec    ebx
c00112b0:	74 5f                	je     c0011311 <Virt::allocateKernelVirtualPages(int)+0xf2>
c00112b2:	85 f6                	test   esi,esi
c00112b4:	74 3d                	je     c00112f3 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00112b6:	89 e8                	mov    eax,ebp
c00112b8:	31 db                	xor    ebx,ebx
c00112ba:	8d 7e ff             	lea    edi,[esi-0x1]
c00112bd:	eb 14                	jmp    c00112d3 <Virt::allocateKernelVirtualPages(int)+0xb4>
c00112bf:	6a 01                	push   0x1
c00112c1:	43                   	inc    ebx
c00112c2:	50                   	push   eax
c00112c3:	e8 fe fe ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112c8:	58                   	pop    eax
c00112c9:	39 f3                	cmp    ebx,esi
c00112cb:	5a                   	pop    edx
c00112cc:	74 25                	je     c00112f3 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00112ce:	a1 64 cd 02 c0       	mov    eax,ds:0xc002cd64
c00112d3:	8d 50 01             	lea    edx,[eax+0x1]
c00112d6:	85 db                	test   ebx,ebx
c00112d8:	89 15 64 cd 02 c0    	mov    DWORD PTR ds:0xc002cd64,edx
c00112de:	74 20                	je     c0011300 <Virt::allocateKernelVirtualPages(int)+0xe1>
c00112e0:	39 df                	cmp    edi,ebx
c00112e2:	75 db                	jne    c00112bf <Virt::allocateKernelVirtualPages(int)+0xa0>
c00112e4:	6a 03                	push   0x3
c00112e6:	43                   	inc    ebx
c00112e7:	50                   	push   eax
c00112e8:	e8 d9 fe ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112ed:	59                   	pop    ecx
c00112ee:	39 f3                	cmp    ebx,esi
c00112f0:	58                   	pop    eax
c00112f1:	75 db                	jne    c00112ce <Virt::allocateKernelVirtualPages(int)+0xaf>
c00112f3:	83 c4 1c             	add    esp,0x1c
c00112f6:	89 e8                	mov    eax,ebp
c00112f8:	5b                   	pop    ebx
c00112f9:	c1 e0 0c             	shl    eax,0xc
c00112fc:	5e                   	pop    esi
c00112fd:	5f                   	pop    edi
c00112fe:	5d                   	pop    ebp
c00112ff:	c3                   	ret    
c0011300:	6a 02                	push   0x2
c0011302:	bb 01 00 00 00       	mov    ebx,0x1
c0011307:	50                   	push   eax
c0011308:	e8 b9 fe ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001130d:	58                   	pop    eax
c001130e:	5a                   	pop    edx
c001130f:	eb bd                	jmp    c00112ce <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011311:	6a 04                	push   0x4
c0011313:	8d 45 01             	lea    eax,[ebp+0x1]
c0011316:	55                   	push   ebp
c0011317:	a3 64 cd 02 c0       	mov    ds:0xc002cd64,eax
c001131c:	e8 a5 fe ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011321:	59                   	pop    ecx
c0011322:	89 e8                	mov    eax,ebp
c0011324:	5b                   	pop    ebx
c0011325:	c1 e0 0c             	shl    eax,0xc
c0011328:	83 c4 1c             	add    esp,0x1c
c001132b:	5b                   	pop    ebx
c001132c:	5e                   	pop    esi
c001132d:	5f                   	pop    edi
c001132e:	5d                   	pop    ebp
c001132f:	c3                   	ret    

c0011330 <Virt::freeSwapfilePage(unsigned long)>:
c0011330:	53                   	push   ebx
c0011331:	8b 15 2c df 02 c0    	mov    edx,DWORD PTR ds:0xc002df2c
c0011337:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001133b:	b8 01 00 00 00       	mov    eax,0x1
c0011340:	89 cb                	mov    ebx,ecx
c0011342:	d3 e0                	shl    eax,cl
c0011344:	c1 eb 05             	shr    ebx,0x5
c0011347:	f7 d0                	not    eax
c0011349:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c001134c:	5b                   	pop    ebx
c001134d:	c3                   	ret    

c001134e <Virt::swapIDToSector(unsigned long)>:
c001134e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011352:	0f af 05 6c cd 02 c0 	imul   eax,DWORD PTR ds:0xc002cd6c
c0011359:	03 05 74 cd 02 c0    	add    eax,DWORD PTR ds:0xc002cd74
c001135f:	c3                   	ret    

c0011360 <Virt::allocateSwapfilePage()>:
c0011360:	55                   	push   ebp
c0011361:	31 d2                	xor    edx,edx
c0011363:	57                   	push   edi
c0011364:	56                   	push   esi
c0011365:	53                   	push   ebx
c0011366:	83 ec 0c             	sub    esp,0xc
c0011369:	8b 0d 6c cd 02 c0    	mov    ecx,DWORD PTR ds:0xc002cd6c
c001136f:	a1 70 cd 02 c0       	mov    eax,ds:0xc002cd70
c0011374:	f7 f1                	div    ecx
c0011376:	39 0d 70 cd 02 c0    	cmp    DWORD PTR ds:0xc002cd70,ecx
c001137c:	72 2d                	jb     c00113ab <Virt::allocateSwapfilePage()+0x4b>
c001137e:	8b 35 2c df 02 c0    	mov    esi,DWORD PTR ds:0xc002df2c
c0011384:	8b 16                	mov    edx,DWORD PTR [esi]
c0011386:	f6 c2 01             	test   dl,0x1
c0011389:	74 3c                	je     c00113c7 <Virt::allocateSwapfilePage()+0x67>
c001138b:	31 c9                	xor    ecx,ecx
c001138d:	bf 01 00 00 00       	mov    edi,0x1
c0011392:	eb 12                	jmp    c00113a6 <Virt::allocateSwapfilePage()+0x46>
c0011394:	89 fd                	mov    ebp,edi
c0011396:	89 ca                	mov    edx,ecx
c0011398:	d3 e5                	shl    ebp,cl
c001139a:	c1 ea 05             	shr    edx,0x5
c001139d:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00113a0:	8b 13                	mov    edx,DWORD PTR [ebx]
c00113a2:	85 ea                	test   edx,ebp
c00113a4:	74 2a                	je     c00113d0 <Virt::allocateSwapfilePage()+0x70>
c00113a6:	41                   	inc    ecx
c00113a7:	39 c8                	cmp    eax,ecx
c00113a9:	77 e9                	ja     c0011394 <Virt::allocateSwapfilePage()+0x34>
c00113ab:	83 ec 0c             	sub    esp,0xc
c00113ae:	68 fc a6 02 c0       	push   0xc002a6fc
c00113b3:	e8 d1 8b 00 00       	call   c0019f89 <Krnl::panic(char const*)>
c00113b8:	83 c4 10             	add    esp,0x10
c00113bb:	31 c9                	xor    ecx,ecx
c00113bd:	83 c4 0c             	add    esp,0xc
c00113c0:	89 c8                	mov    eax,ecx
c00113c2:	5b                   	pop    ebx
c00113c3:	5e                   	pop    esi
c00113c4:	5f                   	pop    edi
c00113c5:	5d                   	pop    ebp
c00113c6:	c3                   	ret    
c00113c7:	89 f3                	mov    ebx,esi
c00113c9:	bd 01 00 00 00       	mov    ebp,0x1
c00113ce:	31 c9                	xor    ecx,ecx
c00113d0:	09 ea                	or     edx,ebp
c00113d2:	89 c8                	mov    eax,ecx
c00113d4:	89 13                	mov    DWORD PTR [ebx],edx
c00113d6:	83 c4 0c             	add    esp,0xc
c00113d9:	5b                   	pop    ebx
c00113da:	5e                   	pop    esi
c00113db:	5f                   	pop    edi
c00113dc:	5d                   	pop    ebp
c00113dd:	c3                   	ret    

c00113de <Virt::virtualMemorySetup()>:
c00113de:	53                   	push   ebx
c00113df:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113e4:	6a 0f                	push   0xf
c00113e6:	53                   	push   ebx
c00113e7:	43                   	inc    ebx
c00113e8:	e8 d9 fd ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113ed:	58                   	pop    eax
c00113ee:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00113f4:	5a                   	pop    edx
c00113f5:	75 ed                	jne    c00113e4 <Virt::virtualMemorySetup()+0x6>
c00113f7:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113fc:	6a 00                	push   0x0
c00113fe:	53                   	push   ebx
c00113ff:	43                   	inc    ebx
c0011400:	e8 c1 fd ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011405:	59                   	pop    ecx
c0011406:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001140c:	58                   	pop    eax
c001140d:	75 ed                	jne    c00113fc <Virt::virtualMemorySetup()+0x1e>
c001140f:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011414:	6a 0f                	push   0xf
c0011416:	53                   	push   ebx
c0011417:	43                   	inc    ebx
c0011418:	e8 a9 fd ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001141d:	58                   	pop    eax
c001141e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011424:	5a                   	pop    edx
c0011425:	75 ed                	jne    c0011414 <Virt::virtualMemorySetup()+0x36>
c0011427:	5b                   	pop    ebx
c0011428:	c3                   	ret    

c0011429 <Virt::setupPageSwapping(int)>:
c0011429:	55                   	push   ebp
c001142a:	57                   	push   edi
c001142b:	56                   	push   esi
c001142c:	53                   	push   ebx
c001142d:	83 ec 28             	sub    esp,0x28
c0011430:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0011434:	68 14 01 00 00       	push   0x114
c0011439:	e8 5b e1 ff ff       	call   c000f599 <malloc>
c001143e:	83 c4 0c             	add    esp,0xc
c0011441:	89 c3                	mov    ebx,eax
c0011443:	ff 35 f0 f2 02 c0    	push   DWORD PTR ds:0xc002f2f0
c0011449:	68 13 a7 02 c0       	push   0xc002a713
c001144e:	50                   	push   eax
c001144f:	e8 a8 18 00 00       	call   c0012cfc <File::File(char const*, Process*)>
c0011454:	59                   	pop    ecx
c0011455:	5e                   	pop    esi
c0011456:	6a 01                	push   0x1
c0011458:	53                   	push   ebx
c0011459:	e8 02 19 00 00       	call   c0012d60 <File::open(FileOpenMode)>
c001145e:	83 c4 10             	add    esp,0x10
c0011461:	85 c0                	test   eax,eax
c0011463:	0f 85 88 01 00 00    	jne    c00115f1 <Virt::setupPageSwapping(int)+0x1c8>
c0011469:	51                   	push   ecx
c001146a:	8d 44 24 07          	lea    eax,[esp+0x7]
c001146e:	50                   	push   eax
c001146f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011473:	50                   	push   eax
c0011474:	53                   	push   ebx
c0011475:	e8 92 1b 00 00       	call   c001300c <File::stat(unsigned long long*, bool*)>
c001147a:	5e                   	pop    esi
c001147b:	5d                   	pop    ebp
c001147c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011480:	68 18 a5 02 c0       	push   0xc002a518
c0011485:	e8 13 13 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001148a:	83 c4 10             	add    esp,0x10
c001148d:	89 f9                	mov    ecx,edi
c001148f:	c1 e1 14             	shl    ecx,0x14
c0011492:	89 c8                	mov    eax,ecx
c0011494:	33 4c 24 08          	xor    ecx,DWORD PTR [esp+0x8]
c0011498:	99                   	cdq    
c0011499:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001149d:	31 d0                	xor    eax,edx
c001149f:	09 c8                	or     eax,ecx
c00114a1:	0f 85 8a 00 00 00    	jne    c0011531 <Virt::setupPageSwapping(int)+0x108>
c00114a7:	83 ec 0c             	sub    esp,0xc
c00114aa:	53                   	push   ebx
c00114ab:	e8 0e 19 00 00       	call   c0012dbe <File::close()>
c00114b0:	83 c4 10             	add    esp,0x10
c00114b3:	85 db                	test   ebx,ebx
c00114b5:	74 0c                	je     c00114c3 <Virt::setupPageSwapping(int)+0x9a>
c00114b7:	83 ec 0c             	sub    esp,0xc
c00114ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114bc:	53                   	push   ebx
c00114bd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00114c0:	83 c4 10             	add    esp,0x10
c00114c3:	83 ec 08             	sub    esp,0x8
c00114c6:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c00114cb:	c1 e7 0b             	shl    edi,0xb
c00114ce:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00114d4:	8b 10                	mov    edx,DWORD PTR [eax]
c00114d6:	68 13 a7 02 c0       	push   0xc002a713
c00114db:	50                   	push   eax
c00114dc:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00114df:	89 3d 70 cd 02 c0    	mov    DWORD PTR ds:0xc002cd70,edi
c00114e5:	c6 05 78 cd 02 c0 43 	mov    BYTE PTR ds:0xc002cd78,0x43
c00114ec:	c1 ef 08             	shr    edi,0x8
c00114ef:	a3 74 cd 02 c0       	mov    ds:0xc002cd74,eax
c00114f4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00114f7:	c7 05 6c cd 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002cd6c,0x8
c0011501:	e8 93 e0 ff ff       	call   c000f599 <malloc>
c0011506:	83 c4 0c             	add    esp,0xc
c0011509:	89 c1                	mov    ecx,eax
c001150b:	a3 2c df 02 c0       	mov    ds:0xc002df2c,eax
c0011510:	31 d2                	xor    edx,edx
c0011512:	a1 70 cd 02 c0       	mov    eax,ds:0xc002cd70
c0011517:	f7 35 6c cd 02 c0    	div    DWORD PTR ds:0xc002cd6c
c001151d:	c1 e8 05             	shr    eax,0x5
c0011520:	50                   	push   eax
c0011521:	6a 00                	push   0x0
c0011523:	51                   	push   ecx
c0011524:	e8 27 f2 fe ff       	call   c0000750 <memset>
c0011529:	83 c4 2c             	add    esp,0x2c
c001152c:	5b                   	pop    ebx
c001152d:	5e                   	pop    esi
c001152e:	5f                   	pop    edi
c001152f:	5d                   	pop    ebp
c0011530:	c3                   	ret    
c0011531:	83 ec 0c             	sub    esp,0xc
c0011534:	53                   	push   ebx
c0011535:	e8 84 18 00 00       	call   c0012dbe <File::close()>
c001153a:	58                   	pop    eax
c001153b:	5a                   	pop    edx
c001153c:	6a 12                	push   0x12
c001153e:	53                   	push   ebx
c001153f:	e8 1c 18 00 00       	call   c0012d60 <File::open(FileOpenMode)>
c0011544:	83 c4 10             	add    esp,0x10
c0011547:	85 c0                	test   eax,eax
c0011549:	0f 85 e1 00 00 00    	jne    c0011630 <Virt::setupPageSwapping(int)+0x207>
c001154f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0011557:	89 fe                	mov    esi,edi
c0011559:	83 ec 0c             	sub    esp,0xc
c001155c:	c1 e6 08             	shl    esi,0x8
c001155f:	68 00 00 01 00       	push   0x10000
c0011564:	e8 30 e0 ff ff       	call   c000f599 <malloc>
c0011569:	83 c4 0c             	add    esp,0xc
c001156c:	89 c5                	mov    ebp,eax
c001156e:	68 00 00 01 00       	push   0x10000
c0011573:	68 ee 00 00 00       	push   0xee
c0011578:	50                   	push   eax
c0011579:	e8 d2 f1 fe ff       	call   c0000750 <memset>
c001157e:	83 c4 10             	add    esp,0x10
c0011581:	85 f6                	test   esi,esi
c0011583:	79 03                	jns    c0011588 <Virt::setupPageSwapping(int)+0x15f>
c0011585:	83 c6 0f             	add    esi,0xf
c0011588:	c1 fe 04             	sar    esi,0x4
c001158b:	4e                   	dec    esi
c001158c:	83 fe ff             	cmp    esi,0xffffffff
c001158f:	74 3d                	je     c00115ce <Virt::setupPageSwapping(int)+0x1a5>
c0011591:	83 ec 0c             	sub    esp,0xc
c0011594:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011596:	8d 54 24 10          	lea    edx,[esp+0x10]
c001159a:	52                   	push   edx
c001159b:	55                   	push   ebp
c001159c:	6a 00                	push   0x0
c001159e:	68 00 00 01 00       	push   0x10000
c00115a3:	53                   	push   ebx
c00115a4:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00115a7:	83 c4 20             	add    esp,0x20
c00115aa:	85 c0                	test   eax,eax
c00115ac:	75 31                	jne    c00115df <Virt::setupPageSwapping(int)+0x1b6>
c00115ae:	81 7c 24 04 00 00 01 00 	cmp    DWORD PTR [esp+0x4],0x10000
c00115b6:	74 d3                	je     c001158b <Virt::setupPageSwapping(int)+0x162>
c00115b8:	83 ec 0c             	sub    esp,0xc
c00115bb:	4e                   	dec    esi
c00115bc:	68 45 a7 02 c0       	push   0xc002a745
c00115c1:	e8 c3 89 00 00       	call   c0019f89 <Krnl::panic(char const*)>
c00115c6:	83 c4 10             	add    esp,0x10
c00115c9:	83 fe ff             	cmp    esi,0xffffffff
c00115cc:	75 c3                	jne    c0011591 <Virt::setupPageSwapping(int)+0x168>
c00115ce:	83 ec 0c             	sub    esp,0xc
c00115d1:	55                   	push   ebp
c00115d2:	e8 e2 df ff ff       	call   c000f5b9 <rfree>
c00115d7:	83 c4 10             	add    esp,0x10
c00115da:	e9 c8 fe ff ff       	jmp    c00114a7 <Virt::setupPageSwapping(int)+0x7e>
c00115df:	83 ec 0c             	sub    esp,0xc
c00115e2:	68 45 a7 02 c0       	push   0xc002a745
c00115e7:	e8 9d 89 00 00       	call   c0019f89 <Krnl::panic(char const*)>
c00115ec:	83 c4 10             	add    esp,0x10
c00115ef:	eb bd                	jmp    c00115ae <Virt::setupPageSwapping(int)+0x185>
c00115f1:	83 ec 0c             	sub    esp,0xc
c00115f4:	68 f8 a4 02 c0       	push   0xc002a4f8
c00115f9:	e8 9f 11 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00115fe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011601:	e8 d2 18 00 00       	call   c0012ed8 <File::unlink()>
c0011606:	58                   	pop    eax
c0011607:	5a                   	pop    edx
c0011608:	6a 12                	push   0x12
c001160a:	53                   	push   ebx
c001160b:	e8 50 17 00 00       	call   c0012d60 <File::open(FileOpenMode)>
c0011610:	83 c4 10             	add    esp,0x10
c0011613:	85 c0                	test   eax,eax
c0011615:	0f 84 4e fe ff ff    	je     c0011469 <Virt::setupPageSwapping(int)+0x40>
c001161b:	83 ec 0c             	sub    esp,0xc
c001161e:	68 2a a7 02 c0       	push   0xc002a72a
c0011623:	e8 61 89 00 00       	call   c0019f89 <Krnl::panic(char const*)>
c0011628:	83 c4 10             	add    esp,0x10
c001162b:	e9 39 fe ff ff       	jmp    c0011469 <Virt::setupPageSwapping(int)+0x40>
c0011630:	83 ec 0c             	sub    esp,0xc
c0011633:	68 2a a7 02 c0       	push   0xc002a72a
c0011638:	e8 4c 89 00 00       	call   c0019f89 <Krnl::panic(char const*)>
c001163d:	83 c4 10             	add    esp,0x10
c0011640:	e9 0a ff ff ff       	jmp    c001154f <Virt::setupPageSwapping(int)+0x126>
c0011645:	90                   	nop

c0011646 <VAS::VAS()>:
c0011646:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001164a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011651:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011655:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001165c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011660:	a3 30 df 02 c0       	mov    ds:0xc002df30,eax
c0011665:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011669:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c001166d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011671:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011674:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011678:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c001167f:	90                   	nop
c0011680:	c3                   	ret    
c0011681:	90                   	nop

c0011682 <VAS::VAS(VAS*)>:
c0011682:	83 ec 0c             	sub    esp,0xc
c0011685:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011689:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011694:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001169b:	83 ec 0c             	sub    esp,0xc
c001169e:	68 3c a5 02 c0       	push   0xc002a53c
c00116a3:	e8 e1 88 00 00       	call   c0019f89 <Krnl::panic(char const*)>
c00116a8:	83 c4 10             	add    esp,0x10
c00116ab:	90                   	nop
c00116ac:	83 c4 0c             	add    esp,0xc
c00116af:	c3                   	ret    

c00116b0 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00116b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00116b4:	89 c2                	mov    edx,eax
c00116b6:	c1 e8 0a             	shr    eax,0xa
c00116b9:	c1 ea 16             	shr    edx,0x16
c00116bc:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00116c1:	19 c9                	sbb    ecx,ecx
c00116c3:	c1 e2 0c             	shl    edx,0xc
c00116c6:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00116cc:	25 fc 0f 00 00       	and    eax,0xffc
c00116d1:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00116d8:	01 d0                	add    eax,edx
c00116da:	c3                   	ret    
c00116db:	90                   	nop

c00116dc <VAS::getPageTableEntry(unsigned long)>:
c00116dc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00116e0:	89 ca                	mov    edx,ecx
c00116e2:	c1 e9 0a             	shr    ecx,0xa
c00116e5:	c1 ea 16             	shr    edx,0x16
c00116e8:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00116ee:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00116f4:	c1 e0 0c             	shl    eax,0xc
c00116f7:	8d 04 08             	lea    eax,[eax+ecx*1]
c00116fa:	c3                   	ret    

c00116fb <Virt::freeKernelVirtualPages(unsigned long)>:
c00116fb:	57                   	push   edi
c00116fc:	56                   	push   esi
c00116fd:	be 01 00 00 00       	mov    esi,0x1
c0011702:	53                   	push   ebx
c0011703:	83 ec 10             	sub    esp,0x10
c0011706:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001170a:	c1 eb 0c             	shr    ebx,0xc
c001170d:	eb 3f                	jmp    c001174e <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c001170f:	83 ec 08             	sub    esp,0x8
c0011712:	57                   	push   edi
c0011713:	ff 35 30 df 02 c0    	push   DWORD PTR ds:0xc002df30
c0011719:	e8 be ff ff ff       	call   c00116dc <VAS::getPageTableEntry(unsigned long)>
c001171e:	83 c4 10             	add    esp,0x10
c0011721:	8b 00                	mov    eax,DWORD PTR [eax]
c0011723:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011727:	f6 c4 04             	test   ah,0x4
c001172a:	75 5f                	jne    c001178b <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c001172c:	80 fa 04             	cmp    dl,0x4
c001172f:	74 78                	je     c00117a9 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011731:	80 fa 02             	cmp    dl,0x2
c0011734:	0f 84 88 00 00 00    	je     c00117c2 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001173a:	80 fa 03             	cmp    dl,0x3
c001173d:	0f 84 ad 00 00 00    	je     c00117f0 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011743:	fe ca                	dec    dl
c0011745:	0f 84 92 00 00 00    	je     c00117dd <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c001174b:	43                   	inc    ebx
c001174c:	31 f6                	xor    esi,esi
c001174e:	53                   	push   ebx
c001174f:	89 df                	mov    edi,ebx
c0011751:	e8 a5 fa ff ff       	call   c00111fb <Virt::getPageState(unsigned long)>
c0011756:	c1 e7 0c             	shl    edi,0xc
c0011759:	59                   	pop    ecx
c001175a:	84 c0                	test   al,al
c001175c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011760:	75 ad                	jne    c001170f <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011762:	83 ec 0c             	sub    esp,0xc
c0011765:	68 4b a7 02 c0       	push   0xc002a74b
c001176a:	e8 1a 88 00 00       	call   c0019f89 <Krnl::panic(char const*)>
c001176f:	58                   	pop    eax
c0011770:	5a                   	pop    edx
c0011771:	57                   	push   edi
c0011772:	ff 35 30 df 02 c0    	push   DWORD PTR ds:0xc002df30
c0011778:	e8 5f ff ff ff       	call   c00116dc <VAS::getPageTableEntry(unsigned long)>
c001177d:	83 c4 10             	add    esp,0x10
c0011780:	8b 00                	mov    eax,DWORD PTR [eax]
c0011782:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011786:	f6 c4 04             	test   ah,0x4
c0011789:	74 c0                	je     c001174b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001178b:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001178f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011794:	83 ec 0c             	sub    esp,0xc
c0011797:	50                   	push   eax
c0011798:	e8 87 e1 ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c001179d:	83 c4 10             	add    esp,0x10
c00117a0:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00117a4:	80 fa 04             	cmp    dl,0x4
c00117a7:	75 88                	jne    c0011731 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00117a9:	89 f0                	mov    eax,esi
c00117ab:	84 c0                	test   al,al
c00117ad:	75 47                	jne    c00117f6 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00117af:	c7 44 24 20 60 a5 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a560
c00117b7:	83 c4 10             	add    esp,0x10
c00117ba:	5b                   	pop    ebx
c00117bb:	5e                   	pop    esi
c00117bc:	5f                   	pop    edi
c00117bd:	e9 c7 87 00 00       	jmp    c0019f89 <Krnl::panic(char const*)>
c00117c2:	89 f0                	mov    eax,esi
c00117c4:	84 c0                	test   al,al
c00117c6:	75 15                	jne    c00117dd <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00117c8:	83 ec 0c             	sub    esp,0xc
c00117cb:	68 67 a7 02 c0       	push   0xc002a767
c00117d0:	e8 b4 87 00 00       	call   c0019f89 <Krnl::panic(char const*)>
c00117d5:	83 c4 10             	add    esp,0x10
c00117d8:	e9 6e ff ff ff       	jmp    c001174b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00117dd:	83 ec 08             	sub    esp,0x8
c00117e0:	6a 00                	push   0x0
c00117e2:	53                   	push   ebx
c00117e3:	e8 de f9 ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00117e8:	83 c4 10             	add    esp,0x10
c00117eb:	e9 5b ff ff ff       	jmp    c001174b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00117f0:	89 f0                	mov    eax,esi
c00117f2:	84 c0                	test   al,al
c00117f4:	75 15                	jne    c001180b <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c00117f6:	83 ec 08             	sub    esp,0x8
c00117f9:	6a 00                	push   0x0
c00117fb:	53                   	push   ebx
c00117fc:	e8 c5 f9 ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011801:	83 c4 10             	add    esp,0x10
c0011804:	83 c4 10             	add    esp,0x10
c0011807:	5b                   	pop    ebx
c0011808:	5e                   	pop    esi
c0011809:	5f                   	pop    edi
c001180a:	c3                   	ret    
c001180b:	c7 44 24 20 83 a7 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a783
c0011813:	83 c4 10             	add    esp,0x10
c0011816:	5b                   	pop    ebx
c0011817:	5e                   	pop    esi
c0011818:	5f                   	pop    edi
c0011819:	e9 6b 87 00 00       	jmp    c0019f89 <Krnl::panic(char const*)>

c001181e <VAS::freeAllocatedPages(unsigned long)>:
c001181e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011822:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011826:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001182a:	74 09                	je     c0011835 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001182c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011830:	e9 c6 fe ff ff       	jmp    c00116fb <Virt::freeKernelVirtualPages(unsigned long)>
c0011835:	c7 44 24 04 84 a5 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a584
c001183d:	e9 5b 0f 00 00       	jmp    c001279d <Dbg::kprintf(char const*, ...)>

c0011842 <VAS::virtualToPhysical(unsigned long)>:
c0011842:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011846:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001184a:	e8 8d fe ff ff       	call   c00116dc <VAS::getPageTableEntry(unsigned long)>
c001184f:	5a                   	pop    edx
c0011850:	8b 00                	mov    eax,DWORD PTR [eax]
c0011852:	59                   	pop    ecx
c0011853:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011858:	c3                   	ret    
c0011859:	90                   	nop

c001185a <VAS::reflagRange(unsigned long, int, int, int)>:
c001185a:	55                   	push   ebp
c001185b:	57                   	push   edi
c001185c:	56                   	push   esi
c001185d:	53                   	push   ebx
c001185e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011862:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011866:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001186a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001186e:	85 db                	test   ebx,ebx
c0011870:	7e 22                	jle    c0011894 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011872:	c1 e3 0c             	shl    ebx,0xc
c0011875:	01 f3                	add    ebx,esi
c0011877:	56                   	push   esi
c0011878:	81 c6 00 10 00 00    	add    esi,0x1000
c001187e:	55                   	push   ebp
c001187f:	e8 58 fe ff ff       	call   c00116dc <VAS::getPageTableEntry(unsigned long)>
c0011884:	5a                   	pop    edx
c0011885:	59                   	pop    ecx
c0011886:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011888:	21 f9                	and    ecx,edi
c001188a:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c001188e:	39 f3                	cmp    ebx,esi
c0011890:	89 08                	mov    DWORD PTR [eax],ecx
c0011892:	75 e3                	jne    c0011877 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011894:	5b                   	pop    ebx
c0011895:	5e                   	pop    esi
c0011896:	5f                   	pop    edi
c0011897:	5d                   	pop    ebp
c0011898:	c3                   	ret    
c0011899:	90                   	nop

c001189a <VAS::setToWriteCombining(unsigned long, int)>:
c001189a:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c001189f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00118a5:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00118ac:	75 01                	jne    c00118af <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00118ae:	c3                   	ret    
c00118af:	68 80 00 00 00       	push   0x80
c00118b4:	6a ff                	push   0xffffffff
c00118b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00118ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00118be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00118c2:	e8 93 ff ff ff       	call   c001185a <VAS::reflagRange(unsigned long, int, int, int)>
c00118c7:	83 c4 14             	add    esp,0x14
c00118ca:	c3                   	ret    
c00118cb:	90                   	nop

c00118cc <VAS::mapOtherVASIn(bool, VAS*)>:
c00118cc:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00118d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118d5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00118d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118dc:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00118df:	19 c0                	sbb    eax,eax
c00118e1:	83 ca 03             	or     edx,0x3
c00118e4:	83 e0 fc             	and    eax,0xfffffffc
c00118e7:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00118ee:	0f 20 d8             	mov    eax,cr3
c00118f1:	0f 22 d8             	mov    cr3,eax
c00118f4:	c3                   	ret    
c00118f5:	90                   	nop

c00118f6 <VAS::~VAS()>:
c00118f6:	83 ec 2c             	sub    esp,0x2c
c00118f9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011901:	fa                   	cli    
c0011902:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0011907:	40                   	inc    eax
c0011908:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c001190d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011912:	8b 00                	mov    eax,DWORD PTR [eax]
c0011914:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011917:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001191d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011921:	6a 01                	push   0x1
c0011923:	50                   	push   eax
c0011924:	e8 a3 ff ff ff       	call   c00118cc <VAS::mapOtherVASIn(bool, VAS*)>
c0011929:	83 c4 0c             	add    esp,0xc
c001192c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011934:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c001193c:	0f 8f d4 00 00 00    	jg     c0011a16 <VAS::~VAS()+0x120>
c0011942:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011946:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011949:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001194d:	c1 e2 02             	shl    edx,0x2
c0011950:	01 d0                	add    eax,edx
c0011952:	8b 00                	mov    eax,DWORD PTR [eax]
c0011954:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001195c:	83 e0 01             	and    eax,0x1
c001195f:	0f 84 a8 00 00 00    	je     c0011a0d <VAS::~VAS()+0x117>
c0011965:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001196d:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011975:	7f 72                	jg     c00119e9 <VAS::~VAS()+0xf3>
c0011977:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001197b:	c1 e0 0a             	shl    eax,0xa
c001197e:	89 c2                	mov    edx,eax
c0011980:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011984:	01 d0                	add    eax,edx
c0011986:	c1 e0 0c             	shl    eax,0xc
c0011989:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001198d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011992:	8b 00                	mov    eax,DWORD PTR [eax]
c0011994:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011997:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001199d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00119a1:	6a 01                	push   0x1
c00119a3:	50                   	push   eax
c00119a4:	e8 07 fd ff ff       	call   c00116b0 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00119a9:	83 c4 0c             	add    esp,0xc
c00119ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00119b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00119b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00119b6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00119ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00119be:	25 01 04 00 00       	and    eax,0x401
c00119c3:	3d 01 04 00 00       	cmp    eax,0x401
c00119c8:	75 19                	jne    c00119e3 <VAS::~VAS()+0xed>
c00119ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00119ce:	25 00 f0 ff ff       	and    eax,0xfffff000
c00119d3:	83 ec 0c             	sub    esp,0xc
c00119d6:	50                   	push   eax
c00119d7:	e8 48 df ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c00119dc:	83 c4 10             	add    esp,0x10
c00119df:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00119e3:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00119e7:	eb 84                	jmp    c001196d <VAS::~VAS()+0x77>
c00119e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119ed:	25 00 04 00 00       	and    eax,0x400
c00119f2:	74 19                	je     c0011a0d <VAS::~VAS()+0x117>
c00119f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119f8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00119fd:	83 ec 0c             	sub    esp,0xc
c0011a00:	50                   	push   eax
c0011a01:	e8 1e df ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c0011a06:	83 c4 10             	add    esp,0x10
c0011a09:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011a0d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011a11:	e9 1e ff ff ff       	jmp    c0011934 <VAS::~VAS()+0x3e>
c0011a16:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011a1a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011a1d:	83 ec 0c             	sub    esp,0xc
c0011a20:	50                   	push   eax
c0011a21:	e8 d5 fc ff ff       	call   c00116fb <Virt::freeKernelVirtualPages(unsigned long)>
c0011a26:	83 c4 10             	add    esp,0x10
c0011a29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011a2d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011a30:	83 ec 0c             	sub    esp,0xc
c0011a33:	50                   	push   eax
c0011a34:	e8 eb de ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c0011a39:	83 c4 10             	add    esp,0x10
c0011a3c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011a40:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011a44:	c1 e0 02             	shl    eax,0x2
c0011a47:	83 ec 08             	sub    esp,0x8
c0011a4a:	50                   	push   eax
c0011a4b:	68 a8 a5 02 c0       	push   0xc002a5a8
c0011a50:	e8 48 0d 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0011a55:	83 c4 10             	add    esp,0x10
c0011a58:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0011a5d:	48                   	dec    eax
c0011a5e:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c0011a63:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0011a68:	85 c0                	test   eax,eax
c0011a6a:	75 01                	jne    c0011a6d <VAS::~VAS()+0x177>
c0011a6c:	fb                   	sti    
c0011a6d:	90                   	nop
c0011a6e:	83 c4 2c             	add    esp,0x2c
c0011a71:	c3                   	ret    

c0011a72 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011a72:	55                   	push   ebp
c0011a73:	57                   	push   edi
c0011a74:	56                   	push   esi
c0011a75:	53                   	push   ebx
c0011a76:	83 ec 1c             	sub    esp,0x1c
c0011a79:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011a7d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011a81:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011a87:	77 08                	ja     c0011a91 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011a89:	0f 20 d8             	mov    eax,cr3
c0011a8c:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0011a8f:	75 47                	jne    c0011ad8 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011a91:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011a95:	09 d8                	or     eax,ebx
c0011a97:	a9 ff 0f 00 00       	test   eax,0xfff
c0011a9c:	75 57                	jne    c0011af5 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011a9e:	89 de                	mov    esi,ebx
c0011aa0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011aa3:	c1 ee 16             	shr    esi,0x16
c0011aa6:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011aad:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011ab1:	74 54                	je     c0011b07 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011ab3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011ab7:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011abd:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011ac1:	c1 e6 0c             	shl    esi,0xc
c0011ac4:	c1 eb 0a             	shr    ebx,0xa
c0011ac7:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011acd:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011ad0:	83 c4 1c             	add    esp,0x1c
c0011ad3:	5b                   	pop    ebx
c0011ad4:	5e                   	pop    esi
c0011ad5:	5f                   	pop    edi
c0011ad6:	5d                   	pop    ebp
c0011ad7:	c3                   	ret    
c0011ad8:	83 ec 0c             	sub    esp,0xc
c0011adb:	68 c8 a5 02 c0       	push   0xc002a5c8
c0011ae0:	e8 b8 0c 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0011ae5:	83 c4 10             	add    esp,0x10
c0011ae8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011aec:	09 d8                	or     eax,ebx
c0011aee:	a9 ff 0f 00 00       	test   eax,0xfff
c0011af3:	74 a9                	je     c0011a9e <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011af5:	83 ec 0c             	sub    esp,0xc
c0011af8:	68 30 a6 02 c0       	push   0xc002a630
c0011afd:	e8 87 84 00 00       	call   c0019f89 <Krnl::panic(char const*)>
c0011b02:	83 c4 10             	add    esp,0x10
c0011b05:	eb 97                	jmp    c0011a9e <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011b07:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011b0b:	e8 85 de ff ff       	call   c000f995 <Phys::allocatePage()>
c0011b10:	83 ec 0c             	sub    esp,0xc
c0011b13:	89 c5                	mov    ebp,eax
c0011b15:	8b 0d 30 df 02 c0    	mov    ecx,DWORD PTR ds:0xc002df30
c0011b1b:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011b1f:	6a 01                	push   0x1
c0011b21:	e8 f9 f6 ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0011b26:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011b2d:	6a 01                	push   0x1
c0011b2f:	50                   	push   eax
c0011b30:	55                   	push   ebp
c0011b31:	81 cd 07 04 00 00    	or     ebp,0x407
c0011b37:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011b3b:	51                   	push   ecx
c0011b3c:	e8 27 02 00 00       	call   c0011d68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011b41:	83 c4 1c             	add    esp,0x1c
c0011b44:	68 00 10 00 00       	push   0x1000
c0011b49:	6a 00                	push   0x0
c0011b4b:	50                   	push   eax
c0011b4c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011b50:	e8 fb eb fe ff       	call   c0000750 <memset>
c0011b55:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011b59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011b5c:	e8 9a fb ff ff       	call   c00116fb <Virt::freeKernelVirtualPages(unsigned long)>
c0011b61:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011b65:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011b68:	83 c4 10             	add    esp,0x10
c0011b6b:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011b6e:	e9 40 ff ff ff       	jmp    c0011ab3 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0011b73:	90                   	nop

c0011b74 <VAS::allocatePages(int, int)>:
c0011b74:	55                   	push   ebp
c0011b75:	57                   	push   edi
c0011b76:	56                   	push   esi
c0011b77:	53                   	push   ebx
c0011b78:	83 ec 1c             	sub    esp,0x1c
c0011b7b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011b7f:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c0011b84:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011b8a:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011b90:	83 e0 01             	and    eax,0x1
c0011b93:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011b97:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011b9b:	0f 85 cc 00 00 00    	jne    c0011c6d <VAS::allocatePages(int, int)+0xf9>
c0011ba1:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011ba4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011ba8:	85 c0                	test   eax,eax
c0011baa:	0f 84 a1 00 00 00    	je     c0011c51 <VAS::allocatePages(int, int)+0xdd>
c0011bb0:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011bb4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011bb8:	c1 e6 0c             	shl    esi,0xc
c0011bbb:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011bbf:	85 c0                	test   eax,eax
c0011bc1:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011bc4:	7e 33                	jle    c0011bf9 <VAS::allocatePages(int, int)+0x85>
c0011bc6:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011bca:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011bce:	81 cd 00 04 00 00    	or     ebp,0x400
c0011bd4:	e8 bc dd ff ff       	call   c000f995 <Phys::allocatePage()>
c0011bd9:	55                   	push   ebp
c0011bda:	53                   	push   ebx
c0011bdb:	50                   	push   eax
c0011bdc:	57                   	push   edi
c0011bdd:	e8 90 fe ff ff       	call   c0011a72 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011be2:	83 c4 10             	add    esp,0x10
c0011be5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011bea:	74 03                	je     c0011bef <VAS::allocatePages(int, int)+0x7b>
c0011bec:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011bef:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011bf5:	39 de                	cmp    esi,ebx
c0011bf7:	75 db                	jne    c0011bd4 <VAS::allocatePages(int, int)+0x60>
c0011bf9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011bfe:	75 12                	jne    c0011c12 <VAS::allocatePages(int, int)+0x9e>
c0011c00:	0f 20 d8             	mov    eax,cr3
c0011c03:	0f 22 d8             	mov    cr3,eax
c0011c06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c0a:	83 c4 1c             	add    esp,0x1c
c0011c0d:	5b                   	pop    ebx
c0011c0e:	5e                   	pop    esi
c0011c0f:	5f                   	pop    edi
c0011c10:	5d                   	pop    ebp
c0011c11:	c3                   	ret    
c0011c12:	c1 ee 0a             	shr    esi,0xa
c0011c15:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011c19:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011c1f:	c1 eb 0a             	shr    ebx,0xa
c0011c22:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011c28:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011c2e:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011c34:	39 c3                	cmp    ebx,eax
c0011c36:	77 ce                	ja     c0011c06 <VAS::allocatePages(int, int)+0x92>
c0011c38:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c3b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c41:	39 d8                	cmp    eax,ebx
c0011c43:	73 f3                	jae    c0011c38 <VAS::allocatePages(int, int)+0xc4>
c0011c45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c49:	83 c4 1c             	add    esp,0x1c
c0011c4c:	5b                   	pop    ebx
c0011c4d:	5e                   	pop    esi
c0011c4e:	5f                   	pop    edi
c0011c4f:	5d                   	pop    ebp
c0011c50:	c3                   	ret    
c0011c51:	83 ec 0c             	sub    esp,0xc
c0011c54:	68 54 a6 02 c0       	push   0xc002a654
c0011c59:	e8 2b 83 00 00       	call   c0019f89 <Krnl::panic(char const*)>
c0011c5e:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011c61:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011c65:	83 c4 10             	add    esp,0x10
c0011c68:	e9 43 ff ff ff       	jmp    c0011bb0 <VAS::allocatePages(int, int)+0x3c>
c0011c6d:	83 ec 0c             	sub    esp,0xc
c0011c70:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011c74:	e8 a6 f5 ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0011c79:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011c7d:	83 c4 10             	add    esp,0x10
c0011c80:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011c85:	0f 87 9b 00 00 00    	ja     c0011d26 <VAS::allocatePages(int, int)+0x1b2>
c0011c8b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011c8f:	85 d2                	test   edx,edx
c0011c91:	7e 3c                	jle    c0011ccf <VAS::allocatePages(int, int)+0x15b>
c0011c93:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011c97:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011c9b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011c9f:	c1 e5 0c             	shl    ebp,0xc
c0011ca2:	81 ce 00 04 00 00    	or     esi,0x400
c0011ca8:	01 dd                	add    ebp,ebx
c0011caa:	e8 e6 dc ff ff       	call   c000f995 <Phys::allocatePage()>
c0011caf:	56                   	push   esi
c0011cb0:	53                   	push   ebx
c0011cb1:	50                   	push   eax
c0011cb2:	57                   	push   edi
c0011cb3:	e8 ba fd ff ff       	call   c0011a72 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011cb8:	83 c4 10             	add    esp,0x10
c0011cbb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011cc0:	74 03                	je     c0011cc5 <VAS::allocatePages(int, int)+0x151>
c0011cc2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011cc5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ccb:	39 dd                	cmp    ebp,ebx
c0011ccd:	75 db                	jne    c0011caa <VAS::allocatePages(int, int)+0x136>
c0011ccf:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011cd4:	0f 84 26 ff ff ff    	je     c0011c00 <VAS::allocatePages(int, int)+0x8c>
c0011cda:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011cde:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ce2:	89 d3                	mov    ebx,edx
c0011ce4:	c1 e0 0c             	shl    eax,0xc
c0011ce7:	c1 eb 0a             	shr    ebx,0xa
c0011cea:	01 d0                	add    eax,edx
c0011cec:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011cf2:	c1 e8 0a             	shr    eax,0xa
c0011cf5:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011cfb:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011d00:	2d 00 00 40 00       	sub    eax,0x400000
c0011d05:	39 c3                	cmp    ebx,eax
c0011d07:	0f 87 f9 fe ff ff    	ja     c0011c06 <VAS::allocatePages(int, int)+0x92>
c0011d0d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011d10:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011d16:	39 d8                	cmp    eax,ebx
c0011d18:	73 f3                	jae    c0011d0d <VAS::allocatePages(int, int)+0x199>
c0011d1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d1e:	83 c4 1c             	add    esp,0x1c
c0011d21:	5b                   	pop    ebx
c0011d22:	5e                   	pop    esi
c0011d23:	5f                   	pop    edi
c0011d24:	5d                   	pop    ebp
c0011d25:	c3                   	ret    
c0011d26:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c0011d2b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011d31:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011d38:	0f 84 4d ff ff ff    	je     c0011c8b <VAS::allocatePages(int, int)+0x117>
c0011d3e:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011d46:	e9 40 ff ff ff       	jmp    c0011c8b <VAS::allocatePages(int, int)+0x117>
c0011d4b:	90                   	nop

c0011d4c <VAS::setCPUSpecific(unsigned long)>:
c0011d4c:	83 ec 0c             	sub    esp,0xc
c0011d4f:	6a 05                	push   0x5
c0011d51:	68 00 00 40 c2       	push   0xc2400000
c0011d56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011d5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011d5e:	e8 0f fd ff ff       	call   c0011a72 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011d63:	83 c4 1c             	add    esp,0x1c
c0011d66:	c3                   	ret    
c0011d67:	90                   	nop

c0011d68 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011d68:	55                   	push   ebp
c0011d69:	57                   	push   edi
c0011d6a:	56                   	push   esi
c0011d6b:	53                   	push   ebx
c0011d6c:	83 ec 1c             	sub    esp,0x1c
c0011d6f:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c0011d74:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011d78:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011d7e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011d82:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011d88:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011d8c:	83 e0 01             	and    eax,0x1
c0011d8f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011d93:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d97:	85 c0                	test   eax,eax
c0011d99:	7e 39                	jle    c0011dd4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0011d9b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d9f:	89 f3                	mov    ebx,esi
c0011da1:	c1 e0 0c             	shl    eax,0xc
c0011da4:	01 f0                	add    eax,esi
c0011da6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011daa:	55                   	push   ebp
c0011dab:	53                   	push   ebx
c0011dac:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011db0:	29 f0                	sub    eax,esi
c0011db2:	01 d8                	add    eax,ebx
c0011db4:	50                   	push   eax
c0011db5:	57                   	push   edi
c0011db6:	e8 b7 fc ff ff       	call   c0011a72 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011dbb:	83 c4 10             	add    esp,0x10
c0011dbe:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011dc3:	74 03                	je     c0011dc8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0011dc5:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011dc8:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011dce:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011dd2:	75 d6                	jne    c0011daa <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0011dd4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011dd9:	75 10                	jne    c0011deb <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0011ddb:	0f 20 d8             	mov    eax,cr3
c0011dde:	0f 22 d8             	mov    cr3,eax
c0011de1:	83 c4 1c             	add    esp,0x1c
c0011de4:	89 f0                	mov    eax,esi
c0011de6:	5b                   	pop    ebx
c0011de7:	5e                   	pop    esi
c0011de8:	5f                   	pop    edi
c0011de9:	5d                   	pop    ebp
c0011dea:	c3                   	ret    
c0011deb:	89 f3                	mov    ebx,esi
c0011ded:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011df1:	c1 eb 0a             	shr    ebx,0xa
c0011df4:	c1 e0 0c             	shl    eax,0xc
c0011df7:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011dfd:	01 f0                	add    eax,esi
c0011dff:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011e05:	c1 e8 0a             	shr    eax,0xa
c0011e08:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011e0d:	2d 00 00 40 00       	sub    eax,0x400000
c0011e12:	39 c3                	cmp    ebx,eax
c0011e14:	77 cb                	ja     c0011de1 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0011e16:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011e19:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011e1f:	39 d8                	cmp    eax,ebx
c0011e21:	73 f3                	jae    c0011e16 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0011e23:	83 c4 1c             	add    esp,0x1c
c0011e26:	89 f0                	mov    eax,esi
c0011e28:	5b                   	pop    ebx
c0011e29:	5e                   	pop    esi
c0011e2a:	5f                   	pop    edi
c0011e2b:	5d                   	pop    ebp
c0011e2c:	c3                   	ret    
c0011e2d:	90                   	nop

c0011e2e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011e2e:	55                   	push   ebp
c0011e2f:	57                   	push   edi
c0011e30:	56                   	push   esi
c0011e31:	53                   	push   ebx
c0011e32:	83 ec 1c             	sub    esp,0x1c
c0011e35:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011e39:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011e3d:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011e41:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011e45:	a9 ff 0f 00 00       	test   eax,0xfff
c0011e4a:	75 4a                	jne    c0011e96 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011e4c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011e50:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011e53:	c1 eb 16             	shr    ebx,0x16
c0011e56:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011e5d:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011e61:	74 4d                	je     c0011eb0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011e63:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011e67:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011e6b:	c1 e8 0a             	shr    eax,0xa
c0011e6e:	80 fa 01             	cmp    dl,0x1
c0011e71:	19 d2                	sbb    edx,edx
c0011e73:	c1 e3 0c             	shl    ebx,0xc
c0011e76:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0011e7a:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0011e80:	25 fc 0f 00 00       	and    eax,0xffc
c0011e85:	01 d8                	add    eax,ebx
c0011e87:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0011e8e:	83 c4 1c             	add    esp,0x1c
c0011e91:	5b                   	pop    ebx
c0011e92:	5e                   	pop    esi
c0011e93:	5f                   	pop    edi
c0011e94:	5d                   	pop    ebp
c0011e95:	c3                   	ret    
c0011e96:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011e9a:	83 ec 0c             	sub    esp,0xc
c0011e9d:	68 80 a6 02 c0       	push   0xc002a680
c0011ea2:	e8 e2 80 00 00       	call   c0019f89 <Krnl::panic(char const*)>
c0011ea7:	83 c4 10             	add    esp,0x10
c0011eaa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011eae:	eb 9c                	jmp    c0011e4c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0011eb0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011eb4:	e8 dc da ff ff       	call   c000f995 <Phys::allocatePage()>
c0011eb9:	83 ec 0c             	sub    esp,0xc
c0011ebc:	89 c5                	mov    ebp,eax
c0011ebe:	8b 0d 30 df 02 c0    	mov    ecx,DWORD PTR ds:0xc002df30
c0011ec4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011ec8:	6a 01                	push   0x1
c0011eca:	e8 50 f3 ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0011ecf:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011ed6:	6a 01                	push   0x1
c0011ed8:	50                   	push   eax
c0011ed9:	55                   	push   ebp
c0011eda:	81 cd 07 04 00 00    	or     ebp,0x407
c0011ee0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011ee4:	51                   	push   ecx
c0011ee5:	e8 7e fe ff ff       	call   c0011d68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011eea:	83 c4 1c             	add    esp,0x1c
c0011eed:	68 00 10 00 00       	push   0x1000
c0011ef2:	6a 00                	push   0x0
c0011ef4:	50                   	push   eax
c0011ef5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011ef9:	e8 52 e8 fe ff       	call   c0000750 <memset>
c0011efe:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011f02:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011f05:	e8 f1 f7 ff ff       	call   c00116fb <Virt::freeKernelVirtualPages(unsigned long)>
c0011f0a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011f0d:	83 c4 10             	add    esp,0x10
c0011f10:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0011f13:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011f17:	e9 47 ff ff ff       	jmp    c0011e63 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0011f1c <VAS::VAS(bool)>:
c0011f1c:	53                   	push   ebx
c0011f1d:	83 ec 28             	sub    esp,0x28
c0011f20:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f24:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011f28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f2c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f37:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011f3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f42:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0011f46:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011f49:	e8 47 da ff ff       	call   c000f995 <Phys::allocatePage()>
c0011f4e:	89 c2                	mov    edx,eax
c0011f50:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f54:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0011f57:	8b 1d 30 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002df30
c0011f5d:	83 ec 0c             	sub    esp,0xc
c0011f60:	6a 01                	push   0x1
c0011f62:	e8 b8 f2 ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0011f67:	83 c4 10             	add    esp,0x10
c0011f6a:	89 c2                	mov    edx,eax
c0011f6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f70:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011f73:	83 ec 0c             	sub    esp,0xc
c0011f76:	6a 03                	push   0x3
c0011f78:	6a 01                	push   0x1
c0011f7a:	52                   	push   edx
c0011f7b:	50                   	push   eax
c0011f7c:	53                   	push   ebx
c0011f7d:	e8 e6 fd ff ff       	call   c0011d68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011f82:	83 c4 20             	add    esp,0x20
c0011f85:	89 c2                	mov    edx,eax
c0011f87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f8b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011f8e:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011f96:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0011f9e:	7f 1c                	jg     c0011fbc <VAS::VAS(bool)+0xa0>
c0011fa0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011fa4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011fa7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011fab:	c1 e2 02             	shl    edx,0x2
c0011fae:	01 d0                	add    eax,edx
c0011fb0:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011fb6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011fba:	eb da                	jmp    c0011f96 <VAS::VAS(bool)+0x7a>
c0011fbc:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0011fc4:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0011fcc:	7f 7a                	jg     c0012048 <VAS::VAS(bool)+0x12c>
c0011fce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011fd2:	2d 00 02 00 00       	sub    eax,0x200
c0011fd7:	c1 e0 0c             	shl    eax,0xc
c0011fda:	83 c8 03             	or     eax,0x3
c0011fdd:	89 c2                	mov    edx,eax
c0011fdf:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c0011fe4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fea:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011ff0:	83 e0 10             	and    eax,0x10
c0011ff3:	84 c0                	test   al,al
c0011ff5:	74 07                	je     c0011ffe <VAS::VAS(bool)+0xe2>
c0011ff7:	b8 00 01 00 00       	mov    eax,0x100
c0011ffc:	eb 05                	jmp    c0012003 <VAS::VAS(bool)+0xe7>
c0011ffe:	b8 00 00 00 00       	mov    eax,0x0
c0012003:	09 d0                	or     eax,edx
c0012005:	89 c1                	mov    ecx,eax
c0012007:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001200b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001200e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012012:	c1 e2 02             	shl    edx,0x2
c0012015:	01 d0                	add    eax,edx
c0012017:	89 ca                	mov    edx,ecx
c0012019:	89 10                	mov    DWORD PTR [eax],edx
c001201b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001201f:	2d 40 03 00 00       	sub    eax,0x340
c0012024:	83 f8 7f             	cmp    eax,0x7f
c0012027:	77 16                	ja     c001203f <VAS::VAS(bool)+0x123>
c0012029:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001202d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012030:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012034:	c1 e2 02             	shl    edx,0x2
c0012037:	01 d0                	add    eax,edx
c0012039:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001203f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012043:	e9 7c ff ff ff       	jmp    c0011fc4 <VAS::VAS(bool)+0xa8>
c0012048:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c001204d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012053:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012059:	83 e0 10             	and    eax,0x10
c001205c:	84 c0                	test   al,al
c001205e:	74 07                	je     c0012067 <VAS::VAS(bool)+0x14b>
c0012060:	b8 03 41 00 00       	mov    eax,0x4103
c0012065:	eb 05                	jmp    c001206c <VAS::VAS(bool)+0x150>
c0012067:	b8 03 40 00 00       	mov    eax,0x4003
c001206c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012070:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0012073:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012079:	89 02                	mov    DWORD PTR [edx],eax
c001207b:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c0012080:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012086:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001208c:	83 ec 08             	sub    esp,0x8
c001208f:	50                   	push   eax
c0012090:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012094:	e8 b3 fc ff ff       	call   c0011d4c <VAS::setCPUSpecific(unsigned long)>
c0012099:	83 c4 10             	add    esp,0x10
c001209c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120a0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00120a3:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c00120a8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120ae:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00120b4:	83 e0 10             	and    eax,0x10
c00120b7:	84 c0                	test   al,al
c00120b9:	74 07                	je     c00120c2 <VAS::VAS(bool)+0x1a6>
c00120bb:	b8 00 01 00 00       	mov    eax,0x100
c00120c0:	eb 05                	jmp    c00120c7 <VAS::VAS(bool)+0x1ab>
c00120c2:	b8 00 00 00 00       	mov    eax,0x0
c00120c7:	09 c2                	or     edx,eax
c00120c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120cd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00120d0:	05 fc 0f 00 00       	add    eax,0xffc
c00120d5:	83 ca 03             	or     edx,0x3
c00120d8:	89 10                	mov    DWORD PTR [eax],edx
c00120da:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c00120df:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120e5:	83 ec 0c             	sub    esp,0xc
c00120e8:	50                   	push   eax
c00120e9:	e8 e8 1d 00 00       	call   c0013ed6 <Device::getName()>
c00120ee:	83 c4 10             	add    esp,0x10
c00120f1:	83 ec 08             	sub    esp,0x8
c00120f4:	68 9d a7 02 c0       	push   0xc002a79d
c00120f9:	50                   	push   eax
c00120fa:	e8 99 e7 fe ff       	call   c0000898 <strcmp>
c00120ff:	83 c4 10             	add    esp,0x10
c0012102:	85 c0                	test   eax,eax
c0012104:	0f 94 c0             	sete   al
c0012107:	84 c0                	test   al,al
c0012109:	0f 84 87 00 00 00    	je     c0012196 <VAS::VAS(bool)+0x27a>
c001210f:	fa                   	cli    
c0012110:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0012115:	40                   	inc    eax
c0012116:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c001211b:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c0012120:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012126:	05 7c 09 00 00       	add    eax,0x97c
c001212b:	83 ec 0c             	sub    esp,0xc
c001212e:	50                   	push   eax
c001212f:	e8 ea ce ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012134:	83 c4 10             	add    esp,0x10
c0012137:	25 00 f0 ff ff       	and    eax,0xfffff000
c001213c:	89 c3                	mov    ebx,eax
c001213e:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c0012143:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012149:	05 7c 09 00 00       	add    eax,0x97c
c001214e:	83 ec 0c             	sub    esp,0xc
c0012151:	50                   	push   eax
c0012152:	e8 c7 ce ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012157:	83 c4 10             	add    esp,0x10
c001215a:	83 ec 08             	sub    esp,0x8
c001215d:	50                   	push   eax
c001215e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012162:	e8 75 f5 ff ff       	call   c00116dc <VAS::getPageTableEntry(unsigned long)>
c0012167:	83 c4 10             	add    esp,0x10
c001216a:	8b 00                	mov    eax,DWORD PTR [eax]
c001216c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012171:	6a 11                	push   0x11
c0012173:	53                   	push   ebx
c0012174:	50                   	push   eax
c0012175:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012179:	e8 f4 f8 ff ff       	call   c0011a72 <VAS::mapPage(unsigned long, unsigned long, int)>
c001217e:	83 c4 10             	add    esp,0x10
c0012181:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0012186:	48                   	dec    eax
c0012187:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c001218c:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0012191:	85 c0                	test   eax,eax
c0012193:	75 01                	jne    c0012196 <VAS::VAS(bool)+0x27a>
c0012195:	fb                   	sti    
c0012196:	90                   	nop
c0012197:	83 c4 28             	add    esp,0x28
c001219a:	5b                   	pop    ebx
c001219b:	c3                   	ret    

c001219c <VAS::evict(unsigned long)>:
c001219c:	55                   	push   ebp
c001219d:	57                   	push   edi
c001219e:	56                   	push   esi
c001219f:	53                   	push   ebx
c00121a0:	83 ec 28             	sub    esp,0x28
c00121a3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00121a7:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00121ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00121af:	68 ab a7 02 c0       	push   0xc002a7ab
c00121b4:	e8 e4 05 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00121b9:	e8 a2 f1 ff ff       	call   c0011360 <Virt::allocateSwapfilePage()>
c00121be:	5a                   	pop    edx
c00121bf:	89 c7                	mov    edi,eax
c00121c1:	59                   	pop    ecx
c00121c2:	50                   	push   eax
c00121c3:	68 c8 a7 02 c0       	push   0xc002a7c8
c00121c8:	e8 d0 05 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00121cd:	83 c4 10             	add    esp,0x10
c00121d0:	8b 1d 6c cd 02 c0    	mov    ebx,DWORD PTR ds:0xc002cd6c
c00121d6:	85 db                	test   ebx,ebx
c00121d8:	7e 3d                	jle    c0012217 <VAS::evict(unsigned long)+0x7b>
c00121da:	89 ee                	mov    esi,ebp
c00121dc:	31 db                	xor    ebx,ebx
c00121de:	83 ec 0c             	sub    esp,0xc
c00121e1:	57                   	push   edi
c00121e2:	e8 67 f1 ff ff       	call   c001134e <Virt::swapIDToSector(unsigned long)>
c00121e7:	89 34 24             	mov    DWORD PTR [esp],esi
c00121ea:	01 d8                	add    eax,ebx
c00121ec:	6a 01                	push   0x1
c00121ee:	31 d2                	xor    edx,edx
c00121f0:	43                   	inc    ebx
c00121f1:	52                   	push   edx
c00121f2:	81 c6 00 02 00 00    	add    esi,0x200
c00121f8:	50                   	push   eax
c00121f9:	0f be 05 78 cd 02 c0 	movsx  eax,BYTE PTR ds:0xc002cd78
c0012200:	ff 34 85 bc e2 02 c0 	push   DWORD PTR [eax*4-0x3ffd1d44]
c0012207:	e8 58 3f 00 00       	call   c0016164 <LogicalDisk::write(unsigned long long, int, void*)>
c001220c:	83 c4 20             	add    esp,0x20
c001220f:	39 1d 6c cd 02 c0    	cmp    DWORD PTR ds:0xc002cd6c,ebx
c0012215:	7f c7                	jg     c00121de <VAS::evict(unsigned long)+0x42>
c0012217:	83 ec 08             	sub    esp,0x8
c001221a:	c1 e7 0b             	shl    edi,0xb
c001221d:	55                   	push   ebp
c001221e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012222:	e8 b5 f4 ff ff       	call   c00116dc <VAS::getPageTableEntry(unsigned long)>
c0012227:	5a                   	pop    edx
c0012228:	89 c6                	mov    esi,eax
c001222a:	59                   	pop    ecx
c001222b:	ff 30                	push   DWORD PTR [eax]
c001222d:	68 d8 a7 02 c0       	push   0xc002a7d8
c0012232:	e8 66 05 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0012237:	8b 16                	mov    edx,DWORD PTR [esi]
c0012239:	89 d3                	mov    ebx,edx
c001223b:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012241:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012247:	09 d7                	or     edi,edx
c0012249:	89 3e                	mov    DWORD PTR [esi],edi
c001224b:	5e                   	pop    esi
c001224c:	58                   	pop    eax
c001224d:	57                   	push   edi
c001224e:	68 f1 a7 02 c0       	push   0xc002a7f1
c0012253:	e8 45 05 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0012258:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001225b:	ff 05 28 df 02 c0    	inc    DWORD PTR ds:0xc002df28
c0012261:	e8 be d6 ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c0012266:	0f 20 d8             	mov    eax,cr3
c0012269:	0f 22 d8             	mov    cr3,eax
c001226c:	ff 35 28 df 02 c0    	push   DWORD PTR ds:0xc002df28
c0012272:	55                   	push   ebp
c0012273:	53                   	push   ebx
c0012274:	68 a4 a6 02 c0       	push   0xc002a6a4
c0012279:	e8 1f 05 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001227e:	a1 24 df 02 c0       	mov    eax,ds:0xc002df24
c0012283:	c7 44 24 50 0a a8 02 c0 	mov    DWORD PTR [esp+0x50],0xc002a80a
c001228b:	8d 50 01             	lea    edx,[eax+0x1]
c001228e:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0012292:	89 15 24 df 02 c0    	mov    DWORD PTR ds:0xc002df24,edx
c0012298:	83 c4 3c             	add    esp,0x3c
c001229b:	5b                   	pop    ebx
c001229c:	5e                   	pop    esi
c001229d:	5f                   	pop    edi
c001229e:	5d                   	pop    ebp
c001229f:	e9 f9 04 00 00       	jmp    c001279d <Dbg::kprintf(char const*, ...)>

c00122a4 <VAS::tryLoadBackOffDisk(unsigned long)>:
c00122a4:	55                   	push   ebp
c00122a5:	57                   	push   edi
c00122a6:	56                   	push   esi
c00122a7:	53                   	push   ebx
c00122a8:	83 ec 24             	sub    esp,0x24
c00122ab:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00122af:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00122b3:	68 1b a8 02 c0       	push   0xc002a81b
c00122b8:	e8 e0 04 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00122bd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00122c1:	58                   	pop    eax
c00122c2:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c00122c8:	5a                   	pop    edx
c00122c9:	57                   	push   edi
c00122ca:	53                   	push   ebx
c00122cb:	e8 0c f4 ff ff       	call   c00116dc <VAS::getPageTableEntry(unsigned long)>
c00122d0:	59                   	pop    ecx
c00122d1:	5e                   	pop    esi
c00122d2:	89 c6                	mov    esi,eax
c00122d4:	ff 30                	push   DWORD PTR [eax]
c00122d6:	68 2e a8 02 c0       	push   0xc002a82e
c00122db:	e8 bd 04 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00122e0:	83 c4 10             	add    esp,0x10
c00122e3:	85 ff                	test   edi,edi
c00122e5:	74 0a                	je     c00122f1 <VAS::tryLoadBackOffDisk(unsigned long)+0x4d>
c00122e7:	8b 2e                	mov    ebp,DWORD PTR [esi]
c00122e9:	f7 c5 01 00 00 00    	test   ebp,0x1
c00122ef:	74 0a                	je     c00122fb <VAS::tryLoadBackOffDisk(unsigned long)+0x57>
c00122f1:	83 c4 1c             	add    esp,0x1c
c00122f4:	31 c0                	xor    eax,eax
c00122f6:	5b                   	pop    ebx
c00122f7:	5e                   	pop    esi
c00122f8:	5f                   	pop    edi
c00122f9:	5d                   	pop    ebp
c00122fa:	c3                   	ret    
c00122fb:	83 ec 08             	sub    esp,0x8
c00122fe:	c1 ed 0b             	shr    ebp,0xb
c0012301:	55                   	push   ebp
c0012302:	68 3c a8 02 c0       	push   0xc002a83c
c0012307:	e8 91 04 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001230c:	e8 84 d6 ff ff       	call   c000f995 <Phys::allocatePage()>
c0012311:	59                   	pop    ecx
c0012312:	5a                   	pop    edx
c0012313:	50                   	push   eax
c0012314:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012318:	68 47 a8 02 c0       	push   0xc002a847
c001231d:	e8 7b 04 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0012322:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012326:	8b 16                	mov    edx,DWORD PTR [esi]
c0012328:	81 e2 ff 0f 00 00    	and    edx,0xfff
c001232e:	09 d0                	or     eax,edx
c0012330:	0d 01 08 00 00       	or     eax,0x801
c0012335:	89 06                	mov    DWORD PTR [esi],eax
c0012337:	59                   	pop    ecx
c0012338:	5e                   	pop    esi
c0012339:	50                   	push   eax
c001233a:	68 5c a8 02 c0       	push   0xc002a85c
c001233f:	e8 59 04 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0012344:	0f 20 d8             	mov    eax,cr3
c0012347:	83 c4 0c             	add    esp,0xc
c001234a:	53                   	push   ebx
c001234b:	50                   	push   eax
c001234c:	68 74 a8 02 c0       	push   0xc002a874
c0012351:	e8 47 04 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0012356:	c7 04 24 8c a8 02 c0 	mov    DWORD PTR [esp],0xc002a88c
c001235d:	e8 3b 04 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0012362:	83 c4 10             	add    esp,0x10
c0012365:	a1 6c cd 02 c0       	mov    eax,ds:0xc002cd6c
c001236a:	85 c0                	test   eax,eax
c001236c:	7e 3d                	jle    c00123ab <VAS::tryLoadBackOffDisk(unsigned long)+0x107>
c001236e:	89 fe                	mov    esi,edi
c0012370:	31 db                	xor    ebx,ebx
c0012372:	83 ec 0c             	sub    esp,0xc
c0012375:	55                   	push   ebp
c0012376:	e8 d3 ef ff ff       	call   c001134e <Virt::swapIDToSector(unsigned long)>
c001237b:	89 34 24             	mov    DWORD PTR [esp],esi
c001237e:	01 d8                	add    eax,ebx
c0012380:	6a 01                	push   0x1
c0012382:	31 d2                	xor    edx,edx
c0012384:	43                   	inc    ebx
c0012385:	52                   	push   edx
c0012386:	81 c6 00 02 00 00    	add    esi,0x200
c001238c:	50                   	push   eax
c001238d:	0f be 05 78 cd 02 c0 	movsx  eax,BYTE PTR ds:0xc002cd78
c0012394:	ff 34 85 bc e2 02 c0 	push   DWORD PTR [eax*4-0x3ffd1d44]
c001239b:	e8 58 3d 00 00       	call   c00160f8 <LogicalDisk::read(unsigned long long, int, void*)>
c00123a0:	83 c4 20             	add    esp,0x20
c00123a3:	39 1d 6c cd 02 c0    	cmp    DWORD PTR ds:0xc002cd6c,ebx
c00123a9:	7f c7                	jg     c0012372 <VAS::tryLoadBackOffDisk(unsigned long)+0xce>
c00123ab:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c00123b0:	48                   	dec    eax
c00123b1:	52                   	push   edx
c00123b2:	a3 28 df 02 c0       	mov    ds:0xc002df28,eax
c00123b7:	50                   	push   eax
c00123b8:	57                   	push   edi
c00123b9:	68 9c a8 02 c0       	push   0xc002a89c
c00123be:	e8 da 03 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00123c3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00123c6:	e8 65 ef ff ff       	call   c0011330 <Virt::freeSwapfilePage(unsigned long)>
c00123cb:	c7 04 24 b1 a8 02 c0 	mov    DWORD PTR [esp],0xc002a8b1
c00123d2:	e8 c6 03 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00123d7:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c00123dc:	83 c4 10             	add    esp,0x10
c00123df:	48                   	dec    eax
c00123e0:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c00123e5:	85 c0                	test   eax,eax
c00123e7:	75 01                	jne    c00123ea <VAS::tryLoadBackOffDisk(unsigned long)+0x146>
c00123e9:	fb                   	sti    
c00123ea:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123ee:	25 ff 0f 00 00       	and    eax,0xfff
c00123f3:	3d e0 0f 00 00       	cmp    eax,0xfe0
c00123f8:	77 20                	ja     c001241a <VAS::tryLoadBackOffDisk(unsigned long)+0x176>
c00123fa:	0f 20 d8             	mov    eax,cr3
c00123fd:	0f 22 d8             	mov    cr3,eax
c0012400:	83 ec 0c             	sub    esp,0xc
c0012403:	68 d7 a8 02 c0       	push   0xc002a8d7
c0012408:	e8 90 03 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001240d:	83 c4 10             	add    esp,0x10
c0012410:	b0 01                	mov    al,0x1
c0012412:	83 c4 1c             	add    esp,0x1c
c0012415:	5b                   	pop    ebx
c0012416:	5e                   	pop    esi
c0012417:	5f                   	pop    edi
c0012418:	5d                   	pop    ebp
c0012419:	c3                   	ret    
c001241a:	83 ec 0c             	sub    esp,0xc
c001241d:	68 c7 a8 02 c0       	push   0xc002a8c7
c0012422:	e8 76 03 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0012427:	83 c4 10             	add    esp,0x10
c001242a:	eb ce                	jmp    c00123fa <VAS::tryLoadBackOffDisk(unsigned long)+0x156>

c001242c <VAS::scanForEviction()>:
c001242c:	55                   	push   ebp
c001242d:	31 ed                	xor    ebp,ebp
c001242f:	57                   	push   edi
c0012430:	56                   	push   esi
c0012431:	53                   	push   ebx
c0012432:	83 ec 0c             	sub    esp,0xc
c0012435:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012439:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c001243c:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012442:	75 0e                	jne    c0012452 <VAS::scanForEviction()+0x26>
c0012444:	89 da                	mov    edx,ebx
c0012446:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012449:	c1 ea 16             	shr    edx,0x16
c001244c:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012450:	74 4e                	je     c00124a0 <VAS::scanForEviction()+0x74>
c0012452:	53                   	push   ebx
c0012453:	56                   	push   esi
c0012454:	e8 83 f2 ff ff       	call   c00116dc <VAS::getPageTableEntry(unsigned long)>
c0012459:	5f                   	pop    edi
c001245a:	8b 38                	mov    edi,DWORD PTR [eax]
c001245c:	5a                   	pop    edx
c001245d:	89 fa                	mov    edx,edi
c001245f:	81 e2 01 08 00 00    	and    edx,0x801
c0012465:	81 fa 01 08 00 00    	cmp    edx,0x801
c001246b:	74 3e                	je     c00124ab <VAS::scanForEviction()+0x7f>
c001246d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012473:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0012479:	76 2b                	jbe    c00124a6 <VAS::scanForEviction()+0x7a>
c001247b:	45                   	inc    ebp
c001247c:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0012483:	83 fd 04             	cmp    ebp,0x4
c0012486:	74 35                	je     c00124bd <VAS::scanForEviction()+0x91>
c0012488:	31 db                	xor    ebx,ebx
c001248a:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012490:	75 c0                	jne    c0012452 <VAS::scanForEviction()+0x26>
c0012492:	89 da                	mov    edx,ebx
c0012494:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012497:	c1 ea 16             	shr    edx,0x16
c001249a:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c001249e:	75 b2                	jne    c0012452 <VAS::scanForEviction()+0x26>
c00124a0:	81 c3 00 00 40 00    	add    ebx,0x400000
c00124a6:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c00124a9:	eb 91                	jmp    c001243c <VAS::scanForEviction()+0x10>
c00124ab:	f7 c7 20 00 00 00    	test   edi,0x20
c00124b1:	74 22                	je     c00124d5 <VAS::scanForEviction()+0xa9>
c00124b3:	83 e7 df             	and    edi,0xffffffdf
c00124b6:	89 38                	mov    DWORD PTR [eax],edi
c00124b8:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00124bb:	eb b0                	jmp    c001246d <VAS::scanForEviction()+0x41>
c00124bd:	83 ec 0c             	sub    esp,0xc
c00124c0:	68 d4 a6 02 c0       	push   0xc002a6d4
c00124c5:	e8 bf 7a 00 00       	call   c0019f89 <Krnl::panic(char const*)>
c00124ca:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00124cd:	83 c4 10             	add    esp,0x10
c00124d0:	e9 67 ff ff ff       	jmp    c001243c <VAS::scanForEviction()+0x10>
c00124d5:	83 ec 08             	sub    esp,0x8
c00124d8:	53                   	push   ebx
c00124d9:	68 e5 a8 02 c0       	push   0xc002a8e5
c00124de:	e8 ba 02 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00124e3:	58                   	pop    eax
c00124e4:	5a                   	pop    edx
c00124e5:	ff 76 08             	push   DWORD PTR [esi+0x8]
c00124e8:	56                   	push   esi
c00124e9:	e8 ae fc ff ff       	call   c001219c <VAS::evict(unsigned long)>
c00124ee:	59                   	pop    ecx
c00124ef:	5b                   	pop    ebx
c00124f0:	ff 76 08             	push   DWORD PTR [esi+0x8]
c00124f3:	68 f9 a8 02 c0       	push   0xc002a8f9
c00124f8:	e8 a0 02 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00124fd:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c0012504:	89 f8                	mov    eax,edi
c0012506:	83 c4 1c             	add    esp,0x1c
c0012509:	25 00 f0 ff ff       	and    eax,0xfffff000
c001250e:	5b                   	pop    ebx
c001250f:	5e                   	pop    esi
c0012510:	5f                   	pop    edi
c0012511:	5d                   	pop    ebp
c0012512:	c3                   	ret    

c0012513 <mapVASFirstTime>:
c0012513:	55                   	push   ebp
c0012514:	57                   	push   edi
c0012515:	56                   	push   esi
c0012516:	53                   	push   ebx
c0012517:	83 ec 0c             	sub    esp,0xc
c001251a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001251f:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012522:	4a                   	dec    edx
c0012523:	0f 84 fe 00 00 00    	je     c0012627 <mapVASFirstTime+0x114>
c0012529:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c001252c:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c001252f:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012534:	c1 e5 15             	shl    ebp,0x15
c0012537:	bf 00 90 e7 01       	mov    edi,0x1e79000
c001253c:	8b b2 32 05 00 00    	mov    esi,DWORD PTR [edx+0x532]
c0012542:	29 eb                	sub    ebx,ebp
c0012544:	29 ef                	sub    edi,ebp
c0012546:	83 ec 08             	sub    esp,0x8
c0012549:	53                   	push   ebx
c001254a:	68 25 a9 02 c0       	push   0xc002a925
c001254f:	e8 49 02 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0012554:	e8 3c d4 ff ff       	call   c000f995 <Phys::allocatePage()>
c0012559:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c0012560:	6a 01                	push   0x1
c0012562:	53                   	push   ebx
c0012563:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012569:	50                   	push   eax
c001256a:	56                   	push   esi
c001256b:	e8 f8 f7 ff ff       	call   c0011d68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012570:	83 c4 20             	add    esp,0x20
c0012573:	39 fb                	cmp    ebx,edi
c0012575:	75 cf                	jne    c0012546 <mapVASFirstTime+0x33>
c0012577:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c001257c:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0012581:	29 eb                	sub    ebx,ebp
c0012583:	29 ef                	sub    edi,ebp
c0012585:	83 ec 08             	sub    esp,0x8
c0012588:	53                   	push   ebx
c0012589:	68 41 a9 02 c0       	push   0xc002a941
c001258e:	e8 0a 02 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0012593:	58                   	pop    eax
c0012594:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c0012598:	5a                   	pop    edx
c0012599:	19 c0                	sbb    eax,eax
c001259b:	83 e0 04             	and    eax,0x4
c001259e:	05 03 04 00 00       	add    eax,0x403
c00125a3:	50                   	push   eax
c00125a4:	68 66 a8 02 c0       	push   0xc002a866
c00125a9:	e8 ef 01 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00125ae:	e8 e2 d3 ff ff       	call   c000f995 <Phys::allocatePage()>
c00125b3:	59                   	pop    ecx
c00125b4:	89 c5                	mov    ebp,eax
c00125b6:	58                   	pop    eax
c00125b7:	55                   	push   ebp
c00125b8:	68 55 a9 02 c0       	push   0xc002a955
c00125bd:	e8 db 01 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00125c2:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c00125c6:	19 d2                	sbb    edx,edx
c00125c8:	83 e2 04             	and    edx,0x4
c00125cb:	81 c2 03 04 00 00    	add    edx,0x403
c00125d1:	89 14 24             	mov    DWORD PTR [esp],edx
c00125d4:	6a 01                	push   0x1
c00125d6:	53                   	push   ebx
c00125d7:	55                   	push   ebp
c00125d8:	56                   	push   esi
c00125d9:	e8 8a f7 ff ff       	call   c0011d68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00125de:	83 c4 18             	add    esp,0x18
c00125e1:	53                   	push   ebx
c00125e2:	56                   	push   esi
c00125e3:	e8 f4 f0 ff ff       	call   c00116dc <VAS::getPageTableEntry(unsigned long)>
c00125e8:	5a                   	pop    edx
c00125e9:	59                   	pop    ecx
c00125ea:	ff 30                	push   DWORD PTR [eax]
c00125ec:	68 71 a9 02 c0       	push   0xc002a971
c00125f1:	e8 a7 01 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00125f6:	0f 20 d8             	mov    eax,cr3
c00125f9:	83 c4 0c             	add    esp,0xc
c00125fc:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012602:	56                   	push   esi
c0012603:	50                   	push   eax
c0012604:	68 74 a8 02 c0       	push   0xc002a874
c0012609:	e8 8f 01 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001260e:	83 c4 10             	add    esp,0x10
c0012611:	39 df                	cmp    edi,ebx
c0012613:	0f 85 6c ff ff ff    	jne    c0012585 <mapVASFirstTime+0x72>
c0012619:	0f 20 d8             	mov    eax,cr3
c001261c:	0f 22 d8             	mov    cr3,eax
c001261f:	83 c4 0c             	add    esp,0xc
c0012622:	5b                   	pop    ebx
c0012623:	5e                   	pop    esi
c0012624:	5f                   	pop    edi
c0012625:	5d                   	pop    ebp
c0012626:	c3                   	ret    
c0012627:	83 ec 0c             	sub    esp,0xc
c001262a:	68 0c a9 02 c0       	push   0xc002a90c
c001262f:	e8 69 01 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0012634:	83 c4 10             	add    esp,0x10
c0012637:	83 c4 0c             	add    esp,0xc
c001263a:	5b                   	pop    ebx
c001263b:	5e                   	pop    esi
c001263c:	5f                   	pop    edi
c001263d:	5d                   	pop    ebp
c001263e:	c3                   	ret    

c001263f <__cxa_atexit>:
c001263f:	31 c0                	xor    eax,eax
c0012641:	c3                   	ret    

c0012642 <__cxa_finalize>:
c0012642:	c3                   	ret    

c0012643 <__stack_chk_fail>:
c0012643:	55                   	push   ebp
c0012644:	89 e5                	mov    ebp,esp
c0012646:	83 ec 14             	sub    esp,0x14
c0012649:	68 7c a9 02 c0       	push   0xc002a97c
c001264e:	e8 4a 01 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0012653:	58                   	pop    eax
c0012654:	5a                   	pop    edx
c0012655:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012658:	68 cc a9 02 c0       	push   0xc002a9cc
c001265d:	e8 3b 01 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0012662:	59                   	pop    ecx
c0012663:	58                   	pop    eax
c0012664:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012667:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001266a:	68 cc a9 02 c0       	push   0xc002a9cc
c001266f:	e8 29 01 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0012674:	5a                   	pop    edx
c0012675:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012678:	59                   	pop    ecx
c0012679:	8b 00                	mov    eax,DWORD PTR [eax]
c001267b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001267e:	68 cc a9 02 c0       	push   0xc002a9cc
c0012683:	e8 15 01 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0012688:	5a                   	pop    edx
c0012689:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001268c:	59                   	pop    ecx
c001268d:	8b 00                	mov    eax,DWORD PTR [eax]
c001268f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012691:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012694:	68 cc a9 02 c0       	push   0xc002a9cc
c0012699:	e8 ff 00 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001269e:	c7 04 24 d4 a9 02 c0 	mov    DWORD PTR [esp],0xc002a9d4
c00126a5:	e8 df 78 00 00       	call   c0019f89 <Krnl::panic(char const*)>
c00126aa:	83 c4 10             	add    esp,0x10
c00126ad:	c9                   	leave  
c00126ae:	c3                   	ret    

c00126af <__cxa_pure_virtual>:
c00126af:	83 ec 18             	sub    esp,0x18
c00126b2:	68 ec a9 02 c0       	push   0xc002a9ec
c00126b7:	e8 cd 78 00 00       	call   c0019f89 <Krnl::panic(char const*)>
c00126bc:	83 c4 1c             	add    esp,0x1c
c00126bf:	c3                   	ret    

c00126c0 <operator new[](unsigned long)>:
c00126c0:	e9 d4 ce ff ff       	jmp    c000f599 <malloc>

c00126c5 <operator delete(void*, unsigned long)>:
c00126c5:	e9 ef ce ff ff       	jmp    c000f5b9 <rfree>

c00126ca <operator delete[](void*)>:
c00126ca:	e9 ea ce ff ff       	jmp    c000f5b9 <rfree>

c00126cf <operator delete[](void*, unsigned long)>:
c00126cf:	e9 e5 ce ff ff       	jmp    c000f5b9 <rfree>

c00126d4 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c00126d4:	55                   	push   ebp
c00126d5:	b9 11 00 00 00       	mov    ecx,0x11
c00126da:	57                   	push   edi
c00126db:	56                   	push   esi
c00126dc:	be 7a a3 02 c0       	mov    esi,0xc002a37a
c00126e1:	53                   	push   ebx
c00126e2:	83 ec 20             	sub    esp,0x20
c00126e5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00126e9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00126ed:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00126f1:	fc                   	cld    
c00126f2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00126f4:	89 ee                	mov    esi,ebp
c00126f6:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00126fa:	eb 02                	jmp    c00126fe <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c00126fc:	89 c6                	mov    esi,eax
c00126fe:	31 d2                	xor    edx,edx
c0012700:	41                   	inc    ecx
c0012701:	89 f0                	mov    eax,esi
c0012703:	f7 f3                	div    ebx
c0012705:	39 de                	cmp    esi,ebx
c0012707:	73 f3                	jae    c00126fc <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c0012709:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001270c:	eb 02                	jmp    c0012710 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c001270e:	89 c5                	mov    ebp,eax
c0012710:	31 d2                	xor    edx,edx
c0012712:	49                   	dec    ecx
c0012713:	89 e8                	mov    eax,ebp
c0012715:	f7 f3                	div    ebx
c0012717:	39 dd                	cmp    ebp,ebx
c0012719:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c001271d:	88 11                	mov    BYTE PTR [ecx],dl
c001271f:	73 ed                	jae    c001270e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c0012721:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012725:	83 c4 20             	add    esp,0x20
c0012728:	5b                   	pop    ebx
c0012729:	5e                   	pop    esi
c001272a:	5f                   	pop    edi
c001272b:	5d                   	pop    ebp
c001272c:	c3                   	ret    

c001272d <Dbg::logc(char)>:
c001272d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012731:	ba fd 03 00 00       	mov    edx,0x3fd
c0012736:	ec                   	in     al,dx
c0012737:	a8 20                	test   al,0x20
c0012739:	74 fb                	je     c0012736 <Dbg::logc(char)+0x9>
c001273b:	ba f8 03 00 00       	mov    edx,0x3f8
c0012740:	88 c8                	mov    al,cl
c0012742:	ee                   	out    dx,al
c0012743:	c3                   	ret    

c0012744 <Dbg::logs(char*)>:
c0012744:	53                   	push   ebx
c0012745:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012749:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001274c:	84 c0                	test   al,al
c001274e:	74 0f                	je     c001275f <Dbg::logs(char*)+0x1b>
c0012750:	50                   	push   eax
c0012751:	43                   	inc    ebx
c0012752:	e8 d6 ff ff ff       	call   c001272d <Dbg::logc(char)>
c0012757:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001275a:	5a                   	pop    edx
c001275b:	84 c0                	test   al,al
c001275d:	75 f1                	jne    c0012750 <Dbg::logs(char*)+0xc>
c001275f:	5b                   	pop    ebx
c0012760:	c3                   	ret    

c0012761 <Dbg::logWriteInt(unsigned int)>:
c0012761:	83 ec 10             	sub    esp,0x10
c0012764:	6a 0a                	push   0xa
c0012766:	8d 44 24 08          	lea    eax,[esp+0x8]
c001276a:	50                   	push   eax
c001276b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001276f:	e8 60 ff ff ff       	call   c00126d4 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012774:	50                   	push   eax
c0012775:	e8 ca ff ff ff       	call   c0012744 <Dbg::logs(char*)>
c001277a:	83 c4 20             	add    esp,0x20
c001277d:	c3                   	ret    

c001277e <Dbg::logWriteIntBase(unsigned int, int)>:
c001277e:	83 ec 10             	sub    esp,0x10
c0012781:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012785:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012789:	50                   	push   eax
c001278a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001278e:	e8 41 ff ff ff       	call   c00126d4 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012793:	50                   	push   eax
c0012794:	e8 ab ff ff ff       	call   c0012744 <Dbg::logs(char*)>
c0012799:	83 c4 20             	add    esp,0x20
c001279c:	c3                   	ret    

c001279d <Dbg::kprintf(char const*, ...)>:
c001279d:	55                   	push   ebp
c001279e:	57                   	push   edi
c001279f:	56                   	push   esi
c00127a0:	53                   	push   ebx
c00127a1:	83 ec 0c             	sub    esp,0xc
c00127a4:	8d 44 24 24          	lea    eax,[esp+0x24]
c00127a8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00127ac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00127b0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00127b3:	84 c0                	test   al,al
c00127b5:	74 4a                	je     c0012801 <Dbg::kprintf(char const*, ...)+0x64>
c00127b7:	31 db                	xor    ebx,ebx
c00127b9:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00127bc:	3c 25                	cmp    al,0x25
c00127be:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c00127c1:	0f 85 e4 00 00 00    	jne    c00128ab <Dbg::kprintf(char const*, ...)+0x10e>
c00127c7:	83 c3 02             	add    ebx,0x2
c00127ca:	8a 07                	mov    al,BYTE PTR [edi]
c00127cc:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c00127cf:	83 e8 25             	sub    eax,0x25
c00127d2:	3c 53                	cmp    al,0x53
c00127d4:	0f 87 ba 00 00 00    	ja     c0012894 <Dbg::kprintf(char const*, ...)+0xf7>
c00127da:	0f b6 c0             	movzx  eax,al
c00127dd:	ff 24 85 00 aa 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5600]
c00127e4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00127e8:	89 c8                	mov    eax,ecx
c00127ea:	83 c1 04             	add    ecx,0x4
c00127ed:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00127f1:	ff 30                	push   DWORD PTR [eax]
c00127f3:	e8 69 ff ff ff       	call   c0012761 <Dbg::logWriteInt(unsigned int)>
c00127f8:	5f                   	pop    edi
c00127f9:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00127fd:	84 c0                	test   al,al
c00127ff:	75 b8                	jne    c00127b9 <Dbg::kprintf(char const*, ...)+0x1c>
c0012801:	83 c4 0c             	add    esp,0xc
c0012804:	5b                   	pop    ebx
c0012805:	5e                   	pop    esi
c0012806:	5f                   	pop    edi
c0012807:	5d                   	pop    ebp
c0012808:	c3                   	ret    
c0012809:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001280d:	89 c8                	mov    eax,ecx
c001280f:	83 c1 04             	add    ecx,0x4
c0012812:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012816:	ff 30                	push   DWORD PTR [eax]
c0012818:	e8 27 ff ff ff       	call   c0012744 <Dbg::logs(char*)>
c001281d:	58                   	pop    eax
c001281e:	eb d9                	jmp    c00127f9 <Dbg::kprintf(char const*, ...)+0x5c>
c0012820:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012824:	89 d0                	mov    eax,edx
c0012826:	83 c2 04             	add    edx,0x4
c0012829:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001282d:	ff 30                	push   DWORD PTR [eax]
c001282f:	e8 2d ff ff ff       	call   c0012761 <Dbg::logWriteInt(unsigned int)>
c0012834:	58                   	pop    eax
c0012835:	eb c2                	jmp    c00127f9 <Dbg::kprintf(char const*, ...)+0x5c>
c0012837:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001283b:	89 d0                	mov    eax,edx
c001283d:	83 c2 04             	add    edx,0x4
c0012840:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012843:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012847:	50                   	push   eax
c0012848:	e8 e0 fe ff ff       	call   c001272d <Dbg::logc(char)>
c001284d:	58                   	pop    eax
c001284e:	eb a9                	jmp    c00127f9 <Dbg::kprintf(char const*, ...)+0x5c>
c0012850:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012854:	89 c8                	mov    eax,ecx
c0012856:	83 c1 04             	add    ecx,0x4
c0012859:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001285d:	6a 10                	push   0x10
c001285f:	ff 30                	push   DWORD PTR [eax]
c0012861:	e8 18 ff ff ff       	call   c001277e <Dbg::logWriteIntBase(unsigned int, int)>
c0012866:	59                   	pop    ecx
c0012867:	5f                   	pop    edi
c0012868:	eb 8f                	jmp    c00127f9 <Dbg::kprintf(char const*, ...)+0x5c>
c001286a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001286e:	89 d0                	mov    eax,edx
c0012870:	83 c2 08             	add    edx,0x8
c0012873:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012877:	6a 10                	push   0x10
c0012879:	ff 30                	push   DWORD PTR [eax]
c001287b:	e8 fe fe ff ff       	call   c001277e <Dbg::logWriteIntBase(unsigned int, int)>
c0012880:	58                   	pop    eax
c0012881:	5a                   	pop    edx
c0012882:	e9 72 ff ff ff       	jmp    c00127f9 <Dbg::kprintf(char const*, ...)+0x5c>
c0012887:	6a 25                	push   0x25
c0012889:	e8 9f fe ff ff       	call   c001272d <Dbg::logc(char)>
c001288e:	58                   	pop    eax
c001288f:	e9 65 ff ff ff       	jmp    c00127f9 <Dbg::kprintf(char const*, ...)+0x5c>
c0012894:	6a 25                	push   0x25
c0012896:	e8 92 fe ff ff       	call   c001272d <Dbg::logc(char)>
c001289b:	0f be 07             	movsx  eax,BYTE PTR [edi]
c001289e:	50                   	push   eax
c001289f:	e8 89 fe ff ff       	call   c001272d <Dbg::logc(char)>
c00128a4:	5a                   	pop    edx
c00128a5:	59                   	pop    ecx
c00128a6:	e9 4e ff ff ff       	jmp    c00127f9 <Dbg::kprintf(char const*, ...)+0x5c>
c00128ab:	50                   	push   eax
c00128ac:	89 eb                	mov    ebx,ebp
c00128ae:	e8 7a fe ff ff       	call   c001272d <Dbg::logc(char)>
c00128b3:	89 fd                	mov    ebp,edi
c00128b5:	58                   	pop    eax
c00128b6:	e9 3e ff ff ff       	jmp    c00127f9 <Dbg::kprintf(char const*, ...)+0x5c>
c00128bb:	90                   	nop

c00128bc <File::read(unsigned long long, void*, int*)>:
c00128bc:	53                   	push   ebx
c00128bd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00128c1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00128c5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00128cc:	3c 19                	cmp    al,0x19
c00128ce:	77 35                	ja     c0012905 <File::read(unsigned long long, void*, int*)+0x49>
c00128d0:	8b 04 85 c0 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1c40]
c00128d7:	85 c0                	test   eax,eax
c00128d9:	74 2a                	je     c0012905 <File::read(unsigned long long, void*, int*)+0x49>
c00128db:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00128e1:	85 c0                	test   eax,eax
c00128e3:	74 20                	je     c0012905 <File::read(unsigned long long, void*, int*)+0x49>
c00128e5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00128e9:	74 21                	je     c001290c <File::read(unsigned long long, void*, int*)+0x50>
c00128eb:	8b 08                	mov    ecx,DWORD PTR [eax]
c00128ed:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00128f1:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00128f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00128fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00128ff:	5b                   	pop    ebx
c0012900:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012903:	ff e0                	jmp    eax
c0012905:	b8 0b 00 00 00       	mov    eax,0xb
c001290a:	eb 05                	jmp    c0012911 <File::read(unsigned long long, void*, int*)+0x55>
c001290c:	b8 05 00 00 00       	mov    eax,0x5
c0012911:	5b                   	pop    ebx
c0012912:	c3                   	ret    
c0012913:	90                   	nop

c0012914 <File::write(unsigned long long, void*, int*)>:
c0012914:	53                   	push   ebx
c0012915:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012919:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001291d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012924:	3c 19                	cmp    al,0x19
c0012926:	77 35                	ja     c001295d <File::write(unsigned long long, void*, int*)+0x49>
c0012928:	8b 04 85 c0 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1c40]
c001292f:	85 c0                	test   eax,eax
c0012931:	74 2a                	je     c001295d <File::write(unsigned long long, void*, int*)+0x49>
c0012933:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012939:	85 c0                	test   eax,eax
c001293b:	74 20                	je     c001295d <File::write(unsigned long long, void*, int*)+0x49>
c001293d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012941:	74 21                	je     c0012964 <File::write(unsigned long long, void*, int*)+0x50>
c0012943:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012945:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012949:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001294f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012953:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012957:	5b                   	pop    ebx
c0012958:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001295b:	ff e0                	jmp    eax
c001295d:	b8 0b 00 00 00       	mov    eax,0xb
c0012962:	eb 05                	jmp    c0012969 <File::write(unsigned long long, void*, int*)+0x55>
c0012964:	b8 05 00 00 00       	mov    eax,0x5
c0012969:	5b                   	pop    ebx
c001296a:	c3                   	ret    
c001296b:	90                   	nop

c001296c <Directory::read(unsigned long long, void*, int*)>:
c001296c:	53                   	push   ebx
c001296d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012971:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012975:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001297c:	3c 19                	cmp    al,0x19
c001297e:	77 35                	ja     c00129b5 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012980:	8b 04 85 c0 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1c40]
c0012987:	85 c0                	test   eax,eax
c0012989:	74 2a                	je     c00129b5 <Directory::read(unsigned long long, void*, int*)+0x49>
c001298b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012991:	85 c0                	test   eax,eax
c0012993:	74 20                	je     c00129b5 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012995:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012999:	74 21                	je     c00129bc <Directory::read(unsigned long long, void*, int*)+0x50>
c001299b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001299d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00129a1:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00129a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00129ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00129af:	5b                   	pop    ebx
c00129b0:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c00129b3:	ff e0                	jmp    eax
c00129b5:	b8 0b 00 00 00       	mov    eax,0xb
c00129ba:	eb 05                	jmp    c00129c1 <Directory::read(unsigned long long, void*, int*)+0x55>
c00129bc:	b8 05 00 00 00       	mov    eax,0x5
c00129c1:	5b                   	pop    ebx
c00129c2:	c3                   	ret    
c00129c3:	90                   	nop

c00129c4 <Directory::write(unsigned long long, void*, int*)>:
c00129c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129c8:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00129cf:	b8 0b 00 00 00       	mov    eax,0xb
c00129d4:	80 fa 19             	cmp    dl,0x19
c00129d7:	77 18                	ja     c00129f1 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00129d9:	8b 14 95 c0 e3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1c40]
c00129e0:	85 d2                	test   edx,edx
c00129e2:	74 0d                	je     c00129f1 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00129e4:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00129eb:	19 c0                	sbb    eax,eax
c00129ed:	83 e0 0a             	and    eax,0xa
c00129f0:	40                   	inc    eax
c00129f1:	c3                   	ret    

c00129f2 <File::isAtty()>:
c00129f2:	31 c0                	xor    eax,eax
c00129f4:	c3                   	ret    
c00129f5:	90                   	nop

c00129f6 <Directory::isAtty()>:
c00129f6:	31 c0                	xor    eax,eax
c00129f8:	c3                   	ret    
c00129f9:	90                   	nop

c00129fa <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00129fa:	b8 0a 00 00 00       	mov    eax,0xa
c00129ff:	c3                   	ret    

c0012a00 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012a00:	b8 0a 00 00 00       	mov    eax,0xa
c0012a05:	c3                   	ret    

c0012a06 <Filesystem::getFileFirstSector(char const*)>:
c0012a06:	31 c0                	xor    eax,eax
c0012a08:	31 d2                	xor    edx,edx
c0012a0a:	c3                   	ret    
c0012a0b:	90                   	nop

c0012a0c <File::~File()>:
c0012a0c:	83 ec 0c             	sub    esp,0xc
c0012a0f:	ba c0 ab 02 c0       	mov    edx,0xc002abc0
c0012a14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a18:	89 10                	mov    DWORD PTR [eax],edx
c0012a1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a1e:	83 ec 0c             	sub    esp,0xc
c0012a21:	50                   	push   eax
c0012a22:	e8 97 e5 ff ff       	call   c0010fbe <UnixFile::~UnixFile()>
c0012a27:	83 c4 10             	add    esp,0x10
c0012a2a:	90                   	nop
c0012a2b:	83 c4 0c             	add    esp,0xc
c0012a2e:	c3                   	ret    
c0012a2f:	90                   	nop

c0012a30 <File::~File()>:
c0012a30:	83 ec 0c             	sub    esp,0xc
c0012a33:	83 ec 0c             	sub    esp,0xc
c0012a36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a3a:	e8 cd ff ff ff       	call   c0012a0c <File::~File()>
c0012a3f:	83 c4 10             	add    esp,0x10
c0012a42:	83 ec 08             	sub    esp,0x8
c0012a45:	68 14 01 00 00       	push   0x114
c0012a4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a4e:	e8 72 fc ff ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0012a53:	83 c4 10             	add    esp,0x10
c0012a56:	83 c4 0c             	add    esp,0xc
c0012a59:	c3                   	ret    

c0012a5a <Directory::~Directory()>:
c0012a5a:	83 ec 0c             	sub    esp,0xc
c0012a5d:	ba dc ab 02 c0       	mov    edx,0xc002abdc
c0012a62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a66:	89 10                	mov    DWORD PTR [eax],edx
c0012a68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a6c:	83 ec 0c             	sub    esp,0xc
c0012a6f:	50                   	push   eax
c0012a70:	e8 49 e5 ff ff       	call   c0010fbe <UnixFile::~UnixFile()>
c0012a75:	83 c4 10             	add    esp,0x10
c0012a78:	90                   	nop
c0012a79:	83 c4 0c             	add    esp,0xc
c0012a7c:	c3                   	ret    
c0012a7d:	90                   	nop

c0012a7e <Directory::~Directory()>:
c0012a7e:	83 ec 0c             	sub    esp,0xc
c0012a81:	83 ec 0c             	sub    esp,0xc
c0012a84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a88:	e8 cd ff ff ff       	call   c0012a5a <Directory::~Directory()>
c0012a8d:	83 c4 10             	add    esp,0x10
c0012a90:	83 ec 08             	sub    esp,0x8
c0012a93:	68 14 01 00 00       	push   0x114
c0012a98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a9c:	e8 24 fc ff ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0012aa1:	83 c4 10             	add    esp,0x10
c0012aa4:	83 c4 0c             	add    esp,0xc
c0012aa7:	c3                   	ret    

c0012aa8 <Filesystem::Filesystem()>:
c0012aa8:	ba 58 ab 02 c0       	mov    edx,0xc002ab58
c0012aad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ab1:	89 10                	mov    DWORD PTR [eax],edx
c0012ab3:	8b 15 34 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df34
c0012ab9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012abd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012ac0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ac4:	a3 34 df 02 c0       	mov    ds:0xc002df34,eax
c0012ac9:	90                   	nop
c0012aca:	c3                   	ret    
c0012acb:	90                   	nop

c0012acc <Filesystem::~Filesystem()>:
c0012acc:	ba 58 ab 02 c0       	mov    edx,0xc002ab58
c0012ad1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ad5:	89 10                	mov    DWORD PTR [eax],edx
c0012ad7:	90                   	nop
c0012ad8:	c3                   	ret    
c0012ad9:	90                   	nop

c0012ada <Filesystem::~Filesystem()>:
c0012ada:	83 ec 0c             	sub    esp,0xc
c0012add:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012ae1:	e8 e6 ff ff ff       	call   c0012acc <Filesystem::~Filesystem()>
c0012ae6:	83 c4 04             	add    esp,0x4
c0012ae9:	83 ec 08             	sub    esp,0x8
c0012aec:	6a 08                	push   0x8
c0012aee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012af2:	e8 ce fb ff ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0012af7:	83 c4 10             	add    esp,0x10
c0012afa:	83 c4 0c             	add    esp,0xc
c0012afd:	c3                   	ret    

c0012afe <Fs::getcwd(Process*, char*, int)>:
c0012afe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012b02:	31 c0                	xor    eax,eax
c0012b04:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012b07:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012b0b:	7d 15                	jge    c0012b22 <Fs::getcwd(Process*, char*, int)+0x24>
c0012b0d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012b11:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012b18:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012b1b:	84 c9                	test   cl,cl
c0012b1d:	74 06                	je     c0012b25 <Fs::getcwd(Process*, char*, int)+0x27>
c0012b1f:	40                   	inc    eax
c0012b20:	eb e2                	jmp    c0012b04 <Fs::getcwd(Process*, char*, int)+0x6>
c0012b22:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012b25:	31 c0                	xor    eax,eax
c0012b27:	c3                   	ret    

c0012b28 <Fs::initVFS()>:
c0012b28:	83 ec 18             	sub    esp,0x18
c0012b2b:	6a 08                	push   0x8
c0012b2d:	e8 67 ca ff ff       	call   c000f599 <malloc>
c0012b32:	89 04 24             	mov    DWORD PTR [esp],eax
c0012b35:	e8 64 df 00 00       	call   c0020a9e <FAT::FAT()>
c0012b3a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012b41:	e8 53 ca ff ff       	call   c000f599 <malloc>
c0012b46:	89 04 24             	mov    DWORD PTR [esp],eax
c0012b49:	e8 5c f1 00 00       	call   c0021caa <ISO9660::ISO9660()>
c0012b4e:	83 c4 1c             	add    esp,0x1c
c0012b51:	c3                   	ret    

c0012b52 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012b52:	55                   	push   ebp
c0012b53:	57                   	push   edi
c0012b54:	56                   	push   esi
c0012b55:	53                   	push   ebx
c0012b56:	81 ec 10 04 00 00    	sub    esp,0x410
c0012b5c:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012b63:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012b6a:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012b71:	68 00 04 00 00       	push   0x400
c0012b76:	6a 00                	push   0x0
c0012b78:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012b7c:	56                   	push   esi
c0012b7d:	e8 ce db fe ff       	call   c0000750 <memset>
c0012b82:	83 c4 10             	add    esp,0x10
c0012b85:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012b89:	75 0b                	jne    c0012b96 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012b8b:	50                   	push   eax
c0012b8c:	50                   	push   eax
c0012b8d:	57                   	push   edi
c0012b8e:	56                   	push   esi
c0012b8f:	e8 78 dc fe ff       	call   c000080c <strcpy>
c0012b94:	eb 41                	jmp    c0012bd7 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012b96:	8a 07                	mov    al,BYTE PTR [edi]
c0012b98:	3c 5c                	cmp    al,0x5c
c0012b9a:	74 04                	je     c0012ba0 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012b9c:	3c 2f                	cmp    al,0x2f
c0012b9e:	75 18                	jne    c0012bb8 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012ba0:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012ba3:	3c 60                	cmp    al,0x60
c0012ba5:	7e 03                	jle    c0012baa <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012ba7:	83 e8 20             	sub    eax,0x20
c0012baa:	88 04 24             	mov    BYTE PTR [esp],al
c0012bad:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012bb4:	50                   	push   eax
c0012bb5:	50                   	push   eax
c0012bb6:	eb 18                	jmp    c0012bd0 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012bb8:	50                   	push   eax
c0012bb9:	50                   	push   eax
c0012bba:	55                   	push   ebp
c0012bbb:	56                   	push   esi
c0012bbc:	e8 4b dc fe ff       	call   c000080c <strcpy>
c0012bc1:	5a                   	pop    edx
c0012bc2:	59                   	pop    ecx
c0012bc3:	68 76 bf 02 c0       	push   0xc002bf76
c0012bc8:	56                   	push   esi
c0012bc9:	e8 7e dd fe ff       	call   c000094c <strcat>
c0012bce:	5d                   	pop    ebp
c0012bcf:	58                   	pop    eax
c0012bd0:	57                   	push   edi
c0012bd1:	56                   	push   esi
c0012bd2:	e8 75 dd fe ff       	call   c000094c <strcat>
c0012bd7:	83 c4 10             	add    esp,0x10
c0012bda:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012bdd:	3c 60                	cmp    al,0x60
c0012bdf:	7e 03                	jle    c0012be4 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012be1:	83 e8 20             	sub    eax,0x20
c0012be4:	88 04 24             	mov    BYTE PTR [esp],al
c0012be7:	88 03                	mov    BYTE PTR [ebx],al
c0012be9:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012bf0:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012bf6:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012bfa:	bf 03 00 00 00       	mov    edi,0x3
c0012bff:	b8 03 00 00 00       	mov    eax,0x3
c0012c04:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012c07:	84 d2                	test   dl,dl
c0012c09:	0f 84 91 00 00 00    	je     c0012ca0 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012c0f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012c12:	80 fa 5c             	cmp    dl,0x5c
c0012c15:	74 05                	je     c0012c1c <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012c17:	80 fa 2f             	cmp    dl,0x2f
c0012c1a:	75 12                	jne    c0012c2e <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012c1c:	89 c5                	mov    ebp,eax
c0012c1e:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012c23:	74 09                	je     c0012c2e <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012c25:	40                   	inc    eax
c0012c26:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012c2a:	89 cf                	mov    edi,ecx
c0012c2c:	eb d6                	jmp    c0012c04 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012c2e:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012c33:	75 5b                	jne    c0012c90 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012c35:	80 fa 2e             	cmp    dl,0x2e
c0012c38:	75 56                	jne    c0012c90 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012c3a:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012c3e:	74 19                	je     c0012c59 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012c40:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012c45:	74 53                	je     c0012c9a <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012c47:	89 f9                	mov    ecx,edi
c0012c49:	41                   	inc    ecx
c0012c4a:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012c4d:	80 fa 2f             	cmp    dl,0x2f
c0012c50:	74 f7                	je     c0012c49 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012c52:	80 fa 5c             	cmp    dl,0x5c
c0012c55:	74 f2                	je     c0012c49 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012c57:	eb d1                	jmp    c0012c2a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c59:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012c5e:	74 3a                	je     c0012c9a <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012c60:	83 f8 03             	cmp    eax,0x3
c0012c63:	74 c5                	je     c0012c2a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c65:	41                   	inc    ecx
c0012c66:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012c69:	80 fa 2f             	cmp    dl,0x2f
c0012c6c:	74 f7                	je     c0012c65 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012c6e:	80 fa 5c             	cmp    dl,0x5c
c0012c71:	74 f2                	je     c0012c65 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012c73:	48                   	dec    eax
c0012c74:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012c78:	75 06                	jne    c0012c80 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012c7a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012c7e:	eb f3                	jmp    c0012c73 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012c80:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012c84:	74 07                	je     c0012c8d <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012c86:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012c8a:	48                   	dec    eax
c0012c8b:	eb f3                	jmp    c0012c80 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012c8d:	40                   	inc    eax
c0012c8e:	eb 9a                	jmp    c0012c2a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c90:	80 fa 2f             	cmp    dl,0x2f
c0012c93:	74 95                	je     c0012c2a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c95:	80 fa 5c             	cmp    dl,0x5c
c0012c98:	74 90                	je     c0012c2a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c9a:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012c9d:	40                   	inc    eax
c0012c9e:	eb 8a                	jmp    c0012c2a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012ca0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012ca4:	83 ec 0c             	sub    esp,0xc
c0012ca7:	53                   	push   ebx
c0012ca8:	e8 bf da fe ff       	call   c000076c <strlen>
c0012cad:	83 c4 10             	add    esp,0x10
c0012cb0:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012cb5:	75 26                	jne    c0012cdd <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012cb7:	83 ec 0c             	sub    esp,0xc
c0012cba:	53                   	push   ebx
c0012cbb:	e8 ac da fe ff       	call   c000076c <strlen>
c0012cc0:	83 c4 10             	add    esp,0x10
c0012cc3:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012cc8:	74 26                	je     c0012cf0 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012cca:	83 ec 0c             	sub    esp,0xc
c0012ccd:	53                   	push   ebx
c0012cce:	e8 99 da fe ff       	call   c000076c <strlen>
c0012cd3:	83 c4 10             	add    esp,0x10
c0012cd6:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012cdb:	eb c7                	jmp    c0012ca4 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012cdd:	83 ec 0c             	sub    esp,0xc
c0012ce0:	53                   	push   ebx
c0012ce1:	e8 86 da fe ff       	call   c000076c <strlen>
c0012ce6:	83 c4 10             	add    esp,0x10
c0012ce9:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012cee:	74 c7                	je     c0012cb7 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012cf0:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012cf6:	5b                   	pop    ebx
c0012cf7:	5e                   	pop    esi
c0012cf8:	5f                   	pop    edi
c0012cf9:	5d                   	pop    ebp
c0012cfa:	c3                   	ret    
c0012cfb:	90                   	nop

c0012cfc <File::File(char const*, Process*)>:
c0012cfc:	83 ec 0c             	sub    esp,0xc
c0012cff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d03:	83 ec 08             	sub    esp,0x8
c0012d06:	6a 00                	push   0x0
c0012d08:	50                   	push   eax
c0012d09:	e8 ce e0 ff ff       	call   c0010ddc <UnixFile::UnixFile(int)>
c0012d0e:	83 c4 10             	add    esp,0x10
c0012d11:	ba c0 ab 02 c0       	mov    edx,0xc002abc0
c0012d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d1a:	89 10                	mov    DWORD PTR [eax],edx
c0012d1c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012d20:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012d26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d2a:	83 c0 0d             	add    eax,0xd
c0012d2d:	83 ec 04             	sub    esp,0x4
c0012d30:	52                   	push   edx
c0012d31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d35:	50                   	push   eax
c0012d36:	e8 17 fe ff ff       	call   c0012b52 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012d3b:	83 c4 10             	add    esp,0x10
c0012d3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d42:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012d45:	8d 50 bf             	lea    edx,[eax-0x41]
c0012d48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d4c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012d52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d56:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012d5a:	90                   	nop
c0012d5b:	83 c4 0c             	add    esp,0xc
c0012d5e:	c3                   	ret    
c0012d5f:	90                   	nop

c0012d60 <File::open(FileOpenMode)>:
c0012d60:	53                   	push   ebx
c0012d61:	b8 0b 00 00 00       	mov    eax,0xb
c0012d66:	83 ec 08             	sub    esp,0x8
c0012d69:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012d6d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012d74:	80 fa 19             	cmp    dl,0x19
c0012d77:	77 40                	ja     c0012db9 <File::open(FileOpenMode)+0x59>
c0012d79:	8b 14 95 c0 e3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1c40]
c0012d80:	85 d2                	test   edx,edx
c0012d82:	74 35                	je     c0012db9 <File::open(FileOpenMode)+0x59>
c0012d84:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012d8a:	85 d2                	test   edx,edx
c0012d8c:	74 2b                	je     c0012db9 <File::open(FileOpenMode)+0x59>
c0012d8e:	b8 06 00 00 00       	mov    eax,0x6
c0012d93:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012d97:	75 20                	jne    c0012db9 <File::open(FileOpenMode)+0x59>
c0012d99:	8b 02                	mov    eax,DWORD PTR [edx]
c0012d9b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012da1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012da5:	51                   	push   ecx
c0012da6:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012da9:	51                   	push   ecx
c0012daa:	52                   	push   edx
c0012dab:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012dae:	83 c4 10             	add    esp,0x10
c0012db1:	85 c0                	test   eax,eax
c0012db3:	75 04                	jne    c0012db9 <File::open(FileOpenMode)+0x59>
c0012db5:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012db9:	83 c4 08             	add    esp,0x8
c0012dbc:	5b                   	pop    ebx
c0012dbd:	c3                   	ret    

c0012dbe <File::close()>:
c0012dbe:	53                   	push   ebx
c0012dbf:	b8 0b 00 00 00       	mov    eax,0xb
c0012dc4:	83 ec 08             	sub    esp,0x8
c0012dc7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012dcb:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012dd2:	80 fa 19             	cmp    dl,0x19
c0012dd5:	77 41                	ja     c0012e18 <File::close()+0x5a>
c0012dd7:	8b 1c 95 c0 e3 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1c40]
c0012dde:	85 db                	test   ebx,ebx
c0012de0:	74 36                	je     c0012e18 <File::close()+0x5a>
c0012de2:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012de9:	74 2d                	je     c0012e18 <File::close()+0x5a>
c0012deb:	b8 05 00 00 00       	mov    eax,0x5
c0012df0:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012df4:	74 22                	je     c0012e18 <File::close()+0x5a>
c0012df6:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012dfa:	8b 04 95 c0 e3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1c40]
c0012e01:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012e07:	53                   	push   ebx
c0012e08:	53                   	push   ebx
c0012e09:	8b 10                	mov    edx,DWORD PTR [eax]
c0012e0b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012e11:	50                   	push   eax
c0012e12:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012e15:	83 c4 10             	add    esp,0x10
c0012e18:	83 c4 08             	add    esp,0x8
c0012e1b:	5b                   	pop    ebx
c0012e1c:	c3                   	ret    
c0012e1d:	90                   	nop

c0012e1e <File::seek(unsigned long long)>:
c0012e1e:	56                   	push   esi
c0012e1f:	53                   	push   ebx
c0012e20:	b8 0b 00 00 00       	mov    eax,0xb
c0012e25:	51                   	push   ecx
c0012e26:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012e2a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012e2e:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012e35:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012e39:	80 fa 19             	cmp    dl,0x19
c0012e3c:	77 31                	ja     c0012e6f <File::seek(unsigned long long)+0x51>
c0012e3e:	8b 14 95 c0 e3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1c40]
c0012e45:	85 d2                	test   edx,edx
c0012e47:	74 26                	je     c0012e6f <File::seek(unsigned long long)+0x51>
c0012e49:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012e4f:	85 d2                	test   edx,edx
c0012e51:	74 1c                	je     c0012e6f <File::seek(unsigned long long)+0x51>
c0012e53:	b8 05 00 00 00       	mov    eax,0x5
c0012e58:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012e5c:	74 11                	je     c0012e6f <File::seek(unsigned long long)+0x51>
c0012e5e:	8b 02                	mov    eax,DWORD PTR [edx]
c0012e60:	53                   	push   ebx
c0012e61:	51                   	push   ecx
c0012e62:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012e68:	52                   	push   edx
c0012e69:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012e6c:	83 c4 10             	add    esp,0x10
c0012e6f:	5a                   	pop    edx
c0012e70:	5b                   	pop    ebx
c0012e71:	5e                   	pop    esi
c0012e72:	c3                   	ret    
c0012e73:	90                   	nop

c0012e74 <File::tell(unsigned long long*)>:
c0012e74:	83 ec 0c             	sub    esp,0xc
c0012e77:	b8 0b 00 00 00       	mov    eax,0xb
c0012e7c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012e80:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012e87:	80 fa 19             	cmp    dl,0x19
c0012e8a:	77 34                	ja     c0012ec0 <File::tell(unsigned long long*)+0x4c>
c0012e8c:	8b 14 95 c0 e3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1c40]
c0012e93:	85 d2                	test   edx,edx
c0012e95:	74 29                	je     c0012ec0 <File::tell(unsigned long long*)+0x4c>
c0012e97:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012e9d:	85 d2                	test   edx,edx
c0012e9f:	74 1f                	je     c0012ec0 <File::tell(unsigned long long*)+0x4c>
c0012ea1:	b8 05 00 00 00       	mov    eax,0x5
c0012ea6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012eaa:	74 14                	je     c0012ec0 <File::tell(unsigned long long*)+0x4c>
c0012eac:	50                   	push   eax
c0012ead:	8b 02                	mov    eax,DWORD PTR [edx]
c0012eaf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012eb3:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012eb9:	52                   	push   edx
c0012eba:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012ebd:	83 c4 10             	add    esp,0x10
c0012ec0:	83 c4 0c             	add    esp,0xc
c0012ec3:	c3                   	ret    

c0012ec4 <File::rewind()>:
c0012ec4:	83 ec 10             	sub    esp,0x10
c0012ec7:	6a 00                	push   0x0
c0012ec9:	6a 00                	push   0x0
c0012ecb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ecf:	e8 4a ff ff ff       	call   c0012e1e <File::seek(unsigned long long)>
c0012ed4:	83 c4 1c             	add    esp,0x1c
c0012ed7:	c3                   	ret    

c0012ed8 <File::unlink()>:
c0012ed8:	83 ec 0c             	sub    esp,0xc
c0012edb:	b8 0b 00 00 00       	mov    eax,0xb
c0012ee0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012ee4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012eeb:	80 f9 19             	cmp    cl,0x19
c0012eee:	77 2f                	ja     c0012f1f <File::unlink()+0x47>
c0012ef0:	8b 0c 8d c0 e3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1c40]
c0012ef7:	85 c9                	test   ecx,ecx
c0012ef9:	74 24                	je     c0012f1f <File::unlink()+0x47>
c0012efb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f01:	85 c9                	test   ecx,ecx
c0012f03:	74 1a                	je     c0012f1f <File::unlink()+0x47>
c0012f05:	b8 06 00 00 00       	mov    eax,0x6
c0012f0a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f0e:	75 0f                	jne    c0012f1f <File::unlink()+0x47>
c0012f10:	83 c2 0d             	add    edx,0xd
c0012f13:	50                   	push   eax
c0012f14:	50                   	push   eax
c0012f15:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f17:	52                   	push   edx
c0012f18:	51                   	push   ecx
c0012f19:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012f1c:	83 c4 10             	add    esp,0x10
c0012f1f:	83 c4 0c             	add    esp,0xc
c0012f22:	c3                   	ret    
c0012f23:	90                   	nop

c0012f24 <File::rename(char const*)>:
c0012f24:	83 ec 0c             	sub    esp,0xc
c0012f27:	b8 0b 00 00 00       	mov    eax,0xb
c0012f2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f30:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f37:	80 f9 19             	cmp    cl,0x19
c0012f3a:	77 32                	ja     c0012f6e <File::rename(char const*)+0x4a>
c0012f3c:	8b 0c 8d c0 e3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1c40]
c0012f43:	85 c9                	test   ecx,ecx
c0012f45:	74 27                	je     c0012f6e <File::rename(char const*)+0x4a>
c0012f47:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f4d:	85 c9                	test   ecx,ecx
c0012f4f:	74 1d                	je     c0012f6e <File::rename(char const*)+0x4a>
c0012f51:	b8 06 00 00 00       	mov    eax,0x6
c0012f56:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f5a:	75 12                	jne    c0012f6e <File::rename(char const*)+0x4a>
c0012f5c:	83 c2 0d             	add    edx,0xd
c0012f5f:	50                   	push   eax
c0012f60:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f62:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f66:	52                   	push   edx
c0012f67:	51                   	push   ecx
c0012f68:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012f6b:	83 c4 10             	add    esp,0x10
c0012f6e:	83 c4 0c             	add    esp,0xc
c0012f71:	c3                   	ret    

c0012f72 <File::chfatattr(unsigned char, unsigned char)>:
c0012f72:	57                   	push   edi
c0012f73:	b8 0b 00 00 00       	mov    eax,0xb
c0012f78:	56                   	push   esi
c0012f79:	53                   	push   ebx
c0012f7a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f7e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012f82:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f89:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012f8d:	80 f9 19             	cmp    cl,0x19
c0012f90:	77 37                	ja     c0012fc9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f92:	8b 0c 8d c0 e3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1c40]
c0012f99:	85 c9                	test   ecx,ecx
c0012f9b:	74 2c                	je     c0012fc9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f9d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012fa3:	85 c9                	test   ecx,ecx
c0012fa5:	74 22                	je     c0012fc9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012fa7:	b8 06 00 00 00       	mov    eax,0x6
c0012fac:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012fb0:	75 17                	jne    c0012fc9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012fb2:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012fb4:	89 f0                	mov    eax,esi
c0012fb6:	83 c2 0d             	add    edx,0xd
c0012fb9:	0f b6 f0             	movzx  esi,al
c0012fbc:	0f b6 db             	movzx  ebx,bl
c0012fbf:	56                   	push   esi
c0012fc0:	53                   	push   ebx
c0012fc1:	52                   	push   edx
c0012fc2:	51                   	push   ecx
c0012fc3:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012fc6:	83 c4 10             	add    esp,0x10
c0012fc9:	5b                   	pop    ebx
c0012fca:	5e                   	pop    esi
c0012fcb:	5f                   	pop    edi
c0012fcc:	c3                   	ret    
c0012fcd:	90                   	nop

c0012fce <File::exists()>:
c0012fce:	83 ec 0c             	sub    esp,0xc
c0012fd1:	31 c0                	xor    eax,eax
c0012fd3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012fd7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012fde:	80 f9 19             	cmp    cl,0x19
c0012fe1:	77 24                	ja     c0013007 <File::exists()+0x39>
c0012fe3:	8b 0c 8d c0 e3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1c40]
c0012fea:	85 c9                	test   ecx,ecx
c0012fec:	74 19                	je     c0013007 <File::exists()+0x39>
c0012fee:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ff4:	85 c9                	test   ecx,ecx
c0012ff6:	74 0f                	je     c0013007 <File::exists()+0x39>
c0012ff8:	83 c2 0d             	add    edx,0xd
c0012ffb:	50                   	push   eax
c0012ffc:	50                   	push   eax
c0012ffd:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012fff:	52                   	push   edx
c0013000:	51                   	push   ecx
c0013001:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013004:	83 c4 10             	add    esp,0x10
c0013007:	83 c4 0c             	add    esp,0xc
c001300a:	c3                   	ret    
c001300b:	90                   	nop

c001300c <File::stat(unsigned long long*, bool*)>:
c001300c:	56                   	push   esi
c001300d:	53                   	push   ebx
c001300e:	50                   	push   eax
c001300f:	b8 0b 00 00 00       	mov    eax,0xb
c0013014:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013018:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001301c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013023:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013027:	80 f9 19             	cmp    cl,0x19
c001302a:	77 3d                	ja     c0013069 <File::stat(unsigned long long*, bool*)+0x5d>
c001302c:	8b 0c 8d c0 e3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1c40]
c0013033:	85 c9                	test   ecx,ecx
c0013035:	74 32                	je     c0013069 <File::stat(unsigned long long*, bool*)+0x5d>
c0013037:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001303d:	85 c9                	test   ecx,ecx
c001303f:	74 28                	je     c0013069 <File::stat(unsigned long long*, bool*)+0x5d>
c0013041:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013043:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013047:	74 13                	je     c001305c <File::stat(unsigned long long*, bool*)+0x50>
c0013049:	83 ec 04             	sub    esp,0x4
c001304c:	56                   	push   esi
c001304d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013053:	51                   	push   ecx
c0013054:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0013057:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001305a:	eb 0a                	jmp    c0013066 <File::stat(unsigned long long*, bool*)+0x5a>
c001305c:	53                   	push   ebx
c001305d:	83 c2 0d             	add    edx,0xd
c0013060:	56                   	push   esi
c0013061:	52                   	push   edx
c0013062:	51                   	push   ecx
c0013063:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0013066:	83 c4 10             	add    esp,0x10
c0013069:	5a                   	pop    edx
c001306a:	5b                   	pop    ebx
c001306b:	5e                   	pop    esi
c001306c:	c3                   	ret    

c001306d <Fs::setcwd(Process*, char*)>:
c001306d:	55                   	push   ebp
c001306e:	57                   	push   edi
c001306f:	56                   	push   esi
c0013070:	53                   	push   ebx
c0013071:	81 ec 20 02 00 00    	sub    esp,0x220
c0013077:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c001307e:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0013084:	57                   	push   edi
c0013085:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001308c:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0013090:	56                   	push   esi
c0013091:	e8 bc fa ff ff       	call   c0012b52 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013096:	89 34 24             	mov    DWORD PTR [esp],esi
c0013099:	e8 ce d6 fe ff       	call   c000076c <strlen>
c001309e:	83 c4 10             	add    esp,0x10
c00130a1:	83 f8 02             	cmp    eax,0x2
c00130a4:	77 17                	ja     c00130bd <Fs::setcwd(Process*, char*)+0x50>
c00130a6:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00130ab:	83 e8 41             	sub    eax,0x41
c00130ae:	83 f8 19             	cmp    eax,0x19
c00130b1:	76 24                	jbe    c00130d7 <Fs::setcwd(Process*, char*)+0x6a>
c00130b3:	b8 03 00 00 00       	mov    eax,0x3
c00130b8:	e9 e0 00 00 00       	jmp    c001319d <Fs::setcwd(Process*, char*)+0x130>
c00130bd:	83 ec 0c             	sub    esp,0xc
c00130c0:	56                   	push   esi
c00130c1:	e8 a6 d6 fe ff       	call   c000076c <strlen>
c00130c6:	83 c4 10             	add    esp,0x10
c00130c9:	83 f8 03             	cmp    eax,0x3
c00130cc:	75 34                	jne    c0013102 <Fs::setcwd(Process*, char*)+0x95>
c00130ce:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00130d3:	75 2d                	jne    c0013102 <Fs::setcwd(Process*, char*)+0x95>
c00130d5:	eb cf                	jmp    c00130a6 <Fs::setcwd(Process*, char*)+0x39>
c00130d7:	8b 14 85 c0 e3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1c40]
c00130de:	b8 05 00 00 00       	mov    eax,0x5
c00130e3:	85 d2                	test   edx,edx
c00130e5:	0f 84 b2 00 00 00    	je     c001319d <Fs::setcwd(Process*, char*)+0x130>
c00130eb:	b8 06 00 00 00       	mov    eax,0x6
c00130f0:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00130f7:	0f 85 92 00 00 00    	jne    c001318f <Fs::setcwd(Process*, char*)+0x122>
c00130fd:	e9 9b 00 00 00       	jmp    c001319d <Fs::setcwd(Process*, char*)+0x130>
c0013102:	83 ec 0c             	sub    esp,0xc
c0013105:	68 14 01 00 00       	push   0x114
c001310a:	e8 8a c4 ff ff       	call   c000f599 <malloc>
c001310f:	83 c4 0c             	add    esp,0xc
c0013112:	89 c3                	mov    ebx,eax
c0013114:	55                   	push   ebp
c0013115:	56                   	push   esi
c0013116:	50                   	push   eax
c0013117:	e8 e0 fb ff ff       	call   c0012cfc <File::File(char const*, Process*)>
c001311c:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013121:	83 c4 0c             	add    esp,0xc
c0013124:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013128:	50                   	push   eax
c0013129:	8d 44 24 10          	lea    eax,[esp+0x10]
c001312d:	50                   	push   eax
c001312e:	53                   	push   ebx
c001312f:	e8 d8 fe ff ff       	call   c001300c <File::stat(unsigned long long*, bool*)>
c0013134:	83 c4 10             	add    esp,0x10
c0013137:	83 f8 02             	cmp    eax,0x2
c001313a:	74 04                	je     c0013140 <Fs::setcwd(Process*, char*)+0xd3>
c001313c:	85 c0                	test   eax,eax
c001313e:	74 1c                	je     c001315c <Fs::setcwd(Process*, char*)+0xef>
c0013140:	b8 01 00 00 00       	mov    eax,0x1
c0013145:	85 db                	test   ebx,ebx
c0013147:	74 54                	je     c001319d <Fs::setcwd(Process*, char*)+0x130>
c0013149:	83 ec 0c             	sub    esp,0xc
c001314c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001314e:	53                   	push   ebx
c001314f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013152:	83 c4 10             	add    esp,0x10
c0013155:	b8 01 00 00 00       	mov    eax,0x1
c001315a:	eb 41                	jmp    c001319d <Fs::setcwd(Process*, char*)+0x130>
c001315c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013161:	75 1c                	jne    c001317f <Fs::setcwd(Process*, char*)+0x112>
c0013163:	b8 02 00 00 00       	mov    eax,0x2
c0013168:	85 db                	test   ebx,ebx
c001316a:	74 31                	je     c001319d <Fs::setcwd(Process*, char*)+0x130>
c001316c:	83 ec 0c             	sub    esp,0xc
c001316f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013171:	53                   	push   ebx
c0013172:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013175:	83 c4 10             	add    esp,0x10
c0013178:	b8 02 00 00 00       	mov    eax,0x2
c001317d:	eb 1e                	jmp    c001319d <Fs::setcwd(Process*, char*)+0x130>
c001317f:	85 db                	test   ebx,ebx
c0013181:	74 0c                	je     c001318f <Fs::setcwd(Process*, char*)+0x122>
c0013183:	83 ec 0c             	sub    esp,0xc
c0013186:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013188:	53                   	push   ebx
c0013189:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001318c:	83 c4 10             	add    esp,0x10
c001318f:	50                   	push   eax
c0013190:	50                   	push   eax
c0013191:	56                   	push   esi
c0013192:	57                   	push   edi
c0013193:	e8 74 d6 fe ff       	call   c000080c <strcpy>
c0013198:	83 c4 10             	add    esp,0x10
c001319b:	31 c0                	xor    eax,eax
c001319d:	81 c4 1c 02 00 00    	add    esp,0x21c
c00131a3:	5b                   	pop    ebx
c00131a4:	5e                   	pop    esi
c00131a5:	5f                   	pop    edi
c00131a6:	5d                   	pop    ebp
c00131a7:	c3                   	ret    

c00131a8 <Directory::Directory(char const*, Process*)>:
c00131a8:	83 ec 0c             	sub    esp,0xc
c00131ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131af:	83 ec 08             	sub    esp,0x8
c00131b2:	6a 00                	push   0x0
c00131b4:	50                   	push   eax
c00131b5:	e8 22 dc ff ff       	call   c0010ddc <UnixFile::UnixFile(int)>
c00131ba:	83 c4 10             	add    esp,0x10
c00131bd:	ba dc ab 02 c0       	mov    edx,0xc002abdc
c00131c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131c6:	89 10                	mov    DWORD PTR [eax],edx
c00131c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00131cc:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00131d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131d6:	83 c0 0d             	add    eax,0xd
c00131d9:	83 ec 04             	sub    esp,0x4
c00131dc:	52                   	push   edx
c00131dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131e1:	50                   	push   eax
c00131e2:	e8 6b f9 ff ff       	call   c0012b52 <Fs::standardiseFiles(char*, char const*, char const*)>
c00131e7:	83 c4 10             	add    esp,0x10
c00131ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131ee:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00131f1:	8d 50 bf             	lea    edx,[eax-0x41]
c00131f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131f8:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00131fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013202:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013206:	90                   	nop
c0013207:	83 c4 0c             	add    esp,0xc
c001320a:	c3                   	ret    
c001320b:	90                   	nop

c001320c <Directory::open()>:
c001320c:	53                   	push   ebx
c001320d:	b8 0b 00 00 00       	mov    eax,0xb
c0013212:	83 ec 08             	sub    esp,0x8
c0013215:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013219:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013220:	80 fa 19             	cmp    dl,0x19
c0013223:	77 3d                	ja     c0013262 <Directory::open()+0x56>
c0013225:	8b 14 95 c0 e3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1c40]
c001322c:	85 d2                	test   edx,edx
c001322e:	74 32                	je     c0013262 <Directory::open()+0x56>
c0013230:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013236:	85 d2                	test   edx,edx
c0013238:	74 28                	je     c0013262 <Directory::open()+0x56>
c001323a:	b8 06 00 00 00       	mov    eax,0x6
c001323f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013243:	75 1d                	jne    c0013262 <Directory::open()+0x56>
c0013245:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001324b:	50                   	push   eax
c001324c:	8b 02                	mov    eax,DWORD PTR [edx]
c001324e:	51                   	push   ecx
c001324f:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013252:	51                   	push   ecx
c0013253:	52                   	push   edx
c0013254:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013257:	83 c4 10             	add    esp,0x10
c001325a:	85 c0                	test   eax,eax
c001325c:	75 04                	jne    c0013262 <Directory::open()+0x56>
c001325e:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013262:	83 c4 08             	add    esp,0x8
c0013265:	5b                   	pop    ebx
c0013266:	c3                   	ret    
c0013267:	90                   	nop

c0013268 <Directory::close()>:
c0013268:	53                   	push   ebx
c0013269:	b8 0b 00 00 00       	mov    eax,0xb
c001326e:	83 ec 08             	sub    esp,0x8
c0013271:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013275:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001327c:	80 fa 19             	cmp    dl,0x19
c001327f:	77 41                	ja     c00132c2 <Directory::close()+0x5a>
c0013281:	8b 1c 95 c0 e3 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1c40]
c0013288:	85 db                	test   ebx,ebx
c001328a:	74 36                	je     c00132c2 <Directory::close()+0x5a>
c001328c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013293:	74 2d                	je     c00132c2 <Directory::close()+0x5a>
c0013295:	b8 05 00 00 00       	mov    eax,0x5
c001329a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001329e:	74 22                	je     c00132c2 <Directory::close()+0x5a>
c00132a0:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00132a4:	8b 04 95 c0 e3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1c40]
c00132ab:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00132b1:	53                   	push   ebx
c00132b2:	53                   	push   ebx
c00132b3:	8b 10                	mov    edx,DWORD PTR [eax]
c00132b5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00132bb:	50                   	push   eax
c00132bc:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00132bf:	83 c4 10             	add    esp,0x10
c00132c2:	83 c4 08             	add    esp,0x8
c00132c5:	5b                   	pop    ebx
c00132c6:	c3                   	ret    
c00132c7:	90                   	nop

c00132c8 <Directory::unlink()>:
c00132c8:	83 ec 0c             	sub    esp,0xc
c00132cb:	b8 0b 00 00 00       	mov    eax,0xb
c00132d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00132d4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00132db:	80 f9 19             	cmp    cl,0x19
c00132de:	77 2f                	ja     c001330f <Directory::unlink()+0x47>
c00132e0:	8b 0c 8d c0 e3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1c40]
c00132e7:	85 c9                	test   ecx,ecx
c00132e9:	74 24                	je     c001330f <Directory::unlink()+0x47>
c00132eb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00132f1:	85 c9                	test   ecx,ecx
c00132f3:	74 1a                	je     c001330f <Directory::unlink()+0x47>
c00132f5:	b8 06 00 00 00       	mov    eax,0x6
c00132fa:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00132fe:	75 0f                	jne    c001330f <Directory::unlink()+0x47>
c0013300:	83 c2 0d             	add    edx,0xd
c0013303:	50                   	push   eax
c0013304:	50                   	push   eax
c0013305:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013307:	52                   	push   edx
c0013308:	51                   	push   ecx
c0013309:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001330c:	83 c4 10             	add    esp,0x10
c001330f:	83 c4 0c             	add    esp,0xc
c0013312:	c3                   	ret    
c0013313:	90                   	nop

c0013314 <Directory::rename(char const*)>:
c0013314:	83 ec 0c             	sub    esp,0xc
c0013317:	b8 0b 00 00 00       	mov    eax,0xb
c001331c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013320:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013327:	80 f9 19             	cmp    cl,0x19
c001332a:	77 32                	ja     c001335e <Directory::rename(char const*)+0x4a>
c001332c:	8b 0c 8d c0 e3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1c40]
c0013333:	85 c9                	test   ecx,ecx
c0013335:	74 27                	je     c001335e <Directory::rename(char const*)+0x4a>
c0013337:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001333d:	85 c9                	test   ecx,ecx
c001333f:	74 1d                	je     c001335e <Directory::rename(char const*)+0x4a>
c0013341:	b8 06 00 00 00       	mov    eax,0x6
c0013346:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001334a:	75 12                	jne    c001335e <Directory::rename(char const*)+0x4a>
c001334c:	83 c2 0d             	add    edx,0xd
c001334f:	50                   	push   eax
c0013350:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013352:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013356:	52                   	push   edx
c0013357:	51                   	push   ecx
c0013358:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001335b:	83 c4 10             	add    esp,0x10
c001335e:	83 c4 0c             	add    esp,0xc
c0013361:	c3                   	ret    

c0013362 <Directory::exists()>:
c0013362:	83 ec 0c             	sub    esp,0xc
c0013365:	31 c0                	xor    eax,eax
c0013367:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001336b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013372:	80 f9 19             	cmp    cl,0x19
c0013375:	77 24                	ja     c001339b <Directory::exists()+0x39>
c0013377:	8b 0c 8d c0 e3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1c40]
c001337e:	85 c9                	test   ecx,ecx
c0013380:	74 19                	je     c001339b <Directory::exists()+0x39>
c0013382:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013388:	85 c9                	test   ecx,ecx
c001338a:	74 0f                	je     c001339b <Directory::exists()+0x39>
c001338c:	83 c2 0d             	add    edx,0xd
c001338f:	50                   	push   eax
c0013390:	50                   	push   eax
c0013391:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013393:	52                   	push   edx
c0013394:	51                   	push   ecx
c0013395:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013398:	83 c4 10             	add    esp,0x10
c001339b:	83 c4 0c             	add    esp,0xc
c001339e:	c3                   	ret    
c001339f:	90                   	nop

c00133a0 <Directory::read(dirent*)>:
c00133a0:	83 ec 1c             	sub    esp,0x1c
c00133a3:	b8 0b 00 00 00       	mov    eax,0xb
c00133a8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00133ac:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00133b3:	80 fa 19             	cmp    dl,0x19
c00133b6:	77 30                	ja     c00133e8 <Directory::read(dirent*)+0x48>
c00133b8:	8b 14 95 c0 e3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1c40]
c00133bf:	85 d2                	test   edx,edx
c00133c1:	74 25                	je     c00133e8 <Directory::read(dirent*)+0x48>
c00133c3:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00133ca:	74 1c                	je     c00133e8 <Directory::read(dirent*)+0x48>
c00133cc:	83 ec 0c             	sub    esp,0xc
c00133cf:	8b 01                	mov    eax,DWORD PTR [ecx]
c00133d1:	8d 54 24 18          	lea    edx,[esp+0x18]
c00133d5:	52                   	push   edx
c00133d6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00133da:	6a 00                	push   0x0
c00133dc:	68 10 01 00 00       	push   0x110
c00133e1:	51                   	push   ecx
c00133e2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00133e5:	83 c4 20             	add    esp,0x20
c00133e8:	83 c4 1c             	add    esp,0x1c
c00133eb:	c3                   	ret    

c00133ec <Directory::create()>:
c00133ec:	83 ec 0c             	sub    esp,0xc
c00133ef:	b8 0b 00 00 00       	mov    eax,0xb
c00133f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00133f8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00133ff:	80 f9 19             	cmp    cl,0x19
c0013402:	77 2f                	ja     c0013433 <Directory::create()+0x47>
c0013404:	8b 0c 8d c0 e3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1c40]
c001340b:	85 c9                	test   ecx,ecx
c001340d:	74 24                	je     c0013433 <Directory::create()+0x47>
c001340f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013415:	85 c9                	test   ecx,ecx
c0013417:	74 1a                	je     c0013433 <Directory::create()+0x47>
c0013419:	b8 06 00 00 00       	mov    eax,0x6
c001341e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013422:	75 0f                	jne    c0013433 <Directory::create()+0x47>
c0013424:	83 c2 0d             	add    edx,0xd
c0013427:	50                   	push   eax
c0013428:	50                   	push   eax
c0013429:	8b 01                	mov    eax,DWORD PTR [ecx]
c001342b:	52                   	push   edx
c001342c:	51                   	push   ecx
c001342d:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013430:	83 c4 10             	add    esp,0x10
c0013433:	83 c4 0c             	add    esp,0xc
c0013436:	c3                   	ret    
c0013437:	90                   	nop

c0013438 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013438:	b8 0a 00 00 00       	mov    eax,0xa
c001343d:	c3                   	ret    

c001343e <Bus::Bus(char const*)>:
c001343e:	83 ec 0c             	sub    esp,0xc
c0013441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013445:	83 ec 08             	sub    esp,0x8
c0013448:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001344c:	50                   	push   eax
c001344d:	e8 88 09 00 00       	call   c0013dda <Device::Device(char const*)>
c0013452:	83 c4 10             	add    esp,0x10
c0013455:	ba f8 ab 02 c0       	mov    edx,0xc002abf8
c001345a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001345e:	89 10                	mov    DWORD PTR [eax],edx
c0013460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013464:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c001346e:	90                   	nop
c001346f:	83 c4 0c             	add    esp,0xc
c0013472:	c3                   	ret    
c0013473:	90                   	nop

c0013474 <Bus::~Bus()>:
c0013474:	83 ec 0c             	sub    esp,0xc
c0013477:	ba f8 ab 02 c0       	mov    edx,0xc002abf8
c001347c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013480:	89 10                	mov    DWORD PTR [eax],edx
c0013482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013486:	83 ec 0c             	sub    esp,0xc
c0013489:	50                   	push   eax
c001348a:	e8 15 06 00 00       	call   c0013aa4 <Device::~Device()>
c001348f:	83 c4 10             	add    esp,0x10
c0013492:	90                   	nop
c0013493:	83 c4 0c             	add    esp,0xc
c0013496:	c3                   	ret    
c0013497:	90                   	nop

c0013498 <Bus::~Bus()>:
c0013498:	83 ec 0c             	sub    esp,0xc
c001349b:	83 ec 0c             	sub    esp,0xc
c001349e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134a2:	e8 cd ff ff ff       	call   c0013474 <Bus::~Bus()>
c00134a7:	83 c4 10             	add    esp,0x10
c00134aa:	83 ec 08             	sub    esp,0x8
c00134ad:	68 58 01 00 00       	push   0x158
c00134b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134b6:	e8 0a f2 ff ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c00134bb:	83 c4 10             	add    esp,0x10
c00134be:	83 c4 0c             	add    esp,0xc
c00134c1:	c3                   	ret    

c00134c2 <Buzzer::Buzzer(char const*)>:
c00134c2:	83 ec 0c             	sub    esp,0xc
c00134c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134c9:	83 ec 08             	sub    esp,0x8
c00134cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134d0:	50                   	push   eax
c00134d1:	e8 04 09 00 00       	call   c0013dda <Device::Device(char const*)>
c00134d6:	83 c4 10             	add    esp,0x10
c00134d9:	ba 24 ac 02 c0       	mov    edx,0xc002ac24
c00134de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134e2:	89 10                	mov    DWORD PTR [eax],edx
c00134e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134e8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00134f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134f6:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013500:	90                   	nop
c0013501:	83 c4 0c             	add    esp,0xc
c0013504:	c3                   	ret    
c0013505:	90                   	nop

c0013506 <Buzzer::~Buzzer()>:
c0013506:	83 ec 0c             	sub    esp,0xc
c0013509:	ba 24 ac 02 c0       	mov    edx,0xc002ac24
c001350e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013512:	89 10                	mov    DWORD PTR [eax],edx
c0013514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013518:	83 ec 0c             	sub    esp,0xc
c001351b:	50                   	push   eax
c001351c:	e8 83 05 00 00       	call   c0013aa4 <Device::~Device()>
c0013521:	83 c4 10             	add    esp,0x10
c0013524:	90                   	nop
c0013525:	83 c4 0c             	add    esp,0xc
c0013528:	c3                   	ret    
c0013529:	90                   	nop

c001352a <Buzzer::~Buzzer()>:
c001352a:	83 ec 0c             	sub    esp,0xc
c001352d:	83 ec 0c             	sub    esp,0xc
c0013530:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013534:	e8 cd ff ff ff       	call   c0013506 <Buzzer::~Buzzer()>
c0013539:	83 c4 10             	add    esp,0x10
c001353c:	83 ec 08             	sub    esp,0x8
c001353f:	68 5c 01 00 00       	push   0x15c
c0013544:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013548:	e8 78 f1 ff ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c001354d:	83 c4 10             	add    esp,0x10
c0013550:	83 c4 0c             	add    esp,0xc
c0013553:	c3                   	ret    

c0013554 <Buzzer::stop()>:
c0013554:	83 ec 14             	sub    esp,0x14
c0013557:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001355b:	8b 10                	mov    edx,DWORD PTR [eax]
c001355d:	6a 00                	push   0x0
c001355f:	50                   	push   eax
c0013560:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013563:	83 c4 1c             	add    esp,0x1c
c0013566:	c3                   	ret    

c0013567 <beepThread(void*)>:
c0013567:	53                   	push   ebx
c0013568:	83 ec 08             	sub    esp,0x8
c001356b:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0013570:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013574:	48                   	dec    eax
c0013575:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c001357a:	75 01                	jne    c001357d <beepThread(void*)+0x16>
c001357c:	fb                   	sti    
c001357d:	50                   	push   eax
c001357e:	50                   	push   eax
c001357f:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013584:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c001358a:	52                   	push   edx
c001358b:	50                   	push   eax
c001358c:	e8 64 a8 00 00       	call   c001ddf5 <nanoSleep(unsigned long long)>
c0013591:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013594:	e8 bb ff ff ff       	call   c0013554 <Buzzer::stop()>
c0013599:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00135a1:	83 c4 18             	add    esp,0x18
c00135a4:	5b                   	pop    ebx
c00135a5:	e9 47 a7 00 00       	jmp    c001dcf1 <blockTask(TaskState)>

c00135aa <Buzzer::beep(int, int, bool)>:
c00135aa:	57                   	push   edi
c00135ab:	56                   	push   esi
c00135ac:	53                   	push   ebx
c00135ad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00135b1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00135b5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00135b9:	52                   	push   edx
c00135ba:	52                   	push   edx
c00135bb:	8b 06                	mov    eax,DWORD PTR [esi]
c00135bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135c1:	56                   	push   esi
c00135c2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00135c5:	83 c4 10             	add    esp,0x10
c00135c8:	89 f8                	mov    eax,edi
c00135ca:	84 c0                	test   al,al
c00135cc:	74 1f                	je     c00135ed <Buzzer::beep(int, int, bool)+0x43>
c00135ce:	50                   	push   eax
c00135cf:	50                   	push   eax
c00135d0:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c00135d6:	99                   	cdq    
c00135d7:	52                   	push   edx
c00135d8:	50                   	push   eax
c00135d9:	e8 17 a8 00 00       	call   c001ddf5 <nanoSleep(unsigned long long)>
c00135de:	83 c4 10             	add    esp,0x10
c00135e1:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00135e5:	5b                   	pop    ebx
c00135e6:	5e                   	pop    esi
c00135e7:	5f                   	pop    edi
c00135e8:	e9 67 ff ff ff       	jmp    c0013554 <Buzzer::stop()>
c00135ed:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c00135f3:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c00135f8:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013600:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013604:	c7 44 24 14 67 35 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013567
c001360c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013610:	5b                   	pop    ebx
c0013611:	5e                   	pop    esi
c0013612:	5f                   	pop    edi
c0013613:	e9 de a2 00 00       	jmp    c001d8f6 <Process::createThread(void (*)(void*), void*, int)>

c0013618 <User::loadClockSettings(int)>:
c0013618:	53                   	push   ebx
c0013619:	83 ec 14             	sub    esp,0x14
c001361c:	68 14 01 00 00       	push   0x114
c0013621:	e8 73 bf ff ff       	call   c000f599 <malloc>
c0013626:	83 c4 0c             	add    esp,0xc
c0013629:	89 c3                	mov    ebx,eax
c001362b:	ff 35 f0 f2 02 c0    	push   DWORD PTR ds:0xc002f2f0
c0013631:	68 4c ac 02 c0       	push   0xc002ac4c
c0013636:	50                   	push   eax
c0013637:	e8 c0 f6 ff ff       	call   c0012cfc <File::File(char const*, Process*)>
c001363c:	58                   	pop    eax
c001363d:	5a                   	pop    edx
c001363e:	6a 01                	push   0x1
c0013640:	53                   	push   ebx
c0013641:	e8 1a f7 ff ff       	call   c0012d60 <File::open(FileOpenMode)>
c0013646:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013649:	e8 70 f7 ff ff       	call   c0012dbe <File::close()>
c001364e:	83 c4 10             	add    esp,0x10
c0013651:	85 db                	test   ebx,ebx
c0013653:	74 0f                	je     c0013664 <User::loadClockSettings(int)+0x4c>
c0013655:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013657:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001365b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001365e:	83 c4 08             	add    esp,0x8
c0013661:	5b                   	pop    ebx
c0013662:	ff e0                	jmp    eax
c0013664:	83 c4 08             	add    esp,0x8
c0013667:	5b                   	pop    ebx
c0013668:	c3                   	ret    
c0013669:	90                   	nop

c001366a <Clock::Clock(char const*)>:
c001366a:	83 ec 0c             	sub    esp,0xc
c001366d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013671:	83 ec 08             	sub    esp,0x8
c0013674:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013678:	50                   	push   eax
c0013679:	e8 5c 07 00 00       	call   c0013dda <Device::Device(char const*)>
c001367e:	83 c4 10             	add    esp,0x10
c0013681:	ba 74 ac 02 c0       	mov    edx,0xc002ac74
c0013686:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001368a:	89 10                	mov    DWORD PTR [eax],edx
c001368c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013690:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c001369a:	90                   	nop
c001369b:	83 c4 0c             	add    esp,0xc
c001369e:	c3                   	ret    
c001369f:	90                   	nop

c00136a0 <Clock::~Clock()>:
c00136a0:	83 ec 0c             	sub    esp,0xc
c00136a3:	ba 74 ac 02 c0       	mov    edx,0xc002ac74
c00136a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136ac:	89 10                	mov    DWORD PTR [eax],edx
c00136ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136b2:	83 ec 0c             	sub    esp,0xc
c00136b5:	50                   	push   eax
c00136b6:	e8 e9 03 00 00       	call   c0013aa4 <Device::~Device()>
c00136bb:	83 c4 10             	add    esp,0x10
c00136be:	90                   	nop
c00136bf:	83 c4 0c             	add    esp,0xc
c00136c2:	c3                   	ret    
c00136c3:	90                   	nop

c00136c4 <Clock::~Clock()>:
c00136c4:	83 ec 0c             	sub    esp,0xc
c00136c7:	83 ec 0c             	sub    esp,0xc
c00136ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136ce:	e8 cd ff ff ff       	call   c00136a0 <Clock::~Clock()>
c00136d3:	83 c4 10             	add    esp,0x10
c00136d6:	83 ec 08             	sub    esp,0x8
c00136d9:	68 58 01 00 00       	push   0x158
c00136de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136e2:	e8 de ef ff ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c00136e7:	83 c4 10             	add    esp,0x10
c00136ea:	83 c4 0c             	add    esp,0xc
c00136ed:	c3                   	ret    

c00136ee <Clock::timeInSecondsLocal()>:
c00136ee:	53                   	push   ebx
c00136ef:	83 ec 14             	sub    esp,0x14
c00136f2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00136f6:	8b 10                	mov    edx,DWORD PTR [eax]
c00136f8:	50                   	push   eax
c00136f9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00136fc:	0f b6 0d 3c df 02 c0 	movzx  ecx,BYTE PTR ds:0xc002df3c
c0013703:	03 0d 40 df 02 c0    	add    ecx,DWORD PTR ds:0xc002df40
c0013709:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001370f:	89 cb                	mov    ebx,ecx
c0013711:	c1 fb 1f             	sar    ebx,0x1f
c0013714:	01 c8                	add    eax,ecx
c0013716:	11 da                	adc    edx,ebx
c0013718:	83 c4 10             	add    esp,0x10
c001371b:	31 c9                	xor    ecx,ecx
c001371d:	80 3d 3d df 02 c0 00 	cmp    BYTE PTR ds:0xc002df3d,0x0
c0013724:	74 05                	je     c001372b <Clock::timeInSecondsLocal()+0x3d>
c0013726:	b9 08 07 00 00       	mov    ecx,0x708
c001372b:	31 db                	xor    ebx,ebx
c001372d:	01 c8                	add    eax,ecx
c001372f:	11 da                	adc    edx,ebx
c0013731:	83 c4 08             	add    esp,0x8
c0013734:	5b                   	pop    ebx
c0013735:	c3                   	ret    

c0013736 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013736:	57                   	push   edi
c0013737:	56                   	push   esi
c0013738:	53                   	push   ebx
c0013739:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001373d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013741:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013743:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013747:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c001374a:	0f b6 05 3c df 02 c0 	movzx  eax,BYTE PTR ds:0xc002df3c
c0013751:	03 05 40 df 02 c0    	add    eax,DWORD PTR ds:0xc002df40
c0013757:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c001375d:	99                   	cdq    
c001375e:	29 c6                	sub    esi,eax
c0013760:	19 d7                	sbb    edi,edx
c0013762:	89 f0                	mov    eax,esi
c0013764:	89 fa                	mov    edx,edi
c0013766:	31 f6                	xor    esi,esi
c0013768:	80 3d 3d df 02 c0 00 	cmp    BYTE PTR ds:0xc002df3d,0x0
c001376f:	74 05                	je     c0013776 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013771:	be 08 07 00 00       	mov    esi,0x708
c0013776:	31 ff                	xor    edi,edi
c0013778:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001377c:	29 f0                	sub    eax,esi
c001377e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013782:	19 fa                	sbb    edx,edi
c0013784:	89 d8                	mov    eax,ebx
c0013786:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001378a:	5b                   	pop    ebx
c001378b:	5e                   	pop    esi
c001378c:	5f                   	pop    edi
c001378d:	ff e0                	jmp    eax

c001378f <datetimeToSeconds(datetime_t)>:
c001378f:	55                   	push   ebp
c0013790:	57                   	push   edi
c0013791:	56                   	push   esi
c0013792:	53                   	push   ebx
c0013793:	83 ec 14             	sub    esp,0x14
c0013796:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001379a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001379e:	89 d3                	mov    ebx,edx
c00137a0:	0f b6 c6             	movzx  eax,dh
c00137a3:	c1 eb 10             	shr    ebx,0x10
c00137a6:	48                   	dec    eax
c00137a7:	66 81 eb 6c 07       	sub    bx,0x76c
c00137ac:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00137b0:	0f b6 f5             	movzx  esi,ch
c00137b3:	89 cf                	mov    edi,ecx
c00137b5:	6b f6 3c             	imul   esi,esi,0x3c
c00137b8:	c1 ef 10             	shr    edi,0x10
c00137bb:	0f b6 c9             	movzx  ecx,cl
c00137be:	89 f8                	mov    eax,edi
c00137c0:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00137c6:	0f b6 f8             	movzx  edi,al
c00137c9:	0f b6 d2             	movzx  edx,dl
c00137cc:	01 fe                	add    esi,edi
c00137ce:	01 f1                	add    ecx,esi
c00137d0:	0f b7 f3             	movzx  esi,bx
c00137d3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00137d7:	c1 f9 1f             	sar    ecx,0x1f
c00137da:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c00137df:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00137e3:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c00137e8:	8b 0c 8d c0 ac 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5340]
c00137ef:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c00137f3:	76 29                	jbe    c001381e <datetimeToSeconds(datetime_t)+0x8f>
c00137f5:	f6 c3 03             	test   bl,0x3
c00137f8:	75 24                	jne    c001381e <datetimeToSeconds(datetime_t)+0x8f>
c00137fa:	31 d2                	xor    edx,edx
c00137fc:	bf 64 00 00 00       	mov    edi,0x64
c0013801:	89 d8                	mov    eax,ebx
c0013803:	66 f7 f7             	div    di
c0013806:	66 85 d2             	test   dx,dx
c0013809:	75 12                	jne    c001381d <datetimeToSeconds(datetime_t)+0x8e>
c001380b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013811:	bf 90 01 00 00       	mov    edi,0x190
c0013816:	99                   	cdq    
c0013817:	f7 ff                	idiv   edi
c0013819:	85 d2                	test   edx,edx
c001381b:	75 01                	jne    c001381e <datetimeToSeconds(datetime_t)+0x8f>
c001381d:	41                   	inc    ecx
c001381e:	66 83 fb 46          	cmp    bx,0x46
c0013822:	76 45                	jbe    c0013869 <datetimeToSeconds(datetime_t)+0xda>
c0013824:	bb 46 00 00 00       	mov    ebx,0x46
c0013829:	bf 64 00 00 00       	mov    edi,0x64
c001382e:	bd 90 01 00 00       	mov    ebp,0x190
c0013833:	b8 6d 01 00 00       	mov    eax,0x16d
c0013838:	f6 c3 03             	test   bl,0x3
c001383b:	75 23                	jne    c0013860 <datetimeToSeconds(datetime_t)+0xd1>
c001383d:	89 d8                	mov    eax,ebx
c001383f:	99                   	cdq    
c0013840:	f7 ff                	idiv   edi
c0013842:	b8 6e 01 00 00       	mov    eax,0x16e
c0013847:	85 d2                	test   edx,edx
c0013849:	75 15                	jne    c0013860 <datetimeToSeconds(datetime_t)+0xd1>
c001384b:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013851:	99                   	cdq    
c0013852:	f7 fd                	idiv   ebp
c0013854:	83 fa 01             	cmp    edx,0x1
c0013857:	19 c0                	sbb    eax,eax
c0013859:	f7 d0                	not    eax
c001385b:	05 6e 01 00 00       	add    eax,0x16e
c0013860:	01 c1                	add    ecx,eax
c0013862:	43                   	inc    ebx
c0013863:	39 f3                	cmp    ebx,esi
c0013865:	7c cc                	jl     c0013833 <datetimeToSeconds(datetime_t)+0xa4>
c0013867:	eb 35                	jmp    c001389e <datetimeToSeconds(datetime_t)+0x10f>
c0013869:	74 33                	je     c001389e <datetimeToSeconds(datetime_t)+0x10f>
c001386b:	b8 45 00 00 00       	mov    eax,0x45
c0013870:	89 c2                	mov    edx,eax
c0013872:	83 e2 03             	and    edx,0x3
c0013875:	39 f0                	cmp    eax,esi
c0013877:	7e 0f                	jle    c0013888 <datetimeToSeconds(datetime_t)+0xf9>
c0013879:	83 fa 01             	cmp    edx,0x1
c001387c:	19 d2                	sbb    edx,edx
c001387e:	48                   	dec    eax
c001387f:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013886:	eb e8                	jmp    c0013870 <datetimeToSeconds(datetime_t)+0xe1>
c0013888:	b8 6d 01 00 00       	mov    eax,0x16d
c001388d:	85 d2                	test   edx,edx
c001388f:	75 0b                	jne    c001389c <datetimeToSeconds(datetime_t)+0x10d>
c0013891:	66 83 fb 01          	cmp    bx,0x1
c0013895:	19 c0                	sbb    eax,eax
c0013897:	05 6e 01 00 00       	add    eax,0x16e
c001389c:	29 c1                	sub    ecx,eax
c001389e:	b8 80 51 01 00       	mov    eax,0x15180
c00138a3:	f7 e9                	imul   ecx
c00138a5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00138a9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00138ad:	83 c4 14             	add    esp,0x14
c00138b0:	5b                   	pop    ebx
c00138b1:	5e                   	pop    esi
c00138b2:	5f                   	pop    edi
c00138b3:	5d                   	pop    ebp
c00138b4:	c3                   	ret    
c00138b5:	90                   	nop

c00138b6 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00138b6:	57                   	push   edi
c00138b7:	56                   	push   esi
c00138b8:	53                   	push   ebx
c00138b9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00138bd:	8b 06                	mov    eax,DWORD PTR [esi]
c00138bf:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00138c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00138c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00138ca:	e8 c0 fe ff ff       	call   c001378f <datetimeToSeconds(datetime_t)>
c00138cf:	59                   	pop    ecx
c00138d0:	0f b6 0d 3c df 02 c0 	movzx  ecx,BYTE PTR ds:0xc002df3c
c00138d7:	5b                   	pop    ebx
c00138d8:	03 0d 40 df 02 c0    	add    ecx,DWORD PTR ds:0xc002df40
c00138de:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00138e4:	89 cb                	mov    ebx,ecx
c00138e6:	c1 fb 1f             	sar    ebx,0x1f
c00138e9:	29 c8                	sub    eax,ecx
c00138eb:	19 da                	sbb    edx,ebx
c00138ed:	31 c9                	xor    ecx,ecx
c00138ef:	80 3d 3d df 02 c0 00 	cmp    BYTE PTR ds:0xc002df3d,0x0
c00138f6:	74 05                	je     c00138fd <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c00138f8:	b9 08 07 00 00       	mov    ecx,0x708
c00138fd:	31 db                	xor    ebx,ebx
c00138ff:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013903:	29 c8                	sub    eax,ecx
c0013905:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013909:	19 da                	sbb    edx,ebx
c001390b:	89 f8                	mov    eax,edi
c001390d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013911:	5b                   	pop    ebx
c0013912:	5e                   	pop    esi
c0013913:	5f                   	pop    edi
c0013914:	ff e0                	jmp    eax

c0013916 <secondsToDatetime(unsigned long long)>:
c0013916:	55                   	push   ebp
c0013917:	57                   	push   edi
c0013918:	56                   	push   esi
c0013919:	53                   	push   ebx
c001391a:	83 ec 1c             	sub    esp,0x1c
c001391d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013921:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013925:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013929:	6a 00                	push   0x0
c001392b:	68 80 51 01 00       	push   0x15180
c0013930:	55                   	push   ebp
c0013931:	57                   	push   edi
c0013932:	e8 bd 2f 01 00       	call   c00268f4 <__udivdi3>
c0013937:	83 c4 10             	add    esp,0x10
c001393a:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013940:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013944:	6a 00                	push   0x0
c0013946:	68 80 51 01 00       	push   0x15180
c001394b:	55                   	push   ebp
c001394c:	57                   	push   edi
c001394d:	bf 10 0e 00 00       	mov    edi,0xe10
c0013952:	e8 9d 30 01 00       	call   c00269f4 <__umoddi3>
c0013957:	83 c4 10             	add    esp,0x10
c001395a:	99                   	cdq    
c001395b:	f7 ff                	idiv   edi
c001395d:	bf 3c 00 00 00       	mov    edi,0x3c
c0013962:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013965:	89 d0                	mov    eax,edx
c0013967:	99                   	cdq    
c0013968:	f7 ff                	idiv   edi
c001396a:	85 db                	test   ebx,ebx
c001396c:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c001396f:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013972:	79 11                	jns    c0013985 <secondsToDatetime(unsigned long long)+0x6f>
c0013974:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013978:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c001397e:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013983:	eb 07                	jmp    c001398c <secondsToDatetime(unsigned long long)+0x76>
c0013985:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001398a:	89 d8                	mov    eax,ebx
c001398c:	bf b4 05 00 00       	mov    edi,0x5b4
c0013991:	99                   	cdq    
c0013992:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013997:	f7 f9                	idiv   ecx
c0013999:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c001399e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00139a2:	31 d2                	xor    edx,edx
c00139a4:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00139ac:	01 c3                	add    ebx,eax
c00139ae:	89 d8                	mov    eax,ebx
c00139b0:	f7 f1                	div    ecx
c00139b2:	31 d2                	xor    edx,edx
c00139b4:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00139b7:	89 d8                	mov    eax,ebx
c00139b9:	f7 f7                	div    edi
c00139bb:	31 d2                	xor    edx,edx
c00139bd:	29 c1                	sub    ecx,eax
c00139bf:	89 d8                	mov    eax,ebx
c00139c1:	f7 f5                	div    ebp
c00139c3:	bd 6d 01 00 00       	mov    ebp,0x16d
c00139c8:	29 c1                	sub    ecx,eax
c00139ca:	31 d2                	xor    edx,edx
c00139cc:	89 c8                	mov    eax,ecx
c00139ce:	f7 f5                	div    ebp
c00139d0:	bd 94 8e 00 00       	mov    ebp,0x8e94
c00139d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00139d9:	31 d2                	xor    edx,edx
c00139db:	89 c8                	mov    eax,ecx
c00139dd:	f7 f5                	div    ebp
c00139df:	31 d2                	xor    edx,edx
c00139e1:	01 c3                	add    ebx,eax
c00139e3:	89 c8                	mov    eax,ecx
c00139e5:	f7 f7                	div    edi
c00139e7:	bf 99 00 00 00       	mov    edi,0x99
c00139ec:	29 c3                	sub    ebx,eax
c00139ee:	31 d2                	xor    edx,edx
c00139f0:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c00139f8:	29 c3                	sub    ebx,eax
c00139fa:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00139fd:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013a00:	bb 05 00 00 00       	mov    ebx,0x5
c0013a05:	83 c1 02             	add    ecx,0x2
c0013a08:	89 c8                	mov    eax,ecx
c0013a0a:	f7 f7                	div    edi
c0013a0c:	31 d2                	xor    edx,edx
c0013a0e:	89 c7                	mov    edi,eax
c0013a10:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013a16:	83 c0 02             	add    eax,0x2
c0013a19:	f7 f3                	div    ebx
c0013a1b:	89 eb                	mov    ebx,ebp
c0013a1d:	29 c3                	sub    ebx,eax
c0013a1f:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013a25:	88 1e                	mov    BYTE PTR [esi],bl
c0013a27:	19 c0                	sbb    eax,eax
c0013a29:	31 d2                	xor    edx,edx
c0013a2b:	83 e0 0c             	and    eax,0xc
c0013a2e:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013a32:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013a3a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013a3e:	83 f9 01             	cmp    ecx,0x1
c0013a41:	0f 96 c2             	setbe  dl
c0013a44:	41                   	inc    ecx
c0013a45:	01 d0                	add    eax,edx
c0013a47:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013a4a:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013a4e:	83 c4 1c             	add    esp,0x1c
c0013a51:	89 f0                	mov    eax,esi
c0013a53:	5b                   	pop    ebx
c0013a54:	5e                   	pop    esi
c0013a55:	5f                   	pop    edi
c0013a56:	5d                   	pop    ebp
c0013a57:	c2 04 00             	ret    0x4

c0013a5a <Clock::timeInDatetimeLocal()>:
c0013a5a:	53                   	push   ebx
c0013a5b:	83 ec 14             	sub    esp,0x14
c0013a5e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013a62:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013a66:	e8 83 fc ff ff       	call   c00136ee <Clock::timeInSecondsLocal()>
c0013a6b:	83 c4 0c             	add    esp,0xc
c0013a6e:	52                   	push   edx
c0013a6f:	50                   	push   eax
c0013a70:	53                   	push   ebx
c0013a71:	e8 a0 fe ff ff       	call   c0013916 <secondsToDatetime(unsigned long long)>
c0013a76:	89 d8                	mov    eax,ebx
c0013a78:	83 c4 14             	add    esp,0x14
c0013a7b:	5b                   	pop    ebx
c0013a7c:	c2 04 00             	ret    0x4
c0013a7f:	90                   	nop

c0013a80 <Device::hibernate()>:
c0013a80:	c3                   	ret    
c0013a81:	90                   	nop

c0013a82 <Device::wake()>:
c0013a82:	c3                   	ret    
c0013a83:	90                   	nop

c0013a84 <Device::detect()>:
c0013a84:	c3                   	ret    
c0013a85:	90                   	nop

c0013a86 <Device::disableLegacy()>:
c0013a86:	c3                   	ret    
c0013a87:	90                   	nop

c0013a88 <Device::powerSaving(PowerSavingLevel)>:
c0013a88:	c3                   	ret    
c0013a89:	90                   	nop

c0013a8a <DriverlessDevice::close(int, int, void*)>:
c0013a8a:	31 c0                	xor    eax,eax
c0013a8c:	c3                   	ret    
c0013a8d:	90                   	nop

c0013a8e <DriverlessDevice::detect()>:
c0013a8e:	c3                   	ret    
c0013a8f:	90                   	nop

c0013a90 <DriverlessDevice::open(int, int, void*)>:
c0013a90:	83 ec 18             	sub    esp,0x18
c0013a93:	68 f0 ac 02 c0       	push   0xc002acf0
c0013a98:	e8 ec 64 00 00       	call   c0019f89 <Krnl::panic(char const*)>
c0013a9d:	83 c8 ff             	or     eax,0xffffffff
c0013aa0:	83 c4 1c             	add    esp,0x1c
c0013aa3:	c3                   	ret    

c0013aa4 <Device::~Device()>:
c0013aa4:	ba 50 ad 02 c0       	mov    edx,0xc002ad50
c0013aa9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013aad:	89 10                	mov    DWORD PTR [eax],edx
c0013aaf:	90                   	nop
c0013ab0:	c3                   	ret    
c0013ab1:	90                   	nop

c0013ab2 <Device::~Device()>:
c0013ab2:	83 ec 0c             	sub    esp,0xc
c0013ab5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013ab9:	e8 e6 ff ff ff       	call   c0013aa4 <Device::~Device()>
c0013abe:	83 c4 04             	add    esp,0x4
c0013ac1:	83 ec 08             	sub    esp,0x8
c0013ac4:	68 58 01 00 00       	push   0x158
c0013ac9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013acd:	e8 f3 eb ff ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0013ad2:	83 c4 10             	add    esp,0x10
c0013ad5:	83 c4 0c             	add    esp,0xc
c0013ad8:	c3                   	ret    
c0013ad9:	90                   	nop

c0013ada <Device::findAndLoadDriver()>:
c0013ada:	c7 44 24 04 0e ad 02 c0 	mov    DWORD PTR [esp+0x4],0xc002ad0e
c0013ae2:	e9 b6 ec ff ff       	jmp    c001279d <Dbg::kprintf(char const*, ...)>
c0013ae7:	90                   	nop

c0013ae8 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013ae8:	57                   	push   edi
c0013ae9:	b9 09 00 00 00       	mov    ecx,0x9
c0013aee:	56                   	push   esi
c0013aef:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013af3:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013af7:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013b01:	81 c7 18 01 00 00    	add    edi,0x118
c0013b07:	fc                   	cld    
c0013b08:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013b0a:	5e                   	pop    esi
c0013b0b:	5f                   	pop    edi
c0013b0c:	c3                   	ret    
c0013b0d:	90                   	nop

c0013b0e <Device::preOpenACPI(void*, char*, char*)>:
c0013b0e:	57                   	push   edi
c0013b0f:	b9 1e 00 00 00       	mov    ecx,0x1e
c0013b14:	56                   	push   esi
c0013b15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013b19:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b1d:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0013b27:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0013b2d:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0013b33:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013b37:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013b39:	b9 0e 00 00 00       	mov    ecx,0xe
c0013b3e:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0013b44:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013b48:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013b4a:	5e                   	pop    esi
c0013b4b:	5f                   	pop    edi
c0013b4c:	c3                   	ret    
c0013b4d:	90                   	nop

c0013b4e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013b4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b52:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013b57:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013b5e:	75 0b                	jne    c0013b6b <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013b60:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b62:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013b66:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013b69:	eb 1e                	jmp    c0013b89 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013b6b:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c0013b70:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013b76:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013b7c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013b7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013b82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013b86:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013b89:	ff e0                	jmp    eax
c0013b8b:	90                   	nop

c0013b8c <Device::getParent()>:
c0013b8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b90:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0013b96:	c3                   	ret    
c0013b97:	90                   	nop

c0013b98 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013b98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b9c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013ba1:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013ba8:	75 0b                	jne    c0013bb5 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013baa:	8b 00                	mov    eax,DWORD PTR [eax]
c0013bac:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013bb0:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013bb3:	eb 1e                	jmp    c0013bd3 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013bb5:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c0013bba:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013bc0:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013bc6:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013bc8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013bcc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013bd0:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013bd3:	ff e0                	jmp    eax
c0013bd5:	90                   	nop

c0013bd6 <Device::addChild(Device*)>:
c0013bd6:	53                   	push   ebx
c0013bd7:	83 ec 08             	sub    esp,0x8
c0013bda:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013bde:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013be2:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013be8:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013bee:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013bf0:	85 d2                	test   edx,edx
c0013bf2:	74 04                	je     c0013bf8 <Device::addChild(Device*)+0x22>
c0013bf4:	89 d3                	mov    ebx,edx
c0013bf6:	eb f6                	jmp    c0013bee <Device::addChild(Device*)+0x18>
c0013bf8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013bfb:	83 ec 0c             	sub    esp,0xc
c0013bfe:	6a 08                	push   0x8
c0013c00:	e8 94 b9 ff ff       	call   c000f599 <malloc>
c0013c05:	89 03                	mov    DWORD PTR [ebx],eax
c0013c07:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013c0d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013c14:	83 c4 18             	add    esp,0x18
c0013c17:	5b                   	pop    ebx
c0013c18:	c3                   	ret    
c0013c19:	90                   	nop

c0013c1a <Device::removeAllChildren()>:
c0013c1a:	56                   	push   esi
c0013c1b:	53                   	push   ebx
c0013c1c:	52                   	push   edx
c0013c1d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013c21:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013c27:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c2a:	74 17                	je     c0013c43 <Device::removeAllChildren()+0x29>
c0013c2c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013c2f:	85 c0                	test   eax,eax
c0013c31:	74 0c                	je     c0013c3f <Device::removeAllChildren()+0x25>
c0013c33:	83 ec 0c             	sub    esp,0xc
c0013c36:	8b 10                	mov    edx,DWORD PTR [eax]
c0013c38:	50                   	push   eax
c0013c39:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013c3c:	83 c4 10             	add    esp,0x10
c0013c3f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c41:	eb e4                	jmp    c0013c27 <Device::removeAllChildren()+0xd>
c0013c43:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013c49:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013c4f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013c55:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013c5c:	58                   	pop    eax
c0013c5d:	5b                   	pop    ebx
c0013c5e:	5e                   	pop    esi
c0013c5f:	c3                   	ret    

c0013c60 <Device::hibernateAll()>:
c0013c60:	53                   	push   ebx
c0013c61:	83 ec 14             	sub    esp,0x14
c0013c64:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c68:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c6a:	53                   	push   ebx
c0013c6b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013c6e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c74:	83 c4 10             	add    esp,0x10
c0013c77:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c7a:	74 0f                	je     c0013c8b <Device::hibernateAll()+0x2b>
c0013c7c:	83 ec 0c             	sub    esp,0xc
c0013c7f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c82:	e8 d9 ff ff ff       	call   c0013c60 <Device::hibernateAll()>
c0013c87:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c89:	eb e9                	jmp    c0013c74 <Device::hibernateAll()+0x14>
c0013c8b:	83 c4 08             	add    esp,0x8
c0013c8e:	5b                   	pop    ebx
c0013c8f:	c3                   	ret    

c0013c90 <Device::wakeAll()>:
c0013c90:	53                   	push   ebx
c0013c91:	83 ec 14             	sub    esp,0x14
c0013c94:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c98:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c9a:	53                   	push   ebx
c0013c9b:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013c9e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ca4:	83 c4 10             	add    esp,0x10
c0013ca7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013caa:	74 0f                	je     c0013cbb <Device::wakeAll()+0x2b>
c0013cac:	83 ec 0c             	sub    esp,0xc
c0013caf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013cb2:	e8 d9 ff ff ff       	call   c0013c90 <Device::wakeAll()>
c0013cb7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013cb9:	eb e9                	jmp    c0013ca4 <Device::wakeAll()+0x14>
c0013cbb:	83 c4 08             	add    esp,0x8
c0013cbe:	5b                   	pop    ebx
c0013cbf:	c3                   	ret    

c0013cc0 <Device::detectAll()>:
c0013cc0:	53                   	push   ebx
c0013cc1:	83 ec 14             	sub    esp,0x14
c0013cc4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013cc8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cca:	53                   	push   ebx
c0013ccb:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013cce:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013cd4:	83 c4 10             	add    esp,0x10
c0013cd7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013cda:	74 0f                	je     c0013ceb <Device::detectAll()+0x2b>
c0013cdc:	83 ec 0c             	sub    esp,0xc
c0013cdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ce2:	e8 d9 ff ff ff       	call   c0013cc0 <Device::detectAll()>
c0013ce7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ce9:	eb e9                	jmp    c0013cd4 <Device::detectAll()+0x14>
c0013ceb:	83 c4 08             	add    esp,0x8
c0013cee:	5b                   	pop    ebx
c0013cef:	c3                   	ret    

c0013cf0 <Device::disableLegacyAll()>:
c0013cf0:	53                   	push   ebx
c0013cf1:	83 ec 14             	sub    esp,0x14
c0013cf4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013cf8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cfa:	53                   	push   ebx
c0013cfb:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013cfe:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d04:	83 c4 10             	add    esp,0x10
c0013d07:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d0a:	74 0f                	je     c0013d1b <Device::disableLegacyAll()+0x2b>
c0013d0c:	83 ec 0c             	sub    esp,0xc
c0013d0f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d12:	e8 d9 ff ff ff       	call   c0013cf0 <Device::disableLegacyAll()>
c0013d17:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d19:	eb e9                	jmp    c0013d04 <Device::disableLegacyAll()+0x14>
c0013d1b:	83 c4 08             	add    esp,0x8
c0013d1e:	5b                   	pop    ebx
c0013d1f:	c3                   	ret    

c0013d20 <Device::loadDriversForAll()>:
c0013d20:	53                   	push   ebx
c0013d21:	83 ec 08             	sub    esp,0x8
c0013d24:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d28:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c0013d2f:	75 0c                	jne    c0013d3d <Device::loadDriversForAll()+0x1d>
c0013d31:	83 ec 0c             	sub    esp,0xc
c0013d34:	53                   	push   ebx
c0013d35:	e8 a0 fd ff ff       	call   c0013ada <Device::findAndLoadDriver()>
c0013d3a:	83 c4 10             	add    esp,0x10
c0013d3d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d43:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d46:	74 12                	je     c0013d5a <Device::loadDriversForAll()+0x3a>
c0013d48:	83 ec 0c             	sub    esp,0xc
c0013d4b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d4e:	e8 cd ff ff ff       	call   c0013d20 <Device::loadDriversForAll()>
c0013d53:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d55:	83 c4 10             	add    esp,0x10
c0013d58:	eb e9                	jmp    c0013d43 <Device::loadDriversForAll()+0x23>
c0013d5a:	83 c4 08             	add    esp,0x8
c0013d5d:	5b                   	pop    ebx
c0013d5e:	c3                   	ret    
c0013d5f:	90                   	nop

c0013d60 <Device::closeAll()>:
c0013d60:	53                   	push   ebx
c0013d61:	83 ec 08             	sub    esp,0x8
c0013d64:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d68:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d6a:	6a 00                	push   0x0
c0013d6c:	6a 00                	push   0x0
c0013d6e:	6a 00                	push   0x0
c0013d70:	53                   	push   ebx
c0013d71:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d74:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d7a:	83 c4 10             	add    esp,0x10
c0013d7d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d80:	74 0f                	je     c0013d91 <Device::closeAll()+0x31>
c0013d82:	83 ec 0c             	sub    esp,0xc
c0013d85:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d88:	e8 d3 ff ff ff       	call   c0013d60 <Device::closeAll()>
c0013d8d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d8f:	eb e9                	jmp    c0013d7a <Device::closeAll()+0x1a>
c0013d91:	83 c4 08             	add    esp,0x8
c0013d94:	5b                   	pop    ebx
c0013d95:	c3                   	ret    

c0013d96 <Device::powerSavingAll(PowerSavingLevel)>:
c0013d96:	56                   	push   esi
c0013d97:	53                   	push   ebx
c0013d98:	83 ec 0c             	sub    esp,0xc
c0013d9b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d9f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013da3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013da5:	56                   	push   esi
c0013da6:	53                   	push   ebx
c0013da7:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013daa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013db0:	83 c4 10             	add    esp,0x10
c0013db3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013db6:	74 0f                	je     c0013dc7 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013db8:	52                   	push   edx
c0013db9:	52                   	push   edx
c0013dba:	56                   	push   esi
c0013dbb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013dbe:	e8 d3 ff ff ff       	call   c0013d96 <Device::powerSavingAll(PowerSavingLevel)>
c0013dc3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013dc5:	eb e9                	jmp    c0013db0 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013dc7:	58                   	pop    eax
c0013dc8:	5b                   	pop    ebx
c0013dc9:	5e                   	pop    esi
c0013dca:	c3                   	ret    
c0013dcb:	90                   	nop

c0013dcc <Device::setName(char const*)>:
c0013dcc:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013dd4:	e9 33 ca fe ff       	jmp    c000080c <strcpy>
c0013dd9:	90                   	nop

c0013dda <Device::Device(char const*)>:
c0013dda:	83 ec 1c             	sub    esp,0x1c
c0013ddd:	ba 50 ad 02 c0       	mov    edx,0xc002ad50
c0013de2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013de6:	89 10                	mov    DWORD PTR [eax],edx
c0013de8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dec:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013df6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dfa:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013e04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e08:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013e12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e16:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013e20:	83 ec 08             	sub    esp,0x8
c0013e23:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e27:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e2b:	e8 9c ff ff ff       	call   c0013dcc <Device::setName(char const*)>
c0013e30:	83 c4 10             	add    esp,0x10
c0013e33:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013e3b:	83 ec 0c             	sub    esp,0xc
c0013e3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013e42:	e8 52 b7 ff ff       	call   c000f599 <malloc>
c0013e47:	83 c4 10             	add    esp,0x10
c0013e4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013e50:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013e57:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013e5b:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013e61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e65:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013e6b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013e71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e75:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013e7b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013e82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e86:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013e8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e91:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013e98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e9c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013ea6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013eaa:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013eb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013eb8:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013ec2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ec6:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0013ed0:	90                   	nop
c0013ed1:	83 c4 1c             	add    esp,0x1c
c0013ed4:	c3                   	ret    
c0013ed5:	90                   	nop

c0013ed6 <Device::getName()>:
c0013ed6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013eda:	05 d0 00 00 00       	add    eax,0xd0
c0013edf:	c3                   	ret    

c0013ee0 <DriverlessDevice::DriverlessDevice(char const*)>:
c0013ee0:	83 ec 0c             	sub    esp,0xc
c0013ee3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ee7:	83 ec 08             	sub    esp,0x8
c0013eea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013eee:	50                   	push   eax
c0013eef:	e8 e6 fe ff ff       	call   c0013dda <Device::Device(char const*)>
c0013ef4:	83 c4 10             	add    esp,0x10
c0013ef7:	ba 7c ad 02 c0       	mov    edx,0xc002ad7c
c0013efc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f00:	89 10                	mov    DWORD PTR [eax],edx
c0013f02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f06:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013f10:	90                   	nop
c0013f11:	83 c4 0c             	add    esp,0xc
c0013f14:	c3                   	ret    
c0013f15:	90                   	nop

c0013f16 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013f16:	57                   	push   edi
c0013f17:	56                   	push   esi
c0013f18:	53                   	push   ebx
c0013f19:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013f1d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013f21:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013f25:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013f2b:	75 0c                	jne    c0013f39 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013f2d:	52                   	push   edx
c0013f2e:	52                   	push   edx
c0013f2f:	53                   	push   ebx
c0013f30:	56                   	push   esi
c0013f31:	e8 fa 48 01 00       	call   c0028830 <LinkedList<Device>::addElement(Device*)>
c0013f36:	83 c4 10             	add    esp,0x10
c0013f39:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013f3f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013f42:	74 12                	je     c0013f56 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013f44:	50                   	push   eax
c0013f45:	57                   	push   edi
c0013f46:	56                   	push   esi
c0013f47:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013f4a:	e8 c7 ff ff ff       	call   c0013f16 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013f4f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013f51:	83 c4 10             	add    esp,0x10
c0013f54:	eb e9                	jmp    c0013f3f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013f56:	5b                   	pop    ebx
c0013f57:	5e                   	pop    esi
c0013f58:	5f                   	pop    edi
c0013f59:	c3                   	ret    

c0013f5a <getDevicesOfType(DeviceType)>:
c0013f5a:	53                   	push   ebx
c0013f5b:	83 ec 14             	sub    esp,0x14
c0013f5e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013f62:	53                   	push   ebx
c0013f63:	e8 a4 49 01 00       	call   c002890c <LinkedList<Device>::LinkedList()>
c0013f68:	83 c4 0c             	add    esp,0xc
c0013f6b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f6f:	53                   	push   ebx
c0013f70:	ff 35 c8 dd 02 c0    	push   DWORD PTR ds:0xc002ddc8
c0013f76:	e8 9b ff ff ff       	call   c0013f16 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013f7b:	89 d8                	mov    eax,ebx
c0013f7d:	83 c4 18             	add    esp,0x18
c0013f80:	5b                   	pop    ebx
c0013f81:	c2 04 00             	ret    0x4

c0013f84 <HardDiskController::HardDiskController(char const*)>:
c0013f84:	83 ec 0c             	sub    esp,0xc
c0013f87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f8b:	83 ec 08             	sub    esp,0x8
c0013f8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f92:	50                   	push   eax
c0013f93:	e8 42 fe ff ff       	call   c0013dda <Device::Device(char const*)>
c0013f98:	83 c4 10             	add    esp,0x10
c0013f9b:	ba a8 ad 02 c0       	mov    edx,0xc002ada8
c0013fa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fa4:	89 10                	mov    DWORD PTR [eax],edx
c0013fa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013faa:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013fb4:	90                   	nop
c0013fb5:	83 c4 0c             	add    esp,0xc
c0013fb8:	c3                   	ret    
c0013fb9:	90                   	nop

c0013fba <HardDiskController::~HardDiskController()>:
c0013fba:	83 ec 0c             	sub    esp,0xc
c0013fbd:	ba a8 ad 02 c0       	mov    edx,0xc002ada8
c0013fc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fc6:	89 10                	mov    DWORD PTR [eax],edx
c0013fc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fcc:	83 ec 0c             	sub    esp,0xc
c0013fcf:	50                   	push   eax
c0013fd0:	e8 cf fa ff ff       	call   c0013aa4 <Device::~Device()>
c0013fd5:	83 c4 10             	add    esp,0x10
c0013fd8:	90                   	nop
c0013fd9:	83 c4 0c             	add    esp,0xc
c0013fdc:	c3                   	ret    
c0013fdd:	90                   	nop

c0013fde <HardDiskController::~HardDiskController()>:
c0013fde:	83 ec 0c             	sub    esp,0xc
c0013fe1:	83 ec 0c             	sub    esp,0xc
c0013fe4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013fe8:	e8 cd ff ff ff       	call   c0013fba <HardDiskController::~HardDiskController()>
c0013fed:	83 c4 10             	add    esp,0x10
c0013ff0:	83 ec 08             	sub    esp,0x8
c0013ff3:	68 58 01 00 00       	push   0x158
c0013ff8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ffc:	e8 c4 e6 ff ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0014001:	83 c4 10             	add    esp,0x10
c0014004:	83 c4 0c             	add    esp,0xc
c0014007:	c3                   	ret    

c0014008 <PhysicalDisk::eject()>:
c0014008:	83 c8 ff             	or     eax,0xffffffff
c001400b:	c3                   	ret    

c001400c <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001400c:	83 ec 0c             	sub    esp,0xc
c001400f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014013:	83 ec 08             	sub    esp,0x8
c0014016:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001401a:	50                   	push   eax
c001401b:	e8 ba fd ff ff       	call   c0013dda <Device::Device(char const*)>
c0014020:	83 c4 10             	add    esp,0x10
c0014023:	ba d4 ad 02 c0       	mov    edx,0xc002add4
c0014028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001402c:	89 10                	mov    DWORD PTR [eax],edx
c001402e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014032:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014039:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001403d:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014048:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014052:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014056:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001405a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014060:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014064:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001406e:	90                   	nop
c001406f:	83 c4 0c             	add    esp,0xc
c0014072:	c3                   	ret    
c0014073:	90                   	nop

c0014074 <PhysicalDisk::startCache()>:
c0014074:	56                   	push   esi
c0014075:	53                   	push   ebx
c0014076:	83 ec 10             	sub    esp,0x10
c0014079:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001407d:	6a 44                	push   0x44
c001407f:	e8 15 b5 ff ff       	call   c000f599 <malloc>
c0014084:	89 c6                	mov    esi,eax
c0014086:	58                   	pop    eax
c0014087:	5a                   	pop    edx
c0014088:	53                   	push   ebx
c0014089:	56                   	push   esi
c001408a:	e8 77 28 00 00       	call   c0016906 <VCache::VCache(PhysicalDisk*)>
c001408f:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0014095:	83 c4 14             	add    esp,0x14
c0014098:	5b                   	pop    ebx
c0014099:	5e                   	pop    esi
c001409a:	c3                   	ret    
c001409b:	90                   	nop

c001409c <PhysicalDisk::~PhysicalDisk()>:
c001409c:	83 ec 0c             	sub    esp,0xc
c001409f:	ba d4 ad 02 c0       	mov    edx,0xc002add4
c00140a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140a8:	89 10                	mov    DWORD PTR [eax],edx
c00140aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140ae:	83 ec 0c             	sub    esp,0xc
c00140b1:	50                   	push   eax
c00140b2:	e8 ed f9 ff ff       	call   c0013aa4 <Device::~Device()>
c00140b7:	83 c4 10             	add    esp,0x10
c00140ba:	90                   	nop
c00140bb:	83 c4 0c             	add    esp,0xc
c00140be:	c3                   	ret    
c00140bf:	90                   	nop

c00140c0 <PhysicalDisk::~PhysicalDisk()>:
c00140c0:	83 ec 0c             	sub    esp,0xc
c00140c3:	83 ec 0c             	sub    esp,0xc
c00140c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140ca:	e8 cd ff ff ff       	call   c001409c <PhysicalDisk::~PhysicalDisk()>
c00140cf:	83 c4 10             	add    esp,0x10
c00140d2:	83 ec 08             	sub    esp,0x8
c00140d5:	68 6c 01 00 00       	push   0x16c
c00140da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140de:	e8 e2 e5 ff ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c00140e3:	83 c4 10             	add    esp,0x10
c00140e6:	83 c4 0c             	add    esp,0xc
c00140e9:	c3                   	ret    

c00140ea <FPU::FPU(char const*)>:
c00140ea:	83 ec 0c             	sub    esp,0xc
c00140ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140f1:	83 ec 08             	sub    esp,0x8
c00140f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140f8:	50                   	push   eax
c00140f9:	e8 dc fc ff ff       	call   c0013dda <Device::Device(char const*)>
c00140fe:	83 c4 10             	add    esp,0x10
c0014101:	ba 18 ae 02 c0       	mov    edx,0xc002ae18
c0014106:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001410a:	89 10                	mov    DWORD PTR [eax],edx
c001410c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014110:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001411a:	90                   	nop
c001411b:	83 c4 0c             	add    esp,0xc
c001411e:	c3                   	ret    
c001411f:	90                   	nop

c0014120 <FPU::~FPU()>:
c0014120:	83 ec 0c             	sub    esp,0xc
c0014123:	ba 18 ae 02 c0       	mov    edx,0xc002ae18
c0014128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001412c:	89 10                	mov    DWORD PTR [eax],edx
c001412e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014132:	83 ec 0c             	sub    esp,0xc
c0014135:	50                   	push   eax
c0014136:	e8 69 f9 ff ff       	call   c0013aa4 <Device::~Device()>
c001413b:	83 c4 10             	add    esp,0x10
c001413e:	90                   	nop
c001413f:	83 c4 0c             	add    esp,0xc
c0014142:	c3                   	ret    
c0014143:	90                   	nop

c0014144 <FPU::~FPU()>:
c0014144:	83 ec 0c             	sub    esp,0xc
c0014147:	83 ec 0c             	sub    esp,0xc
c001414a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001414e:	e8 cd ff ff ff       	call   c0014120 <FPU::~FPU()>
c0014153:	83 c4 10             	add    esp,0x10
c0014156:	83 ec 08             	sub    esp,0x8
c0014159:	68 58 01 00 00       	push   0x158
c001415e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014162:	e8 5e e5 ff ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0014167:	83 c4 10             	add    esp,0x10
c001416a:	83 c4 0c             	add    esp,0xc
c001416d:	c3                   	ret    

c001416e <setupFPU()>:
c001416e:	53                   	push   ebx
c001416f:	83 ec 08             	sub    esp,0x8
c0014172:	8b 15 c8 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002ddc8
c0014178:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c001417f:	74 19                	je     c001419a <setupFPU()+0x2c>
c0014181:	83 ec 0c             	sub    esp,0xc
c0014184:	68 58 01 00 00       	push   0x158
c0014189:	e8 0b b4 ff ff       	call   c000f599 <malloc>
c001418e:	89 c3                	mov    ebx,eax
c0014190:	89 04 24             	mov    DWORD PTR [esp],eax
c0014193:	e8 e2 12 01 00       	call   c002547a <AVX::AVX()>
c0014198:	eb 5b                	jmp    c00141f5 <setupFPU()+0x87>
c001419a:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00141a0:	84 c0                	test   al,al
c00141a2:	79 19                	jns    c00141bd <setupFPU()+0x4f>
c00141a4:	83 ec 0c             	sub    esp,0xc
c00141a7:	68 58 01 00 00       	push   0x158
c00141ac:	e8 e8 b3 ff ff       	call   c000f599 <malloc>
c00141b1:	89 c3                	mov    ebx,eax
c00141b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00141b6:	e8 e5 13 01 00       	call   c00255a0 <SSE::SSE()>
c00141bb:	eb 38                	jmp    c00141f5 <setupFPU()+0x87>
c00141bd:	a8 20                	test   al,0x20
c00141bf:	74 19                	je     c00141da <setupFPU()+0x6c>
c00141c1:	83 ec 0c             	sub    esp,0xc
c00141c4:	68 58 01 00 00       	push   0x158
c00141c9:	e8 cb b3 ff ff       	call   c000f599 <malloc>
c00141ce:	89 c3                	mov    ebx,eax
c00141d0:	89 04 24             	mov    DWORD PTR [esp],eax
c00141d3:	e8 32 13 01 00       	call   c002550a <MMX::MMX()>
c00141d8:	eb 1b                	jmp    c00141f5 <setupFPU()+0x87>
c00141da:	a8 10                	test   al,0x10
c00141dc:	74 1c                	je     c00141fa <setupFPU()+0x8c>
c00141de:	83 ec 0c             	sub    esp,0xc
c00141e1:	68 58 01 00 00       	push   0x158
c00141e6:	e8 ae b3 ff ff       	call   c000f599 <malloc>
c00141eb:	89 c3                	mov    ebx,eax
c00141ed:	89 04 24             	mov    DWORD PTR [esp],eax
c00141f0:	e8 39 14 01 00       	call   c002562e <x87::x87()>
c00141f5:	83 c4 10             	add    esp,0x10
c00141f8:	eb 24                	jmp    c001421e <setupFPU()+0xb0>
c00141fa:	83 e0 ef             	and    eax,0xffffffef
c00141fd:	83 ec 0c             	sub    esp,0xc
c0014200:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014206:	68 04 ae 02 c0       	push   0xc002ae04
c001420b:	e8 8d e5 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0014210:	0f 20 c0             	mov    eax,cr0
c0014213:	83 c8 04             	or     eax,0x4
c0014216:	0f 22 c0             	mov    cr0,eax
c0014219:	31 db                	xor    ebx,ebx
c001421b:	83 c4 10             	add    esp,0x10
c001421e:	89 d8                	mov    eax,ebx
c0014220:	83 c4 08             	add    esp,0x8
c0014223:	5b                   	pop    ebx
c0014224:	c3                   	ret    
c0014225:	90                   	nop

c0014226 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014226:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001422a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001422e:	c1 e0 04             	shl    eax,0x4
c0014231:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014235:	8d 50 10             	lea    edx,[eax+0x10]
c0014238:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c001423e:	74 08                	je     c0014248 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014240:	83 c0 04             	add    eax,0x4
c0014243:	39 d0                	cmp    eax,edx
c0014245:	75 f1                	jne    c0014238 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014247:	c3                   	ret    
c0014248:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014252:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001425c:	eb e2                	jmp    c0014240 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c001425e <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c001425e:	57                   	push   edi
c001425f:	31 c0                	xor    eax,eax
c0014261:	56                   	push   esi
c0014262:	53                   	push   ebx
c0014263:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014267:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001426b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001426f:	89 da                	mov    edx,ebx
c0014271:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014275:	c1 e2 04             	shl    edx,0x4
c0014278:	01 ca                	add    edx,ecx
c001427a:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014282:	74 16                	je     c001429a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014284:	40                   	inc    eax
c0014285:	83 f8 04             	cmp    eax,0x4
c0014288:	75 f0                	jne    c001427a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c001428a:	c7 44 24 10 48 ae 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ae48
c0014292:	5b                   	pop    ebx
c0014293:	5e                   	pop    esi
c0014294:	5f                   	pop    edi
c0014295:	e9 ef 5c 00 00       	jmp    c0019f89 <Krnl::panic(char const*)>
c001429a:	8d 04 98             	lea    eax,[eax+ebx*4]
c001429d:	8d 04 81             	lea    eax,[ecx+eax*4]
c00142a0:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00142a6:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00142ac:	5b                   	pop    ebx
c00142ad:	5e                   	pop    esi
c00142ae:	5f                   	pop    edi
c00142af:	c3                   	ret    

c00142b0 <doubleFault(regs*, void*)>:
c00142b0:	55                   	push   ebp
c00142b1:	89 e5                	mov    ebp,esp
c00142b3:	83 ec 08             	sub    esp,0x8
c00142b6:	83 ec 0c             	sub    esp,0xc
c00142b9:	68 55 ae 02 c0       	push   0xc002ae55
c00142be:	e8 c6 5c 00 00       	call   c0019f89 <Krnl::panic(char const*)>
c00142c3:	83 c4 10             	add    esp,0x10
c00142c6:	90                   	nop
c00142c7:	c9                   	leave  
c00142c8:	c3                   	ret    
c00142c9:	90                   	nop

c00142ca <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00142ca:	56                   	push   esi
c00142cb:	53                   	push   ebx
c00142cc:	50                   	push   eax
c00142cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00142d1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00142d5:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00142da:	75 35                	jne    c0014311 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00142dc:	8d 43 20             	lea    eax,[ebx+0x20]
c00142df:	31 d2                	xor    edx,edx
c00142e1:	89 c1                	mov    ecx,eax
c00142e3:	c1 e1 04             	shl    ecx,0x4
c00142e6:	01 f1                	add    ecx,esi
c00142e8:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c00142f0:	74 3e                	je     c0014330 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c00142f2:	42                   	inc    edx
c00142f3:	83 fa 04             	cmp    edx,0x4
c00142f6:	75 f0                	jne    c00142e8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c00142f8:	83 ec 0c             	sub    esp,0xc
c00142fb:	68 6f ae 02 c0       	push   0xc002ae6f
c0014300:	e8 84 5c 00 00       	call   c0019f89 <Krnl::panic(char const*)>
c0014305:	83 c4 10             	add    esp,0x10
c0014308:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001430d:	5a                   	pop    edx
c001430e:	5b                   	pop    ebx
c001430f:	5e                   	pop    esi
c0014310:	c3                   	ret    
c0014311:	83 ec 0c             	sub    esp,0xc
c0014314:	56                   	push   esi
c0014315:	e8 bc fb ff ff       	call   c0013ed6 <Device::getName()>
c001431a:	83 c4 10             	add    esp,0x10
c001431d:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014320:	75 ba                	jne    c00142dc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014322:	83 fb 0f             	cmp    ebx,0xf
c0014325:	7f 29                	jg     c0014350 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014327:	0f b6 9b 20 d0 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd2fe0]
c001432e:	eb ac                	jmp    c00142dc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014330:	8d 04 82             	lea    eax,[edx+eax*4]
c0014333:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014337:	8d 04 86             	lea    eax,[esi+eax*4]
c001433a:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014340:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014344:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c001434a:	89 d8                	mov    eax,ebx
c001434c:	5a                   	pop    edx
c001434d:	5b                   	pop    ebx
c001434e:	5e                   	pop    esi
c001434f:	c3                   	ret    
c0014350:	83 ec 0c             	sub    esp,0xc
c0014353:	68 62 ae 02 c0       	push   0xc002ae62
c0014358:	e8 2c 5c 00 00       	call   c0019f89 <Krnl::panic(char const*)>
c001435d:	83 c4 10             	add    esp,0x10
c0014360:	e9 77 ff ff ff       	jmp    c00142dc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014365:	90                   	nop

c0014366 <InterruptController::clearAllHandlers(int, bool)>:
c0014366:	56                   	push   esi
c0014367:	53                   	push   ebx
c0014368:	52                   	push   edx
c0014369:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001436d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014371:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014376:	75 61                	jne    c00143d9 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014378:	8d 46 20             	lea    eax,[esi+0x20]
c001437b:	c1 e6 04             	shl    esi,0x4
c001437e:	c1 e0 04             	shl    eax,0x4
c0014381:	01 de                	add    esi,ebx
c0014383:	01 d8                	add    eax,ebx
c0014385:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c001438f:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014399:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00143a3:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00143ad:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c00143b7:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c00143c1:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c00143cb:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c00143d5:	58                   	pop    eax
c00143d6:	5b                   	pop    ebx
c00143d7:	5e                   	pop    esi
c00143d8:	c3                   	ret    
c00143d9:	83 ec 0c             	sub    esp,0xc
c00143dc:	53                   	push   ebx
c00143dd:	e8 f4 fa ff ff       	call   c0013ed6 <Device::getName()>
c00143e2:	83 c4 10             	add    esp,0x10
c00143e5:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00143e8:	75 8e                	jne    c0014378 <InterruptController::clearAllHandlers(int, bool)+0x12>
c00143ea:	83 fe 0f             	cmp    esi,0xf
c00143ed:	7f 09                	jg     c00143f8 <InterruptController::clearAllHandlers(int, bool)+0x92>
c00143ef:	0f b6 b6 20 d0 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd2fe0]
c00143f6:	eb 80                	jmp    c0014378 <InterruptController::clearAllHandlers(int, bool)+0x12>
c00143f8:	83 ec 0c             	sub    esp,0xc
c00143fb:	68 7c ae 02 c0       	push   0xc002ae7c
c0014400:	e8 84 5b 00 00       	call   c0019f89 <Krnl::panic(char const*)>
c0014405:	83 c4 10             	add    esp,0x10
c0014408:	e9 6b ff ff ff       	jmp    c0014378 <InterruptController::clearAllHandlers(int, bool)+0x12>
c001440d:	90                   	nop

c001440e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001440e:	56                   	push   esi
c001440f:	53                   	push   ebx
c0014410:	52                   	push   edx
c0014411:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014415:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014419:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001441e:	75 3a                	jne    c001445a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014420:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014424:	8d 50 20             	lea    edx,[eax+0x20]
c0014427:	c1 e2 04             	shl    edx,0x4
c001442a:	8d 04 16             	lea    eax,[esi+edx*1]
c001442d:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014431:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014437:	74 0b                	je     c0014444 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014439:	83 c0 04             	add    eax,0x4
c001443c:	39 d0                	cmp    eax,edx
c001443e:	75 f1                	jne    c0014431 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014440:	58                   	pop    eax
c0014441:	5b                   	pop    ebx
c0014442:	5e                   	pop    esi
c0014443:	c3                   	ret    
c0014444:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001444e:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014458:	eb df                	jmp    c0014439 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c001445a:	83 ec 0c             	sub    esp,0xc
c001445d:	56                   	push   esi
c001445e:	e8 73 fa ff ff       	call   c0013ed6 <Device::getName()>
c0014463:	83 c4 10             	add    esp,0x10
c0014466:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014469:	75 b5                	jne    c0014420 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c001446b:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014470:	7f 11                	jg     c0014483 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014472:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014476:	0f b6 80 20 d0 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd2fe0]
c001447d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014481:	eb 9d                	jmp    c0014420 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014483:	83 ec 0c             	sub    esp,0xc
c0014486:	68 89 ae 02 c0       	push   0xc002ae89
c001448b:	e8 f9 5a 00 00       	call   c0019f89 <Krnl::panic(char const*)>
c0014490:	83 c4 10             	add    esp,0x10
c0014493:	eb 8b                	jmp    c0014420 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014495 <nmiHandler(regs*, void*)>:
c0014495:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c001449a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001449e:	e9 5d a8 ff ff       	jmp    c000ed00 <Computer::handleNMI()>

c00144a3 <int_handler>:
c00144a3:	55                   	push   ebp
c00144a4:	57                   	push   edi
c00144a5:	56                   	push   esi
c00144a6:	53                   	push   ebx
c00144a7:	83 ec 0c             	sub    esp,0xc
c00144aa:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00144ae:	80 3d e4 e8 02 c0 00 	cmp    BYTE PTR ds:0xc002e8e4,0x0
c00144b5:	74 0b                	je     c00144c2 <int_handler+0x1f>
c00144b7:	fa                   	cli    
c00144b8:	f4                   	hlt    
c00144b9:	80 3d e4 e8 02 c0 00 	cmp    BYTE PTR ds:0xc002e8e4,0x0
c00144c0:	75 f5                	jne    c00144b7 <int_handler+0x14>
c00144c2:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c00144c7:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c00144ca:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00144d0:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c00144d6:	8d 43 e0             	lea    eax,[ebx-0x20]
c00144d9:	83 f8 17             	cmp    eax,0x17
c00144dc:	77 13                	ja     c00144f1 <int_handler+0x4e>
c00144de:	83 ec 08             	sub    esp,0x8
c00144e1:	8b 17                	mov    edx,DWORD PTR [edi]
c00144e3:	8d 43 e0             	lea    eax,[ebx-0x20]
c00144e6:	0f b6 c0             	movzx  eax,al
c00144e9:	50                   	push   eax
c00144ea:	57                   	push   edi
c00144eb:	ff 52 38             	call   DWORD PTR [edx+0x38]
c00144ee:	83 c4 10             	add    esp,0x10
c00144f1:	83 c3 15             	add    ebx,0x15
c00144f4:	c1 e3 04             	shl    ebx,0x4
c00144f7:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c00144fb:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014502:	31 db                	xor    ebx,ebx
c0014504:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014508:	85 c0                	test   eax,eax
c001450a:	74 13                	je     c001451f <int_handler+0x7c>
c001450c:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c001450f:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014513:	74 1c                	je     c0014531 <int_handler+0x8e>
c0014515:	83 ec 08             	sub    esp,0x8
c0014518:	52                   	push   edx
c0014519:	56                   	push   esi
c001451a:	ff d0                	call   eax
c001451c:	83 c4 10             	add    esp,0x10
c001451f:	43                   	inc    ebx
c0014520:	83 fb 04             	cmp    ebx,0x4
c0014523:	75 df                	jne    c0014504 <int_handler+0x61>
c0014525:	83 c4 0c             	add    esp,0xc
c0014528:	31 c0                	xor    eax,eax
c001452a:	5b                   	pop    ebx
c001452b:	31 d2                	xor    edx,edx
c001452d:	5e                   	pop    esi
c001452e:	5f                   	pop    edi
c001452f:	5d                   	pop    ebp
c0014530:	c3                   	ret    
c0014531:	83 ec 08             	sub    esp,0x8
c0014534:	52                   	push   edx
c0014535:	56                   	push   esi
c0014536:	ff d0                	call   eax
c0014538:	83 c4 10             	add    esp,0x10
c001453b:	83 c4 0c             	add    esp,0xc
c001453e:	5b                   	pop    ebx
c001453f:	5e                   	pop    esi
c0014540:	5f                   	pop    edi
c0014541:	5d                   	pop    ebp
c0014542:	c3                   	ret    
c0014543:	90                   	nop

c0014544 <InterruptController::InterruptController(char const*)>:
c0014544:	83 ec 1c             	sub    esp,0x1c
c0014547:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001454b:	83 ec 08             	sub    esp,0x8
c001454e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014552:	50                   	push   eax
c0014553:	e8 82 f8 ff ff       	call   c0013dda <Device::Device(char const*)>
c0014558:	83 c4 10             	add    esp,0x10
c001455b:	ba 50 b1 02 c0       	mov    edx,0xc002b150
c0014560:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014564:	89 10                	mov    DWORD PTR [eax],edx
c0014566:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001456a:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014574:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001457c:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014584:	7f 5e                	jg     c00145e4 <InterruptController::InterruptController(char const*)+0xa0>
c0014586:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001458e:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014593:	7f 49                	jg     c00145de <InterruptController::InterruptController(char const*)+0x9a>
c0014595:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014599:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001459d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00145a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00145a8:	01 ca                	add    edx,ecx
c00145aa:	83 c2 54             	add    edx,0x54
c00145ad:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00145b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145b9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00145bd:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00145c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00145c8:	01 ca                	add    edx,ecx
c00145ca:	81 c2 54 04 00 00    	add    edx,0x454
c00145d0:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00145d8:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00145dc:	eb b0                	jmp    c001458e <InterruptController::InterruptController(char const*)+0x4a>
c00145de:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00145e2:	eb 98                	jmp    c001457c <InterruptController::InterruptController(char const*)+0x38>
c00145e4:	90                   	nop
c00145e5:	83 c4 1c             	add    esp,0x1c
c00145e8:	c3                   	ret    
c00145e9:	90                   	nop

c00145ea <InterruptController::~InterruptController()>:
c00145ea:	83 ec 0c             	sub    esp,0xc
c00145ed:	ba 50 b1 02 c0       	mov    edx,0xc002b150
c00145f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145f6:	89 10                	mov    DWORD PTR [eax],edx
c00145f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145fc:	83 ec 0c             	sub    esp,0xc
c00145ff:	50                   	push   eax
c0014600:	e8 9f f4 ff ff       	call   c0013aa4 <Device::~Device()>
c0014605:	83 c4 10             	add    esp,0x10
c0014608:	90                   	nop
c0014609:	83 c4 0c             	add    esp,0xc
c001460c:	c3                   	ret    
c001460d:	90                   	nop

c001460e <InterruptController::~InterruptController()>:
c001460e:	83 ec 0c             	sub    esp,0xc
c0014611:	83 ec 0c             	sub    esp,0xc
c0014614:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014618:	e8 cd ff ff ff       	call   c00145ea <InterruptController::~InterruptController()>
c001461d:	83 c4 10             	add    esp,0x10
c0014620:	83 ec 08             	sub    esp,0x8
c0014623:	68 58 21 00 00       	push   0x2158
c0014628:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001462c:	e8 94 e0 ff ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0014631:	83 c4 10             	add    esp,0x10
c0014634:	83 c4 0c             	add    esp,0xc
c0014637:	c3                   	ret    

c0014638 <displayDebugInfo(regs*)>:
c0014638:	55                   	push   ebp
c0014639:	57                   	push   edi
c001463a:	56                   	push   esi
c001463b:	53                   	push   ebx
c001463c:	83 ec 24             	sub    esp,0x24
c001463f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014643:	0f 20 c2             	mov    edx,cr0
c0014646:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001464a:	0f 20 d7             	mov    edi,cr2
c001464d:	0f 20 de             	mov    esi,cr3
c0014650:	0f 20 e5             	mov    ebp,cr4
c0014653:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014656:	68 96 ae 02 c0       	push   0xc002ae96
c001465b:	e8 3d e1 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0014660:	59                   	pop    ecx
c0014661:	58                   	pop    eax
c0014662:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014665:	68 a1 ae 02 c0       	push   0xc002aea1
c001466a:	e8 2e e1 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001466f:	58                   	pop    eax
c0014670:	5a                   	pop    edx
c0014671:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014674:	68 ac ae 02 c0       	push   0xc002aeac
c0014679:	e8 1f e1 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001467e:	59                   	pop    ecx
c001467f:	58                   	pop    eax
c0014680:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014683:	68 b7 ae 02 c0       	push   0xc002aeb7
c0014688:	e8 10 e1 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001468d:	58                   	pop    eax
c001468e:	5a                   	pop    edx
c001468f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014692:	68 c2 ae 02 c0       	push   0xc002aec2
c0014697:	e8 01 e1 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001469c:	59                   	pop    ecx
c001469d:	58                   	pop    eax
c001469e:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00146a1:	68 cd ae 02 c0       	push   0xc002aecd
c00146a6:	e8 f2 e0 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00146ab:	58                   	pop    eax
c00146ac:	5a                   	pop    edx
c00146ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00146b0:	68 d8 ae 02 c0       	push   0xc002aed8
c00146b5:	e8 e3 e0 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00146ba:	59                   	pop    ecx
c00146bb:	58                   	pop    eax
c00146bc:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00146bf:	68 e3 ae 02 c0       	push   0xc002aee3
c00146c4:	e8 d4 e0 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00146c9:	58                   	pop    eax
c00146ca:	5a                   	pop    edx
c00146cb:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00146ce:	68 ee ae 02 c0       	push   0xc002aeee
c00146d3:	e8 c5 e0 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00146d8:	59                   	pop    ecx
c00146d9:	58                   	pop    eax
c00146da:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00146dd:	68 fd ae 02 c0       	push   0xc002aefd
c00146e2:	e8 b6 e0 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00146e7:	58                   	pop    eax
c00146e8:	5a                   	pop    edx
c00146e9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00146ec:	68 08 af 02 c0       	push   0xc002af08
c00146f1:	e8 a7 e0 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00146f6:	59                   	pop    ecx
c00146f7:	58                   	pop    eax
c00146f8:	57                   	push   edi
c00146f9:	68 13 af 02 c0       	push   0xc002af13
c00146fe:	e8 9a e0 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0014703:	58                   	pop    eax
c0014704:	5a                   	pop    edx
c0014705:	56                   	push   esi
c0014706:	68 1e af 02 c0       	push   0xc002af1e
c001470b:	e8 8d e0 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0014710:	59                   	pop    ecx
c0014711:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c0014716:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001471c:	e8 32 bc ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c0014721:	58                   	pop    eax
c0014722:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014725:	5a                   	pop    edx
c0014726:	c1 e0 05             	shl    eax,0x5
c0014729:	05 80 cd 02 c0       	add    eax,0xc002cd80
c001472e:	50                   	push   eax
c001472f:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c0014734:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001473a:	e8 21 c1 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001473f:	59                   	pop    ecx
c0014740:	58                   	pop    eax
c0014741:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c0014746:	68 29 af 02 c0       	push   0xc002af29
c001474b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014751:	e8 0a c1 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014756:	58                   	pop    eax
c0014757:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001475c:	5a                   	pop    edx
c001475d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014760:	83 c0 0c             	add    eax,0xc
c0014763:	50                   	push   eax
c0014764:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c0014769:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001476f:	e8 ec c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014774:	59                   	pop    ecx
c0014775:	58                   	pop    eax
c0014776:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c001477b:	68 32 af 02 c0       	push   0xc002af32
c0014780:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014786:	e8 d5 c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001478b:	58                   	pop    eax
c001478c:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c0014791:	5a                   	pop    edx
c0014792:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014795:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001479b:	e8 7a c0 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00147a0:	59                   	pop    ecx
c00147a1:	58                   	pop    eax
c00147a2:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c00147a7:	68 3a af 02 c0       	push   0xc002af3a
c00147ac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147b2:	e8 a9 c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00147b7:	58                   	pop    eax
c00147b8:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c00147bd:	5a                   	pop    edx
c00147be:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00147c1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147c7:	e8 4e c0 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00147cc:	59                   	pop    ecx
c00147cd:	58                   	pop    eax
c00147ce:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c00147d3:	68 42 af 02 c0       	push   0xc002af42
c00147d8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147de:	e8 7d c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00147e3:	58                   	pop    eax
c00147e4:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c00147e9:	5a                   	pop    edx
c00147ea:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00147ed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147f3:	e8 22 c0 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00147f8:	59                   	pop    ecx
c00147f9:	58                   	pop    eax
c00147fa:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c00147ff:	68 4a af 02 c0       	push   0xc002af4a
c0014804:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001480a:	e8 51 c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001480f:	58                   	pop    eax
c0014810:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c0014815:	5a                   	pop    edx
c0014816:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014819:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001481f:	e8 f6 bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014824:	59                   	pop    ecx
c0014825:	58                   	pop    eax
c0014826:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c001482b:	68 52 af 02 c0       	push   0xc002af52
c0014830:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014836:	e8 25 c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001483b:	58                   	pop    eax
c001483c:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c0014841:	5a                   	pop    edx
c0014842:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014845:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001484b:	e8 ca bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014850:	59                   	pop    ecx
c0014851:	58                   	pop    eax
c0014852:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c0014857:	68 5a af 02 c0       	push   0xc002af5a
c001485c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014862:	e8 f9 bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014867:	58                   	pop    eax
c0014868:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c001486d:	5a                   	pop    edx
c001486e:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014871:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014877:	e8 9e bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001487c:	59                   	pop    ecx
c001487d:	58                   	pop    eax
c001487e:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c0014883:	68 62 af 02 c0       	push   0xc002af62
c0014888:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001488e:	e8 cd bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014893:	58                   	pop    eax
c0014894:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c0014899:	5a                   	pop    edx
c001489a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001489e:	52                   	push   edx
c001489f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148a5:	e8 70 bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00148aa:	59                   	pop    ecx
c00148ab:	58                   	pop    eax
c00148ac:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c00148b1:	68 6b af 02 c0       	push   0xc002af6b
c00148b6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148bc:	e8 9f bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00148c1:	58                   	pop    eax
c00148c2:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c00148c7:	5a                   	pop    edx
c00148c8:	57                   	push   edi
c00148c9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148cf:	e8 46 bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00148d4:	59                   	pop    ecx
c00148d5:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c00148da:	5f                   	pop    edi
c00148db:	68 73 af 02 c0       	push   0xc002af73
c00148e0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148e6:	e8 75 bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00148eb:	58                   	pop    eax
c00148ec:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c00148f1:	5a                   	pop    edx
c00148f2:	56                   	push   esi
c00148f3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148f9:	e8 1c bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00148fe:	59                   	pop    ecx
c00148ff:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c0014904:	5e                   	pop    esi
c0014905:	68 7b af 02 c0       	push   0xc002af7b
c001490a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014910:	e8 4b bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014915:	5f                   	pop    edi
c0014916:	58                   	pop    eax
c0014917:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c001491c:	55                   	push   ebp
c001491d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014923:	e8 f2 be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014928:	58                   	pop    eax
c0014929:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c001492e:	5a                   	pop    edx
c001492f:	68 83 af 02 c0       	push   0xc002af83
c0014934:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001493a:	e8 21 bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001493f:	0f 21 c0             	mov    eax,db0
c0014942:	59                   	pop    ecx
c0014943:	5e                   	pop    esi
c0014944:	50                   	push   eax
c0014945:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c001494a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014950:	e8 c5 be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014955:	5f                   	pop    edi
c0014956:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c001495b:	5d                   	pop    ebp
c001495c:	68 8c af 02 c0       	push   0xc002af8c
c0014961:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014967:	e8 f4 be ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001496c:	0f 21 c8             	mov    eax,db1
c001496f:	5a                   	pop    edx
c0014970:	59                   	pop    ecx
c0014971:	50                   	push   eax
c0014972:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c0014977:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001497d:	e8 98 be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014982:	5e                   	pop    esi
c0014983:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c0014988:	5f                   	pop    edi
c0014989:	68 94 af 02 c0       	push   0xc002af94
c001498e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014994:	e8 c7 be ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014999:	0f 21 d0             	mov    eax,db2
c001499c:	5d                   	pop    ebp
c001499d:	5a                   	pop    edx
c001499e:	50                   	push   eax
c001499f:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c00149a4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149aa:	e8 6b be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00149af:	59                   	pop    ecx
c00149b0:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c00149b5:	5e                   	pop    esi
c00149b6:	68 9c af 02 c0       	push   0xc002af9c
c00149bb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149c1:	e8 9a be ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00149c6:	0f 21 d8             	mov    eax,db3
c00149c9:	5f                   	pop    edi
c00149ca:	5d                   	pop    ebp
c00149cb:	50                   	push   eax
c00149cc:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c00149d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149d7:	e8 3e be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00149dc:	58                   	pop    eax
c00149dd:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c00149e2:	5a                   	pop    edx
c00149e3:	68 a4 af 02 c0       	push   0xc002afa4
c00149e8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149ee:	e8 6d be ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00149f3:	0f 21 f0             	mov    eax,db6
c00149f6:	59                   	pop    ecx
c00149f7:	5e                   	pop    esi
c00149f8:	50                   	push   eax
c00149f9:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c00149fe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a04:	e8 11 be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014a09:	5f                   	pop    edi
c0014a0a:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c0014a0f:	5d                   	pop    ebp
c0014a10:	68 ac af 02 c0       	push   0xc002afac
c0014a15:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a1b:	e8 40 be ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014a20:	0f 21 f8             	mov    eax,db7
c0014a23:	5a                   	pop    edx
c0014a24:	59                   	pop    ecx
c0014a25:	50                   	push   eax
c0014a26:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c0014a2b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a31:	e8 e4 bd ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014a36:	5e                   	pop    esi
c0014a37:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014a3a:	e8 c6 86 00 00       	call   c001d105 <Thr::getDriverNameFromAddress(unsigned long)>
c0014a3f:	83 c4 10             	add    esp,0x10
c0014a42:	85 c0                	test   eax,eax
c0014a44:	74 7d                	je     c0014ac3 <displayDebugInfo(regs*)+0x48b>
c0014a46:	89 c6                	mov    esi,eax
c0014a48:	50                   	push   eax
c0014a49:	50                   	push   eax
c0014a4a:	56                   	push   esi
c0014a4b:	68 b4 af 02 c0       	push   0xc002afb4
c0014a50:	e8 48 dd ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0014a55:	5a                   	pop    edx
c0014a56:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c0014a5b:	59                   	pop    ecx
c0014a5c:	68 c2 af 02 c0       	push   0xc002afc2
c0014a61:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a67:	e8 f4 bd ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014a6c:	5f                   	pop    edi
c0014a6d:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c0014a72:	5d                   	pop    ebp
c0014a73:	56                   	push   esi
c0014a74:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a7a:	e8 e1 bd ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014a7f:	58                   	pop    eax
c0014a80:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c0014a85:	5a                   	pop    edx
c0014a86:	68 ce af 02 c0       	push   0xc002afce
c0014a8b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a91:	e8 ca bd ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014a96:	59                   	pop    ecx
c0014a97:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c0014a9c:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0014aa2:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014aa5:	e8 92 86 00 00       	call   c001d13c <Thr::getDriverOffsetFromAddress(unsigned long)>
c0014aaa:	5b                   	pop    ebx
c0014aab:	5d                   	pop    ebp
c0014aac:	50                   	push   eax
c0014aad:	57                   	push   edi
c0014aae:	e8 67 bd ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014ab3:	58                   	pop    eax
c0014ab4:	5a                   	pop    edx
c0014ab5:	56                   	push   esi
c0014ab6:	68 da af 02 c0       	push   0xc002afda
c0014abb:	e8 dd dc ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0014ac0:	83 c4 10             	add    esp,0x10
c0014ac3:	fa                   	cli    
c0014ac4:	f4                   	hlt    
c0014ac5:	eb fe                	jmp    c0014ac5 <displayDebugInfo(regs*)+0x48d>

c0014ac7 <x87EmulHandler(regs*, void*)>:
c0014ac7:	83 ec 0c             	sub    esp,0xc
c0014aca:	0f 20 c2             	mov    edx,cr0
c0014acd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ad2:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0014ad6:	75 4b                	jne    c0014b23 <x87EmulHandler(regs*, void*)+0x5c>
c0014ad8:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c0014add:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0014ae3:	85 c0                	test   eax,eax
c0014ae5:	74 05                	je     c0014aec <x87EmulHandler(regs*, void*)+0x25>
c0014ae7:	83 e2 08             	and    edx,0x8
c0014aea:	75 17                	jne    c0014b03 <x87EmulHandler(regs*, void*)+0x3c>
c0014aec:	83 ec 0c             	sub    esp,0xc
c0014aef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014af3:	e8 f3 a9 00 00       	call   c001f4eb <Vm::x87Handler(regs*)>
c0014af8:	83 c4 10             	add    esp,0x10
c0014afb:	84 c0                	test   al,al
c0014afd:	74 24                	je     c0014b23 <x87EmulHandler(regs*, void*)+0x5c>
c0014aff:	83 c4 0c             	add    esp,0xc
c0014b02:	c3                   	ret    
c0014b03:	83 ec 0c             	sub    esp,0xc
c0014b06:	68 00 b0 02 c0       	push   0xc002b000
c0014b0b:	e8 8d dc ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0014b10:	0f 06                	clts   
c0014b12:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b17:	83 c4 10             	add    esp,0x10
c0014b1a:	a3 48 df 02 c0       	mov    ds:0xc002df48,eax
c0014b1f:	83 c4 0c             	add    esp,0xc
c0014b22:	c3                   	ret    
c0014b23:	83 ec 0c             	sub    esp,0xc
c0014b26:	68 ea af 02 c0       	push   0xc002afea
c0014b2b:	e8 6d dc ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0014b30:	5a                   	pop    edx
c0014b31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b35:	e8 fe fa ff ff       	call   c0014638 <displayDebugInfo(regs*)>

c0014b3a <gpFault(regs*, void*)>:
c0014b3a:	53                   	push   ebx
c0014b3b:	83 ec 14             	sub    esp,0x14
c0014b3e:	c7 05 44 df 02 c0 c4 e9 01 c0 	mov    DWORD PTR ds:0xc002df44,0xc001e9c4
c0014b48:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014b4c:	53                   	push   ebx
c0014b4d:	e8 72 9e 00 00       	call   c001e9c4 <Vm::faultHandler(regs*)>
c0014b52:	83 c4 10             	add    esp,0x10
c0014b55:	84 c0                	test   al,al
c0014b57:	74 05                	je     c0014b5e <gpFault(regs*, void*)+0x24>
c0014b59:	83 c4 08             	add    esp,0x8
c0014b5c:	5b                   	pop    ebx
c0014b5d:	c3                   	ret    
c0014b5e:	83 ec 0c             	sub    esp,0xc
c0014b61:	68 0d b0 02 c0       	push   0xc002b00d
c0014b66:	e8 32 dc ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0014b6b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b6e:	e8 c5 fa ff ff       	call   c0014638 <displayDebugInfo(regs*)>

c0014b73 <pgFault(regs*, void*)>:
c0014b73:	53                   	push   ebx
c0014b74:	83 ec 10             	sub    esp,0x10
c0014b77:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014b7b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014b7e:	68 28 b0 02 c0       	push   0xc002b028
c0014b83:	e8 15 dc ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0014b88:	0f 20 d0             	mov    eax,cr2
c0014b8b:	5a                   	pop    edx
c0014b8c:	59                   	pop    ecx
c0014b8d:	50                   	push   eax
c0014b8e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b93:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014b96:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0014b9c:	e8 03 d7 ff ff       	call   c00122a4 <VAS::tryLoadBackOffDisk(unsigned long)>
c0014ba1:	83 c4 10             	add    esp,0x10
c0014ba4:	84 c0                	test   al,al
c0014ba6:	74 05                	je     c0014bad <pgFault(regs*, void*)+0x3a>
c0014ba8:	83 c4 08             	add    esp,0x8
c0014bab:	5b                   	pop    ebx
c0014bac:	c3                   	ret    
c0014bad:	83 ec 0c             	sub    esp,0xc
c0014bb0:	68 3d b0 02 c0       	push   0xc002b03d
c0014bb5:	e8 e3 db ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0014bba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014bbd:	e8 76 fa ff ff       	call   c0014638 <displayDebugInfo(regs*)>

c0014bc2 <otherISRHandler(regs*, void*)>:
c0014bc2:	53                   	push   ebx
c0014bc3:	83 ec 0c             	sub    esp,0xc
c0014bc6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014bca:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014bcd:	50                   	push   eax
c0014bce:	50                   	push   eax
c0014bcf:	68 4a b0 02 c0       	push   0xc002b04a
c0014bd4:	e8 c4 db ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0014bd9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014bdc:	e8 57 fa ff ff       	call   c0014638 <displayDebugInfo(regs*)>

c0014be1 <opcodeFault(regs*, void*)>:
c0014be1:	55                   	push   ebp
c0014be2:	89 e5                	mov    ebp,esp
c0014be4:	56                   	push   esi
c0014be5:	53                   	push   ebx
c0014be6:	83 ec 40             	sub    esp,0x40
c0014be9:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c0014bee:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014bf4:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014bfa:	84 c0                	test   al,al
c0014bfc:	74 24                	je     c0014c22 <opcodeFault(regs*, void*)+0x41>
c0014bfe:	83 ec 0c             	sub    esp,0xc
c0014c01:	68 68 b0 02 c0       	push   0xc002b068
c0014c06:	e8 92 db ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0014c0b:	83 c4 10             	add    esp,0x10
c0014c0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c11:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c14:	8d 50 19             	lea    edx,[eax+0x19]
c0014c17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c1a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c1d:	e9 d5 05 00 00       	jmp    c00151f7 <opcodeFault(regs*, void*)+0x616>
c0014c22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c25:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c28:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014c2b:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014c2f:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014c33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c36:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c39:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014c3c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c3f:	8a 00                	mov    al,BYTE PTR [eax]
c0014c41:	3c f0                	cmp    al,0xf0
c0014c43:	75 17                	jne    c0014c5c <opcodeFault(regs*, void*)+0x7b>
c0014c45:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c4b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c4e:	8d 50 01             	lea    edx,[eax+0x1]
c0014c51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c54:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c57:	e9 da 00 00 00       	jmp    c0014d36 <opcodeFault(regs*, void*)+0x155>
c0014c5c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c5f:	8a 00                	mov    al,BYTE PTR [eax]
c0014c61:	3c f2                	cmp    al,0xf2
c0014c63:	74 09                	je     c0014c6e <opcodeFault(regs*, void*)+0x8d>
c0014c65:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c68:	8a 00                	mov    al,BYTE PTR [eax]
c0014c6a:	3c f3                	cmp    al,0xf3
c0014c6c:	75 1b                	jne    c0014c89 <opcodeFault(regs*, void*)+0xa8>
c0014c6e:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014c72:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c78:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c7b:	8d 50 01             	lea    edx,[eax+0x1]
c0014c7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c81:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c84:	e9 ad 00 00 00       	jmp    c0014d36 <opcodeFault(regs*, void*)+0x155>
c0014c89:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c8c:	8a 00                	mov    al,BYTE PTR [eax]
c0014c8e:	3c 66                	cmp    al,0x66
c0014c90:	75 1f                	jne    c0014cb1 <opcodeFault(regs*, void*)+0xd0>
c0014c92:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014c96:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014c9a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ca0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ca3:	8d 50 01             	lea    edx,[eax+0x1]
c0014ca6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ca9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cac:	e9 85 00 00 00       	jmp    c0014d36 <opcodeFault(regs*, void*)+0x155>
c0014cb1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cb4:	8a 00                	mov    al,BYTE PTR [eax]
c0014cb6:	3c 67                	cmp    al,0x67
c0014cb8:	75 18                	jne    c0014cd2 <opcodeFault(regs*, void*)+0xf1>
c0014cba:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014cbe:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014cc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cc4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cc7:	8d 50 01             	lea    edx,[eax+0x1]
c0014cca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ccd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cd0:	eb 64                	jmp    c0014d36 <opcodeFault(regs*, void*)+0x155>
c0014cd2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cd5:	8a 00                	mov    al,BYTE PTR [eax]
c0014cd7:	3c 2e                	cmp    al,0x2e
c0014cd9:	74 09                	je     c0014ce4 <opcodeFault(regs*, void*)+0x103>
c0014cdb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cde:	8a 00                	mov    al,BYTE PTR [eax]
c0014ce0:	3c 3e                	cmp    al,0x3e
c0014ce2:	75 18                	jne    c0014cfc <opcodeFault(regs*, void*)+0x11b>
c0014ce4:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014ce8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ceb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cee:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cf1:	8d 50 01             	lea    edx,[eax+0x1]
c0014cf4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cf7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cfa:	eb 3a                	jmp    c0014d36 <opcodeFault(regs*, void*)+0x155>
c0014cfc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cff:	8a 00                	mov    al,BYTE PTR [eax]
c0014d01:	3c 36                	cmp    al,0x36
c0014d03:	74 1b                	je     c0014d20 <opcodeFault(regs*, void*)+0x13f>
c0014d05:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d08:	8a 00                	mov    al,BYTE PTR [eax]
c0014d0a:	3c 26                	cmp    al,0x26
c0014d0c:	74 12                	je     c0014d20 <opcodeFault(regs*, void*)+0x13f>
c0014d0e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d11:	8a 00                	mov    al,BYTE PTR [eax]
c0014d13:	3c 64                	cmp    al,0x64
c0014d15:	74 09                	je     c0014d20 <opcodeFault(regs*, void*)+0x13f>
c0014d17:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d1a:	8a 00                	mov    al,BYTE PTR [eax]
c0014d1c:	3c 65                	cmp    al,0x65
c0014d1e:	75 16                	jne    c0014d36 <opcodeFault(regs*, void*)+0x155>
c0014d20:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d24:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d2a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d2d:	8d 50 01             	lea    edx,[eax+0x1]
c0014d30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d33:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d36:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d39:	8a 00                	mov    al,BYTE PTR [eax]
c0014d3b:	3c 0f                	cmp    al,0xf
c0014d3d:	0f 85 ad 00 00 00    	jne    c0014df0 <opcodeFault(regs*, void*)+0x20f>
c0014d43:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d46:	40                   	inc    eax
c0014d47:	8a 00                	mov    al,BYTE PTR [eax]
c0014d49:	3c c2                	cmp    al,0xc2
c0014d4b:	74 0e                	je     c0014d5b <opcodeFault(regs*, void*)+0x17a>
c0014d4d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d50:	40                   	inc    eax
c0014d51:	8a 00                	mov    al,BYTE PTR [eax]
c0014d53:	3c c3                	cmp    al,0xc3
c0014d55:	0f 85 95 00 00 00    	jne    c0014df0 <opcodeFault(regs*, void*)+0x20f>
c0014d5b:	83 ec 0c             	sub    esp,0xc
c0014d5e:	68 8b b0 02 c0       	push   0xc002b08b
c0014d63:	e8 35 da ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0014d68:	83 c4 10             	add    esp,0x10
c0014d6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d6e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d71:	8d 50 01             	lea    edx,[eax+0x1]
c0014d74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d77:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d7a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d7d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d80:	8a 00                	mov    al,BYTE PTR [eax]
c0014d82:	8d 50 fe             	lea    edx,[eax-0x2]
c0014d85:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d88:	88 10                	mov    BYTE PTR [eax],dl
c0014d8a:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014d8d:	50                   	push   eax
c0014d8e:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014d91:	50                   	push   eax
c0014d92:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014d95:	50                   	push   eax
c0014d96:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014d99:	e8 04 49 00 00       	call   c00196a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014d9e:	83 c4 10             	add    esp,0x10
c0014da1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014da4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014da7:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014daa:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014dad:	01 d0                	add    eax,edx
c0014daf:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014db2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014db5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014db8:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014dbb:	48                   	dec    eax
c0014dbc:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014dbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dc2:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014dc5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014dc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dcb:	83 ec 04             	sub    esp,0x4
c0014dce:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014dd1:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014dd4:	50                   	push   eax
c0014dd5:	e8 da b3 fe ff       	call   c00001b4 <voodooXADD>
c0014dda:	83 c4 10             	add    esp,0x10
c0014ddd:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014de0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014de3:	01 c2                	add    edx,eax
c0014de5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014de8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014deb:	e9 07 04 00 00       	jmp    c00151f7 <opcodeFault(regs*, void*)+0x616>
c0014df0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014df3:	8a 00                	mov    al,BYTE PTR [eax]
c0014df5:	3c 0f                	cmp    al,0xf
c0014df7:	0f 85 8b 01 00 00    	jne    c0014f88 <opcodeFault(regs*, void*)+0x3a7>
c0014dfd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e00:	40                   	inc    eax
c0014e01:	8a 00                	mov    al,BYTE PTR [eax]
c0014e03:	3c c7                	cmp    al,0xc7
c0014e05:	0f 86 7d 01 00 00    	jbe    c0014f88 <opcodeFault(regs*, void*)+0x3a7>
c0014e0b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e0e:	40                   	inc    eax
c0014e0f:	8a 00                	mov    al,BYTE PTR [eax]
c0014e11:	3c cf                	cmp    al,0xcf
c0014e13:	0f 87 6f 01 00 00    	ja     c0014f88 <opcodeFault(regs*, void*)+0x3a7>
c0014e19:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e1c:	40                   	inc    eax
c0014e1d:	8a 00                	mov    al,BYTE PTR [eax]
c0014e1f:	83 c0 38             	add    eax,0x38
c0014e22:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014e25:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014e29:	75 0b                	jne    c0014e36 <opcodeFault(regs*, void*)+0x255>
c0014e2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e2e:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014e31:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e34:	eb 75                	jmp    c0014eab <opcodeFault(regs*, void*)+0x2ca>
c0014e36:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014e3a:	75 0b                	jne    c0014e47 <opcodeFault(regs*, void*)+0x266>
c0014e3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e3f:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014e42:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e45:	eb 64                	jmp    c0014eab <opcodeFault(regs*, void*)+0x2ca>
c0014e47:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014e4b:	75 0b                	jne    c0014e58 <opcodeFault(regs*, void*)+0x277>
c0014e4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e50:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014e53:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e56:	eb 53                	jmp    c0014eab <opcodeFault(regs*, void*)+0x2ca>
c0014e58:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014e5c:	75 0b                	jne    c0014e69 <opcodeFault(regs*, void*)+0x288>
c0014e5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e61:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014e64:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e67:	eb 42                	jmp    c0014eab <opcodeFault(regs*, void*)+0x2ca>
c0014e69:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014e6d:	75 0b                	jne    c0014e7a <opcodeFault(regs*, void*)+0x299>
c0014e6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e72:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014e75:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e78:	eb 31                	jmp    c0014eab <opcodeFault(regs*, void*)+0x2ca>
c0014e7a:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014e7e:	75 0b                	jne    c0014e8b <opcodeFault(regs*, void*)+0x2aa>
c0014e80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e83:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014e86:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e89:	eb 20                	jmp    c0014eab <opcodeFault(regs*, void*)+0x2ca>
c0014e8b:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014e8f:	75 0b                	jne    c0014e9c <opcodeFault(regs*, void*)+0x2bb>
c0014e91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e94:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014e97:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e9a:	eb 0f                	jmp    c0014eab <opcodeFault(regs*, void*)+0x2ca>
c0014e9c:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014ea0:	75 09                	jne    c0014eab <opcodeFault(regs*, void*)+0x2ca>
c0014ea2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ea5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014ea8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014eab:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014eaf:	74 10                	je     c0014ec1 <opcodeFault(regs*, void*)+0x2e0>
c0014eb1:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014eb8:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014ebf:	eb 2d                	jmp    c0014eee <opcodeFault(regs*, void*)+0x30d>
c0014ec1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014ec4:	c1 e0 18             	shl    eax,0x18
c0014ec7:	89 c2                	mov    edx,eax
c0014ec9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014ecc:	c1 e0 08             	shl    eax,0x8
c0014ecf:	25 00 00 ff 00       	and    eax,0xff0000
c0014ed4:	09 c2                	or     edx,eax
c0014ed6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014ed9:	c1 e8 08             	shr    eax,0x8
c0014edc:	25 00 ff 00 00       	and    eax,0xff00
c0014ee1:	09 c2                	or     edx,eax
c0014ee3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014ee6:	c1 e8 18             	shr    eax,0x18
c0014ee9:	09 d0                	or     eax,edx
c0014eeb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014eee:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014ef2:	75 0b                	jne    c0014eff <opcodeFault(regs*, void*)+0x31e>
c0014ef4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ef7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014efa:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014efd:	eb 75                	jmp    c0014f74 <opcodeFault(regs*, void*)+0x393>
c0014eff:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014f03:	75 0b                	jne    c0014f10 <opcodeFault(regs*, void*)+0x32f>
c0014f05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f08:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f0b:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014f0e:	eb 64                	jmp    c0014f74 <opcodeFault(regs*, void*)+0x393>
c0014f10:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014f14:	75 0b                	jne    c0014f21 <opcodeFault(regs*, void*)+0x340>
c0014f16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f19:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f1c:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014f1f:	eb 53                	jmp    c0014f74 <opcodeFault(regs*, void*)+0x393>
c0014f21:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014f25:	75 0b                	jne    c0014f32 <opcodeFault(regs*, void*)+0x351>
c0014f27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f2a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f2d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014f30:	eb 42                	jmp    c0014f74 <opcodeFault(regs*, void*)+0x393>
c0014f32:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014f36:	75 0b                	jne    c0014f43 <opcodeFault(regs*, void*)+0x362>
c0014f38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f3b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f3e:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014f41:	eb 31                	jmp    c0014f74 <opcodeFault(regs*, void*)+0x393>
c0014f43:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014f47:	75 0b                	jne    c0014f54 <opcodeFault(regs*, void*)+0x373>
c0014f49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f4c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f4f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014f52:	eb 20                	jmp    c0014f74 <opcodeFault(regs*, void*)+0x393>
c0014f54:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014f58:	75 0b                	jne    c0014f65 <opcodeFault(regs*, void*)+0x384>
c0014f5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f5d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f60:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014f63:	eb 0f                	jmp    c0014f74 <opcodeFault(regs*, void*)+0x393>
c0014f65:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014f69:	75 09                	jne    c0014f74 <opcodeFault(regs*, void*)+0x393>
c0014f6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f6e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f71:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014f74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f77:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f7a:	8d 50 02             	lea    edx,[eax+0x2]
c0014f7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f80:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f83:	e9 6f 02 00 00       	jmp    c00151f7 <opcodeFault(regs*, void*)+0x616>
c0014f88:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f8b:	8a 00                	mov    al,BYTE PTR [eax]
c0014f8d:	3c 0f                	cmp    al,0xf
c0014f8f:	0f 85 8d 01 00 00    	jne    c0015122 <opcodeFault(regs*, void*)+0x541>
c0014f95:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f98:	40                   	inc    eax
c0014f99:	8a 00                	mov    al,BYTE PTR [eax]
c0014f9b:	3c c7                	cmp    al,0xc7
c0014f9d:	0f 85 7f 01 00 00    	jne    c0015122 <opcodeFault(regs*, void*)+0x541>
c0014fa3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014fa6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fa9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fac:	8d 50 01             	lea    edx,[eax+0x1]
c0014faf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fb2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014fb5:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014fb8:	50                   	push   eax
c0014fb9:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014fbc:	50                   	push   eax
c0014fbd:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014fc0:	50                   	push   eax
c0014fc1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014fc4:	e8 d9 46 00 00       	call   c00196a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014fc9:	83 c4 10             	add    esp,0x10
c0014fcc:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014fcf:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014fd2:	83 f0 01             	xor    eax,0x1
c0014fd5:	84 c0                	test   al,al
c0014fd7:	0f 84 45 01 00 00    	je     c0015122 <opcodeFault(regs*, void*)+0x541>
c0014fdd:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014fe0:	3c 01                	cmp    al,0x1
c0014fe2:	0f 85 3a 01 00 00    	jne    c0015122 <opcodeFault(regs*, void*)+0x541>
c0014fe8:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014feb:	83 f0 01             	xor    eax,0x1
c0014fee:	84 c0                	test   al,al
c0014ff0:	0f 84 2c 01 00 00    	je     c0015122 <opcodeFault(regs*, void*)+0x541>
c0014ff6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ff9:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014ffc:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014fff:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0015006:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015009:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001500c:	89 c2                	mov    edx,eax
c001500e:	b8 00 00 00 00       	mov    eax,0x0
c0015013:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015016:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001501c:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001501f:	ba 00 00 00 00       	mov    edx,0x0
c0015024:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0015027:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c001502a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001502d:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015030:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015033:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c001503a:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001503d:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015040:	89 c2                	mov    edx,eax
c0015042:	b8 00 00 00 00       	mov    eax,0x0
c0015047:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001504a:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c001504d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015050:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015053:	ba 00 00 00 00       	mov    edx,0x0
c0015058:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c001505b:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c001505e:	fa                   	cli    
c001505f:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0015064:	40                   	inc    eax
c0015065:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c001506a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001506d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015070:	8b 00                	mov    eax,DWORD PTR [eax]
c0015072:	89 c1                	mov    ecx,eax
c0015074:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0015077:	89 cb                	mov    ebx,ecx
c0015079:	89 d0                	mov    eax,edx
c001507b:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c001507e:	89 c6                	mov    esi,eax
c0015080:	89 f0                	mov    eax,esi
c0015082:	09 d8                	or     eax,ebx
c0015084:	85 c0                	test   eax,eax
c0015086:	75 21                	jne    c00150a9 <opcodeFault(regs*, void*)+0x4c8>
c0015088:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c001508b:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001508e:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015091:	89 01                	mov    DWORD PTR [ecx],eax
c0015093:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015096:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015099:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001509c:	83 c8 40             	or     eax,0x40
c001509f:	89 c2                	mov    edx,eax
c00150a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150a4:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00150a7:	eb 3e                	jmp    c00150e7 <opcodeFault(regs*, void*)+0x506>
c00150a9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00150ac:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00150af:	8b 00                	mov    eax,DWORD PTR [eax]
c00150b1:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00150b4:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00150b7:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00150ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150bd:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00150c0:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00150c3:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00150c6:	89 d0                	mov    eax,edx
c00150c8:	31 d2                	xor    edx,edx
c00150ca:	89 c3                	mov    ebx,eax
c00150cc:	89 d6                	mov    esi,edx
c00150ce:	89 da                	mov    edx,ebx
c00150d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150d3:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00150d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150d9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00150dc:	83 e0 bf             	and    eax,0xffffffbf
c00150df:	89 c2                	mov    edx,eax
c00150e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150e4:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00150e7:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c00150ec:	48                   	dec    eax
c00150ed:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c00150f2:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c00150f7:	85 c0                	test   eax,eax
c00150f9:	75 01                	jne    c00150fc <opcodeFault(regs*, void*)+0x51b>
c00150fb:	fb                   	sti    
c00150fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150ff:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015102:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015105:	01 c2                	add    edx,eax
c0015107:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001510a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001510d:	83 ec 0c             	sub    esp,0xc
c0015110:	68 9a b0 02 c0       	push   0xc002b09a
c0015115:	e8 83 d6 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001511a:	83 c4 10             	add    esp,0x10
c001511d:	e9 d5 00 00 00       	jmp    c00151f7 <opcodeFault(regs*, void*)+0x616>
c0015122:	83 ec 0c             	sub    esp,0xc
c0015125:	68 ad b0 02 c0       	push   0xc002b0ad
c001512a:	e8 6e d6 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001512f:	83 c4 10             	add    esp,0x10
c0015132:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015135:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015138:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001513b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001513e:	c1 e0 04             	shl    eax,0x4
c0015141:	01 d0                	add    eax,edx
c0015143:	83 c0 03             	add    eax,0x3
c0015146:	8a 00                	mov    al,BYTE PTR [eax]
c0015148:	0f b6 d8             	movzx  ebx,al
c001514b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001514e:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015151:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015154:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015157:	c1 e0 04             	shl    eax,0x4
c001515a:	01 d0                	add    eax,edx
c001515c:	83 c0 02             	add    eax,0x2
c001515f:	8a 00                	mov    al,BYTE PTR [eax]
c0015161:	0f b6 c8             	movzx  ecx,al
c0015164:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015167:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001516a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001516d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015170:	c1 e0 04             	shl    eax,0x4
c0015173:	01 d0                	add    eax,edx
c0015175:	40                   	inc    eax
c0015176:	8a 00                	mov    al,BYTE PTR [eax]
c0015178:	0f b6 d0             	movzx  edx,al
c001517b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001517e:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015181:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015184:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015187:	c1 e0 04             	shl    eax,0x4
c001518a:	01 f0                	add    eax,esi
c001518c:	8a 00                	mov    al,BYTE PTR [eax]
c001518e:	0f b6 c0             	movzx  eax,al
c0015191:	83 ec 0c             	sub    esp,0xc
c0015194:	53                   	push   ebx
c0015195:	51                   	push   ecx
c0015196:	52                   	push   edx
c0015197:	50                   	push   eax
c0015198:	68 c0 b0 02 c0       	push   0xc002b0c0
c001519d:	e8 fb d5 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00151a2:	83 c4 20             	add    esp,0x20
c00151a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151a8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151ab:	83 c0 03             	add    eax,0x3
c00151ae:	8a 00                	mov    al,BYTE PTR [eax]
c00151b0:	0f b6 d8             	movzx  ebx,al
c00151b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151b6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151b9:	83 c0 02             	add    eax,0x2
c00151bc:	8a 00                	mov    al,BYTE PTR [eax]
c00151be:	0f b6 c8             	movzx  ecx,al
c00151c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151c4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151c7:	40                   	inc    eax
c00151c8:	8a 00                	mov    al,BYTE PTR [eax]
c00151ca:	0f b6 d0             	movzx  edx,al
c00151cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151d0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151d3:	8a 00                	mov    al,BYTE PTR [eax]
c00151d5:	0f b6 c0             	movzx  eax,al
c00151d8:	83 ec 0c             	sub    esp,0xc
c00151db:	53                   	push   ebx
c00151dc:	51                   	push   ecx
c00151dd:	52                   	push   edx
c00151de:	50                   	push   eax
c00151df:	68 e8 b0 02 c0       	push   0xc002b0e8
c00151e4:	e8 b4 d5 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00151e9:	83 c4 20             	add    esp,0x20
c00151ec:	83 ec 0c             	sub    esp,0xc
c00151ef:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00151f2:	e8 41 f4 ff ff       	call   c0014638 <displayDebugInfo(regs*)>
c00151f7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00151fa:	5b                   	pop    ebx
c00151fb:	5e                   	pop    esi
c00151fc:	5d                   	pop    ebp
c00151fd:	c3                   	ret    

c00151fe <displayProgramFault(char const*)>:
c00151fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015203:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015206:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001520c:	85 c0                	test   eax,eax
c001520e:	74 15                	je     c0015225 <displayProgramFault(char const*)+0x27>
c0015210:	83 ec 0c             	sub    esp,0xc
c0015213:	6a 04                	push   0x4
c0015215:	6a 0f                	push   0xf
c0015217:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001521b:	50                   	push   eax
c001521c:	e8 3b b3 ff ff       	call   c001055c <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015221:	83 c4 1c             	add    esp,0x1c
c0015224:	c3                   	ret    
c0015225:	c3                   	ret    

c0015226 <setupInterruptController()>:
c0015226:	55                   	push   ebp
c0015227:	89 e5                	mov    ebp,esp
c0015229:	53                   	push   ebx
c001522a:	83 ec 24             	sub    esp,0x24
c001522d:	b8 00 00 00 00       	mov    eax,0x0
c0015232:	85 c0                	test   eax,eax
c0015234:	0f 95 c0             	setne  al
c0015237:	84 c0                	test   al,al
c0015239:	74 5b                	je     c0015296 <setupInterruptController()+0x70>
c001523b:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015242:	83 ec 0c             	sub    esp,0xc
c0015245:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015248:	e8 4c a3 ff ff       	call   c000f599 <malloc>
c001524d:	83 c4 10             	add    esp,0x10
c0015250:	89 c3                	mov    ebx,eax
c0015252:	83 ec 0c             	sub    esp,0xc
c0015255:	53                   	push   ebx
c0015256:	e8 11 06 01 00       	call   c002586c <APIC::APIC()>
c001525b:	83 c4 10             	add    esp,0x10
c001525e:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015261:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015264:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015267:	8b 00                	mov    eax,DWORD PTR [eax]
c0015269:	83 c0 08             	add    eax,0x8
c001526c:	8b 00                	mov    eax,DWORD PTR [eax]
c001526e:	6a 00                	push   0x0
c0015270:	6a 00                	push   0x0
c0015272:	6a 00                	push   0x0
c0015274:	52                   	push   edx
c0015275:	ff d0                	call   eax
c0015277:	83 c4 10             	add    esp,0x10
c001527a:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c001527f:	83 ec 08             	sub    esp,0x8
c0015282:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015285:	50                   	push   eax
c0015286:	e8 4b e9 ff ff       	call   c0013bd6 <Device::addChild(Device*)>
c001528b:	83 c4 10             	add    esp,0x10
c001528e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015291:	e9 79 03 00 00       	jmp    c001560f <setupInterruptController()+0x3e9>
c0015296:	a0 20 e7 02 c0       	mov    al,ds:0xc002e720
c001529b:	84 c0                	test   al,al
c001529d:	75 14                	jne    c00152b3 <setupInterruptController()+0x8d>
c001529f:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c00152a4:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00152aa:	83 e2 fe             	and    edx,0xfffffffe
c00152ad:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00152b3:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c00152b8:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00152be:	83 e0 01             	and    eax,0x1
c00152c1:	84 c0                	test   al,al
c00152c3:	0f 95 c0             	setne  al
c00152c6:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00152c9:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00152d0:	83 ec 0c             	sub    esp,0xc
c00152d3:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00152d6:	e8 be a2 ff ff       	call   c000f599 <malloc>
c00152db:	83 c4 10             	add    esp,0x10
c00152de:	89 c3                	mov    ebx,eax
c00152e0:	83 ec 0c             	sub    esp,0xc
c00152e3:	53                   	push   ebx
c00152e4:	e8 db 0a 01 00       	call   c0025dc4 <PIC::PIC()>
c00152e9:	83 c4 10             	add    esp,0x10
c00152ec:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00152ef:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00152f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00152f7:	83 c0 08             	add    eax,0x8
c00152fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00152fc:	6a 00                	push   0x0
c00152fe:	6a 00                	push   0x0
c0015300:	6a 00                	push   0x0
c0015302:	52                   	push   edx
c0015303:	ff d0                	call   eax
c0015305:	83 c4 10             	add    esp,0x10
c0015308:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c001530c:	74 73                	je     c0015381 <setupInterruptController()+0x15b>
c001530e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015311:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015314:	8b 00                	mov    eax,DWORD PTR [eax]
c0015316:	83 c0 0c             	add    eax,0xc
c0015319:	8b 00                	mov    eax,DWORD PTR [eax]
c001531b:	6a 00                	push   0x0
c001531d:	6a 00                	push   0x0
c001531f:	6a 00                	push   0x0
c0015321:	52                   	push   edx
c0015322:	ff d0                	call   eax
c0015324:	83 c4 10             	add    esp,0x10
c0015327:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001532b:	74 15                	je     c0015342 <setupInterruptController()+0x11c>
c001532d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015330:	8b 00                	mov    eax,DWORD PTR [eax]
c0015332:	83 c0 04             	add    eax,0x4
c0015335:	8b 00                	mov    eax,DWORD PTR [eax]
c0015337:	83 ec 0c             	sub    esp,0xc
c001533a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001533d:	ff d0                	call   eax
c001533f:	83 c4 10             	add    esp,0x10
c0015342:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015349:	83 ec 0c             	sub    esp,0xc
c001534c:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001534f:	e8 45 a2 ff ff       	call   c000f599 <malloc>
c0015354:	83 c4 10             	add    esp,0x10
c0015357:	89 c3                	mov    ebx,eax
c0015359:	83 ec 0c             	sub    esp,0xc
c001535c:	53                   	push   ebx
c001535d:	e8 0a 05 01 00       	call   c002586c <APIC::APIC()>
c0015362:	83 c4 10             	add    esp,0x10
c0015365:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015368:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001536b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001536e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015370:	83 c0 08             	add    eax,0x8
c0015373:	8b 00                	mov    eax,DWORD PTR [eax]
c0015375:	6a 00                	push   0x0
c0015377:	6a 00                	push   0x0
c0015379:	6a 00                	push   0x0
c001537b:	52                   	push   edx
c001537c:	ff d0                	call   eax
c001537e:	83 c4 10             	add    esp,0x10
c0015381:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c0015386:	83 ec 08             	sub    esp,0x8
c0015389:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001538c:	50                   	push   eax
c001538d:	e8 44 e8 ff ff       	call   c0013bd6 <Device::addChild(Device*)>
c0015392:	83 c4 10             	add    esp,0x10
c0015395:	c7 05 48 df 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002df48,0x0
c001539f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00153a4:	83 c0 24             	add    eax,0x24
c00153a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00153a9:	6a 00                	push   0x0
c00153ab:	68 c2 4b 01 c0       	push   0xc0014bc2
c00153b0:	6a 00                	push   0x0
c00153b2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153b5:	ff d0                	call   eax
c00153b7:	83 c4 10             	add    esp,0x10
c00153ba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00153bf:	83 c0 24             	add    eax,0x24
c00153c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00153c4:	6a 00                	push   0x0
c00153c6:	68 c2 4b 01 c0       	push   0xc0014bc2
c00153cb:	6a 01                	push   0x1
c00153cd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153d0:	ff d0                	call   eax
c00153d2:	83 c4 10             	add    esp,0x10
c00153d5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00153da:	83 c0 24             	add    eax,0x24
c00153dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00153df:	6a 00                	push   0x0
c00153e1:	68 95 44 01 c0       	push   0xc0014495
c00153e6:	6a 02                	push   0x2
c00153e8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153eb:	ff d0                	call   eax
c00153ed:	83 c4 10             	add    esp,0x10
c00153f0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00153f5:	83 c0 24             	add    eax,0x24
c00153f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00153fa:	6a 00                	push   0x0
c00153fc:	68 c2 4b 01 c0       	push   0xc0014bc2
c0015401:	6a 03                	push   0x3
c0015403:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015406:	ff d0                	call   eax
c0015408:	83 c4 10             	add    esp,0x10
c001540b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001540e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015410:	83 c0 24             	add    eax,0x24
c0015413:	8b 00                	mov    eax,DWORD PTR [eax]
c0015415:	6a 00                	push   0x0
c0015417:	68 c2 4b 01 c0       	push   0xc0014bc2
c001541c:	6a 04                	push   0x4
c001541e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015421:	ff d0                	call   eax
c0015423:	83 c4 10             	add    esp,0x10
c0015426:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015429:	8b 00                	mov    eax,DWORD PTR [eax]
c001542b:	83 c0 24             	add    eax,0x24
c001542e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015430:	6a 00                	push   0x0
c0015432:	68 c2 4b 01 c0       	push   0xc0014bc2
c0015437:	6a 05                	push   0x5
c0015439:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001543c:	ff d0                	call   eax
c001543e:	83 c4 10             	add    esp,0x10
c0015441:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015444:	8b 00                	mov    eax,DWORD PTR [eax]
c0015446:	83 c0 24             	add    eax,0x24
c0015449:	8b 00                	mov    eax,DWORD PTR [eax]
c001544b:	6a 00                	push   0x0
c001544d:	68 e1 4b 01 c0       	push   0xc0014be1
c0015452:	6a 06                	push   0x6
c0015454:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015457:	ff d0                	call   eax
c0015459:	83 c4 10             	add    esp,0x10
c001545c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001545f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015461:	83 c0 24             	add    eax,0x24
c0015464:	8b 00                	mov    eax,DWORD PTR [eax]
c0015466:	6a 00                	push   0x0
c0015468:	68 c7 4a 01 c0       	push   0xc0014ac7
c001546d:	6a 07                	push   0x7
c001546f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015472:	ff d0                	call   eax
c0015474:	83 c4 10             	add    esp,0x10
c0015477:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001547a:	8b 00                	mov    eax,DWORD PTR [eax]
c001547c:	83 c0 24             	add    eax,0x24
c001547f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015481:	6a 00                	push   0x0
c0015483:	68 b0 42 01 c0       	push   0xc00142b0
c0015488:	6a 08                	push   0x8
c001548a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001548d:	ff d0                	call   eax
c001548f:	83 c4 10             	add    esp,0x10
c0015492:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015495:	8b 00                	mov    eax,DWORD PTR [eax]
c0015497:	83 c0 24             	add    eax,0x24
c001549a:	8b 00                	mov    eax,DWORD PTR [eax]
c001549c:	6a 00                	push   0x0
c001549e:	68 c2 4b 01 c0       	push   0xc0014bc2
c00154a3:	6a 09                	push   0x9
c00154a5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154a8:	ff d0                	call   eax
c00154aa:	83 c4 10             	add    esp,0x10
c00154ad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00154b2:	83 c0 24             	add    eax,0x24
c00154b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00154b7:	6a 00                	push   0x0
c00154b9:	68 c2 4b 01 c0       	push   0xc0014bc2
c00154be:	6a 0a                	push   0xa
c00154c0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154c3:	ff d0                	call   eax
c00154c5:	83 c4 10             	add    esp,0x10
c00154c8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00154cd:	83 c0 24             	add    eax,0x24
c00154d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00154d2:	6a 00                	push   0x0
c00154d4:	68 c2 4b 01 c0       	push   0xc0014bc2
c00154d9:	6a 0b                	push   0xb
c00154db:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154de:	ff d0                	call   eax
c00154e0:	83 c4 10             	add    esp,0x10
c00154e3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00154e8:	83 c0 24             	add    eax,0x24
c00154eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00154ed:	6a 00                	push   0x0
c00154ef:	68 c2 4b 01 c0       	push   0xc0014bc2
c00154f4:	6a 0c                	push   0xc
c00154f6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154f9:	ff d0                	call   eax
c00154fb:	83 c4 10             	add    esp,0x10
c00154fe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015501:	8b 00                	mov    eax,DWORD PTR [eax]
c0015503:	83 c0 24             	add    eax,0x24
c0015506:	8b 00                	mov    eax,DWORD PTR [eax]
c0015508:	6a 00                	push   0x0
c001550a:	68 3a 4b 01 c0       	push   0xc0014b3a
c001550f:	6a 0d                	push   0xd
c0015511:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015514:	ff d0                	call   eax
c0015516:	83 c4 10             	add    esp,0x10
c0015519:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001551c:	8b 00                	mov    eax,DWORD PTR [eax]
c001551e:	83 c0 24             	add    eax,0x24
c0015521:	8b 00                	mov    eax,DWORD PTR [eax]
c0015523:	6a 00                	push   0x0
c0015525:	68 73 4b 01 c0       	push   0xc0014b73
c001552a:	6a 0e                	push   0xe
c001552c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001552f:	ff d0                	call   eax
c0015531:	83 c4 10             	add    esp,0x10
c0015534:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015537:	8b 00                	mov    eax,DWORD PTR [eax]
c0015539:	83 c0 24             	add    eax,0x24
c001553c:	8b 00                	mov    eax,DWORD PTR [eax]
c001553e:	6a 00                	push   0x0
c0015540:	68 c2 4b 01 c0       	push   0xc0014bc2
c0015545:	6a 0f                	push   0xf
c0015547:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001554a:	ff d0                	call   eax
c001554c:	83 c4 10             	add    esp,0x10
c001554f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015552:	8b 00                	mov    eax,DWORD PTR [eax]
c0015554:	83 c0 24             	add    eax,0x24
c0015557:	8b 00                	mov    eax,DWORD PTR [eax]
c0015559:	6a 00                	push   0x0
c001555b:	68 c2 4b 01 c0       	push   0xc0014bc2
c0015560:	6a 10                	push   0x10
c0015562:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015565:	ff d0                	call   eax
c0015567:	83 c4 10             	add    esp,0x10
c001556a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001556d:	8b 00                	mov    eax,DWORD PTR [eax]
c001556f:	83 c0 24             	add    eax,0x24
c0015572:	8b 00                	mov    eax,DWORD PTR [eax]
c0015574:	6a 00                	push   0x0
c0015576:	68 c2 4b 01 c0       	push   0xc0014bc2
c001557b:	6a 11                	push   0x11
c001557d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015580:	ff d0                	call   eax
c0015582:	83 c4 10             	add    esp,0x10
c0015585:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015588:	8b 00                	mov    eax,DWORD PTR [eax]
c001558a:	83 c0 24             	add    eax,0x24
c001558d:	8b 00                	mov    eax,DWORD PTR [eax]
c001558f:	6a 00                	push   0x0
c0015591:	68 c2 4b 01 c0       	push   0xc0014bc2
c0015596:	6a 12                	push   0x12
c0015598:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001559b:	ff d0                	call   eax
c001559d:	83 c4 10             	add    esp,0x10
c00155a0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00155a5:	83 c0 24             	add    eax,0x24
c00155a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00155aa:	6a 00                	push   0x0
c00155ac:	68 c2 4b 01 c0       	push   0xc0014bc2
c00155b1:	6a 13                	push   0x13
c00155b3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155b6:	ff d0                	call   eax
c00155b8:	83 c4 10             	add    esp,0x10
c00155bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155be:	8b 00                	mov    eax,DWORD PTR [eax]
c00155c0:	83 c0 24             	add    eax,0x24
c00155c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00155c5:	6a 00                	push   0x0
c00155c7:	68 c2 4b 01 c0       	push   0xc0014bc2
c00155cc:	6a 14                	push   0x14
c00155ce:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155d1:	ff d0                	call   eax
c00155d3:	83 c4 10             	add    esp,0x10
c00155d6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00155db:	83 c0 24             	add    eax,0x24
c00155de:	8b 00                	mov    eax,DWORD PTR [eax]
c00155e0:	6a 00                	push   0x0
c00155e2:	68 c2 4b 01 c0       	push   0xc0014bc2
c00155e7:	6a 1e                	push   0x1e
c00155e9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155ec:	ff d0                	call   eax
c00155ee:	83 c4 10             	add    esp,0x10
c00155f1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00155f6:	83 c0 24             	add    eax,0x24
c00155f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00155fb:	6a 00                	push   0x0
c00155fd:	68 7b c1 01 c0       	push   0xc001c17b
c0015602:	6a 60                	push   0x60
c0015604:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015607:	ff d0                	call   eax
c0015609:	83 c4 10             	add    esp,0x10
c001560c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001560f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015612:	c9                   	leave  
c0015613:	c3                   	ret    

c0015614 <InterruptController::convertLegacyIRQNumber(int)>:
c0015614:	55                   	push   ebp
c0015615:	89 e5                	mov    ebp,esp
c0015617:	83 ec 08             	sub    esp,0x8
c001561a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001561d:	83 ec 0c             	sub    esp,0xc
c0015620:	50                   	push   eax
c0015621:	e8 b0 e8 ff ff       	call   c0013ed6 <Device::getName()>
c0015626:	83 c4 10             	add    esp,0x10
c0015629:	8a 00                	mov    al,BYTE PTR [eax]
c001562b:	3c 41                	cmp    al,0x41
c001562d:	0f 94 c0             	sete   al
c0015630:	84 c0                	test   al,al
c0015632:	74 28                	je     c001565c <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015634:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015638:	7f 12                	jg     c001564c <InterruptController::convertLegacyIRQNumber(int)+0x38>
c001563a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001563d:	05 20 d0 02 c0       	add    eax,0xc002d020
c0015642:	8a 00                	mov    al,BYTE PTR [eax]
c0015644:	0f b6 c0             	movzx  eax,al
c0015647:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001564a:	eb 10                	jmp    c001565c <InterruptController::convertLegacyIRQNumber(int)+0x48>
c001564c:	83 ec 0c             	sub    esp,0xc
c001564f:	68 10 b1 02 c0       	push   0xc002b110
c0015654:	e8 30 49 00 00       	call   c0019f89 <Krnl::panic(char const*)>
c0015659:	83 c4 10             	add    esp,0x10
c001565c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001565f:	c9                   	leave  
c0015660:	c3                   	ret    
c0015661:	90                   	nop

c0015662 <startGUI(void*)>:
c0015662:	55                   	push   ebp
c0015663:	89 e5                	mov    ebp,esp
c0015665:	53                   	push   ebx
c0015666:	83 ec 04             	sub    esp,0x4
c0015669:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001566e:	48                   	dec    eax
c001566f:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c0015674:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0015679:	85 c0                	test   eax,eax
c001567b:	75 01                	jne    c001567e <startGUI(void*)+0x1c>
c001567d:	fb                   	sti    
c001567e:	8b 1d c8 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002ddc8
c0015684:	83 ec 08             	sub    esp,0x8
c0015687:	6a 01                	push   0x1
c0015689:	68 90 b1 02 c0       	push   0xc002b190
c001568e:	e8 c3 7a 00 00       	call   c001d156 <Thr::loadDLL(char const*, bool)>
c0015693:	83 c4 10             	add    esp,0x10
c0015696:	83 ec 08             	sub    esp,0x8
c0015699:	53                   	push   ebx
c001569a:	50                   	push   eax
c001569b:	e8 e7 7c 00 00       	call   c001d387 <Thr::executeDLL(unsigned long, void*)>
c00156a0:	83 c4 10             	add    esp,0x10
c00156a3:	8b 1d c8 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002ddc8
c00156a9:	83 ec 08             	sub    esp,0x8
c00156ac:	6a 01                	push   0x1
c00156ae:	68 aa b1 02 c0       	push   0xc002b1aa
c00156b3:	e8 9e 7a 00 00       	call   c001d156 <Thr::loadDLL(char const*, bool)>
c00156b8:	83 c4 10             	add    esp,0x10
c00156bb:	83 ec 08             	sub    esp,0x8
c00156be:	53                   	push   ebx
c00156bf:	50                   	push   eax
c00156c0:	e8 c2 7c 00 00       	call   c001d387 <Thr::executeDLL(unsigned long, void*)>
c00156c5:	83 c4 10             	add    esp,0x10
c00156c8:	90                   	nop
c00156c9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00156cc:	c9                   	leave  
c00156cd:	c3                   	ret    

c00156ce <startGUIVESA(void*)>:
c00156ce:	55                   	push   ebp
c00156cf:	89 e5                	mov    ebp,esp
c00156d1:	53                   	push   ebx
c00156d2:	83 ec 04             	sub    esp,0x4
c00156d5:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c00156da:	48                   	dec    eax
c00156db:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c00156e0:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c00156e5:	85 c0                	test   eax,eax
c00156e7:	75 01                	jne    c00156ea <startGUIVESA(void*)+0x1c>
c00156e9:	fb                   	sti    
c00156ea:	8b 1d c8 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002ddc8
c00156f0:	83 ec 08             	sub    esp,0x8
c00156f3:	6a 01                	push   0x1
c00156f5:	68 c4 b1 02 c0       	push   0xc002b1c4
c00156fa:	e8 57 7a 00 00       	call   c001d156 <Thr::loadDLL(char const*, bool)>
c00156ff:	83 c4 10             	add    esp,0x10
c0015702:	83 ec 08             	sub    esp,0x8
c0015705:	53                   	push   ebx
c0015706:	50                   	push   eax
c0015707:	e8 7b 7c 00 00       	call   c001d387 <Thr::executeDLL(unsigned long, void*)>
c001570c:	83 c4 10             	add    esp,0x10
c001570f:	8b 1d c8 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002ddc8
c0015715:	83 ec 08             	sub    esp,0x8
c0015718:	6a 01                	push   0x1
c001571a:	68 aa b1 02 c0       	push   0xc002b1aa
c001571f:	e8 32 7a 00 00       	call   c001d156 <Thr::loadDLL(char const*, bool)>
c0015724:	83 c4 10             	add    esp,0x10
c0015727:	83 ec 08             	sub    esp,0x8
c001572a:	53                   	push   ebx
c001572b:	50                   	push   eax
c001572c:	e8 56 7c 00 00       	call   c001d387 <Thr::executeDLL(unsigned long, void*)>
c0015731:	83 c4 10             	add    esp,0x10
c0015734:	90                   	nop
c0015735:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015738:	c9                   	leave  
c0015739:	c3                   	ret    

c001573a <sendKeyToTerminal(unsigned char)>:
c001573a:	55                   	push   ebp
c001573b:	89 e5                	mov    ebp,esp
c001573d:	83 ec 28             	sub    esp,0x28
c0015740:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015743:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015746:	a1 84 de 02 c0       	mov    eax,ds:0xc002de84
c001574b:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c001574f:	83 ec 08             	sub    esp,0x8
c0015752:	52                   	push   edx
c0015753:	50                   	push   eax
c0015754:	e8 ab b2 ff ff       	call   c0010a04 <VgaText::receiveKey(unsigned char)>
c0015759:	83 c4 10             	add    esp,0x10
c001575c:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015760:	0f 85 8f 00 00 00    	jne    c00157f5 <sendKeyToTerminal(unsigned char)+0xbb>
c0015766:	fa                   	cli    
c0015767:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001576c:	40                   	inc    eax
c001576d:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c0015772:	a1 c4 f2 02 c0       	mov    eax,ds:0xc002f2c4
c0015777:	40                   	inc    eax
c0015778:	a3 c4 f2 02 c0       	mov    ds:0xc002f2c4,eax
c001577d:	a1 60 df 02 c0       	mov    eax,ds:0xc002df60
c0015782:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015785:	c7 05 60 df 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002df60,0x0
c001578f:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015793:	74 1f                	je     c00157b4 <sendKeyToTerminal(unsigned char)+0x7a>
c0015795:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015798:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001579b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001579e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00157a1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00157a4:	83 ec 0c             	sub    esp,0xc
c00157a7:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00157aa:	e8 fe 87 00 00       	call   c001dfad <unblockTask(ThreadControlBlock*)>
c00157af:	83 c4 10             	add    esp,0x10
c00157b2:	eb db                	jmp    c001578f <sendKeyToTerminal(unsigned char)+0x55>
c00157b4:	a1 c4 f2 02 c0       	mov    eax,ds:0xc002f2c4
c00157b9:	48                   	dec    eax
c00157ba:	a3 c4 f2 02 c0       	mov    ds:0xc002f2c4,eax
c00157bf:	a1 c4 f2 02 c0       	mov    eax,ds:0xc002f2c4
c00157c4:	85 c0                	test   eax,eax
c00157c6:	75 18                	jne    c00157e0 <sendKeyToTerminal(unsigned char)+0xa6>
c00157c8:	a1 c0 f2 02 c0       	mov    eax,ds:0xc002f2c0
c00157cd:	85 c0                	test   eax,eax
c00157cf:	74 0f                	je     c00157e0 <sendKeyToTerminal(unsigned char)+0xa6>
c00157d1:	c7 05 c0 f2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f2c0,0x0
c00157db:	e8 3b 83 00 00       	call   c001db1b <schedule()>
c00157e0:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c00157e5:	48                   	dec    eax
c00157e6:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c00157eb:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c00157f0:	85 c0                	test   eax,eax
c00157f2:	75 01                	jne    c00157f5 <sendKeyToTerminal(unsigned char)+0xbb>
c00157f4:	fb                   	sti    
c00157f5:	90                   	nop
c00157f6:	c9                   	leave  
c00157f7:	c3                   	ret    

c00157f8 <sendKeyboardToken(KeyboardToken)>:
c00157f8:	55                   	push   ebp
c00157f9:	89 e5                	mov    ebp,esp
c00157fb:	83 ec 18             	sub    esp,0x18
c00157fe:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015801:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015804:	0f b7 c0             	movzx  eax,ax
c0015807:	83 f2 01             	xor    edx,0x1
c001580a:	88 90 80 df 02 c0    	mov    BYTE PTR [eax-0x3ffd2080],dl
c0015810:	a1 68 df 02 c0       	mov    eax,ds:0xc002df68
c0015815:	85 c0                	test   eax,eax
c0015817:	74 24                	je     c001583d <sendKeyboardToken(KeyboardToken)+0x45>
c0015819:	8b 0d 68 df 02 c0    	mov    ecx,DWORD PTR ds:0xc002df68
c001581f:	83 ec 04             	sub    esp,0x4
c0015822:	68 80 df 02 c0       	push   0xc002df80
c0015827:	83 ec 08             	sub    esp,0x8
c001582a:	89 e2                	mov    edx,esp
c001582c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001582f:	89 02                	mov    DWORD PTR [edx],eax
c0015831:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015834:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015838:	ff d1                	call   ecx
c001583a:	83 c4 10             	add    esp,0x10
c001583d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015840:	66 3d 03 02          	cmp    ax,0x203
c0015844:	75 07                	jne    c001584d <sendKeyboardToken(KeyboardToken)+0x55>
c0015846:	a0 80 e0 02 c0       	mov    al,ds:0xc002e080
c001584b:	84 c0                	test   al,al
c001584d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015851:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015854:	a0 88 e3 02 c0       	mov    al,ds:0xc002e388
c0015859:	38 c2                	cmp    dl,al
c001585b:	74 1c                	je     c0015879 <sendKeyboardToken(KeyboardToken)+0x81>
c001585d:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015860:	a2 88 e3 02 c0       	mov    ds:0xc002e388,al
c0015865:	a0 88 e3 02 c0       	mov    al,ds:0xc002e388
c001586a:	0f b6 c0             	movzx  eax,al
c001586d:	83 ec 0c             	sub    esp,0xc
c0015870:	50                   	push   eax
c0015871:	e8 ce a7 ff ff       	call   c0010044 <setTerminalScrollLock(bool)>
c0015876:	83 c4 10             	add    esp,0x10
c0015879:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c001587c:	84 c0                	test   al,al
c001587e:	0f 84 ae 00 00 00    	je     c0015932 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015884:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015887:	66 3d 10 03          	cmp    ax,0x310
c001588b:	75 06                	jne    c0015893 <sendKeyboardToken(KeyboardToken)+0x9b>
c001588d:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015893:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015896:	66 3d 11 03          	cmp    ax,0x311
c001589a:	75 06                	jne    c00158a2 <sendKeyboardToken(KeyboardToken)+0xaa>
c001589c:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c00158a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158a5:	66 3d 12 03          	cmp    ax,0x312
c00158a9:	75 06                	jne    c00158b1 <sendKeyboardToken(KeyboardToken)+0xb9>
c00158ab:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00158b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158b4:	66 3d 13 03          	cmp    ax,0x313
c00158b8:	75 06                	jne    c00158c0 <sendKeyboardToken(KeyboardToken)+0xc8>
c00158ba:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00158c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158c3:	66 3d 14 03          	cmp    ax,0x314
c00158c7:	75 06                	jne    c00158cf <sendKeyboardToken(KeyboardToken)+0xd7>
c00158c9:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00158cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158d2:	66 3d 15 03          	cmp    ax,0x315
c00158d6:	75 06                	jne    c00158de <sendKeyboardToken(KeyboardToken)+0xe6>
c00158d8:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00158de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158e1:	66 3d 16 03          	cmp    ax,0x316
c00158e5:	75 06                	jne    c00158ed <sendKeyboardToken(KeyboardToken)+0xf5>
c00158e7:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00158ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158f0:	66 3d 17 03          	cmp    ax,0x317
c00158f4:	75 06                	jne    c00158fc <sendKeyboardToken(KeyboardToken)+0x104>
c00158f6:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00158fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ff:	66 3d 18 03          	cmp    ax,0x318
c0015903:	75 06                	jne    c001590b <sendKeyboardToken(KeyboardToken)+0x113>
c0015905:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001590b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001590e:	66 3d 19 03          	cmp    ax,0x319
c0015912:	75 06                	jne    c001591a <sendKeyboardToken(KeyboardToken)+0x122>
c0015914:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001591a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001591d:	66 3d 1a 03          	cmp    ax,0x31a
c0015921:	0f 85 c9 00 00 00    	jne    c00159f0 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015927:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001592d:	e9 be 00 00 00       	jmp    c00159f0 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015932:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015935:	66 3d 10 03          	cmp    ax,0x310
c0015939:	75 0a                	jne    c0015945 <sendKeyboardToken(KeyboardToken)+0x14d>
c001593b:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015941:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015945:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015948:	66 3d 11 03          	cmp    ax,0x311
c001594c:	75 0a                	jne    c0015958 <sendKeyboardToken(KeyboardToken)+0x160>
c001594e:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015954:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015958:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001595b:	66 3d 12 03          	cmp    ax,0x312
c001595f:	75 0a                	jne    c001596b <sendKeyboardToken(KeyboardToken)+0x173>
c0015961:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015967:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001596b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001596e:	66 3d 13 03          	cmp    ax,0x313
c0015972:	75 0a                	jne    c001597e <sendKeyboardToken(KeyboardToken)+0x186>
c0015974:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001597a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001597e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015981:	66 3d 14 03          	cmp    ax,0x314
c0015985:	75 0a                	jne    c0015991 <sendKeyboardToken(KeyboardToken)+0x199>
c0015987:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001598d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015991:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015994:	66 3d 15 03          	cmp    ax,0x315
c0015998:	75 0a                	jne    c00159a4 <sendKeyboardToken(KeyboardToken)+0x1ac>
c001599a:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00159a0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00159a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159a7:	66 3d 16 03          	cmp    ax,0x316
c00159ab:	75 0a                	jne    c00159b7 <sendKeyboardToken(KeyboardToken)+0x1bf>
c00159ad:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00159b3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00159b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159ba:	66 3d 17 03          	cmp    ax,0x317
c00159be:	75 0a                	jne    c00159ca <sendKeyboardToken(KeyboardToken)+0x1d2>
c00159c0:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00159c6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00159ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159cd:	66 3d 18 03          	cmp    ax,0x318
c00159d1:	75 0a                	jne    c00159dd <sendKeyboardToken(KeyboardToken)+0x1e5>
c00159d3:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00159d9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00159dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159e0:	66 3d 19 03          	cmp    ax,0x319
c00159e4:	75 0a                	jne    c00159f0 <sendKeyboardToken(KeyboardToken)+0x1f8>
c00159e6:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00159ec:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00159f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159f3:	66 3d 00 02          	cmp    ax,0x200
c00159f7:	75 2c                	jne    c0015a25 <sendKeyboardToken(KeyboardToken)+0x22d>
c00159f9:	a0 80 e3 02 c0       	mov    al,ds:0xc002e380
c00159fe:	83 f0 01             	xor    eax,0x1
c0015a01:	84 c0                	test   al,al
c0015a03:	74 20                	je     c0015a25 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015a05:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c0015a0a:	6a 01                	push   0x1
c0015a0c:	6a 00                	push   0x0
c0015a0e:	68 62 56 01 c0       	push   0xc0015662
c0015a13:	50                   	push   eax
c0015a14:	e8 dd 7e 00 00       	call   c001d8f6 <Process::createThread(void (*)(void*), void*, int)>
c0015a19:	83 c4 10             	add    esp,0x10
c0015a1c:	c6 05 80 e3 02 c0 01 	mov    BYTE PTR ds:0xc002e380,0x1
c0015a23:	eb 33                	jmp    c0015a58 <sendKeyboardToken(KeyboardToken)+0x260>
c0015a25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a28:	66 3d 01 02          	cmp    ax,0x201
c0015a2c:	75 2a                	jne    c0015a58 <sendKeyboardToken(KeyboardToken)+0x260>
c0015a2e:	a0 80 e3 02 c0       	mov    al,ds:0xc002e380
c0015a33:	83 f0 01             	xor    eax,0x1
c0015a36:	84 c0                	test   al,al
c0015a38:	74 1e                	je     c0015a58 <sendKeyboardToken(KeyboardToken)+0x260>
c0015a3a:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c0015a3f:	6a 01                	push   0x1
c0015a41:	6a 00                	push   0x0
c0015a43:	68 ce 56 01 c0       	push   0xc00156ce
c0015a48:	50                   	push   eax
c0015a49:	e8 a8 7e 00 00       	call   c001d8f6 <Process::createThread(void (*)(void*), void*, int)>
c0015a4e:	83 c4 10             	add    esp,0x10
c0015a51:	c6 05 80 e3 02 c0 01 	mov    BYTE PTR ds:0xc002e380,0x1
c0015a58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a5b:	66 3d 1d 03          	cmp    ax,0x31d
c0015a5f:	75 06                	jne    c0015a67 <sendKeyboardToken(KeyboardToken)+0x26f>
c0015a61:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015a67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a6a:	66 3d 1c 03          	cmp    ax,0x31c
c0015a6e:	75 06                	jne    c0015a76 <sendKeyboardToken(KeyboardToken)+0x27e>
c0015a70:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015a76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a79:	66 3d 1b 03          	cmp    ax,0x31b
c0015a7d:	75 06                	jne    c0015a85 <sendKeyboardToken(KeyboardToken)+0x28d>
c0015a7f:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015a85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a88:	66 3d 1e 03          	cmp    ax,0x31e
c0015a8c:	75 06                	jne    c0015a94 <sendKeyboardToken(KeyboardToken)+0x29c>
c0015a8e:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015a94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a97:	66 3d 1f 03          	cmp    ax,0x31f
c0015a9b:	75 06                	jne    c0015aa3 <sendKeyboardToken(KeyboardToken)+0x2ab>
c0015a9d:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015aa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aa6:	66 3d 1a 03          	cmp    ax,0x31a
c0015aaa:	75 06                	jne    c0015ab2 <sendKeyboardToken(KeyboardToken)+0x2ba>
c0015aac:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015ab2:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015ab6:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015ab9:	83 f0 01             	xor    eax,0x1
c0015abc:	84 c0                	test   al,al
c0015abe:	74 77                	je     c0015b37 <sendKeyboardToken(KeyboardToken)+0x33f>
c0015ac0:	a0 81 e0 02 c0       	mov    al,ds:0xc002e081
c0015ac5:	84 c0                	test   al,al
c0015ac7:	74 41                	je     c0015b0a <sendKeyboardToken(KeyboardToken)+0x312>
c0015ac9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015acd:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015ad1:	74 2b                	je     c0015afe <sendKeyboardToken(KeyboardToken)+0x306>
c0015ad3:	8b 15 84 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e384
c0015ad9:	89 d0                	mov    eax,edx
c0015adb:	c1 e0 02             	shl    eax,0x2
c0015ade:	01 d0                	add    eax,edx
c0015ae0:	01 c0                	add    eax,eax
c0015ae2:	a3 84 e3 02 c0       	mov    ds:0xc002e384,eax
c0015ae7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aea:	0f b7 c0             	movzx  eax,ax
c0015aed:	8d 50 d0             	lea    edx,[eax-0x30]
c0015af0:	a1 84 e3 02 c0       	mov    eax,ds:0xc002e384
c0015af5:	01 d0                	add    eax,edx
c0015af7:	a3 84 e3 02 c0       	mov    ds:0xc002e384,eax
c0015afc:	eb 6d                	jmp    c0015b6b <sendKeyboardToken(KeyboardToken)+0x373>
c0015afe:	c7 05 84 e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e384,0x0
c0015b08:	eb 61                	jmp    c0015b6b <sendKeyboardToken(KeyboardToken)+0x373>
c0015b0a:	a1 84 e3 02 c0       	mov    eax,ds:0xc002e384
c0015b0f:	85 c0                	test   eax,eax
c0015b11:	74 18                	je     c0015b2b <sendKeyboardToken(KeyboardToken)+0x333>
c0015b13:	a1 84 e3 02 c0       	mov    eax,ds:0xc002e384
c0015b18:	0f b6 c0             	movzx  eax,al
c0015b1b:	83 ec 0c             	sub    esp,0xc
c0015b1e:	50                   	push   eax
c0015b1f:	e8 16 fc ff ff       	call   c001573a <sendKeyToTerminal(unsigned char)>
c0015b24:	83 c4 10             	add    esp,0x10
c0015b27:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015b2b:	c7 05 84 e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e384,0x0
c0015b35:	eb 34                	jmp    c0015b6b <sendKeyboardToken(KeyboardToken)+0x373>
c0015b37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b3a:	66 3d 01 01          	cmp    ax,0x101
c0015b3e:	75 2b                	jne    c0015b6b <sendKeyboardToken(KeyboardToken)+0x373>
c0015b40:	a1 84 e3 02 c0       	mov    eax,ds:0xc002e384
c0015b45:	85 c0                	test   eax,eax
c0015b47:	74 18                	je     c0015b61 <sendKeyboardToken(KeyboardToken)+0x369>
c0015b49:	a1 84 e3 02 c0       	mov    eax,ds:0xc002e384
c0015b4e:	0f b6 c0             	movzx  eax,al
c0015b51:	83 ec 0c             	sub    esp,0xc
c0015b54:	50                   	push   eax
c0015b55:	e8 e0 fb ff ff       	call   c001573a <sendKeyToTerminal(unsigned char)>
c0015b5a:	83 c4 10             	add    esp,0x10
c0015b5d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015b61:	c7 05 84 e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e384,0x0
c0015b6b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015b6e:	83 f0 01             	xor    eax,0x1
c0015b71:	84 c0                	test   al,al
c0015b73:	74 4c                	je     c0015bc1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015b75:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015b78:	83 f0 01             	xor    eax,0x1
c0015b7b:	84 c0                	test   al,al
c0015b7d:	74 42                	je     c0015bc1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015b7f:	a0 80 e0 02 c0       	mov    al,ds:0xc002e080
c0015b84:	83 f0 01             	xor    eax,0x1
c0015b87:	84 c0                	test   al,al
c0015b89:	74 36                	je     c0015bc1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015b8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b8e:	66 83 f8 1f          	cmp    ax,0x1f
c0015b92:	76 09                	jbe    c0015b9d <sendKeyboardToken(KeyboardToken)+0x3a5>
c0015b94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b97:	66 83 f8 7e          	cmp    ax,0x7e
c0015b9b:	76 12                	jbe    c0015baf <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015b9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ba0:	66 83 f8 0a          	cmp    ax,0xa
c0015ba4:	74 09                	je     c0015baf <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015ba6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ba9:	66 83 f8 08          	cmp    ax,0x8
c0015bad:	75 12                	jne    c0015bc1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015baf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bb2:	0f b6 c0             	movzx  eax,al
c0015bb5:	83 ec 0c             	sub    esp,0xc
c0015bb8:	50                   	push   eax
c0015bb9:	e8 7c fb ff ff       	call   c001573a <sendKeyToTerminal(unsigned char)>
c0015bbe:	83 c4 10             	add    esp,0x10
c0015bc1:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015bc4:	83 f0 01             	xor    eax,0x1
c0015bc7:	84 c0                	test   al,al
c0015bc9:	74 4f                	je     c0015c1a <sendKeyboardToken(KeyboardToken)+0x422>
c0015bcb:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015bce:	83 f0 01             	xor    eax,0x1
c0015bd1:	84 c0                	test   al,al
c0015bd3:	74 45                	je     c0015c1a <sendKeyboardToken(KeyboardToken)+0x422>
c0015bd5:	a0 80 e0 02 c0       	mov    al,ds:0xc002e080
c0015bda:	84 c0                	test   al,al
c0015bdc:	74 3c                	je     c0015c1a <sendKeyboardToken(KeyboardToken)+0x422>
c0015bde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015be1:	66 83 f8 3f          	cmp    ax,0x3f
c0015be5:	76 33                	jbe    c0015c1a <sendKeyboardToken(KeyboardToken)+0x422>
c0015be7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bea:	66 83 f8 7f          	cmp    ax,0x7f
c0015bee:	77 2a                	ja     c0015c1a <sendKeyboardToken(KeyboardToken)+0x422>
c0015bf0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bf3:	88 c2                	mov    dl,al
c0015bf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bf8:	66 83 f8 5f          	cmp    ax,0x5f
c0015bfc:	76 04                	jbe    c0015c02 <sendKeyboardToken(KeyboardToken)+0x40a>
c0015bfe:	b0 20                	mov    al,0x20
c0015c00:	eb 02                	jmp    c0015c04 <sendKeyboardToken(KeyboardToken)+0x40c>
c0015c02:	b0 00                	mov    al,0x0
c0015c04:	29 c2                	sub    edx,eax
c0015c06:	88 d0                	mov    al,dl
c0015c08:	83 e8 40             	sub    eax,0x40
c0015c0b:	0f b6 c0             	movzx  eax,al
c0015c0e:	83 ec 0c             	sub    esp,0xc
c0015c11:	50                   	push   eax
c0015c12:	e8 23 fb ff ff       	call   c001573a <sendKeyToTerminal(unsigned char)>
c0015c17:	83 c4 10             	add    esp,0x10
c0015c1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c1d:	66 3d 00 03          	cmp    ax,0x300
c0015c21:	75 0f                	jne    c0015c32 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015c23:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015c26:	83 f0 01             	xor    eax,0x1
c0015c29:	84 c0                	test   al,al
c0015c2b:	74 05                	je     c0015c32 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015c2d:	e8 83 a7 ff ff       	call   c00103b5 <doTerminalCycle()>
c0015c32:	90                   	nop
c0015c33:	c9                   	leave  
c0015c34:	c3                   	ret    

c0015c35 <clearInternalKeybuffer(VgaText*)>:
c0015c35:	55                   	push   ebp
c0015c36:	89 e5                	mov    ebp,esp
c0015c38:	83 ec 08             	sub    esp,0x8
c0015c3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c3e:	05 98 01 00 00       	add    eax,0x198
c0015c43:	83 ec 0c             	sub    esp,0xc
c0015c46:	50                   	push   eax
c0015c47:	e8 20 ab fe ff       	call   c000076c <strlen>
c0015c4c:	83 c4 10             	add    esp,0x10
c0015c4f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015c52:	81 c2 98 01 00 00    	add    edx,0x198
c0015c58:	83 ec 04             	sub    esp,0x4
c0015c5b:	50                   	push   eax
c0015c5c:	6a 00                	push   0x0
c0015c5e:	52                   	push   edx
c0015c5f:	e8 ec aa fe ff       	call   c0000750 <memset>
c0015c64:	83 c4 10             	add    esp,0x10
c0015c67:	90                   	nop
c0015c68:	c9                   	leave  
c0015c69:	c3                   	ret    

c0015c6a <readKeyboard(VgaText*, char*, unsigned long)>:
c0015c6a:	55                   	push   ebp
c0015c6b:	89 e5                	mov    ebp,esp
c0015c6d:	83 ec 18             	sub    esp,0x18
c0015c70:	a1 68 df 02 c0       	mov    eax,ds:0xc002df68
c0015c75:	85 c0                	test   eax,eax
c0015c77:	74 2a                	je     c0015ca3 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0015c79:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0015c7f:	8b 0d 68 df 02 c0    	mov    ecx,DWORD PTR ds:0xc002df68
c0015c85:	83 ec 04             	sub    esp,0x4
c0015c88:	68 80 df 02 c0       	push   0xc002df80
c0015c8d:	83 ec 08             	sub    esp,0x8
c0015c90:	89 e2                	mov    edx,esp
c0015c92:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015c95:	89 02                	mov    DWORD PTR [edx],eax
c0015c97:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015c9a:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015c9e:	ff d1                	call   ecx
c0015ca0:	83 c4 10             	add    esp,0x10
c0015ca3:	fb                   	sti    
c0015ca4:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015cab:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015caf:	0f 84 a1 00 00 00    	je     c0015d56 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c0015cb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cb8:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015cbe:	84 c0                	test   al,al
c0015cc0:	75 28                	jne    c0015cea <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c0015cc2:	fa                   	cli    
c0015cc3:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0015cc8:	40                   	inc    eax
c0015cc9:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c0015cce:	e8 48 7e 00 00       	call   c001db1b <schedule()>
c0015cd3:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0015cd8:	48                   	dec    eax
c0015cd9:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c0015cde:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0015ce3:	85 c0                	test   eax,eax
c0015ce5:	75 ce                	jne    c0015cb5 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015ce7:	fb                   	sti    
c0015ce8:	eb cb                	jmp    c0015cb5 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015cea:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015ced:	8d 50 01             	lea    edx,[eax+0x1]
c0015cf0:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015cf3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015cf6:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0015cfc:	88 10                	mov    BYTE PTR [eax],dl
c0015cfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d01:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015d07:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015d0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d0d:	05 98 01 00 00       	add    eax,0x198
c0015d12:	83 ec 0c             	sub    esp,0xc
c0015d15:	50                   	push   eax
c0015d16:	e8 51 aa fe ff       	call   c000076c <strlen>
c0015d1b:	83 c4 10             	add    esp,0x10
c0015d1e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015d21:	81 c2 98 01 00 00    	add    edx,0x198
c0015d27:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015d2a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015d2d:	81 c2 98 01 00 00    	add    edx,0x198
c0015d33:	83 ec 04             	sub    esp,0x4
c0015d36:	50                   	push   eax
c0015d37:	51                   	push   ecx
c0015d38:	52                   	push   edx
c0015d39:	e8 4a a9 fe ff       	call   c0000688 <memmove>
c0015d3e:	83 c4 10             	add    esp,0x10
c0015d41:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015d44:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015d47:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015d4b:	0f 85 5a ff ff ff    	jne    c0015cab <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0015d51:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d54:	eb 03                	jmp    c0015d59 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c0015d56:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d59:	c9                   	leave  
c0015d5a:	c3                   	ret    
c0015d5b:	90                   	nop

c0015d5c <Keyboard::Keyboard(char const*)>:
c0015d5c:	83 ec 0c             	sub    esp,0xc
c0015d5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d63:	83 ec 08             	sub    esp,0x8
c0015d66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d6a:	50                   	push   eax
c0015d6b:	e8 6a e0 ff ff       	call   c0013dda <Device::Device(char const*)>
c0015d70:	83 c4 10             	add    esp,0x10
c0015d73:	ba e8 b1 02 c0       	mov    edx,0xc002b1e8
c0015d78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d7c:	89 10                	mov    DWORD PTR [eax],edx
c0015d7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d82:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015d8c:	c6 05 64 df 02 c0 01 	mov    BYTE PTR ds:0xc002df64,0x1
c0015d93:	90                   	nop
c0015d94:	83 c4 0c             	add    esp,0xc
c0015d97:	c3                   	ret    

c0015d98 <Keyboard::~Keyboard()>:
c0015d98:	83 ec 0c             	sub    esp,0xc
c0015d9b:	ba e8 b1 02 c0       	mov    edx,0xc002b1e8
c0015da0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015da4:	89 10                	mov    DWORD PTR [eax],edx
c0015da6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015daa:	83 ec 0c             	sub    esp,0xc
c0015dad:	50                   	push   eax
c0015dae:	e8 f1 dc ff ff       	call   c0013aa4 <Device::~Device()>
c0015db3:	83 c4 10             	add    esp,0x10
c0015db6:	90                   	nop
c0015db7:	83 c4 0c             	add    esp,0xc
c0015dba:	c3                   	ret    
c0015dbb:	90                   	nop

c0015dbc <Keyboard::~Keyboard()>:
c0015dbc:	83 ec 0c             	sub    esp,0xc
c0015dbf:	83 ec 0c             	sub    esp,0xc
c0015dc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015dc6:	e8 cd ff ff ff       	call   c0015d98 <Keyboard::~Keyboard()>
c0015dcb:	83 c4 10             	add    esp,0x10
c0015dce:	83 ec 08             	sub    esp,0x8
c0015dd1:	68 5c 01 00 00       	push   0x15c
c0015dd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015dda:	e8 e6 c8 ff ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0015ddf:	83 c4 10             	add    esp,0x10
c0015de2:	83 c4 0c             	add    esp,0xc
c0015de5:	c3                   	ret    

c0015de6 <LogicalDisk::close(int, int, void*)>:
c0015de6:	83 c8 ff             	or     eax,0xffffffff
c0015de9:	c3                   	ret    

c0015dea <LogicalDisk::~LogicalDisk()>:
c0015dea:	83 ec 0c             	sub    esp,0xc
c0015ded:	ba 60 b2 02 c0       	mov    edx,0xc002b260
c0015df2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015df6:	89 10                	mov    DWORD PTR [eax],edx
c0015df8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015dfc:	83 ec 0c             	sub    esp,0xc
c0015dff:	50                   	push   eax
c0015e00:	e8 9f dc ff ff       	call   c0013aa4 <Device::~Device()>
c0015e05:	83 c4 10             	add    esp,0x10
c0015e08:	90                   	nop
c0015e09:	83 c4 0c             	add    esp,0xc
c0015e0c:	c3                   	ret    
c0015e0d:	90                   	nop

c0015e0e <LogicalDisk::~LogicalDisk()>:
c0015e0e:	83 ec 0c             	sub    esp,0xc
c0015e11:	83 ec 0c             	sub    esp,0xc
c0015e14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e18:	e8 cd ff ff ff       	call   c0015dea <LogicalDisk::~LogicalDisk()>
c0015e1d:	83 c4 10             	add    esp,0x10
c0015e20:	83 ec 08             	sub    esp,0x8
c0015e23:	68 74 01 00 00       	push   0x174
c0015e28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e2c:	e8 94 c8 ff ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0015e31:	83 c4 10             	add    esp,0x10
c0015e34:	83 c4 0c             	add    esp,0xc
c0015e37:	c3                   	ret    

c0015e38 <LogicalDisk::open(int, int, void*)>:
c0015e38:	83 ec 18             	sub    esp,0x18
c0015e3b:	68 14 b2 02 c0       	push   0xc002b214
c0015e40:	e8 44 41 00 00       	call   c0019f89 <Krnl::panic(char const*)>
c0015e45:	83 c8 ff             	or     eax,0xffffffff
c0015e48:	83 c4 1c             	add    esp,0x1c
c0015e4b:	c3                   	ret    

c0015e4c <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015e4c:	53                   	push   ebx
c0015e4d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015e51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e55:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015e59:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015e5f:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015e65:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015e6b:	77 10                	ja     c0015e7d <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015e6d:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015e73:	89 d3                	mov    ebx,edx
c0015e75:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015e7b:	72 05                	jb     c0015e82 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015e7d:	83 c8 ff             	or     eax,0xffffffff
c0015e80:	89 c2                	mov    edx,eax
c0015e82:	5b                   	pop    ebx
c0015e83:	c3                   	ret    

c0015e84 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015e84:	56                   	push   esi
c0015e85:	83 c8 ff             	or     eax,0xffffffff
c0015e88:	53                   	push   ebx
c0015e89:	89 c2                	mov    edx,eax
c0015e8b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015e8f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015e93:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015e97:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015e9d:	77 27                	ja     c0015ec6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015e9f:	89 d8                	mov    eax,ebx
c0015ea1:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015ea7:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015ead:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015eb2:	89 c2                	mov    edx,eax
c0015eb4:	73 10                	jae    c0015ec6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015eb6:	89 c8                	mov    eax,ecx
c0015eb8:	89 da                	mov    edx,ebx
c0015eba:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015ec0:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015ec6:	5b                   	pop    ebx
c0015ec7:	5e                   	pop    esi
c0015ec8:	c3                   	ret    
c0015ec9:	90                   	nop

c0015eca <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015eca:	83 ec 1c             	sub    esp,0x1c
c0015ecd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015ed1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015ed5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ed9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015edd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015ee1:	89 04 24             	mov    DWORD PTR [esp],eax
c0015ee4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015ee8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015eec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ef0:	83 ec 08             	sub    esp,0x8
c0015ef3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015ef7:	50                   	push   eax
c0015ef8:	e8 dd de ff ff       	call   c0013dda <Device::Device(char const*)>
c0015efd:	83 c4 10             	add    esp,0x10
c0015f00:	ba 60 b2 02 c0       	mov    edx,0xc002b260
c0015f05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f09:	89 10                	mov    DWORD PTR [eax],edx
c0015f0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f0f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015f16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f1a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015f21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f25:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015f2f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015f33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015f37:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015f3b:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015f41:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015f47:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015f4b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015f4e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015f52:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015f58:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015f5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f62:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015f66:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f70:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015f7a:	90                   	nop
c0015f7b:	83 c4 1c             	add    esp,0x1c
c0015f7e:	c3                   	ret    
c0015f7f:	90                   	nop

c0015f80 <LogicalDisk::assignDriveLetter()>:
c0015f80:	55                   	push   ebp
c0015f81:	57                   	push   edi
c0015f82:	56                   	push   esi
c0015f83:	53                   	push   ebx
c0015f84:	83 ec 14             	sub    esp,0x14
c0015f87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015f8b:	8b 3d a0 e3 02 c0    	mov    edi,DWORD PTR ds:0xc002e3a0
c0015f91:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015f97:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015f9b:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015fa1:	8b 3d a4 e3 02 c0    	mov    edi,DWORD PTR ds:0xc002e3a4
c0015fa7:	3c 01                	cmp    al,0x1
c0015fa9:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015fad:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015fb1:	19 c0                	sbb    eax,eax
c0015fb3:	83 e0 02             	and    eax,0x2
c0015fb6:	83 c0 41             	add    eax,0x41
c0015fb9:	0f be e8             	movsx  ebp,al
c0015fbc:	3c 43                	cmp    al,0x43
c0015fbe:	75 10                	jne    c0015fd0 <LogicalDisk::assignDriveLetter()+0x50>
c0015fc0:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015fc7:	75 5d                	jne    c0016026 <LogicalDisk::assignDriveLetter()+0xa6>
c0015fc9:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015fce:	75 56                	jne    c0016026 <LogicalDisk::assignDriveLetter()+0xa6>
c0015fd0:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015fd3:	ba 01 00 00 00       	mov    edx,0x1
c0015fd8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015fdc:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015fe0:	d3 e2                	shl    edx,cl
c0015fe2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015fe6:	89 d7                	mov    edi,edx
c0015fe8:	89 d6                	mov    esi,edx
c0015fea:	c1 ff 1f             	sar    edi,0x1f
c0015fed:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015ff1:	21 f9                	and    ecx,edi
c0015ff3:	09 d1                	or     ecx,edx
c0015ff5:	75 2f                	jne    c0016026 <LogicalDisk::assignDriveLetter()+0xa6>
c0015ff7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015ffb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015fff:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0016005:	09 f2                	or     edx,esi
c0016007:	89 15 a0 e3 02 c0    	mov    DWORD PTR ds:0xc002e3a0,edx
c001600d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016011:	09 fa                	or     edx,edi
c0016013:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0016017:	89 15 a4 e3 02 c0    	mov    DWORD PTR ds:0xc002e3a4,edx
c001601d:	89 1c bd c0 e3 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1c40],ebx
c0016024:	eb 08                	jmp    c001602e <LogicalDisk::assignDriveLetter()+0xae>
c0016026:	45                   	inc    ebp
c0016027:	40                   	inc    eax
c0016028:	3c 5b                	cmp    al,0x5b
c001602a:	75 90                	jne    c0015fbc <LogicalDisk::assignDriveLetter()+0x3c>
c001602c:	31 c0                	xor    eax,eax
c001602e:	83 c4 14             	add    esp,0x14
c0016031:	5b                   	pop    ebx
c0016032:	5e                   	pop    esi
c0016033:	5f                   	pop    edi
c0016034:	5d                   	pop    ebp
c0016035:	c3                   	ret    

c0016036 <LogicalDisk::mount()>:
c0016036:	56                   	push   esi
c0016037:	53                   	push   ebx
c0016038:	53                   	push   ebx
c0016039:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001603d:	8b 1d 34 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002df34
c0016043:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c001604d:	85 db                	test   ebx,ebx
c001604f:	74 27                	je     c0016078 <LogicalDisk::mount()+0x42>
c0016051:	51                   	push   ecx
c0016052:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0016059:	8b 13                	mov    edx,DWORD PTR [ebx]
c001605b:	83 e8 41             	sub    eax,0x41
c001605e:	50                   	push   eax
c001605f:	56                   	push   esi
c0016060:	53                   	push   ebx
c0016061:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016064:	83 c4 10             	add    esp,0x10
c0016067:	84 c0                	test   al,al
c0016069:	74 08                	je     c0016073 <LogicalDisk::mount()+0x3d>
c001606b:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0016071:	eb 07                	jmp    c001607a <LogicalDisk::mount()+0x44>
c0016073:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016076:	eb d5                	jmp    c001604d <LogicalDisk::mount()+0x17>
c0016078:	31 c0                	xor    eax,eax
c001607a:	5a                   	pop    edx
c001607b:	5b                   	pop    ebx
c001607c:	5e                   	pop    esi
c001607d:	c3                   	ret    

c001607e <LogicalDisk::unmount()>:
c001607e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016082:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001608c:	c3                   	ret    
c001608d:	90                   	nop

c001608e <LogicalDisk::eject()>:
c001608e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016092:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016098:	8b 10                	mov    edx,DWORD PTR [eax]
c001609a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001609e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00160a1:	90                   	nop

c00160a2 <LogicalDisk::unassignDriveLetter()>:
c00160a2:	57                   	push   edi
c00160a3:	56                   	push   esi
c00160a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00160a8:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c00160af:	84 c9                	test   cl,cl
c00160b1:	75 0f                	jne    c00160c2 <LogicalDisk::unassignDriveLetter()+0x20>
c00160b3:	c7 44 24 0c 38 b2 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b238
c00160bb:	5e                   	pop    esi
c00160bc:	5f                   	pop    edi
c00160bd:	e9 c7 3e 00 00       	jmp    c0019f89 <Krnl::panic(char const*)>
c00160c2:	83 e9 41             	sub    ecx,0x41
c00160c5:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00160cc:	b8 01 00 00 00       	mov    eax,0x1
c00160d1:	c7 04 8d c0 e3 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1c40],0x0
c00160dc:	d3 e0                	shl    eax,cl
c00160de:	89 c7                	mov    edi,eax
c00160e0:	f7 d0                	not    eax
c00160e2:	c1 ff 1f             	sar    edi,0x1f
c00160e5:	21 05 a0 e3 02 c0    	and    DWORD PTR ds:0xc002e3a0,eax
c00160eb:	89 fe                	mov    esi,edi
c00160ed:	f7 d6                	not    esi
c00160ef:	21 35 a4 e3 02 c0    	and    DWORD PTR ds:0xc002e3a4,esi
c00160f5:	5e                   	pop    esi
c00160f6:	5f                   	pop    edi
c00160f7:	c3                   	ret    

c00160f8 <LogicalDisk::read(unsigned long long, int, void*)>:
c00160f8:	57                   	push   edi
c00160f9:	56                   	push   esi
c00160fa:	53                   	push   ebx
c00160fb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00160ff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016103:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016107:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001610b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016111:	77 41                	ja     c0016154 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016113:	99                   	cdq    
c0016114:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001611a:	01 c8                	add    eax,ecx
c001611c:	11 da                	adc    edx,ebx
c001611e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016124:	19 d7                	sbb    edi,edx
c0016126:	72 33                	jb     c001615b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016128:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001612e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016134:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016138:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001613c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016142:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016148:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001614c:	5b                   	pop    ebx
c001614d:	5e                   	pop    esi
c001614e:	5f                   	pop    edi
c001614f:	e9 1c 0b 00 00       	jmp    c0016c70 <VCache::read(unsigned long long, int, void*)>
c0016154:	b8 05 00 00 00       	mov    eax,0x5
c0016159:	eb 05                	jmp    c0016160 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001615b:	b8 07 00 00 00       	mov    eax,0x7
c0016160:	5b                   	pop    ebx
c0016161:	5e                   	pop    esi
c0016162:	5f                   	pop    edi
c0016163:	c3                   	ret    

c0016164 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016164:	57                   	push   edi
c0016165:	56                   	push   esi
c0016166:	53                   	push   ebx
c0016167:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001616b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001616f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016173:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016177:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001617d:	77 41                	ja     c00161c0 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001617f:	99                   	cdq    
c0016180:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016186:	01 c8                	add    eax,ecx
c0016188:	11 da                	adc    edx,ebx
c001618a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016190:	19 d7                	sbb    edi,edx
c0016192:	72 33                	jb     c00161c7 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016194:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001619a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00161a0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00161a4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00161a8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00161ae:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00161b4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00161b8:	5b                   	pop    ebx
c00161b9:	5e                   	pop    esi
c00161ba:	5f                   	pop    edi
c00161bb:	e9 86 09 00 00       	jmp    c0016b46 <VCache::write(unsigned long long, int, void*)>
c00161c0:	b8 05 00 00 00       	mov    eax,0x5
c00161c5:	eb 05                	jmp    c00161cc <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00161c7:	b8 07 00 00 00       	mov    eax,0x7
c00161cc:	5b                   	pop    ebx
c00161cd:	5e                   	pop    esi
c00161ce:	5f                   	pop    edi
c00161cf:	c3                   	ret    

c00161d0 <Mouse::Mouse(char const*)>:
c00161d0:	83 ec 0c             	sub    esp,0xc
c00161d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161d7:	83 ec 08             	sub    esp,0x8
c00161da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00161de:	50                   	push   eax
c00161df:	e8 f6 db ff ff       	call   c0013dda <Device::Device(char const*)>
c00161e4:	83 c4 10             	add    esp,0x10
c00161e7:	ba 8c b2 02 c0       	mov    edx,0xc002b28c
c00161ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161f0:	89 10                	mov    DWORD PTR [eax],edx
c00161f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161f6:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016200:	90                   	nop
c0016201:	83 c4 0c             	add    esp,0xc
c0016204:	c3                   	ret    
c0016205:	90                   	nop

c0016206 <Mouse::~Mouse()>:
c0016206:	83 ec 0c             	sub    esp,0xc
c0016209:	ba 8c b2 02 c0       	mov    edx,0xc002b28c
c001620e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016212:	89 10                	mov    DWORD PTR [eax],edx
c0016214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016218:	83 ec 0c             	sub    esp,0xc
c001621b:	50                   	push   eax
c001621c:	e8 83 d8 ff ff       	call   c0013aa4 <Device::~Device()>
c0016221:	83 c4 10             	add    esp,0x10
c0016224:	90                   	nop
c0016225:	83 c4 0c             	add    esp,0xc
c0016228:	c3                   	ret    
c0016229:	90                   	nop

c001622a <Mouse::~Mouse()>:
c001622a:	83 ec 0c             	sub    esp,0xc
c001622d:	83 ec 0c             	sub    esp,0xc
c0016230:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016234:	e8 cd ff ff ff       	call   c0016206 <Mouse::~Mouse()>
c0016239:	83 c4 10             	add    esp,0x10
c001623c:	83 ec 08             	sub    esp,0x8
c001623f:	68 58 01 00 00       	push   0x158
c0016244:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016248:	e8 78 c4 ff ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c001624d:	83 c4 10             	add    esp,0x10
c0016250:	83 c4 0c             	add    esp,0xc
c0016253:	c3                   	ret    

c0016254 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016254:	55                   	push   ebp
c0016255:	57                   	push   edi
c0016256:	56                   	push   esi
c0016257:	53                   	push   ebx
c0016258:	81 ec 28 01 00 00    	sub    esp,0x128
c001625e:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016265:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001626c:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016273:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001627a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001627e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016282:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016289:	e8 48 dc ff ff       	call   c0013ed6 <Device::getName()>
c001628e:	5a                   	pop    edx
c001628f:	59                   	pop    ecx
c0016290:	50                   	push   eax
c0016291:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0016295:	55                   	push   ebp
c0016296:	e8 71 a5 fe ff       	call   c000080c <strcpy>
c001629b:	5b                   	pop    ebx
c001629c:	58                   	pop    eax
c001629d:	68 b0 b2 02 c0       	push   0xc002b2b0
c00162a2:	55                   	push   ebp
c00162a3:	e8 a4 a6 fe ff       	call   c000094c <strcat>
c00162a8:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00162af:	e8 e5 92 ff ff       	call   c000f599 <malloc>
c00162b4:	83 c4 0c             	add    esp,0xc
c00162b7:	89 c3                	mov    ebx,eax
c00162b9:	57                   	push   edi
c00162ba:	56                   	push   esi
c00162bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00162bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00162c3:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00162ca:	55                   	push   ebp
c00162cb:	50                   	push   eax
c00162cc:	e8 f9 fb ff ff       	call   c0015eca <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00162d1:	83 c4 14             	add    esp,0x14
c00162d4:	53                   	push   ebx
c00162d5:	e8 a6 fc ff ff       	call   c0015f80 <LogicalDisk::assignDriveLetter()>
c00162da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00162dd:	e8 54 fd ff ff       	call   c0016036 <LogicalDisk::mount()>
c00162e2:	58                   	pop    eax
c00162e3:	5a                   	pop    edx
c00162e4:	53                   	push   ebx
c00162e5:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00162ec:	e8 e5 d8 ff ff       	call   c0013bd6 <Device::addChild(Device*)>
c00162f1:	81 c4 2c 01 00 00    	add    esp,0x12c
c00162f7:	5b                   	pop    ebx
c00162f8:	5e                   	pop    esi
c00162f9:	5f                   	pop    edi
c00162fa:	5d                   	pop    ebp
c00162fb:	c3                   	ret    

c00162fc <createPartitionsForDisk(PhysicalDisk*)>:
c00162fc:	55                   	push   ebp
c00162fd:	57                   	push   edi
c00162fe:	56                   	push   esi
c00162ff:	53                   	push   ebx
c0016300:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016306:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001630d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016313:	3d 00 02 00 00       	cmp    eax,0x200
c0016318:	74 27                	je     c0016341 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001631a:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016320:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016326:	83 ec 10             	sub    esp,0x10
c0016329:	0f a4 f7 0a          	shld   edi,esi,0xa
c001632d:	99                   	cdq    
c001632e:	c1 e6 0a             	shl    esi,0xa
c0016331:	52                   	push   edx
c0016332:	89 fd                	mov    ebp,edi
c0016334:	50                   	push   eax
c0016335:	55                   	push   ebp
c0016336:	56                   	push   esi
c0016337:	e8 b8 05 01 00       	call   c00268f4 <__udivdi3>
c001633c:	e9 b1 00 00 00       	jmp    c00163f2 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016341:	83 ec 0c             	sub    esp,0xc
c0016344:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016346:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001634a:	56                   	push   esi
c001634b:	6a 01                	push   0x1
c001634d:	6a 00                	push   0x0
c001634f:	6a 00                	push   0x0
c0016351:	53                   	push   ebx
c0016352:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016355:	83 c4 20             	add    esp,0x20
c0016358:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016360:	75 0a                	jne    c001636c <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016362:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001636a:	74 2c                	je     c0016398 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001636c:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016372:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016378:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001637e:	83 ec 10             	sub    esp,0x10
c0016381:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016385:	89 f7                	mov    edi,esi
c0016387:	c1 e0 0a             	shl    eax,0xa
c001638a:	c1 ff 1f             	sar    edi,0x1f
c001638d:	57                   	push   edi
c001638e:	56                   	push   esi
c001638f:	52                   	push   edx
c0016390:	50                   	push   eax
c0016391:	e8 5e 05 01 00       	call   c00268f4 <__udivdi3>
c0016396:	eb 5a                	jmp    c00163f2 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016398:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001639f:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00163a6:	83 e1 7f             	and    ecx,0x7f
c00163a9:	83 e0 7f             	and    eax,0x7f
c00163ac:	01 c1                	add    ecx,eax
c00163ae:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00163b5:	83 e0 7f             	and    eax,0x7f
c00163b8:	01 c1                	add    ecx,eax
c00163ba:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00163c1:	83 e0 7f             	and    eax,0x7f
c00163c4:	00 c1                	add    cl,al
c00163c6:	74 41                	je     c0016409 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00163c8:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00163ce:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00163d4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00163da:	83 ec 10             	sub    esp,0x10
c00163dd:	0f a4 c2 0a          	shld   edx,eax,0xa
c00163e1:	89 f7                	mov    edi,esi
c00163e3:	c1 e0 0a             	shl    eax,0xa
c00163e6:	c1 ff 1f             	sar    edi,0x1f
c00163e9:	57                   	push   edi
c00163ea:	56                   	push   esi
c00163eb:	52                   	push   edx
c00163ec:	50                   	push   eax
c00163ed:	e8 02 05 01 00       	call   c00268f4 <__udivdi3>
c00163f2:	83 c4 14             	add    esp,0x14
c00163f5:	52                   	push   edx
c00163f6:	50                   	push   eax
c00163f7:	6a 00                	push   0x0
c00163f9:	6a 00                	push   0x0
c00163fb:	53                   	push   ebx
c00163fc:	e8 53 fe ff ff       	call   c0016254 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016401:	83 c4 20             	add    esp,0x20
c0016404:	e9 79 01 00 00       	jmp    c0016582 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016409:	89 f0                	mov    eax,esi
c001640b:	31 f6                	xor    esi,esi
c001640d:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016414:	75 02                	jne    c0016418 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016416:	89 f1                	mov    ecx,esi
c0016418:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001641f:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016426:	c1 e2 08             	shl    edx,0x8
c0016429:	c1 e7 10             	shl    edi,0x10
c001642c:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016434:	09 fa                	or     edx,edi
c0016436:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c001643e:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016445:	83 c0 10             	add    eax,0x10
c0016448:	09 fa                	or     edx,edi
c001644a:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016451:	c1 e7 18             	shl    edi,0x18
c0016454:	09 fa                	or     edx,edi
c0016456:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c001645d:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016461:	c1 e7 10             	shl    edi,0x10
c0016464:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001646b:	c1 e2 08             	shl    edx,0x8
c001646e:	09 fa                	or     edx,edi
c0016470:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016477:	09 fa                	or     edx,edi
c0016479:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016480:	c1 e7 18             	shl    edi,0x18
c0016483:	09 fa                	or     edx,edi
c0016485:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016489:	46                   	inc    esi
c001648a:	83 fe 04             	cmp    esi,0x4
c001648d:	0f 85 7a ff ff ff    	jne    c001640d <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016497:	83 f0 01             	xor    eax,0x1
c001649a:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001649e:	75 57                	jne    c00164f7 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00164a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00164a4:	83 f0 01             	xor    eax,0x1
c00164a7:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00164ab:	75 4a                	jne    c00164f7 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00164ad:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00164b1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00164b9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00164c1:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00164c7:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00164cd:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00164d3:	0f a4 c2 0a          	shld   edx,eax,0xa
c00164d7:	89 f7                	mov    edi,esi
c00164d9:	c1 e0 0a             	shl    eax,0xa
c00164dc:	c1 ff 1f             	sar    edi,0x1f
c00164df:	57                   	push   edi
c00164e0:	56                   	push   esi
c00164e1:	52                   	push   edx
c00164e2:	50                   	push   eax
c00164e3:	e8 0c 04 01 00       	call   c00268f4 <__udivdi3>
c00164e8:	83 c4 10             	add    esp,0x10
c00164eb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00164ef:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00164f3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00164f7:	84 c9                	test   cl,cl
c00164f9:	74 53                	je     c001654e <createPartitionsForDisk(PhysicalDisk*)+0x252>
c00164fb:	0f b6 c9             	movzx  ecx,cl
c00164fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016502:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016506:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001650a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001650e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016512:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016516:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c001651a:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c001651e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016522:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016526:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001652a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001652e:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016532:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016536:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c001653a:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c001653e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016542:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016546:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c001654a:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c001654e:	31 ed                	xor    ebp,ebp
c0016550:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016554:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016558:	89 f8                	mov    eax,edi
c001655a:	09 f0                	or     eax,esi
c001655c:	74 1e                	je     c001657c <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001655e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016562:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016566:	89 d1                	mov    ecx,edx
c0016568:	09 c1                	or     ecx,eax
c001656a:	74 10                	je     c001657c <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001656c:	83 ec 0c             	sub    esp,0xc
c001656f:	57                   	push   edi
c0016570:	56                   	push   esi
c0016571:	52                   	push   edx
c0016572:	50                   	push   eax
c0016573:	53                   	push   ebx
c0016574:	e8 db fc ff ff       	call   c0016254 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016579:	83 c4 20             	add    esp,0x20
c001657c:	45                   	inc    ebp
c001657d:	83 fd 04             	cmp    ebp,0x4
c0016580:	75 ce                	jne    c0016550 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016582:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016588:	5b                   	pop    ebx
c0016589:	5e                   	pop    esi
c001658a:	5f                   	pop    edi
c001658b:	5d                   	pop    ebp
c001658c:	c3                   	ret    
c001658d:	90                   	nop

c001658e <Serial::Serial(char const*)>:
c001658e:	83 ec 0c             	sub    esp,0xc
c0016591:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016595:	83 ec 08             	sub    esp,0x8
c0016598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001659c:	50                   	push   eax
c001659d:	e8 38 d8 ff ff       	call   c0013dda <Device::Device(char const*)>
c00165a2:	83 c4 10             	add    esp,0x10
c00165a5:	ba c4 b2 02 c0       	mov    edx,0xc002b2c4
c00165aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165ae:	89 10                	mov    DWORD PTR [eax],edx
c00165b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165b4:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c00165be:	90                   	nop
c00165bf:	83 c4 0c             	add    esp,0xc
c00165c2:	c3                   	ret    
c00165c3:	90                   	nop

c00165c4 <Serial::~Serial()>:
c00165c4:	83 ec 0c             	sub    esp,0xc
c00165c7:	ba c4 b2 02 c0       	mov    edx,0xc002b2c4
c00165cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165d0:	89 10                	mov    DWORD PTR [eax],edx
c00165d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165d6:	83 ec 0c             	sub    esp,0xc
c00165d9:	50                   	push   eax
c00165da:	e8 c5 d4 ff ff       	call   c0013aa4 <Device::~Device()>
c00165df:	83 c4 10             	add    esp,0x10
c00165e2:	90                   	nop
c00165e3:	83 c4 0c             	add    esp,0xc
c00165e6:	c3                   	ret    
c00165e7:	90                   	nop

c00165e8 <Serial::~Serial()>:
c00165e8:	83 ec 0c             	sub    esp,0xc
c00165eb:	83 ec 0c             	sub    esp,0xc
c00165ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165f2:	e8 cd ff ff ff       	call   c00165c4 <Serial::~Serial()>
c00165f7:	83 c4 10             	add    esp,0x10
c00165fa:	83 ec 08             	sub    esp,0x8
c00165fd:	68 58 01 00 00       	push   0x158
c0016602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016606:	e8 ba c0 ff ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c001660b:	83 c4 10             	add    esp,0x10
c001660e:	83 c4 0c             	add    esp,0xc
c0016611:	c3                   	ret    

c0016612 <Timer::Timer(char const*)>:
c0016612:	83 ec 0c             	sub    esp,0xc
c0016615:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016619:	83 ec 08             	sub    esp,0x8
c001661c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016620:	50                   	push   eax
c0016621:	e8 b4 d7 ff ff       	call   c0013dda <Device::Device(char const*)>
c0016626:	83 c4 10             	add    esp,0x10
c0016629:	ba 08 b3 02 c0       	mov    edx,0xc002b308
c001662e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016632:	89 10                	mov    DWORD PTR [eax],edx
c0016634:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016638:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016642:	90                   	nop
c0016643:	83 c4 0c             	add    esp,0xc
c0016646:	c3                   	ret    
c0016647:	90                   	nop

c0016648 <Timer::~Timer()>:
c0016648:	83 ec 0c             	sub    esp,0xc
c001664b:	ba 08 b3 02 c0       	mov    edx,0xc002b308
c0016650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016654:	89 10                	mov    DWORD PTR [eax],edx
c0016656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001665a:	83 ec 0c             	sub    esp,0xc
c001665d:	50                   	push   eax
c001665e:	e8 41 d4 ff ff       	call   c0013aa4 <Device::~Device()>
c0016663:	83 c4 10             	add    esp,0x10
c0016666:	90                   	nop
c0016667:	83 c4 0c             	add    esp,0xc
c001666a:	c3                   	ret    
c001666b:	90                   	nop

c001666c <Timer::~Timer()>:
c001666c:	83 ec 0c             	sub    esp,0xc
c001666f:	83 ec 0c             	sub    esp,0xc
c0016672:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016676:	e8 cd ff ff ff       	call   c0016648 <Timer::~Timer()>
c001667b:	83 c4 10             	add    esp,0x10
c001667e:	83 ec 08             	sub    esp,0x8
c0016681:	68 5c 01 00 00       	push   0x15c
c0016686:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001668a:	e8 36 c0 ff ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c001668f:	83 c4 10             	add    esp,0x10
c0016692:	83 c4 0c             	add    esp,0xc
c0016695:	c3                   	ret    

c0016696 <Timer::read()>:
c0016696:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001669a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00166a0:	c3                   	ret    

c00166a1 <timerHandler(unsigned long long)>:
c00166a1:	55                   	push   ebp
c00166a2:	57                   	push   edi
c00166a3:	56                   	push   esi
c00166a4:	53                   	push   ebx
c00166a5:	83 ec 0c             	sub    esp,0xc
c00166a8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00166ac:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00166b0:	01 35 30 e4 02 c0    	add    DWORD PTR ds:0xc002e430,esi
c00166b6:	11 3d 34 e4 02 c0    	adc    DWORD PTR ds:0xc002e434,edi
c00166bc:	80 3d cd dd 02 c0 00 	cmp    BYTE PTR ds:0xc002ddcd,0x0
c00166c3:	0f 84 42 01 00 00    	je     c001680b <timerHandler(unsigned long long)+0x16a>
c00166c9:	fa                   	cli    
c00166ca:	ff 05 c8 f2 02 c0    	inc    DWORD PTR ds:0xc002f2c8
c00166d0:	83 ec 0c             	sub    esp,0xc
c00166d3:	ff 05 c4 f2 02 c0    	inc    DWORD PTR ds:0xc002f2c4
c00166d9:	68 d8 f2 02 c0       	push   0xc002f2d8
c00166de:	e8 6b 22 01 00       	call   c002894e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00166e3:	83 c4 10             	add    esp,0x10
c00166e6:	84 c0                	test   al,al
c00166e8:	0f 85 a2 00 00 00    	jne    c0016790 <timerHandler(unsigned long long)+0xef>
c00166ee:	83 ec 0c             	sub    esp,0xc
c00166f1:	68 d8 f2 02 c0       	push   0xc002f2d8
c00166f6:	e8 6f 22 01 00       	call   c002896a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00166fb:	83 c4 10             	add    esp,0x10
c00166fe:	89 c3                	mov    ebx,eax
c0016700:	83 ec 0c             	sub    esp,0xc
c0016703:	68 d8 f2 02 c0       	push   0xc002f2d8
c0016708:	e8 5d 22 01 00       	call   c002896a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001670d:	c7 04 24 d8 f2 02 c0 	mov    DWORD PTR [esp],0xc002f2d8
c0016714:	89 c5                	mov    ebp,eax
c0016716:	e8 57 22 01 00       	call   c0028972 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001671b:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c001671e:	83 c4 10             	add    esp,0x10
c0016721:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016724:	39 15 30 e4 02 c0    	cmp    DWORD PTR ds:0xc002e430,edx
c001672a:	a1 34 e4 02 c0       	mov    eax,ds:0xc002e434
c001672f:	19 c8                	sbb    eax,ecx
c0016731:	72 21                	jb     c0016754 <timerHandler(unsigned long long)+0xb3>
c0016733:	83 ec 0c             	sub    esp,0xc
c0016736:	55                   	push   ebp
c0016737:	e8 71 78 00 00       	call   c001dfad <unblockTask(ThreadControlBlock*)>
c001673c:	83 c4 10             	add    esp,0x10
c001673f:	39 eb                	cmp    ebx,ebp
c0016741:	75 21                	jne    c0016764 <timerHandler(unsigned long long)+0xc3>
c0016743:	83 ec 0c             	sub    esp,0xc
c0016746:	68 d8 f2 02 c0       	push   0xc002f2d8
c001674b:	e8 1a 22 01 00       	call   c002896a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016750:	89 c3                	mov    ebx,eax
c0016752:	eb 0d                	jmp    c0016761 <timerHandler(unsigned long long)+0xc0>
c0016754:	50                   	push   eax
c0016755:	50                   	push   eax
c0016756:	55                   	push   ebp
c0016757:	68 d8 f2 02 c0       	push   0xc002f2d8
c001675c:	e8 bf 22 01 00       	call   c0028a20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016761:	83 c4 10             	add    esp,0x10
c0016764:	83 ec 0c             	sub    esp,0xc
c0016767:	68 d8 f2 02 c0       	push   0xc002f2d8
c001676c:	e8 dd 21 01 00       	call   c002894e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016771:	83 c4 10             	add    esp,0x10
c0016774:	84 c0                	test   al,al
c0016776:	75 18                	jne    c0016790 <timerHandler(unsigned long long)+0xef>
c0016778:	83 ec 0c             	sub    esp,0xc
c001677b:	68 d8 f2 02 c0       	push   0xc002f2d8
c0016780:	e8 e5 21 01 00       	call   c002896a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016785:	83 c4 10             	add    esp,0x10
c0016788:	39 d8                	cmp    eax,ebx
c001678a:	0f 85 70 ff ff ff    	jne    c0016700 <timerHandler(unsigned long long)+0x5f>
c0016790:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016795:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c0016799:	74 3d                	je     c00167d8 <timerHandler(unsigned long long)+0x137>
c001679b:	80 3d cc dd 02 c0 00 	cmp    BYTE PTR ds:0xc002ddcc,0x0
c00167a2:	74 34                	je     c00167d8 <timerHandler(unsigned long long)+0x137>
c00167a4:	fa                   	cli    
c00167a5:	ff 05 c8 f2 02 c0    	inc    DWORD PTR ds:0xc002f2c8
c00167ab:	31 d2                	xor    edx,edx
c00167ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167b2:	89 f9                	mov    ecx,edi
c00167b4:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c00167b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167bc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00167bf:	39 c6                	cmp    esi,eax
c00167c1:	19 d1                	sbb    ecx,edx
c00167c3:	72 05                	jb     c00167ca <timerHandler(unsigned long long)+0x129>
c00167c5:	e8 51 73 00 00       	call   c001db1b <schedule()>
c00167ca:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c00167cf:	48                   	dec    eax
c00167d0:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c00167d5:	75 01                	jne    c00167d8 <timerHandler(unsigned long long)+0x137>
c00167d7:	fb                   	sti    
c00167d8:	a1 c4 f2 02 c0       	mov    eax,ds:0xc002f2c4
c00167dd:	48                   	dec    eax
c00167de:	a3 c4 f2 02 c0       	mov    ds:0xc002f2c4,eax
c00167e3:	75 18                	jne    c00167fd <timerHandler(unsigned long long)+0x15c>
c00167e5:	83 3d c0 f2 02 c0 00 	cmp    DWORD PTR ds:0xc002f2c0,0x0
c00167ec:	74 0f                	je     c00167fd <timerHandler(unsigned long long)+0x15c>
c00167ee:	c7 05 c0 f2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f2c0,0x0
c00167f8:	e8 1e 73 00 00       	call   c001db1b <schedule()>
c00167fd:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0016802:	48                   	dec    eax
c0016803:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c0016808:	75 01                	jne    c001680b <timerHandler(unsigned long long)+0x16a>
c001680a:	fb                   	sti    
c001680b:	83 c4 0c             	add    esp,0xc
c001680e:	5b                   	pop    ebx
c001680f:	5e                   	pop    esi
c0016810:	5f                   	pop    edi
c0016811:	5d                   	pop    ebp
c0016812:	c3                   	ret    

c0016813 <setupTimer(int)>:
c0016813:	57                   	push   edi
c0016814:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c0016819:	56                   	push   esi
c001681a:	53                   	push   ebx
c001681b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001681f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016825:	83 ec 0c             	sub    esp,0xc
c0016828:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001682e:	e8 a3 d6 ff ff       	call   c0013ed6 <Device::getName()>
c0016833:	83 c4 10             	add    esp,0x10
c0016836:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016839:	0f 85 8d 00 00 00    	jne    c00168cc <setupTimer(int)+0xb9>
c001683f:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c0016844:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c001684b:	74 7f                	je     c00168cc <setupTimer(int)+0xb9>
c001684d:	83 ec 0c             	sub    esp,0xc
c0016850:	68 5c 01 00 00       	push   0x15c
c0016855:	e8 3f 8d ff ff       	call   c000f599 <malloc>
c001685a:	89 04 24             	mov    DWORD PTR [esp],eax
c001685d:	89 c3                	mov    ebx,eax
c001685f:	e8 6a fc 00 00       	call   c00264ce <PIT::PIT()>
c0016864:	59                   	pop    ecx
c0016865:	5f                   	pop    edi
c0016866:	53                   	push   ebx
c0016867:	ff 35 c8 dd 02 c0    	push   DWORD PTR ds:0xc002ddc8
c001686d:	e8 64 d3 ff ff       	call   c0013bd6 <Device::addChild(Device*)>
c0016872:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016874:	6a 00                	push   0x0
c0016876:	6a 00                	push   0x0
c0016878:	56                   	push   esi
c0016879:	53                   	push   ebx
c001687a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001687d:	83 c4 14             	add    esp,0x14
c0016880:	68 60 01 00 00       	push   0x160
c0016885:	e8 0f 8d ff ff       	call   c000f599 <malloc>
c001688a:	89 04 24             	mov    DWORD PTR [esp],eax
c001688d:	89 c7                	mov    edi,eax
c001688f:	e8 ea fa 00 00       	call   c002637e <APICTimer::APICTimer()>
c0016894:	6a 00                	push   0x0
c0016896:	6a 00                	push   0x0
c0016898:	56                   	push   esi
c0016899:	57                   	push   edi
c001689a:	e8 e1 f9 00 00       	call   c0026280 <APICTimer::open(int, int, void*)>
c001689f:	83 c4 20             	add    esp,0x20
c00168a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00168a4:	6a 00                	push   0x0
c00168a6:	6a 00                	push   0x0
c00168a8:	6a 00                	push   0x0
c00168aa:	53                   	push   ebx
c00168ab:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00168ae:	58                   	pop    eax
c00168af:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c00168b4:	5a                   	pop    edx
c00168b5:	57                   	push   edi
c00168b6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00168bc:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00168c2:	e8 0f d3 ff ff       	call   c0013bd6 <Device::addChild(Device*)>
c00168c7:	83 c4 10             	add    esp,0x10
c00168ca:	eb 33                	jmp    c00168ff <setupTimer(int)+0xec>
c00168cc:	83 ec 0c             	sub    esp,0xc
c00168cf:	68 5c 01 00 00       	push   0x15c
c00168d4:	e8 c0 8c ff ff       	call   c000f599 <malloc>
c00168d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00168dc:	89 c3                	mov    ebx,eax
c00168de:	e8 eb fb 00 00       	call   c00264ce <PIT::PIT()>
c00168e3:	58                   	pop    eax
c00168e4:	5a                   	pop    edx
c00168e5:	53                   	push   ebx
c00168e6:	ff 35 c8 dd 02 c0    	push   DWORD PTR ds:0xc002ddc8
c00168ec:	e8 e5 d2 ff ff       	call   c0013bd6 <Device::addChild(Device*)>
c00168f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00168f3:	6a 00                	push   0x0
c00168f5:	6a 00                	push   0x0
c00168f7:	56                   	push   esi
c00168f8:	53                   	push   ebx
c00168f9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00168fc:	83 c4 20             	add    esp,0x20
c00168ff:	89 d8                	mov    eax,ebx
c0016901:	5b                   	pop    ebx
c0016902:	5e                   	pop    esi
c0016903:	5f                   	pop    edi
c0016904:	c3                   	ret    
c0016905:	90                   	nop

c0016906 <VCache::VCache(PhysicalDisk*)>:
c0016906:	53                   	push   ebx
c0016907:	83 ec 18             	sub    esp,0x18
c001690a:	ba 58 b4 02 c0       	mov    edx,0xc002b458
c001690f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016913:	89 10                	mov    DWORD PTR [eax],edx
c0016915:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016919:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016920:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016924:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001692b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001692f:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016936:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001693d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016941:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016948:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001694f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016953:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001695a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001695e:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016962:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016966:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c001696d:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016974:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016978:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001697c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016980:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016984:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016988:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001698c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016990:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016997:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c001699f:	83 ec 0c             	sub    esp,0xc
c00169a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00169a6:	e8 ee 8b ff ff       	call   c000f599 <malloc>
c00169ab:	83 c4 10             	add    esp,0x10
c00169ae:	89 c3                	mov    ebx,eax
c00169b0:	83 ec 0c             	sub    esp,0xc
c00169b3:	53                   	push   ebx
c00169b4:	e8 2b 6f 00 00       	call   c001d8e4 <Mutex::Mutex()>
c00169b9:	83 c4 10             	add    esp,0x10
c00169bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169c0:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00169c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169c7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00169cb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00169ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169d2:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00169d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00169dd:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00169e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169e7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00169ea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00169ee:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00169f4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00169fa:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00169fe:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016a01:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016a04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a08:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016a0c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016a10:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016a16:	05 00 01 00 00       	add    eax,0x100
c0016a1b:	c1 e0 04             	shl    eax,0x4
c0016a1e:	83 ec 0c             	sub    esp,0xc
c0016a21:	50                   	push   eax
c0016a22:	e8 72 8b ff ff       	call   c000f599 <malloc>
c0016a27:	83 c4 10             	add    esp,0x10
c0016a2a:	89 c2                	mov    edx,eax
c0016a2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a30:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016a33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a37:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016a3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a42:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016a46:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016a4a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016a50:	c1 e0 07             	shl    eax,0x7
c0016a53:	83 ec 0c             	sub    esp,0xc
c0016a56:	50                   	push   eax
c0016a57:	e8 3d 8b ff ff       	call   c000f599 <malloc>
c0016a5c:	83 c4 10             	add    esp,0x10
c0016a5f:	89 c2                	mov    edx,eax
c0016a61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a65:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016a68:	90                   	nop
c0016a69:	83 c4 18             	add    esp,0x18
c0016a6c:	5b                   	pop    ebx
c0016a6d:	c3                   	ret    

c0016a6e <VCache::invalidateReadBuffer()>:
c0016a6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016a72:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0016a78:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016a7c:	c3                   	ret    
c0016a7d:	90                   	nop

c0016a7e <VCache::writeWriteBuffer()>:
c0016a7e:	53                   	push   ebx
c0016a7f:	83 ec 0c             	sub    esp,0xc
c0016a82:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016a86:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016a89:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016a8c:	68 30 b3 02 c0       	push   0xc002b330
c0016a91:	e8 07 bd ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0016a96:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016a99:	5a                   	pop    edx
c0016a9a:	8b 10                	mov    edx,DWORD PTR [eax]
c0016a9c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016a9f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016aa2:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016aa5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016aa8:	50                   	push   eax
c0016aa9:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016aac:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016ab3:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016aba:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016abe:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016ac5:	83 c4 28             	add    esp,0x28
c0016ac8:	5b                   	pop    ebx
c0016ac9:	c3                   	ret    

c0016aca <VCache::~VCache()>:
c0016aca:	83 ec 0c             	sub    esp,0xc
c0016acd:	ba 58 b4 02 c0       	mov    edx,0xc002b458
c0016ad2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ad6:	89 10                	mov    DWORD PTR [eax],edx
c0016ad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016adc:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016adf:	84 c0                	test   al,al
c0016ae1:	74 0f                	je     c0016af2 <VCache::~VCache()+0x28>
c0016ae3:	83 ec 0c             	sub    esp,0xc
c0016ae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016aea:	e8 8f ff ff ff       	call   c0016a7e <VCache::writeWriteBuffer()>
c0016aef:	83 c4 10             	add    esp,0x10
c0016af2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016af6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016af9:	83 ec 0c             	sub    esp,0xc
c0016afc:	50                   	push   eax
c0016afd:	e8 a7 8a ff ff       	call   c000f5a9 <free>
c0016b02:	83 c4 10             	add    esp,0x10
c0016b05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b09:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016b0c:	83 ec 0c             	sub    esp,0xc
c0016b0f:	50                   	push   eax
c0016b10:	e8 94 8a ff ff       	call   c000f5a9 <free>
c0016b15:	83 c4 10             	add    esp,0x10
c0016b18:	90                   	nop
c0016b19:	83 c4 0c             	add    esp,0xc
c0016b1c:	c3                   	ret    
c0016b1d:	90                   	nop

c0016b1e <VCache::~VCache()>:
c0016b1e:	83 ec 0c             	sub    esp,0xc
c0016b21:	83 ec 0c             	sub    esp,0xc
c0016b24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b28:	e8 9d ff ff ff       	call   c0016aca <VCache::~VCache()>
c0016b2d:	83 c4 10             	add    esp,0x10
c0016b30:	83 ec 08             	sub    esp,0x8
c0016b33:	6a 44                	push   0x44
c0016b35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b39:	e8 87 bb ff ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0016b3e:	83 c4 10             	add    esp,0x10
c0016b41:	83 c4 0c             	add    esp,0xc
c0016b44:	c3                   	ret    
c0016b45:	90                   	nop

c0016b46 <VCache::write(unsigned long long, int, void*)>:
c0016b46:	55                   	push   ebp
c0016b47:	57                   	push   edi
c0016b48:	56                   	push   esi
c0016b49:	53                   	push   ebx
c0016b4a:	83 ec 18             	sub    esp,0x18
c0016b4d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016b51:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016b55:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016b59:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0016b5d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016b60:	e8 c5 72 00 00       	call   c001de2a <Semaphore::acquire()>
c0016b65:	c7 04 24 54 b3 02 c0 	mov    DWORD PTR [esp],0xc002b354
c0016b6c:	e8 2c bc ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0016b71:	83 c4 10             	add    esp,0x10
c0016b74:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016b78:	74 0c                	je     c0016b86 <VCache::write(unsigned long long, int, void*)+0x40>
c0016b7a:	83 ec 0c             	sub    esp,0xc
c0016b7d:	53                   	push   ebx
c0016b7e:	e8 eb fe ff ff       	call   c0016a6e <VCache::invalidateReadBuffer()>
c0016b83:	83 c4 10             	add    esp,0x10
c0016b86:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016b8a:	74 66                	je     c0016bf2 <VCache::write(unsigned long long, int, void*)+0xac>
c0016b8c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016b8f:	99                   	cdq    
c0016b90:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016b93:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016b96:	31 f0                	xor    eax,esi
c0016b98:	89 d1                	mov    ecx,edx
c0016b9a:	89 ca                	mov    edx,ecx
c0016b9c:	31 fa                	xor    edx,edi
c0016b9e:	09 d0                	or     eax,edx
c0016ba0:	75 44                	jne    c0016be6 <VCache::write(unsigned long long, int, void*)+0xa0>
c0016ba2:	83 fd 01             	cmp    ebp,0x1
c0016ba5:	75 3f                	jne    c0016be6 <VCache::write(unsigned long long, int, void*)+0xa0>
c0016ba7:	83 ec 0c             	sub    esp,0xc
c0016baa:	68 7b b3 02 c0       	push   0xc002b37b
c0016baf:	e8 e9 bb ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0016bb4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016bb7:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0016bba:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016bc0:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016bc4:	0f af f9             	imul   edi,ecx
c0016bc7:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0016bca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016bcc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016bcf:	83 c4 10             	add    esp,0x10
c0016bd2:	40                   	inc    eax
c0016bd3:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016bd6:	83 c0 80             	add    eax,0xffffff80
c0016bd9:	75 75                	jne    c0016c50 <VCache::write(unsigned long long, int, void*)+0x10a>
c0016bdb:	83 ec 0c             	sub    esp,0xc
c0016bde:	53                   	push   ebx
c0016bdf:	e8 9a fe ff ff       	call   c0016a7e <VCache::writeWriteBuffer()>
c0016be4:	eb 41                	jmp    c0016c27 <VCache::write(unsigned long long, int, void*)+0xe1>
c0016be6:	83 ec 0c             	sub    esp,0xc
c0016be9:	53                   	push   ebx
c0016bea:	e8 8f fe ff ff       	call   c0016a7e <VCache::writeWriteBuffer()>
c0016bef:	83 c4 10             	add    esp,0x10
c0016bf2:	83 fd 7f             	cmp    ebp,0x7f
c0016bf5:	7f 35                	jg     c0016c2c <VCache::write(unsigned long long, int, void*)+0xe6>
c0016bf7:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016bfa:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016bfd:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0016c00:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016c04:	56                   	push   esi
c0016c05:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016c09:	6a 01                	push   0x1
c0016c0b:	68 91 b3 02 c0       	push   0xc002b391
c0016c10:	e8 88 bb ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0016c15:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016c18:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0016c1b:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016c21:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016c25:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016c27:	83 c4 10             	add    esp,0x10
c0016c2a:	eb 24                	jmp    c0016c50 <VCache::write(unsigned long long, int, void*)+0x10a>
c0016c2c:	52                   	push   edx
c0016c2d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016c31:	55                   	push   ebp
c0016c32:	68 b2 b3 02 c0       	push   0xc002b3b2
c0016c37:	e8 61 bb ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0016c3c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016c3f:	59                   	pop    ecx
c0016c40:	8b 10                	mov    edx,DWORD PTR [eax]
c0016c42:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016c46:	55                   	push   ebp
c0016c47:	57                   	push   edi
c0016c48:	56                   	push   esi
c0016c49:	50                   	push   eax
c0016c4a:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016c4d:	83 c4 20             	add    esp,0x20
c0016c50:	83 ec 0c             	sub    esp,0xc
c0016c53:	68 cf b3 02 c0       	push   0xc002b3cf
c0016c58:	e8 40 bb ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0016c5d:	58                   	pop    eax
c0016c5e:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016c61:	e8 30 78 00 00       	call   c001e496 <Semaphore::release()>
c0016c66:	83 c4 1c             	add    esp,0x1c
c0016c69:	31 c0                	xor    eax,eax
c0016c6b:	5b                   	pop    ebx
c0016c6c:	5e                   	pop    esi
c0016c6d:	5f                   	pop    edi
c0016c6e:	5d                   	pop    ebp
c0016c6f:	c3                   	ret    

c0016c70 <VCache::read(unsigned long long, int, void*)>:
c0016c70:	55                   	push   ebp
c0016c71:	57                   	push   edi
c0016c72:	56                   	push   esi
c0016c73:	53                   	push   ebx
c0016c74:	83 ec 28             	sub    esp,0x28
c0016c77:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016c7b:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0016c7f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016c83:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c87:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016c8b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0016c8f:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0016c93:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016c96:	e8 8f 71 00 00       	call   c001de2a <Semaphore::acquire()>
c0016c9b:	c7 04 24 ef b3 02 c0 	mov    DWORD PTR [esp],0xc002b3ef
c0016ca2:	e8 f6 ba ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0016ca7:	83 c4 10             	add    esp,0x10
c0016caa:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016cae:	74 0c                	je     c0016cbc <VCache::read(unsigned long long, int, void*)+0x4c>
c0016cb0:	83 ec 0c             	sub    esp,0xc
c0016cb3:	53                   	push   ebx
c0016cb4:	e8 c5 fd ff ff       	call   c0016a7e <VCache::writeWriteBuffer()>
c0016cb9:	83 c4 10             	add    esp,0x10
c0016cbc:	83 fe 01             	cmp    esi,0x1
c0016cbf:	75 79                	jne    c0016d3a <VCache::read(unsigned long long, int, void*)+0xca>
c0016cc1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016cc4:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016ccb:	75 6d                	jne    c0016d3a <VCache::read(unsigned long long, int, void*)+0xca>
c0016ccd:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016cd0:	89 d1                	mov    ecx,edx
c0016cd2:	f7 d9                	neg    ecx
c0016cd4:	89 cf                	mov    edi,ecx
c0016cd6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016cda:	c1 ff 1f             	sar    edi,0x1f
c0016cdd:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0016ce0:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016ce4:	89 ce                	mov    esi,ecx
c0016ce6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016cea:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0016cee:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016cf2:	89 cf                	mov    edi,ecx
c0016cf4:	74 0a                	je     c0016d00 <VCache::read(unsigned long long, int, void*)+0x90>
c0016cf6:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016cf9:	75 05                	jne    c0016d00 <VCache::read(unsigned long long, int, void*)+0x90>
c0016cfb:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0016cfe:	74 1c                	je     c0016d1c <VCache::read(unsigned long long, int, void*)+0xac>
c0016d00:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016d04:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0016d07:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0016d0a:	83 ec 0c             	sub    esp,0xc
c0016d0d:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016d0f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016d12:	52                   	push   edx
c0016d13:	57                   	push   edi
c0016d14:	56                   	push   esi
c0016d15:	50                   	push   eax
c0016d16:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016d19:	83 c4 20             	add    esp,0x20
c0016d1c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016d1f:	89 ef                	mov    edi,ebp
c0016d21:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016d27:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016d2a:	8d 70 ff             	lea    esi,[eax-0x1]
c0016d2d:	23 34 24             	and    esi,DWORD PTR [esp]
c0016d30:	0f af f1             	imul   esi,ecx
c0016d33:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0016d36:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016d38:	eb 30                	jmp    c0016d6a <VCache::read(unsigned long long, int, void*)+0xfa>
c0016d3a:	83 ec 0c             	sub    esp,0xc
c0016d3d:	53                   	push   ebx
c0016d3e:	e8 2b fd ff ff       	call   c0016a6e <VCache::invalidateReadBuffer()>
c0016d43:	83 c4 0c             	add    esp,0xc
c0016d46:	55                   	push   ebp
c0016d47:	56                   	push   esi
c0016d48:	68 15 b4 02 c0       	push   0xc002b415
c0016d4d:	e8 4b ba ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0016d52:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016d55:	8b 10                	mov    edx,DWORD PTR [eax]
c0016d57:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016d5a:	56                   	push   esi
c0016d5b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016d5f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016d63:	50                   	push   eax
c0016d64:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016d67:	83 c4 20             	add    esp,0x20
c0016d6a:	83 ec 0c             	sub    esp,0xc
c0016d6d:	68 31 b4 02 c0       	push   0xc002b431
c0016d72:	e8 26 ba ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0016d77:	58                   	pop    eax
c0016d78:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016d7b:	e8 16 77 00 00       	call   c001e496 <Semaphore::release()>
c0016d80:	83 c4 2c             	add    esp,0x2c
c0016d83:	31 c0                	xor    eax,eax
c0016d85:	5b                   	pop    ebx
c0016d86:	5e                   	pop    esi
c0016d87:	5f                   	pop    edi
c0016d88:	5d                   	pop    ebp
c0016d89:	c3                   	ret    

c0016d8a <Video::putrect(int, int, int, int, unsigned int)>:
c0016d8a:	55                   	push   ebp
c0016d8b:	57                   	push   edi
c0016d8c:	56                   	push   esi
c0016d8d:	53                   	push   ebx
c0016d8e:	83 ec 1c             	sub    esp,0x1c
c0016d91:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016d95:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016d99:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016d9d:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016da1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016da5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016da9:	01 df                	add    edi,ebx
c0016dab:	39 fb                	cmp    ebx,edi
c0016dad:	7d 1f                	jge    c0016dce <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016daf:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016db3:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016db7:	7d 12                	jge    c0016dcb <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016db9:	8b 16                	mov    edx,DWORD PTR [esi]
c0016dbb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016dbf:	53                   	push   ebx
c0016dc0:	55                   	push   ebp
c0016dc1:	45                   	inc    ebp
c0016dc2:	56                   	push   esi
c0016dc3:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016dc6:	83 c4 10             	add    esp,0x10
c0016dc9:	eb e8                	jmp    c0016db3 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016dcb:	43                   	inc    ebx
c0016dcc:	eb dd                	jmp    c0016dab <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016dce:	83 c4 1c             	add    esp,0x1c
c0016dd1:	5b                   	pop    ebx
c0016dd2:	5e                   	pop    esi
c0016dd3:	5f                   	pop    edi
c0016dd4:	5d                   	pop    ebp
c0016dd5:	c3                   	ret    

c0016dd6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016dd6:	55                   	push   ebp
c0016dd7:	57                   	push   edi
c0016dd8:	31 ff                	xor    edi,edi
c0016dda:	56                   	push   esi
c0016ddb:	53                   	push   ebx
c0016ddc:	83 ec 1c             	sub    esp,0x1c
c0016ddf:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016de3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016de7:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016dee:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016df3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016df7:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016dfb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016dff:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016e02:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016e06:	01 f9                	add    ecx,edi
c0016e08:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016e0c:	7d 2f                	jge    c0016e3d <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016e0e:	31 f6                	xor    esi,esi
c0016e10:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016e14:	01 f2                	add    edx,esi
c0016e16:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016e1a:	7d 1a                	jge    c0016e36 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016e1c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016e1f:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016e22:	46                   	inc    esi
c0016e23:	51                   	push   ecx
c0016e24:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016e28:	52                   	push   edx
c0016e29:	55                   	push   ebp
c0016e2a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016e2d:	83 c4 10             	add    esp,0x10
c0016e30:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016e34:	eb da                	jmp    c0016e10 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016e36:	47                   	inc    edi
c0016e37:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016e3b:	eb c5                	jmp    c0016e02 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016e3d:	83 c4 1c             	add    esp,0x1c
c0016e40:	5b                   	pop    ebx
c0016e41:	5e                   	pop    esi
c0016e42:	5f                   	pop    edi
c0016e43:	5d                   	pop    ebp
c0016e44:	c3                   	ret    
c0016e45:	90                   	nop

c0016e46 <Video::blit(unsigned int*, int, int, int, int)>:
c0016e46:	55                   	push   ebp
c0016e47:	57                   	push   edi
c0016e48:	56                   	push   esi
c0016e49:	53                   	push   ebx
c0016e4a:	83 ec 1c             	sub    esp,0x1c
c0016e4d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016e51:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016e55:	85 c0                	test   eax,eax
c0016e57:	79 02                	jns    c0016e5b <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016e59:	31 c0                	xor    eax,eax
c0016e5b:	c1 e0 02             	shl    eax,0x2
c0016e5e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016e62:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e66:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016e6a:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016e6e:	39 d8                	cmp    eax,ebx
c0016e70:	7e 49                	jle    c0016ebb <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016e72:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016e78:	7c 41                	jl     c0016ebb <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016e7a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016e7e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016e82:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016e86:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016e8a:	39 f9                	cmp    ecx,edi
c0016e8c:	7e 22                	jle    c0016eb0 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016e8e:	83 c5 04             	add    ebp,0x4
c0016e91:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016e97:	7c 14                	jl     c0016ead <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016e99:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016e9b:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016e9e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016ea2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016ea6:	56                   	push   esi
c0016ea7:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016eaa:	83 c4 10             	add    esp,0x10
c0016ead:	47                   	inc    edi
c0016eae:	eb d2                	jmp    c0016e82 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016eb0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016eb4:	43                   	inc    ebx
c0016eb5:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016eb9:	eb ab                	jmp    c0016e66 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016ebb:	83 c4 1c             	add    esp,0x1c
c0016ebe:	5b                   	pop    ebx
c0016ebf:	5e                   	pop    esi
c0016ec0:	5f                   	pop    edi
c0016ec1:	5d                   	pop    ebp
c0016ec2:	c3                   	ret    
c0016ec3:	90                   	nop

c0016ec4 <Video::clearScreen(unsigned int)>:
c0016ec4:	57                   	push   edi
c0016ec5:	56                   	push   esi
c0016ec6:	53                   	push   ebx
c0016ec7:	31 db                	xor    ebx,ebx
c0016ec9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016ecd:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016ed3:	7e 1f                	jle    c0016ef4 <Video::clearScreen(unsigned int)+0x30>
c0016ed5:	31 ff                	xor    edi,edi
c0016ed7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016edd:	7e 12                	jle    c0016ef1 <Video::clearScreen(unsigned int)+0x2d>
c0016edf:	8b 06                	mov    eax,DWORD PTR [esi]
c0016ee1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016ee5:	53                   	push   ebx
c0016ee6:	57                   	push   edi
c0016ee7:	47                   	inc    edi
c0016ee8:	56                   	push   esi
c0016ee9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016eec:	83 c4 10             	add    esp,0x10
c0016eef:	eb e6                	jmp    c0016ed7 <Video::clearScreen(unsigned int)+0x13>
c0016ef1:	43                   	inc    ebx
c0016ef2:	eb d9                	jmp    c0016ecd <Video::clearScreen(unsigned int)+0x9>
c0016ef4:	5b                   	pop    ebx
c0016ef5:	5e                   	pop    esi
c0016ef6:	5f                   	pop    edi
c0016ef7:	c3                   	ret    

c0016ef8 <Video::putpixel(int, int, unsigned int)>:
c0016ef8:	c7 44 24 04 60 b4 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b460
c0016f00:	e9 84 30 00 00       	jmp    c0019f89 <Krnl::panic(char const*)>
c0016f05:	90                   	nop

c0016f06 <Video::Video(char const*)>:
c0016f06:	83 ec 0c             	sub    esp,0xc
c0016f09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f0d:	83 ec 08             	sub    esp,0x8
c0016f10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016f14:	50                   	push   eax
c0016f15:	e8 c0 ce ff ff       	call   c0013dda <Device::Device(char const*)>
c0016f1a:	83 c4 10             	add    esp,0x10
c0016f1d:	ba d0 b4 02 c0       	mov    edx,0xc002b4d0
c0016f22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f26:	89 10                	mov    DWORD PTR [eax],edx
c0016f28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f2c:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016f36:	90                   	nop
c0016f37:	83 c4 0c             	add    esp,0xc
c0016f3a:	c3                   	ret    
c0016f3b:	90                   	nop

c0016f3c <Video::~Video()>:
c0016f3c:	83 ec 0c             	sub    esp,0xc
c0016f3f:	ba d0 b4 02 c0       	mov    edx,0xc002b4d0
c0016f44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f48:	89 10                	mov    DWORD PTR [eax],edx
c0016f4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f4e:	83 ec 0c             	sub    esp,0xc
c0016f51:	50                   	push   eax
c0016f52:	e8 4d cb ff ff       	call   c0013aa4 <Device::~Device()>
c0016f57:	83 c4 10             	add    esp,0x10
c0016f5a:	90                   	nop
c0016f5b:	83 c4 0c             	add    esp,0xc
c0016f5e:	c3                   	ret    
c0016f5f:	90                   	nop

c0016f60 <Video::~Video()>:
c0016f60:	83 ec 0c             	sub    esp,0xc
c0016f63:	83 ec 0c             	sub    esp,0xc
c0016f66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016f6a:	e8 cd ff ff ff       	call   c0016f3c <Video::~Video()>
c0016f6f:	83 c4 10             	add    esp,0x10
c0016f72:	83 ec 08             	sub    esp,0x8
c0016f75:	68 64 01 00 00       	push   0x164
c0016f7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016f7e:	e8 42 b7 ff ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0016f83:	83 c4 10             	add    esp,0x10
c0016f86:	83 c4 0c             	add    esp,0xc
c0016f89:	c3                   	ret    

c0016f8a <Video::isMonochrome()>:
c0016f8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f8e:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016f94:	c3                   	ret    
c0016f95:	90                   	nop

c0016f96 <Video::getWidth()>:
c0016f96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f9a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016fa0:	c3                   	ret    
c0016fa1:	90                   	nop

c0016fa2 <Video::getHeight()>:
c0016fa2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016fa6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016fac:	c3                   	ret    
c0016fad:	90                   	nop

c0016fae <Video::drawCursor(int, int, unsigned char*, int)>:
c0016fae:	55                   	push   ebp
c0016faf:	57                   	push   edi
c0016fb0:	56                   	push   esi
c0016fb1:	53                   	push   ebx
c0016fb2:	83 ec 2c             	sub    esp,0x2c
c0016fb5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016fb9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016fbd:	83 f8 01             	cmp    eax,0x1
c0016fc0:	19 c9                	sbb    ecx,ecx
c0016fc2:	31 db                	xor    ebx,ebx
c0016fc4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016fc8:	89 cd                	mov    ebp,ecx
c0016fca:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016fd2:	f7 d5                	not    ebp
c0016fd4:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016fda:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016fde:	01 d8                	add    eax,ebx
c0016fe0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016fe4:	56                   	push   esi
c0016fe5:	e8 b8 ff ff ff       	call   c0016fa2 <Video::getHeight()>
c0016fea:	59                   	pop    ecx
c0016feb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016fef:	7e 70                	jle    c0017061 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016ff1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016ff5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016ff9:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016ffc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017000:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017004:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001700b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001700f:	89 f8                	mov    eax,edi
c0017011:	83 c0 20             	add    eax,0x20
c0017014:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017018:	56                   	push   esi
c0017019:	e8 78 ff ff ff       	call   c0016f96 <Video::getWidth()>
c001701e:	5a                   	pop    edx
c001701f:	39 c7                	cmp    edi,eax
c0017021:	7d 34                	jge    c0017057 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0017023:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0017028:	74 05                	je     c001702f <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c001702a:	8b 06                	mov    eax,DWORD PTR [esi]
c001702c:	55                   	push   ebp
c001702d:	eb 0d                	jmp    c001703c <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c001702f:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0017034:	74 12                	je     c0017048 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0017036:	8b 06                	mov    eax,DWORD PTR [esi]
c0017038:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001703c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017040:	57                   	push   edi
c0017041:	56                   	push   esi
c0017042:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017045:	83 c4 10             	add    esp,0x10
c0017048:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001704c:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0017050:	47                   	inc    edi
c0017051:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0017055:	75 c1                	jne    c0017018 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0017057:	43                   	inc    ebx
c0017058:	83 fb 20             	cmp    ebx,0x20
c001705b:	0f 85 79 ff ff ff    	jne    c0016fda <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0017061:	83 c4 2c             	add    esp,0x2c
c0017064:	5b                   	pop    ebx
c0017065:	5e                   	pop    esi
c0017066:	5f                   	pop    edi
c0017067:	5d                   	pop    ebp
c0017068:	c3                   	ret    
c0017069:	90                   	nop

c001706a <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001706a:	55                   	push   ebp
c001706b:	57                   	push   edi
c001706c:	56                   	push   esi
c001706d:	53                   	push   ebx
c001706e:	83 ec 28             	sub    esp,0x28
c0017071:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017075:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0017079:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c001707d:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0017081:	c1 e6 08             	shl    esi,0x8
c0017084:	01 c6                	add    esi,eax
c0017086:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c001708a:	c1 e0 08             	shl    eax,0x8
c001708d:	01 d0                	add    eax,edx
c001708f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017093:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017097:	0f af c6             	imul   eax,esi
c001709a:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00170a1:	50                   	push   eax
c00170a2:	e8 f2 84 ff ff       	call   c000f599 <malloc>
c00170a7:	83 c4 10             	add    esp,0x10
c00170aa:	89 c7                	mov    edi,eax
c00170ac:	85 c0                	test   eax,eax
c00170ae:	75 10                	jne    c00170c0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c00170b0:	83 ec 0c             	sub    esp,0xc
c00170b3:	68 81 b4 02 c0       	push   0xc002b481
c00170b8:	e8 cc 2e 00 00       	call   c0019f89 <Krnl::panic(char const*)>
c00170bd:	83 c4 10             	add    esp,0x10
c00170c0:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00170c3:	ba 12 00 00 00       	mov    edx,0x12
c00170c8:	84 c0                	test   al,al
c00170ca:	74 11                	je     c00170dd <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c00170cc:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c00170d0:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c00170d4:	c1 fa 03             	sar    edx,0x3
c00170d7:	0f af d1             	imul   edx,ecx
c00170da:	83 c2 12             	add    edx,0x12
c00170dd:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00170e1:	74 04                	je     c00170e7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c00170e3:	85 f6                	test   esi,esi
c00170e5:	75 12                	jne    c00170f9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c00170e7:	83 ec 0c             	sub    esp,0xc
c00170ea:	68 91 b4 02 c0       	push   0xc002b491
c00170ef:	e8 a9 b6 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00170f4:	e9 b8 00 00 00       	jmp    c00171b1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c00170f9:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c00170fd:	80 f9 02             	cmp    cl,0x2
c0017100:	0f 85 96 00 00 00    	jne    c001719c <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c0017106:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001710b:	75 0e                	jne    c001711b <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c001710d:	84 c0                	test   al,al
c001710f:	75 0a                	jne    c001711b <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0017111:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017114:	83 e8 18             	sub    eax,0x18
c0017117:	a8 f7                	test   al,0xf7
c0017119:	74 0a                	je     c0017125 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c001711b:	83 ec 0c             	sub    esp,0xc
c001711e:	68 a6 b4 02 c0       	push   0xc002b4a6
c0017123:	eb 7f                	jmp    c00171a4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0017125:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001712d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017135:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0017139:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017141:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0017145:	75 0c                	jne    c0017153 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0017147:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c001714c:	c1 e0 18             	shl    eax,0x18
c001714f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017153:	45                   	inc    ebp
c0017154:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c0017159:	c1 e1 10             	shl    ecx,0x10
c001715c:	89 c8                	mov    eax,ecx
c001715e:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c0017163:	c1 e1 08             	shl    ecx,0x8
c0017166:	09 c1                	or     ecx,eax
c0017168:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c001716c:	09 c1                	or     ecx,eax
c001716e:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c0017172:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c0017176:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001717a:	c1 f8 03             	sar    eax,0x3
c001717d:	01 c2                	add    edx,eax
c001717f:	89 e8                	mov    eax,ebp
c0017181:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0017185:	39 c6                	cmp    esi,eax
c0017187:	7f b0                	jg     c0017139 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c0017189:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001718d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017191:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0017194:	7e 22                	jle    c00171b8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c0017196:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c001719a:	eb 99                	jmp    c0017135 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001719c:	50                   	push   eax
c001719d:	50                   	push   eax
c001719e:	51                   	push   ecx
c001719f:	68 b4 b4 02 c0       	push   0xc002b4b4
c00171a4:	e8 f4 b5 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00171a9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00171ac:	e8 f8 83 ff ff       	call   c000f5a9 <free>
c00171b1:	83 c4 10             	add    esp,0x10
c00171b4:	31 ff                	xor    edi,edi
c00171b6:	eb 0f                	jmp    c00171c7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c00171b8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00171bc:	89 30                	mov    DWORD PTR [eax],esi
c00171be:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00171c2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00171c5:	89 30                	mov    DWORD PTR [eax],esi
c00171c7:	83 c4 1c             	add    esp,0x1c
c00171ca:	89 f8                	mov    eax,edi
c00171cc:	5b                   	pop    ebx
c00171cd:	5e                   	pop    esi
c00171ce:	5f                   	pop    edi
c00171cf:	5d                   	pop    ebp
c00171d0:	c3                   	ret    
c00171d1:	90                   	nop

c00171d2 <Video::putTGA(int, int, unsigned char*, int)>:
c00171d2:	55                   	push   ebp
c00171d3:	57                   	push   edi
c00171d4:	56                   	push   esi
c00171d5:	53                   	push   ebx
c00171d6:	83 ec 28             	sub    esp,0x28
c00171d9:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00171dd:	8d 44 24 18          	lea    eax,[esp+0x18]
c00171e1:	50                   	push   eax
c00171e2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00171e6:	50                   	push   eax
c00171e7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00171eb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00171ef:	56                   	push   esi
c00171f0:	e8 75 fe ff ff       	call   c001706a <Video::tgaParse(unsigned char*, int, int*, int*)>
c00171f5:	83 c4 20             	add    esp,0x20
c00171f8:	85 c0                	test   eax,eax
c00171fa:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00171fe:	74 35                	je     c0017235 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017200:	89 c7                	mov    edi,eax
c0017202:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017206:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001720a:	39 d8                	cmp    eax,ebx
c001720c:	7e 27                	jle    c0017235 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001720e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017212:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017216:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001721a:	39 e8                	cmp    eax,ebp
c001721c:	7e 14                	jle    c0017232 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c001721e:	8b 06                	mov    eax,DWORD PTR [esi]
c0017220:	83 c7 04             	add    edi,0x4
c0017223:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0017226:	53                   	push   ebx
c0017227:	55                   	push   ebp
c0017228:	45                   	inc    ebp
c0017229:	56                   	push   esi
c001722a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001722d:	83 c4 10             	add    esp,0x10
c0017230:	eb e0                	jmp    c0017212 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0017232:	43                   	inc    ebx
c0017233:	eb cd                	jmp    c0017202 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0017235:	83 c4 1c             	add    esp,0x1c
c0017238:	5b                   	pop    ebx
c0017239:	5e                   	pop    esi
c001723a:	5f                   	pop    edi
c001723b:	5d                   	pop    ebp
c001723c:	c3                   	ret    
c001723d:	90                   	nop

c001723e <ACPI::close(int, int, void*)>:
c001723e:	83 ec 1c             	sub    esp,0x1c
c0017241:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0017249:	74 0a                	je     c0017255 <ACPI::close(int, int, void*)+0x17>
c001724b:	b8 00 00 00 00       	mov    eax,0x0
c0017250:	e9 8a 00 00 00       	jmp    c00172df <ACPI::close(int, int, void*)+0xa1>
c0017255:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001725a:	75 27                	jne    c0017283 <ACPI::close(int, int, void*)+0x45>
c001725c:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c0017261:	85 c0                	test   eax,eax
c0017263:	74 07                	je     c001726c <ACPI::close(int, int, void*)+0x2e>
c0017265:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c001726a:	ff d0                	call   eax
c001726c:	83 ec 0c             	sub    esp,0xc
c001726f:	68 10 b5 02 c0       	push   0xc002b510
c0017274:	e8 10 2d 00 00       	call   c0019f89 <Krnl::panic(char const*)>
c0017279:	83 c4 10             	add    esp,0x10
c001727c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017281:	eb 5c                	jmp    c00172df <ACPI::close(int, int, void*)+0xa1>
c0017283:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0017288:	75 50                	jne    c00172da <ACPI::close(int, int, void*)+0x9c>
c001728a:	a1 44 e4 02 c0       	mov    eax,ds:0xc002e444
c001728f:	85 c0                	test   eax,eax
c0017291:	74 07                	je     c001729a <ACPI::close(int, int, void*)+0x5c>
c0017293:	a1 44 e4 02 c0       	mov    eax,ds:0xc002e444
c0017298:	ff d0                	call   eax
c001729a:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001729f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00172a4:	83 e0 02             	and    eax,0x2
c00172a7:	74 1c                	je     c00172c5 <ACPI::close(int, int, void*)+0x87>
c00172a9:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00172b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00172b4:	89 c2                	mov    edx,eax
c00172b6:	ec                   	in     al,dx
c00172b7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00172bb:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00172bf:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00172c3:	eb da                	jmp    c001729f <ACPI::close(int, int, void*)+0x61>
c00172c5:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00172cc:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00172d1:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00172d5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00172d9:	ee                   	out    dx,al
c00172da:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00172df:	83 c4 1c             	add    esp,0x1c
c00172e2:	c3                   	ret    

c00172e3 <findRSDP()>:
c00172e3:	83 ec 1c             	sub    esp,0x1c
c00172e6:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c00172eb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00172f1:	83 e0 04             	and    eax,0x4
c00172f4:	84 c0                	test   al,al
c00172f6:	75 07                	jne    c00172ff <findRSDP()+0x1c>
c00172f8:	b8 00 00 00 00       	mov    eax,0x0
c00172fd:	eb 6a                	jmp    c0017369 <findRSDP()+0x86>
c00172ff:	a1 14 de 02 c0       	mov    eax,ds:0xc002de14
c0017304:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017309:	7f 1b                	jg     c0017326 <findRSDP()+0x43>
c001730b:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c0017310:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017316:	83 e2 fb             	and    edx,0xfffffffb
c0017319:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001731f:	b8 00 00 00 00       	mov    eax,0x0
c0017324:	eb 43                	jmp    c0017369 <findRSDP()+0x86>
c0017326:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001732e:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017336:	77 2c                	ja     c0017364 <findRSDP()+0x81>
c0017338:	83 ec 04             	sub    esp,0x4
c001733b:	6a 08                	push   0x8
c001733d:	68 ab b5 02 c0       	push   0xc002b5ab
c0017342:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017346:	e8 01 93 fe ff       	call   c000064c <memcmp>
c001734b:	83 c4 10             	add    esp,0x10
c001734e:	85 c0                	test   eax,eax
c0017350:	0f 94 c0             	sete   al
c0017353:	84 c0                	test   al,al
c0017355:	74 06                	je     c001735d <findRSDP()+0x7a>
c0017357:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001735b:	eb 0c                	jmp    c0017369 <findRSDP()+0x86>
c001735d:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017362:	eb ca                	jmp    c001732e <findRSDP()+0x4b>
c0017364:	b8 00 00 00 00       	mov    eax,0x0
c0017369:	83 c4 1c             	add    esp,0x1c
c001736c:	c3                   	ret    

c001736d <loadACPITables(unsigned char*)>:
c001736d:	57                   	push   edi
c001736e:	56                   	push   esi
c001736f:	53                   	push   ebx
c0017370:	83 ec 60             	sub    esp,0x60
c0017373:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c0017378:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001737e:	83 e0 04             	and    eax,0x4
c0017381:	84 c0                	test   al,al
c0017383:	0f 84 33 02 00 00    	je     c00175bc <loadACPITables(unsigned char*)+0x24f>
c0017389:	a0 60 e6 02 c0       	mov    al,ds:0xc002e660
c001738e:	84 c0                	test   al,al
c0017390:	74 75                	je     c0017407 <loadACPITables(unsigned char*)+0x9a>
c0017392:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017396:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001739a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001739e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00173a1:	83 e8 24             	sub    eax,0x24
c00173a4:	c1 e8 03             	shr    eax,0x3
c00173a7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00173ab:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c00173b3:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00173b7:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c00173bb:	0f 8d b2 00 00 00    	jge    c0017473 <loadACPITables(unsigned char*)+0x106>
c00173c1:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00173c5:	83 c0 24             	add    eax,0x24
c00173c8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00173cc:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00173d0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00173d4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00173d8:	c1 e0 03             	shl    eax,0x3
c00173db:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c00173df:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00173e3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00173e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00173e8:	89 c1                	mov    ecx,eax
c00173ea:	a1 4c e4 02 c0       	mov    eax,ds:0xc002e44c
c00173ef:	8d 50 01             	lea    edx,[eax+0x1]
c00173f2:	89 15 4c e4 02 c0    	mov    DWORD PTR ds:0xc002e44c,edx
c00173f8:	89 ca                	mov    edx,ecx
c00173fa:	89 14 c5 64 e4 02 c0 	mov    DWORD PTR [eax*8-0x3ffd1b9c],edx
c0017401:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0017405:	eb ac                	jmp    c00173b3 <loadACPITables(unsigned char*)+0x46>
c0017407:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001740b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001740f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017413:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017416:	83 e8 24             	sub    eax,0x24
c0017419:	c1 e8 02             	shr    eax,0x2
c001741c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017420:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0017428:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001742c:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0017430:	7d 41                	jge    c0017473 <loadACPITables(unsigned char*)+0x106>
c0017432:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017436:	83 c0 24             	add    eax,0x24
c0017439:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001743d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017441:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017445:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017449:	c1 e0 02             	shl    eax,0x2
c001744c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017450:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017454:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017456:	a1 4c e4 02 c0       	mov    eax,ds:0xc002e44c
c001745b:	8d 50 01             	lea    edx,[eax+0x1]
c001745e:	89 15 4c e4 02 c0    	mov    DWORD PTR ds:0xc002e44c,edx
c0017464:	89 ca                	mov    edx,ecx
c0017466:	89 14 c5 64 e4 02 c0 	mov    DWORD PTR [eax*8-0x3ffd1b9c],edx
c001746d:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0017471:	eb b5                	jmp    c0017428 <loadACPITables(unsigned char*)+0xbb>
c0017473:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c001747b:	a1 4c e4 02 c0       	mov    eax,ds:0xc002e44c
c0017480:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0017484:	0f 8d 33 01 00 00    	jge    c00175bd <loadACPITables(unsigned char*)+0x250>
c001748a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001748e:	8b 04 c5 64 e4 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd1b9c]
c0017495:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017499:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001749d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00174a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00174a5:	25 ff 0f 00 00       	and    eax,0xfff
c00174aa:	89 c6                	mov    esi,eax
c00174ac:	8b 1d 30 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002df30
c00174b2:	83 ec 0c             	sub    esp,0xc
c00174b5:	6a 01                	push   0x1
c00174b7:	e8 63 9d ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c00174bc:	83 c4 10             	add    esp,0x10
c00174bf:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00174c3:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00174c9:	83 ec 0c             	sub    esp,0xc
c00174cc:	6a 01                	push   0x1
c00174ce:	6a 01                	push   0x1
c00174d0:	50                   	push   eax
c00174d1:	52                   	push   edx
c00174d2:	53                   	push   ebx
c00174d3:	e8 90 a8 ff ff       	call   c0011d68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00174d8:	83 c4 20             	add    esp,0x20
c00174db:	09 f0                	or     eax,esi
c00174dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00174e1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00174e5:	c1 e0 03             	shl    eax,0x3
c00174e8:	05 60 e4 02 c0       	add    eax,0xc002e460
c00174ed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00174f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00174f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00174f9:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0017501:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017505:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017509:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001750d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017511:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017515:	89 c6                	mov    esi,eax
c0017517:	89 d7                	mov    edi,edx
c0017519:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001751b:	89 c8                	mov    eax,ecx
c001751d:	89 fa                	mov    edx,edi
c001751f:	89 f3                	mov    ebx,esi
c0017521:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017525:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017529:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001752d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017531:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017534:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017538:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001753c:	05 00 10 00 00       	add    eax,0x1000
c0017541:	c1 e8 0c             	shr    eax,0xc
c0017544:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017548:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001754c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017550:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017554:	25 ff 0f 00 00       	and    eax,0xfff
c0017559:	89 c6                	mov    esi,eax
c001755b:	8b 1d 30 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002df30
c0017561:	83 ec 0c             	sub    esp,0xc
c0017564:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017568:	e8 b2 9c ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c001756d:	83 c4 10             	add    esp,0x10
c0017570:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017574:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001757a:	83 ec 0c             	sub    esp,0xc
c001757d:	6a 01                	push   0x1
c001757f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017583:	50                   	push   eax
c0017584:	52                   	push   edx
c0017585:	53                   	push   ebx
c0017586:	e8 dd a7 ff ff       	call   c0011d68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001758b:	83 c4 20             	add    esp,0x20
c001758e:	09 f0                	or     eax,esi
c0017590:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017594:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017598:	83 ec 0c             	sub    esp,0xc
c001759b:	50                   	push   eax
c001759c:	e8 5a a1 ff ff       	call   c00116fb <Virt::freeKernelVirtualPages(unsigned long)>
c00175a1:	83 c4 10             	add    esp,0x10
c00175a4:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00175a8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00175ac:	89 14 c5 64 e4 02 c0 	mov    DWORD PTR [eax*8-0x3ffd1b9c],edx
c00175b3:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c00175b7:	e9 bf fe ff ff       	jmp    c001747b <loadACPITables(unsigned char*)+0x10e>
c00175bc:	90                   	nop
c00175bd:	83 c4 60             	add    esp,0x60
c00175c0:	5b                   	pop    ebx
c00175c1:	5e                   	pop    esi
c00175c2:	5f                   	pop    edi
c00175c3:	c3                   	ret    

c00175c4 <findRSDT(unsigned char*)>:
c00175c4:	57                   	push   edi
c00175c5:	56                   	push   esi
c00175c6:	53                   	push   ebx
c00175c7:	83 ec 50             	sub    esp,0x50
c00175ca:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c00175cf:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00175d5:	83 e0 04             	and    eax,0x4
c00175d8:	84 c0                	test   al,al
c00175da:	75 0a                	jne    c00175e6 <findRSDT(unsigned char*)+0x22>
c00175dc:	b8 00 00 00 00       	mov    eax,0x0
c00175e1:	e9 21 01 00 00       	jmp    c0017707 <findRSDT(unsigned char*)+0x143>
c00175e6:	89 e0                	mov    eax,esp
c00175e8:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00175ec:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00175f0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00175f4:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c00175fc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017600:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017604:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017608:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001760c:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0017610:	89 c6                	mov    esi,eax
c0017612:	89 d7                	mov    edi,edx
c0017614:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017616:	89 c8                	mov    eax,ecx
c0017618:	89 fa                	mov    edx,edi
c001761a:	89 f3                	mov    ebx,esi
c001761c:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0017620:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0017624:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017628:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001762c:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0017630:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0017638:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001763c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017640:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017644:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017648:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001764c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017650:	25 ff 0f 00 00       	and    eax,0xfff
c0017655:	89 c6                	mov    esi,eax
c0017657:	8b 1d 30 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002df30
c001765d:	83 ec 0c             	sub    esp,0xc
c0017660:	6a 02                	push   0x2
c0017662:	e8 b8 9b ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0017667:	83 c4 10             	add    esp,0x10
c001766a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001766e:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017674:	83 ec 0c             	sub    esp,0xc
c0017677:	6a 01                	push   0x1
c0017679:	6a 02                	push   0x2
c001767b:	50                   	push   eax
c001767c:	52                   	push   edx
c001767d:	53                   	push   ebx
c001767e:	e8 e5 a6 ff ff       	call   c0011d68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017683:	83 c4 20             	add    esp,0x20
c0017686:	09 f0                	or     eax,esi
c0017688:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001768c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017690:	25 ff 0f 00 00       	and    eax,0xfff
c0017695:	89 c6                	mov    esi,eax
c0017697:	8b 1d 30 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002df30
c001769d:	83 ec 0c             	sub    esp,0xc
c00176a0:	6a 02                	push   0x2
c00176a2:	e8 78 9b ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c00176a7:	83 c4 10             	add    esp,0x10
c00176aa:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00176ae:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00176b4:	83 ec 0c             	sub    esp,0xc
c00176b7:	6a 01                	push   0x1
c00176b9:	6a 02                	push   0x2
c00176bb:	50                   	push   eax
c00176bc:	52                   	push   edx
c00176bd:	53                   	push   ebx
c00176be:	e8 a5 a6 ff ff       	call   c0011d68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00176c3:	83 c4 20             	add    esp,0x20
c00176c6:	09 f0                	or     eax,esi
c00176c8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00176cc:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00176d1:	75 11                	jne    c00176e4 <findRSDT(unsigned char*)+0x120>
c00176d3:	c6 05 60 e6 02 c0 00 	mov    BYTE PTR ds:0xc002e660,0x0
c00176da:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00176de:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00176e2:	eb 1f                	jmp    c0017703 <findRSDT(unsigned char*)+0x13f>
c00176e4:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c00176e9:	75 11                	jne    c00176fc <findRSDT(unsigned char*)+0x138>
c00176eb:	c6 05 60 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e660,0x1
c00176f2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00176f6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00176fa:	eb 07                	jmp    c0017703 <findRSDT(unsigned char*)+0x13f>
c00176fc:	b8 00 00 00 00       	mov    eax,0x0
c0017701:	eb 04                	jmp    c0017707 <findRSDT(unsigned char*)+0x143>
c0017703:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017707:	83 c4 50             	add    esp,0x50
c001770a:	5b                   	pop    ebx
c001770b:	5e                   	pop    esi
c001770c:	5f                   	pop    edi
c001770d:	c3                   	ret    

c001770e <findDataTable(unsigned char*, char*)>:
c001770e:	83 ec 1c             	sub    esp,0x1c
c0017711:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c0017716:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001771c:	83 e0 04             	and    eax,0x4
c001771f:	84 c0                	test   al,al
c0017721:	75 07                	jne    c001772a <findDataTable(unsigned char*, char*)+0x1c>
c0017723:	b8 00 00 00 00       	mov    eax,0x0
c0017728:	eb 52                	jmp    c001777c <findDataTable(unsigned char*, char*)+0x6e>
c001772a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017732:	a1 4c e4 02 c0       	mov    eax,ds:0xc002e44c
c0017737:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001773b:	7d 3a                	jge    c0017777 <findDataTable(unsigned char*, char*)+0x69>
c001773d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017741:	c1 e0 03             	shl    eax,0x3
c0017744:	05 60 e4 02 c0       	add    eax,0xc002e460
c0017749:	83 ec 04             	sub    esp,0x4
c001774c:	6a 04                	push   0x4
c001774e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017752:	50                   	push   eax
c0017753:	e8 f4 8e fe ff       	call   c000064c <memcmp>
c0017758:	83 c4 10             	add    esp,0x10
c001775b:	85 c0                	test   eax,eax
c001775d:	0f 94 c0             	sete   al
c0017760:	84 c0                	test   al,al
c0017762:	74 0d                	je     c0017771 <findDataTable(unsigned char*, char*)+0x63>
c0017764:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017768:	8b 04 c5 64 e4 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd1b9c]
c001776f:	eb 0b                	jmp    c001777c <findDataTable(unsigned char*, char*)+0x6e>
c0017771:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017775:	eb bb                	jmp    c0017732 <findDataTable(unsigned char*, char*)+0x24>
c0017777:	b8 00 00 00 00       	mov    eax,0x0
c001777c:	83 c4 1c             	add    esp,0x1c
c001777f:	c3                   	ret    

c0017780 <scanMADT()>:
c0017780:	53                   	push   ebx
c0017781:	83 ec 38             	sub    esp,0x38
c0017784:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c0017789:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001778f:	83 e0 04             	and    eax,0x4
c0017792:	84 c0                	test   al,al
c0017794:	0f 84 4a 04 00 00    	je     c0017be4 <scanMADT()+0x464>
c001779a:	e8 44 fb ff ff       	call   c00172e3 <findRSDP()>
c001779f:	a3 6c e6 02 c0       	mov    ds:0xc002e66c,eax
c00177a4:	a1 6c e6 02 c0       	mov    eax,ds:0xc002e66c
c00177a9:	85 c0                	test   eax,eax
c00177ab:	75 19                	jne    c00177c6 <scanMADT()+0x46>
c00177ad:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c00177b2:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00177b8:	83 e2 fb             	and    edx,0xfffffffb
c00177bb:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00177c1:	e9 22 04 00 00       	jmp    c0017be8 <scanMADT()+0x468>
c00177c6:	a1 6c e6 02 c0       	mov    eax,ds:0xc002e66c
c00177cb:	83 ec 0c             	sub    esp,0xc
c00177ce:	50                   	push   eax
c00177cf:	e8 f0 fd ff ff       	call   c00175c4 <findRSDT(unsigned char*)>
c00177d4:	83 c4 10             	add    esp,0x10
c00177d7:	a3 68 e6 02 c0       	mov    ds:0xc002e668,eax
c00177dc:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c00177e1:	85 c0                	test   eax,eax
c00177e3:	75 19                	jne    c00177fe <scanMADT()+0x7e>
c00177e5:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c00177ea:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00177f0:	83 e2 fb             	and    edx,0xfffffffb
c00177f3:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00177f9:	e9 ea 03 00 00       	jmp    c0017be8 <scanMADT()+0x468>
c00177fe:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0017803:	83 ec 0c             	sub    esp,0xc
c0017806:	50                   	push   eax
c0017807:	e8 61 fb ff ff       	call   c001736d <loadACPITables(unsigned char*)>
c001780c:	83 c4 10             	add    esp,0x10
c001780f:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0017814:	83 ec 08             	sub    esp,0x8
c0017817:	68 b4 b5 02 c0       	push   0xc002b5b4
c001781c:	50                   	push   eax
c001781d:	e8 ec fe ff ff       	call   c001770e <findDataTable(unsigned char*, char*)>
c0017822:	83 c4 10             	add    esp,0x10
c0017825:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017829:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c001782e:	75 19                	jne    c0017849 <scanMADT()+0xc9>
c0017830:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c0017835:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001783b:	83 e2 fe             	and    edx,0xfffffffe
c001783e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017844:	e9 9f 03 00 00       	jmp    c0017be8 <scanMADT()+0x468>
c0017849:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017851:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017855:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017858:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001785c:	0f 87 86 03 00 00    	ja     c0017be8 <scanMADT()+0x468>
c0017862:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c001786a:	0f 87 78 03 00 00    	ja     c0017be8 <scanMADT()+0x468>
c0017870:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017874:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017878:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001787c:	8d 50 01             	lea    edx,[eax+0x1]
c001787f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017883:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017887:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001788b:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001788f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017893:	8d 50 01             	lea    edx,[eax+0x1]
c0017896:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001789a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001789e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00178a2:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00178a6:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c00178ab:	0f 86 36 03 00 00    	jbe    c0017be7 <scanMADT()+0x467>
c00178b1:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c00178b6:	75 57                	jne    c001790f <scanMADT()+0x18f>
c00178b8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178bc:	8d 50 01             	lea    edx,[eax+0x1]
c00178bf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00178c3:	8a 15 60 e8 02 c0    	mov    dl,BYTE PTR ds:0xc002e860
c00178c9:	0f b6 d2             	movzx  edx,dl
c00178cc:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00178d0:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00178d4:	88 82 a0 e8 02 c0    	mov    BYTE PTR [edx-0x3ffd1760],al
c00178da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178de:	8d 50 01             	lea    edx,[eax+0x1]
c00178e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00178e5:	8a 15 60 e8 02 c0    	mov    dl,BYTE PTR ds:0xc002e860
c00178eb:	8d 4a 01             	lea    ecx,[edx+0x1]
c00178ee:	88 0d 60 e8 02 c0    	mov    BYTE PTR ds:0xc002e860,cl
c00178f4:	0f b6 d2             	movzx  edx,dl
c00178f7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00178fb:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00178ff:	88 82 80 e8 02 c0    	mov    BYTE PTR [edx-0x3ffd1780],al
c0017905:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001790a:	e9 c1 02 00 00       	jmp    c0017bd0 <scanMADT()+0x450>
c001790f:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017914:	0f 85 14 01 00 00    	jne    c0017a2e <scanMADT()+0x2ae>
c001791a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001791e:	8d 50 01             	lea    edx,[eax+0x1]
c0017921:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017925:	8a 15 20 e7 02 c0    	mov    dl,BYTE PTR ds:0xc002e720
c001792b:	0f b6 d2             	movzx  edx,dl
c001792e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017932:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017936:	88 82 40 e7 02 c0    	mov    BYTE PTR [edx-0x3ffd18c0],al
c001793c:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017940:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017948:	01 d0                	add    eax,edx
c001794a:	83 c0 2c             	add    eax,0x2c
c001794d:	8a 00                	mov    al,BYTE PTR [eax]
c001794f:	0f b6 d0             	movzx  edx,al
c0017952:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017956:	8d 48 01             	lea    ecx,[eax+0x1]
c0017959:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001795d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017961:	0f b6 c0             	movzx  eax,al
c0017964:	c1 e0 08             	shl    eax,0x8
c0017967:	89 d1                	mov    ecx,edx
c0017969:	09 c1                	or     ecx,eax
c001796b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001796f:	8d 50 02             	lea    edx,[eax+0x2]
c0017972:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017976:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001797a:	0f b6 c0             	movzx  eax,al
c001797d:	c1 e0 10             	shl    eax,0x10
c0017980:	09 c1                	or     ecx,eax
c0017982:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017986:	8d 50 03             	lea    edx,[eax+0x3]
c0017989:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001798d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017991:	0f b6 c0             	movzx  eax,al
c0017994:	c1 e0 18             	shl    eax,0x18
c0017997:	09 c1                	or     ecx,eax
c0017999:	89 ca                	mov    edx,ecx
c001799b:	a0 20 e7 02 c0       	mov    al,ds:0xc002e720
c00179a0:	0f b6 c0             	movzx  eax,al
c00179a3:	89 14 85 60 e7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd18a0],edx
c00179aa:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00179af:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179b7:	01 d0                	add    eax,edx
c00179b9:	83 c0 2c             	add    eax,0x2c
c00179bc:	8a 00                	mov    al,BYTE PTR [eax]
c00179be:	0f b6 d0             	movzx  edx,al
c00179c1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179c5:	8d 48 01             	lea    ecx,[eax+0x1]
c00179c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179cc:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00179d0:	0f b6 c0             	movzx  eax,al
c00179d3:	c1 e0 08             	shl    eax,0x8
c00179d6:	89 d1                	mov    ecx,edx
c00179d8:	09 c1                	or     ecx,eax
c00179da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179de:	8d 50 02             	lea    edx,[eax+0x2]
c00179e1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179e5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00179e9:	0f b6 c0             	movzx  eax,al
c00179ec:	c1 e0 10             	shl    eax,0x10
c00179ef:	09 c1                	or     ecx,eax
c00179f1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179f5:	8d 50 03             	lea    edx,[eax+0x3]
c00179f8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179fc:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017a00:	0f b6 c0             	movzx  eax,al
c0017a03:	c1 e0 18             	shl    eax,0x18
c0017a06:	09 c1                	or     ecx,eax
c0017a08:	89 ca                	mov    edx,ecx
c0017a0a:	a0 20 e7 02 c0       	mov    al,ds:0xc002e720
c0017a0f:	0f b6 c0             	movzx  eax,al
c0017a12:	89 14 85 e0 e7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1820],edx
c0017a19:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017a1e:	a0 20 e7 02 c0       	mov    al,ds:0xc002e720
c0017a23:	40                   	inc    eax
c0017a24:	a2 20 e7 02 c0       	mov    ds:0xc002e720,al
c0017a29:	e9 a2 01 00 00       	jmp    c0017bd0 <scanMADT()+0x450>
c0017a2e:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017a33:	0f 85 e9 00 00 00    	jne    c0017b22 <scanMADT()+0x3a2>
c0017a39:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a3d:	8d 50 01             	lea    edx,[eax+0x1]
c0017a40:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a44:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a48:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017a4c:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017a50:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a54:	8d 50 01             	lea    edx,[eax+0x1]
c0017a57:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a5b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a5f:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017a63:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017a67:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a6f:	01 d0                	add    eax,edx
c0017a71:	83 c0 2c             	add    eax,0x2c
c0017a74:	8a 00                	mov    al,BYTE PTR [eax]
c0017a76:	0f b6 d0             	movzx  edx,al
c0017a79:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a7d:	8d 48 01             	lea    ecx,[eax+0x1]
c0017a80:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a84:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017a88:	0f b6 c0             	movzx  eax,al
c0017a8b:	c1 e0 08             	shl    eax,0x8
c0017a8e:	89 d1                	mov    ecx,edx
c0017a90:	09 c1                	or     ecx,eax
c0017a92:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a96:	8d 50 02             	lea    edx,[eax+0x2]
c0017a99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a9d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017aa1:	0f b6 c0             	movzx  eax,al
c0017aa4:	c1 e0 10             	shl    eax,0x10
c0017aa7:	09 c1                	or     ecx,eax
c0017aa9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017aad:	8d 50 03             	lea    edx,[eax+0x3]
c0017ab0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ab4:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017ab8:	0f b6 c0             	movzx  eax,al
c0017abb:	c1 e0 18             	shl    eax,0x18
c0017abe:	09 c8                	or     eax,ecx
c0017ac0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017ac4:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017ac9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017acd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ad1:	01 d0                	add    eax,edx
c0017ad3:	83 c0 2c             	add    eax,0x2c
c0017ad6:	8a 00                	mov    al,BYTE PTR [eax]
c0017ad8:	0f b6 c0             	movzx  eax,al
c0017adb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017adf:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017ae2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ae6:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017aea:	0f b6 d2             	movzx  edx,dl
c0017aed:	c1 e2 08             	shl    edx,0x8
c0017af0:	09 d0                	or     eax,edx
c0017af2:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017af7:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017afc:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017b01:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017b05:	88 90 20 d0 02 c0    	mov    BYTE PTR [eax-0x3ffd2fe0],dl
c0017b0b:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017b10:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017b15:	66 89 84 12 00 e7 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd1900],ax
c0017b1d:	e9 ae 00 00 00       	jmp    c0017bd0 <scanMADT()+0x450>
c0017b22:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017b27:	0f 85 97 00 00 00    	jne    c0017bc4 <scanMADT()+0x444>
c0017b2d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b31:	8d 50 01             	lea    edx,[eax+0x1]
c0017b34:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017b38:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b3c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017b40:	0f b6 c0             	movzx  eax,al
c0017b43:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017b47:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b4b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b4f:	01 d0                	add    eax,edx
c0017b51:	83 c0 2c             	add    eax,0x2c
c0017b54:	8a 00                	mov    al,BYTE PTR [eax]
c0017b56:	0f b6 d0             	movzx  edx,al
c0017b59:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b5d:	8d 48 01             	lea    ecx,[eax+0x1]
c0017b60:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b64:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017b68:	0f b6 c0             	movzx  eax,al
c0017b6b:	c1 e0 08             	shl    eax,0x8
c0017b6e:	09 d0                	or     eax,edx
c0017b70:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b74:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017b79:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b7d:	8d 50 01             	lea    edx,[eax+0x1]
c0017b80:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017b84:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b88:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017b8c:	0f b6 c0             	movzx  eax,al
c0017b8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017b93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b97:	c1 e0 08             	shl    eax,0x8
c0017b9a:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017b9e:	89 c1                	mov    ecx,eax
c0017ba0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017ba4:	c1 e0 18             	shl    eax,0x18
c0017ba7:	89 c3                	mov    ebx,eax
c0017ba9:	a1 70 e6 02 c0       	mov    eax,ds:0xc002e670
c0017bae:	8d 50 01             	lea    edx,[eax+0x1]
c0017bb1:	89 15 70 e6 02 c0    	mov    DWORD PTR ds:0xc002e670,edx
c0017bb7:	09 d9                	or     ecx,ebx
c0017bb9:	89 ca                	mov    edx,ecx
c0017bbb:	89 14 85 80 e6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1980],edx
c0017bc2:	eb 0c                	jmp    c0017bd0 <scanMADT()+0x450>
c0017bc4:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017bc9:	75 05                	jne    c0017bd0 <scanMADT()+0x450>
c0017bcb:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017bd0:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017bd5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017bd9:	01 d0                	add    eax,edx
c0017bdb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017bdf:	e9 6d fc ff ff       	jmp    c0017851 <scanMADT()+0xd1>
c0017be4:	90                   	nop
c0017be5:	eb 01                	jmp    c0017be8 <scanMADT()+0x468>
c0017be7:	90                   	nop
c0017be8:	83 c4 38             	add    esp,0x38
c0017beb:	5b                   	pop    ebx
c0017bec:	c3                   	ret    
c0017bed:	90                   	nop

c0017bee <ACPI::ACPI()>:
c0017bee:	83 ec 0c             	sub    esp,0xc
c0017bf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bf5:	83 ec 08             	sub    esp,0x8
c0017bf8:	68 b9 b5 02 c0       	push   0xc002b5b9
c0017bfd:	50                   	push   eax
c0017bfe:	e8 d7 c1 ff ff       	call   c0013dda <Device::Device(char const*)>
c0017c03:	83 c4 10             	add    esp,0x10
c0017c06:	ba 14 b7 02 c0       	mov    edx,0xc002b714
c0017c0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c0f:	89 10                	mov    DWORD PTR [eax],edx
c0017c11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c15:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017c1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c20:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017c2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c2e:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017c38:	e8 43 fb ff ff       	call   c0017780 <scanMADT()>
c0017c3d:	90                   	nop
c0017c3e:	83 c4 0c             	add    esp,0xc
c0017c41:	c3                   	ret    

c0017c42 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017c42:	83 ec 2c             	sub    esp,0x2c
c0017c45:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017c49:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017c4d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017c51:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017c55:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017c5a:	88 d0                	mov    al,dl
c0017c5c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017c60:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017c65:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017c6d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c71:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017c77:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017c7b:	0f 8d 97 00 00 00    	jge    c0017d18 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017c81:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c85:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017c89:	83 c2 2a             	add    edx,0x2a
c0017c8c:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017c90:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017c95:	75 78                	jne    c0017d0f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017c97:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c9b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017c9f:	83 c2 2a             	add    edx,0x2a
c0017ca2:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017ca6:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017caa:	75 63                	jne    c0017d0f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017cac:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017cb1:	74 3a                	je     c0017ced <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017cb3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017cb7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017cbb:	83 c2 2a             	add    edx,0x2a
c0017cbe:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017cc2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017cc6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017cc9:	39 c2                	cmp    edx,eax
c0017ccb:	74 10                	je     c0017cdd <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017ccd:	83 ec 0c             	sub    esp,0xc
c0017cd0:	68 34 b5 02 c0       	push   0xc002b534
c0017cd5:	e8 af 22 00 00       	call   c0019f89 <Krnl::panic(char const*)>
c0017cda:	83 c4 10             	add    esp,0x10
c0017cdd:	83 ec 0c             	sub    esp,0xc
c0017ce0:	68 be b5 02 c0       	push   0xc002b5be
c0017ce5:	e8 9f 22 00 00       	call   c0019f89 <Krnl::panic(char const*)>
c0017cea:	83 c4 10             	add    esp,0x10
c0017ced:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017cf1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017cf5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017cf9:	83 c2 2a             	add    edx,0x2a
c0017cfc:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017d00:	8b 02                	mov    eax,DWORD PTR [edx]
c0017d02:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017d05:	89 01                	mov    DWORD PTR [ecx],eax
c0017d07:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017d0a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017d0f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017d13:	e9 55 ff ff ff       	jmp    c0017c6d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017d18:	90                   	nop
c0017d19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d1d:	83 c4 2c             	add    esp,0x2c
c0017d20:	c2 04 00             	ret    0x4
c0017d23:	90                   	nop

c0017d24 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017d24:	83 ec 1c             	sub    esp,0x1c
c0017d27:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d2b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017d2f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017d33:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017d38:	88 c8                	mov    al,cl
c0017d3a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017d3e:	88 d0                	mov    al,dl
c0017d40:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017d44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d48:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017d4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d52:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017d55:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017d59:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017d5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d61:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017d67:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017d6b:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017d6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d72:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017d77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d7b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017d81:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017d85:	8d 48 01             	lea    ecx,[eax+0x1]
c0017d88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d8c:	83 c2 2a             	add    edx,0x2a
c0017d8f:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017d93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d97:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017da1:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017da4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017da8:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017dac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017db0:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017db6:	8d 50 01             	lea    edx,[eax+0x1]
c0017db9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017dbd:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017dc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017dc7:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017dcd:	3d 00 02 00 00       	cmp    eax,0x200
c0017dd2:	75 10                	jne    c0017de4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017dd4:	83 ec 0c             	sub    esp,0xc
c0017dd7:	68 cd b5 02 c0       	push   0xc002b5cd
c0017ddc:	e8 a8 21 00 00       	call   c0019f89 <Krnl::panic(char const*)>
c0017de1:	83 c4 10             	add    esp,0x10
c0017de4:	90                   	nop
c0017de5:	83 c4 1c             	add    esp,0x1c
c0017de8:	c3                   	ret    
c0017de9:	90                   	nop

c0017dea <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017dea:	b8 00 00 00 00       	mov    eax,0x0
c0017def:	c3                   	ret    

c0017df0 <ACPI::detectPCI()>:
c0017df0:	53                   	push   ebx
c0017df1:	83 ec 28             	sub    esp,0x28
c0017df4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017df9:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0017dfe:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c0017e03:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017e09:	83 e0 04             	and    eax,0x4
c0017e0c:	84 c0                	test   al,al
c0017e0e:	74 2b                	je     c0017e3b <ACPI::detectPCI()+0x4b>
c0017e10:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0017e15:	83 ec 08             	sub    esp,0x8
c0017e18:	68 ea b5 02 c0       	push   0xc002b5ea
c0017e1d:	50                   	push   eax
c0017e1e:	e8 eb f8 ff ff       	call   c001770e <findDataTable(unsigned char*, char*)>
c0017e23:	83 c4 10             	add    esp,0x10
c0017e26:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017e2a:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017e2f:	74 0a                	je     c0017e3b <ACPI::detectPCI()+0x4b>
c0017e31:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017e36:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017e3b:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0017e43:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017e47:	8a 00                	mov    al,BYTE PTR [eax]
c0017e49:	3c 01                	cmp    al,0x1
c0017e4b:	75 0c                	jne    c0017e59 <ACPI::detectPCI()+0x69>
c0017e4d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017e52:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017e57:	eb 26                	jmp    c0017e7f <ACPI::detectPCI()+0x8f>
c0017e59:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017e5d:	8a 00                	mov    al,BYTE PTR [eax]
c0017e5f:	3c 02                	cmp    al,0x2
c0017e61:	75 1c                	jne    c0017e7f <ACPI::detectPCI()+0x8f>
c0017e63:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017e68:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017e6d:	74 10                	je     c0017e7f <ACPI::detectPCI()+0x8f>
c0017e6f:	83 ec 0c             	sub    esp,0xc
c0017e72:	68 64 b5 02 c0       	push   0xc002b564
c0017e77:	e8 0d 21 00 00       	call   c0019f89 <Krnl::panic(char const*)>
c0017e7c:	83 c4 10             	add    esp,0x10
c0017e7f:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017e83:	83 f0 01             	xor    eax,0x1
c0017e86:	84 c0                	test   al,al
c0017e88:	74 3f                	je     c0017ec9 <ACPI::detectPCI()+0xd9>
c0017e8a:	e8 c1 82 fe ff       	call   c0000150 <manualPCIProbe>
c0017e8f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017e93:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017e98:	75 0c                	jne    c0017ea6 <ACPI::detectPCI()+0xb6>
c0017e9a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017e9f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017ea4:	eb 23                	jmp    c0017ec9 <ACPI::detectPCI()+0xd9>
c0017ea6:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c0017eab:	75 1c                	jne    c0017ec9 <ACPI::detectPCI()+0xd9>
c0017ead:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017eb2:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017eb7:	74 10                	je     c0017ec9 <ACPI::detectPCI()+0xd9>
c0017eb9:	83 ec 0c             	sub    esp,0xc
c0017ebc:	68 64 b5 02 c0       	push   0xc002b564
c0017ec1:	e8 c3 20 00 00       	call   c0019f89 <Krnl::panic(char const*)>
c0017ec6:	83 c4 10             	add    esp,0x10
c0017ec9:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017ece:	74 7e                	je     c0017f4e <ACPI::detectPCI()+0x15e>
c0017ed0:	83 ec 0c             	sub    esp,0xc
c0017ed3:	68 ef b5 02 c0       	push   0xc002b5ef
c0017ed8:	e8 16 77 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017edd:	83 c4 10             	add    esp,0x10
c0017ee0:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c0017ee8:	83 ec 0c             	sub    esp,0xc
c0017eeb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017eef:	e8 a5 76 ff ff       	call   c000f599 <malloc>
c0017ef4:	83 c4 10             	add    esp,0x10
c0017ef7:	89 c3                	mov    ebx,eax
c0017ef9:	83 ec 0c             	sub    esp,0xc
c0017efc:	53                   	push   ebx
c0017efd:	e8 c2 a5 00 00       	call   c00224c4 <PCI::PCI()>
c0017f02:	83 c4 10             	add    esp,0x10
c0017f05:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017f09:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017f0d:	83 ec 08             	sub    esp,0x8
c0017f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017f14:	50                   	push   eax
c0017f15:	e8 bc bc ff ff       	call   c0013bd6 <Device::addChild(Device*)>
c0017f1a:	83 c4 10             	add    esp,0x10
c0017f1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017f21:	8b 00                	mov    eax,DWORD PTR [eax]
c0017f23:	83 c0 08             	add    eax,0x8
c0017f26:	8b 00                	mov    eax,DWORD PTR [eax]
c0017f28:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017f2d:	74 07                	je     c0017f36 <ACPI::detectPCI()+0x146>
c0017f2f:	ba 01 00 00 00       	mov    edx,0x1
c0017f34:	eb 05                	jmp    c0017f3b <ACPI::detectPCI()+0x14b>
c0017f36:	ba 02 00 00 00       	mov    edx,0x2
c0017f3b:	6a 00                	push   0x0
c0017f3d:	6a 00                	push   0x0
c0017f3f:	52                   	push   edx
c0017f40:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017f44:	ff d0                	call   eax
c0017f46:	83 c4 10             	add    esp,0x10
c0017f49:	e9 9e 00 00 00       	jmp    c0017fec <ACPI::detectPCI()+0x1fc>
c0017f4e:	83 ec 0c             	sub    esp,0xc
c0017f51:	68 07 b6 02 c0       	push   0xc002b607
c0017f56:	e8 42 a8 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0017f5b:	83 c4 10             	add    esp,0x10
c0017f5e:	83 ec 0c             	sub    esp,0xc
c0017f61:	68 12 b6 02 c0       	push   0xc002b612
c0017f66:	e8 88 76 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017f6b:	83 c4 10             	add    esp,0x10
c0017f6e:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c0017f75:	83 ec 0c             	sub    esp,0xc
c0017f78:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017f7c:	e8 18 76 ff ff       	call   c000f599 <malloc>
c0017f81:	83 c4 10             	add    esp,0x10
c0017f84:	89 c3                	mov    ebx,eax
c0017f86:	83 ec 0c             	sub    esp,0xc
c0017f89:	53                   	push   ebx
c0017f8a:	e8 9f b0 00 00       	call   c002302e <IDE::IDE()>
c0017f8f:	83 c4 10             	add    esp,0x10
c0017f92:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0017f96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017f9a:	83 ec 08             	sub    esp,0x8
c0017f9d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017fa1:	50                   	push   eax
c0017fa2:	e8 2f bc ff ff       	call   c0013bd6 <Device::addChild(Device*)>
c0017fa7:	83 c4 10             	add    esp,0x10
c0017faa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017fae:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0017fb8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017fbc:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0017fc5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017fc9:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0017fd2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017fd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0017fd8:	83 c0 08             	add    eax,0x8
c0017fdb:	8b 00                	mov    eax,DWORD PTR [eax]
c0017fdd:	6a 00                	push   0x0
c0017fdf:	6a 00                	push   0x0
c0017fe1:	6a 00                	push   0x0
c0017fe3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017fe7:	ff d0                	call   eax
c0017fe9:	83 c4 10             	add    esp,0x10
c0017fec:	90                   	nop
c0017fed:	83 c4 28             	add    esp,0x28
c0017ff0:	5b                   	pop    ebx
c0017ff1:	c3                   	ret    

c0017ff2 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017ff2:	83 ec 1c             	sub    esp,0x1c
c0017ff5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017ff9:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017ffc:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018000:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c0018005:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001800a:	83 ec 08             	sub    esp,0x8
c001800d:	52                   	push   edx
c001800e:	50                   	push   eax
c001800f:	e8 9c 6b ff ff       	call   c000ebb0 <Computer::readCMOS(unsigned char)>
c0018014:	83 c4 10             	add    esp,0x10
c0018017:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001801b:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c0018020:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018025:	83 ec 04             	sub    esp,0x4
c0018028:	6a 01                	push   0x1
c001802a:	52                   	push   edx
c001802b:	50                   	push   eax
c001802c:	e8 b1 6c ff ff       	call   c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018031:	83 c4 10             	add    esp,0x10
c0018034:	90                   	nop
c0018035:	83 c4 1c             	add    esp,0x1c
c0018038:	c3                   	ret    
c0018039:	90                   	nop

c001803a <ACPI::sleep()>:
c001803a:	83 ec 0c             	sub    esp,0xc
c001803d:	a1 40 e4 02 c0       	mov    eax,ds:0xc002e440
c0018042:	85 c0                	test   eax,eax
c0018044:	74 07                	je     c001804d <ACPI::sleep()+0x13>
c0018046:	a1 40 e4 02 c0       	mov    eax,ds:0xc002e440
c001804b:	ff d0                	call   eax
c001804d:	90                   	nop
c001804e:	83 c4 0c             	add    esp,0xc
c0018051:	c3                   	ret    

c0018052 <ACPI::open(int, int, void*)>:
c0018052:	57                   	push   edi
c0018053:	56                   	push   esi
c0018054:	53                   	push   ebx
c0018055:	81 ec 60 01 00 00    	sub    esp,0x160
c001805b:	83 ec 0c             	sub    esp,0xc
c001805e:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0018065:	e8 86 fd ff ff       	call   c0017df0 <ACPI::detectPCI()>
c001806a:	83 c4 10             	add    esp,0x10
c001806d:	83 ec 0c             	sub    esp,0xc
c0018070:	68 8c b5 02 c0       	push   0xc002b58c
c0018075:	e8 79 75 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c001807a:	83 c4 10             	add    esp,0x10
c001807d:	83 ec 0c             	sub    esp,0xc
c0018080:	68 27 b6 02 c0       	push   0xc002b627
c0018085:	e8 55 46 00 00       	call   c001c6df <Thr::loadKernelSymbolTable(char const*)>
c001808a:	83 c4 10             	add    esp,0x10
c001808d:	83 ec 0c             	sub    esp,0xc
c0018090:	68 45 b6 02 c0       	push   0xc002b645
c0018095:	e8 59 75 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c001809a:	83 c4 10             	add    esp,0x10
c001809d:	83 ec 04             	sub    esp,0x4
c00180a0:	6a 0c                	push   0xc
c00180a2:	68 60 b6 02 c0       	push   0xc002b660
c00180a7:	68 71 b6 02 c0       	push   0xc002b671
c00180ac:	e8 94 2c 00 00       	call   c001ad45 <Reg::readIntWithDefault(char*, char*, int)>
c00180b1:	83 c4 10             	add    esp,0x10
c00180b4:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c00180bb:	83 ec 0c             	sub    esp,0xc
c00180be:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c00180c5:	e8 5f 93 ff ff       	call   c0011429 <Virt::setupPageSwapping(int)>
c00180ca:	83 c4 10             	add    esp,0x10
c00180cd:	83 ec 0c             	sub    esp,0xc
c00180d0:	68 f5 9f 02 c0       	push   0xc0029ff5
c00180d5:	e8 19 75 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c00180da:	83 c4 10             	add    esp,0x10
c00180dd:	8b 1d c8 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002ddc8
c00180e3:	83 ec 08             	sub    esp,0x8
c00180e6:	6a 01                	push   0x1
c00180e8:	68 78 b6 02 c0       	push   0xc002b678
c00180ed:	e8 64 50 00 00       	call   c001d156 <Thr::loadDLL(char const*, bool)>
c00180f2:	83 c4 10             	add    esp,0x10
c00180f5:	83 ec 08             	sub    esp,0x8
c00180f8:	53                   	push   ebx
c00180f9:	50                   	push   eax
c00180fa:	e8 88 52 00 00       	call   c001d387 <Thr::executeDLL(unsigned long, void*)>
c00180ff:	83 c4 10             	add    esp,0x10
c0018102:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0018109:	83 ec 08             	sub    esp,0x8
c001810c:	6a 12                	push   0x12
c001810e:	50                   	push   eax
c001810f:	e8 46 be ff ff       	call   c0013f5a <getDevicesOfType(DeviceType)>
c0018114:	83 c4 0c             	add    esp,0xc
c0018117:	83 ec 0c             	sub    esp,0xc
c001811a:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018121:	50                   	push   eax
c0018122:	e8 1d 0a 01 00       	call   c0028b44 <LinkedList<Device>::isEmpty()>
c0018127:	83 c4 10             	add    esp,0x10
c001812a:	83 f0 01             	xor    eax,0x1
c001812d:	84 c0                	test   al,al
c001812f:	0f 84 43 01 00 00    	je     c0018278 <ACPI::open(int, int, void*)+0x226>
c0018135:	83 ec 0c             	sub    esp,0xc
c0018138:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001813f:	50                   	push   eax
c0018140:	e8 1b 0a 01 00       	call   c0028b60 <LinkedList<Device>::getFirstElement()>
c0018145:	83 c4 10             	add    esp,0x10
c0018148:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c001814f:	83 ec 0c             	sub    esp,0xc
c0018152:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018159:	50                   	push   eax
c001815a:	e8 09 0a 01 00       	call   c0028b68 <LinkedList<Device>::removeFirst()>
c001815f:	83 c4 10             	add    esp,0x10
c0018162:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c0018169:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0018170:	8b 94 24 54 01 00 00 	mov    edx,DWORD PTR [esp+0x154]
c0018177:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001817b:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0018181:	ba 09 00 00 00       	mov    edx,0x9
c0018186:	fc                   	cld    
c0018187:	89 c7                	mov    edi,eax
c0018189:	89 de                	mov    esi,ebx
c001818b:	89 d1                	mov    ecx,edx
c001818d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001818f:	83 ec 08             	sub    esp,0x8
c0018192:	8d 44 24 38          	lea    eax,[esp+0x38]
c0018196:	50                   	push   eax
c0018197:	83 ec 24             	sub    esp,0x24
c001819a:	89 e0                	mov    eax,esp
c001819c:	89 c3                	mov    ebx,eax
c001819e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00181a2:	ba 09 00 00 00       	mov    edx,0x9
c00181a7:	89 df                	mov    edi,ebx
c00181a9:	89 c6                	mov    esi,eax
c00181ab:	89 d1                	mov    ecx,edx
c00181ad:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00181af:	e8 ee a7 00 00       	call   c00229a2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c00181b4:	83 c4 30             	add    esp,0x30
c00181b7:	89 84 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],eax
c00181be:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c00181c6:	0f 84 4b ff ff ff    	je     c0018117 <ACPI::open(int, int, void*)+0xc5>
c00181cc:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c00181d7:	83 ec 0c             	sub    esp,0xc
c00181da:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00181e1:	e8 b3 73 ff ff       	call   c000f599 <malloc>
c00181e6:	83 c4 10             	add    esp,0x10
c00181e9:	89 c3                	mov    ebx,eax
c00181eb:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c00181f0:	83 ec 04             	sub    esp,0x4
c00181f3:	50                   	push   eax
c00181f4:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00181fb:	53                   	push   ebx
c00181fc:	e8 fb aa ff ff       	call   c0012cfc <File::File(char const*, Process*)>
c0018201:	83 c4 10             	add    esp,0x10
c0018204:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c001820b:	83 ec 0c             	sub    esp,0xc
c001820e:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0018215:	e8 b4 ad ff ff       	call   c0012fce <File::exists()>
c001821a:	83 c4 10             	add    esp,0x10
c001821d:	84 c0                	test   al,al
c001821f:	74 27                	je     c0018248 <ACPI::open(int, int, void*)+0x1f6>
c0018221:	83 ec 08             	sub    esp,0x8
c0018224:	6a 01                	push   0x1
c0018226:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001822d:	e8 24 4f 00 00       	call   c001d156 <Thr::loadDLL(char const*, bool)>
c0018232:	83 c4 10             	add    esp,0x10
c0018235:	83 ec 08             	sub    esp,0x8
c0018238:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001823f:	50                   	push   eax
c0018240:	e8 42 51 00 00       	call   c001d387 <Thr::executeDLL(unsigned long, void*)>
c0018245:	83 c4 10             	add    esp,0x10
c0018248:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0018250:	0f 84 c1 fe ff ff    	je     c0018117 <ACPI::open(int, int, void*)+0xc5>
c0018256:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c001825d:	8b 00                	mov    eax,DWORD PTR [eax]
c001825f:	83 c0 08             	add    eax,0x8
c0018262:	8b 00                	mov    eax,DWORD PTR [eax]
c0018264:	83 ec 0c             	sub    esp,0xc
c0018267:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001826e:	ff d0                	call   eax
c0018270:	83 c4 10             	add    esp,0x10
c0018273:	e9 9f fe ff ff       	jmp    c0018117 <ACPI::open(int, int, void*)+0xc5>
c0018278:	83 ec 0c             	sub    esp,0xc
c001827b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018282:	50                   	push   eax
c0018283:	e8 ba 08 01 00       	call   c0028b42 <LinkedList<Device>::~LinkedList()>
c0018288:	83 c4 10             	add    esp,0x10
c001828b:	8b 1d c8 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002ddc8
c0018291:	83 ec 08             	sub    esp,0x8
c0018294:	6a 01                	push   0x1
c0018296:	68 93 b6 02 c0       	push   0xc002b693
c001829b:	e8 b6 4e 00 00       	call   c001d156 <Thr::loadDLL(char const*, bool)>
c00182a0:	83 c4 10             	add    esp,0x10
c00182a3:	83 ec 08             	sub    esp,0x8
c00182a6:	53                   	push   ebx
c00182a7:	50                   	push   eax
c00182a8:	e8 da 50 00 00       	call   c001d387 <Thr::executeDLL(unsigned long, void*)>
c00182ad:	83 c4 10             	add    esp,0x10
c00182b0:	8b 1d c8 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002ddc8
c00182b6:	83 ec 08             	sub    esp,0x8
c00182b9:	6a 01                	push   0x1
c00182bb:	68 b0 b6 02 c0       	push   0xc002b6b0
c00182c0:	e8 91 4e 00 00       	call   c001d156 <Thr::loadDLL(char const*, bool)>
c00182c5:	83 c4 10             	add    esp,0x10
c00182c8:	83 ec 08             	sub    esp,0x8
c00182cb:	53                   	push   ebx
c00182cc:	50                   	push   eax
c00182cd:	e8 b5 50 00 00       	call   c001d387 <Thr::executeDLL(unsigned long, void*)>
c00182d2:	83 c4 10             	add    esp,0x10
c00182d5:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c00182da:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00182e0:	83 e0 04             	and    eax,0x4
c00182e3:	84 c0                	test   al,al
c00182e5:	0f 84 0d 01 00 00    	je     c00183f8 <ACPI::open(int, int, void*)+0x3a6>
c00182eb:	83 ec 0c             	sub    esp,0xc
c00182ee:	68 cd b6 02 c0       	push   0xc002b6cd
c00182f3:	e8 fb 72 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c00182f8:	83 c4 10             	add    esp,0x10
c00182fb:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0018306:	83 ec 0c             	sub    esp,0xc
c0018309:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0018310:	e8 84 72 ff ff       	call   c000f599 <malloc>
c0018315:	83 c4 10             	add    esp,0x10
c0018318:	89 c3                	mov    ebx,eax
c001831a:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c001831f:	83 ec 04             	sub    esp,0x4
c0018322:	50                   	push   eax
c0018323:	68 ea b6 02 c0       	push   0xc002b6ea
c0018328:	53                   	push   ebx
c0018329:	e8 ce a9 ff ff       	call   c0012cfc <File::File(char const*, Process*)>
c001832e:	83 c4 10             	add    esp,0x10
c0018331:	89 9c 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebx
c0018338:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018340:	74 1a                	je     c001835c <ACPI::open(int, int, void*)+0x30a>
c0018342:	83 ec 0c             	sub    esp,0xc
c0018345:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001834c:	e8 7d ac ff ff       	call   c0012fce <File::exists()>
c0018351:	83 c4 10             	add    esp,0x10
c0018354:	84 c0                	test   al,al
c0018356:	74 04                	je     c001835c <ACPI::open(int, int, void*)+0x30a>
c0018358:	b0 01                	mov    al,0x1
c001835a:	eb 02                	jmp    c001835e <ACPI::open(int, int, void*)+0x30c>
c001835c:	b0 00                	mov    al,0x0
c001835e:	84 c0                	test   al,al
c0018360:	74 25                	je     c0018387 <ACPI::open(int, int, void*)+0x335>
c0018362:	83 ec 08             	sub    esp,0x8
c0018365:	6a 01                	push   0x1
c0018367:	68 ea b6 02 c0       	push   0xc002b6ea
c001836c:	e8 e5 4d 00 00       	call   c001d156 <Thr::loadDLL(char const*, bool)>
c0018371:	83 c4 10             	add    esp,0x10
c0018374:	83 ec 08             	sub    esp,0x8
c0018377:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c001837e:	50                   	push   eax
c001837f:	e8 03 50 00 00       	call   c001d387 <Thr::executeDLL(unsigned long, void*)>
c0018384:	83 c4 10             	add    esp,0x10
c0018387:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001838f:	74 27                	je     c00183b8 <ACPI::open(int, int, void*)+0x366>
c0018391:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018399:	74 1d                	je     c00183b8 <ACPI::open(int, int, void*)+0x366>
c001839b:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c00183a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00183a4:	83 c0 08             	add    eax,0x8
c00183a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00183a9:	83 ec 0c             	sub    esp,0xc
c00183ac:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00183b3:	ff d0                	call   eax
c00183b5:	83 c4 10             	add    esp,0x10
c00183b8:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c00183bd:	83 ec 08             	sub    esp,0x8
c00183c0:	68 07 b7 02 c0       	push   0xc002b707
c00183c5:	50                   	push   eax
c00183c6:	e8 43 f3 ff ff       	call   c001770e <findDataTable(unsigned char*, char*)>
c00183cb:	83 c4 10             	add    esp,0x10
c00183ce:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c00183d5:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c00183dd:	74 19                	je     c00183f8 <ACPI::open(int, int, void*)+0x3a6>
c00183df:	83 ec 08             	sub    esp,0x8
c00183e2:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00183e9:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c00183f0:	e8 fd fb ff ff       	call   c0017ff2 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00183f5:	83 c4 10             	add    esp,0x10
c00183f8:	b8 00 00 00 00       	mov    eax,0x0
c00183fd:	81 c4 60 01 00 00    	add    esp,0x160
c0018403:	5b                   	pop    ebx
c0018404:	5e                   	pop    esi
c0018405:	5f                   	pop    edi
c0018406:	c3                   	ret    
c0018407:	90                   	nop

c0018408 <CPU::close(int, int, void*)>:
c0018408:	31 c0                	xor    eax,eax
c001840a:	c3                   	ret    
c001840b:	90                   	nop

c001840c <CPU::lookupAMDName(unsigned char, unsigned char)>:
c001840c:	55                   	push   ebp
c001840d:	57                   	push   edi
c001840e:	56                   	push   esi
c001840f:	53                   	push   ebx
c0018410:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018414:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018418:	89 ce                	mov    esi,ecx
c001841a:	89 d5                	mov    ebp,edx
c001841c:	80 f9 04             	cmp    cl,0x4
c001841f:	75 28                	jne    c0018449 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018421:	8d 42 f9             	lea    eax,[edx-0x7]
c0018424:	3c 03                	cmp    al,0x3
c0018426:	0f 86 63 01 00 00    	jbe    c001858f <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001842c:	80 fa 03             	cmp    dl,0x3
c001842f:	0f 84 5a 01 00 00    	je     c001858f <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018435:	8d 7a f2             	lea    edi,[edx-0xe]
c0018438:	b8 f0 d1 02 c0       	mov    eax,0xc002d1f0
c001843d:	89 fb                	mov    ebx,edi
c001843f:	80 fb 01             	cmp    bl,0x1
c0018442:	77 4e                	ja     c0018492 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018444:	e9 52 01 00 00       	jmp    c001859b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018449:	80 f9 05             	cmp    cl,0x5
c001844c:	75 4d                	jne    c001849b <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c001844e:	b8 00 d2 02 c0       	mov    eax,0xc002d200
c0018453:	80 fa 03             	cmp    dl,0x3
c0018456:	0f 86 3f 01 00 00    	jbe    c001859b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001845c:	8d 7a fa             	lea    edi,[edx-0x6]
c001845f:	b8 10 d2 02 c0       	mov    eax,0xc002d210
c0018464:	89 fb                	mov    ebx,edi
c0018466:	80 fb 01             	cmp    bl,0x1
c0018469:	0f 86 2c 01 00 00    	jbe    c001859b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001846f:	b8 20 d2 02 c0       	mov    eax,0xc002d220
c0018474:	80 fa 08             	cmp    dl,0x8
c0018477:	0f 84 1e 01 00 00    	je     c001859b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001847d:	89 d7                	mov    edi,edx
c001847f:	b8 30 d2 02 c0       	mov    eax,0xc002d230
c0018484:	83 e7 fb             	and    edi,0xfffffffb
c0018487:	89 fb                	mov    ebx,edi
c0018489:	80 fb 09             	cmp    bl,0x9
c001848c:	0f 84 09 01 00 00    	je     c001859b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018492:	31 c0                	xor    eax,eax
c0018494:	89 eb                	mov    ebx,ebp
c0018496:	0f b6 fb             	movzx  edi,bl
c0018499:	eb 30                	jmp    c00184cb <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c001849b:	31 c0                	xor    eax,eax
c001849d:	80 f9 06             	cmp    cl,0x6
c00184a0:	75 f2                	jne    c0018494 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00184a2:	80 fa 0a             	cmp    dl,0xa
c00184a5:	77 ed                	ja     c0018494 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00184a7:	bf de 05 00 00       	mov    edi,0x5de
c00184ac:	0f a3 d7             	bt     edi,edx
c00184af:	73 e3                	jae    c0018494 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00184b1:	b8 40 d2 02 c0       	mov    eax,0xc002d240
c00184b6:	e9 e0 00 00 00       	jmp    c001859b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184bb:	39 c7                	cmp    edi,eax
c00184bd:	0f 84 d3 00 00 00    	je     c0018596 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00184c3:	40                   	inc    eax
c00184c4:	3d d0 00 00 00       	cmp    eax,0xd0
c00184c9:	74 09                	je     c00184d4 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00184cb:	89 f3                	mov    ebx,esi
c00184cd:	80 fb 0f             	cmp    bl,0xf
c00184d0:	75 f1                	jne    c00184c3 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00184d2:	eb e7                	jmp    c00184bb <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00184d4:	80 f9 10             	cmp    cl,0x10
c00184d7:	75 14                	jne    c00184ed <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00184d9:	8d 42 fc             	lea    eax,[edx-0x4]
c00184dc:	83 e0 fb             	and    eax,0xfffffffb
c00184df:	3c 02                	cmp    al,0x2
c00184e1:	76 34                	jbe    c0018517 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00184e3:	b8 8d b8 02 c0       	mov    eax,0xc002b88d
c00184e8:	80 fa 02             	cmp    dl,0x2
c00184eb:	eb 24                	jmp    c0018511 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c00184ed:	80 f9 11             	cmp    cl,0x11
c00184f0:	75 13                	jne    c0018505 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00184f2:	b8 8d b8 02 c0       	mov    eax,0xc002b88d
c00184f7:	80 fa 03             	cmp    dl,0x3
c00184fa:	0f 85 9b 00 00 00    	jne    c001859b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018500:	e9 91 00 00 00       	jmp    c0018596 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018505:	80 f9 12             	cmp    cl,0x12
c0018508:	75 14                	jne    c001851e <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c001850a:	b8 8d b8 02 c0       	mov    eax,0xc002b88d
c001850f:	fe ca                	dec    dl
c0018511:	0f 85 84 00 00 00    	jne    c001859b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018517:	b8 60 d2 02 c0       	mov    eax,0xc002d260
c001851c:	eb 7d                	jmp    c001859b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001851e:	80 f9 14             	cmp    cl,0x14
c0018521:	75 12                	jne    c0018535 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018523:	4a                   	dec    edx
c0018524:	b8 8d b8 02 c0       	mov    eax,0xc002b88d
c0018529:	80 fa 01             	cmp    dl,0x1
c001852c:	77 6d                	ja     c001859b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001852e:	b8 70 d2 02 c0       	mov    eax,0xc002d270
c0018533:	eb 66                	jmp    c001859b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018535:	80 f9 15             	cmp    cl,0x15
c0018538:	75 31                	jne    c001856b <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c001853a:	b8 80 d2 02 c0       	mov    eax,0xc002d280
c001853f:	80 fa 01             	cmp    dl,0x1
c0018542:	74 57                	je     c001859b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018544:	b8 8d b8 02 c0       	mov    eax,0xc002b88d
c0018549:	80 fa 13             	cmp    dl,0x13
c001854c:	76 0c                	jbe    c001855a <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c001854e:	80 fa 30             	cmp    dl,0x30
c0018551:	75 48                	jne    c001859b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018553:	b8 a0 d2 02 c0       	mov    eax,0xc002d2a0
c0018558:	eb 41                	jmp    c001859b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001855a:	b9 04 00 09 00       	mov    ecx,0x90004
c001855f:	0f a3 d1             	bt     ecx,edx
c0018562:	73 37                	jae    c001859b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018564:	b8 90 d2 02 c0       	mov    eax,0xc002d290
c0018569:	eb 30                	jmp    c001859b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001856b:	b8 8d b8 02 c0       	mov    eax,0xc002b88d
c0018570:	80 f9 16             	cmp    cl,0x16
c0018573:	75 26                	jne    c001859b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018575:	b8 b0 d2 02 c0       	mov    eax,0xc002d2b0
c001857a:	84 d2                	test   dl,dl
c001857c:	74 1d                	je     c001859b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001857e:	b8 8d b8 02 c0       	mov    eax,0xc002b88d
c0018583:	80 fa 30             	cmp    dl,0x30
c0018586:	75 13                	jne    c001859b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018588:	b8 c0 d2 02 c0       	mov    eax,0xc002d2c0
c001858d:	eb 0c                	jmp    c001859b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001858f:	b8 e0 d1 02 c0       	mov    eax,0xc002d1e0
c0018594:	eb 05                	jmp    c001859b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018596:	b8 50 d2 02 c0       	mov    eax,0xc002d250
c001859b:	5b                   	pop    ebx
c001859c:	5e                   	pop    esi
c001859d:	5f                   	pop    edi
c001859e:	5d                   	pop    ebp
c001859f:	c3                   	ret    

c00185a0 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00185a0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00185a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00185a8:	80 f9 04             	cmp    cl,0x4
c00185ab:	75 6b                	jne    c0018618 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00185ad:	b8 40 d0 02 c0       	mov    eax,0xc002d040
c00185b2:	80 fa 01             	cmp    dl,0x1
c00185b5:	0f 86 92 02 00 00    	jbe    c001884d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185bb:	b8 50 d0 02 c0       	mov    eax,0xc002d050
c00185c0:	80 fa 02             	cmp    dl,0x2
c00185c3:	0f 84 84 02 00 00    	je     c001884d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185c9:	b8 60 d0 02 c0       	mov    eax,0xc002d060
c00185ce:	80 fa 03             	cmp    dl,0x3
c00185d1:	0f 84 76 02 00 00    	je     c001884d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185d7:	b8 70 d0 02 c0       	mov    eax,0xc002d070
c00185dc:	80 fa 04             	cmp    dl,0x4
c00185df:	0f 84 68 02 00 00    	je     c001884d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185e5:	b8 80 d0 02 c0       	mov    eax,0xc002d080
c00185ea:	80 fa 05             	cmp    dl,0x5
c00185ed:	0f 84 5a 02 00 00    	je     c001884d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185f3:	b8 60 d0 02 c0       	mov    eax,0xc002d060
c00185f8:	80 fa 07             	cmp    dl,0x7
c00185fb:	0f 84 4c 02 00 00    	je     c001884d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018601:	83 ea 08             	sub    edx,0x8
c0018604:	b8 8d b8 02 c0       	mov    eax,0xc002b88d
c0018609:	80 fa 01             	cmp    dl,0x1
c001860c:	0f 87 3b 02 00 00    	ja     c001884d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018612:	b8 90 d0 02 c0       	mov    eax,0xc002d090
c0018617:	c3                   	ret    
c0018618:	80 f9 05             	cmp    cl,0x5
c001861b:	75 45                	jne    c0018662 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c001861d:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018620:	b8 a0 d0 02 c0       	mov    eax,0xc002d0a0
c0018625:	80 f9 02             	cmp    cl,0x2
c0018628:	0f 86 1f 02 00 00    	jbe    c001884d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001862e:	80 fa 04             	cmp    dl,0x4
c0018631:	0f 84 f3 01 00 00    	je     c001882a <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018637:	80 fa 07             	cmp    dl,0x7
c001863a:	0f 84 0d 02 00 00    	je     c001884d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018640:	b8 b0 d0 02 c0       	mov    eax,0xc002d0b0
c0018645:	80 fa 08             	cmp    dl,0x8
c0018648:	0f 84 ff 01 00 00    	je     c001884d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001864e:	b8 8d b8 02 c0       	mov    eax,0xc002b88d
c0018653:	80 fa 09             	cmp    dl,0x9
c0018656:	0f 85 f1 01 00 00    	jne    c001884d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001865c:	b8 c0 d0 02 c0       	mov    eax,0xc002d0c0
c0018661:	c3                   	ret    
c0018662:	80 f9 06             	cmp    cl,0x6
c0018665:	0f 85 85 01 00 00    	jne    c00187f0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c001866b:	b8 d0 d0 02 c0       	mov    eax,0xc002d0d0
c0018670:	80 fa 01             	cmp    dl,0x1
c0018673:	0f 84 d4 01 00 00    	je     c001884d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018679:	8d 42 fb             	lea    eax,[edx-0x5]
c001867c:	3c 01                	cmp    al,0x1
c001867e:	0f 86 ac 01 00 00    	jbe    c0018830 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018684:	80 fa 03             	cmp    dl,0x3
c0018687:	0f 84 a3 01 00 00    	je     c0018830 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001868d:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018690:	b8 f0 d0 02 c0       	mov    eax,0xc002d0f0
c0018695:	80 f9 01             	cmp    cl,0x1
c0018698:	0f 86 af 01 00 00    	jbe    c001884d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001869e:	80 fa 09             	cmp    dl,0x9
c00186a1:	0f 84 8f 01 00 00    	je     c0018836 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c00186a7:	8d 4a f6             	lea    ecx,[edx-0xa]
c00186aa:	80 f9 01             	cmp    cl,0x1
c00186ad:	0f 86 9a 01 00 00    	jbe    c001884d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186b3:	b8 00 d1 02 c0       	mov    eax,0xc002d100
c00186b8:	80 fa 0d             	cmp    dl,0xd
c00186bb:	0f 84 8c 01 00 00    	je     c001884d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186c1:	b8 10 d1 02 c0       	mov    eax,0xc002d110
c00186c6:	80 fa 0e             	cmp    dl,0xe
c00186c9:	0f 84 7e 01 00 00    	je     c001884d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186cf:	b8 20 d1 02 c0       	mov    eax,0xc002d120
c00186d4:	80 fa 0f             	cmp    dl,0xf
c00186d7:	0f 84 70 01 00 00    	je     c001884d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186dd:	b8 00 d1 02 c0       	mov    eax,0xc002d100
c00186e2:	80 fa 15             	cmp    dl,0x15
c00186e5:	0f 84 62 01 00 00    	je     c001884d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186eb:	8d 4a ea             	lea    ecx,[edx-0x16]
c00186ee:	b8 20 d1 02 c0       	mov    eax,0xc002d120
c00186f3:	80 f9 01             	cmp    cl,0x1
c00186f6:	0f 86 51 01 00 00    	jbe    c001884d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186fc:	80 fa 1a             	cmp    dl,0x1a
c00186ff:	0f 84 37 01 00 00    	je     c001883c <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018705:	80 fa 1c             	cmp    dl,0x1c
c0018708:	0f 84 34 01 00 00    	je     c0018842 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c001870e:	80 fa 1d             	cmp    dl,0x1d
c0018711:	0f 84 36 01 00 00    	je     c001884d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018717:	b8 50 d1 02 c0       	mov    eax,0xc002d150
c001871c:	80 fa 25             	cmp    dl,0x25
c001871f:	0f 84 28 01 00 00    	je     c001884d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018725:	8d 4a da             	lea    ecx,[edx-0x26]
c0018728:	b8 40 d1 02 c0       	mov    eax,0xc002d140
c001872d:	80 f9 01             	cmp    cl,0x1
c0018730:	0f 86 17 01 00 00    	jbe    c001884d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018736:	b8 60 d1 02 c0       	mov    eax,0xc002d160
c001873b:	80 fa 2a             	cmp    dl,0x2a
c001873e:	0f 84 09 01 00 00    	je     c001884d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018744:	b8 50 d1 02 c0       	mov    eax,0xc002d150
c0018749:	80 fa 2c             	cmp    dl,0x2c
c001874c:	0f 84 fb 00 00 00    	je     c001884d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018752:	b8 60 d1 02 c0       	mov    eax,0xc002d160
c0018757:	80 fa 2d             	cmp    dl,0x2d
c001875a:	0f 84 ed 00 00 00    	je     c001884d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018760:	b8 30 d1 02 c0       	mov    eax,0xc002d130
c0018765:	80 fa 2e             	cmp    dl,0x2e
c0018768:	0f 84 df 00 00 00    	je     c001884d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001876e:	b8 50 d1 02 c0       	mov    eax,0xc002d150
c0018773:	80 fa 2f             	cmp    dl,0x2f
c0018776:	0f 84 d1 00 00 00    	je     c001884d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001877c:	8d 4a cb             	lea    ecx,[edx-0x35]
c001877f:	b8 40 d1 02 c0       	mov    eax,0xc002d140
c0018784:	80 f9 01             	cmp    cl,0x1
c0018787:	0f 86 c0 00 00 00    	jbe    c001884d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001878d:	b8 70 d1 02 c0       	mov    eax,0xc002d170
c0018792:	80 fa 37             	cmp    dl,0x37
c0018795:	0f 84 b2 00 00 00    	je     c001884d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001879b:	b8 80 d1 02 c0       	mov    eax,0xc002d180
c00187a0:	80 fa 3a             	cmp    dl,0x3a
c00187a3:	0f 84 a4 00 00 00    	je     c001884d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187a9:	b8 90 d1 02 c0       	mov    eax,0xc002d190
c00187ae:	80 fa 3c             	cmp    dl,0x3c
c00187b1:	0f 84 96 00 00 00    	je     c001884d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187b7:	b8 a0 d1 02 c0       	mov    eax,0xc002d1a0
c00187bc:	80 fa 3d             	cmp    dl,0x3d
c00187bf:	0f 84 88 00 00 00    	je     c001884d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187c5:	b8 80 d1 02 c0       	mov    eax,0xc002d180
c00187ca:	80 fa 3e             	cmp    dl,0x3e
c00187cd:	74 7e                	je     c001884d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187cf:	8d 42 bb             	lea    eax,[edx-0x45]
c00187d2:	3c 01                	cmp    al,0x1
c00187d4:	76 72                	jbe    c0018848 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00187d6:	80 fa 3f             	cmp    dl,0x3f
c00187d9:	74 6d                	je     c0018848 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00187db:	80 fa 4a             	cmp    dl,0x4a
c00187de:	74 0a                	je     c00187ea <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c00187e0:	b8 8d b8 02 c0       	mov    eax,0xc002b88d
c00187e5:	80 fa 4d             	cmp    dl,0x4d
c00187e8:	75 63                	jne    c001884d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187ea:	b8 70 d1 02 c0       	mov    eax,0xc002d170
c00187ef:	c3                   	ret    
c00187f0:	b8 8d b8 02 c0       	mov    eax,0xc002b88d
c00187f5:	80 f9 0b             	cmp    cl,0xb
c00187f8:	75 0a                	jne    c0018804 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c00187fa:	fe ca                	dec    dl
c00187fc:	75 4f                	jne    c001884d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187fe:	b8 b0 d1 02 c0       	mov    eax,0xc002d1b0
c0018803:	c3                   	ret    
c0018804:	80 f9 0f             	cmp    cl,0xf
c0018807:	75 44                	jne    c001884d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018809:	b8 c0 d1 02 c0       	mov    eax,0xc002d1c0
c001880e:	80 fa 02             	cmp    dl,0x2
c0018811:	76 3a                	jbe    c001884d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018813:	8d 42 fd             	lea    eax,[edx-0x3]
c0018816:	3c 01                	cmp    al,0x1
c0018818:	76 0a                	jbe    c0018824 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c001881a:	b8 8d b8 02 c0       	mov    eax,0xc002b88d
c001881f:	80 fa 06             	cmp    dl,0x6
c0018822:	75 29                	jne    c001884d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018824:	b8 d0 d1 02 c0       	mov    eax,0xc002d1d0
c0018829:	c3                   	ret    
c001882a:	b8 b0 d0 02 c0       	mov    eax,0xc002d0b0
c001882f:	c3                   	ret    
c0018830:	b8 e0 d0 02 c0       	mov    eax,0xc002d0e0
c0018835:	c3                   	ret    
c0018836:	b8 00 d1 02 c0       	mov    eax,0xc002d100
c001883b:	c3                   	ret    
c001883c:	b8 30 d1 02 c0       	mov    eax,0xc002d130
c0018841:	c3                   	ret    
c0018842:	b8 40 d1 02 c0       	mov    eax,0xc002d140
c0018847:	c3                   	ret    
c0018848:	b8 90 d1 02 c0       	mov    eax,0xc002d190
c001884d:	c3                   	ret    

c001884e <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c001884e:	60                   	pusha  
c001884f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018853:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018857:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001885b:	9c                   	pushf  
c001885c:	fa                   	cli    
c001885d:	0f 09                	wbinvd 
c001885f:	0f 30                	wrmsr  
c0018861:	9d                   	popf   
c0018862:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018866:	89 02                	mov    DWORD PTR [edx],eax
c0018868:	61                   	popa   
c0018869:	c3                   	ret    

c001886a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c001886a:	60                   	pusha  
c001886b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001886f:	9c                   	pushf  
c0018870:	fa                   	cli    
c0018871:	0f 09                	wbinvd 
c0018873:	31 c0                	xor    eax,eax
c0018875:	31 d2                	xor    edx,edx
c0018877:	0f 32                	rdmsr  
c0018879:	9d                   	popf   
c001887a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001887e:	89 02                	mov    DWORD PTR [edx],eax
c0018880:	61                   	popa   
c0018881:	c3                   	ret    

c0018882 <CPU::AMD_K6_writeback(int, int, int)>:
c0018882:	56                   	push   esi
c0018883:	53                   	push   ebx
c0018884:	83 ec 10             	sub    esp,0x10
c0018887:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001888b:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018890:	75 5d                	jne    c00188ef <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018892:	83 f8 08             	cmp    eax,0x8
c0018895:	75 09                	jne    c00188a0 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018897:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001889c:	7e 13                	jle    c00188b1 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001889e:	eb 30                	jmp    c00188d0 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00188a0:	83 f8 06             	cmp    eax,0x6
c00188a3:	7c 4a                	jl     c00188ef <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00188a5:	83 f8 07             	cmp    eax,0x7
c00188a8:	7e 07                	jle    c00188b1 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00188aa:	83 f8 09             	cmp    eax,0x9
c00188ad:	74 21                	je     c00188d0 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00188af:	eb 3e                	jmp    c00188ef <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00188b1:	89 e6                	mov    esi,esp
c00188b3:	8b 1d 08 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002de08
c00188b9:	56                   	push   esi
c00188ba:	c1 eb 15             	shr    ebx,0x15
c00188bd:	68 82 00 00 c0       	push   0xc0000082
c00188c2:	83 e3 7e             	and    ebx,0x7e
c00188c5:	e8 a0 ff ff ff       	call   c001886a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00188ca:	56                   	push   esi
c00188cb:	6a 00                	push   0x0
c00188cd:	53                   	push   ebx
c00188ce:	eb 12                	jmp    c00188e2 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c00188d0:	89 e3                	mov    ebx,esp
c00188d2:	53                   	push   ebx
c00188d3:	68 82 00 00 c0       	push   0xc0000082
c00188d8:	e8 8d ff ff ff       	call   c001886a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00188dd:	53                   	push   ebx
c00188de:	6a 00                	push   0x0
c00188e0:	6a 00                	push   0x0
c00188e2:	68 82 00 00 c0       	push   0xc0000082
c00188e7:	e8 62 ff ff ff       	call   c001884e <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00188ec:	83 c4 18             	add    esp,0x18
c00188ef:	83 c4 10             	add    esp,0x10
c00188f2:	5b                   	pop    ebx
c00188f3:	5e                   	pop    esi
c00188f4:	c3                   	ret    
c00188f5:	90                   	nop

c00188f6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00188f6:	55                   	push   ebp
c00188f7:	57                   	push   edi
c00188f8:	56                   	push   esi
c00188f9:	53                   	push   ebx
c00188fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00188fe:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018902:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018906:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001890a:	39 05 e0 d2 02 c0    	cmp    DWORD PTR ds:0xc002d2e0,eax
c0018910:	75 23                	jne    c0018935 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018912:	a1 cc e8 02 c0       	mov    eax,ds:0xc002e8cc
c0018917:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001891b:	89 06                	mov    DWORD PTR [esi],eax
c001891d:	a1 c8 e8 02 c0       	mov    eax,ds:0xc002e8c8
c0018922:	89 07                	mov    DWORD PTR [edi],eax
c0018924:	a1 c4 e8 02 c0       	mov    eax,ds:0xc002e8c4
c0018929:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001892c:	a1 c0 e8 02 c0       	mov    eax,ds:0xc002e8c0
c0018931:	89 02                	mov    DWORD PTR [edx],eax
c0018933:	eb 3f                	jmp    c0018974 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018935:	31 c9                	xor    ecx,ecx
c0018937:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001893b:	0f a2                	cpuid  
c001893d:	89 06                	mov    DWORD PTR [esi],eax
c001893f:	89 1f                	mov    DWORD PTR [edi],ebx
c0018941:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018945:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018948:	89 10                	mov    DWORD PTR [eax],edx
c001894a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001894e:	a3 e0 d2 02 c0       	mov    ds:0xc002d2e0,eax
c0018953:	8b 06                	mov    eax,DWORD PTR [esi]
c0018955:	a3 cc e8 02 c0       	mov    ds:0xc002e8cc,eax
c001895a:	8b 07                	mov    eax,DWORD PTR [edi]
c001895c:	a3 c8 e8 02 c0       	mov    ds:0xc002e8c8,eax
c0018961:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018964:	a3 c4 e8 02 c0       	mov    ds:0xc002e8c4,eax
c0018969:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001896d:	8b 00                	mov    eax,DWORD PTR [eax]
c001896f:	a3 c0 e8 02 c0       	mov    ds:0xc002e8c0,eax
c0018974:	5b                   	pop    ebx
c0018975:	5e                   	pop    esi
c0018976:	5f                   	pop    edi
c0018977:	5d                   	pop    ebp
c0018978:	c3                   	ret    
c0018979:	90                   	nop

c001897a <CPU::cpuidCheckEDX(unsigned int)>:
c001897a:	83 ec 10             	sub    esp,0x10
c001897d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018981:	50                   	push   eax
c0018982:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018986:	50                   	push   eax
c0018987:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001898b:	50                   	push   eax
c001898c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018990:	50                   	push   eax
c0018991:	6a 01                	push   0x1
c0018993:	e8 5e ff ff ff       	call   c00188f6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018998:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001899c:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00189a0:	0f 95 c0             	setne  al
c00189a3:	83 c4 24             	add    esp,0x24
c00189a6:	c3                   	ret    
c00189a7:	90                   	nop

c00189a8 <CPU::cpuidCheckECX(unsigned int)>:
c00189a8:	83 ec 10             	sub    esp,0x10
c00189ab:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00189af:	50                   	push   eax
c00189b0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00189b4:	50                   	push   eax
c00189b5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00189b9:	50                   	push   eax
c00189ba:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00189be:	50                   	push   eax
c00189bf:	6a 01                	push   0x1
c00189c1:	e8 30 ff ff ff       	call   c00188f6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00189c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00189ca:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00189ce:	0f 95 c0             	setne  al
c00189d1:	83 c4 24             	add    esp,0x24
c00189d4:	c3                   	ret    
c00189d5:	90                   	nop

c00189d6 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00189d6:	83 ec 10             	sub    esp,0x10
c00189d9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00189dd:	50                   	push   eax
c00189de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00189e2:	50                   	push   eax
c00189e3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00189e7:	50                   	push   eax
c00189e8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00189ec:	50                   	push   eax
c00189ed:	6a 07                	push   0x7
c00189ef:	e8 02 ff ff ff       	call   c00188f6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00189f4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00189f8:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00189fc:	0f 95 c0             	setne  al
c00189ff:	83 c4 24             	add    esp,0x24
c0018a02:	c3                   	ret    
c0018a03:	90                   	nop

c0018a04 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018a04:	83 ec 10             	sub    esp,0x10
c0018a07:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a0b:	50                   	push   eax
c0018a0c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a10:	50                   	push   eax
c0018a11:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a15:	50                   	push   eax
c0018a16:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a1a:	50                   	push   eax
c0018a1b:	6a 07                	push   0x7
c0018a1d:	e8 d4 fe ff ff       	call   c00188f6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018a22:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a26:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018a2a:	0f 95 c0             	setne  al
c0018a2d:	83 c4 24             	add    esp,0x24
c0018a30:	c3                   	ret    
c0018a31:	90                   	nop

c0018a32 <CPU::CPU()>:
c0018a32:	83 ec 0c             	sub    esp,0xc
c0018a35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a39:	83 ec 08             	sub    esp,0x8
c0018a3c:	68 8d b8 02 c0       	push   0xc002b88d
c0018a41:	50                   	push   eax
c0018a42:	e8 93 b3 ff ff       	call   c0013dda <Device::Device(char const*)>
c0018a47:	83 c4 10             	add    esp,0x10
c0018a4a:	ba 64 b9 02 c0       	mov    edx,0xc002b964
c0018a4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a53:	89 10                	mov    DWORD PTR [eax],edx
c0018a55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a59:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018a63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a67:	05 78 01 00 00       	add    eax,0x178
c0018a6c:	83 ec 0c             	sub    esp,0xc
c0018a6f:	50                   	push   eax
c0018a70:	e8 57 63 ff ff       	call   c000edcc <GDT::GDT()>
c0018a75:	83 c4 10             	add    esp,0x10
c0018a78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a7c:	05 7c 09 00 00       	add    eax,0x97c
c0018a81:	83 ec 0c             	sub    esp,0xc
c0018a84:	50                   	push   eax
c0018a85:	e8 92 65 ff ff       	call   c000f01c <IDT::IDT()>
c0018a8a:	83 c4 10             	add    esp,0x10
c0018a8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a91:	05 7c 11 00 00       	add    eax,0x117c
c0018a96:	83 ec 0c             	sub    esp,0xc
c0018a99:	50                   	push   eax
c0018a9a:	e8 c7 80 ff ff       	call   c0010b66 <TSS::TSS()>
c0018a9f:	83 c4 10             	add    esp,0x10
c0018aa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018aa6:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018aad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ab1:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018abb:	90                   	nop
c0018abc:	83 c4 0c             	add    esp,0xc
c0018abf:	c3                   	ret    

c0018ac0 <CPU::displayFeatures()>:
c0018ac0:	c3                   	ret    
c0018ac1:	90                   	nop

c0018ac2 <CPU::detectFeatures()>:
c0018ac2:	55                   	push   ebp
c0018ac3:	57                   	push   edi
c0018ac4:	56                   	push   esi
c0018ac5:	53                   	push   ebx
c0018ac6:	83 ec 50             	sub    esp,0x50
c0018ac9:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018acd:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018ad7:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018ade:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0018ae4:	6a 0d                	push   0xd
c0018ae6:	6a 00                	push   0x0
c0018ae8:	55                   	push   ebp
c0018ae9:	e8 62 7c fe ff       	call   c0000750 <memset>
c0018aee:	83 c4 10             	add    esp,0x10
c0018af1:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c0018af6:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018afd:	0f 84 22 09 00 00    	je     c0019425 <CPU::detectFeatures()+0x963>
c0018b03:	83 ec 0c             	sub    esp,0xc
c0018b06:	89 ef                	mov    edi,ebp
c0018b08:	6a 10                	push   0x10
c0018b0a:	e8 6b fe ff ff       	call   c001897a <CPU::cpuidCheckEDX(unsigned int)>
c0018b0f:	83 e0 01             	and    eax,0x1
c0018b12:	8d 14 00             	lea    edx,[eax+eax*1]
c0018b15:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018b1b:	83 e0 fd             	and    eax,0xfffffffd
c0018b1e:	09 d0                	or     eax,edx
c0018b20:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018b26:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018b2d:	e8 48 fe ff ff       	call   c001897a <CPU::cpuidCheckEDX(unsigned int)>
c0018b32:	83 e0 01             	and    eax,0x1
c0018b35:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018b3c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018b42:	83 e0 fb             	and    eax,0xfffffffb
c0018b45:	09 d0                	or     eax,edx
c0018b47:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018b4d:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018b54:	e8 21 fe ff ff       	call   c001897a <CPU::cpuidCheckEDX(unsigned int)>
c0018b59:	83 e0 01             	and    eax,0x1
c0018b5c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018b63:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018b69:	83 e0 f7             	and    eax,0xfffffff7
c0018b6c:	09 d0                	or     eax,edx
c0018b6e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018b74:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018b7b:	e8 fa fd ff ff       	call   c001897a <CPU::cpuidCheckEDX(unsigned int)>
c0018b80:	83 e0 01             	and    eax,0x1
c0018b83:	c1 e0 04             	shl    eax,0x4
c0018b86:	88 c2                	mov    dl,al
c0018b88:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018b8e:	83 e0 ef             	and    eax,0xffffffef
c0018b91:	09 d0                	or     eax,edx
c0018b93:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018b99:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018ba0:	e8 d5 fd ff ff       	call   c001897a <CPU::cpuidCheckEDX(unsigned int)>
c0018ba5:	83 e0 01             	and    eax,0x1
c0018ba8:	c1 e0 05             	shl    eax,0x5
c0018bab:	88 c2                	mov    dl,al
c0018bad:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018bb3:	83 e0 df             	and    eax,0xffffffdf
c0018bb6:	09 d0                	or     eax,edx
c0018bb8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018bbe:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018bc5:	e8 b0 fd ff ff       	call   c001897a <CPU::cpuidCheckEDX(unsigned int)>
c0018bca:	83 e0 01             	and    eax,0x1
c0018bcd:	8d 14 00             	lea    edx,[eax+eax*1]
c0018bd0:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018bd6:	83 e0 fd             	and    eax,0xfffffffd
c0018bd9:	09 d0                	or     eax,edx
c0018bdb:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018be1:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018be8:	e8 8d fd ff ff       	call   c001897a <CPU::cpuidCheckEDX(unsigned int)>
c0018bed:	83 e0 01             	and    eax,0x1
c0018bf0:	c1 e0 06             	shl    eax,0x6
c0018bf3:	88 c2                	mov    dl,al
c0018bf5:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018bfb:	83 e0 bf             	and    eax,0xffffffbf
c0018bfe:	09 d0                	or     eax,edx
c0018c00:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018c06:	58                   	pop    eax
c0018c07:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018c0b:	50                   	push   eax
c0018c0c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018c10:	50                   	push   eax
c0018c11:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018c15:	56                   	push   esi
c0018c16:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018c1a:	50                   	push   eax
c0018c1b:	6a 00                	push   0x0
c0018c1d:	e8 d4 fc ff ff       	call   c00188f6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018c22:	b8 04 00 00 00       	mov    eax,0x4
c0018c27:	89 c1                	mov    ecx,eax
c0018c29:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018c2b:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0018c31:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0018c35:	89 c1                	mov    ecx,eax
c0018c37:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018c39:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0018c3f:	8d 74 24 38          	lea    esi,[esp+0x38]
c0018c43:	89 c1                	mov    ecx,eax
c0018c45:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018c47:	83 c4 18             	add    esp,0x18
c0018c4a:	68 38 b7 02 c0       	push   0xc002b738
c0018c4f:	55                   	push   ebp
c0018c50:	e8 43 7c fe ff       	call   c0000898 <strcmp>
c0018c55:	83 c4 10             	add    esp,0x10
c0018c58:	85 c0                	test   eax,eax
c0018c5a:	75 0f                	jne    c0018c6b <CPU::detectFeatures()+0x1a9>
c0018c5c:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018c66:	e9 22 02 00 00       	jmp    c0018e8d <CPU::detectFeatures()+0x3cb>
c0018c6b:	50                   	push   eax
c0018c6c:	50                   	push   eax
c0018c6d:	68 45 b7 02 c0       	push   0xc002b745
c0018c72:	55                   	push   ebp
c0018c73:	e8 20 7c fe ff       	call   c0000898 <strcmp>
c0018c78:	83 c4 10             	add    esp,0x10
c0018c7b:	85 c0                	test   eax,eax
c0018c7d:	74 dd                	je     c0018c5c <CPU::detectFeatures()+0x19a>
c0018c7f:	50                   	push   eax
c0018c80:	50                   	push   eax
c0018c81:	68 52 b7 02 c0       	push   0xc002b752
c0018c86:	55                   	push   ebp
c0018c87:	e8 0c 7c fe ff       	call   c0000898 <strcmp>
c0018c8c:	83 c4 10             	add    esp,0x10
c0018c8f:	85 c0                	test   eax,eax
c0018c91:	74 2a                	je     c0018cbd <CPU::detectFeatures()+0x1fb>
c0018c93:	50                   	push   eax
c0018c94:	50                   	push   eax
c0018c95:	68 5f b7 02 c0       	push   0xc002b75f
c0018c9a:	55                   	push   ebp
c0018c9b:	e8 f8 7b fe ff       	call   c0000898 <strcmp>
c0018ca0:	83 c4 10             	add    esp,0x10
c0018ca3:	85 c0                	test   eax,eax
c0018ca5:	74 16                	je     c0018cbd <CPU::detectFeatures()+0x1fb>
c0018ca7:	50                   	push   eax
c0018ca8:	50                   	push   eax
c0018ca9:	68 6c b7 02 c0       	push   0xc002b76c
c0018cae:	55                   	push   ebp
c0018caf:	e8 e4 7b fe ff       	call   c0000898 <strcmp>
c0018cb4:	83 c4 10             	add    esp,0x10
c0018cb7:	85 c0                	test   eax,eax
c0018cb9:	74 48                	je     c0018d03 <CPU::detectFeatures()+0x241>
c0018cbb:	eb 0f                	jmp    c0018ccc <CPU::detectFeatures()+0x20a>
c0018cbd:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018cc7:	e9 c1 01 00 00       	jmp    c0018e8d <CPU::detectFeatures()+0x3cb>
c0018ccc:	50                   	push   eax
c0018ccd:	50                   	push   eax
c0018cce:	68 79 b7 02 c0       	push   0xc002b779
c0018cd3:	55                   	push   ebp
c0018cd4:	e8 bf 7b fe ff       	call   c0000898 <strcmp>
c0018cd9:	83 c4 10             	add    esp,0x10
c0018cdc:	85 c0                	test   eax,eax
c0018cde:	74 23                	je     c0018d03 <CPU::detectFeatures()+0x241>
c0018ce0:	57                   	push   edi
c0018ce1:	57                   	push   edi
c0018ce2:	68 86 b7 02 c0       	push   0xc002b786
c0018ce7:	55                   	push   ebp
c0018ce8:	e8 ab 7b fe ff       	call   c0000898 <strcmp>
c0018ced:	83 c4 10             	add    esp,0x10
c0018cf0:	85 c0                	test   eax,eax
c0018cf2:	75 1e                	jne    c0018d12 <CPU::detectFeatures()+0x250>
c0018cf4:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018cfe:	e9 8a 01 00 00       	jmp    c0018e8d <CPU::detectFeatures()+0x3cb>
c0018d03:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018d0d:	e9 7b 01 00 00       	jmp    c0018e8d <CPU::detectFeatures()+0x3cb>
c0018d12:	56                   	push   esi
c0018d13:	56                   	push   esi
c0018d14:	68 93 b7 02 c0       	push   0xc002b793
c0018d19:	55                   	push   ebp
c0018d1a:	e8 79 7b fe ff       	call   c0000898 <strcmp>
c0018d1f:	83 c4 10             	add    esp,0x10
c0018d22:	85 c0                	test   eax,eax
c0018d24:	75 0f                	jne    c0018d35 <CPU::detectFeatures()+0x273>
c0018d26:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018d30:	e9 58 01 00 00       	jmp    c0018e8d <CPU::detectFeatures()+0x3cb>
c0018d35:	51                   	push   ecx
c0018d36:	51                   	push   ecx
c0018d37:	68 52 b7 02 c0       	push   0xc002b752
c0018d3c:	55                   	push   ebp
c0018d3d:	e8 56 7b fe ff       	call   c0000898 <strcmp>
c0018d42:	83 c4 10             	add    esp,0x10
c0018d45:	85 c0                	test   eax,eax
c0018d47:	75 0f                	jne    c0018d58 <CPU::detectFeatures()+0x296>
c0018d49:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018d53:	e9 35 01 00 00       	jmp    c0018e8d <CPU::detectFeatures()+0x3cb>
c0018d58:	52                   	push   edx
c0018d59:	52                   	push   edx
c0018d5a:	68 a0 b7 02 c0       	push   0xc002b7a0
c0018d5f:	55                   	push   ebp
c0018d60:	e8 33 7b fe ff       	call   c0000898 <strcmp>
c0018d65:	83 c4 10             	add    esp,0x10
c0018d68:	85 c0                	test   eax,eax
c0018d6a:	75 0f                	jne    c0018d7b <CPU::detectFeatures()+0x2b9>
c0018d6c:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018d76:	e9 12 01 00 00       	jmp    c0018e8d <CPU::detectFeatures()+0x3cb>
c0018d7b:	50                   	push   eax
c0018d7c:	50                   	push   eax
c0018d7d:	68 ad b7 02 c0       	push   0xc002b7ad
c0018d82:	55                   	push   ebp
c0018d83:	e8 10 7b fe ff       	call   c0000898 <strcmp>
c0018d88:	83 c4 10             	add    esp,0x10
c0018d8b:	85 c0                	test   eax,eax
c0018d8d:	75 0f                	jne    c0018d9e <CPU::detectFeatures()+0x2dc>
c0018d8f:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018d99:	e9 ef 00 00 00       	jmp    c0018e8d <CPU::detectFeatures()+0x3cb>
c0018d9e:	50                   	push   eax
c0018d9f:	50                   	push   eax
c0018da0:	68 ba b7 02 c0       	push   0xc002b7ba
c0018da5:	55                   	push   ebp
c0018da6:	e8 ed 7a fe ff       	call   c0000898 <strcmp>
c0018dab:	83 c4 10             	add    esp,0x10
c0018dae:	85 c0                	test   eax,eax
c0018db0:	75 0f                	jne    c0018dc1 <CPU::detectFeatures()+0x2ff>
c0018db2:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018dbc:	e9 cc 00 00 00       	jmp    c0018e8d <CPU::detectFeatures()+0x3cb>
c0018dc1:	50                   	push   eax
c0018dc2:	50                   	push   eax
c0018dc3:	68 c7 b7 02 c0       	push   0xc002b7c7
c0018dc8:	55                   	push   ebp
c0018dc9:	e8 ca 7a fe ff       	call   c0000898 <strcmp>
c0018dce:	83 c4 10             	add    esp,0x10
c0018dd1:	85 c0                	test   eax,eax
c0018dd3:	75 0f                	jne    c0018de4 <CPU::detectFeatures()+0x322>
c0018dd5:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018ddf:	e9 a9 00 00 00       	jmp    c0018e8d <CPU::detectFeatures()+0x3cb>
c0018de4:	50                   	push   eax
c0018de5:	50                   	push   eax
c0018de6:	68 d4 b7 02 c0       	push   0xc002b7d4
c0018deb:	55                   	push   ebp
c0018dec:	e8 a7 7a fe ff       	call   c0000898 <strcmp>
c0018df1:	83 c4 10             	add    esp,0x10
c0018df4:	85 c0                	test   eax,eax
c0018df6:	75 0f                	jne    c0018e07 <CPU::detectFeatures()+0x345>
c0018df8:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018e02:	e9 86 00 00 00       	jmp    c0018e8d <CPU::detectFeatures()+0x3cb>
c0018e07:	50                   	push   eax
c0018e08:	50                   	push   eax
c0018e09:	68 e1 b7 02 c0       	push   0xc002b7e1
c0018e0e:	55                   	push   ebp
c0018e0f:	e8 84 7a fe ff       	call   c0000898 <strcmp>
c0018e14:	83 c4 10             	add    esp,0x10
c0018e17:	85 c0                	test   eax,eax
c0018e19:	75 0c                	jne    c0018e27 <CPU::detectFeatures()+0x365>
c0018e1b:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018e25:	eb 66                	jmp    c0018e8d <CPU::detectFeatures()+0x3cb>
c0018e27:	50                   	push   eax
c0018e28:	50                   	push   eax
c0018e29:	68 ee b7 02 c0       	push   0xc002b7ee
c0018e2e:	55                   	push   ebp
c0018e2f:	e8 64 7a fe ff       	call   c0000898 <strcmp>
c0018e34:	83 c4 10             	add    esp,0x10
c0018e37:	85 c0                	test   eax,eax
c0018e39:	75 0c                	jne    c0018e47 <CPU::detectFeatures()+0x385>
c0018e3b:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018e45:	eb 46                	jmp    c0018e8d <CPU::detectFeatures()+0x3cb>
c0018e47:	57                   	push   edi
c0018e48:	57                   	push   edi
c0018e49:	68 fb b7 02 c0       	push   0xc002b7fb
c0018e4e:	55                   	push   ebp
c0018e4f:	e8 44 7a fe ff       	call   c0000898 <strcmp>
c0018e54:	83 c4 10             	add    esp,0x10
c0018e57:	85 c0                	test   eax,eax
c0018e59:	74 e0                	je     c0018e3b <CPU::detectFeatures()+0x379>
c0018e5b:	56                   	push   esi
c0018e5c:	56                   	push   esi
c0018e5d:	68 08 b8 02 c0       	push   0xc002b808
c0018e62:	55                   	push   ebp
c0018e63:	e8 30 7a fe ff       	call   c0000898 <strcmp>
c0018e68:	83 c4 10             	add    esp,0x10
c0018e6b:	85 c0                	test   eax,eax
c0018e6d:	74 cc                	je     c0018e3b <CPU::detectFeatures()+0x379>
c0018e6f:	51                   	push   ecx
c0018e70:	51                   	push   ecx
c0018e71:	68 15 b8 02 c0       	push   0xc002b815
c0018e76:	55                   	push   ebp
c0018e77:	e8 1c 7a fe ff       	call   c0000898 <strcmp>
c0018e7c:	83 c4 10             	add    esp,0x10
c0018e7f:	85 c0                	test   eax,eax
c0018e81:	74 b8                	je     c0018e3b <CPU::detectFeatures()+0x379>
c0018e83:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0018e8d:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0018e92:	0f 86 be 00 00 00    	jbe    c0018f56 <CPU::detectFeatures()+0x494>
c0018e98:	83 ec 0c             	sub    esp,0xc
c0018e9b:	68 80 00 00 00       	push   0x80
c0018ea0:	e8 31 fb ff ff       	call   c00189d6 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018ea5:	83 e0 01             	and    eax,0x1
c0018ea8:	c1 e0 06             	shl    eax,0x6
c0018eab:	88 c2                	mov    dl,al
c0018ead:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018eb3:	83 e0 bf             	and    eax,0xffffffbf
c0018eb6:	09 d0                	or     eax,edx
c0018eb8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018ebe:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018ec5:	e8 0c fb ff ff       	call   c00189d6 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018eca:	83 e0 01             	and    eax,0x1
c0018ecd:	c1 e0 04             	shl    eax,0x4
c0018ed0:	88 c2                	mov    dl,al
c0018ed2:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018ed8:	83 e0 ef             	and    eax,0xffffffef
c0018edb:	09 d0                	or     eax,edx
c0018edd:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018ee3:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0018eea:	e8 e7 fa ff ff       	call   c00189d6 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018eef:	c1 e0 07             	shl    eax,0x7
c0018ef2:	88 c2                	mov    dl,al
c0018ef4:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018efa:	83 e0 7f             	and    eax,0x7f
c0018efd:	09 d0                	or     eax,edx
c0018eff:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018f05:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018f0c:	e8 f3 fa ff ff       	call   c0018a04 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018f11:	83 e0 01             	and    eax,0x1
c0018f14:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018f1b:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018f21:	83 e0 f7             	and    eax,0xfffffff7
c0018f24:	09 d0                	or     eax,edx
c0018f26:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018f2c:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018f33:	e8 cc fa ff ff       	call   c0018a04 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018f38:	83 c4 10             	add    esp,0x10
c0018f3b:	83 e0 01             	and    eax,0x1
c0018f3e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018f45:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018f4b:	83 e0 fb             	and    eax,0xfffffffb
c0018f4e:	09 d0                	or     eax,edx
c0018f50:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018f56:	83 ec 0c             	sub    esp,0xc
c0018f59:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f5d:	50                   	push   eax
c0018f5e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f62:	50                   	push   eax
c0018f63:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018f67:	56                   	push   esi
c0018f68:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f6c:	50                   	push   eax
c0018f6d:	6a 01                	push   0x1
c0018f6f:	e8 82 f9 ff ff       	call   c00188f6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018f74:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018f78:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018f7e:	88 ca                	mov    dl,cl
c0018f80:	83 e0 f0             	and    eax,0xfffffff0
c0018f83:	83 e2 0f             	and    edx,0xf
c0018f86:	09 d0                	or     eax,edx
c0018f88:	88 ca                	mov    dl,cl
c0018f8a:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0018f90:	c0 ea 04             	shr    dl,0x4
c0018f93:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0018f97:	0f b6 c2             	movzx  eax,dl
c0018f9a:	83 c4 20             	add    esp,0x20
c0018f9d:	c1 e0 06             	shl    eax,0x6
c0018fa0:	89 c7                	mov    edi,eax
c0018fa2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018fa8:	66 25 3f c0          	and    ax,0xc03f
c0018fac:	09 f8                	or     eax,edi
c0018fae:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018fb5:	89 c8                	mov    eax,ecx
c0018fb7:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0018fbe:	c1 e8 08             	shr    eax,0x8
c0018fc1:	83 e5 3f             	and    ebp,0x3f
c0018fc4:	83 e0 0f             	and    eax,0xf
c0018fc7:	89 c7                	mov    edi,eax
c0018fc9:	c1 e7 06             	shl    edi,0x6
c0018fcc:	09 ef                	or     edi,ebp
c0018fce:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0018fd5:	89 fa                	mov    edx,edi
c0018fd7:	83 e5 c0             	and    ebp,0xffffffc0
c0018fda:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0018fe0:	88 c2                	mov    dl,al
c0018fe2:	c0 ea 02             	shr    dl,0x2
c0018fe5:	89 d7                	mov    edi,edx
c0018fe7:	09 ef                	or     edi,ebp
c0018fe9:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0018fef:	89 fa                	mov    edx,edi
c0018ff1:	83 e5 cf             	and    ebp,0xffffffcf
c0018ff4:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018ffa:	89 cf                	mov    edi,ecx
c0018ffc:	c1 ef 0c             	shr    edi,0xc
c0018fff:	83 e7 03             	and    edi,0x3
c0019002:	c1 e7 04             	shl    edi,0x4
c0019005:	09 ef                	or     edi,ebp
c0019007:	3c 06                	cmp    al,0x6
c0019009:	89 fa                	mov    edx,edi
c001900b:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0019011:	74 04                	je     c0019017 <CPU::detectFeatures()+0x555>
c0019013:	3c 0f                	cmp    al,0xf
c0019015:	75 5c                	jne    c0019073 <CPU::detectFeatures()+0x5b1>
c0019017:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001901b:	89 cf                	mov    edi,ecx
c001901d:	c1 ef 10             	shr    edi,0x10
c0019020:	c1 e7 04             	shl    edi,0x4
c0019023:	09 fa                	or     edx,edi
c0019025:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c001902b:	0f b6 d2             	movzx  edx,dl
c001902e:	66 81 e7 3f c0       	and    di,0xc03f
c0019033:	c1 e2 06             	shl    edx,0x6
c0019036:	09 fa                	or     edx,edi
c0019038:	3c 0f                	cmp    al,0xf
c001903a:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0019041:	75 30                	jne    c0019073 <CPU::detectFeatures()+0x5b1>
c0019043:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0019049:	c1 e9 14             	shr    ecx,0x14
c001904c:	83 e0 3f             	and    eax,0x3f
c001904f:	83 c1 0f             	add    ecx,0xf
c0019052:	88 ca                	mov    dl,cl
c0019054:	c0 e9 02             	shr    cl,0x2
c0019057:	c1 e2 06             	shl    edx,0x6
c001905a:	09 d0                	or     eax,edx
c001905c:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0019062:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0019068:	83 e0 c0             	and    eax,0xffffffc0
c001906b:	09 c1                	or     ecx,eax
c001906d:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019073:	83 ec 0c             	sub    esp,0xc
c0019076:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001907d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019081:	50                   	push   eax
c0019082:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019086:	55                   	push   ebp
c0019087:	56                   	push   esi
c0019088:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001908c:	57                   	push   edi
c001908d:	68 00 00 00 80       	push   0x80000000
c0019092:	e8 5f f8 ff ff       	call   c00188f6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019097:	83 c4 20             	add    esp,0x20
c001909a:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00190a2:	76 22                	jbe    c00190c6 <CPU::detectFeatures()+0x604>
c00190a4:	83 ec 0c             	sub    esp,0xc
c00190a7:	8d 44 24 28          	lea    eax,[esp+0x28]
c00190ab:	50                   	push   eax
c00190ac:	55                   	push   ebp
c00190ad:	56                   	push   esi
c00190ae:	57                   	push   edi
c00190af:	68 01 00 00 80       	push   0x80000001
c00190b4:	e8 3d f8 ff ff       	call   c00188f6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00190b9:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00190c3:	83 c4 20             	add    esp,0x20
c00190c6:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00190cc:	83 f8 01             	cmp    eax,0x1
c00190cf:	75 6f                	jne    c0019140 <CPU::detectFeatures()+0x67e>
c00190d1:	51                   	push   ecx
c00190d2:	51                   	push   ecx
c00190d3:	68 21 b8 02 c0       	push   0xc002b821
c00190d8:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00190dc:	56                   	push   esi
c00190dd:	e8 2a 77 fe ff       	call   c000080c <strcpy>
c00190e2:	5f                   	pop    edi
c00190e3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00190e9:	5d                   	pop    ebp
c00190ea:	66 c1 e8 06          	shr    ax,0x6
c00190ee:	0f b6 c0             	movzx  eax,al
c00190f1:	50                   	push   eax
c00190f2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00190f8:	c1 e8 0e             	shr    eax,0xe
c00190fb:	0f b6 c0             	movzx  eax,al
c00190fe:	50                   	push   eax
c00190ff:	e8 9c f4 ff ff       	call   c00185a0 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0019104:	5a                   	pop    edx
c0019105:	59                   	pop    ecx
c0019106:	50                   	push   eax
c0019107:	56                   	push   esi
c0019108:	e8 3f 78 fe ff       	call   c000094c <strcat>
c001910d:	5f                   	pop    edi
c001910e:	5d                   	pop    ebp
c001910f:	56                   	push   esi
c0019110:	53                   	push   ebx
c0019111:	e8 b6 ac ff ff       	call   c0013dcc <Device::setName(char const*)>
c0019116:	58                   	pop    eax
c0019117:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001911d:	5a                   	pop    edx
c001911e:	68 28 b8 02 c0       	push   0xc002b828
c0019123:	50                   	push   eax
c0019124:	e8 6f 77 fe ff       	call   c0000898 <strcmp>
c0019129:	83 c4 10             	add    esp,0x10
c001912c:	85 c0                	test   eax,eax
c001912e:	0f 85 71 03 00 00    	jne    c00194a5 <CPU::detectFeatures()+0x9e3>
c0019134:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c001913b:	e9 65 03 00 00       	jmp    c00194a5 <CPU::detectFeatures()+0x9e3>
c0019140:	83 f8 02             	cmp    eax,0x2
c0019143:	0f 85 b5 00 00 00    	jne    c00191fe <CPU::detectFeatures()+0x73c>
c0019149:	57                   	push   edi
c001914a:	57                   	push   edi
c001914b:	68 3a b8 02 c0       	push   0xc002b83a
c0019150:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019154:	56                   	push   esi
c0019155:	e8 b2 76 fe ff       	call   c000080c <strcpy>
c001915a:	5d                   	pop    ebp
c001915b:	58                   	pop    eax
c001915c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019162:	66 c1 e8 06          	shr    ax,0x6
c0019166:	0f b6 c0             	movzx  eax,al
c0019169:	50                   	push   eax
c001916a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019170:	c1 e8 0e             	shr    eax,0xe
c0019173:	0f b6 c0             	movzx  eax,al
c0019176:	50                   	push   eax
c0019177:	e8 90 f2 ff ff       	call   c001840c <CPU::lookupAMDName(unsigned char, unsigned char)>
c001917c:	5a                   	pop    edx
c001917d:	59                   	pop    ecx
c001917e:	50                   	push   eax
c001917f:	56                   	push   esi
c0019180:	e8 c7 77 fe ff       	call   c000094c <strcat>
c0019185:	5f                   	pop    edi
c0019186:	5d                   	pop    ebp
c0019187:	56                   	push   esi
c0019188:	53                   	push   ebx
c0019189:	e8 3e ac ff ff       	call   c0013dcc <Device::setName(char const*)>
c001918e:	58                   	pop    eax
c001918f:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019195:	5a                   	pop    edx
c0019196:	68 3f b8 02 c0       	push   0xc002b83f
c001919b:	50                   	push   eax
c001919c:	e8 f7 76 fe ff       	call   c0000898 <strcmp>
c00191a1:	83 c4 10             	add    esp,0x10
c00191a4:	85 c0                	test   eax,eax
c00191a6:	75 20                	jne    c00191c8 <CPU::detectFeatures()+0x706>
c00191a8:	8b 15 c8 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002ddc8
c00191ae:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00191b4:	a8 01                	test   al,0x1
c00191b6:	74 10                	je     c00191c8 <CPU::detectFeatures()+0x706>
c00191b8:	83 e0 fe             	and    eax,0xfffffffe
c00191bb:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00191c1:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00191c8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00191ce:	c1 e8 0e             	shr    eax,0xe
c00191d1:	3c 05                	cmp    al,0x5
c00191d3:	0f 85 cc 02 00 00    	jne    c00194a5 <CPU::detectFeatures()+0x9e3>
c00191d9:	56                   	push   esi
c00191da:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00191e0:	83 e0 0f             	and    eax,0xf
c00191e3:	50                   	push   eax
c00191e4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00191ea:	66 c1 e8 06          	shr    ax,0x6
c00191ee:	0f b6 c0             	movzx  eax,al
c00191f1:	50                   	push   eax
c00191f2:	6a 05                	push   0x5
c00191f4:	e8 89 f6 ff ff       	call   c0018882 <CPU::AMD_K6_writeback(int, int, int)>
c00191f9:	e9 1f 02 00 00       	jmp    c001941d <CPU::detectFeatures()+0x95b>
c00191fe:	8d 50 fd             	lea    edx,[eax-0x3]
c0019201:	83 fa 01             	cmp    edx,0x1
c0019204:	76 09                	jbe    c001920f <CPU::detectFeatures()+0x74d>
c0019206:	83 f8 06             	cmp    eax,0x6
c0019209:	0f 85 91 01 00 00    	jne    c00193a0 <CPU::detectFeatures()+0x8de>
c001920f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019215:	c1 ea 0e             	shr    edx,0xe
c0019218:	80 fa 05             	cmp    dl,0x5
c001921b:	75 7b                	jne    c0019298 <CPU::detectFeatures()+0x7d6>
c001921d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019223:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019228:	66 81 fa 00 01       	cmp    dx,0x100
c001922d:	75 0c                	jne    c001923b <CPU::detectFeatures()+0x779>
c001922f:	51                   	push   ecx
c0019230:	51                   	push   ecx
c0019231:	68 46 b8 02 c0       	push   0xc002b846
c0019236:	e9 dc 01 00 00       	jmp    c0019417 <CPU::detectFeatures()+0x955>
c001923b:	66 81 fa 00 02       	cmp    dx,0x200
c0019240:	75 0c                	jne    c001924e <CPU::detectFeatures()+0x78c>
c0019242:	52                   	push   edx
c0019243:	52                   	push   edx
c0019244:	68 59 b8 02 c0       	push   0xc002b859
c0019249:	e9 c9 01 00 00       	jmp    c0019417 <CPU::detectFeatures()+0x955>
c001924e:	66 81 fa 40 02       	cmp    dx,0x240
c0019253:	75 0c                	jne    c0019261 <CPU::detectFeatures()+0x79f>
c0019255:	50                   	push   eax
c0019256:	50                   	push   eax
c0019257:	68 6b b8 02 c0       	push   0xc002b86b
c001925c:	e9 b6 01 00 00       	jmp    c0019417 <CPU::detectFeatures()+0x955>
c0019261:	83 f8 06             	cmp    eax,0x6
c0019264:	75 0c                	jne    c0019272 <CPU::detectFeatures()+0x7b0>
c0019266:	50                   	push   eax
c0019267:	50                   	push   eax
c0019268:	68 7d b8 02 c0       	push   0xc002b87d
c001926d:	e9 a5 01 00 00       	jmp    c0019417 <CPU::detectFeatures()+0x955>
c0019272:	83 f8 04             	cmp    eax,0x4
c0019275:	75 0c                	jne    c0019283 <CPU::detectFeatures()+0x7c1>
c0019277:	50                   	push   eax
c0019278:	50                   	push   eax
c0019279:	68 89 b8 02 c0       	push   0xc002b889
c001927e:	e9 94 01 00 00       	jmp    c0019417 <CPU::detectFeatures()+0x955>
c0019283:	83 f8 03             	cmp    eax,0x3
c0019286:	0f 85 19 02 00 00    	jne    c00194a5 <CPU::detectFeatures()+0x9e3>
c001928c:	50                   	push   eax
c001928d:	50                   	push   eax
c001928e:	68 91 b8 02 c0       	push   0xc002b891
c0019293:	e9 7f 01 00 00       	jmp    c0019417 <CPU::detectFeatures()+0x955>
c0019298:	80 fa 06             	cmp    dl,0x6
c001929b:	0f 85 db 00 00 00    	jne    c001937c <CPU::detectFeatures()+0x8ba>
c00192a1:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00192a7:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00192ac:	66 81 fa 80 01       	cmp    dx,0x180
c00192b1:	75 0c                	jne    c00192bf <CPU::detectFeatures()+0x7fd>
c00192b3:	50                   	push   eax
c00192b4:	50                   	push   eax
c00192b5:	68 9c b8 02 c0       	push   0xc002b89c
c00192ba:	e9 58 01 00 00       	jmp    c0019417 <CPU::detectFeatures()+0x955>
c00192bf:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00192c5:	66 f7 c1 80 ff       	test   cx,0xff80
c00192ca:	75 0c                	jne    c00192d8 <CPU::detectFeatures()+0x816>
c00192cc:	50                   	push   eax
c00192cd:	50                   	push   eax
c00192ce:	68 ac b8 02 c0       	push   0xc002b8ac
c00192d3:	e9 3f 01 00 00       	jmp    c0019417 <CPU::detectFeatures()+0x955>
c00192d8:	66 81 fa 40 02       	cmp    dx,0x240
c00192dd:	75 0c                	jne    c00192eb <CPU::detectFeatures()+0x829>
c00192df:	55                   	push   ebp
c00192e0:	55                   	push   ebp
c00192e1:	68 b3 b8 02 c0       	push   0xc002b8b3
c00192e6:	e9 2c 01 00 00       	jmp    c0019417 <CPU::detectFeatures()+0x955>
c00192eb:	66 81 fa 80 02       	cmp    dx,0x280
c00192f0:	75 0c                	jne    c00192fe <CPU::detectFeatures()+0x83c>
c00192f2:	57                   	push   edi
c00192f3:	57                   	push   edi
c00192f4:	68 bc b8 02 c0       	push   0xc002b8bc
c00192f9:	e9 19 01 00 00       	jmp    c0019417 <CPU::detectFeatures()+0x955>
c00192fe:	66 81 fa 40 03       	cmp    dx,0x340
c0019303:	74 ed                	je     c00192f2 <CPU::detectFeatures()+0x830>
c0019305:	66 81 fa c0 03       	cmp    dx,0x3c0
c001930a:	75 0c                	jne    c0019318 <CPU::detectFeatures()+0x856>
c001930c:	56                   	push   esi
c001930d:	56                   	push   esi
c001930e:	68 c3 b8 02 c0       	push   0xc002b8c3
c0019313:	e9 ff 00 00 00       	jmp    c0019417 <CPU::detectFeatures()+0x955>
c0019318:	83 f8 06             	cmp    eax,0x6
c001931b:	0f 84 45 ff ff ff    	je     c0019266 <CPU::detectFeatures()+0x7a4>
c0019321:	83 f8 04             	cmp    eax,0x4
c0019324:	0f 84 4d ff ff ff    	je     c0019277 <CPU::detectFeatures()+0x7b5>
c001932a:	83 f8 03             	cmp    eax,0x3
c001932d:	0f 85 72 01 00 00    	jne    c00194a5 <CPU::detectFeatures()+0x9e3>
c0019333:	51                   	push   ecx
c0019334:	51                   	push   ecx
c0019335:	68 cc b8 02 c0       	push   0xc002b8cc
c001933a:	53                   	push   ebx
c001933b:	e8 8c aa ff ff       	call   c0013dcc <Device::setName(char const*)>
c0019340:	b1 c1                	mov    cl,0xc1
c0019342:	88 c8                	mov    al,cl
c0019344:	e6 22                	out    0x22,al
c0019346:	e4 23                	in     al,0x23
c0019348:	88 c2                	mov    dl,al
c001934a:	88 c8                	mov    al,cl
c001934c:	e6 22                	out    0x22,al
c001934e:	88 d0                	mov    al,dl
c0019350:	83 c8 10             	or     eax,0x10
c0019353:	e6 23                	out    0x23,al
c0019355:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001935c:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001935f:	89 d0                	mov    eax,edx
c0019361:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019367:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c001936b:	40                   	inc    eax
c001936c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019372:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019377:	e9 a1 00 00 00       	jmp    c001941d <CPU::detectFeatures()+0x95b>
c001937c:	83 f8 06             	cmp    eax,0x6
c001937f:	0f 84 e1 fe ff ff    	je     c0019266 <CPU::detectFeatures()+0x7a4>
c0019385:	83 f8 04             	cmp    eax,0x4
c0019388:	0f 84 e9 fe ff ff    	je     c0019277 <CPU::detectFeatures()+0x7b5>
c001938e:	83 f8 03             	cmp    eax,0x3
c0019391:	0f 85 0e 01 00 00    	jne    c00194a5 <CPU::detectFeatures()+0x9e3>
c0019397:	52                   	push   edx
c0019398:	52                   	push   edx
c0019399:	68 d7 b8 02 c0       	push   0xc002b8d7
c001939e:	eb 77                	jmp    c0019417 <CPU::detectFeatures()+0x955>
c00193a0:	83 f8 07             	cmp    eax,0x7
c00193a3:	75 09                	jne    c00193ae <CPU::detectFeatures()+0x8ec>
c00193a5:	50                   	push   eax
c00193a6:	50                   	push   eax
c00193a7:	68 e1 b8 02 c0       	push   0xc002b8e1
c00193ac:	eb 69                	jmp    c0019417 <CPU::detectFeatures()+0x955>
c00193ae:	83 f8 0a             	cmp    eax,0xa
c00193b1:	75 09                	jne    c00193bc <CPU::detectFeatures()+0x8fa>
c00193b3:	50                   	push   eax
c00193b4:	50                   	push   eax
c00193b5:	68 ec b8 02 c0       	push   0xc002b8ec
c00193ba:	eb 5b                	jmp    c0019417 <CPU::detectFeatures()+0x955>
c00193bc:	83 f8 0b             	cmp    eax,0xb
c00193bf:	75 09                	jne    c00193ca <CPU::detectFeatures()+0x908>
c00193c1:	50                   	push   eax
c00193c2:	50                   	push   eax
c00193c3:	68 f4 b8 02 c0       	push   0xc002b8f4
c00193c8:	eb 4d                	jmp    c0019417 <CPU::detectFeatures()+0x955>
c00193ca:	83 f8 08             	cmp    eax,0x8
c00193cd:	75 09                	jne    c00193d8 <CPU::detectFeatures()+0x916>
c00193cf:	50                   	push   eax
c00193d0:	50                   	push   eax
c00193d1:	68 fd b8 02 c0       	push   0xc002b8fd
c00193d6:	eb 3f                	jmp    c0019417 <CPU::detectFeatures()+0x955>
c00193d8:	83 f8 09             	cmp    eax,0x9
c00193db:	75 09                	jne    c00193e6 <CPU::detectFeatures()+0x924>
c00193dd:	50                   	push   eax
c00193de:	50                   	push   eax
c00193df:	68 05 b9 02 c0       	push   0xc002b905
c00193e4:	eb 31                	jmp    c0019417 <CPU::detectFeatures()+0x955>
c00193e6:	83 f8 05             	cmp    eax,0x5
c00193e9:	75 09                	jne    c00193f4 <CPU::detectFeatures()+0x932>
c00193eb:	50                   	push   eax
c00193ec:	50                   	push   eax
c00193ed:	68 0d b9 02 c0       	push   0xc002b90d
c00193f2:	eb 23                	jmp    c0019417 <CPU::detectFeatures()+0x955>
c00193f4:	83 f8 0c             	cmp    eax,0xc
c00193f7:	75 09                	jne    c0019402 <CPU::detectFeatures()+0x940>
c00193f9:	55                   	push   ebp
c00193fa:	55                   	push   ebp
c00193fb:	68 1b b9 02 c0       	push   0xc002b91b
c0019400:	eb 15                	jmp    c0019417 <CPU::detectFeatures()+0x955>
c0019402:	83 f8 0d             	cmp    eax,0xd
c0019405:	75 09                	jne    c0019410 <CPU::detectFeatures()+0x94e>
c0019407:	57                   	push   edi
c0019408:	57                   	push   edi
c0019409:	68 26 b9 02 c0       	push   0xc002b926
c001940e:	eb 07                	jmp    c0019417 <CPU::detectFeatures()+0x955>
c0019410:	56                   	push   esi
c0019411:	56                   	push   esi
c0019412:	68 3a b9 02 c0       	push   0xc002b93a
c0019417:	53                   	push   ebx
c0019418:	e8 af a9 ff ff       	call   c0013dcc <Device::setName(char const*)>
c001941d:	83 c4 10             	add    esp,0x10
c0019420:	e9 80 00 00 00       	jmp    c00194a5 <CPU::detectFeatures()+0x9e3>
c0019425:	51                   	push   ecx
c0019426:	51                   	push   ecx
c0019427:	68 86 b7 02 c0       	push   0xc002b786
c001942c:	55                   	push   ebp
c001942d:	e8 da 73 fe ff       	call   c000080c <strcpy>
c0019432:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001943c:	e8 6d 6e fe ff       	call   c00002ae <is486>
c0019441:	83 c4 10             	add    esp,0x10
c0019444:	85 c0                	test   eax,eax
c0019446:	74 2b                	je     c0019473 <CPU::detectFeatures()+0x9b1>
c0019448:	52                   	push   edx
c0019449:	52                   	push   edx
c001944a:	68 46 b9 02 c0       	push   0xc002b946
c001944f:	53                   	push   ebx
c0019450:	e8 77 a9 ff ff       	call   c0013dcc <Device::setName(char const*)>
c0019455:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001945c:	0f 20 c0             	mov    eax,cr0
c001945f:	83 e0 14             	and    eax,0x14
c0019462:	83 c4 10             	add    esp,0x10
c0019465:	83 f8 04             	cmp    eax,0x4
c0019468:	75 1f                	jne    c0019489 <CPU::detectFeatures()+0x9c7>
c001946a:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019471:	eb 32                	jmp    c00194a5 <CPU::detectFeatures()+0x9e3>
c0019473:	50                   	push   eax
c0019474:	50                   	push   eax
c0019475:	68 51 b9 02 c0       	push   0xc002b951
c001947a:	53                   	push   ebx
c001947b:	e8 4c a9 ff ff       	call   c0013dcc <Device::setName(char const*)>
c0019480:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019487:	eb d3                	jmp    c001945c <CPU::detectFeatures()+0x99a>
c0019489:	e8 fb 6d fe ff       	call   c0000289 <hasLegacyFPU>
c001948e:	83 e0 01             	and    eax,0x1
c0019491:	8d 14 00             	lea    edx,[eax+eax*1]
c0019494:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001949a:	83 e0 fd             	and    eax,0xfffffffd
c001949d:	09 d0                	or     eax,edx
c001949f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00194a5:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00194ac:	83 c4 4c             	add    esp,0x4c
c00194af:	5b                   	pop    ebx
c00194b0:	5e                   	pop    esi
c00194b1:	5f                   	pop    edi
c00194b2:	5d                   	pop    ebp
c00194b3:	c3                   	ret    

c00194b4 <CPU::setupSMEP()>:
c00194b4:	0f 20 e0             	mov    eax,cr4
c00194b7:	0d 00 00 10 00       	or     eax,0x100000
c00194bc:	0f 22 e0             	mov    cr4,eax
c00194bf:	c3                   	ret    

c00194c0 <CPU::setupUMIP()>:
c00194c0:	0f 20 e0             	mov    eax,cr4
c00194c3:	80 cc 08             	or     ah,0x8
c00194c6:	0f 22 e0             	mov    cr4,eax
c00194c9:	c3                   	ret    

c00194ca <CPU::setupTSC()>:
c00194ca:	0f 20 e0             	mov    eax,cr4
c00194cd:	83 c8 04             	or     eax,0x4
c00194d0:	0f 22 e0             	mov    cr4,eax
c00194d3:	c3                   	ret    

c00194d4 <CPU::setupLargePages()>:
c00194d4:	0f 20 e0             	mov    eax,cr4
c00194d7:	83 c8 10             	or     eax,0x10
c00194da:	0f 22 e0             	mov    cr4,eax
c00194dd:	c3                   	ret    

c00194de <CPU::setupPAT()>:
c00194de:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c00194e3:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00194ea:	74 2c                	je     c0019518 <CPU::setupPAT()+0x3a>
c00194ec:	53                   	push   ebx
c00194ed:	83 ec 10             	sub    esp,0x10
c00194f0:	68 77 02 00 00       	push   0x277
c00194f5:	50                   	push   eax
c00194f6:	e8 45 56 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c00194fb:	83 e2 f8             	and    edx,0xfffffff8
c00194fe:	83 ca 01             	or     edx,0x1
c0019501:	52                   	push   edx
c0019502:	50                   	push   eax
c0019503:	68 77 02 00 00       	push   0x277
c0019508:	ff 35 c8 dd 02 c0    	push   DWORD PTR ds:0xc002ddc8
c001950e:	e8 59 56 ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c0019513:	83 c4 28             	add    esp,0x28
c0019516:	5b                   	pop    ebx
c0019517:	c3                   	ret    
c0019518:	c3                   	ret    
c0019519:	90                   	nop

c001951a <CPU::setupMTRR()>:
c001951a:	c3                   	ret    
c001951b:	90                   	nop

c001951c <CPU::setupGlobalPages()>:
c001951c:	0f 20 e0             	mov    eax,cr4
c001951f:	0c 80                	or     al,0x80
c0019521:	0f 22 e0             	mov    cr4,eax
c0019524:	c3                   	ret    
c0019525:	90                   	nop

c0019526 <CPU::allowUsermodeDataAccess()>:
c0019526:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001952a:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019531:	74 03                	je     c0019536 <CPU::allowUsermodeDataAccess()+0x10>
c0019533:	0f 01 cb             	stac   
c0019536:	c3                   	ret    
c0019537:	90                   	nop

c0019538 <CPU::prohibitUsermodeDataAccess()>:
c0019538:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001953c:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019543:	74 03                	je     c0019548 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019545:	0f 01 ca             	clac   
c0019548:	c3                   	ret    
c0019549:	90                   	nop

c001954a <CPU::setupSMAP()>:
c001954a:	0f 20 e0             	mov    eax,cr4
c001954d:	0d 00 00 20 00       	or     eax,0x200000
c0019552:	0f 22 e0             	mov    cr4,eax
c0019555:	eb e1                	jmp    c0019538 <CPU::prohibitUsermodeDataAccess()>
c0019557:	90                   	nop

c0019558 <CPU::setupFeatures()>:
c0019558:	83 ec 0c             	sub    esp,0xc
c001955b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001955f:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019566:	74 07                	je     c001956f <CPU::setupFeatures()+0x17>
c0019568:	52                   	push   edx
c0019569:	e8 46 ff ff ff       	call   c00194b4 <CPU::setupSMEP()>
c001956e:	58                   	pop    eax
c001956f:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019576:	74 07                	je     c001957f <CPU::setupFeatures()+0x27>
c0019578:	52                   	push   edx
c0019579:	e8 cc ff ff ff       	call   c001954a <CPU::setupSMAP()>
c001957e:	58                   	pop    eax
c001957f:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019586:	74 07                	je     c001958f <CPU::setupFeatures()+0x37>
c0019588:	52                   	push   edx
c0019589:	e8 32 ff ff ff       	call   c00194c0 <CPU::setupUMIP()>
c001958e:	58                   	pop    eax
c001958f:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019596:	74 07                	je     c001959f <CPU::setupFeatures()+0x47>
c0019598:	52                   	push   edx
c0019599:	e8 2c ff ff ff       	call   c00194ca <CPU::setupTSC()>
c001959e:	58                   	pop    eax
c001959f:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c00195a6:	74 07                	je     c00195af <CPU::setupFeatures()+0x57>
c00195a8:	52                   	push   edx
c00195a9:	e8 26 ff ff ff       	call   c00194d4 <CPU::setupLargePages()>
c00195ae:	59                   	pop    ecx
c00195af:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c00195b6:	74 07                	je     c00195bf <CPU::setupFeatures()+0x67>
c00195b8:	52                   	push   edx
c00195b9:	e8 5e ff ff ff       	call   c001951c <CPU::setupGlobalPages()>
c00195be:	58                   	pop    eax
c00195bf:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c00195c6:	74 0c                	je     c00195d4 <CPU::setupFeatures()+0x7c>
c00195c8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00195cc:	83 c4 0c             	add    esp,0xc
c00195cf:	e9 0a ff ff ff       	jmp    c00194de <CPU::setupPAT()>
c00195d4:	83 c4 0c             	add    esp,0xc
c00195d7:	c3                   	ret    

c00195d8 <CPU::open(int, int, void*)>:
c00195d8:	57                   	push   edi
c00195d9:	56                   	push   esi
c00195da:	53                   	push   ebx
c00195db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00195df:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00195e3:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00195e9:	83 ec 0c             	sub    esp,0xc
c00195ec:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00195f2:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00195f8:	50                   	push   eax
c00195f9:	e8 30 58 ff ff       	call   c000ee2e <GDT::setup()>
c00195fe:	83 c4 0c             	add    esp,0xc
c0019601:	6a 00                	push   0x0
c0019603:	68 ef be ad de       	push   0xdeadbeef
c0019608:	57                   	push   edi
c0019609:	e8 98 75 ff ff       	call   c0010ba6 <TSS::setup(unsigned long, unsigned long)>
c001960e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019611:	e8 70 75 ff ff       	call   c0010b86 <TSS::flush()>
c0019616:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001961c:	89 04 24             	mov    DWORD PTR [esp],eax
c001961f:	e8 6e 5a ff ff       	call   c000f092 <IDT::setup()>
c0019624:	b8 00 04 00 00       	mov    eax,0x400
c0019629:	0f 23 f8             	mov    db7,eax
c001962c:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019636:	e8 5a 63 ff ff       	call   c000f995 <Phys::allocatePage()>
c001963b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019641:	89 30                	mov    DWORD PTR [eax],esi
c0019643:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019649:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001964c:	58                   	pop    eax
c001964d:	5a                   	pop    edx
c001964e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019654:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019658:	e8 ef 86 ff ff       	call   c0011d4c <VAS::setCPUSpecific(unsigned long)>
c001965d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019660:	e8 5d f4 ff ff       	call   c0018ac2 <CPU::detectFeatures()>
c0019665:	e8 bc bb ff ff       	call   c0015226 <setupInterruptController()>
c001966a:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019670:	a1 e0 dd 02 c0       	mov    eax,ds:0xc002dde0
c0019675:	83 e0 10             	and    eax,0x10
c0019678:	83 f8 01             	cmp    eax,0x1
c001967b:	19 c0                	sbb    eax,eax
c001967d:	83 e0 46             	and    eax,0x46
c0019680:	83 c0 1e             	add    eax,0x1e
c0019683:	89 04 24             	mov    DWORD PTR [esp],eax
c0019686:	e8 88 d1 ff ff       	call   c0016813 <setupTimer(int)>
c001968b:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019691:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019694:	e8 bf fe ff ff       	call   c0019558 <CPU::setupFeatures()>
c0019699:	83 c4 10             	add    esp,0x10
c001969c:	31 c0                	xor    eax,eax
c001969e:	5b                   	pop    ebx
c001969f:	5e                   	pop    esi
c00196a0:	5f                   	pop    edi
c00196a1:	c3                   	ret    

c00196a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00196a2:	57                   	push   edi
c00196a3:	56                   	push   esi
c00196a4:	53                   	push   ebx
c00196a5:	51                   	push   ecx
c00196a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00196aa:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c00196ad:	0f 02 c0             	lar    eax,ax
c00196b0:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c00196b3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00196b7:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c00196ba:	88 ca                	mov    dl,cl
c00196bc:	c0 ea 06             	shr    dl,0x6
c00196bf:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c00196c3:	89 ca                	mov    edx,ecx
c00196c5:	66 c1 ea 03          	shr    dx,0x3
c00196c9:	83 e2 07             	and    edx,0x7
c00196cc:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c00196d1:	88 17                	mov    BYTE PTR [edi],dl
c00196d3:	0f 84 a6 01 00 00    	je     c001987f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c00196d9:	83 e1 07             	and    ecx,0x7
c00196dc:	80 f9 04             	cmp    cl,0x4
c00196df:	0f 84 98 00 00 00    	je     c001977d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c00196e5:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00196ea:	0f 95 c0             	setne  al
c00196ed:	80 f9 05             	cmp    cl,0x5
c00196f0:	0f 95 c2             	setne  dl
c00196f3:	08 c2                	or     dl,al
c00196f5:	74 79                	je     c0019770 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c00196f7:	84 c9                	test   cl,cl
c00196f9:	75 05                	jne    c0019700 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c00196fb:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00196fe:	eb 3c                	jmp    c001973c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019700:	80 f9 01             	cmp    cl,0x1
c0019703:	75 05                	jne    c001970a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019705:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019708:	eb 32                	jmp    c001973c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001970a:	80 f9 02             	cmp    cl,0x2
c001970d:	75 05                	jne    c0019714 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c001970f:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019712:	eb 28                	jmp    c001973c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019714:	31 c0                	xor    eax,eax
c0019716:	80 f9 03             	cmp    cl,0x3
c0019719:	75 05                	jne    c0019720 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c001971b:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001971e:	eb 1c                	jmp    c001973c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019720:	80 f9 05             	cmp    cl,0x5
c0019723:	75 05                	jne    c001972a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019725:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019728:	eb 12                	jmp    c001973c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001972a:	80 f9 06             	cmp    cl,0x6
c001972d:	75 05                	jne    c0019734 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c001972f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019732:	eb 08                	jmp    c001973c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019734:	80 f9 07             	cmp    cl,0x7
c0019737:	75 03                	jne    c001973c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019739:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001973c:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019741:	75 10                	jne    c0019753 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019743:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019747:	b9 03 00 00 00       	mov    ecx,0x3
c001974c:	01 d0                	add    eax,edx
c001974e:	e9 37 01 00 00       	jmp    c001988a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019753:	b9 02 00 00 00       	mov    ecx,0x2
c0019758:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c001975d:	0f 85 27 01 00 00    	jne    c001988a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019763:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019766:	b9 06 00 00 00       	mov    ecx,0x6
c001976b:	e9 1a 01 00 00       	jmp    c001988a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019770:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019773:	b9 06 00 00 00       	mov    ecx,0x6
c0019778:	e9 0f 01 00 00       	jmp    c001988c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001977d:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019780:	88 ca                	mov    dl,cl
c0019782:	c0 ea 06             	shr    dl,0x6
c0019785:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019789:	89 ca                	mov    edx,ecx
c001978b:	66 c1 ea 03          	shr    dx,0x3
c001978f:	83 e2 07             	and    edx,0x7
c0019792:	80 e1 07             	and    cl,0x7
c0019795:	75 05                	jne    c001979c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019797:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c001979a:	eb 4c                	jmp    c00197e8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001979c:	80 f9 01             	cmp    cl,0x1
c001979f:	75 05                	jne    c00197a6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c00197a1:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00197a4:	eb 42                	jmp    c00197e8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00197a6:	80 f9 02             	cmp    cl,0x2
c00197a9:	75 05                	jne    c00197b0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c00197ab:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00197ae:	eb 38                	jmp    c00197e8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00197b0:	80 f9 03             	cmp    cl,0x3
c00197b3:	75 05                	jne    c00197ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c00197b5:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c00197b8:	eb 2e                	jmp    c00197e8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00197ba:	80 f9 04             	cmp    cl,0x4
c00197bd:	75 12                	jne    c00197d1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c00197bf:	f6 c4 60             	test   ah,0x60
c00197c2:	75 08                	jne    c00197cc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c00197c4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00197c7:	8d 78 14             	lea    edi,[eax+0x14]
c00197ca:	eb 1c                	jmp    c00197e8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00197cc:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c00197cf:	eb 17                	jmp    c00197e8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00197d1:	80 f9 05             	cmp    cl,0x5
c00197d4:	75 05                	jne    c00197db <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c00197d6:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00197d9:	eb 0d                	jmp    c00197e8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00197db:	80 f9 06             	cmp    cl,0x6
c00197de:	75 05                	jne    c00197e5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c00197e0:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00197e3:	eb 03                	jmp    c00197e8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00197e5:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c00197e8:	84 d2                	test   dl,dl
c00197ea:	75 05                	jne    c00197f1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c00197ec:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00197ef:	eb 3c                	jmp    c001982d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00197f1:	80 fa 01             	cmp    dl,0x1
c00197f4:	75 05                	jne    c00197fb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c00197f6:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00197f9:	eb 32                	jmp    c001982d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00197fb:	80 fa 02             	cmp    dl,0x2
c00197fe:	75 05                	jne    c0019805 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019800:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019803:	eb 28                	jmp    c001982d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019805:	80 fa 03             	cmp    dl,0x3
c0019808:	75 05                	jne    c001980f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c001980a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001980d:	eb 1e                	jmp    c001982d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001980f:	31 c0                	xor    eax,eax
c0019811:	80 fa 04             	cmp    dl,0x4
c0019814:	74 17                	je     c001982d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019816:	80 fa 05             	cmp    dl,0x5
c0019819:	75 05                	jne    c0019820 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c001981b:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001981e:	eb 0d                	jmp    c001982d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019820:	80 fa 06             	cmp    dl,0x6
c0019823:	75 05                	jne    c001982a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019825:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019828:	eb 03                	jmp    c001982d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001982a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001982d:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019832:	0f 94 c2             	sete   dl
c0019835:	80 f9 05             	cmp    cl,0x5
c0019838:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c001983c:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019841:	d3 e0                	shl    eax,cl
c0019843:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019847:	74 0a                	je     c0019853 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019849:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001984c:	b9 07 00 00 00       	mov    ecx,0x7
c0019851:	eb 37                	jmp    c001988a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019853:	01 f8                	add    eax,edi
c0019855:	b9 03 00 00 00       	mov    ecx,0x3
c001985a:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001985f:	74 2b                	je     c001988c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019861:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019866:	75 0d                	jne    c0019875 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019868:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c001986c:	01 c8                	add    eax,ecx
c001986e:	b9 04 00 00 00       	mov    ecx,0x4
c0019873:	eb 17                	jmp    c001988c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019875:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019878:	b9 07 00 00 00       	mov    ecx,0x7
c001987d:	eb 0d                	jmp    c001988c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001987f:	b9 02 00 00 00       	mov    ecx,0x2
c0019884:	b2 01                	mov    dl,0x1
c0019886:	31 c0                	xor    eax,eax
c0019888:	eb 02                	jmp    c001988c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001988a:	31 d2                	xor    edx,edx
c001988c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019890:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019892:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019896:	88 11                	mov    BYTE PTR [ecx],dl
c0019898:	5a                   	pop    edx
c0019899:	5b                   	pop    ebx
c001989a:	5e                   	pop    esi
c001989b:	5f                   	pop    edi
c001989c:	c3                   	ret    

c001989d <Krnl::smpEntry()>:
c001989d:	eb fe                	jmp    c001989d <Krnl::smpEntry()>

c001989f <Krnl::startCPU(int)>:
c001989f:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c00198a4:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00198ab:	0f 84 36 01 00 00    	je     c00199e7 <Krnl::startCPU(int)+0x148>
c00198b1:	53                   	push   ebx
c00198b2:	83 ec 10             	sub    esp,0x10
c00198b5:	fa                   	cli    
c00198b6:	ff 05 c8 f2 02 c0    	inc    DWORD PTR ds:0xc002f2c8
c00198bc:	6a 1b                	push   0x1b
c00198be:	ff 35 c8 dd 02 c0    	push   DWORD PTR ds:0xc002ddc8
c00198c4:	e8 77 52 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c00198c9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00198ce:	89 c3                	mov    ebx,eax
c00198d0:	58                   	pop    eax
c00198d1:	5a                   	pop    edx
c00198d2:	53                   	push   ebx
c00198d3:	68 88 b9 02 c0       	push   0xc002b988
c00198d8:	e8 c0 8e ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00198dd:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00198e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00198eb:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00198f5:	c1 e0 18             	shl    eax,0x18
c00198f8:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c00198fe:	83 c4 10             	add    esp,0x10
c0019901:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019907:	09 c2                	or     edx,eax
c0019909:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c001990f:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019915:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001991b:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019921:	80 cd c5             	or     ch,0xc5
c0019924:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001992a:	f3 90                	pause  
c001992c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001992e:	0f ba e1 0c          	bt     ecx,0xc
c0019932:	72 f6                	jb     c001992a <Krnl::startCPU(int)+0x8b>
c0019934:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001993a:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019940:	09 c1                	or     ecx,eax
c0019942:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019948:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001994e:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019954:	80 cd 85             	or     ch,0x85
c0019957:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001995d:	f3 90                	pause  
c001995f:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019961:	0f ba e1 0c          	bt     ecx,0xc
c0019965:	72 f6                	jb     c001995d <Krnl::startCPU(int)+0xbe>
c0019967:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019971:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019977:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001997d:	09 c1                	or     ecx,eax
c001997f:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019985:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001998b:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019991:	81 c9 02 06 00 00    	or     ecx,0x602
c0019997:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001999d:	f3 90                	pause  
c001999f:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00199a1:	0f ba e1 0c          	bt     ecx,0xc
c00199a5:	72 f6                	jb     c001999d <Krnl::startCPU(int)+0xfe>
c00199a7:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00199b1:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00199b7:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00199bd:	09 c8                	or     eax,ecx
c00199bf:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c00199c5:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c00199cb:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c00199d0:	0d 02 06 00 00       	or     eax,0x602
c00199d5:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c00199db:	f3 90                	pause  
c00199dd:	8b 02                	mov    eax,DWORD PTR [edx]
c00199df:	0f ba e0 0c          	bt     eax,0xc
c00199e3:	72 f6                	jb     c00199db <Krnl::startCPU(int)+0x13c>
c00199e5:	eb fe                	jmp    c00199e5 <Krnl::startCPU(int)+0x146>
c00199e7:	c3                   	ret    

c00199e8 <Krnl::startCPUs()>:
c00199e8:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c00199ed:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00199f3:	88 c2                	mov    dl,al
c00199f5:	83 e2 0a             	and    edx,0xa
c00199f8:	80 fa 0a             	cmp    dl,0xa
c00199fb:	75 09                	jne    c0019a06 <Krnl::startCPUs()+0x1e>
c00199fd:	a8 01                	test   al,0x1
c00199ff:	74 05                	je     c0019a06 <Krnl::startCPUs()+0x1e>
c0019a01:	e9 95 67 fe ff       	jmp    c000019b <prepareTramp>
c0019a06:	c3                   	ret    
c0019a07:	90                   	nop

c0019a08 <EnvVarContainer::getEnv(char const*)>:
c0019a08:	57                   	push   edi
c0019a09:	56                   	push   esi
c0019a0a:	53                   	push   ebx
c0019a0b:	31 db                	xor    ebx,ebx
c0019a0d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019a11:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019a13:	7e 2b                	jle    c0019a40 <EnvVarContainer::getEnv(char const*)+0x38>
c0019a15:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019a1c:	50                   	push   eax
c0019a1d:	50                   	push   eax
c0019a1e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019a21:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019a24:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019a28:	e8 6b 6e fe ff       	call   c0000898 <strcmp>
c0019a2d:	83 c4 10             	add    esp,0x10
c0019a30:	85 c0                	test   eax,eax
c0019a32:	75 09                	jne    c0019a3d <EnvVarContainer::getEnv(char const*)+0x35>
c0019a34:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019a37:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019a3b:	eb 05                	jmp    c0019a42 <EnvVarContainer::getEnv(char const*)+0x3a>
c0019a3d:	43                   	inc    ebx
c0019a3e:	eb d1                	jmp    c0019a11 <EnvVarContainer::getEnv(char const*)+0x9>
c0019a40:	31 c0                	xor    eax,eax
c0019a42:	5b                   	pop    ebx
c0019a43:	5e                   	pop    esi
c0019a44:	5f                   	pop    edi
c0019a45:	c3                   	ret    

c0019a46 <EnvVarContainer::setEnv(char const*, char const*)>:
c0019a46:	55                   	push   ebp
c0019a47:	57                   	push   edi
c0019a48:	56                   	push   esi
c0019a49:	53                   	push   ebx
c0019a4a:	83 ec 28             	sub    esp,0x28
c0019a4d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0019a51:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0019a55:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0019a59:	56                   	push   esi
c0019a5a:	e8 0d 6d fe ff       	call   c000076c <strlen>
c0019a5f:	40                   	inc    eax
c0019a60:	89 04 24             	mov    DWORD PTR [esp],eax
c0019a63:	e8 31 5b ff ff       	call   c000f599 <malloc>
c0019a68:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a6b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019a6f:	e8 f8 6c fe ff       	call   c000076c <strlen>
c0019a74:	40                   	inc    eax
c0019a75:	89 04 24             	mov    DWORD PTR [esp],eax
c0019a78:	e8 1c 5b ff ff       	call   c000f599 <malloc>
c0019a7d:	89 34 24             	mov    DWORD PTR [esp],esi
c0019a80:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019a84:	e8 e3 6c fe ff       	call   c000076c <strlen>
c0019a89:	83 c4 0c             	add    esp,0xc
c0019a8c:	40                   	inc    eax
c0019a8d:	50                   	push   eax
c0019a8e:	6a 00                	push   0x0
c0019a90:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019a94:	e8 b7 6c fe ff       	call   c0000750 <memset>
c0019a99:	89 34 24             	mov    DWORD PTR [esp],esi
c0019a9c:	e8 cb 6c fe ff       	call   c000076c <strlen>
c0019aa1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019aa5:	8d 48 01             	lea    ecx,[eax+0x1]
c0019aa8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019aaa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019aad:	89 de                	mov    esi,ebx
c0019aaf:	e8 b8 6c fe ff       	call   c000076c <strlen>
c0019ab4:	83 c4 0c             	add    esp,0xc
c0019ab7:	40                   	inc    eax
c0019ab8:	50                   	push   eax
c0019ab9:	6a 00                	push   0x0
c0019abb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019abf:	e8 8c 6c fe ff       	call   c0000750 <memset>
c0019ac4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ac7:	e8 a0 6c fe ff       	call   c000076c <strlen>
c0019acc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019ad0:	8d 48 01             	lea    ecx,[eax+0x1]
c0019ad3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019ad5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019ad8:	40                   	inc    eax
c0019ad9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019adc:	c1 e0 03             	shl    eax,0x3
c0019adf:	5a                   	pop    edx
c0019ae0:	59                   	pop    ecx
c0019ae1:	50                   	push   eax
c0019ae2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019ae5:	e8 9b 5a ff ff       	call   c000f585 <realloc>
c0019aea:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019aee:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019af1:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019af4:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019af8:	b9 08 00 00 00       	mov    ecx,0x8
c0019afd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019aff:	83 c4 2c             	add    esp,0x2c
c0019b02:	5b                   	pop    ebx
c0019b03:	5e                   	pop    esi
c0019b04:	5f                   	pop    edi
c0019b05:	5d                   	pop    ebp
c0019b06:	c3                   	ret    
c0019b07:	90                   	nop

c0019b08 <EnvVarContainer::deleteEnv(char const*)>:
c0019b08:	c3                   	ret    
c0019b09:	90                   	nop

c0019b0a <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019b0a:	55                   	push   ebp
c0019b0b:	57                   	push   edi
c0019b0c:	56                   	push   esi
c0019b0d:	53                   	push   ebx
c0019b0e:	81 ec 38 01 00 00    	sub    esp,0x138
c0019b14:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0019b1b:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0019b22:	68 14 01 00 00       	push   0x114
c0019b27:	e8 6d 5a ff ff       	call   c000f599 <malloc>
c0019b2c:	83 c4 0c             	add    esp,0xc
c0019b2f:	89 c3                	mov    ebx,eax
c0019b31:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019b34:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019b3b:	50                   	push   eax
c0019b3c:	e8 bb 91 ff ff       	call   c0012cfc <File::File(char const*, Process*)>
c0019b41:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b44:	e8 85 94 ff ff       	call   c0012fce <File::exists()>
c0019b49:	83 c4 10             	add    esp,0x10
c0019b4c:	84 c0                	test   al,al
c0019b4e:	75 31                	jne    c0019b81 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0019b50:	50                   	push   eax
c0019b51:	50                   	push   eax
c0019b52:	6a 12                	push   0x12
c0019b54:	53                   	push   ebx
c0019b55:	e8 06 92 ff ff       	call   c0012d60 <File::open(FileOpenMode)>
c0019b5a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b5c:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0019b5f:	89 34 24             	mov    DWORD PTR [esp],esi
c0019b62:	e8 05 6c fe ff       	call   c000076c <strlen>
c0019b67:	5a                   	pop    edx
c0019b68:	31 d2                	xor    edx,edx
c0019b6a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019b6e:	51                   	push   ecx
c0019b6f:	56                   	push   esi
c0019b70:	52                   	push   edx
c0019b71:	50                   	push   eax
c0019b72:	53                   	push   ebx
c0019b73:	ff d7                	call   edi
c0019b75:	83 c4 14             	add    esp,0x14
c0019b78:	53                   	push   ebx
c0019b79:	e8 40 92 ff ff       	call   c0012dbe <File::close()>
c0019b7e:	83 c4 10             	add    esp,0x10
c0019b81:	56                   	push   esi
c0019b82:	31 f6                	xor    esi,esi
c0019b84:	68 00 01 00 00       	push   0x100
c0019b89:	6a 00                	push   0x0
c0019b8b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019b8f:	50                   	push   eax
c0019b90:	e8 bb 6b fe ff       	call   c0000750 <memset>
c0019b95:	5f                   	pop    edi
c0019b96:	58                   	pop    eax
c0019b97:	6a 01                	push   0x1
c0019b99:	53                   	push   ebx
c0019b9a:	e8 c1 91 ff ff       	call   c0012d60 <File::open(FileOpenMode)>
c0019b9f:	83 c4 10             	add    esp,0x10
c0019ba2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019baa:	83 ec 0c             	sub    esp,0xc
c0019bad:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019baf:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019bb3:	51                   	push   ecx
c0019bb4:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019bb8:	52                   	push   edx
c0019bb9:	6a 00                	push   0x0
c0019bbb:	6a 01                	push   0x1
c0019bbd:	53                   	push   ebx
c0019bbe:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019bc1:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019bc5:	83 c4 20             	add    esp,0x20
c0019bc8:	3c 0d                	cmp    al,0xd
c0019bca:	0f 84 09 01 00 00    	je     c0019cd9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019bd0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019bd5:	0f 84 ef 00 00 00    	je     c0019cca <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019bdb:	3c 0a                	cmp    al,0xa
c0019bdd:	74 13                	je     c0019bf2 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019bdf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019be4:	74 0c                	je     c0019bf2 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019be6:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0019bec:	0f 8e d8 00 00 00    	jle    c0019cca <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019bf2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019bf6:	83 ec 0c             	sub    esp,0xc
c0019bf9:	8d 78 01             	lea    edi,[eax+0x1]
c0019bfc:	57                   	push   edi
c0019bfd:	e8 97 59 ff ff       	call   c000f599 <malloc>
c0019c02:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0019c06:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019c0a:	8d 56 04             	lea    edx,[esi+0x4]
c0019c0d:	89 14 24             	mov    DWORD PTR [esp],edx
c0019c10:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019c14:	e8 80 59 ff ff       	call   c000f599 <malloc>
c0019c19:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019c1d:	83 c4 0c             	add    esp,0xc
c0019c20:	57                   	push   edi
c0019c21:	6a 00                	push   0x0
c0019c23:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019c27:	e8 24 6b fe ff       	call   c0000750 <memset>
c0019c2c:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019c30:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019c34:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0019c38:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019c3a:	83 c4 0c             	add    esp,0xc
c0019c3d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c41:	52                   	push   edx
c0019c42:	6a 00                	push   0x0
c0019c44:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019c48:	e8 03 6b fe ff       	call   c0000750 <memset>
c0019c4d:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019c51:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0019c55:	89 34 24             	mov    DWORD PTR [esp],esi
c0019c58:	e8 0f 6b fe ff       	call   c000076c <strlen>
c0019c5d:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0019c61:	89 c1                	mov    ecx,eax
c0019c63:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019c65:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019c68:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0019c6b:	40                   	inc    eax
c0019c6c:	83 c4 10             	add    esp,0x10
c0019c6f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019c72:	85 d2                	test   edx,edx
c0019c74:	75 0c                	jne    c0019c82 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0019c76:	83 ec 0c             	sub    esp,0xc
c0019c79:	6a 08                	push   0x8
c0019c7b:	e8 19 59 ff ff       	call   c000f599 <malloc>
c0019c80:	eb 0c                	jmp    c0019c8e <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0019c82:	c1 e0 03             	shl    eax,0x3
c0019c85:	51                   	push   ecx
c0019c86:	51                   	push   ecx
c0019c87:	50                   	push   eax
c0019c88:	52                   	push   edx
c0019c89:	e8 f7 58 ff ff       	call   c000f585 <realloc>
c0019c8e:	83 c4 10             	add    esp,0x10
c0019c91:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019c94:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019c97:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0019c9a:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019c9e:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019ca2:	b9 08 00 00 00       	mov    ecx,0x8
c0019ca7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019ca9:	31 f6                	xor    esi,esi
c0019cab:	50                   	push   eax
c0019cac:	68 00 01 00 00       	push   0x100
c0019cb1:	6a 00                	push   0x0
c0019cb3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019cb7:	50                   	push   eax
c0019cb8:	e8 93 6a fe ff       	call   c0000750 <memset>
c0019cbd:	83 c4 10             	add    esp,0x10
c0019cc0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019cc8:	eb 0f                	jmp    c0019cd9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019cca:	3c 3d                	cmp    al,0x3d
c0019ccc:	74 07                	je     c0019cd5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0019cce:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0019cd2:	46                   	inc    esi
c0019cd3:	eb 04                	jmp    c0019cd9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019cd5:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0019cd9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019cde:	0f 85 c6 fe ff ff    	jne    c0019baa <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0019ce4:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019cea:	5b                   	pop    ebx
c0019ceb:	5e                   	pop    esi
c0019cec:	5f                   	pop    edi
c0019ced:	5d                   	pop    ebp
c0019cee:	c3                   	ret    
c0019cef:	90                   	nop

c0019cf0 <EnvVarContainer::__loadSystem()>:
c0019cf0:	83 ec 10             	sub    esp,0x10
c0019cf3:	68 00 d3 02 c0       	push   0xc002d300
c0019cf8:	68 99 b9 02 c0       	push   0xc002b999
c0019cfd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019d01:	e8 04 fe ff ff       	call   c0019b0a <EnvVarContainer::loadFrom(char const*, char const*)>
c0019d06:	83 c4 1c             	add    esp,0x1c
c0019d09:	c3                   	ret    

c0019d0a <EnvVarContainer::__loadUser()>:
c0019d0a:	c3                   	ret    
c0019d0b:	90                   	nop

c0019d0c <EnvVarContainer::EnvVarContainer(Process*)>:
c0019d0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d10:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019d16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d1a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019d1e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019d21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d25:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019d2c:	90                   	nop
c0019d2d:	c3                   	ret    

c0019d2e <EnvVarContainer::~EnvVarContainer()>:
c0019d2e:	83 ec 0c             	sub    esp,0xc
c0019d31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d35:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019d38:	85 c0                	test   eax,eax
c0019d3a:	74 1d                	je     c0019d59 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019d3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d40:	8b 00                	mov    eax,DWORD PTR [eax]
c0019d42:	85 c0                	test   eax,eax
c0019d44:	74 13                	je     c0019d59 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019d46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019d4d:	83 ec 0c             	sub    esp,0xc
c0019d50:	50                   	push   eax
c0019d51:	e8 53 58 ff ff       	call   c000f5a9 <free>
c0019d56:	83 c4 10             	add    esp,0x10
c0019d59:	90                   	nop
c0019d5a:	83 c4 0c             	add    esp,0xc
c0019d5d:	c3                   	ret    

c0019d5e <Krnl::getEnv(Process*, char const*)>:
c0019d5e:	53                   	push   ebx
c0019d5f:	83 ec 08             	sub    esp,0x8
c0019d62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d66:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019d6a:	39 05 f0 f2 02 c0    	cmp    DWORD PTR ds:0xc002f2f0,eax
c0019d70:	74 04                	je     c0019d76 <Krnl::getEnv(Process*, char const*)+0x18>
c0019d72:	85 c0                	test   eax,eax
c0019d74:	75 0b                	jne    c0019d81 <Krnl::getEnv(Process*, char const*)+0x23>
c0019d76:	a1 d4 e8 02 c0       	mov    eax,ds:0xc002e8d4
c0019d7b:	85 c0                	test   eax,eax
c0019d7d:	75 19                	jne    c0019d98 <Krnl::getEnv(Process*, char const*)+0x3a>
c0019d7f:	eb 27                	jmp    c0019da8 <Krnl::getEnv(Process*, char const*)+0x4a>
c0019d81:	52                   	push   edx
c0019d82:	52                   	push   edx
c0019d83:	53                   	push   ebx
c0019d84:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019d8a:	e8 79 fc ff ff       	call   c0019a08 <EnvVarContainer::getEnv(char const*)>
c0019d8f:	83 c4 10             	add    esp,0x10
c0019d92:	85 c0                	test   eax,eax
c0019d94:	75 28                	jne    c0019dbe <Krnl::getEnv(Process*, char const*)+0x60>
c0019d96:	eb de                	jmp    c0019d76 <Krnl::getEnv(Process*, char const*)+0x18>
c0019d98:	52                   	push   edx
c0019d99:	52                   	push   edx
c0019d9a:	53                   	push   ebx
c0019d9b:	50                   	push   eax
c0019d9c:	e8 67 fc ff ff       	call   c0019a08 <EnvVarContainer::getEnv(char const*)>
c0019da1:	83 c4 10             	add    esp,0x10
c0019da4:	85 c0                	test   eax,eax
c0019da6:	75 16                	jne    c0019dbe <Krnl::getEnv(Process*, char const*)+0x60>
c0019da8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019dac:	a1 d8 e8 02 c0       	mov    eax,ds:0xc002e8d8
c0019db1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019db5:	83 c4 08             	add    esp,0x8
c0019db8:	5b                   	pop    ebx
c0019db9:	e9 4a fc ff ff       	jmp    c0019a08 <EnvVarContainer::getEnv(char const*)>
c0019dbe:	83 c4 08             	add    esp,0x8
c0019dc1:	5b                   	pop    ebx
c0019dc2:	c3                   	ret    

c0019dc3 <Krnl::setEnvSystem(char const*, char const*)>:
c0019dc3:	83 ec 10             	sub    esp,0x10
c0019dc6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019dca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019dce:	ff 35 d8 e8 02 c0    	push   DWORD PTR ds:0xc002e8d8
c0019dd4:	e8 6d fc ff ff       	call   c0019a46 <EnvVarContainer::setEnv(char const*, char const*)>
c0019dd9:	83 c4 1c             	add    esp,0x1c
c0019ddc:	c3                   	ret    

c0019ddd <Krnl::setEnvUser(char const*, char const*)>:
c0019ddd:	a1 d4 e8 02 c0       	mov    eax,ds:0xc002e8d4
c0019de2:	85 c0                	test   eax,eax
c0019de4:	74 15                	je     c0019dfb <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0019de6:	83 ec 10             	sub    esp,0x10
c0019de9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019ded:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019df1:	50                   	push   eax
c0019df2:	e8 4f fc ff ff       	call   c0019a46 <EnvVarContainer::setEnv(char const*, char const*)>
c0019df7:	83 c4 1c             	add    esp,0x1c
c0019dfa:	c3                   	ret    
c0019dfb:	c3                   	ret    

c0019dfc <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0019dfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019e00:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c0019e06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019e0a:	e9 37 fc ff ff       	jmp    c0019a46 <EnvVarContainer::setEnv(char const*, char const*)>

c0019e0f <Krnl::deleteEnvSystem(char const*)>:
c0019e0f:	c3                   	ret    

c0019e10 <Krnl::deleteEnvUser(char const*)>:
c0019e10:	c3                   	ret    

c0019e11 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0019e11:	c3                   	ret    

c0019e12 <Krnl::newProcessEnv(Process*)>:
c0019e12:	83 ec 28             	sub    esp,0x28
c0019e15:	6a 0c                	push   0xc
c0019e17:	e8 7d 57 ff ff       	call   c000f599 <malloc>
c0019e1c:	5a                   	pop    edx
c0019e1d:	59                   	pop    ecx
c0019e1e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019e22:	50                   	push   eax
c0019e23:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019e27:	e8 e0 fe ff ff       	call   c0019d0c <EnvVarContainer::EnvVarContainer(Process*)>
c0019e2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019e30:	83 c4 2c             	add    esp,0x2c
c0019e33:	c3                   	ret    

c0019e34 <Krnl::copyProcessEnv(Process*, Process*)>:
c0019e34:	57                   	push   edi
c0019e35:	56                   	push   esi
c0019e36:	53                   	push   ebx
c0019e37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e3b:	83 ec 0c             	sub    esp,0xc
c0019e3e:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c0019e44:	6a 0c                	push   0xc
c0019e46:	e8 4e 57 ff ff       	call   c000f599 <malloc>
c0019e4b:	89 c3                	mov    ebx,eax
c0019e4d:	58                   	pop    eax
c0019e4e:	5a                   	pop    edx
c0019e4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019e53:	53                   	push   ebx
c0019e54:	e8 b3 fe ff ff       	call   c0019d0c <EnvVarContainer::EnvVarContainer(Process*)>
c0019e59:	8b 07                	mov    eax,DWORD PTR [edi]
c0019e5b:	89 03                	mov    DWORD PTR [ebx],eax
c0019e5d:	c1 e0 03             	shl    eax,0x3
c0019e60:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e63:	e8 31 57 ff ff       	call   c000f599 <malloc>
c0019e68:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019e6b:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0019e6d:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0019e70:	c1 e1 03             	shl    ecx,0x3
c0019e73:	89 c7                	mov    edi,eax
c0019e75:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019e77:	83 c4 10             	add    esp,0x10
c0019e7a:	89 d8                	mov    eax,ebx
c0019e7c:	5b                   	pop    ebx
c0019e7d:	5e                   	pop    esi
c0019e7e:	5f                   	pop    edi
c0019e7f:	c3                   	ret    

c0019e80 <Krnl::loadSystemEnv()>:
c0019e80:	53                   	push   ebx
c0019e81:	83 ec 14             	sub    esp,0x14
c0019e84:	6a 0c                	push   0xc
c0019e86:	e8 0e 57 ff ff       	call   c000f599 <malloc>
c0019e8b:	89 c3                	mov    ebx,eax
c0019e8d:	58                   	pop    eax
c0019e8e:	5a                   	pop    edx
c0019e8f:	ff 35 f0 f2 02 c0    	push   DWORD PTR ds:0xc002f2f0
c0019e95:	53                   	push   ebx
c0019e96:	e8 71 fe ff ff       	call   c0019d0c <EnvVarContainer::EnvVarContainer(Process*)>
c0019e9b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e9e:	89 1d d8 e8 02 c0    	mov    DWORD PTR ds:0xc002e8d8,ebx
c0019ea4:	e8 47 fe ff ff       	call   c0019cf0 <EnvVarContainer::__loadSystem()>
c0019ea9:	83 c4 18             	add    esp,0x18
c0019eac:	5b                   	pop    ebx
c0019ead:	c3                   	ret    

c0019eae <Krnl::loadUserEnv()>:
c0019eae:	53                   	push   ebx
c0019eaf:	83 ec 14             	sub    esp,0x14
c0019eb2:	6a 0c                	push   0xc
c0019eb4:	e8 e0 56 ff ff       	call   c000f599 <malloc>
c0019eb9:	89 c3                	mov    ebx,eax
c0019ebb:	58                   	pop    eax
c0019ebc:	5a                   	pop    edx
c0019ebd:	ff 35 f0 f2 02 c0    	push   DWORD PTR ds:0xc002f2f0
c0019ec3:	53                   	push   ebx
c0019ec4:	e8 43 fe ff ff       	call   c0019d0c <EnvVarContainer::EnvVarContainer(Process*)>
c0019ec9:	89 1d d4 e8 02 c0    	mov    DWORD PTR ds:0xc002e8d4,ebx
c0019ecf:	83 c4 18             	add    esp,0x18
c0019ed2:	5b                   	pop    ebx
c0019ed3:	c3                   	ret    

c0019ed4 <Krnl::flushEnv()>:
c0019ed4:	c3                   	ret    

c0019ed5 <Krnl::getProcessTotalEnvCount(Process*)>:
c0019ed5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ed9:	8b 15 d4 e8 02 c0    	mov    edx,DWORD PTR ds:0xc002e8d4
c0019edf:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019ee5:	a1 d8 e8 02 c0       	mov    eax,ds:0xc002e8d8
c0019eea:	8b 00                	mov    eax,DWORD PTR [eax]
c0019eec:	03 01                	add    eax,DWORD PTR [ecx]
c0019eee:	85 d2                	test   edx,edx
c0019ef0:	74 02                	je     c0019ef4 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0019ef2:	03 02                	add    eax,DWORD PTR [edx]
c0019ef4:	c3                   	ret    

c0019ef5 <Krnl::getProcessEnvPair(Process*, int)>:
c0019ef5:	57                   	push   edi
c0019ef6:	56                   	push   esi
c0019ef7:	8b 35 d4 e8 02 c0    	mov    esi,DWORD PTR ds:0xc002e8d4
c0019efd:	53                   	push   ebx
c0019efe:	85 f6                	test   esi,esi
c0019f00:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019f04:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019f08:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019f0e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019f12:	8b 01                	mov    eax,DWORD PTR [ecx]
c0019f14:	75 16                	jne    c0019f2c <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0019f16:	39 c2                	cmp    edx,eax
c0019f18:	7c 16                	jl     c0019f30 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019f1a:	8b 0d d8 e8 02 c0    	mov    ecx,DWORD PTR ds:0xc002e8d8
c0019f20:	8b 31                	mov    esi,DWORD PTR [ecx]
c0019f22:	01 c6                	add    esi,eax
c0019f24:	39 d6                	cmp    esi,edx
c0019f26:	7e 3c                	jle    c0019f64 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019f28:	29 c2                	sub    edx,eax
c0019f2a:	eb 04                	jmp    c0019f30 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019f2c:	39 c2                	cmp    edx,eax
c0019f2e:	7d 05                	jge    c0019f35 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0019f30:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0019f33:	eb 20                	jmp    c0019f55 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0019f35:	8b 3e                	mov    edi,DWORD PTR [esi]
c0019f37:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0019f3a:	39 d1                	cmp    ecx,edx
c0019f3c:	7e 04                	jle    c0019f42 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0019f3e:	29 c2                	sub    edx,eax
c0019f40:	eb 10                	jmp    c0019f52 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0019f42:	8b 35 d8 e8 02 c0    	mov    esi,DWORD PTR ds:0xc002e8d8
c0019f48:	03 0e                	add    ecx,DWORD PTR [esi]
c0019f4a:	39 d1                	cmp    ecx,edx
c0019f4c:	7e 16                	jle    c0019f64 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019f4e:	29 c2                	sub    edx,eax
c0019f50:	29 fa                	sub    edx,edi
c0019f52:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019f55:	8d 14 d0             	lea    edx,[eax+edx*8]
c0019f58:	8b 02                	mov    eax,DWORD PTR [edx]
c0019f5a:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0019f5d:	89 03                	mov    DWORD PTR [ebx],eax
c0019f5f:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0019f62:	eb 1d                	jmp    c0019f81 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0019f64:	83 ec 0c             	sub    esp,0xc
c0019f67:	68 bb b9 02 c0       	push   0xc002b9bb
c0019f6c:	e8 18 00 00 00       	call   c0019f89 <Krnl::panic(char const*)>
c0019f71:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0019f77:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019f7e:	83 c4 10             	add    esp,0x10
c0019f81:	89 d8                	mov    eax,ebx
c0019f83:	5b                   	pop    ebx
c0019f84:	5e                   	pop    esi
c0019f85:	5f                   	pop    edi
c0019f86:	c2 04 00             	ret    0x4

c0019f89 <Krnl::panic(char const*)>:
c0019f89:	55                   	push   ebp
c0019f8a:	89 e5                	mov    ebp,esp
c0019f8c:	53                   	push   ebx
c0019f8d:	83 ec 10             	sub    esp,0x10
c0019f90:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0019f93:	fa                   	cli    
c0019f94:	c6 05 e4 e8 02 c0 01 	mov    BYTE PTR ds:0xc002e8e4,0x1
c0019f9b:	53                   	push   ebx
c0019f9c:	e8 52 56 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0019fa1:	58                   	pop    eax
c0019fa2:	c6 05 00 cd 02 c0 00 	mov    BYTE PTR ds:0xc002cd00,0x0
c0019fa9:	5a                   	pop    edx
c0019faa:	53                   	push   ebx
c0019fab:	68 d5 b9 02 c0       	push   0xc002b9d5
c0019fb0:	e8 e8 87 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0019fb5:	59                   	pop    ecx
c0019fb6:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c0019fbb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fc1:	e8 8d 63 ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c0019fc6:	83 c4 0c             	add    esp,0xc
c0019fc9:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c0019fce:	6a 01                	push   0x1
c0019fd0:	6a 0f                	push   0xf
c0019fd2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fd8:	e8 d5 61 ff ff       	call   c00101b2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019fdd:	58                   	pop    eax
c0019fde:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c0019fe3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fe9:	e8 e6 66 ff ff       	call   c00106d4 <VgaText::clearScreen()>
c0019fee:	58                   	pop    eax
c0019fef:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c0019ff4:	5a                   	pop    edx
c0019ff5:	68 ee b9 02 c0       	push   0xc002b9ee
c0019ffa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a000:	e8 5b 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a005:	59                   	pop    ecx
c001a006:	58                   	pop    eax
c001a007:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c001a00c:	68 94 ba 02 c0       	push   0xc002ba94
c001a011:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a017:	e8 44 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a01c:	58                   	pop    eax
c001a01d:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c001a022:	5a                   	pop    edx
c001a023:	68 0a ba 02 c0       	push   0xc002ba0a
c001a028:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a02e:	e8 2d 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a033:	59                   	pop    ecx
c001a034:	58                   	pop    eax
c001a035:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c001a03a:	53                   	push   ebx
c001a03b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a041:	e8 1a 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a046:	58                   	pop    eax
c001a047:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c001a04c:	5a                   	pop    edx
c001a04d:	68 2a ba 02 c0       	push   0xc002ba2a
c001a052:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a058:	e8 03 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a05d:	a1 e0 e8 02 c0       	mov    eax,ds:0xc002e8e0
c001a062:	83 c4 10             	add    esp,0x10
c001a065:	85 c0                	test   eax,eax
c001a067:	74 02                	je     c001a06b <Krnl::panic(char const*)+0xe2>
c001a069:	ff d0                	call   eax
c001a06b:	83 ec 0c             	sub    esp,0xc
c001a06e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a071:	e8 8f 30 00 00       	call   c001d105 <Thr::getDriverNameFromAddress(unsigned long)>
c001a076:	83 c4 10             	add    esp,0x10
c001a079:	89 c3                	mov    ebx,eax
c001a07b:	85 c0                	test   eax,eax
c001a07d:	0f 84 4e 02 00 00    	je     c001a2d1 <Krnl::panic(char const*)+0x348>
c001a083:	83 ec 08             	sub    esp,0x8
c001a086:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c001a08b:	68 d0 ba 02 c0       	push   0xc002bad0
c001a090:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a096:	e8 c5 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a09b:	58                   	pop    eax
c001a09c:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c001a0a1:	5a                   	pop    edx
c001a0a2:	68 0a ba 02 c0       	push   0xc002ba0a
c001a0a7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0ad:	e8 ae 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a0b2:	59                   	pop    ecx
c001a0b3:	58                   	pop    eax
c001a0b4:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c001a0b9:	53                   	push   ebx
c001a0ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0c0:	e8 9b 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a0c5:	83 c4 10             	add    esp,0x10
c001a0c8:	83 ec 08             	sub    esp,0x8
c001a0cb:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c001a0d0:	68 29 ba 02 c0       	push   0xc002ba29
c001a0d5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0db:	e8 80 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a0e0:	58                   	pop    eax
c001a0e1:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c001a0e6:	5a                   	pop    edx
c001a0e7:	68 28 bb 02 c0       	push   0xc002bb28
c001a0ec:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0f2:	e8 69 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a0f7:	59                   	pop    ecx
c001a0f8:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c001a0fd:	5b                   	pop    ebx
c001a0fe:	68 68 bb 02 c0       	push   0xc002bb68
c001a103:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a109:	e8 52 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a10e:	58                   	pop    eax
c001a10f:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c001a114:	5a                   	pop    edx
c001a115:	68 15 ba 02 c0       	push   0xc002ba15
c001a11a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a120:	e8 3b 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a125:	59                   	pop    ecx
c001a126:	5b                   	pop    ebx
c001a127:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a12a:	68 2d ba 02 c0       	push   0xc002ba2d
c001a12f:	e8 69 86 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001a134:	58                   	pop    eax
c001a135:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a138:	5a                   	pop    edx
c001a139:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a13c:	68 36 ba 02 c0       	push   0xc002ba36
c001a141:	e8 57 86 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001a146:	59                   	pop    ecx
c001a147:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a14a:	5b                   	pop    ebx
c001a14b:	8b 00                	mov    eax,DWORD PTR [eax]
c001a14d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a150:	68 3f ba 02 c0       	push   0xc002ba3f
c001a155:	e8 43 86 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001a15a:	58                   	pop    eax
c001a15b:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c001a160:	5a                   	pop    edx
c001a161:	68 ac bb 02 c0       	push   0xc002bbac
c001a166:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a16c:	e8 ef 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a171:	59                   	pop    ecx
c001a172:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c001a177:	5b                   	pop    ebx
c001a178:	68 48 ba 02 c0       	push   0xc002ba48
c001a17d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a183:	e8 d8 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a188:	0f 20 c0             	mov    eax,cr0
c001a18b:	5a                   	pop    edx
c001a18c:	59                   	pop    ecx
c001a18d:	50                   	push   eax
c001a18e:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c001a193:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a199:	e8 7c 66 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a19e:	5b                   	pop    ebx
c001a19f:	58                   	pop    eax
c001a1a0:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c001a1a5:	68 52 ba 02 c0       	push   0xc002ba52
c001a1aa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1b0:	e8 ab 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a1b5:	0f 20 d0             	mov    eax,cr2
c001a1b8:	5a                   	pop    edx
c001a1b9:	59                   	pop    ecx
c001a1ba:	50                   	push   eax
c001a1bb:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c001a1c0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1c6:	e8 4f 66 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a1cb:	5b                   	pop    ebx
c001a1cc:	58                   	pop    eax
c001a1cd:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c001a1d2:	68 5c ba 02 c0       	push   0xc002ba5c
c001a1d7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1dd:	e8 7e 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a1e2:	0f 20 d8             	mov    eax,cr3
c001a1e5:	5a                   	pop    edx
c001a1e6:	59                   	pop    ecx
c001a1e7:	50                   	push   eax
c001a1e8:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c001a1ed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1f3:	e8 22 66 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a1f8:	5b                   	pop    ebx
c001a1f9:	58                   	pop    eax
c001a1fa:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c001a1ff:	68 6f ba 02 c0       	push   0xc002ba6f
c001a204:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a20a:	e8 51 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a20f:	0f 20 e0             	mov    eax,cr4
c001a212:	5a                   	pop    edx
c001a213:	59                   	pop    ecx
c001a214:	50                   	push   eax
c001a215:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c001a21a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a220:	e8 f5 65 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a225:	5b                   	pop    ebx
c001a226:	58                   	pop    eax
c001a227:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c001a22c:	68 79 ba 02 c0       	push   0xc002ba79
c001a231:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a237:	e8 24 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a23c:	5a                   	pop    edx
c001a23d:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c001a242:	59                   	pop    ecx
c001a243:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a249:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a24c:	50                   	push   eax
c001a24d:	e8 c8 65 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a252:	5b                   	pop    ebx
c001a253:	58                   	pop    eax
c001a254:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c001a259:	68 90 ba 02 c0       	push   0xc002ba90
c001a25e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a264:	e8 f7 65 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a269:	5a                   	pop    edx
c001a26a:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c001a26f:	59                   	pop    ecx
c001a270:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a276:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a279:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a27c:	50                   	push   eax
c001a27d:	e8 98 65 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a282:	5b                   	pop    ebx
c001a283:	58                   	pop    eax
c001a284:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c001a289:	68 90 ba 02 c0       	push   0xc002ba90
c001a28e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a294:	e8 c7 65 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a299:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c001a29e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a2a1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a2a7:	8b 12                	mov    edx,DWORD PTR [edx]
c001a2a9:	59                   	pop    ecx
c001a2aa:	5b                   	pop    ebx
c001a2ab:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a2ae:	50                   	push   eax
c001a2af:	e8 66 65 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a2b4:	83 c4 10             	add    esp,0x10
c001a2b7:	b2 fe                	mov    dl,0xfe
c001a2b9:	e4 60                	in     al,0x60
c001a2bb:	3c 1c                	cmp    al,0x1c
c001a2bd:	74 04                	je     c001a2c3 <Krnl::panic(char const*)+0x33a>
c001a2bf:	3c 5a                	cmp    al,0x5a
c001a2c1:	75 f6                	jne    c001a2b9 <Krnl::panic(char const*)+0x330>
c001a2c3:	e4 64                	in     al,0x64
c001a2c5:	a8 02                	test   al,0x2
c001a2c7:	75 fa                	jne    c001a2c3 <Krnl::panic(char const*)+0x33a>
c001a2c9:	88 d0                	mov    al,dl
c001a2cb:	e6 64                	out    0x64,al
c001a2cd:	fa                   	cli    
c001a2ce:	f4                   	hlt    
c001a2cf:	eb e8                	jmp    c001a2b9 <Krnl::panic(char const*)+0x330>
c001a2d1:	50                   	push   eax
c001a2d2:	50                   	push   eax
c001a2d3:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c001a2d8:	68 fc ba 02 c0       	push   0xc002bafc
c001a2dd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2e3:	e8 78 65 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a2e8:	58                   	pop    eax
c001a2e9:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c001a2ee:	5a                   	pop    edx
c001a2ef:	68 0a ba 02 c0       	push   0xc002ba0a
c001a2f4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2fa:	e8 61 65 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a2ff:	59                   	pop    ecx
c001a300:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a305:	5b                   	pop    ebx
c001a306:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a309:	83 c0 0c             	add    eax,0xc
c001a30c:	50                   	push   eax
c001a30d:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c001a312:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a318:	e8 43 65 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a31d:	83 c4 10             	add    esp,0x10
c001a320:	e9 a3 fd ff ff       	jmp    c001a0c8 <Krnl::panic(char const*)+0x13f>

c001a325 <Net::switchEndian16(unsigned short)>:
c001a325:	83 ec 04             	sub    esp,0x4
c001a328:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a32c:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a330:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a334:	c1 f8 08             	sar    eax,0x8
c001a337:	89 c2                	mov    edx,eax
c001a339:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a33d:	c1 e0 08             	shl    eax,0x8
c001a340:	09 d0                	or     eax,edx
c001a342:	83 c4 04             	add    esp,0x4
c001a345:	c3                   	ret    

c001a346 <Net::switchEndian32(unsigned int)>:
c001a346:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a34a:	c1 e8 18             	shr    eax,0x18
c001a34d:	89 c2                	mov    edx,eax
c001a34f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a353:	c1 e0 08             	shl    eax,0x8
c001a356:	25 00 00 ff 00       	and    eax,0xff0000
c001a35b:	09 c2                	or     edx,eax
c001a35d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a361:	c1 e8 08             	shr    eax,0x8
c001a364:	25 00 ff 00 00       	and    eax,0xff00
c001a369:	09 c2                	or     edx,eax
c001a36b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a36f:	c1 e0 18             	shl    eax,0x18
c001a372:	09 d0                	or     eax,edx
c001a374:	c3                   	ret    

c001a375 <Net::crc32Calc(unsigned char*, int)>:
c001a375:	83 ec 10             	sub    esp,0x10
c001a378:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a37d:	75 07                	jne    c001a386 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a37f:	b8 00 00 00 00       	mov    eax,0x0
c001a384:	eb 7c                	jmp    c001a402 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a386:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a38b:	7f 07                	jg     c001a394 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a38d:	b8 00 00 00 00       	mov    eax,0x0
c001a392:	eb 6e                	jmp    c001a402 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a394:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a39c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a3a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a3a8:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a3ac:	7d 4e                	jge    c001a3fc <Net::crc32Calc(unsigned char*, int)+0x87>
c001a3ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a3b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a3b6:	01 d0                	add    eax,edx
c001a3b8:	8a 00                	mov    al,BYTE PTR [eax]
c001a3ba:	0f b6 c0             	movzx  eax,al
c001a3bd:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a3c1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a3c9:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a3ce:	7f 26                	jg     c001a3f6 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a3d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3d4:	83 e0 01             	and    eax,0x1
c001a3d7:	74 0d                	je     c001a3e6 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a3d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3dd:	d1 e8                	shr    eax,1
c001a3df:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a3e4:	eb 06                	jmp    c001a3ec <Net::crc32Calc(unsigned char*, int)+0x77>
c001a3e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3ea:	d1 e8                	shr    eax,1
c001a3ec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a3f0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a3f4:	eb d3                	jmp    c001a3c9 <Net::crc32Calc(unsigned char*, int)+0x54>
c001a3f6:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a3fa:	eb a8                	jmp    c001a3a4 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a3fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a400:	f7 d0                	not    eax
c001a402:	83 c4 10             	add    esp,0x10
c001a405:	c3                   	ret    

c001a406 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a406:	57                   	push   edi
c001a407:	56                   	push   esi
c001a408:	53                   	push   ebx
c001a409:	83 ec 60             	sub    esp,0x60
c001a40c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a413:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a417:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001a41f:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001a424:	7f 1a                	jg     c001a440 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001a426:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a42d:	8d 50 01             	lea    edx,[eax+0x1]
c001a430:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a437:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a43a:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001a43e:	eb df                	jmp    c001a41f <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001a440:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a447:	8d 50 01             	lea    edx,[eax+0x1]
c001a44a:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a451:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a454:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a45b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a45f:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001a463:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a467:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001a46f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a473:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a477:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a47b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a47f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a483:	89 c6                	mov    esi,eax
c001a485:	89 d7                	mov    edi,edx
c001a487:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a489:	89 c8                	mov    eax,ecx
c001a48b:	89 fa                	mov    edx,edi
c001a48d:	89 f3                	mov    ebx,esi
c001a48f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a493:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a497:	89 04 24             	mov    DWORD PTR [esp],eax
c001a49a:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a4a2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a4a9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a4ad:	8d 44 24 78          	lea    eax,[esp+0x78]
c001a4b1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a4b5:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a4bd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a4c1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a4c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a4c9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a4cd:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a4d1:	89 c6                	mov    esi,eax
c001a4d3:	89 d7                	mov    edi,edx
c001a4d5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a4d7:	89 c8                	mov    eax,ecx
c001a4d9:	89 fa                	mov    edx,edi
c001a4db:	89 f3                	mov    ebx,esi
c001a4dd:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a4e1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a4e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a4e9:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a4f1:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a4f8:	0f b7 c0             	movzx  eax,ax
c001a4fb:	c1 f8 08             	sar    eax,0x8
c001a4fe:	89 c1                	mov    ecx,eax
c001a500:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a507:	8d 50 01             	lea    edx,[eax+0x1]
c001a50a:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a511:	88 ca                	mov    dl,cl
c001a513:	88 10                	mov    BYTE PTR [eax],dl
c001a515:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a51c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a523:	8d 48 01             	lea    ecx,[eax+0x1]
c001a526:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001a52d:	88 10                	mov    BYTE PTR [eax],dl
c001a52f:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a533:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001a537:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001a53e:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001a542:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001a546:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001a54a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a54e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a552:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a556:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a55a:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a55e:	89 c6                	mov    esi,eax
c001a560:	89 d7                	mov    edi,edx
c001a562:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a564:	89 c8                	mov    eax,ecx
c001a566:	89 fa                	mov    edx,edi
c001a568:	89 f3                	mov    ebx,esi
c001a56a:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a56e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a572:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a576:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a57a:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001a581:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a588:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001a58c:	50                   	push   eax
c001a58d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a591:	e8 df fd ff ff       	call   c001a375 <Net::crc32Calc(unsigned char*, int)>
c001a596:	83 c4 08             	add    esp,0x8
c001a599:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a59d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a5a1:	c1 e8 18             	shr    eax,0x18
c001a5a4:	89 c1                	mov    ecx,eax
c001a5a6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a5ad:	8d 50 01             	lea    edx,[eax+0x1]
c001a5b0:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a5b7:	88 ca                	mov    dl,cl
c001a5b9:	88 10                	mov    BYTE PTR [eax],dl
c001a5bb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a5bf:	c1 e8 10             	shr    eax,0x10
c001a5c2:	89 c1                	mov    ecx,eax
c001a5c4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a5cb:	8d 50 01             	lea    edx,[eax+0x1]
c001a5ce:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a5d5:	88 ca                	mov    dl,cl
c001a5d7:	88 10                	mov    BYTE PTR [eax],dl
c001a5d9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a5dd:	c1 e8 08             	shr    eax,0x8
c001a5e0:	89 c1                	mov    ecx,eax
c001a5e2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a5e9:	8d 50 01             	lea    edx,[eax+0x1]
c001a5ec:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a5f3:	88 ca                	mov    dl,cl
c001a5f5:	88 10                	mov    BYTE PTR [eax],dl
c001a5f7:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a5fe:	8d 50 01             	lea    edx,[eax+0x1]
c001a601:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a608:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001a60c:	88 10                	mov    BYTE PTR [eax],dl
c001a60e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a612:	83 c4 60             	add    esp,0x60
c001a615:	5b                   	pop    ebx
c001a616:	5e                   	pop    esi
c001a617:	5f                   	pop    edi
c001a618:	c3                   	ret    

c001a619 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a619:	57                   	push   edi
c001a61a:	56                   	push   esi
c001a61b:	53                   	push   ebx
c001a61c:	83 ec 70             	sub    esp,0x70
c001a61f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a626:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001a62a:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001a632:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a639:	83 c0 0e             	add    eax,0xe
c001a63c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a640:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a647:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a64b:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a653:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a657:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a65b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a65f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a663:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a667:	89 c6                	mov    esi,eax
c001a669:	89 d7                	mov    edi,edx
c001a66b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a66d:	89 c8                	mov    eax,ecx
c001a66f:	89 fa                	mov    edx,edi
c001a671:	89 f3                	mov    ebx,esi
c001a673:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a677:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a67b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a67f:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a687:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a68e:	83 c0 08             	add    eax,0x8
c001a691:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001a695:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a69c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a6a0:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001a6a8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a6ac:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a6b0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a6b4:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a6b8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a6bc:	89 c6                	mov    esi,eax
c001a6be:	89 d7                	mov    edi,edx
c001a6c0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a6c2:	89 c8                	mov    eax,ecx
c001a6c4:	89 fa                	mov    edx,edi
c001a6c6:	89 f3                	mov    ebx,esi
c001a6c8:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a6cc:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a6d0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a6d4:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a6dc:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a6e3:	8d 50 01             	lea    edx,[eax+0x1]
c001a6e6:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a6ed:	8a 00                	mov    al,BYTE PTR [eax]
c001a6ef:	0f b6 c0             	movzx  eax,al
c001a6f2:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001a6f7:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a6fe:	8d 50 01             	lea    edx,[eax+0x1]
c001a701:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a708:	8a 00                	mov    al,BYTE PTR [eax]
c001a70a:	0f b6 c0             	movzx  eax,al
c001a70d:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001a712:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001a717:	c1 e0 08             	shl    eax,0x8
c001a71a:	89 c2                	mov    edx,eax
c001a71c:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a720:	09 d0                	or     eax,edx
c001a722:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a729:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a72d:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001a735:	75 46                	jne    c001a77d <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a737:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a73e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a741:	66 3d dc 05          	cmp    ax,0x5dc
c001a745:	77 16                	ja     c001a75d <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001a747:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a74e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a751:	0f b7 c0             	movzx  eax,ax
c001a754:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001a75b:	eb 20                	jmp    c001a77d <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a75d:	83 ec 0c             	sub    esp,0xc
c001a760:	68 d4 bb 02 c0       	push   0xc002bbd4
c001a765:	e8 33 80 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001a76a:	83 c4 10             	add    esp,0x10
c001a76d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a774:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001a778:	e9 17 01 00 00       	jmp    c001a894 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001a77d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a784:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a78b:	8b 12                	mov    edx,DWORD PTR [edx]
c001a78d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001a791:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a798:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001a79c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a7a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a7a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a7a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a7ac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a7b0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a7b4:	89 c6                	mov    esi,eax
c001a7b6:	89 d7                	mov    edi,edx
c001a7b8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a7ba:	89 c8                	mov    eax,ecx
c001a7bc:	89 fa                	mov    edx,edi
c001a7be:	89 f3                	mov    ebx,esi
c001a7c0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a7c4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a7c8:	89 04 24             	mov    DWORD PTR [esp],eax
c001a7cb:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a7d2:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001a7d9:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a7e0:	8d 50 01             	lea    edx,[eax+0x1]
c001a7e3:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a7ea:	8a 00                	mov    al,BYTE PTR [eax]
c001a7ec:	0f b6 c0             	movzx  eax,al
c001a7ef:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001a7f3:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a7fa:	8d 50 01             	lea    edx,[eax+0x1]
c001a7fd:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a804:	8a 00                	mov    al,BYTE PTR [eax]
c001a806:	0f b6 c0             	movzx  eax,al
c001a809:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001a80d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a814:	8d 50 01             	lea    edx,[eax+0x1]
c001a817:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a81e:	8a 00                	mov    al,BYTE PTR [eax]
c001a820:	0f b6 c0             	movzx  eax,al
c001a823:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001a827:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a82e:	8d 50 01             	lea    edx,[eax+0x1]
c001a831:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a838:	8a 00                	mov    al,BYTE PTR [eax]
c001a83a:	0f b6 c0             	movzx  eax,al
c001a83d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a841:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001a845:	c1 e0 18             	shl    eax,0x18
c001a848:	89 c2                	mov    edx,eax
c001a84a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001a84e:	c1 e0 10             	shl    eax,0x10
c001a851:	09 c2                	or     edx,eax
c001a853:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001a857:	c1 e0 08             	shl    eax,0x8
c001a85a:	09 d0                	or     eax,edx
c001a85c:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001a860:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a864:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a86b:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001a86f:	83 e8 04             	sub    eax,0x4
c001a872:	83 ec 08             	sub    esp,0x8
c001a875:	50                   	push   eax
c001a876:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001a87a:	e8 f6 fa ff ff       	call   c001a375 <Net::crc32Calc(unsigned char*, int)>
c001a87f:	83 c4 10             	add    esp,0x10
c001a882:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001a886:	0f 94 c2             	sete   dl
c001a889:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a890:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001a893:	90                   	nop
c001a894:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a89b:	83 c4 70             	add    esp,0x70
c001a89e:	5b                   	pop    ebx
c001a89f:	5e                   	pop    esi
c001a8a0:	5f                   	pop    edi
c001a8a1:	c2 04 00             	ret    0x4

c001a8a4 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001a8a4:	55                   	push   ebp
c001a8a5:	57                   	push   edi
c001a8a6:	56                   	push   esi
c001a8a7:	53                   	push   ebx
c001a8a8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a8ae:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001a8b5:	8a 1e                	mov    bl,BYTE PTR [esi]
c001a8b7:	8d 6e 01             	lea    ebp,[esi+0x1]
c001a8ba:	80 fb 40             	cmp    bl,0x40
c001a8bd:	75 1b                	jne    c001a8da <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001a8bf:	8a 16                	mov    dl,BYTE PTR [esi]
c001a8c1:	84 d2                	test   dl,dl
c001a8c3:	0f 84 f1 00 00 00    	je     c001a9ba <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a8c9:	8d 46 01             	lea    eax,[esi+0x1]
c001a8cc:	80 fa 3a             	cmp    dl,0x3a
c001a8cf:	74 04                	je     c001a8d5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001a8d1:	89 c6                	mov    esi,eax
c001a8d3:	eb ea                	jmp    c001a8bf <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001a8d5:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a8d8:	89 c6                	mov    esi,eax
c001a8da:	50                   	push   eax
c001a8db:	6a 40                	push   0x40
c001a8dd:	6a 00                	push   0x0
c001a8df:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a8e3:	50                   	push   eax
c001a8e4:	e8 67 5e fe ff       	call   c0000750 <memset>
c001a8e9:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001a8f0:	31 c0                	xor    eax,eax
c001a8f2:	83 c4 10             	add    esp,0x10
c001a8f5:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a8f7:	84 c9                	test   cl,cl
c001a8f9:	0f 84 bb 00 00 00    	je     c001a9ba <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a8ff:	3d c7 00 00 00       	cmp    eax,0xc7
c001a904:	0f 8f b0 00 00 00    	jg     c001a9ba <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a90a:	80 f9 0a             	cmp    cl,0xa
c001a90d:	0f 85 98 00 00 00    	jne    c001a9ab <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a913:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a918:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a91c:	a8 df                	test   al,0xdf
c001a91e:	0f 94 c1             	sete   cl
c001a921:	3c 23                	cmp    al,0x23
c001a923:	0f 94 c2             	sete   dl
c001a926:	08 d1                	or     cl,dl
c001a928:	75 4a                	jne    c001a974 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a92a:	8d 50 f7             	lea    edx,[eax-0x9]
c001a92d:	80 fa 01             	cmp    dl,0x1
c001a930:	76 42                	jbe    c001a974 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a932:	3c 5b                	cmp    al,0x5b
c001a934:	75 42                	jne    c001a978 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a936:	80 fb 40             	cmp    bl,0x40
c001a939:	75 39                	jne    c001a974 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a93b:	83 ec 0c             	sub    esp,0xc
c001a93e:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a942:	52                   	push   edx
c001a943:	e8 24 5e fe ff       	call   c000076c <strlen>
c001a948:	83 c4 10             	add    esp,0x10
c001a94b:	83 f8 3f             	cmp    eax,0x3f
c001a94e:	77 6a                	ja     c001a9ba <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a950:	50                   	push   eax
c001a951:	50                   	push   eax
c001a952:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a956:	52                   	push   edx
c001a957:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a95b:	52                   	push   edx
c001a95c:	e8 ab 5e fe ff       	call   c000080c <strcpy>
c001a961:	58                   	pop    eax
c001a962:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a966:	52                   	push   edx
c001a967:	e8 00 5e fe ff       	call   c000076c <strlen>
c001a96c:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a971:	83 c4 10             	add    esp,0x10
c001a974:	31 d2                	xor    edx,edx
c001a976:	eb 3a                	jmp    c001a9b2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a978:	80 fb 40             	cmp    bl,0x40
c001a97b:	74 06                	je     c001a983 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a97d:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a981:	eb 20                	jmp    c001a9a3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a983:	50                   	push   eax
c001a984:	50                   	push   eax
c001a985:	55                   	push   ebp
c001a986:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a98a:	50                   	push   eax
c001a98b:	e8 08 5f fe ff       	call   c0000898 <strcmp>
c001a990:	83 c4 10             	add    esp,0x10
c001a993:	85 c0                	test   eax,eax
c001a995:	75 dd                	jne    c001a974 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a997:	eb e4                	jmp    c001a97d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a999:	8d 50 01             	lea    edx,[eax+0x1]
c001a99c:	80 f9 3d             	cmp    cl,0x3d
c001a99f:	74 1d                	je     c001a9be <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a9a1:	89 d0                	mov    eax,edx
c001a9a3:	8a 08                	mov    cl,BYTE PTR [eax]
c001a9a5:	84 c9                	test   cl,cl
c001a9a7:	75 f0                	jne    c001a999 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a9a9:	eb 0f                	jmp    c001a9ba <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a9ab:	8d 50 01             	lea    edx,[eax+0x1]
c001a9ae:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a9b2:	47                   	inc    edi
c001a9b3:	89 d0                	mov    eax,edx
c001a9b5:	e9 3b ff ff ff       	jmp    c001a8f5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001a9ba:	31 c0                	xor    eax,eax
c001a9bc:	eb 33                	jmp    c001a9f1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001a9be:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a9c2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a9c5:	50                   	push   eax
c001a9c6:	50                   	push   eax
c001a9c7:	8d 44 24 60          	lea    eax,[esp+0x60]
c001a9cb:	50                   	push   eax
c001a9cc:	56                   	push   esi
c001a9cd:	e8 c6 5e fe ff       	call   c0000898 <strcmp>
c001a9d2:	83 c4 10             	add    esp,0x10
c001a9d5:	85 c0                	test   eax,eax
c001a9d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a9db:	75 97                	jne    c001a974 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a9dd:	51                   	push   ecx
c001a9de:	51                   	push   ecx
c001a9df:	52                   	push   edx
c001a9e0:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001a9e7:	e8 20 5e fe ff       	call   c000080c <strcpy>
c001a9ec:	83 c4 10             	add    esp,0x10
c001a9ef:	b0 01                	mov    al,0x1
c001a9f1:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a9f7:	5b                   	pop    ebx
c001a9f8:	5e                   	pop    esi
c001a9f9:	5f                   	pop    edi
c001a9fa:	5d                   	pop    ebp
c001a9fb:	c3                   	ret    

c001a9fc <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001a9fc:	57                   	push   edi
c001a9fd:	56                   	push   esi
c001a9fe:	53                   	push   ebx
c001a9ff:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001aa05:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001aa0c:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001aa13:	53                   	push   ebx
c001aa14:	e8 53 5d fe ff       	call   c000076c <strlen>
c001aa19:	89 34 24             	mov    DWORD PTR [esp],esi
c001aa1c:	89 c7                	mov    edi,eax
c001aa1e:	e8 49 5d fe ff       	call   c000076c <strlen>
c001aa23:	83 c4 10             	add    esp,0x10
c001aa26:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001aa2a:	3d ff 00 00 00       	cmp    eax,0xff
c001aa2f:	0f 87 d3 00 00 00    	ja     c001ab08 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001aa35:	57                   	push   edi
c001aa36:	57                   	push   edi
c001aa37:	56                   	push   esi
c001aa38:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001aa3c:	56                   	push   esi
c001aa3d:	e8 ca 5d fe ff       	call   c000080c <strcpy>
c001aa42:	58                   	pop    eax
c001aa43:	5a                   	pop    edx
c001aa44:	68 76 bf 02 c0       	push   0xc002bf76
c001aa49:	56                   	push   esi
c001aa4a:	e8 fd 5e fe ff       	call   c000094c <strcat>
c001aa4f:	59                   	pop    ecx
c001aa50:	5f                   	pop    edi
c001aa51:	53                   	push   ebx
c001aa52:	56                   	push   esi
c001aa53:	e8 f4 5e fe ff       	call   c000094c <strcat>
c001aa58:	58                   	pop    eax
c001aa59:	5a                   	pop    edx
c001aa5a:	68 20 bc 02 c0       	push   0xc002bc20
c001aa5f:	56                   	push   esi
c001aa60:	e8 e7 5e fe ff       	call   c000094c <strcat>
c001aa65:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001aa6c:	e8 28 4b ff ff       	call   c000f599 <malloc>
c001aa71:	83 c4 0c             	add    esp,0xc
c001aa74:	89 c3                	mov    ebx,eax
c001aa76:	ff 35 f0 f2 02 c0    	push   DWORD PTR ds:0xc002f2f0
c001aa7c:	56                   	push   esi
c001aa7d:	50                   	push   eax
c001aa7e:	e8 79 82 ff ff       	call   c0012cfc <File::File(char const*, Process*)>
c001aa83:	83 c4 10             	add    esp,0x10
c001aa86:	85 db                	test   ebx,ebx
c001aa88:	74 7e                	je     c001ab08 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001aa8a:	51                   	push   ecx
c001aa8b:	51                   	push   ecx
c001aa8c:	6a 01                	push   0x1
c001aa8e:	53                   	push   ebx
c001aa8f:	e8 cc 82 ff ff       	call   c0012d60 <File::open(FileOpenMode)>
c001aa94:	83 c4 10             	add    esp,0x10
c001aa97:	85 c0                	test   eax,eax
c001aa99:	74 08                	je     c001aaa3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001aa9b:	83 ec 0c             	sub    esp,0xc
c001aa9e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aaa0:	53                   	push   ebx
c001aaa1:	eb 5f                	jmp    c001ab02 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001aaa3:	52                   	push   edx
c001aaa4:	8d 44 24 17          	lea    eax,[esp+0x17]
c001aaa8:	50                   	push   eax
c001aaa9:	8d 44 24 20          	lea    eax,[esp+0x20]
c001aaad:	50                   	push   eax
c001aaae:	53                   	push   ebx
c001aaaf:	e8 58 85 ff ff       	call   c001300c <File::stat(unsigned long long*, bool*)>
c001aab4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001aab8:	83 c4 10             	add    esp,0x10
c001aabb:	89 c1                	mov    ecx,eax
c001aabd:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001aac1:	74 31                	je     c001aaf4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001aac3:	83 ec 0c             	sub    esp,0xc
c001aac6:	50                   	push   eax
c001aac7:	e8 cd 4a ff ff       	call   c000f599 <malloc>
c001aacc:	89 c6                	mov    esi,eax
c001aace:	58                   	pop    eax
c001aacf:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aad1:	8d 54 24 20          	lea    edx,[esp+0x20]
c001aad5:	52                   	push   edx
c001aad6:	56                   	push   esi
c001aad7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aadb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aadf:	53                   	push   ebx
c001aae0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001aae3:	83 c4 20             	add    esp,0x20
c001aae6:	85 c0                	test   eax,eax
c001aae8:	75 0a                	jne    c001aaf4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001aaea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aaee:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001aaf2:	74 18                	je     c001ab0c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001aaf4:	83 ec 0c             	sub    esp,0xc
c001aaf7:	53                   	push   ebx
c001aaf8:	e8 c1 82 ff ff       	call   c0012dbe <File::close()>
c001aafd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aaff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ab02:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ab05:	83 c4 10             	add    esp,0x10
c001ab08:	31 c0                	xor    eax,eax
c001ab0a:	eb 3b                	jmp    c001ab47 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001ab0c:	83 ec 0c             	sub    esp,0xc
c001ab0f:	53                   	push   ebx
c001ab10:	e8 a9 82 ff ff       	call   c0012dbe <File::close()>
c001ab15:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab17:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ab1a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ab1d:	83 c4 0c             	add    esp,0xc
c001ab20:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001ab27:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001ab2e:	56                   	push   esi
c001ab2f:	e8 70 fd ff ff       	call   c001a8a4 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001ab34:	89 34 24             	mov    DWORD PTR [esp],esi
c001ab37:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ab3b:	e8 69 4a ff ff       	call   c000f5a9 <free>
c001ab40:	83 c4 10             	add    esp,0x10
c001ab43:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ab47:	81 c4 20 01 00 00    	add    esp,0x120
c001ab4d:	5b                   	pop    ebx
c001ab4e:	5e                   	pop    esi
c001ab4f:	5f                   	pop    edi
c001ab50:	c3                   	ret    

c001ab51 <Reg::getLine(char*, char*, char*)>:
c001ab51:	57                   	push   edi
c001ab52:	56                   	push   esi
c001ab53:	53                   	push   ebx
c001ab54:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ab58:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ab5c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ab60:	57                   	push   edi
c001ab61:	56                   	push   esi
c001ab62:	53                   	push   ebx
c001ab63:	68 25 bc 02 c0       	push   0xc002bc25
c001ab68:	e8 8f fe ff ff       	call   c001a9fc <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001ab6d:	83 c4 10             	add    esp,0x10
c001ab70:	84 c0                	test   al,al
c001ab72:	75 10                	jne    c001ab84 <Reg::getLine(char*, char*, char*)+0x33>
c001ab74:	57                   	push   edi
c001ab75:	56                   	push   esi
c001ab76:	53                   	push   ebx
c001ab77:	68 4a bc 02 c0       	push   0xc002bc4a
c001ab7c:	e8 7b fe ff ff       	call   c001a9fc <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001ab81:	83 c4 10             	add    esp,0x10
c001ab84:	5b                   	pop    ebx
c001ab85:	5e                   	pop    esi
c001ab86:	5f                   	pop    edi
c001ab87:	c3                   	ret    

c001ab88 <Reg::readInt(char*, char*, int*)>:
c001ab88:	55                   	push   ebp
c001ab89:	57                   	push   edi
c001ab8a:	56                   	push   esi
c001ab8b:	53                   	push   ebx
c001ab8c:	81 ec f0 00 00 00    	sub    esp,0xf0
c001ab92:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001ab96:	57                   	push   edi
c001ab97:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001ab9e:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001aba5:	e8 a7 ff ff ff       	call   c001ab51 <Reg::getLine(char*, char*, char*)>
c001abaa:	83 c4 10             	add    esp,0x10
c001abad:	84 c0                	test   al,al
c001abaf:	0f 84 b3 00 00 00    	je     c001ac68 <Reg::readInt(char*, char*, int*)+0xe0>
c001abb5:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001abb9:	80 fa 2b             	cmp    dl,0x2b
c001abbc:	74 0c                	je     c001abca <Reg::readInt(char*, char*, int*)+0x42>
c001abbe:	80 fa 2d             	cmp    dl,0x2d
c001abc1:	75 0e                	jne    c001abd1 <Reg::readInt(char*, char*, int*)+0x49>
c001abc3:	ba 01 00 00 00       	mov    edx,0x1
c001abc8:	eb 0b                	jmp    c001abd5 <Reg::readInt(char*, char*, int*)+0x4d>
c001abca:	ba 01 00 00 00       	mov    edx,0x1
c001abcf:	eb 02                	jmp    c001abd3 <Reg::readInt(char*, char*, int*)+0x4b>
c001abd1:	31 d2                	xor    edx,edx
c001abd3:	31 c0                	xor    eax,eax
c001abd5:	be 0a 00 00 00       	mov    esi,0xa
c001abda:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001abdf:	75 20                	jne    c001ac01 <Reg::readInt(char*, char*, int*)+0x79>
c001abe1:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001abe5:	80 f9 78             	cmp    cl,0x78
c001abe8:	75 0a                	jne    c001abf4 <Reg::readInt(char*, char*, int*)+0x6c>
c001abea:	83 c2 02             	add    edx,0x2
c001abed:	be 10 00 00 00       	mov    esi,0x10
c001abf2:	eb 0d                	jmp    c001ac01 <Reg::readInt(char*, char*, int*)+0x79>
c001abf4:	80 f9 62             	cmp    cl,0x62
c001abf7:	75 08                	jne    c001ac01 <Reg::readInt(char*, char*, int*)+0x79>
c001abf9:	83 c2 02             	add    edx,0x2
c001abfc:	be 02 00 00 00       	mov    esi,0x2
c001ac01:	01 d7                	add    edi,edx
c001ac03:	31 d2                	xor    edx,edx
c001ac05:	8a 1f                	mov    bl,BYTE PTR [edi]
c001ac07:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001ac0b:	80 fb 0d             	cmp    bl,0xd
c001ac0e:	0f 94 c3             	sete   bl
c001ac11:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001ac16:	0f 94 c1             	sete   cl
c001ac19:	08 cb                	or     bl,cl
c001ac1b:	75 3a                	jne    c001ac57 <Reg::readInt(char*, char*, int*)+0xcf>
c001ac1d:	0f af d6             	imul   edx,esi
c001ac20:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001ac25:	83 fe 10             	cmp    esi,0x10
c001ac28:	75 26                	jne    c001ac50 <Reg::readInt(char*, char*, int*)+0xc8>
c001ac2a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001ac2e:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001ac31:	89 e9                	mov    ecx,ebp
c001ac33:	80 f9 05             	cmp    cl,0x5
c001ac36:	77 06                	ja     c001ac3e <Reg::readInt(char*, char*, int*)+0xb6>
c001ac38:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001ac3c:	eb 16                	jmp    c001ac54 <Reg::readInt(char*, char*, int*)+0xcc>
c001ac3e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001ac42:	83 e9 61             	sub    ecx,0x61
c001ac45:	80 f9 05             	cmp    cl,0x5
c001ac48:	77 06                	ja     c001ac50 <Reg::readInt(char*, char*, int*)+0xc8>
c001ac4a:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001ac4e:	eb 04                	jmp    c001ac54 <Reg::readInt(char*, char*, int*)+0xcc>
c001ac50:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001ac54:	47                   	inc    edi
c001ac55:	eb ae                	jmp    c001ac05 <Reg::readInt(char*, char*, int*)+0x7d>
c001ac57:	84 c0                	test   al,al
c001ac59:	74 02                	je     c001ac5d <Reg::readInt(char*, char*, int*)+0xd5>
c001ac5b:	f7 da                	neg    edx
c001ac5d:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001ac64:	89 10                	mov    DWORD PTR [eax],edx
c001ac66:	88 d8                	mov    al,bl
c001ac68:	81 c4 ec 00 00 00    	add    esp,0xec
c001ac6e:	5b                   	pop    ebx
c001ac6f:	5e                   	pop    esi
c001ac70:	5f                   	pop    edi
c001ac71:	5d                   	pop    ebp
c001ac72:	c3                   	ret    

c001ac73 <Reg::readString(char*, char*, char*, int)>:
c001ac73:	57                   	push   edi
c001ac74:	56                   	push   esi
c001ac75:	53                   	push   ebx
c001ac76:	81 ec d4 00 00 00    	sub    esp,0xd4
c001ac7c:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001ac83:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001ac87:	57                   	push   edi
c001ac88:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001ac8f:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001ac96:	e8 b6 fe ff ff       	call   c001ab51 <Reg::getLine(char*, char*, char*)>
c001ac9b:	83 c4 10             	add    esp,0x10
c001ac9e:	89 c6                	mov    esi,eax
c001aca0:	84 c0                	test   al,al
c001aca2:	74 44                	je     c001ace8 <Reg::readString(char*, char*, char*, int)+0x75>
c001aca4:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001acab:	31 c0                	xor    eax,eax
c001acad:	4a                   	dec    edx
c001acae:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001acb1:	84 c9                	test   cl,cl
c001acb3:	74 0f                	je     c001acc4 <Reg::readString(char*, char*, char*, int)+0x51>
c001acb5:	39 c2                	cmp    edx,eax
c001acb7:	7e 0b                	jle    c001acc4 <Reg::readString(char*, char*, char*, int)+0x51>
c001acb9:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001acbc:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001acc1:	40                   	inc    eax
c001acc2:	eb ea                	jmp    c001acae <Reg::readString(char*, char*, char*, int)+0x3b>
c001acc4:	83 ec 0c             	sub    esp,0xc
c001acc7:	53                   	push   ebx
c001acc8:	e8 9f 5a fe ff       	call   c000076c <strlen>
c001accd:	83 c4 10             	add    esp,0x10
c001acd0:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001acd5:	75 11                	jne    c001ace8 <Reg::readString(char*, char*, char*, int)+0x75>
c001acd7:	83 ec 0c             	sub    esp,0xc
c001acda:	53                   	push   ebx
c001acdb:	e8 8c 5a fe ff       	call   c000076c <strlen>
c001ace0:	83 c4 10             	add    esp,0x10
c001ace3:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001ace8:	81 c4 d0 00 00 00    	add    esp,0xd0
c001acee:	89 f0                	mov    eax,esi
c001acf0:	5b                   	pop    ebx
c001acf1:	5e                   	pop    esi
c001acf2:	5f                   	pop    edi
c001acf3:	c3                   	ret    

c001acf4 <Reg::readBool(char*, char*, bool*)>:
c001acf4:	83 ec 20             	sub    esp,0x20
c001acf7:	8d 44 24 10          	lea    eax,[esp+0x10]
c001acfb:	50                   	push   eax
c001acfc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad04:	e8 7f fe ff ff       	call   c001ab88 <Reg::readInt(char*, char*, int*)>
c001ad09:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001ad0e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ad12:	0f 95 02             	setne  BYTE PTR [edx]
c001ad15:	83 c4 2c             	add    esp,0x2c
c001ad18:	c3                   	ret    

c001ad19 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001ad19:	53                   	push   ebx
c001ad1a:	83 ec 1c             	sub    esp,0x1c
c001ad1d:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001ad21:	8d 44 24 13          	lea    eax,[esp+0x13]
c001ad25:	50                   	push   eax
c001ad26:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad2e:	e8 c1 ff ff ff       	call   c001acf4 <Reg::readBool(char*, char*, bool*)>
c001ad33:	83 c4 10             	add    esp,0x10
c001ad36:	84 c0                	test   al,al
c001ad38:	74 04                	je     c001ad3e <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001ad3a:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001ad3e:	88 d8                	mov    al,bl
c001ad40:	83 c4 18             	add    esp,0x18
c001ad43:	5b                   	pop    ebx
c001ad44:	c3                   	ret    

c001ad45 <Reg::readIntWithDefault(char*, char*, int)>:
c001ad45:	53                   	push   ebx
c001ad46:	83 ec 1c             	sub    esp,0x1c
c001ad49:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ad4d:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ad51:	50                   	push   eax
c001ad52:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad5a:	e8 29 fe ff ff       	call   c001ab88 <Reg::readInt(char*, char*, int*)>
c001ad5f:	83 c4 10             	add    esp,0x10
c001ad62:	84 c0                	test   al,al
c001ad64:	74 04                	je     c001ad6a <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001ad66:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ad6a:	89 d8                	mov    eax,ebx
c001ad6c:	83 c4 18             	add    esp,0x18
c001ad6f:	5b                   	pop    ebx
c001ad70:	c3                   	ret    

c001ad71 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001ad71:	57                   	push   edi
c001ad72:	56                   	push   esi
c001ad73:	56                   	push   esi
c001ad74:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ad78:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001ad7c:	56                   	push   esi
c001ad7d:	57                   	push   edi
c001ad7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad86:	e8 e8 fe ff ff       	call   c001ac73 <Reg::readString(char*, char*, char*, int)>
c001ad8b:	83 c4 10             	add    esp,0x10
c001ad8e:	84 c0                	test   al,al
c001ad90:	75 1a                	jne    c001adac <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001ad92:	51                   	push   ecx
c001ad93:	56                   	push   esi
c001ad94:	6a 00                	push   0x0
c001ad96:	57                   	push   edi
c001ad97:	e8 b4 59 fe ff       	call   c0000750 <memset>
c001ad9c:	8d 4e ff             	lea    ecx,[esi-0x1]
c001ad9f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ada3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ada5:	83 c4 10             	add    esp,0x10
c001ada8:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001adac:	89 f8                	mov    eax,edi
c001adae:	5a                   	pop    edx
c001adaf:	5e                   	pop    esi
c001adb0:	5f                   	pop    edi
c001adb1:	c3                   	ret    

c001adb2 <Sys::eject(regs*)>:
c001adb2:	83 ec 0c             	sub    esp,0xc
c001adb5:	83 ca ff             	or     edx,0xffffffff
c001adb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adbc:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001adbf:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001adc4:	83 e9 41             	sub    ecx,0x41
c001adc7:	83 f9 19             	cmp    ecx,0x19
c001adca:	77 18                	ja     c001ade4 <Sys::eject(regs*)+0x32>
c001adcc:	8b 0c 8d c0 e3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1c40]
c001add3:	85 c9                	test   ecx,ecx
c001add5:	74 0d                	je     c001ade4 <Sys::eject(regs*)+0x32>
c001add7:	83 ec 0c             	sub    esp,0xc
c001adda:	51                   	push   ecx
c001addb:	e8 ae b2 ff ff       	call   c001608e <LogicalDisk::eject()>
c001ade0:	83 c4 10             	add    esp,0x10
c001ade3:	99                   	cdq    
c001ade4:	83 c4 0c             	add    esp,0xc
c001ade7:	c3                   	ret    

c001ade8 <Sys::exit(regs*)>:
c001ade8:	83 ec 18             	sub    esp,0x18
c001adeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001adef:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001adf2:	e8 d3 35 00 00       	call   c001e3ca <terminateTask(int)>
c001adf7:	83 c8 ff             	or     eax,0xffffffff
c001adfa:	83 c4 1c             	add    esp,0x1c
c001adfd:	89 c2                	mov    edx,eax
c001adff:	c3                   	ret    

c001ae00 <Sys::getCwd(regs*)>:
c001ae00:	83 ec 10             	sub    esp,0x10
c001ae03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ae07:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001ae0a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ae0d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae12:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ae15:	e8 e4 7c ff ff       	call   c0012afe <Fs::getcwd(Process*, char*, int)>
c001ae1a:	83 c4 1c             	add    esp,0x1c
c001ae1d:	99                   	cdq    
c001ae1e:	c3                   	ret    

c001ae1f <Sys::getPID(regs*)>:
c001ae1f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae24:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ae27:	8b 00                	mov    eax,DWORD PTR [eax]
c001ae29:	99                   	cdq    
c001ae2a:	c3                   	ret    

c001ae2b <Sys::getRAMData(regs*)>:
c001ae2b:	8b 0d 14 de 02 c0    	mov    ecx,DWORD PTR ds:0xc002de14
c001ae31:	69 05 10 de 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc002de10,0xc8
c001ae3b:	99                   	cdq    
c001ae3c:	f7 f9                	idiv   ecx
c001ae3e:	c1 e0 18             	shl    eax,0x18
c001ae41:	09 c8                	or     eax,ecx
c001ae43:	99                   	cdq    
c001ae44:	c3                   	ret    

c001ae45 <Sys::getVGAPtr(regs*)>:
c001ae45:	55                   	push   ebp
c001ae46:	57                   	push   edi
c001ae47:	56                   	push   esi
c001ae48:	53                   	push   ebx
c001ae49:	83 ec 18             	sub    esp,0x18
c001ae4c:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ae50:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001ae53:	e8 be 30 00 00       	call   c001df16 <Thr::processFromPID(int)>
c001ae58:	83 c4 10             	add    esp,0x10
c001ae5b:	89 c1                	mov    ecx,eax
c001ae5d:	b8 01 00 00 00       	mov    eax,0x1
c001ae62:	85 c9                	test   ecx,ecx
c001ae64:	74 59                	je     c001aebf <Sys::getVGAPtr(regs*)+0x7a>
c001ae66:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001ae6c:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001ae70:	74 0c                	je     c001ae7e <Sys::getVGAPtr(regs*)+0x39>
c001ae72:	83 ec 0c             	sub    esp,0xc
c001ae75:	53                   	push   ebx
c001ae76:	e8 d8 54 ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c001ae7b:	83 c4 10             	add    esp,0x10
c001ae7e:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001ae81:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001ae84:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001ae89:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ae8b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001ae8e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ae91:	81 c3 82 00 00 00    	add    ebx,0x82
c001ae97:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001ae9d:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001aea0:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001aea3:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001aea9:	50                   	push   eax
c001aeaa:	50                   	push   eax
c001aeab:	53                   	push   ebx
c001aeac:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001aeaf:	05 a8 0f 00 00       	add    eax,0xfa8
c001aeb4:	50                   	push   eax
c001aeb5:	e8 52 59 fe ff       	call   c000080c <strcpy>
c001aeba:	83 c4 10             	add    esp,0x10
c001aebd:	31 c0                	xor    eax,eax
c001aebf:	83 c4 0c             	add    esp,0xc
c001aec2:	31 d2                	xor    edx,edx
c001aec4:	5b                   	pop    ebx
c001aec5:	5e                   	pop    esi
c001aec6:	5f                   	pop    edi
c001aec7:	5d                   	pop    ebp
c001aec8:	c3                   	ret    

c001aec9 <Sys::loadDLL(regs*)>:
c001aec9:	56                   	push   esi
c001aeca:	53                   	push   ebx
c001aecb:	31 d2                	xor    edx,edx
c001aecd:	51                   	push   ecx
c001aece:	b8 01 00 00 00       	mov    eax,0x1
c001aed3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001aed7:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001aedb:	0f 84 8c 00 00 00    	je     c001af6d <Sys::loadDLL(regs*)+0xa4>
c001aee1:	83 ec 0c             	sub    esp,0xc
c001aee4:	68 14 01 00 00       	push   0x114
c001aee9:	e8 ab 46 ff ff       	call   c000f599 <malloc>
c001aeee:	83 c4 0c             	add    esp,0xc
c001aef1:	89 c3                	mov    ebx,eax
c001aef3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aef8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001aefb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001aefe:	53                   	push   ebx
c001aeff:	e8 f8 7d ff ff       	call   c0012cfc <File::File(char const*, Process*)>
c001af04:	83 c4 10             	add    esp,0x10
c001af07:	31 d2                	xor    edx,edx
c001af09:	b8 02 00 00 00       	mov    eax,0x2
c001af0e:	85 db                	test   ebx,ebx
c001af10:	74 5b                	je     c001af6d <Sys::loadDLL(regs*)+0xa4>
c001af12:	83 ec 0c             	sub    esp,0xc
c001af15:	53                   	push   ebx
c001af16:	e8 b3 80 ff ff       	call   c0012fce <File::exists()>
c001af1b:	83 c4 10             	add    esp,0x10
c001af1e:	84 c0                	test   al,al
c001af20:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af22:	75 11                	jne    c001af35 <Sys::loadDLL(regs*)+0x6c>
c001af24:	83 ec 0c             	sub    esp,0xc
c001af27:	53                   	push   ebx
c001af28:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001af2b:	83 c4 10             	add    esp,0x10
c001af2e:	b8 03 00 00 00       	mov    eax,0x3
c001af33:	eb 36                	jmp    c001af6b <Sys::loadDLL(regs*)+0xa2>
c001af35:	83 ec 0c             	sub    esp,0xc
c001af38:	53                   	push   ebx
c001af39:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001af3c:	58                   	pop    eax
c001af3d:	5a                   	pop    edx
c001af3e:	6a 00                	push   0x0
c001af40:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001af43:	e8 0e 22 00 00       	call   c001d156 <Thr::loadDLL(char const*, bool)>
c001af48:	83 c4 10             	add    esp,0x10
c001af4b:	89 c1                	mov    ecx,eax
c001af4d:	31 d2                	xor    edx,edx
c001af4f:	b8 04 00 00 00       	mov    eax,0x4
c001af54:	85 c9                	test   ecx,ecx
c001af56:	74 15                	je     c001af6d <Sys::loadDLL(regs*)+0xa4>
c001af58:	53                   	push   ebx
c001af59:	53                   	push   ebx
c001af5a:	ff 35 c8 dd 02 c0    	push   DWORD PTR ds:0xc002ddc8
c001af60:	51                   	push   ecx
c001af61:	e8 21 24 00 00       	call   c001d387 <Thr::executeDLL(unsigned long, void*)>
c001af66:	83 c4 10             	add    esp,0x10
c001af69:	31 c0                	xor    eax,eax
c001af6b:	31 d2                	xor    edx,edx
c001af6d:	59                   	pop    ecx
c001af6e:	5b                   	pop    ebx
c001af6f:	5e                   	pop    esi
c001af70:	c3                   	ret    

c001af71 <Sys::read(regs*)>:
c001af71:	57                   	push   edi
c001af72:	56                   	push   esi
c001af73:	53                   	push   ebx
c001af74:	83 ec 10             	sub    esp,0x10
c001af77:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001af7b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001af7e:	83 f8 02             	cmp    eax,0x2
c001af81:	77 10                	ja     c001af93 <Sys::read(regs*)+0x22>
c001af83:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001af88:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001af8b:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001af91:	eb 0e                	jmp    c001afa1 <Sys::read(regs*)+0x30>
c001af93:	83 ec 0c             	sub    esp,0xc
c001af96:	50                   	push   eax
c001af97:	e8 2d 61 ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001af9c:	83 c4 10             	add    esp,0x10
c001af9f:	89 c1                	mov    ecx,eax
c001afa1:	83 c8 ff             	or     eax,0xffffffff
c001afa4:	85 c9                	test   ecx,ecx
c001afa6:	89 c2                	mov    edx,eax
c001afa8:	74 28                	je     c001afd2 <Sys::read(regs*)+0x61>
c001afaa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001afb2:	31 ff                	xor    edi,edi
c001afb4:	83 ec 0c             	sub    esp,0xc
c001afb7:	8b 01                	mov    eax,DWORD PTR [ecx]
c001afb9:	8d 54 24 18          	lea    edx,[esp+0x18]
c001afbd:	52                   	push   edx
c001afbe:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001afc1:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001afc4:	57                   	push   edi
c001afc5:	56                   	push   esi
c001afc6:	51                   	push   ecx
c001afc7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001afca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001afce:	83 c4 20             	add    esp,0x20
c001afd1:	99                   	cdq    
c001afd2:	83 c4 10             	add    esp,0x10
c001afd5:	5b                   	pop    ebx
c001afd6:	5e                   	pop    esi
c001afd7:	5f                   	pop    edi
c001afd8:	c3                   	ret    

c001afd9 <Sys::sbrk(regs*)>:
c001afd9:	56                   	push   esi
c001afda:	53                   	push   ebx
c001afdb:	50                   	push   eax
c001afdc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001afe1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001afe5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001afe8:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001afeb:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001aff1:	85 db                	test   ebx,ebx
c001aff3:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001aff6:	74 02                	je     c001affa <Sys::sbrk(regs*)+0x21>
c001aff8:	79 06                	jns    c001b000 <Sys::sbrk(regs*)+0x27>
c001affa:	89 f0                	mov    eax,esi
c001affc:	31 d2                	xor    edx,edx
c001affe:	eb 2a                	jmp    c001b02a <Sys::sbrk(regs*)+0x51>
c001b000:	83 c8 ff             	or     eax,0xffffffff
c001b003:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b009:	89 c2                	mov    edx,eax
c001b00b:	77 1d                	ja     c001b02a <Sys::sbrk(regs*)+0x51>
c001b00d:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b013:	50                   	push   eax
c001b014:	c1 ea 0c             	shr    edx,0xc
c001b017:	68 07 0c 00 00       	push   0xc07
c001b01c:	52                   	push   edx
c001b01d:	51                   	push   ecx
c001b01e:	e8 51 6b ff ff       	call   c0011b74 <VAS::allocatePages(int, int)>
c001b023:	89 f0                	mov    eax,esi
c001b025:	31 d2                	xor    edx,edx
c001b027:	83 c4 10             	add    esp,0x10
c001b02a:	59                   	pop    ecx
c001b02b:	5b                   	pop    ebx
c001b02c:	5e                   	pop    esi
c001b02d:	c3                   	ret    

c001b02e <Sys::setCwd(regs*)>:
c001b02e:	83 ec 14             	sub    esp,0x14
c001b031:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b035:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b038:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b03d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b040:	e8 28 80 ff ff       	call   c001306d <Fs::setcwd(Process*, char*)>
c001b045:	83 c4 1c             	add    esp,0x1c
c001b048:	99                   	cdq    
c001b049:	c3                   	ret    

c001b04a <Sys::setTime(regs*)>:
c001b04a:	55                   	push   ebp
c001b04b:	31 c9                	xor    ecx,ecx
c001b04d:	57                   	push   edi
c001b04e:	bd 0c 00 00 00       	mov    ebp,0xc
c001b053:	56                   	push   esi
c001b054:	53                   	push   ebx
c001b055:	31 db                	xor    ebx,ebx
c001b057:	83 ec 10             	sub    esp,0x10
c001b05a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b05e:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001b061:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001b064:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001b067:	89 c2                	mov    edx,eax
c001b069:	66 81 ef 6c 07       	sub    di,0x76c
c001b06e:	83 e2 1f             	and    edx,0x1f
c001b071:	c1 e7 10             	shl    edi,0x10
c001b074:	42                   	inc    edx
c001b075:	c1 e8 05             	shr    eax,0x5
c001b078:	88 d1                	mov    cl,dl
c001b07a:	31 d2                	xor    edx,edx
c001b07c:	f7 f5                	div    ebp
c001b07e:	89 dd                	mov    ebp,ebx
c001b080:	88 d5                	mov    ch,dl
c001b082:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001b088:	0f b7 c1             	movzx  eax,cx
c001b08b:	31 d2                	xor    edx,edx
c001b08d:	09 f8                	or     eax,edi
c001b08f:	bf 3c 00 00 00       	mov    edi,0x3c
c001b094:	89 c1                	mov    ecx,eax
c001b096:	89 f0                	mov    eax,esi
c001b098:	f7 f7                	div    edi
c001b09a:	c1 e2 10             	shl    edx,0x10
c001b09d:	09 d5                	or     ebp,edx
c001b09f:	31 d2                	xor    edx,edx
c001b0a1:	89 eb                	mov    ebx,ebp
c001b0a3:	f7 f7                	div    edi
c001b0a5:	bf 10 0e 00 00       	mov    edi,0xe10
c001b0aa:	88 d7                	mov    bh,dl
c001b0ac:	89 f0                	mov    eax,esi
c001b0ae:	31 d2                	xor    edx,edx
c001b0b0:	f7 f7                	div    edi
c001b0b2:	bf 18 00 00 00       	mov    edi,0x18
c001b0b7:	31 d2                	xor    edx,edx
c001b0b9:	f7 f7                	div    edi
c001b0bb:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c001b0c0:	88 d3                	mov    bl,dl
c001b0c2:	53                   	push   ebx
c001b0c3:	51                   	push   ecx
c001b0c4:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b0ca:	e8 e7 87 ff ff       	call   c00138b6 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b0cf:	83 c4 1c             	add    esp,0x1c
c001b0d2:	83 f0 01             	xor    eax,0x1
c001b0d5:	5b                   	pop    ebx
c001b0d6:	0f b6 c0             	movzx  eax,al
c001b0d9:	5e                   	pop    esi
c001b0da:	31 d2                	xor    edx,edx
c001b0dc:	5f                   	pop    edi
c001b0dd:	5d                   	pop    ebp
c001b0de:	c3                   	ret    

c001b0df <Sys::timezone(regs*)>:
c001b0df:	53                   	push   ebx
c001b0e0:	83 ec 08             	sub    esp,0x8
c001b0e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b0e7:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b0eb:	75 17                	jne    c001b104 <Sys::timezone(regs*)+0x25>
c001b0ed:	83 ec 0c             	sub    esp,0xc
c001b0f0:	68 65 bc 02 c0       	push   0xc002bc65
c001b0f5:	e8 a3 76 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001b0fa:	83 c8 ff             	or     eax,0xffffffff
c001b0fd:	83 c4 10             	add    esp,0x10
c001b100:	89 c2                	mov    edx,eax
c001b102:	eb 20                	jmp    c001b124 <Sys::timezone(regs*)+0x45>
c001b104:	83 ec 0c             	sub    esp,0xc
c001b107:	68 7a bc 02 c0       	push   0xc002bc7a
c001b10c:	e8 8c 76 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001b111:	58                   	pop    eax
c001b112:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b115:	e8 fe 84 ff ff       	call   c0013618 <User::loadClockSettings(int)>
c001b11a:	83 c4 10             	add    esp,0x10
c001b11d:	b8 01 00 00 00       	mov    eax,0x1
c001b122:	31 d2                	xor    edx,edx
c001b124:	83 c4 08             	add    esp,0x8
c001b127:	5b                   	pop    ebx
c001b128:	c3                   	ret    

c001b129 <Sys::write(regs*)>:
c001b129:	57                   	push   edi
c001b12a:	56                   	push   esi
c001b12b:	53                   	push   ebx
c001b12c:	83 ec 10             	sub    esp,0x10
c001b12f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b133:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b136:	83 f8 02             	cmp    eax,0x2
c001b139:	77 10                	ja     c001b14b <Sys::write(regs*)+0x22>
c001b13b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b140:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b143:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b149:	eb 0e                	jmp    c001b159 <Sys::write(regs*)+0x30>
c001b14b:	83 ec 0c             	sub    esp,0xc
c001b14e:	50                   	push   eax
c001b14f:	e8 75 5f ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b154:	83 c4 10             	add    esp,0x10
c001b157:	89 c1                	mov    ecx,eax
c001b159:	83 c8 ff             	or     eax,0xffffffff
c001b15c:	85 c9                	test   ecx,ecx
c001b15e:	89 c2                	mov    edx,eax
c001b160:	74 28                	je     c001b18a <Sys::write(regs*)+0x61>
c001b162:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b16a:	31 ff                	xor    edi,edi
c001b16c:	83 ec 0c             	sub    esp,0xc
c001b16f:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b171:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b175:	52                   	push   edx
c001b176:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b179:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b17c:	57                   	push   edi
c001b17d:	56                   	push   esi
c001b17e:	51                   	push   ecx
c001b17f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b182:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b186:	83 c4 20             	add    esp,0x20
c001b189:	99                   	cdq    
c001b18a:	83 c4 10             	add    esp,0x10
c001b18d:	5b                   	pop    ebx
c001b18e:	5e                   	pop    esi
c001b18f:	5f                   	pop    edi
c001b190:	c3                   	ret    

c001b191 <Sys::wsbe(regs*)>:
c001b191:	57                   	push   edi
c001b192:	b9 0b 00 00 00       	mov    ecx,0xb
c001b197:	56                   	push   esi
c001b198:	be b9 bc 02 c0       	mov    esi,0xc002bcb9
c001b19d:	53                   	push   ebx
c001b19e:	83 ec 30             	sub    esp,0x30
c001b1a1:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b1a5:	fc                   	cld    
c001b1a6:	83 ec 0c             	sub    esp,0xc
c001b1a9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b1ab:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b1af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1b4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b1b7:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b1bd:	8b 06                	mov    eax,DWORD PTR [esi]
c001b1bf:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b1c2:	57                   	push   edi
c001b1c3:	e8 a4 55 fe ff       	call   c000076c <strlen>
c001b1c8:	5a                   	pop    edx
c001b1c9:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b1cd:	52                   	push   edx
c001b1ce:	31 d2                	xor    edx,edx
c001b1d0:	57                   	push   edi
c001b1d1:	52                   	push   edx
c001b1d2:	50                   	push   eax
c001b1d3:	56                   	push   esi
c001b1d4:	ff d3                	call   ebx
c001b1d6:	83 c4 14             	add    esp,0x14
c001b1d9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b1dd:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b1e0:	e8 e5 31 00 00       	call   c001e3ca <terminateTask(int)>
c001b1e5:	83 c4 40             	add    esp,0x40
c001b1e8:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b1ed:	5b                   	pop    ebx
c001b1ee:	31 d2                	xor    edx,edx
c001b1f0:	5e                   	pop    esi
c001b1f1:	5f                   	pop    edi
c001b1f2:	c3                   	ret    

c001b1f3 <Sys::yield(regs*)>:
c001b1f3:	57                   	push   edi
c001b1f4:	56                   	push   esi
c001b1f5:	53                   	push   ebx
c001b1f6:	fa                   	cli    
c001b1f7:	ff 05 c8 f2 02 c0    	inc    DWORD PTR ds:0xc002f2c8
c001b1fd:	e8 19 29 00 00       	call   c001db1b <schedule()>
c001b202:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001b207:	48                   	dec    eax
c001b208:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c001b20d:	75 01                	jne    c001b210 <Sys::yield(regs*)+0x1d>
c001b20f:	fb                   	sti    
c001b210:	8b 35 30 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e430
c001b216:	8b 3d 34 e4 02 c0    	mov    edi,DWORD PTR ds:0xc002e434
c001b21c:	89 f0                	mov    eax,esi
c001b21e:	89 fb                	mov    ebx,edi
c001b220:	89 f1                	mov    ecx,esi
c001b222:	c1 e0 07             	shl    eax,0x7
c001b225:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b229:	25 80 30 0f 00       	and    eax,0xf3080
c001b22e:	c1 eb 17             	shr    ebx,0x17
c001b231:	31 c8                	xor    eax,ecx
c001b233:	89 da                	mov    edx,ebx
c001b235:	5b                   	pop    ebx
c001b236:	5e                   	pop    esi
c001b237:	5f                   	pop    edi
c001b238:	c3                   	ret    

c001b239 <sysCallSeekDir(regs*)>:
c001b239:	31 c0                	xor    eax,eax
c001b23b:	31 d2                	xor    edx,edx
c001b23d:	c3                   	ret    

c001b23e <sysCallTellDir(regs*)>:
c001b23e:	31 c0                	xor    eax,eax
c001b240:	31 d2                	xor    edx,edx
c001b242:	c3                   	ret    

c001b243 <sysCallVerify(regs*)>:
c001b243:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b247:	31 d2                	xor    edx,edx
c001b249:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b24c:	c3                   	ret    

c001b24d <sysCallGetArgc(regs*)>:
c001b24d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b252:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b255:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b25b:	99                   	cdq    
c001b25c:	c3                   	ret    

c001b25d <sysFormatDisk(regs*)>:
c001b25d:	56                   	push   esi
c001b25e:	53                   	push   ebx
c001b25f:	53                   	push   ebx
c001b260:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b264:	8b 1d 34 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002df34
c001b26a:	eb 25                	jmp    c001b291 <sysFormatDisk(regs*)+0x34>
c001b26c:	83 ec 0c             	sub    esp,0xc
c001b26f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b272:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b274:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b277:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b27a:	50                   	push   eax
c001b27b:	ff 34 85 c0 e3 02 c0 	push   DWORD PTR [eax*4-0x3ffd1c40]
c001b282:	53                   	push   ebx
c001b283:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b286:	83 c4 20             	add    esp,0x20
c001b289:	83 f8 08             	cmp    eax,0x8
c001b28c:	75 12                	jne    c001b2a0 <sysFormatDisk(regs*)+0x43>
c001b28e:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b291:	85 db                	test   ebx,ebx
c001b293:	75 d7                	jne    c001b26c <sysFormatDisk(regs*)+0xf>
c001b295:	59                   	pop    ecx
c001b296:	b8 03 00 00 00       	mov    eax,0x3
c001b29b:	31 d2                	xor    edx,edx
c001b29d:	5b                   	pop    ebx
c001b29e:	5e                   	pop    esi
c001b29f:	c3                   	ret    
c001b2a0:	85 c0                	test   eax,eax
c001b2a2:	74 1b                	je     c001b2bf <sysFormatDisk(regs*)+0x62>
c001b2a4:	83 f8 09             	cmp    eax,0x9
c001b2a7:	74 0b                	je     c001b2b4 <sysFormatDisk(regs*)+0x57>
c001b2a9:	59                   	pop    ecx
c001b2aa:	b8 02 00 00 00       	mov    eax,0x2
c001b2af:	31 d2                	xor    edx,edx
c001b2b1:	5b                   	pop    ebx
c001b2b2:	5e                   	pop    esi
c001b2b3:	c3                   	ret    
c001b2b4:	59                   	pop    ecx
c001b2b5:	b8 01 00 00 00       	mov    eax,0x1
c001b2ba:	31 d2                	xor    edx,edx
c001b2bc:	5b                   	pop    ebx
c001b2bd:	5e                   	pop    esi
c001b2be:	c3                   	ret    
c001b2bf:	59                   	pop    ecx
c001b2c0:	31 c0                	xor    eax,eax
c001b2c2:	31 d2                	xor    edx,edx
c001b2c4:	5b                   	pop    ebx
c001b2c5:	5e                   	pop    esi
c001b2c6:	c3                   	ret    

c001b2c7 <sysSetDiskVolumeLabel(regs*)>:
c001b2c7:	56                   	push   esi
c001b2c8:	53                   	push   ebx
c001b2c9:	53                   	push   ebx
c001b2ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b2ce:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b2d1:	83 f8 19             	cmp    eax,0x19
c001b2d4:	77 29                	ja     c001b2ff <sysSetDiskVolumeLabel(regs*)+0x38>
c001b2d6:	8b 0c 85 c0 e3 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1c40]
c001b2dd:	85 c9                	test   ecx,ecx
c001b2df:	74 1e                	je     c001b2ff <sysSetDiskVolumeLabel(regs*)+0x38>
c001b2e1:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b2e4:	85 d2                	test   edx,edx
c001b2e6:	74 17                	je     c001b2ff <sysSetDiskVolumeLabel(regs*)+0x38>
c001b2e8:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b2ee:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b2f0:	52                   	push   edx
c001b2f1:	50                   	push   eax
c001b2f2:	51                   	push   ecx
c001b2f3:	53                   	push   ebx
c001b2f4:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b2f7:	83 c4 10             	add    esp,0x10
c001b2fa:	99                   	cdq    
c001b2fb:	59                   	pop    ecx
c001b2fc:	5b                   	pop    ebx
c001b2fd:	5e                   	pop    esi
c001b2fe:	c3                   	ret    
c001b2ff:	59                   	pop    ecx
c001b300:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b305:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b30a:	5b                   	pop    ebx
c001b30b:	5e                   	pop    esi
c001b30c:	c3                   	ret    

c001b30d <sysGetDiskVolumeLabel(regs*)>:
c001b30d:	57                   	push   edi
c001b30e:	56                   	push   esi
c001b30f:	53                   	push   ebx
c001b310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b314:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b317:	83 fa 19             	cmp    edx,0x19
c001b31a:	77 34                	ja     c001b350 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b31c:	8b 0c 95 c0 e3 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1c40]
c001b323:	85 c9                	test   ecx,ecx
c001b325:	74 29                	je     c001b350 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b327:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b32a:	85 db                	test   ebx,ebx
c001b32c:	74 22                	je     c001b350 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b32e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b331:	85 c0                	test   eax,eax
c001b333:	74 1b                	je     c001b350 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b335:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b33b:	83 ec 0c             	sub    esp,0xc
c001b33e:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b340:	50                   	push   eax
c001b341:	53                   	push   ebx
c001b342:	52                   	push   edx
c001b343:	51                   	push   ecx
c001b344:	56                   	push   esi
c001b345:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b348:	83 c4 20             	add    esp,0x20
c001b34b:	99                   	cdq    
c001b34c:	5b                   	pop    ebx
c001b34d:	5e                   	pop    esi
c001b34e:	5f                   	pop    edi
c001b34f:	c3                   	ret    
c001b350:	5b                   	pop    ebx
c001b351:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b356:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b35b:	5e                   	pop    esi
c001b35c:	5f                   	pop    edi
c001b35d:	c3                   	ret    

c001b35e <sysShutdown(regs*)>:
c001b35e:	83 ec 0c             	sub    esp,0xc
c001b361:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b365:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b368:	85 c0                	test   eax,eax
c001b36a:	74 18                	je     c001b384 <sysShutdown(regs*)+0x26>
c001b36c:	83 f8 01             	cmp    eax,0x1
c001b36f:	74 38                	je     c001b3a9 <sysShutdown(regs*)+0x4b>
c001b371:	83 f8 02             	cmp    eax,0x2
c001b374:	74 24                	je     c001b39a <sysShutdown(regs*)+0x3c>
c001b376:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b37b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b380:	83 c4 0c             	add    esp,0xc
c001b383:	c3                   	ret    
c001b384:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c001b389:	8b 10                	mov    edx,DWORD PTR [eax]
c001b38b:	6a 00                	push   0x0
c001b38d:	6a 00                	push   0x0
c001b38f:	6a 00                	push   0x0
c001b391:	50                   	push   eax
c001b392:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b395:	83 c4 10             	add    esp,0x10
c001b398:	eb dc                	jmp    c001b376 <sysShutdown(regs*)+0x18>
c001b39a:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c001b39f:	8b 10                	mov    edx,DWORD PTR [eax]
c001b3a1:	6a 00                	push   0x0
c001b3a3:	6a 00                	push   0x0
c001b3a5:	6a 01                	push   0x1
c001b3a7:	eb e8                	jmp    c001b391 <sysShutdown(regs*)+0x33>
c001b3a9:	a1 40 e4 02 c0       	mov    eax,ds:0xc002e440
c001b3ae:	85 c0                	test   eax,eax
c001b3b0:	74 02                	je     c001b3b4 <sysShutdown(regs*)+0x56>
c001b3b2:	ff d0                	call   eax
c001b3b4:	31 c0                	xor    eax,eax
c001b3b6:	31 d2                	xor    edx,edx
c001b3b8:	83 c4 0c             	add    esp,0xc
c001b3bb:	c3                   	ret    

c001b3bc <sysCallRealpath(regs*)>:
c001b3bc:	83 ec 0c             	sub    esp,0xc
c001b3bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3c3:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b3c6:	85 d2                	test   edx,edx
c001b3c8:	74 07                	je     c001b3d1 <sysCallRealpath(regs*)+0x15>
c001b3ca:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b3cd:	85 c0                	test   eax,eax
c001b3cf:	75 0b                	jne    c001b3dc <sysCallRealpath(regs*)+0x20>
c001b3d1:	b8 01 00 00 00       	mov    eax,0x1
c001b3d6:	31 d2                	xor    edx,edx
c001b3d8:	83 c4 0c             	add    esp,0xc
c001b3db:	c3                   	ret    
c001b3dc:	51                   	push   ecx
c001b3dd:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b3e3:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b3e6:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b3ec:	51                   	push   ecx
c001b3ed:	52                   	push   edx
c001b3ee:	50                   	push   eax
c001b3ef:	e8 5e 77 ff ff       	call   c0012b52 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b3f4:	83 c4 10             	add    esp,0x10
c001b3f7:	31 c0                	xor    eax,eax
c001b3f9:	31 d2                	xor    edx,edx
c001b3fb:	83 c4 0c             	add    esp,0xc
c001b3fe:	c3                   	ret    

c001b3ff <sysCallReadDir(regs*)>:
c001b3ff:	53                   	push   ebx
c001b400:	83 ec 18             	sub    esp,0x18
c001b403:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b407:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b40a:	83 f8 02             	cmp    eax,0x2
c001b40d:	76 60                	jbe    c001b46f <sysCallReadDir(regs*)+0x70>
c001b40f:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001b416:	77 48                	ja     c001b460 <sysCallReadDir(regs*)+0x61>
c001b418:	83 ec 0c             	sub    esp,0xc
c001b41b:	50                   	push   eax
c001b41c:	e8 a8 5c ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b421:	83 c4 10             	add    esp,0x10
c001b424:	85 c0                	test   eax,eax
c001b426:	74 38                	je     c001b460 <sysCallReadDir(regs*)+0x61>
c001b428:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b430:	83 ec 0c             	sub    esp,0xc
c001b433:	8b 10                	mov    edx,DWORD PTR [eax]
c001b435:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b439:	51                   	push   ecx
c001b43a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b43d:	6a 00                	push   0x0
c001b43f:	68 10 01 00 00       	push   0x110
c001b444:	50                   	push   eax
c001b445:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b448:	83 c4 20             	add    esp,0x20
c001b44b:	85 c0                	test   eax,eax
c001b44d:	74 29                	je     c001b478 <sysCallReadDir(regs*)+0x79>
c001b44f:	83 f8 07             	cmp    eax,0x7
c001b452:	74 1b                	je     c001b46f <sysCallReadDir(regs*)+0x70>
c001b454:	b8 02 00 00 00       	mov    eax,0x2
c001b459:	31 d2                	xor    edx,edx
c001b45b:	83 c4 18             	add    esp,0x18
c001b45e:	5b                   	pop    ebx
c001b45f:	c3                   	ret    
c001b460:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b465:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b46a:	83 c4 18             	add    esp,0x18
c001b46d:	5b                   	pop    ebx
c001b46e:	c3                   	ret    
c001b46f:	b8 01 00 00 00       	mov    eax,0x1
c001b474:	31 d2                	xor    edx,edx
c001b476:	eb e3                	jmp    c001b45b <sysCallReadDir(regs*)+0x5c>
c001b478:	31 c0                	xor    eax,eax
c001b47a:	31 d2                	xor    edx,edx
c001b47c:	eb dd                	jmp    c001b45b <sysCallReadDir(regs*)+0x5c>

c001b47e <sysCallIsATTY(regs*)>:
c001b47e:	83 ec 0c             	sub    esp,0xc
c001b481:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b485:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b488:	83 f8 02             	cmp    eax,0x2
c001b48b:	76 07                	jbe    c001b494 <sysCallIsATTY(regs*)+0x16>
c001b48d:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b492:	75 26                	jne    c001b4ba <sysCallIsATTY(regs*)+0x3c>
c001b494:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b499:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b49c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b4a2:	85 c0                	test   eax,eax
c001b4a4:	74 24                	je     c001b4ca <sysCallIsATTY(regs*)+0x4c>
c001b4a6:	83 ec 0c             	sub    esp,0xc
c001b4a9:	8b 10                	mov    edx,DWORD PTR [eax]
c001b4ab:	50                   	push   eax
c001b4ac:	ff 12                	call   DWORD PTR [edx]
c001b4ae:	31 d2                	xor    edx,edx
c001b4b0:	0f b6 c0             	movzx  eax,al
c001b4b3:	83 c4 10             	add    esp,0x10
c001b4b6:	83 c4 0c             	add    esp,0xc
c001b4b9:	c3                   	ret    
c001b4ba:	83 ec 0c             	sub    esp,0xc
c001b4bd:	50                   	push   eax
c001b4be:	e8 06 5c ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b4c3:	83 c4 10             	add    esp,0x10
c001b4c6:	85 c0                	test   eax,eax
c001b4c8:	75 dc                	jne    c001b4a6 <sysCallIsATTY(regs*)+0x28>
c001b4ca:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b4cf:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b4d4:	83 c4 0c             	add    esp,0xc
c001b4d7:	c3                   	ret    

c001b4d8 <sysCallSeek(regs*)>:
c001b4d8:	53                   	push   ebx
c001b4d9:	83 ec 08             	sub    esp,0x8
c001b4dc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b4e0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b4e3:	8d 50 fd             	lea    edx,[eax-0x3]
c001b4e6:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b4ec:	77 32                	ja     c001b520 <sysCallSeek(regs*)+0x48>
c001b4ee:	83 ec 0c             	sub    esp,0xc
c001b4f1:	50                   	push   eax
c001b4f2:	e8 d2 5b ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b4f7:	83 c4 0c             	add    esp,0xc
c001b4fa:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b4fd:	31 db                	xor    ebx,ebx
c001b4ff:	53                   	push   ebx
c001b500:	51                   	push   ecx
c001b501:	50                   	push   eax
c001b502:	e8 17 79 ff ff       	call   c0012e1e <File::seek(unsigned long long)>
c001b507:	83 c4 10             	add    esp,0x10
c001b50a:	85 c0                	test   eax,eax
c001b50c:	0f 95 c0             	setne  al
c001b50f:	31 d2                	xor    edx,edx
c001b511:	0f b6 c0             	movzx  eax,al
c001b514:	f7 d8                	neg    eax
c001b516:	83 d2 00             	adc    edx,0x0
c001b519:	83 c4 08             	add    esp,0x8
c001b51c:	f7 da                	neg    edx
c001b51e:	5b                   	pop    ebx
c001b51f:	c3                   	ret    
c001b520:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b525:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b52a:	83 c4 08             	add    esp,0x8
c001b52d:	5b                   	pop    ebx
c001b52e:	c3                   	ret    

c001b52f <sysCallTell(regs*)>:
c001b52f:	53                   	push   ebx
c001b530:	83 ec 08             	sub    esp,0x8
c001b533:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b537:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b53a:	83 f8 02             	cmp    eax,0x2
c001b53d:	76 4d                	jbe    c001b58c <sysCallTell(regs*)+0x5d>
c001b53f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b544:	76 19                	jbe    c001b55f <sysCallTell(regs*)+0x30>
c001b546:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b549:	31 d2                	xor    edx,edx
c001b54b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b551:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b558:	31 c0                	xor    eax,eax
c001b55a:	83 c4 08             	add    esp,0x8
c001b55d:	5b                   	pop    ebx
c001b55e:	c3                   	ret    
c001b55f:	83 ec 0c             	sub    esp,0xc
c001b562:	50                   	push   eax
c001b563:	e8 61 5b ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b568:	5a                   	pop    edx
c001b569:	59                   	pop    ecx
c001b56a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b56d:	50                   	push   eax
c001b56e:	e8 01 79 ff ff       	call   c0012e74 <File::tell(unsigned long long*)>
c001b573:	83 c4 10             	add    esp,0x10
c001b576:	85 c0                	test   eax,eax
c001b578:	0f 95 c0             	setne  al
c001b57b:	31 d2                	xor    edx,edx
c001b57d:	0f b6 c0             	movzx  eax,al
c001b580:	f7 d8                	neg    eax
c001b582:	83 d2 00             	adc    edx,0x0
c001b585:	83 c4 08             	add    esp,0x8
c001b588:	f7 da                	neg    edx
c001b58a:	5b                   	pop    ebx
c001b58b:	c3                   	ret    
c001b58c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b591:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b596:	83 c4 08             	add    esp,0x8
c001b599:	5b                   	pop    ebx
c001b59a:	c3                   	ret    

c001b59b <sysCallSize(regs*)>:
c001b59b:	53                   	push   ebx
c001b59c:	83 ec 18             	sub    esp,0x18
c001b59f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b5a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b5a6:	83 f8 02             	cmp    eax,0x2
c001b5a9:	76 53                	jbe    c001b5fe <sysCallSize(regs*)+0x63>
c001b5ab:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b5b0:	76 19                	jbe    c001b5cb <sysCallSize(regs*)+0x30>
c001b5b2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b5b5:	31 d2                	xor    edx,edx
c001b5b7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b5bd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b5c4:	31 c0                	xor    eax,eax
c001b5c6:	83 c4 18             	add    esp,0x18
c001b5c9:	5b                   	pop    ebx
c001b5ca:	c3                   	ret    
c001b5cb:	83 ec 0c             	sub    esp,0xc
c001b5ce:	50                   	push   eax
c001b5cf:	e8 f5 5a ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b5d4:	83 c4 0c             	add    esp,0xc
c001b5d7:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b5db:	52                   	push   edx
c001b5dc:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b5df:	50                   	push   eax
c001b5e0:	e8 27 7a ff ff       	call   c001300c <File::stat(unsigned long long*, bool*)>
c001b5e5:	83 c4 10             	add    esp,0x10
c001b5e8:	85 c0                	test   eax,eax
c001b5ea:	0f 95 c0             	setne  al
c001b5ed:	31 d2                	xor    edx,edx
c001b5ef:	0f b6 c0             	movzx  eax,al
c001b5f2:	f7 d8                	neg    eax
c001b5f4:	83 d2 00             	adc    edx,0x0
c001b5f7:	83 c4 18             	add    esp,0x18
c001b5fa:	f7 da                	neg    edx
c001b5fc:	5b                   	pop    ebx
c001b5fd:	c3                   	ret    
c001b5fe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b603:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b608:	83 c4 18             	add    esp,0x18
c001b60b:	5b                   	pop    ebx
c001b60c:	c3                   	ret    

c001b60d <sysCallSizeFromFilename(regs*)>:
c001b60d:	57                   	push   edi
c001b60e:	56                   	push   esi
c001b60f:	53                   	push   ebx
c001b610:	83 ec 20             	sub    esp,0x20
c001b613:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b617:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001b61a:	83 fb 02             	cmp    ebx,0x2
c001b61d:	0f 86 88 00 00 00    	jbe    c001b6ab <sysCallSizeFromFilename(regs*)+0x9e>
c001b623:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b629:	76 1b                	jbe    c001b646 <sysCallSizeFromFilename(regs*)+0x39>
c001b62b:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b62e:	31 d2                	xor    edx,edx
c001b630:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b636:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b63d:	83 c4 20             	add    esp,0x20
c001b640:	31 c0                	xor    eax,eax
c001b642:	5b                   	pop    ebx
c001b643:	5e                   	pop    esi
c001b644:	5f                   	pop    edi
c001b645:	c3                   	ret    
c001b646:	83 ec 0c             	sub    esp,0xc
c001b649:	68 14 01 00 00       	push   0x114
c001b64e:	e8 46 3f ff ff       	call   c000f599 <malloc>
c001b653:	83 c4 0c             	add    esp,0xc
c001b656:	89 c7                	mov    edi,eax
c001b658:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b65d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b660:	53                   	push   ebx
c001b661:	57                   	push   edi
c001b662:	e8 95 76 ff ff       	call   c0012cfc <File::File(char const*, Process*)>
c001b667:	83 c4 0c             	add    esp,0xc
c001b66a:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b66e:	50                   	push   eax
c001b66f:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b672:	57                   	push   edi
c001b673:	e8 94 79 ff ff       	call   c001300c <File::stat(unsigned long long*, bool*)>
c001b678:	83 c4 10             	add    esp,0x10
c001b67b:	85 ff                	test   edi,edi
c001b67d:	74 14                	je     c001b693 <sysCallSizeFromFilename(regs*)+0x86>
c001b67f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b683:	8b 17                	mov    edx,DWORD PTR [edi]
c001b685:	83 ec 0c             	sub    esp,0xc
c001b688:	57                   	push   edi
c001b689:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b68c:	83 c4 10             	add    esp,0x10
c001b68f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b693:	85 c0                	test   eax,eax
c001b695:	0f 95 c0             	setne  al
c001b698:	31 d2                	xor    edx,edx
c001b69a:	0f b6 c0             	movzx  eax,al
c001b69d:	f7 d8                	neg    eax
c001b69f:	83 d2 00             	adc    edx,0x0
c001b6a2:	83 c4 20             	add    esp,0x20
c001b6a5:	f7 da                	neg    edx
c001b6a7:	5b                   	pop    ebx
c001b6a8:	5e                   	pop    esi
c001b6a9:	5f                   	pop    edi
c001b6aa:	c3                   	ret    
c001b6ab:	83 c4 20             	add    esp,0x20
c001b6ae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b6b3:	5b                   	pop    ebx
c001b6b4:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b6b9:	5e                   	pop    esi
c001b6ba:	5f                   	pop    edi
c001b6bb:	c3                   	ret    

c001b6bc <sysCallClose(regs*)>:
c001b6bc:	53                   	push   ebx
c001b6bd:	83 ec 08             	sub    esp,0x8
c001b6c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6c4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b6c7:	83 f8 02             	cmp    eax,0x2
c001b6ca:	76 41                	jbe    c001b70d <sysCallClose(regs*)+0x51>
c001b6cc:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001b6d2:	83 fa 01             	cmp    edx,0x1
c001b6d5:	76 2d                	jbe    c001b704 <sysCallClose(regs*)+0x48>
c001b6d7:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b6dc:	77 2f                	ja     c001b70d <sysCallClose(regs*)+0x51>
c001b6de:	83 ec 0c             	sub    esp,0xc
c001b6e1:	50                   	push   eax
c001b6e2:	e8 e2 59 ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b6e7:	89 c3                	mov    ebx,eax
c001b6e9:	89 04 24             	mov    DWORD PTR [esp],eax
c001b6ec:	e8 cd 76 ff ff       	call   c0012dbe <File::close()>
c001b6f1:	83 c4 10             	add    esp,0x10
c001b6f4:	85 db                	test   ebx,ebx
c001b6f6:	74 0c                	je     c001b704 <sysCallClose(regs*)+0x48>
c001b6f8:	83 ec 0c             	sub    esp,0xc
c001b6fb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b6fd:	53                   	push   ebx
c001b6fe:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b701:	83 c4 10             	add    esp,0x10
c001b704:	31 c0                	xor    eax,eax
c001b706:	31 d2                	xor    edx,edx
c001b708:	83 c4 08             	add    esp,0x8
c001b70b:	5b                   	pop    ebx
c001b70c:	c3                   	ret    
c001b70d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b712:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b717:	83 c4 08             	add    esp,0x8
c001b71a:	5b                   	pop    ebx
c001b71b:	c3                   	ret    

c001b71c <sysCallOpenDir(regs*)>:
c001b71c:	56                   	push   esi
c001b71d:	53                   	push   ebx
c001b71e:	53                   	push   ebx
c001b71f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b723:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001b726:	85 f6                	test   esi,esi
c001b728:	74 59                	je     c001b783 <sysCallOpenDir(regs*)+0x67>
c001b72a:	83 ec 0c             	sub    esp,0xc
c001b72d:	68 14 01 00 00       	push   0x114
c001b732:	e8 62 3e ff ff       	call   c000f599 <malloc>
c001b737:	83 c4 0c             	add    esp,0xc
c001b73a:	89 c6                	mov    esi,eax
c001b73c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b741:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b744:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b747:	56                   	push   esi
c001b748:	e8 5b 7a ff ff       	call   c00131a8 <Directory::Directory(char const*, Process*)>
c001b74d:	83 c4 10             	add    esp,0x10
c001b750:	85 f6                	test   esi,esi
c001b752:	74 2f                	je     c001b783 <sysCallOpenDir(regs*)+0x67>
c001b754:	83 ec 0c             	sub    esp,0xc
c001b757:	56                   	push   esi
c001b758:	e8 af 7a ff ff       	call   c001320c <Directory::open()>
c001b75d:	83 c4 10             	add    esp,0x10
c001b760:	85 c0                	test   eax,eax
c001b762:	75 1f                	jne    c001b783 <sysCallOpenDir(regs*)+0x67>
c001b764:	83 ec 0c             	sub    esp,0xc
c001b767:	56                   	push   esi
c001b768:	e8 67 56 ff ff       	call   c0010dd4 <UnixFile::getFileDescriptor()>
c001b76d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b770:	83 c4 10             	add    esp,0x10
c001b773:	89 02                	mov    DWORD PTR [edx],eax
c001b775:	c1 f8 1f             	sar    eax,0x1f
c001b778:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b77b:	31 c0                	xor    eax,eax
c001b77d:	59                   	pop    ecx
c001b77e:	31 d2                	xor    edx,edx
c001b780:	5b                   	pop    ebx
c001b781:	5e                   	pop    esi
c001b782:	c3                   	ret    
c001b783:	59                   	pop    ecx
c001b784:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b789:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b78e:	5b                   	pop    ebx
c001b78f:	5e                   	pop    esi
c001b790:	c3                   	ret    

c001b791 <sysCallCloseDir(regs*)>:
c001b791:	53                   	push   ebx
c001b792:	83 ec 08             	sub    esp,0x8
c001b795:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b799:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b79c:	8d 50 fd             	lea    edx,[eax-0x3]
c001b79f:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b7a5:	77 2f                	ja     c001b7d6 <sysCallCloseDir(regs*)+0x45>
c001b7a7:	83 ec 0c             	sub    esp,0xc
c001b7aa:	50                   	push   eax
c001b7ab:	e8 19 59 ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b7b0:	89 c3                	mov    ebx,eax
c001b7b2:	89 04 24             	mov    DWORD PTR [esp],eax
c001b7b5:	e8 ae 7a ff ff       	call   c0013268 <Directory::close()>
c001b7ba:	83 c4 10             	add    esp,0x10
c001b7bd:	85 db                	test   ebx,ebx
c001b7bf:	74 0c                	je     c001b7cd <sysCallCloseDir(regs*)+0x3c>
c001b7c1:	83 ec 0c             	sub    esp,0xc
c001b7c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b7c6:	53                   	push   ebx
c001b7c7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b7ca:	83 c4 10             	add    esp,0x10
c001b7cd:	31 c0                	xor    eax,eax
c001b7cf:	31 d2                	xor    edx,edx
c001b7d1:	83 c4 08             	add    esp,0x8
c001b7d4:	5b                   	pop    ebx
c001b7d5:	c3                   	ret    
c001b7d6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b7db:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7e0:	83 c4 08             	add    esp,0x8
c001b7e3:	5b                   	pop    ebx
c001b7e4:	c3                   	ret    

c001b7e5 <sysCallMakeDir(regs*)>:
c001b7e5:	56                   	push   esi
c001b7e6:	53                   	push   ebx
c001b7e7:	83 ec 10             	sub    esp,0x10
c001b7ea:	68 14 01 00 00       	push   0x114
c001b7ef:	e8 a5 3d ff ff       	call   c000f599 <malloc>
c001b7f4:	83 c4 0c             	add    esp,0xc
c001b7f7:	89 c3                	mov    ebx,eax
c001b7f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7fe:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b801:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b805:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b808:	53                   	push   ebx
c001b809:	e8 9a 79 ff ff       	call   c00131a8 <Directory::Directory(char const*, Process*)>
c001b80e:	83 c4 10             	add    esp,0x10
c001b811:	85 db                	test   ebx,ebx
c001b813:	74 32                	je     c001b847 <sysCallMakeDir(regs*)+0x62>
c001b815:	83 ec 0c             	sub    esp,0xc
c001b818:	53                   	push   ebx
c001b819:	e8 ce 7b ff ff       	call   c00133ec <Directory::create()>
c001b81e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b821:	89 c6                	mov    esi,eax
c001b823:	e8 40 7a ff ff       	call   c0013268 <Directory::close()>
c001b828:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b82a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b82d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b830:	83 c4 10             	add    esp,0x10
c001b833:	31 c0                	xor    eax,eax
c001b835:	59                   	pop    ecx
c001b836:	85 f6                	test   esi,esi
c001b838:	5b                   	pop    ebx
c001b839:	0f 95 c0             	setne  al
c001b83c:	5e                   	pop    esi
c001b83d:	31 d2                	xor    edx,edx
c001b83f:	f7 d8                	neg    eax
c001b841:	83 d2 00             	adc    edx,0x0
c001b844:	f7 da                	neg    edx
c001b846:	c3                   	ret    
c001b847:	59                   	pop    ecx
c001b848:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b84d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b852:	5b                   	pop    ebx
c001b853:	5e                   	pop    esi
c001b854:	c3                   	ret    

c001b855 <sysCallWait(regs*)>:
c001b855:	83 ec 10             	sub    esp,0x10
c001b858:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b85c:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b85f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b862:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b865:	e8 b4 24 00 00       	call   c001dd1e <waitTask(int, int*, int)>
c001b86a:	83 c4 1c             	add    esp,0x1c
c001b86d:	99                   	cdq    
c001b86e:	c3                   	ret    

c001b86f <sysCallNotImpl(regs*)>:
c001b86f:	83 ec 18             	sub    esp,0x18
c001b872:	68 e5 bc 02 c0       	push   0xc002bce5
c001b877:	e8 0d e7 ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c001b87c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b881:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b886:	83 c4 1c             	add    esp,0x1c
c001b889:	c3                   	ret    

c001b88a <sysPanic(regs*)>:
c001b88a:	83 ec 18             	sub    esp,0x18
c001b88d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b891:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b894:	e8 f0 e6 ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c001b899:	b8 01 00 00 00       	mov    eax,0x1
c001b89e:	31 d2                	xor    edx,edx
c001b8a0:	83 c4 1c             	add    esp,0x1c
c001b8a3:	c3                   	ret    

c001b8a4 <sysCallRmdir(regs*)>:
c001b8a4:	56                   	push   esi
c001b8a5:	53                   	push   ebx
c001b8a6:	83 ec 20             	sub    esp,0x20
c001b8a9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b8ad:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b8b0:	68 14 01 00 00       	push   0x114
c001b8b5:	e8 df 3c ff ff       	call   c000f599 <malloc>
c001b8ba:	83 c4 0c             	add    esp,0xc
c001b8bd:	89 c3                	mov    ebx,eax
c001b8bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8c4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b8c7:	56                   	push   esi
c001b8c8:	53                   	push   ebx
c001b8c9:	e8 2e 74 ff ff       	call   c0012cfc <File::File(char const*, Process*)>
c001b8ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b8d1:	e8 02 76 ff ff       	call   c0012ed8 <File::unlink()>
c001b8d6:	83 c4 10             	add    esp,0x10
c001b8d9:	85 db                	test   ebx,ebx
c001b8db:	74 14                	je     c001b8f1 <sysCallRmdir(regs*)+0x4d>
c001b8dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b8e1:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b8e3:	83 ec 0c             	sub    esp,0xc
c001b8e6:	53                   	push   ebx
c001b8e7:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b8ea:	83 c4 10             	add    esp,0x10
c001b8ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b8f1:	85 c0                	test   eax,eax
c001b8f3:	0f 95 c0             	setne  al
c001b8f6:	31 d2                	xor    edx,edx
c001b8f8:	0f b6 c0             	movzx  eax,al
c001b8fb:	f7 d8                	neg    eax
c001b8fd:	83 d2 00             	adc    edx,0x0
c001b900:	83 c4 14             	add    esp,0x14
c001b903:	f7 da                	neg    edx
c001b905:	5b                   	pop    ebx
c001b906:	5e                   	pop    esi
c001b907:	c3                   	ret    

c001b908 <sysCallUnlink(regs*)>:
c001b908:	56                   	push   esi
c001b909:	53                   	push   ebx
c001b90a:	83 ec 20             	sub    esp,0x20
c001b90d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b911:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b914:	68 14 01 00 00       	push   0x114
c001b919:	e8 7b 3c ff ff       	call   c000f599 <malloc>
c001b91e:	83 c4 0c             	add    esp,0xc
c001b921:	89 c3                	mov    ebx,eax
c001b923:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b928:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b92b:	56                   	push   esi
c001b92c:	53                   	push   ebx
c001b92d:	e8 ca 73 ff ff       	call   c0012cfc <File::File(char const*, Process*)>
c001b932:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b935:	e8 9e 75 ff ff       	call   c0012ed8 <File::unlink()>
c001b93a:	83 c4 10             	add    esp,0x10
c001b93d:	85 db                	test   ebx,ebx
c001b93f:	74 14                	je     c001b955 <sysCallUnlink(regs*)+0x4d>
c001b941:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b945:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b947:	83 ec 0c             	sub    esp,0xc
c001b94a:	53                   	push   ebx
c001b94b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b94e:	83 c4 10             	add    esp,0x10
c001b951:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b955:	85 c0                	test   eax,eax
c001b957:	0f 95 c0             	setne  al
c001b95a:	31 d2                	xor    edx,edx
c001b95c:	0f b6 c0             	movzx  eax,al
c001b95f:	f7 d8                	neg    eax
c001b961:	83 d2 00             	adc    edx,0x0
c001b964:	83 c4 14             	add    esp,0x14
c001b967:	f7 da                	neg    edx
c001b969:	5b                   	pop    ebx
c001b96a:	5e                   	pop    esi
c001b96b:	c3                   	ret    

c001b96c <sysCallGetArgv(regs*)>:
c001b96c:	83 ec 0c             	sub    esp,0xc
c001b96f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b973:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b976:	85 c0                	test   eax,eax
c001b978:	78 2b                	js     c001b9a5 <sysCallGetArgv(regs*)+0x39>
c001b97a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b980:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b983:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001b989:	7d 1a                	jge    c001b9a5 <sysCallGetArgv(regs*)+0x39>
c001b98b:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001b992:	85 c0                	test   eax,eax
c001b994:	74 17                	je     c001b9ad <sysCallGetArgv(regs*)+0x41>
c001b996:	83 ec 08             	sub    esp,0x8
c001b999:	50                   	push   eax
c001b99a:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001b99d:	e8 6a 4e fe ff       	call   c000080c <strcpy>
c001b9a2:	83 c4 10             	add    esp,0x10
c001b9a5:	31 c0                	xor    eax,eax
c001b9a7:	31 d2                	xor    edx,edx
c001b9a9:	83 c4 0c             	add    esp,0xc
c001b9ac:	c3                   	ret    
c001b9ad:	b8 01 00 00 00       	mov    eax,0x1
c001b9b2:	31 d2                	xor    edx,edx
c001b9b4:	83 c4 0c             	add    esp,0xc
c001b9b7:	c3                   	ret    

c001b9b8 <sysCallTTYName(regs*)>:
c001b9b8:	56                   	push   esi
c001b9b9:	53                   	push   ebx
c001b9ba:	53                   	push   ebx
c001b9bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b9bf:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001b9c2:	85 c0                	test   eax,eax
c001b9c4:	74 5f                	je     c001ba25 <sysCallTTYName(regs*)+0x6d>
c001b9c6:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b9c9:	83 f8 02             	cmp    eax,0x2
c001b9cc:	77 3e                	ja     c001ba0c <sysCallTTYName(regs*)+0x54>
c001b9ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9d3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b9d6:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001b9dc:	85 db                	test   ebx,ebx
c001b9de:	74 45                	je     c001ba25 <sysCallTTYName(regs*)+0x6d>
c001b9e0:	83 ec 0c             	sub    esp,0xc
c001b9e3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b9e5:	53                   	push   ebx
c001b9e6:	ff 10                	call   DWORD PTR [eax]
c001b9e8:	83 c4 10             	add    esp,0x10
c001b9eb:	84 c0                	test   al,al
c001b9ed:	74 41                	je     c001ba30 <sysCallTTYName(regs*)+0x78>
c001b9ef:	83 ec 08             	sub    esp,0x8
c001b9f2:	81 c3 82 00 00 00    	add    ebx,0x82
c001b9f8:	53                   	push   ebx
c001b9f9:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b9fc:	e8 0b 4e fe ff       	call   c000080c <strcpy>
c001ba01:	83 c4 10             	add    esp,0x10
c001ba04:	31 c0                	xor    eax,eax
c001ba06:	59                   	pop    ecx
c001ba07:	31 d2                	xor    edx,edx
c001ba09:	5b                   	pop    ebx
c001ba0a:	5e                   	pop    esi
c001ba0b:	c3                   	ret    
c001ba0c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001ba11:	74 bb                	je     c001b9ce <sysCallTTYName(regs*)+0x16>
c001ba13:	83 ec 0c             	sub    esp,0xc
c001ba16:	50                   	push   eax
c001ba17:	e8 ad 56 ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001ba1c:	83 c4 10             	add    esp,0x10
c001ba1f:	89 c3                	mov    ebx,eax
c001ba21:	85 db                	test   ebx,ebx
c001ba23:	75 bb                	jne    c001b9e0 <sysCallTTYName(regs*)+0x28>
c001ba25:	59                   	pop    ecx
c001ba26:	b8 01 00 00 00       	mov    eax,0x1
c001ba2b:	31 d2                	xor    edx,edx
c001ba2d:	5b                   	pop    ebx
c001ba2e:	5e                   	pop    esi
c001ba2f:	c3                   	ret    
c001ba30:	59                   	pop    ecx
c001ba31:	b8 02 00 00 00       	mov    eax,0x2
c001ba36:	31 d2                	xor    edx,edx
c001ba38:	5b                   	pop    ebx
c001ba39:	5e                   	pop    esi
c001ba3a:	c3                   	ret    

c001ba3b <sysCallUSleep(regs*)>:
c001ba3b:	83 ec 14             	sub    esp,0x14
c001ba3e:	b8 e8 03 00 00       	mov    eax,0x3e8
c001ba43:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ba47:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001ba4e:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001ba51:	01 ca                	add    edx,ecx
c001ba53:	52                   	push   edx
c001ba54:	50                   	push   eax
c001ba55:	e8 9b 23 00 00       	call   c001ddf5 <nanoSleep(unsigned long long)>
c001ba5a:	31 c0                	xor    eax,eax
c001ba5c:	31 d2                	xor    edx,edx
c001ba5e:	83 c4 1c             	add    esp,0x1c
c001ba61:	c3                   	ret    

c001ba62 <sysCallSpawn(regs*)>:
c001ba62:	56                   	push   esi
c001ba63:	53                   	push   ebx
c001ba64:	50                   	push   eax
c001ba65:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba69:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001ba6c:	85 c0                	test   eax,eax
c001ba6e:	75 08                	jne    c001ba78 <sysCallSpawn(regs*)+0x16>
c001ba70:	59                   	pop    ecx
c001ba71:	31 c0                	xor    eax,eax
c001ba73:	31 d2                	xor    edx,edx
c001ba75:	5b                   	pop    ebx
c001ba76:	5e                   	pop    esi
c001ba77:	c3                   	ret    
c001ba78:	83 ec 0c             	sub    esp,0xc
c001ba7b:	68 3f 07 00 00       	push   0x73f
c001ba80:	e8 14 3b ff ff       	call   c000f599 <malloc>
c001ba85:	83 c4 10             	add    esp,0x10
c001ba88:	89 c6                	mov    esi,eax
c001ba8a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001ba8d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba90:	85 c0                	test   eax,eax
c001ba92:	75 32                	jne    c001bac6 <sysCallSpawn(regs*)+0x64>
c001ba94:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba99:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba9c:	52                   	push   edx
c001ba9d:	50                   	push   eax
c001ba9e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001baa1:	56                   	push   esi
c001baa2:	e8 73 1a 00 00       	call   c001d51a <Process::Process(char const*, Process*, char**)>
c001baa7:	83 c4 10             	add    esp,0x10
c001baaa:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001bab1:	75 bd                	jne    c001ba70 <sysCallSpawn(regs*)+0xe>
c001bab3:	83 ec 0c             	sub    esp,0xc
c001bab6:	56                   	push   esi
c001bab7:	e8 40 1f 00 00       	call   c001d9fc <Process::createUserThread()>
c001babc:	8b 06                	mov    eax,DWORD PTR [esi]
c001babe:	83 c4 10             	add    esp,0x10
c001bac1:	99                   	cdq    
c001bac2:	59                   	pop    ecx
c001bac3:	5b                   	pop    ebx
c001bac4:	5e                   	pop    esi
c001bac5:	c3                   	ret    
c001bac6:	31 c0                	xor    eax,eax
c001bac8:	eb d2                	jmp    c001ba9c <sysCallSpawn(regs*)+0x3a>

c001baca <sysCallGetEnv(regs*)>:
c001baca:	57                   	push   edi
c001bacb:	56                   	push   esi
c001bacc:	53                   	push   ebx
c001bacd:	83 ec 1c             	sub    esp,0x1c
c001bad0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001bad4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bad9:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001badc:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001badf:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bae2:	e8 ee e3 ff ff       	call   c0019ed5 <Krnl::getProcessTotalEnvCount(Process*)>
c001bae7:	83 c4 10             	add    esp,0x10
c001baea:	39 c7                	cmp    edi,eax
c001baec:	7c 14                	jl     c001bb02 <sysCallGetEnv(regs*)+0x38>
c001baee:	85 f6                	test   esi,esi
c001baf0:	75 0b                	jne    c001bafd <sysCallGetEnv(regs*)+0x33>
c001baf2:	83 c4 10             	add    esp,0x10
c001baf5:	31 c0                	xor    eax,eax
c001baf7:	5b                   	pop    ebx
c001baf8:	31 d2                	xor    edx,edx
c001bafa:	5e                   	pop    esi
c001bafb:	5f                   	pop    edi
c001bafc:	c3                   	ret    
c001bafd:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001bb00:	eb f0                	jmp    c001baf2 <sysCallGetEnv(regs*)+0x28>
c001bb02:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bb06:	52                   	push   edx
c001bb07:	57                   	push   edi
c001bb08:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bb0e:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001bb11:	50                   	push   eax
c001bb12:	e8 de e3 ff ff       	call   c0019ef5 <Krnl::getProcessEnvPair(Process*, int)>
c001bb17:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001bb1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bb1e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001bb22:	83 c4 0c             	add    esp,0xc
c001bb25:	85 c9                	test   ecx,ecx
c001bb27:	75 23                	jne    c001bb4c <sysCallGetEnv(regs*)+0x82>
c001bb29:	83 ec 0c             	sub    esp,0xc
c001bb2c:	50                   	push   eax
c001bb2d:	e8 3a 4c fe ff       	call   c000076c <strlen>
c001bb32:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bb35:	89 c3                	mov    ebx,eax
c001bb37:	e8 30 4c fe ff       	call   c000076c <strlen>
c001bb3c:	83 c4 10             	add    esp,0x10
c001bb3f:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001bb43:	83 c4 10             	add    esp,0x10
c001bb46:	31 d2                	xor    edx,edx
c001bb48:	5b                   	pop    ebx
c001bb49:	5e                   	pop    esi
c001bb4a:	5f                   	pop    edi
c001bb4b:	c3                   	ret    
c001bb4c:	83 ec 08             	sub    esp,0x8
c001bb4f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001bb52:	50                   	push   eax
c001bb53:	56                   	push   esi
c001bb54:	e8 b3 4c fe ff       	call   c000080c <strcpy>
c001bb59:	58                   	pop    eax
c001bb5a:	5a                   	pop    edx
c001bb5b:	68 ff bc 02 c0       	push   0xc002bcff
c001bb60:	56                   	push   esi
c001bb61:	e8 e6 4d fe ff       	call   c000094c <strcat>
c001bb66:	59                   	pop    ecx
c001bb67:	5b                   	pop    ebx
c001bb68:	57                   	push   edi
c001bb69:	56                   	push   esi
c001bb6a:	e8 dd 4d fe ff       	call   c000094c <strcat>
c001bb6f:	83 c4 10             	add    esp,0x10
c001bb72:	e9 7b ff ff ff       	jmp    c001baf2 <sysCallGetEnv(regs*)+0x28>

c001bb77 <sysAppSettings(regs*)>:
c001bb77:	57                   	push   edi
c001bb78:	56                   	push   esi
c001bb79:	56                   	push   esi
c001bb7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb7e:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bb81:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001bb87:	25 e0 1f 00 00       	and    eax,0x1fe0
c001bb8c:	66 3d c0 09          	cmp    ax,0x9c0
c001bb90:	75 2e                	jne    c001bbc0 <sysAppSettings(regs*)+0x49>
c001bb92:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001bb98:	83 e0 1f             	and    eax,0x1f
c001bb9b:	3c 01                	cmp    al,0x1
c001bb9d:	74 2c                	je     c001bbcb <sysAppSettings(regs*)+0x54>
c001bb9f:	3c 07                	cmp    al,0x7
c001bba1:	0f 84 b3 00 00 00    	je     c001bc5a <sysAppSettings(regs*)+0xe3>
c001bba7:	84 c0                	test   al,al
c001bba9:	0f 84 d2 00 00 00    	je     c001bc81 <sysAppSettings(regs*)+0x10a>
c001bbaf:	3c 08                	cmp    al,0x8
c001bbb1:	74 63                	je     c001bc16 <sysAppSettings(regs*)+0x9f>
c001bbb3:	59                   	pop    ecx
c001bbb4:	0f b6 c0             	movzx  eax,al
c001bbb7:	5e                   	pop    esi
c001bbb8:	05 e8 03 00 00       	add    eax,0x3e8
c001bbbd:	5f                   	pop    edi
c001bbbe:	99                   	cdq    
c001bbbf:	c3                   	ret    
c001bbc0:	b8 01 00 00 00       	mov    eax,0x1
c001bbc5:	59                   	pop    ecx
c001bbc6:	31 d2                	xor    edx,edx
c001bbc8:	5e                   	pop    esi
c001bbc9:	5f                   	pop    edi
c001bbca:	c3                   	ret    
c001bbcb:	50                   	push   eax
c001bbcc:	68 00 01 00 00       	push   0x100
c001bbd1:	6a 00                	push   0x0
c001bbd3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbd8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bbdb:	83 c0 0c             	add    eax,0xc
c001bbde:	50                   	push   eax
c001bbdf:	e8 6c 4b fe ff       	call   c0000750 <memset>
c001bbe4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbe9:	b9 ff 00 00 00       	mov    ecx,0xff
c001bbee:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001bbf1:	83 c7 0c             	add    edi,0xc
c001bbf4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bbf6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbfb:	5a                   	pop    edx
c001bbfc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bbff:	59                   	pop    ecx
c001bc00:	8d 50 0c             	lea    edx,[eax+0xc]
c001bc03:	52                   	push   edx
c001bc04:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bc0a:	e8 e3 45 ff ff       	call   c00101f2 <VgaText::setTitle(char*)>
c001bc0f:	83 c4 10             	add    esp,0x10
c001bc12:	31 c0                	xor    eax,eax
c001bc14:	eb af                	jmp    c001bbc5 <sysAppSettings(regs*)+0x4e>
c001bc16:	83 ec 08             	sub    esp,0x8
c001bc19:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001bc1f:	83 e0 0f             	and    eax,0xf
c001bc22:	50                   	push   eax
c001bc23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc28:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bc2b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bc31:	e8 ac 45 ff ff       	call   c00101e2 <VgaText::setTitleColour(VgaColour)>
c001bc36:	5f                   	pop    edi
c001bc37:	58                   	pop    eax
c001bc38:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001bc3e:	c1 e8 04             	shr    eax,0x4
c001bc41:	83 e0 0f             	and    eax,0xf
c001bc44:	50                   	push   eax
c001bc45:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc4a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bc4d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bc53:	e8 7a 45 ff ff       	call   c00101d2 <VgaText::setTitleTextColour(VgaColour)>
c001bc58:	eb b5                	jmp    c001bc0f <sysAppSettings(regs*)+0x98>
c001bc5a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc5f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bc62:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001bc68:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001bc6e:	c0 e8 06             	shr    al,0x6
c001bc71:	83 e0 01             	and    eax,0x1
c001bc74:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001bc7a:	31 c0                	xor    eax,eax
c001bc7c:	e9 44 ff ff ff       	jmp    c001bbc5 <sysAppSettings(regs*)+0x4e>
c001bc81:	b8 02 00 00 00       	mov    eax,0x2
c001bc86:	e9 3a ff ff ff       	jmp    c001bbc5 <sysAppSettings(regs*)+0x4e>

c001bc8b <sysSetFatAttrib(regs*)>:
c001bc8b:	57                   	push   edi
c001bc8c:	56                   	push   esi
c001bc8d:	53                   	push   ebx
c001bc8e:	83 ec 1c             	sub    esp,0x1c
c001bc91:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001bc95:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001bc98:	68 14 01 00 00       	push   0x114
c001bc9d:	e8 f7 38 ff ff       	call   c000f599 <malloc>
c001bca2:	83 c4 0c             	add    esp,0xc
c001bca5:	89 c3                	mov    ebx,eax
c001bca7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bcac:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bcaf:	57                   	push   edi
c001bcb0:	53                   	push   ebx
c001bcb1:	e8 46 70 ff ff       	call   c0012cfc <File::File(char const*, Process*)>
c001bcb6:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001bcb9:	83 c4 0c             	add    esp,0xc
c001bcbc:	0f b6 d4             	movzx  edx,ah
c001bcbf:	0f b6 c0             	movzx  eax,al
c001bcc2:	52                   	push   edx
c001bcc3:	50                   	push   eax
c001bcc4:	53                   	push   ebx
c001bcc5:	e8 a8 72 ff ff       	call   c0012f72 <File::chfatattr(unsigned char, unsigned char)>
c001bcca:	83 c4 10             	add    esp,0x10
c001bccd:	85 db                	test   ebx,ebx
c001bccf:	74 14                	je     c001bce5 <sysSetFatAttrib(regs*)+0x5a>
c001bcd1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bcd5:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bcd7:	83 ec 0c             	sub    esp,0xc
c001bcda:	53                   	push   ebx
c001bcdb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bcde:	83 c4 10             	add    esp,0x10
c001bce1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bce5:	85 c0                	test   eax,eax
c001bce7:	0f 95 c0             	setne  al
c001bcea:	31 d2                	xor    edx,edx
c001bcec:	0f b6 c0             	movzx  eax,al
c001bcef:	f7 d8                	neg    eax
c001bcf1:	83 d2 00             	adc    edx,0x0
c001bcf4:	83 c4 10             	add    esp,0x10
c001bcf7:	f7 da                	neg    edx
c001bcf9:	5b                   	pop    ebx
c001bcfa:	5e                   	pop    esi
c001bcfb:	5f                   	pop    edi
c001bcfc:	c3                   	ret    

c001bcfd <sysPipe(regs*)>:
c001bcfd:	57                   	push   edi
c001bcfe:	56                   	push   esi
c001bcff:	53                   	push   ebx
c001bd00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd04:	83 ec 0c             	sub    esp,0xc
c001bd07:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001bd0a:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001bd0d:	6a 20                	push   0x20
c001bd0f:	e8 85 38 ff ff       	call   c000f599 <malloc>
c001bd14:	89 c3                	mov    ebx,eax
c001bd16:	58                   	pop    eax
c001bd17:	5a                   	pop    edx
c001bd18:	68 00 50 00 00       	push   0x5000
c001bd1d:	53                   	push   ebx
c001bd1e:	e8 47 42 ff ff       	call   c000ff6a <Pipe::Pipe(int)>
c001bd23:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd26:	e8 a9 50 ff ff       	call   c0010dd4 <UnixFile::getFileDescriptor()>
c001bd2b:	89 07                	mov    DWORD PTR [edi],eax
c001bd2d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd30:	e8 9f 50 ff ff       	call   c0010dd4 <UnixFile::getFileDescriptor()>
c001bd35:	83 c4 10             	add    esp,0x10
c001bd38:	89 06                	mov    DWORD PTR [esi],eax
c001bd3a:	31 d2                	xor    edx,edx
c001bd3c:	5b                   	pop    ebx
c001bd3d:	31 c0                	xor    eax,eax
c001bd3f:	5e                   	pop    esi
c001bd40:	5f                   	pop    edi
c001bd41:	c3                   	ret    

c001bd42 <sysGetUnixTime(regs*)>:
c001bd42:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c001bd47:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bd4d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bd51:	e9 98 79 ff ff       	jmp    c00136ee <Clock::timeInSecondsLocal()>

c001bd56 <string_ends_with(char const*, char const*)>:
c001bd56:	57                   	push   edi
c001bd57:	56                   	push   esi
c001bd58:	53                   	push   ebx
c001bd59:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bd5d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001bd61:	83 ec 0c             	sub    esp,0xc
c001bd64:	53                   	push   ebx
c001bd65:	e8 02 4a fe ff       	call   c000076c <strlen>
c001bd6a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bd6d:	89 c6                	mov    esi,eax
c001bd6f:	e8 f8 49 fe ff       	call   c000076c <strlen>
c001bd74:	83 c4 10             	add    esp,0x10
c001bd77:	39 c6                	cmp    esi,eax
c001bd79:	7d 06                	jge    c001bd81 <string_ends_with(char const*, char const*)+0x2b>
c001bd7b:	5b                   	pop    ebx
c001bd7c:	31 c0                	xor    eax,eax
c001bd7e:	5e                   	pop    esi
c001bd7f:	5f                   	pop    edi
c001bd80:	c3                   	ret    
c001bd81:	83 ec 08             	sub    esp,0x8
c001bd84:	29 c6                	sub    esi,eax
c001bd86:	57                   	push   edi
c001bd87:	01 f3                	add    ebx,esi
c001bd89:	53                   	push   ebx
c001bd8a:	e8 09 4b fe ff       	call   c0000898 <strcmp>
c001bd8f:	83 c4 10             	add    esp,0x10
c001bd92:	85 c0                	test   eax,eax
c001bd94:	5b                   	pop    ebx
c001bd95:	0f 94 c0             	sete   al
c001bd98:	5e                   	pop    esi
c001bd99:	0f b6 c0             	movzx  eax,al
c001bd9c:	5f                   	pop    edi
c001bd9d:	c3                   	ret    

c001bd9e <sysCallOpen(regs*)>:
c001bd9e:	56                   	push   esi
c001bd9f:	53                   	push   ebx
c001bda0:	81 ec 04 01 00 00    	sub    esp,0x104
c001bda6:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001bdad:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001bdb0:	85 c9                	test   ecx,ecx
c001bdb2:	0f 84 ad 01 00 00    	je     c001bf65 <sysCallOpen(regs*)+0x1c7>
c001bdb8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001bdbb:	85 c0                	test   eax,eax
c001bdbd:	0f 84 a2 01 00 00    	je     c001bf65 <sysCallOpen(regs*)+0x1c7>
c001bdc3:	52                   	push   edx
c001bdc4:	68 01 bd 02 c0       	push   0xc002bd01
c001bdc9:	50                   	push   eax
c001bdca:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001bdce:	56                   	push   esi
c001bdcf:	e8 7e 6d ff ff       	call   c0012b52 <Fs::standardiseFiles(char*, char const*, char const*)>
c001bdd4:	89 34 24             	mov    DWORD PTR [esp],esi
c001bdd7:	e8 90 49 fe ff       	call   c000076c <strlen>
c001bddc:	83 c4 10             	add    esp,0x10
c001bddf:	48                   	dec    eax
c001bde0:	74 1d                	je     c001bdff <sysCallOpen(regs*)+0x61>
c001bde2:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001bde5:	eb 0f                	jmp    c001bdf6 <sysCallOpen(regs*)+0x58>
c001bde7:	80 fa 3a             	cmp    dl,0x3a
c001bdea:	74 0f                	je     c001bdfb <sysCallOpen(regs*)+0x5d>
c001bdec:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001bdf0:	48                   	dec    eax
c001bdf1:	74 0c                	je     c001bdff <sysCallOpen(regs*)+0x61>
c001bdf3:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001bdf6:	80 fa 2e             	cmp    dl,0x2e
c001bdf9:	75 ec                	jne    c001bde7 <sysCallOpen(regs*)+0x49>
c001bdfb:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001bdff:	83 ec 08             	sub    esp,0x8
c001be02:	68 05 bd 02 c0       	push   0xc002bd05
c001be07:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001be0a:	e8 47 ff ff ff       	call   c001bd56 <string_ends_with(char const*, char const*)>
c001be0f:	83 c4 10             	add    esp,0x10
c001be12:	85 c0                	test   eax,eax
c001be14:	74 1d                	je     c001be33 <sysCallOpen(regs*)+0x95>
c001be16:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001be19:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001be1f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001be26:	81 c4 04 01 00 00    	add    esp,0x104
c001be2c:	31 c0                	xor    eax,eax
c001be2e:	31 d2                	xor    edx,edx
c001be30:	5b                   	pop    ebx
c001be31:	5e                   	pop    esi
c001be32:	c3                   	ret    
c001be33:	83 ec 08             	sub    esp,0x8
c001be36:	68 0a bd 02 c0       	push   0xc002bd0a
c001be3b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001be3e:	e8 13 ff ff ff       	call   c001bd56 <string_ends_with(char const*, char const*)>
c001be43:	83 c4 10             	add    esp,0x10
c001be46:	85 c0                	test   eax,eax
c001be48:	75 cc                	jne    c001be16 <sysCallOpen(regs*)+0x78>
c001be4a:	83 ec 08             	sub    esp,0x8
c001be4d:	68 06 bd 02 c0       	push   0xc002bd06
c001be52:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001be55:	e8 3e 4a fe ff       	call   c0000898 <strcmp>
c001be5a:	83 c4 10             	add    esp,0x10
c001be5d:	85 c0                	test   eax,eax
c001be5f:	74 b5                	je     c001be16 <sysCallOpen(regs*)+0x78>
c001be61:	83 ec 08             	sub    esp,0x8
c001be64:	68 05 bd 02 c0       	push   0xc002bd05
c001be69:	56                   	push   esi
c001be6a:	e8 e7 fe ff ff       	call   c001bd56 <string_ends_with(char const*, char const*)>
c001be6f:	83 c4 10             	add    esp,0x10
c001be72:	85 c0                	test   eax,eax
c001be74:	75 a0                	jne    c001be16 <sysCallOpen(regs*)+0x78>
c001be76:	83 ec 08             	sub    esp,0x8
c001be79:	68 0f bd 02 c0       	push   0xc002bd0f
c001be7e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001be81:	e8 d0 fe ff ff       	call   c001bd56 <string_ends_with(char const*, char const*)>
c001be86:	83 c4 10             	add    esp,0x10
c001be89:	85 c0                	test   eax,eax
c001be8b:	0f 85 e7 00 00 00    	jne    c001bf78 <sysCallOpen(regs*)+0x1da>
c001be91:	83 ec 08             	sub    esp,0x8
c001be94:	68 14 bd 02 c0       	push   0xc002bd14
c001be99:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001be9c:	e8 b5 fe ff ff       	call   c001bd56 <string_ends_with(char const*, char const*)>
c001bea1:	83 c4 10             	add    esp,0x10
c001bea4:	85 c0                	test   eax,eax
c001bea6:	0f 85 cc 00 00 00    	jne    c001bf78 <sysCallOpen(regs*)+0x1da>
c001beac:	83 ec 08             	sub    esp,0x8
c001beaf:	68 10 bd 02 c0       	push   0xc002bd10
c001beb4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001beb7:	e8 dc 49 fe ff       	call   c0000898 <strcmp>
c001bebc:	83 c4 10             	add    esp,0x10
c001bebf:	85 c0                	test   eax,eax
c001bec1:	0f 84 b1 00 00 00    	je     c001bf78 <sysCallOpen(regs*)+0x1da>
c001bec7:	83 ec 08             	sub    esp,0x8
c001beca:	68 0f bd 02 c0       	push   0xc002bd0f
c001becf:	56                   	push   esi
c001bed0:	e8 81 fe ff ff       	call   c001bd56 <string_ends_with(char const*, char const*)>
c001bed5:	83 c4 10             	add    esp,0x10
c001bed8:	85 c0                	test   eax,eax
c001beda:	0f 85 98 00 00 00    	jne    c001bf78 <sysCallOpen(regs*)+0x1da>
c001bee0:	83 ec 0c             	sub    esp,0xc
c001bee3:	68 14 01 00 00       	push   0x114
c001bee8:	e8 ac 36 ff ff       	call   c000f599 <malloc>
c001beed:	83 c4 0c             	add    esp,0xc
c001bef0:	89 c6                	mov    esi,eax
c001bef2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bef7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001befa:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001befd:	56                   	push   esi
c001befe:	e8 f9 6d ff ff       	call   c0012cfc <File::File(char const*, Process*)>
c001bf03:	83 c4 10             	add    esp,0x10
c001bf06:	85 f6                	test   esi,esi
c001bf08:	74 5b                	je     c001bf65 <sysCallOpen(regs*)+0x1c7>
c001bf0a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001bf0d:	0f b6 c2             	movzx  eax,dl
c001bf10:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001bf13:	89 d0                	mov    eax,edx
c001bf15:	83 e0 01             	and    eax,0x1
c001bf18:	f6 c2 02             	test   dl,0x2
c001bf1b:	74 03                	je     c001bf20 <sysCallOpen(regs*)+0x182>
c001bf1d:	83 c8 02             	or     eax,0x2
c001bf20:	f6 c2 04             	test   dl,0x4
c001bf23:	74 03                	je     c001bf28 <sysCallOpen(regs*)+0x18a>
c001bf25:	83 c8 04             	or     eax,0x4
c001bf28:	f6 c2 08             	test   dl,0x8
c001bf2b:	74 03                	je     c001bf30 <sysCallOpen(regs*)+0x192>
c001bf2d:	83 c8 0a             	or     eax,0xa
c001bf30:	83 e2 10             	and    edx,0x10
c001bf33:	74 03                	je     c001bf38 <sysCallOpen(regs*)+0x19a>
c001bf35:	83 c8 12             	or     eax,0x12
c001bf38:	83 ec 08             	sub    esp,0x8
c001bf3b:	50                   	push   eax
c001bf3c:	56                   	push   esi
c001bf3d:	e8 1e 6e ff ff       	call   c0012d60 <File::open(FileOpenMode)>
c001bf42:	83 c4 10             	add    esp,0x10
c001bf45:	85 c0                	test   eax,eax
c001bf47:	75 1c                	jne    c001bf65 <sysCallOpen(regs*)+0x1c7>
c001bf49:	83 ec 0c             	sub    esp,0xc
c001bf4c:	56                   	push   esi
c001bf4d:	e8 82 4e ff ff       	call   c0010dd4 <UnixFile::getFileDescriptor()>
c001bf52:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bf55:	83 c4 10             	add    esp,0x10
c001bf58:	89 02                	mov    DWORD PTR [edx],eax
c001bf5a:	c1 f8 1f             	sar    eax,0x1f
c001bf5d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bf60:	e9 c1 fe ff ff       	jmp    c001be26 <sysCallOpen(regs*)+0x88>
c001bf65:	81 c4 04 01 00 00    	add    esp,0x104
c001bf6b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bf70:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bf75:	5b                   	pop    ebx
c001bf76:	5e                   	pop    esi
c001bf77:	c3                   	ret    
c001bf78:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bf7b:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001bf81:	e9 99 fe ff ff       	jmp    c001be1f <sysCallOpen(regs*)+0x81>

c001bf86 <Sys::loadSyscalls()>:
c001bf86:	c7 05 00 e9 02 c0 f3 b1 01 c0 	mov    DWORD PTR ds:0xc002e900,0xc001b1f3
c001bf90:	c7 05 04 e9 02 c0 e8 ad 01 c0 	mov    DWORD PTR ds:0xc002e904,0xc001ade8
c001bf9a:	c7 05 08 e9 02 c0 d9 af 01 c0 	mov    DWORD PTR ds:0xc002e908,0xc001afd9
c001bfa4:	c7 05 0c e9 02 c0 29 b1 01 c0 	mov    DWORD PTR ds:0xc002e90c,0xc001b129
c001bfae:	c7 05 10 e9 02 c0 71 af 01 c0 	mov    DWORD PTR ds:0xc002e910,0xc001af71
c001bfb8:	c7 05 14 e9 02 c0 1f ae 01 c0 	mov    DWORD PTR ds:0xc002e914,0xc001ae1f
c001bfc2:	c7 05 18 e9 02 c0 00 ae 01 c0 	mov    DWORD PTR ds:0xc002e918,0xc001ae00
c001bfcc:	c7 05 1c e9 02 c0 2e b0 01 c0 	mov    DWORD PTR ds:0xc002e91c,0xc001b02e
c001bfd6:	c7 05 24 e9 02 c0 bc b6 01 c0 	mov    DWORD PTR ds:0xc002e924,0xc001b6bc
c001bfe0:	c7 05 20 e9 02 c0 9e bd 01 c0 	mov    DWORD PTR ds:0xc002e920,0xc001bd9e
c001bfea:	c7 05 28 e9 02 c0 1c b7 01 c0 	mov    DWORD PTR ds:0xc002e928,0xc001b71c
c001bff4:	c7 05 2c e9 02 c0 ff b3 01 c0 	mov    DWORD PTR ds:0xc002e92c,0xc001b3ff
c001bffe:	c7 05 30 e9 02 c0 39 b2 01 c0 	mov    DWORD PTR ds:0xc002e930,0xc001b239
c001c008:	c7 05 34 e9 02 c0 3e b2 01 c0 	mov    DWORD PTR ds:0xc002e934,0xc001b23e
c001c012:	c7 05 38 e9 02 c0 e5 b7 01 c0 	mov    DWORD PTR ds:0xc002e938,0xc001b7e5
c001c01c:	c7 05 3c e9 02 c0 91 b7 01 c0 	mov    DWORD PTR ds:0xc002e93c,0xc001b791
c001c026:	c7 05 40 e9 02 c0 d8 b4 01 c0 	mov    DWORD PTR ds:0xc002e940,0xc001b4d8
c001c030:	c7 05 44 e9 02 c0 2f b5 01 c0 	mov    DWORD PTR ds:0xc002e944,0xc001b52f
c001c03a:	c7 05 48 e9 02 c0 9b b5 01 c0 	mov    DWORD PTR ds:0xc002e948,0xc001b59b
c001c044:	c7 05 4c e9 02 c0 43 b2 01 c0 	mov    DWORD PTR ds:0xc002e94c,0xc001b243
c001c04e:	c7 05 50 e9 02 c0 55 b8 01 c0 	mov    DWORD PTR ds:0xc002e950,0xc001b855
c001c058:	c7 05 54 e9 02 c0 6f b8 01 c0 	mov    DWORD PTR ds:0xc002e954,0xc001b86f
c001c062:	c7 05 58 e9 02 c0 6f b8 01 c0 	mov    DWORD PTR ds:0xc002e958,0xc001b86f
c001c06c:	c7 05 5c e9 02 c0 a4 b8 01 c0 	mov    DWORD PTR ds:0xc002e95c,0xc001b8a4
c001c076:	c7 05 60 e9 02 c0 08 b9 01 c0 	mov    DWORD PTR ds:0xc002e960,0xc001b908
c001c080:	c7 05 64 e9 02 c0 4d b2 01 c0 	mov    DWORD PTR ds:0xc002e964,0xc001b24d
c001c08a:	c7 05 68 e9 02 c0 6c b9 01 c0 	mov    DWORD PTR ds:0xc002e968,0xc001b96c
c001c094:	c7 05 6c e9 02 c0 bc b3 01 c0 	mov    DWORD PTR ds:0xc002e96c,0xc001b3bc
c001c09e:	c7 05 70 e9 02 c0 b8 b9 01 c0 	mov    DWORD PTR ds:0xc002e970,0xc001b9b8
c001c0a8:	c7 05 74 e9 02 c0 7e b4 01 c0 	mov    DWORD PTR ds:0xc002e974,0xc001b47e
c001c0b2:	c7 05 78 e9 02 c0 3b ba 01 c0 	mov    DWORD PTR ds:0xc002e978,0xc001ba3b
c001c0bc:	c7 05 7c e9 02 c0 0d b6 01 c0 	mov    DWORD PTR ds:0xc002e97c,0xc001b60d
c001c0c6:	c7 05 80 e9 02 c0 62 ba 01 c0 	mov    DWORD PTR ds:0xc002e980,0xc001ba62
c001c0d0:	c7 05 84 e9 02 c0 ca ba 01 c0 	mov    DWORD PTR ds:0xc002e984,0xc001baca
c001c0da:	c7 05 88 e9 02 c0 77 bb 01 c0 	mov    DWORD PTR ds:0xc002e988,0xc001bb77
c001c0e4:	c7 05 8c e9 02 c0 5d b2 01 c0 	mov    DWORD PTR ds:0xc002e98c,0xc001b25d
c001c0ee:	c7 05 90 e9 02 c0 c7 b2 01 c0 	mov    DWORD PTR ds:0xc002e990,0xc001b2c7
c001c0f8:	c7 05 94 e9 02 c0 0d b3 01 c0 	mov    DWORD PTR ds:0xc002e994,0xc001b30d
c001c102:	c7 05 98 e9 02 c0 8b bc 01 c0 	mov    DWORD PTR ds:0xc002e998,0xc001bc8b
c001c10c:	c7 05 9c e9 02 c0 8a b8 01 c0 	mov    DWORD PTR ds:0xc002e99c,0xc001b88a
c001c116:	c7 05 a0 e9 02 c0 5e b3 01 c0 	mov    DWORD PTR ds:0xc002e9a0,0xc001b35e
c001c120:	c7 05 a4 e9 02 c0 fd bc 01 c0 	mov    DWORD PTR ds:0xc002e9a4,0xc001bcfd
c001c12a:	c7 05 a8 e9 02 c0 42 bd 01 c0 	mov    DWORD PTR ds:0xc002e9a8,0xc001bd42
c001c134:	c7 05 ac e9 02 c0 c9 ae 01 c0 	mov    DWORD PTR ds:0xc002e9ac,0xc001aec9
c001c13e:	c7 05 b0 e9 02 c0 4a b0 01 c0 	mov    DWORD PTR ds:0xc002e9b0,0xc001b04a
c001c148:	c7 05 b4 e9 02 c0 df b0 01 c0 	mov    DWORD PTR ds:0xc002e9b4,0xc001b0df
c001c152:	c7 05 b8 e9 02 c0 b2 ad 01 c0 	mov    DWORD PTR ds:0xc002e9b8,0xc001adb2
c001c15c:	c7 05 bc e9 02 c0 91 b1 01 c0 	mov    DWORD PTR ds:0xc002e9bc,0xc001b191
c001c166:	c7 05 c0 e9 02 c0 2b ae 01 c0 	mov    DWORD PTR ds:0xc002e9c0,0xc001ae2b
c001c170:	c7 05 c4 e9 02 c0 45 ae 01 c0 	mov    DWORD PTR ds:0xc002e9c4,0xc001ae45
c001c17a:	c3                   	ret    

c001c17b <Sys::systemCall(regs*, void*)>:
c001c17b:	53                   	push   ebx
c001c17c:	83 ec 08             	sub    esp,0x8
c001c17f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c183:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c186:	83 f8 7f             	cmp    eax,0x7f
c001c189:	77 16                	ja     c001c1a1 <Sys::systemCall(regs*, void*)+0x26>
c001c18b:	8b 14 85 00 e9 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1700]
c001c192:	85 d2                	test   edx,edx
c001c194:	74 0b                	je     c001c1a1 <Sys::systemCall(regs*, void*)+0x26>
c001c196:	83 ec 0c             	sub    esp,0xc
c001c199:	53                   	push   ebx
c001c19a:	ff d2                	call   edx
c001c19c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c19f:	eb 0d                	jmp    c001c1ae <Sys::systemCall(regs*, void*)+0x33>
c001c1a1:	52                   	push   edx
c001c1a2:	52                   	push   edx
c001c1a3:	50                   	push   eax
c001c1a4:	68 19 bd 02 c0       	push   0xc002bd19
c001c1a9:	e8 ef 65 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001c1ae:	83 c4 10             	add    esp,0x10
c001c1b1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c1b6:	31 d2                	xor    edx,edx
c001c1b8:	83 c4 08             	add    esp,0x8
c001c1bb:	5b                   	pop    ebx
c001c1bc:	c3                   	ret    

c001c1bd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c1bd:	55                   	push   ebp
c001c1be:	57                   	push   edi
c001c1bf:	56                   	push   esi
c001c1c0:	53                   	push   ebx
c001c1c1:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c1c7:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c1ce:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c1d5:	85 c0                	test   eax,eax
c001c1d7:	0f 95 c1             	setne  cl
c001c1da:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c1e2:	0f 94 c2             	sete   dl
c001c1e5:	84 d1                	test   cl,dl
c001c1e7:	74 23                	je     c001c20c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c1e9:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c1ef:	74 1b                	je     c001c20c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c1f1:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c1f7:	89 da                	mov    edx,ebx
c001c1f9:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c1ff:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c205:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c20c:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001c213:	05 ff 0f 00 00       	add    eax,0xfff
c001c218:	83 ec 0c             	sub    esp,0xc
c001c21b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c21f:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001c225:	c1 e8 0c             	shr    eax,0xc
c001c228:	89 fe                	mov    esi,edi
c001c22a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c22e:	c1 ee 0c             	shr    esi,0xc
c001c231:	6a 01                	push   0x1
c001c233:	e8 e7 4f ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c001c238:	89 c5                	mov    ebp,eax
c001c23a:	58                   	pop    eax
c001c23b:	5a                   	pop    edx
c001c23c:	56                   	push   esi
c001c23d:	68 2d bd 02 c0       	push   0xc002bd2d
c001c242:	e8 56 65 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001c247:	59                   	pop    ecx
c001c248:	58                   	pop    eax
c001c249:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c24d:	68 3f bd 02 c0       	push   0xc002bd3f
c001c252:	e8 46 65 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001c257:	83 c4 10             	add    esp,0x10
c001c25a:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001c260:	0f 86 31 01 00 00    	jbe    c001c397 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001c266:	c1 e6 0c             	shl    esi,0xc
c001c269:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c26c:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001c26f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c273:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001c27a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c27d:	01 df                	add    edi,ebx
c001c27f:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001c282:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001c286:	0f 84 08 01 00 00    	je     c001c394 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001c28c:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001c292:	76 05                	jbe    c001c299 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001c294:	bf 00 10 00 00       	mov    edi,0x1000
c001c299:	83 ec 0c             	sub    esp,0xc
c001c29c:	31 d2                	xor    edx,edx
c001c29e:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c2a5:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c2a7:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c2ab:	50                   	push   eax
c001c2ac:	8d 74 24 30          	lea    esi,[esp+0x30]
c001c2b0:	56                   	push   esi
c001c2b1:	52                   	push   edx
c001c2b2:	57                   	push   edi
c001c2b3:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c2ba:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c2bd:	83 c4 20             	add    esp,0x20
c001c2c0:	85 c0                	test   eax,eax
c001c2c2:	74 0a                	je     c001c2ce <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001c2c4:	53                   	push   ebx
c001c2c5:	53                   	push   ebx
c001c2c6:	50                   	push   eax
c001c2c7:	68 51 bd 02 c0       	push   0xc002bd51
c001c2cc:	eb 0f                	jmp    c001c2dd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001c2ce:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001c2d2:	74 20                	je     c001c2f4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001c2d4:	51                   	push   ecx
c001c2d5:	51                   	push   ecx
c001c2d6:	6a 00                	push   0x0
c001c2d8:	68 7c bd 02 c0       	push   0xc002bd7c
c001c2dd:	e8 bb 64 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001c2e2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c2e5:	e8 11 54 ff ff       	call   c00116fb <Virt::freeKernelVirtualPages(unsigned long)>
c001c2ea:	83 c4 10             	add    esp,0x10
c001c2ed:	31 c0                	xor    eax,eax
c001c2ef:	e9 68 01 00 00       	jmp    c001c45c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001c2f4:	fa                   	cli    
c001c2f5:	ff 05 c8 f2 02 c0    	inc    DWORD PTR ds:0xc002f2c8
c001c2fb:	e8 95 36 ff ff       	call   c000f995 <Phys::allocatePage()>
c001c300:	6a 07                	push   0x7
c001c302:	89 c7                	mov    edi,eax
c001c304:	55                   	push   ebp
c001c305:	50                   	push   eax
c001c306:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c30b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c30e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c314:	e8 59 57 ff ff       	call   c0011a72 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c319:	83 c4 0c             	add    esp,0xc
c001c31c:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c323:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c329:	6a 00                	push   0x0
c001c32b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c330:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c333:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c339:	e8 8e 55 ff ff       	call   c00118cc <VAS::mapOtherVASIn(bool, VAS*)>
c001c33e:	58                   	pop    eax
c001c33f:	5a                   	pop    edx
c001c340:	68 07 0c 00 00       	push   0xc07
c001c345:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c349:	57                   	push   edi
c001c34a:	89 ef                	mov    edi,ebp
c001c34c:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c353:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c359:	6a 00                	push   0x0
c001c35b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c360:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c363:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c369:	e8 c0 5a ff ff       	call   c0011e2e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c36e:	b9 00 10 00 00       	mov    ecx,0x1000
c001c373:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c375:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001c37a:	83 c4 20             	add    esp,0x20
c001c37d:	48                   	dec    eax
c001c37e:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c001c383:	85 c0                	test   eax,eax
c001c385:	75 01                	jne    c001c388 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c387:	fb                   	sti    
c001c388:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001c38f:	e9 df fe ff ff       	jmp    c001c273 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001c394:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001c397:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c39f:	0f 86 a9 00 00 00    	jbe    c001c44e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c3a5:	fa                   	cli    
c001c3a6:	ff 05 c8 f2 02 c0    	inc    DWORD PTR ds:0xc002f2c8
c001c3ac:	51                   	push   ecx
c001c3ad:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c3b4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c3ba:	6a 00                	push   0x0
c001c3bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c3c1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c3c4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c3ca:	e8 fd 54 ff ff       	call   c00118cc <VAS::mapOtherVASIn(bool, VAS*)>
c001c3cf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c3d3:	c1 e6 0c             	shl    esi,0xc
c001c3d6:	01 de                	add    esi,ebx
c001c3d8:	83 c4 10             	add    esp,0x10
c001c3db:	39 de                	cmp    esi,ebx
c001c3dd:	74 61                	je     c001c440 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001c3df:	e8 b1 35 ff ff       	call   c000f995 <Phys::allocatePage()>
c001c3e4:	6a 07                	push   0x7
c001c3e6:	89 c7                	mov    edi,eax
c001c3e8:	55                   	push   ebp
c001c3e9:	50                   	push   eax
c001c3ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c3ef:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c3f2:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c3f8:	e8 75 56 ff ff       	call   c0011a72 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c3fd:	58                   	pop    eax
c001c3fe:	5a                   	pop    edx
c001c3ff:	68 07 0c 00 00       	push   0xc07
c001c404:	53                   	push   ebx
c001c405:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c40b:	57                   	push   edi
c001c40c:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c413:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c419:	6a 00                	push   0x0
c001c41b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c420:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c423:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c429:	e8 00 5a ff ff       	call   c0011e2e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c42e:	83 c4 1c             	add    esp,0x1c
c001c431:	68 00 10 00 00       	push   0x1000
c001c436:	6a 00                	push   0x0
c001c438:	55                   	push   ebp
c001c439:	e8 12 43 fe ff       	call   c0000750 <memset>
c001c43e:	eb 98                	jmp    c001c3d8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001c440:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001c445:	48                   	dec    eax
c001c446:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c001c44b:	75 01                	jne    c001c44e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c44d:	fb                   	sti    
c001c44e:	83 ec 0c             	sub    esp,0xc
c001c451:	55                   	push   ebp
c001c452:	e8 a4 52 ff ff       	call   c00116fb <Virt::freeKernelVirtualPages(unsigned long)>
c001c457:	83 c4 10             	add    esp,0x10
c001c45a:	b0 01                	mov    al,0x1
c001c45c:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c462:	5b                   	pop    ebx
c001c463:	5e                   	pop    esi
c001c464:	5f                   	pop    edi
c001c465:	5d                   	pop    ebp
c001c466:	c3                   	ret    

c001c467 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c467:	55                   	push   ebp
c001c468:	57                   	push   edi
c001c469:	56                   	push   esi
c001c46a:	53                   	push   ebx
c001c46b:	83 ec 48             	sub    esp,0x48
c001c46e:	68 14 01 00 00       	push   0x114
c001c473:	e8 21 31 ff ff       	call   c000f599 <malloc>
c001c478:	83 c4 0c             	add    esp,0xc
c001c47b:	89 c6                	mov    esi,eax
c001c47d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c481:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c485:	50                   	push   eax
c001c486:	e8 71 68 ff ff       	call   c0012cfc <File::File(char const*, Process*)>
c001c48b:	58                   	pop    eax
c001c48c:	5a                   	pop    edx
c001c48d:	6a 01                	push   0x1
c001c48f:	56                   	push   esi
c001c490:	e8 cb 68 ff ff       	call   c0012d60 <File::open(FileOpenMode)>
c001c495:	83 c4 10             	add    esp,0x10
c001c498:	85 c0                	test   eax,eax
c001c49a:	0f 85 47 01 00 00    	jne    c001c5e7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c4a0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c4a8:	83 ec 0c             	sub    esp,0xc
c001c4ab:	6a 34                	push   0x34
c001c4ad:	e8 e7 30 ff ff       	call   c000f599 <malloc>
c001c4b2:	89 c3                	mov    ebx,eax
c001c4b4:	58                   	pop    eax
c001c4b5:	8b 06                	mov    eax,DWORD PTR [esi]
c001c4b7:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c4bb:	57                   	push   edi
c001c4bc:	53                   	push   ebx
c001c4bd:	6a 00                	push   0x0
c001c4bf:	6a 34                	push   0x34
c001c4c1:	56                   	push   esi
c001c4c2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c4c5:	83 c4 20             	add    esp,0x20
c001c4c8:	85 c0                	test   eax,eax
c001c4ca:	0f 85 17 01 00 00    	jne    c001c5e7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c4d0:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c4d6:	0f 85 0b 01 00 00    	jne    c001c5e7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c4dc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c4df:	85 c0                	test   eax,eax
c001c4e1:	0f 84 00 01 00 00    	je     c001c5e7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c4e7:	31 d2                	xor    edx,edx
c001c4e9:	55                   	push   ebp
c001c4ea:	52                   	push   edx
c001c4eb:	50                   	push   eax
c001c4ec:	56                   	push   esi
c001c4ed:	e8 2c 69 ff ff       	call   c0012e1e <File::seek(unsigned long long)>
c001c4f2:	83 c4 10             	add    esp,0x10
c001c4f5:	85 c0                	test   eax,eax
c001c4f7:	0f 85 ea 00 00 00    	jne    c001c5e7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c4fd:	83 ec 0c             	sub    esp,0xc
c001c500:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c503:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c507:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c50b:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c50f:	0f af c2             	imul   eax,edx
c001c512:	50                   	push   eax
c001c513:	e8 81 30 ff ff       	call   c000f599 <malloc>
c001c518:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c51a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c51e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c521:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c525:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c529:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c52d:	0f af c2             	imul   eax,edx
c001c530:	99                   	cdq    
c001c531:	52                   	push   edx
c001c532:	50                   	push   eax
c001c533:	56                   	push   esi
c001c534:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c537:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c53a:	83 c4 20             	add    esp,0x20
c001c53d:	85 c0                	test   eax,eax
c001c53f:	0f 84 a2 00 00 00    	je     c001c5e7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c545:	31 d2                	xor    edx,edx
c001c547:	51                   	push   ecx
c001c548:	52                   	push   edx
c001c549:	50                   	push   eax
c001c54a:	56                   	push   esi
c001c54b:	e8 ce 68 ff ff       	call   c0012e1e <File::seek(unsigned long long)>
c001c550:	83 c4 10             	add    esp,0x10
c001c553:	85 c0                	test   eax,eax
c001c555:	0f 85 8c 00 00 00    	jne    c001c5e7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c55b:	83 ec 0c             	sub    esp,0xc
c001c55e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c562:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c566:	31 ed                	xor    ebp,ebp
c001c568:	0f af c2             	imul   eax,edx
c001c56b:	50                   	push   eax
c001c56c:	e8 28 30 ff ff       	call   c000f599 <malloc>
c001c571:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c573:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c577:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c57a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c57e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c582:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c586:	0f af c2             	imul   eax,edx
c001c589:	99                   	cdq    
c001c58a:	52                   	push   edx
c001c58b:	50                   	push   eax
c001c58c:	56                   	push   esi
c001c58d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c590:	83 c4 20             	add    esp,0x20
c001c593:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c59b:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c59f:	0f 86 80 00 00 00    	jbe    c001c625 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c5a5:	0f b7 fd             	movzx  edi,bp
c001c5a8:	c1 e7 05             	shl    edi,0x5
c001c5ab:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c5af:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c5b2:	75 6b                	jne    c001c61f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c5b4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c5b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c5bb:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c5be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c5c2:	52                   	push   edx
c001c5c3:	31 d2                	xor    edx,edx
c001c5c5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c5c8:	52                   	push   edx
c001c5c9:	50                   	push   eax
c001c5ca:	56                   	push   esi
c001c5cb:	e8 4e 68 ff ff       	call   c0012e1e <File::seek(unsigned long long)>
c001c5d0:	83 c4 10             	add    esp,0x10
c001c5d3:	85 c0                	test   eax,eax
c001c5d5:	74 17                	je     c001c5ee <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c5d7:	83 ec 0c             	sub    esp,0xc
c001c5da:	68 a8 bd 02 c0       	push   0xc002bda8
c001c5df:	e8 b9 61 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001c5e4:	83 c4 10             	add    esp,0x10
c001c5e7:	31 c0                	xor    eax,eax
c001c5e9:	e9 87 00 00 00       	jmp    c001c675 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001c5ee:	83 ec 0c             	sub    esp,0xc
c001c5f1:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001c5f4:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001c5f7:	50                   	push   eax
c001c5f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c5fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c600:	56                   	push   esi
c001c601:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001c605:	e8 b3 fb ff ff       	call   c001c1bd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001c60a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c60e:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001c612:	83 c4 20             	add    esp,0x20
c001c615:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c619:	73 04                	jae    c001c61f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c61b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c61f:	45                   	inc    ebp
c001c620:	e9 76 ff ff ff       	jmp    c001c59b <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001c625:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c629:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c62d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c631:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001c637:	83 ec 0c             	sub    esp,0xc
c001c63a:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001c640:	25 00 f0 ff ff       	and    eax,0xfffff000
c001c645:	05 00 10 00 00       	add    eax,0x1000
c001c64a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c64d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c651:	e8 53 2f ff ff       	call   c000f5a9 <free>
c001c656:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c659:	e8 4b 2f ff ff       	call   c000f5a9 <free>
c001c65e:	58                   	pop    eax
c001c65f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c663:	e8 41 2f ff ff       	call   c000f5a9 <free>
c001c668:	89 34 24             	mov    DWORD PTR [esp],esi
c001c66b:	e8 4e 67 ff ff       	call   c0012dbe <File::close()>
c001c670:	83 c4 10             	add    esp,0x10
c001c673:	b0 01                	mov    al,0x1
c001c675:	83 c4 3c             	add    esp,0x3c
c001c678:	5b                   	pop    ebx
c001c679:	5e                   	pop    esi
c001c67a:	5f                   	pop    edi
c001c67b:	5d                   	pop    ebp
c001c67c:	c3                   	ret    

c001c67d <Thr::runtimeReferenceHelper()>:
c001c67d:	83 ec 18             	sub    esp,0x18
c001c680:	68 b0 bd 02 c0       	push   0xc002bdb0
c001c685:	e8 13 61 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001c68a:	fa                   	cli    
c001c68b:	83 c4 10             	add    esp,0x10
c001c68e:	eb fe                	jmp    c001c68e <Thr::runtimeReferenceHelper()+0x11>

c001c690 <Thr::getAddressOfKernelSymbol(char const*)>:
c001c690:	57                   	push   edi
c001c691:	56                   	push   esi
c001c692:	53                   	push   ebx
c001c693:	31 db                	xor    ebx,ebx
c001c695:	39 1d a0 f2 02 c0    	cmp    DWORD PTR ds:0xc002f2a0,ebx
c001c69b:	7e 3c                	jle    c001c6d9 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001c69d:	8b 34 9d 20 f2 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd0de0]
c001c6a4:	31 ff                	xor    edi,edi
c001c6a6:	39 3c 9d 20 f1 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd0ee0],edi
c001c6ad:	7e 27                	jle    c001c6d6 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001c6af:	50                   	push   eax
c001c6b0:	50                   	push   eax
c001c6b1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c6b5:	8b 06                	mov    eax,DWORD PTR [esi]
c001c6b7:	03 04 9d a0 f1 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd0e60]
c001c6be:	50                   	push   eax
c001c6bf:	e8 d4 41 fe ff       	call   c0000898 <strcmp>
c001c6c4:	83 c4 10             	add    esp,0x10
c001c6c7:	85 c0                	test   eax,eax
c001c6c9:	75 05                	jne    c001c6d0 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001c6cb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c6ce:	eb 0b                	jmp    c001c6db <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001c6d0:	83 c6 10             	add    esi,0x10
c001c6d3:	47                   	inc    edi
c001c6d4:	eb d0                	jmp    c001c6a6 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001c6d6:	43                   	inc    ebx
c001c6d7:	eb bc                	jmp    c001c695 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001c6d9:	31 c0                	xor    eax,eax
c001c6db:	5b                   	pop    ebx
c001c6dc:	5e                   	pop    esi
c001c6dd:	5f                   	pop    edi
c001c6de:	c3                   	ret    

c001c6df <Thr::loadKernelSymbolTable(char const*)>:
c001c6df:	55                   	push   ebp
c001c6e0:	57                   	push   edi
c001c6e1:	56                   	push   esi
c001c6e2:	53                   	push   ebx
c001c6e3:	83 ec 68             	sub    esp,0x68
c001c6e6:	8b 35 f0 f2 02 c0    	mov    esi,DWORD PTR ds:0xc002f2f0
c001c6ec:	68 14 01 00 00       	push   0x114
c001c6f1:	e8 a3 2e ff ff       	call   c000f599 <malloc>
c001c6f6:	83 c4 0c             	add    esp,0xc
c001c6f9:	89 c3                	mov    ebx,eax
c001c6fb:	56                   	push   esi
c001c6fc:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001c700:	50                   	push   eax
c001c701:	e8 f6 65 ff ff       	call   c0012cfc <File::File(char const*, Process*)>
c001c706:	5e                   	pop    esi
c001c707:	5f                   	pop    edi
c001c708:	6a 01                	push   0x1
c001c70a:	53                   	push   ebx
c001c70b:	e8 50 66 ff ff       	call   c0012d60 <File::open(FileOpenMode)>
c001c710:	83 c4 10             	add    esp,0x10
c001c713:	85 c0                	test   eax,eax
c001c715:	74 0a                	je     c001c721 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001c717:	83 ec 0c             	sub    esp,0xc
c001c71a:	68 d2 bd 02 c0       	push   0xc002bdd2
c001c71f:	eb 34                	jmp    c001c755 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001c721:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c729:	83 ec 0c             	sub    esp,0xc
c001c72c:	6a 34                	push   0x34
c001c72e:	e8 66 2e ff ff       	call   c000f599 <malloc>
c001c733:	59                   	pop    ecx
c001c734:	89 c7                	mov    edi,eax
c001c736:	8d 74 24 34          	lea    esi,[esp+0x34]
c001c73a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c73c:	56                   	push   esi
c001c73d:	57                   	push   edi
c001c73e:	6a 00                	push   0x0
c001c740:	6a 34                	push   0x34
c001c742:	53                   	push   ebx
c001c743:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c746:	83 c4 20             	add    esp,0x20
c001c749:	85 c0                	test   eax,eax
c001c74b:	74 17                	je     c001c764 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001c74d:	83 ec 0c             	sub    esp,0xc
c001c750:	68 e9 bd 02 c0       	push   0xc002bde9
c001c755:	e8 2f d8 ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c001c75a:	83 c4 10             	add    esp,0x10
c001c75d:	31 c0                	xor    eax,eax
c001c75f:	e9 31 02 00 00       	jmp    c001c995 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001c764:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c76a:	75 e1                	jne    c001c74d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c76c:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c76f:	85 c0                	test   eax,eax
c001c771:	74 da                	je     c001c74d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c773:	52                   	push   edx
c001c774:	31 d2                	xor    edx,edx
c001c776:	52                   	push   edx
c001c777:	50                   	push   eax
c001c778:	53                   	push   ebx
c001c779:	e8 a0 66 ff ff       	call   c0012e1e <File::seek(unsigned long long)>
c001c77e:	83 c4 10             	add    esp,0x10
c001c781:	85 c0                	test   eax,eax
c001c783:	75 c8                	jne    c001c74d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c785:	83 ec 0c             	sub    esp,0xc
c001c788:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c78c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c790:	31 ed                	xor    ebp,ebp
c001c792:	0f af c2             	imul   eax,edx
c001c795:	50                   	push   eax
c001c796:	e8 fe 2d ff ff       	call   c000f599 <malloc>
c001c79b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c79d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c7a1:	89 34 24             	mov    DWORD PTR [esp],esi
c001c7a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c7a8:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c7ac:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c7b0:	0f af c2             	imul   eax,edx
c001c7b3:	99                   	cdq    
c001c7b4:	52                   	push   edx
c001c7b5:	50                   	push   eax
c001c7b6:	53                   	push   ebx
c001c7b7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c7ba:	83 c4 20             	add    esp,0x20
c001c7bd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c7c5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c7cd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c7d5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c7dd:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001c7e1:	0f 86 aa 00 00 00    	jbe    c001c891 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001c7e7:	0f b7 f5             	movzx  esi,bp
c001c7ea:	6b f6 28             	imul   esi,esi,0x28
c001c7ed:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c7f1:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c7f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c7f8:	50                   	push   eax
c001c7f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c7fd:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001c801:	8b 16                	mov    edx,DWORD PTR [esi]
c001c803:	6b c0 28             	imul   eax,eax,0x28
c001c806:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001c80a:	89 d0                	mov    eax,edx
c001c80c:	31 d2                	xor    edx,edx
c001c80e:	52                   	push   edx
c001c80f:	50                   	push   eax
c001c810:	53                   	push   ebx
c001c811:	e8 08 66 ff ff       	call   c0012e1e <File::seek(unsigned long long)>
c001c816:	83 c4 0c             	add    esp,0xc
c001c819:	6a 20                	push   0x20
c001c81b:	6a 00                	push   0x0
c001c81d:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c821:	52                   	push   edx
c001c822:	e8 29 3f fe ff       	call   c0000750 <memset>
c001c827:	58                   	pop    eax
c001c828:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c82a:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001c82e:	51                   	push   ecx
c001c82f:	8d 54 24 40          	lea    edx,[esp+0x40]
c001c833:	52                   	push   edx
c001c834:	6a 00                	push   0x0
c001c836:	6a 1f                	push   0x1f
c001c838:	53                   	push   ebx
c001c839:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c83c:	83 c4 18             	add    esp,0x18
c001c83f:	68 00 be 02 c0       	push   0xc002be00
c001c844:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c848:	52                   	push   edx
c001c849:	e8 4a 40 fe ff       	call   c0000898 <strcmp>
c001c84e:	83 c4 10             	add    esp,0x10
c001c851:	85 c0                	test   eax,eax
c001c853:	75 0f                	jne    c001c864 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001c855:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c858:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c85c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c860:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c864:	50                   	push   eax
c001c865:	50                   	push   eax
c001c866:	68 08 be 02 c0       	push   0xc002be08
c001c86b:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001c86f:	50                   	push   eax
c001c870:	e8 23 40 fe ff       	call   c0000898 <strcmp>
c001c875:	83 c4 10             	add    esp,0x10
c001c878:	85 c0                	test   eax,eax
c001c87a:	75 0f                	jne    c001c88b <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001c87c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c87f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c883:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c887:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c88b:	45                   	inc    ebp
c001c88c:	e9 4c ff ff ff       	jmp    c001c7dd <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001c891:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c896:	75 10                	jne    c001c8a8 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001c898:	83 ec 0c             	sub    esp,0xc
c001c89b:	68 10 be 02 c0       	push   0xc002be10
c001c8a0:	e8 e4 d6 ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c001c8a5:	83 c4 10             	add    esp,0x10
c001c8a8:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001c8ad:	75 10                	jne    c001c8bf <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001c8af:	83 ec 0c             	sub    esp,0xc
c001c8b2:	68 10 be 02 c0       	push   0xc002be10
c001c8b7:	e8 cd d6 ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c001c8bc:	83 c4 10             	add    esp,0x10
c001c8bf:	31 d2                	xor    edx,edx
c001c8c1:	50                   	push   eax
c001c8c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8c6:	52                   	push   edx
c001c8c7:	50                   	push   eax
c001c8c8:	53                   	push   ebx
c001c8c9:	e8 50 65 ff ff       	call   c0012e1e <File::seek(unsigned long long)>
c001c8ce:	5a                   	pop    edx
c001c8cf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c8d3:	e8 c1 2c ff ff       	call   c000f599 <malloc>
c001c8d8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c8dc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c8e0:	31 c9                	xor    ecx,ecx
c001c8e2:	5e                   	pop    esi
c001c8e3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c8e5:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001c8e9:	55                   	push   ebp
c001c8ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c8ee:	51                   	push   ecx
c001c8ef:	52                   	push   edx
c001c8f0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001c8f4:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001c8f8:	53                   	push   ebx
c001c8f9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c8fc:	83 c4 14             	add    esp,0x14
c001c8ff:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c903:	e8 91 2c ff ff       	call   c000f599 <malloc>
c001c908:	89 c6                	mov    esi,eax
c001c90a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c90c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c90f:	56                   	push   esi
c001c910:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c914:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c918:	51                   	push   ecx
c001c919:	52                   	push   edx
c001c91a:	53                   	push   ebx
c001c91b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c91e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c922:	8b 15 a0 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f2a0
c001c928:	83 c4 1c             	add    esp,0x1c
c001c92b:	c1 e8 04             	shr    eax,0x4
c001c92e:	89 04 95 20 f1 02 c0 	mov    DWORD PTR [edx*4-0x3ffd0ee0],eax
c001c935:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c939:	31 d2                	xor    edx,edx
c001c93b:	52                   	push   edx
c001c93c:	50                   	push   eax
c001c93d:	53                   	push   ebx
c001c93e:	e8 db 64 ff ff       	call   c0012e1e <File::seek(unsigned long long)>
c001c943:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c945:	31 d2                	xor    edx,edx
c001c947:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c94a:	56                   	push   esi
c001c94b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c94f:	52                   	push   edx
c001c950:	50                   	push   eax
c001c951:	53                   	push   ebx
c001c952:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c955:	83 c4 14             	add    esp,0x14
c001c958:	53                   	push   ebx
c001c959:	e8 60 64 ff ff       	call   c0012dbe <File::close()>
c001c95e:	5d                   	pop    ebp
c001c95f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c963:	e8 41 2c ff ff       	call   c000f5a9 <free>
c001c968:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c96b:	e8 39 2c ff ff       	call   c000f5a9 <free>
c001c970:	a1 a0 f2 02 c0       	mov    eax,ds:0xc002f2a0
c001c975:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c979:	8d 50 01             	lea    edx,[eax+0x1]
c001c97c:	89 0c 85 20 f2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0de0],ecx
c001c983:	89 34 85 a0 f1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0e60],esi
c001c98a:	89 15 a0 f2 02 c0    	mov    DWORD PTR ds:0xc002f2a0,edx
c001c990:	83 c4 10             	add    esp,0x10
c001c993:	b0 01                	mov    al,0x1
c001c995:	83 c4 5c             	add    esp,0x5c
c001c998:	5b                   	pop    ebx
c001c999:	5e                   	pop    esi
c001c99a:	5f                   	pop    edi
c001c99b:	5d                   	pop    ebp
c001c99c:	c3                   	ret    

c001c99d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001c99d:	55                   	push   ebp
c001c99e:	57                   	push   edi
c001c99f:	56                   	push   esi
c001c9a0:	53                   	push   ebx
c001c9a1:	81 ec 68 03 00 00    	sub    esp,0x368
c001c9a7:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001c9ae:	8b 1d f0 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f2f0
c001c9b4:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c9b8:	68 14 01 00 00       	push   0x114
c001c9bd:	e8 d7 2b ff ff       	call   c000f599 <malloc>
c001c9c2:	83 c4 0c             	add    esp,0xc
c001c9c5:	89 c5                	mov    ebp,eax
c001c9c7:	53                   	push   ebx
c001c9c8:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001c9cf:	50                   	push   eax
c001c9d0:	e8 27 63 ff ff       	call   c0012cfc <File::File(char const*, Process*)>
c001c9d5:	5e                   	pop    esi
c001c9d6:	5f                   	pop    edi
c001c9d7:	6a 01                	push   0x1
c001c9d9:	55                   	push   ebp
c001c9da:	e8 81 63 ff ff       	call   c0012d60 <File::open(FileOpenMode)>
c001c9df:	83 c4 10             	add    esp,0x10
c001c9e2:	85 c0                	test   eax,eax
c001c9e4:	0f 85 a7 06 00 00    	jne    c001d091 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c9ea:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c9f2:	83 ec 0c             	sub    esp,0xc
c001c9f5:	6a 34                	push   0x34
c001c9f7:	e8 9d 2b ff ff       	call   c000f599 <malloc>
c001c9fc:	5b                   	pop    ebx
c001c9fd:	89 c7                	mov    edi,eax
c001c9ff:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001ca03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ca06:	53                   	push   ebx
c001ca07:	57                   	push   edi
c001ca08:	6a 00                	push   0x0
c001ca0a:	6a 34                	push   0x34
c001ca0c:	55                   	push   ebp
c001ca0d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ca10:	83 c4 20             	add    esp,0x20
c001ca13:	85 c0                	test   eax,eax
c001ca15:	0f 85 76 06 00 00    	jne    c001d091 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ca1b:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001ca21:	0f 85 6a 06 00 00    	jne    c001d091 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ca27:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001ca2a:	85 c0                	test   eax,eax
c001ca2c:	0f 84 5f 06 00 00    	je     c001d091 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ca32:	31 d2                	xor    edx,edx
c001ca34:	51                   	push   ecx
c001ca35:	52                   	push   edx
c001ca36:	50                   	push   eax
c001ca37:	55                   	push   ebp
c001ca38:	e8 e1 63 ff ff       	call   c0012e1e <File::seek(unsigned long long)>
c001ca3d:	83 c4 10             	add    esp,0x10
c001ca40:	85 c0                	test   eax,eax
c001ca42:	0f 85 49 06 00 00    	jne    c001d091 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ca48:	83 ec 0c             	sub    esp,0xc
c001ca4b:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001ca4e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ca52:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001ca56:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ca5a:	0f af c2             	imul   eax,edx
c001ca5d:	50                   	push   eax
c001ca5e:	e8 36 2b ff ff       	call   c000f599 <malloc>
c001ca63:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ca66:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ca6a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ca6d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ca71:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ca75:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ca79:	0f af c2             	imul   eax,edx
c001ca7c:	99                   	cdq    
c001ca7d:	52                   	push   edx
c001ca7e:	50                   	push   eax
c001ca7f:	55                   	push   ebp
c001ca80:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ca83:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001ca86:	83 c4 20             	add    esp,0x20
c001ca89:	85 c0                	test   eax,eax
c001ca8b:	0f 84 00 06 00 00    	je     c001d091 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ca91:	52                   	push   edx
c001ca92:	31 d2                	xor    edx,edx
c001ca94:	52                   	push   edx
c001ca95:	50                   	push   eax
c001ca96:	55                   	push   ebp
c001ca97:	e8 82 63 ff ff       	call   c0012e1e <File::seek(unsigned long long)>
c001ca9c:	83 c4 10             	add    esp,0x10
c001ca9f:	85 c0                	test   eax,eax
c001caa1:	0f 85 ea 05 00 00    	jne    c001d091 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001caa7:	83 ec 0c             	sub    esp,0xc
c001caaa:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001caae:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cab2:	31 f6                	xor    esi,esi
c001cab4:	0f af c2             	imul   eax,edx
c001cab7:	50                   	push   eax
c001cab8:	e8 dc 2a ff ff       	call   c000f599 <malloc>
c001cabd:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cac0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cac4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cac7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cacb:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cacf:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cad3:	0f af c2             	imul   eax,edx
c001cad6:	99                   	cdq    
c001cad7:	52                   	push   edx
c001cad8:	50                   	push   eax
c001cad9:	55                   	push   ebp
c001cada:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cadd:	83 c4 20             	add    esp,0x20
c001cae0:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001cae4:	0f 86 8a 00 00 00    	jbe    c001cb74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001caea:	0f b7 de             	movzx  ebx,si
c001caed:	c1 e3 05             	shl    ebx,0x5
c001caf0:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001caf4:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001caf7:	75 75                	jne    c001cb6e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001caf9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001cafc:	31 d2                	xor    edx,edx
c001cafe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cb02:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cb05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cb09:	50                   	push   eax
c001cb0a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001cb0d:	52                   	push   edx
c001cb0e:	50                   	push   eax
c001cb0f:	55                   	push   ebp
c001cb10:	e8 09 63 ff ff       	call   c0012e1e <File::seek(unsigned long long)>
c001cb15:	83 c4 10             	add    esp,0x10
c001cb18:	85 c0                	test   eax,eax
c001cb1a:	0f 85 71 05 00 00    	jne    c001d091 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cb20:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001cb27:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cb2a:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001cb2e:	31 d2                	xor    edx,edx
c001cb30:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001cb34:	83 ec 0c             	sub    esp,0xc
c001cb37:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cb3b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cb42:	50                   	push   eax
c001cb43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cb47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb4b:	52                   	push   edx
c001cb4c:	50                   	push   eax
c001cb4d:	55                   	push   ebp
c001cb4e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb51:	83 c4 1c             	add    esp,0x1c
c001cb54:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001cb57:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001cb5a:	50                   	push   eax
c001cb5b:	6a 00                	push   0x0
c001cb5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb61:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001cb65:	50                   	push   eax
c001cb66:	e8 e5 3b fe ff       	call   c0000750 <memset>
c001cb6b:	83 c4 10             	add    esp,0x10
c001cb6e:	46                   	inc    esi
c001cb6f:	e9 6c ff ff ff       	jmp    c001cae0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001cb74:	53                   	push   ebx
c001cb75:	31 db                	xor    ebx,ebx
c001cb77:	68 00 01 00 00       	push   0x100
c001cb7c:	6a 00                	push   0x0
c001cb7e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001cb82:	50                   	push   eax
c001cb83:	e8 c8 3b fe ff       	call   c0000750 <memset>
c001cb88:	83 c4 0c             	add    esp,0xc
c001cb8b:	68 00 01 00 00       	push   0x100
c001cb90:	6a 00                	push   0x0
c001cb92:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001cb99:	50                   	push   eax
c001cb9a:	e8 b1 3b fe ff       	call   c0000750 <memset>
c001cb9f:	83 c4 10             	add    esp,0x10
c001cba2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cbaa:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001cbb2:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001cbba:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cbc2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001cbca:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001cbce:	0f 86 30 01 00 00    	jbe    c001cd04 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001cbd4:	0f b7 f3             	movzx  esi,bx
c001cbd7:	6b f6 28             	imul   esi,esi,0x28
c001cbda:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cbde:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cbe1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cbe5:	52                   	push   edx
c001cbe6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cbea:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001cbee:	8b 06                	mov    eax,DWORD PTR [esi]
c001cbf0:	6b d2 28             	imul   edx,edx,0x28
c001cbf3:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001cbf7:	31 d2                	xor    edx,edx
c001cbf9:	52                   	push   edx
c001cbfa:	50                   	push   eax
c001cbfb:	55                   	push   ebp
c001cbfc:	e8 1d 62 ff ff       	call   c0012e1e <File::seek(unsigned long long)>
c001cc01:	83 c4 0c             	add    esp,0xc
c001cc04:	6a 20                	push   0x20
c001cc06:	6a 00                	push   0x0
c001cc08:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001cc0f:	51                   	push   ecx
c001cc10:	e8 3b 3b fe ff       	call   c0000750 <memset>
c001cc15:	59                   	pop    ecx
c001cc16:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cc19:	8d 54 24 58          	lea    edx,[esp+0x58]
c001cc1d:	52                   	push   edx
c001cc1e:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001cc25:	51                   	push   ecx
c001cc26:	6a 00                	push   0x0
c001cc28:	6a 1f                	push   0x1f
c001cc2a:	55                   	push   ebp
c001cc2b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cc2e:	83 c4 1c             	add    esp,0x1c
c001cc31:	6a 09                	push   0x9
c001cc33:	68 2a be 02 c0       	push   0xc002be2a
c001cc38:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001cc3f:	51                   	push   ecx
c001cc40:	e8 07 3a fe ff       	call   c000064c <memcmp>
c001cc45:	83 c4 10             	add    esp,0x10
c001cc48:	85 c0                	test   eax,eax
c001cc4a:	75 21                	jne    c001cc6d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001cc4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cc50:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cc54:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cc58:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cc5c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cc5f:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001cc66:	89 d0                	mov    eax,edx
c001cc68:	40                   	inc    eax
c001cc69:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cc6d:	50                   	push   eax
c001cc6e:	6a 09                	push   0x9
c001cc70:	68 34 be 02 c0       	push   0xc002be34
c001cc75:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cc7c:	50                   	push   eax
c001cc7d:	e8 ca 39 fe ff       	call   c000064c <memcmp>
c001cc82:	83 c4 10             	add    esp,0x10
c001cc85:	85 c0                	test   eax,eax
c001cc87:	75 21                	jne    c001ccaa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001cc89:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cc8d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cc91:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cc95:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cc99:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cc9c:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001cca3:	89 d0                	mov    eax,edx
c001cca5:	40                   	inc    eax
c001cca6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ccaa:	50                   	push   eax
c001ccab:	50                   	push   eax
c001ccac:	68 00 be 02 c0       	push   0xc002be00
c001ccb1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ccb8:	50                   	push   eax
c001ccb9:	e8 da 3b fe ff       	call   c0000898 <strcmp>
c001ccbe:	83 c4 10             	add    esp,0x10
c001ccc1:	85 c0                	test   eax,eax
c001ccc3:	75 0f                	jne    c001ccd4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001ccc5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ccc8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cccc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ccd0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ccd4:	50                   	push   eax
c001ccd5:	50                   	push   eax
c001ccd6:	68 08 be 02 c0       	push   0xc002be08
c001ccdb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cce2:	50                   	push   eax
c001cce3:	e8 b0 3b fe ff       	call   c0000898 <strcmp>
c001cce8:	83 c4 10             	add    esp,0x10
c001cceb:	85 c0                	test   eax,eax
c001cced:	75 0f                	jne    c001ccfe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001ccef:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ccf2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ccf6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ccfa:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001ccfe:	43                   	inc    ebx
c001ccff:	e9 c6 fe ff ff       	jmp    c001cbca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001cd04:	31 d2                	xor    edx,edx
c001cd06:	50                   	push   eax
c001cd07:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cd0b:	52                   	push   edx
c001cd0c:	50                   	push   eax
c001cd0d:	55                   	push   ebp
c001cd0e:	e8 0b 61 ff ff       	call   c0012e1e <File::seek(unsigned long long)>
c001cd13:	58                   	pop    eax
c001cd14:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cd18:	e8 7c 28 ff ff       	call   c000f599 <malloc>
c001cd1d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cd20:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001cd24:	31 d2                	xor    edx,edx
c001cd26:	58                   	pop    eax
c001cd27:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cd2b:	53                   	push   ebx
c001cd2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001cd30:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cd34:	52                   	push   edx
c001cd35:	50                   	push   eax
c001cd36:	55                   	push   ebp
c001cd37:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cd3a:	83 c4 14             	add    esp,0x14
c001cd3d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cd41:	e8 53 28 ff ff       	call   c000f599 <malloc>
c001cd46:	31 d2                	xor    edx,edx
c001cd48:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cd4c:	83 c4 0c             	add    esp,0xc
c001cd4f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cd53:	52                   	push   edx
c001cd54:	50                   	push   eax
c001cd55:	55                   	push   ebp
c001cd56:	e8 c3 60 ff ff       	call   c0012e1e <File::seek(unsigned long long)>
c001cd5b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cd5e:	31 d2                	xor    edx,edx
c001cd60:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd63:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cd67:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cd6b:	52                   	push   edx
c001cd6c:	50                   	push   eax
c001cd6d:	55                   	push   ebp
c001cd6e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cd71:	83 c4 20             	add    esp,0x20
c001cd74:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cd7c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cd80:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001cd84:	0f 84 0b 03 00 00    	je     c001d095 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001cd8a:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001cd91:	31 d2                	xor    edx,edx
c001cd93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cd97:	c1 e8 03             	shr    eax,0x3
c001cd9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001cd9e:	51                   	push   ecx
c001cd9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cda3:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001cda7:	52                   	push   edx
c001cda8:	50                   	push   eax
c001cda9:	55                   	push   ebp
c001cdaa:	e8 6f 60 ff ff       	call   c0012e1e <File::seek(unsigned long long)>
c001cdaf:	5b                   	pop    ebx
c001cdb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cdb4:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001cdbb:	e8 d9 27 ff ff       	call   c000f599 <malloc>
c001cdc0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cdc3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cdc7:	31 d2                	xor    edx,edx
c001cdc9:	5e                   	pop    esi
c001cdca:	8d 44 24 58          	lea    eax,[esp+0x58]
c001cdce:	50                   	push   eax
c001cdcf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdd3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cdd7:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001cdde:	52                   	push   edx
c001cddf:	50                   	push   eax
c001cde0:	55                   	push   ebp
c001cde1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cde4:	83 c4 20             	add    esp,0x20
c001cde7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001cdef:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001cdf3:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001cdf7:	0f 8d 7c 02 00 00    	jge    c001d079 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001cdfd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ce01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ce05:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001ce0a:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001ce0d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001ce11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ce15:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001ce19:	89 d8                	mov    eax,ebx
c001ce1b:	c1 e8 08             	shr    eax,0x8
c001ce1e:	89 c6                	mov    esi,eax
c001ce20:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ce24:	c1 e6 04             	shl    esi,0x4
c001ce27:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001ce2b:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001ce2e:	85 d2                	test   edx,edx
c001ce30:	0f 85 bf 00 00 00    	jne    c001cef5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001ce36:	83 ec 0c             	sub    esp,0xc
c001ce39:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ce3d:	03 06                	add    eax,DWORD PTR [esi]
c001ce3f:	50                   	push   eax
c001ce40:	e8 4b f8 ff ff       	call   c001c690 <Thr::getAddressOfKernelSymbol(char const*)>
c001ce45:	83 c4 10             	add    esp,0x10
c001ce48:	89 c2                	mov    edx,eax
c001ce4a:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001ce4f:	85 c0                	test   eax,eax
c001ce51:	0f 85 9e 00 00 00    	jne    c001cef5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001ce57:	83 ec 0c             	sub    esp,0xc
c001ce5a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ce5e:	03 06                	add    eax,DWORD PTR [esi]
c001ce60:	50                   	push   eax
c001ce61:	e8 d9 16 ff ff       	call   c000e53f <Krnl::resolveCompatibilitySymbol(char*)>
c001ce66:	83 c4 10             	add    esp,0x10
c001ce69:	89 c2                	mov    edx,eax
c001ce6b:	85 c0                	test   eax,eax
c001ce6d:	0f 85 82 00 00 00    	jne    c001cef5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001ce73:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001ce77:	50                   	push   eax
c001ce78:	50                   	push   eax
c001ce79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce7d:	03 06                	add    eax,DWORD PTR [esi]
c001ce7f:	50                   	push   eax
c001ce80:	68 3e be 02 c0       	push   0xc002be3e
c001ce85:	e8 13 59 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001ce8a:	58                   	pop    eax
c001ce8b:	5a                   	pop    edx
c001ce8c:	68 58 be 02 c0       	push   0xc002be58
c001ce91:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ce98:	50                   	push   eax
c001ce99:	e8 6e 39 fe ff       	call   c000080c <strcpy>
c001ce9e:	59                   	pop    ecx
c001ce9f:	58                   	pop    eax
c001cea0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cea4:	03 06                	add    eax,DWORD PTR [esi]
c001cea6:	50                   	push   eax
c001cea7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ceae:	50                   	push   eax
c001ceaf:	e8 98 3a fe ff       	call   c000094c <strcat>
c001ceb4:	58                   	pop    eax
c001ceb5:	5a                   	pop    edx
c001ceb6:	68 ee be 02 c0       	push   0xc002beee
c001cebb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cec2:	50                   	push   eax
c001cec3:	e8 84 3a fe ff       	call   c000094c <strcat>
c001cec8:	83 c4 10             	add    esp,0x10
c001cecb:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001ced0:	0f 84 5d 01 00 00    	je     c001d033 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001ced6:	83 ec 0c             	sub    esp,0xc
c001ced9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cee0:	50                   	push   eax
c001cee1:	e8 a3 d0 ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c001cee6:	83 c4 10             	add    esp,0x10
c001cee9:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001ceed:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cef1:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001cef5:	80 fb 01             	cmp    bl,0x1
c001cef8:	0f 85 88 00 00 00    	jne    c001cf86 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001cefe:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001cf05:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cf09:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001cf0d:	01 ce                	add    esi,ecx
c001cf0f:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cf15:	0f 94 c0             	sete   al
c001cf18:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001cf1e:	0f 94 c3             	sete   bl
c001cf21:	09 c3                	or     ebx,eax
c001cf23:	8b 06                	mov    eax,DWORD PTR [esi]
c001cf25:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001cf2a:	74 41                	je     c001cf6d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001cf2c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001cf2f:	84 db                	test   bl,bl
c001cf31:	75 15                	jne    c001cf48 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001cf33:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cf37:	66 83 f8 0c          	cmp    ax,0xc
c001cf3b:	76 05                	jbe    c001cf42 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001cf3d:	b8 0c 00 00 00       	mov    eax,0xc
c001cf42:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001cf46:	76 37                	jbe    c001cf7f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cf48:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001cf4c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cf51:	0f 84 dc 00 00 00    	je     c001d033 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cf57:	83 ec 0c             	sub    esp,0xc
c001cf5a:	68 6f be 02 c0       	push   0xc002be6f
c001cf5f:	e8 25 d0 ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c001cf64:	83 c4 10             	add    esp,0x10
c001cf67:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cf6b:	eb 12                	jmp    c001cf7f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cf6d:	01 c1                	add    ecx,eax
c001cf6f:	84 db                	test   bl,bl
c001cf71:	75 0c                	jne    c001cf7f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cf73:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cf77:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001cf7b:	77 02                	ja     c001cf7f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cf7d:	01 d1                	add    ecx,edx
c001cf7f:	89 0e                	mov    DWORD PTR [esi],ecx
c001cf81:	e9 ea 00 00 00       	jmp    c001d070 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001cf86:	80 fb 02             	cmp    bl,0x2
c001cf89:	75 7c                	jne    c001d007 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001cf8b:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001cf92:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001cf96:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001cf9a:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cfa0:	74 20                	je     c001cfc2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001cfa2:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001cfa8:	74 18                	je     c001cfc2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001cfaa:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cfae:	b9 0a 00 00 00       	mov    ecx,0xa
c001cfb3:	66 83 f8 0e          	cmp    ax,0xe
c001cfb7:	77 03                	ja     c001cfbc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001cfb9:	8d 48 fc             	lea    ecx,[eax-0x4]
c001cfbc:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001cfc0:	76 1f                	jbe    c001cfe1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001cfc2:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001cfc6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cfcb:	74 66                	je     c001d033 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cfcd:	83 ec 0c             	sub    esp,0xc
c001cfd0:	68 8b be 02 c0       	push   0xc002be8b
c001cfd5:	e8 af cf ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c001cfda:	83 c4 10             	add    esp,0x10
c001cfdd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cfe1:	8b 06                	mov    eax,DWORD PTR [esi]
c001cfe3:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001cfe8:	74 13                	je     c001cffd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001cfea:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001cfee:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001cff5:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001cff9:	01 c8                	add    eax,ecx
c001cffb:	eb 04                	jmp    c001d001 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001cffd:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d001:	01 c2                	add    edx,eax
c001d003:	89 16                	mov    DWORD PTR [esi],edx
c001d005:	eb 69                	jmp    c001d070 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d007:	0f b6 db             	movzx  ebx,bl
c001d00a:	50                   	push   eax
c001d00b:	50                   	push   eax
c001d00c:	53                   	push   ebx
c001d00d:	68 a7 be 02 c0       	push   0xc002bea7
c001d012:	e8 86 57 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001d017:	83 c4 10             	add    esp,0x10
c001d01a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d01f:	74 12                	je     c001d033 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d021:	83 ec 0c             	sub    esp,0xc
c001d024:	68 b2 be 02 c0       	push   0xc002beb2
c001d029:	e8 5b cf ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c001d02e:	83 c4 10             	add    esp,0x10
c001d031:	eb 3d                	jmp    c001d070 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d033:	83 ec 0c             	sub    esp,0xc
c001d036:	55                   	push   ebp
c001d037:	e8 82 5d ff ff       	call   c0012dbe <File::close()>
c001d03c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d03f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d042:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d045:	59                   	pop    ecx
c001d046:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d04a:	e8 5a 25 ff ff       	call   c000f5a9 <free>
c001d04f:	5b                   	pop    ebx
c001d050:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d054:	e8 50 25 ff ff       	call   c000f5a9 <free>
c001d059:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d05c:	e8 48 25 ff ff       	call   c000f5a9 <free>
c001d061:	5e                   	pop    esi
c001d062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d066:	e8 3e 25 ff ff       	call   c000f5a9 <free>
c001d06b:	83 c4 10             	add    esp,0x10
c001d06e:	eb 21                	jmp    c001d091 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d070:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d074:	e9 76 fd ff ff       	jmp    c001cdef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d079:	83 ec 0c             	sub    esp,0xc
c001d07c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d080:	e8 24 25 ff ff       	call   c000f5a9 <free>
c001d085:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d089:	83 c4 10             	add    esp,0x10
c001d08c:	e9 eb fc ff ff       	jmp    c001cd7c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d091:	31 c0                	xor    eax,eax
c001d093:	eb 33                	jmp    c001d0c8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001d095:	83 ec 0c             	sub    esp,0xc
c001d098:	55                   	push   ebp
c001d099:	e8 20 5d ff ff       	call   c0012dbe <File::close()>
c001d09e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d0a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d0a4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d0a7:	58                   	pop    eax
c001d0a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d0ac:	e8 f8 24 ff ff       	call   c000f5a9 <free>
c001d0b1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d0b4:	e8 f0 24 ff ff       	call   c000f5a9 <free>
c001d0b9:	5a                   	pop    edx
c001d0ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0be:	e8 e6 24 ff ff       	call   c000f5a9 <free>
c001d0c3:	83 c4 10             	add    esp,0x10
c001d0c6:	b0 01                	mov    al,0x1
c001d0c8:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d0ce:	5b                   	pop    ebx
c001d0cf:	5e                   	pop    esi
c001d0d0:	5f                   	pop    edi
c001d0d1:	5d                   	pop    ebp
c001d0d2:	c3                   	ret    

c001d0d3 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d0d3:	56                   	push   esi
c001d0d4:	31 d2                	xor    edx,edx
c001d0d6:	53                   	push   ebx
c001d0d7:	8b 1d 00 eb 02 c0    	mov    ebx,DWORD PTR ds:0xc002eb00
c001d0dd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d0e1:	39 d3                	cmp    ebx,edx
c001d0e3:	7e 1b                	jle    c001d100 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d0e5:	8b 04 95 20 ed 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd12e0]
c001d0ec:	39 c8                	cmp    eax,ecx
c001d0ee:	77 0d                	ja     c001d0fd <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d0f0:	8b 34 95 20 eb 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd14e0]
c001d0f7:	01 c6                	add    esi,eax
c001d0f9:	39 ce                	cmp    esi,ecx
c001d0fb:	77 05                	ja     c001d102 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d0fd:	42                   	inc    edx
c001d0fe:	eb e1                	jmp    c001d0e1 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d100:	31 c0                	xor    eax,eax
c001d102:	5b                   	pop    ebx
c001d103:	5e                   	pop    esi
c001d104:	c3                   	ret    

c001d105 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d105:	53                   	push   ebx
c001d106:	31 c0                	xor    eax,eax
c001d108:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d10c:	8b 1d 00 eb 02 c0    	mov    ebx,DWORD PTR ds:0xc002eb00
c001d112:	39 c3                	cmp    ebx,eax
c001d114:	7e 22                	jle    c001d138 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d116:	8b 14 85 20 ed 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd12e0]
c001d11d:	39 ca                	cmp    edx,ecx
c001d11f:	77 14                	ja     c001d135 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d121:	03 14 85 20 eb 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd14e0]
c001d128:	39 ca                	cmp    edx,ecx
c001d12a:	76 09                	jbe    c001d135 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d12c:	8b 04 85 20 ef 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd10e0]
c001d133:	eb 05                	jmp    c001d13a <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d135:	40                   	inc    eax
c001d136:	eb da                	jmp    c001d112 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d138:	31 c0                	xor    eax,eax
c001d13a:	5b                   	pop    ebx
c001d13b:	c3                   	ret    

c001d13c <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d13c:	53                   	push   ebx
c001d13d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d141:	53                   	push   ebx
c001d142:	e8 8c ff ff ff       	call   c001d0d3 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d147:	5a                   	pop    edx
c001d148:	31 d2                	xor    edx,edx
c001d14a:	85 c0                	test   eax,eax
c001d14c:	74 04                	je     c001d152 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d14e:	89 da                	mov    edx,ebx
c001d150:	29 c2                	sub    edx,eax
c001d152:	89 d0                	mov    eax,edx
c001d154:	5b                   	pop    ebx
c001d155:	c3                   	ret    

c001d156 <Thr::loadDLL(char const*, bool)>:
c001d156:	55                   	push   ebp
c001d157:	57                   	push   edi
c001d158:	56                   	push   esi
c001d159:	53                   	push   ebx
c001d15a:	81 ec 34 01 00 00    	sub    esp,0x134
c001d160:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d167:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001d16e:	56                   	push   esi
c001d16f:	68 ca be 02 c0       	push   0xc002beca
c001d174:	e8 24 56 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001d179:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d180:	e8 14 24 ff ff       	call   c000f599 <malloc>
c001d185:	83 c4 0c             	add    esp,0xc
c001d188:	89 c3                	mov    ebx,eax
c001d18a:	ff 35 f0 f2 02 c0    	push   DWORD PTR ds:0xc002f2f0
c001d190:	56                   	push   esi
c001d191:	50                   	push   eax
c001d192:	e8 65 5b ff ff       	call   c0012cfc <File::File(char const*, Process*)>
c001d197:	83 c4 10             	add    esp,0x10
c001d19a:	85 db                	test   ebx,ebx
c001d19c:	75 3c                	jne    c001d1da <Thr::loadDLL(char const*, bool)+0x84>
c001d19e:	89 f8                	mov    eax,edi
c001d1a0:	84 c0                	test   al,al
c001d1a2:	0f 84 d2 01 00 00    	je     c001d37a <Thr::loadDLL(char const*, bool)+0x224>
c001d1a8:	55                   	push   ebp
c001d1a9:	55                   	push   ebp
c001d1aa:	68 db be 02 c0       	push   0xc002bedb
c001d1af:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001d1b3:	55                   	push   ebp
c001d1b4:	e8 53 36 fe ff       	call   c000080c <strcpy>
c001d1b9:	58                   	pop    eax
c001d1ba:	5a                   	pop    edx
c001d1bb:	56                   	push   esi
c001d1bc:	55                   	push   ebp
c001d1bd:	e8 8a 37 fe ff       	call   c000094c <strcat>
c001d1c2:	59                   	pop    ecx
c001d1c3:	58                   	pop    eax
c001d1c4:	68 ee be 02 c0       	push   0xc002beee
c001d1c9:	55                   	push   ebp
c001d1ca:	e8 7d 37 fe ff       	call   c000094c <strcat>
c001d1cf:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d1d2:	e8 b2 cd ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c001d1d7:	83 c4 10             	add    esp,0x10
c001d1da:	51                   	push   ecx
c001d1db:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d1df:	50                   	push   eax
c001d1e0:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d1e4:	50                   	push   eax
c001d1e5:	53                   	push   ebx
c001d1e6:	e8 21 5e ff ff       	call   c001300c <File::stat(unsigned long long*, bool*)>
c001d1eb:	83 c4 10             	add    esp,0x10
c001d1ee:	85 db                	test   ebx,ebx
c001d1f0:	74 0c                	je     c001d1fe <Thr::loadDLL(char const*, bool)+0xa8>
c001d1f2:	83 ec 0c             	sub    esp,0xc
c001d1f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d1f7:	53                   	push   ebx
c001d1f8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d1fb:	83 c4 10             	add    esp,0x10
c001d1fe:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d203:	75 0a                	jne    c001d20f <Thr::loadDLL(char const*, bool)+0xb9>
c001d205:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d209:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d20d:	75 3c                	jne    c001d24b <Thr::loadDLL(char const*, bool)+0xf5>
c001d20f:	89 f8                	mov    eax,edi
c001d211:	84 c0                	test   al,al
c001d213:	0f 84 49 01 00 00    	je     c001d362 <Thr::loadDLL(char const*, bool)+0x20c>
c001d219:	51                   	push   ecx
c001d21a:	51                   	push   ecx
c001d21b:	68 db be 02 c0       	push   0xc002bedb
c001d220:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d224:	53                   	push   ebx
c001d225:	e8 e2 35 fe ff       	call   c000080c <strcpy>
c001d22a:	5d                   	pop    ebp
c001d22b:	58                   	pop    eax
c001d22c:	56                   	push   esi
c001d22d:	53                   	push   ebx
c001d22e:	e8 19 37 fe ff       	call   c000094c <strcat>
c001d233:	58                   	pop    eax
c001d234:	5a                   	pop    edx
c001d235:	68 ee be 02 c0       	push   0xc002beee
c001d23a:	53                   	push   ebx
c001d23b:	e8 0c 37 fe ff       	call   c000094c <strcat>
c001d240:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d243:	e8 41 cd ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c001d248:	83 c4 10             	add    esp,0x10
c001d24b:	52                   	push   edx
c001d24c:	6a 03                	push   0x3
c001d24e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d252:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d256:	05 ff 0f 00 00       	add    eax,0xfff
c001d25b:	83 d2 00             	adc    edx,0x0
c001d25e:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d262:	50                   	push   eax
c001d263:	ff 35 30 df 02 c0    	push   DWORD PTR ds:0xc002df30
c001d269:	e8 06 49 ff ff       	call   c0011b74 <VAS::allocatePages(int, int)>
c001d26e:	59                   	pop    ecx
c001d26f:	89 c3                	mov    ebx,eax
c001d271:	5d                   	pop    ebp
c001d272:	50                   	push   eax
c001d273:	68 91 a2 02 c0       	push   0xc002a291
c001d278:	e8 20 55 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001d27d:	89 34 24             	mov    DWORD PTR [esp],esi
c001d280:	e8 e7 34 fe ff       	call   c000076c <strlen>
c001d285:	8b 2d 00 eb 02 c0    	mov    ebp,DWORD PTR ds:0xc002eb00
c001d28b:	40                   	inc    eax
c001d28c:	89 04 24             	mov    DWORD PTR [esp],eax
c001d28f:	e8 05 23 ff ff       	call   c000f599 <malloc>
c001d294:	89 04 ad 20 ef 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd10e0],eax
c001d29b:	58                   	pop    eax
c001d29c:	a1 00 eb 02 c0       	mov    eax,ds:0xc002eb00
c001d2a1:	5a                   	pop    edx
c001d2a2:	56                   	push   esi
c001d2a3:	ff 34 85 20 ef 02 c0 	push   DWORD PTR [eax*4-0x3ffd10e0]
c001d2aa:	e8 5d 35 fe ff       	call   c000080c <strcpy>
c001d2af:	a1 00 eb 02 c0       	mov    eax,ds:0xc002eb00
c001d2b4:	8d 50 01             	lea    edx,[eax+0x1]
c001d2b7:	89 1c 85 20 ed 02 c0 	mov    DWORD PTR [eax*4-0x3ffd12e0],ebx
c001d2be:	89 15 00 eb 02 c0    	mov    DWORD PTR ds:0xc002eb00,edx
c001d2c4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d2c8:	83 c4 0c             	add    esp,0xc
c001d2cb:	89 14 85 20 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd14e0],edx
c001d2d2:	6a 01                	push   0x1
c001d2d4:	53                   	push   ebx
c001d2d5:	56                   	push   esi
c001d2d6:	e8 c2 f6 ff ff       	call   c001c99d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d2db:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d2df:	83 c4 10             	add    esp,0x10
c001d2e2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d2e7:	0f 85 89 00 00 00    	jne    c001d376 <Thr::loadDLL(char const*, bool)+0x220>
c001d2ed:	89 f8                	mov    eax,edi
c001d2ef:	84 c0                	test   al,al
c001d2f1:	74 73                	je     c001d366 <Thr::loadDLL(char const*, bool)+0x210>
c001d2f3:	83 ec 0c             	sub    esp,0xc
c001d2f6:	68 f0 be 02 c0       	push   0xc002bef0
c001d2fb:	e8 89 cc ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c001d300:	83 c4 10             	add    esp,0x10
c001d303:	eb 61                	jmp    c001d366 <Thr::loadDLL(char const*, bool)+0x210>
c001d305:	50                   	push   eax
c001d306:	50                   	push   eax
c001d307:	89 e8                	mov    eax,ebp
c001d309:	c1 e0 0c             	shl    eax,0xc
c001d30c:	01 d8                	add    eax,ebx
c001d30e:	50                   	push   eax
c001d30f:	ff 35 30 df 02 c0    	push   DWORD PTR ds:0xc002df30
c001d315:	e8 c2 43 ff ff       	call   c00116dc <VAS::getPageTableEntry(unsigned long)>
c001d31a:	83 c4 10             	add    esp,0x10
c001d31d:	8b 00                	mov    eax,DWORD PTR [eax]
c001d31f:	a8 60                	test   al,0x60
c001d321:	75 11                	jne    c001d334 <Thr::loadDLL(char const*, bool)+0x1de>
c001d323:	83 ec 0c             	sub    esp,0xc
c001d326:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d32b:	50                   	push   eax
c001d32c:	e8 f3 25 ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c001d331:	83 c4 10             	add    esp,0x10
c001d334:	45                   	inc    ebp
c001d335:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d339:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d33d:	05 ff 0f 00 00       	add    eax,0xfff
c001d342:	bf 00 00 00 00       	mov    edi,0x0
c001d347:	83 d2 00             	adc    edx,0x0
c001d34a:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d34e:	c1 ea 0c             	shr    edx,0xc
c001d351:	39 c5                	cmp    ebp,eax
c001d353:	89 d1                	mov    ecx,edx
c001d355:	89 f8                	mov    eax,edi
c001d357:	19 c8                	sbb    eax,ecx
c001d359:	72 aa                	jb     c001d305 <Thr::loadDLL(char const*, bool)+0x1af>
c001d35b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d360:	75 18                	jne    c001d37a <Thr::loadDLL(char const*, bool)+0x224>
c001d362:	31 db                	xor    ebx,ebx
c001d364:	eb 14                	jmp    c001d37a <Thr::loadDLL(char const*, bool)+0x224>
c001d366:	83 ec 0c             	sub    esp,0xc
c001d369:	68 0f bf 02 c0       	push   0xc002bf0f
c001d36e:	e8 16 cc ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c001d373:	83 c4 10             	add    esp,0x10
c001d376:	31 ed                	xor    ebp,ebp
c001d378:	eb bb                	jmp    c001d335 <Thr::loadDLL(char const*, bool)+0x1df>
c001d37a:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d380:	89 d8                	mov    eax,ebx
c001d382:	5b                   	pop    ebx
c001d383:	5e                   	pop    esi
c001d384:	5f                   	pop    edi
c001d385:	5d                   	pop    ebp
c001d386:	c3                   	ret    

c001d387 <Thr::executeDLL(unsigned long, void*)>:
c001d387:	56                   	push   esi
c001d388:	53                   	push   ebx
c001d389:	52                   	push   edx
c001d38a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d38e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d392:	85 db                	test   ebx,ebx
c001d394:	75 10                	jne    c001d3a6 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d396:	83 ec 0c             	sub    esp,0xc
c001d399:	68 2b bf 02 c0       	push   0xc002bf2b
c001d39e:	e8 e6 cb ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c001d3a3:	83 c4 10             	add    esp,0x10
c001d3a6:	50                   	push   eax
c001d3a7:	50                   	push   eax
c001d3a8:	53                   	push   ebx
c001d3a9:	68 55 bf 02 c0       	push   0xc002bf55
c001d3ae:	e8 ea 53 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001d3b3:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d3b7:	89 d8                	mov    eax,ebx
c001d3b9:	83 c4 14             	add    esp,0x14
c001d3bc:	5b                   	pop    ebx
c001d3bd:	5e                   	pop    esi
c001d3be:	ff e0                	jmp    eax

c001d3c0 <userModeEntryPoint(void*)>:
c001d3c0:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001d3c5:	48                   	dec    eax
c001d3c6:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c001d3cb:	75 01                	jne    c001d3ce <userModeEntryPoint(void*)+0xe>
c001d3cd:	fb                   	sti    
c001d3ce:	fb                   	sti    
c001d3cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d3d4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d3d7:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d3dd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d3e1:	e9 44 2f fe ff       	jmp    c000032a <goToUsermode>

c001d3e6 <changeTSS>:
c001d3e6:	83 ec 14             	sub    esp,0x14
c001d3e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d3ee:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d3f1:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d3f6:	c1 e2 15             	shl    edx,0x15
c001d3f9:	29 d0                	sub    eax,edx
c001d3fb:	50                   	push   eax
c001d3fc:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c001d401:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d407:	05 7c 11 00 00       	add    eax,0x117c
c001d40c:	50                   	push   eax
c001d40d:	e8 62 37 ff ff       	call   c0010b74 <TSS::setESP(unsigned long)>
c001d412:	83 c4 1c             	add    esp,0x1c
c001d415:	c3                   	ret    

c001d416 <switchToThread(ThreadControlBlock*)>:
c001d416:	57                   	push   edi
c001d417:	a1 c4 f2 02 c0       	mov    eax,ds:0xc002f2c4
c001d41c:	56                   	push   esi
c001d41d:	85 c0                	test   eax,eax
c001d41f:	53                   	push   ebx
c001d420:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d424:	0f 85 88 00 00 00    	jne    c001d4b2 <switchToThread(ThreadControlBlock*)+0x9c>
c001d42a:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001d42d:	3c ff                	cmp    al,0xff
c001d42f:	74 7d                	je     c001d4ae <switchToThread(ThreadControlBlock*)+0x98>
c001d431:	0f b6 d0             	movzx  edx,al
c001d434:	b8 84 03 00 00       	mov    eax,0x384
c001d439:	29 d0                	sub    eax,edx
c001d43b:	c1 e0 10             	shl    eax,0x10
c001d43e:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001d441:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001d444:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c001d449:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d44f:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d456:	74 4a                	je     c001d4a2 <switchToThread(ThreadControlBlock*)+0x8c>
c001d458:	0f 31                	rdtsc  
c001d45a:	a3 08 f3 02 c0       	mov    ds:0xc002f308,eax
c001d45f:	89 c6                	mov    esi,eax
c001d461:	89 d7                	mov    edi,edx
c001d463:	2b 35 f8 f2 02 c0    	sub    esi,DWORD PTR ds:0xc002f2f8
c001d469:	89 15 0c f3 02 c0    	mov    DWORD PTR ds:0xc002f30c,edx
c001d46f:	1b 3d fc f2 02 c0    	sbb    edi,DWORD PTR ds:0xc002f2fc
c001d475:	89 35 00 f3 02 c0    	mov    DWORD PTR ds:0xc002f300,esi
c001d47b:	a3 f8 f2 02 c0       	mov    ds:0xc002f2f8,eax
c001d480:	89 3d 04 f3 02 c0    	mov    DWORD PTR ds:0xc002f304,edi
c001d486:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001d48c:	89 15 fc f2 02 c0    	mov    DWORD PTR ds:0xc002f2fc,edx
c001d492:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d495:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001d498:	01 c6                	add    esi,eax
c001d49a:	11 d7                	adc    edi,edx
c001d49c:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001d49f:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001d4a2:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001d4a6:	5b                   	pop    ebx
c001d4a7:	5e                   	pop    esi
c001d4a8:	5f                   	pop    edi
c001d4a9:	e9 b4 2e fe ff       	jmp    c0000362 <switchToThreadASM>
c001d4ae:	31 c0                	xor    eax,eax
c001d4b0:	eb 8f                	jmp    c001d441 <switchToThread(ThreadControlBlock*)+0x2b>
c001d4b2:	5b                   	pop    ebx
c001d4b3:	c7 05 c0 f2 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002f2c0,0x1
c001d4bd:	5e                   	pop    esi
c001d4be:	5f                   	pop    edi
c001d4bf:	c3                   	ret    

c001d4c0 <Process::addArgs(char**)>:
c001d4c0:	57                   	push   edi
c001d4c1:	56                   	push   esi
c001d4c2:	53                   	push   ebx
c001d4c3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d4c7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d4cb:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d4d5:	85 ff                	test   edi,edi
c001d4d7:	74 3d                	je     c001d516 <Process::addArgs(char**)+0x56>
c001d4d9:	8b 07                	mov    eax,DWORD PTR [edi]
c001d4db:	85 c0                	test   eax,eax
c001d4dd:	74 37                	je     c001d516 <Process::addArgs(char**)+0x56>
c001d4df:	31 db                	xor    ebx,ebx
c001d4e1:	83 ec 0c             	sub    esp,0xc
c001d4e4:	50                   	push   eax
c001d4e5:	e8 82 32 fe ff       	call   c000076c <strlen>
c001d4ea:	40                   	inc    eax
c001d4eb:	89 04 24             	mov    DWORD PTR [esp],eax
c001d4ee:	e8 a6 20 ff ff       	call   c000f599 <malloc>
c001d4f3:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d4fa:	5a                   	pop    edx
c001d4fb:	59                   	pop    ecx
c001d4fc:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d4ff:	43                   	inc    ebx
c001d500:	50                   	push   eax
c001d501:	e8 06 33 fe ff       	call   c000080c <strcpy>
c001d506:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d50c:	83 c4 10             	add    esp,0x10
c001d50f:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d512:	85 c0                	test   eax,eax
c001d514:	75 cb                	jne    c001d4e1 <Process::addArgs(char**)+0x21>
c001d516:	5b                   	pop    ebx
c001d517:	5e                   	pop    esi
c001d518:	5f                   	pop    edi
c001d519:	c3                   	ret    

c001d51a <Process::Process(char const*, Process*, char**)>:
c001d51a:	56                   	push   esi
c001d51b:	53                   	push   ebx
c001d51c:	83 ec 14             	sub    esp,0x14
c001d51f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d523:	05 0c 02 00 00       	add    eax,0x20c
c001d528:	bb 07 00 00 00       	mov    ebx,0x7
c001d52d:	89 c6                	mov    esi,eax
c001d52f:	85 db                	test   ebx,ebx
c001d531:	78 12                	js     c001d545 <Process::Process(char const*, Process*, char**)+0x2b>
c001d533:	83 ec 0c             	sub    esp,0xc
c001d536:	56                   	push   esi
c001d537:	e8 2a b7 00 00       	call   c0028c66 <ThreadControlBlock::ThreadControlBlock()>
c001d53c:	83 c4 10             	add    esp,0x10
c001d53f:	83 c6 63             	add    esi,0x63
c001d542:	4b                   	dec    ebx
c001d543:	eb ea                	jmp    c001d52f <Process::Process(char const*, Process*, char**)+0x15>
c001d545:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d549:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d550:	83 ec 0c             	sub    esp,0xc
c001d553:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d557:	e8 b6 c8 ff ff       	call   c0019e12 <Krnl::newProcessEnv(Process*)>
c001d55c:	83 c4 10             	add    esp,0x10
c001d55f:	89 c2                	mov    edx,eax
c001d561:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d565:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d56b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d56f:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d578:	a1 50 d3 02 c0       	mov    eax,ds:0xc002d350
c001d57d:	8d 50 01             	lea    edx,[eax+0x1]
c001d580:	89 15 50 d3 02 c0    	mov    DWORD PTR ds:0xc002d350,edx
c001d586:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d58a:	89 02                	mov    DWORD PTR [edx],eax
c001d58c:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001d594:	83 ec 0c             	sub    esp,0xc
c001d597:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d59b:	e8 f9 1f ff ff       	call   c000f599 <malloc>
c001d5a0:	83 c4 10             	add    esp,0x10
c001d5a3:	89 c3                	mov    ebx,eax
c001d5a5:	83 ec 08             	sub    esp,0x8
c001d5a8:	6a 00                	push   0x0
c001d5aa:	53                   	push   ebx
c001d5ab:	e8 6c 49 ff ff       	call   c0011f1c <VAS::VAS(bool)>
c001d5b0:	83 c4 10             	add    esp,0x10
c001d5b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5b7:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d5bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5c1:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d5cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5cf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d5d3:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d5d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5dd:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d5e3:	85 c0                	test   eax,eax
c001d5e5:	74 42                	je     c001d629 <Process::Process(char const*, Process*, char**)+0x10f>
c001d5e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5eb:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d5f1:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d5f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5fb:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d601:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d605:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d60b:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d611:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d615:	05 0c 01 00 00       	add    eax,0x10c
c001d61a:	83 ec 08             	sub    esp,0x8
c001d61d:	52                   	push   edx
c001d61e:	50                   	push   eax
c001d61f:	e8 e8 31 fe ff       	call   c000080c <strcpy>
c001d624:	83 c4 10             	add    esp,0x10
c001d627:	eb 63                	jmp    c001d68c <Process::Process(char const*, Process*, char**)+0x172>
c001d629:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001d631:	83 ec 0c             	sub    esp,0xc
c001d634:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d638:	e8 5c 1f ff ff       	call   c000f599 <malloc>
c001d63d:	83 c4 10             	add    esp,0x10
c001d640:	89 c3                	mov    ebx,eax
c001d642:	83 ec 08             	sub    esp,0x8
c001d645:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d649:	53                   	push   ebx
c001d64a:	e8 37 32 ff ff       	call   c0010886 <VgaText::VgaText(char const*)>
c001d64f:	83 c4 10             	add    esp,0x10
c001d652:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d656:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d65c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d660:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d666:	83 ec 0c             	sub    esp,0xc
c001d669:	50                   	push   eax
c001d66a:	e8 d6 29 ff ff       	call   c0010045 <addToTerminalCycle(VgaText*)>
c001d66f:	83 c4 10             	add    esp,0x10
c001d672:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d676:	05 0c 01 00 00       	add    eax,0x10c
c001d67b:	83 ec 08             	sub    esp,0x8
c001d67e:	68 74 bf 02 c0       	push   0xc002bf74
c001d683:	50                   	push   eax
c001d684:	e8 83 31 fe ff       	call   c000080c <strcpy>
c001d689:	83 c4 10             	add    esp,0x10
c001d68c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d690:	83 c0 0c             	add    eax,0xc
c001d693:	83 ec 08             	sub    esp,0x8
c001d696:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d69a:	50                   	push   eax
c001d69b:	e8 6c 31 fe ff       	call   c000080c <strcpy>
c001d6a0:	83 c4 10             	add    esp,0x10
c001d6a3:	83 ec 08             	sub    esp,0x8
c001d6a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d6aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d6ae:	e8 0d fe ff ff       	call   c001d4c0 <Process::addArgs(char**)>
c001d6b3:	83 c4 10             	add    esp,0x10
c001d6b6:	83 ec 08             	sub    esp,0x8
c001d6b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d6bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d6c1:	e8 a1 ed ff ff       	call   c001c467 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001d6c6:	83 c4 10             	add    esp,0x10
c001d6c9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d6cd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d6d1:	83 f0 01             	xor    eax,0x1
c001d6d4:	88 c2                	mov    dl,al
c001d6d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6da:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001d6e0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d6e5:	83 ec 08             	sub    esp,0x8
c001d6e8:	50                   	push   eax
c001d6e9:	68 cc bf 02 c0       	push   0xc002bfcc
c001d6ee:	e8 aa 50 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001d6f3:	83 c4 10             	add    esp,0x10
c001d6f6:	90                   	nop
c001d6f7:	83 c4 14             	add    esp,0x14
c001d6fa:	5b                   	pop    ebx
c001d6fb:	5e                   	pop    esi
c001d6fc:	c3                   	ret    
c001d6fd:	90                   	nop

c001d6fe <Process::Process(bool, char const*, Process*, char**)>:
c001d6fe:	56                   	push   esi
c001d6ff:	53                   	push   ebx
c001d700:	83 ec 24             	sub    esp,0x24
c001d703:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d707:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d70b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d70f:	05 0c 02 00 00       	add    eax,0x20c
c001d714:	bb 07 00 00 00       	mov    ebx,0x7
c001d719:	89 c6                	mov    esi,eax
c001d71b:	85 db                	test   ebx,ebx
c001d71d:	78 12                	js     c001d731 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001d71f:	83 ec 0c             	sub    esp,0xc
c001d722:	56                   	push   esi
c001d723:	e8 3e b5 00 00       	call   c0028c66 <ThreadControlBlock::ThreadControlBlock()>
c001d728:	83 c4 10             	add    esp,0x10
c001d72b:	83 c6 63             	add    esi,0x63
c001d72e:	4b                   	dec    ebx
c001d72f:	eb ea                	jmp    c001d71b <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001d731:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d735:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d73c:	83 ec 0c             	sub    esp,0xc
c001d73f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d743:	e8 ca c6 ff ff       	call   c0019e12 <Krnl::newProcessEnv(Process*)>
c001d748:	83 c4 10             	add    esp,0x10
c001d74b:	89 c2                	mov    edx,eax
c001d74d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d751:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d757:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d75b:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d764:	a1 50 d3 02 c0       	mov    eax,ds:0xc002d350
c001d769:	8d 50 01             	lea    edx,[eax+0x1]
c001d76c:	89 15 50 d3 02 c0    	mov    DWORD PTR ds:0xc002d350,edx
c001d772:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d776:	89 02                	mov    DWORD PTR [edx],eax
c001d778:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001d780:	83 ec 0c             	sub    esp,0xc
c001d783:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d787:	e8 0d 1e ff ff       	call   c000f599 <malloc>
c001d78c:	83 c4 10             	add    esp,0x10
c001d78f:	89 c3                	mov    ebx,eax
c001d791:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d796:	83 ec 08             	sub    esp,0x8
c001d799:	50                   	push   eax
c001d79a:	53                   	push   ebx
c001d79b:	e8 7c 47 ff ff       	call   c0011f1c <VAS::VAS(bool)>
c001d7a0:	83 c4 10             	add    esp,0x10
c001d7a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d7a7:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d7ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d7b1:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d7bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d7bf:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d7c3:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d7c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d7cd:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d7d3:	85 c0                	test   eax,eax
c001d7d5:	74 42                	je     c001d819 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001d7d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d7db:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d7e1:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d7e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d7eb:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d7f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d7f5:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d7fb:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d801:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d805:	05 0c 01 00 00       	add    eax,0x10c
c001d80a:	83 ec 08             	sub    esp,0x8
c001d80d:	52                   	push   edx
c001d80e:	50                   	push   eax
c001d80f:	e8 f8 2f fe ff       	call   c000080c <strcpy>
c001d814:	83 c4 10             	add    esp,0x10
c001d817:	eb 63                	jmp    c001d87c <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001d819:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001d821:	83 ec 0c             	sub    esp,0xc
c001d824:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d828:	e8 6c 1d ff ff       	call   c000f599 <malloc>
c001d82d:	83 c4 10             	add    esp,0x10
c001d830:	89 c3                	mov    ebx,eax
c001d832:	83 ec 08             	sub    esp,0x8
c001d835:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d839:	53                   	push   ebx
c001d83a:	e8 47 30 ff ff       	call   c0010886 <VgaText::VgaText(char const*)>
c001d83f:	83 c4 10             	add    esp,0x10
c001d842:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d846:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d84c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d850:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d856:	83 ec 0c             	sub    esp,0xc
c001d859:	50                   	push   eax
c001d85a:	e8 e6 27 ff ff       	call   c0010045 <addToTerminalCycle(VgaText*)>
c001d85f:	83 c4 10             	add    esp,0x10
c001d862:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d866:	05 0c 01 00 00       	add    eax,0x10c
c001d86b:	83 ec 08             	sub    esp,0x8
c001d86e:	68 74 bf 02 c0       	push   0xc002bf74
c001d873:	50                   	push   eax
c001d874:	e8 93 2f fe ff       	call   c000080c <strcpy>
c001d879:	83 c4 10             	add    esp,0x10
c001d87c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d880:	83 c0 0c             	add    eax,0xc
c001d883:	83 ec 08             	sub    esp,0x8
c001d886:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d88a:	50                   	push   eax
c001d88b:	e8 7c 2f fe ff       	call   c000080c <strcpy>
c001d890:	83 c4 10             	add    esp,0x10
c001d893:	83 ec 08             	sub    esp,0x8
c001d896:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d89a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d89e:	e8 1d fc ff ff       	call   c001d4c0 <Process::addArgs(char**)>
c001d8a3:	83 c4 10             	add    esp,0x10
c001d8a6:	90                   	nop
c001d8a7:	83 c4 24             	add    esp,0x24
c001d8aa:	5b                   	pop    ebx
c001d8ab:	5e                   	pop    esi
c001d8ac:	c3                   	ret    

c001d8ad <taskStartupFunction>:
c001d8ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d8b2:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001d8b5:	c3                   	ret    

c001d8b6 <Semaphore::Semaphore(int)>:
c001d8b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d8ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d8be:	89 10                	mov    DWORD PTR [eax],edx
c001d8c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d8c4:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d8cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d8cf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d8d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d8da:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d8e1:	90                   	nop
c001d8e2:	c3                   	ret    
c001d8e3:	90                   	nop

c001d8e4 <Mutex::Mutex()>:
c001d8e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d8e8:	6a 01                	push   0x1
c001d8ea:	50                   	push   eax
c001d8eb:	e8 c6 ff ff ff       	call   c001d8b6 <Semaphore::Semaphore(int)>
c001d8f0:	83 c4 08             	add    esp,0x8
c001d8f3:	90                   	nop
c001d8f4:	c3                   	ret    
c001d8f5:	90                   	nop

c001d8f6 <Process::createThread(void (*)(void*), void*, int)>:
c001d8f6:	55                   	push   ebp
c001d8f7:	31 c9                	xor    ecx,ecx
c001d8f9:	57                   	push   edi
c001d8fa:	56                   	push   esi
c001d8fb:	53                   	push   ebx
c001d8fc:	83 ec 1c             	sub    esp,0x1c
c001d8ff:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d903:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001d90a:	89 f2                	mov    edx,esi
c001d90c:	0f b7 c2             	movzx  eax,dx
c001d90f:	83 e2 01             	and    edx,0x1
c001d912:	74 16                	je     c001d92a <Process::createThread(void (*)(void*), void*, int)+0x34>
c001d914:	d1 f8                	sar    eax,1
c001d916:	41                   	inc    ecx
c001d917:	89 c2                	mov    edx,eax
c001d919:	83 f9 10             	cmp    ecx,0x10
c001d91c:	75 ee                	jne    c001d90c <Process::createThread(void (*)(void*), void*, int)+0x16>
c001d91e:	83 c4 1c             	add    esp,0x1c
c001d921:	31 db                	xor    ebx,ebx
c001d923:	89 d8                	mov    eax,ebx
c001d925:	5b                   	pop    ebx
c001d926:	5e                   	pop    esi
c001d927:	5f                   	pop    edi
c001d928:	5d                   	pop    ebp
c001d929:	c3                   	ret    
c001d92a:	b8 01 00 00 00       	mov    eax,0x1
c001d92f:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001d932:	d3 e0                	shl    eax,cl
c001d934:	09 c6                	or     esi,eax
c001d936:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001d939:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001d940:	89 c6                	mov    esi,eax
c001d942:	c1 e6 05             	shl    esi,0x5
c001d945:	01 f0                	add    eax,esi
c001d947:	01 d8                	add    eax,ebx
c001d949:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001d950:	75 0a                	jne    c001d95c <Process::createThread(void (*)(void*), void*, int)+0x66>
c001d952:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001d95c:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d962:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001d966:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001d969:	01 ca                	add    edx,ecx
c001d96b:	83 ec 08             	sub    esp,0x8
c001d96e:	89 d0                	mov    eax,edx
c001d970:	c1 e0 05             	shl    eax,0x5
c001d973:	01 d0                	add    eax,edx
c001d975:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001d979:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d97d:	01 d8                	add    eax,ebx
c001d97f:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001d985:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001d98b:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001d991:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001d997:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001d99d:	89 cd                	mov    ebp,ecx
c001d99f:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001d9a3:	f7 dd                	neg    ebp
c001d9a5:	c1 e5 15             	shl    ebp,0x15
c001d9a8:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001d9ae:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001d9b4:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001d9be:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001d9c4:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001d9ce:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001d9d8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d9dc:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001d9e3:	53                   	push   ebx
c001d9e4:	68 e4 f2 02 c0       	push   0xc002f2e4
c001d9e9:	e8 32 b0 00 00       	call   c0028a20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d9ee:	89 d8                	mov    eax,ebx
c001d9f0:	83 c4 10             	add    esp,0x10
c001d9f3:	83 c4 1c             	add    esp,0x1c
c001d9f6:	5b                   	pop    ebx
c001d9f7:	5e                   	pop    esi
c001d9f8:	5f                   	pop    edi
c001d9f9:	5d                   	pop    ebp
c001d9fa:	c3                   	ret    
c001d9fb:	90                   	nop

c001d9fc <Process::createUserThread()>:
c001d9fc:	83 ec 0c             	sub    esp,0xc
c001d9ff:	68 80 00 00 00       	push   0x80
c001da04:	6a 00                	push   0x0
c001da06:	68 c0 d3 01 c0       	push   0xc001d3c0
c001da0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001da0f:	e8 e2 fe ff ff       	call   c001d8f6 <Process::createThread(void (*)(void*), void*, int)>
c001da14:	83 c4 1c             	add    esp,0x1c
c001da17:	c3                   	ret    

c001da18 <setupMultitasking(void (*)())>:
c001da18:	56                   	push   esi
c001da19:	53                   	push   ebx
c001da1a:	51                   	push   ecx
c001da1b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001da1f:	eb 10                	jmp    c001da31 <setupMultitasking(void (*)())+0x19>
c001da21:	83 ec 0c             	sub    esp,0xc
c001da24:	68 e4 f2 02 c0       	push   0xc002f2e4
c001da29:	e8 44 af 00 00       	call   c0028972 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001da2e:	83 c4 10             	add    esp,0x10
c001da31:	83 ec 0c             	sub    esp,0xc
c001da34:	68 e4 f2 02 c0       	push   0xc002f2e4
c001da39:	e8 10 af 00 00       	call   c002894e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001da3e:	83 c4 10             	add    esp,0x10
c001da41:	84 c0                	test   al,al
c001da43:	74 dc                	je     c001da21 <setupMultitasking(void (*)())+0x9>
c001da45:	83 ec 0c             	sub    esp,0xc
c001da48:	68 3f 07 00 00       	push   0x73f
c001da4d:	e8 47 1b ff ff       	call   c000f599 <malloc>
c001da52:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001da59:	89 c3                	mov    ebx,eax
c001da5b:	6a 00                	push   0x0
c001da5d:	68 78 bf 02 c0       	push   0xc002bf78
c001da62:	6a 01                	push   0x1
c001da64:	50                   	push   eax
c001da65:	e8 94 fc ff ff       	call   c001d6fe <Process::Process(bool, char const*, Process*, char**)>
c001da6a:	83 c4 14             	add    esp,0x14
c001da6d:	89 1d f0 f2 02 c0    	mov    DWORD PTR ds:0xc002f2f0,ebx
c001da73:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001da79:	e8 d5 28 ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c001da7e:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001da86:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001da90:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001da96:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001da99:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001daa3:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001daa9:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001daaf:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001dab9:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001dac3:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001dacd:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001dad3:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001dadd:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001dae3:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001daed:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001daf3:	58                   	pop    eax
c001daf4:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001dafa:	5a                   	pop    edx
c001dafb:	68 74 bf 02 c0       	push   0xc002bf74
c001db00:	50                   	push   eax
c001db01:	e8 06 2d fe ff       	call   c000080c <strcpy>
c001db06:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001db0d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001db11:	83 c4 14             	add    esp,0x14
c001db14:	5b                   	pop    ebx
c001db15:	5e                   	pop    esi
c001db16:	e9 39 28 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001db1b <schedule()>:
c001db1b:	a1 c4 f2 02 c0       	mov    eax,ds:0xc002f2c4
c001db20:	85 c0                	test   eax,eax
c001db22:	74 0b                	je     c001db2f <schedule()+0x14>
c001db24:	c7 05 c0 f2 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002f2c0,0x1
c001db2e:	c3                   	ret    
c001db2f:	53                   	push   ebx
c001db30:	83 ec 14             	sub    esp,0x14
c001db33:	68 e4 f2 02 c0       	push   0xc002f2e4
c001db38:	e8 11 ae 00 00       	call   c002894e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001db3d:	83 c4 10             	add    esp,0x10
c001db40:	84 c0                	test   al,al
c001db42:	75 38                	jne    c001db7c <schedule()+0x61>
c001db44:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db49:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001db4c:	4a                   	dec    edx
c001db4d:	74 32                	je     c001db81 <schedule()+0x66>
c001db4f:	83 ec 0c             	sub    esp,0xc
c001db52:	68 e4 f2 02 c0       	push   0xc002f2e4
c001db57:	e8 0e ae 00 00       	call   c002896a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001db5c:	c7 04 24 e4 f2 02 c0 	mov    DWORD PTR [esp],0xc002f2e4
c001db63:	89 c3                	mov    ebx,eax
c001db65:	e8 08 ae 00 00       	call   c0028972 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001db6a:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001db71:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001db74:	e8 9d f8 ff ff       	call   c001d416 <switchToThread(ThreadControlBlock*)>
c001db79:	83 c4 10             	add    esp,0x10
c001db7c:	83 c4 08             	add    esp,0x8
c001db7f:	5b                   	pop    ebx
c001db80:	c3                   	ret    
c001db81:	83 ec 08             	sub    esp,0x8
c001db84:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001db8b:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001db91:	68 e4 f2 02 c0       	push   0xc002f2e4
c001db96:	e8 85 ae 00 00       	call   c0028a20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001db9b:	83 c4 10             	add    esp,0x10
c001db9e:	eb af                	jmp    c001db4f <schedule()+0x34>

c001dba0 <Semaphore::tryAcquire()>:
c001dba0:	53                   	push   ebx
c001dba1:	83 ec 08             	sub    esp,0x8
c001dba4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dba8:	fa                   	cli    
c001dba9:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001dbae:	8d 50 01             	lea    edx,[eax+0x1]
c001dbb1:	89 15 c8 f2 02 c0    	mov    DWORD PTR ds:0xc002f2c8,edx
c001dbb7:	8b 15 c4 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f2c4
c001dbbd:	8d 5a 01             	lea    ebx,[edx+0x1]
c001dbc0:	89 1d c4 f2 02 c0    	mov    DWORD PTR ds:0xc002f2c4,ebx
c001dbc6:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001dbc9:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001dbcb:	7c 2a                	jl     c001dbf7 <Semaphore::tryAcquire()+0x57>
c001dbcd:	89 15 c4 f2 02 c0    	mov    DWORD PTR ds:0xc002f2c4,edx
c001dbd3:	85 d2                	test   edx,edx
c001dbd5:	75 0a                	jne    c001dbe1 <Semaphore::tryAcquire()+0x41>
c001dbd7:	8b 15 c0 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f2c0
c001dbdd:	85 d2                	test   edx,edx
c001dbdf:	75 5b                	jne    c001dc3c <Semaphore::tryAcquire()+0x9c>
c001dbe1:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c001dbe6:	85 c0                	test   eax,eax
c001dbe8:	74 07                	je     c001dbf1 <Semaphore::tryAcquire()+0x51>
c001dbea:	31 c0                	xor    eax,eax
c001dbec:	83 c4 08             	add    esp,0x8
c001dbef:	5b                   	pop    ebx
c001dbf0:	c3                   	ret    
c001dbf1:	fb                   	sti    
c001dbf2:	83 c4 08             	add    esp,0x8
c001dbf5:	5b                   	pop    ebx
c001dbf6:	c3                   	ret    
c001dbf7:	43                   	inc    ebx
c001dbf8:	89 15 c4 f2 02 c0    	mov    DWORD PTR ds:0xc002f2c4,edx
c001dbfe:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001dc01:	85 d2                	test   edx,edx
c001dc03:	75 1f                	jne    c001dc24 <Semaphore::tryAcquire()+0x84>
c001dc05:	8b 0d c0 f2 02 c0    	mov    ecx,DWORD PTR ds:0xc002f2c0
c001dc0b:	85 c9                	test   ecx,ecx
c001dc0d:	74 15                	je     c001dc24 <Semaphore::tryAcquire()+0x84>
c001dc0f:	c7 05 c0 f2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f2c0,0x0
c001dc19:	e8 fd fe ff ff       	call   c001db1b <schedule()>
c001dc1e:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001dc23:	48                   	dec    eax
c001dc24:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c001dc29:	85 c0                	test   eax,eax
c001dc2b:	75 08                	jne    c001dc35 <Semaphore::tryAcquire()+0x95>
c001dc2d:	fb                   	sti    
c001dc2e:	b0 01                	mov    al,0x1
c001dc30:	83 c4 08             	add    esp,0x8
c001dc33:	5b                   	pop    ebx
c001dc34:	c3                   	ret    
c001dc35:	b0 01                	mov    al,0x1
c001dc37:	83 c4 08             	add    esp,0x8
c001dc3a:	5b                   	pop    ebx
c001dc3b:	c3                   	ret    
c001dc3c:	c7 05 c0 f2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f2c0,0x0
c001dc46:	e8 d0 fe ff ff       	call   c001db1b <schedule()>
c001dc4b:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001dc50:	48                   	dec    eax
c001dc51:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c001dc56:	85 c0                	test   eax,eax
c001dc58:	75 90                	jne    c001dbea <Semaphore::tryAcquire()+0x4a>
c001dc5a:	eb 95                	jmp    c001dbf1 <Semaphore::tryAcquire()+0x51>

c001dc5c <Semaphore::assertLocked(char const*)>:
c001dc5c:	83 ec 0c             	sub    esp,0xc
c001dc5f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dc63:	fa                   	cli    
c001dc64:	ff 05 c8 f2 02 c0    	inc    DWORD PTR ds:0xc002f2c8
c001dc6a:	a1 c4 f2 02 c0       	mov    eax,ds:0xc002f2c4
c001dc6f:	8d 48 01             	lea    ecx,[eax+0x1]
c001dc72:	89 0d c4 f2 02 c0    	mov    DWORD PTR ds:0xc002f2c4,ecx
c001dc78:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001dc7a:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001dc7d:	7c 24                	jl     c001dca3 <Semaphore::assertLocked(char const*)+0x47>
c001dc7f:	a3 c4 f2 02 c0       	mov    ds:0xc002f2c4,eax
c001dc84:	85 c0                	test   eax,eax
c001dc86:	75 09                	jne    c001dc91 <Semaphore::assertLocked(char const*)+0x35>
c001dc88:	a1 c0 f2 02 c0       	mov    eax,ds:0xc002f2c0
c001dc8d:	85 c0                	test   eax,eax
c001dc8f:	75 29                	jne    c001dcba <Semaphore::assertLocked(char const*)+0x5e>
c001dc91:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001dc96:	48                   	dec    eax
c001dc97:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c001dc9c:	75 01                	jne    c001dc9f <Semaphore::assertLocked(char const*)+0x43>
c001dc9e:	fb                   	sti    
c001dc9f:	83 c4 0c             	add    esp,0xc
c001dca2:	c3                   	ret    
c001dca3:	83 ec 0c             	sub    esp,0xc
c001dca6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001dcaa:	e8 da c2 ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c001dcaf:	a1 c4 f2 02 c0       	mov    eax,ds:0xc002f2c4
c001dcb4:	83 c4 10             	add    esp,0x10
c001dcb7:	48                   	dec    eax
c001dcb8:	eb c5                	jmp    c001dc7f <Semaphore::assertLocked(char const*)+0x23>
c001dcba:	c7 05 c0 f2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f2c0,0x0
c001dcc4:	e8 52 fe ff ff       	call   c001db1b <schedule()>
c001dcc9:	eb c6                	jmp    c001dc91 <Semaphore::assertLocked(char const*)+0x35>

c001dccb <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001dccb:	83 ec 0c             	sub    esp,0xc
c001dcce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dcd3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dcd7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001dcda:	e8 3c fe ff ff       	call   c001db1b <schedule()>
c001dcdf:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001dce4:	48                   	dec    eax
c001dce5:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c001dcea:	75 01                	jne    c001dced <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x22>
c001dcec:	fb                   	sti    
c001dced:	83 c4 0c             	add    esp,0xc
c001dcf0:	c3                   	ret    

c001dcf1 <blockTask(TaskState)>:
c001dcf1:	83 ec 0c             	sub    esp,0xc
c001dcf4:	fa                   	cli    
c001dcf5:	ff 05 c8 f2 02 c0    	inc    DWORD PTR ds:0xc002f2c8
c001dcfb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dcff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd04:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001dd07:	e8 0f fe ff ff       	call   c001db1b <schedule()>
c001dd0c:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001dd11:	48                   	dec    eax
c001dd12:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c001dd17:	75 01                	jne    c001dd1a <blockTask(TaskState)+0x29>
c001dd19:	fb                   	sti    
c001dd1a:	83 c4 0c             	add    esp,0xc
c001dd1d:	c3                   	ret    

c001dd1e <waitTask(int, int*, int)>:
c001dd1e:	83 ec 18             	sub    esp,0x18
c001dd21:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd26:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dd2a:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001dd2d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dd31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd36:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001dd39:	6a 07                	push   0x7
c001dd3b:	e8 b1 ff ff ff       	call   c001dcf1 <blockTask(TaskState)>
c001dd40:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd45:	83 c4 10             	add    esp,0x10
c001dd48:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001dd4b:	85 d2                	test   edx,edx
c001dd4d:	74 0a                	je     c001dd59 <waitTask(int, int*, int)+0x3b>
c001dd4f:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001dd52:	89 02                	mov    DWORD PTR [edx],eax
c001dd54:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd59:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001dd5c:	83 c4 0c             	add    esp,0xc
c001dd5f:	c3                   	ret    

c001dd60 <nanoSleepUntil(unsigned long long)>:
c001dd60:	83 ec 0c             	sub    esp,0xc
c001dd63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd67:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dd6b:	3b 05 30 e4 02 c0    	cmp    eax,DWORD PTR ds:0xc002e430
c001dd71:	89 d1                	mov    ecx,edx
c001dd73:	1b 0d 34 e4 02 c0    	sbb    ecx,DWORD PTR ds:0xc002e434
c001dd79:	73 04                	jae    c001dd7f <nanoSleepUntil(unsigned long long)+0x1f>
c001dd7b:	83 c4 0c             	add    esp,0xc
c001dd7e:	c3                   	ret    
c001dd7f:	fa                   	cli    
c001dd80:	ff 05 c8 f2 02 c0    	inc    DWORD PTR ds:0xc002f2c8
c001dd86:	83 ec 08             	sub    esp,0x8
c001dd89:	ff 05 c4 f2 02 c0    	inc    DWORD PTR ds:0xc002f2c4
c001dd8f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001dd95:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001dd98:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001dd9b:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001dda1:	68 d8 f2 02 c0       	push   0xc002f2d8
c001dda6:	e8 75 ac 00 00       	call   c0028a20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ddab:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001ddb2:	e8 3a ff ff ff       	call   c001dcf1 <blockTask(TaskState)>
c001ddb7:	a1 c4 f2 02 c0       	mov    eax,ds:0xc002f2c4
c001ddbc:	83 c4 10             	add    esp,0x10
c001ddbf:	48                   	dec    eax
c001ddc0:	a3 c4 f2 02 c0       	mov    ds:0xc002f2c4,eax
c001ddc5:	85 c0                	test   eax,eax
c001ddc7:	75 09                	jne    c001ddd2 <nanoSleepUntil(unsigned long long)+0x72>
c001ddc9:	a1 c0 f2 02 c0       	mov    eax,ds:0xc002f2c0
c001ddce:	85 c0                	test   eax,eax
c001ddd0:	75 12                	jne    c001dde4 <nanoSleepUntil(unsigned long long)+0x84>
c001ddd2:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001ddd7:	48                   	dec    eax
c001ddd8:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c001dddd:	75 9c                	jne    c001dd7b <nanoSleepUntil(unsigned long long)+0x1b>
c001dddf:	fb                   	sti    
c001dde0:	83 c4 0c             	add    esp,0xc
c001dde3:	c3                   	ret    
c001dde4:	c7 05 c0 f2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f2c0,0x0
c001ddee:	e8 28 fd ff ff       	call   c001db1b <schedule()>
c001ddf3:	eb dd                	jmp    c001ddd2 <nanoSleepUntil(unsigned long long)+0x72>

c001ddf5 <nanoSleep(unsigned long long)>:
c001ddf5:	a1 30 e4 02 c0       	mov    eax,ds:0xc002e430
c001ddfa:	8b 15 34 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e434
c001de00:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001de04:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001de08:	e9 53 ff ff ff       	jmp    c001dd60 <nanoSleepUntil(unsigned long long)>

c001de0d <sleep(unsigned long long)>:
c001de0d:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001de15:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001de1a:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001de1e:	01 ca                	add    edx,ecx
c001de20:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001de24:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001de28:	eb cb                	jmp    c001ddf5 <nanoSleep(unsigned long long)>

c001de2a <Semaphore::acquire()>:
c001de2a:	83 ec 0c             	sub    esp,0xc
c001de2d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001de31:	fa                   	cli    
c001de32:	a1 c4 f2 02 c0       	mov    eax,ds:0xc002f2c4
c001de37:	ff 05 c8 f2 02 c0    	inc    DWORD PTR ds:0xc002f2c8
c001de3d:	8d 48 01             	lea    ecx,[eax+0x1]
c001de40:	89 0d c4 f2 02 c0    	mov    DWORD PTR ds:0xc002f2c4,ecx
c001de46:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001de49:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001de4b:	7d 28                	jge    c001de75 <Semaphore::acquire()+0x4b>
c001de4d:	41                   	inc    ecx
c001de4e:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001de51:	a3 c4 f2 02 c0       	mov    ds:0xc002f2c4,eax
c001de56:	85 c0                	test   eax,eax
c001de58:	75 09                	jne    c001de63 <Semaphore::acquire()+0x39>
c001de5a:	a1 c0 f2 02 c0       	mov    eax,ds:0xc002f2c0
c001de5f:	85 c0                	test   eax,eax
c001de61:	75 5d                	jne    c001dec0 <Semaphore::acquire()+0x96>
c001de63:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001de68:	48                   	dec    eax
c001de69:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c001de6e:	75 01                	jne    c001de71 <Semaphore::acquire()+0x47>
c001de70:	fb                   	sti    
c001de71:	83 c4 0c             	add    esp,0xc
c001de74:	c3                   	ret    
c001de75:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de7a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001de81:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001de84:	85 c9                	test   ecx,ecx
c001de86:	74 49                	je     c001ded1 <Semaphore::acquire()+0xa7>
c001de88:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001de8b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001de91:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001de94:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de99:	83 ec 0c             	sub    esp,0xc
c001de9c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001de9f:	68 f4 bf 02 c0       	push   0xc002bff4
c001dea4:	e8 f4 48 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001dea9:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c001deb0:	e8 3c fe ff ff       	call   c001dcf1 <blockTask(TaskState)>
c001deb5:	a1 c4 f2 02 c0       	mov    eax,ds:0xc002f2c4
c001deba:	83 c4 10             	add    esp,0x10
c001debd:	48                   	dec    eax
c001debe:	eb 91                	jmp    c001de51 <Semaphore::acquire()+0x27>
c001dec0:	c7 05 c0 f2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f2c0,0x0
c001deca:	e8 4c fc ff ff       	call   c001db1b <schedule()>
c001decf:	eb 92                	jmp    c001de63 <Semaphore::acquire()+0x39>
c001ded1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ded6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001ded9:	eb b9                	jmp    c001de94 <Semaphore::acquire()+0x6a>

c001dedb <taskReturned>:
c001dedb:	83 ec 18             	sub    esp,0x18
c001dede:	68 14 c0 02 c0       	push   0xc002c014
c001dee3:	e8 a1 c0 ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c001dee8:	83 c4 10             	add    esp,0x10
c001deeb:	83 ec 0c             	sub    esp,0xc
c001deee:	6a 02                	push   0x2
c001def0:	e8 fc fd ff ff       	call   c001dcf1 <blockTask(TaskState)>
c001def5:	fa                   	cli    
c001def6:	ff 05 c8 f2 02 c0    	inc    DWORD PTR ds:0xc002f2c8
c001defc:	e8 1a fc ff ff       	call   c001db1b <schedule()>
c001df01:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001df06:	83 c4 10             	add    esp,0x10
c001df09:	48                   	dec    eax
c001df0a:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c001df0f:	85 c0                	test   eax,eax
c001df11:	75 d8                	jne    c001deeb <taskReturned+0x10>
c001df13:	fb                   	sti    
c001df14:	eb d5                	jmp    c001deeb <taskReturned+0x10>

c001df16 <Thr::processFromPID(int)>:
c001df16:	57                   	push   edi
c001df17:	56                   	push   esi
c001df18:	53                   	push   ebx
c001df19:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001df1d:	fa                   	cli    
c001df1e:	ff 05 c8 f2 02 c0    	inc    DWORD PTR ds:0xc002f2c8
c001df24:	83 ec 0c             	sub    esp,0xc
c001df27:	68 e4 f2 02 c0       	push   0xc002f2e4
c001df2c:	e8 39 aa 00 00       	call   c002896a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001df31:	83 c4 10             	add    esp,0x10
c001df34:	89 c7                	mov    edi,eax
c001df36:	eb 14                	jmp    c001df4c <Thr::processFromPID(int)+0x36>
c001df38:	83 ec 0c             	sub    esp,0xc
c001df3b:	68 e4 f2 02 c0       	push   0xc002f2e4
c001df40:	e8 25 aa 00 00       	call   c002896a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001df45:	83 c4 10             	add    esp,0x10
c001df48:	39 f8                	cmp    eax,edi
c001df4a:	74 49                	je     c001df95 <Thr::processFromPID(int)+0x7f>
c001df4c:	83 ec 0c             	sub    esp,0xc
c001df4f:	68 e4 f2 02 c0       	push   0xc002f2e4
c001df54:	e8 11 aa 00 00       	call   c002896a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001df59:	c7 04 24 e4 f2 02 c0 	mov    DWORD PTR [esp],0xc002f2e4
c001df60:	89 c3                	mov    ebx,eax
c001df62:	e8 0b aa 00 00       	call   c0028972 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001df67:	58                   	pop    eax
c001df68:	5a                   	pop    edx
c001df69:	53                   	push   ebx
c001df6a:	68 e4 f2 02 c0       	push   0xc002f2e4
c001df6f:	e8 ac aa 00 00       	call   c0028a20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001df74:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001df77:	83 c4 10             	add    esp,0x10
c001df7a:	39 30                	cmp    DWORD PTR [eax],esi
c001df7c:	75 ba                	jne    c001df38 <Thr::processFromPID(int)+0x22>
c001df7e:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001df83:	48                   	dec    eax
c001df84:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c001df89:	74 07                	je     c001df92 <Thr::processFromPID(int)+0x7c>
c001df8b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001df8e:	5b                   	pop    ebx
c001df8f:	5e                   	pop    esi
c001df90:	5f                   	pop    edi
c001df91:	c3                   	ret    
c001df92:	fb                   	sti    
c001df93:	eb f6                	jmp    c001df8b <Thr::processFromPID(int)+0x75>
c001df95:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001df9a:	48                   	dec    eax
c001df9b:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c001dfa0:	75 05                	jne    c001dfa7 <Thr::processFromPID(int)+0x91>
c001dfa2:	fb                   	sti    
c001dfa3:	5b                   	pop    ebx
c001dfa4:	5e                   	pop    esi
c001dfa5:	5f                   	pop    edi
c001dfa6:	c3                   	ret    
c001dfa7:	5b                   	pop    ebx
c001dfa8:	31 c0                	xor    eax,eax
c001dfaa:	5e                   	pop    esi
c001dfab:	5f                   	pop    edi
c001dfac:	c3                   	ret    

c001dfad <unblockTask(ThreadControlBlock*)>:
c001dfad:	53                   	push   ebx
c001dfae:	83 ec 08             	sub    esp,0x8
c001dfb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dfb5:	fa                   	cli    
c001dfb6:	ff 05 c8 f2 02 c0    	inc    DWORD PTR ds:0xc002f2c8
c001dfbc:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001dfbf:	85 c0                	test   eax,eax
c001dfc1:	74 5a                	je     c001e01d <unblockTask(ThreadControlBlock*)+0x70>
c001dfc3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001dfc6:	48                   	dec    eax
c001dfc7:	74 31                	je     c001dffa <unblockTask(ThreadControlBlock*)+0x4d>
c001dfc9:	83 ec 0c             	sub    esp,0xc
c001dfcc:	68 e4 f2 02 c0       	push   0xc002f2e4
c001dfd1:	e8 94 a9 00 00       	call   c002896a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dfd6:	83 c4 10             	add    esp,0x10
c001dfd9:	85 c0                	test   eax,eax
c001dfdb:	75 17                	jne    c001dff4 <unblockTask(ThreadControlBlock*)+0x47>
c001dfdd:	eb 50                	jmp    c001e02f <unblockTask(ThreadControlBlock*)+0x82>
c001dfdf:	83 ec 08             	sub    esp,0x8
c001dfe2:	50                   	push   eax
c001dfe3:	68 e4 f2 02 c0       	push   0xc002f2e4
c001dfe8:	e8 05 ad 00 00       	call   c0028cf2 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001dfed:	83 c4 10             	add    esp,0x10
c001dff0:	85 c0                	test   eax,eax
c001dff2:	74 3b                	je     c001e02f <unblockTask(ThreadControlBlock*)+0x82>
c001dff4:	39 c3                	cmp    ebx,eax
c001dff6:	75 e7                	jne    c001dfdf <unblockTask(ThreadControlBlock*)+0x32>
c001dff8:	eb 10                	jmp    c001e00a <unblockTask(ThreadControlBlock*)+0x5d>
c001dffa:	83 ec 0c             	sub    esp,0xc
c001dffd:	68 96 bf 02 c0       	push   0xc002bf96
c001e002:	e8 96 47 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001e007:	83 c4 10             	add    esp,0x10
c001e00a:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001e00f:	48                   	dec    eax
c001e010:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c001e015:	75 01                	jne    c001e018 <unblockTask(ThreadControlBlock*)+0x6b>
c001e017:	fb                   	sti    
c001e018:	83 c4 08             	add    esp,0x8
c001e01b:	5b                   	pop    ebx
c001e01c:	c3                   	ret    
c001e01d:	83 ec 0c             	sub    esp,0xc
c001e020:	68 7f bf 02 c0       	push   0xc002bf7f
c001e025:	e8 73 47 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001e02a:	83 c4 10             	add    esp,0x10
c001e02d:	eb db                	jmp    c001e00a <unblockTask(ThreadControlBlock*)+0x5d>
c001e02f:	83 ec 08             	sub    esp,0x8
c001e032:	53                   	push   ebx
c001e033:	68 e4 f2 02 c0       	push   0xc002f2e4
c001e038:	e8 e3 a9 00 00       	call   c0028a20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e03d:	83 c4 10             	add    esp,0x10
c001e040:	eb c8                	jmp    c001e00a <unblockTask(ThreadControlBlock*)+0x5d>

c001e042 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e042:	55                   	push   ebp
c001e043:	57                   	push   edi
c001e044:	56                   	push   esi
c001e045:	53                   	push   ebx
c001e046:	83 ec 1c             	sub    esp,0x1c
c001e049:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e04d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e050:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e056:	85 ff                	test   edi,edi
c001e058:	7e 20                	jle    c001e07a <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e05a:	31 f6                	xor    esi,esi
c001e05c:	83 ec 0c             	sub    esp,0xc
c001e05f:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e066:	46                   	inc    esi
c001e067:	e8 3d 15 ff ff       	call   c000f5a9 <free>
c001e06c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e06f:	83 c4 10             	add    esp,0x10
c001e072:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e078:	7f e2                	jg     c001e05c <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e07a:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e084:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e089:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e08c:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e08f:	d3 c0                	rol    eax,cl
c001e091:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e098:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e09b:	89 f7                	mov    edi,esi
c001e09d:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e0a5:	0f 85 64 01 00 00    	jne    c001e20f <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e0ab:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e0b1:	85 ed                	test   ebp,ebp
c001e0b3:	74 1b                	je     c001e0d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e0b5:	83 ec 0c             	sub    esp,0xc
c001e0b8:	55                   	push   ebp
c001e0b9:	e8 70 bc ff ff       	call   c0019d2e <EnvVarContainer::~EnvVarContainer()>
c001e0be:	59                   	pop    ecx
c001e0bf:	5e                   	pop    esi
c001e0c0:	6a 0c                	push   0xc
c001e0c2:	55                   	push   ebp
c001e0c3:	e8 fd 45 ff ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c001e0c8:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e0cb:	83 c4 10             	add    esp,0x10
c001e0ce:	89 f7                	mov    edi,esi
c001e0d0:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e0d6:	85 c0                	test   eax,eax
c001e0d8:	0f 84 aa 00 00 00    	je     c001e188 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e0de:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e0e1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e0e5:	31 c9                	xor    ecx,ecx
c001e0e7:	eb 10                	jmp    c001e0f9 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e0e9:	41                   	inc    ecx
c001e0ea:	83 f9 10             	cmp    ecx,0x10
c001e0ed:	0f 84 95 00 00 00    	je     c001e188 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e0f3:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e0f9:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e100:	d3 fa                	sar    edx,cl
c001e102:	83 e2 01             	and    edx,0x1
c001e105:	74 e2                	je     c001e0e9 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e107:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e10a:	01 ca                	add    edx,ecx
c001e10c:	89 d5                	mov    ebp,edx
c001e10e:	c1 e5 05             	shl    ebp,0x5
c001e111:	01 ea                	add    edx,ebp
c001e113:	01 d0                	add    eax,edx
c001e115:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e11b:	83 fd 07             	cmp    ebp,0x7
c001e11e:	75 c9                	jne    c001e0e9 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e120:	05 40 02 00 00       	add    eax,0x240
c001e125:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e128:	83 fd ff             	cmp    ebp,0xffffffff
c001e12b:	0f 8c e6 00 00 00    	jl     c001e217 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d5>
c001e131:	0f 84 97 01 00 00    	je     c001e2ce <cleanupTerminatedTask(ThreadControlBlock*)+0x28c>
c001e137:	85 ed                	test   ebp,ebp
c001e139:	0f 84 7e 01 00 00    	je     c001e2bd <cleanupTerminatedTask(ThreadControlBlock*)+0x27b>
c001e13f:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e141:	75 a6                	jne    c001e0e9 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e143:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e149:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e14d:	01 d0                	add    eax,edx
c001e14f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e153:	83 ec 0c             	sub    esp,0xc
c001e156:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e15c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e15f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e165:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e16c:	50                   	push   eax
c001e16d:	e8 3b fe ff ff       	call   c001dfad <unblockTask(ThreadControlBlock*)>
c001e172:	83 c4 10             	add    esp,0x10
c001e175:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e178:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e17c:	89 f7                	mov    edi,esi
c001e17e:	41                   	inc    ecx
c001e17f:	83 f9 10             	cmp    ecx,0x10
c001e182:	0f 85 6b ff ff ff    	jne    c001e0f3 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e188:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e18e:	85 c0                	test   eax,eax
c001e190:	74 5d                	je     c001e1ef <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e192:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e198:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e19e:	74 4f                	je     c001e1ef <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e1a0:	83 ec 0c             	sub    esp,0xc
c001e1a3:	68 e4 f2 02 c0       	push   0xc002f2e4
c001e1a8:	e8 bd a7 00 00       	call   c002896a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e1ad:	c7 04 24 e4 f2 02 c0 	mov    DWORD PTR [esp],0xc002f2e4
c001e1b4:	89 c7                	mov    edi,eax
c001e1b6:	e8 93 a7 00 00       	call   c002894e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e1bb:	83 c4 10             	add    esp,0x10
c001e1be:	84 c0                	test   al,al
c001e1c0:	0f 84 c2 00 00 00    	je     c001e288 <cleanupTerminatedTask(ThreadControlBlock*)+0x246>
c001e1c6:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e1c9:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e1cf:	85 d2                	test   edx,edx
c001e1d1:	74 0f                	je     c001e1e2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e1d3:	83 ec 0c             	sub    esp,0xc
c001e1d6:	8b 02                	mov    eax,DWORD PTR [edx]
c001e1d8:	52                   	push   edx
c001e1d9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e1dc:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e1df:	83 c4 10             	add    esp,0x10
c001e1e2:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e1ec:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e1ef:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e1f5:	85 db                	test   ebx,ebx
c001e1f7:	74 16                	je     c001e20f <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e1f9:	83 ec 0c             	sub    esp,0xc
c001e1fc:	53                   	push   ebx
c001e1fd:	e8 f4 36 ff ff       	call   c00118f6 <VAS::~VAS()>
c001e202:	58                   	pop    eax
c001e203:	5a                   	pop    edx
c001e204:	6a 14                	push   0x14
c001e206:	53                   	push   ebx
c001e207:	e8 b9 44 ff ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c001e20c:	83 c4 10             	add    esp,0x10
c001e20f:	83 c4 1c             	add    esp,0x1c
c001e212:	5b                   	pop    ebx
c001e213:	5e                   	pop    esi
c001e214:	5f                   	pop    edi
c001e215:	5d                   	pop    ebp
c001e216:	c3                   	ret    
c001e217:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e21b:	83 ec 0c             	sub    esp,0xc
c001e21e:	68 48 c0 02 c0       	push   0xc002c048
c001e223:	e8 61 bd ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c001e228:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e22b:	83 c4 10             	add    esp,0x10
c001e22e:	89 f7                	mov    edi,esi
c001e230:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e234:	e9 b0 fe ff ff       	jmp    c001e0e9 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e239:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e23f:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e245:	75 1c                	jne    c001e263 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e247:	83 ec 0c             	sub    esp,0xc
c001e24a:	68 b0 c0 02 c0       	push   0xc002c0b0
c001e24f:	e8 49 45 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001e254:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e25b:	e8 91 fa ff ff       	call   c001dcf1 <blockTask(TaskState)>
c001e260:	83 c4 10             	add    esp,0x10
c001e263:	83 ec 08             	sub    esp,0x8
c001e266:	56                   	push   esi
c001e267:	68 e4 f2 02 c0       	push   0xc002f2e4
c001e26c:	e8 af a7 00 00       	call   c0028a20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e271:	c7 04 24 e4 f2 02 c0 	mov    DWORD PTR [esp],0xc002f2e4
c001e278:	e8 ed a6 00 00       	call   c002896a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e27d:	83 c4 10             	add    esp,0x10
c001e280:	39 f8                	cmp    eax,edi
c001e282:	0f 84 3e ff ff ff    	je     c001e1c6 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e288:	83 ec 0c             	sub    esp,0xc
c001e28b:	68 e4 f2 02 c0       	push   0xc002f2e4
c001e290:	e8 d5 a6 00 00       	call   c002896a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e295:	c7 04 24 e4 f2 02 c0 	mov    DWORD PTR [esp],0xc002f2e4
c001e29c:	89 c6                	mov    esi,eax
c001e29e:	e8 cf a6 00 00       	call   c0028972 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e2a3:	83 c4 10             	add    esp,0x10
c001e2a6:	39 f3                	cmp    ebx,esi
c001e2a8:	74 b9                	je     c001e263 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e2aa:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e2ad:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e2b0:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e2b6:	75 ab                	jne    c001e263 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e2b8:	e9 7c ff ff ff       	jmp    c001e239 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e2bd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e2c1:	83 ec 0c             	sub    esp,0xc
c001e2c4:	68 7c c0 02 c0       	push   0xc002c07c
c001e2c9:	e9 55 ff ff ff       	jmp    c001e223 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e1>
c001e2ce:	8b 36                	mov    esi,DWORD PTR [esi]
c001e2d0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e2d4:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e2d7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e2da:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e2e0:	01 d7                	add    edi,edx
c001e2e2:	89 f8                	mov    eax,edi
c001e2e4:	e9 66 fe ff ff       	jmp    c001e14f <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e2e9 <cleanerTaskFunction(void*)>:
c001e2e9:	53                   	push   ebx
c001e2ea:	83 ec 08             	sub    esp,0x8
c001e2ed:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001e2f2:	48                   	dec    eax
c001e2f3:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c001e2f8:	75 01                	jne    c001e2fb <cleanerTaskFunction(void*)+0x12>
c001e2fa:	fb                   	sti    
c001e2fb:	fa                   	cli    
c001e2fc:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001e301:	80 3d ac f2 02 c0 00 	cmp    BYTE PTR ds:0xc002f2ac,0x0
c001e308:	8d 50 01             	lea    edx,[eax+0x1]
c001e30b:	89 15 c8 f2 02 c0    	mov    DWORD PTR ds:0xc002f2c8,edx
c001e311:	0f 84 a1 00 00 00    	je     c001e3b8 <cleanerTaskFunction(void*)+0xcf>
c001e317:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c001e31c:	85 c0                	test   eax,eax
c001e31e:	75 01                	jne    c001e321 <cleanerTaskFunction(void*)+0x38>
c001e320:	fb                   	sti    
c001e321:	c6 05 ac f2 02 c0 00 	mov    BYTE PTR ds:0xc002f2ac,0x0
c001e328:	fa                   	cli    
c001e329:	ff 05 c8 f2 02 c0    	inc    DWORD PTR ds:0xc002f2c8
c001e32f:	ff 05 c4 f2 02 c0    	inc    DWORD PTR ds:0xc002f2c4
c001e335:	fa                   	cli    
c001e336:	ff 05 c8 f2 02 c0    	inc    DWORD PTR ds:0xc002f2c8
c001e33c:	eb 26                	jmp    c001e364 <cleanerTaskFunction(void*)+0x7b>
c001e33e:	83 ec 0c             	sub    esp,0xc
c001e341:	68 cc f2 02 c0       	push   0xc002f2cc
c001e346:	e8 1f a6 00 00       	call   c002896a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e34b:	c7 04 24 cc f2 02 c0 	mov    DWORD PTR [esp],0xc002f2cc
c001e352:	89 c3                	mov    ebx,eax
c001e354:	e8 19 a6 00 00       	call   c0028972 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e359:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e35c:	e8 e1 fc ff ff       	call   c001e042 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e361:	83 c4 10             	add    esp,0x10
c001e364:	83 ec 0c             	sub    esp,0xc
c001e367:	68 cc f2 02 c0       	push   0xc002f2cc
c001e36c:	e8 dd a5 00 00       	call   c002894e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e371:	83 c4 10             	add    esp,0x10
c001e374:	84 c0                	test   al,al
c001e376:	74 c6                	je     c001e33e <cleanerTaskFunction(void*)+0x55>
c001e378:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001e37d:	48                   	dec    eax
c001e37e:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c001e383:	75 01                	jne    c001e386 <cleanerTaskFunction(void*)+0x9d>
c001e385:	fb                   	sti    
c001e386:	a1 c4 f2 02 c0       	mov    eax,ds:0xc002f2c4
c001e38b:	48                   	dec    eax
c001e38c:	a3 c4 f2 02 c0       	mov    ds:0xc002f2c4,eax
c001e391:	0f 85 56 ff ff ff    	jne    c001e2ed <cleanerTaskFunction(void*)+0x4>
c001e397:	a1 c0 f2 02 c0       	mov    eax,ds:0xc002f2c0
c001e39c:	85 c0                	test   eax,eax
c001e39e:	0f 84 49 ff ff ff    	je     c001e2ed <cleanerTaskFunction(void*)+0x4>
c001e3a4:	c7 05 c0 f2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f2c0,0x0
c001e3ae:	e8 68 f7 ff ff       	call   c001db1b <schedule()>
c001e3b3:	e9 35 ff ff ff       	jmp    c001e2ed <cleanerTaskFunction(void*)+0x4>
c001e3b8:	83 ec 0c             	sub    esp,0xc
c001e3bb:	6a 02                	push   0x2
c001e3bd:	e8 09 f9 ff ff       	call   c001dccb <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e3c2:	83 c4 10             	add    esp,0x10
c001e3c5:	e9 57 ff ff ff       	jmp    c001e321 <cleanerTaskFunction(void*)+0x38>

c001e3ca <terminateTask(int)>:
c001e3ca:	83 ec 14             	sub    esp,0x14
c001e3cd:	fa                   	cli    
c001e3ce:	ff 05 c8 f2 02 c0    	inc    DWORD PTR ds:0xc002f2c8
c001e3d4:	ff 05 c4 f2 02 c0    	inc    DWORD PTR ds:0xc002f2c4
c001e3da:	fa                   	cli    
c001e3db:	ff 05 c8 f2 02 c0    	inc    DWORD PTR ds:0xc002f2c8
c001e3e1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e3e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e3ea:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e3ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e3f2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e3f5:	50                   	push   eax
c001e3f6:	68 cc f2 02 c0       	push   0xc002f2cc
c001e3fb:	e8 20 a6 00 00       	call   c0028a20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e400:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e405:	83 c4 10             	add    esp,0x10
c001e408:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e40f:	a1 a8 f2 02 c0       	mov    eax,ds:0xc002f2a8
c001e414:	85 c0                	test   eax,eax
c001e416:	74 53                	je     c001e46b <terminateTask(int)+0xa1>
c001e418:	83 ec 0c             	sub    esp,0xc
c001e41b:	c6 05 ac f2 02 c0 01 	mov    BYTE PTR ds:0xc002f2ac,0x1
c001e422:	50                   	push   eax
c001e423:	e8 85 fb ff ff       	call   c001dfad <unblockTask(ThreadControlBlock*)>
c001e428:	83 c4 10             	add    esp,0x10
c001e42b:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001e430:	48                   	dec    eax
c001e431:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c001e436:	75 01                	jne    c001e439 <terminateTask(int)+0x6f>
c001e438:	fb                   	sti    
c001e439:	a1 c4 f2 02 c0       	mov    eax,ds:0xc002f2c4
c001e43e:	48                   	dec    eax
c001e43f:	a3 c4 f2 02 c0       	mov    ds:0xc002f2c4,eax
c001e444:	75 09                	jne    c001e44f <terminateTask(int)+0x85>
c001e446:	83 3d c0 f2 02 c0 00 	cmp    DWORD PTR ds:0xc002f2c0,0x0
c001e44d:	75 2e                	jne    c001e47d <terminateTask(int)+0xb3>
c001e44f:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001e454:	48                   	dec    eax
c001e455:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c001e45a:	75 01                	jne    c001e45d <terminateTask(int)+0x93>
c001e45c:	fb                   	sti    
c001e45d:	fa                   	cli    
c001e45e:	ff 05 c8 f2 02 c0    	inc    DWORD PTR ds:0xc002f2c8
c001e464:	e8 b2 f6 ff ff       	call   c001db1b <schedule()>
c001e469:	eb e4                	jmp    c001e44f <terminateTask(int)+0x85>
c001e46b:	83 ec 0c             	sub    esp,0xc
c001e46e:	68 ad bf 02 c0       	push   0xc002bfad
c001e473:	e8 25 43 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001e478:	83 c4 10             	add    esp,0x10
c001e47b:	eb ae                	jmp    c001e42b <terminateTask(int)+0x61>
c001e47d:	c7 05 c0 f2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f2c0,0x0
c001e487:	eb db                	jmp    c001e464 <terminateTask(int)+0x9a>

c001e489 <Thr::terminateFromIRQ(int)>:
c001e489:	83 ec 18             	sub    esp,0x18
c001e48c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e490:	e8 35 ff ff ff       	call   c001e3ca <terminateTask(int)>
c001e495:	90                   	nop

c001e496 <Semaphore::release()>:
c001e496:	83 ec 0c             	sub    esp,0xc
c001e499:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e49d:	fa                   	cli    
c001e49e:	a1 c4 f2 02 c0       	mov    eax,ds:0xc002f2c4
c001e4a3:	ff 05 c8 f2 02 c0    	inc    DWORD PTR ds:0xc002f2c8
c001e4a9:	8d 48 01             	lea    ecx,[eax+0x1]
c001e4ac:	89 0d c4 f2 02 c0    	mov    DWORD PTR ds:0xc002f2c4,ecx
c001e4b2:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e4b5:	85 c9                	test   ecx,ecx
c001e4b7:	74 3c                	je     c001e4f5 <Semaphore::release()+0x5f>
c001e4b9:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001e4bc:	83 ec 0c             	sub    esp,0xc
c001e4bf:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e4c2:	51                   	push   ecx
c001e4c3:	e8 e5 fa ff ff       	call   c001dfad <unblockTask(ThreadControlBlock*)>
c001e4c8:	a1 c4 f2 02 c0       	mov    eax,ds:0xc002f2c4
c001e4cd:	83 c4 10             	add    esp,0x10
c001e4d0:	48                   	dec    eax
c001e4d1:	a3 c4 f2 02 c0       	mov    ds:0xc002f2c4,eax
c001e4d6:	85 c0                	test   eax,eax
c001e4d8:	75 09                	jne    c001e4e3 <Semaphore::release()+0x4d>
c001e4da:	a1 c0 f2 02 c0       	mov    eax,ds:0xc002f2c0
c001e4df:	85 c0                	test   eax,eax
c001e4e1:	75 17                	jne    c001e4fa <Semaphore::release()+0x64>
c001e4e3:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001e4e8:	48                   	dec    eax
c001e4e9:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c001e4ee:	75 01                	jne    c001e4f1 <Semaphore::release()+0x5b>
c001e4f0:	fb                   	sti    
c001e4f1:	83 c4 0c             	add    esp,0xc
c001e4f4:	c3                   	ret    
c001e4f5:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001e4f8:	eb d7                	jmp    c001e4d1 <Semaphore::release()+0x3b>
c001e4fa:	c7 05 c0 f2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f2c0,0x0
c001e504:	e8 12 f6 ff ff       	call   c001db1b <schedule()>
c001e509:	eb d8                	jmp    c001e4e3 <Semaphore::release()+0x4d>

c001e50b <__static_initialization_and_destruction_0(int, int)>:
c001e50b:	83 ec 0c             	sub    esp,0xc
c001e50e:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e513:	0f 85 88 00 00 00    	jne    c001e5a1 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e519:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e521:	75 7e                	jne    c001e5a1 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e523:	83 ec 0c             	sub    esp,0xc
c001e526:	68 e4 f2 02 c0       	push   0xc002f2e4
c001e52b:	e8 80 a7 00 00       	call   c0028cb0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e530:	83 c4 10             	add    esp,0x10
c001e533:	83 ec 04             	sub    esp,0x4
c001e536:	68 90 cb 02 c0       	push   0xc002cb90
c001e53b:	68 e4 f2 02 c0       	push   0xc002f2e4
c001e540:	68 64 8c 02 c0       	push   0xc0028c64
c001e545:	e8 f5 40 ff ff       	call   c001263f <__cxa_atexit>
c001e54a:	83 c4 10             	add    esp,0x10
c001e54d:	83 ec 0c             	sub    esp,0xc
c001e550:	68 d8 f2 02 c0       	push   0xc002f2d8
c001e555:	e8 56 a7 00 00       	call   c0028cb0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e55a:	83 c4 10             	add    esp,0x10
c001e55d:	83 ec 04             	sub    esp,0x4
c001e560:	68 90 cb 02 c0       	push   0xc002cb90
c001e565:	68 d8 f2 02 c0       	push   0xc002f2d8
c001e56a:	68 64 8c 02 c0       	push   0xc0028c64
c001e56f:	e8 cb 40 ff ff       	call   c001263f <__cxa_atexit>
c001e574:	83 c4 10             	add    esp,0x10
c001e577:	83 ec 0c             	sub    esp,0xc
c001e57a:	68 cc f2 02 c0       	push   0xc002f2cc
c001e57f:	e8 2c a7 00 00       	call   c0028cb0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e584:	83 c4 10             	add    esp,0x10
c001e587:	83 ec 04             	sub    esp,0x4
c001e58a:	68 90 cb 02 c0       	push   0xc002cb90
c001e58f:	68 cc f2 02 c0       	push   0xc002f2cc
c001e594:	68 64 8c 02 c0       	push   0xc0028c64
c001e599:	e8 a1 40 ff ff       	call   c001263f <__cxa_atexit>
c001e59e:	83 c4 10             	add    esp,0x10
c001e5a1:	90                   	nop
c001e5a2:	83 c4 0c             	add    esp,0xc
c001e5a5:	c3                   	ret    

c001e5a6 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e5a6:	83 ec 0c             	sub    esp,0xc
c001e5a9:	83 ec 08             	sub    esp,0x8
c001e5ac:	68 ff ff 00 00       	push   0xffff
c001e5b1:	6a 01                	push   0x1
c001e5b3:	e8 53 ff ff ff       	call   c001e50b <__static_initialization_and_destruction_0(int, int)>
c001e5b8:	83 c4 10             	add    esp,0x10
c001e5bb:	83 c4 0c             	add    esp,0xc
c001e5be:	c3                   	ret    

c001e5bf <Vm::inbv(unsigned short)>:
c001e5bf:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e5c3:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e5c8:	75 06                	jne    c001e5d0 <Vm::inbv(unsigned short)+0x11>
c001e5ca:	a0 2c f3 02 c0       	mov    al,ds:0xc002f32c
c001e5cf:	c3                   	ret    
c001e5d0:	ec                   	in     al,dx
c001e5d1:	c3                   	ret    

c001e5d2 <Vm::outbv(unsigned short, unsigned char)>:
c001e5d2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e5d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e5da:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e5df:	75 25                	jne    c001e606 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001e5e1:	8b 0d 2c f3 02 c0    	mov    ecx,DWORD PTR ds:0xc002f32c
c001e5e7:	8d 51 01             	lea    edx,[ecx+0x1]
c001e5ea:	88 81 40 f3 02 c0    	mov    BYTE PTR [ecx-0x3ffd0cc0],al
c001e5f0:	89 15 2c f3 02 c0    	mov    DWORD PTR ds:0xc002f32c,edx
c001e5f6:	83 fa 20             	cmp    edx,0x20
c001e5f9:	75 0c                	jne    c001e607 <Vm::outbv(unsigned short, unsigned char)+0x35>
c001e5fb:	c7 05 2c f3 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002f32c,0x1f
c001e605:	c3                   	ret    
c001e606:	ee                   	out    dx,al
c001e607:	c3                   	ret    

c001e608 <Vm::realToLinear(unsigned short, unsigned short)>:
c001e608:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e60d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e612:	c1 e0 04             	shl    eax,0x4
c001e615:	01 d0                	add    eax,edx
c001e617:	c3                   	ret    

c001e618 <Vm::getSegment(unsigned int)>:
c001e618:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e61c:	c1 e8 10             	shr    eax,0x10
c001e61f:	c3                   	ret    

c001e620 <Vm::getOffset(unsigned int)>:
c001e620:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e624:	c3                   	ret    

c001e625 <Vm::mainloop2()>:
c001e625:	83 ec 18             	sub    esp,0x18
c001e628:	fa                   	cli    
c001e629:	ff 05 c8 f2 02 c0    	inc    DWORD PTR ds:0xc002f2c8
c001e62f:	6a 02                	push   0x2
c001e631:	c6 05 25 f3 02 c0 01 	mov    BYTE PTR ds:0xc002f325,0x1
c001e638:	e8 8e f6 ff ff       	call   c001dccb <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e63d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e642:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e646:	52                   	push   edx
c001e647:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e64b:	52                   	push   edx
c001e64c:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e650:	52                   	push   edx
c001e651:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e655:	50                   	push   eax
c001e656:	e8 9f 1c fe ff       	call   c00002fa <goToVM86>
c001e65b:	83 c4 2c             	add    esp,0x2c
c001e65e:	c3                   	ret    

c001e65f <Vm::mainVm8086Loop(void*)>:
c001e65f:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001e664:	48                   	dec    eax
c001e665:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c001e66a:	75 01                	jne    c001e66d <Vm::mainVm8086Loop(void*)+0xe>
c001e66c:	fb                   	sti    
c001e66d:	eb b6                	jmp    c001e625 <Vm::mainloop2()>

c001e66f <Vm::mainloop3(unsigned long)>:
c001e66f:	83 ec 18             	sub    esp,0x18
c001e672:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e676:	fa                   	cli    
c001e677:	ff 05 c8 f2 02 c0    	inc    DWORD PTR ds:0xc002f2c8
c001e67d:	6a 02                	push   0x2
c001e67f:	c6 05 24 f3 02 c0 01 	mov    BYTE PTR ds:0xc002f324,0x1
c001e686:	a3 20 f3 02 c0       	mov    ds:0xc002f320,eax
c001e68b:	e8 3b f6 ff ff       	call   c001dccb <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e690:	83 c4 1c             	add    esp,0x1c
c001e693:	eb 90                	jmp    c001e625 <Vm::mainloop2()>

c001e695 <Vm::initialise8086()>:
c001e695:	83 ec 0c             	sub    esp,0xc
c001e698:	68 80 00 00 00       	push   0x80
c001e69d:	6a 00                	push   0x0
c001e69f:	68 5f e6 01 c0       	push   0xc001e65f
c001e6a4:	ff 35 f0 f2 02 c0    	push   DWORD PTR ds:0xc002f2f0
c001e6aa:	e8 47 f2 ff ff       	call   c001d8f6 <Process::createThread(void (*)(void*), void*, int)>
c001e6af:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e6b6:	a3 28 f3 02 c0       	mov    ds:0xc002f328,eax
c001e6bb:	68 00 01 00 00       	push   0x100
c001e6c0:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c001e6c5:	6a 00                	push   0x0
c001e6c7:	6a 00                	push   0x0
c001e6c9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001e6cf:	e8 94 36 ff ff       	call   c0011d68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e6d4:	83 c4 2c             	add    esp,0x2c
c001e6d7:	c3                   	ret    

c001e6d8 <Vm::finish8086()>:
c001e6d8:	53                   	push   ebx
c001e6d9:	83 ec 08             	sub    esp,0x8
c001e6dc:	fa                   	cli    
c001e6dd:	ff 05 c8 f2 02 c0    	inc    DWORD PTR ds:0xc002f2c8
c001e6e3:	80 3d 24 f3 02 c0 00 	cmp    BYTE PTR ds:0xc002f324,0x0
c001e6ea:	75 15                	jne    c001e701 <Vm::finish8086()+0x29>
c001e6ec:	e8 2a f4 ff ff       	call   c001db1b <schedule()>
c001e6f1:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001e6f6:	48                   	dec    eax
c001e6f7:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c001e6fc:	75 de                	jne    c001e6dc <Vm::finish8086()+0x4>
c001e6fe:	fb                   	sti    
c001e6ff:	eb db                	jmp    c001e6dc <Vm::finish8086()+0x4>
c001e701:	83 ec 0c             	sub    esp,0xc
c001e704:	8b 1d 20 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f320
c001e70a:	ff 35 28 f3 02 c0    	push   DWORD PTR ds:0xc002f328
c001e710:	c6 05 24 f3 02 c0 00 	mov    BYTE PTR ds:0xc002f324,0x0
c001e717:	e8 91 f8 ff ff       	call   c001dfad <unblockTask(ThreadControlBlock*)>
c001e71c:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001e721:	83 c4 10             	add    esp,0x10
c001e724:	8d 50 ff             	lea    edx,[eax-0x1]
c001e727:	89 15 c8 f2 02 c0    	mov    DWORD PTR ds:0xc002f2c8,edx
c001e72d:	85 d2                	test   edx,edx
c001e72f:	75 01                	jne    c001e732 <Vm::finish8086()+0x5a>
c001e731:	fb                   	sti    
c001e732:	89 d8                	mov    eax,ebx
c001e734:	83 c4 08             	add    esp,0x8
c001e737:	5b                   	pop    ebx
c001e738:	c3                   	ret    

c001e739 <Vm::getOutput8086(unsigned char*)>:
c001e739:	57                   	push   edi
c001e73a:	8b 0d 2c f3 02 c0    	mov    ecx,DWORD PTR ds:0xc002f32c
c001e740:	56                   	push   esi
c001e741:	be 40 f3 02 c0       	mov    esi,0xc002f340
c001e746:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e74a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e74c:	a1 2c f3 02 c0       	mov    eax,ds:0xc002f32c
c001e751:	5e                   	pop    esi
c001e752:	c7 05 2c f3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f32c,0x0
c001e75c:	5f                   	pop    edi
c001e75d:	c3                   	ret    

c001e75e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001e75e:	55                   	push   ebp
c001e75f:	57                   	push   edi
c001e760:	56                   	push   esi
c001e761:	53                   	push   ebx
c001e762:	83 ec 2c             	sub    esp,0x2c
c001e765:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001e769:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001e76d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e771:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e775:	fa                   	cli    
c001e776:	ff 05 c8 f2 02 c0    	inc    DWORD PTR ds:0xc002f2c8
c001e77c:	0f b6 35 25 f3 02 c0 	movzx  esi,BYTE PTR ds:0xc002f325
c001e783:	89 f0                	mov    eax,esi
c001e785:	84 c0                	test   al,al
c001e787:	75 1d                	jne    c001e7a6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001e789:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e78d:	e8 89 f3 ff ff       	call   c001db1b <schedule()>
c001e792:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001e797:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e79b:	48                   	dec    eax
c001e79c:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c001e7a1:	75 d2                	jne    c001e775 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e7a3:	fb                   	sti    
c001e7a4:	eb cf                	jmp    c001e775 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e7a6:	a1 28 f3 02 c0       	mov    eax,ds:0xc002f328
c001e7ab:	c7 05 2c f3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f32c,0x0
c001e7b5:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001e7b9:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001e7bd:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001e7c1:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001e7c5:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001e7c9:	50                   	push   eax
c001e7ca:	6a 20                	push   0x20
c001e7cc:	6a 00                	push   0x0
c001e7ce:	68 40 f3 02 c0       	push   0xc002f340
c001e7d3:	e8 78 1f fe ff       	call   c0000750 <memset>
c001e7d8:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001e7df:	e8 b5 0d ff ff       	call   c000f599 <malloc>
c001e7e4:	83 c4 0c             	add    esp,0xc
c001e7e7:	89 c3                	mov    ebx,eax
c001e7e9:	ff 35 f0 f2 02 c0    	push   DWORD PTR ds:0xc002f2f0
c001e7ef:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e7f3:	50                   	push   eax
c001e7f4:	e8 03 45 ff ff       	call   c0012cfc <File::File(char const*, Process*)>
c001e7f9:	83 c4 10             	add    esp,0x10
c001e7fc:	85 db                	test   ebx,ebx
c001e7fe:	75 0a                	jne    c001e80a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001e800:	83 ec 0c             	sub    esp,0xc
c001e803:	68 d8 c0 02 c0       	push   0xc002c0d8
c001e808:	eb 3e                	jmp    c001e848 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e80a:	50                   	push   eax
c001e80b:	8d 44 24 17          	lea    eax,[esp+0x17]
c001e80f:	50                   	push   eax
c001e810:	8d 44 24 20          	lea    eax,[esp+0x20]
c001e814:	50                   	push   eax
c001e815:	53                   	push   ebx
c001e816:	e8 f1 47 ff ff       	call   c001300c <File::stat(unsigned long long*, bool*)>
c001e81b:	83 c4 10             	add    esp,0x10
c001e81e:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001e823:	74 0a                	je     c001e82f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001e825:	83 ec 0c             	sub    esp,0xc
c001e828:	68 ec c0 02 c0       	push   0xc002c0ec
c001e82d:	eb 19                	jmp    c001e848 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e82f:	51                   	push   ecx
c001e830:	51                   	push   ecx
c001e831:	6a 01                	push   0x1
c001e833:	53                   	push   ebx
c001e834:	e8 27 45 ff ff       	call   c0012d60 <File::open(FileOpenMode)>
c001e839:	83 c4 10             	add    esp,0x10
c001e83c:	85 c0                	test   eax,eax
c001e83e:	74 24                	je     c001e864 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001e840:	83 ec 0c             	sub    esp,0xc
c001e843:	68 05 c1 02 c0       	push   0xc002c105
c001e848:	e8 3c b7 ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c001e84d:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001e852:	83 c4 10             	add    esp,0x10
c001e855:	48                   	dec    eax
c001e856:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c001e85b:	85 c0                	test   eax,eax
c001e85d:	75 01                	jne    c001e860 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001e85f:	fb                   	sti    
c001e860:	31 f6                	xor    esi,esi
c001e862:	eb 58                	jmp    c001e8bc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001e864:	0f b7 ed             	movzx  ebp,bp
c001e867:	50                   	push   eax
c001e868:	0f b7 ff             	movzx  edi,di
c001e86b:	50                   	push   eax
c001e86c:	55                   	push   ebp
c001e86d:	57                   	push   edi
c001e86e:	e8 95 fd ff ff       	call   c001e608 <Vm::realToLinear(unsigned short, unsigned short)>
c001e873:	5a                   	pop    edx
c001e874:	8b 13                	mov    edx,DWORD PTR [ebx]
c001e876:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001e87a:	51                   	push   ecx
c001e87b:	50                   	push   eax
c001e87c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e880:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e884:	53                   	push   ebx
c001e885:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e888:	83 c4 14             	add    esp,0x14
c001e88b:	53                   	push   ebx
c001e88c:	e8 2d 45 ff ff       	call   c0012dbe <File::close()>
c001e891:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001e896:	83 c4 10             	add    esp,0x10
c001e899:	48                   	dec    eax
c001e89a:	c6 05 25 f3 02 c0 00 	mov    BYTE PTR ds:0xc002f325,0x0
c001e8a1:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c001e8a6:	85 c0                	test   eax,eax
c001e8a8:	75 01                	jne    c001e8ab <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001e8aa:	fb                   	sti    
c001e8ab:	83 ec 0c             	sub    esp,0xc
c001e8ae:	ff 35 28 f3 02 c0    	push   DWORD PTR ds:0xc002f328
c001e8b4:	e8 f4 f6 ff ff       	call   c001dfad <unblockTask(ThreadControlBlock*)>
c001e8b9:	83 c4 10             	add    esp,0x10
c001e8bc:	83 c4 2c             	add    esp,0x2c
c001e8bf:	89 f0                	mov    eax,esi
c001e8c1:	5b                   	pop    ebx
c001e8c2:	5e                   	pop    esi
c001e8c3:	5f                   	pop    edi
c001e8c4:	5d                   	pop    ebp
c001e8c5:	c3                   	ret    

c001e8c6 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001e8c6:	57                   	push   edi
c001e8c7:	56                   	push   esi
c001e8c8:	53                   	push   ebx
c001e8c9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e8cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e8d1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e8d5:	83 e8 06             	sub    eax,0x6
c001e8d8:	0f b7 c0             	movzx  eax,ax
c001e8db:	50                   	push   eax
c001e8dc:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001e8e1:	50                   	push   eax
c001e8e2:	e8 21 fd ff ff       	call   c001e608 <Vm::realToLinear(unsigned short, unsigned short)>
c001e8e7:	5a                   	pop    edx
c001e8e8:	5e                   	pop    esi
c001e8e9:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001e8ec:	8d 56 fa             	lea    edx,[esi-0x6]
c001e8ef:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e8f5:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001e8f8:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001e8fb:	83 c2 02             	add    edx,0x2
c001e8fe:	66 89 10             	mov    WORD PTR [eax],dx
c001e901:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001e904:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001e908:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001e90b:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001e90f:	89 d6                	mov    esi,edx
c001e911:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001e917:	66 81 e6 ff fd       	and    si,0xfdff
c001e91c:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001e920:	74 07                	je     c001e929 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001e922:	89 d6                	mov    esi,edx
c001e924:	66 81 ce 00 02       	or     si,0x200
c001e929:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001e92d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e932:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e936:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001e93e:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001e941:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001e949:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001e94c:	5b                   	pop    ebx
c001e94d:	5e                   	pop    esi
c001e94e:	5f                   	pop    edi
c001e94f:	c3                   	ret    

c001e950 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001e950:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e955:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e95a:	c1 e0 04             	shl    eax,0x4
c001e95d:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001e960:	c3                   	ret    

c001e961 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001e961:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e966:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e96b:	c1 e0 04             	shl    eax,0x4
c001e96e:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001e972:	c3                   	ret    

c001e973 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001e973:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e978:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e97d:	c1 e0 04             	shl    eax,0x4
c001e980:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001e983:	c3                   	ret    

c001e984 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001e984:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e989:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e98e:	c1 e0 04             	shl    eax,0x4
c001e991:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e995:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001e998:	c3                   	ret    

c001e999 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001e999:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e99e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e9a3:	c1 e0 04             	shl    eax,0x4
c001e9a6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e9aa:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001e9ae:	c3                   	ret    

c001e9af <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001e9af:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e9b4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e9b9:	c1 e0 04             	shl    eax,0x4
c001e9bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e9c0:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001e9c3:	c3                   	ret    

c001e9c4 <Vm::faultHandler(regs*)>:
c001e9c4:	55                   	push   ebp
c001e9c5:	57                   	push   edi
c001e9c6:	56                   	push   esi
c001e9c7:	53                   	push   ebx
c001e9c8:	83 ec 1c             	sub    esp,0x1c
c001e9cb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e9cf:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001e9d2:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001e9d6:	0f b7 f8             	movzx  edi,ax
c001e9d9:	52                   	push   edx
c001e9da:	0f b7 c0             	movzx  eax,ax
c001e9dd:	50                   	push   eax
c001e9de:	e8 25 fc ff ff       	call   c001e608 <Vm::realToLinear(unsigned short, unsigned short)>
c001e9e3:	5a                   	pop    edx
c001e9e4:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001e9e7:	59                   	pop    ecx
c001e9e8:	89 c1                	mov    ecx,eax
c001e9ea:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e9ed:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e9f1:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e9f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e9fa:	0f b7 c5             	movzx  eax,bp
c001e9fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea01:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001ea05:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ea09:	e8 fa fb ff ff       	call   c001e608 <Vm::realToLinear(unsigned short, unsigned short)>
c001ea0e:	5e                   	pop    esi
c001ea0f:	be 06 00 00 00       	mov    esi,0x6
c001ea14:	5a                   	pop    edx
c001ea15:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001ea1a:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001ea1f:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001ea22:	80 fa 9d             	cmp    dl,0x9d
c001ea25:	0f 84 2c 02 00 00    	je     c001ec57 <Vm::faultHandler(regs*)+0x293>
c001ea2b:	0f 87 91 00 00 00    	ja     c001eac2 <Vm::faultHandler(regs*)+0xfe>
c001ea31:	80 fa 66             	cmp    dl,0x66
c001ea34:	0f 84 98 01 00 00    	je     c001ebd2 <Vm::faultHandler(regs*)+0x20e>
c001ea3a:	77 47                	ja     c001ea83 <Vm::faultHandler(regs*)+0xbf>
c001ea3c:	80 fa 36             	cmp    dl,0x36
c001ea3f:	0f 84 80 01 00 00    	je     c001ebc5 <Vm::faultHandler(regs*)+0x201>
c001ea45:	77 1a                	ja     c001ea61 <Vm::faultHandler(regs*)+0x9d>
c001ea47:	80 fa 26             	cmp    dl,0x26
c001ea4a:	0f 84 4e 01 00 00    	je     c001eb9e <Vm::faultHandler(regs*)+0x1da>
c001ea50:	80 fa 2e             	cmp    dl,0x2e
c001ea53:	0f 85 e2 05 00 00    	jne    c001f03b <Vm::faultHandler(regs*)+0x677>
c001ea59:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea5c:	31 f6                	xor    esi,esi
c001ea5e:	41                   	inc    ecx
c001ea5f:	eb be                	jmp    c001ea1f <Vm::faultHandler(regs*)+0x5b>
c001ea61:	80 fa 64             	cmp    dl,0x64
c001ea64:	0f 84 41 01 00 00    	je     c001ebab <Vm::faultHandler(regs*)+0x1e7>
c001ea6a:	0f 87 48 01 00 00    	ja     c001ebb8 <Vm::faultHandler(regs*)+0x1f4>
c001ea70:	80 fa 3e             	cmp    dl,0x3e
c001ea73:	0f 85 c2 05 00 00    	jne    c001f03b <Vm::faultHandler(regs*)+0x677>
c001ea79:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea7c:	be 01 00 00 00       	mov    esi,0x1
c001ea81:	eb db                	jmp    c001ea5e <Vm::faultHandler(regs*)+0x9a>
c001ea83:	80 fa 6d             	cmp    dl,0x6d
c001ea86:	0f 84 ec 02 00 00    	je     c001ed78 <Vm::faultHandler(regs*)+0x3b4>
c001ea8c:	77 17                	ja     c001eaa5 <Vm::faultHandler(regs*)+0xe1>
c001ea8e:	80 fa 67             	cmp    dl,0x67
c001ea91:	0f 84 48 01 00 00    	je     c001ebdf <Vm::faultHandler(regs*)+0x21b>
c001ea97:	80 fa 6c             	cmp    dl,0x6c
c001ea9a:	0f 84 69 02 00 00    	je     c001ed09 <Vm::faultHandler(regs*)+0x345>
c001eaa0:	e9 96 05 00 00       	jmp    c001f03b <Vm::faultHandler(regs*)+0x677>
c001eaa5:	80 fa 6f             	cmp    dl,0x6f
c001eaa8:	0f 84 f4 03 00 00    	je     c001eea2 <Vm::faultHandler(regs*)+0x4de>
c001eaae:	0f 82 59 03 00 00    	jb     c001ee0d <Vm::faultHandler(regs*)+0x449>
c001eab4:	80 fa 9c             	cmp    dl,0x9c
c001eab7:	0f 84 2f 01 00 00    	je     c001ebec <Vm::faultHandler(regs*)+0x228>
c001eabd:	e9 79 05 00 00       	jmp    c001f03b <Vm::faultHandler(regs*)+0x677>
c001eac2:	80 fa ec             	cmp    dl,0xec
c001eac5:	0f 84 14 05 00 00    	je     c001efdf <Vm::faultHandler(regs*)+0x61b>
c001eacb:	77 7b                	ja     c001eb48 <Vm::faultHandler(regs*)+0x184>
c001eacd:	80 fa e4             	cmp    dl,0xe4
c001ead0:	0f 84 93 04 00 00    	je     c001ef69 <Vm::faultHandler(regs*)+0x5a5>
c001ead6:	77 53                	ja     c001eb2b <Vm::faultHandler(regs*)+0x167>
c001ead8:	80 fa cd             	cmp    dl,0xcd
c001eadb:	0f 84 d9 01 00 00    	je     c001ecba <Vm::faultHandler(regs*)+0x2f6>
c001eae1:	80 fa cf             	cmp    dl,0xcf
c001eae4:	0f 85 51 05 00 00    	jne    c001f03b <Vm::faultHandler(regs*)+0x677>
c001eaea:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001eaed:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001eaf0:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001eaf4:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001eaf7:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001eafb:	81 ca 00 02 02 00    	or     edx,0x20200
c001eb01:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001eb04:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001eb08:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001eb0e:	66 c1 e8 09          	shr    ax,0x9
c001eb12:	83 e0 01             	and    eax,0x1
c001eb15:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001eb18:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001eb1b:	83 c0 06             	add    eax,0x6
c001eb1e:	25 ff ff 00 00       	and    eax,0xffff
c001eb23:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001eb26:	e9 0c 05 00 00       	jmp    c001f037 <Vm::faultHandler(regs*)+0x673>
c001eb2b:	80 fa e6             	cmp    dl,0xe6
c001eb2e:	0f 84 7f 04 00 00    	je     c001efb3 <Vm::faultHandler(regs*)+0x5ef>
c001eb34:	0f 82 4b 04 00 00    	jb     c001ef85 <Vm::faultHandler(regs*)+0x5c1>
c001eb3a:	80 fa e7             	cmp    dl,0xe7
c001eb3d:	0f 84 87 04 00 00    	je     c001efca <Vm::faultHandler(regs*)+0x606>
c001eb43:	e9 f3 04 00 00       	jmp    c001f03b <Vm::faultHandler(regs*)+0x677>
c001eb48:	80 fa ef             	cmp    dl,0xef
c001eb4b:	0f 84 d1 04 00 00    	je     c001f022 <Vm::faultHandler(regs*)+0x65e>
c001eb51:	77 28                	ja     c001eb7b <Vm::faultHandler(regs*)+0x1b7>
c001eb53:	80 fa ed             	cmp    dl,0xed
c001eb56:	0f 84 9f 04 00 00    	je     c001effb <Vm::faultHandler(regs*)+0x637>
c001eb5c:	80 fa ee             	cmp    dl,0xee
c001eb5f:	0f 85 d6 04 00 00    	jne    c001f03b <Vm::faultHandler(regs*)+0x677>
c001eb65:	50                   	push   eax
c001eb66:	50                   	push   eax
c001eb67:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001eb6b:	50                   	push   eax
c001eb6c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001eb70:	50                   	push   eax
c001eb71:	e8 5c fa ff ff       	call   c001e5d2 <Vm::outbv(unsigned short, unsigned char)>
c001eb76:	e9 9f 04 00 00       	jmp    c001f01a <Vm::faultHandler(regs*)+0x656>
c001eb7b:	80 fa fa             	cmp    dl,0xfa
c001eb7e:	0f 84 69 01 00 00    	je     c001eced <Vm::faultHandler(regs*)+0x329>
c001eb84:	80 fa fb             	cmp    dl,0xfb
c001eb87:	0f 84 6e 01 00 00    	je     c001ecfb <Vm::faultHandler(regs*)+0x337>
c001eb8d:	80 fa f3             	cmp    dl,0xf3
c001eb90:	0f 85 a5 04 00 00    	jne    c001f03b <Vm::faultHandler(regs*)+0x677>
c001eb96:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eb99:	e9 c0 fe ff ff       	jmp    c001ea5e <Vm::faultHandler(regs*)+0x9a>
c001eb9e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eba1:	be 02 00 00 00       	mov    esi,0x2
c001eba6:	e9 b3 fe ff ff       	jmp    c001ea5e <Vm::faultHandler(regs*)+0x9a>
c001ebab:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ebae:	be 03 00 00 00       	mov    esi,0x3
c001ebb3:	e9 a6 fe ff ff       	jmp    c001ea5e <Vm::faultHandler(regs*)+0x9a>
c001ebb8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ebbb:	be 04 00 00 00       	mov    esi,0x4
c001ebc0:	e9 99 fe ff ff       	jmp    c001ea5e <Vm::faultHandler(regs*)+0x9a>
c001ebc5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ebc8:	be 05 00 00 00       	mov    esi,0x5
c001ebcd:	e9 8c fe ff ff       	jmp    c001ea5e <Vm::faultHandler(regs*)+0x9a>
c001ebd2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ebd5:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001ebda:	e9 7f fe ff ff       	jmp    c001ea5e <Vm::faultHandler(regs*)+0x9a>
c001ebdf:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ebe2:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001ebe7:	e9 72 fe ff ff       	jmp    c001ea5e <Vm::faultHandler(regs*)+0x9a>
c001ebec:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001ebef:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ebf3:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ebf8:	74 30                	je     c001ec2a <Vm::faultHandler(regs*)+0x266>
c001ebfa:	83 e9 04             	sub    ecx,0x4
c001ebfd:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001ec03:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001ec09:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001ec0c:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001ec0f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001ec15:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001ec19:	0f 84 15 04 00 00    	je     c001f034 <Vm::faultHandler(regs*)+0x670>
c001ec1f:	80 ce 02             	or     dh,0x2
c001ec22:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001ec25:	e9 0a 04 00 00       	jmp    c001f034 <Vm::faultHandler(regs*)+0x670>
c001ec2a:	83 e9 02             	sub    ecx,0x2
c001ec2d:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001ec33:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001ec36:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001ec3a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001ec40:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001ec44:	74 05                	je     c001ec4b <Vm::faultHandler(regs*)+0x287>
c001ec46:	80 ce 02             	or     dh,0x2
c001ec49:	eb 03                	jmp    c001ec4e <Vm::faultHandler(regs*)+0x28a>
c001ec4b:	80 e6 fd             	and    dh,0xfd
c001ec4e:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001ec52:	e9 dd 03 00 00       	jmp    c001f034 <Vm::faultHandler(regs*)+0x670>
c001ec57:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ec5c:	74 2a                	je     c001ec88 <Vm::faultHandler(regs*)+0x2c4>
c001ec5e:	8b 10                	mov    edx,DWORD PTR [eax]
c001ec60:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001ec66:	81 ca 00 02 02 00    	or     edx,0x20200
c001ec6c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ec6f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec71:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ec77:	c1 e8 09             	shr    eax,0x9
c001ec7a:	83 e0 01             	and    eax,0x1
c001ec7d:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ec80:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ec83:	83 c0 04             	add    eax,0x4
c001ec86:	eb 25                	jmp    c001ecad <Vm::faultHandler(regs*)+0x2e9>
c001ec88:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001ec8b:	81 ca 00 02 02 00    	or     edx,0x20200
c001ec91:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ec94:	66 8b 00             	mov    ax,WORD PTR [eax]
c001ec97:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ec9d:	66 c1 e8 09          	shr    ax,0x9
c001eca1:	83 e0 01             	and    eax,0x1
c001eca4:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001eca7:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ecaa:	83 c0 02             	add    eax,0x2
c001ecad:	25 ff ff 00 00       	and    eax,0xffff
c001ecb2:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001ecb5:	e9 7a 03 00 00       	jmp    c001f034 <Vm::faultHandler(regs*)+0x670>
c001ecba:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ecbe:	3c ee                	cmp    al,0xee
c001ecc0:	75 10                	jne    c001ecd2 <Vm::faultHandler(regs*)+0x30e>
c001ecc2:	83 ec 0c             	sub    esp,0xc
c001ecc5:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001ecc8:	e8 a2 f9 ff ff       	call   c001e66f <Vm::mainloop3(unsigned long)>
c001eccd:	e9 4b 03 00 00       	jmp    c001f01d <Vm::faultHandler(regs*)+0x659>
c001ecd2:	83 ec 0c             	sub    esp,0xc
c001ecd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ecd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ecdd:	51                   	push   ecx
c001ecde:	50                   	push   eax
c001ecdf:	53                   	push   ebx
c001ece0:	e8 e1 fb ff ff       	call   c001e8c6 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001ece5:	83 c4 20             	add    esp,0x20
c001ece8:	e9 4a 03 00 00       	jmp    c001f037 <Vm::faultHandler(regs*)+0x673>
c001eced:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ecf2:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ecf6:	e9 39 03 00 00       	jmp    c001f034 <Vm::faultHandler(regs*)+0x670>
c001ecfb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ed00:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001ed04:	e9 2b 03 00 00       	jmp    c001f034 <Vm::faultHandler(regs*)+0x670>
c001ed09:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001ed0c:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ed11:	74 2b                	je     c001ed3e <Vm::faultHandler(regs*)+0x37a>
c001ed13:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001ed1a:	76 22                	jbe    c001ed3e <Vm::faultHandler(regs*)+0x37a>
c001ed1c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ed20:	50                   	push   eax
c001ed21:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ed25:	50                   	push   eax
c001ed26:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ed2a:	50                   	push   eax
c001ed2b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ed2f:	50                   	push   eax
c001ed30:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ed34:	50                   	push   eax
c001ed35:	6a 6c                	push   0x6c
c001ed37:	6a 6c                	push   0x6c
c001ed39:	e9 b9 01 00 00       	jmp    c001eef7 <Vm::faultHandler(regs*)+0x533>
c001ed3e:	83 ec 0c             	sub    esp,0xc
c001ed41:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ed45:	0f b7 f6             	movzx  esi,si
c001ed48:	50                   	push   eax
c001ed49:	e8 71 f8 ff ff       	call   c001e5bf <Vm::inbv(unsigned short)>
c001ed4e:	83 c4 0c             	add    esp,0xc
c001ed51:	0f b6 c0             	movzx  eax,al
c001ed54:	50                   	push   eax
c001ed55:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001ed59:	50                   	push   eax
c001ed5a:	56                   	push   esi
c001ed5b:	e8 24 fc ff ff       	call   c001e984 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001ed60:	83 c4 10             	add    esp,0x10
c001ed63:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ed66:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ed6a:	74 03                	je     c001ed6f <Vm::faultHandler(regs*)+0x3ab>
c001ed6c:	48                   	dec    eax
c001ed6d:	eb 01                	jmp    c001ed70 <Vm::faultHandler(regs*)+0x3ac>
c001ed6f:	40                   	inc    eax
c001ed70:	0f b7 c0             	movzx  eax,ax
c001ed73:	e9 8d 00 00 00       	jmp    c001ee05 <Vm::faultHandler(regs*)+0x441>
c001ed78:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001ed7b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ed7e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ed83:	74 29                	je     c001edae <Vm::faultHandler(regs*)+0x3ea>
c001ed85:	3d ff ff 00 00       	cmp    eax,0xffff
c001ed8a:	76 22                	jbe    c001edae <Vm::faultHandler(regs*)+0x3ea>
c001ed8c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ed90:	50                   	push   eax
c001ed91:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ed95:	50                   	push   eax
c001ed96:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ed9a:	50                   	push   eax
c001ed9b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ed9f:	50                   	push   eax
c001eda0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001eda4:	50                   	push   eax
c001eda5:	6a 6d                	push   0x6d
c001eda7:	6a 6d                	push   0x6d
c001eda9:	e9 49 01 00 00       	jmp    c001eef7 <Vm::faultHandler(regs*)+0x533>
c001edae:	0f b7 c8             	movzx  ecx,ax
c001edb1:	0f b7 f6             	movzx  esi,si
c001edb4:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001edb7:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001edbc:	74 20                	je     c001edde <Vm::faultHandler(regs*)+0x41a>
c001edbe:	ed                   	in     eax,dx
c001edbf:	55                   	push   ebp
c001edc0:	50                   	push   eax
c001edc1:	51                   	push   ecx
c001edc2:	56                   	push   esi
c001edc3:	e8 e7 fb ff ff       	call   c001e9af <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001edc8:	83 c4 10             	add    esp,0x10
c001edcb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001edce:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001edd2:	74 05                	je     c001edd9 <Vm::faultHandler(regs*)+0x415>
c001edd4:	83 e8 04             	sub    eax,0x4
c001edd7:	eb 27                	jmp    c001ee00 <Vm::faultHandler(regs*)+0x43c>
c001edd9:	83 c0 04             	add    eax,0x4
c001eddc:	eb 22                	jmp    c001ee00 <Vm::faultHandler(regs*)+0x43c>
c001edde:	66 ed                	in     ax,dx
c001ede0:	0f b7 c0             	movzx  eax,ax
c001ede3:	57                   	push   edi
c001ede4:	50                   	push   eax
c001ede5:	51                   	push   ecx
c001ede6:	56                   	push   esi
c001ede7:	e8 ad fb ff ff       	call   c001e999 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001edec:	83 c4 10             	add    esp,0x10
c001edef:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001edf2:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001edf6:	74 05                	je     c001edfd <Vm::faultHandler(regs*)+0x439>
c001edf8:	83 e8 02             	sub    eax,0x2
c001edfb:	eb 03                	jmp    c001ee00 <Vm::faultHandler(regs*)+0x43c>
c001edfd:	83 c0 02             	add    eax,0x2
c001ee00:	25 ff ff 00 00       	and    eax,0xffff
c001ee05:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001ee08:	e9 27 02 00 00       	jmp    c001f034 <Vm::faultHandler(regs*)+0x670>
c001ee0d:	8d 46 ff             	lea    eax,[esi-0x1]
c001ee10:	3c 05                	cmp    al,0x5
c001ee12:	77 24                	ja     c001ee38 <Vm::faultHandler(regs*)+0x474>
c001ee14:	0f b6 c0             	movzx  eax,al
c001ee17:	ff 24 85 78 c1 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd3e88]
c001ee1e:	0f b7 fd             	movzx  edi,bp
c001ee21:	eb 15                	jmp    c001ee38 <Vm::faultHandler(regs*)+0x474>
c001ee23:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001ee27:	eb 0f                	jmp    c001ee38 <Vm::faultHandler(regs*)+0x474>
c001ee29:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001ee2d:	eb 09                	jmp    c001ee38 <Vm::faultHandler(regs*)+0x474>
c001ee2f:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001ee33:	eb 03                	jmp    c001ee38 <Vm::faultHandler(regs*)+0x474>
c001ee35:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001ee38:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ee3b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ee40:	74 29                	je     c001ee6b <Vm::faultHandler(regs*)+0x4a7>
c001ee42:	3d ff ff 00 00       	cmp    eax,0xffff
c001ee47:	76 22                	jbe    c001ee6b <Vm::faultHandler(regs*)+0x4a7>
c001ee49:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ee4d:	50                   	push   eax
c001ee4e:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ee52:	50                   	push   eax
c001ee53:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ee57:	50                   	push   eax
c001ee58:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ee5c:	50                   	push   eax
c001ee5d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ee61:	50                   	push   eax
c001ee62:	6a 6e                	push   0x6e
c001ee64:	6a 6e                	push   0x6e
c001ee66:	e9 8c 00 00 00       	jmp    c001eef7 <Vm::faultHandler(regs*)+0x533>
c001ee6b:	0f b7 c0             	movzx  eax,ax
c001ee6e:	52                   	push   edx
c001ee6f:	52                   	push   edx
c001ee70:	50                   	push   eax
c001ee71:	57                   	push   edi
c001ee72:	e8 d9 fa ff ff       	call   c001e950 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001ee77:	59                   	pop    ecx
c001ee78:	0f b6 c0             	movzx  eax,al
c001ee7b:	5e                   	pop    esi
c001ee7c:	50                   	push   eax
c001ee7d:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ee81:	50                   	push   eax
c001ee82:	e8 4b f7 ff ff       	call   c001e5d2 <Vm::outbv(unsigned short, unsigned char)>
c001ee87:	83 c4 10             	add    esp,0x10
c001ee8a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ee8d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ee91:	74 03                	je     c001ee96 <Vm::faultHandler(regs*)+0x4d2>
c001ee93:	48                   	dec    eax
c001ee94:	eb 01                	jmp    c001ee97 <Vm::faultHandler(regs*)+0x4d3>
c001ee96:	40                   	inc    eax
c001ee97:	0f b7 c0             	movzx  eax,ax
c001ee9a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001ee9d:	e9 92 01 00 00       	jmp    c001f034 <Vm::faultHandler(regs*)+0x670>
c001eea2:	8d 46 ff             	lea    eax,[esi-0x1]
c001eea5:	3c 05                	cmp    al,0x5
c001eea7:	77 1f                	ja     c001eec8 <Vm::faultHandler(regs*)+0x504>
c001eea9:	0f b6 c0             	movzx  eax,al
c001eeac:	ff 24 85 90 c1 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd3e70]
c001eeb3:	89 ef                	mov    edi,ebp
c001eeb5:	eb 11                	jmp    c001eec8 <Vm::faultHandler(regs*)+0x504>
c001eeb7:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001eeba:	eb 0c                	jmp    c001eec8 <Vm::faultHandler(regs*)+0x504>
c001eebc:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001eebf:	eb 07                	jmp    c001eec8 <Vm::faultHandler(regs*)+0x504>
c001eec1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001eec4:	eb 02                	jmp    c001eec8 <Vm::faultHandler(regs*)+0x504>
c001eec6:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001eec8:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001eecb:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001eed0:	74 37                	je     c001ef09 <Vm::faultHandler(regs*)+0x545>
c001eed2:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001eed8:	76 2f                	jbe    c001ef09 <Vm::faultHandler(regs*)+0x545>
c001eeda:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001eede:	50                   	push   eax
c001eedf:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001eee3:	50                   	push   eax
c001eee4:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001eee8:	50                   	push   eax
c001eee9:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001eeed:	50                   	push   eax
c001eeee:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001eef2:	50                   	push   eax
c001eef3:	6a 6f                	push   0x6f
c001eef5:	6a 6f                	push   0x6f
c001eef7:	68 1e c1 02 c0       	push   0xc002c11e
c001eefc:	e8 9c 38 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001ef01:	83 c4 20             	add    esp,0x20
c001ef04:	e9 86 01 00 00       	jmp    c001f08f <Vm::faultHandler(regs*)+0x6cb>
c001ef09:	0f b7 d7             	movzx  edx,di
c001ef0c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001ef0f:	0f b7 c6             	movzx  eax,si
c001ef12:	81 e1 00 04 00 00    	and    ecx,0x400
c001ef18:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001ef1b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ef20:	74 1d                	je     c001ef3f <Vm::faultHandler(regs*)+0x57b>
c001ef22:	55                   	push   ebp
c001ef23:	55                   	push   ebp
c001ef24:	50                   	push   eax
c001ef25:	52                   	push   edx
c001ef26:	e8 48 fa ff ff       	call   c001e973 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001ef2b:	83 c4 10             	add    esp,0x10
c001ef2e:	89 fa                	mov    edx,edi
c001ef30:	ef                   	out    dx,eax
c001ef31:	85 c9                	test   ecx,ecx
c001ef33:	74 05                	je     c001ef3a <Vm::faultHandler(regs*)+0x576>
c001ef35:	83 ee 04             	sub    esi,0x4
c001ef38:	eb 21                	jmp    c001ef5b <Vm::faultHandler(regs*)+0x597>
c001ef3a:	83 c6 04             	add    esi,0x4
c001ef3d:	eb 1c                	jmp    c001ef5b <Vm::faultHandler(regs*)+0x597>
c001ef3f:	55                   	push   ebp
c001ef40:	55                   	push   ebp
c001ef41:	50                   	push   eax
c001ef42:	52                   	push   edx
c001ef43:	e8 19 fa ff ff       	call   c001e961 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001ef48:	83 c4 10             	add    esp,0x10
c001ef4b:	89 fa                	mov    edx,edi
c001ef4d:	66 ef                	out    dx,ax
c001ef4f:	85 c9                	test   ecx,ecx
c001ef51:	74 05                	je     c001ef58 <Vm::faultHandler(regs*)+0x594>
c001ef53:	83 ee 02             	sub    esi,0x2
c001ef56:	eb 03                	jmp    c001ef5b <Vm::faultHandler(regs*)+0x597>
c001ef58:	83 c6 02             	add    esi,0x2
c001ef5b:	81 e6 ff ff 00 00    	and    esi,0xffff
c001ef61:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001ef64:	e9 cb 00 00 00       	jmp    c001f034 <Vm::faultHandler(regs*)+0x670>
c001ef69:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001ef70:	83 ec 0c             	sub    esp,0xc
c001ef73:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ef77:	50                   	push   eax
c001ef78:	e8 42 f6 ff ff       	call   c001e5bf <Vm::inbv(unsigned short)>
c001ef7d:	0f b6 c0             	movzx  eax,al
c001ef80:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001ef83:	eb 3f                	jmp    c001efc4 <Vm::faultHandler(regs*)+0x600>
c001ef85:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ef8a:	74 07                	je     c001ef93 <Vm::faultHandler(regs*)+0x5cf>
c001ef8c:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ef90:	ed                   	in     eax,dx
c001ef91:	eb 14                	jmp    c001efa7 <Vm::faultHandler(regs*)+0x5e3>
c001ef93:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001ef96:	66 31 f6             	xor    si,si
c001ef99:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001ef9c:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001efa0:	66 ed                	in     ax,dx
c001efa2:	0f b7 c0             	movzx  eax,ax
c001efa5:	09 f0                	or     eax,esi
c001efa7:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001efaa:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001efae:	e9 84 00 00 00       	jmp    c001f037 <Vm::faultHandler(regs*)+0x673>
c001efb3:	52                   	push   edx
c001efb4:	52                   	push   edx
c001efb5:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001efb9:	50                   	push   eax
c001efba:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001efbe:	50                   	push   eax
c001efbf:	e8 0e f6 ff ff       	call   c001e5d2 <Vm::outbv(unsigned short, unsigned char)>
c001efc4:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001efc8:	eb 53                	jmp    c001f01d <Vm::faultHandler(regs*)+0x659>
c001efca:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001efcd:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001efd1:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001efd6:	74 03                	je     c001efdb <Vm::faultHandler(regs*)+0x617>
c001efd8:	ef                   	out    dx,eax
c001efd9:	eb cf                	jmp    c001efaa <Vm::faultHandler(regs*)+0x5e6>
c001efdb:	66 ef                	out    dx,ax
c001efdd:	eb cb                	jmp    c001efaa <Vm::faultHandler(regs*)+0x5e6>
c001efdf:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001efe6:	83 ec 0c             	sub    esp,0xc
c001efe9:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001efed:	50                   	push   eax
c001efee:	e8 cc f5 ff ff       	call   c001e5bf <Vm::inbv(unsigned short)>
c001eff3:	0f b6 c0             	movzx  eax,al
c001eff6:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001eff9:	eb 1f                	jmp    c001f01a <Vm::faultHandler(regs*)+0x656>
c001effb:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001effe:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f003:	74 03                	je     c001f008 <Vm::faultHandler(regs*)+0x644>
c001f005:	ed                   	in     eax,dx
c001f006:	eb 0d                	jmp    c001f015 <Vm::faultHandler(regs*)+0x651>
c001f008:	66 ed                	in     ax,dx
c001f00a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001f00d:	0f b7 c0             	movzx  eax,ax
c001f010:	66 31 d2             	xor    dx,dx
c001f013:	09 d0                	or     eax,edx
c001f015:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001f018:	eb 1a                	jmp    c001f034 <Vm::faultHandler(regs*)+0x670>
c001f01a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f01d:	83 c4 10             	add    esp,0x10
c001f020:	eb 15                	jmp    c001f037 <Vm::faultHandler(regs*)+0x673>
c001f022:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001f025:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f028:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f02d:	74 03                	je     c001f032 <Vm::faultHandler(regs*)+0x66e>
c001f02f:	ef                   	out    dx,eax
c001f030:	eb 02                	jmp    c001f034 <Vm::faultHandler(regs*)+0x670>
c001f032:	66 ef                	out    dx,ax
c001f034:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f037:	b0 01                	mov    al,0x1
c001f039:	eb 56                	jmp    c001f091 <Vm::faultHandler(regs*)+0x6cd>
c001f03b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f03f:	50                   	push   eax
c001f040:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f044:	50                   	push   eax
c001f045:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f049:	50                   	push   eax
c001f04a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f04e:	50                   	push   eax
c001f04f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f053:	50                   	push   eax
c001f054:	52                   	push   edx
c001f055:	52                   	push   edx
c001f056:	68 4b c1 02 c0       	push   0xc002c14b
c001f05b:	e8 3d 37 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001f060:	83 c4 20             	add    esp,0x20
c001f063:	83 ec 0c             	sub    esp,0xc
c001f066:	6a 60                	push   0x60
c001f068:	e8 52 f5 ff ff       	call   c001e5bf <Vm::inbv(unsigned short)>
c001f06d:	83 c4 10             	add    esp,0x10
c001f070:	3c 1c                	cmp    al,0x1c
c001f072:	74 04                	je     c001f078 <Vm::faultHandler(regs*)+0x6b4>
c001f074:	3c 5a                	cmp    al,0x5a
c001f076:	75 eb                	jne    c001f063 <Vm::faultHandler(regs*)+0x69f>
c001f078:	3c 5a                	cmp    al,0x5a
c001f07a:	74 04                	je     c001f080 <Vm::faultHandler(regs*)+0x6bc>
c001f07c:	3c 1c                	cmp    al,0x1c
c001f07e:	75 0f                	jne    c001f08f <Vm::faultHandler(regs*)+0x6cb>
c001f080:	83 ec 0c             	sub    esp,0xc
c001f083:	6a 60                	push   0x60
c001f085:	e8 35 f5 ff ff       	call   c001e5bf <Vm::inbv(unsigned short)>
c001f08a:	83 c4 10             	add    esp,0x10
c001f08d:	eb e9                	jmp    c001f078 <Vm::faultHandler(regs*)+0x6b4>
c001f08f:	31 c0                	xor    eax,eax
c001f091:	83 c4 1c             	add    esp,0x1c
c001f094:	5b                   	pop    ebx
c001f095:	5e                   	pop    esi
c001f096:	5f                   	pop    edi
c001f097:	5d                   	pop    ebp
c001f098:	c3                   	ret    

c001f099 <Vm::fpuInternalTo32(unsigned long long)>:
c001f099:	57                   	push   edi
c001f09a:	56                   	push   esi
c001f09b:	53                   	push   ebx
c001f09c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f0a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0a4:	89 d6                	mov    esi,edx
c001f0a6:	89 d7                	mov    edi,edx
c001f0a8:	89 c1                	mov    ecx,eax
c001f0aa:	c1 ef 14             	shr    edi,0x14
c001f0ad:	89 d3                	mov    ebx,edx
c001f0af:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f0b5:	31 d2                	xor    edx,edx
c001f0b7:	89 f8                	mov    eax,edi
c001f0b9:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f0bf:	bf ff 00 00 00       	mov    edi,0xff
c001f0c4:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f0c9:	83 d2 ff             	adc    edx,0xffffffff
c001f0cc:	39 c7                	cmp    edi,eax
c001f0ce:	bf 00 00 00 00       	mov    edi,0x0
c001f0d3:	19 d7                	sbb    edi,edx
c001f0d5:	72 15                	jb     c001f0ec <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f0d7:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f0db:	c1 e0 17             	shl    eax,0x17
c001f0de:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f0e4:	09 f1                	or     ecx,esi
c001f0e6:	09 c1                	or     ecx,eax
c001f0e8:	89 cf                	mov    edi,ecx
c001f0ea:	eb 02                	jmp    c001f0ee <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f0ec:	31 ff                	xor    edi,edi
c001f0ee:	89 f8                	mov    eax,edi
c001f0f0:	5b                   	pop    ebx
c001f0f1:	5e                   	pop    esi
c001f0f2:	5f                   	pop    edi
c001f0f3:	c3                   	ret    

c001f0f4 <Vm::fpuInternalTo64(unsigned long long)>:
c001f0f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f0fc:	c3                   	ret    

c001f0fd <Vm::fpu32ToInternal(unsigned int)>:
c001f0fd:	57                   	push   edi
c001f0fe:	31 ff                	xor    edi,edi
c001f100:	56                   	push   esi
c001f101:	53                   	push   ebx
c001f102:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f106:	89 cb                	mov    ebx,ecx
c001f108:	89 ce                	mov    esi,ecx
c001f10a:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f110:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f116:	c1 e9 17             	shr    ecx,0x17
c001f119:	89 f0                	mov    eax,esi
c001f11b:	0f b6 d1             	movzx  edx,cl
c001f11e:	81 c2 80 03 00 00    	add    edx,0x380
c001f124:	89 d1                	mov    ecx,edx
c001f126:	89 fa                	mov    edx,edi
c001f128:	c1 e1 14             	shl    ecx,0x14
c001f12b:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f12f:	c1 e0 1d             	shl    eax,0x1d
c001f132:	89 d7                	mov    edi,edx
c001f134:	89 c6                	mov    esi,eax
c001f136:	89 ca                	mov    edx,ecx
c001f138:	89 f0                	mov    eax,esi
c001f13a:	09 fa                	or     edx,edi
c001f13c:	09 da                	or     edx,ebx
c001f13e:	5b                   	pop    ebx
c001f13f:	5e                   	pop    esi
c001f140:	5f                   	pop    edi
c001f141:	c3                   	ret    

c001f142 <Vm::fpu64ToInternal(unsigned long long)>:
c001f142:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f146:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f14a:	c3                   	ret    

c001f14b <Vm::fpuFloatToLong(unsigned long long)>:
c001f14b:	57                   	push   edi
c001f14c:	31 c0                	xor    eax,eax
c001f14e:	56                   	push   esi
c001f14f:	31 d2                	xor    edx,edx
c001f151:	53                   	push   ebx
c001f152:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f156:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f15a:	89 d9                	mov    ecx,ebx
c001f15c:	c1 e9 14             	shr    ecx,0x14
c001f15f:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f165:	89 cf                	mov    edi,ecx
c001f167:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f16d:	78 33                	js     c001f1a2 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f16f:	89 d9                	mov    ecx,ebx
c001f171:	89 f0                	mov    eax,esi
c001f173:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f179:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f17f:	89 ca                	mov    edx,ecx
c001f181:	b9 34 00 00 00       	mov    ecx,0x34
c001f186:	29 f9                	sub    ecx,edi
c001f188:	0f ad d0             	shrd   eax,edx,cl
c001f18b:	d3 fa                	sar    edx,cl
c001f18d:	f6 c1 20             	test   cl,0x20
c001f190:	74 05                	je     c001f197 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f192:	89 d0                	mov    eax,edx
c001f194:	c1 fa 1f             	sar    edx,0x1f
c001f197:	85 db                	test   ebx,ebx
c001f199:	79 07                	jns    c001f1a2 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f19b:	f7 d8                	neg    eax
c001f19d:	83 d2 00             	adc    edx,0x0
c001f1a0:	f7 da                	neg    edx
c001f1a2:	5b                   	pop    ebx
c001f1a3:	5e                   	pop    esi
c001f1a4:	5f                   	pop    edi
c001f1a5:	c3                   	ret    

c001f1a6 <Vm::fpuULongToFloat(unsigned long long)>:
c001f1a6:	57                   	push   edi
c001f1a7:	31 c9                	xor    ecx,ecx
c001f1a9:	56                   	push   esi
c001f1aa:	53                   	push   ebx
c001f1ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f1af:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f1b3:	0f ba e7 14          	bt     edi,0x14
c001f1b7:	72 07                	jb     c001f1c0 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f1b9:	01 f6                	add    esi,esi
c001f1bb:	11 ff                	adc    edi,edi
c001f1bd:	41                   	inc    ecx
c001f1be:	eb f3                	jmp    c001f1b3 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f1c0:	89 fa                	mov    edx,edi
c001f1c2:	89 f0                	mov    eax,esi
c001f1c4:	bb 33 04 00 00       	mov    ebx,0x433
c001f1c9:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f1cf:	29 cb                	sub    ebx,ecx
c001f1d1:	89 d9                	mov    ecx,ebx
c001f1d3:	5b                   	pop    ebx
c001f1d4:	c1 e1 14             	shl    ecx,0x14
c001f1d7:	5e                   	pop    esi
c001f1d8:	09 ca                	or     edx,ecx
c001f1da:	5f                   	pop    edi
c001f1db:	c3                   	ret    

c001f1dc <Vm::fpuLongToFloat(long long)>:
c001f1dc:	56                   	push   esi
c001f1dd:	31 c0                	xor    eax,eax
c001f1df:	53                   	push   ebx
c001f1e0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f1e4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f1e8:	39 c8                	cmp    eax,ecx
c001f1ea:	19 d8                	sbb    eax,ebx
c001f1ec:	7d 04                	jge    c001f1f2 <Vm::fpuLongToFloat(long long)+0x16>
c001f1ee:	31 f6                	xor    esi,esi
c001f1f0:	eb 0c                	jmp    c001f1fe <Vm::fpuLongToFloat(long long)+0x22>
c001f1f2:	f7 d9                	neg    ecx
c001f1f4:	be 01 00 00 00       	mov    esi,0x1
c001f1f9:	83 d3 00             	adc    ebx,0x0
c001f1fc:	f7 db                	neg    ebx
c001f1fe:	31 c0                	xor    eax,eax
c001f200:	0f ba e3 14          	bt     ebx,0x14
c001f204:	72 07                	jb     c001f20d <Vm::fpuLongToFloat(long long)+0x31>
c001f206:	01 c9                	add    ecx,ecx
c001f208:	11 db                	adc    ebx,ebx
c001f20a:	40                   	inc    eax
c001f20b:	eb f3                	jmp    c001f200 <Vm::fpuLongToFloat(long long)+0x24>
c001f20d:	ba 33 04 00 00       	mov    edx,0x433
c001f212:	29 c2                	sub    edx,eax
c001f214:	89 c8                	mov    eax,ecx
c001f216:	c1 e2 14             	shl    edx,0x14
c001f219:	89 d9                	mov    ecx,ebx
c001f21b:	89 f3                	mov    ebx,esi
c001f21d:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f223:	09 ca                	or     edx,ecx
c001f225:	84 db                	test   bl,bl
c001f227:	74 06                	je     c001f22f <Vm::fpuLongToFloat(long long)+0x53>
c001f229:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f22f:	5b                   	pop    ebx
c001f230:	5e                   	pop    esi
c001f231:	c3                   	ret    

c001f232 <Vm::fpuGet0()>:
c001f232:	31 c0                	xor    eax,eax
c001f234:	31 d2                	xor    edx,edx
c001f236:	c3                   	ret    

c001f237 <Vm::fpuGet1()>:
c001f237:	b8 01 00 00 00       	mov    eax,0x1
c001f23c:	31 d2                	xor    edx,edx
c001f23e:	c3                   	ret    

c001f23f <Vm::fpuGetPi()>:
c001f23f:	b8 03 00 00 00       	mov    eax,0x3
c001f244:	31 d2                	xor    edx,edx
c001f246:	c3                   	ret    

c001f247 <Vm::fpuGetLog2E()>:
c001f247:	83 ec 18             	sub    esp,0x18
c001f24a:	68 a8 c1 02 c0       	push   0xc002c1a8
c001f24f:	e8 35 ad ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c001f254:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f259:	31 d2                	xor    edx,edx
c001f25b:	83 c4 1c             	add    esp,0x1c
c001f25e:	c3                   	ret    

c001f25f <Vm::fpuGetLogE2()>:
c001f25f:	83 ec 18             	sub    esp,0x18
c001f262:	68 b4 c1 02 c0       	push   0xc002c1b4
c001f267:	e8 1d ad ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c001f26c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f271:	31 d2                	xor    edx,edx
c001f273:	83 c4 1c             	add    esp,0x1c
c001f276:	c3                   	ret    

c001f277 <Vm::fpuGetLog210()>:
c001f277:	83 ec 18             	sub    esp,0x18
c001f27a:	68 c0 c1 02 c0       	push   0xc002c1c0
c001f27f:	e8 05 ad ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c001f284:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f289:	31 d2                	xor    edx,edx
c001f28b:	83 c4 1c             	add    esp,0x1c
c001f28e:	c3                   	ret    

c001f28f <Vm::fpuGetLog102()>:
c001f28f:	83 ec 18             	sub    esp,0x18
c001f292:	68 cd c1 02 c0       	push   0xc002c1cd
c001f297:	e8 ed ac ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c001f29c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f2a1:	31 d2                	xor    edx,edx
c001f2a3:	83 c4 1c             	add    esp,0x1c
c001f2a6:	c3                   	ret    

c001f2a7 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f2a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f2ab:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f2af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f2b3:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f2b7:	0f 92 c0             	setb   al
c001f2ba:	c3                   	ret    

c001f2bb <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f2bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f2bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2c3:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f2c7:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f2cb:	09 c2                	or     edx,eax
c001f2cd:	0f 94 c0             	sete   al
c001f2d0:	c3                   	ret    

c001f2d1 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f2d1:	57                   	push   edi
c001f2d2:	56                   	push   esi
c001f2d3:	53                   	push   ebx
c001f2d4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f2d8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f2dc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f2e0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f2e4:	57                   	push   edi
c001f2e5:	56                   	push   esi
c001f2e6:	53                   	push   ebx
c001f2e7:	51                   	push   ecx
c001f2e8:	e8 ce ff ff ff       	call   c001f2bb <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f2ed:	83 c4 10             	add    esp,0x10
c001f2f0:	88 c2                	mov    dl,al
c001f2f2:	31 c0                	xor    eax,eax
c001f2f4:	84 d2                	test   dl,dl
c001f2f6:	75 0c                	jne    c001f304 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f2f8:	57                   	push   edi
c001f2f9:	56                   	push   esi
c001f2fa:	53                   	push   ebx
c001f2fb:	51                   	push   ecx
c001f2fc:	e8 a6 ff ff ff       	call   c001f2a7 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f301:	83 c4 10             	add    esp,0x10
c001f304:	83 e0 01             	and    eax,0x1
c001f307:	5b                   	pop    ebx
c001f308:	88 c1                	mov    cl,al
c001f30a:	83 e2 01             	and    edx,0x1
c001f30d:	a0 61 f3 02 c0       	mov    al,ds:0xc002f361
c001f312:	c1 e2 06             	shl    edx,0x6
c001f315:	83 e0 ba             	and    eax,0xffffffba
c001f318:	5e                   	pop    esi
c001f319:	09 c8                	or     eax,ecx
c001f31b:	5f                   	pop    edi
c001f31c:	09 d0                	or     eax,edx
c001f31e:	a2 61 f3 02 c0       	mov    ds:0xc002f361,al
c001f323:	c3                   	ret    

c001f324 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f324:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f328:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f32c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f330:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f334:	c3                   	ret    

c001f335 <Vm::fpuAbs(unsigned long long)>:
c001f335:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f339:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f33d:	c3                   	ret    

c001f33e <Vm::fpuChs(unsigned long long)>:
c001f33e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f342:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f346:	f7 d8                	neg    eax
c001f348:	83 d2 00             	adc    edx,0x0
c001f34b:	f7 da                	neg    edx
c001f34d:	c3                   	ret    

c001f34e <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f34e:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f352:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f357:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f35b:	eb c7                	jmp    c001f324 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f35d <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f35d:	53                   	push   ebx
c001f35e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f362:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f366:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f36a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f36e:	0f af ca             	imul   ecx,edx
c001f371:	0f af d8             	imul   ebx,eax
c001f374:	f7 e2                	mul    edx
c001f376:	01 d9                	add    ecx,ebx
c001f378:	5b                   	pop    ebx
c001f379:	01 ca                	add    edx,ecx
c001f37b:	c3                   	ret    

c001f37c <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f37c:	83 ec 0c             	sub    esp,0xc
c001f37f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f383:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f387:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f38f:	e8 60 75 00 00       	call   c00268f4 <__udivdi3>
c001f394:	83 c4 1c             	add    esp,0x1c
c001f397:	c3                   	ret    

c001f398 <Vm::fpuSquare(unsigned long long)>:
c001f398:	50                   	push   eax
c001f399:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f39d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f3a1:	52                   	push   edx
c001f3a2:	50                   	push   eax
c001f3a3:	52                   	push   edx
c001f3a4:	50                   	push   eax
c001f3a5:	e8 b3 ff ff ff       	call   c001f35d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f3aa:	83 c4 14             	add    esp,0x14
c001f3ad:	c3                   	ret    

c001f3ae <Vm::fpuGetReg(int)>:
c001f3ae:	83 ec 0c             	sub    esp,0xc
c001f3b1:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f3b6:	76 10                	jbe    c001f3c8 <Vm::fpuGetReg(int)+0x1a>
c001f3b8:	83 ec 0c             	sub    esp,0xc
c001f3bb:	68 da c1 02 c0       	push   0xc002c1da
c001f3c0:	e8 c4 ab ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c001f3c5:	83 c4 10             	add    esp,0x10
c001f3c8:	a0 61 f3 02 c0       	mov    al,ds:0xc002f361
c001f3cd:	b9 08 00 00 00       	mov    ecx,0x8
c001f3d2:	c0 e8 03             	shr    al,0x3
c001f3d5:	83 e0 07             	and    eax,0x7
c001f3d8:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f3dc:	99                   	cdq    
c001f3dd:	f7 f9                	idiv   ecx
c001f3df:	8b 04 d5 64 f3 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd0c9c]
c001f3e6:	8b 14 d5 68 f3 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd0c98]
c001f3ed:	83 c4 0c             	add    esp,0xc
c001f3f0:	c3                   	ret    

c001f3f1 <Vm::fpuSetReg(int, unsigned long long)>:
c001f3f1:	57                   	push   edi
c001f3f2:	56                   	push   esi
c001f3f3:	52                   	push   edx
c001f3f4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f3f8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f3fc:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f401:	76 10                	jbe    c001f413 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f403:	83 ec 0c             	sub    esp,0xc
c001f406:	68 ed c1 02 c0       	push   0xc002c1ed
c001f40b:	e8 79 ab ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c001f410:	83 c4 10             	add    esp,0x10
c001f413:	a0 61 f3 02 c0       	mov    al,ds:0xc002f361
c001f418:	b9 08 00 00 00       	mov    ecx,0x8
c001f41d:	c0 e8 03             	shr    al,0x3
c001f420:	83 e0 07             	and    eax,0x7
c001f423:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f427:	99                   	cdq    
c001f428:	f7 f9                	idiv   ecx
c001f42a:	89 34 d5 64 f3 02 c0 	mov    DWORD PTR [edx*8-0x3ffd0c9c],esi
c001f431:	89 3c d5 68 f3 02 c0 	mov    DWORD PTR [edx*8-0x3ffd0c98],edi
c001f438:	58                   	pop    eax
c001f439:	5e                   	pop    esi
c001f43a:	5f                   	pop    edi
c001f43b:	c3                   	ret    

c001f43c <Vm::fpuPush(unsigned long long)>:
c001f43c:	a0 61 f3 02 c0       	mov    al,ds:0xc002f361
c001f441:	c0 e8 03             	shr    al,0x3
c001f444:	83 e0 07             	and    eax,0x7
c001f447:	83 c0 07             	add    eax,0x7
c001f44a:	88 c2                	mov    dl,al
c001f44c:	83 e0 07             	and    eax,0x7
c001f44f:	83 e2 07             	and    edx,0x7
c001f452:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f459:	8a 15 61 f3 02 c0    	mov    dl,BYTE PTR ds:0xc002f361
c001f45f:	83 e2 c7             	and    edx,0xffffffc7
c001f462:	09 ca                	or     edx,ecx
c001f464:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f468:	88 15 61 f3 02 c0    	mov    BYTE PTR ds:0xc002f361,dl
c001f46e:	89 0c c5 68 f3 02 c0 	mov    DWORD PTR [eax*8-0x3ffd0c98],ecx
c001f475:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f479:	89 14 c5 64 f3 02 c0 	mov    DWORD PTR [eax*8-0x3ffd0c9c],edx
c001f480:	a1 a4 f3 02 c0       	mov    eax,ds:0xc002f3a4
c001f485:	83 f8 08             	cmp    eax,0x8
c001f488:	75 08                	jne    c001f492 <Vm::fpuPush(unsigned long long)+0x56>
c001f48a:	80 0d 60 f3 02 c0 40 	or     BYTE PTR ds:0xc002f360,0x40
c001f491:	c3                   	ret    
c001f492:	40                   	inc    eax
c001f493:	a3 a4 f3 02 c0       	mov    ds:0xc002f3a4,eax
c001f498:	c3                   	ret    

c001f499 <Vm::fpuPop()>:
c001f499:	8a 0d 61 f3 02 c0    	mov    cl,BYTE PTR ds:0xc002f361
c001f49f:	53                   	push   ebx
c001f4a0:	c0 e9 03             	shr    cl,0x3
c001f4a3:	8a 1d 61 f3 02 c0    	mov    bl,BYTE PTR ds:0xc002f361
c001f4a9:	83 e1 07             	and    ecx,0x7
c001f4ac:	83 e3 c7             	and    ebx,0xffffffc7
c001f4af:	8b 04 cd 64 f3 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd0c9c]
c001f4b6:	8b 14 cd 68 f3 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd0c98]
c001f4bd:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f4c4:	83 e1 38             	and    ecx,0x38
c001f4c7:	09 d9                	or     ecx,ebx
c001f4c9:	88 0d 61 f3 02 c0    	mov    BYTE PTR ds:0xc002f361,cl
c001f4cf:	8b 0d a4 f3 02 c0    	mov    ecx,DWORD PTR ds:0xc002f3a4
c001f4d5:	85 c9                	test   ecx,ecx
c001f4d7:	74 09                	je     c001f4e2 <Vm::fpuPop()+0x49>
c001f4d9:	49                   	dec    ecx
c001f4da:	89 0d a4 f3 02 c0    	mov    DWORD PTR ds:0xc002f3a4,ecx
c001f4e0:	eb 07                	jmp    c001f4e9 <Vm::fpuPop()+0x50>
c001f4e2:	80 0d 60 f3 02 c0 40 	or     BYTE PTR ds:0xc002f360,0x40
c001f4e9:	5b                   	pop    ebx
c001f4ea:	c3                   	ret    

c001f4eb <Vm::x87Handler(regs*)>:
c001f4eb:	55                   	push   ebp
c001f4ec:	57                   	push   edi
c001f4ed:	56                   	push   esi
c001f4ee:	53                   	push   ebx
c001f4ef:	83 ec 1c             	sub    esp,0x1c
c001f4f2:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f4f6:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f4fb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f4fe:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f506:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f50a:	50                   	push   eax
c001f50b:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f50f:	50                   	push   eax
c001f510:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f514:	50                   	push   eax
c001f515:	53                   	push   ebx
c001f516:	e8 87 a1 ff ff       	call   c00196a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f51b:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f51e:	83 c4 10             	add    esp,0x10
c001f521:	89 c6                	mov    esi,eax
c001f523:	80 fa d9             	cmp    dl,0xd9
c001f526:	0f 85 52 01 00 00    	jne    c001f67e <Vm::x87Handler(regs*)+0x193>
c001f52c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f530:	8d 50 20             	lea    edx,[eax+0x20]
c001f533:	80 fa 0e             	cmp    dl,0xe
c001f536:	0f 87 86 00 00 00    	ja     c001f5c2 <Vm::x87Handler(regs*)+0xd7>
c001f53c:	0f b6 d2             	movzx  edx,dl
c001f53f:	ff 24 95 00 c2 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd3e00]
c001f546:	e8 e7 fc ff ff       	call   c001f232 <Vm::fpuGet0()>
c001f54b:	eb 05                	jmp    c001f552 <Vm::x87Handler(regs*)+0x67>
c001f54d:	e8 e5 fc ff ff       	call   c001f237 <Vm::fpuGet1()>
c001f552:	57                   	push   edi
c001f553:	57                   	push   edi
c001f554:	52                   	push   edx
c001f555:	50                   	push   eax
c001f556:	e8 e1 fe ff ff       	call   c001f43c <Vm::fpuPush(unsigned long long)>
c001f55b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f55f:	83 c4 10             	add    esp,0x10
c001f562:	b0 01                	mov    al,0x1
c001f564:	e9 e3 09 00 00       	jmp    c001ff4c <Vm::x87Handler(regs*)+0xa61>
c001f569:	83 ec 0c             	sub    esp,0xc
c001f56c:	6a 00                	push   0x0
c001f56e:	e8 3b fe ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001f573:	59                   	pop    ecx
c001f574:	5e                   	pop    esi
c001f575:	52                   	push   edx
c001f576:	50                   	push   eax
c001f577:	e8 c2 fd ff ff       	call   c001f33e <Vm::fpuChs(unsigned long long)>
c001f57c:	eb 13                	jmp    c001f591 <Vm::x87Handler(regs*)+0xa6>
c001f57e:	83 ec 0c             	sub    esp,0xc
c001f581:	6a 00                	push   0x0
c001f583:	e8 26 fe ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001f588:	5f                   	pop    edi
c001f589:	5d                   	pop    ebp
c001f58a:	52                   	push   edx
c001f58b:	50                   	push   eax
c001f58c:	e8 a4 fd ff ff       	call   c001f335 <Vm::fpuAbs(unsigned long long)>
c001f591:	83 c4 0c             	add    esp,0xc
c001f594:	52                   	push   edx
c001f595:	50                   	push   eax
c001f596:	6a 00                	push   0x0
c001f598:	e8 54 fe ff ff       	call   c001f3f1 <Vm::fpuSetReg(int, unsigned long long)>
c001f59d:	eb bc                	jmp    c001f55b <Vm::x87Handler(regs*)+0x70>
c001f59f:	e8 d3 fc ff ff       	call   c001f277 <Vm::fpuGetLog210()>
c001f5a4:	eb ac                	jmp    c001f552 <Vm::x87Handler(regs*)+0x67>
c001f5a6:	e8 9c fc ff ff       	call   c001f247 <Vm::fpuGetLog2E()>
c001f5ab:	eb a5                	jmp    c001f552 <Vm::x87Handler(regs*)+0x67>
c001f5ad:	e8 8d fc ff ff       	call   c001f23f <Vm::fpuGetPi()>
c001f5b2:	eb 9e                	jmp    c001f552 <Vm::x87Handler(regs*)+0x67>
c001f5b4:	e8 d6 fc ff ff       	call   c001f28f <Vm::fpuGetLog102()>
c001f5b9:	eb 97                	jmp    c001f552 <Vm::x87Handler(regs*)+0x67>
c001f5bb:	e8 9f fc ff ff       	call   c001f25f <Vm::fpuGetLogE2()>
c001f5c0:	eb 90                	jmp    c001f552 <Vm::x87Handler(regs*)+0x67>
c001f5c2:	8d 50 40             	lea    edx,[eax+0x40]
c001f5c5:	80 fa 07             	cmp    dl,0x7
c001f5c8:	77 15                	ja     c001f5df <Vm::x87Handler(regs*)+0xf4>
c001f5ca:	83 ec 0c             	sub    esp,0xc
c001f5cd:	2d c0 00 00 00       	sub    eax,0xc0
c001f5d2:	50                   	push   eax
c001f5d3:	e8 d6 fd ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001f5d8:	59                   	pop    ecx
c001f5d9:	5e                   	pop    esi
c001f5da:	e9 75 ff ff ff       	jmp    c001f554 <Vm::x87Handler(regs*)+0x69>
c001f5df:	8d 50 38             	lea    edx,[eax+0x38]
c001f5e2:	80 fa 07             	cmp    dl,0x7
c001f5e5:	77 3c                	ja     c001f623 <Vm::x87Handler(regs*)+0x138>
c001f5e7:	83 ec 0c             	sub    esp,0xc
c001f5ea:	2d c8 00 00 00       	sub    eax,0xc8
c001f5ef:	50                   	push   eax
c001f5f0:	e8 b9 fd ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001f5f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f5fc:	89 c6                	mov    esi,eax
c001f5fe:	89 d7                	mov    edi,edx
c001f600:	e8 a9 fd ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001f605:	83 c4 0c             	add    esp,0xc
c001f608:	52                   	push   edx
c001f609:	50                   	push   eax
c001f60a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f60e:	2d c8 00 00 00       	sub    eax,0xc8
c001f613:	50                   	push   eax
c001f614:	e8 d8 fd ff ff       	call   c001f3f1 <Vm::fpuSetReg(int, unsigned long long)>
c001f619:	83 c4 0c             	add    esp,0xc
c001f61c:	57                   	push   edi
c001f61d:	56                   	push   esi
c001f61e:	e9 73 ff ff ff       	jmp    c001f596 <Vm::x87Handler(regs*)+0xab>
c001f623:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f627:	84 d2                	test   dl,dl
c001f629:	75 0f                	jne    c001f63a <Vm::x87Handler(regs*)+0x14f>
c001f62b:	83 ec 0c             	sub    esp,0xc
c001f62e:	ff 36                	push   DWORD PTR [esi]
c001f630:	e8 c8 fa ff ff       	call   c001f0fd <Vm::fpu32ToInternal(unsigned int)>
c001f635:	e9 bf 00 00 00       	jmp    c001f6f9 <Vm::x87Handler(regs*)+0x20e>
c001f63a:	80 fa 03             	cmp    dl,0x3
c001f63d:	75 13                	jne    c001f652 <Vm::x87Handler(regs*)+0x167>
c001f63f:	e8 55 fe ff ff       	call   c001f499 <Vm::fpuPop()>
c001f644:	55                   	push   ebp
c001f645:	55                   	push   ebp
c001f646:	52                   	push   edx
c001f647:	50                   	push   eax
c001f648:	e8 4c fa ff ff       	call   c001f099 <Vm::fpuInternalTo32(unsigned long long)>
c001f64d:	e9 88 00 00 00       	jmp    c001f6da <Vm::x87Handler(regs*)+0x1ef>
c001f652:	80 fa 05             	cmp    dl,0x5
c001f655:	75 0e                	jne    c001f665 <Vm::x87Handler(regs*)+0x17a>
c001f657:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f65a:	66 a3 62 f3 02 c0    	mov    ds:0xc002f362,ax
c001f660:	e9 df 00 00 00       	jmp    c001f744 <Vm::x87Handler(regs*)+0x259>
c001f665:	31 c0                	xor    eax,eax
c001f667:	80 fa 07             	cmp    dl,0x7
c001f66a:	0f 85 dc 08 00 00    	jne    c001ff4c <Vm::x87Handler(regs*)+0xa61>
c001f670:	66 a1 62 f3 02 c0    	mov    ax,ds:0xc002f362
c001f676:	66 89 06             	mov    WORD PTR [esi],ax
c001f679:	e9 c6 00 00 00       	jmp    c001f744 <Vm::x87Handler(regs*)+0x259>
c001f67e:	80 fa d8             	cmp    dl,0xd8
c001f681:	0f 84 c9 00 00 00    	je     c001f750 <Vm::x87Handler(regs*)+0x265>
c001f687:	80 fa dc             	cmp    dl,0xdc
c001f68a:	0f 84 0d 02 00 00    	je     c001f89d <Vm::x87Handler(regs*)+0x3b2>
c001f690:	80 fa de             	cmp    dl,0xde
c001f693:	0f 84 cd 02 00 00    	je     c001f966 <Vm::x87Handler(regs*)+0x47b>
c001f699:	80 fa dd             	cmp    dl,0xdd
c001f69c:	0f 84 5f 04 00 00    	je     c001fb01 <Vm::x87Handler(regs*)+0x616>
c001f6a2:	80 fa da             	cmp    dl,0xda
c001f6a5:	0f 84 24 05 00 00    	je     c001fbcf <Vm::x87Handler(regs*)+0x6e4>
c001f6ab:	80 fa df             	cmp    dl,0xdf
c001f6ae:	0f 84 68 05 00 00    	je     c001fc1c <Vm::x87Handler(regs*)+0x731>
c001f6b4:	31 c0                	xor    eax,eax
c001f6b6:	80 fa db             	cmp    dl,0xdb
c001f6b9:	0f 85 8d 08 00 00    	jne    c001ff4c <Vm::x87Handler(regs*)+0xa61>
c001f6bf:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f6c3:	80 fa 03             	cmp    dl,0x3
c001f6c6:	0f 85 70 06 00 00    	jne    c001fd3c <Vm::x87Handler(regs*)+0x851>
c001f6cc:	e8 c8 fd ff ff       	call   c001f499 <Vm::fpuPop()>
c001f6d1:	55                   	push   ebp
c001f6d2:	55                   	push   ebp
c001f6d3:	52                   	push   edx
c001f6d4:	50                   	push   eax
c001f6d5:	e8 71 fa ff ff       	call   c001f14b <Vm::fpuFloatToLong(unsigned long long)>
c001f6da:	83 c4 10             	add    esp,0x10
c001f6dd:	89 06                	mov    DWORD PTR [esi],eax
c001f6df:	eb 63                	jmp    c001f744 <Vm::x87Handler(regs*)+0x259>
c001f6e1:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f6e5:	84 d2                	test   dl,dl
c001f6e7:	0f 85 e6 05 00 00    	jne    c001fcd3 <Vm::x87Handler(regs*)+0x7e8>
c001f6ed:	57                   	push   edi
c001f6ee:	57                   	push   edi
c001f6ef:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f6f2:	ff 36                	push   DWORD PTR [esi]
c001f6f4:	e8 49 fa ff ff       	call   c001f142 <Vm::fpu64ToInternal(unsigned long long)>
c001f6f9:	5e                   	pop    esi
c001f6fa:	5f                   	pop    edi
c001f6fb:	52                   	push   edx
c001f6fc:	50                   	push   eax
c001f6fd:	e8 3a fd ff ff       	call   c001f43c <Vm::fpuPush(unsigned long long)>
c001f702:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f706:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f709:	e9 51 fe ff ff       	jmp    c001f55f <Vm::x87Handler(regs*)+0x74>
c001f70e:	80 fa 03             	cmp    dl,0x3
c001f711:	0f 85 d7 06 00 00    	jne    c001fdee <Vm::x87Handler(regs*)+0x903>
c001f717:	57                   	push   edi
c001f718:	57                   	push   edi
c001f719:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f71c:	ff 36                	push   DWORD PTR [esi]
c001f71e:	e8 1f fa ff ff       	call   c001f142 <Vm::fpu64ToInternal(unsigned long long)>
c001f723:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f72a:	89 c6                	mov    esi,eax
c001f72c:	89 d7                	mov    edi,edx
c001f72e:	e8 7b fc ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001f733:	57                   	push   edi
c001f734:	56                   	push   esi
c001f735:	52                   	push   edx
c001f736:	50                   	push   eax
c001f737:	e8 95 fb ff ff       	call   c001f2d1 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f73c:	83 c4 20             	add    esp,0x20
c001f73f:	e8 55 fd ff ff       	call   c001f499 <Vm::fpuPop()>
c001f744:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f748:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f74b:	e9 12 fe ff ff       	jmp    c001f562 <Vm::x87Handler(regs*)+0x77>
c001f750:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f754:	8d 50 40             	lea    edx,[eax+0x40]
c001f757:	80 fa 07             	cmp    dl,0x7
c001f75a:	77 29                	ja     c001f785 <Vm::x87Handler(regs*)+0x29a>
c001f75c:	83 ec 0c             	sub    esp,0xc
c001f75f:	2d c0 00 00 00       	sub    eax,0xc0
c001f764:	50                   	push   eax
c001f765:	e8 44 fc ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001f76a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f771:	89 c6                	mov    esi,eax
c001f773:	89 d7                	mov    edi,edx
c001f775:	e8 34 fc ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001f77a:	57                   	push   edi
c001f77b:	56                   	push   esi
c001f77c:	52                   	push   edx
c001f77d:	50                   	push   eax
c001f77e:	e8 a1 fb ff ff       	call   c001f324 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f783:	eb 2f                	jmp    c001f7b4 <Vm::x87Handler(regs*)+0x2c9>
c001f785:	8d 50 38             	lea    edx,[eax+0x38]
c001f788:	80 fa 07             	cmp    dl,0x7
c001f78b:	77 2f                	ja     c001f7bc <Vm::x87Handler(regs*)+0x2d1>
c001f78d:	83 ec 0c             	sub    esp,0xc
c001f790:	2d c8 00 00 00       	sub    eax,0xc8
c001f795:	50                   	push   eax
c001f796:	e8 13 fc ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001f79b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f7a2:	89 c6                	mov    esi,eax
c001f7a4:	89 d7                	mov    edi,edx
c001f7a6:	e8 03 fc ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001f7ab:	57                   	push   edi
c001f7ac:	56                   	push   esi
c001f7ad:	52                   	push   edx
c001f7ae:	50                   	push   eax
c001f7af:	e8 a9 fb ff ff       	call   c001f35d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f7b4:	83 c4 1c             	add    esp,0x1c
c001f7b7:	e9 d8 fd ff ff       	jmp    c001f594 <Vm::x87Handler(regs*)+0xa9>
c001f7bc:	8d 50 30             	lea    edx,[eax+0x30]
c001f7bf:	80 fa 07             	cmp    dl,0x7
c001f7c2:	77 0d                	ja     c001f7d1 <Vm::x87Handler(regs*)+0x2e6>
c001f7c4:	83 ec 0c             	sub    esp,0xc
c001f7c7:	2d d0 00 00 00       	sub    eax,0xd0
c001f7cc:	e9 99 03 00 00       	jmp    c001fb6a <Vm::x87Handler(regs*)+0x67f>
c001f7d1:	8d 50 28             	lea    edx,[eax+0x28]
c001f7d4:	80 fa 07             	cmp    dl,0x7
c001f7d7:	77 0d                	ja     c001f7e6 <Vm::x87Handler(regs*)+0x2fb>
c001f7d9:	83 ec 0c             	sub    esp,0xc
c001f7dc:	2d d8 00 00 00       	sub    eax,0xd8
c001f7e1:	e9 c0 03 00 00       	jmp    c001fba6 <Vm::x87Handler(regs*)+0x6bb>
c001f7e6:	8d 50 20             	lea    edx,[eax+0x20]
c001f7e9:	80 fa 07             	cmp    dl,0x7
c001f7ec:	77 1b                	ja     c001f809 <Vm::x87Handler(regs*)+0x31e>
c001f7ee:	83 ec 0c             	sub    esp,0xc
c001f7f1:	2d e0 00 00 00       	sub    eax,0xe0
c001f7f6:	50                   	push   eax
c001f7f7:	e8 b2 fb ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001f7fc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f803:	89 c6                	mov    esi,eax
c001f805:	89 d7                	mov    edi,edx
c001f807:	eb 22                	jmp    c001f82b <Vm::x87Handler(regs*)+0x340>
c001f809:	8d 50 18             	lea    edx,[eax+0x18]
c001f80c:	80 fa 07             	cmp    dl,0x7
c001f80f:	77 2d                	ja     c001f83e <Vm::x87Handler(regs*)+0x353>
c001f811:	83 ec 0c             	sub    esp,0xc
c001f814:	6a 00                	push   0x0
c001f816:	e8 93 fb ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001f81b:	89 c6                	mov    esi,eax
c001f81d:	89 d7                	mov    edi,edx
c001f81f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f823:	2d e8 00 00 00       	sub    eax,0xe8
c001f828:	89 04 24             	mov    DWORD PTR [esp],eax
c001f82b:	e8 7e fb ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001f830:	57                   	push   edi
c001f831:	56                   	push   esi
c001f832:	52                   	push   edx
c001f833:	50                   	push   eax
c001f834:	e8 15 fb ff ff       	call   c001f34e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f839:	e9 76 ff ff ff       	jmp    c001f7b4 <Vm::x87Handler(regs*)+0x2c9>
c001f83e:	8d 50 10             	lea    edx,[eax+0x10]
c001f841:	80 fa 07             	cmp    dl,0x7
c001f844:	77 1b                	ja     c001f861 <Vm::x87Handler(regs*)+0x376>
c001f846:	83 ec 0c             	sub    esp,0xc
c001f849:	2d f0 00 00 00       	sub    eax,0xf0
c001f84e:	50                   	push   eax
c001f84f:	e8 5a fb ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001f854:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f85b:	89 c6                	mov    esi,eax
c001f85d:	89 d7                	mov    edi,edx
c001f85f:	eb 22                	jmp    c001f883 <Vm::x87Handler(regs*)+0x398>
c001f861:	3c f7                	cmp    al,0xf7
c001f863:	0f 86 d1 03 00 00    	jbe    c001fc3a <Vm::x87Handler(regs*)+0x74f>
c001f869:	83 ec 0c             	sub    esp,0xc
c001f86c:	6a 00                	push   0x0
c001f86e:	e8 3b fb ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001f873:	89 c6                	mov    esi,eax
c001f875:	89 d7                	mov    edi,edx
c001f877:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f87b:	2d f8 00 00 00       	sub    eax,0xf8
c001f880:	89 04 24             	mov    DWORD PTR [esp],eax
c001f883:	e8 26 fb ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001f888:	57                   	push   edi
c001f889:	56                   	push   esi
c001f88a:	52                   	push   edx
c001f88b:	50                   	push   eax
c001f88c:	e8 eb fa ff ff       	call   c001f37c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f891:	83 c4 1c             	add    esp,0x1c
c001f894:	52                   	push   edx
c001f895:	50                   	push   eax
c001f896:	6a 00                	push   0x0
c001f898:	e9 51 02 00 00       	jmp    c001faee <Vm::x87Handler(regs*)+0x603>
c001f89d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8a1:	8d 50 40             	lea    edx,[eax+0x40]
c001f8a4:	80 fa 07             	cmp    dl,0x7
c001f8a7:	77 37                	ja     c001f8e0 <Vm::x87Handler(regs*)+0x3f5>
c001f8a9:	83 ec 0c             	sub    esp,0xc
c001f8ac:	2d c0 00 00 00       	sub    eax,0xc0
c001f8b1:	50                   	push   eax
c001f8b2:	e8 f7 fa ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001f8b7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f8be:	89 c6                	mov    esi,eax
c001f8c0:	89 d7                	mov    edi,edx
c001f8c2:	e8 e7 fa ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001f8c7:	57                   	push   edi
c001f8c8:	56                   	push   esi
c001f8c9:	52                   	push   edx
c001f8ca:	50                   	push   eax
c001f8cb:	e8 54 fa ff ff       	call   c001f324 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f8d0:	83 c4 1c             	add    esp,0x1c
c001f8d3:	52                   	push   edx
c001f8d4:	50                   	push   eax
c001f8d5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8d9:	2d c0 00 00 00       	sub    eax,0xc0
c001f8de:	eb 3d                	jmp    c001f91d <Vm::x87Handler(regs*)+0x432>
c001f8e0:	8d 50 38             	lea    edx,[eax+0x38]
c001f8e3:	80 fa 07             	cmp    dl,0x7
c001f8e6:	77 3b                	ja     c001f923 <Vm::x87Handler(regs*)+0x438>
c001f8e8:	83 ec 0c             	sub    esp,0xc
c001f8eb:	2d c8 00 00 00       	sub    eax,0xc8
c001f8f0:	50                   	push   eax
c001f8f1:	e8 b8 fa ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001f8f6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f8fd:	89 c6                	mov    esi,eax
c001f8ff:	89 d7                	mov    edi,edx
c001f901:	e8 a8 fa ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001f906:	57                   	push   edi
c001f907:	56                   	push   esi
c001f908:	52                   	push   edx
c001f909:	50                   	push   eax
c001f90a:	e8 4e fa ff ff       	call   c001f35d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f90f:	83 c4 1c             	add    esp,0x1c
c001f912:	52                   	push   edx
c001f913:	50                   	push   eax
c001f914:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f918:	2d c8 00 00 00       	sub    eax,0xc8
c001f91d:	50                   	push   eax
c001f91e:	e9 75 fc ff ff       	jmp    c001f598 <Vm::x87Handler(regs*)+0xad>
c001f923:	83 c0 18             	add    eax,0x18
c001f926:	3c 07                	cmp    al,0x7
c001f928:	0f 87 3b 04 00 00    	ja     c001fd69 <Vm::x87Handler(regs*)+0x87e>
c001f92e:	83 ec 0c             	sub    esp,0xc
c001f931:	6a 00                	push   0x0
c001f933:	e8 76 fa ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001f938:	89 c6                	mov    esi,eax
c001f93a:	89 d7                	mov    edi,edx
c001f93c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f940:	2d e8 00 00 00       	sub    eax,0xe8
c001f945:	89 04 24             	mov    DWORD PTR [esp],eax
c001f948:	e8 61 fa ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001f94d:	57                   	push   edi
c001f94e:	56                   	push   esi
c001f94f:	52                   	push   edx
c001f950:	50                   	push   eax
c001f951:	e8 f8 f9 ff ff       	call   c001f34e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f956:	83 c4 1c             	add    esp,0x1c
c001f959:	52                   	push   edx
c001f95a:	50                   	push   eax
c001f95b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f95f:	2d e8 00 00 00       	sub    eax,0xe8
c001f964:	eb b7                	jmp    c001f91d <Vm::x87Handler(regs*)+0x432>
c001f966:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f96a:	8d 50 40             	lea    edx,[eax+0x40]
c001f96d:	80 fa 07             	cmp    dl,0x7
c001f970:	77 3a                	ja     c001f9ac <Vm::x87Handler(regs*)+0x4c1>
c001f972:	83 ec 0c             	sub    esp,0xc
c001f975:	2d c0 00 00 00       	sub    eax,0xc0
c001f97a:	50                   	push   eax
c001f97b:	e8 2e fa ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001f980:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f987:	89 c6                	mov    esi,eax
c001f989:	89 d7                	mov    edi,edx
c001f98b:	e8 1e fa ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001f990:	57                   	push   edi
c001f991:	56                   	push   esi
c001f992:	52                   	push   edx
c001f993:	50                   	push   eax
c001f994:	e8 8b f9 ff ff       	call   c001f324 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f999:	83 c4 1c             	add    esp,0x1c
c001f99c:	52                   	push   edx
c001f99d:	50                   	push   eax
c001f99e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9a2:	2d c0 00 00 00       	sub    eax,0xc0
c001f9a7:	e9 9e 01 00 00       	jmp    c001fb4a <Vm::x87Handler(regs*)+0x65f>
c001f9ac:	8d 50 20             	lea    edx,[eax+0x20]
c001f9af:	80 fa 07             	cmp    dl,0x7
c001f9b2:	77 3a                	ja     c001f9ee <Vm::x87Handler(regs*)+0x503>
c001f9b4:	83 ec 0c             	sub    esp,0xc
c001f9b7:	2d e0 00 00 00       	sub    eax,0xe0
c001f9bc:	50                   	push   eax
c001f9bd:	e8 ec f9 ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001f9c2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f9c9:	89 c6                	mov    esi,eax
c001f9cb:	89 d7                	mov    edi,edx
c001f9cd:	e8 dc f9 ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001f9d2:	57                   	push   edi
c001f9d3:	56                   	push   esi
c001f9d4:	52                   	push   edx
c001f9d5:	50                   	push   eax
c001f9d6:	e8 73 f9 ff ff       	call   c001f34e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f9db:	83 c4 1c             	add    esp,0x1c
c001f9de:	52                   	push   edx
c001f9df:	50                   	push   eax
c001f9e0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9e4:	2d e0 00 00 00       	sub    eax,0xe0
c001f9e9:	e9 5c 01 00 00       	jmp    c001fb4a <Vm::x87Handler(regs*)+0x65f>
c001f9ee:	8d 50 18             	lea    edx,[eax+0x18]
c001f9f1:	80 fa 07             	cmp    dl,0x7
c001f9f4:	77 3b                	ja     c001fa31 <Vm::x87Handler(regs*)+0x546>
c001f9f6:	83 ec 0c             	sub    esp,0xc
c001f9f9:	6a 00                	push   0x0
c001f9fb:	e8 ae f9 ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001fa00:	89 c6                	mov    esi,eax
c001fa02:	89 d7                	mov    edi,edx
c001fa04:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa08:	2d e8 00 00 00       	sub    eax,0xe8
c001fa0d:	89 04 24             	mov    DWORD PTR [esp],eax
c001fa10:	e8 99 f9 ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001fa15:	57                   	push   edi
c001fa16:	56                   	push   esi
c001fa17:	52                   	push   edx
c001fa18:	50                   	push   eax
c001fa19:	e8 30 f9 ff ff       	call   c001f34e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fa1e:	83 c4 1c             	add    esp,0x1c
c001fa21:	52                   	push   edx
c001fa22:	50                   	push   eax
c001fa23:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa27:	2d e8 00 00 00       	sub    eax,0xe8
c001fa2c:	e9 19 01 00 00       	jmp    c001fb4a <Vm::x87Handler(regs*)+0x65f>
c001fa31:	8d 50 38             	lea    edx,[eax+0x38]
c001fa34:	80 fa 07             	cmp    dl,0x7
c001fa37:	77 37                	ja     c001fa70 <Vm::x87Handler(regs*)+0x585>
c001fa39:	83 ec 0c             	sub    esp,0xc
c001fa3c:	2d c8 00 00 00       	sub    eax,0xc8
c001fa41:	50                   	push   eax
c001fa42:	e8 67 f9 ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001fa47:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa4e:	89 c6                	mov    esi,eax
c001fa50:	89 d7                	mov    edi,edx
c001fa52:	e8 57 f9 ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001fa57:	57                   	push   edi
c001fa58:	56                   	push   esi
c001fa59:	52                   	push   edx
c001fa5a:	50                   	push   eax
c001fa5b:	e8 fd f8 ff ff       	call   c001f35d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fa60:	83 c4 1c             	add    esp,0x1c
c001fa63:	52                   	push   edx
c001fa64:	50                   	push   eax
c001fa65:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa69:	2d c8 00 00 00       	sub    eax,0xc8
c001fa6e:	eb 7d                	jmp    c001faed <Vm::x87Handler(regs*)+0x602>
c001fa70:	3c f7                	cmp    al,0xf7
c001fa72:	76 38                	jbe    c001faac <Vm::x87Handler(regs*)+0x5c1>
c001fa74:	83 ec 0c             	sub    esp,0xc
c001fa77:	6a 00                	push   0x0
c001fa79:	e8 30 f9 ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001fa7e:	89 c6                	mov    esi,eax
c001fa80:	89 d7                	mov    edi,edx
c001fa82:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa86:	2d f8 00 00 00       	sub    eax,0xf8
c001fa8b:	89 04 24             	mov    DWORD PTR [esp],eax
c001fa8e:	e8 1b f9 ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001fa93:	57                   	push   edi
c001fa94:	56                   	push   esi
c001fa95:	52                   	push   edx
c001fa96:	50                   	push   eax
c001fa97:	e8 e0 f8 ff ff       	call   c001f37c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fa9c:	83 c4 1c             	add    esp,0x1c
c001fa9f:	52                   	push   edx
c001faa0:	50                   	push   eax
c001faa1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001faa5:	2d f8 00 00 00       	sub    eax,0xf8
c001faaa:	eb 41                	jmp    c001faed <Vm::x87Handler(regs*)+0x602>
c001faac:	8d 50 10             	lea    edx,[eax+0x10]
c001faaf:	80 fa 07             	cmp    dl,0x7
c001fab2:	0f 87 5a 01 00 00    	ja     c001fc12 <Vm::x87Handler(regs*)+0x727>
c001fab8:	83 ec 0c             	sub    esp,0xc
c001fabb:	2d f0 00 00 00       	sub    eax,0xf0
c001fac0:	50                   	push   eax
c001fac1:	e8 e8 f8 ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001fac6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001facd:	89 c6                	mov    esi,eax
c001facf:	89 d7                	mov    edi,edx
c001fad1:	e8 d8 f8 ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001fad6:	57                   	push   edi
c001fad7:	56                   	push   esi
c001fad8:	52                   	push   edx
c001fad9:	50                   	push   eax
c001fada:	e8 9d f8 ff ff       	call   c001f37c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fadf:	83 c4 1c             	add    esp,0x1c
c001fae2:	52                   	push   edx
c001fae3:	50                   	push   eax
c001fae4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fae8:	2d f0 00 00 00       	sub    eax,0xf0
c001faed:	50                   	push   eax
c001faee:	e8 fe f8 ff ff       	call   c001f3f1 <Vm::fpuSetReg(int, unsigned long long)>
c001faf3:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001faf7:	e8 9d f9 ff ff       	call   c001f499 <Vm::fpuPop()>
c001fafc:	e9 5e fa ff ff       	jmp    c001f55f <Vm::x87Handler(regs*)+0x74>
c001fb01:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb05:	8d 50 30             	lea    edx,[eax+0x30]
c001fb08:	80 fa 07             	cmp    dl,0x7
c001fb0b:	77 1d                	ja     c001fb2a <Vm::x87Handler(regs*)+0x63f>
c001fb0d:	83 ec 0c             	sub    esp,0xc
c001fb10:	6a 00                	push   0x0
c001fb12:	e8 97 f8 ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001fb17:	83 c4 0c             	add    esp,0xc
c001fb1a:	52                   	push   edx
c001fb1b:	50                   	push   eax
c001fb1c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb20:	2d d0 00 00 00       	sub    eax,0xd0
c001fb25:	e9 f3 fd ff ff       	jmp    c001f91d <Vm::x87Handler(regs*)+0x432>
c001fb2a:	8d 50 28             	lea    edx,[eax+0x28]
c001fb2d:	80 fa 07             	cmp    dl,0x7
c001fb30:	77 28                	ja     c001fb5a <Vm::x87Handler(regs*)+0x66f>
c001fb32:	83 ec 0c             	sub    esp,0xc
c001fb35:	6a 00                	push   0x0
c001fb37:	e8 72 f8 ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001fb3c:	83 c4 0c             	add    esp,0xc
c001fb3f:	52                   	push   edx
c001fb40:	50                   	push   eax
c001fb41:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb45:	2d d8 00 00 00       	sub    eax,0xd8
c001fb4a:	50                   	push   eax
c001fb4b:	e8 a1 f8 ff ff       	call   c001f3f1 <Vm::fpuSetReg(int, unsigned long long)>
c001fb50:	e8 44 f9 ff ff       	call   c001f499 <Vm::fpuPop()>
c001fb55:	e9 01 fa ff ff       	jmp    c001f55b <Vm::x87Handler(regs*)+0x70>
c001fb5a:	8d 50 20             	lea    edx,[eax+0x20]
c001fb5d:	80 fa 07             	cmp    dl,0x7
c001fb60:	77 30                	ja     c001fb92 <Vm::x87Handler(regs*)+0x6a7>
c001fb62:	83 ec 0c             	sub    esp,0xc
c001fb65:	2d e0 00 00 00       	sub    eax,0xe0
c001fb6a:	50                   	push   eax
c001fb6b:	e8 3e f8 ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001fb70:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb77:	89 c6                	mov    esi,eax
c001fb79:	89 d7                	mov    edi,edx
c001fb7b:	e8 2e f8 ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001fb80:	57                   	push   edi
c001fb81:	56                   	push   esi
c001fb82:	52                   	push   edx
c001fb83:	50                   	push   eax
c001fb84:	e8 48 f7 ff ff       	call   c001f2d1 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fb89:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fb8d:	e9 54 02 00 00       	jmp    c001fde6 <Vm::x87Handler(regs*)+0x8fb>
c001fb92:	8d 50 18             	lea    edx,[eax+0x18]
c001fb95:	80 fa 07             	cmp    dl,0x7
c001fb98:	0f 87 43 fb ff ff    	ja     c001f6e1 <Vm::x87Handler(regs*)+0x1f6>
c001fb9e:	83 ec 0c             	sub    esp,0xc
c001fba1:	2d e8 00 00 00       	sub    eax,0xe8
c001fba6:	50                   	push   eax
c001fba7:	e8 02 f8 ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001fbac:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbb3:	89 c6                	mov    esi,eax
c001fbb5:	89 d7                	mov    edi,edx
c001fbb7:	e8 f2 f7 ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001fbbc:	57                   	push   edi
c001fbbd:	56                   	push   esi
c001fbbe:	52                   	push   edx
c001fbbf:	50                   	push   eax
c001fbc0:	e8 0c f7 ff ff       	call   c001f2d1 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fbc5:	83 c4 20             	add    esp,0x20
c001fbc8:	e8 cc f8 ff ff       	call   c001f499 <Vm::fpuPop()>
c001fbcd:	eb 62                	jmp    c001fc31 <Vm::x87Handler(regs*)+0x746>
c001fbcf:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001fbd3:	0f 85 0f 01 00 00    	jne    c001fce8 <Vm::x87Handler(regs*)+0x7fd>
c001fbd9:	83 ec 0c             	sub    esp,0xc
c001fbdc:	6a 01                	push   0x1
c001fbde:	e8 cb f7 ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001fbe3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbea:	89 c6                	mov    esi,eax
c001fbec:	89 d7                	mov    edi,edx
c001fbee:	e8 bb f7 ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001fbf3:	57                   	push   edi
c001fbf4:	56                   	push   esi
c001fbf5:	52                   	push   edx
c001fbf6:	50                   	push   eax
c001fbf7:	e8 d5 f6 ff ff       	call   c001f2d1 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fbfc:	83 c4 20             	add    esp,0x20
c001fbff:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fc03:	e8 91 f8 ff ff       	call   c001f499 <Vm::fpuPop()>
c001fc08:	e8 8c f8 ff ff       	call   c001f499 <Vm::fpuPop()>
c001fc0d:	e9 50 f9 ff ff       	jmp    c001f562 <Vm::x87Handler(regs*)+0x77>
c001fc12:	3c d9                	cmp    al,0xd9
c001fc14:	0f 85 b5 02 00 00    	jne    c001fecf <Vm::x87Handler(regs*)+0x9e4>
c001fc1a:	eb bd                	jmp    c001fbd9 <Vm::x87Handler(regs*)+0x6ee>
c001fc1c:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001fc20:	0f 85 ea 02 00 00    	jne    c001ff10 <Vm::x87Handler(regs*)+0xa25>
c001fc26:	0f b7 05 60 f3 02 c0 	movzx  eax,WORD PTR ds:0xc002f360
c001fc2d:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001fc31:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fc35:	e9 28 f9 ff ff       	jmp    c001f562 <Vm::x87Handler(regs*)+0x77>
c001fc3a:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc3e:	84 d2                	test   dl,dl
c001fc40:	75 0f                	jne    c001fc51 <Vm::x87Handler(regs*)+0x766>
c001fc42:	83 ec 0c             	sub    esp,0xc
c001fc45:	ff 36                	push   DWORD PTR [esi]
c001fc47:	e8 b1 f4 ff ff       	call   c001f0fd <Vm::fpu32ToInternal(unsigned int)>
c001fc4c:	e9 2c 01 00 00       	jmp    c001fd7d <Vm::x87Handler(regs*)+0x892>
c001fc51:	80 fa 01             	cmp    dl,0x1
c001fc54:	75 0f                	jne    c001fc65 <Vm::x87Handler(regs*)+0x77a>
c001fc56:	83 ec 0c             	sub    esp,0xc
c001fc59:	ff 36                	push   DWORD PTR [esi]
c001fc5b:	e8 9d f4 ff ff       	call   c001f0fd <Vm::fpu32ToInternal(unsigned int)>
c001fc60:	e9 81 02 00 00       	jmp    c001fee6 <Vm::x87Handler(regs*)+0x9fb>
c001fc65:	80 fa 04             	cmp    dl,0x4
c001fc68:	75 0f                	jne    c001fc79 <Vm::x87Handler(regs*)+0x78e>
c001fc6a:	83 ec 0c             	sub    esp,0xc
c001fc6d:	ff 36                	push   DWORD PTR [esi]
c001fc6f:	e8 89 f4 ff ff       	call   c001f0fd <Vm::fpu32ToInternal(unsigned int)>
c001fc74:	e9 86 01 00 00       	jmp    c001fdff <Vm::x87Handler(regs*)+0x914>
c001fc79:	80 fa 05             	cmp    dl,0x5
c001fc7c:	75 1b                	jne    c001fc99 <Vm::x87Handler(regs*)+0x7ae>
c001fc7e:	83 ec 0c             	sub    esp,0xc
c001fc81:	6a 00                	push   0x0
c001fc83:	e8 26 f7 ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001fc88:	89 c7                	mov    edi,eax
c001fc8a:	89 d5                	mov    ebp,edx
c001fc8c:	58                   	pop    eax
c001fc8d:	ff 36                	push   DWORD PTR [esi]
c001fc8f:	e8 69 f4 ff ff       	call   c001f0fd <Vm::fpu32ToInternal(unsigned int)>
c001fc94:	e9 a3 01 00 00       	jmp    c001fe3c <Vm::x87Handler(regs*)+0x951>
c001fc99:	80 fa 06             	cmp    dl,0x6
c001fc9c:	75 0f                	jne    c001fcad <Vm::x87Handler(regs*)+0x7c2>
c001fc9e:	83 ec 0c             	sub    esp,0xc
c001fca1:	ff 36                	push   DWORD PTR [esi]
c001fca3:	e8 55 f4 ff ff       	call   c001f0fd <Vm::fpu32ToInternal(unsigned int)>
c001fca8:	e9 ae 01 00 00       	jmp    c001fe5b <Vm::x87Handler(regs*)+0x970>
c001fcad:	31 c0                	xor    eax,eax
c001fcaf:	80 fa 07             	cmp    dl,0x7
c001fcb2:	0f 85 94 02 00 00    	jne    c001ff4c <Vm::x87Handler(regs*)+0xa61>
c001fcb8:	83 ec 0c             	sub    esp,0xc
c001fcbb:	6a 00                	push   0x0
c001fcbd:	e8 ec f6 ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001fcc2:	89 c7                	mov    edi,eax
c001fcc4:	89 d5                	mov    ebp,edx
c001fcc6:	58                   	pop    eax
c001fcc7:	ff 36                	push   DWORD PTR [esi]
c001fcc9:	e8 2f f4 ff ff       	call   c001f0fd <Vm::fpu32ToInternal(unsigned int)>
c001fcce:	e9 cb 01 00 00       	jmp    c001fe9e <Vm::x87Handler(regs*)+0x9b3>
c001fcd3:	80 fa 03             	cmp    dl,0x3
c001fcd6:	0f 85 d3 01 00 00    	jne    c001feaf <Vm::x87Handler(regs*)+0x9c4>
c001fcdc:	e8 b8 f7 ff ff       	call   c001f499 <Vm::fpuPop()>
c001fce1:	51                   	push   ecx
c001fce2:	51                   	push   ecx
c001fce3:	e9 de 01 00 00       	jmp    c001fec6 <Vm::x87Handler(regs*)+0x9db>
c001fce8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fcec:	80 fa 01             	cmp    dl,0x1
c001fcef:	75 09                	jne    c001fcfa <Vm::x87Handler(regs*)+0x80f>
c001fcf1:	57                   	push   edi
c001fcf2:	57                   	push   edi
c001fcf3:	8b 06                	mov    eax,DWORD PTR [esi]
c001fcf5:	e9 e3 01 00 00       	jmp    c001fedd <Vm::x87Handler(regs*)+0x9f2>
c001fcfa:	80 fa 04             	cmp    dl,0x4
c001fcfd:	75 12                	jne    c001fd11 <Vm::x87Handler(regs*)+0x826>
c001fcff:	31 d2                	xor    edx,edx
c001fd01:	51                   	push   ecx
c001fd02:	51                   	push   ecx
c001fd03:	8b 06                	mov    eax,DWORD PTR [esi]
c001fd05:	52                   	push   edx
c001fd06:	50                   	push   eax
c001fd07:	e8 d0 f4 ff ff       	call   c001f1dc <Vm::fpuLongToFloat(long long)>
c001fd0c:	e9 ee 00 00 00       	jmp    c001fdff <Vm::x87Handler(regs*)+0x914>
c001fd11:	31 c0                	xor    eax,eax
c001fd13:	80 fa 07             	cmp    dl,0x7
c001fd16:	0f 85 30 02 00 00    	jne    c001ff4c <Vm::x87Handler(regs*)+0xa61>
c001fd1c:	83 ec 0c             	sub    esp,0xc
c001fd1f:	6a 00                	push   0x0
c001fd21:	e8 88 f6 ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001fd26:	89 c7                	mov    edi,eax
c001fd28:	89 d5                	mov    ebp,edx
c001fd2a:	58                   	pop    eax
c001fd2b:	8b 06                	mov    eax,DWORD PTR [esi]
c001fd2d:	5a                   	pop    edx
c001fd2e:	31 d2                	xor    edx,edx
c001fd30:	52                   	push   edx
c001fd31:	50                   	push   eax
c001fd32:	e8 a5 f4 ff ff       	call   c001f1dc <Vm::fpuLongToFloat(long long)>
c001fd37:	e9 62 01 00 00       	jmp    c001fe9e <Vm::x87Handler(regs*)+0x9b3>
c001fd3c:	84 d2                	test   dl,dl
c001fd3e:	75 0d                	jne    c001fd4d <Vm::x87Handler(regs*)+0x862>
c001fd40:	31 d2                	xor    edx,edx
c001fd42:	55                   	push   ebp
c001fd43:	55                   	push   ebp
c001fd44:	8b 06                	mov    eax,DWORD PTR [esi]
c001fd46:	52                   	push   edx
c001fd47:	50                   	push   eax
c001fd48:	e9 d3 01 00 00       	jmp    c001ff20 <Vm::x87Handler(regs*)+0xa35>
c001fd4d:	31 c0                	xor    eax,eax
c001fd4f:	80 fa 02             	cmp    dl,0x2
c001fd52:	0f 85 f4 01 00 00    	jne    c001ff4c <Vm::x87Handler(regs*)+0xa61>
c001fd58:	83 ec 0c             	sub    esp,0xc
c001fd5b:	6a 00                	push   0x0
c001fd5d:	e8 4c f6 ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001fd62:	59                   	pop    ecx
c001fd63:	5f                   	pop    edi
c001fd64:	e9 6a f9 ff ff       	jmp    c001f6d3 <Vm::x87Handler(regs*)+0x1e8>
c001fd69:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fd6d:	84 d2                	test   dl,dl
c001fd6f:	75 2a                	jne    c001fd9b <Vm::x87Handler(regs*)+0x8b0>
c001fd71:	50                   	push   eax
c001fd72:	50                   	push   eax
c001fd73:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd76:	ff 36                	push   DWORD PTR [esi]
c001fd78:	e8 c5 f3 ff ff       	call   c001f142 <Vm::fpu64ToInternal(unsigned long long)>
c001fd7d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd84:	89 c6                	mov    esi,eax
c001fd86:	89 d7                	mov    edi,edx
c001fd88:	e8 21 f6 ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001fd8d:	57                   	push   edi
c001fd8e:	56                   	push   esi
c001fd8f:	52                   	push   edx
c001fd90:	50                   	push   eax
c001fd91:	e8 8e f5 ff ff       	call   c001f324 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fd96:	e9 64 01 00 00       	jmp    c001feff <Vm::x87Handler(regs*)+0xa14>
c001fd9b:	80 fa 01             	cmp    dl,0x1
c001fd9e:	75 11                	jne    c001fdb1 <Vm::x87Handler(regs*)+0x8c6>
c001fda0:	50                   	push   eax
c001fda1:	50                   	push   eax
c001fda2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fda5:	ff 36                	push   DWORD PTR [esi]
c001fda7:	e8 96 f3 ff ff       	call   c001f142 <Vm::fpu64ToInternal(unsigned long long)>
c001fdac:	e9 35 01 00 00       	jmp    c001fee6 <Vm::x87Handler(regs*)+0x9fb>
c001fdb1:	80 fa 02             	cmp    dl,0x2
c001fdb4:	0f 85 54 f9 ff ff    	jne    c001f70e <Vm::x87Handler(regs*)+0x223>
c001fdba:	55                   	push   ebp
c001fdbb:	55                   	push   ebp
c001fdbc:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fdbf:	ff 36                	push   DWORD PTR [esi]
c001fdc1:	e8 7c f3 ff ff       	call   c001f142 <Vm::fpu64ToInternal(unsigned long long)>
c001fdc6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdcd:	89 c6                	mov    esi,eax
c001fdcf:	89 d7                	mov    edi,edx
c001fdd1:	e8 d8 f5 ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001fdd6:	57                   	push   edi
c001fdd7:	56                   	push   esi
c001fdd8:	52                   	push   edx
c001fdd9:	50                   	push   eax
c001fdda:	e8 f2 f4 ff ff       	call   c001f2d1 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fddf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fde3:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fde6:	83 c4 20             	add    esp,0x20
c001fde9:	e9 74 f7 ff ff       	jmp    c001f562 <Vm::x87Handler(regs*)+0x77>
c001fdee:	80 fa 04             	cmp    dl,0x4
c001fdf1:	75 2a                	jne    c001fe1d <Vm::x87Handler(regs*)+0x932>
c001fdf3:	51                   	push   ecx
c001fdf4:	51                   	push   ecx
c001fdf5:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fdf8:	ff 36                	push   DWORD PTR [esi]
c001fdfa:	e8 43 f3 ff ff       	call   c001f142 <Vm::fpu64ToInternal(unsigned long long)>
c001fdff:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe06:	89 c6                	mov    esi,eax
c001fe08:	89 d7                	mov    edi,edx
c001fe0a:	e8 9f f5 ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001fe0f:	57                   	push   edi
c001fe10:	56                   	push   esi
c001fe11:	52                   	push   edx
c001fe12:	50                   	push   eax
c001fe13:	e8 36 f5 ff ff       	call   c001f34e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe18:	e9 e2 00 00 00       	jmp    c001feff <Vm::x87Handler(regs*)+0xa14>
c001fe1d:	80 fa 05             	cmp    dl,0x5
c001fe20:	75 28                	jne    c001fe4a <Vm::x87Handler(regs*)+0x95f>
c001fe22:	83 ec 0c             	sub    esp,0xc
c001fe25:	6a 00                	push   0x0
c001fe27:	e8 82 f5 ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001fe2c:	89 c7                	mov    edi,eax
c001fe2e:	89 d5                	mov    ebp,edx
c001fe30:	58                   	pop    eax
c001fe31:	5a                   	pop    edx
c001fe32:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fe35:	ff 36                	push   DWORD PTR [esi]
c001fe37:	e8 06 f3 ff ff       	call   c001f142 <Vm::fpu64ToInternal(unsigned long long)>
c001fe3c:	83 c4 10             	add    esp,0x10
c001fe3f:	55                   	push   ebp
c001fe40:	57                   	push   edi
c001fe41:	52                   	push   edx
c001fe42:	50                   	push   eax
c001fe43:	e8 06 f5 ff ff       	call   c001f34e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe48:	eb 60                	jmp    c001feaa <Vm::x87Handler(regs*)+0x9bf>
c001fe4a:	80 fa 06             	cmp    dl,0x6
c001fe4d:	75 2a                	jne    c001fe79 <Vm::x87Handler(regs*)+0x98e>
c001fe4f:	51                   	push   ecx
c001fe50:	51                   	push   ecx
c001fe51:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fe54:	ff 36                	push   DWORD PTR [esi]
c001fe56:	e8 e7 f2 ff ff       	call   c001f142 <Vm::fpu64ToInternal(unsigned long long)>
c001fe5b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe62:	89 c6                	mov    esi,eax
c001fe64:	89 d7                	mov    edi,edx
c001fe66:	e8 43 f5 ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001fe6b:	57                   	push   edi
c001fe6c:	56                   	push   esi
c001fe6d:	52                   	push   edx
c001fe6e:	50                   	push   eax
c001fe6f:	e8 08 f5 ff ff       	call   c001f37c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fe74:	e9 86 00 00 00       	jmp    c001feff <Vm::x87Handler(regs*)+0xa14>
c001fe79:	31 c0                	xor    eax,eax
c001fe7b:	80 fa 07             	cmp    dl,0x7
c001fe7e:	0f 85 c8 00 00 00    	jne    c001ff4c <Vm::x87Handler(regs*)+0xa61>
c001fe84:	83 ec 0c             	sub    esp,0xc
c001fe87:	6a 00                	push   0x0
c001fe89:	e8 20 f5 ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001fe8e:	89 c7                	mov    edi,eax
c001fe90:	89 d5                	mov    ebp,edx
c001fe92:	58                   	pop    eax
c001fe93:	5a                   	pop    edx
c001fe94:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fe97:	ff 36                	push   DWORD PTR [esi]
c001fe99:	e8 a4 f2 ff ff       	call   c001f142 <Vm::fpu64ToInternal(unsigned long long)>
c001fe9e:	83 c4 10             	add    esp,0x10
c001fea1:	55                   	push   ebp
c001fea2:	57                   	push   edi
c001fea3:	52                   	push   edx
c001fea4:	50                   	push   eax
c001fea5:	e8 d2 f4 ff ff       	call   c001f37c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001feaa:	83 c4 0c             	add    esp,0xc
c001fead:	eb 53                	jmp    c001ff02 <Vm::x87Handler(regs*)+0xa17>
c001feaf:	31 c0                	xor    eax,eax
c001feb1:	80 fa 02             	cmp    dl,0x2
c001feb4:	0f 85 92 00 00 00    	jne    c001ff4c <Vm::x87Handler(regs*)+0xa61>
c001feba:	83 ec 0c             	sub    esp,0xc
c001febd:	6a 00                	push   0x0
c001febf:	e8 ea f4 ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001fec4:	59                   	pop    ecx
c001fec5:	5f                   	pop    edi
c001fec6:	52                   	push   edx
c001fec7:	50                   	push   eax
c001fec8:	e8 27 f2 ff ff       	call   c001f0f4 <Vm::fpuInternalTo64(unsigned long long)>
c001fecd:	eb 70                	jmp    c001ff3f <Vm::x87Handler(regs*)+0xa54>
c001fecf:	31 c0                	xor    eax,eax
c001fed1:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001fed6:	75 74                	jne    c001ff4c <Vm::x87Handler(regs*)+0xa61>
c001fed8:	50                   	push   eax
c001fed9:	50                   	push   eax
c001feda:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001fedd:	31 d2                	xor    edx,edx
c001fedf:	52                   	push   edx
c001fee0:	50                   	push   eax
c001fee1:	e8 f6 f2 ff ff       	call   c001f1dc <Vm::fpuLongToFloat(long long)>
c001fee6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001feed:	89 c6                	mov    esi,eax
c001feef:	89 d7                	mov    edi,edx
c001fef1:	e8 b8 f4 ff ff       	call   c001f3ae <Vm::fpuGetReg(int)>
c001fef6:	57                   	push   edi
c001fef7:	56                   	push   esi
c001fef8:	52                   	push   edx
c001fef9:	50                   	push   eax
c001fefa:	e8 5e f4 ff ff       	call   c001f35d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001feff:	83 c4 1c             	add    esp,0x1c
c001ff02:	52                   	push   edx
c001ff03:	50                   	push   eax
c001ff04:	6a 00                	push   0x0
c001ff06:	e8 e6 f4 ff ff       	call   c001f3f1 <Vm::fpuSetReg(int, unsigned long long)>
c001ff0b:	e9 f2 f7 ff ff       	jmp    c001f702 <Vm::x87Handler(regs*)+0x217>
c001ff10:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ff14:	80 fa 05             	cmp    dl,0x5
c001ff17:	75 11                	jne    c001ff2a <Vm::x87Handler(regs*)+0xa3f>
c001ff19:	55                   	push   ebp
c001ff1a:	55                   	push   ebp
c001ff1b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ff1e:	ff 36                	push   DWORD PTR [esi]
c001ff20:	e8 81 f2 ff ff       	call   c001f1a6 <Vm::fpuULongToFloat(unsigned long long)>
c001ff25:	e9 cf f7 ff ff       	jmp    c001f6f9 <Vm::x87Handler(regs*)+0x20e>
c001ff2a:	31 c0                	xor    eax,eax
c001ff2c:	80 fa 07             	cmp    dl,0x7
c001ff2f:	75 1b                	jne    c001ff4c <Vm::x87Handler(regs*)+0xa61>
c001ff31:	e8 63 f5 ff ff       	call   c001f499 <Vm::fpuPop()>
c001ff36:	51                   	push   ecx
c001ff37:	51                   	push   ecx
c001ff38:	52                   	push   edx
c001ff39:	50                   	push   eax
c001ff3a:	e8 0c f2 ff ff       	call   c001f14b <Vm::fpuFloatToLong(unsigned long long)>
c001ff3f:	83 c4 10             	add    esp,0x10
c001ff42:	89 06                	mov    DWORD PTR [esi],eax
c001ff44:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001ff47:	e9 f8 f7 ff ff       	jmp    c001f744 <Vm::x87Handler(regs*)+0x259>
c001ff4c:	83 c4 1c             	add    esp,0x1c
c001ff4f:	5b                   	pop    ebx
c001ff50:	5e                   	pop    esi
c001ff51:	5f                   	pop    edi
c001ff52:	5d                   	pop    ebp
c001ff53:	c3                   	ret    

c001ff54 <__static_initialization_and_destruction_0(int, int)>:
c001ff54:	83 ec 0c             	sub    esp,0xc
c001ff57:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001ff5c:	75 1a                	jne    c001ff78 <__static_initialization_and_destruction_0(int, int)+0x24>
c001ff5e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001ff66:	75 10                	jne    c001ff78 <__static_initialization_and_destruction_0(int, int)+0x24>
c001ff68:	83 ec 0c             	sub    esp,0xc
c001ff6b:	68 60 f3 02 c0       	push   0xc002f360
c001ff70:	e8 85 8d 00 00       	call   c0028cfa <Vm::_FPUState::_FPUState()>
c001ff75:	83 c4 10             	add    esp,0x10
c001ff78:	90                   	nop
c001ff79:	83 c4 0c             	add    esp,0xc
c001ff7c:	c3                   	ret    

c001ff7d <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001ff7d:	83 ec 0c             	sub    esp,0xc
c001ff80:	83 ec 08             	sub    esp,0x8
c001ff83:	68 ff ff 00 00       	push   0xffff
c001ff88:	6a 01                	push   0x1
c001ff8a:	e8 c5 ff ff ff       	call   c001ff54 <__static_initialization_and_destruction_0(int, int)>
c001ff8f:	83 c4 10             	add    esp,0x10
c001ff92:	83 c4 0c             	add    esp,0xc
c001ff95:	c3                   	ret    

c001ff96 <FAT::getName()>:
c001ff96:	b8 3c c2 02 c0       	mov    eax,0xc002c23c
c001ff9b:	c3                   	ret    

c001ff9c <FAT::tell(void*, unsigned long long*)>:
c001ff9c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001ffa1:	75 06                	jne    c001ffa9 <FAT::tell(void*, unsigned long long*)+0xd>
c001ffa3:	b8 04 00 00 00       	mov    eax,0x4
c001ffa8:	c3                   	ret    
c001ffa9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ffae:	75 06                	jne    c001ffb6 <FAT::tell(void*, unsigned long long*)+0x1a>
c001ffb0:	b8 04 00 00 00       	mov    eax,0x4
c001ffb5:	c3                   	ret    
c001ffb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ffba:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001ffbd:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001ffc0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ffc4:	89 01                	mov    DWORD PTR [ecx],eax
c001ffc6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ffc9:	b8 00 00 00 00       	mov    eax,0x0
c001ffce:	c3                   	ret    
c001ffcf:	90                   	nop

c001ffd0 <FAT::stat(void*, unsigned long long*)>:
c001ffd0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001ffd5:	75 06                	jne    c001ffdd <FAT::stat(void*, unsigned long long*)+0xd>
c001ffd7:	b8 04 00 00 00       	mov    eax,0x4
c001ffdc:	c3                   	ret    
c001ffdd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ffe2:	75 06                	jne    c001ffea <FAT::stat(void*, unsigned long long*)+0x1a>
c001ffe4:	b8 04 00 00 00       	mov    eax,0x4
c001ffe9:	c3                   	ret    
c001ffea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ffee:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001fff1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001fff4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fff8:	89 01                	mov    DWORD PTR [ecx],eax
c001fffa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fffd:	b8 00 00 00 00       	mov    eax,0x0
c0020002:	c3                   	ret    
c0020003:	90                   	nop

c0020004 <FAT::~FAT()>:
c0020004:	83 ec 0c             	sub    esp,0xc
c0020007:	ba 88 c2 02 c0       	mov    edx,0xc002c288
c002000c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020010:	89 10                	mov    DWORD PTR [eax],edx
c0020012:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020016:	83 ec 0c             	sub    esp,0xc
c0020019:	50                   	push   eax
c002001a:	e8 ad 2a ff ff       	call   c0012acc <Filesystem::~Filesystem()>
c002001f:	83 c4 10             	add    esp,0x10
c0020022:	90                   	nop
c0020023:	83 c4 0c             	add    esp,0xc
c0020026:	c3                   	ret    
c0020027:	90                   	nop

c0020028 <FAT::~FAT()>:
c0020028:	83 ec 0c             	sub    esp,0xc
c002002b:	83 ec 0c             	sub    esp,0xc
c002002e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020032:	e8 cd ff ff ff       	call   c0020004 <FAT::~FAT()>
c0020037:	83 c4 10             	add    esp,0x10
c002003a:	83 ec 08             	sub    esp,0x8
c002003d:	6a 08                	push   0x8
c002003f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020043:	e8 7d 26 ff ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0020048:	83 c4 10             	add    esp,0x10
c002004b:	83 c4 0c             	add    esp,0xc
c002004e:	c3                   	ret    
c002004f:	90                   	nop

c0020050 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0020050:	83 ec 1c             	sub    esp,0x1c
c0020053:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c002005a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c002005f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020063:	8b 04 85 e0 f3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0c20]
c002006a:	83 f8 ff             	cmp    eax,0xffffffff
c002006d:	75 34                	jne    c00200a3 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c002006f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020073:	88 c2                	mov    dl,al
c0020075:	a1 c0 f3 02 c0       	mov    eax,ds:0xc002f3c0
c002007a:	01 d0                	add    eax,edx
c002007c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020080:	8b 15 c0 f3 02 c0    	mov    edx,DWORD PTR ds:0xc002f3c0
c0020086:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002008a:	89 14 85 e0 f3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0c20],edx
c0020091:	a1 c0 f3 02 c0       	mov    eax,ds:0xc002f3c0
c0020096:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002009a:	89 14 85 60 f4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0ba0],edx
c00200a1:	eb 17                	jmp    c00200ba <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c00200a3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00200a7:	88 c2                	mov    dl,al
c00200a9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00200ad:	8b 04 85 e0 f3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0c20]
c00200b4:	01 d0                	add    eax,edx
c00200b6:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00200ba:	83 ec 04             	sub    esp,0x4
c00200bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00200c1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00200c5:	8d 44 24 15          	lea    eax,[esp+0x15]
c00200c9:	50                   	push   eax
c00200ca:	e8 2f 6c fe ff       	call   c0006cfe <f_getlabel>
c00200cf:	83 c4 10             	add    esp,0x10
c00200d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00200d6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00200db:	75 07                	jne    c00200e4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c00200dd:	b8 00 00 00 00       	mov    eax,0x0
c00200e2:	eb 05                	jmp    c00200e9 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c00200e4:	b8 01 00 00 00       	mov    eax,0x1
c00200e9:	83 c4 1c             	add    esp,0x1c
c00200ec:	c3                   	ret    
c00200ed:	90                   	nop

c00200ee <FAT::setlabel(LogicalDisk*, int, char*)>:
c00200ee:	57                   	push   edi
c00200ef:	83 ec 58             	sub    esp,0x58
c00200f2:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00200fa:	8d 54 24 10          	lea    edx,[esp+0x10]
c00200fe:	b9 0f 00 00 00       	mov    ecx,0xf
c0020103:	b8 00 00 00 00       	mov    eax,0x0
c0020108:	fc                   	cld    
c0020109:	89 d7                	mov    edi,edx
c002010b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002010d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020111:	8b 04 85 e0 f3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0c20]
c0020118:	83 f8 ff             	cmp    eax,0xffffffff
c002011b:	75 34                	jne    c0020151 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c002011d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020121:	88 c2                	mov    dl,al
c0020123:	a1 c0 f3 02 c0       	mov    eax,ds:0xc002f3c0
c0020128:	01 d0                	add    eax,edx
c002012a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002012e:	8b 15 c0 f3 02 c0    	mov    edx,DWORD PTR ds:0xc002f3c0
c0020134:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020138:	89 14 85 e0 f3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0c20],edx
c002013f:	a1 c0 f3 02 c0       	mov    eax,ds:0xc002f3c0
c0020144:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020148:	89 14 85 60 f4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0ba0],edx
c002014f:	eb 17                	jmp    c0020168 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020151:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020155:	88 c2                	mov    dl,al
c0020157:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002015b:	8b 04 85 e0 f3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0c20]
c0020162:	01 d0                	add    eax,edx
c0020164:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020168:	83 ec 08             	sub    esp,0x8
c002016b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c002016f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020173:	50                   	push   eax
c0020174:	e8 d3 07 fe ff       	call   c000094c <strcat>
c0020179:	83 c4 10             	add    esp,0x10
c002017c:	83 ec 0c             	sub    esp,0xc
c002017f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020183:	50                   	push   eax
c0020184:	e8 63 6d fe ff       	call   c0006eec <f_setlabel>
c0020189:	83 c4 10             	add    esp,0x10
c002018c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020190:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020195:	75 07                	jne    c002019e <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020197:	b8 00 00 00 00       	mov    eax,0x0
c002019c:	eb 05                	jmp    c00201a3 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c002019e:	b8 01 00 00 00       	mov    eax,0x1
c00201a3:	83 c4 58             	add    esp,0x58
c00201a6:	5f                   	pop    edi
c00201a7:	c3                   	ret    

c00201a8 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00201a8:	83 ec 2c             	sub    esp,0x2c
c00201ab:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00201b3:	83 ec 08             	sub    esp,0x8
c00201b6:	68 60 c2 02 c0       	push   0xc002c260
c00201bb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00201bf:	e8 d4 06 fe ff       	call   c0000898 <strcmp>
c00201c4:	83 c4 10             	add    esp,0x10
c00201c7:	85 c0                	test   eax,eax
c00201c9:	0f 94 c0             	sete   al
c00201cc:	84 c0                	test   al,al
c00201ce:	74 0d                	je     c00201dd <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c00201d0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00201d8:	e9 a6 00 00 00       	jmp    c0020283 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00201dd:	83 ec 08             	sub    esp,0x8
c00201e0:	68 52 c2 02 c0       	push   0xc002c252
c00201e5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00201e9:	e8 aa 06 fe ff       	call   c0000898 <strcmp>
c00201ee:	83 c4 10             	add    esp,0x10
c00201f1:	85 c0                	test   eax,eax
c00201f3:	0f 94 c0             	sete   al
c00201f6:	84 c0                	test   al,al
c00201f8:	74 0a                	je     c0020204 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c00201fa:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020202:	eb 7f                	jmp    c0020283 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020204:	83 ec 08             	sub    esp,0x8
c0020207:	68 58 c2 02 c0       	push   0xc002c258
c002020c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020210:	e8 83 06 fe ff       	call   c0000898 <strcmp>
c0020215:	83 c4 10             	add    esp,0x10
c0020218:	85 c0                	test   eax,eax
c002021a:	0f 94 c0             	sete   al
c002021d:	84 c0                	test   al,al
c002021f:	74 0a                	je     c002022b <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020221:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020229:	eb 58                	jmp    c0020283 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002022b:	83 ec 08             	sub    esp,0x8
c002022e:	68 6c 94 02 c0       	push   0xc002946c
c0020233:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020237:	e8 5c 06 fe ff       	call   c0000898 <strcmp>
c002023c:	83 c4 10             	add    esp,0x10
c002023f:	85 c0                	test   eax,eax
c0020241:	0f 94 c0             	sete   al
c0020244:	84 c0                	test   al,al
c0020246:	74 0a                	je     c0020252 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020248:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0020250:	eb 31                	jmp    c0020283 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020252:	83 ec 08             	sub    esp,0x8
c0020255:	68 5e c2 02 c0       	push   0xc002c25e
c002025a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002025e:	e8 35 06 fe ff       	call   c0000898 <strcmp>
c0020263:	83 c4 10             	add    esp,0x10
c0020266:	85 c0                	test   eax,eax
c0020268:	0f 94 c0             	sete   al
c002026b:	84 c0                	test   al,al
c002026d:	74 0a                	je     c0020279 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c002026f:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020277:	eb 0a                	jmp    c0020283 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020279:	b8 08 00 00 00       	mov    eax,0x8
c002027e:	e9 df 00 00 00       	jmp    c0020362 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c0020283:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c002028a:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c002028f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020293:	8b 04 85 e0 f3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0c20]
c002029a:	83 f8 ff             	cmp    eax,0xffffffff
c002029d:	75 34                	jne    c00202d3 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c002029f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00202a3:	88 c2                	mov    dl,al
c00202a5:	a1 c0 f3 02 c0       	mov    eax,ds:0xc002f3c0
c00202aa:	01 d0                	add    eax,edx
c00202ac:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00202b0:	8b 15 c0 f3 02 c0    	mov    edx,DWORD PTR ds:0xc002f3c0
c00202b6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00202ba:	89 14 85 e0 f3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0c20],edx
c00202c1:	a1 c0 f3 02 c0       	mov    eax,ds:0xc002f3c0
c00202c6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00202ca:	89 14 85 60 f4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0ba0],edx
c00202d1:	eb 17                	jmp    c00202ea <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c00202d3:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00202d7:	88 c2                	mov    dl,al
c00202d9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00202dd:	8b 04 85 e0 f3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0c20]
c00202e4:	01 d0                	add    eax,edx
c00202e6:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00202ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00202ee:	88 04 24             	mov    BYTE PTR [esp],al
c00202f1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00202f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00202f9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020301:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020306:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002030e:	83 ec 0c             	sub    esp,0xc
c0020311:	68 00 20 00 00       	push   0x2000
c0020316:	e8 7e f2 fe ff       	call   c000f599 <malloc>
c002031b:	83 c4 10             	add    esp,0x10
c002031e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020322:	68 00 20 00 00       	push   0x2000
c0020327:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002032b:	8d 44 24 08          	lea    eax,[esp+0x8]
c002032f:	50                   	push   eax
c0020330:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020334:	50                   	push   eax
c0020335:	e8 fd 6f fe ff       	call   c0007337 <f_mkfs>
c002033a:	83 c4 10             	add    esp,0x10
c002033d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020341:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020346:	75 07                	jne    c002034f <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020348:	b8 00 00 00 00       	mov    eax,0x0
c002034d:	eb 13                	jmp    c0020362 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c002034f:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020354:	75 07                	jne    c002035d <FAT::format(LogicalDisk*, int, char const*, int)+0x1b5>
c0020356:	b8 09 00 00 00       	mov    eax,0x9
c002035b:	eb 05                	jmp    c0020362 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c002035d:	b8 01 00 00 00       	mov    eax,0x1
c0020362:	83 c4 2c             	add    esp,0x2c
c0020365:	c3                   	ret    

c0020366 <FAT::tryMount(LogicalDisk*, int)>:
c0020366:	81 ec 6c 03 00 00    	sub    esp,0x36c
c002036c:	a1 c0 f3 02 c0       	mov    eax,ds:0xc002f3c0
c0020371:	83 f8 14             	cmp    eax,0x14
c0020374:	75 17                	jne    c002038d <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020376:	83 ec 0c             	sub    esp,0xc
c0020379:	68 64 c2 02 c0       	push   0xc002c264
c002037e:	e8 06 9c ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c0020383:	83 c4 10             	add    esp,0x10
c0020386:	b0 00                	mov    al,0x0
c0020388:	e9 d7 01 00 00       	jmp    c0020564 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002038d:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020394:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002039a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00203a0:	3d 00 02 00 00       	cmp    eax,0x200
c00203a5:	74 07                	je     c00203ae <FAT::tryMount(LogicalDisk*, int)+0x48>
c00203a7:	b0 00                	mov    al,0x0
c00203a9:	e9 b6 01 00 00       	jmp    c0020564 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00203ae:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c00203b6:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00203bd:	8b 04 85 e0 f3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0c20]
c00203c4:	83 f8 ff             	cmp    eax,0xffffffff
c00203c7:	74 07                	je     c00203d0 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c00203c9:	b0 01                	mov    al,0x1
c00203cb:	e9 94 01 00 00       	jmp    c0020564 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00203d0:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c00203da:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c00203e2:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c00203e9:	88 c2                	mov    dl,al
c00203eb:	a1 c0 f3 02 c0       	mov    eax,ds:0xc002f3c0
c00203f0:	01 d0                	add    eax,edx
c00203f2:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c00203f9:	8b 15 c0 f3 02 c0    	mov    edx,DWORD PTR ds:0xc002f3c0
c00203ff:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020406:	89 14 85 e0 f3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0c20],edx
c002040d:	a1 c0 f3 02 c0       	mov    eax,ds:0xc002f3c0
c0020412:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020419:	89 14 85 60 f4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0ba0],edx
c0020420:	83 ec 0c             	sub    esp,0xc
c0020423:	68 54 02 00 00       	push   0x254
c0020428:	e8 6c f1 fe ff       	call   c000f599 <malloc>
c002042d:	83 c4 10             	add    esp,0x10
c0020430:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020437:	83 ec 04             	sub    esp,0x4
c002043a:	6a 00                	push   0x0
c002043c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020443:	50                   	push   eax
c0020444:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002044b:	e8 a5 4a fe ff       	call   c0004ef5 <f_mount>
c0020450:	83 c4 10             	add    esp,0x10
c0020453:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c002045a:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020462:	74 19                	je     c002047d <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020464:	83 ec 0c             	sub    esp,0xc
c0020467:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002046e:	e8 46 f1 fe ff       	call   c000f5b9 <rfree>
c0020473:	83 c4 10             	add    esp,0x10
c0020476:	b0 00                	mov    al,0x0
c0020478:	e9 e7 00 00 00       	jmp    c0020564 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002047d:	83 ec 04             	sub    esp,0x4
c0020480:	68 00 01 00 00       	push   0x100
c0020485:	6a 00                	push   0x0
c0020487:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002048e:	50                   	push   eax
c002048f:	e8 bc 02 fe ff       	call   c0000750 <memset>
c0020494:	83 c4 10             	add    esp,0x10
c0020497:	83 ec 08             	sub    esp,0x8
c002049a:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00204a1:	50                   	push   eax
c00204a2:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00204a9:	50                   	push   eax
c00204aa:	e8 9d 04 fe ff       	call   c000094c <strcat>
c00204af:	83 c4 10             	add    esp,0x10
c00204b2:	83 ec 08             	sub    esp,0x8
c00204b5:	68 72 c2 02 c0       	push   0xc002c272
c00204ba:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00204c1:	50                   	push   eax
c00204c2:	e8 85 04 fe ff       	call   c000094c <strcat>
c00204c7:	83 c4 10             	add    esp,0x10
c00204ca:	83 ec 04             	sub    esp,0x4
c00204cd:	6a 01                	push   0x1
c00204cf:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c00204d6:	50                   	push   eax
c00204d7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00204db:	50                   	push   eax
c00204dc:	e8 76 4a fe ff       	call   c0004f57 <f_open>
c00204e1:	83 c4 10             	add    esp,0x10
c00204e4:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00204eb:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00204f2:	85 c0                	test   eax,eax
c00204f4:	74 0a                	je     c0020500 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c00204f6:	78 2d                	js     c0020525 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00204f8:	83 e8 04             	sub    eax,0x4
c00204fb:	83 f8 01             	cmp    eax,0x1
c00204fe:	77 25                	ja     c0020525 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020500:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020508:	83 ec 0c             	sub    esp,0xc
c002050b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002050f:	50                   	push   eax
c0020510:	e8 94 55 fe ff       	call   c0005aa9 <f_close>
c0020515:	83 c4 10             	add    esp,0x10
c0020518:	90                   	nop
c0020519:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020521:	74 3a                	je     c002055d <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020523:	eb 2d                	jmp    c0020552 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020525:	83 ec 0c             	sub    esp,0xc
c0020528:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002052f:	e8 85 f0 fe ff       	call   c000f5b9 <rfree>
c0020534:	83 c4 10             	add    esp,0x10
c0020537:	83 ec 04             	sub    esp,0x4
c002053a:	6a 00                	push   0x0
c002053c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020543:	50                   	push   eax
c0020544:	6a 00                	push   0x0
c0020546:	e8 aa 49 fe ff       	call   c0004ef5 <f_mount>
c002054b:	83 c4 10             	add    esp,0x10
c002054e:	b0 00                	mov    al,0x0
c0020550:	eb 12                	jmp    c0020564 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020552:	a1 c0 f3 02 c0       	mov    eax,ds:0xc002f3c0
c0020557:	40                   	inc    eax
c0020558:	a3 c0 f3 02 c0       	mov    ds:0xc002f3c0,eax
c002055d:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020564:	81 c4 6c 03 00 00    	add    esp,0x36c
c002056a:	c3                   	ret    
c002056b:	90                   	nop

c002056c <FAT::getFileFirstSector(char const*)>:
c002056c:	53                   	push   ebx
c002056d:	83 ec 28             	sub    esp,0x28
c0020570:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c0020578:	83 ec 0c             	sub    esp,0xc
c002057b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002057f:	e8 15 f0 fe ff       	call   c000f599 <malloc>
c0020584:	83 c4 10             	add    esp,0x10
c0020587:	89 c3                	mov    ebx,eax
c0020589:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c002058e:	83 ec 04             	sub    esp,0x4
c0020591:	50                   	push   eax
c0020592:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020596:	53                   	push   ebx
c0020597:	e8 60 27 ff ff       	call   c0012cfc <File::File(char const*, Process*)>
c002059c:	83 c4 10             	add    esp,0x10
c002059f:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00205a3:	83 ec 08             	sub    esp,0x8
c00205a6:	6a 01                	push   0x1
c00205a8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00205ac:	e8 af 27 ff ff       	call   c0012d60 <File::open(FileOpenMode)>
c00205b1:	83 c4 10             	add    esp,0x10
c00205b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00205b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00205ba:	83 c0 0c             	add    eax,0xc
c00205bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00205bf:	83 ec 0c             	sub    esp,0xc
c00205c2:	8d 54 24 14          	lea    edx,[esp+0x14]
c00205c6:	52                   	push   edx
c00205c7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00205cb:	52                   	push   edx
c00205cc:	6a 00                	push   0x0
c00205ce:	6a 04                	push   0x4
c00205d0:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00205d4:	ff d0                	call   eax
c00205d6:	83 c4 20             	add    esp,0x20
c00205d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00205dd:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00205e3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00205e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00205eb:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00205ee:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00205f1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00205f5:	83 ec 0c             	sub    esp,0xc
c00205f8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00205fc:	e8 bd 27 ff ff       	call   c0012dbe <File::close()>
c0020601:	83 c4 10             	add    esp,0x10
c0020604:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020608:	ba 00 00 00 00       	mov    edx,0x0
c002060d:	83 c4 28             	add    esp,0x28
c0020610:	5b                   	pop    ebx
c0020611:	c3                   	ret    

c0020612 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020612:	57                   	push   edi
c0020613:	56                   	push   esi
c0020614:	53                   	push   ebx
c0020615:	81 ec 50 02 00 00    	sub    esp,0x250
c002061b:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0020623:	74 0a                	je     c002062f <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c0020625:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c002062d:	75 0a                	jne    c0020639 <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c002062f:	b8 04 00 00 00       	mov    eax,0x4
c0020634:	e9 29 01 00 00       	jmp    c0020762 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020639:	83 ec 08             	sub    esp,0x8
c002063c:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020643:	50                   	push   eax
c0020644:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c002064b:	e8 63 5a fe ff       	call   c00060b3 <f_readdir>
c0020650:	83 c4 10             	add    esp,0x10
c0020653:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c002065a:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c0020661:	83 ec 0c             	sub    esp,0xc
c0020664:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c002066b:	83 c0 1a             	add    eax,0x1a
c002066e:	50                   	push   eax
c002066f:	e8 f8 00 fe ff       	call   c000076c <strlen>
c0020674:	83 c4 10             	add    esp,0x10
c0020677:	ba 00 00 00 00       	mov    edx,0x0
c002067c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020680:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020684:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c002068b:	0f b6 c0             	movzx  eax,al
c002068e:	83 e0 10             	and    eax,0x10
c0020691:	74 07                	je     c002069a <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c0020693:	b8 02 00 00 00       	mov    eax,0x2
c0020698:	eb 05                	jmp    c002069f <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c002069a:	b8 01 00 00 00       	mov    eax,0x1
c002069f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00206a3:	83 ec 08             	sub    esp,0x8
c00206a6:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c00206ad:	83 c0 1a             	add    eax,0x1a
c00206b0:	50                   	push   eax
c00206b1:	8d 44 24 10          	lea    eax,[esp+0x10]
c00206b5:	83 c0 10             	add    eax,0x10
c00206b8:	50                   	push   eax
c00206b9:	e8 4e 01 fe ff       	call   c000080c <strcpy>
c00206be:	83 c4 10             	add    esp,0x10
c00206c1:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00206c8:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00206cf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00206d3:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00206da:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00206e1:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00206e8:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00206ef:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00206f6:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00206fd:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0020704:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c002070b:	89 c6                	mov    esi,eax
c002070d:	89 d7                	mov    edi,edx
c002070f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020711:	89 c8                	mov    eax,ecx
c0020713:	89 fa                	mov    edx,edi
c0020715:	89 f3                	mov    ebx,esi
c0020717:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c002071e:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0020725:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c002072c:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0020733:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020739:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0020740:	84 c0                	test   al,al
c0020742:	75 07                	jne    c002074b <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c0020744:	b8 07 00 00 00       	mov    eax,0x7
c0020749:	eb 17                	jmp    c0020762 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c002074b:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0020752:	85 c0                	test   eax,eax
c0020754:	75 07                	jne    c002075d <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c0020756:	b8 00 00 00 00       	mov    eax,0x0
c002075b:	eb 05                	jmp    c0020762 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c002075d:	b8 01 00 00 00       	mov    eax,0x1
c0020762:	81 c4 50 02 00 00    	add    esp,0x250
c0020768:	5b                   	pop    ebx
c0020769:	5e                   	pop    esi
c002076a:	5f                   	pop    edi
c002076b:	c3                   	ret    

c002076c <FAT::read(void*, unsigned long, void*, int*)>:
c002076c:	83 ec 1c             	sub    esp,0x1c
c002076f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020774:	74 07                	je     c002077d <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020776:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002077b:	75 07                	jne    c0020784 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c002077d:	b8 04 00 00 00       	mov    eax,0x4
c0020782:	eb 3d                	jmp    c00207c1 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020784:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020788:	50                   	push   eax
c0020789:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002078d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020791:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020795:	e8 f9 4b fe ff       	call   c0005393 <f_read>
c002079a:	83 c4 10             	add    esp,0x10
c002079d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00207a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00207a5:	89 c2                	mov    edx,eax
c00207a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00207ab:	89 10                	mov    DWORD PTR [eax],edx
c00207ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00207b1:	85 c0                	test   eax,eax
c00207b3:	75 07                	jne    c00207bc <FAT::read(void*, unsigned long, void*, int*)+0x50>
c00207b5:	b8 00 00 00 00       	mov    eax,0x0
c00207ba:	eb 05                	jmp    c00207c1 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00207bc:	b8 01 00 00 00       	mov    eax,0x1
c00207c1:	83 c4 1c             	add    esp,0x1c
c00207c4:	c3                   	ret    
c00207c5:	90                   	nop

c00207c6 <FAT::write(void*, unsigned long, void*, int*)>:
c00207c6:	83 ec 1c             	sub    esp,0x1c
c00207c9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00207ce:	74 07                	je     c00207d7 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c00207d0:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00207d5:	75 07                	jne    c00207de <FAT::write(void*, unsigned long, void*, int*)+0x18>
c00207d7:	b8 04 00 00 00       	mov    eax,0x4
c00207dc:	eb 3d                	jmp    c002081b <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00207de:	8d 44 24 08          	lea    eax,[esp+0x8]
c00207e2:	50                   	push   eax
c00207e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00207e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00207eb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00207ef:	e8 1f 4e fe ff       	call   c0005613 <f_write>
c00207f4:	83 c4 10             	add    esp,0x10
c00207f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00207fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00207ff:	89 c2                	mov    edx,eax
c0020801:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020805:	89 10                	mov    DWORD PTR [eax],edx
c0020807:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002080b:	85 c0                	test   eax,eax
c002080d:	75 07                	jne    c0020816 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c002080f:	b8 00 00 00 00       	mov    eax,0x0
c0020814:	eb 05                	jmp    c002081b <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020816:	b8 01 00 00 00       	mov    eax,0x1
c002081b:	83 c4 1c             	add    esp,0x1c
c002081e:	c3                   	ret    
c002081f:	90                   	nop

c0020820 <FAT::close(void*)>:
c0020820:	83 ec 1c             	sub    esp,0x1c
c0020823:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020828:	75 07                	jne    c0020831 <FAT::close(void*)+0x11>
c002082a:	b8 04 00 00 00       	mov    eax,0x4
c002082f:	eb 36                	jmp    c0020867 <FAT::close(void*)+0x47>
c0020831:	83 ec 0c             	sub    esp,0xc
c0020834:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020838:	e8 6c 52 fe ff       	call   c0005aa9 <f_close>
c002083d:	83 c4 10             	add    esp,0x10
c0020840:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020844:	83 ec 0c             	sub    esp,0xc
c0020847:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002084b:	e8 59 ed fe ff       	call   c000f5a9 <free>
c0020850:	83 c4 10             	add    esp,0x10
c0020853:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020857:	85 c0                	test   eax,eax
c0020859:	75 07                	jne    c0020862 <FAT::close(void*)+0x42>
c002085b:	b8 00 00 00 00       	mov    eax,0x0
c0020860:	eb 05                	jmp    c0020867 <FAT::close(void*)+0x47>
c0020862:	b8 01 00 00 00       	mov    eax,0x1
c0020867:	83 c4 1c             	add    esp,0x1c
c002086a:	c3                   	ret    
c002086b:	90                   	nop

c002086c <FAT::closeDir(void*)>:
c002086c:	83 ec 1c             	sub    esp,0x1c
c002086f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020874:	75 07                	jne    c002087d <FAT::closeDir(void*)+0x11>
c0020876:	b8 04 00 00 00       	mov    eax,0x4
c002087b:	eb 36                	jmp    c00208b3 <FAT::closeDir(void*)+0x47>
c002087d:	83 ec 0c             	sub    esp,0xc
c0020880:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020884:	e8 08 58 fe ff       	call   c0006091 <f_closedir>
c0020889:	83 c4 10             	add    esp,0x10
c002088c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020890:	83 ec 0c             	sub    esp,0xc
c0020893:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020897:	e8 0d ed fe ff       	call   c000f5a9 <free>
c002089c:	83 c4 10             	add    esp,0x10
c002089f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00208a3:	85 c0                	test   eax,eax
c00208a5:	75 07                	jne    c00208ae <FAT::closeDir(void*)+0x42>
c00208a7:	b8 00 00 00 00       	mov    eax,0x0
c00208ac:	eb 05                	jmp    c00208b3 <FAT::closeDir(void*)+0x47>
c00208ae:	b8 01 00 00 00       	mov    eax,0x1
c00208b3:	83 c4 1c             	add    esp,0x1c
c00208b6:	c3                   	ret    
c00208b7:	90                   	nop

c00208b8 <FAT::seek(void*, unsigned long long)>:
c00208b8:	83 ec 2c             	sub    esp,0x2c
c00208bb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00208bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00208c3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00208c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00208cb:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00208d0:	75 07                	jne    c00208d9 <FAT::seek(void*, unsigned long long)+0x21>
c00208d2:	b8 04 00 00 00       	mov    eax,0x4
c00208d7:	eb 2f                	jmp    c0020908 <FAT::seek(void*, unsigned long long)+0x50>
c00208d9:	83 ec 04             	sub    esp,0x4
c00208dc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00208e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00208e4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00208e8:	e8 eb 51 fe ff       	call   c0005ad8 <f_lseek>
c00208ed:	83 c4 10             	add    esp,0x10
c00208f0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00208f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00208f8:	85 c0                	test   eax,eax
c00208fa:	75 07                	jne    c0020903 <FAT::seek(void*, unsigned long long)+0x4b>
c00208fc:	b8 00 00 00 00       	mov    eax,0x0
c0020901:	eb 05                	jmp    c0020908 <FAT::seek(void*, unsigned long long)+0x50>
c0020903:	b8 01 00 00 00       	mov    eax,0x1
c0020908:	83 c4 2c             	add    esp,0x2c
c002090b:	c3                   	ret    

c002090c <fatWrapperReadDisk>:
c002090c:	83 ec 1c             	sub    esp,0x1c
c002090f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020913:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020917:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002091b:	89 04 24             	mov    DWORD PTR [esp],eax
c002091e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020922:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020926:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002092b:	8b 04 85 c0 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1c40]
c0020932:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020936:	83 ec 0c             	sub    esp,0xc
c0020939:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002093d:	52                   	push   edx
c002093e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020942:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020946:	50                   	push   eax
c0020947:	e8 ac 57 ff ff       	call   c00160f8 <LogicalDisk::read(unsigned long long, int, void*)>
c002094c:	83 c4 20             	add    esp,0x20
c002094f:	83 c4 1c             	add    esp,0x1c
c0020952:	c3                   	ret    

c0020953 <fatWrapperWriteDisk>:
c0020953:	83 ec 1c             	sub    esp,0x1c
c0020956:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002095a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002095e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020962:	89 04 24             	mov    DWORD PTR [esp],eax
c0020965:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020969:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002096d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020972:	8b 04 85 c0 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1c40]
c0020979:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002097d:	83 ec 0c             	sub    esp,0xc
c0020980:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020984:	52                   	push   edx
c0020985:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020989:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002098d:	50                   	push   eax
c002098e:	e8 d1 57 ff ff       	call   c0016164 <LogicalDisk::write(unsigned long long, int, void*)>
c0020993:	83 c4 20             	add    esp,0x20
c0020996:	83 c4 1c             	add    esp,0x1c
c0020999:	c3                   	ret    

c002099a <fatWrapperIoctl>:
c002099a:	53                   	push   ebx
c002099b:	83 ec 28             	sub    esp,0x28
c002099e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00209a2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00209a6:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00209aa:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00209ae:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c00209b3:	75 31                	jne    c00209e6 <fatWrapperIoctl+0x4c>
c00209b5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00209b9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00209bd:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00209c2:	8b 04 85 c0 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1c40]
c00209c9:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00209cf:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00209d5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00209d9:	66 89 02             	mov    WORD PTR [edx],ax
c00209dc:	b8 00 00 00 00       	mov    eax,0x0
c00209e1:	e9 b2 00 00 00       	jmp    c0020a98 <fatWrapperIoctl+0xfe>
c00209e6:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00209eb:	75 6a                	jne    c0020a57 <fatWrapperIoctl+0xbd>
c00209ed:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00209f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00209f5:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00209fa:	8b 04 85 c0 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1c40]
c0020a01:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020a07:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020a0d:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020a13:	89 c8                	mov    eax,ecx
c0020a15:	89 da                	mov    edx,ebx
c0020a17:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020a1b:	c1 e0 0a             	shl    eax,0xa
c0020a1e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020a23:	8b 0c 8d c0 e3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1c40]
c0020a2a:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020a30:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020a36:	89 cb                	mov    ebx,ecx
c0020a38:	c1 fb 1f             	sar    ebx,0x1f
c0020a3b:	53                   	push   ebx
c0020a3c:	51                   	push   ecx
c0020a3d:	52                   	push   edx
c0020a3e:	50                   	push   eax
c0020a3f:	e8 b0 5e 00 00       	call   c00268f4 <__udivdi3>
c0020a44:	83 c4 10             	add    esp,0x10
c0020a47:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020a4b:	89 01                	mov    DWORD PTR [ecx],eax
c0020a4d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020a50:	b8 00 00 00 00       	mov    eax,0x0
c0020a55:	eb 41                	jmp    c0020a98 <fatWrapperIoctl+0xfe>
c0020a57:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020a5c:	75 07                	jne    c0020a65 <fatWrapperIoctl+0xcb>
c0020a5e:	b8 00 00 00 00       	mov    eax,0x0
c0020a63:	eb 33                	jmp    c0020a98 <fatWrapperIoctl+0xfe>
c0020a65:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020a6a:	75 19                	jne    c0020a85 <fatWrapperIoctl+0xeb>
c0020a6c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020a70:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020a74:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020a78:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020a7e:	b8 00 00 00 00       	mov    eax,0x0
c0020a83:	eb 13                	jmp    c0020a98 <fatWrapperIoctl+0xfe>
c0020a85:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020a8a:	75 07                	jne    c0020a93 <fatWrapperIoctl+0xf9>
c0020a8c:	b8 00 00 00 00       	mov    eax,0x0
c0020a91:	eb 05                	jmp    c0020a98 <fatWrapperIoctl+0xfe>
c0020a93:	b8 04 00 00 00       	mov    eax,0x4
c0020a98:	83 c4 28             	add    esp,0x28
c0020a9b:	5b                   	pop    ebx
c0020a9c:	c3                   	ret    
c0020a9d:	90                   	nop

c0020a9e <FAT::FAT()>:
c0020a9e:	83 ec 1c             	sub    esp,0x1c
c0020aa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020aa5:	83 ec 0c             	sub    esp,0xc
c0020aa8:	50                   	push   eax
c0020aa9:	e8 fa 1f ff ff       	call   c0012aa8 <Filesystem::Filesystem()>
c0020aae:	83 c4 10             	add    esp,0x10
c0020ab1:	ba 88 c2 02 c0       	mov    edx,0xc002c288
c0020ab6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020aba:	89 10                	mov    DWORD PTR [eax],edx
c0020abc:	c7 05 c0 f3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f3c0,0x0
c0020ac6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020ace:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020ad3:	7f 15                	jg     c0020aea <FAT::FAT()+0x4c>
c0020ad5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020ad9:	c7 04 85 e0 f3 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd0c20],0xffffffff
c0020ae4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020ae8:	eb e4                	jmp    c0020ace <FAT::FAT()+0x30>
c0020aea:	90                   	nop
c0020aeb:	83 c4 1c             	add    esp,0x1c
c0020aee:	c3                   	ret    
c0020aef:	90                   	nop

c0020af0 <FAT::fixFilepath(char*)>:
c0020af0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020af4:	8a 00                	mov    al,BYTE PTR [eax]
c0020af6:	3c 40                	cmp    al,0x40
c0020af8:	7e 2c                	jle    c0020b26 <FAT::fixFilepath(char*)+0x36>
c0020afa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020afe:	8a 00                	mov    al,BYTE PTR [eax]
c0020b00:	83 e8 41             	sub    eax,0x41
c0020b03:	88 c2                	mov    dl,al
c0020b05:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020b09:	88 10                	mov    BYTE PTR [eax],dl
c0020b0b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020b0f:	8a 00                	mov    al,BYTE PTR [eax]
c0020b11:	0f be c0             	movsx  eax,al
c0020b14:	8b 04 85 e0 f3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0c20]
c0020b1b:	83 c0 30             	add    eax,0x30
c0020b1e:	88 c2                	mov    dl,al
c0020b20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020b24:	88 10                	mov    BYTE PTR [eax],dl
c0020b26:	90                   	nop
c0020b27:	c3                   	ret    

c0020b28 <FAT::open(char const*, void**, FileOpenMode)>:
c0020b28:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020b2e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020b36:	74 0a                	je     c0020b42 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020b38:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020b40:	75 0a                	jne    c0020b4c <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020b42:	b8 04 00 00 00       	mov    eax,0x4
c0020b47:	e9 fd 00 00 00       	jmp    c0020c49 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020b4c:	83 ec 08             	sub    esp,0x8
c0020b4f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020b56:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020b5a:	50                   	push   eax
c0020b5b:	e8 ac fc fd ff       	call   c000080c <strcpy>
c0020b60:	83 c4 10             	add    esp,0x10
c0020b63:	83 ec 08             	sub    esp,0x8
c0020b66:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020b6a:	50                   	push   eax
c0020b6b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020b72:	e8 79 ff ff ff       	call   c0020af0 <FAT::fixFilepath(char*)>
c0020b77:	83 c4 10             	add    esp,0x10
c0020b7a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020b82:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020b89:	83 e0 01             	and    eax,0x1
c0020b8c:	74 08                	je     c0020b96 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0020b8e:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020b96:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020b9d:	83 e0 04             	and    eax,0x4
c0020ba0:	74 10                	je     c0020bb2 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020ba2:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0020baa:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020bb2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020bb9:	83 e0 02             	and    eax,0x2
c0020bbc:	74 08                	je     c0020bc6 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0020bbe:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020bc6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020bcd:	83 e0 08             	and    eax,0x8
c0020bd0:	74 08                	je     c0020bda <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020bd2:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0020bda:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020be1:	83 e0 10             	and    eax,0x10
c0020be4:	74 08                	je     c0020bee <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0020be6:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0020bee:	83 ec 0c             	sub    esp,0xc
c0020bf1:	68 50 02 00 00       	push   0x250
c0020bf6:	e8 9e e9 fe ff       	call   c000f599 <malloc>
c0020bfb:	83 c4 10             	add    esp,0x10
c0020bfe:	89 c2                	mov    edx,eax
c0020c00:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020c07:	89 10                	mov    DWORD PTR [eax],edx
c0020c09:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0020c11:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020c18:	8b 00                	mov    eax,DWORD PTR [eax]
c0020c1a:	83 ec 04             	sub    esp,0x4
c0020c1d:	52                   	push   edx
c0020c1e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020c22:	52                   	push   edx
c0020c23:	50                   	push   eax
c0020c24:	e8 2e 43 fe ff       	call   c0004f57 <f_open>
c0020c29:	83 c4 10             	add    esp,0x10
c0020c2c:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0020c33:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0020c3b:	74 07                	je     c0020c44 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0020c3d:	b8 01 00 00 00       	mov    eax,0x1
c0020c42:	eb 05                	jmp    c0020c49 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020c44:	b8 00 00 00 00       	mov    eax,0x0
c0020c49:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020c4f:	c3                   	ret    

c0020c50 <FAT::openDir(char const*, void**)>:
c0020c50:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020c56:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020c5e:	74 0a                	je     c0020c6a <FAT::openDir(char const*, void**)+0x1a>
c0020c60:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020c68:	75 07                	jne    c0020c71 <FAT::openDir(char const*, void**)+0x21>
c0020c6a:	b8 04 00 00 00       	mov    eax,0x4
c0020c6f:	eb 7d                	jmp    c0020cee <FAT::openDir(char const*, void**)+0x9e>
c0020c71:	83 ec 08             	sub    esp,0x8
c0020c74:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020c7b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020c7f:	50                   	push   eax
c0020c80:	e8 87 fb fd ff       	call   c000080c <strcpy>
c0020c85:	83 c4 10             	add    esp,0x10
c0020c88:	83 ec 08             	sub    esp,0x8
c0020c8b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020c8f:	50                   	push   eax
c0020c90:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020c97:	e8 54 fe ff ff       	call   c0020af0 <FAT::fixFilepath(char*)>
c0020c9c:	83 c4 10             	add    esp,0x10
c0020c9f:	83 ec 0c             	sub    esp,0xc
c0020ca2:	6a 4c                	push   0x4c
c0020ca4:	e8 f0 e8 fe ff       	call   c000f599 <malloc>
c0020ca9:	83 c4 10             	add    esp,0x10
c0020cac:	89 c2                	mov    edx,eax
c0020cae:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020cb5:	89 10                	mov    DWORD PTR [eax],edx
c0020cb7:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020cbe:	8b 00                	mov    eax,DWORD PTR [eax]
c0020cc0:	83 ec 08             	sub    esp,0x8
c0020cc3:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020cc7:	52                   	push   edx
c0020cc8:	50                   	push   eax
c0020cc9:	e8 c1 52 fe ff       	call   c0005f8f <f_opendir>
c0020cce:	83 c4 10             	add    esp,0x10
c0020cd1:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020cd8:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0020ce0:	74 07                	je     c0020ce9 <FAT::openDir(char const*, void**)+0x99>
c0020ce2:	b8 01 00 00 00       	mov    eax,0x1
c0020ce7:	eb 05                	jmp    c0020cee <FAT::openDir(char const*, void**)+0x9e>
c0020ce9:	b8 00 00 00 00       	mov    eax,0x0
c0020cee:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020cf4:	c3                   	ret    
c0020cf5:	90                   	nop

c0020cf6 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0020cf6:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020cfc:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0020d04:	75 0a                	jne    c0020d10 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0020d06:	b8 04 00 00 00       	mov    eax,0x4
c0020d0b:	e9 c9 00 00 00       	jmp    c0020dd9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020d10:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0020d18:	75 0a                	jne    c0020d24 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0020d1a:	b8 04 00 00 00       	mov    eax,0x4
c0020d1f:	e9 b5 00 00 00       	jmp    c0020dd9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020d24:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0020d2c:	75 0a                	jne    c0020d38 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0020d2e:	b8 04 00 00 00       	mov    eax,0x4
c0020d33:	e9 a1 00 00 00       	jmp    c0020dd9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020d38:	83 ec 08             	sub    esp,0x8
c0020d3b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020d42:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020d49:	50                   	push   eax
c0020d4a:	e8 bd fa fd ff       	call   c000080c <strcpy>
c0020d4f:	83 c4 10             	add    esp,0x10
c0020d52:	83 ec 08             	sub    esp,0x8
c0020d55:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0020d5c:	50                   	push   eax
c0020d5d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020d64:	e8 87 fd ff ff       	call   c0020af0 <FAT::fixFilepath(char*)>
c0020d69:	83 c4 10             	add    esp,0x10
c0020d6c:	83 ec 08             	sub    esp,0x8
c0020d6f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020d73:	50                   	push   eax
c0020d74:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020d7b:	50                   	push   eax
c0020d7c:	e8 cd 53 fe ff       	call   c000614e <f_stat>
c0020d81:	83 c4 10             	add    esp,0x10
c0020d84:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020d8b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020d92:	85 c0                	test   eax,eax
c0020d94:	74 07                	je     c0020d9d <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0020d96:	83 f8 04             	cmp    eax,0x4
c0020d99:	74 32                	je     c0020dcd <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0020d9b:	eb 37                	jmp    c0020dd4 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0020d9d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020da1:	0f b6 c0             	movzx  eax,al
c0020da4:	83 e0 10             	and    eax,0x10
c0020da7:	0f 95 c2             	setne  dl
c0020daa:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0020db1:	88 10                	mov    BYTE PTR [eax],dl
c0020db3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020db6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020dba:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0020dc1:	89 01                	mov    DWORD PTR [ecx],eax
c0020dc3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020dc6:	b8 00 00 00 00       	mov    eax,0x0
c0020dcb:	eb 0c                	jmp    c0020dd9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020dcd:	b8 02 00 00 00       	mov    eax,0x2
c0020dd2:	eb 05                	jmp    c0020dd9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020dd4:	b8 01 00 00 00       	mov    eax,0x1
c0020dd9:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020ddf:	c3                   	ret    

c0020de0 <FAT::unlink(char const*)>:
c0020de0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020de6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020dee:	75 07                	jne    c0020df7 <FAT::unlink(char const*)+0x17>
c0020df0:	b8 04 00 00 00       	mov    eax,0x4
c0020df5:	eb 5c                	jmp    c0020e53 <FAT::unlink(char const*)+0x73>
c0020df7:	83 ec 08             	sub    esp,0x8
c0020dfa:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020e01:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020e05:	50                   	push   eax
c0020e06:	e8 01 fa fd ff       	call   c000080c <strcpy>
c0020e0b:	83 c4 10             	add    esp,0x10
c0020e0e:	83 ec 08             	sub    esp,0x8
c0020e11:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020e15:	50                   	push   eax
c0020e16:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020e1d:	e8 ce fc ff ff       	call   c0020af0 <FAT::fixFilepath(char*)>
c0020e22:	83 c4 10             	add    esp,0x10
c0020e25:	83 ec 0c             	sub    esp,0xc
c0020e28:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020e2c:	50                   	push   eax
c0020e2d:	e8 6e 56 fe ff       	call   c00064a0 <f_unlink>
c0020e32:	83 c4 10             	add    esp,0x10
c0020e35:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020e3c:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020e43:	85 c0                	test   eax,eax
c0020e45:	75 07                	jne    c0020e4e <FAT::unlink(char const*)+0x6e>
c0020e47:	b8 00 00 00 00       	mov    eax,0x0
c0020e4c:	eb 05                	jmp    c0020e53 <FAT::unlink(char const*)+0x73>
c0020e4e:	b8 01 00 00 00       	mov    eax,0x1
c0020e53:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020e59:	c3                   	ret    

c0020e5a <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0020e5a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0020e60:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0020e67:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0020e6e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020e72:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020e76:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0020e7e:	75 0a                	jne    c0020e8a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0020e80:	b8 04 00 00 00       	mov    eax,0x4
c0020e85:	e9 1c 01 00 00       	jmp    c0020fa6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020e8a:	83 ec 08             	sub    esp,0x8
c0020e8d:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020e94:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020e98:	50                   	push   eax
c0020e99:	e8 6e f9 fd ff       	call   c000080c <strcpy>
c0020e9e:	83 c4 10             	add    esp,0x10
c0020ea1:	83 ec 08             	sub    esp,0x8
c0020ea4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0020ea8:	50                   	push   eax
c0020ea9:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020eb0:	e8 3b fc ff ff       	call   c0020af0 <FAT::fixFilepath(char*)>
c0020eb5:	83 c4 10             	add    esp,0x10
c0020eb8:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0020ec0:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0020ec8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020ecd:	83 e0 01             	and    eax,0x1
c0020ed0:	74 08                	je     c0020eda <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0020ed2:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0020eda:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020edf:	83 e0 02             	and    eax,0x2
c0020ee2:	74 08                	je     c0020eec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0020ee4:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0020eec:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020ef1:	83 e0 04             	and    eax,0x4
c0020ef4:	74 08                	je     c0020efe <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0020ef6:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0020efe:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020f03:	83 e0 08             	and    eax,0x8
c0020f06:	74 08                	je     c0020f10 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0020f08:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0020f10:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020f15:	83 e0 01             	and    eax,0x1
c0020f18:	74 08                	je     c0020f22 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0020f1a:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0020f22:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020f27:	83 e0 02             	and    eax,0x2
c0020f2a:	74 08                	je     c0020f34 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0020f2c:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0020f34:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020f39:	83 e0 04             	and    eax,0x4
c0020f3c:	74 08                	je     c0020f46 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0020f3e:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0020f46:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020f4b:	83 e0 08             	and    eax,0x8
c0020f4e:	74 08                	je     c0020f58 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0020f50:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0020f58:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0020f5f:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0020f66:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0020f6e:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0020f76:	83 ec 04             	sub    esp,0x4
c0020f79:	52                   	push   edx
c0020f7a:	50                   	push   eax
c0020f7b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020f7f:	50                   	push   eax
c0020f80:	e8 bd 5b fe ff       	call   c0006b42 <f_chmod>
c0020f85:	83 c4 10             	add    esp,0x10
c0020f88:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0020f8f:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0020f96:	85 c0                	test   eax,eax
c0020f98:	75 07                	jne    c0020fa1 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0020f9a:	b8 00 00 00 00       	mov    eax,0x0
c0020f9f:	eb 05                	jmp    c0020fa6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020fa1:	b8 01 00 00 00       	mov    eax,0x1
c0020fa6:	81 c4 2c 01 00 00    	add    esp,0x12c
c0020fac:	c3                   	ret    
c0020fad:	90                   	nop

c0020fae <FAT::rename(char const*, char const*)>:
c0020fae:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020fb4:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0020fbc:	74 0a                	je     c0020fc8 <FAT::rename(char const*, char const*)+0x1a>
c0020fbe:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0020fc6:	75 0a                	jne    c0020fd2 <FAT::rename(char const*, char const*)+0x24>
c0020fc8:	b8 04 00 00 00       	mov    eax,0x4
c0020fcd:	e9 98 00 00 00       	jmp    c002106a <FAT::rename(char const*, char const*)+0xbc>
c0020fd2:	83 ec 08             	sub    esp,0x8
c0020fd5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020fdc:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020fe3:	50                   	push   eax
c0020fe4:	e8 23 f8 fd ff       	call   c000080c <strcpy>
c0020fe9:	83 c4 10             	add    esp,0x10
c0020fec:	83 ec 08             	sub    esp,0x8
c0020fef:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0020ff6:	50                   	push   eax
c0020ff7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020ffe:	e8 ed fa ff ff       	call   c0020af0 <FAT::fixFilepath(char*)>
c0021003:	83 c4 10             	add    esp,0x10
c0021006:	83 ec 08             	sub    esp,0x8
c0021009:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0021010:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021014:	50                   	push   eax
c0021015:	e8 f2 f7 fd ff       	call   c000080c <strcpy>
c002101a:	83 c4 10             	add    esp,0x10
c002101d:	83 ec 08             	sub    esp,0x8
c0021020:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021024:	50                   	push   eax
c0021025:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002102c:	e8 bf fa ff ff       	call   c0020af0 <FAT::fixFilepath(char*)>
c0021031:	83 c4 10             	add    esp,0x10
c0021034:	83 ec 08             	sub    esp,0x8
c0021037:	8d 44 24 14          	lea    eax,[esp+0x14]
c002103b:	50                   	push   eax
c002103c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021043:	50                   	push   eax
c0021044:	e8 06 58 fe ff       	call   c000684f <f_rename>
c0021049:	83 c4 10             	add    esp,0x10
c002104c:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0021053:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c002105a:	85 c0                	test   eax,eax
c002105c:	75 07                	jne    c0021065 <FAT::rename(char const*, char const*)+0xb7>
c002105e:	b8 00 00 00 00       	mov    eax,0x0
c0021063:	eb 05                	jmp    c002106a <FAT::rename(char const*, char const*)+0xbc>
c0021065:	b8 01 00 00 00       	mov    eax,0x1
c002106a:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021070:	c3                   	ret    
c0021071:	90                   	nop

c0021072 <FAT::mkdir(char const*)>:
c0021072:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021078:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021080:	75 07                	jne    c0021089 <FAT::mkdir(char const*)+0x17>
c0021082:	b8 04 00 00 00       	mov    eax,0x4
c0021087:	eb 5c                	jmp    c00210e5 <FAT::mkdir(char const*)+0x73>
c0021089:	83 ec 08             	sub    esp,0x8
c002108c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021093:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021097:	50                   	push   eax
c0021098:	e8 6f f7 fd ff       	call   c000080c <strcpy>
c002109d:	83 c4 10             	add    esp,0x10
c00210a0:	83 ec 08             	sub    esp,0x8
c00210a3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00210a7:	50                   	push   eax
c00210a8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00210af:	e8 3c fa ff ff       	call   c0020af0 <FAT::fixFilepath(char*)>
c00210b4:	83 c4 10             	add    esp,0x10
c00210b7:	83 ec 0c             	sub    esp,0xc
c00210ba:	8d 44 24 18          	lea    eax,[esp+0x18]
c00210be:	50                   	push   eax
c00210bf:	e8 5f 55 fe ff       	call   c0006623 <f_mkdir>
c00210c4:	83 c4 10             	add    esp,0x10
c00210c7:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00210ce:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00210d5:	85 c0                	test   eax,eax
c00210d7:	75 07                	jne    c00210e0 <FAT::mkdir(char const*)+0x6e>
c00210d9:	b8 00 00 00 00       	mov    eax,0x0
c00210de:	eb 05                	jmp    c00210e5 <FAT::mkdir(char const*)+0x73>
c00210e0:	b8 01 00 00 00       	mov    eax,0x1
c00210e5:	81 c4 1c 01 00 00    	add    esp,0x11c
c00210eb:	c3                   	ret    

c00210ec <FAT::exists(char const*)>:
c00210ec:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00210f2:	83 ec 08             	sub    esp,0x8
c00210f5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00210fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021100:	50                   	push   eax
c0021101:	e8 06 f7 fd ff       	call   c000080c <strcpy>
c0021106:	83 c4 10             	add    esp,0x10
c0021109:	83 ec 08             	sub    esp,0x8
c002110c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021110:	50                   	push   eax
c0021111:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021118:	e8 d3 f9 ff ff       	call   c0020af0 <FAT::fixFilepath(char*)>
c002111d:	83 c4 10             	add    esp,0x10
c0021120:	83 ec 08             	sub    esp,0x8
c0021123:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c002112a:	50                   	push   eax
c002112b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002112f:	50                   	push   eax
c0021130:	e8 19 50 fe ff       	call   c000614e <f_stat>
c0021135:	83 c4 10             	add    esp,0x10
c0021138:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002113f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021146:	85 c0                	test   eax,eax
c0021148:	75 04                	jne    c002114e <FAT::exists(char const*)+0x62>
c002114a:	b0 01                	mov    al,0x1
c002114c:	eb 02                	jmp    c0021150 <FAT::exists(char const*)+0x64>
c002114e:	b0 00                	mov    al,0x0
c0021150:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021156:	c3                   	ret    
c0021157:	90                   	nop

c0021158 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021158:	b8 08 00 00 00       	mov    eax,0x8
c002115d:	c3                   	ret    

c002115e <ISO9660::seek(void*, unsigned long long)>:
c002115e:	53                   	push   ebx
c002115f:	b8 04 00 00 00       	mov    eax,0x4
c0021164:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021168:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002116c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021170:	85 d2                	test   edx,edx
c0021172:	74 17                	je     c002118b <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021174:	89 c8                	mov    eax,ecx
c0021176:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021179:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c002117c:	b8 01 00 00 00       	mov    eax,0x1
c0021181:	73 08                	jae    c002118b <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021183:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021186:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021189:	31 c0                	xor    eax,eax
c002118b:	5b                   	pop    ebx
c002118c:	c3                   	ret    
c002118d:	90                   	nop

c002118e <ISO9660::tell(void*, unsigned long long*)>:
c002118e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021192:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021196:	85 d2                	test   edx,edx
c0021198:	74 12                	je     c00211ac <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002119a:	85 c0                	test   eax,eax
c002119c:	74 0e                	je     c00211ac <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002119e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00211a1:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c00211a4:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00211a7:	89 10                	mov    DWORD PTR [eax],edx
c00211a9:	31 c0                	xor    eax,eax
c00211ab:	c3                   	ret    
c00211ac:	b8 04 00 00 00       	mov    eax,0x4
c00211b1:	c3                   	ret    

c00211b2 <ISO9660::getName()>:
c00211b2:	b8 e8 c2 02 c0       	mov    eax,0xc002c2e8
c00211b7:	c3                   	ret    

c00211b8 <ISO9660::stat(void*, unsigned long long*)>:
c00211b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00211bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00211c0:	85 d2                	test   edx,edx
c00211c2:	74 12                	je     c00211d6 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00211c4:	85 c0                	test   eax,eax
c00211c6:	74 0e                	je     c00211d6 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00211c8:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00211cb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00211ce:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00211d1:	89 10                	mov    DWORD PTR [eax],edx
c00211d3:	31 c0                	xor    eax,eax
c00211d5:	c3                   	ret    
c00211d6:	b8 04 00 00 00       	mov    eax,0x4
c00211db:	c3                   	ret    

c00211dc <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00211dc:	b8 01 00 00 00       	mov    eax,0x1
c00211e1:	c3                   	ret    

c00211e2 <ISO9660::unlink(char const*)>:
c00211e2:	b8 01 00 00 00       	mov    eax,0x1
c00211e7:	c3                   	ret    

c00211e8 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00211e8:	b8 01 00 00 00       	mov    eax,0x1
c00211ed:	c3                   	ret    

c00211ee <ISO9660::rename(char const*, char const*)>:
c00211ee:	b8 01 00 00 00       	mov    eax,0x1
c00211f3:	c3                   	ret    

c00211f4 <ISO9660::mkdir(char const*)>:
c00211f4:	b8 01 00 00 00       	mov    eax,0x1
c00211f9:	c3                   	ret    

c00211fa <ISO9660::close(void*)>:
c00211fa:	83 ec 0c             	sub    esp,0xc
c00211fd:	b8 04 00 00 00       	mov    eax,0x4
c0021202:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021206:	85 d2                	test   edx,edx
c0021208:	74 0e                	je     c0021218 <ISO9660::close(void*)+0x1e>
c002120a:	83 ec 0c             	sub    esp,0xc
c002120d:	52                   	push   edx
c002120e:	e8 96 e3 fe ff       	call   c000f5a9 <free>
c0021213:	83 c4 10             	add    esp,0x10
c0021216:	31 c0                	xor    eax,eax
c0021218:	83 c4 0c             	add    esp,0xc
c002121b:	c3                   	ret    

c002121c <ISO9660::closeDir(void*)>:
c002121c:	83 ec 0c             	sub    esp,0xc
c002121f:	b8 04 00 00 00       	mov    eax,0x4
c0021224:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021228:	85 d2                	test   edx,edx
c002122a:	74 0e                	je     c002123a <ISO9660::closeDir(void*)+0x1e>
c002122c:	83 ec 0c             	sub    esp,0xc
c002122f:	52                   	push   edx
c0021230:	e8 74 e3 fe ff       	call   c000f5a9 <free>
c0021235:	83 c4 10             	add    esp,0x10
c0021238:	31 c0                	xor    eax,eax
c002123a:	83 c4 0c             	add    esp,0xc
c002123d:	c3                   	ret    

c002123e <ISO9660::~ISO9660()>:
c002123e:	83 ec 0c             	sub    esp,0xc
c0021241:	ba 0c c3 02 c0       	mov    edx,0xc002c30c
c0021246:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002124a:	89 10                	mov    DWORD PTR [eax],edx
c002124c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021250:	83 ec 0c             	sub    esp,0xc
c0021253:	50                   	push   eax
c0021254:	e8 73 18 ff ff       	call   c0012acc <Filesystem::~Filesystem()>
c0021259:	83 c4 10             	add    esp,0x10
c002125c:	90                   	nop
c002125d:	83 c4 0c             	add    esp,0xc
c0021260:	c3                   	ret    
c0021261:	90                   	nop

c0021262 <ISO9660::~ISO9660()>:
c0021262:	83 ec 0c             	sub    esp,0xc
c0021265:	83 ec 0c             	sub    esp,0xc
c0021268:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002126c:	e8 cd ff ff ff       	call   c002123e <ISO9660::~ISO9660()>
c0021271:	83 c4 10             	add    esp,0x10
c0021274:	83 ec 08             	sub    esp,0x8
c0021277:	6a 08                	push   0x8
c0021279:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002127d:	e8 43 14 ff ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0021282:	83 c4 10             	add    esp,0x10
c0021285:	83 c4 0c             	add    esp,0xc
c0021288:	c3                   	ret    

c0021289 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021289:	55                   	push   ebp
c002128a:	31 c9                	xor    ecx,ecx
c002128c:	57                   	push   edi
c002128d:	56                   	push   esi
c002128e:	53                   	push   ebx
c002128f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021293:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021297:	89 eb                	mov    ebx,ebp
c0021299:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c002129d:	39 ce                	cmp    esi,ecx
c002129f:	7e 17                	jle    c00212b8 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c00212a1:	31 d2                	xor    edx,edx
c00212a3:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c00212a7:	7d 13                	jge    c00212bc <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c00212a9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00212ad:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00212b0:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c00212b3:	75 0d                	jne    c00212c2 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c00212b5:	42                   	inc    edx
c00212b6:	eb eb                	jmp    c00212a3 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c00212b8:	31 c0                	xor    eax,eax
c00212ba:	eb 0a                	jmp    c00212c6 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00212bc:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00212c0:	eb 04                	jmp    c00212c6 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00212c2:	41                   	inc    ecx
c00212c3:	43                   	inc    ebx
c00212c4:	eb d7                	jmp    c002129d <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c00212c6:	5b                   	pop    ebx
c00212c7:	5e                   	pop    esi
c00212c8:	5f                   	pop    edi
c00212c9:	5d                   	pop    ebp
c00212ca:	c3                   	ret    

c00212cb <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00212cb:	57                   	push   edi
c00212cc:	56                   	push   esi
c00212cd:	53                   	push   ebx
c00212ce:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00212d2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00212d6:	39 0d c0 f4 02 c0    	cmp    DWORD PTR ds:0xc002f4c0,ecx
c00212dc:	75 08                	jne    c00212e6 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c00212de:	38 05 54 d3 02 c0    	cmp    BYTE PTR ds:0xc002d354,al
c00212e4:	74 2b                	je     c0021311 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c00212e6:	83 ec 0c             	sub    esp,0xc
c00212e9:	a2 54 d3 02 c0       	mov    ds:0xc002d354,al
c00212ee:	68 e0 f4 02 c0       	push   0xc002f4e0
c00212f3:	0f be c0             	movsx  eax,al
c00212f6:	6a 01                	push   0x1
c00212f8:	89 0d c0 f4 02 c0    	mov    DWORD PTR ds:0xc002f4c0,ecx
c00212fe:	31 db                	xor    ebx,ebx
c0021300:	53                   	push   ebx
c0021301:	51                   	push   ecx
c0021302:	ff 34 85 bc e2 02 c0 	push   DWORD PTR [eax*4-0x3ffd1d44]
c0021309:	e8 ea 4d ff ff       	call   c00160f8 <LogicalDisk::read(unsigned long long, int, void*)>
c002130e:	83 c4 20             	add    esp,0x20
c0021311:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0021315:	be e0 f4 02 c0       	mov    esi,0xc002f4e0
c002131a:	b9 00 08 00 00       	mov    ecx,0x800
c002131f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021321:	5b                   	pop    ebx
c0021322:	5e                   	pop    esi
c0021323:	5f                   	pop    edi
c0021324:	c3                   	ret    
c0021325:	90                   	nop

c0021326 <ISO9660::tryMount(LogicalDisk*, int)>:
c0021326:	81 ec 10 08 00 00    	sub    esp,0x810
c002132c:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021333:	83 c0 41             	add    eax,0x41
c0021336:	0f be c0             	movsx  eax,al
c0021339:	50                   	push   eax
c002133a:	8d 44 24 08          	lea    eax,[esp+0x8]
c002133e:	50                   	push   eax
c002133f:	6a 10                	push   0x10
c0021341:	e8 85 ff ff ff       	call   c00212cb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021346:	83 c4 10             	add    esp,0x10
c0021349:	31 c0                	xor    eax,eax
c002134b:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021350:	75 1d                	jne    c002136f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021352:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021357:	75 16                	jne    c002136f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021359:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c002135e:	75 0f                	jne    c002136f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021360:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021365:	75 08                	jne    c002136f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021367:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c002136c:	0f 94 c0             	sete   al
c002136f:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021375:	c3                   	ret    

c0021376 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021376:	55                   	push   ebp
c0021377:	57                   	push   edi
c0021378:	56                   	push   esi
c0021379:	53                   	push   ebx
c002137a:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021380:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021387:	85 ed                	test   ebp,ebp
c0021389:	0f 84 da 01 00 00    	je     c0021569 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c002138f:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021397:	0f 84 cc 01 00 00    	je     c0021569 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c002139d:	b8 01 00 00 00       	mov    eax,0x1
c00213a2:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c00213a6:	0f 85 c2 01 00 00    	jne    c002156e <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c00213ac:	31 d2                	xor    edx,edx
c00213ae:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c00213b5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00213b8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00213bb:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00213be:	89 04 24             	mov    DWORD PTR [esp],eax
c00213c1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00213c5:	01 c8                	add    eax,ecx
c00213c7:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00213ca:	11 da                	adc    edx,ebx
c00213cc:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00213d0:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00213d4:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00213d8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00213dc:	19 d7                	sbb    edi,edx
c00213de:	72 11                	jb     c00213f1 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c00213e0:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00213e3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00213e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00213eb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00213ef:	eb 0c                	jmp    c00213fd <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c00213f1:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00213f5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00213f9:	29 ce                	sub    esi,ecx
c00213fb:	19 df                	sbb    edi,ebx
c00213fd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021400:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021403:	0f a4 c2 0b          	shld   edx,eax,0xb
c0021407:	c1 e0 0b             	shl    eax,0xb
c002140a:	01 c8                	add    eax,ecx
c002140c:	11 da                	adc    edx,ebx
c002140e:	89 04 24             	mov    DWORD PTR [esp],eax
c0021411:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021415:	51                   	push   ecx
c0021416:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002141a:	50                   	push   eax
c002141b:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c002141f:	53                   	push   ebx
c0021420:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021424:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021428:	0f ac d0 0b          	shrd   eax,edx,0xb
c002142c:	50                   	push   eax
c002142d:	e8 99 fe ff ff       	call   c00212cb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021432:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021435:	b8 00 08 00 00       	mov    eax,0x800
c002143a:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0021440:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c0021444:	29 d0                	sub    eax,edx
c0021446:	83 c4 10             	add    esp,0x10
c0021449:	89 f9                	mov    ecx,edi
c002144b:	39 c6                	cmp    esi,eax
c002144d:	83 d9 00             	sbb    ecx,0x0
c0021450:	7d 1b                	jge    c002146d <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c0021452:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0021457:	75 12                	jne    c002146b <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c0021459:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021460:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021466:	e9 fa 00 00 00       	jmp    c0021565 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c002146b:	89 f0                	mov    eax,esi
c002146d:	01 d3                	add    ebx,edx
c002146f:	31 d2                	xor    edx,edx
c0021471:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0021475:	39 c2                	cmp    edx,eax
c0021477:	7d 14                	jge    c002148d <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c0021479:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021480:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021484:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021487:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c002148a:	42                   	inc    edx
c002148b:	eb e8                	jmp    c0021475 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c002148d:	89 c2                	mov    edx,eax
c002148f:	85 c0                	test   eax,eax
c0021491:	79 02                	jns    c0021495 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c0021493:	31 d2                	xor    edx,edx
c0021495:	01 c2                	add    edx,eax
c0021497:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c002149a:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c00214a1:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00214a5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00214a9:	99                   	cdq    
c00214aa:	01 c1                	add    ecx,eax
c00214ac:	11 d3                	adc    ebx,edx
c00214ae:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00214b2:	29 c6                	sub    esi,eax
c00214b4:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00214b8:	19 d7                	sbb    edi,edx
c00214ba:	89 34 24             	mov    DWORD PTR [esp],esi
c00214bd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00214c1:	b8 ff 07 00 00       	mov    eax,0x7ff
c00214c6:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00214c9:	b8 00 00 00 00       	mov    eax,0x0
c00214ce:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00214d2:	7d 43                	jge    c0021517 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c00214d4:	52                   	push   edx
c00214d5:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00214d9:	50                   	push   eax
c00214da:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00214de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00214e2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00214e6:	0f ac d0 0b          	shrd   eax,edx,0xb
c00214ea:	50                   	push   eax
c00214eb:	e8 db fd ff ff       	call   c00212cb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00214f0:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c00214f8:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c00214fd:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c0021505:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c002150d:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021512:	83 c4 10             	add    esp,0x10
c0021515:	eb aa                	jmp    c00214c1 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c0021517:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002151b:	0b 04 24             	or     eax,DWORD PTR [esp]
c002151e:	74 2a                	je     c002154a <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c0021520:	50                   	push   eax
c0021521:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021525:	50                   	push   eax
c0021526:	8d 74 24 28          	lea    esi,[esp+0x28]
c002152a:	56                   	push   esi
c002152b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002152f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021533:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c0021537:	51                   	push   ecx
c0021538:	e8 8e fd ff ff       	call   c00212cb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002153d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021541:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021545:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021547:	83 c4 10             	add    esp,0x10
c002154a:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021551:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021555:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021559:	89 18                	mov    DWORD PTR [eax],ebx
c002155b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002155f:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021562:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021565:	31 c0                	xor    eax,eax
c0021567:	eb 05                	jmp    c002156e <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021569:	b8 04 00 00 00       	mov    eax,0x4
c002156e:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021574:	5b                   	pop    ebx
c0021575:	5e                   	pop    esi
c0021576:	5f                   	pop    edi
c0021577:	5d                   	pop    ebp
c0021578:	c3                   	ret    
c0021579:	90                   	nop

c002157a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c002157a:	55                   	push   ebp
c002157b:	57                   	push   edi
c002157c:	56                   	push   esi
c002157d:	53                   	push   ebx
c002157e:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021584:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c002158b:	85 ed                	test   ebp,ebp
c002158d:	0f 84 51 02 00 00    	je     c00217e4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021593:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c002159b:	0f 84 43 02 00 00    	je     c00217e4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c00215a1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00215a4:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c00215a7:	75 0a                	jne    c00215b3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c00215a9:	b8 07 00 00 00       	mov    eax,0x7
c00215ae:	e9 36 02 00 00       	jmp    c00217e9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c00215b3:	50                   	push   eax
c00215b4:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00215b8:	50                   	push   eax
c00215b9:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00215c0:	53                   	push   ebx
c00215c1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00215c4:	c1 e0 0b             	shl    eax,0xb
c00215c7:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c00215ca:	c1 e8 0b             	shr    eax,0xb
c00215cd:	50                   	push   eax
c00215ce:	e8 f8 fc ff ff       	call   c00212cb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00215d3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00215d6:	83 c4 10             	add    esp,0x10
c00215d9:	89 c1                	mov    ecx,eax
c00215db:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00215de:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00215e4:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c00215e7:	84 db                	test   bl,bl
c00215e9:	0f 85 8b 00 00 00    	jne    c002167a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c00215ef:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c00215f5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00215f8:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00215fe:	29 c6                	sub    esi,eax
c0021600:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0021604:	89 f3                	mov    ebx,esi
c0021606:	89 f1                	mov    ecx,esi
c0021608:	c1 fb 1f             	sar    ebx,0x1f
c002160b:	01 f0                	add    eax,esi
c002160d:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021610:	11 da                	adc    edx,ebx
c0021612:	89 04 24             	mov    DWORD PTR [esp],eax
c0021615:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021619:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c002161c:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c002161f:	89 d8                	mov    eax,ebx
c0021621:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c0021625:	ba 00 00 00 00       	mov    edx,0x0
c002162a:	19 f8                	sbb    eax,edi
c002162c:	b8 00 00 00 00       	mov    eax,0x0
c0021631:	73 08                	jae    c002163b <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c0021633:	89 f0                	mov    eax,esi
c0021635:	89 fa                	mov    edx,edi
c0021637:	29 c8                	sub    eax,ecx
c0021639:	19 da                	sbb    edx,ebx
c002163b:	89 d7                	mov    edi,edx
c002163d:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021640:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021643:	09 c7                	or     edi,eax
c0021645:	0f 84 5e ff ff ff    	je     c00215a9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c002164b:	57                   	push   edi
c002164c:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021650:	50                   	push   eax
c0021651:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021658:	53                   	push   ebx
c0021659:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002165c:	c1 e0 0b             	shl    eax,0xb
c002165f:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0021663:	c1 e8 0b             	shr    eax,0xb
c0021666:	50                   	push   eax
c0021667:	e8 5f fc ff ff       	call   c00212cb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002166c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002166f:	83 c4 10             	add    esp,0x10
c0021672:	25 ff 07 00 00       	and    eax,0x7ff
c0021677:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c002167a:	31 ff                	xor    edi,edi
c002167c:	56                   	push   esi
c002167d:	6a 28                	push   0x28
c002167f:	6a 00                	push   0x0
c0021681:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021685:	50                   	push   eax
c0021686:	e8 c5 f0 fd ff       	call   c0000750 <memset>
c002168b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002168e:	25 ff 07 00 00       	and    eax,0x7ff
c0021693:	89 c6                	mov    esi,eax
c0021695:	83 c6 21             	add    esi,0x21
c0021698:	83 d7 00             	adc    edi,0x0
c002169b:	83 c4 10             	add    esp,0x10
c002169e:	31 c9                	xor    ecx,ecx
c00216a0:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c00216a7:	83 f9 28             	cmp    ecx,0x28
c00216aa:	88 04 24             	mov    BYTE PTR [esp],al
c00216ad:	0f 94 c2             	sete   dl
c00216b0:	88 d0                	mov    al,dl
c00216b2:	ba ff 07 00 00       	mov    edx,0x7ff
c00216b7:	39 f2                	cmp    edx,esi
c00216b9:	ba 00 00 00 00       	mov    edx,0x0
c00216be:	19 fa                	sbb    edx,edi
c00216c0:	0f 92 c2             	setb   dl
c00216c3:	09 c2                	or     edx,eax
c00216c5:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00216c9:	0f 94 c0             	sete   al
c00216cc:	08 d0                	or     al,dl
c00216ce:	75 16                	jne    c00216e6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c00216d0:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c00216d4:	74 10                	je     c00216e6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c00216d6:	8a 04 24             	mov    al,BYTE PTR [esp]
c00216d9:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c00216dd:	41                   	inc    ecx
c00216de:	83 c6 01             	add    esi,0x1
c00216e1:	83 d7 00             	adc    edi,0x0
c00216e4:	eb ba                	jmp    c00216a0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c00216e6:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c00216ed:	83 ec 0c             	sub    esp,0xc
c00216f0:	8d 74 24 24          	lea    esi,[esp+0x24]
c00216f4:	56                   	push   esi
c00216f5:	e8 72 f0 fd ff       	call   c000076c <strlen>
c00216fa:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c0021701:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021705:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c002170d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021710:	5a                   	pop    edx
c0021711:	25 ff 07 00 00       	and    eax,0x7ff
c0021716:	59                   	pop    ecx
c0021717:	01 f8                	add    eax,edi
c0021719:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c002171f:	83 e0 02             	and    eax,0x2
c0021722:	3c 01                	cmp    al,0x1
c0021724:	19 c0                	sbb    eax,eax
c0021726:	83 c0 02             	add    eax,0x2
c0021729:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c002172d:	56                   	push   esi
c002172e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021732:	50                   	push   eax
c0021733:	e8 d4 f0 fd ff       	call   c000080c <strcpy>
c0021738:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c002173c:	83 c4 10             	add    esp,0x10
c002173f:	84 c0                	test   al,al
c0021741:	75 21                	jne    c0021764 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c0021743:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c002174b:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021753:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c002175b:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021762:	eb 28                	jmp    c002178c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021764:	fe c8                	dec    al
c0021766:	75 24                	jne    c002178c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021768:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021770:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021778:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021780:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021787:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c002178c:	8d 74 24 40          	lea    esi,[esp+0x40]
c0021790:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c0021797:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c002179e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00217a0:	0f b6 f3             	movzx  esi,bl
c00217a3:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c00217aa:	31 db                	xor    ebx,ebx
c00217ac:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00217b2:	89 df                	mov    edi,ebx
c00217b4:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c00217b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00217ba:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c00217bd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00217c0:	39 c6                	cmp    esi,eax
c00217c2:	19 d7                	sbb    edi,edx
c00217c4:	72 10                	jb     c00217d6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c00217c6:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00217cd:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c00217d4:	eb 0a                	jmp    c00217e0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c00217d6:	29 f0                	sub    eax,esi
c00217d8:	19 da                	sbb    edx,ebx
c00217da:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c00217dd:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00217e0:	31 c0                	xor    eax,eax
c00217e2:	eb 05                	jmp    c00217e9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c00217e4:	b8 04 00 00 00       	mov    eax,0x4
c00217e9:	81 c4 5c 09 00 00    	add    esp,0x95c
c00217ef:	5b                   	pop    ebx
c00217f0:	5e                   	pop    esi
c00217f1:	5f                   	pop    edi
c00217f2:	5d                   	pop    ebp
c00217f3:	c3                   	ret    

c00217f4 <readRoot(unsigned int*, unsigned int*, char)>:
c00217f4:	57                   	push   edi
c00217f5:	56                   	push   esi
c00217f6:	81 ec 38 08 00 00    	sub    esp,0x838
c00217fc:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021804:	50                   	push   eax
c0021805:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021809:	50                   	push   eax
c002180a:	6a 10                	push   0x10
c002180c:	e8 ba fa ff ff       	call   c00212cb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021811:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c0021818:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c002181c:	b9 22 00 00 00       	mov    ecx,0x22
c0021821:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021823:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002182a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002182e:	89 10                	mov    DWORD PTR [eax],edx
c0021830:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021837:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002183b:	89 10                	mov    DWORD PTR [eax],edx
c002183d:	81 c4 44 08 00 00    	add    esp,0x844
c0021843:	b0 01                	mov    al,0x1
c0021845:	5e                   	pop    esi
c0021846:	5f                   	pop    edi
c0021847:	c3                   	ret    

c0021848 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021848:	55                   	push   ebp
c0021849:	57                   	push   edi
c002184a:	56                   	push   esi
c002184b:	53                   	push   ebx
c002184c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021852:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021859:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021860:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021864:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021868:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002186c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021870:	75 03                	jne    c0021875 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021872:	83 c3 02             	add    ebx,0x2
c0021875:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021878:	75 03                	jne    c002187d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c002187a:	43                   	inc    ebx
c002187b:	eb f8                	jmp    c0021875 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c002187d:	51                   	push   ecx
c002187e:	68 00 01 00 00       	push   0x100
c0021883:	6a 00                	push   0x0
c0021885:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021889:	50                   	push   eax
c002188a:	e8 c1 ee fd ff       	call   c0000750 <memset>
c002188f:	83 c4 10             	add    esp,0x10
c0021892:	31 d2                	xor    edx,edx
c0021894:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021897:	84 c0                	test   al,al
c0021899:	74 21                	je     c00218bc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c002189b:	3c 2f                	cmp    al,0x2f
c002189d:	75 0b                	jne    c00218aa <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c002189f:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c00218a3:	bd 01 00 00 00       	mov    ebp,0x1
c00218a8:	eb 14                	jmp    c00218be <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c00218aa:	8d 48 9f             	lea    ecx,[eax-0x61]
c00218ad:	80 f9 19             	cmp    cl,0x19
c00218b0:	77 03                	ja     c00218b5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c00218b2:	83 e8 20             	sub    eax,0x20
c00218b5:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c00218b9:	42                   	inc    edx
c00218ba:	eb d8                	jmp    c0021894 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c00218bc:	31 ed                	xor    ebp,ebp
c00218be:	83 ec 0c             	sub    esp,0xc
c00218c1:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00218c8:	e8 cc dc fe ff       	call   c000f599 <malloc>
c00218cd:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c00218d4:	89 c6                	mov    esi,eax
c00218d6:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c00218dc:	c1 ef 0b             	shr    edi,0xb
c00218df:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c00218e6:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00218ea:	83 c4 10             	add    esp,0x10
c00218ed:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c00218f2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00218f6:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c00218fd:	74 28                	je     c0021927 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c00218ff:	52                   	push   edx
c0021900:	57                   	push   edi
c0021901:	50                   	push   eax
c0021902:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021906:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c002190d:	e8 b9 f9 ff ff       	call   c00212cb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021912:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021916:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c002191d:	05 00 08 00 00       	add    eax,0x800
c0021922:	83 c4 10             	add    esp,0x10
c0021925:	eb cb                	jmp    c00218f2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021927:	83 ec 0c             	sub    esp,0xc
c002192a:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c002192e:	57                   	push   edi
c002192f:	e8 38 ee fd ff       	call   c000076c <strlen>
c0021934:	50                   	push   eax
c0021935:	57                   	push   edi
c0021936:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c002193d:	56                   	push   esi
c002193e:	e8 46 f9 ff ff       	call   c0021289 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021943:	83 c4 20             	add    esp,0x20
c0021946:	85 c0                	test   eax,eax
c0021948:	75 13                	jne    c002195d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c002194a:	83 ec 0c             	sub    esp,0xc
c002194d:	56                   	push   esi
c002194e:	e8 56 dc fe ff       	call   c000f5a9 <free>
c0021953:	83 c4 10             	add    esp,0x10
c0021956:	31 c0                	xor    eax,eax
c0021958:	e9 b3 00 00 00       	jmp    c0021a10 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c002195d:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021961:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021965:	c1 e7 08             	shl    edi,0x8
c0021968:	c1 e2 10             	shl    edx,0x10
c002196b:	09 d7                	or     edi,edx
c002196d:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021971:	09 d7                	or     edi,edx
c0021973:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021977:	c1 e2 18             	shl    edx,0x18
c002197a:	09 d7                	or     edi,edx
c002197c:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021980:	89 d1                	mov    ecx,edx
c0021982:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021986:	c1 e1 08             	shl    ecx,0x8
c0021989:	c1 e2 10             	shl    edx,0x10
c002198c:	09 ca                	or     edx,ecx
c002198e:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021992:	09 ca                	or     edx,ecx
c0021994:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021998:	c1 e1 18             	shl    ecx,0x18
c002199b:	09 ca                	or     edx,ecx
c002199d:	89 e9                	mov    ecx,ebp
c002199f:	84 c9                	test   cl,cl
c00219a1:	74 3c                	je     c00219df <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c00219a3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00219a7:	83 ec 0c             	sub    esp,0xc
c00219aa:	56                   	push   esi
c00219ab:	e8 f9 db fe ff       	call   c000f5a9 <free>
c00219b0:	83 c4 0c             	add    esp,0xc
c00219b3:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00219ba:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00219bf:	50                   	push   eax
c00219c0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00219c7:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00219ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00219d2:	52                   	push   edx
c00219d3:	57                   	push   edi
c00219d4:	53                   	push   ebx
c00219d5:	e8 6e fe ff ff       	call   c0021848 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00219da:	83 c4 20             	add    esp,0x20
c00219dd:	eb 31                	jmp    c0021a10 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00219df:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c00219e2:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c00219e9:	d0 e8                	shr    al,1
c00219eb:	89 3b                	mov    DWORD PTR [ebx],edi
c00219ed:	83 e0 01             	and    eax,0x1
c00219f0:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00219f7:	83 ec 0c             	sub    esp,0xc
c00219fa:	89 13                	mov    DWORD PTR [ebx],edx
c00219fc:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021a03:	89 03                	mov    DWORD PTR [ebx],eax
c0021a05:	56                   	push   esi
c0021a06:	e8 9e db fe ff       	call   c000f5a9 <free>
c0021a0b:	83 c4 10             	add    esp,0x10
c0021a0e:	b0 01                	mov    al,0x1
c0021a10:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021a16:	5b                   	pop    ebx
c0021a17:	5e                   	pop    esi
c0021a18:	5f                   	pop    edi
c0021a19:	5d                   	pop    ebp
c0021a1a:	c3                   	ret    

c0021a1b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021a1b:	55                   	push   ebp
c0021a1c:	57                   	push   edi
c0021a1d:	56                   	push   esi
c0021a1e:	53                   	push   ebx
c0021a1f:	83 ec 20             	sub    esp,0x20
c0021a22:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021a26:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021a2a:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021a2e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021a36:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021a3e:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021a43:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021a49:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021a4f:	57                   	push   edi
c0021a50:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021a54:	50                   	push   eax
c0021a55:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021a59:	50                   	push   eax
c0021a5a:	e8 95 fd ff ff       	call   c00217f4 <readRoot(unsigned int*, unsigned int*, char)>
c0021a5f:	5a                   	pop    edx
c0021a60:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021a64:	e8 03 ed fd ff       	call   c000076c <strlen>
c0021a69:	83 c4 10             	add    esp,0x10
c0021a6c:	83 f8 03             	cmp    eax,0x3
c0021a6f:	77 17                	ja     c0021a88 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021a71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a75:	89 03                	mov    DWORD PTR [ebx],eax
c0021a77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021a7b:	89 06                	mov    DWORD PTR [esi],eax
c0021a7d:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021a84:	b0 01                	mov    al,0x1
c0021a86:	eb 19                	jmp    c0021aa1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021a88:	50                   	push   eax
c0021a89:	55                   	push   ebp
c0021a8a:	57                   	push   edi
c0021a8b:	56                   	push   esi
c0021a8c:	53                   	push   ebx
c0021a8d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021a91:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021a95:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021a99:	e8 aa fd ff ff       	call   c0021848 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021a9e:	83 c4 20             	add    esp,0x20
c0021aa1:	83 c4 1c             	add    esp,0x1c
c0021aa4:	5b                   	pop    ebx
c0021aa5:	5e                   	pop    esi
c0021aa6:	5f                   	pop    edi
c0021aa7:	5d                   	pop    ebp
c0021aa8:	c3                   	ret    
c0021aa9:	90                   	nop

c0021aaa <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021aaa:	57                   	push   edi
c0021aab:	56                   	push   esi
c0021aac:	53                   	push   ebx
c0021aad:	83 ec 10             	sub    esp,0x10
c0021ab0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021ab4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021ab8:	85 ff                	test   edi,edi
c0021aba:	0f 84 8b 00 00 00    	je     c0021b4b <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0021ac0:	85 f6                	test   esi,esi
c0021ac2:	0f 84 83 00 00 00    	je     c0021b4b <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0021ac8:	b8 03 00 00 00       	mov    eax,0x3
c0021acd:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021ad2:	75 7c                	jne    c0021b50 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021ad4:	83 ec 0c             	sub    esp,0xc
c0021ad7:	6a 1c                	push   0x1c
c0021ad9:	e8 bb da fe ff       	call   c000f599 <malloc>
c0021ade:	89 07                	mov    DWORD PTR [edi],eax
c0021ae0:	89 c3                	mov    ebx,eax
c0021ae2:	58                   	pop    eax
c0021ae3:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021ae7:	50                   	push   eax
c0021ae8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021aeb:	50                   	push   eax
c0021aec:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021af0:	50                   	push   eax
c0021af1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021af5:	50                   	push   eax
c0021af6:	56                   	push   esi
c0021af7:	e8 1f ff ff ff       	call   c0021a1b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021afc:	83 c4 20             	add    esp,0x20
c0021aff:	84 c0                	test   al,al
c0021b01:	74 07                	je     c0021b0a <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c0021b03:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021b08:	74 0b                	je     c0021b15 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c0021b0a:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021b0e:	b8 01 00 00 00       	mov    eax,0x1
c0021b13:	eb 3b                	jmp    c0021b50 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021b15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b19:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021b1d:	89 03                	mov    DWORD PTR [ebx],eax
c0021b1f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021b26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021b2a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021b31:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021b38:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021b3b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021b42:	8a 06                	mov    al,BYTE PTR [esi]
c0021b44:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021b47:	31 c0                	xor    eax,eax
c0021b49:	eb 05                	jmp    c0021b50 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021b4b:	b8 04 00 00 00       	mov    eax,0x4
c0021b50:	83 c4 10             	add    esp,0x10
c0021b53:	5b                   	pop    ebx
c0021b54:	5e                   	pop    esi
c0021b55:	5f                   	pop    edi
c0021b56:	c3                   	ret    
c0021b57:	90                   	nop

c0021b58 <ISO9660::exists(char const*)>:
c0021b58:	83 ec 28             	sub    esp,0x28
c0021b5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021b5f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0021b63:	52                   	push   edx
c0021b64:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0021b67:	52                   	push   edx
c0021b68:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021b6c:	52                   	push   edx
c0021b6d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021b71:	52                   	push   edx
c0021b72:	50                   	push   eax
c0021b73:	e8 a3 fe ff ff       	call   c0021a1b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021b78:	83 c4 3c             	add    esp,0x3c
c0021b7b:	c3                   	ret    

c0021b7c <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0021b7c:	56                   	push   esi
c0021b7d:	53                   	push   ebx
c0021b7e:	83 ec 14             	sub    esp,0x14
c0021b81:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0021b85:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021b89:	85 db                	test   ebx,ebx
c0021b8b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021b8f:	0f 94 c2             	sete   dl
c0021b92:	85 f6                	test   esi,esi
c0021b94:	0f 94 c0             	sete   al
c0021b97:	08 c2                	or     dl,al
c0021b99:	75 68                	jne    c0021c03 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021b9b:	85 c9                	test   ecx,ecx
c0021b9d:	74 64                	je     c0021c03 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021b9f:	83 ec 0c             	sub    esp,0xc
c0021ba2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021ba5:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021ba9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021baf:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021bb6:	50                   	push   eax
c0021bb7:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0021bba:	50                   	push   eax
c0021bbb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021bbf:	50                   	push   eax
c0021bc0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021bc4:	50                   	push   eax
c0021bc5:	51                   	push   ecx
c0021bc6:	e8 50 fe ff ff       	call   c0021a1b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021bcb:	83 c4 20             	add    esp,0x20
c0021bce:	ba 01 00 00 00       	mov    edx,0x1
c0021bd3:	84 c0                	test   al,al
c0021bd5:	74 31                	je     c0021c08 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021bd7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021bdb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021be2:	89 03                	mov    DWORD PTR [ebx],eax
c0021be4:	ba 00 00 00 00       	mov    edx,0x0
c0021be9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021bed:	85 c0                	test   eax,eax
c0021bef:	0f 95 06             	setne  BYTE PTR [esi]
c0021bf2:	74 14                	je     c0021c08 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021bf4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021bfa:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021c01:	eb 05                	jmp    c0021c08 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021c03:	ba 04 00 00 00       	mov    edx,0x4
c0021c08:	83 c4 14             	add    esp,0x14
c0021c0b:	89 d0                	mov    eax,edx
c0021c0d:	5b                   	pop    ebx
c0021c0e:	5e                   	pop    esi
c0021c0f:	c3                   	ret    

c0021c10 <ISO9660::openDir(char const*, void**)>:
c0021c10:	57                   	push   edi
c0021c11:	56                   	push   esi
c0021c12:	53                   	push   ebx
c0021c13:	83 ec 10             	sub    esp,0x10
c0021c16:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021c1a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021c1e:	85 ff                	test   edi,edi
c0021c20:	74 7b                	je     c0021c9d <ISO9660::openDir(char const*, void**)+0x8d>
c0021c22:	85 f6                	test   esi,esi
c0021c24:	74 77                	je     c0021c9d <ISO9660::openDir(char const*, void**)+0x8d>
c0021c26:	83 ec 0c             	sub    esp,0xc
c0021c29:	6a 1c                	push   0x1c
c0021c2b:	e8 69 d9 fe ff       	call   c000f599 <malloc>
c0021c30:	89 07                	mov    DWORD PTR [edi],eax
c0021c32:	89 c3                	mov    ebx,eax
c0021c34:	58                   	pop    eax
c0021c35:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021c39:	50                   	push   eax
c0021c3a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021c3d:	50                   	push   eax
c0021c3e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021c42:	50                   	push   eax
c0021c43:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021c47:	50                   	push   eax
c0021c48:	56                   	push   esi
c0021c49:	e8 cd fd ff ff       	call   c0021a1b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021c4e:	83 c4 20             	add    esp,0x20
c0021c51:	84 c0                	test   al,al
c0021c53:	74 07                	je     c0021c5c <ISO9660::openDir(char const*, void**)+0x4c>
c0021c55:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021c5a:	75 0b                	jne    c0021c67 <ISO9660::openDir(char const*, void**)+0x57>
c0021c5c:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021c60:	b8 01 00 00 00       	mov    eax,0x1
c0021c65:	eb 3b                	jmp    c0021ca2 <ISO9660::openDir(char const*, void**)+0x92>
c0021c67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c6b:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021c6f:	89 03                	mov    DWORD PTR [ebx],eax
c0021c71:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021c78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021c7c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021c83:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021c8a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021c8d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021c94:	8a 06                	mov    al,BYTE PTR [esi]
c0021c96:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021c99:	31 c0                	xor    eax,eax
c0021c9b:	eb 05                	jmp    c0021ca2 <ISO9660::openDir(char const*, void**)+0x92>
c0021c9d:	b8 04 00 00 00       	mov    eax,0x4
c0021ca2:	83 c4 10             	add    esp,0x10
c0021ca5:	5b                   	pop    ebx
c0021ca6:	5e                   	pop    esi
c0021ca7:	5f                   	pop    edi
c0021ca8:	c3                   	ret    
c0021ca9:	90                   	nop

c0021caa <ISO9660::ISO9660()>:
c0021caa:	83 ec 0c             	sub    esp,0xc
c0021cad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cb1:	83 ec 0c             	sub    esp,0xc
c0021cb4:	50                   	push   eax
c0021cb5:	e8 ee 0d ff ff       	call   c0012aa8 <Filesystem::Filesystem()>
c0021cba:	83 c4 10             	add    esp,0x10
c0021cbd:	ba 0c c3 02 c0       	mov    edx,0xc002c30c
c0021cc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cc6:	89 10                	mov    DWORD PTR [eax],edx
c0021cc8:	90                   	nop
c0021cc9:	83 c4 0c             	add    esp,0xc
c0021ccc:	c3                   	ret    
c0021ccd:	90                   	nop

c0021cce <SoundChannel::SoundChannel(int, int, int, int)>:
c0021cce:	83 ec 1c             	sub    esp,0x1c
c0021cd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021cd5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021cd9:	89 10                	mov    DWORD PTR [eax],edx
c0021cdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021cdf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021ce3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021ce6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021cea:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021cee:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021cf1:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0021cf6:	75 23                	jne    c0021d1b <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c0021cf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021cfc:	8b 10                	mov    edx,DWORD PTR [eax]
c0021cfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d02:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021d05:	0f af c2             	imul   eax,edx
c0021d08:	85 c0                	test   eax,eax
c0021d0a:	79 03                	jns    c0021d0f <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c0021d0c:	83 c0 03             	add    eax,0x3
c0021d0f:	c1 f8 02             	sar    eax,0x2
c0021d12:	05 a0 0f 00 00       	add    eax,0xfa0
c0021d17:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021d1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d1f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021d23:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0021d26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d2a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0021d31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d35:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0021d3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d40:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021d43:	c1 e0 02             	shl    eax,0x2
c0021d46:	83 ec 0c             	sub    esp,0xc
c0021d49:	50                   	push   eax
c0021d4a:	e8 4a d8 fe ff       	call   c000f599 <malloc>
c0021d4f:	83 c4 10             	add    esp,0x10
c0021d52:	89 c2                	mov    edx,eax
c0021d54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d58:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0021d5b:	83 ec 04             	sub    esp,0x4
c0021d5e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021d62:	50                   	push   eax
c0021d63:	6a 01                	push   0x1
c0021d65:	6a 04                	push   0x4
c0021d67:	e8 f9 6d fe ff       	call   c0008b65 <src_new>
c0021d6c:	83 c4 10             	add    esp,0x10
c0021d6f:	89 c2                	mov    edx,eax
c0021d71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d75:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0021d78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d7c:	85 c0                	test   eax,eax
c0021d7e:	74 10                	je     c0021d90 <SoundChannel::SoundChannel(int, int, int, int)+0xc2>
c0021d80:	83 ec 0c             	sub    esp,0xc
c0021d83:	68 6c c3 02 c0       	push   0xc002c36c
c0021d88:	e8 fc 81 ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c0021d8d:	83 c4 10             	add    esp,0x10
c0021d90:	a0 e0 00 03 c0       	mov    al,ds:0xc00300e0
c0021d95:	83 f0 01             	xor    eax,0x1
c0021d98:	84 c0                	test   al,al
c0021d9a:	74 57                	je     c0021df3 <SoundChannel::SoundChannel(int, int, int, int)+0x125>
c0021d9c:	a1 88 c3 02 c0       	mov    eax,ds:0xc002c388
c0021da1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021da5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021dad:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0021db5:	7f 35                	jg     c0021dec <SoundChannel::SoundChannel(int, int, int, int)+0x11e>
c0021db7:	83 ec 0c             	sub    esp,0xc
c0021dba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021dbe:	e8 5c 54 00 00       	call   c002721f <__floatsisf>
c0021dc3:	83 c4 10             	add    esp,0x10
c0021dc6:	8b 15 88 c3 02 c0    	mov    edx,DWORD PTR ds:0xc002c388
c0021dcc:	83 ec 08             	sub    esp,0x8
c0021dcf:	52                   	push   edx
c0021dd0:	50                   	push   eax
c0021dd1:	e8 5b 50 00 00       	call   c0026e31 <__mulsf3>
c0021dd6:	83 c4 10             	add    esp,0x10
c0021dd9:	89 c2                	mov    edx,eax
c0021ddb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021ddf:	89 14 85 e0 fc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0320],edx
c0021de6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021dea:	eb c1                	jmp    c0021dad <SoundChannel::SoundChannel(int, int, int, int)+0xdf>
c0021dec:	c6 05 e0 00 03 c0 01 	mov    BYTE PTR ds:0xc00300e0,0x1
c0021df3:	90                   	nop
c0021df4:	83 c4 1c             	add    esp,0x1c
c0021df7:	c3                   	ret    

c0021df8 <SoundChannel::~SoundChannel()>:
c0021df8:	83 ec 0c             	sub    esp,0xc
c0021dfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021dff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0021e02:	83 ec 0c             	sub    esp,0xc
c0021e05:	50                   	push   eax
c0021e06:	e8 9e d7 fe ff       	call   c000f5a9 <free>
c0021e0b:	83 c4 10             	add    esp,0x10
c0021e0e:	90                   	nop
c0021e0f:	83 c4 0c             	add    esp,0xc
c0021e12:	c3                   	ret    
c0021e13:	90                   	nop

c0021e14 <SoundChannel::getSampleRate()>:
c0021e14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e18:	8b 00                	mov    eax,DWORD PTR [eax]
c0021e1a:	c3                   	ret    
c0021e1b:	90                   	nop

c0021e1c <SoundChannel::getBits()>:
c0021e1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e20:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021e23:	c3                   	ret    

c0021e24 <SoundChannel::getBufferUsed()>:
c0021e24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e28:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0021e2b:	c3                   	ret    

c0021e2c <SoundChannel::getBufferSize()>:
c0021e2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e30:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021e33:	c3                   	ret    

c0021e34 <SoundChannel::unbuffer(float*, int, int)>:
c0021e34:	56                   	push   esi
c0021e35:	53                   	push   ebx
c0021e36:	83 ec 40             	sub    esp,0x40
c0021e39:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0021e3d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0021e40:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021e44:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0021e47:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021e4b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021e4f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021e53:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021e57:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021e5b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0021e5f:	e8 bb 53 00 00       	call   c002721f <__floatsisf>
c0021e64:	5a                   	pop    edx
c0021e65:	89 c6                	mov    esi,eax
c0021e67:	ff 33                	push   DWORD PTR [ebx]
c0021e69:	e8 b1 53 00 00       	call   c002721f <__floatsisf>
c0021e6e:	59                   	pop    ecx
c0021e6f:	5a                   	pop    edx
c0021e70:	50                   	push   eax
c0021e71:	56                   	push   esi
c0021e72:	e8 7d 51 00 00       	call   c0026ff4 <__divsf3>
c0021e77:	89 04 24             	mov    DWORD PTR [esp],eax
c0021e7a:	e8 70 66 00 00       	call   c00284ef <__extendsfdf2>
c0021e7f:	59                   	pop    ecx
c0021e80:	5e                   	pop    esi
c0021e81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021e85:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0021e89:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0021e91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021e95:	50                   	push   eax
c0021e96:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0021e99:	e8 bc 68 fe ff       	call   c000875a <src_process>
c0021e9e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021ea2:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0021ea5:	83 c4 0c             	add    esp,0xc
c0021ea8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0021eab:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0021eae:	29 d0                	sub    eax,edx
c0021eb0:	c1 e0 02             	shl    eax,0x2
c0021eb3:	50                   	push   eax
c0021eb4:	8d 04 91             	lea    eax,[ecx+edx*4]
c0021eb7:	50                   	push   eax
c0021eb8:	51                   	push   ecx
c0021eb9:	e8 ca e7 fd ff       	call   c0000688 <memmove>
c0021ebe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021ec2:	83 c4 44             	add    esp,0x44
c0021ec5:	5b                   	pop    ebx
c0021ec6:	5e                   	pop    esi
c0021ec7:	c3                   	ret    

c0021ec8 <SoundChannel::buffer16(short*, int)>:
c0021ec8:	55                   	push   ebp
c0021ec9:	57                   	push   edi
c0021eca:	56                   	push   esi
c0021ecb:	53                   	push   ebx
c0021ecc:	83 ec 1c             	sub    esp,0x1c
c0021ecf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0021ed3:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021ed6:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021ed9:	0f 84 d2 00 00 00    	je     c0021fb1 <SoundChannel::buffer16(short*, int)+0xe9>
c0021edf:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0021ee3:	85 ed                	test   ebp,ebp
c0021ee5:	0f 8e c6 00 00 00    	jle    c0021fb1 <SoundChannel::buffer16(short*, int)+0xe9>
c0021eeb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021eef:	bd 00 00 00 38       	mov    ebp,0x38000000
c0021ef4:	83 ec 0c             	sub    esp,0xc
c0021ef7:	0f bf 00             	movsx  eax,WORD PTR [eax]
c0021efa:	50                   	push   eax
c0021efb:	e8 1f 53 00 00       	call   c002721f <__floatsisf>
c0021f00:	59                   	pop    ecx
c0021f01:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021f04:	5f                   	pop    edi
c0021f05:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021f08:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021f0b:	55                   	push   ebp
c0021f0c:	50                   	push   eax
c0021f0d:	e8 1f 4f 00 00       	call   c0026e31 <__mulsf3>
c0021f12:	83 c4 10             	add    esp,0x10
c0021f15:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021f18:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021f1b:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021f1e:	0f 84 99 00 00 00    	je     c0021fbd <SoundChannel::buffer16(short*, int)+0xf5>
c0021f24:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c0021f29:	74 78                	je     c0021fa3 <SoundChannel::buffer16(short*, int)+0xdb>
c0021f2b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021f2f:	83 ec 0c             	sub    esp,0xc
c0021f32:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c0021f36:	50                   	push   eax
c0021f37:	e8 e3 52 00 00       	call   c002721f <__floatsisf>
c0021f3c:	5f                   	pop    edi
c0021f3d:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021f40:	5a                   	pop    edx
c0021f41:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021f44:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021f47:	55                   	push   ebp
c0021f48:	50                   	push   eax
c0021f49:	e8 e3 4e 00 00       	call   c0026e31 <__mulsf3>
c0021f4e:	83 c4 10             	add    esp,0x10
c0021f51:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021f54:	be 02 00 00 00       	mov    esi,0x2
c0021f59:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021f5c:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021f5f:	74 46                	je     c0021fa7 <SoundChannel::buffer16(short*, int)+0xdf>
c0021f61:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0021f65:	eb 36                	jmp    c0021f9d <SoundChannel::buffer16(short*, int)+0xd5>
c0021f67:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021f6b:	83 ec 0c             	sub    esp,0xc
c0021f6e:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c0021f72:	46                   	inc    esi
c0021f73:	50                   	push   eax
c0021f74:	e8 a6 52 00 00       	call   c002721f <__floatsisf>
c0021f79:	5a                   	pop    edx
c0021f7a:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0021f7d:	59                   	pop    ecx
c0021f7e:	8d 4f 01             	lea    ecx,[edi+0x1]
c0021f81:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021f84:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021f88:	50                   	push   eax
c0021f89:	e8 a3 4e 00 00       	call   c0026e31 <__mulsf3>
c0021f8e:	83 c4 10             	add    esp,0x10
c0021f91:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c0021f95:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021f98:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021f9b:	74 0a                	je     c0021fa7 <SoundChannel::buffer16(short*, int)+0xdf>
c0021f9d:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c0021fa1:	75 c4                	jne    c0021f67 <SoundChannel::buffer16(short*, int)+0x9f>
c0021fa3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0021fa7:	83 c4 1c             	add    esp,0x1c
c0021faa:	89 f0                	mov    eax,esi
c0021fac:	5b                   	pop    ebx
c0021fad:	5e                   	pop    esi
c0021fae:	5f                   	pop    edi
c0021faf:	5d                   	pop    ebp
c0021fb0:	c3                   	ret    
c0021fb1:	83 c4 1c             	add    esp,0x1c
c0021fb4:	31 f6                	xor    esi,esi
c0021fb6:	5b                   	pop    ebx
c0021fb7:	89 f0                	mov    eax,esi
c0021fb9:	5e                   	pop    esi
c0021fba:	5f                   	pop    edi
c0021fbb:	5d                   	pop    ebp
c0021fbc:	c3                   	ret    
c0021fbd:	be 01 00 00 00       	mov    esi,0x1
c0021fc2:	eb e3                	jmp    c0021fa7 <SoundChannel::buffer16(short*, int)+0xdf>

c0021fc4 <SoundChannel::buffer8(unsigned char*, int)>:
c0021fc4:	55                   	push   ebp
c0021fc5:	57                   	push   edi
c0021fc6:	56                   	push   esi
c0021fc7:	53                   	push   ebx
c0021fc8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021fcc:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0021fd0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021fd3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021fd7:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021fda:	74 7a                	je     c0022056 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021fdc:	85 ff                	test   edi,edi
c0021fde:	7e 76                	jle    c0022056 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021fe0:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0021fe4:	8d 70 01             	lea    esi,[eax+0x1]
c0021fe7:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021fea:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021fed:	8b 1c 9d e0 fc 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd0320]
c0021ff4:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021ff7:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021ffa:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021ffd:	74 5e                	je     c002205d <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0021fff:	83 ff 01             	cmp    edi,0x1
c0022002:	74 4b                	je     c002204f <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022004:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022008:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c002200b:	8d 70 01             	lea    esi,[eax+0x1]
c002200e:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022011:	8b 1c 9d e0 fc 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd0320]
c0022018:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c002201b:	b8 02 00 00 00       	mov    eax,0x2
c0022020:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022023:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022026:	75 23                	jne    c002204b <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0022028:	eb 27                	jmp    c0022051 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c002202a:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c002202f:	8d 71 01             	lea    esi,[ecx+0x1]
c0022032:	40                   	inc    eax
c0022033:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022036:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0022039:	8b 1c 9d e0 fc 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd0320]
c0022040:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022043:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022046:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022049:	74 06                	je     c0022051 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c002204b:	39 c7                	cmp    edi,eax
c002204d:	75 db                	jne    c002202a <SoundChannel::buffer8(unsigned char*, int)+0x66>
c002204f:	89 f8                	mov    eax,edi
c0022051:	5b                   	pop    ebx
c0022052:	5e                   	pop    esi
c0022053:	5f                   	pop    edi
c0022054:	5d                   	pop    ebp
c0022055:	c3                   	ret    
c0022056:	5b                   	pop    ebx
c0022057:	31 c0                	xor    eax,eax
c0022059:	5e                   	pop    esi
c002205a:	5f                   	pop    edi
c002205b:	5d                   	pop    ebp
c002205c:	c3                   	ret    
c002205d:	b8 01 00 00 00       	mov    eax,0x1
c0022062:	eb ed                	jmp    c0022051 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0022064 <SoundDevice::SoundDevice(char const*)>:
c0022064:	83 ec 1c             	sub    esp,0x1c
c0022067:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002206b:	83 ec 08             	sub    esp,0x8
c002206e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022072:	50                   	push   eax
c0022073:	e8 62 1d ff ff       	call   c0013dda <Device::Device(char const*)>
c0022078:	83 c4 10             	add    esp,0x10
c002207b:	ba 94 c3 02 c0       	mov    edx,0xc002c394
c0022080:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022084:	89 10                	mov    DWORD PTR [eax],edx
c0022086:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002208a:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022094:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022098:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00220a2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00220aa:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00220af:	7f 19                	jg     c00220ca <SoundDevice::SoundDevice(char const*)+0x66>
c00220b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00220b5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00220b9:	83 c2 54             	add    edx,0x54
c00220bc:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c00220c4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00220c8:	eb e0                	jmp    c00220aa <SoundDevice::SoundDevice(char const*)+0x46>
c00220ca:	90                   	nop
c00220cb:	83 c4 1c             	add    esp,0x1c
c00220ce:	c3                   	ret    
c00220cf:	90                   	nop

c00220d0 <SoundDevice::~SoundDevice()>:
c00220d0:	53                   	push   ebx
c00220d1:	83 ec 18             	sub    esp,0x18
c00220d4:	ba 94 c3 02 c0       	mov    edx,0xc002c394
c00220d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00220dd:	89 10                	mov    DWORD PTR [eax],edx
c00220df:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00220e7:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00220ec:	7f 46                	jg     c0022134 <SoundDevice::~SoundDevice()+0x64>
c00220ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00220f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00220f6:	83 c2 54             	add    edx,0x54
c00220f9:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c00220fd:	85 c0                	test   eax,eax
c00220ff:	74 2d                	je     c002212e <SoundDevice::~SoundDevice()+0x5e>
c0022101:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022105:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022109:	83 c2 54             	add    edx,0x54
c002210c:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022110:	85 db                	test   ebx,ebx
c0022112:	74 1a                	je     c002212e <SoundDevice::~SoundDevice()+0x5e>
c0022114:	83 ec 0c             	sub    esp,0xc
c0022117:	53                   	push   ebx
c0022118:	e8 db fc ff ff       	call   c0021df8 <SoundChannel::~SoundChannel()>
c002211d:	83 c4 10             	add    esp,0x10
c0022120:	83 ec 08             	sub    esp,0x8
c0022123:	6a 2c                	push   0x2c
c0022125:	53                   	push   ebx
c0022126:	e8 9a 05 ff ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c002212b:	83 c4 10             	add    esp,0x10
c002212e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022132:	eb b3                	jmp    c00220e7 <SoundDevice::~SoundDevice()+0x17>
c0022134:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022138:	83 ec 0c             	sub    esp,0xc
c002213b:	50                   	push   eax
c002213c:	e8 63 19 ff ff       	call   c0013aa4 <Device::~Device()>
c0022141:	83 c4 10             	add    esp,0x10
c0022144:	90                   	nop
c0022145:	83 c4 18             	add    esp,0x18
c0022148:	5b                   	pop    ebx
c0022149:	c3                   	ret    

c002214a <SoundDevice::~SoundDevice()>:
c002214a:	83 ec 0c             	sub    esp,0xc
c002214d:	83 ec 0c             	sub    esp,0xc
c0022150:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022154:	e8 77 ff ff ff       	call   c00220d0 <SoundDevice::~SoundDevice()>
c0022159:	83 c4 10             	add    esp,0x10
c002215c:	83 ec 08             	sub    esp,0x8
c002215f:	68 e4 01 00 00       	push   0x1e4
c0022164:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022168:	e8 58 05 ff ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c002216d:	83 c4 10             	add    esp,0x10
c0022170:	83 c4 0c             	add    esp,0xc
c0022173:	c3                   	ret    

c0022174 <SoundDevice::getFreeChannelNum()>:
c0022174:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022178:	31 c0                	xor    eax,eax
c002217a:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022182:	74 09                	je     c002218d <SoundDevice::getFreeChannelNum()+0x19>
c0022184:	40                   	inc    eax
c0022185:	83 f8 20             	cmp    eax,0x20
c0022188:	75 f0                	jne    c002217a <SoundDevice::getFreeChannelNum()+0x6>
c002218a:	83 c8 ff             	or     eax,0xffffffff
c002218d:	c3                   	ret    

c002218e <SoundDevice::addChannel(SoundChannel*)>:
c002218e:	56                   	push   esi
c002218f:	53                   	push   ebx
c0022190:	51                   	push   ecx
c0022191:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022195:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022199:	53                   	push   ebx
c002219a:	e8 d5 ff ff ff       	call   c0022174 <SoundDevice::getFreeChannelNum()>
c002219f:	5a                   	pop    edx
c00221a0:	83 f8 ff             	cmp    eax,0xffffffff
c00221a3:	74 51                	je     c00221f6 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00221a5:	85 f6                	test   esi,esi
c00221a7:	74 4d                	je     c00221f6 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00221a9:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c00221b0:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c00221b7:	75 30                	jne    c00221e9 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c00221b9:	83 ec 0c             	sub    esp,0xc
c00221bc:	56                   	push   esi
c00221bd:	e8 52 fc ff ff       	call   c0021e14 <SoundChannel::getSampleRate()>
c00221c2:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c00221c8:	89 34 24             	mov    DWORD PTR [esp],esi
c00221cb:	e8 4c fc ff ff       	call   c0021e1c <SoundChannel::getBits()>
c00221d0:	83 c4 0c             	add    esp,0xc
c00221d3:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00221d9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00221db:	50                   	push   eax
c00221dc:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00221e2:	53                   	push   ebx
c00221e3:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00221e6:	83 c4 10             	add    esp,0x10
c00221e9:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c00221ef:	b8 01 00 00 00       	mov    eax,0x1
c00221f4:	eb 03                	jmp    c00221f9 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c00221f6:	83 c8 ff             	or     eax,0xffffffff
c00221f9:	5a                   	pop    edx
c00221fa:	5b                   	pop    ebx
c00221fb:	5e                   	pop    esi
c00221fc:	c3                   	ret    
c00221fd:	90                   	nop

c00221fe <SoundDevice::removeChannel(int)>:
c00221fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022202:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022206:	83 fa 1f             	cmp    edx,0x1f
c0022209:	77 23                	ja     c002222e <SoundDevice::removeChannel(int)+0x30>
c002220b:	8d 14 90             	lea    edx,[eax+edx*4]
c002220e:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0022215:	74 17                	je     c002222e <SoundDevice::removeChannel(int)+0x30>
c0022217:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022221:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0022227:	75 05                	jne    c002222e <SoundDevice::removeChannel(int)+0x30>
c0022229:	8b 00                	mov    eax,DWORD PTR [eax]
c002222b:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c002222e:	c3                   	ret    
c002222f:	90                   	nop

c0022230 <SoundDevice::floatTo16(float*, short*, int)>:
c0022230:	57                   	push   edi
c0022231:	56                   	push   esi
c0022232:	53                   	push   ebx
c0022233:	31 db                	xor    ebx,ebx
c0022235:	83 ec 10             	sub    esp,0x10
c0022238:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002223c:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022240:	0f 8d d0 00 00 00    	jge    c0022316 <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c0022246:	83 ec 0c             	sub    esp,0xc
c0022249:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002224d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022250:	e8 9a 62 00 00       	call   c00284ef <__extendsfdf2>
c0022255:	83 c4 10             	add    esp,0x10
c0022258:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002225c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022260:	68 00 00 f0 3f       	push   0x3ff00000
c0022265:	6a 00                	push   0x0
c0022267:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002226b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002226f:	e8 07 52 00 00       	call   c002747b <__adddf3>
c0022274:	83 c4 10             	add    esp,0x10
c0022277:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002227b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002227f:	68 00 00 e0 3f       	push   0x3fe00000
c0022284:	6a 00                	push   0x0
c0022286:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002228a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002228e:	e8 65 58 00 00       	call   c0027af8 <__muldf3>
c0022293:	83 c4 10             	add    esp,0x10
c0022296:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002229a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002229e:	68 c0 ff df 40       	push   0x40dfffc0
c00222a3:	6a 00                	push   0x0
c00222a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00222a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00222ad:	e8 46 58 00 00       	call   c0027af8 <__muldf3>
c00222b2:	59                   	pop    ecx
c00222b3:	5f                   	pop    edi
c00222b4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00222b8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00222bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00222c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00222c4:	e8 02 61 00 00       	call   c00283cb <__truncdfsf2>
c00222c9:	5a                   	pop    edx
c00222ca:	89 c7                	mov    edi,eax
c00222cc:	59                   	pop    ecx
c00222cd:	68 00 fe ff 46       	push   0x46fffe00
c00222d2:	50                   	push   eax
c00222d3:	e8 9d 51 00 00       	call   c0027475 <__gesf2>
c00222d8:	83 c4 10             	add    esp,0x10
c00222db:	85 c0                	test   eax,eax
c00222dd:	78 08                	js     c00222e7 <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c00222df:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c00222e5:	eb 29                	jmp    c0022310 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c00222e7:	50                   	push   eax
c00222e8:	50                   	push   eax
c00222e9:	6a 00                	push   0x0
c00222eb:	57                   	push   edi
c00222ec:	e8 88 51 00 00       	call   c0027479 <__lesf2>
c00222f1:	83 c4 10             	add    esp,0x10
c00222f4:	85 c0                	test   eax,eax
c00222f6:	7f 08                	jg     c0022300 <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c00222f8:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c00222fe:	eb 10                	jmp    c0022310 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0022300:	83 ec 0c             	sub    esp,0xc
c0022303:	57                   	push   edi
c0022304:	e8 83 62 00 00       	call   c002858c <lrintf>
c0022309:	83 c4 10             	add    esp,0x10
c002230c:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0022310:	43                   	inc    ebx
c0022311:	e9 26 ff ff ff       	jmp    c002223c <SoundDevice::floatTo16(float*, short*, int)+0xc>
c0022316:	83 c4 10             	add    esp,0x10
c0022319:	5b                   	pop    ebx
c002231a:	5e                   	pop    esi
c002231b:	5f                   	pop    edi
c002231c:	c3                   	ret    
c002231d:	90                   	nop

c002231e <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c002231e:	57                   	push   edi
c002231f:	56                   	push   esi
c0022320:	53                   	push   ebx
c0022321:	31 db                	xor    ebx,ebx
c0022323:	83 ec 10             	sub    esp,0x10
c0022326:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002232a:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c002232e:	0f 8d cb 00 00 00    	jge    c00223ff <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022334:	83 ec 0c             	sub    esp,0xc
c0022337:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002233b:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c002233e:	e8 ac 61 00 00       	call   c00284ef <__extendsfdf2>
c0022343:	83 c4 10             	add    esp,0x10
c0022346:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002234a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002234e:	68 00 00 f0 3f       	push   0x3ff00000
c0022353:	6a 00                	push   0x0
c0022355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022359:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002235d:	e8 19 51 00 00       	call   c002747b <__adddf3>
c0022362:	83 c4 10             	add    esp,0x10
c0022365:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022369:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002236d:	68 00 00 e0 3f       	push   0x3fe00000
c0022372:	6a 00                	push   0x0
c0022374:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002237c:	e8 77 57 00 00       	call   c0027af8 <__muldf3>
c0022381:	83 c4 10             	add    esp,0x10
c0022384:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022388:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002238c:	68 00 00 60 40       	push   0x40600000
c0022391:	6a 00                	push   0x0
c0022393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022397:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002239b:	e8 58 57 00 00       	call   c0027af8 <__muldf3>
c00223a0:	59                   	pop    ecx
c00223a1:	5f                   	pop    edi
c00223a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00223a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00223aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00223ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00223b2:	e8 14 60 00 00       	call   c00283cb <__truncdfsf2>
c00223b7:	5a                   	pop    edx
c00223b8:	89 c7                	mov    edi,eax
c00223ba:	59                   	pop    ecx
c00223bb:	68 00 00 fe 42       	push   0x42fe0000
c00223c0:	50                   	push   eax
c00223c1:	e8 af 50 00 00       	call   c0027475 <__gesf2>
c00223c6:	83 c4 10             	add    esp,0x10
c00223c9:	85 c0                	test   eax,eax
c00223cb:	78 06                	js     c00223d3 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c00223cd:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c00223d1:	eb 26                	jmp    c00223f9 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00223d3:	50                   	push   eax
c00223d4:	50                   	push   eax
c00223d5:	6a 00                	push   0x0
c00223d7:	57                   	push   edi
c00223d8:	e8 9c 50 00 00       	call   c0027479 <__lesf2>
c00223dd:	83 c4 10             	add    esp,0x10
c00223e0:	85 c0                	test   eax,eax
c00223e2:	7f 06                	jg     c00223ea <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c00223e4:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c00223e8:	eb 0f                	jmp    c00223f9 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00223ea:	83 ec 0c             	sub    esp,0xc
c00223ed:	57                   	push   edi
c00223ee:	e8 99 61 00 00       	call   c002858c <lrintf>
c00223f3:	83 c4 10             	add    esp,0x10
c00223f6:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00223f9:	43                   	inc    ebx
c00223fa:	e9 2b ff ff ff       	jmp    c002232a <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c00223ff:	83 c4 10             	add    esp,0x10
c0022402:	5b                   	pop    ebx
c0022403:	5e                   	pop    esi
c0022404:	5f                   	pop    edi
c0022405:	c3                   	ret    

c0022406 <SoundDevice::getAudio(int, float*, float*)>:
c0022406:	55                   	push   ebp
c0022407:	31 ed                	xor    ebp,ebp
c0022409:	57                   	push   edi
c002240a:	56                   	push   esi
c002240b:	31 f6                	xor    esi,esi
c002240d:	53                   	push   ebx
c002240e:	83 ec 20             	sub    esp,0x20
c0022411:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022415:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022419:	c1 e0 02             	shl    eax,0x2
c002241c:	50                   	push   eax
c002241d:	6a 00                	push   0x0
c002241f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022423:	e8 28 e3 fd ff       	call   c0000750 <memset>
c0022428:	83 c4 10             	add    esp,0x10
c002242b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022433:	8b 8c b3 5c 01 00 00 	mov    ecx,DWORD PTR [ebx+esi*4+0x15c]
c002243a:	85 c9                	test   ecx,ecx
c002243c:	74 52                	je     c0022490 <SoundDevice::getAudio(int, float*, float*)+0x8a>
c002243e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0022442:	99                   	cdq    
c0022443:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c0022449:	50                   	push   eax
c002244a:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022450:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0022454:	51                   	push   ecx
c0022455:	e8 da f9 ff ff       	call   c0021e34 <SoundChannel::unbuffer(float*, int, int)>
c002245a:	31 d2                	xor    edx,edx
c002245c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022460:	83 c4 10             	add    esp,0x10
c0022463:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0022467:	7d 1e                	jge    c0022487 <SoundDevice::getAudio(int, float*, float*)+0x81>
c0022469:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c002246d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022471:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0022474:	89 cf                	mov    edi,ecx
c0022476:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c002247c:	0f af ca             	imul   ecx,edx
c002247f:	42                   	inc    edx
c0022480:	01 e9                	add    ecx,ebp
c0022482:	89 3c 88             	mov    DWORD PTR [eax+ecx*4],edi
c0022485:	eb dc                	jmp    c0022463 <SoundDevice::getAudio(int, float*, float*)+0x5d>
c0022487:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c002248b:	45                   	inc    ebp
c002248c:	01 7c 24 0c          	add    DWORD PTR [esp+0xc],edi
c0022490:	46                   	inc    esi
c0022491:	83 fe 20             	cmp    esi,0x20
c0022494:	75 9d                	jne    c0022433 <SoundDevice::getAudio(int, float*, float*)+0x2d>
c0022496:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002249a:	83 c4 1c             	add    esp,0x1c
c002249d:	5b                   	pop    ebx
c002249e:	5e                   	pop    esi
c002249f:	5f                   	pop    edi
c00224a0:	5d                   	pop    ebp
c00224a1:	c3                   	ret    

c00224a2 <PCI::open(int, int, void*)>:
c00224a2:	83 ec 18             	sub    esp,0x18
c00224a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00224a9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00224ad:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00224b3:	8b 10                	mov    edx,DWORD PTR [eax]
c00224b5:	50                   	push   eax
c00224b6:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00224b9:	31 c0                	xor    eax,eax
c00224bb:	83 c4 1c             	add    esp,0x1c
c00224be:	c3                   	ret    
c00224bf:	90                   	nop

c00224c0 <PCI::close(int, int, void*)>:
c00224c0:	31 c0                	xor    eax,eax
c00224c2:	c3                   	ret    
c00224c3:	90                   	nop

c00224c4 <PCI::PCI()>:
c00224c4:	83 ec 0c             	sub    esp,0xc
c00224c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224cb:	83 ec 08             	sub    esp,0x8
c00224ce:	68 c4 c3 02 c0       	push   0xc002c3c4
c00224d3:	50                   	push   eax
c00224d4:	e8 65 0f ff ff       	call   c001343e <Bus::Bus(char const*)>
c00224d9:	83 c4 10             	add    esp,0x10
c00224dc:	ba b0 c4 02 c0       	mov    edx,0xc002c4b0
c00224e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224e5:	89 10                	mov    DWORD PTR [eax],edx
c00224e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224eb:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c00224f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224f9:	a3 e4 00 03 c0       	mov    ds:0xc00300e4,eax
c00224fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022502:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022508:	0f b6 d0             	movzx  edx,al
c002250b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002250f:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002251a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022520:	0f b6 d0             	movzx  edx,al
c0022523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022527:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002252c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022530:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022536:	8d 50 01             	lea    edx,[eax+0x1]
c0022539:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002253d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022543:	0f b6 d0             	movzx  edx,al
c0022546:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002254a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002254e:	83 c9 c0             	or     ecx,0xffffffc0
c0022551:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022555:	90                   	nop
c0022556:	83 c4 0c             	add    esp,0xc
c0022559:	c3                   	ret    

c002255a <PCI::readBAR8(unsigned int, int)>:
c002255a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002255e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022562:	f6 c2 01             	test   dl,0x1
c0022565:	74 07                	je     c002256e <PCI::readBAR8(unsigned int, int)+0x14>
c0022567:	83 e2 fc             	and    edx,0xfffffffc
c002256a:	01 c2                	add    edx,eax
c002256c:	ec                   	in     al,dx
c002256d:	c3                   	ret    
c002256e:	83 e2 f0             	and    edx,0xfffffff0
c0022571:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0022574:	c3                   	ret    
c0022575:	90                   	nop

c0022576 <PCI::readBAR16(unsigned int, int)>:
c0022576:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002257a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002257e:	f6 c2 01             	test   dl,0x1
c0022581:	74 08                	je     c002258b <PCI::readBAR16(unsigned int, int)+0x15>
c0022583:	83 e2 fc             	and    edx,0xfffffffc
c0022586:	01 c2                	add    edx,eax
c0022588:	66 ed                	in     ax,dx
c002258a:	c3                   	ret    
c002258b:	83 e2 f0             	and    edx,0xfffffff0
c002258e:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0022592:	c3                   	ret    
c0022593:	90                   	nop

c0022594 <PCI::readBAR32(unsigned int, int)>:
c0022594:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022598:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002259c:	f6 c2 01             	test   dl,0x1
c002259f:	74 07                	je     c00225a8 <PCI::readBAR32(unsigned int, int)+0x14>
c00225a1:	83 e2 fc             	and    edx,0xfffffffc
c00225a4:	01 c2                	add    edx,eax
c00225a6:	ed                   	in     eax,dx
c00225a7:	c3                   	ret    
c00225a8:	83 e2 f0             	and    edx,0xfffffff0
c00225ab:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c00225ae:	c3                   	ret    
c00225af:	90                   	nop

c00225b0 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c00225b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00225b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00225b8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00225bc:	f6 c2 01             	test   dl,0x1
c00225bf:	74 07                	je     c00225c8 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c00225c1:	83 e2 fc             	and    edx,0xfffffffc
c00225c4:	01 ca                	add    edx,ecx
c00225c6:	ee                   	out    dx,al
c00225c7:	c3                   	ret    
c00225c8:	83 e2 f0             	and    edx,0xfffffff0
c00225cb:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c00225ce:	c3                   	ret    
c00225cf:	90                   	nop

c00225d0 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c00225d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00225d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00225d8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00225dc:	f6 c2 01             	test   dl,0x1
c00225df:	74 08                	je     c00225e9 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c00225e1:	83 e2 fc             	and    edx,0xfffffffc
c00225e4:	01 ca                	add    edx,ecx
c00225e6:	66 ef                	out    dx,ax
c00225e8:	c3                   	ret    
c00225e9:	83 e2 f0             	and    edx,0xfffffff0
c00225ec:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c00225f0:	c3                   	ret    
c00225f1:	90                   	nop

c00225f2 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c00225f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00225f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00225fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00225fe:	f6 c2 01             	test   dl,0x1
c0022601:	74 07                	je     c002260a <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0022603:	83 e2 fc             	and    edx,0xfffffffc
c0022606:	01 ca                	add    edx,ecx
c0022608:	ef                   	out    dx,eax
c0022609:	c3                   	ret    
c002260a:	83 e2 f0             	and    edx,0xfffffff0
c002260d:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0022610:	c3                   	ret    
c0022611:	90                   	nop

c0022612 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022612:	55                   	push   ebp
c0022613:	57                   	push   edi
c0022614:	56                   	push   esi
c0022615:	53                   	push   ebx
c0022616:	83 ec 0c             	sub    esp,0xc
c0022619:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002261d:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0022621:	89 f0                	mov    eax,esi
c0022623:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022627:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002262b:	3c 07                	cmp    al,0x7
c002262d:	76 10                	jbe    c002263f <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c002262f:	83 ec 0c             	sub    esp,0xc
c0022632:	68 cc c3 02 c0       	push   0xc002c3cc
c0022637:	e8 4d 79 ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c002263c:	83 c4 10             	add    esp,0x10
c002263f:	80 fb 0f             	cmp    bl,0xf
c0022642:	76 10                	jbe    c0022654 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0022644:	83 ec 0c             	sub    esp,0xc
c0022647:	68 fc c3 02 c0       	push   0xc002c3fc
c002264c:	e8 38 79 ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c0022651:	83 c4 10             	add    esp,0x10
c0022654:	8d 04 36             	lea    eax,[esi+esi*1]
c0022657:	ba f8 0c 00 00       	mov    edx,0xcf8
c002265c:	83 c8 f0             	or     eax,0xfffffff0
c002265f:	ee                   	out    dx,al
c0022660:	ba fa 0c 00 00       	mov    edx,0xcfa
c0022665:	89 e8                	mov    eax,ebp
c0022667:	ee                   	out    dx,al
c0022668:	83 c4 0c             	add    esp,0xc
c002266b:	89 d8                	mov    eax,ebx
c002266d:	66 81 e7 fc 00       	and    di,0xfc
c0022672:	5b                   	pop    ebx
c0022673:	c1 e0 08             	shl    eax,0x8
c0022676:	5e                   	pop    esi
c0022677:	09 f8                	or     eax,edi
c0022679:	5f                   	pop    edi
c002267a:	66 0d 00 c0          	or     ax,0xc000
c002267e:	5d                   	pop    ebp
c002267f:	c3                   	ret    

c0022680 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022680:	57                   	push   edi
c0022681:	56                   	push   esi
c0022682:	53                   	push   ebx
c0022683:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022687:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002268b:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0022691:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022695:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022699:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002269d:	83 ff 01             	cmp    edi,0x1
c00226a0:	75 3e                	jne    c00226e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c00226a2:	89 de                	mov    esi,ebx
c00226a4:	0f b6 c0             	movzx  eax,al
c00226a7:	81 e6 fc 00 00 00    	and    esi,0xfc
c00226ad:	c1 e0 10             	shl    eax,0x10
c00226b0:	0f b6 c9             	movzx  ecx,cl
c00226b3:	09 f0                	or     eax,esi
c00226b5:	c1 e1 08             	shl    ecx,0x8
c00226b8:	0f b6 d2             	movzx  edx,dl
c00226bb:	09 c8                	or     eax,ecx
c00226bd:	c1 e2 0b             	shl    edx,0xb
c00226c0:	09 d0                	or     eax,edx
c00226c2:	ba f8 0c 00 00       	mov    edx,0xcf8
c00226c7:	0d 00 00 00 80       	or     eax,0x80000000
c00226cc:	ef                   	out    dx,eax
c00226cd:	ba fc 0c 00 00       	mov    edx,0xcfc
c00226d2:	ed                   	in     eax,dx
c00226d3:	83 e3 02             	and    ebx,0x2
c00226d6:	0f b6 cb             	movzx  ecx,bl
c00226d9:	c1 e1 03             	shl    ecx,0x3
c00226dc:	d3 e8                	shr    eax,cl
c00226de:	eb 43                	jmp    c0022723 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00226e0:	83 ff 02             	cmp    edi,0x2
c00226e3:	75 2c                	jne    c0022711 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c00226e5:	83 ec 0c             	sub    esp,0xc
c00226e8:	0f b6 c9             	movzx  ecx,cl
c00226eb:	0f b6 d2             	movzx  edx,dl
c00226ee:	0f b6 fb             	movzx  edi,bl
c00226f1:	0f b6 c0             	movzx  eax,al
c00226f4:	57                   	push   edi
c00226f5:	51                   	push   ecx
c00226f6:	52                   	push   edx
c00226f7:	50                   	push   eax
c00226f8:	56                   	push   esi
c00226f9:	e8 14 ff ff ff       	call   c0022612 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00226fe:	89 c2                	mov    edx,eax
c0022700:	ed                   	in     eax,dx
c0022701:	83 e3 02             	and    ebx,0x2
c0022704:	83 c4 20             	add    esp,0x20
c0022707:	0f b6 cb             	movzx  ecx,bl
c002270a:	c1 e1 03             	shl    ecx,0x3
c002270d:	d3 e8                	shr    eax,cl
c002270f:	eb 12                	jmp    c0022723 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022711:	83 ec 0c             	sub    esp,0xc
c0022714:	68 2c c4 02 c0       	push   0xc002c42c
c0022719:	e8 6b 78 ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c002271e:	83 c4 10             	add    esp,0x10
c0022721:	31 c0                	xor    eax,eax
c0022723:	5b                   	pop    ebx
c0022724:	5e                   	pop    esi
c0022725:	5f                   	pop    edi
c0022726:	c3                   	ret    
c0022727:	90                   	nop

c0022728 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022728:	83 ec 18             	sub    esp,0x18
c002272b:	6a 00                	push   0x0
c002272d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022732:	50                   	push   eax
c0022733:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022738:	50                   	push   eax
c0022739:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002273e:	50                   	push   eax
c002273f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022743:	e8 38 ff ff ff       	call   c0022680 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022748:	83 c4 2c             	add    esp,0x2c
c002274b:	c3                   	ret    

c002274c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c002274c:	83 ec 18             	sub    esp,0x18
c002274f:	6a 0e                	push   0xe
c0022751:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022756:	50                   	push   eax
c0022757:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002275c:	50                   	push   eax
c002275d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022762:	50                   	push   eax
c0022763:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022767:	e8 14 ff ff ff       	call   c0022680 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002276c:	83 c4 2c             	add    esp,0x2c
c002276f:	0f b6 c0             	movzx  eax,al
c0022772:	c3                   	ret    
c0022773:	90                   	nop

c0022774 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022774:	55                   	push   ebp
c0022775:	57                   	push   edi
c0022776:	56                   	push   esi
c0022777:	53                   	push   ebx
c0022778:	83 ec 18             	sub    esp,0x18
c002277b:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0022780:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0022785:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c002278a:	6a 0a                	push   0xa
c002278c:	56                   	push   esi
c002278d:	55                   	push   ebp
c002278e:	57                   	push   edi
c002278f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022793:	e8 e8 fe ff ff       	call   c0022680 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022798:	83 c4 14             	add    esp,0x14
c002279b:	89 c3                	mov    ebx,eax
c002279d:	6a 0a                	push   0xa
c002279f:	0f b6 db             	movzx  ebx,bl
c00227a2:	56                   	push   esi
c00227a3:	55                   	push   ebp
c00227a4:	57                   	push   edi
c00227a5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00227a9:	e8 d2 fe ff ff       	call   c0022680 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00227ae:	83 c4 2c             	add    esp,0x2c
c00227b1:	25 00 ff 00 00       	and    eax,0xff00
c00227b6:	09 d8                	or     eax,ebx
c00227b8:	5b                   	pop    ebx
c00227b9:	5e                   	pop    esi
c00227ba:	5f                   	pop    edi
c00227bb:	5d                   	pop    ebp
c00227bc:	c3                   	ret    
c00227bd:	90                   	nop

c00227be <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00227be:	83 ec 18             	sub    esp,0x18
c00227c1:	6a 08                	push   0x8
c00227c3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00227c8:	50                   	push   eax
c00227c9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00227ce:	50                   	push   eax
c00227cf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00227d4:	50                   	push   eax
c00227d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00227d9:	e8 a2 fe ff ff       	call   c0022680 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00227de:	83 c4 2c             	add    esp,0x2c
c00227e1:	0f b6 c4             	movzx  eax,ah
c00227e4:	c3                   	ret    
c00227e5:	90                   	nop

c00227e6 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c00227e6:	83 ec 18             	sub    esp,0x18
c00227e9:	6a 08                	push   0x8
c00227eb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00227f0:	50                   	push   eax
c00227f1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00227f6:	50                   	push   eax
c00227f7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00227fc:	50                   	push   eax
c00227fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022801:	e8 7a fe ff ff       	call   c0022680 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022806:	83 c4 2c             	add    esp,0x2c
c0022809:	c3                   	ret    

c002280a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c002280a:	83 ec 18             	sub    esp,0x18
c002280d:	6a 3c                	push   0x3c
c002280f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022814:	50                   	push   eax
c0022815:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002281a:	50                   	push   eax
c002281b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022820:	50                   	push   eax
c0022821:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022825:	e8 56 fe ff ff       	call   c0022680 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002282a:	83 c4 2c             	add    esp,0x2c
c002282d:	c3                   	ret    

c002282e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c002282e:	83 ec 18             	sub    esp,0x18
c0022831:	6a 18                	push   0x18
c0022833:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022838:	50                   	push   eax
c0022839:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002283e:	50                   	push   eax
c002283f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022844:	50                   	push   eax
c0022845:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022849:	e8 32 fe ff ff       	call   c0022680 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002284e:	83 c4 2c             	add    esp,0x2c
c0022851:	0f b6 c4             	movzx  eax,ah
c0022854:	c3                   	ret    
c0022855:	90                   	nop

c0022856 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022856:	55                   	push   ebp
c0022857:	57                   	push   edi
c0022858:	56                   	push   esi
c0022859:	53                   	push   ebx
c002285a:	83 ec 28             	sub    esp,0x28
c002285d:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0022861:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0022866:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c002286b:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0022870:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022877:	8d 43 12             	lea    eax,[ebx+0x12]
c002287a:	83 c3 10             	add    ebx,0x10
c002287d:	0f b6 c0             	movzx  eax,al
c0022880:	0f b6 db             	movzx  ebx,bl
c0022883:	50                   	push   eax
c0022884:	51                   	push   ecx
c0022885:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0022889:	57                   	push   edi
c002288a:	55                   	push   ebp
c002288b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002288f:	e8 ec fd ff ff       	call   c0022680 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022894:	83 c4 14             	add    esp,0x14
c0022897:	89 c6                	mov    esi,eax
c0022899:	53                   	push   ebx
c002289a:	c1 e6 10             	shl    esi,0x10
c002289d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00228a1:	51                   	push   ecx
c00228a2:	57                   	push   edi
c00228a3:	55                   	push   ebp
c00228a4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00228a8:	e8 d3 fd ff ff       	call   c0022680 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00228ad:	83 c4 3c             	add    esp,0x3c
c00228b0:	0f b7 c0             	movzx  eax,ax
c00228b3:	5b                   	pop    ebx
c00228b4:	09 f0                	or     eax,esi
c00228b6:	5e                   	pop    esi
c00228b7:	5f                   	pop    edi
c00228b8:	5d                   	pop    ebp
c00228b9:	c3                   	ret    

c00228ba <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00228ba:	55                   	push   ebp
c00228bb:	57                   	push   edi
c00228bc:	56                   	push   esi
c00228bd:	53                   	push   ebx
c00228be:	83 ec 0c             	sub    esp,0xc
c00228c1:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00228c5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00228c9:	89 f5                	mov    ebp,esi
c00228cb:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c00228d1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00228d5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00228d9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00228dd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00228e1:	83 f9 01             	cmp    ecx,0x1
c00228e4:	75 5d                	jne    c0022943 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c00228e6:	0f b6 c8             	movzx  ecx,al
c00228e9:	0f b6 d2             	movzx  edx,dl
c00228ec:	c1 e1 10             	shl    ecx,0x10
c00228ef:	c1 e2 0b             	shl    edx,0xb
c00228f2:	89 f0                	mov    eax,esi
c00228f4:	25 fc 00 00 00       	and    eax,0xfc
c00228f9:	09 c1                	or     ecx,eax
c00228fb:	89 e8                	mov    eax,ebp
c00228fd:	0f b6 c0             	movzx  eax,al
c0022900:	c1 e0 08             	shl    eax,0x8
c0022903:	09 c1                	or     ecx,eax
c0022905:	09 d1                	or     ecx,edx
c0022907:	ba f8 0c 00 00       	mov    edx,0xcf8
c002290c:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022912:	89 c8                	mov    eax,ecx
c0022914:	ef                   	out    dx,eax
c0022915:	ba fc 0c 00 00       	mov    edx,0xcfc
c002291a:	ed                   	in     eax,dx
c002291b:	0f b7 db             	movzx  ebx,bx
c002291e:	83 e6 02             	and    esi,0x2
c0022921:	74 0a                	je     c002292d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0022923:	0f b7 d0             	movzx  edx,ax
c0022926:	c1 e3 10             	shl    ebx,0x10
c0022929:	09 d3                	or     ebx,edx
c002292b:	eb 05                	jmp    c0022932 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c002292d:	66 31 c0             	xor    ax,ax
c0022930:	09 c3                	or     ebx,eax
c0022932:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022937:	89 c8                	mov    eax,ecx
c0022939:	ef                   	out    dx,eax
c002293a:	ba fc 0c 00 00       	mov    edx,0xcfc
c002293f:	89 d8                	mov    eax,ebx
c0022941:	eb 41                	jmp    c0022984 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0022943:	83 f9 02             	cmp    ecx,0x2
c0022946:	75 45                	jne    c002298d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0022948:	83 ec 0c             	sub    esp,0xc
c002294b:	0f b6 d2             	movzx  edx,dl
c002294e:	89 f1                	mov    ecx,esi
c0022950:	0f b6 c0             	movzx  eax,al
c0022953:	0f b6 f1             	movzx  esi,cl
c0022956:	89 e9                	mov    ecx,ebp
c0022958:	56                   	push   esi
c0022959:	0f b6 c9             	movzx  ecx,cl
c002295c:	51                   	push   ecx
c002295d:	52                   	push   edx
c002295e:	50                   	push   eax
c002295f:	57                   	push   edi
c0022960:	e8 ad fc ff ff       	call   c0022612 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022965:	89 c2                	mov    edx,eax
c0022967:	ed                   	in     eax,dx
c0022968:	83 c4 20             	add    esp,0x20
c002296b:	0f b7 db             	movzx  ebx,bx
c002296e:	f6 c2 02             	test   dl,0x2
c0022971:	74 0c                	je     c002297f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0022973:	0f b7 c8             	movzx  ecx,ax
c0022976:	89 d8                	mov    eax,ebx
c0022978:	c1 e0 10             	shl    eax,0x10
c002297b:	09 c8                	or     eax,ecx
c002297d:	eb 05                	jmp    c0022984 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c002297f:	66 31 c0             	xor    ax,ax
c0022982:	09 d8                	or     eax,ebx
c0022984:	ef                   	out    dx,eax
c0022985:	83 c4 0c             	add    esp,0xc
c0022988:	5b                   	pop    ebx
c0022989:	5e                   	pop    esi
c002298a:	5f                   	pop    edi
c002298b:	5d                   	pop    ebp
c002298c:	c3                   	ret    
c002298d:	c7 44 24 20 2c c4 02 c0 	mov    DWORD PTR [esp+0x20],0xc002c42c
c0022995:	83 c4 0c             	add    esp,0xc
c0022998:	5b                   	pop    ebx
c0022999:	5e                   	pop    esi
c002299a:	5f                   	pop    edi
c002299b:	5d                   	pop    ebp
c002299c:	e9 e8 75 ff ff       	jmp    c0019f89 <Krnl::panic(char const*)>
c00229a1:	90                   	nop

c00229a2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c00229a2:	55                   	push   ebp
c00229a3:	57                   	push   edi
c00229a4:	56                   	push   esi
c00229a5:	53                   	push   ebx
c00229a6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00229ac:	80 3d f0 00 03 c0 00 	cmp    BYTE PTR ds:0xc00300f0,0x0
c00229b3:	0f 85 84 00 00 00    	jne    c0022a3d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c00229b9:	83 ec 0c             	sub    esp,0xc
c00229bc:	68 14 01 00 00       	push   0x114
c00229c1:	e8 d3 cb fe ff       	call   c000f599 <malloc>
c00229c6:	83 c4 0c             	add    esp,0xc
c00229c9:	89 c3                	mov    ebx,eax
c00229cb:	ff 35 f0 f2 02 c0    	push   DWORD PTR ds:0xc002f2f0
c00229d1:	68 32 c4 02 c0       	push   0xc002c432
c00229d6:	50                   	push   eax
c00229d7:	e8 20 03 ff ff       	call   c0012cfc <File::File(char const*, Process*)>
c00229dc:	5a                   	pop    edx
c00229dd:	59                   	pop    ecx
c00229de:	6a 01                	push   0x1
c00229e0:	53                   	push   ebx
c00229e1:	e8 7a 03 ff ff       	call   c0012d60 <File::open(FileOpenMode)>
c00229e6:	83 c4 0c             	add    esp,0xc
c00229e9:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c00229ed:	50                   	push   eax
c00229ee:	8d 44 24 28          	lea    eax,[esp+0x28]
c00229f2:	50                   	push   eax
c00229f3:	53                   	push   ebx
c00229f4:	e8 13 06 ff ff       	call   c001300c <File::stat(unsigned long long*, bool*)>
c00229f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00229fd:	40                   	inc    eax
c00229fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0022a01:	e8 93 cb fe ff       	call   c000f599 <malloc>
c0022a06:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022a0a:	a3 ec 00 03 c0       	mov    ds:0xc00300ec,eax
c0022a0f:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0022a13:	5e                   	pop    esi
c0022a14:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022a16:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0022a1a:	51                   	push   ecx
c0022a1b:	50                   	push   eax
c0022a1c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022a20:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022a24:	53                   	push   ebx
c0022a25:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0022a28:	83 c4 14             	add    esp,0x14
c0022a2b:	53                   	push   ebx
c0022a2c:	e8 8d 03 ff ff       	call   c0012dbe <File::close()>
c0022a31:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022a35:	83 c4 10             	add    esp,0x10
c0022a38:	a3 e8 00 03 c0       	mov    ds:0xc00300e8,eax
c0022a3d:	a1 e8 00 03 c0       	mov    eax,ds:0xc00300e8
c0022a42:	8b 15 ec 00 03 c0    	mov    edx,DWORD PTR ds:0xc00300ec
c0022a48:	89 04 24             	mov    DWORD PTR [esp],eax
c0022a4b:	31 ff                	xor    edi,edi
c0022a4d:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0022a55:	31 f6                	xor    esi,esi
c0022a57:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0022a5c:	31 db                	xor    ebx,ebx
c0022a5e:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0022a66:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0022a6b:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0022a72:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0022a76:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0022a7d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0022a81:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0022a84:	0f 8e 6b 01 00 00    	jle    c0022bf5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0022a8a:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0022a8d:	d4 40                	aam    0x40
c0022a8f:	d5 39                	aad    0x39
c0022a91:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0022a95:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0022a99:	d4 40                	aam    0x40
c0022a9b:	d5 39                	aad    0x39
c0022a9d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0022aa1:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0022aa5:	d4 40                	aam    0x40
c0022aa7:	d5 39                	aad    0x39
c0022aa9:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0022aad:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0022ab1:	d4 40                	aam    0x40
c0022ab3:	d5 39                	aad    0x39
c0022ab5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0022ab9:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0022abd:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0022ac1:	3c 56                	cmp    al,0x56
c0022ac3:	74 45                	je     c0022b0a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0022ac5:	d4 40                	aam    0x40
c0022ac7:	d5 39                	aad    0x39
c0022ac9:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022acc:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0022ad0:	0f b6 c9             	movzx  ecx,cl
c0022ad3:	c1 e1 04             	shl    ecx,0x4
c0022ad6:	d4 40                	aam    0x40
c0022ad8:	d5 39                	aad    0x39
c0022ada:	8d 58 d0             	lea    ebx,[eax-0x30]
c0022add:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0022ae1:	0f b6 db             	movzx  ebx,bl
c0022ae4:	09 cb                	or     ebx,ecx
c0022ae6:	c1 e3 04             	shl    ebx,0x4
c0022ae9:	d4 40                	aam    0x40
c0022aeb:	d5 39                	aad    0x39
c0022aed:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022af0:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0022af4:	0f b6 c9             	movzx  ecx,cl
c0022af7:	09 cb                	or     ebx,ecx
c0022af9:	c1 e3 04             	shl    ebx,0x4
c0022afc:	89 d9                	mov    ecx,ebx
c0022afe:	d4 40                	aam    0x40
c0022b00:	d5 39                	aad    0x39
c0022b02:	8d 58 d0             	lea    ebx,[eax-0x30]
c0022b05:	0f b6 db             	movzx  ebx,bl
c0022b08:	09 cb                	or     ebx,ecx
c0022b0a:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0022b0e:	80 f9 44             	cmp    cl,0x44
c0022b11:	74 47                	je     c0022b5a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0022b13:	88 c8                	mov    al,cl
c0022b15:	d4 40                	aam    0x40
c0022b17:	d5 39                	aad    0x39
c0022b19:	83 e8 30             	sub    eax,0x30
c0022b1c:	0f b6 e8             	movzx  ebp,al
c0022b1f:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0022b23:	c1 e5 04             	shl    ebp,0x4
c0022b26:	d4 40                	aam    0x40
c0022b28:	d5 39                	aad    0x39
c0022b2a:	83 e8 30             	sub    eax,0x30
c0022b2d:	0f b6 f0             	movzx  esi,al
c0022b30:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0022b34:	09 ee                	or     esi,ebp
c0022b36:	c1 e6 04             	shl    esi,0x4
c0022b39:	d4 40                	aam    0x40
c0022b3b:	d5 39                	aad    0x39
c0022b3d:	83 e8 30             	sub    eax,0x30
c0022b40:	0f b6 e8             	movzx  ebp,al
c0022b43:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0022b47:	09 ee                	or     esi,ebp
c0022b49:	c1 e6 04             	shl    esi,0x4
c0022b4c:	89 f5                	mov    ebp,esi
c0022b4e:	d4 40                	aam    0x40
c0022b50:	d5 39                	aad    0x39
c0022b52:	83 e8 30             	sub    eax,0x30
c0022b55:	0f b6 f0             	movzx  esi,al
c0022b58:	09 ee                	or     esi,ebp
c0022b5a:	83 c7 10             	add    edi,0x10
c0022b5d:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0022b61:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0022b64:	3c 0a                	cmp    al,0xa
c0022b66:	74 09                	je     c0022b71 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0022b68:	45                   	inc    ebp
c0022b69:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0022b6c:	75 16                	jne    c0022b84 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0022b6e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0022b71:	3c 0a                	cmp    al,0xa
c0022b73:	0f 94 c0             	sete   al
c0022b76:	0f b6 c0             	movzx  eax,al
c0022b79:	01 c7                	add    edi,eax
c0022b7b:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0022b80:	75 0c                	jne    c0022b8e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0022b82:	eb 15                	jmp    c0022b99 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0022b84:	47                   	inc    edi
c0022b85:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0022b88:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0022b8c:	eb d3                	jmp    c0022b61 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0022b8e:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0022b93:	0f 85 e8 fe ff ff    	jne    c0022a81 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022b99:	80 f9 44             	cmp    cl,0x44
c0022b9c:	74 0b                	je     c0022ba9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0022b9e:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0022ba3:	0f 85 d8 fe ff ff    	jne    c0022a81 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022ba9:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0022bad:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0022bb1:	c1 e1 04             	shl    ecx,0x4
c0022bb4:	83 e8 30             	sub    eax,0x30
c0022bb7:	09 c8                	or     eax,ecx
c0022bb9:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0022bbd:	0f 85 be fe ff ff    	jne    c0022a81 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022bc3:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0022bc7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022bcb:	c1 e1 04             	shl    ecx,0x4
c0022bce:	83 e8 30             	sub    eax,0x30
c0022bd1:	09 c8                	or     eax,ecx
c0022bd3:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0022bd7:	0f 85 a4 fe ff ff    	jne    c0022a81 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022bdd:	50                   	push   eax
c0022bde:	50                   	push   eax
c0022bdf:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022be3:	50                   	push   eax
c0022be4:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0022beb:	e8 1c dc fd ff       	call   c000080c <strcpy>
c0022bf0:	83 c4 10             	add    esp,0x10
c0022bf3:	eb 15                	jmp    c0022c0a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0022bf5:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0022bfc:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0022c07:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0022c0a:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0022c11:	81 c4 2c 01 00 00    	add    esp,0x12c
c0022c17:	5b                   	pop    ebx
c0022c18:	5e                   	pop    esi
c0022c19:	5f                   	pop    edi
c0022c1a:	5d                   	pop    ebp
c0022c1b:	c3                   	ret    

c0022c1c <PCI::checkBus(unsigned char)>:
c0022c1c:	56                   	push   esi
c0022c1d:	53                   	push   ebx
c0022c1e:	31 db                	xor    ebx,ebx
c0022c20:	51                   	push   ecx
c0022c21:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022c26:	52                   	push   edx
c0022c27:	53                   	push   ebx
c0022c28:	43                   	inc    ebx
c0022c29:	56                   	push   esi
c0022c2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022c2e:	e8 37 03 00 00       	call   c0022f6a <PCI::checkDevice(unsigned char, unsigned char)>
c0022c33:	83 c4 10             	add    esp,0x10
c0022c36:	83 fb 20             	cmp    ebx,0x20
c0022c39:	75 eb                	jne    c0022c26 <PCI::checkBus(unsigned char)+0xa>
c0022c3b:	58                   	pop    eax
c0022c3c:	5b                   	pop    ebx
c0022c3d:	5e                   	pop    esi
c0022c3e:	c3                   	ret    
c0022c3f:	90                   	nop

c0022c40 <PCI::foundDevice(PCIDeviceInfo)>:
c0022c40:	55                   	push   ebp
c0022c41:	57                   	push   edi
c0022c42:	56                   	push   esi
c0022c43:	53                   	push   ebx
c0022c44:	83 ec 1c             	sub    esp,0x1c
c0022c47:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022c4b:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022c51:	0f 84 52 01 00 00    	je     c0022da9 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022c57:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022c5b:	66 81 f9 06 04       	cmp    cx,0x406
c0022c60:	75 2c                	jne    c0022c8e <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022c62:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022c67:	50                   	push   eax
c0022c68:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022c6d:	50                   	push   eax
c0022c6e:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022c73:	50                   	push   eax
c0022c74:	56                   	push   esi
c0022c75:	e8 b4 fb ff ff       	call   c002282e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022c7a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022c7e:	0f b6 c0             	movzx  eax,al
c0022c81:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022c85:	83 c4 2c             	add    esp,0x2c
c0022c88:	5b                   	pop    ebx
c0022c89:	5e                   	pop    esi
c0022c8a:	5f                   	pop    edi
c0022c8b:	5d                   	pop    ebp
c0022c8c:	eb 8e                	jmp    c0022c1c <PCI::checkBus(unsigned char)>
c0022c8e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022c92:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022c98:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022c9c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022ca0:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022ca4:	88 d3                	mov    bl,dl
c0022ca6:	85 c0                	test   eax,eax
c0022ca8:	74 33                	je     c0022cdd <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022caa:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022cad:	85 d2                	test   edx,edx
c0022caf:	74 28                	je     c0022cd9 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022cb1:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022cb7:	31 ef                	xor    edi,ebp
c0022cb9:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022cbf:	75 18                	jne    c0022cd9 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022cc1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022cc5:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022ccb:	75 0c                	jne    c0022cd9 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022ccd:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022cd3:	0f 84 d0 00 00 00    	je     c0022da9 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022cd9:	8b 00                	mov    eax,DWORD PTR [eax]
c0022cdb:	eb c9                	jmp    c0022ca6 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022cdd:	66 81 f9 01 06       	cmp    cx,0x601
c0022ce2:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022ce6:	75 19                	jne    c0022d01 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022ce8:	83 ec 0c             	sub    esp,0xc
c0022ceb:	68 64 01 00 00       	push   0x164
c0022cf0:	e8 a4 c8 fe ff       	call   c000f599 <malloc>
c0022cf5:	89 c5                	mov    ebp,eax
c0022cf7:	89 04 24             	mov    DWORD PTR [esp],eax
c0022cfa:	e8 85 0e 00 00       	call   c0023b84 <SATABus::SATABus()>
c0022cff:	eb 1e                	jmp    c0022d1f <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022d01:	66 81 f9 01 01       	cmp    cx,0x101
c0022d06:	75 60                	jne    c0022d68 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022d08:	83 ec 0c             	sub    esp,0xc
c0022d0b:	68 70 02 00 00       	push   0x270
c0022d10:	e8 84 c8 fe ff       	call   c000f599 <malloc>
c0022d15:	89 c5                	mov    ebp,eax
c0022d17:	89 04 24             	mov    DWORD PTR [esp],eax
c0022d1a:	e8 0f 03 00 00       	call   c002302e <IDE::IDE()>
c0022d1f:	58                   	pop    eax
c0022d20:	5a                   	pop    edx
c0022d21:	55                   	push   ebp
c0022d22:	56                   	push   esi
c0022d23:	e8 ae 0e ff ff       	call   c0013bd6 <Device::addChild(Device*)>
c0022d28:	83 ec 1c             	sub    esp,0x1c
c0022d2b:	b9 09 00 00 00       	mov    ecx,0x9
c0022d30:	fc                   	cld    
c0022d31:	89 e7                	mov    edi,esp
c0022d33:	89 de                	mov    esi,ebx
c0022d35:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022d37:	55                   	push   ebp
c0022d38:	e8 ab 0d ff ff       	call   c0013ae8 <Device::preOpenPCI(PCIDeviceInfo)>
c0022d3d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022d40:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022d44:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022d4c:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022d54:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022d5c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022d5f:	83 c4 4c             	add    esp,0x4c
c0022d62:	5b                   	pop    ebx
c0022d63:	5e                   	pop    esi
c0022d64:	5f                   	pop    edi
c0022d65:	5d                   	pop    ebp
c0022d66:	ff e0                	jmp    eax
c0022d68:	83 ec 0c             	sub    esp,0xc
c0022d6b:	68 58 01 00 00       	push   0x158
c0022d70:	e8 24 c8 fe ff       	call   c000f599 <malloc>
c0022d75:	89 c5                	mov    ebp,eax
c0022d77:	58                   	pop    eax
c0022d78:	5a                   	pop    edx
c0022d79:	68 4b c4 02 c0       	push   0xc002c44b
c0022d7e:	55                   	push   ebp
c0022d7f:	e8 5c 11 ff ff       	call   c0013ee0 <DriverlessDevice::DriverlessDevice(char const*)>
c0022d84:	59                   	pop    ecx
c0022d85:	5f                   	pop    edi
c0022d86:	55                   	push   ebp
c0022d87:	56                   	push   esi
c0022d88:	e8 49 0e ff ff       	call   c0013bd6 <Device::addChild(Device*)>
c0022d8d:	b9 09 00 00 00       	mov    ecx,0x9
c0022d92:	fc                   	cld    
c0022d93:	89 df                	mov    edi,ebx
c0022d95:	89 de                	mov    esi,ebx
c0022d97:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022d99:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022d9d:	83 c4 2c             	add    esp,0x2c
c0022da0:	5b                   	pop    ebx
c0022da1:	5e                   	pop    esi
c0022da2:	5f                   	pop    edi
c0022da3:	5d                   	pop    ebp
c0022da4:	e9 3f 0d ff ff       	jmp    c0013ae8 <Device::preOpenPCI(PCIDeviceInfo)>
c0022da9:	83 c4 1c             	add    esp,0x1c
c0022dac:	5b                   	pop    ebx
c0022dad:	5e                   	pop    esi
c0022dae:	5f                   	pop    edi
c0022daf:	5d                   	pop    ebp
c0022db0:	c3                   	ret    
c0022db1:	90                   	nop

c0022db2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022db2:	55                   	push   ebp
c0022db3:	57                   	push   edi
c0022db4:	56                   	push   esi
c0022db5:	53                   	push   ebx
c0022db6:	83 ec 68             	sub    esp,0x68
c0022db9:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0022dbd:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0022dc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022dc8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0022dcf:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c0022dd4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022dd8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0022ddf:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0022de4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022de8:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c0022ded:	6a 0c                	push   0xc
c0022def:	57                   	push   edi
c0022df0:	53                   	push   ebx
c0022df1:	56                   	push   esi
c0022df2:	55                   	push   ebp
c0022df3:	e8 88 f8 ff ff       	call   c0022680 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022df8:	83 c4 20             	add    esp,0x20
c0022dfb:	57                   	push   edi
c0022dfc:	53                   	push   ebx
c0022dfd:	56                   	push   esi
c0022dfe:	55                   	push   ebp
c0022dff:	e8 70 f9 ff ff       	call   c0022774 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022e04:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c0022e09:	57                   	push   edi
c0022e0a:	53                   	push   ebx
c0022e0b:	56                   	push   esi
c0022e0c:	55                   	push   ebp
c0022e0d:	e8 f8 f9 ff ff       	call   c002280a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022e12:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0022e16:	83 c4 14             	add    esp,0x14
c0022e19:	6a 3c                	push   0x3c
c0022e1b:	57                   	push   edi
c0022e1c:	53                   	push   ebx
c0022e1d:	56                   	push   esi
c0022e1e:	55                   	push   ebp
c0022e1f:	e8 5c f8 ff ff       	call   c0022680 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e24:	0f b6 c4             	movzx  eax,ah
c0022e27:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0022e2b:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0022e2f:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0022e33:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c0022e38:	83 c4 20             	add    esp,0x20
c0022e3b:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022e41:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022e48:	74 7c                	je     c0022ec6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022e4a:	31 c0                	xor    eax,eax
c0022e4c:	8b 15 c8 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002ddc8
c0022e52:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022e58:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c0022e5e:	7e 66                	jle    c0022ec6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022e60:	8d 14 c2             	lea    edx,[edx+eax*8]
c0022e63:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022e6a:	39 cb                	cmp    ebx,ecx
c0022e6c:	75 55                	jne    c0022ec3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022e6e:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022e75:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0022e79:	75 48                	jne    c0022ec3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022e7b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022e7f:	83 ec 0c             	sub    esp,0xc
c0022e82:	68 65 c4 02 c0       	push   0xc002c465
c0022e87:	e8 11 f9 fe ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0022e8c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022e90:	8b 15 c8 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002ddc8
c0022e96:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0022e9a:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022ea0:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c0022ea8:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c0022eac:	52                   	push   edx
c0022ead:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022eb1:	53                   	push   ebx
c0022eb2:	68 8a c4 02 c0       	push   0xc002c48a
c0022eb7:	e8 e1 f8 fe ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0022ebc:	83 c4 20             	add    esp,0x20
c0022ebf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022ec3:	40                   	inc    eax
c0022ec4:	eb 86                	jmp    c0022e4c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c0022ec6:	31 d2                	xor    edx,edx
c0022ec8:	83 ec 0c             	sub    esp,0xc
c0022ecb:	57                   	push   edi
c0022ecc:	53                   	push   ebx
c0022ecd:	56                   	push   esi
c0022ece:	52                   	push   edx
c0022ecf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0022ed3:	55                   	push   ebp
c0022ed4:	e8 7d f9 ff ff       	call   c0022856 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ed9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022edd:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022ee1:	42                   	inc    edx
c0022ee2:	83 c4 20             	add    esp,0x20
c0022ee5:	83 fa 06             	cmp    edx,0x6
c0022ee8:	75 de                	jne    c0022ec8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c0022eea:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0022eef:	83 ec 0c             	sub    esp,0xc
c0022ef2:	86 e0                	xchg   al,ah
c0022ef4:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0022ef9:	6a 02                	push   0x2
c0022efb:	57                   	push   edi
c0022efc:	53                   	push   ebx
c0022efd:	56                   	push   esi
c0022efe:	55                   	push   ebp
c0022eff:	e8 7c f7 ff ff       	call   c0022680 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022f04:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0022f09:	83 c4 20             	add    esp,0x20
c0022f0c:	57                   	push   edi
c0022f0d:	53                   	push   ebx
c0022f0e:	56                   	push   esi
c0022f0f:	55                   	push   ebp
c0022f10:	e8 a9 f8 ff ff       	call   c00227be <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022f15:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022f19:	57                   	push   edi
c0022f1a:	53                   	push   ebx
c0022f1b:	56                   	push   esi
c0022f1c:	55                   	push   ebp
c0022f1d:	e8 06 f8 ff ff       	call   c0022728 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f22:	b9 09 00 00 00       	mov    ecx,0x9
c0022f27:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0022f2c:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0022f30:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0022f34:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0022f38:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0022f3c:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022f40:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0022f44:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0022f48:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0022f4c:	83 ec 0c             	sub    esp,0xc
c0022f4f:	fc                   	cld    
c0022f50:	89 e7                	mov    edi,esp
c0022f52:	8d 74 24 58          	lea    esi,[esp+0x58]
c0022f56:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022f58:	55                   	push   ebp
c0022f59:	e8 e2 fc ff ff       	call   c0022c40 <PCI::foundDevice(PCIDeviceInfo)>
c0022f5e:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022f64:	5b                   	pop    ebx
c0022f65:	5e                   	pop    esi
c0022f66:	5f                   	pop    edi
c0022f67:	5d                   	pop    ebp
c0022f68:	c3                   	ret    
c0022f69:	90                   	nop

c0022f6a <PCI::checkDevice(unsigned char, unsigned char)>:
c0022f6a:	55                   	push   ebp
c0022f6b:	57                   	push   edi
c0022f6c:	56                   	push   esi
c0022f6d:	53                   	push   ebx
c0022f6e:	83 ec 0c             	sub    esp,0xc
c0022f71:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022f75:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022f7a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022f7f:	6a 00                	push   0x0
c0022f81:	56                   	push   esi
c0022f82:	57                   	push   edi
c0022f83:	55                   	push   ebp
c0022f84:	e8 9f f7 ff ff       	call   c0022728 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f89:	6a 00                	push   0x0
c0022f8b:	56                   	push   esi
c0022f8c:	57                   	push   edi
c0022f8d:	55                   	push   ebp
c0022f8e:	e8 1f fe ff ff       	call   c0022db2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022f93:	83 c4 20             	add    esp,0x20
c0022f96:	6a 00                	push   0x0
c0022f98:	56                   	push   esi
c0022f99:	57                   	push   edi
c0022f9a:	55                   	push   ebp
c0022f9b:	e8 ac f7 ff ff       	call   c002274c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022fa0:	83 c4 10             	add    esp,0x10
c0022fa3:	84 c0                	test   al,al
c0022fa5:	79 27                	jns    c0022fce <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022fa7:	bb 01 00 00 00       	mov    ebx,0x1
c0022fac:	53                   	push   ebx
c0022fad:	56                   	push   esi
c0022fae:	57                   	push   edi
c0022faf:	55                   	push   ebp
c0022fb0:	e8 73 f7 ff ff       	call   c0022728 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022fb5:	83 c4 10             	add    esp,0x10
c0022fb8:	66 40                	inc    ax
c0022fba:	74 0c                	je     c0022fc8 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022fbc:	53                   	push   ebx
c0022fbd:	56                   	push   esi
c0022fbe:	57                   	push   edi
c0022fbf:	55                   	push   ebp
c0022fc0:	e8 ed fd ff ff       	call   c0022db2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022fc5:	83 c4 10             	add    esp,0x10
c0022fc8:	43                   	inc    ebx
c0022fc9:	83 fb 08             	cmp    ebx,0x8
c0022fcc:	75 de                	jne    c0022fac <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022fce:	83 c4 0c             	add    esp,0xc
c0022fd1:	5b                   	pop    ebx
c0022fd2:	5e                   	pop    esi
c0022fd3:	5f                   	pop    edi
c0022fd4:	5d                   	pop    ebp
c0022fd5:	c3                   	ret    

c0022fd6 <PCI::detect()>:
c0022fd6:	56                   	push   esi
c0022fd7:	53                   	push   ebx
c0022fd8:	53                   	push   ebx
c0022fd9:	31 db                	xor    ebx,ebx
c0022fdb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022fdf:	6a 00                	push   0x0
c0022fe1:	6a 00                	push   0x0
c0022fe3:	6a 00                	push   0x0
c0022fe5:	56                   	push   esi
c0022fe6:	e8 61 f7 ff ff       	call   c002274c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022feb:	83 c4 10             	add    esp,0x10
c0022fee:	a8 80                	test   al,0x80
c0022ff0:	75 21                	jne    c0023013 <PCI::detect()+0x3d>
c0022ff2:	51                   	push   ecx
c0022ff3:	51                   	push   ecx
c0022ff4:	6a 00                	push   0x0
c0022ff6:	56                   	push   esi
c0022ff7:	e8 20 fc ff ff       	call   c0022c1c <PCI::checkBus(unsigned char)>
c0022ffc:	83 c4 10             	add    esp,0x10
c0022fff:	eb 24                	jmp    c0023025 <PCI::detect()+0x4f>
c0023001:	52                   	push   edx
c0023002:	52                   	push   edx
c0023003:	53                   	push   ebx
c0023004:	43                   	inc    ebx
c0023005:	56                   	push   esi
c0023006:	e8 11 fc ff ff       	call   c0022c1c <PCI::checkBus(unsigned char)>
c002300b:	83 c4 10             	add    esp,0x10
c002300e:	83 fb 08             	cmp    ebx,0x8
c0023011:	74 12                	je     c0023025 <PCI::detect()+0x4f>
c0023013:	53                   	push   ebx
c0023014:	6a 00                	push   0x0
c0023016:	6a 00                	push   0x0
c0023018:	56                   	push   esi
c0023019:	e8 0a f7 ff ff       	call   c0022728 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002301e:	83 c4 10             	add    esp,0x10
c0023021:	66 40                	inc    ax
c0023023:	74 dc                	je     c0023001 <PCI::detect()+0x2b>
c0023025:	58                   	pop    eax
c0023026:	5b                   	pop    ebx
c0023027:	5e                   	pop    esi
c0023028:	c3                   	ret    
c0023029:	90                   	nop

c002302a <IDE::close(int, int, void*)>:
c002302a:	83 c8 ff             	or     eax,0xffffffff
c002302d:	c3                   	ret    

c002302e <IDE::IDE()>:
c002302e:	83 ec 0c             	sub    esp,0xc
c0023031:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023035:	83 ec 08             	sub    esp,0x8
c0023038:	68 d4 c4 02 c0       	push   0xc002c4d4
c002303d:	50                   	push   eax
c002303e:	e8 41 0f ff ff       	call   c0013f84 <HardDiskController::HardDiskController(char const*)>
c0023043:	83 c4 10             	add    esp,0x10
c0023046:	ba 64 c5 02 c0       	mov    edx,0xc002c564
c002304b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002304f:	89 10                	mov    DWORD PTR [eax],edx
c0023051:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023055:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c002305c:	90                   	nop
c002305d:	83 c4 0c             	add    esp,0xc
c0023060:	c3                   	ret    
c0023061:	90                   	nop

c0023062 <IDE::prepareInterrupt(unsigned char)>:
c0023062:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023067:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002306b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0023073:	c3                   	ret    

c0023074 <selectDrive(unsigned char, unsigned char)>:
c0023074:	c3                   	ret    
c0023075:	90                   	nop

c0023076 <IDE::getBase(unsigned char)>:
c0023076:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c002307b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002307f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0023087:	c3                   	ret    

c0023088 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0023088:	55                   	push   ebp
c0023089:	57                   	push   edi
c002308a:	56                   	push   esi
c002308b:	53                   	push   ebx
c002308c:	83 ec 1c             	sub    esp,0x1c
c002308f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023093:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023097:	8d 4b f8             	lea    ecx,[ebx-0x8]
c002309a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002309e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00230a2:	80 f9 03             	cmp    cl,0x3
c00230a5:	77 51                	ja     c00230f8 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00230a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00230ab:	0f b6 f2             	movzx  esi,dl
c00230ae:	0f b6 db             	movzx  ebx,bl
c00230b1:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00230b4:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c00230b8:	83 ca 80             	or     edx,0xffffff80
c00230bb:	0f b6 d2             	movzx  edx,dl
c00230be:	52                   	push   edx
c00230bf:	6a 0c                	push   0xc
c00230c1:	56                   	push   esi
c00230c2:	57                   	push   edi
c00230c3:	e8 c0 ff ff ff       	call   c0023088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230c8:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c00230cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00230d1:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c00230d5:	ee                   	out    dx,al
c00230d6:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c00230db:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c00230df:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00230e3:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00230e7:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00230ef:	83 c4 2c             	add    esp,0x2c
c00230f2:	5b                   	pop    ebx
c00230f3:	5e                   	pop    esi
c00230f4:	5f                   	pop    edi
c00230f5:	5d                   	pop    ebp
c00230f6:	eb 90                	jmp    c0023088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230f8:	80 fb 07             	cmp    bl,0x7
c00230fb:	77 12                	ja     c002310f <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c00230fd:	0f b6 d2             	movzx  edx,dl
c0023100:	0f b6 db             	movzx  ebx,bl
c0023103:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c002310b:	89 da                	mov    edx,ebx
c002310d:	eb 2f                	jmp    c002313e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002310f:	80 fb 0d             	cmp    bl,0xd
c0023112:	77 13                	ja     c0023127 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0023114:	0f b6 d2             	movzx  edx,dl
c0023117:	0f b6 db             	movzx  ebx,bl
c002311a:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0023121:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0023125:	eb 17                	jmp    c002313e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023127:	80 fb 15             	cmp    bl,0x15
c002312a:	77 13                	ja     c002313f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002312c:	0f b6 d2             	movzx  edx,dl
c002312f:	0f b6 db             	movzx  ebx,bl
c0023132:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c002313a:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002313e:	ee                   	out    dx,al
c002313f:	83 c4 1c             	add    esp,0x1c
c0023142:	5b                   	pop    ebx
c0023143:	5e                   	pop    esi
c0023144:	5f                   	pop    edi
c0023145:	5d                   	pop    ebp
c0023146:	c3                   	ret    
c0023147:	90                   	nop

c0023148 <IDE::read(unsigned char, unsigned char)>:
c0023148:	55                   	push   ebp
c0023149:	57                   	push   edi
c002314a:	56                   	push   esi
c002314b:	53                   	push   ebx
c002314c:	83 ec 1c             	sub    esp,0x1c
c002314f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023153:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023157:	8d 43 f8             	lea    eax,[ebx-0x8]
c002315a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002315e:	3c 03                	cmp    al,0x3
c0023160:	77 43                	ja     c00231a5 <IDE::read(unsigned char, unsigned char)+0x5d>
c0023162:	0f b6 f2             	movzx  esi,dl
c0023165:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023168:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c002316c:	83 c8 80             	or     eax,0xffffff80
c002316f:	0f b6 c0             	movzx  eax,al
c0023172:	50                   	push   eax
c0023173:	6a 0c                	push   0xc
c0023175:	56                   	push   esi
c0023176:	57                   	push   edi
c0023177:	e8 0c ff ff ff       	call   c0023088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002317c:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0023181:	0f b6 c3             	movzx  eax,bl
c0023184:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023188:	ec                   	in     al,dx
c0023189:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002318d:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0023192:	52                   	push   edx
c0023193:	6a 0c                	push   0xc
c0023195:	56                   	push   esi
c0023196:	57                   	push   edi
c0023197:	e8 ec fe ff ff       	call   c0023088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002319c:	83 c4 20             	add    esp,0x20
c002319f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00231a3:	eb 49                	jmp    c00231ee <IDE::read(unsigned char, unsigned char)+0xa6>
c00231a5:	80 fb 07             	cmp    bl,0x7
c00231a8:	77 12                	ja     c00231bc <IDE::read(unsigned char, unsigned char)+0x74>
c00231aa:	0f b6 d2             	movzx  edx,dl
c00231ad:	0f b6 c3             	movzx  eax,bl
c00231b0:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00231b8:	89 c2                	mov    edx,eax
c00231ba:	eb 31                	jmp    c00231ed <IDE::read(unsigned char, unsigned char)+0xa5>
c00231bc:	80 fb 0d             	cmp    bl,0xd
c00231bf:	77 13                	ja     c00231d4 <IDE::read(unsigned char, unsigned char)+0x8c>
c00231c1:	0f b6 d2             	movzx  edx,dl
c00231c4:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00231cb:	0f b6 d3             	movzx  edx,bl
c00231ce:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00231d2:	eb 19                	jmp    c00231ed <IDE::read(unsigned char, unsigned char)+0xa5>
c00231d4:	31 c0                	xor    eax,eax
c00231d6:	80 fb 15             	cmp    bl,0x15
c00231d9:	77 13                	ja     c00231ee <IDE::read(unsigned char, unsigned char)+0xa6>
c00231db:	0f b6 d2             	movzx  edx,dl
c00231de:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00231e6:	0f b6 d3             	movzx  edx,bl
c00231e9:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00231ed:	ec                   	in     al,dx
c00231ee:	83 c4 1c             	add    esp,0x1c
c00231f1:	5b                   	pop    ebx
c00231f2:	5e                   	pop    esi
c00231f3:	5f                   	pop    edi
c00231f4:	5d                   	pop    ebp
c00231f5:	c3                   	ret    

c00231f6 <IDE::waitInterrupt(unsigned char)>:
c00231f6:	55                   	push   ebp
c00231f7:	57                   	push   edi
c00231f8:	56                   	push   esi
c00231f9:	53                   	push   ebx
c00231fa:	31 db                	xor    ebx,ebx
c00231fc:	83 ec 0c             	sub    esp,0xc
c00231ff:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023203:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023208:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023210:	89 e8                	mov    eax,ebp
c0023212:	84 c0                	test   al,al
c0023214:	75 34                	jne    c002324a <IDE::waitInterrupt(unsigned char)+0x54>
c0023216:	52                   	push   edx
c0023217:	6a 0c                	push   0xc
c0023219:	56                   	push   esi
c002321a:	57                   	push   edi
c002321b:	e8 28 ff ff ff       	call   c0023148 <IDE::read(unsigned char, unsigned char)>
c0023220:	83 c4 10             	add    esp,0x10
c0023223:	a8 01                	test   al,0x1
c0023225:	75 2b                	jne    c0023252 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023227:	f6 c3 04             	test   bl,0x4
c002322a:	75 16                	jne    c0023242 <IDE::waitInterrupt(unsigned char)+0x4c>
c002322c:	83 fb 32             	cmp    ebx,0x32
c002322f:	7e 11                	jle    c0023242 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023231:	50                   	push   eax
c0023232:	50                   	push   eax
c0023233:	6a 00                	push   0x0
c0023235:	68 80 96 98 00       	push   0x989680
c002323a:	e8 b6 ab ff ff       	call   c001ddf5 <nanoSleep(unsigned long long)>
c002323f:	83 c4 10             	add    esp,0x10
c0023242:	83 fb 3c             	cmp    ebx,0x3c
c0023245:	74 0b                	je     c0023252 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023247:	43                   	inc    ebx
c0023248:	eb be                	jmp    c0023208 <IDE::waitInterrupt(unsigned char)+0x12>
c002324a:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0023252:	83 c4 0c             	add    esp,0xc
c0023255:	89 e8                	mov    eax,ebp
c0023257:	5b                   	pop    ebx
c0023258:	5e                   	pop    esi
c0023259:	5f                   	pop    edi
c002325a:	5d                   	pop    ebp
c002325b:	c3                   	ret    

c002325c <ideChannel0IRQHandler(regs*, void*)>:
c002325c:	83 ec 10             	sub    esp,0x10
c002325f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023263:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c002326a:	6a 07                	push   0x7
c002326c:	6a 00                	push   0x0
c002326e:	50                   	push   eax
c002326f:	e8 d4 fe ff ff       	call   c0023148 <IDE::read(unsigned char, unsigned char)>
c0023274:	83 c4 1c             	add    esp,0x1c
c0023277:	c3                   	ret    

c0023278 <ideChannel1IRQHandler(regs*, void*)>:
c0023278:	83 ec 10             	sub    esp,0x10
c002327b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002327f:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023286:	6a 07                	push   0x7
c0023288:	6a 01                	push   0x1
c002328a:	50                   	push   eax
c002328b:	e8 b8 fe ff ff       	call   c0023148 <IDE::read(unsigned char, unsigned char)>
c0023290:	83 c4 1c             	add    esp,0x1c
c0023293:	c3                   	ret    

c0023294 <IDE::enableIRQs(unsigned char, bool)>:
c0023294:	57                   	push   edi
c0023295:	56                   	push   esi
c0023296:	be 04 00 00 00       	mov    esi,0x4
c002329b:	53                   	push   ebx
c002329c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00232a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00232a5:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00232aa:	0f 94 c0             	sete   al
c00232ad:	d1 e0                	shl    eax,1
c00232af:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00232b6:	0f b6 c0             	movzx  eax,al
c00232b9:	50                   	push   eax
c00232ba:	6a 0c                	push   0xc
c00232bc:	57                   	push   edi
c00232bd:	53                   	push   ebx
c00232be:	e8 c5 fd ff ff       	call   c0023088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00232c3:	83 c4 10             	add    esp,0x10
c00232c6:	50                   	push   eax
c00232c7:	6a 0c                	push   0xc
c00232c9:	57                   	push   edi
c00232ca:	53                   	push   ebx
c00232cb:	e8 78 fe ff ff       	call   c0023148 <IDE::read(unsigned char, unsigned char)>
c00232d0:	83 c4 10             	add    esp,0x10
c00232d3:	4e                   	dec    esi
c00232d4:	75 f0                	jne    c00232c6 <IDE::enableIRQs(unsigned char, bool)+0x32>
c00232d6:	5b                   	pop    ebx
c00232d7:	5e                   	pop    esi
c00232d8:	5f                   	pop    edi
c00232d9:	c3                   	ret    

c00232da <IDE::open(int, int, void*)>:
c00232da:	55                   	push   ebp
c00232db:	57                   	push   edi
c00232dc:	56                   	push   esi
c00232dd:	53                   	push   ebx
c00232de:	83 ec 1c             	sub    esp,0x1c
c00232e1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00232e5:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00232ee:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c00232f7:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00232fe:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023305:	0f 85 b0 02 00 00    	jne    c00235bb <IDE::open(int, int, void*)+0x2e1>
c002330b:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023311:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023315:	83 e0 7f             	and    eax,0x7f
c0023318:	3c 05                	cmp    al,0x5
c002331a:	74 04                	je     c0023320 <IDE::open(int, int, void*)+0x46>
c002331c:	3c 0f                	cmp    al,0xf
c002331e:	75 32                	jne    c0023352 <IDE::open(int, int, void*)+0x78>
c0023320:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023326:	83 e0 fc             	and    eax,0xfffffffc
c0023329:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023330:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023336:	83 e0 fc             	and    eax,0xfffffffc
c0023339:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023340:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023346:	83 e0 fc             	and    eax,0xfffffffc
c0023349:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023350:	eb 14                	jmp    c0023366 <IDE::open(int, int, void*)+0x8c>
c0023352:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002335c:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023366:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c002336d:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023374:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023378:	89 c6                	mov    esi,eax
c002337a:	bf f8 0c 00 00       	mov    edi,0xcf8
c002337f:	c1 e6 10             	shl    esi,0x10
c0023382:	89 e8                	mov    eax,ebp
c0023384:	89 fa                	mov    edx,edi
c0023386:	c1 e0 0b             	shl    eax,0xb
c0023389:	09 f0                	or     eax,esi
c002338b:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023392:	c1 e6 08             	shl    esi,0x8
c0023395:	09 c6                	or     esi,eax
c0023397:	89 f0                	mov    eax,esi
c0023399:	0d 08 00 00 80       	or     eax,0x80000008
c002339e:	ef                   	out    dx,eax
c002339f:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00233a4:	89 ca                	mov    edx,ecx
c00233a6:	ed                   	in     eax,dx
c00233a7:	c1 e8 10             	shr    eax,0x10
c00233aa:	3d ff ff 00 00       	cmp    eax,0xffff
c00233af:	0f 84 f5 00 00 00    	je     c00234aa <IDE::open(int, int, void*)+0x1d0>
c00233b5:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00233bb:	89 fa                	mov    edx,edi
c00233bd:	89 f0                	mov    eax,esi
c00233bf:	ef                   	out    dx,eax
c00233c0:	b0 fe                	mov    al,0xfe
c00233c2:	89 ca                	mov    edx,ecx
c00233c4:	ee                   	out    dx,al
c00233c5:	89 f0                	mov    eax,esi
c00233c7:	89 fa                	mov    edx,edi
c00233c9:	ef                   	out    dx,eax
c00233ca:	89 ca                	mov    edx,ecx
c00233cc:	ed                   	in     eax,dx
c00233cd:	3c fe                	cmp    al,0xfe
c00233cf:	0f 85 a9 00 00 00    	jne    c002347e <IDE::open(int, int, void*)+0x1a4>
c00233d5:	8b 15 c8 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002ddc8
c00233db:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c00233e2:	74 33                	je     c0023417 <IDE::open(int, int, void*)+0x13d>
c00233e4:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00233ea:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00233ee:	40                   	inc    eax
c00233ef:	83 ec 0c             	sub    esp,0xc
c00233f2:	0f b6 c0             	movzx  eax,al
c00233f5:	50                   	push   eax
c00233f6:	55                   	push   ebp
c00233f7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00233fb:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023401:	51                   	push   ecx
c0023402:	e8 3b 48 ff ff       	call   c0017c42 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023407:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c002340c:	83 c4 1c             	add    esp,0x1c
c002340f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023415:	eb 0a                	jmp    c0023421 <IDE::open(int, int, void*)+0x147>
c0023417:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023421:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023428:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002342f:	c1 e1 10             	shl    ecx,0x10
c0023432:	c1 e0 08             	shl    eax,0x8
c0023435:	bf f8 0c 00 00       	mov    edi,0xcf8
c002343a:	09 c1                	or     ecx,eax
c002343c:	89 fa                	mov    edx,edi
c002343e:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023445:	c1 e0 0b             	shl    eax,0xb
c0023448:	09 c1                	or     ecx,eax
c002344a:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023450:	89 c8                	mov    eax,ecx
c0023452:	ef                   	out    dx,eax
c0023453:	be fc 0c 00 00       	mov    esi,0xcfc
c0023458:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c002345e:	89 f2                	mov    edx,esi
c0023460:	ee                   	out    dx,al
c0023461:	89 c8                	mov    eax,ecx
c0023463:	89 fa                	mov    edx,edi
c0023465:	ef                   	out    dx,eax
c0023466:	89 f2                	mov    edx,esi
c0023468:	ed                   	in     eax,dx
c0023469:	0f b6 c0             	movzx  eax,al
c002346c:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023472:	74 46                	je     c00234ba <IDE::open(int, int, void*)+0x1e0>
c0023474:	83 ec 0c             	sub    esp,0xc
c0023477:	68 ec c4 02 c0       	push   0xc002c4ec
c002347c:	eb 34                	jmp    c00234b2 <IDE::open(int, int, void*)+0x1d8>
c002347e:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023487:	75 17                	jne    c00234a0 <IDE::open(int, int, void*)+0x1c6>
c0023489:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c002348e:	74 07                	je     c0023497 <IDE::open(int, int, void*)+0x1bd>
c0023490:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023495:	75 09                	jne    c00234a0 <IDE::open(int, int, void*)+0x1c6>
c0023497:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002349e:	eb 1a                	jmp    c00234ba <IDE::open(int, int, void*)+0x1e0>
c00234a0:	83 ec 0c             	sub    esp,0xc
c00234a3:	68 f4 c4 02 c0       	push   0xc002c4f4
c00234a8:	eb 08                	jmp    c00234b2 <IDE::open(int, int, void*)+0x1d8>
c00234aa:	83 ec 0c             	sub    esp,0xc
c00234ad:	68 25 c5 02 c0       	push   0xc002c525
c00234b2:	e8 d2 6a ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c00234b7:	83 c4 10             	add    esp,0x10
c00234ba:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00234c1:	79 1a                	jns    c00234dd <IDE::open(int, int, void*)+0x203>
c00234c3:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00234c9:	83 e0 fc             	and    eax,0xfffffffc
c00234cc:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00234d3:	83 c0 08             	add    eax,0x8
c00234d6:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00234dd:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00234e3:	89 c2                	mov    edx,eax
c00234e5:	83 e2 0f             	and    edx,0xf
c00234e8:	66 83 fa 08          	cmp    dx,0x8
c00234ec:	75 0a                	jne    c00234f8 <IDE::open(int, int, void*)+0x21e>
c00234ee:	83 e8 02             	sub    eax,0x2
c00234f1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00234f8:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00234fe:	89 c2                	mov    edx,eax
c0023500:	83 e2 0f             	and    edx,0xf
c0023503:	66 83 fa 08          	cmp    dx,0x8
c0023507:	75 0a                	jne    c0023513 <IDE::open(int, int, void*)+0x239>
c0023509:	83 e8 02             	sub    eax,0x2
c002350c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023513:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c002351a:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023521:	89 d0                	mov    eax,edx
c0023523:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023526:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002352a:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c002352e:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023531:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023536:	0f b6 c9             	movzx  ecx,cl
c0023539:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023540:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023543:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023547:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c002354b:	8d 50 02             	lea    edx,[eax+0x2]
c002354e:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023553:	0f b6 d2             	movzx  edx,dl
c0023556:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c002355c:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002355f:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023563:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023567:	8d 48 03             	lea    ecx,[eax+0x3]
c002356a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002356f:	0f b6 c9             	movzx  ecx,cl
c0023572:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023578:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002357b:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002357f:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023583:	8d 50 04             	lea    edx,[eax+0x4]
c0023586:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c002358c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023591:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023598:	66 85 f6             	test   si,si
c002359b:	74 5b                	je     c00235f8 <IDE::open(int, int, void*)+0x31e>
c002359d:	0f b6 d2             	movzx  edx,dl
c00235a0:	83 c0 05             	add    eax,0x5
c00235a3:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00235a6:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00235aa:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00235ae:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00235b4:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00235b9:	eb 3d                	jmp    c00235f8 <IDE::open(int, int, void*)+0x31e>
c00235bb:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c00235c1:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00235c8:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00235cf:	66 05 06 02          	add    ax,0x206
c00235d3:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00235da:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c00235e1:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00235e8:	66 05 06 02          	add    ax,0x206
c00235ec:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00235f3:	e9 e5 fe ff ff       	jmp    c00234dd <IDE::open(int, int, void*)+0x203>
c00235f8:	50                   	push   eax
c00235f9:	50                   	push   eax
c00235fa:	6a 00                	push   0x0
c00235fc:	53                   	push   ebx
c00235fd:	e8 60 fa ff ff       	call   c0023062 <IDE::prepareInterrupt(unsigned char)>
c0023602:	5a                   	pop    edx
c0023603:	59                   	pop    ecx
c0023604:	6a 01                	push   0x1
c0023606:	53                   	push   ebx
c0023607:	e8 56 fa ff ff       	call   c0023062 <IDE::prepareInterrupt(unsigned char)>
c002360c:	83 c4 0c             	add    esp,0xc
c002360f:	6a 00                	push   0x0
c0023611:	6a 00                	push   0x0
c0023613:	53                   	push   ebx
c0023614:	e8 7b fc ff ff       	call   c0023294 <IDE::enableIRQs(unsigned char, bool)>
c0023619:	83 c4 0c             	add    esp,0xc
c002361c:	6a 00                	push   0x0
c002361e:	6a 01                	push   0x1
c0023620:	53                   	push   ebx
c0023621:	e8 6e fc ff ff       	call   c0023294 <IDE::enableIRQs(unsigned char, bool)>
c0023626:	83 c4 10             	add    esp,0x10
c0023629:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023630:	74 34                	je     c0023666 <IDE::open(int, int, void*)+0x38c>
c0023632:	83 ec 0c             	sub    esp,0xc
c0023635:	53                   	push   ebx
c0023636:	6a 01                	push   0x1
c0023638:	68 5c 32 02 c0       	push   0xc002325c
c002363d:	6a 0e                	push   0xe
c002363f:	53                   	push   ebx
c0023640:	e8 09 05 ff ff       	call   c0013b4e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023645:	83 c4 14             	add    esp,0x14
c0023648:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002364e:	53                   	push   ebx
c002364f:	6a 01                	push   0x1
c0023651:	68 78 32 02 c0       	push   0xc0023278
c0023656:	6a 0f                	push   0xf
c0023658:	53                   	push   ebx
c0023659:	e8 f0 04 ff ff       	call   c0013b4e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002365e:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023664:	eb 38                	jmp    c002369e <IDE::open(int, int, void*)+0x3c4>
c0023666:	83 ec 0c             	sub    esp,0xc
c0023669:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023673:	53                   	push   ebx
c0023674:	6a 00                	push   0x0
c0023676:	68 5c 32 02 c0       	push   0xc002325c
c002367b:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023681:	53                   	push   ebx
c0023682:	e8 c7 04 ff ff       	call   c0013b4e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023687:	83 c4 14             	add    esp,0x14
c002368a:	53                   	push   ebx
c002368b:	6a 00                	push   0x0
c002368d:	68 78 32 02 c0       	push   0xc0023278
c0023692:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023698:	53                   	push   ebx
c0023699:	e8 b0 04 ff ff       	call   c0013b4e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002369e:	8b 03                	mov    eax,DWORD PTR [ebx]
c00236a0:	83 c4 20             	add    esp,0x20
c00236a3:	83 ec 0c             	sub    esp,0xc
c00236a6:	53                   	push   ebx
c00236a7:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00236aa:	83 c4 0c             	add    esp,0xc
c00236ad:	6a 07                	push   0x7
c00236af:	6a 00                	push   0x0
c00236b1:	53                   	push   ebx
c00236b2:	e8 91 fa ff ff       	call   c0023148 <IDE::read(unsigned char, unsigned char)>
c00236b7:	83 c4 0c             	add    esp,0xc
c00236ba:	6a 07                	push   0x7
c00236bc:	6a 01                	push   0x1
c00236be:	53                   	push   ebx
c00236bf:	e8 84 fa ff ff       	call   c0023148 <IDE::read(unsigned char, unsigned char)>
c00236c4:	83 c4 0c             	add    esp,0xc
c00236c7:	6a 01                	push   0x1
c00236c9:	6a 00                	push   0x0
c00236cb:	53                   	push   ebx
c00236cc:	e8 c3 fb ff ff       	call   c0023294 <IDE::enableIRQs(unsigned char, bool)>
c00236d1:	83 c4 0c             	add    esp,0xc
c00236d4:	6a 01                	push   0x1
c00236d6:	6a 01                	push   0x1
c00236d8:	53                   	push   ebx
c00236d9:	e8 b6 fb ff ff       	call   c0023294 <IDE::enableIRQs(unsigned char, bool)>
c00236de:	83 c4 2c             	add    esp,0x2c
c00236e1:	31 c0                	xor    eax,eax
c00236e3:	5b                   	pop    ebx
c00236e4:	5e                   	pop    esi
c00236e5:	5f                   	pop    edi
c00236e6:	5d                   	pop    ebp
c00236e7:	c3                   	ret    

c00236e8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00236e8:	55                   	push   ebp
c00236e9:	57                   	push   edi
c00236ea:	56                   	push   esi
c00236eb:	53                   	push   ebx
c00236ec:	83 ec 1c             	sub    esp,0x1c
c00236ef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00236f3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00236f7:	8d 50 f8             	lea    edx,[eax-0x8]
c00236fa:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00236fe:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023702:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023706:	80 fa 03             	cmp    dl,0x3
c0023709:	77 5d                	ja     c0023768 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c002370b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002370f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023713:	0f b6 db             	movzx  ebx,bl
c0023716:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023719:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c002371d:	83 ca 80             	or     edx,0xffffff80
c0023720:	0f b6 d2             	movzx  edx,dl
c0023723:	52                   	push   edx
c0023724:	6a 0c                	push   0xc
c0023726:	53                   	push   ebx
c0023727:	56                   	push   esi
c0023728:	e8 5b f9 ff ff       	call   c0023088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002372d:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023732:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023736:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002373a:	0f b6 c0             	movzx  eax,al
c002373d:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023741:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023743:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023748:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c002374c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023750:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023754:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002375c:	83 c4 2c             	add    esp,0x2c
c002375f:	5b                   	pop    ebx
c0023760:	5e                   	pop    esi
c0023761:	5f                   	pop    edi
c0023762:	5d                   	pop    ebp
c0023763:	e9 20 f9 ff ff       	jmp    c0023088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023768:	3c 07                	cmp    al,0x7
c002376a:	77 10                	ja     c002377c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c002376c:	0f b6 db             	movzx  ebx,bl
c002376f:	0f b6 d0             	movzx  edx,al
c0023772:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c002377a:	eb 2d                	jmp    c00237a9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002377c:	3c 0d                	cmp    al,0xd
c002377e:	77 13                	ja     c0023793 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023780:	0f b6 db             	movzx  ebx,bl
c0023783:	0f b6 c0             	movzx  eax,al
c0023786:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c002378d:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023791:	eb 16                	jmp    c00237a9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023793:	3c 15                	cmp    al,0x15
c0023795:	77 14                	ja     c00237ab <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023797:	0f b6 db             	movzx  ebx,bl
c002379a:	0f b6 c0             	movzx  eax,al
c002379d:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00237a5:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00237a9:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00237ab:	83 c4 1c             	add    esp,0x1c
c00237ae:	5b                   	pop    ebx
c00237af:	5e                   	pop    esi
c00237b0:	5f                   	pop    edi
c00237b1:	5d                   	pop    ebp
c00237b2:	c3                   	ret    
c00237b3:	90                   	nop

c00237b4 <IDE::detect()>:
c00237b4:	55                   	push   ebp
c00237b5:	57                   	push   edi
c00237b6:	56                   	push   esi
c00237b7:	53                   	push   ebx
c00237b8:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00237be:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00237c5:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00237cc:	0f 85 9d 02 00 00    	jne    c0023a6f <IDE::detect()+0x2bb>
c00237d2:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00237d9:	31 f6                	xor    esi,esi
c00237db:	31 ed                	xor    ebp,ebp
c00237dd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00237e5:	89 e8                	mov    eax,ebp
c00237e7:	c1 e0 06             	shl    eax,0x6
c00237ea:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00237f2:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00237f6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00237fa:	c1 e0 04             	shl    eax,0x4
c00237fd:	83 c8 a0             	or     eax,0xffffffa0
c0023800:	0f b6 c0             	movzx  eax,al
c0023803:	50                   	push   eax
c0023804:	6a 06                	push   0x6
c0023806:	56                   	push   esi
c0023807:	53                   	push   ebx
c0023808:	e8 7b f8 ff ff       	call   c0023088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002380d:	83 c4 0c             	add    esp,0xc
c0023810:	6a 0c                	push   0xc
c0023812:	56                   	push   esi
c0023813:	53                   	push   ebx
c0023814:	e8 2f f9 ff ff       	call   c0023148 <IDE::read(unsigned char, unsigned char)>
c0023819:	83 c4 0c             	add    esp,0xc
c002381c:	6a 0c                	push   0xc
c002381e:	56                   	push   esi
c002381f:	53                   	push   ebx
c0023820:	e8 23 f9 ff ff       	call   c0023148 <IDE::read(unsigned char, unsigned char)>
c0023825:	83 c4 0c             	add    esp,0xc
c0023828:	6a 0c                	push   0xc
c002382a:	56                   	push   esi
c002382b:	53                   	push   ebx
c002382c:	e8 17 f9 ff ff       	call   c0023148 <IDE::read(unsigned char, unsigned char)>
c0023831:	83 c4 0c             	add    esp,0xc
c0023834:	6a 0c                	push   0xc
c0023836:	56                   	push   esi
c0023837:	53                   	push   ebx
c0023838:	e8 0b f9 ff ff       	call   c0023148 <IDE::read(unsigned char, unsigned char)>
c002383d:	68 ec 00 00 00       	push   0xec
c0023842:	6a 07                	push   0x7
c0023844:	56                   	push   esi
c0023845:	53                   	push   ebx
c0023846:	e8 3d f8 ff ff       	call   c0023088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002384b:	83 c4 1c             	add    esp,0x1c
c002384e:	6a 0c                	push   0xc
c0023850:	56                   	push   esi
c0023851:	53                   	push   ebx
c0023852:	e8 f1 f8 ff ff       	call   c0023148 <IDE::read(unsigned char, unsigned char)>
c0023857:	83 c4 0c             	add    esp,0xc
c002385a:	6a 0c                	push   0xc
c002385c:	56                   	push   esi
c002385d:	53                   	push   ebx
c002385e:	e8 e5 f8 ff ff       	call   c0023148 <IDE::read(unsigned char, unsigned char)>
c0023863:	83 c4 0c             	add    esp,0xc
c0023866:	6a 0c                	push   0xc
c0023868:	56                   	push   esi
c0023869:	53                   	push   ebx
c002386a:	e8 d9 f8 ff ff       	call   c0023148 <IDE::read(unsigned char, unsigned char)>
c002386f:	83 c4 0c             	add    esp,0xc
c0023872:	6a 0c                	push   0xc
c0023874:	56                   	push   esi
c0023875:	53                   	push   ebx
c0023876:	e8 cd f8 ff ff       	call   c0023148 <IDE::read(unsigned char, unsigned char)>
c002387b:	83 c4 0c             	add    esp,0xc
c002387e:	6a 0c                	push   0xc
c0023880:	56                   	push   esi
c0023881:	53                   	push   ebx
c0023882:	e8 c1 f8 ff ff       	call   c0023148 <IDE::read(unsigned char, unsigned char)>
c0023887:	83 c4 10             	add    esp,0x10
c002388a:	84 c0                	test   al,al
c002388c:	0f 84 63 01 00 00    	je     c00239f5 <IDE::detect()+0x241>
c0023892:	31 ff                	xor    edi,edi
c0023894:	50                   	push   eax
c0023895:	6a 0c                	push   0xc
c0023897:	56                   	push   esi
c0023898:	53                   	push   ebx
c0023899:	e8 aa f8 ff ff       	call   c0023148 <IDE::read(unsigned char, unsigned char)>
c002389e:	83 c4 10             	add    esp,0x10
c00238a1:	a8 01                	test   al,0x1
c00238a3:	0f 85 6d 01 00 00    	jne    c0023a16 <IDE::detect()+0x262>
c00238a9:	84 c0                	test   al,al
c00238ab:	78 04                	js     c00238b1 <IDE::detect()+0xfd>
c00238ad:	a8 08                	test   al,0x8
c00238af:	75 27                	jne    c00238d8 <IDE::detect()+0x124>
c00238b1:	47                   	inc    edi
c00238b2:	81 ff 17 01 00 00    	cmp    edi,0x117
c00238b8:	7e da                	jle    c0023894 <IDE::detect()+0xe0>
c00238ba:	50                   	push   eax
c00238bb:	50                   	push   eax
c00238bc:	6a 00                	push   0x0
c00238be:	68 40 4b 4c 00       	push   0x4c4b40
c00238c3:	e8 2d a5 ff ff       	call   c001ddf5 <nanoSleep(unsigned long long)>
c00238c8:	83 c4 10             	add    esp,0x10
c00238cb:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00238d1:	75 c1                	jne    c0023894 <IDE::detect()+0xe0>
c00238d3:	e9 3e 01 00 00       	jmp    c0023a16 <IDE::detect()+0x262>
c00238d8:	31 c9                	xor    ecx,ecx
c00238da:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00238de:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00238e2:	83 ec 0c             	sub    esp,0xc
c00238e5:	68 80 00 00 00       	push   0x80
c00238ea:	57                   	push   edi
c00238eb:	6a 00                	push   0x0
c00238ed:	56                   	push   esi
c00238ee:	53                   	push   ebx
c00238ef:	e8 f4 fd ff ff       	call   c00236e8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00238f4:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00238f9:	89 e8                	mov    eax,ebp
c00238fb:	89 d1                	mov    ecx,edx
c00238fd:	c1 e0 06             	shl    eax,0x6
c0023900:	01 d8                	add    eax,ebx
c0023902:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0023909:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0023910:	89 f2                	mov    edx,esi
c0023912:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0023918:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002391c:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023922:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023926:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002392d:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023935:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002393c:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0023944:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002394a:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0023951:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0023957:	8d 54 24 58          	lea    edx,[esp+0x58]
c002395b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002395f:	83 c4 20             	add    esp,0x20
c0023962:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023965:	83 c0 02             	add    eax,0x2
c0023968:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002396e:	83 c7 02             	add    edi,0x2
c0023971:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023974:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002397a:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002397e:	75 e2                	jne    c0023962 <IDE::detect()+0x1ae>
c0023980:	89 e8                	mov    eax,ebp
c0023982:	c1 e0 06             	shl    eax,0x6
c0023985:	01 d8                	add    eax,ebx
c0023987:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c002398d:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0023994:	66 c1 ea 09          	shr    dx,0x9
c0023998:	83 e2 01             	and    edx,0x1
c002399b:	84 c9                	test   cl,cl
c002399d:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00239a3:	75 22                	jne    c00239c7 <IDE::detect()+0x213>
c00239a5:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c00239ac:	74 46                	je     c00239f4 <IDE::detect()+0x240>
c00239ae:	83 ec 0c             	sub    esp,0xc
c00239b1:	68 7c 01 00 00       	push   0x17c
c00239b6:	e8 de bb fe ff       	call   c000f599 <malloc>
c00239bb:	89 c7                	mov    edi,eax
c00239bd:	89 04 24             	mov    DWORD PTR [esp],eax
c00239c0:	e8 15 05 00 00       	call   c0023eda <ATA::ATA()>
c00239c5:	eb 17                	jmp    c00239de <IDE::detect()+0x22a>
c00239c7:	83 ec 0c             	sub    esp,0xc
c00239ca:	68 80 01 00 00       	push   0x180
c00239cf:	e8 c5 bb fe ff       	call   c000f599 <malloc>
c00239d4:	89 c7                	mov    edi,eax
c00239d6:	89 04 24             	mov    DWORD PTR [esp],eax
c00239d9:	e8 88 0b 00 00       	call   c0024566 <ATAPI::ATAPI()>
c00239de:	5a                   	pop    edx
c00239df:	59                   	pop    ecx
c00239e0:	57                   	push   edi
c00239e1:	53                   	push   ebx
c00239e2:	e8 ef 01 ff ff       	call   c0013bd6 <Device::addChild(Device*)>
c00239e7:	8b 07                	mov    eax,DWORD PTR [edi]
c00239e9:	53                   	push   ebx
c00239ea:	55                   	push   ebp
c00239eb:	6a 00                	push   0x0
c00239ed:	57                   	push   edi
c00239ee:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00239f1:	83 c4 20             	add    esp,0x20
c00239f4:	45                   	inc    ebp
c00239f5:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00239fa:	74 0d                	je     c0023a09 <IDE::detect()+0x255>
c00239fc:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0023a04:	e9 dc fd ff ff       	jmp    c00237e5 <IDE::detect()+0x31>
c0023a09:	4e                   	dec    esi
c0023a0a:	74 63                	je     c0023a6f <IDE::detect()+0x2bb>
c0023a0c:	be 01 00 00 00       	mov    esi,0x1
c0023a11:	e9 c7 fd ff ff       	jmp    c00237dd <IDE::detect()+0x29>
c0023a16:	50                   	push   eax
c0023a17:	6a 04                	push   0x4
c0023a19:	56                   	push   esi
c0023a1a:	53                   	push   ebx
c0023a1b:	e8 28 f7 ff ff       	call   c0023148 <IDE::read(unsigned char, unsigned char)>
c0023a20:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023a24:	83 c4 0c             	add    esp,0xc
c0023a27:	6a 05                	push   0x5
c0023a29:	56                   	push   esi
c0023a2a:	53                   	push   ebx
c0023a2b:	e8 18 f7 ff ff       	call   c0023148 <IDE::read(unsigned char, unsigned char)>
c0023a30:	83 c4 10             	add    esp,0x10
c0023a33:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023a37:	80 fa 14             	cmp    dl,0x14
c0023a3a:	75 04                	jne    c0023a40 <IDE::detect()+0x28c>
c0023a3c:	3c eb                	cmp    al,0xeb
c0023a3e:	eb 07                	jmp    c0023a47 <IDE::detect()+0x293>
c0023a40:	3c 96                	cmp    al,0x96
c0023a42:	75 b1                	jne    c00239f5 <IDE::detect()+0x241>
c0023a44:	80 fa 69             	cmp    dl,0x69
c0023a47:	75 ac                	jne    c00239f5 <IDE::detect()+0x241>
c0023a49:	68 a1 00 00 00       	push   0xa1
c0023a4e:	6a 07                	push   0x7
c0023a50:	56                   	push   esi
c0023a51:	53                   	push   ebx
c0023a52:	e8 31 f6 ff ff       	call   c0023088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a57:	5f                   	pop    edi
c0023a58:	58                   	pop    eax
c0023a59:	6a 00                	push   0x0
c0023a5b:	68 40 42 0f 00       	push   0xf4240
c0023a60:	e8 90 a3 ff ff       	call   c001ddf5 <nanoSleep(unsigned long long)>
c0023a65:	83 c4 10             	add    esp,0x10
c0023a68:	b1 01                	mov    cl,0x1
c0023a6a:	e9 6b fe ff ff       	jmp    c00238da <IDE::detect()+0x126>
c0023a6f:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023a75:	5b                   	pop    ebx
c0023a76:	5e                   	pop    esi
c0023a77:	5f                   	pop    edi
c0023a78:	5d                   	pop    ebp
c0023a79:	c3                   	ret    

c0023a7a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023a7a:	55                   	push   ebp
c0023a7b:	57                   	push   edi
c0023a7c:	56                   	push   esi
c0023a7d:	53                   	push   ebx
c0023a7e:	83 ec 1c             	sub    esp,0x1c
c0023a81:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023a85:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023a89:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023a8d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023a91:	88 c3                	mov    bl,al
c0023a93:	84 c0                	test   al,al
c0023a95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023a99:	0f 84 81 00 00 00    	je     c0023b20 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023a9f:	83 ec 0c             	sub    esp,0xc
c0023aa2:	68 4f c5 02 c0       	push   0xc002c54f
c0023aa7:	e8 f1 ec fe ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0023aac:	83 c4 10             	add    esp,0x10
c0023aaf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023ab3:	3c 01                	cmp    al,0x1
c0023ab5:	74 63                	je     c0023b1a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0023ab7:	3c 02                	cmp    al,0x2
c0023ab9:	75 53                	jne    c0023b0e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0023abb:	d1 e6                	shl    esi,1
c0023abd:	09 ee                	or     esi,ebp
c0023abf:	50                   	push   eax
c0023ac0:	89 f0                	mov    eax,esi
c0023ac2:	6a 01                	push   0x1
c0023ac4:	0f b6 f0             	movzx  esi,al
c0023ac7:	c1 e6 06             	shl    esi,0x6
c0023aca:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023ad2:	50                   	push   eax
c0023ad3:	57                   	push   edi
c0023ad4:	e8 6f f6 ff ff       	call   c0023148 <IDE::read(unsigned char, unsigned char)>
c0023ad9:	83 c4 10             	add    esp,0x10
c0023adc:	a8 01                	test   al,0x1
c0023ade:	74 02                	je     c0023ae2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0023ae0:	b3 07                	mov    bl,0x7
c0023ae2:	a8 02                	test   al,0x2
c0023ae4:	74 02                	je     c0023ae8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0023ae6:	b3 03                	mov    bl,0x3
c0023ae8:	a8 04                	test   al,0x4
c0023aea:	74 02                	je     c0023aee <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0023aec:	b3 14                	mov    bl,0x14
c0023aee:	a8 08                	test   al,0x8
c0023af0:	74 02                	je     c0023af4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0023af2:	b3 03                	mov    bl,0x3
c0023af4:	a8 10                	test   al,0x10
c0023af6:	74 02                	je     c0023afa <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0023af8:	b3 15                	mov    bl,0x15
c0023afa:	a8 20                	test   al,0x20
c0023afc:	74 02                	je     c0023b00 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0023afe:	b3 03                	mov    bl,0x3
c0023b00:	a8 40                	test   al,0x40
c0023b02:	74 02                	je     c0023b06 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0023b04:	b3 16                	mov    bl,0x16
c0023b06:	84 c0                	test   al,al
c0023b08:	79 16                	jns    c0023b20 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023b0a:	b3 0d                	mov    bl,0xd
c0023b0c:	eb 12                	jmp    c0023b20 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023b0e:	3c 03                	cmp    al,0x3
c0023b10:	74 0c                	je     c0023b1e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0023b12:	3c 04                	cmp    al,0x4
c0023b14:	75 0a                	jne    c0023b20 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023b16:	b3 08                	mov    bl,0x8
c0023b18:	eb 06                	jmp    c0023b20 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023b1a:	b3 13                	mov    bl,0x13
c0023b1c:	eb 02                	jmp    c0023b20 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023b1e:	b3 17                	mov    bl,0x17
c0023b20:	83 c4 1c             	add    esp,0x1c
c0023b23:	88 d8                	mov    al,bl
c0023b25:	5b                   	pop    ebx
c0023b26:	5e                   	pop    esi
c0023b27:	5f                   	pop    edi
c0023b28:	5d                   	pop    ebp
c0023b29:	c3                   	ret    

c0023b2a <IDE::polling(unsigned char, unsigned int)>:
c0023b2a:	57                   	push   edi
c0023b2b:	56                   	push   esi
c0023b2c:	53                   	push   ebx
c0023b2d:	bb 04 00 00 00       	mov    ebx,0x4
c0023b32:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023b36:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023b3b:	52                   	push   edx
c0023b3c:	6a 0c                	push   0xc
c0023b3e:	56                   	push   esi
c0023b3f:	57                   	push   edi
c0023b40:	e8 03 f6 ff ff       	call   c0023148 <IDE::read(unsigned char, unsigned char)>
c0023b45:	83 c4 10             	add    esp,0x10
c0023b48:	4b                   	dec    ebx
c0023b49:	75 f0                	jne    c0023b3b <IDE::polling(unsigned char, unsigned int)+0x11>
c0023b4b:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023b50:	50                   	push   eax
c0023b51:	6a 0c                	push   0xc
c0023b53:	56                   	push   esi
c0023b54:	57                   	push   edi
c0023b55:	e8 ee f5 ff ff       	call   c0023148 <IDE::read(unsigned char, unsigned char)>
c0023b5a:	83 c4 10             	add    esp,0x10
c0023b5d:	a8 01                	test   al,0x1
c0023b5f:	75 17                	jne    c0023b78 <IDE::polling(unsigned char, unsigned int)+0x4e>
c0023b61:	a8 20                	test   al,0x20
c0023b63:	75 0f                	jne    c0023b74 <IDE::polling(unsigned char, unsigned int)+0x4a>
c0023b65:	4b                   	dec    ebx
c0023b66:	74 10                	je     c0023b78 <IDE::polling(unsigned char, unsigned int)+0x4e>
c0023b68:	84 c0                	test   al,al
c0023b6a:	78 e4                	js     c0023b50 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023b6c:	a8 08                	test   al,0x8
c0023b6e:	74 e0                	je     c0023b50 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023b70:	31 c0                	xor    eax,eax
c0023b72:	eb 06                	jmp    c0023b7a <IDE::polling(unsigned char, unsigned int)+0x50>
c0023b74:	b0 01                	mov    al,0x1
c0023b76:	eb 02                	jmp    c0023b7a <IDE::polling(unsigned char, unsigned int)+0x50>
c0023b78:	b0 02                	mov    al,0x2
c0023b7a:	5b                   	pop    ebx
c0023b7b:	5e                   	pop    esi
c0023b7c:	5f                   	pop    edi
c0023b7d:	c3                   	ret    

c0023b7e <SATABus::close(int, int, void*)>:
c0023b7e:	31 c0                	xor    eax,eax
c0023b80:	c3                   	ret    
c0023b81:	90                   	nop

c0023b82 <SATABus::detect()>:
c0023b82:	c3                   	ret    
c0023b83:	90                   	nop

c0023b84 <SATABus::SATABus()>:
c0023b84:	83 ec 0c             	sub    esp,0xc
c0023b87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b8b:	83 ec 08             	sub    esp,0x8
c0023b8e:	68 88 c5 02 c0       	push   0xc002c588
c0023b93:	50                   	push   eax
c0023b94:	e8 eb 03 ff ff       	call   c0013f84 <HardDiskController::HardDiskController(char const*)>
c0023b99:	83 c4 10             	add    esp,0x10
c0023b9c:	ba dc c5 02 c0       	mov    edx,0xc002c5dc
c0023ba1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ba5:	89 10                	mov    DWORD PTR [eax],edx
c0023ba7:	83 ec 0c             	sub    esp,0xc
c0023baa:	6a 50                	push   0x50
c0023bac:	e8 dc be fe ff       	call   c000fa8d <Phys::allocateContiguousPages(int)>
c0023bb1:	83 c4 10             	add    esp,0x10
c0023bb4:	89 c2                	mov    edx,eax
c0023bb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bba:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023bc0:	83 ec 0c             	sub    esp,0xc
c0023bc3:	6a 50                	push   0x50
c0023bc5:	e8 55 d6 fe ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0023bca:	83 c4 10             	add    esp,0x10
c0023bcd:	89 c2                	mov    edx,eax
c0023bcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bd3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023bd9:	a1 30 df 02 c0       	mov    eax,ds:0xc002df30
c0023bde:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023be2:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023be8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023bec:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023bf2:	83 ec 0c             	sub    esp,0xc
c0023bf5:	6a 03                	push   0x3
c0023bf7:	6a 50                	push   0x50
c0023bf9:	51                   	push   ecx
c0023bfa:	52                   	push   edx
c0023bfb:	50                   	push   eax
c0023bfc:	e8 67 e1 fe ff       	call   c0011d68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023c01:	83 c4 20             	add    esp,0x20
c0023c04:	90                   	nop
c0023c05:	83 c4 0c             	add    esp,0xc
c0023c08:	c3                   	ret    
c0023c09:	90                   	nop

c0023c0a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023c0a:	83 ec 0c             	sub    esp,0xc
c0023c0d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023c11:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023c14:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023c17:	09 c2                	or     edx,eax
c0023c19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c1d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023c23:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023c25:	31 c0                	xor    eax,eax
c0023c27:	c1 e9 08             	shr    ecx,0x8
c0023c2a:	83 e1 0f             	and    ecx,0xf
c0023c2d:	39 c8                	cmp    eax,ecx
c0023c2f:	74 0a                	je     c0023c3b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023c31:	f6 c2 01             	test   dl,0x1
c0023c34:	74 18                	je     c0023c4e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023c36:	d1 ea                	shr    edx,1
c0023c38:	40                   	inc    eax
c0023c39:	eb f2                	jmp    c0023c2d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023c3b:	83 ec 0c             	sub    esp,0xc
c0023c3e:	68 ac c5 02 c0       	push   0xc002c5ac
c0023c43:	e8 41 63 ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c0023c48:	83 c4 10             	add    esp,0x10
c0023c4b:	83 c8 ff             	or     eax,0xffffffff
c0023c4e:	83 c4 0c             	add    esp,0xc
c0023c51:	c3                   	ret    

c0023c52 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023c52:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023c56:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023c59:	89 c2                	mov    edx,eax
c0023c5b:	c1 ea 08             	shr    edx,0x8
c0023c5e:	83 e2 0f             	and    edx,0xf
c0023c61:	fe ca                	dec    dl
c0023c63:	75 31                	jne    c0023c96 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023c65:	83 e0 0f             	and    eax,0xf
c0023c68:	3c 03                	cmp    al,0x3
c0023c6a:	75 2a                	jne    c0023c96 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023c6c:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023c6f:	b8 02 00 00 00       	mov    eax,0x2
c0023c74:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023c7a:	74 1c                	je     c0023c98 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023c7c:	b8 04 00 00 00       	mov    eax,0x4
c0023c81:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023c87:	74 0f                	je     c0023c98 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023c89:	31 c0                	xor    eax,eax
c0023c8b:	83 fa 03             	cmp    edx,0x3
c0023c8e:	0f 94 c0             	sete   al
c0023c91:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023c95:	c3                   	ret    
c0023c96:	31 c0                	xor    eax,eax
c0023c98:	c3                   	ret    
c0023c99:	90                   	nop

c0023c9a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023c9a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023c9e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023ca1:	0f ba e2 0f          	bt     edx,0xf
c0023ca5:	72 f7                	jb     c0023c9e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023ca7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023caa:	83 ca 10             	or     edx,0x10
c0023cad:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023cb0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023cb3:	83 ca 01             	or     edx,0x1
c0023cb6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023cb9:	c3                   	ret    

c0023cba <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023cba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023cbe:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023cc1:	83 e2 fe             	and    edx,0xfffffffe
c0023cc4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023cc7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023cca:	83 e2 ef             	and    edx,0xffffffef
c0023ccd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023cd0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023cd3:	0f ba e2 0e          	bt     edx,0xe
c0023cd7:	72 f7                	jb     c0023cd0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023cd9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023cdc:	0f ba e2 0f          	bt     edx,0xf
c0023ce0:	72 ee                	jb     c0023cd0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023ce2:	c3                   	ret    
c0023ce3:	90                   	nop

c0023ce4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023ce4:	55                   	push   ebp
c0023ce5:	57                   	push   edi
c0023ce6:	56                   	push   esi
c0023ce7:	53                   	push   ebx
c0023ce8:	83 ec 1c             	sub    esp,0x1c
c0023ceb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023cef:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023cf3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023cf7:	53                   	push   ebx
c0023cf8:	89 fd                	mov    ebp,edi
c0023cfa:	56                   	push   esi
c0023cfb:	c1 e5 0a             	shl    ebp,0xa
c0023cfe:	e8 b7 ff ff ff       	call   c0023cba <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023d03:	83 ec 0c             	sub    esp,0xc
c0023d06:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023d0c:	01 e8                	add    eax,ebp
c0023d0e:	89 03                	mov    DWORD PTR [ebx],eax
c0023d10:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023d12:	68 00 04 00 00       	push   0x400
c0023d17:	6a 00                	push   0x0
c0023d19:	50                   	push   eax
c0023d1a:	e8 31 ca fd ff       	call   c0000750 <memset>
c0023d1f:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023d25:	89 fa                	mov    edx,edi
c0023d27:	01 e8                	add    eax,ebp
c0023d29:	c1 e7 0d             	shl    edi,0xd
c0023d2c:	89 03                	mov    DWORD PTR [ebx],eax
c0023d2e:	c1 e2 08             	shl    edx,0x8
c0023d31:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023d38:	81 c2 00 80 00 00    	add    edx,0x8000
c0023d3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023d42:	89 d0                	mov    eax,edx
c0023d44:	83 c4 1c             	add    esp,0x1c
c0023d47:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023d4d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023d50:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023d53:	68 00 01 00 00       	push   0x100
c0023d58:	6a 00                	push   0x0
c0023d5a:	50                   	push   eax
c0023d5b:	e8 f0 c9 fd ff       	call   c0000750 <memset>
c0023d60:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023d64:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023d6a:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023d70:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023d74:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023d77:	83 c4 10             	add    esp,0x10
c0023d7a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023d81:	31 ff                	xor    edi,edi
c0023d83:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023d89:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023d8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023d93:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023d99:	83 c5 20             	add    ebp,0x20
c0023d9c:	01 f8                	add    eax,edi
c0023d9e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023da1:	52                   	push   edx
c0023da2:	68 00 01 00 00       	push   0x100
c0023da7:	6a 00                	push   0x0
c0023da9:	50                   	push   eax
c0023daa:	e8 a1 c9 fd ff       	call   c0000750 <memset>
c0023daf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023db3:	83 c4 10             	add    esp,0x10
c0023db6:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023dbc:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023dc3:	01 f8                	add    eax,edi
c0023dc5:	81 c7 00 01 00 00    	add    edi,0x100
c0023dcb:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023dce:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023dd4:	75 b3                	jne    c0023d89 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023dd6:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023dda:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023dde:	83 c4 1c             	add    esp,0x1c
c0023de1:	5b                   	pop    ebx
c0023de2:	5e                   	pop    esi
c0023de3:	5f                   	pop    edi
c0023de4:	5d                   	pop    ebp
c0023de5:	e9 b0 fe ff ff       	jmp    c0023c9a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023dea <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023dea:	55                   	push   ebp
c0023deb:	57                   	push   edi
c0023dec:	56                   	push   esi
c0023ded:	53                   	push   ebx
c0023dee:	31 db                	xor    ebx,ebx
c0023df0:	83 ec 0c             	sub    esp,0xc
c0023df3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023df7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023dfb:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023dfe:	f7 c7 01 00 00 00    	test   edi,0x1
c0023e04:	74 7a                	je     c0023e80 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023e06:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0023e0a:	89 d8                	mov    eax,ebx
c0023e0c:	c1 e0 07             	shl    eax,0x7
c0023e0f:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0023e16:	55                   	push   ebp
c0023e17:	56                   	push   esi
c0023e18:	e8 35 fe ff ff       	call   c0023c52 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023e1d:	5a                   	pop    edx
c0023e1e:	83 f8 01             	cmp    eax,0x1
c0023e21:	59                   	pop    ecx
c0023e22:	75 21                	jne    c0023e45 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0023e24:	50                   	push   eax
c0023e25:	53                   	push   ebx
c0023e26:	55                   	push   ebp
c0023e27:	56                   	push   esi
c0023e28:	e8 b7 fe ff ff       	call   c0023ce4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023e2d:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023e34:	e8 60 b7 fe ff       	call   c000f599 <malloc>
c0023e39:	89 c5                	mov    ebp,eax
c0023e3b:	89 04 24             	mov    DWORD PTR [esp],eax
c0023e3e:	e8 87 0d 00 00       	call   c0024bca <SATA::SATA()>
c0023e43:	eb 24                	jmp    c0023e69 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0023e45:	83 f8 04             	cmp    eax,0x4
c0023e48:	75 36                	jne    c0023e80 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023e4a:	51                   	push   ecx
c0023e4b:	53                   	push   ebx
c0023e4c:	55                   	push   ebp
c0023e4d:	56                   	push   esi
c0023e4e:	e8 91 fe ff ff       	call   c0023ce4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023e53:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023e5a:	e8 3a b7 fe ff       	call   c000f599 <malloc>
c0023e5f:	89 c5                	mov    ebp,eax
c0023e61:	89 04 24             	mov    DWORD PTR [esp],eax
c0023e64:	e8 d7 10 00 00       	call   c0024f40 <SATAPI::SATAPI()>
c0023e69:	58                   	pop    eax
c0023e6a:	5a                   	pop    edx
c0023e6b:	55                   	push   ebp
c0023e6c:	56                   	push   esi
c0023e6d:	e8 64 fd fe ff       	call   c0013bd6 <Device::addChild(Device*)>
c0023e72:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0023e75:	56                   	push   esi
c0023e76:	6a 00                	push   0x0
c0023e78:	53                   	push   ebx
c0023e79:	55                   	push   ebp
c0023e7a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0023e7d:	83 c4 20             	add    esp,0x20
c0023e80:	d1 ef                	shr    edi,1
c0023e82:	43                   	inc    ebx
c0023e83:	83 fb 20             	cmp    ebx,0x20
c0023e86:	0f 85 72 ff ff ff    	jne    c0023dfe <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023e8c:	83 c4 0c             	add    esp,0xc
c0023e8f:	5b                   	pop    ebx
c0023e90:	5e                   	pop    esi
c0023e91:	5f                   	pop    edi
c0023e92:	5d                   	pop    ebp
c0023e93:	c3                   	ret    

c0023e94 <SATABus::open(int, int, void*)>:
c0023e94:	83 ec 14             	sub    esp,0x14
c0023e97:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023e9b:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023ea1:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023ea7:	52                   	push   edx
c0023ea8:	50                   	push   eax
c0023ea9:	e8 3c ff ff ff       	call   c0023dea <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023eae:	31 c0                	xor    eax,eax
c0023eb0:	83 c4 1c             	add    esp,0x1c
c0023eb3:	c3                   	ret    

c0023eb4 <ATA::close(int, int, void*)>:
c0023eb4:	83 ec 0c             	sub    esp,0xc
c0023eb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ebb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023ec1:	85 c0                	test   eax,eax
c0023ec3:	74 0c                	je     c0023ed1 <ATA::close(int, int, void*)+0x1d>
c0023ec5:	83 ec 0c             	sub    esp,0xc
c0023ec8:	8b 10                	mov    edx,DWORD PTR [eax]
c0023eca:	50                   	push   eax
c0023ecb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023ece:	83 c4 10             	add    esp,0x10
c0023ed1:	31 c0                	xor    eax,eax
c0023ed3:	83 c4 0c             	add    esp,0xc
c0023ed6:	c3                   	ret    
c0023ed7:	90                   	nop

c0023ed8 <ATA::powerSaving(PowerSavingLevel)>:
c0023ed8:	c3                   	ret    
c0023ed9:	90                   	nop

c0023eda <ATA::ATA()>:
c0023eda:	83 ec 0c             	sub    esp,0xc
c0023edd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ee1:	83 ec 04             	sub    esp,0x4
c0023ee4:	68 00 02 00 00       	push   0x200
c0023ee9:	68 d1 c6 02 c0       	push   0xc002c6d1
c0023eee:	50                   	push   eax
c0023eef:	e8 18 01 ff ff       	call   c001400c <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023ef4:	83 c4 10             	add    esp,0x10
c0023ef7:	ba 54 c6 02 c0       	mov    edx,0xc002c654
c0023efc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f00:	89 10                	mov    DWORD PTR [eax],edx
c0023f02:	90                   	nop
c0023f03:	83 c4 0c             	add    esp,0xc
c0023f06:	c3                   	ret    
c0023f07:	90                   	nop

c0023f08 <ATA::flush(bool)>:
c0023f08:	53                   	push   ebx
c0023f09:	83 ec 08             	sub    esp,0x8
c0023f0c:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023f11:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023f15:	19 c0                	sbb    eax,eax
c0023f17:	83 e0 fd             	and    eax,0xfffffffd
c0023f1a:	05 ea 00 00 00       	add    eax,0xea
c0023f1f:	50                   	push   eax
c0023f20:	6a 07                	push   0x7
c0023f22:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f29:	50                   	push   eax
c0023f2a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f30:	e8 53 f1 ff ff       	call   c0023088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f35:	83 c4 0c             	add    esp,0xc
c0023f38:	6a 00                	push   0x0
c0023f3a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f41:	50                   	push   eax
c0023f42:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f48:	e8 dd fb ff ff       	call   c0023b2a <IDE::polling(unsigned char, unsigned int)>
c0023f4d:	83 c4 18             	add    esp,0x18
c0023f50:	5b                   	pop    ebx
c0023f51:	c3                   	ret    

c0023f52 <ATA::readyForCommand()>:
c0023f52:	56                   	push   esi
c0023f53:	53                   	push   ebx
c0023f54:	31 db                	xor    ebx,ebx
c0023f56:	50                   	push   eax
c0023f57:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023f5b:	50                   	push   eax
c0023f5c:	6a 0c                	push   0xc
c0023f5e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023f65:	50                   	push   eax
c0023f66:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023f6c:	e8 d7 f1 ff ff       	call   c0023148 <IDE::read(unsigned char, unsigned char)>
c0023f71:	83 c4 10             	add    esp,0x10
c0023f74:	a8 88                	test   al,0x88
c0023f76:	74 23                	je     c0023f9b <ATA::readyForCommand()+0x49>
c0023f78:	43                   	inc    ebx
c0023f79:	83 fb 63             	cmp    ebx,0x63
c0023f7c:	7e dd                	jle    c0023f5b <ATA::readyForCommand()+0x9>
c0023f7e:	51                   	push   ecx
c0023f7f:	51                   	push   ecx
c0023f80:	6a 00                	push   0x0
c0023f82:	68 40 42 0f 00       	push   0xf4240
c0023f87:	e8 69 9e ff ff       	call   c001ddf5 <nanoSleep(unsigned long long)>
c0023f8c:	83 c4 10             	add    esp,0x10
c0023f8f:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023f95:	75 c4                	jne    c0023f5b <ATA::readyForCommand()+0x9>
c0023f97:	31 c0                	xor    eax,eax
c0023f99:	eb 02                	jmp    c0023f9d <ATA::readyForCommand()+0x4b>
c0023f9b:	b0 01                	mov    al,0x1
c0023f9d:	5a                   	pop    edx
c0023f9e:	5b                   	pop    ebx
c0023f9f:	5e                   	pop    esi
c0023fa0:	c3                   	ret    
c0023fa1:	90                   	nop

c0023fa2 <ATA::access(unsigned long long, int, void*, bool)>:
c0023fa2:	55                   	push   ebp
c0023fa3:	57                   	push   edi
c0023fa4:	56                   	push   esi
c0023fa5:	53                   	push   ebx
c0023fa6:	83 ec 38             	sub    esp,0x38
c0023fa9:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0023fad:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0023fb1:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0023fb5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023fb9:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0023fbd:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0023fc1:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0023fc5:	68 00 c6 02 c0       	push   0xc002c600
c0023fca:	e8 ce e7 fe ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0023fcf:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023fd5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023fd9:	83 c4 10             	add    esp,0x10
c0023fdc:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023fe2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023fe6:	c1 e0 06             	shl    eax,0x6
c0023fe9:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0023ff1:	74 5d                	je     c0024050 <ATA::access(unsigned long long, int, void*, bool)+0xae>
c0023ff3:	89 fa                	mov    edx,edi
c0023ff5:	89 f0                	mov    eax,esi
c0023ff7:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0023ffb:	c1 ea 1c             	shr    edx,0x1c
c0023ffe:	89 d1                	mov    ecx,edx
c0024000:	09 c1                	or     ecx,eax
c0024002:	74 25                	je     c0024029 <ATA::access(unsigned long long, int, void*, bool)+0x87>
c0024004:	31 ed                	xor    ebp,ebp
c0024006:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c002400d:	89 fa                	mov    edx,edi
c002400f:	89 f0                	mov    eax,esi
c0024011:	0f ad d0             	shrd   eax,edx,cl
c0024014:	d3 ea                	shr    edx,cl
c0024016:	f6 c1 20             	test   cl,0x20
c0024019:	74 02                	je     c002401d <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c002401b:	89 d0                	mov    eax,edx
c002401d:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0024021:	45                   	inc    ebp
c0024022:	83 fd 06             	cmp    ebp,0x6
c0024025:	75 df                	jne    c0024006 <ATA::access(unsigned long long, int, void*, bool)+0x64>
c0024027:	eb 76                	jmp    c002409f <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c0024029:	89 f0                	mov    eax,esi
c002402b:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0024030:	89 fa                	mov    edx,edi
c0024032:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024039:	0f ac d0 10          	shrd   eax,edx,0x10
c002403d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024042:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0024046:	c1 ee 18             	shr    esi,0x18
c0024049:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c002404e:	eb 56                	jmp    c00240a6 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c0024050:	6a 00                	push   0x0
c0024052:	6a 3f                	push   0x3f
c0024054:	57                   	push   edi
c0024055:	56                   	push   esi
c0024056:	e8 99 29 00 00       	call   c00269f4 <__umoddi3>
c002405b:	83 c4 10             	add    esp,0x10
c002405e:	40                   	inc    eax
c002405f:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0024063:	6a 00                	push   0x0
c0024065:	68 f0 03 00 00       	push   0x3f0
c002406a:	57                   	push   edi
c002406b:	56                   	push   esi
c002406c:	e8 83 28 00 00       	call   c00268f4 <__udivdi3>
c0024071:	83 c4 10             	add    esp,0x10
c0024074:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0024079:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024080:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024085:	6a 00                	push   0x0
c0024087:	6a 3f                	push   0x3f
c0024089:	57                   	push   edi
c002408a:	56                   	push   esi
c002408b:	e8 64 28 00 00       	call   c00268f4 <__udivdi3>
c0024090:	83 c4 10             	add    esp,0x10
c0024093:	89 c6                	mov    esi,eax
c0024095:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c002409a:	83 e6 0f             	and    esi,0xf
c002409d:	eb 07                	jmp    c00240a6 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c002409f:	31 f6                	xor    esi,esi
c00240a1:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c00240a6:	bf 01 00 00 00       	mov    edi,0x1
c00240ab:	50                   	push   eax
c00240ac:	6a 00                	push   0x0
c00240ae:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240b5:	50                   	push   eax
c00240b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00240ba:	e8 d5 f1 ff ff       	call   c0023294 <IDE::enableIRQs(unsigned char, bool)>
c00240bf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00240c2:	e8 8b fe ff ff       	call   c0023f52 <ATA::readyForCommand()>
c00240c7:	83 c4 10             	add    esp,0x10
c00240ca:	84 c0                	test   al,al
c00240cc:	0f 84 bc 02 00 00    	je     c002438e <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c00240d2:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00240d8:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00240de:	c1 e0 04             	shl    eax,0x4
c00240e1:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c00240e8:	09 c6                	or     esi,eax
c00240ea:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00240ef:	75 05                	jne    c00240f6 <ATA::access(unsigned long long, int, void*, bool)+0x154>
c00240f1:	83 ce a0             	or     esi,0xffffffa0
c00240f4:	eb 03                	jmp    c00240f9 <ATA::access(unsigned long long, int, void*, bool)+0x157>
c00240f6:	83 ce e0             	or     esi,0xffffffe0
c00240f9:	89 f0                	mov    eax,esi
c00240fb:	0f b6 f0             	movzx  esi,al
c00240fe:	56                   	push   esi
c00240ff:	6a 06                	push   0x6
c0024101:	51                   	push   ecx
c0024102:	52                   	push   edx
c0024103:	e8 80 ef ff ff       	call   c0023088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024108:	83 c4 10             	add    esp,0x10
c002410b:	6a 00                	push   0x0
c002410d:	6a 01                	push   0x1
c002410f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024116:	50                   	push   eax
c0024117:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002411d:	e8 66 ef ff ff       	call   c0023088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024122:	83 c4 10             	add    esp,0x10
c0024125:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002412a:	75 6e                	jne    c002419a <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c002412c:	6a 00                	push   0x0
c002412e:	6a 08                	push   0x8
c0024130:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024137:	50                   	push   eax
c0024138:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002413e:	e8 45 ef ff ff       	call   c0023088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024143:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024148:	50                   	push   eax
c0024149:	6a 09                	push   0x9
c002414b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024152:	50                   	push   eax
c0024153:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024159:	e8 2a ef ff ff       	call   c0023088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002415e:	83 c4 20             	add    esp,0x20
c0024161:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024166:	50                   	push   eax
c0024167:	6a 0a                	push   0xa
c0024169:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024170:	50                   	push   eax
c0024171:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024177:	e8 0c ef ff ff       	call   c0023088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002417c:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024181:	50                   	push   eax
c0024182:	6a 0b                	push   0xb
c0024184:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002418b:	50                   	push   eax
c002418c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024192:	e8 f1 ee ff ff       	call   c0023088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024197:	83 c4 20             	add    esp,0x20
c002419a:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c002419f:	50                   	push   eax
c00241a0:	6a 02                	push   0x2
c00241a2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241a9:	50                   	push   eax
c00241aa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241b0:	e8 d3 ee ff ff       	call   c0023088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241b5:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00241ba:	50                   	push   eax
c00241bb:	6a 03                	push   0x3
c00241bd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241c4:	50                   	push   eax
c00241c5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241cb:	e8 b8 ee ff ff       	call   c0023088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241d0:	83 c4 20             	add    esp,0x20
c00241d3:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00241d8:	50                   	push   eax
c00241d9:	6a 04                	push   0x4
c00241db:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241e2:	50                   	push   eax
c00241e3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241e9:	e8 9a ee ff ff       	call   c0023088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241ee:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00241f3:	50                   	push   eax
c00241f4:	6a 05                	push   0x5
c00241f6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241fd:	50                   	push   eax
c00241fe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024204:	e8 7f ee ff ff       	call   c0023088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024209:	83 c4 20             	add    esp,0x20
c002420c:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024211:	0f 94 c0             	sete   al
c0024214:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024219:	74 09                	je     c0024224 <ATA::access(unsigned long long, int, void*, bool)+0x282>
c002421b:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024222:	eb 07                	jmp    c002422b <ATA::access(unsigned long long, int, void*, bool)+0x289>
c0024224:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c002422b:	0f b6 c0             	movzx  eax,al
c002422e:	50                   	push   eax
c002422f:	6a 07                	push   0x7
c0024231:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024238:	50                   	push   eax
c0024239:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002423f:	e8 44 ee ff ff       	call   c0023088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024244:	c7 04 24 0d c6 02 c0 	mov    DWORD PTR [esp],0xc002c60d
c002424b:	e8 4d e5 fe ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0024250:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0024254:	83 c4 10             	add    esp,0x10
c0024257:	85 f6                	test   esi,esi
c0024259:	0f 84 f7 00 00 00    	je     c0024356 <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c002425f:	83 ec 0c             	sub    esp,0xc
c0024262:	68 10 c6 02 c0       	push   0xc002c610
c0024267:	e8 31 e5 fe ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c002426c:	83 c4 0c             	add    esp,0xc
c002426f:	6a 01                	push   0x1
c0024271:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024278:	50                   	push   eax
c0024279:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002427f:	e8 a6 f8 ff ff       	call   c0023b2a <IDE::polling(unsigned char, unsigned int)>
c0024284:	c7 04 24 13 c6 02 c0 	mov    DWORD PTR [esp],0xc002c613
c002428b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c002428f:	e8 09 e5 fe ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0024294:	83 c4 10             	add    esp,0x10
c0024297:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c002429b:	84 c0                	test   al,al
c002429d:	74 2b                	je     c00242ca <ATA::access(unsigned long long, int, void*, bool)+0x328>
c002429f:	0f b6 f8             	movzx  edi,al
c00242a2:	57                   	push   edi
c00242a3:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00242aa:	50                   	push   eax
c00242ab:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242b2:	50                   	push   eax
c00242b3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242b9:	e8 bc f7 ff ff       	call   c0023a7a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00242be:	c7 04 24 16 c6 02 c0 	mov    DWORD PTR [esp],0xc002c616
c00242c5:	e9 bc 00 00 00       	jmp    c0024386 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c00242ca:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00242cf:	74 50                	je     c0024321 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c00242d1:	83 ec 0c             	sub    esp,0xc
c00242d4:	31 ed                	xor    ebp,ebp
c00242d6:	68 21 c6 02 c0       	push   0xc002c621
c00242db:	e8 bd e4 fe ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00242e0:	83 c4 10             	add    esp,0x10
c00242e3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00242e7:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c00242eb:	50                   	push   eax
c00242ec:	50                   	push   eax
c00242ed:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242f4:	50                   	push   eax
c00242f5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242fb:	e8 76 ed ff ff       	call   c0023076 <IDE::getBase(unsigned char)>
c0024300:	89 c2                	mov    edx,eax
c0024302:	89 f8                	mov    eax,edi
c0024304:	66 ef                	out    dx,ax
c0024306:	45                   	inc    ebp
c0024307:	83 c4 10             	add    esp,0x10
c002430a:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024310:	75 d1                	jne    c00242e3 <ATA::access(unsigned long long, int, void*, bool)+0x341>
c0024312:	83 ec 0c             	sub    esp,0xc
c0024315:	68 24 c6 02 c0       	push   0xc002c624
c002431a:	e8 7e e4 fe ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c002431f:	eb 24                	jmp    c0024345 <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c0024321:	51                   	push   ecx
c0024322:	51                   	push   ecx
c0024323:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002432a:	50                   	push   eax
c002432b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024331:	e8 40 ed ff ff       	call   c0023076 <IDE::getBase(unsigned char)>
c0024336:	b9 00 01 00 00       	mov    ecx,0x100
c002433b:	89 c2                	mov    edx,eax
c002433d:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024341:	fc                   	cld    
c0024342:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024345:	83 c4 10             	add    esp,0x10
c0024348:	4e                   	dec    esi
c0024349:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024351:	e9 01 ff ff ff       	jmp    c0024257 <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c0024356:	31 ff                	xor    edi,edi
c0024358:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002435d:	74 2f                	je     c002438e <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c002435f:	83 ec 0c             	sub    esp,0xc
c0024362:	68 27 c6 02 c0       	push   0xc002c627
c0024367:	e8 31 e4 fe ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c002436c:	58                   	pop    eax
c002436d:	31 c0                	xor    eax,eax
c002436f:	5a                   	pop    edx
c0024370:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024375:	0f 94 c0             	sete   al
c0024378:	50                   	push   eax
c0024379:	53                   	push   ebx
c002437a:	e8 89 fb ff ff       	call   c0023f08 <ATA::flush(bool)>
c002437f:	c7 04 24 2a c6 02 c0 	mov    DWORD PTR [esp],0xc002c62a
c0024386:	e8 12 e4 fe ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c002438b:	83 c4 10             	add    esp,0x10
c002438e:	83 c4 2c             	add    esp,0x2c
c0024391:	89 f8                	mov    eax,edi
c0024393:	5b                   	pop    ebx
c0024394:	5e                   	pop    esi
c0024395:	5f                   	pop    edi
c0024396:	5d                   	pop    ebp
c0024397:	c3                   	ret    

c0024398 <ATA::read(unsigned long long, int, void*)>:
c0024398:	57                   	push   edi
c0024399:	b8 04 00 00 00       	mov    eax,0x4
c002439e:	56                   	push   esi
c002439f:	53                   	push   ebx
c00243a0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00243a4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00243a8:	8d 7a ff             	lea    edi,[edx-0x1]
c00243ab:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00243af:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00243b3:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00243b9:	77 25                	ja     c00243e0 <ATA::read(unsigned long long, int, void*)+0x48>
c00243bb:	b8 06 00 00 00       	mov    eax,0x6
c00243c0:	85 f6                	test   esi,esi
c00243c2:	74 1c                	je     c00243e0 <ATA::read(unsigned long long, int, void*)+0x48>
c00243c4:	50                   	push   eax
c00243c5:	50                   	push   eax
c00243c6:	6a 00                	push   0x0
c00243c8:	56                   	push   esi
c00243c9:	52                   	push   edx
c00243ca:	53                   	push   ebx
c00243cb:	51                   	push   ecx
c00243cc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00243d0:	e8 cd fb ff ff       	call   c0023fa2 <ATA::access(unsigned long long, int, void*, bool)>
c00243d5:	83 c4 20             	add    esp,0x20
c00243d8:	85 c0                	test   eax,eax
c00243da:	0f 95 c0             	setne  al
c00243dd:	0f b6 c0             	movzx  eax,al
c00243e0:	5b                   	pop    ebx
c00243e1:	5e                   	pop    esi
c00243e2:	5f                   	pop    edi
c00243e3:	c3                   	ret    

c00243e4 <ATA::write(unsigned long long, int, void*)>:
c00243e4:	55                   	push   ebp
c00243e5:	57                   	push   edi
c00243e6:	56                   	push   esi
c00243e7:	53                   	push   ebx
c00243e8:	83 ec 18             	sub    esp,0x18
c00243eb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00243ef:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00243f3:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00243f7:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00243fb:	68 2d c6 02 c0       	push   0xc002c62d
c0024400:	e8 98 e3 fe ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0024405:	8d 53 ff             	lea    edx,[ebx-0x1]
c0024408:	83 c4 10             	add    esp,0x10
c002440b:	b8 04 00 00 00       	mov    eax,0x4
c0024410:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0024416:	77 25                	ja     c002443d <ATA::write(unsigned long long, int, void*)+0x59>
c0024418:	b8 06 00 00 00       	mov    eax,0x6
c002441d:	85 f6                	test   esi,esi
c002441f:	74 1c                	je     c002443d <ATA::write(unsigned long long, int, void*)+0x59>
c0024421:	50                   	push   eax
c0024422:	50                   	push   eax
c0024423:	6a 01                	push   0x1
c0024425:	56                   	push   esi
c0024426:	53                   	push   ebx
c0024427:	55                   	push   ebp
c0024428:	57                   	push   edi
c0024429:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002442d:	e8 70 fb ff ff       	call   c0023fa2 <ATA::access(unsigned long long, int, void*, bool)>
c0024432:	83 c4 20             	add    esp,0x20
c0024435:	85 c0                	test   eax,eax
c0024437:	0f 95 c0             	setne  al
c002443a:	0f b6 c0             	movzx  eax,al
c002443d:	83 c4 0c             	add    esp,0xc
c0024440:	5b                   	pop    ebx
c0024441:	5e                   	pop    esi
c0024442:	5f                   	pop    edi
c0024443:	5d                   	pop    ebp
c0024444:	c3                   	ret    
c0024445:	90                   	nop

c0024446 <ATA::detectCHS()>:
c0024446:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002444a:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024450:	c1 e0 06             	shl    eax,0x6
c0024453:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024459:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024463:	c7 44 24 04 39 c6 02 c0 	mov    DWORD PTR [esp+0x4],0xc002c639
c002446b:	e9 19 5b ff ff       	jmp    c0019f89 <Krnl::panic(char const*)>

c0024470 <ATA::open(int, int, void*)>:
c0024470:	53                   	push   ebx
c0024471:	83 ec 08             	sub    esp,0x8
c0024474:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024478:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002447c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024480:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024486:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002448c:	c1 e0 06             	shl    eax,0x6
c002448f:	01 d0                	add    eax,edx
c0024491:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024498:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002449e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00244a5:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00244af:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00244b5:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00244bc:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00244c3:	75 0c                	jne    c00244d1 <ATA::open(int, int, void*)+0x61>
c00244c5:	83 ec 0c             	sub    esp,0xc
c00244c8:	53                   	push   ebx
c00244c9:	e8 78 ff ff ff       	call   c0024446 <ATA::detectCHS()>
c00244ce:	83 c4 10             	add    esp,0x10
c00244d1:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00244d7:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00244dd:	c1 e0 06             	shl    eax,0x6
c00244e0:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00244e7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00244f1:	d1 e8                	shr    eax,1
c00244f3:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00244f9:	6a 04                	push   0x4
c00244fb:	6a 0c                	push   0xc
c00244fd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024504:	50                   	push   eax
c0024505:	52                   	push   edx
c0024506:	e8 7d eb ff ff       	call   c0023088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002450b:	90                   	nop
c002450c:	90                   	nop
c002450d:	6a 00                	push   0x0
c002450f:	6a 0c                	push   0xc
c0024511:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024518:	50                   	push   eax
c0024519:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002451f:	e8 64 eb ff ff       	call   c0023088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024524:	83 c4 14             	add    esp,0x14
c0024527:	53                   	push   ebx
c0024528:	e8 47 fb fe ff       	call   c0014074 <PhysicalDisk::startCache()>
c002452d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024530:	e8 c7 1d ff ff       	call   c00162fc <createPartitionsForDisk(PhysicalDisk*)>
c0024535:	31 c0                	xor    eax,eax
c0024537:	83 c4 18             	add    esp,0x18
c002453a:	5b                   	pop    ebx
c002453b:	c3                   	ret    

c002453c <ATAPI::write(unsigned long long, int, void*)>:
c002453c:	b8 03 00 00 00       	mov    eax,0x3
c0024541:	c3                   	ret    

c0024542 <ATAPI::close(int, int, void*)>:
c0024542:	83 ec 0c             	sub    esp,0xc
c0024545:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024549:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002454f:	85 c0                	test   eax,eax
c0024551:	74 0c                	je     c002455f <ATAPI::close(int, int, void*)+0x1d>
c0024553:	83 ec 0c             	sub    esp,0xc
c0024556:	8b 10                	mov    edx,DWORD PTR [eax]
c0024558:	50                   	push   eax
c0024559:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002455c:	83 c4 10             	add    esp,0x10
c002455f:	31 c0                	xor    eax,eax
c0024561:	83 c4 0c             	add    esp,0xc
c0024564:	c3                   	ret    
c0024565:	90                   	nop

c0024566 <ATAPI::ATAPI()>:
c0024566:	83 ec 0c             	sub    esp,0xc
c0024569:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002456d:	83 ec 04             	sub    esp,0x4
c0024570:	68 00 08 00 00       	push   0x800
c0024575:	68 71 c7 02 c0       	push   0xc002c771
c002457a:	50                   	push   eax
c002457b:	e8 8c fa fe ff       	call   c001400c <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024580:	83 c4 10             	add    esp,0x10
c0024583:	ba 8c c6 02 c0       	mov    edx,0xc002c68c
c0024588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002458c:	89 10                	mov    DWORD PTR [eax],edx
c002458e:	90                   	nop
c002458f:	83 c4 0c             	add    esp,0xc
c0024592:	c3                   	ret    
c0024593:	90                   	nop

c0024594 <ATAPI::readyForCommand()>:
c0024594:	56                   	push   esi
c0024595:	53                   	push   ebx
c0024596:	31 db                	xor    ebx,ebx
c0024598:	50                   	push   eax
c0024599:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002459d:	50                   	push   eax
c002459e:	6a 0c                	push   0xc
c00245a0:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00245a7:	50                   	push   eax
c00245a8:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00245ae:	e8 95 eb ff ff       	call   c0023148 <IDE::read(unsigned char, unsigned char)>
c00245b3:	83 c4 10             	add    esp,0x10
c00245b6:	a8 88                	test   al,0x88
c00245b8:	74 23                	je     c00245dd <ATAPI::readyForCommand()+0x49>
c00245ba:	43                   	inc    ebx
c00245bb:	83 fb 63             	cmp    ebx,0x63
c00245be:	7e dd                	jle    c002459d <ATAPI::readyForCommand()+0x9>
c00245c0:	51                   	push   ecx
c00245c1:	51                   	push   ecx
c00245c2:	6a 00                	push   0x0
c00245c4:	68 40 42 0f 00       	push   0xf4240
c00245c9:	e8 27 98 ff ff       	call   c001ddf5 <nanoSleep(unsigned long long)>
c00245ce:	83 c4 10             	add    esp,0x10
c00245d1:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00245d7:	75 c4                	jne    c002459d <ATAPI::readyForCommand()+0x9>
c00245d9:	31 c0                	xor    eax,eax
c00245db:	eb 02                	jmp    c00245df <ATAPI::readyForCommand()+0x4b>
c00245dd:	b0 01                	mov    al,0x1
c00245df:	5a                   	pop    edx
c00245e0:	5b                   	pop    ebx
c00245e1:	5e                   	pop    esi
c00245e2:	c3                   	ret    
c00245e3:	90                   	nop

c00245e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00245e4:	55                   	push   ebp
c00245e5:	57                   	push   edi
c00245e6:	56                   	push   esi
c00245e7:	53                   	push   ebx
c00245e8:	83 ec 20             	sub    esp,0x20
c00245eb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00245ef:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00245f3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00245f7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00245fb:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00245ff:	6a 01                	push   0x1
c0024601:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024608:	50                   	push   eax
c0024609:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002460f:	e8 80 ec ff ff       	call   c0023294 <IDE::enableIRQs(unsigned char, bool)>
c0024614:	5e                   	pop    esi
c0024615:	58                   	pop    eax
c0024616:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002461d:	50                   	push   eax
c002461e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024624:	e8 39 ea ff ff       	call   c0023062 <IDE::prepareInterrupt(unsigned char)>
c0024629:	89 3c 24             	mov    DWORD PTR [esp],edi
c002462c:	e8 63 ff ff ff       	call   c0024594 <ATAPI::readyForCommand()>
c0024631:	83 c4 10             	add    esp,0x10
c0024634:	84 c0                	test   al,al
c0024636:	75 0a                	jne    c0024642 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024638:	bb 01 00 00 00       	mov    ebx,0x1
c002463d:	e9 57 02 00 00       	jmp    c0024899 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024642:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024648:	c1 e0 04             	shl    eax,0x4
c002464b:	0f b6 c0             	movzx  eax,al
c002464e:	50                   	push   eax
c002464f:	6a 06                	push   0x6
c0024651:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024658:	50                   	push   eax
c0024659:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002465f:	e8 24 ea ff ff       	call   c0023088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024664:	6a 00                	push   0x0
c0024666:	6a 01                	push   0x1
c0024668:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002466f:	50                   	push   eax
c0024670:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024676:	e8 0d ea ff ff       	call   c0023088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002467b:	83 c4 20             	add    esp,0x20
c002467e:	0f b6 c3             	movzx  eax,bl
c0024681:	0f b6 df             	movzx  ebx,bh
c0024684:	50                   	push   eax
c0024685:	6a 04                	push   0x4
c0024687:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002468e:	50                   	push   eax
c002468f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024695:	e8 ee e9 ff ff       	call   c0023088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002469a:	53                   	push   ebx
c002469b:	6a 05                	push   0x5
c002469d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246a4:	50                   	push   eax
c00246a5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246ab:	e8 d8 e9 ff ff       	call   c0023088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246b0:	83 c4 20             	add    esp,0x20
c00246b3:	68 a0 00 00 00       	push   0xa0
c00246b8:	6a 07                	push   0x7
c00246ba:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246c1:	50                   	push   eax
c00246c2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246c8:	e8 bb e9 ff ff       	call   c0023088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246cd:	83 c4 0c             	add    esp,0xc
c00246d0:	6a 01                	push   0x1
c00246d2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246d9:	50                   	push   eax
c00246da:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246e0:	e8 45 f4 ff ff       	call   c0023b2a <IDE::polling(unsigned char, unsigned int)>
c00246e5:	83 c4 10             	add    esp,0x10
c00246e8:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c00246ee:	84 c0                	test   al,al
c00246f0:	74 23                	je     c0024715 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00246f2:	0f b6 d8             	movzx  ebx,al
c00246f5:	0f b6 d2             	movzx  edx,dl
c00246f8:	53                   	push   ebx
c00246f9:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024700:	50                   	push   eax
c0024701:	52                   	push   edx
c0024702:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024708:	e8 6d f3 ff ff       	call   c0023a7a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002470d:	83 c4 10             	add    esp,0x10
c0024710:	e9 84 01 00 00       	jmp    c0024899 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024715:	0f b6 d2             	movzx  edx,dl
c0024718:	53                   	push   ebx
c0024719:	53                   	push   ebx
c002471a:	52                   	push   edx
c002471b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024721:	e8 50 e9 ff ff       	call   c0023076 <IDE::getBase(unsigned char)>
c0024726:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002472a:	b9 06 00 00 00       	mov    ecx,0x6
c002472f:	89 c2                	mov    edx,eax
c0024731:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024734:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0024738:	83 c4 10             	add    esp,0x10
c002473b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024741:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024748:	85 db                	test   ebx,ebx
c002474a:	0f 84 ec 00 00 00    	je     c002483c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024750:	51                   	push   ecx
c0024751:	51                   	push   ecx
c0024752:	52                   	push   edx
c0024753:	50                   	push   eax
c0024754:	e8 9d ea ff ff       	call   c00231f6 <IDE::waitInterrupt(unsigned char)>
c0024759:	83 c4 10             	add    esp,0x10
c002475c:	84 c0                	test   al,al
c002475e:	0f 84 d4 fe ff ff    	je     c0024638 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024764:	56                   	push   esi
c0024765:	56                   	push   esi
c0024766:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002476d:	50                   	push   eax
c002476e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024774:	e8 e9 e8 ff ff       	call   c0023062 <IDE::prepareInterrupt(unsigned char)>
c0024779:	83 c4 0c             	add    esp,0xc
c002477c:	6a 04                	push   0x4
c002477e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024785:	50                   	push   eax
c0024786:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002478c:	e8 b7 e9 ff ff       	call   c0023148 <IDE::read(unsigned char, unsigned char)>
c0024791:	83 c4 0c             	add    esp,0xc
c0024794:	89 c6                	mov    esi,eax
c0024796:	6a 05                	push   0x5
c0024798:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002479f:	50                   	push   eax
c00247a0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247a6:	e8 9d e9 ff ff       	call   c0023148 <IDE::read(unsigned char, unsigned char)>
c00247ab:	89 f1                	mov    ecx,esi
c00247ad:	0f b6 c0             	movzx  eax,al
c00247b0:	0f b6 f1             	movzx  esi,cl
c00247b3:	c1 e0 08             	shl    eax,0x8
c00247b6:	09 c6                	or     esi,eax
c00247b8:	d1 fe                	sar    esi,1
c00247ba:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00247be:	83 c4 10             	add    esp,0x10
c00247c1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00247c6:	74 41                	je     c0024809 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00247c8:	31 c9                	xor    ecx,ecx
c00247ca:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00247d0:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00247d7:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00247db:	75 0a                	jne    c00247e7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00247dd:	01 c9                	add    ecx,ecx
c00247df:	01 cd                	add    ebp,ecx
c00247e1:	4b                   	dec    ebx
c00247e2:	e9 54 ff ff ff       	jmp    c002473b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00247e7:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00247ec:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00247f0:	51                   	push   ecx
c00247f1:	51                   	push   ecx
c00247f2:	52                   	push   edx
c00247f3:	50                   	push   eax
c00247f4:	e8 7d e8 ff ff       	call   c0023076 <IDE::getBase(unsigned char)>
c00247f9:	89 c2                	mov    edx,eax
c00247fb:	89 f0                	mov    eax,esi
c00247fd:	66 ef                	out    dx,ax
c00247ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024803:	83 c4 10             	add    esp,0x10
c0024806:	41                   	inc    ecx
c0024807:	eb c1                	jmp    c00247ca <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0024809:	31 f6                	xor    esi,esi
c002480b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024811:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024818:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c002481c:	75 06                	jne    c0024824 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c002481e:	01 f6                	add    esi,esi
c0024820:	01 f5                	add    ebp,esi
c0024822:	eb bd                	jmp    c00247e1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024824:	51                   	push   ecx
c0024825:	51                   	push   ecx
c0024826:	52                   	push   edx
c0024827:	50                   	push   eax
c0024828:	e8 49 e8 ff ff       	call   c0023076 <IDE::getBase(unsigned char)>
c002482d:	89 c2                	mov    edx,eax
c002482f:	66 ed                	in     ax,dx
c0024831:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0024836:	83 c4 10             	add    esp,0x10
c0024839:	46                   	inc    esi
c002483a:	eb cf                	jmp    c002480b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c002483c:	51                   	push   ecx
c002483d:	51                   	push   ecx
c002483e:	52                   	push   edx
c002483f:	50                   	push   eax
c0024840:	e8 b1 e9 ff ff       	call   c00231f6 <IDE::waitInterrupt(unsigned char)>
c0024845:	83 c4 10             	add    esp,0x10
c0024848:	84 c0                	test   al,al
c002484a:	0f 84 e8 fd ff ff    	je     c0024638 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024850:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024855:	52                   	push   edx
c0024856:	52                   	push   edx
c0024857:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002485e:	50                   	push   eax
c002485f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024865:	e8 f8 e7 ff ff       	call   c0023062 <IDE::prepareInterrupt(unsigned char)>
c002486a:	83 c4 10             	add    esp,0x10
c002486d:	50                   	push   eax
c002486e:	50                   	push   eax
c002486f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024876:	50                   	push   eax
c0024877:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002487d:	e8 f4 e7 ff ff       	call   c0023076 <IDE::getBase(unsigned char)>
c0024882:	8d 50 07             	lea    edx,[eax+0x7]
c0024885:	ec                   	in     al,dx
c0024886:	83 c4 10             	add    esp,0x10
c0024889:	a8 88                	test   al,0x88
c002488b:	74 0a                	je     c0024897 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c002488d:	4b                   	dec    ebx
c002488e:	75 dd                	jne    c002486d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0024890:	bb 02 00 00 00       	mov    ebx,0x2
c0024895:	eb 02                	jmp    c0024899 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024897:	31 db                	xor    ebx,ebx
c0024899:	83 c4 1c             	add    esp,0x1c
c002489c:	89 d8                	mov    eax,ebx
c002489e:	5b                   	pop    ebx
c002489f:	5e                   	pop    esi
c00248a0:	5f                   	pop    edi
c00248a1:	5d                   	pop    ebp
c00248a2:	c3                   	ret    
c00248a3:	90                   	nop

c00248a4 <ATAPI::diskRemoved()>:
c00248a4:	83 ec 18             	sub    esp,0x18
c00248a7:	68 7d c7 02 c0       	push   0xc002c77d
c00248ac:	e8 ec de fe ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00248b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00248b5:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00248bc:	83 c4 1c             	add    esp,0x1c
c00248bf:	c3                   	ret    

c00248c0 <ATAPI::eject()>:
c00248c0:	57                   	push   edi
c00248c1:	b9 03 00 00 00       	mov    ecx,0x3
c00248c6:	53                   	push   ebx
c00248c7:	83 ec 14             	sub    esp,0x14
c00248ca:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00248ce:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00248d2:	fc                   	cld    
c00248d3:	31 c0                	xor    eax,eax
c00248d5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00248d7:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00248dc:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00248e1:	50                   	push   eax
c00248e2:	50                   	push   eax
c00248e3:	6a 00                	push   0x0
c00248e5:	6a 00                	push   0x0
c00248e7:	6a 00                	push   0x0
c00248e9:	6a 02                	push   0x2
c00248eb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00248ef:	50                   	push   eax
c00248f0:	53                   	push   ebx
c00248f1:	e8 ee fc ff ff       	call   c00245e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00248f6:	83 c4 14             	add    esp,0x14
c00248f9:	53                   	push   ebx
c00248fa:	e8 a5 ff ff ff       	call   c00248a4 <ATAPI::diskRemoved()>
c00248ff:	83 c4 24             	add    esp,0x24
c0024902:	31 c0                	xor    eax,eax
c0024904:	5b                   	pop    ebx
c0024905:	5f                   	pop    edi
c0024906:	c3                   	ret    
c0024907:	90                   	nop

c0024908 <ATAPI::diskInserted()>:
c0024908:	53                   	push   ebx
c0024909:	83 ec 14             	sub    esp,0x14
c002490c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024910:	68 94 c7 02 c0       	push   0xc002c794
c0024915:	e8 83 de fe ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c002491a:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024921:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024924:	e8 4b f7 fe ff       	call   c0014074 <PhysicalDisk::startCache()>
c0024929:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002492d:	83 c4 18             	add    esp,0x18
c0024930:	5b                   	pop    ebx
c0024931:	e9 c6 19 ff ff       	jmp    c00162fc <createPartitionsForDisk(PhysicalDisk*)>

c0024936 <ATAPI::detectMedia()>:
c0024936:	56                   	push   esi
c0024937:	53                   	push   ebx
c0024938:	83 ec 28             	sub    esp,0x28
c002493b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002493f:	6a 0c                	push   0xc
c0024941:	6a 00                	push   0x0
c0024943:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024947:	56                   	push   esi
c0024948:	e8 03 be fd ff       	call   c0000750 <memset>
c002494d:	58                   	pop    eax
c002494e:	5a                   	pop    edx
c002494f:	6a 00                	push   0x0
c0024951:	6a 00                	push   0x0
c0024953:	6a 00                	push   0x0
c0024955:	6a 00                	push   0x0
c0024957:	56                   	push   esi
c0024958:	53                   	push   ebx
c0024959:	e8 86 fc ff ff       	call   c00245e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002495e:	83 c4 1c             	add    esp,0x1c
c0024961:	6a 0c                	push   0xc
c0024963:	6a 00                	push   0x0
c0024965:	56                   	push   esi
c0024966:	e8 e5 bd fd ff       	call   c0000750 <memset>
c002496b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024970:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024975:	59                   	pop    ecx
c0024976:	58                   	pop    eax
c0024977:	6a 01                	push   0x1
c0024979:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002497d:	50                   	push   eax
c002497e:	6a 00                	push   0x0
c0024980:	6a 12                	push   0x12
c0024982:	56                   	push   esi
c0024983:	53                   	push   ebx
c0024984:	e8 5b fc ff ff       	call   c00245e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024989:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002498d:	83 c4 20             	add    esp,0x20
c0024990:	83 e0 7f             	and    eax,0x7f
c0024993:	3c 70                	cmp    al,0x70
c0024995:	74 15                	je     c00249ac <ATAPI::detectMedia()+0x76>
c0024997:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002499e:	75 0c                	jne    c00249ac <ATAPI::detectMedia()+0x76>
c00249a0:	83 ec 0c             	sub    esp,0xc
c00249a3:	53                   	push   ebx
c00249a4:	e8 5f ff ff ff       	call   c0024908 <ATAPI::diskInserted()>
c00249a9:	83 c4 10             	add    esp,0x10
c00249ac:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00249b0:	83 e0 0f             	and    eax,0xf
c00249b3:	3c 02                	cmp    al,0x2
c00249b5:	75 1b                	jne    c00249d2 <ATAPI::detectMedia()+0x9c>
c00249b7:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00249bc:	75 2d                	jne    c00249eb <ATAPI::detectMedia()+0xb5>
c00249be:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00249c5:	74 24                	je     c00249eb <ATAPI::detectMedia()+0xb5>
c00249c7:	83 ec 0c             	sub    esp,0xc
c00249ca:	53                   	push   ebx
c00249cb:	e8 d4 fe ff ff       	call   c00248a4 <ATAPI::diskRemoved()>
c00249d0:	eb 16                	jmp    c00249e8 <ATAPI::detectMedia()+0xb2>
c00249d2:	84 c0                	test   al,al
c00249d4:	75 15                	jne    c00249eb <ATAPI::detectMedia()+0xb5>
c00249d6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00249dd:	75 0c                	jne    c00249eb <ATAPI::detectMedia()+0xb5>
c00249df:	83 ec 0c             	sub    esp,0xc
c00249e2:	53                   	push   ebx
c00249e3:	e8 20 ff ff ff       	call   c0024908 <ATAPI::diskInserted()>
c00249e8:	83 c4 10             	add    esp,0x10
c00249eb:	83 c4 24             	add    esp,0x24
c00249ee:	5b                   	pop    ebx
c00249ef:	5e                   	pop    esi
c00249f0:	c3                   	ret    
c00249f1:	90                   	nop

c00249f2 <ATAPI::open(int, int, void*)>:
c00249f2:	53                   	push   ebx
c00249f3:	83 ec 08             	sub    esp,0x8
c00249f6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00249fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00249fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024a02:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024a08:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024a0e:	c1 e0 06             	shl    eax,0x6
c0024a11:	01 d0                	add    eax,edx
c0024a13:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024a1a:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024a20:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024a27:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024a31:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024a37:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024a3e:	6a 04                	push   0x4
c0024a40:	6a 0c                	push   0xc
c0024a42:	51                   	push   ecx
c0024a43:	52                   	push   edx
c0024a44:	e8 3f e6 ff ff       	call   c0023088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a49:	90                   	nop
c0024a4a:	90                   	nop
c0024a4b:	6a 00                	push   0x0
c0024a4d:	6a 0c                	push   0xc
c0024a4f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a56:	50                   	push   eax
c0024a57:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a5d:	e8 26 e6 ff ff       	call   c0023088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a62:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024a69:	83 c4 14             	add    esp,0x14
c0024a6c:	53                   	push   ebx
c0024a6d:	e8 c4 fe ff ff       	call   c0024936 <ATAPI::detectMedia()>
c0024a72:	31 c0                	xor    eax,eax
c0024a74:	83 c4 18             	add    esp,0x18
c0024a77:	5b                   	pop    ebx
c0024a78:	c3                   	ret    
c0024a79:	90                   	nop

c0024a7a <ATAPI::read(unsigned long long, int, void*)>:
c0024a7a:	55                   	push   ebp
c0024a7b:	57                   	push   edi
c0024a7c:	56                   	push   esi
c0024a7d:	53                   	push   ebx
c0024a7e:	83 ec 1c             	sub    esp,0x1c
c0024a81:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024a85:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024a89:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024a8d:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024a94:	74 41                	je     c0024ad7 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024a96:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024a9a:	b9 03 00 00 00       	mov    ecx,0x3
c0024a9f:	fc                   	cld    
c0024aa0:	31 c0                	xor    eax,eax
c0024aa2:	86 fb                	xchg   bl,bh
c0024aa4:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024aa6:	c1 c3 10             	rol    ebx,0x10
c0024aa9:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024aae:	89 e8                	mov    eax,ebp
c0024ab0:	86 fb                	xchg   bl,bh
c0024ab2:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024ab6:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024aba:	50                   	push   eax
c0024abb:	50                   	push   eax
c0024abc:	55                   	push   ebp
c0024abd:	c1 e5 0b             	shl    ebp,0xb
c0024ac0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024ac4:	6a 00                	push   0x0
c0024ac6:	55                   	push   ebp
c0024ac7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024acb:	50                   	push   eax
c0024acc:	56                   	push   esi
c0024acd:	e8 12 fb ff ff       	call   c00245e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024ad2:	83 c4 20             	add    esp,0x20
c0024ad5:	eb 1a                	jmp    c0024af1 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024ad7:	83 ec 0c             	sub    esp,0xc
c0024ada:	56                   	push   esi
c0024adb:	e8 56 fe ff ff       	call   c0024936 <ATAPI::detectMedia()>
c0024ae0:	83 c4 10             	add    esp,0x10
c0024ae3:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024aea:	75 aa                	jne    c0024a96 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024aec:	b8 02 00 00 00       	mov    eax,0x2
c0024af1:	83 c4 1c             	add    esp,0x1c
c0024af4:	5b                   	pop    ebx
c0024af5:	5e                   	pop    esi
c0024af6:	5f                   	pop    edi
c0024af7:	5d                   	pop    ebp
c0024af8:	c3                   	ret    
c0024af9:	90                   	nop

c0024afa <SATA::close(int, int, void*)>:
c0024afa:	83 ec 0c             	sub    esp,0xc
c0024afd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b01:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024b07:	85 c0                	test   eax,eax
c0024b09:	74 0c                	je     c0024b17 <SATA::close(int, int, void*)+0x1d>
c0024b0b:	83 ec 0c             	sub    esp,0xc
c0024b0e:	8b 10                	mov    edx,DWORD PTR [eax]
c0024b10:	50                   	push   eax
c0024b11:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024b14:	83 c4 10             	add    esp,0x10
c0024b17:	31 c0                	xor    eax,eax
c0024b19:	83 c4 0c             	add    esp,0xc
c0024b1c:	c3                   	ret    
c0024b1d:	90                   	nop

c0024b1e <SATA::powerSaving(PowerSavingLevel)>:
c0024b1e:	c3                   	ret    
c0024b1f:	90                   	nop

c0024b20 <SATA::open(int, int, void*)>:
c0024b20:	56                   	push   esi
c0024b21:	53                   	push   ebx
c0024b22:	50                   	push   eax
c0024b23:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024b27:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024b2b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024b35:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024b3b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024b45:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024b49:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024b53:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024b59:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024b60:	e8 30 ae fe ff       	call   c000f995 <Phys::allocatePage()>
c0024b65:	89 c6                	mov    esi,eax
c0024b67:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024b6d:	81 c6 00 10 00 00    	add    esi,0x1000
c0024b73:	e8 1d ae fe ff       	call   c000f995 <Phys::allocatePage()>
c0024b78:	39 c6                	cmp    esi,eax
c0024b7a:	74 10                	je     c0024b8c <SATA::open(int, int, void*)+0x6c>
c0024b7c:	83 ec 0c             	sub    esp,0xc
c0024b7f:	68 bc c6 02 c0       	push   0xc002c6bc
c0024b84:	e8 00 54 ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c0024b89:	83 c4 10             	add    esp,0x10
c0024b8c:	83 ec 0c             	sub    esp,0xc
c0024b8f:	6a 02                	push   0x2
c0024b91:	e8 89 c6 fe ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0024b96:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024b9c:	6a 03                	push   0x3
c0024b9e:	50                   	push   eax
c0024b9f:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024ba5:	ff 35 30 df 02 c0    	push   DWORD PTR ds:0xc002df30
c0024bab:	e8 c2 ce fe ff       	call   c0011a72 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024bb0:	83 c4 14             	add    esp,0x14
c0024bb3:	53                   	push   ebx
c0024bb4:	e8 bb f4 fe ff       	call   c0014074 <PhysicalDisk::startCache()>
c0024bb9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024bbc:	e8 3b 17 ff ff       	call   c00162fc <createPartitionsForDisk(PhysicalDisk*)>
c0024bc1:	83 c4 14             	add    esp,0x14
c0024bc4:	31 c0                	xor    eax,eax
c0024bc6:	5b                   	pop    ebx
c0024bc7:	5e                   	pop    esi
c0024bc8:	c3                   	ret    
c0024bc9:	90                   	nop

c0024bca <SATA::SATA()>:
c0024bca:	83 ec 0c             	sub    esp,0xc
c0024bcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024bd1:	83 ec 04             	sub    esp,0x4
c0024bd4:	68 00 02 00 00       	push   0x200
c0024bd9:	68 d0 c6 02 c0       	push   0xc002c6d0
c0024bde:	50                   	push   eax
c0024bdf:	e8 28 f4 fe ff       	call   c001400c <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024be4:	83 c4 10             	add    esp,0x10
c0024be7:	ba 40 c7 02 c0       	mov    edx,0xc002c740
c0024bec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024bf0:	89 10                	mov    DWORD PTR [eax],edx
c0024bf2:	90                   	nop
c0024bf3:	83 c4 0c             	add    esp,0xc
c0024bf6:	c3                   	ret    
c0024bf7:	90                   	nop

c0024bf8 <SATA::access(unsigned long long, int, void*, bool)>:
c0024bf8:	55                   	push   ebp
c0024bf9:	57                   	push   edi
c0024bfa:	56                   	push   esi
c0024bfb:	53                   	push   ebx
c0024bfc:	83 ec 2c             	sub    esp,0x2c
c0024bff:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024c03:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024c07:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024c0b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024c0f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024c13:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024c18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024c1c:	7e 10                	jle    c0024c2e <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024c1e:	83 ec 0c             	sub    esp,0xc
c0024c21:	68 e0 c6 02 c0       	push   0xc002c6e0
c0024c26:	e8 5e 53 ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c0024c2b:	83 c4 10             	add    esp,0x10
c0024c2e:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024c34:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0024c3a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024c40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024c44:	89 d0                	mov    eax,edx
c0024c46:	c1 e0 07             	shl    eax,0x7
c0024c49:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024c4d:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024c57:	51                   	push   ecx
c0024c58:	8d 42 02             	lea    eax,[edx+0x2]
c0024c5b:	51                   	push   ecx
c0024c5c:	c1 e0 07             	shl    eax,0x7
c0024c5f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024c63:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024c67:	50                   	push   eax
c0024c68:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0024c6e:	e8 97 ef ff ff       	call   c0023c0a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024c73:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024c77:	83 c4 10             	add    esp,0x10
c0024c7a:	b8 01 00 00 00       	mov    eax,0x1
c0024c7f:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024c84:	0f 84 cb 01 00 00    	je     c0024e55 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024c8a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024c8e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024c92:	c1 e0 09             	shl    eax,0x9
c0024c95:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024c9a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024c9e:	74 0e                	je     c0024cae <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c0024ca0:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0024ca6:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0024caa:	89 c1                	mov    ecx,eax
c0024cac:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024cae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0024cb2:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0024cb8:	8d 42 02             	lea    eax,[edx+0x2]
c0024cbb:	c1 e0 07             	shl    eax,0x7
c0024cbe:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024cc2:	8b 00                	mov    eax,DWORD PTR [eax]
c0024cc4:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024cca:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024cd0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024cd4:	c1 e1 05             	shl    ecx,0x5
c0024cd7:	01 c8                	add    eax,ecx
c0024cd9:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0024cdd:	83 e1 01             	and    ecx,0x1
c0024ce0:	89 ce                	mov    esi,ecx
c0024ce2:	8a 08                	mov    cl,BYTE PTR [eax]
c0024ce4:	c1 e6 06             	shl    esi,0x6
c0024ce7:	83 e1 bf             	and    ecx,0xffffffbf
c0024cea:	09 f1                	or     ecx,esi
c0024cec:	88 08                	mov    BYTE PTR [eax],cl
c0024cee:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024cf0:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024cf6:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024cfc:	89 08                	mov    DWORD PTR [eax],ecx
c0024cfe:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0024d04:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0024d0a:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0024d10:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0024d13:	50                   	push   eax
c0024d14:	68 90 00 00 00       	push   0x90
c0024d19:	6a 00                	push   0x0
c0024d1b:	56                   	push   esi
c0024d1c:	e8 2f ba fd ff       	call   c0000750 <memset>
c0024d21:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024d27:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0024d2b:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0024d31:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0024d35:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024d39:	83 c4 10             	add    esp,0x10
c0024d3c:	48                   	dec    eax
c0024d3d:	25 ff ff 3f 00       	and    eax,0x3fffff
c0024d42:	89 c1                	mov    ecx,eax
c0024d44:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0024d4a:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024d4f:	09 c8                	or     eax,ecx
c0024d51:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0024d57:	66 8b 06             	mov    ax,WORD PTR [esi]
c0024d5a:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0024d61:	66 25 00 7f          	and    ax,0x7f00
c0024d65:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024d69:	66 0d 27 80          	or     ax,0x8027
c0024d6d:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0024d72:	66 89 06             	mov    WORD PTR [esi],ax
c0024d75:	19 c0                	sbb    eax,eax
c0024d77:	83 e0 f0             	and    eax,0xfffffff0
c0024d7a:	83 c0 35             	add    eax,0x35
c0024d7d:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0024d80:	89 e8                	mov    eax,ebp
c0024d82:	c1 e8 10             	shr    eax,0x10
c0024d85:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0024d88:	89 e8                	mov    eax,ebp
c0024d8a:	c1 e8 18             	shr    eax,0x18
c0024d8d:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0024d90:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0024d94:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0024d97:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024d9b:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0024d9e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024da2:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0024da6:	89 d6                	mov    esi,edx
c0024da8:	31 c0                	xor    eax,eax
c0024daa:	c1 e6 07             	shl    esi,0x7
c0024dad:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0024db1:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0024db7:	80 e1 88             	and    cl,0x88
c0024dba:	74 0a                	je     c0024dc6 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c0024dbc:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024dc1:	74 0a                	je     c0024dcd <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c0024dc3:	40                   	inc    eax
c0024dc4:	eb eb                	jmp    c0024db1 <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c0024dc6:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024dcb:	75 0a                	jne    c0024dd7 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0024dcd:	83 ec 0c             	sub    esp,0xc
c0024dd0:	68 19 c7 02 c0       	push   0xc002c719
c0024dd5:	eb 56                	jmp    c0024e2d <SATA::access(unsigned long long, int, void*, bool)+0x235>
c0024dd7:	b8 01 00 00 00       	mov    eax,0x1
c0024ddc:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024de0:	c1 e2 07             	shl    edx,0x7
c0024de3:	d3 e0                	shl    eax,cl
c0024de5:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0024de9:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0024def:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0024df5:	85 c8                	test   eax,ecx
c0024df7:	74 20                	je     c0024e19 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c0024df9:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0024dff:	0f ba e1 1e          	bt     ecx,0x1e
c0024e03:	73 ea                	jae    c0024def <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c0024e05:	83 ec 0c             	sub    esp,0xc
c0024e08:	68 27 c7 02 c0       	push   0xc002c727
c0024e0d:	e8 77 51 ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c0024e12:	83 c4 10             	add    esp,0x10
c0024e15:	31 c0                	xor    eax,eax
c0024e17:	eb 3c                	jmp    c0024e55 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024e19:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0024e1f:	0f ba e0 1e          	bt     eax,0x1e
c0024e23:	73 17                	jae    c0024e3c <SATA::access(unsigned long long, int, void*, bool)+0x244>
c0024e25:	83 ec 0c             	sub    esp,0xc
c0024e28:	68 27 c7 02 c0       	push   0xc002c727
c0024e2d:	e8 57 51 ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c0024e32:	83 c4 10             	add    esp,0x10
c0024e35:	b8 01 00 00 00       	mov    eax,0x1
c0024e3a:	eb 19                	jmp    c0024e55 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024e3c:	31 c0                	xor    eax,eax
c0024e3e:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024e43:	75 10                	jne    c0024e55 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024e45:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0024e4b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0024e4f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024e53:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024e55:	83 c4 2c             	add    esp,0x2c
c0024e58:	5b                   	pop    ebx
c0024e59:	5e                   	pop    esi
c0024e5a:	5f                   	pop    edi
c0024e5b:	5d                   	pop    ebp
c0024e5c:	c3                   	ret    
c0024e5d:	90                   	nop

c0024e5e <SATA::read(unsigned long long, int, void*)>:
c0024e5e:	57                   	push   edi
c0024e5f:	b8 04 00 00 00       	mov    eax,0x4
c0024e64:	56                   	push   esi
c0024e65:	53                   	push   ebx
c0024e66:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024e6a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024e6e:	8d 7a ff             	lea    edi,[edx-0x1]
c0024e71:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024e75:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024e79:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024e7f:	77 25                	ja     c0024ea6 <SATA::read(unsigned long long, int, void*)+0x48>
c0024e81:	b8 06 00 00 00       	mov    eax,0x6
c0024e86:	85 f6                	test   esi,esi
c0024e88:	74 1c                	je     c0024ea6 <SATA::read(unsigned long long, int, void*)+0x48>
c0024e8a:	50                   	push   eax
c0024e8b:	50                   	push   eax
c0024e8c:	6a 00                	push   0x0
c0024e8e:	56                   	push   esi
c0024e8f:	52                   	push   edx
c0024e90:	53                   	push   ebx
c0024e91:	51                   	push   ecx
c0024e92:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024e96:	e8 5d fd ff ff       	call   c0024bf8 <SATA::access(unsigned long long, int, void*, bool)>
c0024e9b:	83 c4 20             	add    esp,0x20
c0024e9e:	85 c0                	test   eax,eax
c0024ea0:	0f 95 c0             	setne  al
c0024ea3:	0f b6 c0             	movzx  eax,al
c0024ea6:	5b                   	pop    ebx
c0024ea7:	5e                   	pop    esi
c0024ea8:	5f                   	pop    edi
c0024ea9:	c3                   	ret    

c0024eaa <SATA::write(unsigned long long, int, void*)>:
c0024eaa:	55                   	push   ebp
c0024eab:	b8 04 00 00 00       	mov    eax,0x4
c0024eb0:	57                   	push   edi
c0024eb1:	56                   	push   esi
c0024eb2:	53                   	push   ebx
c0024eb3:	83 ec 0c             	sub    esp,0xc
c0024eb6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024eba:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024ebe:	8d 73 ff             	lea    esi,[ebx-0x1]
c0024ec1:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024ec5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0024ec9:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024ecf:	77 3d                	ja     c0024f0e <SATA::write(unsigned long long, int, void*)+0x64>
c0024ed1:	b8 06 00 00 00       	mov    eax,0x6
c0024ed6:	85 ed                	test   ebp,ebp
c0024ed8:	74 34                	je     c0024f0e <SATA::write(unsigned long long, int, void*)+0x64>
c0024eda:	c1 e3 09             	shl    ebx,0x9
c0024edd:	01 eb                	add    ebx,ebp
c0024edf:	89 d6                	mov    esi,edx
c0024ee1:	89 cf                	mov    edi,ecx
c0024ee3:	83 c6 01             	add    esi,0x1
c0024ee6:	83 d7 00             	adc    edi,0x0
c0024ee9:	50                   	push   eax
c0024eea:	50                   	push   eax
c0024eeb:	6a 01                	push   0x1
c0024eed:	55                   	push   ebp
c0024eee:	81 c5 00 02 00 00    	add    ebp,0x200
c0024ef4:	6a 01                	push   0x1
c0024ef6:	51                   	push   ecx
c0024ef7:	52                   	push   edx
c0024ef8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024efc:	e8 f7 fc ff ff       	call   c0024bf8 <SATA::access(unsigned long long, int, void*, bool)>
c0024f01:	83 c4 20             	add    esp,0x20
c0024f04:	89 f2                	mov    edx,esi
c0024f06:	89 f9                	mov    ecx,edi
c0024f08:	39 dd                	cmp    ebp,ebx
c0024f0a:	75 d3                	jne    c0024edf <SATA::write(unsigned long long, int, void*)+0x35>
c0024f0c:	31 c0                	xor    eax,eax
c0024f0e:	83 c4 0c             	add    esp,0xc
c0024f11:	5b                   	pop    ebx
c0024f12:	5e                   	pop    esi
c0024f13:	5f                   	pop    edi
c0024f14:	5d                   	pop    ebp
c0024f15:	c3                   	ret    

c0024f16 <SATAPI::write(unsigned long long, int, void*)>:
c0024f16:	b8 03 00 00 00       	mov    eax,0x3
c0024f1b:	c3                   	ret    

c0024f1c <SATAPI::close(int, int, void*)>:
c0024f1c:	83 ec 0c             	sub    esp,0xc
c0024f1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f23:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024f29:	85 c0                	test   eax,eax
c0024f2b:	74 0c                	je     c0024f39 <SATAPI::close(int, int, void*)+0x1d>
c0024f2d:	83 ec 0c             	sub    esp,0xc
c0024f30:	8b 10                	mov    edx,DWORD PTR [eax]
c0024f32:	50                   	push   eax
c0024f33:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024f36:	83 c4 10             	add    esp,0x10
c0024f39:	31 c0                	xor    eax,eax
c0024f3b:	83 c4 0c             	add    esp,0xc
c0024f3e:	c3                   	ret    
c0024f3f:	90                   	nop

c0024f40 <SATAPI::SATAPI()>:
c0024f40:	83 ec 0c             	sub    esp,0xc
c0024f43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f47:	83 ec 04             	sub    esp,0x4
c0024f4a:	68 00 08 00 00       	push   0x800
c0024f4f:	68 70 c7 02 c0       	push   0xc002c770
c0024f54:	50                   	push   eax
c0024f55:	e8 b2 f0 fe ff       	call   c001400c <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024f5a:	83 c4 10             	add    esp,0x10
c0024f5d:	ba 1c c8 02 c0       	mov    edx,0xc002c81c
c0024f62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f66:	89 10                	mov    DWORD PTR [eax],edx
c0024f68:	90                   	nop
c0024f69:	83 c4 0c             	add    esp,0xc
c0024f6c:	c3                   	ret    
c0024f6d:	90                   	nop

c0024f6e <SATAPI::diskRemoved()>:
c0024f6e:	83 ec 18             	sub    esp,0x18
c0024f71:	68 7c c7 02 c0       	push   0xc002c77c
c0024f76:	e8 22 d8 fe ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0024f7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024f7f:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0024f86:	83 c4 1c             	add    esp,0x1c
c0024f89:	c3                   	ret    

c0024f8a <SATAPI::diskInserted()>:
c0024f8a:	53                   	push   ebx
c0024f8b:	83 ec 14             	sub    esp,0x14
c0024f8e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024f92:	68 93 c7 02 c0       	push   0xc002c793
c0024f97:	e8 01 d8 fe ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0024f9c:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0024fa3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024fa6:	e8 c9 f0 fe ff       	call   c0014074 <PhysicalDisk::startCache()>
c0024fab:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024faf:	83 c4 18             	add    esp,0x18
c0024fb2:	5b                   	pop    ebx
c0024fb3:	e9 44 13 ff ff       	jmp    c00162fc <createPartitionsForDisk(PhysicalDisk*)>

c0024fb8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0024fb8:	55                   	push   ebp
c0024fb9:	57                   	push   edi
c0024fba:	56                   	push   esi
c0024fbb:	53                   	push   ebx
c0024fbc:	83 ec 34             	sub    esp,0x34
c0024fbf:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0024fc3:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024fc7:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0024fcb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024fcf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024fd3:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024fd9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024fdf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024fe3:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0024fe9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024fed:	c1 e0 07             	shl    eax,0x7
c0024ff0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024ff4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024ff8:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025002:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025006:	8d 58 02             	lea    ebx,[eax+0x2]
c0025009:	c1 e3 07             	shl    ebx,0x7
c002500c:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0025010:	53                   	push   ebx
c0025011:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0025017:	e8 ee eb ff ff       	call   c0023c0a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002501c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025020:	83 c4 10             	add    esp,0x10
c0025023:	b8 01 00 00 00       	mov    eax,0x1
c0025028:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c002502d:	0f 84 85 01 00 00    	je     c00251b8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025033:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025039:	8b 03                	mov    eax,DWORD PTR [ebx]
c002503b:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025041:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025047:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002504b:	c1 e1 05             	shl    ecx,0x5
c002504e:	01 c8                	add    eax,ecx
c0025050:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025052:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0025058:	81 c9 25 00 01 00    	or     ecx,0x10025
c002505e:	89 08                	mov    DWORD PTR [eax],ecx
c0025060:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025066:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c002506c:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025072:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0025075:	8d 7b 40             	lea    edi,[ebx+0x40]
c0025078:	50                   	push   eax
c0025079:	68 90 00 00 00       	push   0x90
c002507e:	6a 00                	push   0x0
c0025080:	53                   	push   ebx
c0025081:	e8 ca b6 fd ff       	call   c0000750 <memset>
c0025086:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c002508a:	b9 0c 00 00 00       	mov    ecx,0xc
c002508f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025091:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0025097:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c002509b:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00250a1:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00250a5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00250a9:	48                   	dec    eax
c00250aa:	25 ff ff 3f 00       	and    eax,0x3fffff
c00250af:	89 c1                	mov    ecx,eax
c00250b1:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00250b7:	25 00 00 c0 ff       	and    eax,0xffc00000
c00250bc:	09 c8                	or     eax,ecx
c00250be:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00250c4:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00250c7:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c00250ce:	66 25 00 7f          	and    ax,0x7f00
c00250d2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00250d6:	66 0d 27 80          	or     ax,0x8027
c00250da:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c00250de:	66 89 03             	mov    WORD PTR [ebx],ax
c00250e1:	89 d0                	mov    eax,edx
c00250e3:	c1 ea 18             	shr    edx,0x18
c00250e6:	c1 e8 10             	shr    eax,0x10
c00250e9:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c00250ec:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00250ef:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00250f3:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00250f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00250fa:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c00250fd:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0025101:	83 c4 10             	add    esp,0x10
c0025104:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0025108:	31 c0                	xor    eax,eax
c002510a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002510e:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c0025114:	80 e2 88             	and    dl,0x88
c0025117:	74 0a                	je     c0025123 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0025119:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002511e:	74 0a                	je     c002512a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0025120:	40                   	inc    eax
c0025121:	eb eb                	jmp    c002510e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0025123:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025128:	75 0f                	jne    c0025139 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c002512a:	83 ec 0c             	sub    esp,0xc
c002512d:	68 19 c7 02 c0       	push   0xc002c719
c0025132:	e8 52 4e ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c0025137:	eb 3f                	jmp    c0025178 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0025139:	ba 01 00 00 00       	mov    edx,0x1
c002513e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0025142:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025146:	d3 e2                	shl    edx,cl
c0025148:	c1 e0 07             	shl    eax,0x7
c002514b:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0025151:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025155:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c002515b:	85 ca                	test   edx,ecx
c002515d:	74 23                	je     c0025182 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c002515f:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0025165:	0f ba e1 1e          	bt     ecx,0x1e
c0025169:	73 ea                	jae    c0025155 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c002516b:	83 ec 0c             	sub    esp,0xc
c002516e:	68 ab c7 02 c0       	push   0xc002c7ab
c0025173:	e8 25 d6 fe ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0025178:	83 c4 10             	add    esp,0x10
c002517b:	b8 01 00 00 00       	mov    eax,0x1
c0025180:	eb 36                	jmp    c00251b8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025182:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0025188:	0f ba e0 1e          	bt     eax,0x1e
c002518c:	73 0a                	jae    c0025198 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c002518e:	83 ec 0c             	sub    esp,0xc
c0025191:	68 be c7 02 c0       	push   0xc002c7be
c0025196:	eb db                	jmp    c0025173 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0025198:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c002519d:	74 17                	je     c00251b6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c002519f:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00251a4:	74 10                	je     c00251b6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c00251a6:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c00251ac:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00251b0:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00251b4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00251b6:	31 c0                	xor    eax,eax
c00251b8:	83 c4 2c             	add    esp,0x2c
c00251bb:	5b                   	pop    ebx
c00251bc:	5e                   	pop    esi
c00251bd:	5f                   	pop    edi
c00251be:	5d                   	pop    ebp
c00251bf:	c3                   	ret    

c00251c0 <SATAPI::eject()>:
c00251c0:	57                   	push   edi
c00251c1:	b9 03 00 00 00       	mov    ecx,0x3
c00251c6:	53                   	push   ebx
c00251c7:	83 ec 14             	sub    esp,0x14
c00251ca:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00251ce:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00251d2:	fc                   	cld    
c00251d3:	31 c0                	xor    eax,eax
c00251d5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00251d7:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00251dc:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00251e1:	50                   	push   eax
c00251e2:	6a 00                	push   0x0
c00251e4:	6a 00                	push   0x0
c00251e6:	6a 00                	push   0x0
c00251e8:	6a 00                	push   0x0
c00251ea:	6a 02                	push   0x2
c00251ec:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00251f0:	50                   	push   eax
c00251f1:	53                   	push   ebx
c00251f2:	e8 c1 fd ff ff       	call   c0024fb8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00251f7:	83 c4 14             	add    esp,0x14
c00251fa:	53                   	push   ebx
c00251fb:	e8 6e fd ff ff       	call   c0024f6e <SATAPI::diskRemoved()>
c0025200:	83 c4 24             	add    esp,0x24
c0025203:	31 c0                	xor    eax,eax
c0025205:	5b                   	pop    ebx
c0025206:	5f                   	pop    edi
c0025207:	c3                   	ret    

c0025208 <SATAPI::detectMedia()>:
c0025208:	56                   	push   esi
c0025209:	53                   	push   ebx
c002520a:	83 ec 28             	sub    esp,0x28
c002520d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025211:	6a 0c                	push   0xc
c0025213:	6a 00                	push   0x0
c0025215:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025219:	56                   	push   esi
c002521a:	e8 31 b5 fd ff       	call   c0000750 <memset>
c002521f:	83 c4 0c             	add    esp,0xc
c0025222:	6a 00                	push   0x0
c0025224:	6a 00                	push   0x0
c0025226:	6a 00                	push   0x0
c0025228:	6a 00                	push   0x0
c002522a:	6a 00                	push   0x0
c002522c:	56                   	push   esi
c002522d:	53                   	push   ebx
c002522e:	e8 85 fd ff ff       	call   c0024fb8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025233:	83 c4 1c             	add    esp,0x1c
c0025236:	6a 0c                	push   0xc
c0025238:	6a 00                	push   0x0
c002523a:	56                   	push   esi
c002523b:	e8 10 b5 fd ff       	call   c0000750 <memset>
c0025240:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025245:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002524a:	83 c4 0c             	add    esp,0xc
c002524d:	6a 01                	push   0x1
c002524f:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025253:	50                   	push   eax
c0025254:	6a 00                	push   0x0
c0025256:	6a 00                	push   0x0
c0025258:	6a 12                	push   0x12
c002525a:	56                   	push   esi
c002525b:	53                   	push   ebx
c002525c:	e8 57 fd ff ff       	call   c0024fb8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025261:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025265:	83 c4 20             	add    esp,0x20
c0025268:	83 e0 7f             	and    eax,0x7f
c002526b:	3c 70                	cmp    al,0x70
c002526d:	74 15                	je     c0025284 <SATAPI::detectMedia()+0x7c>
c002526f:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025276:	75 0c                	jne    c0025284 <SATAPI::detectMedia()+0x7c>
c0025278:	83 ec 0c             	sub    esp,0xc
c002527b:	53                   	push   ebx
c002527c:	e8 09 fd ff ff       	call   c0024f8a <SATAPI::diskInserted()>
c0025281:	83 c4 10             	add    esp,0x10
c0025284:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025288:	83 e0 0f             	and    eax,0xf
c002528b:	3c 02                	cmp    al,0x2
c002528d:	75 1b                	jne    c00252aa <SATAPI::detectMedia()+0xa2>
c002528f:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025294:	75 2d                	jne    c00252c3 <SATAPI::detectMedia()+0xbb>
c0025296:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002529d:	74 24                	je     c00252c3 <SATAPI::detectMedia()+0xbb>
c002529f:	83 ec 0c             	sub    esp,0xc
c00252a2:	53                   	push   ebx
c00252a3:	e8 c6 fc ff ff       	call   c0024f6e <SATAPI::diskRemoved()>
c00252a8:	eb 16                	jmp    c00252c0 <SATAPI::detectMedia()+0xb8>
c00252aa:	84 c0                	test   al,al
c00252ac:	75 15                	jne    c00252c3 <SATAPI::detectMedia()+0xbb>
c00252ae:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00252b5:	75 0c                	jne    c00252c3 <SATAPI::detectMedia()+0xbb>
c00252b7:	83 ec 0c             	sub    esp,0xc
c00252ba:	53                   	push   ebx
c00252bb:	e8 ca fc ff ff       	call   c0024f8a <SATAPI::diskInserted()>
c00252c0:	83 c4 10             	add    esp,0x10
c00252c3:	83 c4 24             	add    esp,0x24
c00252c6:	5b                   	pop    ebx
c00252c7:	5e                   	pop    esi
c00252c8:	c3                   	ret    
c00252c9:	90                   	nop

c00252ca <SATAPI::open(int, int, void*)>:
c00252ca:	56                   	push   esi
c00252cb:	53                   	push   ebx
c00252cc:	50                   	push   eax
c00252cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00252d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00252d5:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00252df:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00252e5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00252ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00252f3:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00252fd:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025303:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002530a:	e8 86 a6 fe ff       	call   c000f995 <Phys::allocatePage()>
c002530f:	89 c6                	mov    esi,eax
c0025311:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025317:	81 c6 00 10 00 00    	add    esi,0x1000
c002531d:	e8 73 a6 fe ff       	call   c000f995 <Phys::allocatePage()>
c0025322:	39 c6                	cmp    esi,eax
c0025324:	74 10                	je     c0025336 <SATAPI::open(int, int, void*)+0x6c>
c0025326:	83 ec 0c             	sub    esp,0xc
c0025329:	68 d3 c7 02 c0       	push   0xc002c7d3
c002532e:	e8 56 4c ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c0025333:	83 c4 10             	add    esp,0x10
c0025336:	83 ec 0c             	sub    esp,0xc
c0025339:	6a 02                	push   0x2
c002533b:	e8 df be fe ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0025340:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025346:	6a 03                	push   0x3
c0025348:	50                   	push   eax
c0025349:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c002534f:	ff 35 30 df 02 c0    	push   DWORD PTR ds:0xc002df30
c0025355:	e8 18 c7 fe ff       	call   c0011a72 <VAS::mapPage(unsigned long, unsigned long, int)>
c002535a:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025361:	83 c4 14             	add    esp,0x14
c0025364:	53                   	push   ebx
c0025365:	e8 9e fe ff ff       	call   c0025208 <SATAPI::detectMedia()>
c002536a:	83 c4 14             	add    esp,0x14
c002536d:	31 c0                	xor    eax,eax
c002536f:	5b                   	pop    ebx
c0025370:	5e                   	pop    esi
c0025371:	c3                   	ret    

c0025372 <SATAPI::read(unsigned long long, int, void*)>:
c0025372:	55                   	push   ebp
c0025373:	57                   	push   edi
c0025374:	56                   	push   esi
c0025375:	53                   	push   ebx
c0025376:	83 ec 1c             	sub    esp,0x1c
c0025379:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002537d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025381:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025385:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002538c:	74 19                	je     c00253a7 <SATAPI::read(unsigned long long, int, void*)+0x35>
c002538e:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025393:	7e 2e                	jle    c00253c3 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025395:	83 ec 0c             	sub    esp,0xc
c0025398:	68 e9 c7 02 c0       	push   0xc002c7e9
c002539d:	e8 e7 4b ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c00253a2:	83 c4 10             	add    esp,0x10
c00253a5:	eb 1c                	jmp    c00253c3 <SATAPI::read(unsigned long long, int, void*)+0x51>
c00253a7:	83 ec 0c             	sub    esp,0xc
c00253aa:	55                   	push   ebp
c00253ab:	e8 58 fe ff ff       	call   c0025208 <SATAPI::detectMedia()>
c00253b0:	83 c4 10             	add    esp,0x10
c00253b3:	b8 02 00 00 00       	mov    eax,0x2
c00253b8:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00253bf:	75 cd                	jne    c002538e <SATAPI::read(unsigned long long, int, void*)+0x1c>
c00253c1:	eb 49                	jmp    c002540c <SATAPI::read(unsigned long long, int, void*)+0x9a>
c00253c3:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00253c7:	b9 03 00 00 00       	mov    ecx,0x3
c00253cc:	fc                   	cld    
c00253cd:	31 c0                	xor    eax,eax
c00253cf:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00253d1:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00253d6:	89 d8                	mov    eax,ebx
c00253d8:	86 e0                	xchg   al,ah
c00253da:	c1 c0 10             	rol    eax,0x10
c00253dd:	86 e0                	xchg   al,ah
c00253df:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c00253e3:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c00253e7:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00253eb:	50                   	push   eax
c00253ec:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00253f0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00253f4:	56                   	push   esi
c00253f5:	53                   	push   ebx
c00253f6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00253fa:	c1 e0 0b             	shl    eax,0xb
c00253fd:	50                   	push   eax
c00253fe:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025402:	50                   	push   eax
c0025403:	55                   	push   ebp
c0025404:	e8 af fb ff ff       	call   c0024fb8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025409:	83 c4 20             	add    esp,0x20
c002540c:	83 c4 1c             	add    esp,0x1c
c002540f:	5b                   	pop    ebx
c0025410:	5e                   	pop    esi
c0025411:	5f                   	pop    edi
c0025412:	5d                   	pop    ebp
c0025413:	c3                   	ret    

c0025414 <AVX::open(int, int, void*)>:
c0025414:	83 ec 0c             	sub    esp,0xc
c0025417:	e8 3c 11 00 00       	call   c0026558 <avxInit>
c002541c:	b8 00 00 00 00       	mov    eax,0x0
c0025421:	83 c4 0c             	add    esp,0xc
c0025424:	c3                   	ret    
c0025425:	90                   	nop

c0025426 <AVX::close(int, int, void*)>:
c0025426:	83 ec 0c             	sub    esp,0xc
c0025429:	e8 2b 11 00 00       	call   c0026559 <avxClose>
c002542e:	b8 00 00 00 00       	mov    eax,0x0
c0025433:	83 c4 0c             	add    esp,0xc
c0025436:	c3                   	ret    
c0025437:	90                   	nop

c0025438 <AVX::available()>:
c0025438:	83 ec 0c             	sub    esp,0xc
c002543b:	e8 10 11 00 00       	call   c0026550 <avxDetect>
c0025440:	85 c0                	test   eax,eax
c0025442:	0f 95 c0             	setne  al
c0025445:	83 c4 0c             	add    esp,0xc
c0025448:	c3                   	ret    
c0025449:	90                   	nop

c002544a <AVX::save(void*)>:
c002544a:	83 ec 0c             	sub    esp,0xc
c002544d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025451:	83 ec 0c             	sub    esp,0xc
c0025454:	50                   	push   eax
c0025455:	e8 fc 10 00 00       	call   c0026556 <avxSave>
c002545a:	83 c4 10             	add    esp,0x10
c002545d:	90                   	nop
c002545e:	83 c4 0c             	add    esp,0xc
c0025461:	c3                   	ret    

c0025462 <AVX::load(void*)>:
c0025462:	83 ec 0c             	sub    esp,0xc
c0025465:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025469:	83 ec 0c             	sub    esp,0xc
c002546c:	50                   	push   eax
c002546d:	e8 e5 10 00 00       	call   c0026557 <avxLoad>
c0025472:	83 c4 10             	add    esp,0x10
c0025475:	90                   	nop
c0025476:	83 c4 0c             	add    esp,0xc
c0025479:	c3                   	ret    

c002547a <AVX::AVX()>:
c002547a:	83 ec 0c             	sub    esp,0xc
c002547d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025481:	83 ec 08             	sub    esp,0x8
c0025484:	68 4c c8 02 c0       	push   0xc002c84c
c0025489:	50                   	push   eax
c002548a:	e8 5b ec fe ff       	call   c00140ea <FPU::FPU(char const*)>
c002548f:	83 c4 10             	add    esp,0x10
c0025492:	ba 5c c8 02 c0       	mov    edx,0xc002c85c
c0025497:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002549b:	89 10                	mov    DWORD PTR [eax],edx
c002549d:	90                   	nop
c002549e:	83 c4 0c             	add    esp,0xc
c00254a1:	c3                   	ret    

c00254a2 <MMX::available()>:
c00254a2:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c00254a7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00254ad:	83 e0 20             	and    eax,0x20
c00254b0:	84 c0                	test   al,al
c00254b2:	0f 95 c0             	setne  al
c00254b5:	c3                   	ret    

c00254b6 <MMX::open(int, int, void*)>:
c00254b6:	83 ec 0c             	sub    esp,0xc
c00254b9:	e8 24 11 00 00       	call   c00265e2 <x87Init>
c00254be:	b8 00 00 00 00       	mov    eax,0x0
c00254c3:	83 c4 0c             	add    esp,0xc
c00254c6:	c3                   	ret    
c00254c7:	90                   	nop

c00254c8 <MMX::close(int, int, void*)>:
c00254c8:	83 ec 0c             	sub    esp,0xc
c00254cb:	e8 2c 11 00 00       	call   c00265fc <x87Close>
c00254d0:	b8 00 00 00 00       	mov    eax,0x0
c00254d5:	83 c4 0c             	add    esp,0xc
c00254d8:	c3                   	ret    
c00254d9:	90                   	nop

c00254da <MMX::save(void*)>:
c00254da:	83 ec 0c             	sub    esp,0xc
c00254dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00254e1:	83 ec 0c             	sub    esp,0xc
c00254e4:	50                   	push   eax
c00254e5:	e8 e7 10 00 00       	call   c00265d1 <x87Save>
c00254ea:	83 c4 10             	add    esp,0x10
c00254ed:	90                   	nop
c00254ee:	83 c4 0c             	add    esp,0xc
c00254f1:	c3                   	ret    

c00254f2 <MMX::load(void*)>:
c00254f2:	83 ec 0c             	sub    esp,0xc
c00254f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00254f9:	83 ec 0c             	sub    esp,0xc
c00254fc:	50                   	push   eax
c00254fd:	e8 d8 10 00 00       	call   c00265da <x87Load>
c0025502:	83 c4 10             	add    esp,0x10
c0025505:	90                   	nop
c0025506:	83 c4 0c             	add    esp,0xc
c0025509:	c3                   	ret    

c002550a <MMX::MMX()>:
c002550a:	83 ec 0c             	sub    esp,0xc
c002550d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025511:	83 ec 08             	sub    esp,0x8
c0025514:	68 8c c8 02 c0       	push   0xc002c88c
c0025519:	50                   	push   eax
c002551a:	e8 cb eb fe ff       	call   c00140ea <FPU::FPU(char const*)>
c002551f:	83 c4 10             	add    esp,0x10
c0025522:	ba 9c c8 02 c0       	mov    edx,0xc002c89c
c0025527:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002552b:	89 10                	mov    DWORD PTR [eax],edx
c002552d:	90                   	nop
c002552e:	83 c4 0c             	add    esp,0xc
c0025531:	c3                   	ret    

c0025532 <SSE::open(int, int, void*)>:
c0025532:	83 ec 0c             	sub    esp,0xc
c0025535:	e8 5a 10 00 00       	call   c0026594 <sseInit>
c002553a:	b8 00 00 00 00       	mov    eax,0x0
c002553f:	83 c4 0c             	add    esp,0xc
c0025542:	c3                   	ret    
c0025543:	90                   	nop

c0025544 <SSE::close(int, int, void*)>:
c0025544:	83 ec 0c             	sub    esp,0xc
c0025547:	e8 58 10 00 00       	call   c00265a4 <sseClose>
c002554c:	b8 00 00 00 00       	mov    eax,0x0
c0025551:	83 c4 0c             	add    esp,0xc
c0025554:	c3                   	ret    
c0025555:	90                   	nop

c0025556 <SSE::available()>:
c0025556:	83 ec 1c             	sub    esp,0x1c
c0025559:	e8 12 10 00 00       	call   c0026570 <absolutelyNoChanceInHell>
c002555e:	85 c0                	test   eax,eax
c0025560:	0f 95 c0             	setne  al
c0025563:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025567:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002556b:	83 c4 1c             	add    esp,0x1c
c002556e:	c3                   	ret    
c002556f:	90                   	nop

c0025570 <SSE::save(void*)>:
c0025570:	83 ec 0c             	sub    esp,0xc
c0025573:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025577:	83 ec 0c             	sub    esp,0xc
c002557a:	50                   	push   eax
c002557b:	e8 08 10 00 00       	call   c0026588 <sseSave>
c0025580:	83 c4 10             	add    esp,0x10
c0025583:	90                   	nop
c0025584:	83 c4 0c             	add    esp,0xc
c0025587:	c3                   	ret    

c0025588 <SSE::load(void*)>:
c0025588:	83 ec 0c             	sub    esp,0xc
c002558b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002558f:	83 ec 0c             	sub    esp,0xc
c0025592:	50                   	push   eax
c0025593:	e8 f6 0f 00 00       	call   c002658e <sseLoad>
c0025598:	83 c4 10             	add    esp,0x10
c002559b:	90                   	nop
c002559c:	83 c4 0c             	add    esp,0xc
c002559f:	c3                   	ret    

c00255a0 <SSE::SSE()>:
c00255a0:	83 ec 0c             	sub    esp,0xc
c00255a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255a7:	83 ec 08             	sub    esp,0x8
c00255aa:	68 cc c8 02 c0       	push   0xc002c8cc
c00255af:	50                   	push   eax
c00255b0:	e8 35 eb fe ff       	call   c00140ea <FPU::FPU(char const*)>
c00255b5:	83 c4 10             	add    esp,0x10
c00255b8:	ba dc c8 02 c0       	mov    edx,0xc002c8dc
c00255bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255c1:	89 10                	mov    DWORD PTR [eax],edx
c00255c3:	90                   	nop
c00255c4:	83 c4 0c             	add    esp,0xc
c00255c7:	c3                   	ret    

c00255c8 <x87::open(int, int, void*)>:
c00255c8:	83 ec 0c             	sub    esp,0xc
c00255cb:	e8 12 10 00 00       	call   c00265e2 <x87Init>
c00255d0:	b8 00 00 00 00       	mov    eax,0x0
c00255d5:	83 c4 0c             	add    esp,0xc
c00255d8:	c3                   	ret    
c00255d9:	90                   	nop

c00255da <x87::close(int, int, void*)>:
c00255da:	83 ec 0c             	sub    esp,0xc
c00255dd:	e8 1a 10 00 00       	call   c00265fc <x87Close>
c00255e2:	b8 00 00 00 00       	mov    eax,0x0
c00255e7:	83 c4 0c             	add    esp,0xc
c00255ea:	c3                   	ret    
c00255eb:	90                   	nop

c00255ec <x87::available()>:
c00255ec:	83 ec 0c             	sub    esp,0xc
c00255ef:	e8 c2 0f 00 00       	call   c00265b6 <x87Detect>
c00255f4:	85 c0                	test   eax,eax
c00255f6:	0f 95 c0             	setne  al
c00255f9:	83 c4 0c             	add    esp,0xc
c00255fc:	c3                   	ret    
c00255fd:	90                   	nop

c00255fe <x87::save(void*)>:
c00255fe:	83 ec 0c             	sub    esp,0xc
c0025601:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025605:	83 ec 0c             	sub    esp,0xc
c0025608:	50                   	push   eax
c0025609:	e8 c3 0f 00 00       	call   c00265d1 <x87Save>
c002560e:	83 c4 10             	add    esp,0x10
c0025611:	90                   	nop
c0025612:	83 c4 0c             	add    esp,0xc
c0025615:	c3                   	ret    

c0025616 <x87::load(void*)>:
c0025616:	83 ec 0c             	sub    esp,0xc
c0025619:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002561d:	83 ec 0c             	sub    esp,0xc
c0025620:	50                   	push   eax
c0025621:	e8 b4 0f 00 00       	call   c00265da <x87Load>
c0025626:	83 c4 10             	add    esp,0x10
c0025629:	90                   	nop
c002562a:	83 c4 0c             	add    esp,0xc
c002562d:	c3                   	ret    

c002562e <x87::x87()>:
c002562e:	83 ec 0c             	sub    esp,0xc
c0025631:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025635:	83 ec 08             	sub    esp,0x8
c0025638:	68 0c c9 02 c0       	push   0xc002c90c
c002563d:	50                   	push   eax
c002563e:	e8 a7 ea fe ff       	call   c00140ea <FPU::FPU(char const*)>
c0025643:	83 c4 10             	add    esp,0x10
c0025646:	ba 1c c9 02 c0       	mov    edx,0xc002c91c
c002564b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002564f:	89 10                	mov    DWORD PTR [eax],edx
c0025651:	90                   	nop
c0025652:	83 c4 0c             	add    esp,0xc
c0025655:	c3                   	ret    

c0025656 <APIC::disable()>:
c0025656:	90                   	nop
c0025657:	c3                   	ret    

c0025658 <APIC::close(int, int, void*)>:
c0025658:	55                   	push   ebp
c0025659:	89 e5                	mov    ebp,esp
c002565b:	83 ec 08             	sub    esp,0x8
c002565e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025661:	8b 00                	mov    eax,DWORD PTR [eax]
c0025663:	83 c0 3c             	add    eax,0x3c
c0025666:	8b 00                	mov    eax,DWORD PTR [eax]
c0025668:	83 ec 0c             	sub    esp,0xc
c002566b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002566e:	ff d0                	call   eax
c0025670:	83 c4 10             	add    esp,0x10
c0025673:	b8 00 00 00 00       	mov    eax,0x0
c0025678:	c9                   	leave  
c0025679:	c3                   	ret    

c002567a <IOAPIC::close(int, int, void*)>:
c002567a:	b8 00 00 00 00       	mov    eax,0x0
c002567f:	c3                   	ret    

c0025680 <APIC::io_wait()>:
c0025680:	eb 00                	jmp    c0025682 <APIC::io_wait()+0x2>
c0025682:	eb 00                	jmp    c0025684 <APIC::io_wait()+0x4>
c0025684:	90                   	nop
c0025685:	c3                   	ret    

c0025686 <APIC::getBase()>:
c0025686:	55                   	push   ebp
c0025687:	89 e5                	mov    ebp,esp
c0025689:	83 ec 18             	sub    esp,0x18
c002568c:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c0025691:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025697:	83 e0 08             	and    eax,0x8
c002569a:	84 c0                	test   al,al
c002569c:	75 07                	jne    c00256a5 <APIC::getBase()+0x1f>
c002569e:	b8 00 00 00 00       	mov    eax,0x0
c00256a3:	eb 21                	jmp    c00256c6 <APIC::getBase()+0x40>
c00256a5:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c00256aa:	83 ec 08             	sub    esp,0x8
c00256ad:	6a 1b                	push   0x1b
c00256af:	50                   	push   eax
c00256b0:	e8 8b 94 fe ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c00256b5:	83 c4 10             	add    esp,0x10
c00256b8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00256bb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00256be:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00256c1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00256c6:	c9                   	leave  
c00256c7:	c3                   	ret    

c00256c8 <APIC::eoi(unsigned char)>:
c00256c8:	55                   	push   ebp
c00256c9:	89 e5                	mov    ebp,esp
c00256cb:	83 ec 28             	sub    esp,0x28
c00256ce:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00256d1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00256d4:	83 ec 0c             	sub    esp,0xc
c00256d7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00256da:	e8 a7 ff ff ff       	call   c0025686 <APIC::getBase()>
c00256df:	83 c4 10             	add    esp,0x10
c00256e2:	05 b0 00 00 00       	add    eax,0xb0
c00256e7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00256ea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00256ed:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00256f3:	90                   	nop
c00256f4:	c9                   	leave  
c00256f5:	c3                   	ret    

c00256f6 <APIC::open(int, int, void*)>:
c00256f6:	55                   	push   ebp
c00256f7:	89 e5                	mov    ebp,esp
c00256f9:	57                   	push   edi
c00256fa:	56                   	push   esi
c00256fb:	53                   	push   ebx
c00256fc:	83 ec 2c             	sub    esp,0x2c
c00256ff:	83 ec 0c             	sub    esp,0xc
c0025702:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025705:	e8 7c ff ff ff       	call   c0025686 <APIC::getBase()>
c002570a:	83 c4 10             	add    esp,0x10
c002570d:	89 c2                	mov    edx,eax
c002570f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025712:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025718:	0f b6 f8             	movzx  edi,al
c002571b:	89 d0                	mov    eax,edx
c002571d:	ba 00 00 00 00       	mov    edx,0x0
c0025722:	89 c1                	mov    ecx,eax
c0025724:	80 e5 ff             	and    ch,0xff
c0025727:	89 cb                	mov    ebx,ecx
c0025729:	0f b6 f2             	movzx  esi,dl
c002572c:	89 d8                	mov    eax,ebx
c002572e:	89 f2                	mov    edx,esi
c0025730:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025733:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025736:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002573a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002573e:	83 e0 00             	and    eax,0x0
c0025741:	09 d0                	or     eax,edx
c0025743:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025747:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002574a:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025750:	8d 50 01             	lea    edx,[eax+0x1]
c0025753:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025756:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002575c:	0f b6 d0             	movzx  edx,al
c002575f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025762:	83 c2 08             	add    edx,0x8
c0025765:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025769:	0f b6 c9             	movzx  ecx,cl
c002576c:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025772:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025776:	83 ec 0c             	sub    esp,0xc
c0025779:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002577c:	e8 05 ff ff ff       	call   c0025686 <APIC::getBase()>
c0025781:	83 c4 10             	add    esp,0x10
c0025784:	05 f0 00 00 00       	add    eax,0xf0
c0025789:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002578c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002578f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025791:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025794:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c002579b:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00257a2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00257a5:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00257a8:	89 10                	mov    DWORD PTR [eax],edx
c00257aa:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00257b1:	a1 70 e6 02 c0       	mov    eax,ds:0xc002e670
c00257b6:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00257b9:	7d 7c                	jge    c0025837 <APIC::open(int, int, void*)+0x141>
c00257bb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00257be:	8b 04 85 80 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1980]
c00257c5:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00257c8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00257cb:	8b 04 85 80 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1980]
c00257d2:	c1 e8 08             	shr    eax,0x8
c00257d5:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00257d9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00257dc:	8b 04 85 80 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1980]
c00257e3:	c1 e8 18             	shr    eax,0x18
c00257e6:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00257e9:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00257ed:	75 40                	jne    c002582f <APIC::open(int, int, void*)+0x139>
c00257ef:	83 ec 0c             	sub    esp,0xc
c00257f2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257f5:	e8 8c fe ff ff       	call   c0025686 <APIC::getBase()>
c00257fa:	83 c4 10             	add    esp,0x10
c00257fd:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025801:	75 07                	jne    c002580a <APIC::open(int, int, void*)+0x114>
c0025803:	ba 60 03 00 00       	mov    edx,0x360
c0025808:	eb 05                	jmp    c002580f <APIC::open(int, int, void*)+0x119>
c002580a:	ba 50 03 00 00       	mov    edx,0x350
c002580f:	01 d0                	add    eax,edx
c0025811:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025814:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025817:	8b 00                	mov    eax,DWORD PTR [eax]
c0025819:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002581c:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025823:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025827:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002582a:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002582d:	89 10                	mov    DWORD PTR [eax],edx
c002582f:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0025832:	e9 7a ff ff ff       	jmp    c00257b1 <APIC::open(int, int, void*)+0xbb>
c0025837:	b8 00 00 00 00       	mov    eax,0x0
c002583c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002583f:	5b                   	pop    ebx
c0025840:	5e                   	pop    esi
c0025841:	5f                   	pop    edi
c0025842:	5d                   	pop    ebp
c0025843:	c3                   	ret    

c0025844 <IOAPIC::IOAPIC()>:
c0025844:	83 ec 0c             	sub    esp,0xc
c0025847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002584b:	83 ec 08             	sub    esp,0x8
c002584e:	68 4c c9 02 c0       	push   0xc002c94c
c0025853:	50                   	push   eax
c0025854:	e8 81 e5 fe ff       	call   c0013dda <Device::Device(char const*)>
c0025859:	83 c4 10             	add    esp,0x10
c002585c:	ba 74 ca 02 c0       	mov    edx,0xc002ca74
c0025861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025865:	89 10                	mov    DWORD PTR [eax],edx
c0025867:	90                   	nop
c0025868:	83 c4 0c             	add    esp,0xc
c002586b:	c3                   	ret    

c002586c <APIC::APIC()>:
c002586c:	53                   	push   ebx
c002586d:	83 ec 18             	sub    esp,0x18
c0025870:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025874:	83 ec 08             	sub    esp,0x8
c0025877:	68 54 c9 02 c0       	push   0xc002c954
c002587c:	50                   	push   eax
c002587d:	e8 c2 ec fe ff       	call   c0014544 <InterruptController::InterruptController(char const*)>
c0025882:	83 c4 10             	add    esp,0x10
c0025885:	ba 2c ca 02 c0       	mov    edx,0xc002ca2c
c002588a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002588e:	89 10                	mov    DWORD PTR [eax],edx
c0025890:	a0 40 01 03 c0       	mov    al,ds:0xc0030140
c0025895:	83 f0 01             	xor    eax,0x1
c0025898:	84 c0                	test   al,al
c002589a:	0f 84 a1 00 00 00    	je     c0025941 <APIC::APIC()+0xd5>
c00258a0:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00258a5:	a0 20 e7 02 c0       	mov    al,ds:0xc002e720
c00258aa:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00258ae:	0f 83 86 00 00 00    	jae    c002593a <APIC::APIC()+0xce>
c00258b4:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00258bc:	83 ec 0c             	sub    esp,0xc
c00258bf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00258c3:	e8 d1 9c fe ff       	call   c000f599 <malloc>
c00258c8:	83 c4 10             	add    esp,0x10
c00258cb:	89 c3                	mov    ebx,eax
c00258cd:	83 ec 0c             	sub    esp,0xc
c00258d0:	53                   	push   ebx
c00258d1:	e8 6e ff ff ff       	call   c0025844 <IOAPIC::IOAPIC()>
c00258d6:	83 c4 10             	add    esp,0x10
c00258d9:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00258dd:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00258e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00258e6:	89 14 85 20 01 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfee0],edx
c00258ed:	a1 00 01 03 c0       	mov    eax,ds:0xc0030100
c00258f2:	40                   	inc    eax
c00258f3:	a3 00 01 03 c0       	mov    ds:0xc0030100,eax
c00258f8:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c00258fd:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025903:	83 ec 08             	sub    esp,0x8
c0025906:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002590a:	50                   	push   eax
c002590b:	e8 c6 e2 fe ff       	call   c0013bd6 <Device::addChild(Device*)>
c0025910:	83 c4 10             	add    esp,0x10
c0025913:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025917:	8b 00                	mov    eax,DWORD PTR [eax]
c0025919:	83 c0 08             	add    eax,0x8
c002591c:	8b 00                	mov    eax,DWORD PTR [eax]
c002591e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025923:	6a 00                	push   0x0
c0025925:	6a 00                	push   0x0
c0025927:	52                   	push   edx
c0025928:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002592c:	ff d0                	call   eax
c002592e:	83 c4 10             	add    esp,0x10
c0025931:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025935:	e9 6b ff ff ff       	jmp    c00258a5 <APIC::APIC()+0x39>
c002593a:	c6 05 40 01 03 c0 01 	mov    BYTE PTR ds:0xc0030140,0x1
c0025941:	90                   	nop
c0025942:	83 c4 18             	add    esp,0x18
c0025945:	5b                   	pop    ebx
c0025946:	c3                   	ret    
c0025947:	90                   	nop

c0025948 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025948:	55                   	push   ebp
c0025949:	89 e5                	mov    ebp,esp
c002594b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002594e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025954:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025957:	72 1d                	jb     c0025976 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025959:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002595c:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025962:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025965:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002596b:	01 d0                	add    eax,edx
c002596d:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025970:	73 04                	jae    c0025976 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025972:	b0 01                	mov    al,0x1
c0025974:	eb 02                	jmp    c0025978 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025976:	b0 00                	mov    al,0x0
c0025978:	5d                   	pop    ebp
c0025979:	c3                   	ret    

c002597a <IOAPIC::read(int)>:
c002597a:	55                   	push   ebp
c002597b:	89 e5                	mov    ebp,esp
c002597d:	83 ec 10             	sub    esp,0x10
c0025980:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025983:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025989:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002598c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002598f:	0f b6 d0             	movzx  edx,al
c0025992:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025995:	89 10                	mov    DWORD PTR [eax],edx
c0025997:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002599a:	83 c0 10             	add    eax,0x10
c002599d:	8b 00                	mov    eax,DWORD PTR [eax]
c002599f:	c9                   	leave  
c00259a0:	c3                   	ret    
c00259a1:	90                   	nop

c00259a2 <IOAPIC::open(int, int, void*)>:
c00259a2:	55                   	push   ebp
c00259a3:	89 e5                	mov    ebp,esp
c00259a5:	57                   	push   edi
c00259a6:	56                   	push   esi
c00259a7:	53                   	push   ebx
c00259a8:	83 ec 0c             	sub    esp,0xc
c00259ab:	83 ec 0c             	sub    esp,0xc
c00259ae:	68 7f c9 02 c0       	push   0xc002c97f
c00259b3:	e8 e5 cd fe ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00259b8:	83 c4 10             	add    esp,0x10
c00259bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259be:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00259c1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00259c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259ca:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00259d0:	8b 14 85 60 e7 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd18a0]
c00259d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259da:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00259e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259e3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00259e9:	8b 14 85 e0 e7 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1820]
c00259f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259f3:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00259f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259fc:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025a02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a05:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025a0b:	0f b6 f8             	movzx  edi,al
c0025a0e:	89 d0                	mov    eax,edx
c0025a10:	ba 00 00 00 00       	mov    edx,0x0
c0025a15:	89 c1                	mov    ecx,eax
c0025a17:	80 e5 ff             	and    ch,0xff
c0025a1a:	89 cb                	mov    ebx,ecx
c0025a1c:	0f b6 f2             	movzx  esi,dl
c0025a1f:	89 d8                	mov    eax,ebx
c0025a21:	89 f2                	mov    edx,esi
c0025a23:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025a26:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025a29:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025a2d:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025a31:	83 e0 00             	and    eax,0x0
c0025a34:	09 d0                	or     eax,edx
c0025a36:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025a3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a3d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025a43:	8d 50 01             	lea    edx,[eax+0x1]
c0025a46:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025a49:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025a4f:	0f b6 d0             	movzx  edx,al
c0025a52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a55:	83 c2 08             	add    edx,0x8
c0025a58:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025a5c:	0f b6 c9             	movzx  ecx,cl
c0025a5f:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025a65:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025a69:	83 ec 08             	sub    esp,0x8
c0025a6c:	6a 01                	push   0x1
c0025a6e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025a71:	e8 04 ff ff ff       	call   c002597a <IOAPIC::read(int)>
c0025a76:	83 c4 10             	add    esp,0x10
c0025a79:	c1 f8 10             	sar    eax,0x10
c0025a7c:	0f b6 c0             	movzx  eax,al
c0025a7f:	8d 50 01             	lea    edx,[eax+0x1]
c0025a82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a85:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025a8b:	b8 00 00 00 00       	mov    eax,0x0
c0025a90:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025a93:	5b                   	pop    ebx
c0025a94:	5e                   	pop    esi
c0025a95:	5f                   	pop    edi
c0025a96:	5d                   	pop    ebp
c0025a97:	c3                   	ret    

c0025a98 <IOAPIC::write(int, int)>:
c0025a98:	55                   	push   ebp
c0025a99:	89 e5                	mov    ebp,esp
c0025a9b:	83 ec 10             	sub    esp,0x10
c0025a9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025aa1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025aa7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025aaa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025aad:	0f b6 d0             	movzx  edx,al
c0025ab0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025ab3:	89 10                	mov    DWORD PTR [eax],edx
c0025ab5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025ab8:	8d 50 10             	lea    edx,[eax+0x10]
c0025abb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025abe:	89 02                	mov    DWORD PTR [edx],eax
c0025ac0:	90                   	nop
c0025ac1:	c9                   	leave  
c0025ac2:	c3                   	ret    
c0025ac3:	90                   	nop

c0025ac4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025ac4:	55                   	push   ebp
c0025ac5:	89 e5                	mov    ebp,esp
c0025ac7:	53                   	push   ebx
c0025ac8:	83 ec 2c             	sub    esp,0x2c
c0025acb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ace:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025ad1:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025ad4:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025ad7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025ada:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025add:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025ae0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025ae3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025ae6:	88 d8                	mov    al,bl
c0025ae8:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025aeb:	88 c8                	mov    al,cl
c0025aed:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025af0:	88 d0                	mov    al,dl
c0025af2:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025af5:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025af9:	83 c0 08             	add    eax,0x8
c0025afc:	01 c0                	add    eax,eax
c0025afe:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025b01:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025b05:	83 c0 08             	add    eax,0x8
c0025b08:	01 c0                	add    eax,eax
c0025b0a:	40                   	inc    eax
c0025b0b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025b0e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025b11:	50                   	push   eax
c0025b12:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b15:	e8 60 fe ff ff       	call   c002597a <IOAPIC::read(int)>
c0025b1a:	83 c4 08             	add    esp,0x8
c0025b1d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025b20:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025b27:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025b2a:	c1 e0 18             	shl    eax,0x18
c0025b2d:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025b30:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025b33:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025b36:	52                   	push   edx
c0025b37:	50                   	push   eax
c0025b38:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b3b:	e8 58 ff ff ff       	call   c0025a98 <IOAPIC::write(int, int)>
c0025b40:	83 c4 0c             	add    esp,0xc
c0025b43:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025b46:	50                   	push   eax
c0025b47:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b4a:	e8 2b fe ff ff       	call   c002597a <IOAPIC::read(int)>
c0025b4f:	83 c4 08             	add    esp,0x8
c0025b52:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025b55:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025b5c:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025b63:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025b6a:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025b6e:	74 09                	je     c0025b79 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025b70:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025b77:	eb 07                	jmp    c0025b80 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025b79:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025b80:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025b84:	74 09                	je     c0025b8f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025b86:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025b8d:	eb 07                	jmp    c0025b96 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025b8f:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025b96:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025b9d:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025ba1:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025ba4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025ba7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025baa:	52                   	push   edx
c0025bab:	50                   	push   eax
c0025bac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025baf:	e8 e4 fe ff ff       	call   c0025a98 <IOAPIC::write(int, int)>
c0025bb4:	83 c4 0c             	add    esp,0xc
c0025bb7:	90                   	nop
c0025bb8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025bbb:	c9                   	leave  
c0025bbc:	c3                   	ret    
c0025bbd:	90                   	nop

c0025bbe <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025bbe:	55                   	push   ebp
c0025bbf:	89 e5                	mov    ebp,esp
c0025bc1:	57                   	push   edi
c0025bc2:	56                   	push   esi
c0025bc3:	53                   	push   ebx
c0025bc4:	83 ec 2c             	sub    esp,0x2c
c0025bc7:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025bca:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025bcd:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025bd1:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025bd5:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025bd9:	74 5a                	je     c0025c35 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025bdb:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025bdf:	7f 44                	jg     c0025c25 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025be1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025be4:	05 20 d0 02 c0       	add    eax,0xc002d020
c0025be9:	8a 00                	mov    al,BYTE PTR [eax]
c0025beb:	0f b6 c0             	movzx  eax,al
c0025bee:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025bf1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025bf4:	66 8b 84 00 00 e7 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd1900]
c0025bfc:	0f b7 c0             	movzx  eax,ax
c0025bff:	83 e0 02             	and    eax,0x2
c0025c02:	85 c0                	test   eax,eax
c0025c04:	74 04                	je     c0025c0a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025c06:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025c0a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c0d:	66 8b 84 00 00 e7 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd1900]
c0025c15:	0f b7 c0             	movzx  eax,ax
c0025c18:	83 e0 08             	and    eax,0x8
c0025c1b:	85 c0                	test   eax,eax
c0025c1d:	74 16                	je     c0025c35 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025c1f:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025c23:	eb 10                	jmp    c0025c35 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025c25:	83 ec 0c             	sub    esp,0xc
c0025c28:	68 90 c9 02 c0       	push   0xc002c990
c0025c2d:	e8 57 43 ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c0025c32:	83 c4 10             	add    esp,0x10
c0025c35:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025c39:	a1 00 01 03 c0       	mov    eax,ds:0xc0030100
c0025c3e:	83 ec 08             	sub    esp,0x8
c0025c41:	50                   	push   eax
c0025c42:	68 c8 c9 02 c0       	push   0xc002c9c8
c0025c47:	e8 51 cb fe ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0025c4c:	83 c4 10             	add    esp,0x10
c0025c4f:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025c56:	a1 00 01 03 c0       	mov    eax,ds:0xc0030100
c0025c5b:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025c5e:	7d 67                	jge    c0025cc7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025c60:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025c63:	8b 04 85 20 01 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfee0]
c0025c6a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025c6d:	83 ec 08             	sub    esp,0x8
c0025c70:	52                   	push   edx
c0025c71:	50                   	push   eax
c0025c72:	e8 d1 fc ff ff       	call   c0025948 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025c77:	83 c4 10             	add    esp,0x10
c0025c7a:	84 c0                	test   al,al
c0025c7c:	74 44                	je     c0025cc2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025c7e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025c81:	8b 1c 85 20 01 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcfee0]
c0025c88:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025c8c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025c8f:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025c93:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c96:	83 c0 20             	add    eax,0x20
c0025c99:	0f b6 f0             	movzx  esi,al
c0025c9c:	b8 00 00 00 00       	mov    eax,0x0
c0025ca1:	99                   	cdq    
c0025ca2:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025ca5:	0f b6 c9             	movzx  ecx,cl
c0025ca8:	83 ec 04             	sub    esp,0x4
c0025cab:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025cae:	57                   	push   edi
c0025caf:	56                   	push   esi
c0025cb0:	52                   	push   edx
c0025cb1:	50                   	push   eax
c0025cb2:	51                   	push   ecx
c0025cb3:	53                   	push   ebx
c0025cb4:	e8 0b fe ff ff       	call   c0025ac4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025cb9:	83 c4 20             	add    esp,0x20
c0025cbc:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025cc0:	eb 05                	jmp    c0025cc7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025cc2:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025cc5:	eb 8f                	jmp    c0025c56 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025cc7:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025cca:	83 f0 01             	xor    eax,0x1
c0025ccd:	84 c0                	test   al,al
c0025ccf:	74 10                	je     c0025ce1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025cd1:	83 ec 0c             	sub    esp,0xc
c0025cd4:	68 df c9 02 c0       	push   0xc002c9df
c0025cd9:	e8 ab 42 ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c0025cde:	83 c4 10             	add    esp,0x10
c0025ce1:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025ce5:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025cec:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025cf0:	7f 65                	jg     c0025d57 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025cf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025cf5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025cf8:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025cff:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025d02:	01 ca                	add    edx,ecx
c0025d04:	83 c2 54             	add    edx,0x54
c0025d07:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025d0b:	85 c0                	test   eax,eax
c0025d0d:	75 43                	jne    c0025d52 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025d0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d12:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025d15:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025d1c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025d1f:	01 ca                	add    edx,ecx
c0025d21:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025d24:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025d27:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025d2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d2e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025d31:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025d38:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025d3b:	01 ca                	add    edx,ecx
c0025d3d:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025d43:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025d46:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025d4a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d4d:	83 e8 20             	sub    eax,0x20
c0025d50:	eb 1a                	jmp    c0025d6c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025d52:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025d55:	eb 95                	jmp    c0025cec <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025d57:	83 ec 0c             	sub    esp,0xc
c0025d5a:	68 ec c9 02 c0       	push   0xc002c9ec
c0025d5f:	e8 25 42 ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c0025d64:	83 c4 10             	add    esp,0x10
c0025d67:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025d6c:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025d6f:	5b                   	pop    ebx
c0025d70:	5e                   	pop    esi
c0025d71:	5f                   	pop    edi
c0025d72:	5d                   	pop    ebp
c0025d73:	c3                   	ret    

c0025d74 <PIC::disable()>:
c0025d74:	55                   	push   ebp
c0025d75:	89 e5                	mov    ebp,esp
c0025d77:	83 ec 10             	sub    esp,0x10
c0025d7a:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025d80:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025d84:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025d87:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025d8b:	ee                   	out    dx,al
c0025d8c:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025d92:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025d96:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025d99:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025d9d:	ee                   	out    dx,al
c0025d9e:	90                   	nop
c0025d9f:	c9                   	leave  
c0025da0:	c3                   	ret    
c0025da1:	90                   	nop

c0025da2 <PIC::close(int, int, void*)>:
c0025da2:	55                   	push   ebp
c0025da3:	89 e5                	mov    ebp,esp
c0025da5:	83 ec 08             	sub    esp,0x8
c0025da8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025dab:	8b 00                	mov    eax,DWORD PTR [eax]
c0025dad:	83 c0 3c             	add    eax,0x3c
c0025db0:	8b 00                	mov    eax,DWORD PTR [eax]
c0025db2:	83 ec 0c             	sub    esp,0xc
c0025db5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025db8:	ff d0                	call   eax
c0025dba:	83 c4 10             	add    esp,0x10
c0025dbd:	b8 00 00 00 00       	mov    eax,0x0
c0025dc2:	c9                   	leave  
c0025dc3:	c3                   	ret    

c0025dc4 <PIC::PIC()>:
c0025dc4:	83 ec 0c             	sub    esp,0xc
c0025dc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dcb:	83 ec 08             	sub    esp,0x8
c0025dce:	68 98 ca 02 c0       	push   0xc002ca98
c0025dd3:	50                   	push   eax
c0025dd4:	e8 6b e7 fe ff       	call   c0014544 <InterruptController::InterruptController(char const*)>
c0025dd9:	83 c4 10             	add    esp,0x10
c0025ddc:	ba c4 ca 02 c0       	mov    edx,0xc002cac4
c0025de1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025de5:	89 10                	mov    DWORD PTR [eax],edx
c0025de7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025deb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025df1:	0f b6 d0             	movzx  edx,al
c0025df4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025df8:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025dff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e03:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025e09:	0f b6 d0             	movzx  edx,al
c0025e0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e10:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025e15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e19:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025e1f:	8d 50 01             	lea    edx,[eax+0x1]
c0025e22:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025e26:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025e2c:	0f b6 d0             	movzx  edx,al
c0025e2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e33:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025e37:	83 e1 3f             	and    ecx,0x3f
c0025e3a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025e3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e42:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025e48:	0f b6 d0             	movzx  edx,al
c0025e4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e4f:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025e56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e5a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025e60:	0f b6 d0             	movzx  edx,al
c0025e63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e67:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025e6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e70:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025e76:	8d 50 01             	lea    edx,[eax+0x1]
c0025e79:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025e7d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025e83:	0f b6 d0             	movzx  edx,al
c0025e86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e8a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025e8e:	83 e1 3f             	and    ecx,0x3f
c0025e91:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025e95:	90                   	nop
c0025e96:	83 c4 0c             	add    esp,0xc
c0025e99:	c3                   	ret    

c0025e9a <PIC::ioWait()>:
c0025e9a:	eb 00                	jmp    c0025e9c <PIC::ioWait()+0x2>
c0025e9c:	eb 00                	jmp    c0025e9e <PIC::ioWait()+0x4>
c0025e9e:	90                   	nop
c0025e9f:	c3                   	ret    

c0025ea0 <PIC::getIRQReg(int)>:
c0025ea0:	55                   	push   ebp
c0025ea1:	89 e5                	mov    ebp,esp
c0025ea3:	83 ec 10             	sub    esp,0x10
c0025ea6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ea9:	0f b6 c0             	movzx  eax,al
c0025eac:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025eb2:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025eb5:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025eb8:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025ebc:	ee                   	out    dx,al
c0025ebd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ec0:	0f b6 c0             	movzx  eax,al
c0025ec3:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025ec9:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025ecc:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025ecf:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025ed3:	ee                   	out    dx,al
c0025ed4:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025eda:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025ede:	89 c2                	mov    edx,eax
c0025ee0:	ec                   	in     al,dx
c0025ee1:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025ee4:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025ee7:	0f b6 c0             	movzx  eax,al
c0025eea:	c1 e0 08             	shl    eax,0x8
c0025eed:	89 c1                	mov    ecx,eax
c0025eef:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025ef5:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025ef9:	89 c2                	mov    edx,eax
c0025efb:	ec                   	in     al,dx
c0025efc:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025eff:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025f02:	0f b6 c0             	movzx  eax,al
c0025f05:	09 c8                	or     eax,ecx
c0025f07:	c9                   	leave  
c0025f08:	c3                   	ret    
c0025f09:	90                   	nop

c0025f0a <PIC::eoi(unsigned char)>:
c0025f0a:	55                   	push   ebp
c0025f0b:	89 e5                	mov    ebp,esp
c0025f0d:	83 ec 14             	sub    esp,0x14
c0025f10:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f13:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025f16:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025f1a:	75 1e                	jne    c0025f3a <PIC::eoi(unsigned char)+0x30>
c0025f1c:	6a 0b                	push   0xb
c0025f1e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f21:	e8 7a ff ff ff       	call   c0025ea0 <PIC::getIRQReg(int)>
c0025f26:	83 c4 08             	add    esp,0x8
c0025f29:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025f2d:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025f31:	25 80 00 00 00       	and    eax,0x80
c0025f36:	85 c0                	test   eax,eax
c0025f38:	74 5f                	je     c0025f99 <PIC::eoi(unsigned char)+0x8f>
c0025f3a:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025f3e:	75 2d                	jne    c0025f6d <PIC::eoi(unsigned char)+0x63>
c0025f40:	6a 0b                	push   0xb
c0025f42:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f45:	e8 56 ff ff ff       	call   c0025ea0 <PIC::getIRQReg(int)>
c0025f4a:	83 c4 08             	add    esp,0x8
c0025f4d:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0025f51:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025f54:	66 85 c0             	test   ax,ax
c0025f57:	78 14                	js     c0025f6d <PIC::eoi(unsigned char)+0x63>
c0025f59:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0025f5f:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0025f63:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025f66:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025f6a:	ee                   	out    dx,al
c0025f6b:	eb 2d                	jmp    c0025f9a <PIC::eoi(unsigned char)+0x90>
c0025f6d:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025f71:	76 12                	jbe    c0025f85 <PIC::eoi(unsigned char)+0x7b>
c0025f73:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025f79:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0025f7d:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025f80:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025f84:	ee                   	out    dx,al
c0025f85:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025f8b:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0025f8f:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025f92:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025f96:	ee                   	out    dx,al
c0025f97:	eb 01                	jmp    c0025f9a <PIC::eoi(unsigned char)+0x90>
c0025f99:	90                   	nop
c0025f9a:	c9                   	leave  
c0025f9b:	c3                   	ret    

c0025f9c <PIC::remap()>:
c0025f9c:	55                   	push   ebp
c0025f9d:	89 e5                	mov    ebp,esp
c0025f9f:	83 ec 48             	sub    esp,0x48
c0025fa2:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0025fa9:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0025fb0:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0025fb6:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0025fb9:	89 c2                	mov    edx,eax
c0025fbb:	ec                   	in     al,dx
c0025fbc:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0025fbf:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0025fc2:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0025fc5:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0025fcb:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0025fce:	89 c2                	mov    edx,eax
c0025fd0:	ec                   	in     al,dx
c0025fd1:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0025fd4:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0025fd7:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0025fda:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0025fe0:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0025fe4:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0025fe7:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0025fea:	ee                   	out    dx,al
c0025feb:	83 ec 0c             	sub    esp,0xc
c0025fee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ff1:	e8 a4 fe ff ff       	call   c0025e9a <PIC::ioWait()>
c0025ff6:	83 c4 10             	add    esp,0x10
c0025ff9:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0025fff:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0026003:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0026006:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0026009:	ee                   	out    dx,al
c002600a:	83 ec 0c             	sub    esp,0xc
c002600d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026010:	e8 85 fe ff ff       	call   c0025e9a <PIC::ioWait()>
c0026015:	83 c4 10             	add    esp,0x10
c0026018:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002601b:	0f b6 c0             	movzx  eax,al
c002601e:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0026024:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0026027:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c002602a:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c002602d:	ee                   	out    dx,al
c002602e:	83 ec 0c             	sub    esp,0xc
c0026031:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026034:	e8 61 fe ff ff       	call   c0025e9a <PIC::ioWait()>
c0026039:	83 c4 10             	add    esp,0x10
c002603c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002603f:	0f b6 c0             	movzx  eax,al
c0026042:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0026048:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c002604b:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c002604e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026051:	ee                   	out    dx,al
c0026052:	83 ec 0c             	sub    esp,0xc
c0026055:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026058:	e8 3d fe ff ff       	call   c0025e9a <PIC::ioWait()>
c002605d:	83 c4 10             	add    esp,0x10
c0026060:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0026066:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c002606a:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c002606d:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0026070:	ee                   	out    dx,al
c0026071:	83 ec 0c             	sub    esp,0xc
c0026074:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026077:	e8 1e fe ff ff       	call   c0025e9a <PIC::ioWait()>
c002607c:	83 c4 10             	add    esp,0x10
c002607f:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026085:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026089:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c002608c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002608f:	ee                   	out    dx,al
c0026090:	83 ec 0c             	sub    esp,0xc
c0026093:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026096:	e8 ff fd ff ff       	call   c0025e9a <PIC::ioWait()>
c002609b:	83 c4 10             	add    esp,0x10
c002609e:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c00260a4:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c00260a8:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c00260ab:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00260ae:	ee                   	out    dx,al
c00260af:	83 ec 0c             	sub    esp,0xc
c00260b2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260b5:	e8 e0 fd ff ff       	call   c0025e9a <PIC::ioWait()>
c00260ba:	83 c4 10             	add    esp,0x10
c00260bd:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c00260c3:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c00260c7:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c00260ca:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00260cd:	ee                   	out    dx,al
c00260ce:	83 ec 0c             	sub    esp,0xc
c00260d1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260d4:	e8 c1 fd ff ff       	call   c0025e9a <PIC::ioWait()>
c00260d9:	83 c4 10             	add    esp,0x10
c00260dc:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c00260e0:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c00260e6:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c00260e9:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c00260ec:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00260ef:	ee                   	out    dx,al
c00260f0:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c00260f4:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c00260fa:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c00260fd:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0026100:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026103:	ee                   	out    dx,al
c0026104:	90                   	nop
c0026105:	c9                   	leave  
c0026106:	c3                   	ret    
c0026107:	90                   	nop

c0026108 <PIC::open(int, int, void*)>:
c0026108:	55                   	push   ebp
c0026109:	89 e5                	mov    ebp,esp
c002610b:	83 ec 18             	sub    esp,0x18
c002610e:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0026114:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0026118:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002611b:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002611f:	ee                   	out    dx,al
c0026120:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0026126:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c002612a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002612d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026131:	ee                   	out    dx,al
c0026132:	83 ec 0c             	sub    esp,0xc
c0026135:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026138:	e8 5f fe ff ff       	call   c0025f9c <PIC::remap()>
c002613d:	83 c4 10             	add    esp,0x10
c0026140:	b8 00 00 00 00       	mov    eax,0x0
c0026145:	c9                   	leave  
c0026146:	c3                   	ret    
c0026147:	90                   	nop

c0026148 <APICTimer::close(int, int, void*)>:
c0026148:	b8 00 00 00 00       	mov    eax,0x0
c002614d:	c3                   	ret    

c002614e <apicTimerHandler(regs*, void*)>:
c002614e:	83 ec 0c             	sub    esp,0xc
c0026151:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026155:	8b 00                	mov    eax,DWORD PTR [eax]
c0026157:	99                   	cdq    
c0026158:	52                   	push   edx
c0026159:	50                   	push   eax
c002615a:	6a 00                	push   0x0
c002615c:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026161:	e8 8e 07 00 00       	call   c00268f4 <__udivdi3>
c0026166:	83 c4 10             	add    esp,0x10
c0026169:	83 ec 08             	sub    esp,0x8
c002616c:	52                   	push   edx
c002616d:	50                   	push   eax
c002616e:	e8 2e 05 ff ff       	call   c00166a1 <timerHandler(unsigned long long)>
c0026173:	83 c4 10             	add    esp,0x10
c0026176:	90                   	nop
c0026177:	83 c4 0c             	add    esp,0xc
c002617a:	c3                   	ret    
c002617b:	90                   	nop

c002617c <APICTimer::write(int)>:
c002617c:	53                   	push   ebx
c002617d:	83 ec 28             	sub    esp,0x28
c0026180:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026184:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026188:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002618e:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c0026193:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026199:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002619f:	83 ec 0c             	sub    esp,0xc
c00261a2:	50                   	push   eax
c00261a3:	e8 de f4 ff ff       	call   c0025686 <APIC::getBase()>
c00261a8:	83 c4 10             	add    esp,0x10
c00261ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00261af:	a1 30 e4 02 c0       	mov    eax,ds:0xc002e430
c00261b4:	8b 15 34 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e434
c00261ba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00261be:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00261c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00261c6:	05 e0 03 00 00       	add    eax,0x3e0
c00261cb:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00261d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00261d5:	05 80 03 00 00       	add    eax,0x380
c00261da:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00261e0:	fb                   	sti    
c00261e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261e5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00261e9:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c00261ee:	83 d2 00             	adc    edx,0x0
c00261f1:	89 c1                	mov    ecx,eax
c00261f3:	89 d3                	mov    ebx,edx
c00261f5:	a1 30 e4 02 c0       	mov    eax,ds:0xc002e430
c00261fa:	8b 15 34 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e434
c0026200:	39 c8                	cmp    eax,ecx
c0026202:	89 d0                	mov    eax,edx
c0026204:	19 d8                	sbb    eax,ebx
c0026206:	73 02                	jae    c002620a <APICTimer::write(int)+0x8e>
c0026208:	eb d7                	jmp    c00261e1 <APICTimer::write(int)+0x65>
c002620a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002620e:	05 20 03 00 00       	add    eax,0x320
c0026213:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026219:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002621d:	05 90 03 00 00       	add    eax,0x390
c0026222:	8b 00                	mov    eax,DWORD PTR [eax]
c0026224:	f7 d0                	not    eax
c0026226:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002622a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002622e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026232:	ba 00 00 00 00       	mov    edx,0x0
c0026237:	f7 f3                	div    ebx
c0026239:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002623d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026241:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026247:	0d 00 00 02 00       	or     eax,0x20000
c002624c:	89 c2                	mov    edx,eax
c002624e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026252:	05 20 03 00 00       	add    eax,0x320
c0026257:	89 10                	mov    DWORD PTR [eax],edx
c0026259:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002625d:	05 e0 03 00 00       	add    eax,0x3e0
c0026262:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026268:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002626c:	05 80 03 00 00       	add    eax,0x380
c0026271:	89 c2                	mov    edx,eax
c0026273:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026277:	89 02                	mov    DWORD PTR [edx],eax
c0026279:	90                   	nop
c002627a:	83 c4 28             	add    esp,0x28
c002627d:	5b                   	pop    ebx
c002627e:	c3                   	ret    
c002627f:	90                   	nop

c0026280 <APICTimer::open(int, int, void*)>:
c0026280:	57                   	push   edi
c0026281:	56                   	push   esi
c0026282:	53                   	push   ebx
c0026283:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026287:	8b 00                	mov    eax,DWORD PTR [eax]
c0026289:	83 c0 24             	add    eax,0x24
c002628c:	8b 00                	mov    eax,DWORD PTR [eax]
c002628e:	83 ec 08             	sub    esp,0x8
c0026291:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026295:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026299:	ff d0                	call   eax
c002629b:	83 c4 10             	add    esp,0x10
c002629e:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c00262a3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00262a9:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00262af:	83 ec 0c             	sub    esp,0xc
c00262b2:	50                   	push   eax
c00262b3:	e8 ce f3 ff ff       	call   c0025686 <APIC::getBase()>
c00262b8:	83 c4 10             	add    esp,0x10
c00262bb:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c00262c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262c5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00262cb:	0f b6 f8             	movzx  edi,al
c00262ce:	89 d0                	mov    eax,edx
c00262d0:	ba 00 00 00 00       	mov    edx,0x0
c00262d5:	89 c1                	mov    ecx,eax
c00262d7:	80 e5 ff             	and    ch,0xff
c00262da:	89 cb                	mov    ebx,ecx
c00262dc:	0f b6 f2             	movzx  esi,dl
c00262df:	89 d8                	mov    eax,ebx
c00262e1:	89 f2                	mov    edx,esi
c00262e3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00262e7:	8d 5f 08             	lea    ebx,[edi+0x8]
c00262ea:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00262ee:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00262f2:	83 e0 00             	and    eax,0x0
c00262f5:	09 d0                	or     eax,edx
c00262f7:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00262fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262ff:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026305:	8d 50 01             	lea    edx,[eax+0x1]
c0026308:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002630c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026312:	0f b6 d0             	movzx  edx,al
c0026315:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026319:	83 c2 08             	add    edx,0x8
c002631c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026320:	0f b6 c9             	movzx  ecx,cl
c0026323:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026329:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002632d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026331:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026335:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002633b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002633f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026343:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026349:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002634d:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026353:	83 ec 0c             	sub    esp,0xc
c0026356:	51                   	push   ecx
c0026357:	6a 01                	push   0x1
c0026359:	68 4e 61 02 c0       	push   0xc002614e
c002635e:	52                   	push   edx
c002635f:	50                   	push   eax
c0026360:	e8 e9 d7 fe ff       	call   c0013b4e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026365:	83 c4 20             	add    esp,0x20
c0026368:	89 c2                	mov    edx,eax
c002636a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002636e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026374:	b8 00 00 00 00       	mov    eax,0x0
c0026379:	5b                   	pop    ebx
c002637a:	5e                   	pop    esi
c002637b:	5f                   	pop    edi
c002637c:	c3                   	ret    
c002637d:	90                   	nop

c002637e <APICTimer::APICTimer()>:
c002637e:	83 ec 0c             	sub    esp,0xc
c0026381:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026385:	83 ec 08             	sub    esp,0x8
c0026388:	68 04 cb 02 c0       	push   0xc002cb04
c002638d:	50                   	push   eax
c002638e:	e8 7f 02 ff ff       	call   c0016612 <Timer::Timer(char const*)>
c0026393:	83 c4 10             	add    esp,0x10
c0026396:	ba 18 cb 02 c0       	mov    edx,0xc002cb18
c002639b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002639f:	89 10                	mov    DWORD PTR [eax],edx
c00263a1:	90                   	nop
c00263a2:	83 c4 0c             	add    esp,0xc
c00263a5:	c3                   	ret    

c00263a6 <PIT::write(int)>:
c00263a6:	83 ec 10             	sub    esp,0x10
c00263a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00263ad:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00263b1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00263b7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00263bb:	a3 44 01 03 c0       	mov    ds:0xc0030144,eax
c00263c0:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00263c5:	99                   	cdq    
c00263c6:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00263ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00263ce:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00263d5:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00263da:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00263de:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00263e3:	ee                   	out    dx,al
c00263e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00263e8:	0f b6 c0             	movzx  eax,al
c00263eb:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00263f2:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00263f6:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00263fa:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00263ff:	ee                   	out    dx,al
c0026400:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026404:	c1 f8 08             	sar    eax,0x8
c0026407:	0f b6 c0             	movzx  eax,al
c002640a:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026411:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026415:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026419:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002641e:	ee                   	out    dx,al
c002641f:	90                   	nop
c0026420:	83 c4 10             	add    esp,0x10
c0026423:	c3                   	ret    

c0026424 <pitHandler(regs*, void*)>:
c0026424:	83 ec 0c             	sub    esp,0xc
c0026427:	a1 44 01 03 c0       	mov    eax,ds:0xc0030144
c002642c:	99                   	cdq    
c002642d:	52                   	push   edx
c002642e:	50                   	push   eax
c002642f:	6a 00                	push   0x0
c0026431:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026436:	e8 b9 04 00 00       	call   c00268f4 <__udivdi3>
c002643b:	83 c4 10             	add    esp,0x10
c002643e:	83 ec 08             	sub    esp,0x8
c0026441:	52                   	push   edx
c0026442:	50                   	push   eax
c0026443:	e8 59 02 ff ff       	call   c00166a1 <timerHandler(unsigned long long)>
c0026448:	83 c4 10             	add    esp,0x10
c002644b:	90                   	nop
c002644c:	83 c4 0c             	add    esp,0xc
c002644f:	c3                   	ret    

c0026450 <PIT::open(int, int, void*)>:
c0026450:	83 ec 0c             	sub    esp,0xc
c0026453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026457:	8b 00                	mov    eax,DWORD PTR [eax]
c0026459:	83 c0 24             	add    eax,0x24
c002645c:	8b 00                	mov    eax,DWORD PTR [eax]
c002645e:	83 ec 08             	sub    esp,0x8
c0026461:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026465:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026469:	ff d0                	call   eax
c002646b:	83 c4 10             	add    esp,0x10
c002646e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026472:	83 ec 0c             	sub    esp,0xc
c0026475:	6a 00                	push   0x0
c0026477:	6a 01                	push   0x1
c0026479:	68 24 64 02 c0       	push   0xc0026424
c002647e:	6a 00                	push   0x0
c0026480:	50                   	push   eax
c0026481:	e8 c8 d6 fe ff       	call   c0013b4e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026486:	83 c4 20             	add    esp,0x20
c0026489:	89 c2                	mov    edx,eax
c002648b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002648f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026495:	b8 00 00 00 00       	mov    eax,0x0
c002649a:	83 c4 0c             	add    esp,0xc
c002649d:	c3                   	ret    

c002649e <PIT::close(int, int, void*)>:
c002649e:	83 ec 0c             	sub    esp,0xc
c00264a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264a5:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00264af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264b3:	6a 01                	push   0x1
c00264b5:	68 24 64 02 c0       	push   0xc0026424
c00264ba:	6a 00                	push   0x0
c00264bc:	50                   	push   eax
c00264bd:	e8 d6 d6 fe ff       	call   c0013b98 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00264c2:	83 c4 10             	add    esp,0x10
c00264c5:	b8 00 00 00 00       	mov    eax,0x0
c00264ca:	83 c4 0c             	add    esp,0xc
c00264cd:	c3                   	ret    

c00264ce <PIT::PIT()>:
c00264ce:	83 ec 0c             	sub    esp,0xc
c00264d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264d5:	83 ec 08             	sub    esp,0x8
c00264d8:	68 40 cb 02 c0       	push   0xc002cb40
c00264dd:	50                   	push   eax
c00264de:	e8 2f 01 ff ff       	call   c0016612 <Timer::Timer(char const*)>
c00264e3:	83 c4 10             	add    esp,0x10
c00264e6:	ba 68 cb 02 c0       	mov    edx,0xc002cb68
c00264eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264ef:	89 10                	mov    DWORD PTR [eax],edx
c00264f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264f5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00264fb:	0f b6 d0             	movzx  edx,al
c00264fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026502:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026509:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002650d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026513:	0f b6 d0             	movzx  edx,al
c0026516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002651a:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002651f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026523:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026529:	8d 50 01             	lea    edx,[eax+0x1]
c002652c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026530:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026536:	0f b6 d0             	movzx  edx,al
c0026539:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002653d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026541:	83 e1 3f             	and    ecx,0x3f
c0026544:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026548:	90                   	nop
c0026549:	83 c4 0c             	add    esp,0xc
c002654c:	c3                   	ret    
c002654d:	66 90                	xchg   ax,ax
c002654f:	90                   	nop

c0026550 <avxDetect>:
c0026550:	b8 00 00 00 00       	mov    eax,0x0
c0026555:	c3                   	ret    

c0026556 <avxSave>:
c0026556:	c3                   	ret    

c0026557 <avxLoad>:
c0026557:	c3                   	ret    

c0026558 <avxInit>:
c0026558:	c3                   	ret    

c0026559 <avxClose>:
c0026559:	c3                   	ret    

c002655a <wouldSheSayYes>:
c002655a:	c3                   	ret    
c002655b:	49                   	dec    ecx
c002655c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026560:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026564:	75 20                	jne    c0026586 <sseDetect.noSSE+0x1>
c0026566:	4e                   	dec    esi
c0026567:	79 61                	jns    c00265ca <x87Detect+0x14>
c0026569:	68 2e 2e 2e 00       	push   0x2e2e2e
c002656e:	66 90                	xchg   ax,ax

c0026570 <absolutelyNoChanceInHell>:
c0026570:	b8 01 00 00 00       	mov    eax,0x1
c0026575:	0f a2                	cpuid  
c0026577:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002657d:	74 06                	je     c0026585 <sseDetect.noSSE>
c002657f:	b8 01 00 00 00       	mov    eax,0x1
c0026584:	c3                   	ret    

c0026585 <sseDetect.noSSE>:
c0026585:	31 c0                	xor    eax,eax
c0026587:	c3                   	ret    

c0026588 <sseSave>:
c0026588:	0f ae 44 24 04       	fxsave [esp+0x4]
c002658d:	c3                   	ret    

c002658e <sseLoad>:
c002658e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0026593:	c3                   	ret    

c0026594 <sseInit>:
c0026594:	e8 49 00 00 00       	call   c00265e2 <x87Init>
c0026599:	0f 20 e0             	mov    eax,cr4
c002659c:	66 0d 00 06          	or     ax,0x600
c00265a0:	0f 22 e0             	mov    cr4,eax
c00265a3:	c3                   	ret    

c00265a4 <sseClose>:
c00265a4:	c3                   	ret    
c00265a5:	66 90                	xchg   ax,ax
c00265a7:	66 90                	xchg   ax,ax
c00265a9:	66 90                	xchg   ax,ax
c00265ab:	66 90                	xchg   ax,ax
c00265ad:	66 90                	xchg   ax,ax
c00265af:	90                   	nop

c00265b0 <value_37F>:
c00265b0:	7f 03                	jg     c00265b5 <value_37A+0x1>

c00265b2 <value_37E>:
c00265b2:	7e 03                	jle    c00265b7 <x87Detect+0x1>

c00265b4 <value_37A>:
c00265b4:	7a 03                	jp     c00265b9 <x87Detect+0x3>

c00265b6 <x87Detect>:
c00265b6:	b8 01 00 00 00       	mov    eax,0x1
c00265bb:	0f a2                	cpuid  
c00265bd:	f7 c2 01 00 00 00    	test   edx,0x1
c00265c3:	74 06                	je     c00265cb <x87Detect.nox87>
c00265c5:	b8 01 00 00 00       	mov    eax,0x1
c00265ca:	c3                   	ret    

c00265cb <x87Detect.nox87>:
c00265cb:	b8 00 00 00 00       	mov    eax,0x0
c00265d0:	c3                   	ret    

c00265d1 <x87Save>:
c00265d1:	55                   	push   ebp
c00265d2:	89 e5                	mov    ebp,esp
c00265d4:	9b dd 75 08          	fsave  [ebp+0x8]
c00265d8:	c9                   	leave  
c00265d9:	c3                   	ret    

c00265da <x87Load>:
c00265da:	55                   	push   ebp
c00265db:	89 e5                	mov    ebp,esp
c00265dd:	dd 65 08             	frstor [ebp+0x8]
c00265e0:	c9                   	leave  
c00265e1:	c3                   	ret    

c00265e2 <x87Init>:
c00265e2:	9b db e3             	finit  
c00265e5:	0f 20 c0             	mov    eax,cr0
c00265e8:	66 25 fb ff          	and    ax,0xfffb
c00265ec:	66 0d 22 00          	or     ax,0x22
c00265f0:	0f 22 c0             	mov    cr0,eax
c00265f3:	0f 06                	clts   
c00265f5:	d9 2d b4 65 02 c0    	fldcw  WORD PTR ds:0xc00265b4
c00265fb:	c3                   	ret    

c00265fc <x87Close>:
c00265fc:	c3                   	ret    
c00265fd:	66 90                	xchg   ax,ax
c00265ff:	90                   	nop

c0026600 <__do_global_ctors_aux>:
c0026600:	a1 f4 91 02 c0       	mov    eax,ds:0xc00291f4
c0026605:	83 f8 ff             	cmp    eax,0xffffffff
c0026608:	74 1a                	je     c0026624 <__do_global_ctors_aux+0x24>
c002660a:	55                   	push   ebp
c002660b:	89 e5                	mov    ebp,esp
c002660d:	53                   	push   ebx
c002660e:	52                   	push   edx
c002660f:	bb f4 91 02 c0       	mov    ebx,0xc00291f4
c0026614:	ff d0                	call   eax
c0026616:	83 eb 04             	sub    ebx,0x4
c0026619:	8b 03                	mov    eax,DWORD PTR [ebx]
c002661b:	83 f8 ff             	cmp    eax,0xffffffff
c002661e:	75 f4                	jne    c0026614 <__do_global_ctors_aux+0x14>
c0026620:	58                   	pop    eax
c0026621:	5b                   	pop    ebx
c0026622:	5d                   	pop    ebp
c0026623:	c3                   	ret    
c0026624:	c3                   	ret    
c0026625:	66 90                	xchg   ax,ax
c0026627:	90                   	nop

c0026628 <__divdi3>:
c0026628:	55                   	push   ebp
c0026629:	57                   	push   edi
c002662a:	56                   	push   esi
c002662b:	53                   	push   ebx
c002662c:	83 ec 1c             	sub    esp,0x1c
c002662f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026633:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026637:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002663a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002663e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026642:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026646:	85 db                	test   ebx,ebx
c0026648:	0f 88 8e 00 00 00    	js     c00266dc <__divdi3+0xb4>
c002664e:	89 dd                	mov    ebp,ebx
c0026650:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026658:	89 d3                	mov    ebx,edx
c002665a:	85 d2                	test   edx,edx
c002665c:	79 0d                	jns    c002666b <__divdi3+0x43>
c002665e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0026662:	f7 d8                	neg    eax
c0026664:	83 d2 00             	adc    edx,0x0
c0026667:	f7 da                	neg    edx
c0026669:	89 d3                	mov    ebx,edx
c002666b:	89 c7                	mov    edi,eax
c002666d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026670:	85 db                	test   ebx,ebx
c0026672:	75 48                	jne    c00266bc <__divdi3+0x94>
c0026674:	39 ef                	cmp    edi,ebp
c0026676:	76 24                	jbe    c002669c <__divdi3+0x74>
c0026678:	89 ea                	mov    edx,ebp
c002667a:	f7 f7                	div    edi
c002667c:	89 c1                	mov    ecx,eax
c002667e:	31 f6                	xor    esi,esi
c0026680:	89 c8                	mov    eax,ecx
c0026682:	89 f2                	mov    edx,esi
c0026684:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026688:	85 c9                	test   ecx,ecx
c002668a:	74 07                	je     c0026693 <__divdi3+0x6b>
c002668c:	f7 d8                	neg    eax
c002668e:	83 d2 00             	adc    edx,0x0
c0026691:	f7 da                	neg    edx
c0026693:	83 c4 1c             	add    esp,0x1c
c0026696:	5b                   	pop    ebx
c0026697:	5e                   	pop    esi
c0026698:	5f                   	pop    edi
c0026699:	5d                   	pop    ebp
c002669a:	c3                   	ret    
c002669b:	90                   	nop
c002669c:	85 ff                	test   edi,edi
c002669e:	75 0b                	jne    c00266ab <__divdi3+0x83>
c00266a0:	b8 01 00 00 00       	mov    eax,0x1
c00266a5:	31 d2                	xor    edx,edx
c00266a7:	f7 f3                	div    ebx
c00266a9:	89 c7                	mov    edi,eax
c00266ab:	31 d2                	xor    edx,edx
c00266ad:	89 e8                	mov    eax,ebp
c00266af:	f7 f7                	div    edi
c00266b1:	89 c6                	mov    esi,eax
c00266b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00266b6:	f7 f7                	div    edi
c00266b8:	89 c1                	mov    ecx,eax
c00266ba:	eb c4                	jmp    c0026680 <__divdi3+0x58>
c00266bc:	39 eb                	cmp    ebx,ebp
c00266be:	77 3c                	ja     c00266fc <__divdi3+0xd4>
c00266c0:	0f bd f3             	bsr    esi,ebx
c00266c3:	83 f6 1f             	xor    esi,0x1f
c00266c6:	75 40                	jne    c0026708 <__divdi3+0xe0>
c00266c8:	39 eb                	cmp    ebx,ebp
c00266ca:	72 09                	jb     c00266d5 <__divdi3+0xad>
c00266cc:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00266cf:	0f 87 97 00 00 00    	ja     c002676c <__divdi3+0x144>
c00266d5:	b9 01 00 00 00       	mov    ecx,0x1
c00266da:	eb a4                	jmp    c0026680 <__divdi3+0x58>
c00266dc:	f7 d9                	neg    ecx
c00266de:	83 d3 00             	adc    ebx,0x0
c00266e1:	f7 db                	neg    ebx
c00266e3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00266e6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00266ea:	89 dd                	mov    ebp,ebx
c00266ec:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00266f4:	e9 5f ff ff ff       	jmp    c0026658 <__divdi3+0x30>
c00266f9:	8d 76 00             	lea    esi,[esi+0x0]
c00266fc:	31 f6                	xor    esi,esi
c00266fe:	31 c9                	xor    ecx,ecx
c0026700:	e9 7b ff ff ff       	jmp    c0026680 <__divdi3+0x58>
c0026705:	8d 76 00             	lea    esi,[esi+0x0]
c0026708:	b8 20 00 00 00       	mov    eax,0x20
c002670d:	29 f0                	sub    eax,esi
c002670f:	89 f1                	mov    ecx,esi
c0026711:	d3 e3                	shl    ebx,cl
c0026713:	89 fa                	mov    edx,edi
c0026715:	88 c1                	mov    cl,al
c0026717:	d3 ea                	shr    edx,cl
c0026719:	09 da                	or     edx,ebx
c002671b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002671f:	89 f1                	mov    ecx,esi
c0026721:	d3 e7                	shl    edi,cl
c0026723:	89 eb                	mov    ebx,ebp
c0026725:	88 c1                	mov    cl,al
c0026727:	d3 eb                	shr    ebx,cl
c0026729:	89 f1                	mov    ecx,esi
c002672b:	d3 e5                	shl    ebp,cl
c002672d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026730:	88 c1                	mov    cl,al
c0026732:	d3 ea                	shr    edx,cl
c0026734:	09 d5                	or     ebp,edx
c0026736:	89 e8                	mov    eax,ebp
c0026738:	89 da                	mov    edx,ebx
c002673a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002673e:	89 d3                	mov    ebx,edx
c0026740:	89 c5                	mov    ebp,eax
c0026742:	f7 e7                	mul    edi
c0026744:	39 d3                	cmp    ebx,edx
c0026746:	72 18                	jb     c0026760 <__divdi3+0x138>
c0026748:	74 0a                	je     c0026754 <__divdi3+0x12c>
c002674a:	89 e9                	mov    ecx,ebp
c002674c:	31 f6                	xor    esi,esi
c002674e:	e9 2d ff ff ff       	jmp    c0026680 <__divdi3+0x58>
c0026753:	90                   	nop
c0026754:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0026757:	89 f1                	mov    ecx,esi
c0026759:	d3 e7                	shl    edi,cl
c002675b:	39 c7                	cmp    edi,eax
c002675d:	73 eb                	jae    c002674a <__divdi3+0x122>
c002675f:	90                   	nop
c0026760:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0026763:	31 f6                	xor    esi,esi
c0026765:	e9 16 ff ff ff       	jmp    c0026680 <__divdi3+0x58>
c002676a:	66 90                	xchg   ax,ax
c002676c:	31 c9                	xor    ecx,ecx
c002676e:	e9 0d ff ff ff       	jmp    c0026680 <__divdi3+0x58>
c0026773:	90                   	nop

c0026774 <__moddi3>:
c0026774:	55                   	push   ebp
c0026775:	57                   	push   edi
c0026776:	56                   	push   esi
c0026777:	53                   	push   ebx
c0026778:	83 ec 2c             	sub    esp,0x2c
c002677b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002677f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0026783:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0026787:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002678b:	85 db                	test   ebx,ebx
c002678d:	0f 88 85 00 00 00    	js     c0026818 <__moddi3+0xa4>
c0026793:	89 de                	mov    esi,ebx
c0026795:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002679d:	89 d7                	mov    edi,edx
c002679f:	85 d2                	test   edx,edx
c00267a1:	79 09                	jns    c00267ac <__moddi3+0x38>
c00267a3:	f7 d8                	neg    eax
c00267a5:	83 d2 00             	adc    edx,0x0
c00267a8:	f7 da                	neg    edx
c00267aa:	89 d7                	mov    edi,edx
c00267ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00267b0:	89 cd                	mov    ebp,ecx
c00267b2:	85 ff                	test   edi,edi
c00267b4:	75 52                	jne    c0026808 <__moddi3+0x94>
c00267b6:	89 c3                	mov    ebx,eax
c00267b8:	39 f0                	cmp    eax,esi
c00267ba:	76 24                	jbe    c00267e0 <__moddi3+0x6c>
c00267bc:	89 c8                	mov    eax,ecx
c00267be:	89 f2                	mov    edx,esi
c00267c0:	f7 f3                	div    ebx
c00267c2:	89 d6                	mov    esi,edx
c00267c4:	89 f0                	mov    eax,esi
c00267c6:	31 d2                	xor    edx,edx
c00267c8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00267cc:	85 c9                	test   ecx,ecx
c00267ce:	74 07                	je     c00267d7 <__moddi3+0x63>
c00267d0:	f7 d8                	neg    eax
c00267d2:	83 d2 00             	adc    edx,0x0
c00267d5:	f7 da                	neg    edx
c00267d7:	83 c4 2c             	add    esp,0x2c
c00267da:	5b                   	pop    ebx
c00267db:	5e                   	pop    esi
c00267dc:	5f                   	pop    edi
c00267dd:	5d                   	pop    ebp
c00267de:	c3                   	ret    
c00267df:	90                   	nop
c00267e0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00267e4:	85 db                	test   ebx,ebx
c00267e6:	75 0d                	jne    c00267f5 <__moddi3+0x81>
c00267e8:	b8 01 00 00 00       	mov    eax,0x1
c00267ed:	31 d2                	xor    edx,edx
c00267ef:	f7 f7                	div    edi
c00267f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00267f5:	89 f0                	mov    eax,esi
c00267f7:	31 d2                	xor    edx,edx
c00267f9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00267fd:	f7 f7                	div    edi
c00267ff:	89 e8                	mov    eax,ebp
c0026801:	f7 f7                	div    edi
c0026803:	89 d6                	mov    esi,edx
c0026805:	eb bd                	jmp    c00267c4 <__moddi3+0x50>
c0026807:	90                   	nop
c0026808:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002680c:	39 f7                	cmp    edi,esi
c002680e:	76 20                	jbe    c0026830 <__moddi3+0xbc>
c0026810:	89 c8                	mov    eax,ecx
c0026812:	89 f2                	mov    edx,esi
c0026814:	eb b2                	jmp    c00267c8 <__moddi3+0x54>
c0026816:	66 90                	xchg   ax,ax
c0026818:	f7 d9                	neg    ecx
c002681a:	83 d3 00             	adc    ebx,0x0
c002681d:	f7 db                	neg    ebx
c002681f:	89 de                	mov    esi,ebx
c0026821:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026829:	e9 6f ff ff ff       	jmp    c002679d <__moddi3+0x29>
c002682e:	66 90                	xchg   ax,ax
c0026830:	0f bd c7             	bsr    eax,edi
c0026833:	83 f0 1f             	xor    eax,0x1f
c0026836:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002683a:	75 24                	jne    c0026860 <__moddi3+0xec>
c002683c:	39 f7                	cmp    edi,esi
c002683e:	72 06                	jb     c0026846 <__moddi3+0xd2>
c0026840:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0026844:	77 0c                	ja     c0026852 <__moddi3+0xde>
c0026846:	89 e9                	mov    ecx,ebp
c0026848:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002684c:	19 fe                	sbb    esi,edi
c002684e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026852:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026856:	89 f2                	mov    edx,esi
c0026858:	e9 6b ff ff ff       	jmp    c00267c8 <__moddi3+0x54>
c002685d:	8d 76 00             	lea    esi,[esi+0x0]
c0026860:	b8 20 00 00 00       	mov    eax,0x20
c0026865:	89 c2                	mov    edx,eax
c0026867:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002686b:	29 da                	sub    edx,ebx
c002686d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026871:	88 d9                	mov    cl,bl
c0026873:	d3 e7                	shl    edi,cl
c0026875:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026879:	88 d1                	mov    cl,dl
c002687b:	d3 e8                	shr    eax,cl
c002687d:	09 c7                	or     edi,eax
c002687f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0026883:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026887:	89 d8                	mov    eax,ebx
c0026889:	88 d9                	mov    cl,bl
c002688b:	d3 e7                	shl    edi,cl
c002688d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026891:	89 f3                	mov    ebx,esi
c0026893:	88 d1                	mov    cl,dl
c0026895:	d3 eb                	shr    ebx,cl
c0026897:	89 c7                	mov    edi,eax
c0026899:	88 c1                	mov    cl,al
c002689b:	d3 e6                	shl    esi,cl
c002689d:	89 e8                	mov    eax,ebp
c002689f:	88 d1                	mov    cl,dl
c00268a1:	d3 e8                	shr    eax,cl
c00268a3:	09 f0                	or     eax,esi
c00268a5:	89 f9                	mov    ecx,edi
c00268a7:	d3 e5                	shl    ebp,cl
c00268a9:	89 da                	mov    edx,ebx
c00268ab:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00268af:	89 d3                	mov    ebx,edx
c00268b1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00268b5:	89 c6                	mov    esi,eax
c00268b7:	89 d1                	mov    ecx,edx
c00268b9:	39 d3                	cmp    ebx,edx
c00268bb:	72 27                	jb     c00268e4 <__moddi3+0x170>
c00268bd:	74 21                	je     c00268e0 <__moddi3+0x16c>
c00268bf:	29 f5                	sub    ebp,esi
c00268c1:	19 cb                	sbb    ebx,ecx
c00268c3:	89 de                	mov    esi,ebx
c00268c5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00268c9:	d3 e6                	shl    esi,cl
c00268cb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00268cf:	89 f9                	mov    ecx,edi
c00268d1:	d3 ed                	shr    ebp,cl
c00268d3:	09 ee                	or     esi,ebp
c00268d5:	89 f0                	mov    eax,esi
c00268d7:	d3 eb                	shr    ebx,cl
c00268d9:	89 da                	mov    edx,ebx
c00268db:	e9 e8 fe ff ff       	jmp    c00267c8 <__moddi3+0x54>
c00268e0:	39 c5                	cmp    ebp,eax
c00268e2:	73 db                	jae    c00268bf <__moddi3+0x14b>
c00268e4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00268e8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00268ec:	89 d1                	mov    ecx,edx
c00268ee:	89 c6                	mov    esi,eax
c00268f0:	eb cd                	jmp    c00268bf <__moddi3+0x14b>
c00268f2:	66 90                	xchg   ax,ax

c00268f4 <__udivdi3>:
c00268f4:	55                   	push   ebp
c00268f5:	57                   	push   edi
c00268f6:	56                   	push   esi
c00268f7:	53                   	push   ebx
c00268f8:	83 ec 1c             	sub    esp,0x1c
c00268fb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00268ff:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026903:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026907:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002690b:	85 d2                	test   edx,edx
c002690d:	75 41                	jne    c0026950 <__udivdi3+0x5c>
c002690f:	39 f7                	cmp    edi,esi
c0026911:	76 15                	jbe    c0026928 <__udivdi3+0x34>
c0026913:	89 e8                	mov    eax,ebp
c0026915:	89 f2                	mov    edx,esi
c0026917:	f7 f7                	div    edi
c0026919:	31 db                	xor    ebx,ebx
c002691b:	89 da                	mov    edx,ebx
c002691d:	83 c4 1c             	add    esp,0x1c
c0026920:	5b                   	pop    ebx
c0026921:	5e                   	pop    esi
c0026922:	5f                   	pop    edi
c0026923:	5d                   	pop    ebp
c0026924:	c3                   	ret    
c0026925:	8d 76 00             	lea    esi,[esi+0x0]
c0026928:	89 f9                	mov    ecx,edi
c002692a:	85 ff                	test   edi,edi
c002692c:	75 0b                	jne    c0026939 <__udivdi3+0x45>
c002692e:	b8 01 00 00 00       	mov    eax,0x1
c0026933:	31 d2                	xor    edx,edx
c0026935:	f7 f7                	div    edi
c0026937:	89 c1                	mov    ecx,eax
c0026939:	31 d2                	xor    edx,edx
c002693b:	89 f0                	mov    eax,esi
c002693d:	f7 f1                	div    ecx
c002693f:	89 c3                	mov    ebx,eax
c0026941:	89 e8                	mov    eax,ebp
c0026943:	f7 f1                	div    ecx
c0026945:	89 da                	mov    edx,ebx
c0026947:	83 c4 1c             	add    esp,0x1c
c002694a:	5b                   	pop    ebx
c002694b:	5e                   	pop    esi
c002694c:	5f                   	pop    edi
c002694d:	5d                   	pop    ebp
c002694e:	c3                   	ret    
c002694f:	90                   	nop
c0026950:	39 f2                	cmp    edx,esi
c0026952:	77 1c                	ja     c0026970 <__udivdi3+0x7c>
c0026954:	0f bd da             	bsr    ebx,edx
c0026957:	83 f3 1f             	xor    ebx,0x1f
c002695a:	75 24                	jne    c0026980 <__udivdi3+0x8c>
c002695c:	39 f2                	cmp    edx,esi
c002695e:	72 08                	jb     c0026968 <__udivdi3+0x74>
c0026960:	39 ef                	cmp    edi,ebp
c0026962:	0f 87 84 00 00 00    	ja     c00269ec <__udivdi3+0xf8>
c0026968:	b8 01 00 00 00       	mov    eax,0x1
c002696d:	eb ac                	jmp    c002691b <__udivdi3+0x27>
c002696f:	90                   	nop
c0026970:	31 db                	xor    ebx,ebx
c0026972:	31 c0                	xor    eax,eax
c0026974:	89 da                	mov    edx,ebx
c0026976:	83 c4 1c             	add    esp,0x1c
c0026979:	5b                   	pop    ebx
c002697a:	5e                   	pop    esi
c002697b:	5f                   	pop    edi
c002697c:	5d                   	pop    ebp
c002697d:	c3                   	ret    
c002697e:	66 90                	xchg   ax,ax
c0026980:	b8 20 00 00 00       	mov    eax,0x20
c0026985:	29 d8                	sub    eax,ebx
c0026987:	88 d9                	mov    cl,bl
c0026989:	d3 e2                	shl    edx,cl
c002698b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002698f:	89 fa                	mov    edx,edi
c0026991:	88 c1                	mov    cl,al
c0026993:	d3 ea                	shr    edx,cl
c0026995:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026999:	09 d1                	or     ecx,edx
c002699b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002699f:	88 d9                	mov    cl,bl
c00269a1:	d3 e7                	shl    edi,cl
c00269a3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00269a7:	89 f7                	mov    edi,esi
c00269a9:	88 c1                	mov    cl,al
c00269ab:	d3 ef                	shr    edi,cl
c00269ad:	88 d9                	mov    cl,bl
c00269af:	d3 e6                	shl    esi,cl
c00269b1:	89 ea                	mov    edx,ebp
c00269b3:	88 c1                	mov    cl,al
c00269b5:	d3 ea                	shr    edx,cl
c00269b7:	09 d6                	or     esi,edx
c00269b9:	89 f0                	mov    eax,esi
c00269bb:	89 fa                	mov    edx,edi
c00269bd:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00269c1:	89 d7                	mov    edi,edx
c00269c3:	89 c6                	mov    esi,eax
c00269c5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00269c9:	39 d7                	cmp    edi,edx
c00269cb:	72 13                	jb     c00269e0 <__udivdi3+0xec>
c00269cd:	74 09                	je     c00269d8 <__udivdi3+0xe4>
c00269cf:	89 f0                	mov    eax,esi
c00269d1:	31 db                	xor    ebx,ebx
c00269d3:	e9 43 ff ff ff       	jmp    c002691b <__udivdi3+0x27>
c00269d8:	88 d9                	mov    cl,bl
c00269da:	d3 e5                	shl    ebp,cl
c00269dc:	39 c5                	cmp    ebp,eax
c00269de:	73 ef                	jae    c00269cf <__udivdi3+0xdb>
c00269e0:	8d 46 ff             	lea    eax,[esi-0x1]
c00269e3:	31 db                	xor    ebx,ebx
c00269e5:	e9 31 ff ff ff       	jmp    c002691b <__udivdi3+0x27>
c00269ea:	66 90                	xchg   ax,ax
c00269ec:	31 c0                	xor    eax,eax
c00269ee:	e9 28 ff ff ff       	jmp    c002691b <__udivdi3+0x27>
c00269f3:	90                   	nop

c00269f4 <__umoddi3>:
c00269f4:	55                   	push   ebp
c00269f5:	57                   	push   edi
c00269f6:	56                   	push   esi
c00269f7:	53                   	push   ebx
c00269f8:	83 ec 1c             	sub    esp,0x1c
c00269fb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00269ff:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026a03:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026a07:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026a0b:	89 da                	mov    edx,ebx
c0026a0d:	85 c0                	test   eax,eax
c0026a0f:	75 37                	jne    c0026a48 <__umoddi3+0x54>
c0026a11:	39 df                	cmp    edi,ebx
c0026a13:	76 13                	jbe    c0026a28 <__umoddi3+0x34>
c0026a15:	89 f0                	mov    eax,esi
c0026a17:	f7 f7                	div    edi
c0026a19:	89 d0                	mov    eax,edx
c0026a1b:	31 d2                	xor    edx,edx
c0026a1d:	83 c4 1c             	add    esp,0x1c
c0026a20:	5b                   	pop    ebx
c0026a21:	5e                   	pop    esi
c0026a22:	5f                   	pop    edi
c0026a23:	5d                   	pop    ebp
c0026a24:	c3                   	ret    
c0026a25:	8d 76 00             	lea    esi,[esi+0x0]
c0026a28:	89 fd                	mov    ebp,edi
c0026a2a:	85 ff                	test   edi,edi
c0026a2c:	75 0b                	jne    c0026a39 <__umoddi3+0x45>
c0026a2e:	b8 01 00 00 00       	mov    eax,0x1
c0026a33:	31 d2                	xor    edx,edx
c0026a35:	f7 f7                	div    edi
c0026a37:	89 c5                	mov    ebp,eax
c0026a39:	89 d8                	mov    eax,ebx
c0026a3b:	31 d2                	xor    edx,edx
c0026a3d:	f7 f5                	div    ebp
c0026a3f:	89 f0                	mov    eax,esi
c0026a41:	f7 f5                	div    ebp
c0026a43:	89 d0                	mov    eax,edx
c0026a45:	eb d4                	jmp    c0026a1b <__umoddi3+0x27>
c0026a47:	90                   	nop
c0026a48:	89 f1                	mov    ecx,esi
c0026a4a:	39 d8                	cmp    eax,ebx
c0026a4c:	76 0a                	jbe    c0026a58 <__umoddi3+0x64>
c0026a4e:	89 f0                	mov    eax,esi
c0026a50:	83 c4 1c             	add    esp,0x1c
c0026a53:	5b                   	pop    ebx
c0026a54:	5e                   	pop    esi
c0026a55:	5f                   	pop    edi
c0026a56:	5d                   	pop    ebp
c0026a57:	c3                   	ret    
c0026a58:	0f bd e8             	bsr    ebp,eax
c0026a5b:	83 f5 1f             	xor    ebp,0x1f
c0026a5e:	75 1c                	jne    c0026a7c <__umoddi3+0x88>
c0026a60:	39 d8                	cmp    eax,ebx
c0026a62:	72 04                	jb     c0026a68 <__umoddi3+0x74>
c0026a64:	39 f7                	cmp    edi,esi
c0026a66:	77 08                	ja     c0026a70 <__umoddi3+0x7c>
c0026a68:	89 da                	mov    edx,ebx
c0026a6a:	29 fe                	sub    esi,edi
c0026a6c:	19 c2                	sbb    edx,eax
c0026a6e:	89 f1                	mov    ecx,esi
c0026a70:	89 c8                	mov    eax,ecx
c0026a72:	83 c4 1c             	add    esp,0x1c
c0026a75:	5b                   	pop    ebx
c0026a76:	5e                   	pop    esi
c0026a77:	5f                   	pop    edi
c0026a78:	5d                   	pop    ebp
c0026a79:	c3                   	ret    
c0026a7a:	66 90                	xchg   ax,ax
c0026a7c:	ba 20 00 00 00       	mov    edx,0x20
c0026a81:	29 ea                	sub    edx,ebp
c0026a83:	89 e9                	mov    ecx,ebp
c0026a85:	d3 e0                	shl    eax,cl
c0026a87:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026a8b:	89 f8                	mov    eax,edi
c0026a8d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026a91:	88 d1                	mov    cl,dl
c0026a93:	d3 e8                	shr    eax,cl
c0026a95:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026a99:	09 c1                	or     ecx,eax
c0026a9b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026a9f:	89 e9                	mov    ecx,ebp
c0026aa1:	d3 e7                	shl    edi,cl
c0026aa3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026aa7:	89 d8                	mov    eax,ebx
c0026aa9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026aad:	88 d1                	mov    cl,dl
c0026aaf:	d3 e8                	shr    eax,cl
c0026ab1:	89 c7                	mov    edi,eax
c0026ab3:	89 e9                	mov    ecx,ebp
c0026ab5:	d3 e3                	shl    ebx,cl
c0026ab7:	89 f0                	mov    eax,esi
c0026ab9:	88 d1                	mov    cl,dl
c0026abb:	d3 e8                	shr    eax,cl
c0026abd:	09 d8                	or     eax,ebx
c0026abf:	89 e9                	mov    ecx,ebp
c0026ac1:	d3 e6                	shl    esi,cl
c0026ac3:	89 f3                	mov    ebx,esi
c0026ac5:	89 fa                	mov    edx,edi
c0026ac7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026acb:	89 d1                	mov    ecx,edx
c0026acd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026ad1:	89 c6                	mov    esi,eax
c0026ad3:	89 d7                	mov    edi,edx
c0026ad5:	39 d1                	cmp    ecx,edx
c0026ad7:	72 27                	jb     c0026b00 <__umoddi3+0x10c>
c0026ad9:	74 21                	je     c0026afc <__umoddi3+0x108>
c0026adb:	89 ca                	mov    edx,ecx
c0026add:	29 f3                	sub    ebx,esi
c0026adf:	19 fa                	sbb    edx,edi
c0026ae1:	89 d0                	mov    eax,edx
c0026ae3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026ae7:	d3 e0                	shl    eax,cl
c0026ae9:	89 e9                	mov    ecx,ebp
c0026aeb:	d3 eb                	shr    ebx,cl
c0026aed:	09 d8                	or     eax,ebx
c0026aef:	d3 ea                	shr    edx,cl
c0026af1:	83 c4 1c             	add    esp,0x1c
c0026af4:	5b                   	pop    ebx
c0026af5:	5e                   	pop    esi
c0026af6:	5f                   	pop    edi
c0026af7:	5d                   	pop    ebp
c0026af8:	c3                   	ret    
c0026af9:	8d 76 00             	lea    esi,[esi+0x0]
c0026afc:	39 c3                	cmp    ebx,eax
c0026afe:	73 db                	jae    c0026adb <__umoddi3+0xe7>
c0026b00:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026b04:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026b08:	89 d7                	mov    edi,edx
c0026b0a:	89 c6                	mov    esi,eax
c0026b0c:	eb cd                	jmp    c0026adb <__umoddi3+0xe7>

c0026b0e <__addsf3>:
c0026b0e:	55                   	push   ebp
c0026b0f:	89 e5                	mov    ebp,esp
c0026b11:	57                   	push   edi
c0026b12:	56                   	push   esi
c0026b13:	53                   	push   ebx
c0026b14:	83 ec 08             	sub    esp,0x8
c0026b17:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026b1a:	89 fa                	mov    edx,edi
c0026b1c:	89 f8                	mov    eax,edi
c0026b1e:	c1 f8 17             	sar    eax,0x17
c0026b21:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026b24:	c1 e2 08             	shl    edx,0x8
c0026b27:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026b2d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026b30:	89 de                	mov    esi,ebx
c0026b32:	c1 fe 17             	sar    esi,0x17
c0026b35:	c1 e3 08             	shl    ebx,0x8
c0026b38:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026b3e:	31 f0                	xor    eax,esi
c0026b40:	0f 88 3b 01 00 00    	js     c0026c81 <__addsf3+0x173>
c0026b46:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026b49:	29 f1                	sub    ecx,esi
c0026b4b:	85 c9                	test   ecx,ecx
c0026b4d:	7e 54                	jle    c0026ba3 <__addsf3+0x95>
c0026b4f:	89 f0                	mov    eax,esi
c0026b51:	84 c0                	test   al,al
c0026b53:	75 10                	jne    c0026b65 <__addsf3+0x57>
c0026b55:	85 db                	test   ebx,ebx
c0026b57:	0f 84 aa 02 00 00    	je     c0026e07 <__addsf3+0x2f9>
c0026b5d:	49                   	dec    ecx
c0026b5e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026b61:	74 38                	je     c0026b9b <__addsf3+0x8d>
c0026b63:	eb 13                	jmp    c0026b78 <__addsf3+0x6a>
c0026b65:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026b68:	f7 d0                	not    eax
c0026b6a:	84 c0                	test   al,al
c0026b6c:	0f 84 95 02 00 00    	je     c0026e07 <__addsf3+0x2f9>
c0026b72:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026b78:	83 f9 1f             	cmp    ecx,0x1f
c0026b7b:	0f 8f 86 02 00 00    	jg     c0026e07 <__addsf3+0x2f9>
c0026b81:	89 de                	mov    esi,ebx
c0026b83:	d3 ee                	shr    esi,cl
c0026b85:	b8 20 00 00 00       	mov    eax,0x20
c0026b8a:	29 c8                	sub    eax,ecx
c0026b8c:	89 c1                	mov    ecx,eax
c0026b8e:	d3 e3                	shl    ebx,cl
c0026b90:	31 c0                	xor    eax,eax
c0026b92:	85 db                	test   ebx,ebx
c0026b94:	0f 95 c0             	setne  al
c0026b97:	09 f0                	or     eax,esi
c0026b99:	01 d0                	add    eax,edx
c0026b9b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026b9e:	e9 b6 00 00 00       	jmp    c0026c59 <__addsf3+0x14b>
c0026ba3:	74 5c                	je     c0026c01 <__addsf3+0xf3>
c0026ba5:	89 f1                	mov    ecx,esi
c0026ba7:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026baa:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026bad:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026bb1:	75 14                	jne    c0026bc7 <__addsf3+0xb9>
c0026bb3:	85 d2                	test   edx,edx
c0026bb5:	0f 84 4c 02 00 00    	je     c0026e07 <__addsf3+0x2f9>
c0026bbb:	49                   	dec    ecx
c0026bbc:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026bbf:	0f 84 94 00 00 00    	je     c0026c59 <__addsf3+0x14b>
c0026bc5:	eb 12                	jmp    c0026bd9 <__addsf3+0xcb>
c0026bc7:	89 f0                	mov    eax,esi
c0026bc9:	f7 d0                	not    eax
c0026bcb:	84 c0                	test   al,al
c0026bcd:	0f 84 34 02 00 00    	je     c0026e07 <__addsf3+0x2f9>
c0026bd3:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026bd9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026bdc:	83 f9 1f             	cmp    ecx,0x1f
c0026bdf:	0f 8f 22 02 00 00    	jg     c0026e07 <__addsf3+0x2f9>
c0026be5:	89 d7                	mov    edi,edx
c0026be7:	d3 ef                	shr    edi,cl
c0026be9:	b8 20 00 00 00       	mov    eax,0x20
c0026bee:	29 c8                	sub    eax,ecx
c0026bf0:	89 c1                	mov    ecx,eax
c0026bf2:	d3 e2                	shl    edx,cl
c0026bf4:	31 c0                	xor    eax,eax
c0026bf6:	85 d2                	test   edx,edx
c0026bf8:	0f 95 c0             	setne  al
c0026bfb:	09 f8                	or     eax,edi
c0026bfd:	01 d8                	add    eax,ebx
c0026bff:	eb 58                	jmp    c0026c59 <__addsf3+0x14b>
c0026c01:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026c04:	8d 70 01             	lea    esi,[eax+0x1]
c0026c07:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026c0d:	75 32                	jne    c0026c41 <__addsf3+0x133>
c0026c0f:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026c13:	75 1f                	jne    c0026c34 <__addsf3+0x126>
c0026c15:	85 d2                	test   edx,edx
c0026c17:	0f 84 e0 01 00 00    	je     c0026dfd <__addsf3+0x2ef>
c0026c1d:	85 db                	test   ebx,ebx
c0026c1f:	0f 84 e2 01 00 00    	je     c0026e07 <__addsf3+0x2f9>
c0026c25:	89 d0                	mov    eax,edx
c0026c27:	01 d8                	add    eax,ebx
c0026c29:	0f 89 a9 01 00 00    	jns    c0026dd8 <__addsf3+0x2ca>
c0026c2f:	e9 9d 01 00 00       	jmp    c0026dd1 <__addsf3+0x2c3>
c0026c34:	85 d2                	test   edx,edx
c0026c36:	0f 85 cb 01 00 00    	jne    c0026e07 <__addsf3+0x2f9>
c0026c3c:	e9 bc 01 00 00       	jmp    c0026dfd <__addsf3+0x2ef>
c0026c41:	31 c0                	xor    eax,eax
c0026c43:	89 f1                	mov    ecx,esi
c0026c45:	f7 d1                	not    ecx
c0026c47:	84 c9                	test   cl,cl
c0026c49:	0f 84 90 01 00 00    	je     c0026ddf <__addsf3+0x2d1>
c0026c4f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026c52:	d1 e8                	shr    eax,1
c0026c54:	e9 86 01 00 00       	jmp    c0026ddf <__addsf3+0x2d1>
c0026c59:	85 c0                	test   eax,eax
c0026c5b:	0f 89 7e 01 00 00    	jns    c0026ddf <__addsf3+0x2d1>
c0026c61:	46                   	inc    esi
c0026c62:	89 f2                	mov    edx,esi
c0026c64:	f7 d2                	not    edx
c0026c66:	84 d2                	test   dl,dl
c0026c68:	0f 84 6f 01 00 00    	je     c0026ddd <__addsf3+0x2cf>
c0026c6e:	89 c2                	mov    edx,eax
c0026c70:	83 e2 01             	and    edx,0x1
c0026c73:	d1 e8                	shr    eax,1
c0026c75:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026c7a:	09 d0                	or     eax,edx
c0026c7c:	e9 5e 01 00 00       	jmp    c0026ddf <__addsf3+0x2d1>
c0026c81:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026c85:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026c88:	89 f0                	mov    eax,esi
c0026c8a:	0f b6 c0             	movzx  eax,al
c0026c8d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026c90:	29 c1                	sub    ecx,eax
c0026c92:	85 c9                	test   ecx,ecx
c0026c94:	7e 55                	jle    c0026ceb <__addsf3+0x1dd>
c0026c96:	85 c0                	test   eax,eax
c0026c98:	75 11                	jne    c0026cab <__addsf3+0x19d>
c0026c9a:	85 db                	test   ebx,ebx
c0026c9c:	0f 84 65 01 00 00    	je     c0026e07 <__addsf3+0x2f9>
c0026ca2:	49                   	dec    ecx
c0026ca3:	75 19                	jne    c0026cbe <__addsf3+0x1b0>
c0026ca5:	89 d0                	mov    eax,edx
c0026ca7:	29 d8                	sub    eax,ebx
c0026ca9:	eb 38                	jmp    c0026ce3 <__addsf3+0x1d5>
c0026cab:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026cae:	f7 d0                	not    eax
c0026cb0:	84 c0                	test   al,al
c0026cb2:	0f 84 4f 01 00 00    	je     c0026e07 <__addsf3+0x2f9>
c0026cb8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026cbe:	83 f9 1f             	cmp    ecx,0x1f
c0026cc1:	0f 8f 40 01 00 00    	jg     c0026e07 <__addsf3+0x2f9>
c0026cc7:	89 de                	mov    esi,ebx
c0026cc9:	d3 ee                	shr    esi,cl
c0026ccb:	b8 20 00 00 00       	mov    eax,0x20
c0026cd0:	29 c8                	sub    eax,ecx
c0026cd2:	89 c1                	mov    ecx,eax
c0026cd4:	d3 e3                	shl    ebx,cl
c0026cd6:	31 c0                	xor    eax,eax
c0026cd8:	85 db                	test   ebx,ebx
c0026cda:	0f 95 c0             	setne  al
c0026cdd:	09 f0                	or     eax,esi
c0026cdf:	29 c2                	sub    edx,eax
c0026ce1:	89 d0                	mov    eax,edx
c0026ce3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026ce6:	e9 af 00 00 00       	jmp    c0026d9a <__addsf3+0x28c>
c0026ceb:	74 5c                	je     c0026d49 <__addsf3+0x23b>
c0026ced:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026cf0:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026cf3:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026cf7:	75 14                	jne    c0026d0d <__addsf3+0x1ff>
c0026cf9:	85 d2                	test   edx,edx
c0026cfb:	0f 84 06 01 00 00    	je     c0026e07 <__addsf3+0x2f9>
c0026d01:	48                   	dec    eax
c0026d02:	75 1b                	jne    c0026d1f <__addsf3+0x211>
c0026d04:	89 d8                	mov    eax,ebx
c0026d06:	29 d0                	sub    eax,edx
c0026d08:	e9 8d 00 00 00       	jmp    c0026d9a <__addsf3+0x28c>
c0026d0d:	89 f1                	mov    ecx,esi
c0026d0f:	f7 d1                	not    ecx
c0026d11:	84 c9                	test   cl,cl
c0026d13:	0f 84 ee 00 00 00    	je     c0026e07 <__addsf3+0x2f9>
c0026d19:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026d1f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d22:	83 f8 1f             	cmp    eax,0x1f
c0026d25:	0f 8f dc 00 00 00    	jg     c0026e07 <__addsf3+0x2f9>
c0026d2b:	89 d7                	mov    edi,edx
c0026d2d:	88 c1                	mov    cl,al
c0026d2f:	d3 ef                	shr    edi,cl
c0026d31:	b9 20 00 00 00       	mov    ecx,0x20
c0026d36:	29 c1                	sub    ecx,eax
c0026d38:	d3 e2                	shl    edx,cl
c0026d3a:	31 c0                	xor    eax,eax
c0026d3c:	85 d2                	test   edx,edx
c0026d3e:	0f 95 c0             	setne  al
c0026d41:	09 f8                	or     eax,edi
c0026d43:	29 c3                	sub    ebx,eax
c0026d45:	89 d8                	mov    eax,ebx
c0026d47:	eb 51                	jmp    c0026d9a <__addsf3+0x28c>
c0026d49:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026d4c:	40                   	inc    eax
c0026d4d:	a8 fe                	test   al,0xfe
c0026d4f:	75 3d                	jne    c0026d8e <__addsf3+0x280>
c0026d51:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026d55:	0f 85 a7 00 00 00    	jne    c0026e02 <__addsf3+0x2f4>
c0026d5b:	85 d2                	test   edx,edx
c0026d5d:	75 12                	jne    c0026d71 <__addsf3+0x263>
c0026d5f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d62:	85 db                	test   ebx,ebx
c0026d64:	0f 85 9d 00 00 00    	jne    c0026e07 <__addsf3+0x2f9>
c0026d6a:	31 ff                	xor    edi,edi
c0026d6c:	e9 96 00 00 00       	jmp    c0026e07 <__addsf3+0x2f9>
c0026d71:	85 db                	test   ebx,ebx
c0026d73:	0f 84 8e 00 00 00    	je     c0026e07 <__addsf3+0x2f9>
c0026d79:	89 d0                	mov    eax,edx
c0026d7b:	29 d8                	sub    eax,ebx
c0026d7d:	79 06                	jns    c0026d85 <__addsf3+0x277>
c0026d7f:	89 d8                	mov    eax,ebx
c0026d81:	29 d0                	sub    eax,edx
c0026d83:	eb 5a                	jmp    c0026ddf <__addsf3+0x2d1>
c0026d85:	bf 00 00 00 00       	mov    edi,0x0
c0026d8a:	74 7b                	je     c0026e07 <__addsf3+0x2f9>
c0026d8c:	eb 4a                	jmp    c0026dd8 <__addsf3+0x2ca>
c0026d8e:	89 d0                	mov    eax,edx
c0026d90:	29 d8                	sub    eax,ebx
c0026d92:	79 12                	jns    c0026da6 <__addsf3+0x298>
c0026d94:	89 d8                	mov    eax,ebx
c0026d96:	29 d0                	sub    eax,edx
c0026d98:	eb 09                	jmp    c0026da3 <__addsf3+0x295>
c0026d9a:	85 c0                	test   eax,eax
c0026d9c:	79 41                	jns    c0026ddf <__addsf3+0x2d1>
c0026d9e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026da3:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026da6:	31 f6                	xor    esi,esi
c0026da8:	85 c0                	test   eax,eax
c0026daa:	74 33                	je     c0026ddf <__addsf3+0x2d1>
c0026dac:	0f bd c8             	bsr    ecx,eax
c0026daf:	83 f1 1f             	xor    ecx,0x1f
c0026db2:	d3 e0                	shl    eax,cl
c0026db4:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026db8:	39 ca                	cmp    edx,ecx
c0026dba:	7f 10                	jg     c0026dcc <__addsf3+0x2be>
c0026dbc:	29 d1                	sub    ecx,edx
c0026dbe:	41                   	inc    ecx
c0026dbf:	d3 e8                	shr    eax,cl
c0026dc1:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026dc4:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026dca:	eb 13                	jmp    c0026ddf <__addsf3+0x2d1>
c0026dcc:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026dcf:	29 ce                	sub    esi,ecx
c0026dd1:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026dd6:	eb 07                	jmp    c0026ddf <__addsf3+0x2d1>
c0026dd8:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026ddb:	eb 02                	jmp    c0026ddf <__addsf3+0x2d1>
c0026ddd:	31 c0                	xor    eax,eax
c0026ddf:	89 c2                	mov    edx,eax
c0026de1:	c1 ea 08             	shr    edx,0x8
c0026de4:	a8 7f                	test   al,0x7f
c0026de6:	0f 95 c1             	setne  cl
c0026de9:	09 d1                	or     ecx,edx
c0026deb:	83 e1 01             	and    ecx,0x1
c0026dee:	c1 e8 07             	shr    eax,0x7
c0026df1:	21 c8                	and    eax,ecx
c0026df3:	c1 e6 17             	shl    esi,0x17
c0026df6:	09 d6                	or     esi,edx
c0026df8:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026dfb:	eb 0a                	jmp    c0026e07 <__addsf3+0x2f9>
c0026dfd:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e00:	eb 05                	jmp    c0026e07 <__addsf3+0x2f9>
c0026e02:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026e07:	89 f8                	mov    eax,edi
c0026e09:	5a                   	pop    edx
c0026e0a:	59                   	pop    ecx
c0026e0b:	5b                   	pop    ebx
c0026e0c:	5e                   	pop    esi
c0026e0d:	5f                   	pop    edi
c0026e0e:	5d                   	pop    ebp
c0026e0f:	c3                   	ret    

c0026e10 <__subsf3>:
c0026e10:	55                   	push   ebp
c0026e11:	89 e5                	mov    ebp,esp
c0026e13:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026e16:	05 00 00 00 80       	add    eax,0x80000000
c0026e1b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026e1e:	5d                   	pop    ebp
c0026e1f:	e9 ea fc ff ff       	jmp    c0026b0e <__addsf3>

c0026e24 <__negsf2>:
c0026e24:	55                   	push   ebp
c0026e25:	89 e5                	mov    ebp,esp
c0026e27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026e2a:	05 00 00 00 80       	add    eax,0x80000000
c0026e2f:	5d                   	pop    ebp
c0026e30:	c3                   	ret    

c0026e31 <__mulsf3>:
c0026e31:	55                   	push   ebp
c0026e32:	89 e5                	mov    ebp,esp
c0026e34:	57                   	push   edi
c0026e35:	56                   	push   esi
c0026e36:	53                   	push   ebx
c0026e37:	83 ec 1c             	sub    esp,0x1c
c0026e3a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026e3d:	89 f0                	mov    eax,esi
c0026e3f:	89 f1                	mov    ecx,esi
c0026e41:	c1 f9 17             	sar    ecx,0x17
c0026e44:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026e47:	c1 e0 08             	shl    eax,0x8
c0026e4a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026e4f:	89 c1                	mov    ecx,eax
c0026e51:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026e54:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026e57:	89 c7                	mov    edi,eax
c0026e59:	c1 ff 17             	sar    edi,0x17
c0026e5c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026e60:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026e63:	89 f8                	mov    eax,edi
c0026e65:	0f b6 c0             	movzx  eax,al
c0026e68:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026e6b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026e6f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026e72:	42                   	inc    edx
c0026e73:	80 e2 fe             	and    dl,0xfe
c0026e76:	75 7b                	jne    c0026ef3 <__mulsf3+0xc2>
c0026e78:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026e7c:	74 54                	je     c0026ed2 <__mulsf3+0xa1>
c0026e7e:	85 c9                	test   ecx,ecx
c0026e80:	0f 85 64 01 00 00    	jne    c0026fea <__mulsf3+0x1b9>
c0026e86:	8d 57 01             	lea    edx,[edi+0x1]
c0026e89:	80 e2 fe             	and    dl,0xfe
c0026e8c:	75 1f                	jne    c0026ead <__mulsf3+0x7c>
c0026e8e:	85 c0                	test   eax,eax
c0026e90:	b8 00 00 00 00       	mov    eax,0x0
c0026e95:	74 29                	je     c0026ec0 <__mulsf3+0x8f>
c0026e97:	53                   	push   ebx
c0026e98:	53                   	push   ebx
c0026e99:	50                   	push   eax
c0026e9a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e9d:	e8 96 05 00 00       	call   c0027438 <__nesf2>
c0026ea2:	83 c4 10             	add    esp,0x10
c0026ea5:	85 c0                	test   eax,eax
c0026ea7:	0f 85 3a 01 00 00    	jne    c0026fe7 <__mulsf3+0x1b6>
c0026ead:	85 ff                	test   edi,edi
c0026eaf:	0f 89 35 01 00 00    	jns    c0026fea <__mulsf3+0x1b9>
c0026eb5:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026ebb:	e9 2a 01 00 00       	jmp    c0026fea <__mulsf3+0x1b9>
c0026ec0:	51                   	push   ecx
c0026ec1:	51                   	push   ecx
c0026ec2:	50                   	push   eax
c0026ec3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026ec6:	e8 6d 05 00 00       	call   c0027438 <__nesf2>
c0026ecb:	83 c4 10             	add    esp,0x10
c0026ece:	85 c0                	test   eax,eax
c0026ed0:	eb 15                	jmp    c0026ee7 <__mulsf3+0xb6>
c0026ed2:	85 c9                	test   ecx,ecx
c0026ed4:	74 0b                	je     c0026ee1 <__mulsf3+0xb0>
c0026ed6:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026ed9:	01 c9                	add    ecx,ecx
c0026edb:	78 16                	js     c0026ef3 <__mulsf3+0xc2>
c0026edd:	89 d3                	mov    ebx,edx
c0026edf:	eb f5                	jmp    c0026ed6 <__mulsf3+0xa5>
c0026ee1:	89 f8                	mov    eax,edi
c0026ee3:	f7 d0                	not    eax
c0026ee5:	84 c0                	test   al,al
c0026ee7:	75 c4                	jne    c0026ead <__mulsf3+0x7c>
c0026ee9:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026eee:	e9 f7 00 00 00       	jmp    c0026fea <__mulsf3+0x1b9>
c0026ef3:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026ef6:	c1 e6 08             	shl    esi,0x8
c0026ef9:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026eff:	8d 57 01             	lea    edx,[edi+0x1]
c0026f02:	80 e2 fe             	and    dl,0xfe
c0026f05:	75 63                	jne    c0026f6a <__mulsf3+0x139>
c0026f07:	85 c0                	test   eax,eax
c0026f09:	74 2f                	je     c0026f3a <__mulsf3+0x109>
c0026f0b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026f0f:	0f 89 d2 00 00 00    	jns    c0026fe7 <__mulsf3+0x1b6>
c0026f15:	52                   	push   edx
c0026f16:	52                   	push   edx
c0026f17:	6a 00                	push   0x0
c0026f19:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f1c:	e8 dc 04 00 00       	call   c00273fd <__eqsf2>
c0026f21:	83 c4 10             	add    esp,0x10
c0026f24:	85 c0                	test   eax,eax
c0026f26:	0f 85 bb 00 00 00    	jne    c0026fe7 <__mulsf3+0x1b6>
c0026f2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026f2f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026f35:	e9 b0 00 00 00       	jmp    c0026fea <__mulsf3+0x1b9>
c0026f3a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026f3d:	50                   	push   eax
c0026f3e:	50                   	push   eax
c0026f3f:	6a 00                	push   0x0
c0026f41:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f44:	e8 b4 04 00 00       	call   c00273fd <__eqsf2>
c0026f49:	83 c4 10             	add    esp,0x10
c0026f4c:	85 c0                	test   eax,eax
c0026f4e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026f51:	75 0c                	jne    c0026f5f <__mulsf3+0x12e>
c0026f53:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026f57:	0f 89 8a 00 00 00    	jns    c0026fe7 <__mulsf3+0x1b6>
c0026f5d:	eb cd                	jmp    c0026f2c <__mulsf3+0xfb>
c0026f5f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026f62:	01 f6                	add    esi,esi
c0026f64:	78 04                	js     c0026f6a <__mulsf3+0x139>
c0026f66:	89 c3                	mov    ebx,eax
c0026f68:	eb f5                	jmp    c0026f5f <__mulsf3+0x12e>
c0026f6a:	89 c8                	mov    eax,ecx
c0026f6c:	0d 00 00 00 80       	or     eax,0x80000000
c0026f71:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026f77:	f7 e6                	mul    esi
c0026f79:	85 c0                	test   eax,eax
c0026f7b:	0f 95 c0             	setne  al
c0026f7e:	0f b6 c0             	movzx  eax,al
c0026f81:	09 c2                	or     edx,eax
c0026f83:	78 03                	js     c0026f88 <__mulsf3+0x157>
c0026f85:	01 d2                	add    edx,edx
c0026f87:	4b                   	dec    ebx
c0026f88:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0026f8e:	7f 22                	jg     c0026fb2 <__mulsf3+0x181>
c0026f90:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026f96:	85 db                	test   ebx,ebx
c0026f98:	7f 23                	jg     c0026fbd <__mulsf3+0x18c>
c0026f9a:	83 fb e9             	cmp    ebx,0xffffffe9
c0026f9d:	7c 1a                	jl     c0026fb9 <__mulsf3+0x188>
c0026f9f:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026fa5:	b9 01 00 00 00       	mov    ecx,0x1
c0026faa:	29 d9                	sub    ecx,ebx
c0026fac:	d3 ea                	shr    edx,cl
c0026fae:	31 db                	xor    ebx,ebx
c0026fb0:	eb 0b                	jmp    c0026fbd <__mulsf3+0x18c>
c0026fb2:	bb ff 00 00 00       	mov    ebx,0xff
c0026fb7:	eb 02                	jmp    c0026fbb <__mulsf3+0x18a>
c0026fb9:	31 db                	xor    ebx,ebx
c0026fbb:	31 d2                	xor    edx,edx
c0026fbd:	89 d0                	mov    eax,edx
c0026fbf:	c1 e8 08             	shr    eax,0x8
c0026fc2:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026fc5:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026fcb:	09 fb                	or     ebx,edi
c0026fcd:	c1 e3 17             	shl    ebx,0x17
c0026fd0:	09 c3                	or     ebx,eax
c0026fd2:	f6 c2 7f             	test   dl,0x7f
c0026fd5:	0f 95 c1             	setne  cl
c0026fd8:	09 c8                	or     eax,ecx
c0026fda:	83 e0 01             	and    eax,0x1
c0026fdd:	c1 ea 07             	shr    edx,0x7
c0026fe0:	21 c2                	and    edx,eax
c0026fe2:	8d 34 13             	lea    esi,[ebx+edx*1]
c0026fe5:	eb 03                	jmp    c0026fea <__mulsf3+0x1b9>
c0026fe7:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0026fea:	89 f0                	mov    eax,esi
c0026fec:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026fef:	5b                   	pop    ebx
c0026ff0:	5e                   	pop    esi
c0026ff1:	5f                   	pop    edi
c0026ff2:	5d                   	pop    ebp
c0026ff3:	c3                   	ret    

c0026ff4 <__divsf3>:
c0026ff4:	55                   	push   ebp
c0026ff5:	89 e5                	mov    ebp,esp
c0026ff7:	57                   	push   edi
c0026ff8:	56                   	push   esi
c0026ff9:	53                   	push   ebx
c0026ffa:	83 ec 1c             	sub    esp,0x1c
c0026ffd:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027000:	89 d8                	mov    eax,ebx
c0027002:	89 d9                	mov    ecx,ebx
c0027004:	c1 f9 17             	sar    ecx,0x17
c0027007:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c002700a:	c1 e0 08             	shl    eax,0x8
c002700d:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027012:	89 c1                	mov    ecx,eax
c0027014:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027017:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002701a:	89 c7                	mov    edi,eax
c002701c:	c1 ff 17             	sar    edi,0x17
c002701f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027023:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027026:	89 f8                	mov    eax,edi
c0027028:	0f b6 c0             	movzx  eax,al
c002702b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002702e:	29 c6                	sub    esi,eax
c0027030:	83 c6 7f             	add    esi,0x7f
c0027033:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027036:	42                   	inc    edx
c0027037:	80 e2 fe             	and    dl,0xfe
c002703a:	0f 85 9c 00 00 00    	jne    c00270dc <__divsf3+0xe8>
c0027040:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027044:	74 33                	je     c0027079 <__divsf3+0x85>
c0027046:	85 c9                	test   ecx,ecx
c0027048:	0f 85 c7 01 00 00    	jne    c0027215 <__divsf3+0x221>
c002704e:	8d 57 01             	lea    edx,[edi+0x1]
c0027051:	80 e2 fe             	and    dl,0xfe
c0027054:	75 2f                	jne    c0027085 <__divsf3+0x91>
c0027056:	85 c0                	test   eax,eax
c0027058:	74 2b                	je     c0027085 <__divsf3+0x91>
c002705a:	51                   	push   ecx
c002705b:	51                   	push   ecx
c002705c:	6a 00                	push   0x0
c002705e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027061:	e8 d2 03 00 00       	call   c0027438 <__nesf2>
c0027066:	83 c4 10             	add    esp,0x10
c0027069:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002706c:	85 c0                	test   eax,eax
c002706e:	0f 85 a1 01 00 00    	jne    c0027215 <__divsf3+0x221>
c0027074:	e9 92 01 00 00       	jmp    c002720b <__divsf3+0x217>
c0027079:	85 c9                	test   ecx,ecx
c002707b:	75 1b                	jne    c0027098 <__divsf3+0xa4>
c002707d:	8d 57 01             	lea    edx,[edi+0x1]
c0027080:	80 e2 fe             	and    dl,0xfe
c0027083:	74 1e                	je     c00270a3 <__divsf3+0xaf>
c0027085:	85 ff                	test   edi,edi
c0027087:	0f 89 88 01 00 00    	jns    c0027215 <__divsf3+0x221>
c002708d:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0027093:	e9 7d 01 00 00       	jmp    c0027215 <__divsf3+0x221>
c0027098:	8d 56 ff             	lea    edx,[esi-0x1]
c002709b:	01 c9                	add    ecx,ecx
c002709d:	78 3d                	js     c00270dc <__divsf3+0xe8>
c002709f:	89 d6                	mov    esi,edx
c00270a1:	eb f5                	jmp    c0027098 <__divsf3+0xa4>
c00270a3:	85 c0                	test   eax,eax
c00270a5:	b8 00 00 00 00       	mov    eax,0x0
c00270aa:	74 18                	je     c00270c4 <__divsf3+0xd0>
c00270ac:	52                   	push   edx
c00270ad:	52                   	push   edx
c00270ae:	50                   	push   eax
c00270af:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00270b2:	e8 81 03 00 00       	call   c0027438 <__nesf2>
c00270b7:	83 c4 10             	add    esp,0x10
c00270ba:	85 c0                	test   eax,eax
c00270bc:	0f 85 50 01 00 00    	jne    c0027212 <__divsf3+0x21e>
c00270c2:	eb c1                	jmp    c0027085 <__divsf3+0x91>
c00270c4:	56                   	push   esi
c00270c5:	56                   	push   esi
c00270c6:	50                   	push   eax
c00270c7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00270ca:	e8 69 03 00 00       	call   c0027438 <__nesf2>
c00270cf:	83 c4 10             	add    esp,0x10
c00270d2:	85 c0                	test   eax,eax
c00270d4:	0f 84 31 01 00 00    	je     c002720b <__divsf3+0x217>
c00270da:	eb a9                	jmp    c0027085 <__divsf3+0x91>
c00270dc:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c00270df:	c1 e3 08             	shl    ebx,0x8
c00270e2:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00270e8:	8d 57 01             	lea    edx,[edi+0x1]
c00270eb:	80 e2 fe             	and    dl,0xfe
c00270ee:	75 71                	jne    c0027161 <__divsf3+0x16d>
c00270f0:	85 c0                	test   eax,eax
c00270f2:	ba 00 00 00 00       	mov    edx,0x0
c00270f7:	74 2f                	je     c0027128 <__divsf3+0x134>
c00270f9:	51                   	push   ecx
c00270fa:	51                   	push   ecx
c00270fb:	52                   	push   edx
c00270fc:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00270ff:	e8 f9 02 00 00       	call   c00273fd <__eqsf2>
c0027104:	83 c4 10             	add    esp,0x10
c0027107:	85 c0                	test   eax,eax
c0027109:	0f 85 03 01 00 00    	jne    c0027212 <__divsf3+0x21e>
c002710f:	31 d2                	xor    edx,edx
c0027111:	89 d3                	mov    ebx,edx
c0027113:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027116:	31 f8                	xor    eax,edi
c0027118:	0f 89 f7 00 00 00    	jns    c0027215 <__divsf3+0x221>
c002711e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0027123:	e9 ed 00 00 00       	jmp    c0027215 <__divsf3+0x221>
c0027128:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c002712b:	50                   	push   eax
c002712c:	50                   	push   eax
c002712d:	52                   	push   edx
c002712e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027131:	e8 c7 02 00 00       	call   c00273fd <__eqsf2>
c0027136:	83 c4 10             	add    esp,0x10
c0027139:	85 c0                	test   eax,eax
c002713b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002713e:	75 16                	jne    c0027156 <__divsf3+0x162>
c0027140:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027143:	31 fb                	xor    ebx,edi
c0027145:	81 e3 00 00 00 80    	and    ebx,0x80000000
c002714b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027151:	e9 bf 00 00 00       	jmp    c0027215 <__divsf3+0x221>
c0027156:	8d 46 01             	lea    eax,[esi+0x1]
c0027159:	01 db                	add    ebx,ebx
c002715b:	78 04                	js     c0027161 <__divsf3+0x16d>
c002715d:	89 c6                	mov    esi,eax
c002715f:	eb f5                	jmp    c0027156 <__divsf3+0x162>
c0027161:	89 c8                	mov    eax,ecx
c0027163:	0d 00 00 00 80       	or     eax,0x80000000
c0027168:	81 cb 00 00 00 80    	or     ebx,0x80000000
c002716e:	31 d2                	xor    edx,edx
c0027170:	39 d8                	cmp    eax,ebx
c0027172:	72 07                	jb     c002717b <__divsf3+0x187>
c0027174:	29 d8                	sub    eax,ebx
c0027176:	ba 01 00 00 00       	mov    edx,0x1
c002717b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0027182:	01 d2                	add    edx,edx
c0027184:	89 c1                	mov    ecx,eax
c0027186:	01 c0                	add    eax,eax
c0027188:	85 c9                	test   ecx,ecx
c002718a:	78 04                	js     c0027190 <__divsf3+0x19c>
c002718c:	39 c3                	cmp    ebx,eax
c002718e:	77 05                	ja     c0027195 <__divsf3+0x1a1>
c0027190:	29 d8                	sub    eax,ebx
c0027192:	83 ca 01             	or     edx,0x1
c0027195:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027198:	75 e8                	jne    c0027182 <__divsf3+0x18e>
c002719a:	85 c0                	test   eax,eax
c002719c:	0f 95 c0             	setne  al
c002719f:	0f b6 c0             	movzx  eax,al
c00271a2:	c1 e2 06             	shl    edx,0x6
c00271a5:	09 c2                	or     edx,eax
c00271a7:	78 03                	js     c00271ac <__divsf3+0x1b8>
c00271a9:	01 d2                	add    edx,edx
c00271ab:	4e                   	dec    esi
c00271ac:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00271b2:	7f 22                	jg     c00271d6 <__divsf3+0x1e2>
c00271b4:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00271ba:	85 f6                	test   esi,esi
c00271bc:	7f 23                	jg     c00271e1 <__divsf3+0x1ed>
c00271be:	83 fe e9             	cmp    esi,0xffffffe9
c00271c1:	7c 1a                	jl     c00271dd <__divsf3+0x1e9>
c00271c3:	81 ca 00 00 00 80    	or     edx,0x80000000
c00271c9:	b9 01 00 00 00       	mov    ecx,0x1
c00271ce:	29 f1                	sub    ecx,esi
c00271d0:	d3 ea                	shr    edx,cl
c00271d2:	31 f6                	xor    esi,esi
c00271d4:	eb 0b                	jmp    c00271e1 <__divsf3+0x1ed>
c00271d6:	be ff 00 00 00       	mov    esi,0xff
c00271db:	eb 02                	jmp    c00271df <__divsf3+0x1eb>
c00271dd:	31 f6                	xor    esi,esi
c00271df:	31 d2                	xor    edx,edx
c00271e1:	89 d0                	mov    eax,edx
c00271e3:	c1 e8 08             	shr    eax,0x8
c00271e6:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00271e9:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00271ef:	09 fe                	or     esi,edi
c00271f1:	c1 e6 17             	shl    esi,0x17
c00271f4:	09 c6                	or     esi,eax
c00271f6:	f6 c2 7f             	test   dl,0x7f
c00271f9:	0f 95 c1             	setne  cl
c00271fc:	09 c8                	or     eax,ecx
c00271fe:	83 e0 01             	and    eax,0x1
c0027201:	c1 ea 07             	shr    edx,0x7
c0027204:	21 c2                	and    edx,eax
c0027206:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027209:	eb 0a                	jmp    c0027215 <__divsf3+0x221>
c002720b:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027210:	eb 03                	jmp    c0027215 <__divsf3+0x221>
c0027212:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027215:	89 d8                	mov    eax,ebx
c0027217:	8d 65 f4             	lea    esp,[ebp-0xc]
c002721a:	5b                   	pop    ebx
c002721b:	5e                   	pop    esi
c002721c:	5f                   	pop    edi
c002721d:	5d                   	pop    ebp
c002721e:	c3                   	ret    

c002721f <__floatsisf>:
c002721f:	55                   	push   ebp
c0027220:	89 e5                	mov    ebp,esp
c0027222:	53                   	push   ebx
c0027223:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027226:	85 d2                	test   edx,edx
c0027228:	7e 2b                	jle    c0027255 <__floatsisf+0x36>
c002722a:	0f bd ca             	bsr    ecx,edx
c002722d:	83 f1 1f             	xor    ecx,0x1f
c0027230:	d3 e2                	shl    edx,cl
c0027232:	89 d0                	mov    eax,edx
c0027234:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027239:	89 c3                	mov    ebx,eax
c002723b:	c1 eb 08             	shr    ebx,0x8
c002723e:	80 e2 7f             	and    dl,0x7f
c0027241:	0f 95 c2             	setne  dl
c0027244:	09 da                	or     edx,ebx
c0027246:	83 e2 01             	and    edx,0x1
c0027249:	c1 e8 07             	shr    eax,0x7
c002724c:	21 c2                	and    edx,eax
c002724e:	b8 9e 00 00 00       	mov    eax,0x9e
c0027253:	eb 32                	jmp    c0027287 <__floatsisf+0x68>
c0027255:	b8 00 00 00 00       	mov    eax,0x0
c002725a:	74 34                	je     c0027290 <__floatsisf+0x71>
c002725c:	f7 da                	neg    edx
c002725e:	0f bd ca             	bsr    ecx,edx
c0027261:	83 f1 1f             	xor    ecx,0x1f
c0027264:	d3 e2                	shl    edx,cl
c0027266:	89 d0                	mov    eax,edx
c0027268:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002726d:	89 c3                	mov    ebx,eax
c002726f:	c1 eb 08             	shr    ebx,0x8
c0027272:	80 e2 7f             	and    dl,0x7f
c0027275:	0f 95 c2             	setne  dl
c0027278:	09 da                	or     edx,ebx
c002727a:	83 e2 01             	and    edx,0x1
c002727d:	c1 e8 07             	shr    eax,0x7
c0027280:	21 c2                	and    edx,eax
c0027282:	b8 9e 01 00 00       	mov    eax,0x19e
c0027287:	29 c8                	sub    eax,ecx
c0027289:	c1 e0 17             	shl    eax,0x17
c002728c:	09 d8                	or     eax,ebx
c002728e:	01 d0                	add    eax,edx
c0027290:	5b                   	pop    ebx
c0027291:	5d                   	pop    ebp
c0027292:	c3                   	ret    

c0027293 <__floatunsisf>:
c0027293:	55                   	push   ebp
c0027294:	89 e5                	mov    ebp,esp
c0027296:	53                   	push   ebx
c0027297:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002729a:	31 c0                	xor    eax,eax
c002729c:	85 d2                	test   edx,edx
c002729e:	74 32                	je     c00272d2 <__floatunsisf+0x3f>
c00272a0:	0f bd ca             	bsr    ecx,edx
c00272a3:	83 f1 1f             	xor    ecx,0x1f
c00272a6:	d3 e2                	shl    edx,cl
c00272a8:	89 d0                	mov    eax,edx
c00272aa:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00272af:	89 c3                	mov    ebx,eax
c00272b1:	c1 eb 08             	shr    ebx,0x8
c00272b4:	80 e2 7f             	and    dl,0x7f
c00272b7:	0f 95 c2             	setne  dl
c00272ba:	09 da                	or     edx,ebx
c00272bc:	83 e2 01             	and    edx,0x1
c00272bf:	c1 e8 07             	shr    eax,0x7
c00272c2:	21 c2                	and    edx,eax
c00272c4:	b8 9e 00 00 00       	mov    eax,0x9e
c00272c9:	29 c8                	sub    eax,ecx
c00272cb:	c1 e0 17             	shl    eax,0x17
c00272ce:	09 d8                	or     eax,ebx
c00272d0:	01 d0                	add    eax,edx
c00272d2:	5b                   	pop    ebx
c00272d3:	5d                   	pop    ebp
c00272d4:	c3                   	ret    

c00272d5 <__fixsfsi>:
c00272d5:	55                   	push   ebp
c00272d6:	89 e5                	mov    ebp,esp
c00272d8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00272db:	89 d1                	mov    ecx,edx
c00272dd:	c1 e1 08             	shl    ecx,0x8
c00272e0:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c00272e6:	c1 fa 17             	sar    edx,0x17
c00272e9:	78 1c                	js     c0027307 <__fixsfsi+0x32>
c00272eb:	83 ea 7f             	sub    edx,0x7f
c00272ee:	31 c0                	xor    eax,eax
c00272f0:	83 fa 1e             	cmp    edx,0x1e
c00272f3:	77 40                	ja     c0027335 <__fixsfsi+0x60>
c00272f5:	89 c8                	mov    eax,ecx
c00272f7:	0d 00 00 00 80       	or     eax,0x80000000
c00272fc:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027301:	29 d1                	sub    ecx,edx
c0027303:	d3 e8                	shr    eax,cl
c0027305:	eb 2e                	jmp    c0027335 <__fixsfsi+0x60>
c0027307:	31 c0                	xor    eax,eax
c0027309:	81 c2 81 00 00 00    	add    edx,0x81
c002730f:	78 24                	js     c0027335 <__fixsfsi+0x60>
c0027311:	83 fa 1e             	cmp    edx,0x1e
c0027314:	7e 09                	jle    c002731f <__fixsfsi+0x4a>
c0027316:	83 fa 1f             	cmp    edx,0x1f
c0027319:	75 18                	jne    c0027333 <__fixsfsi+0x5e>
c002731b:	85 c9                	test   ecx,ecx
c002731d:	75 14                	jne    c0027333 <__fixsfsi+0x5e>
c002731f:	89 c8                	mov    eax,ecx
c0027321:	0d 00 00 00 80       	or     eax,0x80000000
c0027326:	b9 1f 00 00 00       	mov    ecx,0x1f
c002732b:	29 d1                	sub    ecx,edx
c002732d:	d3 e8                	shr    eax,cl
c002732f:	f7 d8                	neg    eax
c0027331:	eb 02                	jmp    c0027335 <__fixsfsi+0x60>
c0027333:	31 c0                	xor    eax,eax
c0027335:	5d                   	pop    ebp
c0027336:	c3                   	ret    

c0027337 <__fixunssfsi>:
c0027337:	55                   	push   ebp
c0027338:	89 e5                	mov    ebp,esp
c002733a:	53                   	push   ebx
c002733b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002733e:	89 d3                	mov    ebx,edx
c0027340:	c1 fb 17             	sar    ebx,0x17
c0027343:	83 eb 7f             	sub    ebx,0x7f
c0027346:	31 c0                	xor    eax,eax
c0027348:	83 fb 1f             	cmp    ebx,0x1f
c002734b:	77 18                	ja     c0027365 <__fixunssfsi+0x2e>
c002734d:	89 d0                	mov    eax,edx
c002734f:	c1 e0 08             	shl    eax,0x8
c0027352:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027357:	0d 00 00 00 80       	or     eax,0x80000000
c002735c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027361:	29 d9                	sub    ecx,ebx
c0027363:	d3 e8                	shr    eax,cl
c0027365:	5b                   	pop    ebx
c0027366:	5d                   	pop    ebp
c0027367:	c3                   	ret    

c0027368 <__cmpsf2>:
c0027368:	55                   	push   ebp
c0027369:	89 e5                	mov    ebp,esp
c002736b:	57                   	push   edi
c002736c:	56                   	push   esi
c002736d:	53                   	push   ebx
c002736e:	83 ec 24             	sub    esp,0x24
c0027371:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027374:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027377:	e8 4f 10 00 00       	call   c00283cb <__truncdfsf2>
c002737c:	5a                   	pop    edx
c002737d:	59                   	pop    ecx
c002737e:	89 c3                	mov    ebx,eax
c0027380:	c1 e8 17             	shr    eax,0x17
c0027383:	0f b6 f0             	movzx  esi,al
c0027386:	89 d8                	mov    eax,ebx
c0027388:	c1 e8 1f             	shr    eax,0x1f
c002738b:	31 c6                	xor    esi,eax
c002738d:	c1 e3 08             	shl    ebx,0x8
c0027390:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027393:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027396:	e8 30 10 00 00       	call   c00283cb <__truncdfsf2>
c002739b:	83 c4 10             	add    esp,0x10
c002739e:	89 c1                	mov    ecx,eax
c00273a0:	c1 e9 17             	shr    ecx,0x17
c00273a3:	0f b6 c9             	movzx  ecx,cl
c00273a6:	89 c7                	mov    edi,eax
c00273a8:	c1 ef 1f             	shr    edi,0x1f
c00273ab:	89 ca                	mov    edx,ecx
c00273ad:	31 fa                	xor    edx,edi
c00273af:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00273b2:	c1 e0 08             	shl    eax,0x8
c00273b5:	89 c2                	mov    edx,eax
c00273b7:	89 d8                	mov    eax,ebx
c00273b9:	09 d0                	or     eax,edx
c00273bb:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00273c0:	09 f0                	or     eax,esi
c00273c2:	75 08                	jne    c00273cc <__cmpsf2+0x64>
c00273c4:	31 c0                	xor    eax,eax
c00273c6:	39 f9                	cmp    ecx,edi
c00273c8:	75 0c                	jne    c00273d6 <__cmpsf2+0x6e>
c00273ca:	eb 29                	jmp    c00273f5 <__cmpsf2+0x8d>
c00273cc:	b8 01 00 00 00       	mov    eax,0x1
c00273d1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00273d4:	7f 1f                	jg     c00273f5 <__cmpsf2+0x8d>
c00273d6:	83 c8 ff             	or     eax,0xffffffff
c00273d9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00273dc:	7c 17                	jl     c00273f5 <__cmpsf2+0x8d>
c00273de:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00273e4:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00273ea:	b8 01 00 00 00       	mov    eax,0x1
c00273ef:	39 d3                	cmp    ebx,edx
c00273f1:	77 02                	ja     c00273f5 <__cmpsf2+0x8d>
c00273f3:	19 c0                	sbb    eax,eax
c00273f5:	8d 65 f4             	lea    esp,[ebp-0xc]
c00273f8:	5b                   	pop    ebx
c00273f9:	5e                   	pop    esi
c00273fa:	5f                   	pop    edi
c00273fb:	5d                   	pop    ebp
c00273fc:	c3                   	ret    

c00273fd <__eqsf2>:
c00273fd:	55                   	push   ebp
c00273fe:	89 e5                	mov    ebp,esp
c0027400:	83 ec 24             	sub    esp,0x24
c0027403:	6a 01                	push   0x1
c0027405:	83 ec 0c             	sub    esp,0xc
c0027408:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002740b:	e8 df 10 00 00       	call   c00284ef <__extendsfdf2>
c0027410:	83 c4 10             	add    esp,0x10
c0027413:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027416:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027419:	52                   	push   edx
c002741a:	50                   	push   eax
c002741b:	50                   	push   eax
c002741c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002741f:	e8 cb 10 00 00       	call   c00284ef <__extendsfdf2>
c0027424:	59                   	pop    ecx
c0027425:	59                   	pop    ecx
c0027426:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027429:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002742c:	52                   	push   edx
c002742d:	50                   	push   eax
c002742e:	e8 35 ff ff ff       	call   c0027368 <__cmpsf2>
c0027433:	83 c4 20             	add    esp,0x20
c0027436:	c9                   	leave  
c0027437:	c3                   	ret    

c0027438 <__nesf2>:
c0027438:	eb c3                	jmp    c00273fd <__eqsf2>

c002743a <__gtsf2>:
c002743a:	55                   	push   ebp
c002743b:	89 e5                	mov    ebp,esp
c002743d:	83 ec 24             	sub    esp,0x24
c0027440:	6a ff                	push   0xffffffff
c0027442:	83 ec 0c             	sub    esp,0xc
c0027445:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027448:	e8 a2 10 00 00       	call   c00284ef <__extendsfdf2>
c002744d:	83 c4 10             	add    esp,0x10
c0027450:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027453:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027456:	52                   	push   edx
c0027457:	50                   	push   eax
c0027458:	50                   	push   eax
c0027459:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002745c:	e8 8e 10 00 00       	call   c00284ef <__extendsfdf2>
c0027461:	59                   	pop    ecx
c0027462:	59                   	pop    ecx
c0027463:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027466:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027469:	52                   	push   edx
c002746a:	50                   	push   eax
c002746b:	e8 f8 fe ff ff       	call   c0027368 <__cmpsf2>
c0027470:	83 c4 20             	add    esp,0x20
c0027473:	c9                   	leave  
c0027474:	c3                   	ret    

c0027475 <__gesf2>:
c0027475:	eb c3                	jmp    c002743a <__gtsf2>

c0027477 <__ltsf2>:
c0027477:	eb 84                	jmp    c00273fd <__eqsf2>

c0027479 <__lesf2>:
c0027479:	eb 82                	jmp    c00273fd <__eqsf2>

c002747b <__adddf3>:
c002747b:	55                   	push   ebp
c002747c:	89 e5                	mov    ebp,esp
c002747e:	57                   	push   edi
c002747f:	56                   	push   esi
c0027480:	53                   	push   ebx
c0027481:	83 ec 24             	sub    esp,0x24
c0027484:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027487:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002748a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002748d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027490:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027493:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027496:	89 c8                	mov    eax,ecx
c0027498:	89 ce                	mov    esi,ecx
c002749a:	c1 fe 14             	sar    esi,0x14
c002749d:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c00274a0:	89 fb                	mov    ebx,edi
c00274a2:	89 fa                	mov    edx,edi
c00274a4:	c1 e2 0b             	shl    edx,0xb
c00274a7:	c1 e0 0b             	shl    eax,0xb
c00274aa:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00274af:	c1 eb 15             	shr    ebx,0x15
c00274b2:	09 d8                	or     eax,ebx
c00274b4:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00274b7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00274ba:	c1 fe 14             	sar    esi,0x14
c00274bd:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00274c0:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00274c3:	89 f3                	mov    ebx,esi
c00274c5:	c1 e3 0b             	shl    ebx,0xb
c00274c8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00274cb:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00274ce:	c1 e3 0b             	shl    ebx,0xb
c00274d1:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c00274d7:	c1 ee 15             	shr    esi,0x15
c00274da:	09 f3                	or     ebx,esi
c00274dc:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c00274df:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00274e2:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c00274e5:	0f 88 5f 02 00 00    	js     c002774a <__adddf3+0x2cf>
c00274eb:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00274ee:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c00274f1:	85 db                	test   ebx,ebx
c00274f3:	0f 8e c7 00 00 00    	jle    c00275c0 <__adddf3+0x145>
c00274f9:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027500:	75 1a                	jne    c002751c <__adddf3+0xa1>
c0027502:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027505:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027508:	0f 84 b2 05 00 00    	je     c0027ac0 <__adddf3+0x645>
c002750e:	4b                   	dec    ebx
c002750f:	75 23                	jne    c0027534 <__adddf3+0xb9>
c0027511:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027514:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027517:	e9 99 00 00 00       	jmp    c00275b5 <__adddf3+0x13a>
c002751c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002751f:	f7 d6                	not    esi
c0027521:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027527:	0f 84 93 05 00 00    	je     c0027ac0 <__adddf3+0x645>
c002752d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027534:	83 fb 1f             	cmp    ebx,0x1f
c0027537:	7e 42                	jle    c002757b <__adddf3+0x100>
c0027539:	83 fb 3f             	cmp    ebx,0x3f
c002753c:	0f 8f 7e 05 00 00    	jg     c0027ac0 <__adddf3+0x645>
c0027542:	83 e3 1f             	and    ebx,0x1f
c0027545:	89 d9                	mov    ecx,ebx
c0027547:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c002754a:	d3 ef                	shr    edi,cl
c002754c:	31 db                	xor    ebx,ebx
c002754e:	85 c9                	test   ecx,ecx
c0027550:	74 15                	je     c0027567 <__adddf3+0xec>
c0027552:	be 20 00 00 00       	mov    esi,0x20
c0027557:	29 ce                	sub    esi,ecx
c0027559:	89 f1                	mov    ecx,esi
c002755b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002755e:	d3 e6                	shl    esi,cl
c0027560:	31 db                	xor    ebx,ebx
c0027562:	85 f6                	test   esi,esi
c0027564:	0f 95 c3             	setne  bl
c0027567:	31 c9                	xor    ecx,ecx
c0027569:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002756d:	0f 95 c1             	setne  cl
c0027570:	09 cf                	or     edi,ecx
c0027572:	09 fb                	or     ebx,edi
c0027574:	01 da                	add    edx,ebx
c0027576:	83 d0 00             	adc    eax,0x0
c0027579:	eb 3a                	jmp    c00275b5 <__adddf3+0x13a>
c002757b:	bf 20 00 00 00       	mov    edi,0x20
c0027580:	29 df                	sub    edi,ebx
c0027582:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027585:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027588:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002758b:	d3 e6                	shl    esi,cl
c002758d:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027590:	88 d9                	mov    cl,bl
c0027592:	d3 ef                	shr    edi,cl
c0027594:	09 fe                	or     esi,edi
c0027596:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027599:	88 d9                	mov    cl,bl
c002759b:	d3 ef                	shr    edi,cl
c002759d:	89 fb                	mov    ebx,edi
c002759f:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00275a2:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00275a5:	d3 e7                	shl    edi,cl
c00275a7:	85 ff                	test   edi,edi
c00275a9:	0f 95 c1             	setne  cl
c00275ac:	0f b6 c9             	movzx  ecx,cl
c00275af:	09 ce                	or     esi,ecx
c00275b1:	01 f2                	add    edx,esi
c00275b3:	11 d8                	adc    eax,ebx
c00275b5:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00275b8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00275bb:	e9 52 01 00 00       	jmp    c0027712 <__adddf3+0x297>
c00275c0:	0f 84 d5 00 00 00    	je     c002769b <__adddf3+0x220>
c00275c6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00275c9:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c00275cc:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00275cf:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00275d2:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00275d9:	75 20                	jne    c00275fb <__adddf3+0x180>
c00275db:	89 d6                	mov    esi,edx
c00275dd:	09 c6                	or     esi,eax
c00275df:	0f 84 db 04 00 00    	je     c0027ac0 <__adddf3+0x645>
c00275e5:	4b                   	dec    ebx
c00275e6:	75 29                	jne    c0027611 <__adddf3+0x196>
c00275e8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00275eb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00275ee:	01 d1                	add    ecx,edx
c00275f0:	11 c6                	adc    esi,eax
c00275f2:	89 f0                	mov    eax,esi
c00275f4:	89 ca                	mov    edx,ecx
c00275f6:	e9 17 01 00 00       	jmp    c0027712 <__adddf3+0x297>
c00275fb:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00275fe:	f7 d6                	not    esi
c0027600:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027606:	0f 84 b4 04 00 00    	je     c0027ac0 <__adddf3+0x645>
c002760c:	0d 00 00 00 80       	or     eax,0x80000000
c0027611:	83 fb 1f             	cmp    ebx,0x1f
c0027614:	7e 48                	jle    c002765e <__adddf3+0x1e3>
c0027616:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027619:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002761c:	83 fb 3f             	cmp    ebx,0x3f
c002761f:	0f 8f 9b 04 00 00    	jg     c0027ac0 <__adddf3+0x645>
c0027625:	83 e3 1f             	and    ebx,0x1f
c0027628:	89 d9                	mov    ecx,ebx
c002762a:	89 c7                	mov    edi,eax
c002762c:	d3 ef                	shr    edi,cl
c002762e:	31 db                	xor    ebx,ebx
c0027630:	85 c9                	test   ecx,ecx
c0027632:	74 12                	je     c0027646 <__adddf3+0x1cb>
c0027634:	be 20 00 00 00       	mov    esi,0x20
c0027639:	29 ce                	sub    esi,ecx
c002763b:	89 f1                	mov    ecx,esi
c002763d:	d3 e0                	shl    eax,cl
c002763f:	31 db                	xor    ebx,ebx
c0027641:	85 c0                	test   eax,eax
c0027643:	0f 95 c3             	setne  bl
c0027646:	31 c0                	xor    eax,eax
c0027648:	85 d2                	test   edx,edx
c002764a:	0f 95 c0             	setne  al
c002764d:	09 c7                	or     edi,eax
c002764f:	09 fb                	or     ebx,edi
c0027651:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027654:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027657:	01 da                	add    edx,ebx
c0027659:	83 d6 00             	adc    esi,0x0
c002765c:	eb 39                	jmp    c0027697 <__adddf3+0x21c>
c002765e:	be 20 00 00 00       	mov    esi,0x20
c0027663:	29 de                	sub    esi,ebx
c0027665:	89 c7                	mov    edi,eax
c0027667:	89 f1                	mov    ecx,esi
c0027669:	d3 e7                	shl    edi,cl
c002766b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002766e:	89 d7                	mov    edi,edx
c0027670:	88 d9                	mov    cl,bl
c0027672:	d3 ef                	shr    edi,cl
c0027674:	89 f9                	mov    ecx,edi
c0027676:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027679:	09 cf                	or     edi,ecx
c002767b:	88 d9                	mov    cl,bl
c002767d:	d3 e8                	shr    eax,cl
c002767f:	89 f1                	mov    ecx,esi
c0027681:	d3 e2                	shl    edx,cl
c0027683:	85 d2                	test   edx,edx
c0027685:	0f 95 c2             	setne  dl
c0027688:	0f b6 d2             	movzx  edx,dl
c002768b:	09 d7                	or     edi,edx
c002768d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027690:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027693:	01 fa                	add    edx,edi
c0027695:	11 c6                	adc    esi,eax
c0027697:	89 f0                	mov    eax,esi
c0027699:	eb 77                	jmp    c0027712 <__adddf3+0x297>
c002769b:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002769e:	46                   	inc    esi
c002769f:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00276a2:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00276a8:	75 41                	jne    c00276eb <__adddf3+0x270>
c00276aa:	89 d3                	mov    ebx,edx
c00276ac:	09 c3                	or     ebx,eax
c00276ae:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00276b5:	75 27                	jne    c00276de <__adddf3+0x263>
c00276b7:	85 db                	test   ebx,ebx
c00276b9:	0f 84 fb 03 00 00    	je     c0027aba <__adddf3+0x63f>
c00276bf:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00276c2:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00276c5:	0f 84 f5 03 00 00    	je     c0027ac0 <__adddf3+0x645>
c00276cb:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00276ce:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00276d1:	85 c0                	test   eax,eax
c00276d3:	0f 89 91 03 00 00    	jns    c0027a6a <__adddf3+0x5ef>
c00276d9:	e9 85 03 00 00       	jmp    c0027a63 <__adddf3+0x5e8>
c00276de:	85 db                	test   ebx,ebx
c00276e0:	0f 85 da 03 00 00    	jne    c0027ac0 <__adddf3+0x645>
c00276e6:	e9 cf 03 00 00       	jmp    c0027aba <__adddf3+0x63f>
c00276eb:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00276ee:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00276f1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00276f4:	f7 d1                	not    ecx
c00276f6:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00276fc:	0f 84 70 03 00 00    	je     c0027a72 <__adddf3+0x5f7>
c0027702:	d1 ea                	shr    edx,1
c0027704:	89 c1                	mov    ecx,eax
c0027706:	c1 e1 1f             	shl    ecx,0x1f
c0027709:	09 ca                	or     edx,ecx
c002770b:	d1 e8                	shr    eax,1
c002770d:	e9 6f 03 00 00       	jmp    c0027a81 <__adddf3+0x606>
c0027712:	85 c0                	test   eax,eax
c0027714:	0f 89 67 03 00 00    	jns    c0027a81 <__adddf3+0x606>
c002771a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c002771d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027720:	f7 d1                	not    ecx
c0027722:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027728:	0f 84 44 03 00 00    	je     c0027a72 <__adddf3+0x5f7>
c002772e:	89 d1                	mov    ecx,edx
c0027730:	d1 e9                	shr    ecx,1
c0027732:	83 e2 01             	and    edx,0x1
c0027735:	09 ca                	or     edx,ecx
c0027737:	89 c1                	mov    ecx,eax
c0027739:	c1 e1 1f             	shl    ecx,0x1f
c002773c:	09 ca                	or     edx,ecx
c002773e:	d1 e8                	shr    eax,1
c0027740:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0027745:	e9 37 03 00 00       	jmp    c0027a81 <__adddf3+0x606>
c002774a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002774d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027753:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0027756:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027759:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002775f:	29 de                	sub    esi,ebx
c0027761:	85 f6                	test   esi,esi
c0027763:	0f 8e bd 00 00 00    	jle    c0027826 <__adddf3+0x3ab>
c0027769:	85 db                	test   ebx,ebx
c002776b:	75 17                	jne    c0027784 <__adddf3+0x309>
c002776d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027770:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027773:	0f 84 47 03 00 00    	je     c0027ac0 <__adddf3+0x645>
c0027779:	4e                   	dec    esi
c002777a:	75 20                	jne    c002779c <__adddf3+0x321>
c002777c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002777f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027782:	eb 5b                	jmp    c00277df <__adddf3+0x364>
c0027784:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027787:	f7 d3                	not    ebx
c0027789:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002778f:	0f 84 2b 03 00 00    	je     c0027ac0 <__adddf3+0x645>
c0027795:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002779c:	83 fe 1f             	cmp    esi,0x1f
c002779f:	7e 49                	jle    c00277ea <__adddf3+0x36f>
c00277a1:	83 fe 3f             	cmp    esi,0x3f
c00277a4:	0f 8f 16 03 00 00    	jg     c0027ac0 <__adddf3+0x645>
c00277aa:	83 e6 1f             	and    esi,0x1f
c00277ad:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00277b0:	89 f1                	mov    ecx,esi
c00277b2:	d3 ef                	shr    edi,cl
c00277b4:	31 db                	xor    ebx,ebx
c00277b6:	85 f6                	test   esi,esi
c00277b8:	74 13                	je     c00277cd <__adddf3+0x352>
c00277ba:	b9 20 00 00 00       	mov    ecx,0x20
c00277bf:	29 f1                	sub    ecx,esi
c00277c1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00277c4:	d3 e6                	shl    esi,cl
c00277c6:	31 db                	xor    ebx,ebx
c00277c8:	85 f6                	test   esi,esi
c00277ca:	0f 95 c3             	setne  bl
c00277cd:	31 c9                	xor    ecx,ecx
c00277cf:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00277d3:	0f 95 c1             	setne  cl
c00277d6:	09 cf                	or     edi,ecx
c00277d8:	09 fb                	or     ebx,edi
c00277da:	29 da                	sub    edx,ebx
c00277dc:	83 d8 00             	sbb    eax,0x0
c00277df:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00277e2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00277e5:	e9 aa 01 00 00       	jmp    c0027994 <__adddf3+0x519>
c00277ea:	bf 20 00 00 00       	mov    edi,0x20
c00277ef:	29 f7                	sub    edi,esi
c00277f1:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00277f4:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00277f7:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00277fa:	d3 e3                	shl    ebx,cl
c00277fc:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00277ff:	89 f1                	mov    ecx,esi
c0027801:	d3 ef                	shr    edi,cl
c0027803:	09 fb                	or     ebx,edi
c0027805:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027808:	89 f1                	mov    ecx,esi
c002780a:	d3 ef                	shr    edi,cl
c002780c:	89 fe                	mov    esi,edi
c002780e:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027811:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027814:	d3 e7                	shl    edi,cl
c0027816:	85 ff                	test   edi,edi
c0027818:	0f 95 c1             	setne  cl
c002781b:	0f b6 c9             	movzx  ecx,cl
c002781e:	09 cb                	or     ebx,ecx
c0027820:	29 da                	sub    edx,ebx
c0027822:	19 f0                	sbb    eax,esi
c0027824:	eb b9                	jmp    c00277df <__adddf3+0x364>
c0027826:	0f 84 cd 00 00 00    	je     c00278f9 <__adddf3+0x47e>
c002782c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c002782f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027832:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027835:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027839:	75 1b                	jne    c0027856 <__adddf3+0x3db>
c002783b:	89 d6                	mov    esi,edx
c002783d:	09 c6                	or     esi,eax
c002783f:	0f 84 7b 02 00 00    	je     c0027ac0 <__adddf3+0x645>
c0027845:	4b                   	dec    ebx
c0027846:	75 24                	jne    c002786c <__adddf3+0x3f1>
c0027848:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002784b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002784e:	29 d1                	sub    ecx,edx
c0027850:	19 c6                	sbb    esi,eax
c0027852:	89 ca                	mov    edx,ecx
c0027854:	eb 61                	jmp    c00278b7 <__adddf3+0x43c>
c0027856:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027859:	f7 d6                	not    esi
c002785b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027861:	0f 84 59 02 00 00    	je     c0027ac0 <__adddf3+0x645>
c0027867:	0d 00 00 00 80       	or     eax,0x80000000
c002786c:	83 fb 1f             	cmp    ebx,0x1f
c002786f:	7e 4d                	jle    c00278be <__adddf3+0x443>
c0027871:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027874:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027877:	83 fb 3f             	cmp    ebx,0x3f
c002787a:	0f 8f 40 02 00 00    	jg     c0027ac0 <__adddf3+0x645>
c0027880:	83 e3 1f             	and    ebx,0x1f
c0027883:	89 d9                	mov    ecx,ebx
c0027885:	89 c7                	mov    edi,eax
c0027887:	d3 ef                	shr    edi,cl
c0027889:	31 db                	xor    ebx,ebx
c002788b:	85 c9                	test   ecx,ecx
c002788d:	74 12                	je     c00278a1 <__adddf3+0x426>
c002788f:	be 20 00 00 00       	mov    esi,0x20
c0027894:	29 ce                	sub    esi,ecx
c0027896:	89 f1                	mov    ecx,esi
c0027898:	d3 e0                	shl    eax,cl
c002789a:	31 db                	xor    ebx,ebx
c002789c:	85 c0                	test   eax,eax
c002789e:	0f 95 c3             	setne  bl
c00278a1:	31 c0                	xor    eax,eax
c00278a3:	85 d2                	test   edx,edx
c00278a5:	0f 95 c0             	setne  al
c00278a8:	09 c7                	or     edi,eax
c00278aa:	09 fb                	or     ebx,edi
c00278ac:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00278af:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00278b2:	29 da                	sub    edx,ebx
c00278b4:	83 de 00             	sbb    esi,0x0
c00278b7:	89 f0                	mov    eax,esi
c00278b9:	e9 d6 00 00 00       	jmp    c0027994 <__adddf3+0x519>
c00278be:	be 20 00 00 00       	mov    esi,0x20
c00278c3:	29 de                	sub    esi,ebx
c00278c5:	89 c7                	mov    edi,eax
c00278c7:	89 f1                	mov    ecx,esi
c00278c9:	d3 e7                	shl    edi,cl
c00278cb:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00278ce:	89 d7                	mov    edi,edx
c00278d0:	88 d9                	mov    cl,bl
c00278d2:	d3 ef                	shr    edi,cl
c00278d4:	89 f9                	mov    ecx,edi
c00278d6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00278d9:	09 cf                	or     edi,ecx
c00278db:	88 d9                	mov    cl,bl
c00278dd:	d3 e8                	shr    eax,cl
c00278df:	89 f1                	mov    ecx,esi
c00278e1:	d3 e2                	shl    edx,cl
c00278e3:	85 d2                	test   edx,edx
c00278e5:	0f 95 c2             	setne  dl
c00278e8:	0f b6 d2             	movzx  edx,dl
c00278eb:	09 d7                	or     edi,edx
c00278ed:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00278f0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00278f3:	29 fa                	sub    edx,edi
c00278f5:	19 c6                	sbb    esi,eax
c00278f7:	eb be                	jmp    c00278b7 <__adddf3+0x43c>
c00278f9:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00278fc:	8d 5e 01             	lea    ebx,[esi+0x1]
c00278ff:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027905:	75 6a                	jne    c0027971 <__adddf3+0x4f6>
c0027907:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002790b:	75 58                	jne    c0027965 <__adddf3+0x4ea>
c002790d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027910:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027913:	89 d6                	mov    esi,edx
c0027915:	09 c6                	or     esi,eax
c0027917:	75 17                	jne    c0027930 <__adddf3+0x4b5>
c0027919:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002791c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002791f:	85 db                	test   ebx,ebx
c0027921:	0f 85 99 01 00 00    	jne    c0027ac0 <__adddf3+0x645>
c0027927:	31 ff                	xor    edi,edi
c0027929:	31 c9                	xor    ecx,ecx
c002792b:	e9 90 01 00 00       	jmp    c0027ac0 <__adddf3+0x645>
c0027930:	85 db                	test   ebx,ebx
c0027932:	0f 84 88 01 00 00    	je     c0027ac0 <__adddf3+0x645>
c0027938:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002793b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002793e:	85 c0                	test   eax,eax
c0027940:	79 10                	jns    c0027952 <__adddf3+0x4d7>
c0027942:	31 c9                	xor    ecx,ecx
c0027944:	f7 da                	neg    edx
c0027946:	0f 95 c1             	setne  cl
c0027949:	01 c8                	add    eax,ecx
c002794b:	f7 d8                	neg    eax
c002794d:	e9 2f 01 00 00       	jmp    c0027a81 <__adddf3+0x606>
c0027952:	31 ff                	xor    edi,edi
c0027954:	31 c9                	xor    ecx,ecx
c0027956:	89 c3                	mov    ebx,eax
c0027958:	09 d3                	or     ebx,edx
c002795a:	0f 84 60 01 00 00    	je     c0027ac0 <__adddf3+0x645>
c0027960:	e9 05 01 00 00       	jmp    c0027a6a <__adddf3+0x5ef>
c0027965:	31 ff                	xor    edi,edi
c0027967:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002796c:	e9 4f 01 00 00       	jmp    c0027ac0 <__adddf3+0x645>
c0027971:	89 c1                	mov    ecx,eax
c0027973:	89 d0                	mov    eax,edx
c0027975:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027978:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c002797b:	89 ca                	mov    edx,ecx
c002797d:	85 c9                	test   ecx,ecx
c002797f:	79 2c                	jns    c00279ad <__adddf3+0x532>
c0027981:	31 c9                	xor    ecx,ecx
c0027983:	f7 d8                	neg    eax
c0027985:	0f 95 c1             	setne  cl
c0027988:	01 ca                	add    edx,ecx
c002798a:	f7 da                	neg    edx
c002798c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002798f:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027992:	eb 19                	jmp    c00279ad <__adddf3+0x532>
c0027994:	85 c0                	test   eax,eax
c0027996:	0f 89 e5 00 00 00    	jns    c0027a81 <__adddf3+0x606>
c002799c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00279a1:	89 c1                	mov    ecx,eax
c00279a3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00279a6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00279a9:	89 d0                	mov    eax,edx
c00279ab:	89 ca                	mov    edx,ecx
c00279ad:	85 d2                	test   edx,edx
c00279af:	74 59                	je     c0027a0a <__adddf3+0x58f>
c00279b1:	0f bd da             	bsr    ebx,edx
c00279b4:	83 f3 1f             	xor    ebx,0x1f
c00279b7:	88 d9                	mov    cl,bl
c00279b9:	d3 e2                	shl    edx,cl
c00279bb:	bf 20 00 00 00       	mov    edi,0x20
c00279c0:	89 f9                	mov    ecx,edi
c00279c2:	29 d9                	sub    ecx,ebx
c00279c4:	89 c6                	mov    esi,eax
c00279c6:	d3 ee                	shr    esi,cl
c00279c8:	09 d6                	or     esi,edx
c00279ca:	88 d9                	mov    cl,bl
c00279cc:	d3 e0                	shl    eax,cl
c00279ce:	89 c2                	mov    edx,eax
c00279d0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00279d3:	25 ff 07 00 00       	and    eax,0x7ff
c00279d8:	39 d8                	cmp    eax,ebx
c00279da:	7f 22                	jg     c00279fe <__adddf3+0x583>
c00279dc:	29 c3                	sub    ebx,eax
c00279de:	43                   	inc    ebx
c00279df:	88 d9                	mov    cl,bl
c00279e1:	d3 ea                	shr    edx,cl
c00279e3:	29 df                	sub    edi,ebx
c00279e5:	89 f9                	mov    ecx,edi
c00279e7:	89 f0                	mov    eax,esi
c00279e9:	d3 e0                	shl    eax,cl
c00279eb:	09 c2                	or     edx,eax
c00279ed:	89 f0                	mov    eax,esi
c00279ef:	88 d9                	mov    cl,bl
c00279f1:	d3 e8                	shr    eax,cl
c00279f3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00279f6:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c00279fc:	eb 6f                	jmp    c0027a6d <__adddf3+0x5f2>
c00279fe:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027a01:	29 d8                	sub    eax,ebx
c0027a03:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027a06:	89 f0                	mov    eax,esi
c0027a08:	eb 59                	jmp    c0027a63 <__adddf3+0x5e8>
c0027a0a:	85 c0                	test   eax,eax
c0027a0c:	74 6a                	je     c0027a78 <__adddf3+0x5fd>
c0027a0e:	0f bd c8             	bsr    ecx,eax
c0027a11:	83 f1 1f             	xor    ecx,0x1f
c0027a14:	d3 e0                	shl    eax,cl
c0027a16:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027a19:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027a1f:	83 c1 20             	add    ecx,0x20
c0027a22:	39 cb                	cmp    ebx,ecx
c0027a24:	7f 35                	jg     c0027a5b <__adddf3+0x5e0>
c0027a26:	29 d9                	sub    ecx,ebx
c0027a28:	8d 71 01             	lea    esi,[ecx+0x1]
c0027a2b:	83 fe 1f             	cmp    esi,0x1f
c0027a2e:	7e 09                	jle    c0027a39 <__adddf3+0x5be>
c0027a30:	83 e9 1f             	sub    ecx,0x1f
c0027a33:	d3 e8                	shr    eax,cl
c0027a35:	89 c3                	mov    ebx,eax
c0027a37:	eb 11                	jmp    c0027a4a <__adddf3+0x5cf>
c0027a39:	b9 20 00 00 00       	mov    ecx,0x20
c0027a3e:	29 f1                	sub    ecx,esi
c0027a40:	89 c3                	mov    ebx,eax
c0027a42:	d3 e3                	shl    ebx,cl
c0027a44:	89 f1                	mov    ecx,esi
c0027a46:	d3 e8                	shr    eax,cl
c0027a48:	89 c2                	mov    edx,eax
c0027a4a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027a4d:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027a52:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027a55:	89 d0                	mov    eax,edx
c0027a57:	89 da                	mov    edx,ebx
c0027a59:	eb 26                	jmp    c0027a81 <__adddf3+0x606>
c0027a5b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027a5e:	29 cf                	sub    edi,ecx
c0027a60:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027a63:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027a68:	eb 17                	jmp    c0027a81 <__adddf3+0x606>
c0027a6a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027a6d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027a70:	eb 0f                	jmp    c0027a81 <__adddf3+0x606>
c0027a72:	31 d2                	xor    edx,edx
c0027a74:	31 c0                	xor    eax,eax
c0027a76:	eb 09                	jmp    c0027a81 <__adddf3+0x606>
c0027a78:	89 c2                	mov    edx,eax
c0027a7a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027a81:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027a84:	c1 e1 14             	shl    ecx,0x14
c0027a87:	89 c3                	mov    ebx,eax
c0027a89:	c1 eb 0b             	shr    ebx,0xb
c0027a8c:	09 d9                	or     ecx,ebx
c0027a8e:	89 d3                	mov    ebx,edx
c0027a90:	c1 eb 0b             	shr    ebx,0xb
c0027a93:	c1 e0 15             	shl    eax,0x15
c0027a96:	09 d8                	or     eax,ebx
c0027a98:	89 c7                	mov    edi,eax
c0027a9a:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027aa0:	0f 95 c0             	setne  al
c0027aa3:	89 c6                	mov    esi,eax
c0027aa5:	09 f3                	or     ebx,esi
c0027aa7:	83 e3 01             	and    ebx,0x1
c0027aaa:	c1 ea 0a             	shr    edx,0xa
c0027aad:	21 da                	and    edx,ebx
c0027aaf:	89 f8                	mov    eax,edi
c0027ab1:	01 d0                	add    eax,edx
c0027ab3:	83 d1 00             	adc    ecx,0x0
c0027ab6:	89 c7                	mov    edi,eax
c0027ab8:	eb 06                	jmp    c0027ac0 <__adddf3+0x645>
c0027aba:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027abd:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027ac0:	89 f8                	mov    eax,edi
c0027ac2:	89 ca                	mov    edx,ecx
c0027ac4:	83 c4 24             	add    esp,0x24
c0027ac7:	5b                   	pop    ebx
c0027ac8:	5e                   	pop    esi
c0027ac9:	5f                   	pop    edi
c0027aca:	5d                   	pop    ebp
c0027acb:	c3                   	ret    

c0027acc <__subdf3>:
c0027acc:	55                   	push   ebp
c0027acd:	89 e5                	mov    ebp,esp
c0027acf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027ad2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027ad5:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027adb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027ade:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027ae1:	5d                   	pop    ebp
c0027ae2:	e9 94 f9 ff ff       	jmp    c002747b <__adddf3>

c0027ae7 <__negdf2>:
c0027ae7:	55                   	push   ebp
c0027ae8:	89 e5                	mov    ebp,esp
c0027aea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027aed:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027af0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027af6:	5d                   	pop    ebp
c0027af7:	c3                   	ret    

c0027af8 <__muldf3>:
c0027af8:	55                   	push   ebp
c0027af9:	89 e5                	mov    ebp,esp
c0027afb:	57                   	push   edi
c0027afc:	56                   	push   esi
c0027afd:	53                   	push   ebx
c0027afe:	83 ec 24             	sub    esp,0x24
c0027b01:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027b04:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027b07:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b0a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027b0d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027b10:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027b13:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027b16:	89 c8                	mov    eax,ecx
c0027b18:	c1 f8 14             	sar    eax,0x14
c0027b1b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027b1e:	89 f8                	mov    eax,edi
c0027b20:	89 fb                	mov    ebx,edi
c0027b22:	c1 e3 0b             	shl    ebx,0xb
c0027b25:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027b28:	c1 e1 0b             	shl    ecx,0xb
c0027b2b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027b31:	c1 e8 15             	shr    eax,0x15
c0027b34:	09 c1                	or     ecx,eax
c0027b36:	89 d6                	mov    esi,edx
c0027b38:	89 d0                	mov    eax,edx
c0027b3a:	c1 f8 14             	sar    eax,0x14
c0027b3d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027b40:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027b43:	89 c3                	mov    ebx,eax
c0027b45:	c1 e3 0b             	shl    ebx,0xb
c0027b48:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027b4b:	c1 e6 0b             	shl    esi,0xb
c0027b4e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027b54:	c1 e8 15             	shr    eax,0x15
c0027b57:	09 c6                	or     esi,eax
c0027b59:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027b5c:	25 ff 07 00 00       	and    eax,0x7ff
c0027b61:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027b64:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027b67:	25 ff 07 00 00       	and    eax,0x7ff
c0027b6c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027b6f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027b72:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027b75:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027b7c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027b7f:	40                   	inc    eax
c0027b80:	a9 fe 07 00 00       	test   eax,0x7fe
c0027b85:	0f 85 8d 00 00 00    	jne    c0027c18 <__muldf3+0x120>
c0027b8b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b8e:	09 c8                	or     eax,ecx
c0027b90:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027b94:	74 44                	je     c0027bda <__muldf3+0xe2>
c0027b96:	85 c0                	test   eax,eax
c0027b98:	0f 85 31 02 00 00    	jne    c0027dcf <__muldf3+0x2d7>
c0027b9e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027ba1:	40                   	inc    eax
c0027ba2:	a9 fe 07 00 00       	test   eax,0x7fe
c0027ba7:	75 13                	jne    c0027bbc <__muldf3+0xc4>
c0027ba9:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027bac:	09 f1                	or     ecx,esi
c0027bae:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027bb2:	74 22                	je     c0027bd6 <__muldf3+0xde>
c0027bb4:	85 c9                	test   ecx,ecx
c0027bb6:	0f 85 0d 02 00 00    	jne    c0027dc9 <__muldf3+0x2d1>
c0027bbc:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027bc0:	0f 89 09 02 00 00    	jns    c0027dcf <__muldf3+0x2d7>
c0027bc6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027bc9:	05 00 00 00 80       	add    eax,0x80000000
c0027bce:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027bd1:	e9 f9 01 00 00       	jmp    c0027dcf <__muldf3+0x2d7>
c0027bd6:	85 c9                	test   ecx,ecx
c0027bd8:	eb 2e                	jmp    c0027c08 <__muldf3+0x110>
c0027bda:	85 c0                	test   eax,eax
c0027bdc:	74 20                	je     c0027bfe <__muldf3+0x106>
c0027bde:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027be1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027be4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027be7:	c1 ef 1f             	shr    edi,0x1f
c0027bea:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027bed:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027bf0:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027bf3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027bf6:	09 f9                	or     ecx,edi
c0027bf8:	78 1e                	js     c0027c18 <__muldf3+0x120>
c0027bfa:	89 c3                	mov    ebx,eax
c0027bfc:	eb e0                	jmp    c0027bde <__muldf3+0xe6>
c0027bfe:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c01:	f7 d0                	not    eax
c0027c03:	a9 ff 07 00 00       	test   eax,0x7ff
c0027c08:	75 b2                	jne    c0027bbc <__muldf3+0xc4>
c0027c0a:	31 ff                	xor    edi,edi
c0027c0c:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027c13:	e9 b7 01 00 00       	jmp    c0027dcf <__muldf3+0x2d7>
c0027c18:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c1b:	40                   	inc    eax
c0027c1c:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c21:	75 57                	jne    c0027c7a <__muldf3+0x182>
c0027c23:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027c26:	09 f0                	or     eax,esi
c0027c28:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027c2c:	74 23                	je     c0027c51 <__muldf3+0x159>
c0027c2e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027c32:	0f 89 91 01 00 00    	jns    c0027dc9 <__muldf3+0x2d1>
c0027c38:	85 c0                	test   eax,eax
c0027c3a:	0f 85 89 01 00 00    	jne    c0027dc9 <__muldf3+0x2d1>
c0027c40:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027c43:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027c49:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c4c:	e9 7e 01 00 00       	jmp    c0027dcf <__muldf3+0x2d7>
c0027c51:	85 c0                	test   eax,eax
c0027c53:	75 0c                	jne    c0027c61 <__muldf3+0x169>
c0027c55:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027c59:	0f 89 6a 01 00 00    	jns    c0027dc9 <__muldf3+0x2d1>
c0027c5f:	eb df                	jmp    c0027c40 <__muldf3+0x148>
c0027c61:	01 f6                	add    esi,esi
c0027c63:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027c66:	c1 ea 1f             	shr    edx,0x1f
c0027c69:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027c6c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027c6f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027c72:	09 d6                	or     esi,edx
c0027c74:	78 04                	js     c0027c7a <__muldf3+0x182>
c0027c76:	89 c3                	mov    ebx,eax
c0027c78:	eb e7                	jmp    c0027c61 <__muldf3+0x169>
c0027c7a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027c80:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027c86:	89 c8                	mov    eax,ecx
c0027c88:	f7 e6                	mul    esi
c0027c8a:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027c8d:	89 c7                	mov    edi,eax
c0027c8f:	89 c8                	mov    eax,ecx
c0027c91:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027c94:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027c97:	89 c1                	mov    ecx,eax
c0027c99:	89 f0                	mov    eax,esi
c0027c9b:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027c9e:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027ca1:	89 c6                	mov    esi,eax
c0027ca3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ca6:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027ca9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027cac:	31 c0                	xor    eax,eax
c0027cae:	01 f1                	add    ecx,esi
c0027cb0:	0f 92 c0             	setb   al
c0027cb3:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027cb6:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027cb9:	83 d6 00             	adc    esi,0x0
c0027cbc:	01 c7                	add    edi,eax
c0027cbe:	83 d6 00             	adc    esi,0x0
c0027cc1:	01 ca                	add    edx,ecx
c0027cc3:	0f 92 c1             	setb   cl
c0027cc6:	0f b6 c9             	movzx  ecx,cl
c0027cc9:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027ccc:	83 d6 00             	adc    esi,0x0
c0027ccf:	01 cf                	add    edi,ecx
c0027cd1:	83 d6 00             	adc    esi,0x0
c0027cd4:	31 c9                	xor    ecx,ecx
c0027cd6:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027cd9:	0f 95 c1             	setne  cl
c0027cdc:	09 cf                	or     edi,ecx
c0027cde:	85 f6                	test   esi,esi
c0027ce0:	78 0c                	js     c0027cee <__muldf3+0x1f6>
c0027ce2:	01 f6                	add    esi,esi
c0027ce4:	89 f8                	mov    eax,edi
c0027ce6:	c1 e8 1f             	shr    eax,0x1f
c0027ce9:	09 c6                	or     esi,eax
c0027ceb:	01 ff                	add    edi,edi
c0027ced:	4b                   	dec    ebx
c0027cee:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027cf4:	0f 8f 85 00 00 00    	jg     c0027d7f <__muldf3+0x287>
c0027cfa:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027d00:	85 db                	test   ebx,ebx
c0027d02:	0f 8f 84 00 00 00    	jg     c0027d8c <__muldf3+0x294>
c0027d08:	83 fb cc             	cmp    ebx,0xffffffcc
c0027d0b:	7c 79                	jl     c0027d86 <__muldf3+0x28e>
c0027d0d:	ba 01 00 00 00       	mov    edx,0x1
c0027d12:	29 da                	sub    edx,ebx
c0027d14:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027d1a:	83 fa 1f             	cmp    edx,0x1f
c0027d1d:	7e 30                	jle    c0027d4f <__muldf3+0x257>
c0027d1f:	83 fa 20             	cmp    edx,0x20
c0027d22:	75 0b                	jne    c0027d2f <__muldf3+0x237>
c0027d24:	31 c0                	xor    eax,eax
c0027d26:	85 ff                	test   edi,edi
c0027d28:	0f 95 c0             	setne  al
c0027d2b:	89 c7                	mov    edi,eax
c0027d2d:	eb 1a                	jmp    c0027d49 <__muldf3+0x251>
c0027d2f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027d32:	89 f0                	mov    eax,esi
c0027d34:	d3 e0                	shl    eax,cl
c0027d36:	09 f8                	or     eax,edi
c0027d38:	0f 95 c0             	setne  al
c0027d3b:	0f b6 c0             	movzx  eax,al
c0027d3e:	89 c7                	mov    edi,eax
c0027d40:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027d45:	29 d9                	sub    ecx,ebx
c0027d47:	d3 ee                	shr    esi,cl
c0027d49:	09 f7                	or     edi,esi
c0027d4b:	31 db                	xor    ebx,ebx
c0027d4d:	eb 3b                	jmp    c0027d8a <__muldf3+0x292>
c0027d4f:	83 c3 1f             	add    ebx,0x1f
c0027d52:	89 f0                	mov    eax,esi
c0027d54:	88 d9                	mov    cl,bl
c0027d56:	d3 e0                	shl    eax,cl
c0027d58:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d5b:	89 f8                	mov    eax,edi
c0027d5d:	88 d1                	mov    cl,dl
c0027d5f:	d3 e8                	shr    eax,cl
c0027d61:	89 c1                	mov    ecx,eax
c0027d63:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027d66:	09 c8                	or     eax,ecx
c0027d68:	88 d9                	mov    cl,bl
c0027d6a:	d3 e7                	shl    edi,cl
c0027d6c:	31 db                	xor    ebx,ebx
c0027d6e:	85 ff                	test   edi,edi
c0027d70:	0f 95 c3             	setne  bl
c0027d73:	89 df                	mov    edi,ebx
c0027d75:	09 c7                	or     edi,eax
c0027d77:	88 d1                	mov    cl,dl
c0027d79:	d3 ee                	shr    esi,cl
c0027d7b:	31 db                	xor    ebx,ebx
c0027d7d:	eb 0d                	jmp    c0027d8c <__muldf3+0x294>
c0027d7f:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027d84:	eb 02                	jmp    c0027d88 <__muldf3+0x290>
c0027d86:	31 db                	xor    ebx,ebx
c0027d88:	31 ff                	xor    edi,edi
c0027d8a:	31 f6                	xor    esi,esi
c0027d8c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027d8f:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027d92:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027d97:	09 c3                	or     ebx,eax
c0027d99:	c1 e3 14             	shl    ebx,0x14
c0027d9c:	89 f0                	mov    eax,esi
c0027d9e:	c1 e8 0b             	shr    eax,0xb
c0027da1:	09 c3                	or     ebx,eax
c0027da3:	89 f8                	mov    eax,edi
c0027da5:	c1 e8 0b             	shr    eax,0xb
c0027da8:	c1 e6 15             	shl    esi,0x15
c0027dab:	09 c6                	or     esi,eax
c0027dad:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027db3:	0f 95 c1             	setne  cl
c0027db6:	09 c8                	or     eax,ecx
c0027db8:	83 e0 01             	and    eax,0x1
c0027dbb:	c1 ef 0a             	shr    edi,0xa
c0027dbe:	21 c7                	and    edi,eax
c0027dc0:	01 f7                	add    edi,esi
c0027dc2:	83 d3 00             	adc    ebx,0x0
c0027dc5:	89 da                	mov    edx,ebx
c0027dc7:	eb 03                	jmp    c0027dcc <__muldf3+0x2d4>
c0027dc9:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027dcc:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027dcf:	89 f8                	mov    eax,edi
c0027dd1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027dd4:	83 c4 24             	add    esp,0x24
c0027dd7:	5b                   	pop    ebx
c0027dd8:	5e                   	pop    esi
c0027dd9:	5f                   	pop    edi
c0027dda:	5d                   	pop    ebp
c0027ddb:	c3                   	ret    

c0027ddc <__divdf3>:
c0027ddc:	55                   	push   ebp
c0027ddd:	89 e5                	mov    ebp,esp
c0027ddf:	57                   	push   edi
c0027de0:	56                   	push   esi
c0027de1:	53                   	push   ebx
c0027de2:	83 ec 2c             	sub    esp,0x2c
c0027de5:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027de8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027deb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027dee:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027df1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027df4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027df7:	89 ce                	mov    esi,ecx
c0027df9:	89 c8                	mov    eax,ecx
c0027dfb:	c1 f8 14             	sar    eax,0x14
c0027dfe:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027e01:	89 f8                	mov    eax,edi
c0027e03:	89 fb                	mov    ebx,edi
c0027e05:	c1 e3 0b             	shl    ebx,0xb
c0027e08:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027e0b:	c1 e6 0b             	shl    esi,0xb
c0027e0e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027e14:	c1 e8 15             	shr    eax,0x15
c0027e17:	09 c6                	or     esi,eax
c0027e19:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027e1c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027e1f:	89 c2                	mov    edx,eax
c0027e21:	c1 fa 14             	sar    edx,0x14
c0027e24:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027e27:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027e2a:	89 de                	mov    esi,ebx
c0027e2c:	c1 e6 0b             	shl    esi,0xb
c0027e2f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027e32:	c1 e0 0b             	shl    eax,0xb
c0027e35:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027e3a:	c1 eb 15             	shr    ebx,0x15
c0027e3d:	09 d8                	or     eax,ebx
c0027e3f:	89 c2                	mov    edx,eax
c0027e41:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027e44:	25 ff 07 00 00       	and    eax,0x7ff
c0027e49:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027e4c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027e4f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027e55:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027e58:	29 d8                	sub    eax,ebx
c0027e5a:	05 ff 03 00 00       	add    eax,0x3ff
c0027e5f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027e62:	46                   	inc    esi
c0027e63:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027e69:	0f 85 a5 00 00 00    	jne    c0027f14 <__divdf3+0x138>
c0027e6f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027e72:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027e75:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027e79:	74 2a                	je     c0027ea5 <__divdf3+0xc9>
c0027e7b:	85 f6                	test   esi,esi
c0027e7d:	0f 85 cc 02 00 00    	jne    c002814f <__divdf3+0x373>
c0027e83:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027e86:	40                   	inc    eax
c0027e87:	a9 fe 07 00 00       	test   eax,0x7fe
c0027e8c:	75 26                	jne    c0027eb4 <__divdf3+0xd8>
c0027e8e:	85 db                	test   ebx,ebx
c0027e90:	74 22                	je     c0027eb4 <__divdf3+0xd8>
c0027e92:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027e95:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027e98:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027e9b:	09 d0                	or     eax,edx
c0027e9d:	0f 85 ac 02 00 00    	jne    c002814f <__divdf3+0x373>
c0027ea3:	eb 63                	jmp    c0027f08 <__divdf3+0x12c>
c0027ea5:	85 f6                	test   esi,esi
c0027ea7:	75 22                	jne    c0027ecb <__divdf3+0xef>
c0027ea9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027eac:	40                   	inc    eax
c0027ead:	a9 fe 07 00 00       	test   eax,0x7fe
c0027eb2:	74 36                	je     c0027eea <__divdf3+0x10e>
c0027eb4:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027eb8:	0f 89 91 02 00 00    	jns    c002814f <__divdf3+0x373>
c0027ebe:	89 f8                	mov    eax,edi
c0027ec0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027ec6:	e9 80 02 00 00       	jmp    c002814b <__divdf3+0x36f>
c0027ecb:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027ece:	01 f6                	add    esi,esi
c0027ed0:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027ed3:	c1 ef 1f             	shr    edi,0x1f
c0027ed6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027ed9:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027edc:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027edf:	09 f7                	or     edi,esi
c0027ee1:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027ee4:	78 2e                	js     c0027f14 <__divdf3+0x138>
c0027ee6:	89 c8                	mov    eax,ecx
c0027ee8:	eb e1                	jmp    c0027ecb <__divdf3+0xef>
c0027eea:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027eed:	09 d0                	or     eax,edx
c0027eef:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027ef3:	74 0f                	je     c0027f04 <__divdf3+0x128>
c0027ef5:	85 c0                	test   eax,eax
c0027ef7:	74 bb                	je     c0027eb4 <__divdf3+0xd8>
c0027ef9:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027efc:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027eff:	e9 4b 02 00 00       	jmp    c002814f <__divdf3+0x373>
c0027f04:	85 c0                	test   eax,eax
c0027f06:	75 ac                	jne    c0027eb4 <__divdf3+0xd8>
c0027f08:	31 ff                	xor    edi,edi
c0027f0a:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027f0f:	e9 3b 02 00 00       	jmp    c002814f <__divdf3+0x373>
c0027f14:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027f17:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027f1a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027f20:	75 6b                	jne    c0027f8d <__divdf3+0x1b1>
c0027f22:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f25:	09 d6                	or     esi,edx
c0027f27:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027f2b:	74 28                	je     c0027f55 <__divdf3+0x179>
c0027f2d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027f30:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027f33:	85 f6                	test   esi,esi
c0027f35:	0f 85 14 02 00 00    	jne    c002814f <__divdf3+0x373>
c0027f3b:	31 ff                	xor    edi,edi
c0027f3d:	31 c9                	xor    ecx,ecx
c0027f3f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027f42:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027f45:	0f 89 04 02 00 00    	jns    c002814f <__divdf3+0x373>
c0027f4b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0027f50:	e9 fa 01 00 00       	jmp    c002814f <__divdf3+0x373>
c0027f55:	85 f6                	test   esi,esi
c0027f57:	75 1b                	jne    c0027f74 <__divdf3+0x198>
c0027f59:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027f5c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027f5f:	25 00 00 00 80       	and    eax,0x80000000
c0027f64:	31 c9                	xor    ecx,ecx
c0027f66:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0027f6b:	89 cf                	mov    edi,ecx
c0027f6d:	89 c1                	mov    ecx,eax
c0027f6f:	e9 db 01 00 00       	jmp    c002814f <__divdf3+0x373>
c0027f74:	01 d2                	add    edx,edx
c0027f76:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027f79:	c1 eb 1f             	shr    ebx,0x1f
c0027f7c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f7f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0027f82:	8d 48 01             	lea    ecx,[eax+0x1]
c0027f85:	09 da                	or     edx,ebx
c0027f87:	78 04                	js     c0027f8d <__divdf3+0x1b1>
c0027f89:	89 c8                	mov    eax,ecx
c0027f8b:	eb e7                	jmp    c0027f74 <__divdf3+0x198>
c0027f8d:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027f90:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027f96:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027f9c:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0027f9f:	39 d6                	cmp    esi,edx
c0027fa1:	77 0d                	ja     c0027fb0 <__divdf3+0x1d4>
c0027fa3:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0027fa6:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0027fa9:	72 1b                	jb     c0027fc6 <__divdf3+0x1ea>
c0027fab:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0027fae:	75 16                	jne    c0027fc6 <__divdf3+0x1ea>
c0027fb0:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027fb3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027fb6:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0027fb9:	83 de 00             	sbb    esi,0x0
c0027fbc:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0027fbf:	ba 01 00 00 00       	mov    edx,0x1
c0027fc4:	eb 02                	jmp    c0027fc8 <__divdf3+0x1ec>
c0027fc6:	31 d2                	xor    edx,edx
c0027fc8:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0027fcf:	31 ff                	xor    edi,edi
c0027fd1:	01 ff                	add    edi,edi
c0027fd3:	89 d1                	mov    ecx,edx
c0027fd5:	c1 e9 1f             	shr    ecx,0x1f
c0027fd8:	09 cf                	or     edi,ecx
c0027fda:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0027fdd:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0027fe0:	89 da                	mov    edx,ebx
c0027fe2:	89 f3                	mov    ebx,esi
c0027fe4:	8d 34 36             	lea    esi,[esi+esi*1]
c0027fe7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027fea:	c1 e9 1f             	shr    ecx,0x1f
c0027fed:	09 ce                	or     esi,ecx
c0027fef:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027ff2:	01 c9                	add    ecx,ecx
c0027ff4:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0027ff7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027ffa:	85 db                	test   ebx,ebx
c0027ffc:	78 29                	js     c0028027 <__divdf3+0x24b>
c0027ffe:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0028001:	72 07                	jb     c002800a <__divdf3+0x22e>
c0028003:	75 3c                	jne    c0028041 <__divdf3+0x265>
c0028005:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028008:	77 37                	ja     c0028041 <__divdf3+0x265>
c002800a:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002800d:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028010:	31 d2                	xor    edx,edx
c0028012:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0028015:	0f 97 c2             	seta   dl
c0028018:	29 d6                	sub    esi,edx
c002801a:	89 d9                	mov    ecx,ebx
c002801c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c002801f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028022:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0028025:	eb 17                	jmp    c002803e <__divdf3+0x262>
c0028027:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002802a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002802d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028030:	0f 97 c1             	seta   cl
c0028033:	0f b6 c9             	movzx  ecx,cl
c0028036:	29 ce                	sub    esi,ecx
c0028038:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c002803b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c002803e:	83 ca 01             	or     edx,0x1
c0028041:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0028044:	75 8b                	jne    c0027fd1 <__divdf3+0x1f5>
c0028046:	c1 e7 09             	shl    edi,0x9
c0028049:	89 d1                	mov    ecx,edx
c002804b:	c1 e9 17             	shr    ecx,0x17
c002804e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028051:	09 f3                	or     ebx,esi
c0028053:	0f 95 c3             	setne  bl
c0028056:	0f b6 db             	movzx  ebx,bl
c0028059:	c1 e2 09             	shl    edx,0x9
c002805c:	09 d3                	or     ebx,edx
c002805e:	89 ca                	mov    edx,ecx
c0028060:	09 fa                	or     edx,edi
c0028062:	78 0c                	js     c0028070 <__divdf3+0x294>
c0028064:	01 d2                	add    edx,edx
c0028066:	89 d9                	mov    ecx,ebx
c0028068:	c1 e9 1f             	shr    ecx,0x1f
c002806b:	09 ca                	or     edx,ecx
c002806d:	01 db                	add    ebx,ebx
c002806f:	48                   	dec    eax
c0028070:	3d fe 07 00 00       	cmp    eax,0x7fe
c0028075:	0f 8f 83 00 00 00    	jg     c00280fe <__divdf3+0x322>
c002807b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028081:	85 c0                	test   eax,eax
c0028083:	0f 8f 82 00 00 00    	jg     c002810b <__divdf3+0x32f>
c0028089:	83 f8 cc             	cmp    eax,0xffffffcc
c002808c:	7c 77                	jl     c0028105 <__divdf3+0x329>
c002808e:	be 01 00 00 00       	mov    esi,0x1
c0028093:	29 c6                	sub    esi,eax
c0028095:	81 ca 00 00 00 80    	or     edx,0x80000000
c002809b:	83 fe 1f             	cmp    esi,0x1f
c002809e:	7e 2f                	jle    c00280cf <__divdf3+0x2f3>
c00280a0:	83 fe 20             	cmp    esi,0x20
c00280a3:	75 0a                	jne    c00280af <__divdf3+0x2d3>
c00280a5:	85 db                	test   ebx,ebx
c00280a7:	0f 95 c3             	setne  bl
c00280aa:	0f b6 db             	movzx  ebx,bl
c00280ad:	eb 1a                	jmp    c00280c9 <__divdf3+0x2ed>
c00280af:	8d 48 3f             	lea    ecx,[eax+0x3f]
c00280b2:	89 d7                	mov    edi,edx
c00280b4:	d3 e7                	shl    edi,cl
c00280b6:	89 f9                	mov    ecx,edi
c00280b8:	09 d9                	or     ecx,ebx
c00280ba:	0f 95 c3             	setne  bl
c00280bd:	0f b6 db             	movzx  ebx,bl
c00280c0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00280c5:	29 c1                	sub    ecx,eax
c00280c7:	d3 ea                	shr    edx,cl
c00280c9:	09 d3                	or     ebx,edx
c00280cb:	31 c0                	xor    eax,eax
c00280cd:	eb 3a                	jmp    c0028109 <__divdf3+0x32d>
c00280cf:	83 c0 1f             	add    eax,0x1f
c00280d2:	89 d7                	mov    edi,edx
c00280d4:	88 c1                	mov    cl,al
c00280d6:	d3 e7                	shl    edi,cl
c00280d8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00280db:	89 df                	mov    edi,ebx
c00280dd:	89 f1                	mov    ecx,esi
c00280df:	d3 ef                	shr    edi,cl
c00280e1:	89 f9                	mov    ecx,edi
c00280e3:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00280e6:	09 cf                	or     edi,ecx
c00280e8:	88 c1                	mov    cl,al
c00280ea:	d3 e3                	shl    ebx,cl
c00280ec:	85 db                	test   ebx,ebx
c00280ee:	0f 95 c3             	setne  bl
c00280f1:	0f b6 db             	movzx  ebx,bl
c00280f4:	09 fb                	or     ebx,edi
c00280f6:	89 f1                	mov    ecx,esi
c00280f8:	d3 ea                	shr    edx,cl
c00280fa:	31 c0                	xor    eax,eax
c00280fc:	eb 0d                	jmp    c002810b <__divdf3+0x32f>
c00280fe:	b8 ff 07 00 00       	mov    eax,0x7ff
c0028103:	eb 02                	jmp    c0028107 <__divdf3+0x32b>
c0028105:	31 c0                	xor    eax,eax
c0028107:	31 db                	xor    ebx,ebx
c0028109:	31 d2                	xor    edx,edx
c002810b:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c002810e:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028111:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0028117:	09 c8                	or     eax,ecx
c0028119:	c1 e0 14             	shl    eax,0x14
c002811c:	89 d1                	mov    ecx,edx
c002811e:	c1 e9 0b             	shr    ecx,0xb
c0028121:	09 c8                	or     eax,ecx
c0028123:	89 c6                	mov    esi,eax
c0028125:	89 d9                	mov    ecx,ebx
c0028127:	c1 e9 0b             	shr    ecx,0xb
c002812a:	c1 e2 15             	shl    edx,0x15
c002812d:	09 ca                	or     edx,ecx
c002812f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0028135:	0f 95 c0             	setne  al
c0028138:	09 c1                	or     ecx,eax
c002813a:	83 e1 01             	and    ecx,0x1
c002813d:	c1 eb 0a             	shr    ebx,0xa
c0028140:	21 cb                	and    ebx,ecx
c0028142:	01 d3                	add    ebx,edx
c0028144:	89 d8                	mov    eax,ebx
c0028146:	83 d6 00             	adc    esi,0x0
c0028149:	89 f2                	mov    edx,esi
c002814b:	89 c7                	mov    edi,eax
c002814d:	89 d1                	mov    ecx,edx
c002814f:	89 f8                	mov    eax,edi
c0028151:	89 ca                	mov    edx,ecx
c0028153:	83 c4 2c             	add    esp,0x2c
c0028156:	5b                   	pop    ebx
c0028157:	5e                   	pop    esi
c0028158:	5f                   	pop    edi
c0028159:	5d                   	pop    ebp
c002815a:	c3                   	ret    

c002815b <__floatsidf>:
c002815b:	55                   	push   ebp
c002815c:	89 e5                	mov    ebp,esp
c002815e:	56                   	push   esi
c002815f:	53                   	push   ebx
c0028160:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028163:	85 db                	test   ebx,ebx
c0028165:	7e 15                	jle    c002817c <__floatsidf+0x21>
c0028167:	0f bd cb             	bsr    ecx,ebx
c002816a:	83 f1 1f             	xor    ecx,0x1f
c002816d:	d3 e3                	shl    ebx,cl
c002816f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028175:	b8 1e 04 00 00       	mov    eax,0x41e
c002817a:	eb 21                	jmp    c002819d <__floatsidf+0x42>
c002817c:	b8 00 00 00 00       	mov    eax,0x0
c0028181:	ba 00 00 00 00       	mov    edx,0x0
c0028186:	74 2a                	je     c00281b2 <__floatsidf+0x57>
c0028188:	f7 db                	neg    ebx
c002818a:	0f bd cb             	bsr    ecx,ebx
c002818d:	83 f1 1f             	xor    ecx,0x1f
c0028190:	d3 e3                	shl    ebx,cl
c0028192:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028198:	b8 1e 0c 00 00       	mov    eax,0xc1e
c002819d:	29 c8                	sub    eax,ecx
c002819f:	c1 e0 14             	shl    eax,0x14
c00281a2:	89 c1                	mov    ecx,eax
c00281a4:	89 de                	mov    esi,ebx
c00281a6:	c1 ee 0b             	shr    esi,0xb
c00281a9:	09 f1                	or     ecx,esi
c00281ab:	89 ca                	mov    edx,ecx
c00281ad:	c1 e3 15             	shl    ebx,0x15
c00281b0:	89 d8                	mov    eax,ebx
c00281b2:	5b                   	pop    ebx
c00281b3:	5e                   	pop    esi
c00281b4:	5d                   	pop    ebp
c00281b5:	c3                   	ret    

c00281b6 <__floatunsidf>:
c00281b6:	55                   	push   ebp
c00281b7:	89 e5                	mov    ebp,esp
c00281b9:	56                   	push   esi
c00281ba:	53                   	push   ebx
c00281bb:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00281be:	85 db                	test   ebx,ebx
c00281c0:	74 2a                	je     c00281ec <__floatunsidf+0x36>
c00281c2:	0f bd cb             	bsr    ecx,ebx
c00281c5:	83 f1 1f             	xor    ecx,0x1f
c00281c8:	d3 e3                	shl    ebx,cl
c00281ca:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00281d0:	b8 1e 04 00 00       	mov    eax,0x41e
c00281d5:	29 c8                	sub    eax,ecx
c00281d7:	c1 e0 14             	shl    eax,0x14
c00281da:	89 c1                	mov    ecx,eax
c00281dc:	89 de                	mov    esi,ebx
c00281de:	c1 ee 0b             	shr    esi,0xb
c00281e1:	09 f1                	or     ecx,esi
c00281e3:	89 ca                	mov    edx,ecx
c00281e5:	c1 e3 15             	shl    ebx,0x15
c00281e8:	89 d8                	mov    eax,ebx
c00281ea:	eb 04                	jmp    c00281f0 <__floatunsidf+0x3a>
c00281ec:	31 c0                	xor    eax,eax
c00281ee:	31 d2                	xor    edx,edx
c00281f0:	5b                   	pop    ebx
c00281f1:	5e                   	pop    esi
c00281f2:	5d                   	pop    ebp
c00281f3:	c3                   	ret    

c00281f4 <__fixdfsi>:
c00281f4:	55                   	push   ebp
c00281f5:	89 e5                	mov    ebp,esp
c00281f7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00281fa:	89 d1                	mov    ecx,edx
c00281fc:	c1 e1 0b             	shl    ecx,0xb
c00281ff:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028205:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028208:	c1 e8 15             	shr    eax,0x15
c002820b:	09 c1                	or     ecx,eax
c002820d:	c1 fa 14             	sar    edx,0x14
c0028210:	78 1f                	js     c0028231 <__fixdfsi+0x3d>
c0028212:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028218:	31 c0                	xor    eax,eax
c002821a:	83 fa 1e             	cmp    edx,0x1e
c002821d:	77 40                	ja     c002825f <__fixdfsi+0x6b>
c002821f:	89 c8                	mov    eax,ecx
c0028221:	0d 00 00 00 80       	or     eax,0x80000000
c0028226:	b9 1f 00 00 00       	mov    ecx,0x1f
c002822b:	29 d1                	sub    ecx,edx
c002822d:	d3 e8                	shr    eax,cl
c002822f:	eb 2e                	jmp    c002825f <__fixdfsi+0x6b>
c0028231:	31 c0                	xor    eax,eax
c0028233:	81 c2 01 04 00 00    	add    edx,0x401
c0028239:	78 24                	js     c002825f <__fixdfsi+0x6b>
c002823b:	83 fa 1e             	cmp    edx,0x1e
c002823e:	7e 09                	jle    c0028249 <__fixdfsi+0x55>
c0028240:	83 fa 1f             	cmp    edx,0x1f
c0028243:	75 18                	jne    c002825d <__fixdfsi+0x69>
c0028245:	85 c9                	test   ecx,ecx
c0028247:	75 14                	jne    c002825d <__fixdfsi+0x69>
c0028249:	89 c8                	mov    eax,ecx
c002824b:	0d 00 00 00 80       	or     eax,0x80000000
c0028250:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028255:	29 d1                	sub    ecx,edx
c0028257:	d3 e8                	shr    eax,cl
c0028259:	f7 d8                	neg    eax
c002825b:	eb 02                	jmp    c002825f <__fixdfsi+0x6b>
c002825d:	31 c0                	xor    eax,eax
c002825f:	5d                   	pop    ebp
c0028260:	c3                   	ret    

c0028261 <__fixunsdfsi>:
c0028261:	55                   	push   ebp
c0028262:	89 e5                	mov    ebp,esp
c0028264:	53                   	push   ebx
c0028265:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028268:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002826b:	89 d3                	mov    ebx,edx
c002826d:	c1 fb 14             	sar    ebx,0x14
c0028270:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028276:	31 c0                	xor    eax,eax
c0028278:	83 fb 1f             	cmp    ebx,0x1f
c002827b:	77 1d                	ja     c002829a <__fixunsdfsi+0x39>
c002827d:	89 d0                	mov    eax,edx
c002827f:	c1 e0 0b             	shl    eax,0xb
c0028282:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028287:	c1 e9 15             	shr    ecx,0x15
c002828a:	09 c8                	or     eax,ecx
c002828c:	0d 00 00 00 80       	or     eax,0x80000000
c0028291:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028296:	29 d9                	sub    ecx,ebx
c0028298:	d3 e8                	shr    eax,cl
c002829a:	5b                   	pop    ebx
c002829b:	5d                   	pop    ebp
c002829c:	c3                   	ret    

c002829d <__cmpdf2>:
c002829d:	55                   	push   ebp
c002829e:	89 e5                	mov    ebp,esp
c00282a0:	57                   	push   edi
c00282a1:	56                   	push   esi
c00282a2:	53                   	push   ebx
c00282a3:	83 ec 0c             	sub    esp,0xc
c00282a6:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00282a9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00282ac:	89 ca                	mov    edx,ecx
c00282ae:	c1 ea 14             	shr    edx,0x14
c00282b1:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00282b7:	89 cb                	mov    ebx,ecx
c00282b9:	c1 fb 1f             	sar    ebx,0x1f
c00282bc:	31 da                	xor    edx,ebx
c00282be:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00282c1:	89 df                	mov    edi,ebx
c00282c3:	c1 e7 0b             	shl    edi,0xb
c00282c6:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00282c9:	c1 e1 0b             	shl    ecx,0xb
c00282cc:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00282d2:	c1 eb 15             	shr    ebx,0x15
c00282d5:	09 d9                	or     ecx,ebx
c00282d7:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c00282da:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00282dd:	89 ce                	mov    esi,ecx
c00282df:	c1 ee 14             	shr    esi,0x14
c00282e2:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00282e8:	89 cb                	mov    ebx,ecx
c00282ea:	c1 fb 1f             	sar    ebx,0x1f
c00282ed:	31 de                	xor    esi,ebx
c00282ef:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00282f2:	89 df                	mov    edi,ebx
c00282f4:	c1 e7 0b             	shl    edi,0xb
c00282f7:	c1 e1 0b             	shl    ecx,0xb
c00282fa:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028300:	c1 eb 15             	shr    ebx,0x15
c0028303:	09 d9                	or     ecx,ebx
c0028305:	89 d3                	mov    ebx,edx
c0028307:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002830d:	43                   	inc    ebx
c002830e:	83 fb 01             	cmp    ebx,0x1
c0028311:	77 08                	ja     c002831b <__cmpdf2+0x7e>
c0028313:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028316:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028319:	75 68                	jne    c0028383 <__cmpdf2+0xe6>
c002831b:	89 f3                	mov    ebx,esi
c002831d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028323:	43                   	inc    ebx
c0028324:	83 fb 01             	cmp    ebx,0x1
c0028327:	77 06                	ja     c002832f <__cmpdf2+0x92>
c0028329:	89 fb                	mov    ebx,edi
c002832b:	09 cb                	or     ebx,ecx
c002832d:	75 54                	jne    c0028383 <__cmpdf2+0xe6>
c002832f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028332:	09 f8                	or     eax,edi
c0028334:	09 c8                	or     eax,ecx
c0028336:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028339:	75 12                	jne    c002834d <__cmpdf2+0xb0>
c002833b:	8d 42 01             	lea    eax,[edx+0x1]
c002833e:	83 f8 01             	cmp    eax,0x1
c0028341:	77 0a                	ja     c002834d <__cmpdf2+0xb0>
c0028343:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028346:	31 c0                	xor    eax,eax
c0028348:	83 fb 01             	cmp    ebx,0x1
c002834b:	76 36                	jbe    c0028383 <__cmpdf2+0xe6>
c002834d:	b8 01 00 00 00       	mov    eax,0x1
c0028352:	39 f2                	cmp    edx,esi
c0028354:	7f 2d                	jg     c0028383 <__cmpdf2+0xe6>
c0028356:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002835b:	7c 26                	jl     c0028383 <__cmpdf2+0xe6>
c002835d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028360:	77 07                	ja     c0028369 <__cmpdf2+0xcc>
c0028362:	72 16                	jb     c002837a <__cmpdf2+0xdd>
c0028364:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028367:	76 0a                	jbe    c0028373 <__cmpdf2+0xd6>
c0028369:	89 d0                	mov    eax,edx
c002836b:	c1 f8 1f             	sar    eax,0x1f
c002836e:	83 c8 01             	or     eax,0x1
c0028371:	eb 10                	jmp    c0028383 <__cmpdf2+0xe6>
c0028373:	b8 00 00 00 00       	mov    eax,0x0
c0028378:	73 09                	jae    c0028383 <__cmpdf2+0xe6>
c002837a:	89 d0                	mov    eax,edx
c002837c:	c1 f8 1f             	sar    eax,0x1f
c002837f:	83 e0 02             	and    eax,0x2
c0028382:	48                   	dec    eax
c0028383:	83 c4 0c             	add    esp,0xc
c0028386:	5b                   	pop    ebx
c0028387:	5e                   	pop    esi
c0028388:	5f                   	pop    edi
c0028389:	5d                   	pop    ebp
c002838a:	c3                   	ret    

c002838b <__eqdf2>:
c002838b:	55                   	push   ebp
c002838c:	89 e5                	mov    ebp,esp
c002838e:	50                   	push   eax
c002838f:	6a 01                	push   0x1
c0028391:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028394:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028397:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002839a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002839d:	e8 fb fe ff ff       	call   c002829d <__cmpdf2>
c00283a2:	83 c4 18             	add    esp,0x18
c00283a5:	c9                   	leave  
c00283a6:	c3                   	ret    

c00283a7 <__nedf2>:
c00283a7:	eb e2                	jmp    c002838b <__eqdf2>

c00283a9 <__gtdf2>:
c00283a9:	55                   	push   ebp
c00283aa:	89 e5                	mov    ebp,esp
c00283ac:	50                   	push   eax
c00283ad:	6a ff                	push   0xffffffff
c00283af:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00283b2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00283b5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00283b8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00283bb:	e8 dd fe ff ff       	call   c002829d <__cmpdf2>
c00283c0:	83 c4 18             	add    esp,0x18
c00283c3:	c9                   	leave  
c00283c4:	c3                   	ret    

c00283c5 <__gedf2>:
c00283c5:	eb e2                	jmp    c00283a9 <__gtdf2>

c00283c7 <__ltdf2>:
c00283c7:	eb c2                	jmp    c002838b <__eqdf2>

c00283c9 <__ledf2>:
c00283c9:	eb c0                	jmp    c002838b <__eqdf2>

c00283cb <__truncdfsf2>:
c00283cb:	55                   	push   ebp
c00283cc:	89 e5                	mov    ebp,esp
c00283ce:	57                   	push   edi
c00283cf:	56                   	push   esi
c00283d0:	53                   	push   ebx
c00283d1:	83 ec 0c             	sub    esp,0xc
c00283d4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00283d7:	89 d1                	mov    ecx,edx
c00283d9:	c1 f9 14             	sar    ecx,0x14
c00283dc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00283df:	89 df                	mov    edi,ebx
c00283e1:	c1 e7 0b             	shl    edi,0xb
c00283e4:	89 d0                	mov    eax,edx
c00283e6:	c1 e0 0b             	shl    eax,0xb
c00283e9:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00283ee:	c1 eb 15             	shr    ebx,0x15
c00283f1:	09 d8                	or     eax,ebx
c00283f3:	89 cb                	mov    ebx,ecx
c00283f5:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00283fb:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028401:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028407:	0f 86 9e 00 00 00    	jbe    c00284ab <__truncdfsf2+0xe0>
c002840d:	85 db                	test   ebx,ebx
c002840f:	75 0a                	jne    c002841b <__truncdfsf2+0x50>
c0028411:	c1 fa 17             	sar    edx,0x17
c0028414:	30 d2                	xor    dl,dl
c0028416:	e9 84 00 00 00       	jmp    c002849f <__truncdfsf2+0xd4>
c002841b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028421:	83 fe 83             	cmp    esi,0xffffff83
c0028424:	7d 4b                	jge    c0028471 <__truncdfsf2+0xa6>
c0028426:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c002842b:	29 f1                	sub    ecx,esi
c002842d:	83 f9 1f             	cmp    ecx,0x1f
c0028430:	7f 6b                	jg     c002849d <__truncdfsf2+0xd2>
c0028432:	0d 00 00 00 80       	or     eax,0x80000000
c0028437:	89 c3                	mov    ebx,eax
c0028439:	d3 eb                	shr    ebx,cl
c002843b:	be 01 00 00 00       	mov    esi,0x1
c0028440:	d3 e6                	shl    esi,cl
c0028442:	4e                   	dec    esi
c0028443:	21 f0                	and    eax,esi
c0028445:	09 f8                	or     eax,edi
c0028447:	0f 95 c0             	setne  al
c002844a:	0f b6 c0             	movzx  eax,al
c002844d:	09 c3                	or     ebx,eax
c002844f:	89 d9                	mov    ecx,ebx
c0028451:	c1 e9 08             	shr    ecx,0x8
c0028454:	f6 c3 7f             	test   bl,0x7f
c0028457:	0f 95 c0             	setne  al
c002845a:	09 c8                	or     eax,ecx
c002845c:	83 e0 01             	and    eax,0x1
c002845f:	c1 eb 07             	shr    ebx,0x7
c0028462:	21 c3                	and    ebx,eax
c0028464:	81 e2 00 00 00 80    	and    edx,0x80000000
c002846a:	09 d1                	or     ecx,edx
c002846c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c002846f:	eb 76                	jmp    c00284e7 <__truncdfsf2+0x11c>
c0028471:	83 c6 80             	add    esi,0xffffff80
c0028474:	7e 1d                	jle    c0028493 <__truncdfsf2+0xc8>
c0028476:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c002847c:	75 0b                	jne    c0028489 <__truncdfsf2+0xbe>
c002847e:	09 f8                	or     eax,edi
c0028480:	74 09                	je     c002848b <__truncdfsf2+0xc0>
c0028482:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0028487:	eb 02                	jmp    c002848b <__truncdfsf2+0xc0>
c0028489:	31 c0                	xor    eax,eax
c002848b:	c1 fa 17             	sar    edx,0x17
c002848e:	80 ca ff             	or     dl,0xff
c0028491:	eb 0e                	jmp    c00284a1 <__truncdfsf2+0xd6>
c0028493:	c1 fa 1f             	sar    edx,0x1f
c0028496:	c1 e2 08             	shl    edx,0x8
c0028499:	09 ca                	or     edx,ecx
c002849b:	eb 04                	jmp    c00284a1 <__truncdfsf2+0xd6>
c002849d:	31 d2                	xor    edx,edx
c002849f:	31 c0                	xor    eax,eax
c00284a1:	c1 e2 17             	shl    edx,0x17
c00284a4:	c1 e8 08             	shr    eax,0x8
c00284a7:	09 d0                	or     eax,edx
c00284a9:	eb 3c                	jmp    c00284e7 <__truncdfsf2+0x11c>
c00284ab:	81 e9 80 03 00 00    	sub    ecx,0x380
c00284b1:	89 ca                	mov    edx,ecx
c00284b3:	c1 fa 0b             	sar    edx,0xb
c00284b6:	c1 e2 08             	shl    edx,0x8
c00284b9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00284bc:	31 db                	xor    ebx,ebx
c00284be:	85 ff                	test   edi,edi
c00284c0:	0f 95 c3             	setne  bl
c00284c3:	09 d8                	or     eax,ebx
c00284c5:	89 c3                	mov    ebx,eax
c00284c7:	c1 eb 08             	shr    ebx,0x8
c00284ca:	a8 7f                	test   al,0x7f
c00284cc:	0f 95 c2             	setne  dl
c00284cf:	89 d6                	mov    esi,edx
c00284d1:	09 de                	or     esi,ebx
c00284d3:	83 e6 01             	and    esi,0x1
c00284d6:	c1 e8 07             	shr    eax,0x7
c00284d9:	21 f0                	and    eax,esi
c00284db:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00284de:	09 ca                	or     edx,ecx
c00284e0:	c1 e2 17             	shl    edx,0x17
c00284e3:	09 da                	or     edx,ebx
c00284e5:	01 d0                	add    eax,edx
c00284e7:	83 c4 0c             	add    esp,0xc
c00284ea:	5b                   	pop    ebx
c00284eb:	5e                   	pop    esi
c00284ec:	5f                   	pop    edi
c00284ed:	5d                   	pop    ebp
c00284ee:	c3                   	ret    

c00284ef <__extendsfdf2>:
c00284ef:	55                   	push   ebp
c00284f0:	89 e5                	mov    ebp,esp
c00284f2:	57                   	push   edi
c00284f3:	56                   	push   esi
c00284f4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00284f7:	89 d1                	mov    ecx,edx
c00284f9:	c1 f9 17             	sar    ecx,0x17
c00284fc:	c1 e2 08             	shl    edx,0x8
c00284ff:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028505:	89 c8                	mov    eax,ecx
c0028507:	80 e4 f8             	and    ah,0xf8
c002850a:	8d 71 01             	lea    esi,[ecx+0x1]
c002850d:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028513:	75 27                	jne    c002853c <__extendsfdf2+0x4d>
c0028515:	81 e1 ff 00 00 00    	and    ecx,0xff
c002851b:	75 18                	jne    c0028535 <__extendsfdf2+0x46>
c002851d:	85 d2                	test   edx,edx
c002851f:	74 20                	je     c0028541 <__extendsfdf2+0x52>
c0028521:	41                   	inc    ecx
c0028522:	01 d2                	add    edx,edx
c0028524:	79 fb                	jns    c0028521 <__extendsfdf2+0x32>
c0028526:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002852c:	29 c8                	sub    eax,ecx
c002852e:	05 81 03 00 00       	add    eax,0x381
c0028533:	eb 0c                	jmp    c0028541 <__extendsfdf2+0x52>
c0028535:	05 00 07 00 00       	add    eax,0x700
c002853a:	eb 05                	jmp    c0028541 <__extendsfdf2+0x52>
c002853c:	05 80 03 00 00       	add    eax,0x380
c0028541:	c1 e0 14             	shl    eax,0x14
c0028544:	89 c1                	mov    ecx,eax
c0028546:	89 d0                	mov    eax,edx
c0028548:	c1 e8 0b             	shr    eax,0xb
c002854b:	09 c1                	or     ecx,eax
c002854d:	c1 e2 15             	shl    edx,0x15
c0028550:	89 d0                	mov    eax,edx
c0028552:	89 ca                	mov    edx,ecx
c0028554:	5e                   	pop    esi
c0028555:	5f                   	pop    edi
c0028556:	5d                   	pop    ebp
c0028557:	c3                   	ret    
c0028558:	66 90                	xchg   ax,ax
c002855a:	66 90                	xchg   ax,ax
c002855c:	66 90                	xchg   ax,ax
c002855e:	66 90                	xchg   ax,ax

c0028560 <fabs>:
c0028560:	83 ec 0c             	sub    esp,0xc
c0028563:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028567:	89 04 24             	mov    DWORD PTR [esp],eax
c002856a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002856e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028573:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028577:	dd 04 24             	fld    QWORD PTR [esp]
c002857a:	83 c4 0c             	add    esp,0xc
c002857d:	c3                   	ret    
c002857e:	66 90                	xchg   ax,ax

c0028580 <lrint>:
c0028580:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028584:	83 ec 04             	sub    esp,0x4
c0028587:	db 1c 24             	fistp  DWORD PTR [esp]
c002858a:	58                   	pop    eax
c002858b:	c3                   	ret    

c002858c <lrintf>:
c002858c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028590:	83 ec 04             	sub    esp,0x4
c0028593:	db 1c 24             	fistp  DWORD PTR [esp]
c0028596:	58                   	pop    eax
c0028597:	c3                   	ret    

Disassembly of section .init:

c0028598 <_init>:
c0028598:	55                   	push   ebp
c0028599:	89 e5                	mov    ebp,esp
c002859b:	e8 78 7b fd ff       	call   c0000118 <frame_dummy>
c00285a0:	e8 5b e0 ff ff       	call   c0026600 <__do_global_ctors_aux>
c00285a5:	5d                   	pop    ebp
c00285a6:	c3                   	ret    

Disassembly of section .fini:

c00285a7 <_fini>:
c00285a7:	55                   	push   ebp
c00285a8:	89 e5                	mov    ebp,esp
c00285aa:	e8 f9 7a fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00285af:	5d                   	pop    ebp
c00285b0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00285b2 <Computer::~Computer()>:
c00285b2:	83 ec 0c             	sub    esp,0xc
c00285b5:	ba 3c a1 02 c0       	mov    edx,0xc002a13c
c00285ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285be:	89 10                	mov    DWORD PTR [eax],edx
c00285c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285c4:	83 ec 0c             	sub    esp,0xc
c00285c7:	50                   	push   eax
c00285c8:	e8 d7 b4 fe ff       	call   c0013aa4 <Device::~Device()>
c00285cd:	83 c4 10             	add    esp,0x10
c00285d0:	90                   	nop
c00285d1:	83 c4 0c             	add    esp,0xc
c00285d4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00285d6 <Computer::~Computer()>:
c00285d6:	83 ec 0c             	sub    esp,0xc
c00285d9:	83 ec 0c             	sub    esp,0xc
c00285dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00285e0:	e8 cd ff ff ff       	call   c00285b2 <Computer::~Computer()>
c00285e5:	83 c4 10             	add    esp,0x10
c00285e8:	83 ec 08             	sub    esp,0x8
c00285eb:	68 ec 01 00 00       	push   0x1ec
c00285f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00285f4:	e8 cc a0 fe ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c00285f9:	83 c4 10             	add    esp,0x10
c00285fc:	83 c4 0c             	add    esp,0xc
c00285ff:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028600 <idleCommon()>:
c0028600:	83 ec 0c             	sub    esp,0xc
c0028603:	fa                   	cli    
c0028604:	ff 05 c8 f2 02 c0    	inc    DWORD PTR ds:0xc002f2c8
c002860a:	e8 0c 55 ff ff       	call   c001db1b <schedule()>
c002860f:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0028614:	48                   	dec    eax
c0028615:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c002861a:	75 01                	jne    c002861d <idleCommon()+0x1d>
c002861c:	fb                   	sti    
c002861d:	83 c4 0c             	add    esp,0xc
c0028620:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028622 <LinkedList<UnixFile>::~LinkedList()>:
c0028622:	90                   	nop
c0028623:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028624 <LinkedList<UnixFile>::LinkedList()>:
c0028624:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028628:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002862e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028632:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028639:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002863d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028644:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028648:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002864e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028652:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028659:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002865d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028664:	90                   	nop
c0028665:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028666 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028666:	83 ec 0c             	sub    esp,0xc
c0028669:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002866e:	75 10                	jne    c0028680 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0028670:	83 ec 0c             	sub    esp,0xc
c0028673:	68 f4 a3 02 c0       	push   0xc002a3f4
c0028678:	e8 0c 19 ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c002867d:	83 c4 10             	add    esp,0x10
c0028680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028684:	8b 00                	mov    eax,DWORD PTR [eax]
c0028686:	85 c0                	test   eax,eax
c0028688:	74 34                	je     c00286be <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002868a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002868e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028691:	85 c0                	test   eax,eax
c0028693:	74 29                	je     c00286be <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028695:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028699:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002869c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286a0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00286a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286ab:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00286ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286b5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00286bc:	eb 65                	jmp    c0028723 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00286be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00286c4:	85 c0                	test   eax,eax
c00286c6:	75 4b                	jne    c0028713 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00286c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286cf:	85 c0                	test   eax,eax
c00286d1:	75 40                	jne    c0028713 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00286d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286d7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286db:	89 10                	mov    DWORD PTR [eax],edx
c00286dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286e1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286e5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00286e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286ef:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00286f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286fa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00286fd:	85 c0                	test   eax,eax
c00286ff:	74 22                	je     c0028723 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028701:	83 ec 0c             	sub    esp,0xc
c0028704:	68 16 a4 02 c0       	push   0xc002a416
c0028709:	e8 7b 18 ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c002870e:	83 c4 10             	add    esp,0x10
c0028711:	eb 10                	jmp    c0028723 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028713:	83 ec 0c             	sub    esp,0xc
c0028716:	68 20 a4 02 c0       	push   0xc002a420
c002871b:	e8 69 18 ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c0028720:	83 c4 10             	add    esp,0x10
c0028723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028727:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002872a:	8d 50 01             	lea    edx,[eax+0x1]
c002872d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028731:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028734:	90                   	nop
c0028735:	83 c4 0c             	add    esp,0xc
c0028738:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002873a <LinkedList<UnixFile>::getFirstElement()>:
c002873a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002873e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028740:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0028742 <LinkedList<UnixFile>::removeFirst()>:
c0028742:	83 ec 0c             	sub    esp,0xc
c0028745:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028749:	8b 00                	mov    eax,DWORD PTR [eax]
c002874b:	85 c0                	test   eax,eax
c002874d:	75 12                	jne    c0028761 <LinkedList<UnixFile>::removeFirst()+0x1f>
c002874f:	83 ec 0c             	sub    esp,0xc
c0028752:	68 2c a4 02 c0       	push   0xc002a42c
c0028757:	e8 2d 18 ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c002875c:	83 c4 10             	add    esp,0x10
c002875f:	eb 7e                	jmp    c00287df <LinkedList<UnixFile>::removeFirst()+0x9d>
c0028761:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028765:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028768:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002876b:	85 c0                	test   eax,eax
c002876d:	74 10                	je     c002877f <LinkedList<UnixFile>::removeFirst()+0x3d>
c002876f:	83 ec 0c             	sub    esp,0xc
c0028772:	68 77 a4 02 c0       	push   0xc002a477
c0028777:	e8 0d 18 ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c002877c:	83 c4 10             	add    esp,0x10
c002877f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028783:	8b 00                	mov    eax,DWORD PTR [eax]
c0028785:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028788:	85 c0                	test   eax,eax
c002878a:	75 33                	jne    c00287bf <LinkedList<UnixFile>::removeFirst()+0x7d>
c002878c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028790:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028796:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002879a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00287a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287a5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287a8:	83 f8 01             	cmp    eax,0x1
c00287ab:	74 21                	je     c00287ce <LinkedList<UnixFile>::removeFirst()+0x8c>
c00287ad:	83 ec 0c             	sub    esp,0xc
c00287b0:	68 50 a4 02 c0       	push   0xc002a450
c00287b5:	e8 cf 17 ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c00287ba:	83 c4 10             	add    esp,0x10
c00287bd:	eb 0f                	jmp    c00287ce <LinkedList<UnixFile>::removeFirst()+0x8c>
c00287bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00287c5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00287c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287cc:	89 10                	mov    DWORD PTR [eax],edx
c00287ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287d2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287d5:	8d 50 ff             	lea    edx,[eax-0x1]
c00287d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287dc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00287df:	83 c4 0c             	add    esp,0xc
c00287e2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00287e4 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00287e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00287e8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287eb:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00287ec <DriverlessDevice::~DriverlessDevice()>:
c00287ec:	ba 7c ad 02 c0       	mov    edx,0xc002ad7c
c00287f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287f5:	89 10                	mov    DWORD PTR [eax],edx
c00287f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287fb:	50                   	push   eax
c00287fc:	e8 a3 b2 fe ff       	call   c0013aa4 <Device::~Device()>
c0028801:	83 c4 04             	add    esp,0x4
c0028804:	90                   	nop
c0028805:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028806 <DriverlessDevice::~DriverlessDevice()>:
c0028806:	83 ec 0c             	sub    esp,0xc
c0028809:	83 ec 0c             	sub    esp,0xc
c002880c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028810:	e8 d7 ff ff ff       	call   c00287ec <DriverlessDevice::~DriverlessDevice()>
c0028815:	83 c4 10             	add    esp,0x10
c0028818:	83 ec 08             	sub    esp,0x8
c002881b:	68 58 01 00 00       	push   0x158
c0028820:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028824:	e8 9c 9e fe ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0028829:	83 c4 10             	add    esp,0x10
c002882c:	83 c4 0c             	add    esp,0xc
c002882f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0028830 <LinkedList<Device>::addElement(Device*)>:
c0028830:	83 ec 0c             	sub    esp,0xc
c0028833:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028838:	75 10                	jne    c002884a <LinkedList<Device>::addElement(Device*)+0x1a>
c002883a:	83 ec 0c             	sub    esp,0xc
c002883d:	68 f4 a3 02 c0       	push   0xc002a3f4
c0028842:	e8 42 17 ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c0028847:	83 c4 10             	add    esp,0x10
c002884a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002884e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028850:	85 c0                	test   eax,eax
c0028852:	74 3a                	je     c002888e <LinkedList<Device>::addElement(Device*)+0x5e>
c0028854:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028858:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002885b:	85 c0                	test   eax,eax
c002885d:	74 2f                	je     c002888e <LinkedList<Device>::addElement(Device*)+0x5e>
c002885f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028863:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028866:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002886a:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0028870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028874:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028878:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002887b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002887f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028882:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002888c:	eb 68                	jmp    c00288f6 <LinkedList<Device>::addElement(Device*)+0xc6>
c002888e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028892:	8b 00                	mov    eax,DWORD PTR [eax]
c0028894:	85 c0                	test   eax,eax
c0028896:	75 4e                	jne    c00288e6 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002889c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002889f:	85 c0                	test   eax,eax
c00288a1:	75 43                	jne    c00288e6 <LinkedList<Device>::addElement(Device*)+0xb6>
c00288a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288ab:	89 10                	mov    DWORD PTR [eax],edx
c00288ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288b1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288b5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00288b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288bf:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00288c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288cd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288d0:	85 c0                	test   eax,eax
c00288d2:	74 22                	je     c00288f6 <LinkedList<Device>::addElement(Device*)+0xc6>
c00288d4:	83 ec 0c             	sub    esp,0xc
c00288d7:	68 16 a4 02 c0       	push   0xc002a416
c00288dc:	e8 a8 16 ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c00288e1:	83 c4 10             	add    esp,0x10
c00288e4:	eb 10                	jmp    c00288f6 <LinkedList<Device>::addElement(Device*)+0xc6>
c00288e6:	83 ec 0c             	sub    esp,0xc
c00288e9:	68 20 a4 02 c0       	push   0xc002a420
c00288ee:	e8 96 16 ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c00288f3:	83 c4 10             	add    esp,0x10
c00288f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288fa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288fd:	8d 50 01             	lea    edx,[eax+0x1]
c0028900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028904:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028907:	90                   	nop
c0028908:	83 c4 0c             	add    esp,0xc
c002890b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c002890c <LinkedList<Device>::LinkedList()>:
c002890c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028910:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028916:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002891a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028921:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028925:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002892c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028930:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028936:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002893a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028941:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028945:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002894c:	90                   	nop
c002894d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002894e <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002894e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028952:	8b 00                	mov    eax,DWORD PTR [eax]
c0028954:	85 c0                	test   eax,eax
c0028956:	75 0e                	jne    c0028966 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028958:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002895c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002895f:	85 c0                	test   eax,eax
c0028961:	75 03                	jne    c0028966 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028963:	b0 01                	mov    al,0x1
c0028965:	c3                   	ret    
c0028966:	b0 00                	mov    al,0x0
c0028968:	90                   	nop
c0028969:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002896a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002896a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002896e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028970:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028972 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028972:	83 ec 0c             	sub    esp,0xc
c0028975:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028979:	8b 00                	mov    eax,DWORD PTR [eax]
c002897b:	85 c0                	test   eax,eax
c002897d:	75 15                	jne    c0028994 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002897f:	83 ec 0c             	sub    esp,0xc
c0028982:	68 2c a4 02 c0       	push   0xc002a42c
c0028987:	e8 fd 15 ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c002898c:	83 c4 10             	add    esp,0x10
c002898f:	e9 88 00 00 00       	jmp    c0028a1c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028994:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028998:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002899b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002899e:	85 c0                	test   eax,eax
c00289a0:	0f 95 c0             	setne  al
c00289a3:	84 c0                	test   al,al
c00289a5:	74 10                	je     c00289b7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00289a7:	83 ec 0c             	sub    esp,0xc
c00289aa:	68 77 a4 02 c0       	push   0xc002a477
c00289af:	e8 d5 15 ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c00289b4:	83 c4 10             	add    esp,0x10
c00289b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00289bd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00289c0:	85 c0                	test   eax,eax
c00289c2:	0f 94 c0             	sete   al
c00289c5:	84 c0                	test   al,al
c00289c7:	74 33                	je     c00289fc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00289c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289cd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00289d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289d7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00289de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289e2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289e5:	83 f8 01             	cmp    eax,0x1
c00289e8:	74 21                	je     c0028a0b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00289ea:	83 ec 0c             	sub    esp,0xc
c00289ed:	68 50 a4 02 c0       	push   0xc002a450
c00289f2:	e8 92 15 ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c00289f7:	83 c4 10             	add    esp,0x10
c00289fa:	eb 0f                	jmp    c0028a0b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00289fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a00:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a02:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028a05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a09:	89 10                	mov    DWORD PTR [eax],edx
c0028a0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a0f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a12:	8d 50 ff             	lea    edx,[eax-0x1]
c0028a15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a19:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028a1c:	83 c4 0c             	add    esp,0xc
c0028a1f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028a20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028a20:	83 ec 0c             	sub    esp,0xc
c0028a23:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028a28:	75 10                	jne    c0028a3a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028a2a:	83 ec 0c             	sub    esp,0xc
c0028a2d:	68 f4 a3 02 c0       	push   0xc002a3f4
c0028a32:	e8 52 15 ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c0028a37:	83 c4 10             	add    esp,0x10
c0028a3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a40:	85 c0                	test   eax,eax
c0028a42:	74 34                	je     c0028a78 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028a44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a48:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a4b:	85 c0                	test   eax,eax
c0028a4d:	74 29                	je     c0028a78 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028a4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a53:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a56:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a5a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028a5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a61:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a65:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028a68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a6c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a6f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028a76:	eb 65                	jmp    c0028add <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028a78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a7e:	85 c0                	test   eax,eax
c0028a80:	75 4b                	jne    c0028acd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028a82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a89:	85 c0                	test   eax,eax
c0028a8b:	75 40                	jne    c0028acd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028a8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a95:	89 10                	mov    DWORD PTR [eax],edx
c0028a97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a9b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a9f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028aa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aa6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028aa9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028ab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ab4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ab7:	85 c0                	test   eax,eax
c0028ab9:	74 22                	je     c0028add <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028abb:	83 ec 0c             	sub    esp,0xc
c0028abe:	68 16 a4 02 c0       	push   0xc002a416
c0028ac3:	e8 c1 14 ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c0028ac8:	83 c4 10             	add    esp,0x10
c0028acb:	eb 10                	jmp    c0028add <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028acd:	83 ec 0c             	sub    esp,0xc
c0028ad0:	68 20 a4 02 c0       	push   0xc002a420
c0028ad5:	e8 af 14 ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c0028ada:	83 c4 10             	add    esp,0x10
c0028add:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ae1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ae4:	8d 50 01             	lea    edx,[eax+0x1]
c0028ae7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aeb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028aee:	90                   	nop
c0028aef:	83 c4 0c             	add    esp,0xc
c0028af2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028af4 <ACPI::~ACPI()>:
c0028af4:	83 ec 0c             	sub    esp,0xc
c0028af7:	ba 14 b7 02 c0       	mov    edx,0xc002b714
c0028afc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b00:	89 10                	mov    DWORD PTR [eax],edx
c0028b02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b06:	83 ec 0c             	sub    esp,0xc
c0028b09:	50                   	push   eax
c0028b0a:	e8 95 af fe ff       	call   c0013aa4 <Device::~Device()>
c0028b0f:	83 c4 10             	add    esp,0x10
c0028b12:	90                   	nop
c0028b13:	83 c4 0c             	add    esp,0xc
c0028b16:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028b18 <ACPI::~ACPI()>:
c0028b18:	83 ec 0c             	sub    esp,0xc
c0028b1b:	83 ec 0c             	sub    esp,0xc
c0028b1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b22:	e8 cd ff ff ff       	call   c0028af4 <ACPI::~ACPI()>
c0028b27:	83 c4 10             	add    esp,0x10
c0028b2a:	83 ec 08             	sub    esp,0x8
c0028b2d:	68 64 12 00 00       	push   0x1264
c0028b32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b36:	e8 8a 9b fe ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0028b3b:	83 c4 10             	add    esp,0x10
c0028b3e:	83 c4 0c             	add    esp,0xc
c0028b41:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0028b42 <LinkedList<Device>::~LinkedList()>:
c0028b42:	90                   	nop
c0028b43:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0028b44 <LinkedList<Device>::isEmpty()>:
c0028b44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b48:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b4a:	85 c0                	test   eax,eax
c0028b4c:	75 0e                	jne    c0028b5c <LinkedList<Device>::isEmpty()+0x18>
c0028b4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b52:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b55:	85 c0                	test   eax,eax
c0028b57:	75 03                	jne    c0028b5c <LinkedList<Device>::isEmpty()+0x18>
c0028b59:	b0 01                	mov    al,0x1
c0028b5b:	c3                   	ret    
c0028b5c:	b0 00                	mov    al,0x0
c0028b5e:	90                   	nop
c0028b5f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0028b60 <LinkedList<Device>::getFirstElement()>:
c0028b60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b64:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b66:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0028b68 <LinkedList<Device>::removeFirst()>:
c0028b68:	83 ec 0c             	sub    esp,0xc
c0028b6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b6f:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b71:	85 c0                	test   eax,eax
c0028b73:	75 15                	jne    c0028b8a <LinkedList<Device>::removeFirst()+0x22>
c0028b75:	83 ec 0c             	sub    esp,0xc
c0028b78:	68 2c a4 02 c0       	push   0xc002a42c
c0028b7d:	e8 07 14 ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c0028b82:	83 c4 10             	add    esp,0x10
c0028b85:	e9 87 00 00 00       	jmp    c0028c11 <LinkedList<Device>::removeFirst()+0xa9>
c0028b8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b91:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0028b97:	85 c0                	test   eax,eax
c0028b99:	74 10                	je     c0028bab <LinkedList<Device>::removeFirst()+0x43>
c0028b9b:	83 ec 0c             	sub    esp,0xc
c0028b9e:	68 77 a4 02 c0       	push   0xc002a477
c0028ba3:	e8 e1 13 ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c0028ba8:	83 c4 10             	add    esp,0x10
c0028bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028baf:	8b 00                	mov    eax,DWORD PTR [eax]
c0028bb1:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0028bb7:	85 c0                	test   eax,eax
c0028bb9:	75 33                	jne    c0028bee <LinkedList<Device>::removeFirst()+0x86>
c0028bbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bbf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028bc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bc9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028bd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bd4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028bd7:	83 f8 01             	cmp    eax,0x1
c0028bda:	74 24                	je     c0028c00 <LinkedList<Device>::removeFirst()+0x98>
c0028bdc:	83 ec 0c             	sub    esp,0xc
c0028bdf:	68 50 a4 02 c0       	push   0xc002a450
c0028be4:	e8 a0 13 ff ff       	call   c0019f89 <Krnl::panic(char const*)>
c0028be9:	83 c4 10             	add    esp,0x10
c0028bec:	eb 12                	jmp    c0028c00 <LinkedList<Device>::removeFirst()+0x98>
c0028bee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bf2:	8b 00                	mov    eax,DWORD PTR [eax]
c0028bf4:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0028bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bfe:	89 10                	mov    DWORD PTR [eax],edx
c0028c00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c04:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c07:	8d 50 ff             	lea    edx,[eax-0x1]
c0028c0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c0e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028c11:	83 c4 0c             	add    esp,0xc
c0028c14:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028c16 <CPU::~CPU()>:
c0028c16:	83 ec 0c             	sub    esp,0xc
c0028c19:	ba 64 b9 02 c0       	mov    edx,0xc002b964
c0028c1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c22:	89 10                	mov    DWORD PTR [eax],edx
c0028c24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c28:	83 ec 0c             	sub    esp,0xc
c0028c2b:	50                   	push   eax
c0028c2c:	e8 73 ae fe ff       	call   c0013aa4 <Device::~Device()>
c0028c31:	83 c4 10             	add    esp,0x10
c0028c34:	90                   	nop
c0028c35:	83 c4 0c             	add    esp,0xc
c0028c38:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028c3a <CPU::~CPU()>:
c0028c3a:	83 ec 0c             	sub    esp,0xc
c0028c3d:	83 ec 0c             	sub    esp,0xc
c0028c40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c44:	e8 cd ff ff ff       	call   c0028c16 <CPU::~CPU()>
c0028c49:	83 c4 10             	add    esp,0x10
c0028c4c:	83 ec 08             	sub    esp,0x8
c0028c4f:	68 98 11 00 00       	push   0x1198
c0028c54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c58:	e8 68 9a fe ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0028c5d:	83 c4 10             	add    esp,0x10
c0028c60:	83 c4 0c             	add    esp,0xc
c0028c63:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028c64 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028c64:	90                   	nop
c0028c65:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028c66 <ThreadControlBlock::ThreadControlBlock()>:
c0028c66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c6a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028c71:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c75:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028c7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c80:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028c87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c8b:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028c92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c96:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0028c9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ca1:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028ca5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ca9:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028cad:	90                   	nop
c0028cae:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028cb0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028cb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cb4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028cba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cbe:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028cc5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cc9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028cd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cd4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cde:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ce5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ce9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028cf0:	90                   	nop
c0028cf1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028cf2 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028cf2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028cf6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028cf9:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028cfa <Vm::_FPUState::_FPUState()>:
c0028cfa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cfe:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028d05:	90                   	nop
c0028d06:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028d08 <PCI::~PCI()>:
c0028d08:	83 ec 0c             	sub    esp,0xc
c0028d0b:	ba b0 c4 02 c0       	mov    edx,0xc002c4b0
c0028d10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d14:	89 10                	mov    DWORD PTR [eax],edx
c0028d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d1a:	83 ec 0c             	sub    esp,0xc
c0028d1d:	50                   	push   eax
c0028d1e:	e8 51 a7 fe ff       	call   c0013474 <Bus::~Bus()>
c0028d23:	83 c4 10             	add    esp,0x10
c0028d26:	90                   	nop
c0028d27:	83 c4 0c             	add    esp,0xc
c0028d2a:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028d2c <PCI::~PCI()>:
c0028d2c:	83 ec 0c             	sub    esp,0xc
c0028d2f:	83 ec 0c             	sub    esp,0xc
c0028d32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d36:	e8 cd ff ff ff       	call   c0028d08 <PCI::~PCI()>
c0028d3b:	83 c4 10             	add    esp,0x10
c0028d3e:	83 ec 08             	sub    esp,0x8
c0028d41:	68 5c 01 00 00       	push   0x15c
c0028d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d4a:	e8 76 99 fe ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0028d4f:	83 c4 10             	add    esp,0x10
c0028d52:	83 c4 0c             	add    esp,0xc
c0028d55:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028d56 <IDE::~IDE()>:
c0028d56:	83 ec 0c             	sub    esp,0xc
c0028d59:	ba 64 c5 02 c0       	mov    edx,0xc002c564
c0028d5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d62:	89 10                	mov    DWORD PTR [eax],edx
c0028d64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d68:	83 ec 0c             	sub    esp,0xc
c0028d6b:	50                   	push   eax
c0028d6c:	e8 49 b2 fe ff       	call   c0013fba <HardDiskController::~HardDiskController()>
c0028d71:	83 c4 10             	add    esp,0x10
c0028d74:	90                   	nop
c0028d75:	83 c4 0c             	add    esp,0xc
c0028d78:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028d7a <IDE::~IDE()>:
c0028d7a:	83 ec 0c             	sub    esp,0xc
c0028d7d:	83 ec 0c             	sub    esp,0xc
c0028d80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d84:	e8 cd ff ff ff       	call   c0028d56 <IDE::~IDE()>
c0028d89:	83 c4 10             	add    esp,0x10
c0028d8c:	83 ec 08             	sub    esp,0x8
c0028d8f:	68 70 02 00 00       	push   0x270
c0028d94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d98:	e8 28 99 fe ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0028d9d:	83 c4 10             	add    esp,0x10
c0028da0:	83 c4 0c             	add    esp,0xc
c0028da3:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028da4 <SATABus::~SATABus()>:
c0028da4:	83 ec 0c             	sub    esp,0xc
c0028da7:	ba dc c5 02 c0       	mov    edx,0xc002c5dc
c0028dac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028db0:	89 10                	mov    DWORD PTR [eax],edx
c0028db2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028db6:	83 ec 0c             	sub    esp,0xc
c0028db9:	50                   	push   eax
c0028dba:	e8 fb b1 fe ff       	call   c0013fba <HardDiskController::~HardDiskController()>
c0028dbf:	83 c4 10             	add    esp,0x10
c0028dc2:	90                   	nop
c0028dc3:	83 c4 0c             	add    esp,0xc
c0028dc6:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028dc8 <SATABus::~SATABus()>:
c0028dc8:	83 ec 0c             	sub    esp,0xc
c0028dcb:	83 ec 0c             	sub    esp,0xc
c0028dce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dd2:	e8 cd ff ff ff       	call   c0028da4 <SATABus::~SATABus()>
c0028dd7:	83 c4 10             	add    esp,0x10
c0028dda:	83 ec 08             	sub    esp,0x8
c0028ddd:	68 64 01 00 00       	push   0x164
c0028de2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028de6:	e8 da 98 fe ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0028deb:	83 c4 10             	add    esp,0x10
c0028dee:	83 c4 0c             	add    esp,0xc
c0028df1:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028df2 <ATA::~ATA()>:
c0028df2:	83 ec 0c             	sub    esp,0xc
c0028df5:	ba 54 c6 02 c0       	mov    edx,0xc002c654
c0028dfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dfe:	89 10                	mov    DWORD PTR [eax],edx
c0028e00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e04:	83 ec 0c             	sub    esp,0xc
c0028e07:	50                   	push   eax
c0028e08:	e8 8f b2 fe ff       	call   c001409c <PhysicalDisk::~PhysicalDisk()>
c0028e0d:	83 c4 10             	add    esp,0x10
c0028e10:	90                   	nop
c0028e11:	83 c4 0c             	add    esp,0xc
c0028e14:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028e16 <ATA::~ATA()>:
c0028e16:	83 ec 0c             	sub    esp,0xc
c0028e19:	83 ec 0c             	sub    esp,0xc
c0028e1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e20:	e8 cd ff ff ff       	call   c0028df2 <ATA::~ATA()>
c0028e25:	83 c4 10             	add    esp,0x10
c0028e28:	83 ec 08             	sub    esp,0x8
c0028e2b:	68 7c 01 00 00       	push   0x17c
c0028e30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e34:	e8 8c 98 fe ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0028e39:	83 c4 10             	add    esp,0x10
c0028e3c:	83 c4 0c             	add    esp,0xc
c0028e3f:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028e40 <ATAPI::~ATAPI()>:
c0028e40:	83 ec 0c             	sub    esp,0xc
c0028e43:	ba 8c c6 02 c0       	mov    edx,0xc002c68c
c0028e48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e4c:	89 10                	mov    DWORD PTR [eax],edx
c0028e4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e52:	83 ec 0c             	sub    esp,0xc
c0028e55:	50                   	push   eax
c0028e56:	e8 41 b2 fe ff       	call   c001409c <PhysicalDisk::~PhysicalDisk()>
c0028e5b:	83 c4 10             	add    esp,0x10
c0028e5e:	90                   	nop
c0028e5f:	83 c4 0c             	add    esp,0xc
c0028e62:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028e64 <ATAPI::~ATAPI()>:
c0028e64:	83 ec 0c             	sub    esp,0xc
c0028e67:	83 ec 0c             	sub    esp,0xc
c0028e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e6e:	e8 cd ff ff ff       	call   c0028e40 <ATAPI::~ATAPI()>
c0028e73:	83 c4 10             	add    esp,0x10
c0028e76:	83 ec 08             	sub    esp,0x8
c0028e79:	68 80 01 00 00       	push   0x180
c0028e7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e82:	e8 3e 98 fe ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0028e87:	83 c4 10             	add    esp,0x10
c0028e8a:	83 c4 0c             	add    esp,0xc
c0028e8d:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028e8e <SATA::~SATA()>:
c0028e8e:	83 ec 0c             	sub    esp,0xc
c0028e91:	ba 40 c7 02 c0       	mov    edx,0xc002c740
c0028e96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e9a:	89 10                	mov    DWORD PTR [eax],edx
c0028e9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ea0:	83 ec 0c             	sub    esp,0xc
c0028ea3:	50                   	push   eax
c0028ea4:	e8 f3 b1 fe ff       	call   c001409c <PhysicalDisk::~PhysicalDisk()>
c0028ea9:	83 c4 10             	add    esp,0x10
c0028eac:	90                   	nop
c0028ead:	83 c4 0c             	add    esp,0xc
c0028eb0:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028eb2 <SATA::~SATA()>:
c0028eb2:	83 ec 0c             	sub    esp,0xc
c0028eb5:	83 ec 0c             	sub    esp,0xc
c0028eb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ebc:	e8 cd ff ff ff       	call   c0028e8e <SATA::~SATA()>
c0028ec1:	83 c4 10             	add    esp,0x10
c0028ec4:	83 ec 08             	sub    esp,0x8
c0028ec7:	68 7c 01 00 00       	push   0x17c
c0028ecc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ed0:	e8 f0 97 fe ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0028ed5:	83 c4 10             	add    esp,0x10
c0028ed8:	83 c4 0c             	add    esp,0xc
c0028edb:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028edc <SATAPI::~SATAPI()>:
c0028edc:	83 ec 0c             	sub    esp,0xc
c0028edf:	ba 1c c8 02 c0       	mov    edx,0xc002c81c
c0028ee4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ee8:	89 10                	mov    DWORD PTR [eax],edx
c0028eea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eee:	83 ec 0c             	sub    esp,0xc
c0028ef1:	50                   	push   eax
c0028ef2:	e8 a5 b1 fe ff       	call   c001409c <PhysicalDisk::~PhysicalDisk()>
c0028ef7:	83 c4 10             	add    esp,0x10
c0028efa:	90                   	nop
c0028efb:	83 c4 0c             	add    esp,0xc
c0028efe:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028f00 <SATAPI::~SATAPI()>:
c0028f00:	83 ec 0c             	sub    esp,0xc
c0028f03:	83 ec 0c             	sub    esp,0xc
c0028f06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f0a:	e8 cd ff ff ff       	call   c0028edc <SATAPI::~SATAPI()>
c0028f0f:	83 c4 10             	add    esp,0x10
c0028f12:	83 ec 08             	sub    esp,0x8
c0028f15:	68 80 01 00 00       	push   0x180
c0028f1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f1e:	e8 a2 97 fe ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0028f23:	83 c4 10             	add    esp,0x10
c0028f26:	83 c4 0c             	add    esp,0xc
c0028f29:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028f2a <AVX::~AVX()>:
c0028f2a:	83 ec 0c             	sub    esp,0xc
c0028f2d:	ba 5c c8 02 c0       	mov    edx,0xc002c85c
c0028f32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f36:	89 10                	mov    DWORD PTR [eax],edx
c0028f38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f3c:	83 ec 0c             	sub    esp,0xc
c0028f3f:	50                   	push   eax
c0028f40:	e8 db b1 fe ff       	call   c0014120 <FPU::~FPU()>
c0028f45:	83 c4 10             	add    esp,0x10
c0028f48:	90                   	nop
c0028f49:	83 c4 0c             	add    esp,0xc
c0028f4c:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028f4e <AVX::~AVX()>:
c0028f4e:	83 ec 0c             	sub    esp,0xc
c0028f51:	83 ec 0c             	sub    esp,0xc
c0028f54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f58:	e8 cd ff ff ff       	call   c0028f2a <AVX::~AVX()>
c0028f5d:	83 c4 10             	add    esp,0x10
c0028f60:	83 ec 08             	sub    esp,0x8
c0028f63:	68 58 01 00 00       	push   0x158
c0028f68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f6c:	e8 54 97 fe ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0028f71:	83 c4 10             	add    esp,0x10
c0028f74:	83 c4 0c             	add    esp,0xc
c0028f77:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028f78 <MMX::~MMX()>:
c0028f78:	83 ec 0c             	sub    esp,0xc
c0028f7b:	ba 9c c8 02 c0       	mov    edx,0xc002c89c
c0028f80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f84:	89 10                	mov    DWORD PTR [eax],edx
c0028f86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f8a:	83 ec 0c             	sub    esp,0xc
c0028f8d:	50                   	push   eax
c0028f8e:	e8 8d b1 fe ff       	call   c0014120 <FPU::~FPU()>
c0028f93:	83 c4 10             	add    esp,0x10
c0028f96:	90                   	nop
c0028f97:	83 c4 0c             	add    esp,0xc
c0028f9a:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028f9c <MMX::~MMX()>:
c0028f9c:	83 ec 0c             	sub    esp,0xc
c0028f9f:	83 ec 0c             	sub    esp,0xc
c0028fa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fa6:	e8 cd ff ff ff       	call   c0028f78 <MMX::~MMX()>
c0028fab:	83 c4 10             	add    esp,0x10
c0028fae:	83 ec 08             	sub    esp,0x8
c0028fb1:	68 58 01 00 00       	push   0x158
c0028fb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fba:	e8 06 97 fe ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0028fbf:	83 c4 10             	add    esp,0x10
c0028fc2:	83 c4 0c             	add    esp,0xc
c0028fc5:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028fc6 <SSE::~SSE()>:
c0028fc6:	83 ec 0c             	sub    esp,0xc
c0028fc9:	ba dc c8 02 c0       	mov    edx,0xc002c8dc
c0028fce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fd2:	89 10                	mov    DWORD PTR [eax],edx
c0028fd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fd8:	83 ec 0c             	sub    esp,0xc
c0028fdb:	50                   	push   eax
c0028fdc:	e8 3f b1 fe ff       	call   c0014120 <FPU::~FPU()>
c0028fe1:	83 c4 10             	add    esp,0x10
c0028fe4:	90                   	nop
c0028fe5:	83 c4 0c             	add    esp,0xc
c0028fe8:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028fea <SSE::~SSE()>:
c0028fea:	83 ec 0c             	sub    esp,0xc
c0028fed:	83 ec 0c             	sub    esp,0xc
c0028ff0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ff4:	e8 cd ff ff ff       	call   c0028fc6 <SSE::~SSE()>
c0028ff9:	83 c4 10             	add    esp,0x10
c0028ffc:	83 ec 08             	sub    esp,0x8
c0028fff:	68 58 01 00 00       	push   0x158
c0029004:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029008:	e8 b8 96 fe ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c002900d:	83 c4 10             	add    esp,0x10
c0029010:	83 c4 0c             	add    esp,0xc
c0029013:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0029014 <x87::~x87()>:
c0029014:	83 ec 0c             	sub    esp,0xc
c0029017:	ba 1c c9 02 c0       	mov    edx,0xc002c91c
c002901c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029020:	89 10                	mov    DWORD PTR [eax],edx
c0029022:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029026:	83 ec 0c             	sub    esp,0xc
c0029029:	50                   	push   eax
c002902a:	e8 f1 b0 fe ff       	call   c0014120 <FPU::~FPU()>
c002902f:	83 c4 10             	add    esp,0x10
c0029032:	90                   	nop
c0029033:	83 c4 0c             	add    esp,0xc
c0029036:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0029038 <x87::~x87()>:
c0029038:	83 ec 0c             	sub    esp,0xc
c002903b:	83 ec 0c             	sub    esp,0xc
c002903e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029042:	e8 cd ff ff ff       	call   c0029014 <x87::~x87()>
c0029047:	83 c4 10             	add    esp,0x10
c002904a:	83 ec 08             	sub    esp,0x8
c002904d:	68 58 01 00 00       	push   0x158
c0029052:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029056:	e8 6a 96 fe ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c002905b:	83 c4 10             	add    esp,0x10
c002905e:	83 c4 0c             	add    esp,0xc
c0029061:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029062 <IOAPIC::~IOAPIC()>:
c0029062:	83 ec 0c             	sub    esp,0xc
c0029065:	ba 74 ca 02 c0       	mov    edx,0xc002ca74
c002906a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002906e:	89 10                	mov    DWORD PTR [eax],edx
c0029070:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029074:	83 ec 0c             	sub    esp,0xc
c0029077:	50                   	push   eax
c0029078:	e8 27 aa fe ff       	call   c0013aa4 <Device::~Device()>
c002907d:	83 c4 10             	add    esp,0x10
c0029080:	90                   	nop
c0029081:	83 c4 0c             	add    esp,0xc
c0029084:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0029086 <IOAPIC::~IOAPIC()>:
c0029086:	83 ec 0c             	sub    esp,0xc
c0029089:	83 ec 0c             	sub    esp,0xc
c002908c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029090:	e8 cd ff ff ff       	call   c0029062 <IOAPIC::~IOAPIC()>
c0029095:	83 c4 10             	add    esp,0x10
c0029098:	83 ec 08             	sub    esp,0x8
c002909b:	68 68 01 00 00       	push   0x168
c00290a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290a4:	e8 1c 96 fe ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c00290a9:	83 c4 10             	add    esp,0x10
c00290ac:	83 c4 0c             	add    esp,0xc
c00290af:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00290b0 <APIC::~APIC()>:
c00290b0:	83 ec 0c             	sub    esp,0xc
c00290b3:	ba 2c ca 02 c0       	mov    edx,0xc002ca2c
c00290b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290bc:	89 10                	mov    DWORD PTR [eax],edx
c00290be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290c2:	83 ec 0c             	sub    esp,0xc
c00290c5:	50                   	push   eax
c00290c6:	e8 1f b5 fe ff       	call   c00145ea <InterruptController::~InterruptController()>
c00290cb:	83 c4 10             	add    esp,0x10
c00290ce:	90                   	nop
c00290cf:	83 c4 0c             	add    esp,0xc
c00290d2:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00290d4 <APIC::~APIC()>:
c00290d4:	83 ec 0c             	sub    esp,0xc
c00290d7:	83 ec 0c             	sub    esp,0xc
c00290da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290de:	e8 cd ff ff ff       	call   c00290b0 <APIC::~APIC()>
c00290e3:	83 c4 10             	add    esp,0x10
c00290e6:	83 ec 08             	sub    esp,0x8
c00290e9:	68 58 21 00 00       	push   0x2158
c00290ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290f2:	e8 ce 95 fe ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c00290f7:	83 c4 10             	add    esp,0x10
c00290fa:	83 c4 0c             	add    esp,0xc
c00290fd:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c00290fe <PIC::~PIC()>:
c00290fe:	83 ec 0c             	sub    esp,0xc
c0029101:	ba c4 ca 02 c0       	mov    edx,0xc002cac4
c0029106:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002910a:	89 10                	mov    DWORD PTR [eax],edx
c002910c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029110:	83 ec 0c             	sub    esp,0xc
c0029113:	50                   	push   eax
c0029114:	e8 d1 b4 fe ff       	call   c00145ea <InterruptController::~InterruptController()>
c0029119:	83 c4 10             	add    esp,0x10
c002911c:	90                   	nop
c002911d:	83 c4 0c             	add    esp,0xc
c0029120:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029122 <PIC::~PIC()>:
c0029122:	83 ec 0c             	sub    esp,0xc
c0029125:	83 ec 0c             	sub    esp,0xc
c0029128:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002912c:	e8 cd ff ff ff       	call   c00290fe <PIC::~PIC()>
c0029131:	83 c4 10             	add    esp,0x10
c0029134:	83 ec 08             	sub    esp,0x8
c0029137:	68 58 21 00 00       	push   0x2158
c002913c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029140:	e8 80 95 fe ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0029145:	83 c4 10             	add    esp,0x10
c0029148:	83 c4 0c             	add    esp,0xc
c002914b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002914c <APICTimer::~APICTimer()>:
c002914c:	83 ec 0c             	sub    esp,0xc
c002914f:	ba 18 cb 02 c0       	mov    edx,0xc002cb18
c0029154:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029158:	89 10                	mov    DWORD PTR [eax],edx
c002915a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002915e:	83 ec 0c             	sub    esp,0xc
c0029161:	50                   	push   eax
c0029162:	e8 e1 d4 fe ff       	call   c0016648 <Timer::~Timer()>
c0029167:	83 c4 10             	add    esp,0x10
c002916a:	90                   	nop
c002916b:	83 c4 0c             	add    esp,0xc
c002916e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029170 <APICTimer::~APICTimer()>:
c0029170:	83 ec 0c             	sub    esp,0xc
c0029173:	83 ec 0c             	sub    esp,0xc
c0029176:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002917a:	e8 cd ff ff ff       	call   c002914c <APICTimer::~APICTimer()>
c002917f:	83 c4 10             	add    esp,0x10
c0029182:	83 ec 08             	sub    esp,0x8
c0029185:	68 60 01 00 00       	push   0x160
c002918a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002918e:	e8 32 95 fe ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0029193:	83 c4 10             	add    esp,0x10
c0029196:	83 c4 0c             	add    esp,0xc
c0029199:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002919a <PIT::~PIT()>:
c002919a:	83 ec 0c             	sub    esp,0xc
c002919d:	ba 68 cb 02 c0       	mov    edx,0xc002cb68
c00291a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291a6:	89 10                	mov    DWORD PTR [eax],edx
c00291a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291ac:	83 ec 0c             	sub    esp,0xc
c00291af:	50                   	push   eax
c00291b0:	e8 93 d4 fe ff       	call   c0016648 <Timer::~Timer()>
c00291b5:	83 c4 10             	add    esp,0x10
c00291b8:	90                   	nop
c00291b9:	83 c4 0c             	add    esp,0xc
c00291bc:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00291be <PIT::~PIT()>:
c00291be:	83 ec 0c             	sub    esp,0xc
c00291c1:	83 ec 0c             	sub    esp,0xc
c00291c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291c8:	e8 cd ff ff ff       	call   c002919a <PIT::~PIT()>
c00291cd:	83 c4 10             	add    esp,0x10
c00291d0:	83 ec 08             	sub    esp,0x8
c00291d3:	68 5c 01 00 00       	push   0x15c
c00291d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291dc:	e8 e4 94 fe ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c00291e1:	83 c4 10             	add    esp,0x10
c00291e4:	83 c4 0c             	add    esp,0xc
c00291e7:	c3                   	ret    
