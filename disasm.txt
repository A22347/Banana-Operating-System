
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 d8 fb 00 00       	call   c000fbf8 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 23 85 02 00       	call   c0028548 <_init>
c0000025:	c3                   	ret    
c0000026:	bb f2 90 02 c0       	mov    ebx,0xc00290f2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 00 91 02 c0    	cmp    ebx,0xc0029100
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 38 d8 02 c0       	mov    eax,0xc002d838
c0000049:	3d 38 d8 02 c0       	cmp    eax,0xc002d838
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 38 d8 02 c0       	push   0xc002d838
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 38 d8 02 c0       	mov    eax,0xc002d838
c0000075:	2d 38 d8 02 c0       	sub    eax,0xc002d838
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 38 d8 02 c0       	push   0xc002d838
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 68 de 02 c0 00 	cmp    BYTE PTR ds:0xc002de68,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 08 91 02 c0       	mov    ebx,0xc0029108
c00000bb:	81 eb 04 91 02 c0    	sub    ebx,0xc0029104
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 04 91 02 c0       	mov    esi,0xc0029104
c00000ca:	a1 6c de 02 c0       	mov    eax,ds:0xc002de6c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 6c de 02 c0       	mov    ds:0xc002de6c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 6c de 02 c0       	mov    eax,ds:0xc002de6c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 38 d8 02 c0       	push   0xc002d838
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 68 de 02 c0 01 	mov    BYTE PTR ds:0xc002de68,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 70 de 02 c0       	push   0xc002de70
c000012c:	68 38 d8 02 c0       	push   0xc002d838
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 cf d4 01 00       	call   c001d86a <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 ff 27 01 00       	call   c0012bb2 <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 ad d4 01 00       	call   c001d86a <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 00 d9 01 00       	call   c001dcdc <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 ad de 01 00       	call   c001e292 <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 b0 e2 02 c0 	lgdtd  ds:0xc002e2b0
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 dc 44 01 00       	call   c0014ab5 <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>
c000063d:	66 90                	xchg   ax,ax
c000063f:	90                   	nop

c0000640 <memcmp>:
c0000640:	56                   	push   esi
c0000641:	53                   	push   ebx
c0000642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000064a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000064e:	85 f6                	test   esi,esi
c0000650:	74 1d                	je     c000066f <memcmp+0x2f>
c0000652:	8a 08                	mov    cl,BYTE PTR [eax]
c0000654:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000657:	38 cb                	cmp    bl,cl
c0000659:	75 19                	jne    c0000674 <memcmp+0x34>
c000065b:	01 c6                	add    esi,eax
c000065d:	eb 0a                	jmp    c0000669 <memcmp+0x29>
c000065f:	90                   	nop
c0000660:	8a 08                	mov    cl,BYTE PTR [eax]
c0000662:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000665:	38 d9                	cmp    cl,bl
c0000667:	75 0b                	jne    c0000674 <memcmp+0x34>
c0000669:	40                   	inc    eax
c000066a:	42                   	inc    edx
c000066b:	39 f0                	cmp    eax,esi
c000066d:	75 f1                	jne    c0000660 <memcmp+0x20>
c000066f:	31 c0                	xor    eax,eax
c0000671:	5b                   	pop    ebx
c0000672:	5e                   	pop    esi
c0000673:	c3                   	ret    
c0000674:	0f b6 c1             	movzx  eax,cl
c0000677:	29 d8                	sub    eax,ebx
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    

c000067c <memmove>:
c000067c:	55                   	push   ebp
c000067d:	57                   	push   edi
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000684:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000068c:	39 dd                	cmp    ebp,ebx
c000068e:	0f 83 80 00 00 00    	jae    c0000714 <memmove+0x98>
c0000694:	85 d2                	test   edx,edx
c0000696:	74 74                	je     c000070c <memmove+0x90>
c0000698:	8d 4b 04             	lea    ecx,[ebx+0x4]
c000069b:	8d 75 04             	lea    esi,[ebp+0x4]
c000069e:	39 cd                	cmp    ebp,ecx
c00006a0:	0f 93 c1             	setae  cl
c00006a3:	39 f3                	cmp    ebx,esi
c00006a5:	0f 93 c0             	setae  al
c00006a8:	89 c6                	mov    esi,eax
c00006aa:	09 ce                	or     esi,ecx
c00006ac:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006af:	89 f0                	mov    eax,esi
c00006b1:	83 f9 0c             	cmp    ecx,0xc
c00006b4:	0f 97 c1             	seta   cl
c00006b7:	84 c8                	test   al,cl
c00006b9:	74 75                	je     c0000730 <memmove+0xb4>
c00006bb:	89 e9                	mov    ecx,ebp
c00006bd:	09 d9                	or     ecx,ebx
c00006bf:	83 e1 03             	and    ecx,0x3
c00006c2:	75 6c                	jne    c0000730 <memmove+0xb4>
c00006c4:	89 d7                	mov    edi,edx
c00006c6:	89 d9                	mov    ecx,ebx
c00006c8:	83 e7 fc             	and    edi,0xfffffffc
c00006cb:	89 ee                	mov    esi,ebp
c00006cd:	01 df                	add    edi,ebx
c00006cf:	90                   	nop
c00006d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006d2:	83 c6 04             	add    esi,0x4
c00006d5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006d8:	83 c1 04             	add    ecx,0x4
c00006db:	39 f9                	cmp    ecx,edi
c00006dd:	75 f1                	jne    c00006d0 <memmove+0x54>
c00006df:	89 d1                	mov    ecx,edx
c00006e1:	89 d7                	mov    edi,edx
c00006e3:	83 e1 fc             	and    ecx,0xfffffffc
c00006e6:	29 cf                	sub    edi,ecx
c00006e8:	01 cb                	add    ebx,ecx
c00006ea:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006ee:	39 ca                	cmp    edx,ecx
c00006f0:	74 1a                	je     c000070c <memmove+0x90>
c00006f2:	8a 03                	mov    al,BYTE PTR [ebx]
c00006f4:	83 ff 01             	cmp    edi,0x1
c00006f7:	88 06                	mov    BYTE PTR [esi],al
c00006f9:	74 11                	je     c000070c <memmove+0x90>
c00006fb:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00006fe:	83 ff 02             	cmp    edi,0x2
c0000701:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000704:	74 06                	je     c000070c <memmove+0x90>
c0000706:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000709:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000070c:	5b                   	pop    ebx
c000070d:	89 e8                	mov    eax,ebp
c000070f:	5e                   	pop    esi
c0000710:	5f                   	pop    edi
c0000711:	5d                   	pop    ebp
c0000712:	c3                   	ret    
c0000713:	90                   	nop
c0000714:	76 f6                	jbe    c000070c <memmove+0x90>
c0000716:	85 d2                	test   edx,edx
c0000718:	74 f2                	je     c000070c <memmove+0x90>
c000071a:	4b                   	dec    ebx
c000071b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000071e:	66 90                	xchg   ax,ax
c0000720:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000723:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000726:	4a                   	dec    edx
c0000727:	75 f7                	jne    c0000720 <memmove+0xa4>
c0000729:	5b                   	pop    ebx
c000072a:	89 e8                	mov    eax,ebp
c000072c:	5e                   	pop    esi
c000072d:	5f                   	pop    edi
c000072e:	5d                   	pop    ebp
c000072f:	c3                   	ret    
c0000730:	01 ea                	add    edx,ebp
c0000732:	89 e9                	mov    ecx,ebp
c0000734:	8a 03                	mov    al,BYTE PTR [ebx]
c0000736:	41                   	inc    ecx
c0000737:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000073a:	43                   	inc    ebx
c000073b:	39 d1                	cmp    ecx,edx
c000073d:	75 f5                	jne    c0000734 <memmove+0xb8>
c000073f:	eb cb                	jmp    c000070c <memmove+0x90>
c0000741:	8d 76 00             	lea    esi,[esi+0x0]

c0000744 <memcpy>:
c0000744:	57                   	push   edi
c0000745:	56                   	push   esi
c0000746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000074a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000074e:	a8 03                	test   al,0x3
c0000750:	74 12                	je     c0000764 <memcpy+0x20>
c0000752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000756:	89 c1                	mov    ecx,eax
c0000758:	fc                   	cld    
c0000759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000075b:	29 c7                	sub    edi,eax
c000075d:	5e                   	pop    esi
c000075e:	89 f8                	mov    eax,edi
c0000760:	5f                   	pop    edi
c0000761:	c3                   	ret    
c0000762:	66 90                	xchg   ax,ax
c0000764:	89 c1                	mov    ecx,eax
c0000766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076a:	c1 e9 02             	shr    ecx,0x2
c000076d:	fc                   	cld    
c000076e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000770:	29 c7                	sub    edi,eax
c0000772:	5e                   	pop    esi
c0000773:	89 f8                	mov    eax,edi
c0000775:	5f                   	pop    edi
c0000776:	c3                   	ret    
c0000777:	90                   	nop

c0000778 <memset>:
c0000778:	57                   	push   edi
c0000779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000077d:	85 c9                	test   ecx,ecx
c000077f:	74 0b                	je     c000078c <memset+0x14>
c0000781:	fc                   	cld    
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000078a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000790:	5f                   	pop    edi
c0000791:	c3                   	ret    
c0000792:	66 90                	xchg   ax,ax

c0000794 <strlen>:
c0000794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000798:	31 c0                	xor    eax,eax
c000079a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c000079d:	74 09                	je     c00007a8 <strlen+0x14>
c000079f:	90                   	nop
c00007a0:	40                   	inc    eax
c00007a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007a5:	75 f9                	jne    c00007a0 <strlen+0xc>
c00007a7:	c3                   	ret    
c00007a8:	c3                   	ret    
c00007a9:	8d 76 00             	lea    esi,[esi+0x0]

c00007ac <strpbrk>:
c00007ac:	57                   	push   edi
c00007ad:	56                   	push   esi
c00007ae:	53                   	push   ebx
c00007af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 21                	je     c00007de <strpbrk+0x32>
c00007bd:	8a 07                	mov    al,BYTE PTR [edi]
c00007bf:	84 c0                	test   al,al
c00007c1:	74 14                	je     c00007d7 <strpbrk+0x2b>
c00007c3:	38 d8                	cmp    al,bl
c00007c5:	74 19                	je     c00007e0 <strpbrk+0x34>
c00007c7:	89 fa                	mov    edx,edi
c00007c9:	eb 05                	jmp    c00007d0 <strpbrk+0x24>
c00007cb:	90                   	nop
c00007cc:	38 d9                	cmp    cl,bl
c00007ce:	74 10                	je     c00007e0 <strpbrk+0x34>
c00007d0:	42                   	inc    edx
c00007d1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007d3:	84 c9                	test   cl,cl
c00007d5:	75 f5                	jne    c00007cc <strpbrk+0x20>
c00007d7:	46                   	inc    esi
c00007d8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007da:	84 db                	test   bl,bl
c00007dc:	75 e1                	jne    c00007bf <strpbrk+0x13>
c00007de:	31 f6                	xor    esi,esi
c00007e0:	89 f0                	mov    eax,esi
c00007e2:	5b                   	pop    ebx
c00007e3:	5e                   	pop    esi
c00007e4:	5f                   	pop    edi
c00007e5:	c3                   	ret    
c00007e6:	66 90                	xchg   ax,ax

c00007e8 <strtok>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007f2:	85 db                	test   ebx,ebx
c00007f4:	75 07                	jne    c00007fd <strtok+0x15>
c00007f6:	eb 2c                	jmp    c0000824 <strtok+0x3c>
c00007f8:	43                   	inc    ebx
c00007f9:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	e8 a8 ff ff ff       	call   c00007ac <strpbrk>
c0000804:	5a                   	pop    edx
c0000805:	a3 88 de 02 c0       	mov    ds:0xc002de88,eax
c000080a:	59                   	pop    ecx
c000080b:	39 d8                	cmp    eax,ebx
c000080d:	74 e9                	je     c00007f8 <strtok+0x10>
c000080f:	85 c0                	test   eax,eax
c0000811:	74 1b                	je     c000082e <strtok+0x46>
c0000813:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000816:	8d 50 01             	lea    edx,[eax+0x1]
c0000819:	89 d8                	mov    eax,ebx
c000081b:	89 15 88 de 02 c0    	mov    DWORD PTR ds:0xc002de88,edx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    
c0000824:	8b 1d 88 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002de88
c000082a:	85 db                	test   ebx,ebx
c000082c:	75 cf                	jne    c00007fd <strtok+0x15>
c000082e:	31 c0                	xor    eax,eax
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	90                   	nop

c0000834 <strcpy>:
c0000834:	53                   	push   ebx
c0000835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000083d:	89 c3                	mov    ebx,eax
c000083f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000841:	84 d2                	test   dl,dl
c0000843:	74 0d                	je     c0000852 <strcpy+0x1e>
c0000845:	8d 76 00             	lea    esi,[esi+0x0]
c0000848:	88 13                	mov    BYTE PTR [ebx],dl
c000084a:	41                   	inc    ecx
c000084b:	43                   	inc    ebx
c000084c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000084e:	84 d2                	test   dl,dl
c0000850:	75 f6                	jne    c0000848 <strcpy+0x14>
c0000852:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000855:	5b                   	pop    ebx
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strncpy>:
c0000858:	55                   	push   ebp
c0000859:	57                   	push   edi
c000085a:	56                   	push   esi
c000085b:	53                   	push   ebx
c000085c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000860:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000868:	85 c0                	test   eax,eax
c000086a:	74 39                	je     c00008a5 <strncpy+0x4d>
c000086c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000086e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000871:	8d 55 01             	lea    edx,[ebp+0x1]
c0000874:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 31                	je     c00008ac <strncpy+0x54>
c000087b:	85 c9                	test   ecx,ecx
c000087d:	74 26                	je     c00008a5 <strncpy+0x4d>
c000087f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000882:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000885:	8d 55 02             	lea    edx,[ebp+0x2]
c0000888:	8d 46 02             	lea    eax,[esi+0x2]
c000088b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000088e:	84 db                	test   bl,bl
c0000890:	75 0f                	jne    c00008a1 <strncpy+0x49>
c0000892:	eb 18                	jmp    c00008ac <strncpy+0x54>
c0000894:	40                   	inc    eax
c0000895:	42                   	inc    edx
c0000896:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000899:	49                   	dec    ecx
c000089a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000089d:	84 db                	test   bl,bl
c000089f:	74 0b                	je     c00008ac <strncpy+0x54>
c00008a1:	85 c9                	test   ecx,ecx
c00008a3:	75 ef                	jne    c0000894 <strncpy+0x3c>
c00008a5:	5b                   	pop    ebx
c00008a6:	89 e8                	mov    eax,ebp
c00008a8:	5e                   	pop    esi
c00008a9:	5f                   	pop    edi
c00008aa:	5d                   	pop    ebp
c00008ab:	c3                   	ret    
c00008ac:	85 c9                	test   ecx,ecx
c00008ae:	74 f5                	je     c00008a5 <strncpy+0x4d>
c00008b0:	fc                   	cld    
c00008b1:	31 c0                	xor    eax,eax
c00008b3:	89 d7                	mov    edi,edx
c00008b5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008b7:	89 e8                	mov    eax,ebp
c00008b9:	5b                   	pop    ebx
c00008ba:	5e                   	pop    esi
c00008bb:	5f                   	pop    edi
c00008bc:	5d                   	pop    ebp
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strcmp>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ca:	8a 16                	mov    dl,BYTE PTR [esi]
c00008cc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008cf:	38 d1                	cmp    cl,dl
c00008d1:	75 1d                	jne    c00008f0 <strcmp+0x30>
c00008d3:	84 c9                	test   cl,cl
c00008d5:	74 21                	je     c00008f8 <strcmp+0x38>
c00008d7:	b8 01 00 00 00       	mov    eax,0x1
c00008dc:	eb 07                	jmp    c00008e5 <strcmp+0x25>
c00008de:	66 90                	xchg   ax,ax
c00008e0:	40                   	inc    eax
c00008e1:	84 d2                	test   dl,dl
c00008e3:	74 13                	je     c00008f8 <strcmp+0x38>
c00008e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008e8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 f0                	je     c00008e0 <strcmp+0x20>
c00008f0:	0f b6 c2             	movzx  eax,dl
c00008f3:	5b                   	pop    ebx
c00008f4:	29 c8                	sub    eax,ecx
c00008f6:	5e                   	pop    esi
c00008f7:	c3                   	ret    
c00008f8:	31 c0                	xor    eax,eax
c00008fa:	5b                   	pop    ebx
c00008fb:	5e                   	pop    esi
c00008fc:	c3                   	ret    
c00008fd:	8d 76 00             	lea    esi,[esi+0x0]

c0000900 <strchr>:
c0000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000904:	8a 10                	mov    dl,BYTE PTR [eax]
c0000906:	84 d2                	test   dl,dl
c0000908:	74 15                	je     c000091f <strchr+0x1f>
c000090a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000090e:	38 ca                	cmp    dl,cl
c0000910:	75 06                	jne    c0000918 <strchr+0x18>
c0000912:	eb 0e                	jmp    c0000922 <strchr+0x22>
c0000914:	38 ca                	cmp    dl,cl
c0000916:	74 09                	je     c0000921 <strchr+0x21>
c0000918:	40                   	inc    eax
c0000919:	8a 10                	mov    dl,BYTE PTR [eax]
c000091b:	84 d2                	test   dl,dl
c000091d:	75 f5                	jne    c0000914 <strchr+0x14>
c000091f:	31 c0                	xor    eax,eax
c0000921:	c3                   	ret    
c0000922:	c3                   	ret    
c0000923:	90                   	nop

c0000924 <strncmp>:
c0000924:	57                   	push   edi
c0000925:	56                   	push   esi
c0000926:	53                   	push   ebx
c0000927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000092b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000092f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000933:	85 ff                	test   edi,edi
c0000935:	74 28                	je     c000095f <strncmp+0x3b>
c0000937:	8a 16                	mov    dl,BYTE PTR [esi]
c0000939:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000093c:	38 d1                	cmp    cl,dl
c000093e:	75 28                	jne    c0000968 <strncmp+0x44>
c0000940:	8d 46 01             	lea    eax,[esi+0x1]
c0000943:	84 c9                	test   cl,cl
c0000945:	74 18                	je     c000095f <strncmp+0x3b>
c0000947:	01 fe                	add    esi,edi
c0000949:	eb 0f                	jmp    c000095a <strncmp+0x36>
c000094b:	90                   	nop
c000094c:	8a 10                	mov    dl,BYTE PTR [eax]
c000094e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000951:	38 ca                	cmp    dl,cl
c0000953:	75 13                	jne    c0000968 <strncmp+0x44>
c0000955:	40                   	inc    eax
c0000956:	84 d2                	test   dl,dl
c0000958:	74 05                	je     c000095f <strncmp+0x3b>
c000095a:	43                   	inc    ebx
c000095b:	39 c6                	cmp    esi,eax
c000095d:	75 ed                	jne    c000094c <strncmp+0x28>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	5b                   	pop    ebx
c0000969:	0f b6 c2             	movzx  eax,dl
c000096c:	5e                   	pop    esi
c000096d:	29 c8                	sub    eax,ecx
c000096f:	5f                   	pop    edi
c0000970:	c3                   	ret    
c0000971:	8d 76 00             	lea    esi,[esi+0x0]

c0000974 <strcat>:
c0000974:	56                   	push   esi
c0000975:	53                   	push   ebx
c0000976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000097a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000097e:	89 c3                	mov    ebx,eax
c0000980:	eb 04                	jmp    c0000986 <strcat+0x12>
c0000982:	66 90                	xchg   ax,ax
c0000984:	89 d3                	mov    ebx,edx
c0000986:	8d 53 01             	lea    edx,[ebx+0x1]
c0000989:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000098d:	75 f5                	jne    c0000984 <strcat+0x10>
c000098f:	31 d2                	xor    edx,edx
c0000991:	8d 76 00             	lea    esi,[esi+0x0]
c0000994:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000099a:	42                   	inc    edx
c000099b:	84 c9                	test   cl,cl
c000099d:	75 f5                	jne    c0000994 <strcat+0x20>
c000099f:	5b                   	pop    ebx
c00009a0:	5e                   	pop    esi
c00009a1:	c3                   	ret    
c00009a2:	66 90                	xchg   ax,ax

c00009a4 <strncat>:
c00009a4:	56                   	push   esi
c00009a5:	53                   	push   ebx
c00009a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009b2:	85 f6                	test   esi,esi
c00009b4:	74 1e                	je     c00009d4 <strncat+0x30>
c00009b6:	89 c2                	mov    edx,eax
c00009b8:	42                   	inc    edx
c00009b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009bd:	75 f9                	jne    c00009b8 <strncat+0x14>
c00009bf:	01 ce                	add    esi,ecx
c00009c1:	eb 06                	jmp    c00009c9 <strncat+0x25>
c00009c3:	90                   	nop
c00009c4:	39 f1                	cmp    ecx,esi
c00009c6:	74 10                	je     c00009d8 <strncat+0x34>
c00009c8:	42                   	inc    edx
c00009c9:	41                   	inc    ecx
c00009ca:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009cd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d0:	84 db                	test   bl,bl
c00009d2:	75 f0                	jne    c00009c4 <strncat+0x20>
c00009d4:	5b                   	pop    ebx
c00009d5:	5e                   	pop    esi
c00009d6:	c3                   	ret    
c00009d7:	90                   	nop
c00009d8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009db:	5b                   	pop    ebx
c00009dc:	5e                   	pop    esi
c00009dd:	c3                   	ret    
c00009de:	66 90                	xchg   ax,ax

c00009e0 <strstr>:
c00009e0:	57                   	push   edi
c00009e1:	56                   	push   esi
c00009e2:	53                   	push   ebx
c00009e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009eb:	57                   	push   edi
c00009ec:	e8 a3 fd ff ff       	call   c0000794 <strlen>
c00009f1:	59                   	pop    ecx
c00009f2:	85 c0                	test   eax,eax
c00009f4:	74 2a                	je     c0000a20 <strstr+0x40>
c00009f6:	89 c6                	mov    esi,eax
c00009f8:	eb 12                	jmp    c0000a0c <strstr+0x2c>
c00009fa:	66 90                	xchg   ax,ax
c00009fc:	56                   	push   esi
c00009fd:	57                   	push   edi
c00009fe:	53                   	push   ebx
c00009ff:	e8 3c fc ff ff       	call   c0000640 <memcmp>
c0000a04:	83 c4 0c             	add    esp,0xc
c0000a07:	85 c0                	test   eax,eax
c0000a09:	74 15                	je     c0000a20 <strstr+0x40>
c0000a0b:	43                   	inc    ebx
c0000a0c:	53                   	push   ebx
c0000a0d:	e8 82 fd ff ff       	call   c0000794 <strlen>
c0000a12:	5a                   	pop    edx
c0000a13:	39 f0                	cmp    eax,esi
c0000a15:	73 e5                	jae    c00009fc <strstr+0x1c>
c0000a17:	5b                   	pop    ebx
c0000a18:	31 c0                	xor    eax,eax
c0000a1a:	5e                   	pop    esi
c0000a1b:	5f                   	pop    edi
c0000a1c:	c3                   	ret    
c0000a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a20:	89 d8                	mov    eax,ebx
c0000a22:	5b                   	pop    ebx
c0000a23:	5e                   	pop    esi
c0000a24:	5f                   	pop    edi
c0000a25:	c3                   	ret    
c0000a26:	66 90                	xchg   ax,ax

c0000a28 <toupper>:
c0000a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a2c:	0f b6 d0             	movzx  edx,al
c0000a2f:	f6 82 20 91 02 c0 02 	test   BYTE PTR [edx-0x3ffd6ee0],0x2
c0000a36:	74 03                	je     c0000a3b <toupper+0x13>
c0000a38:	83 e8 20             	sub    eax,0x20
c0000a3b:	c3                   	ret    

c0000a3c <tolower>:
c0000a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a40:	0f b6 d0             	movzx  edx,al
c0000a43:	f6 82 20 91 02 c0 01 	test   BYTE PTR [edx-0x3ffd6ee0],0x1
c0000a4a:	74 03                	je     c0000a4f <tolower+0x13>
c0000a4c:	83 c0 20             	add    eax,0x20
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	57                   	push   edi
c0000a52:	56                   	push   esi
c0000a53:	53                   	push   ebx
c0000a54:	83 ec 08             	sub    esp,0x8
c0000a57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a5f:	90                   	nop
c0000a60:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a63:	f6 82 20 91 02 c0 08 	test   BYTE PTR [edx-0x3ffd6ee0],0x8
c0000a6a:	75 05                	jne    c0000a71 <simple_strtoul+0x21>
c0000a6c:	80 fa 09             	cmp    dl,0x9
c0000a6f:	75 03                	jne    c0000a74 <simple_strtoul+0x24>
c0000a71:	41                   	inc    ecx
c0000a72:	eb ec                	jmp    c0000a60 <simple_strtoul+0x10>
c0000a74:	80 fa 2d             	cmp    dl,0x2d
c0000a77:	0f 84 1b 01 00 00    	je     c0000b98 <simple_strtoul+0x148>
c0000a7d:	80 fa 2b             	cmp    dl,0x2b
c0000a80:	0f 84 c2 00 00 00    	je     c0000b48 <simple_strtoul+0xf8>
c0000a86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a8e:	85 f6                	test   esi,esi
c0000a90:	0f 85 c3 00 00 00    	jne    c0000b59 <simple_strtoul+0x109>
c0000a96:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a98:	80 fa 30             	cmp    dl,0x30
c0000a9b:	0f 84 47 01 00 00    	je     c0000be8 <simple_strtoul+0x198>
c0000aa1:	be 0a 00 00 00       	mov    esi,0xa
c0000aa6:	84 d2                	test   dl,dl
c0000aa8:	0f 84 6f 01 00 00    	je     c0000c1d <simple_strtoul+0x1cd>
c0000aae:	31 ed                	xor    ebp,ebp
c0000ab0:	31 ff                	xor    edi,edi
c0000ab2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ab9:	eb 2b                	jmp    c0000ae6 <simple_strtoul+0x96>
c0000abb:	90                   	nop
c0000abc:	83 eb 30             	sub    ebx,0x30
c0000abf:	39 f3                	cmp    ebx,esi
c0000ac1:	73 4d                	jae    c0000b10 <simple_strtoul+0xc0>
c0000ac3:	31 d2                	xor    edx,edx
c0000ac5:	89 d8                	mov    eax,ebx
c0000ac7:	f7 d0                	not    eax
c0000ac9:	f7 f6                	div    esi
c0000acb:	39 f8                	cmp    eax,edi
c0000acd:	0f 82 b1 00 00 00    	jb     c0000b84 <simple_strtoul+0x134>
c0000ad3:	0f af fe             	imul   edi,esi
c0000ad6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000add:	01 df                	add    edi,ebx
c0000adf:	41                   	inc    ecx
c0000ae0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ae2:	84 d2                	test   dl,dl
c0000ae4:	74 2a                	je     c0000b10 <simple_strtoul+0xc0>
c0000ae6:	0f b6 da             	movzx  ebx,dl
c0000ae9:	f6 83 20 91 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6ee0],0x4
c0000af0:	75 ca                	jne    c0000abc <simple_strtoul+0x6c>
c0000af2:	0f be d2             	movsx  edx,dl
c0000af5:	52                   	push   edx
c0000af6:	e8 2d ff ff ff       	call   c0000a28 <toupper>
c0000afb:	5b                   	pop    ebx
c0000afc:	0f b6 d0             	movzx  edx,al
c0000aff:	f6 82 20 91 02 c0 01 	test   BYTE PTR [edx-0x3ffd6ee0],0x1
c0000b06:	74 08                	je     c0000b10 <simple_strtoul+0xc0>
c0000b08:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b0b:	39 f3                	cmp    ebx,esi
c0000b0d:	72 b4                	jb     c0000ac3 <simple_strtoul+0x73>
c0000b0f:	90                   	nop
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	85 c0                	test   eax,eax
c0000b16:	74 14                	je     c0000b2c <simple_strtoul+0xdc>
c0000b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b1b:	09 f8                	or     eax,edi
c0000b1d:	75 71                	jne    c0000b90 <simple_strtoul+0x140>
c0000b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b27:	31 ff                	xor    edi,edi
c0000b29:	89 30                	mov    DWORD PTR [eax],esi
c0000b2b:	90                   	nop
c0000b2c:	4d                   	dec    ebp
c0000b2d:	75 05                	jne    c0000b34 <simple_strtoul+0xe4>
c0000b2f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b34:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b39:	75 02                	jne    c0000b3d <simple_strtoul+0xed>
c0000b3b:	f7 df                	neg    edi
c0000b3d:	83 c4 08             	add    esp,0x8
c0000b40:	89 f8                	mov    eax,edi
c0000b42:	5b                   	pop    ebx
c0000b43:	5e                   	pop    esi
c0000b44:	5f                   	pop    edi
c0000b45:	5d                   	pop    ebp
c0000b46:	c3                   	ret    
c0000b47:	90                   	nop
c0000b48:	41                   	inc    ecx
c0000b49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b51:	85 f6                	test   esi,esi
c0000b53:	0f 84 3d ff ff ff    	je     c0000a96 <simple_strtoul+0x46>
c0000b59:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b5c:	83 f8 22             	cmp    eax,0x22
c0000b5f:	77 6a                	ja     c0000bcb <simple_strtoul+0x17b>
c0000b61:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b63:	83 fe 08             	cmp    esi,0x8
c0000b66:	0f 84 a2 00 00 00    	je     c0000c0e <simple_strtoul+0x1be>
c0000b6c:	83 fe 10             	cmp    esi,0x10
c0000b6f:	0f 85 31 ff ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000b75:	80 fa 30             	cmp    dl,0x30
c0000b78:	74 2c                	je     c0000ba6 <simple_strtoul+0x156>
c0000b7a:	be 10 00 00 00       	mov    esi,0x10
c0000b7f:	e9 22 ff ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000b84:	bd 01 00 00 00       	mov    ebp,0x1
c0000b89:	31 ff                	xor    edi,edi
c0000b8b:	e9 4f ff ff ff       	jmp    c0000adf <simple_strtoul+0x8f>
c0000b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b94:	89 08                	mov    DWORD PTR [eax],ecx
c0000b96:	eb 94                	jmp    c0000b2c <simple_strtoul+0xdc>
c0000b98:	41                   	inc    ecx
c0000b99:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba1:	e9 e8 fe ff ff       	jmp    c0000a8e <simple_strtoul+0x3e>
c0000ba6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000baa:	88 04 24             	mov    BYTE PTR [esp],al
c0000bad:	50                   	push   eax
c0000bae:	e8 89 fe ff ff       	call   c0000a3c <tolower>
c0000bb3:	5e                   	pop    esi
c0000bb4:	83 f8 78             	cmp    eax,0x78
c0000bb7:	0f 84 84 00 00 00    	je     c0000c41 <simple_strtoul+0x1f1>
c0000bbd:	41                   	inc    ecx
c0000bbe:	be 10 00 00 00       	mov    esi,0x10
c0000bc3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bc6:	e9 db fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000bcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bcf:	85 ff                	test   edi,edi
c0000bd1:	74 5c                	je     c0000c2f <simple_strtoul+0x1df>
c0000bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bd7:	85 c9                	test   ecx,ecx
c0000bd9:	75 4e                	jne    c0000c29 <simple_strtoul+0x1d9>
c0000bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be1:	31 ff                	xor    edi,edi
c0000be3:	e9 4c ff ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000be8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bec:	88 04 24             	mov    BYTE PTR [esp],al
c0000bef:	50                   	push   eax
c0000bf0:	e8 47 fe ff ff       	call   c0000a3c <tolower>
c0000bf5:	5d                   	pop    ebp
c0000bf6:	83 f8 78             	cmp    eax,0x78
c0000bf9:	74 3b                	je     c0000c36 <simple_strtoul+0x1e6>
c0000bfb:	41                   	inc    ecx
c0000bfc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bff:	80 fa 30             	cmp    dl,0x30
c0000c02:	74 13                	je     c0000c17 <simple_strtoul+0x1c7>
c0000c04:	be 08 00 00 00       	mov    esi,0x8
c0000c09:	e9 98 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000c0e:	80 fa 30             	cmp    dl,0x30
c0000c11:	0f 85 8f fe ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000c17:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c1a:	41                   	inc    ecx
c0000c1b:	eb e7                	jmp    c0000c04 <simple_strtoul+0x1b4>
c0000c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c21:	85 d2                	test   edx,edx
c0000c23:	74 0a                	je     c0000c2f <simple_strtoul+0x1df>
c0000c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c2d:	89 30                	mov    DWORD PTR [eax],esi
c0000c2f:	31 ff                	xor    edi,edi
c0000c31:	e9 fe fe ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000c36:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c39:	83 c1 02             	add    ecx,0x2
c0000c3c:	e9 34 ff ff ff       	jmp    c0000b75 <simple_strtoul+0x125>
c0000c41:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c44:	be 10 00 00 00       	mov    esi,0x10
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 55 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>

c0000c51 <largebin_index>:
c0000c51:	89 c2                	mov    edx,eax
c0000c53:	c1 ea 08             	shr    edx,0x8
c0000c56:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c5c:	77 10                	ja     c0000c6e <largebin_index+0x1d>
c0000c5e:	0f bd d2             	bsr    edx,edx
c0000c61:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c64:	d3 e8                	shr    eax,cl
c0000c66:	83 e0 03             	and    eax,0x3
c0000c69:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c6d:	c3                   	ret    
c0000c6e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c73:	c3                   	ret    

c0000c74 <malloc_init_state>:
c0000c74:	53                   	push   ebx
c0000c75:	8d 50 34             	lea    edx,[eax+0x34]
c0000c78:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c7e:	89 d1                	mov    ecx,edx
c0000c80:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c83:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c86:	83 c2 08             	add    edx,0x8
c0000c89:	39 da                	cmp    edx,ebx
c0000c8b:	75 f3                	jne    c0000c80 <malloc_init_state+0xc>
c0000c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c8f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c99:	83 e2 03             	and    edx,0x3
c0000c9c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ca6:	83 ca 48             	or     edx,0x48
c0000ca9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cb3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cbd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cc4:	89 10                	mov    DWORD PTR [eax],edx
c0000cc6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cc9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cd3:	5b                   	pop    ebx
c0000cd4:	c3                   	ret    

c0000cd5 <malloc_consolidate>:
c0000cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd7:	85 d2                	test   edx,edx
c0000cd9:	0f 84 d8 00 00 00    	je     c0000db7 <malloc_consolidate+0xe2>
c0000cdf:	55                   	push   ebp
c0000ce0:	83 e2 fd             	and    edx,0xfffffffd
c0000ce3:	57                   	push   edi
c0000ce4:	89 c5                	mov    ebp,eax
c0000ce6:	56                   	push   esi
c0000ce7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cea:	53                   	push   ebx
c0000ceb:	83 ec 10             	sub    esp,0x10
c0000cee:	89 10                	mov    DWORD PTR [eax],edx
c0000cf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cf4:	c1 ea 03             	shr    edx,0x3
c0000cf7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cfb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d02:	85 d2                	test   edx,edx
c0000d04:	0f 84 98 00 00 00    	je     c0000da2 <malloc_consolidate+0xcd>
c0000d0a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d11:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d14:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d1b:	89 f9                	mov    ecx,edi
c0000d1d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d20:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d23:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d26:	83 e3 fc             	and    ebx,0xfffffffc
c0000d29:	83 e7 01             	and    edi,0x1
c0000d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d2f:	75 14                	jne    c0000d45 <malloc_consolidate+0x70>
c0000d31:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d33:	29 fa                	sub    edx,edi
c0000d35:	01 f9                	add    ecx,edi
c0000d37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3a:	89 fb                	mov    ebx,edi
c0000d3c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d3f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d42:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d45:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d48:	74 40                	je     c0000d8a <malloc_consolidate+0xb5>
c0000d4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d4d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d50:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d54:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d57:	83 e7 01             	and    edi,0x1
c0000d5a:	75 0e                	jne    c0000d6a <malloc_consolidate+0x95>
c0000d5c:	01 d9                	add    ecx,ebx
c0000d5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d61:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d64:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d6a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d6d:	89 ce                	mov    esi,ecx
c0000d6f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d72:	83 ce 01             	or     esi,0x1
c0000d75:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d78:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d7b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d7e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d82:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d85:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d88:	eb 0c                	jmp    c0000d96 <malloc_consolidate+0xc1>
c0000d8a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d8d:	83 c9 01             	or     ecx,0x1
c0000d90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d93:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d9a:	85 d2                	test   edx,edx
c0000d9c:	0f 85 6f ff ff ff    	jne    c0000d11 <malloc_consolidate+0x3c>
c0000da2:	83 c5 04             	add    ebp,0x4
c0000da5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000da9:	0f 85 50 ff ff ff    	jne    c0000cff <malloc_consolidate+0x2a>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	5b                   	pop    ebx
c0000db3:	5e                   	pop    esi
c0000db4:	5f                   	pop    edi
c0000db5:	5d                   	pop    ebp
c0000db6:	c3                   	ret    
c0000db7:	e9 b8 fe ff ff       	jmp    c0000c74 <malloc_init_state>

c0000dbc <dlfree>:
c0000dbc:	57                   	push   edi
c0000dbd:	56                   	push   esi
c0000dbe:	53                   	push   ebx
c0000dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dc3:	85 db                	test   ebx,ebx
c0000dc5:	0f 84 e2 00 00 00    	je     c0000ead <dlfree+0xf1>
c0000dcb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dce:	8b 0d a0 de 02 c0    	mov    ecx,DWORD PTR ds:0xc002dea0
c0000dd4:	89 f0                	mov    eax,esi
c0000dd6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dd9:	83 e0 fc             	and    eax,0xfffffffc
c0000ddc:	39 c1                	cmp    ecx,eax
c0000dde:	72 24                	jb     c0000e04 <dlfree+0x48>
c0000de0:	83 c9 03             	or     ecx,0x3
c0000de3:	c1 e8 03             	shr    eax,0x3
c0000de6:	89 0d a0 de 02 c0    	mov    DWORD PTR ds:0xc002dea0,ecx
c0000dec:	83 e8 02             	sub    eax,0x2
c0000def:	8b 0c 85 a4 de 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd215c]
c0000df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000df8:	89 14 85 a4 de 02 c0 	mov    DWORD PTR [eax*4-0x3ffd215c],edx
c0000dff:	e9 a9 00 00 00       	jmp    c0000ead <dlfree+0xf1>
c0000e04:	83 e6 02             	and    esi,0x2
c0000e07:	0f 85 a0 00 00 00    	jne    c0000ead <dlfree+0xf1>
c0000e0d:	83 c9 01             	or     ecx,0x1
c0000e10:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e13:	89 0d a0 de 02 c0    	mov    DWORD PTR ds:0xc002dea0,ecx
c0000e19:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e1c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e1f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e23:	75 13                	jne    c0000e38 <dlfree+0x7c>
c0000e25:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e28:	29 da                	sub    edx,ebx
c0000e2a:	01 d8                	add    eax,ebx
c0000e2c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e2f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e32:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e35:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e38:	39 35 cc de 02 c0    	cmp    DWORD PTR ds:0xc002decc,esi
c0000e3e:	74 40                	je     c0000e80 <dlfree+0xc4>
c0000e40:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e44:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e47:	80 e3 01             	and    bl,0x1
c0000e4a:	75 0e                	jne    c0000e5a <dlfree+0x9e>
c0000e4c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e4f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e52:	01 c8                	add    eax,ecx
c0000e54:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e57:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5a:	8b 0d dc de 02 c0    	mov    ecx,DWORD PTR ds:0xc002dedc
c0000e60:	c7 42 0c d4 de 02 c0 	mov    DWORD PTR [edx+0xc],0xc002ded4
c0000e67:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e6a:	89 15 dc de 02 c0    	mov    DWORD PTR ds:0xc002dedc,edx
c0000e70:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e73:	89 c1                	mov    ecx,eax
c0000e75:	83 c9 01             	or     ecx,0x1
c0000e78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e7e:	eb 10                	jmp    c0000e90 <dlfree+0xd4>
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	89 c1                	mov    ecx,eax
c0000e84:	83 c9 01             	or     ecx,0x1
c0000e87:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8a:	89 15 cc de 02 c0    	mov    DWORD PTR ds:0xc002decc,edx
c0000e90:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e95:	76 16                	jbe    c0000ead <dlfree+0xf1>
c0000e97:	f6 05 a0 de 02 c0 02 	test   BYTE PTR ds:0xc002dea0,0x2
c0000e9e:	74 0d                	je     c0000ead <dlfree+0xf1>
c0000ea0:	5b                   	pop    ebx
c0000ea1:	b8 a0 de 02 c0       	mov    eax,0xc002dea0
c0000ea6:	5e                   	pop    esi
c0000ea7:	5f                   	pop    edi
c0000ea8:	e9 28 fe ff ff       	jmp    c0000cd5 <malloc_consolidate>
c0000ead:	5b                   	pop    ebx
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	c3                   	ret    

c0000eb1 <sYSMALLOc>:
c0000eb1:	55                   	push   ebp
c0000eb2:	57                   	push   edi
c0000eb3:	56                   	push   esi
c0000eb4:	53                   	push   ebx
c0000eb5:	89 d3                	mov    ebx,edx
c0000eb7:	83 ec 2c             	sub    esp,0x2c
c0000eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ebe:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ec4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ec7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ece:	74 1f                	je     c0000eef <sYSMALLOc+0x3e>
c0000ed0:	89 d8                	mov    eax,ebx
c0000ed2:	e8 fe fd ff ff       	call   c0000cd5 <malloc_consolidate>
c0000ed7:	83 ec 0c             	sub    esp,0xc
c0000eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ede:	83 e8 07             	sub    eax,0x7
c0000ee1:	50                   	push   eax
c0000ee2:	e8 30 02 00 00       	call   c0001117 <dlmalloc>
c0000ee7:	83 c4 10             	add    esp,0x10
c0000eea:	e9 20 02 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000eef:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ef2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000efb:	83 e0 fc             	and    eax,0xfffffffc
c0000efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f06:	83 c0 10             	add    eax,0x10
c0000f09:	01 c1                	add    ecx,eax
c0000f0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f0f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f16:	74 04                	je     c0000f1c <sYSMALLOc+0x6b>
c0000f18:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f1c:	f7 da                	neg    edx
c0000f1e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f26:	21 d1                	and    ecx,edx
c0000f28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f2c:	7f 07                	jg     c0000f35 <sYSMALLOc+0x84>
c0000f2e:	31 c0                	xor    eax,eax
c0000f30:	e9 da 01 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000f35:	83 ec 0c             	sub    esp,0xc
c0000f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f3c:	e8 56 e7 00 00       	call   c000f697 <sbrk>
c0000f41:	83 c4 10             	add    esp,0x10
c0000f44:	89 c6                	mov    esi,eax
c0000f46:	83 f8 ff             	cmp    eax,0xffffffff
c0000f49:	74 e3                	je     c0000f2e <sYSMALLOc+0x7d>
c0000f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f53:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f56:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f5c:	39 f1                	cmp    ecx,esi
c0000f5e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f64:	75 13                	jne    c0000f79 <sYSMALLOc+0xc8>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f6e:	83 c8 01             	or     eax,0x1
c0000f71:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f74:	e9 3e 01 00 00       	jmp    c00010b7 <sYSMALLOc+0x206>
c0000f79:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f7f:	88 d0                	mov    al,dl
c0000f81:	83 e0 01             	and    eax,0x1
c0000f84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f8d:	0f 95 c0             	setne  al
c0000f90:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f94:	39 f1                	cmp    ecx,esi
c0000f96:	76 12                	jbe    c0000faa <sYSMALLOc+0xf9>
c0000f98:	84 c0                	test   al,al
c0000f9a:	74 0e                	je     c0000faa <sYSMALLOc+0xf9>
c0000f9c:	83 e2 fe             	and    edx,0xfffffffe
c0000f9f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fa5:	e9 83 00 00 00       	jmp    c000102d <sYSMALLOc+0x17c>
c0000faa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000faf:	74 7c                	je     c000102d <sYSMALLOc+0x17c>
c0000fb1:	84 c0                	test   al,al
c0000fb3:	74 0c                	je     c0000fc1 <sYSMALLOc+0x110>
c0000fb5:	89 f0                	mov    eax,esi
c0000fb7:	29 c8                	sub    eax,ecx
c0000fb9:	01 e8                	add    eax,ebp
c0000fbb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc1:	89 f2                	mov    edx,esi
c0000fc3:	83 e2 07             	and    edx,0x7
c0000fc6:	74 0c                	je     c0000fd4 <sYSMALLOc+0x123>
c0000fc8:	b8 08 00 00 00       	mov    eax,0x8
c0000fcd:	29 d0                	sub    eax,edx
c0000fcf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fd2:	eb 04                	jmp    c0000fd8 <sYSMALLOc+0x127>
c0000fd4:	89 f5                	mov    ebp,esi
c0000fd6:	31 c0                	xor    eax,eax
c0000fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe4:	01 c1                	add    ecx,eax
c0000fe6:	83 ec 0c             	sub    esp,0xc
c0000fe9:	01 f1                	add    ecx,esi
c0000feb:	01 ca                	add    edx,ecx
c0000fed:	29 c8                	sub    eax,ecx
c0000fef:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ff3:	01 c2                	add    edx,eax
c0000ff5:	52                   	push   edx
c0000ff6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ffa:	e8 98 e6 00 00       	call   c000f697 <sbrk>
c0000fff:	83 c4 10             	add    esp,0x10
c0001002:	83 f8 ff             	cmp    eax,0xffffffff
c0001005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001009:	75 0f                	jne    c000101a <sYSMALLOc+0x169>
c000100b:	83 ec 0c             	sub    esp,0xc
c000100e:	6a 00                	push   0x0
c0001010:	e8 82 e6 00 00       	call   c000f697 <sbrk>
c0001015:	83 c4 10             	add    esp,0x10
c0001018:	eb 30                	jmp    c000104a <sYSMALLOc+0x199>
c000101a:	39 c6                	cmp    esi,eax
c000101c:	76 33                	jbe    c0001051 <sYSMALLOc+0x1a0>
c000101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001022:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001029:	01 f0                	add    eax,esi
c000102b:	eb 1d                	jmp    c000104a <sYSMALLOc+0x199>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	89 f5                	mov    ebp,esi
c0001032:	6a 00                	push   0x0
c0001034:	e8 5e e6 00 00       	call   c000f697 <sbrk>
c0001039:	89 c2                	mov    edx,eax
c000103b:	29 f2                	sub    edx,esi
c000103d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001041:	83 c4 10             	add    esp,0x10
c0001044:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000104a:	31 d2                	xor    edx,edx
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	74 66                	je     c00010b7 <sYSMALLOc+0x206>
c0001051:	29 e8                	sub    eax,ebp
c0001053:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001056:	01 d0                	add    eax,edx
c0001058:	83 c8 01             	or     eax,0x1
c000105b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000105e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001064:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001069:	74 4c                	je     c00010b7 <sYSMALLOc+0x206>
c000106b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000106f:	83 e8 0c             	sub    eax,0xc
c0001072:	83 e0 f8             	and    eax,0xfffffff8
c0001075:	89 c2                	mov    edx,eax
c0001077:	83 ca 01             	or     edx,0x1
c000107a:	83 f8 0f             	cmp    eax,0xf
c000107d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001080:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001088:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001090:	76 25                	jbe    c00010b7 <sYSMALLOc+0x206>
c0001092:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a5:	83 c7 08             	add    edi,0x8
c00010a8:	57                   	push   edi
c00010a9:	e8 0e fd ff ff       	call   c0000dbc <dlfree>
c00010ae:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b4:	83 c4 10             	add    esp,0x10
c00010b7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010bd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010c3:	73 06                	jae    c00010cb <sYSMALLOc+0x21a>
c00010c5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010cb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010d7:	73 06                	jae    c00010df <sYSMALLOc+0x22e>
c00010d9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010e5:	83 e2 fc             	and    edx,0xfffffffc
c00010e8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010ec:	0f 82 3c fe ff ff    	jb     c0000f2e <sYSMALLOc+0x7d>
c00010f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010f6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010f9:	29 fa                	sub    edx,edi
c00010fb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010fe:	83 ca 01             	or     edx,0x1
c0001101:	89 fb                	mov    ebx,edi
c0001103:	83 c0 08             	add    eax,0x8
c0001106:	83 cb 01             	or     ebx,0x1
c0001109:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000110c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000110f:	83 c4 2c             	add    esp,0x2c
c0001112:	5b                   	pop    ebx
c0001113:	5e                   	pop    esi
c0001114:	5f                   	pop    edi
c0001115:	5d                   	pop    ebp
c0001116:	c3                   	ret    

c0001117 <dlmalloc>:
c0001117:	55                   	push   ebp
c0001118:	57                   	push   edi
c0001119:	56                   	push   esi
c000111a:	53                   	push   ebx
c000111b:	83 ec 1c             	sub    esp,0x1c
c000111e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001122:	83 f8 df             	cmp    eax,0xffffffdf
c0001125:	0f 87 70 03 00 00    	ja     c000149b <dlmalloc+0x384>
c000112b:	83 c0 0b             	add    eax,0xb
c000112e:	be 10 00 00 00       	mov    esi,0x10
c0001133:	83 f8 0f             	cmp    eax,0xf
c0001136:	76 05                	jbe    c000113d <dlmalloc+0x26>
c0001138:	83 e0 f8             	and    eax,0xfffffff8
c000113b:	89 c6                	mov    esi,eax
c000113d:	8b 3d a0 de 02 c0    	mov    edi,DWORD PTR ds:0xc002dea0
c0001143:	f7 c7 01 00 00 00    	test   edi,0x1
c0001149:	75 17                	jne    c0001162 <dlmalloc+0x4b>
c000114b:	85 ff                	test   edi,edi
c000114d:	0f 85 05 03 00 00    	jne    c0001458 <dlmalloc+0x341>
c0001153:	b8 a0 de 02 c0       	mov    eax,0xc002dea0
c0001158:	e8 78 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c000115d:	e9 f6 02 00 00       	jmp    c0001458 <dlmalloc+0x341>
c0001162:	39 f7                	cmp    edi,esi
c0001164:	72 1f                	jb     c0001185 <dlmalloc+0x6e>
c0001166:	89 f2                	mov    edx,esi
c0001168:	c1 ea 03             	shr    edx,0x3
c000116b:	83 ea 02             	sub    edx,0x2
c000116e:	8b 04 95 a4 de 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd215c]
c0001175:	85 c0                	test   eax,eax
c0001177:	74 0c                	je     c0001185 <dlmalloc+0x6e>
c0001179:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000117c:	89 0c 95 a4 de 02 c0 	mov    DWORD PTR [edx*4-0x3ffd215c],ecx
c0001183:	eb 30                	jmp    c00011b5 <dlmalloc+0x9e>
c0001185:	89 f0                	mov    eax,esi
c0001187:	81 fe ff 00 00 00    	cmp    esi,0xff
c000118d:	77 2e                	ja     c00011bd <dlmalloc+0xa6>
c000118f:	c1 e8 03             	shr    eax,0x3
c0001192:	8d 14 c5 d4 de 02 c0 	lea    edx,[eax*8-0x3ffd212c]
c0001199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000119d:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011a3:	39 c3                	cmp    ebx,eax
c00011a5:	74 2e                	je     c00011d5 <dlmalloc+0xbe>
c00011a7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011aa:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011b2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011b5:	83 c0 08             	add    eax,0x8
c00011b8:	e9 e0 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c00011bd:	e8 8f fa ff ff       	call   c0000c51 <largebin_index>
c00011c2:	83 e7 02             	and    edi,0x2
c00011c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c9:	74 0a                	je     c00011d5 <dlmalloc+0xbe>
c00011cb:	b8 a0 de 02 c0       	mov    eax,0xc002dea0
c00011d0:	e8 00 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c00011d5:	8d 46 10             	lea    eax,[esi+0x10]
c00011d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011dc:	8b 1d e0 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002dee0
c00011e2:	81 fb d4 de 02 c0    	cmp    ebx,0xc002ded4
c00011e8:	0f 84 13 01 00 00    	je     c0001301 <dlmalloc+0x1ea>
c00011ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011f4:	83 e7 fc             	and    edi,0xfffffffc
c00011f7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011fd:	77 4c                	ja     c000124b <dlmalloc+0x134>
c00011ff:	3d d4 de 02 c0       	cmp    eax,0xc002ded4
c0001204:	75 45                	jne    c000124b <dlmalloc+0x134>
c0001206:	39 1d d0 de 02 c0    	cmp    DWORD PTR ds:0xc002ded0,ebx
c000120c:	75 3d                	jne    c000124b <dlmalloc+0x134>
c000120e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001212:	73 37                	jae    c000124b <dlmalloc+0x134>
c0001214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001217:	89 fa                	mov    edx,edi
c0001219:	a3 dc de 02 c0       	mov    ds:0xc002dedc,eax
c000121e:	a3 e0 de 02 c0       	mov    ds:0xc002dee0,eax
c0001223:	a3 d0 de 02 c0       	mov    ds:0xc002ded0,eax
c0001228:	29 f2                	sub    edx,esi
c000122a:	c7 40 08 d4 de 02 c0 	mov    DWORD PTR [eax+0x8],0xc002ded4
c0001231:	c7 40 0c d4 de 02 c0 	mov    DWORD PTR [eax+0xc],0xc002ded4
c0001238:	83 ce 01             	or     esi,0x1
c000123b:	89 d1                	mov    ecx,edx
c000123d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001240:	83 c9 01             	or     ecx,0x1
c0001243:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001246:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001249:	eb 15                	jmp    c0001260 <dlmalloc+0x149>
c000124b:	a3 e0 de 02 c0       	mov    ds:0xc002dee0,eax
c0001250:	39 fe                	cmp    esi,edi
c0001252:	c7 40 08 d4 de 02 c0 	mov    DWORD PTR [eax+0x8],0xc002ded4
c0001259:	75 0d                	jne    c0001268 <dlmalloc+0x151>
c000125b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001260:	8d 43 08             	lea    eax,[ebx+0x8]
c0001263:	e9 35 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c0001268:	89 f8                	mov    eax,edi
c000126a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001270:	77 19                	ja     c000128b <dlmalloc+0x174>
c0001272:	c1 e8 03             	shr    eax,0x3
c0001275:	8d 14 00             	lea    edx,[eax+eax*1]
c0001278:	83 c2 0d             	add    edx,0xd
c000127b:	8d 2c 95 98 de 02 c0 	lea    ebp,[edx*4-0x3ffd2168]
c0001282:	8b 14 95 a0 de 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2160]
c0001289:	eb 46                	jmp    c00012d1 <dlmalloc+0x1ba>
c000128b:	e8 c1 f9 ff ff       	call   c0000c51 <largebin_index>
c0001290:	8d 14 00             	lea    edx,[eax+eax*1]
c0001293:	83 c2 0d             	add    edx,0xd
c0001296:	8d 0c 95 a0 de 02 c0 	lea    ecx,[edx*4-0x3ffd2160]
c000129d:	8b 14 95 a0 de 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2160]
c00012a4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012ab:	89 d5                	mov    ebp,edx
c00012ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b1:	74 1e                	je     c00012d1 <dlmalloc+0x1ba>
c00012b3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012b6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012b9:	77 12                	ja     c00012cd <dlmalloc+0x1b6>
c00012bb:	83 cf 01             	or     edi,0x1
c00012be:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c1:	76 05                	jbe    c00012c8 <dlmalloc+0x1b1>
c00012c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012c6:	eb f6                	jmp    c00012be <dlmalloc+0x1a7>
c00012c8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012cb:	eb 04                	jmp    c00012d1 <dlmalloc+0x1ba>
c00012cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d1:	89 c7                	mov    edi,eax
c00012d3:	88 c1                	mov    cl,al
c00012d5:	c1 ff 05             	sar    edi,0x5
c00012d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012dc:	bf 01 00 00 00       	mov    edi,0x1
c00012e1:	d3 e7                	shl    edi,cl
c00012e3:	89 f8                	mov    eax,edi
c00012e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012e9:	09 04 bd d4 e1 02 c0 	or     DWORD PTR [edi*4-0x3ffd1e2c],eax
c00012f0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012f3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012f6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012f9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012fc:	e9 db fe ff ff       	jmp    c00011dc <dlmalloc+0xc5>
c0001301:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001307:	76 78                	jbe    c0001381 <dlmalloc+0x26a>
c0001309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000130d:	8d 04 c5 d4 de 02 c0 	lea    eax,[eax*8-0x3ffd212c]
c0001314:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000131a:	39 ca                	cmp    edx,ecx
c000131c:	74 63                	je     c0001381 <dlmalloc+0x26a>
c000131e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001321:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001324:	83 e3 fc             	and    ebx,0xfffffffc
c0001327:	39 de                	cmp    esi,ebx
c0001329:	77 52                	ja     c000137d <dlmalloc+0x266>
c000132b:	89 df                	mov    edi,ebx
c000132d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001330:	29 f7                	sub    edi,esi
c0001332:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001335:	01 d3                	add    ebx,edx
c0001337:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000133a:	83 ff 0f             	cmp    edi,0xf
c000133d:	8d 42 08             	lea    eax,[edx+0x8]
c0001340:	77 09                	ja     c000134b <dlmalloc+0x234>
c0001342:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001346:	e9 52 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000134b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000134e:	83 ce 01             	or     esi,0x1
c0001351:	89 0d dc de 02 c0    	mov    DWORD PTR ds:0xc002dedc,ecx
c0001357:	89 0d e0 de 02 c0    	mov    DWORD PTR ds:0xc002dee0,ecx
c000135d:	c7 41 08 d4 de 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002ded4
c0001364:	c7 41 0c d4 de 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002ded4
c000136b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000136e:	89 fa                	mov    edx,edi
c0001370:	83 ca 01             	or     edx,0x1
c0001373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001376:	89 3b                	mov    DWORD PTR [ebx],edi
c0001378:	e9 20 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000137d:	89 c2                	mov    edx,eax
c000137f:	eb 99                	jmp    c000131a <dlmalloc+0x203>
c0001381:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001385:	b8 01 00 00 00       	mov    eax,0x1
c000138a:	41                   	inc    ecx
c000138b:	89 cb                	mov    ebx,ecx
c000138d:	8d 14 cd cc de 02 c0 	lea    edx,[ecx*8-0x3ffd2134]
c0001394:	c1 eb 05             	shr    ebx,0x5
c0001397:	d3 e0                	shl    eax,cl
c0001399:	8b 3c 9d d4 e1 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1e2c]
c00013a0:	39 f8                	cmp    eax,edi
c00013a2:	77 04                	ja     c00013a8 <dlmalloc+0x291>
c00013a4:	85 c0                	test   eax,eax
c00013a6:	75 26                	jne    c00013ce <dlmalloc+0x2b7>
c00013a8:	43                   	inc    ebx
c00013a9:	83 fb 02             	cmp    ebx,0x2
c00013ac:	0f 87 a6 00 00 00    	ja     c0001458 <dlmalloc+0x341>
c00013b2:	8b 3c 9d d4 e1 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1e2c]
c00013b9:	85 ff                	test   edi,edi
c00013bb:	74 eb                	je     c00013a8 <dlmalloc+0x291>
c00013bd:	89 d8                	mov    eax,ebx
c00013bf:	c1 e0 06             	shl    eax,0x6
c00013c2:	8d 14 85 cc de 02 c0 	lea    edx,[eax*4-0x3ffd2134]
c00013c9:	b8 01 00 00 00       	mov    eax,0x1
c00013ce:	85 f8                	test   eax,edi
c00013d0:	75 07                	jne    c00013d9 <dlmalloc+0x2c2>
c00013d2:	83 c2 08             	add    edx,0x8
c00013d5:	01 c0                	add    eax,eax
c00013d7:	eb f5                	jmp    c00013ce <dlmalloc+0x2b7>
c00013d9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013dc:	39 ca                	cmp    edx,ecx
c00013de:	75 14                	jne    c00013f4 <dlmalloc+0x2dd>
c00013e0:	89 c1                	mov    ecx,eax
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	f7 d1                	not    ecx
c00013e7:	01 c0                	add    eax,eax
c00013e9:	21 cf                	and    edi,ecx
c00013eb:	89 3c 9d d4 e1 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1e2c],edi
c00013f2:	eb ac                	jmp    c00013a0 <dlmalloc+0x289>
c00013f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013f7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013fa:	83 e0 fc             	and    eax,0xfffffffc
c00013fd:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001400:	89 c3                	mov    ebx,eax
c0001402:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001405:	29 f3                	sub    ebx,esi
c0001407:	8d 14 01             	lea    edx,[ecx+eax*1]
c000140a:	83 fb 0f             	cmp    ebx,0xf
c000140d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001410:	77 09                	ja     c000141b <dlmalloc+0x304>
c0001412:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001416:	e9 82 00 00 00       	jmp    c000149d <dlmalloc+0x386>
c000141b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000141e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001424:	89 3d dc de 02 c0    	mov    DWORD PTR ds:0xc002dedc,edi
c000142a:	89 3d e0 de 02 c0    	mov    DWORD PTR ds:0xc002dee0,edi
c0001430:	c7 47 08 d4 de 02 c0 	mov    DWORD PTR [edi+0x8],0xc002ded4
c0001437:	c7 47 0c d4 de 02 c0 	mov    DWORD PTR [edi+0xc],0xc002ded4
c000143e:	77 06                	ja     c0001446 <dlmalloc+0x32f>
c0001440:	89 3d d0 de 02 c0    	mov    DWORD PTR ds:0xc002ded0,edi
c0001446:	83 ce 01             	or     esi,0x1
c0001449:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000144c:	89 d9                	mov    ecx,ebx
c000144e:	83 c9 01             	or     ecx,0x1
c0001451:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001454:	89 1a                	mov    DWORD PTR [edx],ebx
c0001456:	eb 45                	jmp    c000149d <dlmalloc+0x386>
c0001458:	a1 cc de 02 c0       	mov    eax,ds:0xc002decc
c000145d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001460:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001463:	83 e2 fc             	and    edx,0xfffffffc
c0001466:	39 d1                	cmp    ecx,edx
c0001468:	77 1e                	ja     c0001488 <dlmalloc+0x371>
c000146a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000146d:	89 f3                	mov    ebx,esi
c000146f:	89 0d cc de 02 c0    	mov    DWORD PTR ds:0xc002decc,ecx
c0001475:	83 cb 01             	or     ebx,0x1
c0001478:	29 f2                	sub    edx,esi
c000147a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000147d:	83 ca 01             	or     edx,0x1
c0001480:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001483:	e9 2d fd ff ff       	jmp    c00011b5 <dlmalloc+0x9e>
c0001488:	83 c4 1c             	add    esp,0x1c
c000148b:	89 f0                	mov    eax,esi
c000148d:	5b                   	pop    ebx
c000148e:	ba a0 de 02 c0       	mov    edx,0xc002dea0
c0001493:	5e                   	pop    esi
c0001494:	5f                   	pop    edi
c0001495:	5d                   	pop    ebp
c0001496:	e9 16 fa ff ff       	jmp    c0000eb1 <sYSMALLOc>
c000149b:	31 c0                	xor    eax,eax
c000149d:	83 c4 1c             	add    esp,0x1c
c00014a0:	5b                   	pop    ebx
c00014a1:	5e                   	pop    esi
c00014a2:	5f                   	pop    edi
c00014a3:	5d                   	pop    ebp
c00014a4:	c3                   	ret    

c00014a5 <iALLOc>:
c00014a5:	55                   	push   ebp
c00014a6:	89 c5                	mov    ebp,eax
c00014a8:	57                   	push   edi
c00014a9:	56                   	push   esi
c00014aa:	53                   	push   ebx
c00014ab:	83 ec 2c             	sub    esp,0x2c
c00014ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ba:	83 3d a0 de 02 c0 00 	cmp    DWORD PTR ds:0xc002dea0,0x0
c00014c1:	75 12                	jne    c00014d5 <iALLOc+0x30>
c00014c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014c7:	b8 a0 de 02 c0       	mov    eax,0xc002dea0
c00014cc:	e8 04 f8 ff ff       	call   c0000cd5 <malloc_consolidate>
c00014d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014da:	74 12                	je     c00014ee <iALLOc+0x49>
c00014dc:	85 ed                	test   ebp,ebp
c00014de:	0f 84 64 01 00 00    	je     c0001648 <iALLOc+0x1a3>
c00014e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014ec:	eb 33                	jmp    c0001521 <iALLOc+0x7c>
c00014ee:	85 ed                	test   ebp,ebp
c00014f0:	75 14                	jne    c0001506 <iALLOc+0x61>
c00014f2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014fa:	83 c4 2c             	add    esp,0x2c
c00014fd:	5b                   	pop    ebx
c00014fe:	5e                   	pop    esi
c00014ff:	5f                   	pop    edi
c0001500:	5d                   	pop    ebp
c0001501:	e9 11 fc ff ff       	jmp    c0001117 <dlmalloc>
c0001506:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000150d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001515:	83 f8 0f             	cmp    eax,0xf
c0001518:	76 07                	jbe    c0001521 <iALLOc+0x7c>
c000151a:	83 e0 f8             	and    eax,0xfffffff8
c000151d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001521:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001526:	75 09                	jne    c0001531 <iALLOc+0x8c>
c0001528:	89 d0                	mov    eax,edx
c000152a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000152d:	31 f6                	xor    esi,esi
c000152f:	eb 3b                	jmp    c000156c <iALLOc+0xc7>
c0001531:	8b 02                	mov    eax,DWORD PTR [edx]
c0001533:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000153b:	83 c0 0b             	add    eax,0xb
c000153e:	83 f8 0f             	cmp    eax,0xf
c0001541:	76 07                	jbe    c000154a <iALLOc+0xa5>
c0001543:	83 e0 f8             	and    eax,0xfffffff8
c0001546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000154a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000154e:	0f af f5             	imul   esi,ebp
c0001551:	eb 25                	jmp    c0001578 <iALLOc+0xd3>
c0001553:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001555:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001558:	bb 10 00 00 00       	mov    ebx,0x10
c000155d:	83 f9 0f             	cmp    ecx,0xf
c0001560:	76 05                	jbe    c0001567 <iALLOc+0xc2>
c0001562:	83 e1 f8             	and    ecx,0xfffffff8
c0001565:	89 cb                	mov    ebx,ecx
c0001567:	01 de                	add    esi,ebx
c0001569:	83 c0 04             	add    eax,0x4
c000156c:	39 c7                	cmp    edi,eax
c000156e:	75 e3                	jne    c0001553 <iALLOc+0xae>
c0001570:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000157c:	8b 1d f4 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e1f4
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	c7 05 f4 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e1f4,0x0
c000158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001593:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001597:	50                   	push   eax
c0001598:	e8 7a fb ff ff       	call   c0001117 <dlmalloc>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	89 1d f4 e1 02 c0    	mov    DWORD PTR ds:0xc002e1f4,ebx
c00015a6:	85 c0                	test   eax,eax
c00015a8:	0f 84 92 00 00 00    	je     c0001640 <iALLOc+0x19b>
c00015ae:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015b4:	83 e3 fc             	and    ebx,0xfffffffc
c00015b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015bb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c0:	74 1e                	je     c00015e0 <iALLOc+0x13b>
c00015c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015c6:	89 d9                	mov    ecx,ebx
c00015c8:	52                   	push   edx
c00015c9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015cd:	83 e9 04             	sub    ecx,0x4
c00015d0:	51                   	push   ecx
c00015d1:	6a 00                	push   0x0
c00015d3:	50                   	push   eax
c00015d4:	e8 9f f1 ff ff       	call   c0000778 <memset>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015e5:	75 14                	jne    c00015fb <iALLOc+0x156>
c00015e7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015ea:	29 f3                	sub    ebx,esi
c00015ec:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ef:	83 cb 01             	or     ebx,0x1
c00015f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015f9:	89 f3                	mov    ebx,esi
c00015fb:	31 c0                	xor    eax,eax
c00015fd:	4d                   	dec    ebp
c00015fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001601:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001605:	39 c5                	cmp    ebp,eax
c0001607:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000160a:	74 2c                	je     c0001638 <iALLOc+0x193>
c000160c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001610:	85 c9                	test   ecx,ecx
c0001612:	75 15                	jne    c0001629 <iALLOc+0x184>
c0001614:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001617:	8d 71 0b             	lea    esi,[ecx+0xb]
c000161a:	b9 10 00 00 00       	mov    ecx,0x10
c000161f:	83 fe 0f             	cmp    esi,0xf
c0001622:	76 05                	jbe    c0001629 <iALLOc+0x184>
c0001624:	83 e6 f8             	and    esi,0xfffffff8
c0001627:	89 f1                	mov    ecx,esi
c0001629:	89 ce                	mov    esi,ecx
c000162b:	29 cb                	sub    ebx,ecx
c000162d:	83 ce 01             	or     esi,0x1
c0001630:	40                   	inc    eax
c0001631:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001634:	01 cf                	add    edi,ecx
c0001636:	eb c6                	jmp    c00015fe <iALLOc+0x159>
c0001638:	83 cb 01             	or     ebx,0x1
c000163b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000163e:	eb 08                	jmp    c0001648 <iALLOc+0x1a3>
c0001640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000164c:	83 c4 2c             	add    esp,0x2c
c000164f:	5b                   	pop    ebx
c0001650:	5e                   	pop    esi
c0001651:	5f                   	pop    edi
c0001652:	5d                   	pop    ebp
c0001653:	c3                   	ret    

c0001654 <dlrealloc>:
c0001654:	55                   	push   ebp
c0001655:	57                   	push   edi
c0001656:	56                   	push   esi
c0001657:	53                   	push   ebx
c0001658:	83 ec 1c             	sub    esp,0x1c
c000165b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001663:	85 db                	test   ebx,ebx
c0001665:	75 10                	jne    c0001677 <dlrealloc+0x23>
c0001667:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000166b:	83 c4 1c             	add    esp,0x1c
c000166e:	5b                   	pop    ebx
c000166f:	5e                   	pop    esi
c0001670:	5f                   	pop    edi
c0001671:	5d                   	pop    ebp
c0001672:	e9 a0 fa ff ff       	jmp    c0001117 <dlmalloc>
c0001677:	83 f8 df             	cmp    eax,0xffffffdf
c000167a:	76 07                	jbe    c0001683 <dlrealloc+0x2f>
c000167c:	31 db                	xor    ebx,ebx
c000167e:	e9 7c 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c0001683:	83 c0 0b             	add    eax,0xb
c0001686:	bf 10 00 00 00       	mov    edi,0x10
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	76 05                	jbe    c0001695 <dlrealloc+0x41>
c0001690:	83 e0 f8             	and    eax,0xfffffff8
c0001693:	89 c7                	mov    edi,eax
c0001695:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001698:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000169b:	89 c6                	mov    esi,eax
c000169d:	83 e6 fc             	and    esi,0xfffffffc
c00016a0:	a8 02                	test   al,0x2
c00016a2:	75 d8                	jne    c000167c <dlrealloc+0x28>
c00016a4:	39 f7                	cmp    edi,esi
c00016a6:	0f 86 15 01 00 00    	jbe    c00017c1 <dlrealloc+0x16d>
c00016ac:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016b3:	39 15 cc de 02 c0    	cmp    DWORD PTR ds:0xc002decc,edx
c00016b9:	75 33                	jne    c00016ee <dlrealloc+0x9a>
c00016bb:	83 e1 fc             	and    ecx,0xfffffffc
c00016be:	01 f1                	add    ecx,esi
c00016c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c4:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016c7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016cb:	77 49                	ja     c0001716 <dlrealloc+0xc2>
c00016cd:	01 fd                	add    ebp,edi
c00016cf:	83 e0 01             	and    eax,0x1
c00016d2:	09 f8                	or     eax,edi
c00016d4:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016d7:	89 2d cc de 02 c0    	mov    DWORD PTR ds:0xc002decc,ebp
c00016dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e1:	29 f8                	sub    eax,edi
c00016e3:	83 c8 01             	or     eax,0x1
c00016e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016e9:	e9 11 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c00016ee:	89 c8                	mov    eax,ecx
c00016f0:	83 e0 fe             	and    eax,0xfffffffe
c00016f3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016f8:	75 1c                	jne    c0001716 <dlrealloc+0xc2>
c00016fa:	83 e1 fc             	and    ecx,0xfffffffc
c00016fd:	01 f1                	add    ecx,esi
c00016ff:	39 cf                	cmp    edi,ecx
c0001701:	77 13                	ja     c0001716 <dlrealloc+0xc2>
c0001703:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001706:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001709:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000170c:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000170f:	89 ce                	mov    esi,ecx
c0001711:	e9 ab 00 00 00       	jmp    c00017c1 <dlrealloc+0x16d>
c0001716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000171a:	8d 47 f9             	lea    eax,[edi-0x7]
c000171d:	83 ec 0c             	sub    esp,0xc
c0001720:	50                   	push   eax
c0001721:	e8 f1 f9 ff ff       	call   c0001117 <dlmalloc>
c0001726:	83 c4 10             	add    esp,0x10
c0001729:	89 c1                	mov    ecx,eax
c000172b:	85 c0                	test   eax,eax
c000172d:	0f 84 49 ff ff ff    	je     c000167c <dlrealloc+0x28>
c0001733:	8d 40 f8             	lea    eax,[eax-0x8]
c0001736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000173a:	39 c2                	cmp    edx,eax
c000173c:	75 0a                	jne    c0001748 <dlrealloc+0xf4>
c000173e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001741:	83 e0 fc             	and    eax,0xfffffffc
c0001744:	01 c6                	add    esi,eax
c0001746:	eb 79                	jmp    c00017c1 <dlrealloc+0x16d>
c0001748:	83 ee 04             	sub    esi,0x4
c000174b:	83 fe 27             	cmp    esi,0x27
c000174e:	76 16                	jbe    c0001766 <dlrealloc+0x112>
c0001750:	50                   	push   eax
c0001751:	56                   	push   esi
c0001752:	53                   	push   ebx
c0001753:	51                   	push   ecx
c0001754:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001758:	e8 e7 ef ff ff       	call   c0000744 <memcpy>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001764:	eb 43                	jmp    c00017a9 <dlrealloc+0x155>
c0001766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001768:	83 fe 13             	cmp    esi,0x13
c000176b:	89 01                	mov    DWORD PTR [ecx],eax
c000176d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001770:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001773:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001776:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001779:	76 2e                	jbe    c00017a9 <dlrealloc+0x155>
c000177b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000177e:	83 fe 1b             	cmp    esi,0x1b
c0001781:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001784:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001787:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000178a:	76 1d                	jbe    c00017a9 <dlrealloc+0x155>
c000178c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000178f:	83 fe 23             	cmp    esi,0x23
c0001792:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001795:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001798:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000179b:	76 0c                	jbe    c00017a9 <dlrealloc+0x155>
c000179d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a0:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017a6:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017ad:	83 ec 0c             	sub    esp,0xc
c00017b0:	53                   	push   ebx
c00017b1:	e8 06 f6 ff ff       	call   c0000dbc <dlfree>
c00017b6:	83 c4 10             	add    esp,0x10
c00017b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017bd:	89 cb                	mov    ebx,ecx
c00017bf:	eb 3e                	jmp    c00017ff <dlrealloc+0x1ab>
c00017c1:	89 f2                	mov    edx,esi
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	29 fa                	sub    edx,edi
c00017c8:	83 e1 01             	and    ecx,0x1
c00017cb:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017cf:	83 fa 0f             	cmp    edx,0xf
c00017d2:	77 0b                	ja     c00017df <dlrealloc+0x18b>
c00017d4:	09 ce                	or     esi,ecx
c00017d6:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017d9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017dd:	eb 20                	jmp    c00017ff <dlrealloc+0x1ab>
c00017df:	01 fd                	add    ebp,edi
c00017e1:	83 ec 0c             	sub    esp,0xc
c00017e4:	09 cf                	or     edi,ecx
c00017e6:	83 ca 01             	or     edx,0x1
c00017e9:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017ec:	83 c5 08             	add    ebp,0x8
c00017ef:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017f2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017f6:	55                   	push   ebp
c00017f7:	e8 c0 f5 ff ff       	call   c0000dbc <dlfree>
c00017fc:	83 c4 10             	add    esp,0x10
c00017ff:	83 c4 1c             	add    esp,0x1c
c0001802:	89 d8                	mov    eax,ebx
c0001804:	5b                   	pop    ebx
c0001805:	5e                   	pop    esi
c0001806:	5f                   	pop    edi
c0001807:	5d                   	pop    ebp
c0001808:	c3                   	ret    

c0001809 <dlmemalign>:
c0001809:	55                   	push   ebp
c000180a:	57                   	push   edi
c000180b:	56                   	push   esi
c000180c:	53                   	push   ebx
c000180d:	83 ec 0c             	sub    esp,0xc
c0001810:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001814:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001818:	83 fa 08             	cmp    edx,0x8
c000181b:	77 10                	ja     c000182d <dlmemalign+0x24>
c000181d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001821:	83 c4 0c             	add    esp,0xc
c0001824:	5b                   	pop    ebx
c0001825:	5e                   	pop    esi
c0001826:	5f                   	pop    edi
c0001827:	5d                   	pop    ebp
c0001828:	e9 ea f8 ff ff       	jmp    c0001117 <dlmalloc>
c000182d:	bf 10 00 00 00       	mov    edi,0x10
c0001832:	83 fa 0f             	cmp    edx,0xf
c0001835:	76 13                	jbe    c000184a <dlmemalign+0x41>
c0001837:	8d 4a ff             	lea    ecx,[edx-0x1]
c000183a:	85 d1                	test   ecx,edx
c000183c:	75 04                	jne    c0001842 <dlmemalign+0x39>
c000183e:	89 d7                	mov    edi,edx
c0001840:	eb 08                	jmp    c000184a <dlmemalign+0x41>
c0001842:	39 d7                	cmp    edi,edx
c0001844:	73 04                	jae    c000184a <dlmemalign+0x41>
c0001846:	01 ff                	add    edi,edi
c0001848:	eb f8                	jmp    c0001842 <dlmemalign+0x39>
c000184a:	83 f8 df             	cmp    eax,0xffffffdf
c000184d:	76 07                	jbe    c0001856 <dlmemalign+0x4d>
c000184f:	31 c0                	xor    eax,eax
c0001851:	e9 ce 00 00 00       	jmp    c0001924 <dlmemalign+0x11b>
c0001856:	83 c0 0b             	add    eax,0xb
c0001859:	bd 10 00 00 00       	mov    ebp,0x10
c000185e:	83 f8 0f             	cmp    eax,0xf
c0001861:	76 05                	jbe    c0001868 <dlmemalign+0x5f>
c0001863:	83 e0 f8             	and    eax,0xfffffff8
c0001866:	89 c5                	mov    ebp,eax
c0001868:	83 ec 0c             	sub    esp,0xc
c000186b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000186f:	50                   	push   eax
c0001870:	e8 a2 f8 ff ff       	call   c0001117 <dlmalloc>
c0001875:	83 c4 10             	add    esp,0x10
c0001878:	89 c1                	mov    ecx,eax
c000187a:	85 c0                	test   eax,eax
c000187c:	74 d1                	je     c000184f <dlmemalign+0x46>
c000187e:	31 d2                	xor    edx,edx
c0001880:	8d 70 f8             	lea    esi,[eax-0x8]
c0001883:	f7 f7                	div    edi
c0001885:	85 d2                	test   edx,edx
c0001887:	74 62                	je     c00018eb <dlmemalign+0xe2>
c0001889:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000188d:	89 f8                	mov    eax,edi
c000188f:	f7 d8                	neg    eax
c0001891:	21 c3                	and    ebx,eax
c0001893:	83 eb 08             	sub    ebx,0x8
c0001896:	89 d8                	mov    eax,ebx
c0001898:	29 f0                	sub    eax,esi
c000189a:	83 f8 0f             	cmp    eax,0xf
c000189d:	77 02                	ja     c00018a1 <dlmemalign+0x98>
c000189f:	01 fb                	add    ebx,edi
c00018a1:	89 d8                	mov    eax,ebx
c00018a3:	29 f0                	sub    eax,esi
c00018a5:	89 c6                	mov    esi,eax
c00018a7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018aa:	89 c2                	mov    edx,eax
c00018ac:	83 e2 fc             	and    edx,0xfffffffc
c00018af:	29 f2                	sub    edx,esi
c00018b1:	a8 02                	test   al,0x2
c00018b3:	74 10                	je     c00018c5 <dlmemalign+0xbc>
c00018b5:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018b8:	83 ca 02             	or     edx,0x2
c00018bb:	8d 43 08             	lea    eax,[ebx+0x8]
c00018be:	89 33                	mov    DWORD PTR [ebx],esi
c00018c0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018c3:	eb 5f                	jmp    c0001924 <dlmemalign+0x11b>
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	89 d0                	mov    eax,edx
c00018ca:	83 c8 01             	or     eax,0x1
c00018cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018d5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018d8:	83 e0 01             	and    eax,0x1
c00018db:	09 f0                	or     eax,esi
c00018dd:	89 de                	mov    esi,ebx
c00018df:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018e2:	51                   	push   ecx
c00018e3:	e8 d4 f4 ff ff       	call   c0000dbc <dlfree>
c00018e8:	83 c4 10             	add    esp,0x10
c00018eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ee:	a8 02                	test   al,0x2
c00018f0:	75 2f                	jne    c0001921 <dlmemalign+0x118>
c00018f2:	83 e0 fc             	and    eax,0xfffffffc
c00018f5:	8d 55 10             	lea    edx,[ebp+0x10]
c00018f8:	39 c2                	cmp    edx,eax
c00018fa:	73 25                	jae    c0001921 <dlmemalign+0x118>
c00018fc:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ff:	83 ec 0c             	sub    esp,0xc
c0001902:	29 e8                	sub    eax,ebp
c0001904:	83 c2 08             	add    edx,0x8
c0001907:	83 c8 01             	or     eax,0x1
c000190a:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000190d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001910:	83 e0 01             	and    eax,0x1
c0001913:	09 c5                	or     ebp,eax
c0001915:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001918:	52                   	push   edx
c0001919:	e8 9e f4 ff ff       	call   c0000dbc <dlfree>
c000191e:	83 c4 10             	add    esp,0x10
c0001921:	8d 46 08             	lea    eax,[esi+0x8]
c0001924:	83 c4 0c             	add    esp,0xc
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	c3                   	ret    

c000192c <dlcalloc>:
c000192c:	53                   	push   ebx
c000192d:	83 ec 14             	sub    esp,0x14
c0001930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001934:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001939:	50                   	push   eax
c000193a:	e8 d8 f7 ff ff       	call   c0001117 <dlmalloc>
c000193f:	83 c4 10             	add    esp,0x10
c0001942:	89 c3                	mov    ebx,eax
c0001944:	85 c0                	test   eax,eax
c0001946:	74 77                	je     c00019bf <dlcalloc+0x93>
c0001948:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000194b:	89 d0                	mov    eax,edx
c000194d:	83 e0 fc             	and    eax,0xfffffffc
c0001950:	80 e2 02             	and    dl,0x2
c0001953:	75 5a                	jne    c00019af <dlcalloc+0x83>
c0001955:	83 e8 04             	sub    eax,0x4
c0001958:	83 f8 27             	cmp    eax,0x27
c000195b:	76 03                	jbe    c0001960 <dlcalloc+0x34>
c000195d:	51                   	push   ecx
c000195e:	eb 53                	jmp    c00019b3 <dlcalloc+0x87>
c0001960:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001966:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000196d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001974:	83 f8 13             	cmp    eax,0x13
c0001977:	76 46                	jbe    c00019bf <dlcalloc+0x93>
c0001979:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001987:	83 f8 1b             	cmp    eax,0x1b
c000198a:	76 33                	jbe    c00019bf <dlcalloc+0x93>
c000198c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001993:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000199a:	83 f8 23             	cmp    eax,0x23
c000199d:	76 20                	jbe    c00019bf <dlcalloc+0x93>
c000199f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019a6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019ad:	eb 10                	jmp    c00019bf <dlcalloc+0x93>
c00019af:	83 e8 08             	sub    eax,0x8
c00019b2:	52                   	push   edx
c00019b3:	50                   	push   eax
c00019b4:	6a 00                	push   0x0
c00019b6:	53                   	push   ebx
c00019b7:	e8 bc ed ff ff       	call   c0000778 <memset>
c00019bc:	83 c4 10             	add    esp,0x10
c00019bf:	89 d8                	mov    eax,ebx
c00019c1:	83 c4 08             	add    esp,0x8
c00019c4:	5b                   	pop    ebx
c00019c5:	c3                   	ret    

c00019c6 <dlcfree>:
c00019c6:	e9 f1 f3 ff ff       	jmp    c0000dbc <dlfree>

c00019cb <dlindependent_calloc>:
c00019cb:	83 ec 28             	sub    esp,0x28
c00019ce:	b9 03 00 00 00       	mov    ecx,0x3
c00019d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e7:	e8 b9 fa ff ff       	call   c00014a5 <iALLOc>
c00019ec:	83 c4 2c             	add    esp,0x2c
c00019ef:	c3                   	ret    

c00019f0 <dlindependent_comalloc>:
c00019f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f8:	31 c9                	xor    ecx,ecx
c00019fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a02:	e9 9e fa ff ff       	jmp    c00014a5 <iALLOc>

c0001a07 <dlvalloc>:
c0001a07:	83 ec 0c             	sub    esp,0xc
c0001a0a:	83 3d a0 de 02 c0 00 	cmp    DWORD PTR ds:0xc002dea0,0x0
c0001a11:	75 0a                	jne    c0001a1d <dlvalloc+0x16>
c0001a13:	b8 a0 de 02 c0       	mov    eax,0xc002dea0
c0001a18:	e8 b8 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a1d:	50                   	push   eax
c0001a1e:	50                   	push   eax
c0001a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a23:	ff 35 fc e1 02 c0    	push   DWORD PTR ds:0xc002e1fc
c0001a29:	e8 db fd ff ff       	call   c0001809 <dlmemalign>
c0001a2e:	83 c4 1c             	add    esp,0x1c
c0001a31:	c3                   	ret    

c0001a32 <dlpvalloc>:
c0001a32:	83 ec 0c             	sub    esp,0xc
c0001a35:	83 3d a0 de 02 c0 00 	cmp    DWORD PTR ds:0xc002dea0,0x0
c0001a3c:	75 0a                	jne    c0001a48 <dlpvalloc+0x16>
c0001a3e:	b8 a0 de 02 c0       	mov    eax,0xc002dea0
c0001a43:	e8 8d f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a48:	a1 fc e1 02 c0       	mov    eax,ds:0xc002e1fc
c0001a4d:	89 c1                	mov    ecx,eax
c0001a4f:	52                   	push   edx
c0001a50:	f7 d9                	neg    ecx
c0001a52:	52                   	push   edx
c0001a53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a57:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a5b:	21 ca                	and    edx,ecx
c0001a5d:	52                   	push   edx
c0001a5e:	50                   	push   eax
c0001a5f:	e8 a5 fd ff ff       	call   c0001809 <dlmemalign>
c0001a64:	83 c4 1c             	add    esp,0x1c
c0001a67:	c3                   	ret    

c0001a68 <dlmalloc_trim>:
c0001a68:	b8 a0 de 02 c0       	mov    eax,0xc002dea0
c0001a6d:	e8 63 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <dlmalloc_usable_size>:
c0001a75:	53                   	push   ebx
c0001a76:	31 c0                	xor    eax,eax
c0001a78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a7c:	85 c9                	test   ecx,ecx
c0001a7e:	74 24                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a80:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a83:	f6 c2 02             	test   dl,0x2
c0001a86:	74 08                	je     c0001a90 <dlmalloc_usable_size+0x1b>
c0001a88:	83 e2 fc             	and    edx,0xfffffffc
c0001a8b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a8e:	eb 14                	jmp    c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a90:	89 d3                	mov    ebx,edx
c0001a92:	31 c0                	xor    eax,eax
c0001a94:	83 e3 fe             	and    ebx,0xfffffffe
c0001a97:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a9c:	74 06                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a9e:	83 e2 fc             	and    edx,0xfffffffc
c0001aa1:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aa4:	5b                   	pop    ebx
c0001aa5:	c3                   	ret    

c0001aa6 <dlmallinfo>:
c0001aa6:	55                   	push   ebp
c0001aa7:	57                   	push   edi
c0001aa8:	56                   	push   esi
c0001aa9:	53                   	push   ebx
c0001aaa:	83 ec 08             	sub    esp,0x8
c0001aad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab1:	83 3d cc de 02 c0 00 	cmp    DWORD PTR ds:0xc002decc,0x0
c0001ab8:	75 0a                	jne    c0001ac4 <dlmallinfo+0x1e>
c0001aba:	b8 a0 de 02 c0       	mov    eax,0xc002dea0
c0001abf:	e8 11 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001ac4:	a1 cc de 02 c0       	mov    eax,ds:0xc002decc
c0001ac9:	31 ed                	xor    ebp,ebp
c0001acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ace:	31 c9                	xor    ecx,ecx
c0001ad0:	83 e0 fc             	and    eax,0xfffffffc
c0001ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	8b 14 85 a4 de 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd215c]
c0001ae0:	85 d2                	test   edx,edx
c0001ae2:	74 0e                	je     c0001af2 <dlmallinfo+0x4c>
c0001ae4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ae7:	45                   	inc    ebp
c0001ae8:	83 e6 fc             	and    esi,0xfffffffc
c0001aeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aee:	01 f1                	add    ecx,esi
c0001af0:	eb ee                	jmp    c0001ae0 <dlmallinfo+0x3a>
c0001af2:	40                   	inc    eax
c0001af3:	83 f8 0a             	cmp    eax,0xa
c0001af6:	75 e1                	jne    c0001ad9 <dlmallinfo+0x33>
c0001af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001afc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b03:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b06:	b8 d4 de 02 c0       	mov    eax,0xc002ded4
c0001b0b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b0e:	39 f0                	cmp    eax,esi
c0001b10:	74 10                	je     c0001b22 <dlmallinfo+0x7c>
c0001b12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b15:	ff 04 24             	inc    DWORD PTR [esp]
c0001b18:	83 e7 fc             	and    edi,0xfffffffc
c0001b1b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b1e:	01 fa                	add    edx,edi
c0001b20:	eb ec                	jmp    c0001b0e <dlmallinfo+0x68>
c0001b22:	83 c0 08             	add    eax,0x8
c0001b25:	3d cc e1 02 c0       	cmp    eax,0xc002e1cc
c0001b2a:	75 df                	jne    c0001b0b <dlmallinfo+0x65>
c0001b2c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b2f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b32:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b35:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c0001b3a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b3f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b42:	8b 35 f0 e1 02 c0    	mov    esi,DWORD PTR ds:0xc002e1f0
c0001b48:	29 d0                	sub    eax,edx
c0001b4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b50:	8b 35 04 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e204
c0001b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b5a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b60:	8b 35 14 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e214
c0001b66:	89 d8                	mov    eax,ebx
c0001b68:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b6b:	83 c4 08             	add    esp,0x8
c0001b6e:	5b                   	pop    ebx
c0001b6f:	5e                   	pop    esi
c0001b70:	5f                   	pop    edi
c0001b71:	5d                   	pop    ebp
c0001b72:	c2 04 00             	ret    0x4

c0001b75 <dlmalloc_stats>:
c0001b75:	83 ec 30             	sub    esp,0x30
c0001b78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b7c:	50                   	push   eax
c0001b7d:	e8 24 ff ff ff       	call   c0001aa6 <dlmallinfo>
c0001b82:	83 c4 30             	add    esp,0x30
c0001b85:	c3                   	ret    

c0001b86 <dlmallopt>:
c0001b86:	56                   	push   esi
c0001b87:	b8 a0 de 02 c0       	mov    eax,0xc002dea0
c0001b8c:	53                   	push   ebx
c0001b8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b95:	e8 3b f1 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001b9a:	8d 46 04             	lea    eax,[esi+0x4]
c0001b9d:	83 f8 05             	cmp    eax,0x5
c0001ba0:	77 67                	ja     c0001c09 <dlmallopt+0x83>
c0001ba2:	ff 24 85 24 92 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6ddc]
c0001ba9:	83 fb 50             	cmp    ebx,0x50
c0001bac:	77 5b                	ja     c0001c09 <dlmallopt+0x83>
c0001bae:	ba 08 00 00 00       	mov    edx,0x8
c0001bb3:	85 db                	test   ebx,ebx
c0001bb5:	74 12                	je     c0001bc9 <dlmallopt+0x43>
c0001bb7:	83 c3 0b             	add    ebx,0xb
c0001bba:	ba 10 00 00 00       	mov    edx,0x10
c0001bbf:	83 fb 0f             	cmp    ebx,0xf
c0001bc2:	76 05                	jbe    c0001bc9 <dlmallopt+0x43>
c0001bc4:	89 da                	mov    edx,ebx
c0001bc6:	83 e2 f8             	and    edx,0xfffffff8
c0001bc9:	a1 a0 de 02 c0       	mov    eax,ds:0xc002dea0
c0001bce:	83 e0 03             	and    eax,0x3
c0001bd1:	09 d0                	or     eax,edx
c0001bd3:	a3 a0 de 02 c0       	mov    ds:0xc002dea0,eax
c0001bd8:	eb 31                	jmp    c0001c0b <dlmallopt+0x85>
c0001bda:	89 1d e4 e1 02 c0    	mov    DWORD PTR ds:0xc002e1e4,ebx
c0001be0:	eb 06                	jmp    c0001be8 <dlmallopt+0x62>
c0001be2:	89 1d e8 e1 02 c0    	mov    DWORD PTR ds:0xc002e1e8,ebx
c0001be8:	be 01 00 00 00       	mov    esi,0x1
c0001bed:	eb 1c                	jmp    c0001c0b <dlmallopt+0x85>
c0001bef:	89 1d ec e1 02 c0    	mov    DWORD PTR ds:0xc002e1ec,ebx
c0001bf5:	eb f1                	jmp    c0001be8 <dlmallopt+0x62>
c0001bf7:	31 f6                	xor    esi,esi
c0001bf9:	85 db                	test   ebx,ebx
c0001bfb:	75 0e                	jne    c0001c0b <dlmallopt+0x85>
c0001bfd:	c7 05 f4 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e1f4,0x0
c0001c07:	eb df                	jmp    c0001be8 <dlmallopt+0x62>
c0001c09:	31 f6                	xor    esi,esi
c0001c0b:	89 f0                	mov    eax,esi
c0001c0d:	5b                   	pop    ebx
c0001c0e:	5e                   	pop    esi
c0001c0f:	c3                   	ret    

c0001c10 <disk_status>:
c0001c10:	31 c0                	xor    eax,eax
c0001c12:	c3                   	ret    

c0001c13 <disk_initialize>:
c0001c13:	31 c0                	xor    eax,eax
c0001c15:	c3                   	ret    

c0001c16 <disk_read>:
c0001c16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1b:	0f b6 04 85 80 19 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce680]
c0001c23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c27:	e9 8c f0 01 00       	jmp    c0020cb8 <fatWrapperReadDisk>

c0001c2c <disk_write>:
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 80 19 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce680]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 bd f0 01 00       	jmp    c0020cff <fatWrapperWriteDisk>

c0001c42 <disk_ioctl>:
c0001c42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c4b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c50:	0f b6 04 85 80 19 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce680]
c0001c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c5c:	e9 e5 f0 01 00       	jmp    c0020d46 <fatWrapperIoctl>

c0001c61 <ld_word>:
c0001c61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c68:	c1 e2 08             	shl    edx,0x8
c0001c6b:	09 d0                	or     eax,edx
c0001c6d:	c3                   	ret    

c0001c6e <ld_dword>:
c0001c6e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c72:	89 d1                	mov    ecx,edx
c0001c74:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c78:	c1 e1 08             	shl    ecx,0x8
c0001c7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c7e:	09 ca                	or     edx,ecx
c0001c80:	c1 e2 08             	shl    edx,0x8
c0001c83:	09 d0                	or     eax,edx
c0001c85:	c3                   	ret    

c0001c86 <ld_qword>:
c0001c86:	57                   	push   edi
c0001c87:	56                   	push   esi
c0001c88:	53                   	push   ebx
c0001c89:	31 db                	xor    ebx,ebx
c0001c8b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c8e:	89 df                	mov    edi,ebx
c0001c90:	89 ce                	mov    esi,ecx
c0001c92:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	c1 e6 08             	shl    esi,0x8
c0001c9d:	09 f2                	or     edx,esi
c0001c9f:	89 d6                	mov    esi,edx
c0001ca1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ca5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca9:	c1 e6 08             	shl    esi,0x8
c0001cac:	09 f2                	or     edx,esi
c0001cae:	89 d6                	mov    esi,edx
c0001cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cb4:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cbb:	c1 e6 08             	shl    esi,0x8
c0001cbe:	89 fb                	mov    ebx,edi
c0001cc0:	09 f2                	or     edx,esi
c0001cc2:	89 d1                	mov    ecx,edx
c0001cc4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cc8:	c1 e1 08             	shl    ecx,0x8
c0001ccb:	89 da                	mov    edx,ebx
c0001ccd:	09 c8                	or     eax,ecx
c0001ccf:	5b                   	pop    ebx
c0001cd0:	5e                   	pop    esi
c0001cd1:	5f                   	pop    edi
c0001cd2:	c3                   	ret    

c0001cd3 <st_word>:
c0001cd3:	66 89 10             	mov    WORD PTR [eax],dx
c0001cd6:	c3                   	ret    

c0001cd7 <st_dword>:
c0001cd7:	89 10                	mov    DWORD PTR [eax],edx
c0001cd9:	c3                   	ret    

c0001cda <st_qword>:
c0001cda:	89 10                	mov    DWORD PTR [eax],edx
c0001cdc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cdf:	c3                   	ret    

c0001ce0 <mem_cpy>:
c0001ce0:	85 c9                	test   ecx,ecx
c0001ce2:	74 10                	je     c0001cf4 <mem_cpy+0x14>
c0001ce4:	57                   	push   edi
c0001ce5:	01 c1                	add    ecx,eax
c0001ce7:	56                   	push   esi
c0001ce8:	89 c7                	mov    edi,eax
c0001cea:	89 d6                	mov    esi,edx
c0001cec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ced:	39 f9                	cmp    ecx,edi
c0001cef:	75 fb                	jne    c0001cec <mem_cpy+0xc>
c0001cf1:	5e                   	pop    esi
c0001cf2:	5f                   	pop    edi
c0001cf3:	c3                   	ret    
c0001cf4:	c3                   	ret    

c0001cf5 <mem_set>:
c0001cf5:	01 c1                	add    ecx,eax
c0001cf7:	40                   	inc    eax
c0001cf8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cfb:	39 c8                	cmp    eax,ecx
c0001cfd:	75 f8                	jne    c0001cf7 <mem_set+0x2>
c0001cff:	c3                   	ret    

c0001d00 <mem_cmp>:
c0001d00:	57                   	push   edi
c0001d01:	56                   	push   esi
c0001d02:	89 c6                	mov    esi,eax
c0001d04:	53                   	push   ebx
c0001d05:	46                   	inc    esi
c0001d06:	42                   	inc    edx
c0001d07:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d0b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d0f:	29 fb                	sub    ebx,edi
c0001d11:	89 cf                	mov    edi,ecx
c0001d13:	29 f7                	sub    edi,esi
c0001d15:	01 c7                	add    edi,eax
c0001d17:	74 04                	je     c0001d1d <mem_cmp+0x1d>
c0001d19:	85 db                	test   ebx,ebx
c0001d1b:	74 e8                	je     c0001d05 <mem_cmp+0x5>
c0001d1d:	89 d8                	mov    eax,ebx
c0001d1f:	5b                   	pop    ebx
c0001d20:	5e                   	pop    esi
c0001d21:	5f                   	pop    edi
c0001d22:	c3                   	ret    

c0001d23 <chk_chr>:
c0001d23:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d26:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d29:	74 07                	je     c0001d32 <chk_chr+0xf>
c0001d2b:	39 d1                	cmp    ecx,edx
c0001d2d:	74 03                	je     c0001d32 <chk_chr+0xf>
c0001d2f:	40                   	inc    eax
c0001d30:	eb f1                	jmp    c0001d23 <chk_chr>
c0001d32:	89 c8                	mov    eax,ecx
c0001d34:	c3                   	ret    

c0001d35 <dbc_1st>:
c0001d35:	31 c0                	xor    eax,eax
c0001d37:	c3                   	ret    

c0001d38 <dbc_2nd>:
c0001d38:	31 c0                	xor    eax,eax
c0001d3a:	c3                   	ret    

c0001d3b <tchar2uni>:
c0001d3b:	57                   	push   edi
c0001d3c:	89 c7                	mov    edi,eax
c0001d3e:	56                   	push   esi
c0001d3f:	53                   	push   ebx
c0001d40:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d42:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d44:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d47:	84 c9                	test   cl,cl
c0001d49:	78 0a                	js     c0001d55 <tchar2uni+0x1a>
c0001d4b:	0f b6 d1             	movzx  edx,cl
c0001d4e:	89 f3                	mov    ebx,esi
c0001d50:	e9 9f 00 00 00       	jmp    c0001df4 <tchar2uni+0xb9>
c0001d55:	88 ca                	mov    dl,cl
c0001d57:	83 e2 e0             	and    edx,0xffffffe0
c0001d5a:	80 fa c0             	cmp    dl,0xc0
c0001d5d:	75 0c                	jne    c0001d6b <tchar2uni+0x30>
c0001d5f:	89 ca                	mov    edx,ecx
c0001d61:	b9 01 00 00 00       	mov    ecx,0x1
c0001d66:	83 e2 1f             	and    edx,0x1f
c0001d69:	eb 2e                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d6b:	88 ca                	mov    dl,cl
c0001d6d:	83 e2 f0             	and    edx,0xfffffff0
c0001d70:	80 fa e0             	cmp    dl,0xe0
c0001d73:	75 0c                	jne    c0001d81 <tchar2uni+0x46>
c0001d75:	89 ca                	mov    edx,ecx
c0001d77:	b9 02 00 00 00       	mov    ecx,0x2
c0001d7c:	83 e2 0f             	and    edx,0xf
c0001d7f:	eb 18                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d81:	88 ca                	mov    dl,cl
c0001d83:	83 e2 f8             	and    edx,0xfffffff8
c0001d86:	88 d0                	mov    al,dl
c0001d88:	83 ca ff             	or     edx,0xffffffff
c0001d8b:	3c f0                	cmp    al,0xf0
c0001d8d:	75 6c                	jne    c0001dfb <tchar2uni+0xc0>
c0001d8f:	89 ca                	mov    edx,ecx
c0001d91:	b9 03 00 00 00       	mov    ecx,0x3
c0001d96:	83 e2 07             	and    edx,0x7
c0001d99:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d9d:	46                   	inc    esi
c0001d9e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da1:	88 c8                	mov    al,cl
c0001da3:	83 e0 c0             	and    eax,0xffffffc0
c0001da6:	3c 80                	cmp    al,0x80
c0001da8:	75 4e                	jne    c0001df8 <tchar2uni+0xbd>
c0001daa:	c1 e2 06             	shl    edx,0x6
c0001dad:	83 e1 3f             	and    ecx,0x3f
c0001db0:	09 ca                	or     edx,ecx
c0001db2:	39 de                	cmp    esi,ebx
c0001db4:	75 e7                	jne    c0001d9d <tchar2uni+0x62>
c0001db6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001db9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dbf:	77 37                	ja     c0001df8 <tchar2uni+0xbd>
c0001dc1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dc7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dcd:	76 29                	jbe    c0001df8 <tchar2uni+0xbd>
c0001dcf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dd5:	76 1d                	jbe    c0001df4 <tchar2uni+0xb9>
c0001dd7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ddd:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001de3:	c1 e1 06             	shl    ecx,0x6
c0001de6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dec:	09 ca                	or     edx,ecx
c0001dee:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001df4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001df6:	eb 03                	jmp    c0001dfb <tchar2uni+0xc0>
c0001df8:	83 ca ff             	or     edx,0xffffffff
c0001dfb:	5b                   	pop    ebx
c0001dfc:	89 d0                	mov    eax,edx
c0001dfe:	5e                   	pop    esi
c0001dff:	5f                   	pop    edi
c0001e00:	c3                   	ret    

c0001e01 <put_utf>:
c0001e01:	53                   	push   ebx
c0001e02:	83 f8 7f             	cmp    eax,0x7f
c0001e05:	89 c3                	mov    ebx,eax
c0001e07:	b0 00                	mov    al,0x0
c0001e09:	77 11                	ja     c0001e1c <put_utf+0x1b>
c0001e0b:	85 c9                	test   ecx,ecx
c0001e0d:	0f 84 e5 00 00 00    	je     c0001ef8 <put_utf+0xf7>
c0001e13:	88 1a                	mov    BYTE PTR [edx],bl
c0001e15:	b0 01                	mov    al,0x1
c0001e17:	e9 dc 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e1c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e22:	77 23                	ja     c0001e47 <put_utf+0x46>
c0001e24:	83 f9 01             	cmp    ecx,0x1
c0001e27:	0f 86 cb 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e2d:	89 d8                	mov    eax,ebx
c0001e2f:	83 e3 3f             	and    ebx,0x3f
c0001e32:	c1 e8 06             	shr    eax,0x6
c0001e35:	83 cb 80             	or     ebx,0xffffff80
c0001e38:	83 c8 c0             	or     eax,0xffffffc0
c0001e3b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e3e:	88 02                	mov    BYTE PTR [edx],al
c0001e40:	b0 02                	mov    al,0x2
c0001e42:	e9 b1 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e47:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e4d:	77 40                	ja     c0001e8f <put_utf+0x8e>
c0001e4f:	83 f9 02             	cmp    ecx,0x2
c0001e52:	0f 86 a0 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e58:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e5e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e64:	0f 86 8e 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e6a:	89 d8                	mov    eax,ebx
c0001e6c:	c1 e8 0c             	shr    eax,0xc
c0001e6f:	83 c8 e0             	or     eax,0xffffffe0
c0001e72:	88 02                	mov    BYTE PTR [edx],al
c0001e74:	89 d8                	mov    eax,ebx
c0001e76:	83 e3 3f             	and    ebx,0x3f
c0001e79:	c1 e8 06             	shr    eax,0x6
c0001e7c:	83 cb 80             	or     ebx,0xffffff80
c0001e7f:	83 e0 3f             	and    eax,0x3f
c0001e82:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e85:	83 c8 80             	or     eax,0xffffff80
c0001e88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e8b:	b0 03                	mov    al,0x3
c0001e8d:	eb 69                	jmp    c0001ef8 <put_utf+0xf7>
c0001e8f:	83 f9 03             	cmp    ecx,0x3
c0001e92:	76 64                	jbe    c0001ef8 <put_utf+0xf7>
c0001e94:	89 d9                	mov    ecx,ebx
c0001e96:	0f b7 c3             	movzx  eax,bx
c0001e99:	66 31 c9             	xor    cx,cx
c0001e9c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ea2:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ea8:	c1 e9 06             	shr    ecx,0x6
c0001eab:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb1:	77 43                	ja     c0001ef6 <put_utf+0xf5>
c0001eb3:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001eb9:	77 3b                	ja     c0001ef6 <put_utf+0xf5>
c0001ebb:	09 cb                	or     ebx,ecx
c0001ebd:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ec3:	89 d8                	mov    eax,ebx
c0001ec5:	c1 e8 12             	shr    eax,0x12
c0001ec8:	83 c8 f0             	or     eax,0xfffffff0
c0001ecb:	88 02                	mov    BYTE PTR [edx],al
c0001ecd:	89 d8                	mov    eax,ebx
c0001ecf:	c1 e8 0c             	shr    eax,0xc
c0001ed2:	83 e0 3f             	and    eax,0x3f
c0001ed5:	83 c8 80             	or     eax,0xffffff80
c0001ed8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001edb:	89 d8                	mov    eax,ebx
c0001edd:	83 e3 3f             	and    ebx,0x3f
c0001ee0:	c1 e8 06             	shr    eax,0x6
c0001ee3:	83 cb 80             	or     ebx,0xffffff80
c0001ee6:	83 e0 3f             	and    eax,0x3f
c0001ee9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eec:	83 c8 80             	or     eax,0xffffff80
c0001eef:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ef2:	b0 04                	mov    al,0x4
c0001ef4:	eb 02                	jmp    c0001ef8 <put_utf+0xf7>
c0001ef6:	31 c0                	xor    eax,eax
c0001ef8:	5b                   	pop    ebx
c0001ef9:	c3                   	ret    

c0001efa <clst2sect>:
c0001efa:	89 c1                	mov    ecx,eax
c0001efc:	83 ea 02             	sub    edx,0x2
c0001eff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f02:	83 e8 02             	sub    eax,0x2
c0001f05:	39 d0                	cmp    eax,edx
c0001f07:	76 0d                	jbe    c0001f16 <clst2sect+0x1c>
c0001f09:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f0d:	f7 e2                	mul    edx
c0001f0f:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f12:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f15:	c3                   	ret    
c0001f16:	31 c0                	xor    eax,eax
c0001f18:	31 d2                	xor    edx,edx
c0001f1a:	c3                   	ret    

c0001f1b <clmt_clust>:
c0001f1b:	57                   	push   edi
c0001f1c:	89 cf                	mov    edi,ecx
c0001f1e:	56                   	push   esi
c0001f1f:	89 d6                	mov    esi,edx
c0001f21:	53                   	push   ebx
c0001f22:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f26:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f29:	89 f2                	mov    edx,esi
c0001f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f2d:	c1 ef 09             	shr    edi,0x9
c0001f30:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f34:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f37:	89 f9                	mov    ecx,edi
c0001f39:	31 ff                	xor    edi,edi
c0001f3b:	57                   	push   edi
c0001f3c:	56                   	push   esi
c0001f3d:	51                   	push   ecx
c0001f3e:	52                   	push   edx
c0001f3f:	e8 68 49 02 00       	call   c00268ac <__udivdi3>
c0001f44:	83 c4 10             	add    esp,0x10
c0001f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f49:	85 d2                	test   edx,edx
c0001f4b:	74 10                	je     c0001f5d <clmt_clust+0x42>
c0001f4d:	39 d0                	cmp    eax,edx
c0001f4f:	72 07                	jb     c0001f58 <clmt_clust+0x3d>
c0001f51:	29 d0                	sub    eax,edx
c0001f53:	83 c3 08             	add    ebx,0x8
c0001f56:	eb ef                	jmp    c0001f47 <clmt_clust+0x2c>
c0001f58:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f5b:	89 c2                	mov    edx,eax
c0001f5d:	5b                   	pop    ebx
c0001f5e:	89 d0                	mov    eax,edx
c0001f60:	5e                   	pop    esi
c0001f61:	5f                   	pop    edi
c0001f62:	c3                   	ret    

c0001f63 <pick_lfn>:
c0001f63:	55                   	push   ebp
c0001f64:	57                   	push   edi
c0001f65:	56                   	push   esi
c0001f66:	89 d6                	mov    esi,edx
c0001f68:	53                   	push   ebx
c0001f69:	89 c3                	mov    ebx,eax
c0001f6b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f6e:	e8 ee fc ff ff       	call   c0001c61 <ld_word>
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 04                	je     c0001f7c <pick_lfn+0x19>
c0001f78:	31 c0                	xor    eax,eax
c0001f7a:	eb 5c                	jmp    c0001fd8 <pick_lfn+0x75>
c0001f7c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f7f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f84:	83 e1 bf             	and    ecx,0xffffffbf
c0001f87:	31 ff                	xor    edi,edi
c0001f89:	49                   	dec    ecx
c0001f8a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f8d:	0f b6 87 40 93 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6cc0]
c0001f94:	01 f0                	add    eax,esi
c0001f96:	e8 c6 fc ff ff       	call   c0001c61 <ld_word>
c0001f9b:	66 85 ed             	test   bp,bp
c0001f9e:	74 11                	je     c0001fb1 <pick_lfn+0x4e>
c0001fa0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fa6:	77 d0                	ja     c0001f78 <pick_lfn+0x15>
c0001fa8:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fac:	89 c5                	mov    ebp,eax
c0001fae:	41                   	inc    ecx
c0001faf:	eb 04                	jmp    c0001fb5 <pick_lfn+0x52>
c0001fb1:	66 40                	inc    ax
c0001fb3:	75 c3                	jne    c0001f78 <pick_lfn+0x15>
c0001fb5:	47                   	inc    edi
c0001fb6:	83 ff 0d             	cmp    edi,0xd
c0001fb9:	75 d2                	jne    c0001f8d <pick_lfn+0x2a>
c0001fbb:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fbe:	74 13                	je     c0001fd3 <pick_lfn+0x70>
c0001fc0:	66 85 ed             	test   bp,bp
c0001fc3:	74 0e                	je     c0001fd3 <pick_lfn+0x70>
c0001fc5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fcb:	77 ab                	ja     c0001f78 <pick_lfn+0x15>
c0001fcd:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fd3:	b8 01 00 00 00       	mov    eax,0x1
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	5f                   	pop    edi
c0001fdb:	5d                   	pop    ebp
c0001fdc:	c3                   	ret    

c0001fdd <put_lfn>:
c0001fdd:	55                   	push   ebp
c0001fde:	31 ed                	xor    ebp,ebp
c0001fe0:	57                   	push   edi
c0001fe1:	89 d7                	mov    edi,edx
c0001fe3:	56                   	push   esi
c0001fe4:	31 f6                	xor    esi,esi
c0001fe6:	53                   	push   ebx
c0001fe7:	83 ec 08             	sub    esp,0x8
c0001fea:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fed:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ff5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ffb:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ffe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002001:	31 d2                	xor    edx,edx
c0002003:	e8 cb fc ff ff       	call   c0001cd3 <st_word>
c0002008:	0f b6 d9             	movzx  ebx,cl
c000200b:	4b                   	dec    ebx
c000200c:	6b db 0d             	imul   ebx,ebx,0xd
c000200f:	66 83 fe ff          	cmp    si,0xffff
c0002013:	74 08                	je     c000201d <put_lfn+0x40>
c0002015:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002018:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000201c:	43                   	inc    ebx
c000201d:	0f b6 85 40 93 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6cc0]
c0002024:	0f b7 d6             	movzx  edx,si
c0002027:	01 f8                	add    eax,edi
c0002029:	e8 a5 fc ff ff       	call   c0001cd3 <st_word>
c000202e:	66 85 f6             	test   si,si
c0002031:	75 03                	jne    c0002036 <put_lfn+0x59>
c0002033:	83 ce ff             	or     esi,0xffffffff
c0002036:	45                   	inc    ebp
c0002037:	83 fd 0d             	cmp    ebp,0xd
c000203a:	75 d3                	jne    c000200f <put_lfn+0x32>
c000203c:	66 46                	inc    si
c000203e:	74 0a                	je     c000204a <put_lfn+0x6d>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002048:	75 09                	jne    c0002053 <put_lfn+0x76>
c000204a:	88 c8                	mov    al,cl
c000204c:	83 c8 40             	or     eax,0x40
c000204f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002053:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002057:	88 07                	mov    BYTE PTR [edi],al
c0002059:	83 c4 08             	add    esp,0x8
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <gen_numname>:
c0002061:	57                   	push   edi
c0002062:	89 cf                	mov    edi,ecx
c0002064:	56                   	push   esi
c0002065:	b9 0b 00 00 00       	mov    ecx,0xb
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 10             	sub    esp,0x10
c0002070:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002074:	e8 67 fc ff ff       	call   c0001ce0 <mem_cpy>
c0002079:	83 fb 05             	cmp    ebx,0x5
c000207c:	76 2d                	jbe    c00020ab <gen_numname+0x4a>
c000207e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002081:	66 85 c0             	test   ax,ax
c0002084:	74 25                	je     c00020ab <gen_numname+0x4a>
c0002086:	83 c7 02             	add    edi,0x2
c0002089:	ba 10 00 00 00       	mov    edx,0x10
c000208e:	01 db                	add    ebx,ebx
c0002090:	89 c1                	mov    ecx,eax
c0002092:	66 d1 e8             	shr    ax,1
c0002095:	83 e1 01             	and    ecx,0x1
c0002098:	01 cb                	add    ebx,ecx
c000209a:	0f ba e3 10          	bt     ebx,0x10
c000209e:	73 06                	jae    c00020a6 <gen_numname+0x45>
c00020a0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020a6:	4a                   	dec    edx
c00020a7:	75 e5                	jne    c000208e <gen_numname+0x2d>
c00020a9:	eb d3                	jmp    c000207e <gen_numname+0x1d>
c00020ab:	b8 07 00 00 00       	mov    eax,0x7
c00020b0:	88 d9                	mov    cl,bl
c00020b2:	83 e1 0f             	and    ecx,0xf
c00020b5:	8d 51 30             	lea    edx,[ecx+0x30]
c00020b8:	80 fa 39             	cmp    dl,0x39
c00020bb:	76 03                	jbe    c00020c0 <gen_numname+0x5f>
c00020bd:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020c3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020c7:	89 da                	mov    edx,ebx
c00020c9:	c1 ea 04             	shr    edx,0x4
c00020cc:	83 fb 0f             	cmp    ebx,0xf
c00020cf:	76 06                	jbe    c00020d7 <gen_numname+0x76>
c00020d1:	89 c8                	mov    eax,ecx
c00020d3:	89 d3                	mov    ebx,edx
c00020d5:	eb d9                	jmp    c00020b0 <gen_numname+0x4f>
c00020d7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020dc:	31 d2                	xor    edx,edx
c00020de:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020e4:	39 ca                	cmp    edx,ecx
c00020e6:	73 18                	jae    c0002100 <gen_numname+0x9f>
c00020e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020eb:	3c 20                	cmp    al,0x20
c00020ed:	74 11                	je     c0002100 <gen_numname+0x9f>
c00020ef:	e8 41 fc ff ff       	call   c0001d35 <dbc_1st>
c00020f4:	85 c0                	test   eax,eax
c00020f6:	74 05                	je     c00020fd <gen_numname+0x9c>
c00020f8:	39 d3                	cmp    ebx,edx
c00020fa:	74 04                	je     c0002100 <gen_numname+0x9f>
c00020fc:	42                   	inc    edx
c00020fd:	42                   	inc    edx
c00020fe:	eb e1                	jmp    c00020e1 <gen_numname+0x80>
c0002100:	b0 20                	mov    al,0x20
c0002102:	83 f9 07             	cmp    ecx,0x7
c0002105:	77 05                	ja     c000210c <gen_numname+0xab>
c0002107:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000210b:	41                   	inc    ecx
c000210c:	42                   	inc    edx
c000210d:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002111:	83 fa 07             	cmp    edx,0x7
c0002114:	76 ea                	jbe    c0002100 <gen_numname+0x9f>
c0002116:	83 c4 10             	add    esp,0x10
c0002119:	5b                   	pop    ebx
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	c3                   	ret    

c000211d <sum_sfn>:
c000211d:	31 c9                	xor    ecx,ecx
c000211f:	31 d2                	xor    edx,edx
c0002121:	d0 ca                	ror    dl,1
c0002123:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002126:	41                   	inc    ecx
c0002127:	83 f9 0b             	cmp    ecx,0xb
c000212a:	75 f5                	jne    c0002121 <sum_sfn+0x4>
c000212c:	88 d0                	mov    al,dl
c000212e:	c3                   	ret    

c000212f <xdir_sum>:
c000212f:	56                   	push   esi
c0002130:	31 c9                	xor    ecx,ecx
c0002132:	53                   	push   ebx
c0002133:	31 d2                	xor    edx,edx
c0002135:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002139:	43                   	inc    ebx
c000213a:	c1 e3 05             	shl    ebx,0x5
c000213d:	83 fa 02             	cmp    edx,0x2
c0002140:	74 0b                	je     c000214d <xdir_sum+0x1e>
c0002142:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002146:	66 d1 c9             	ror    cx,1
c0002149:	01 f1                	add    ecx,esi
c000214b:	eb 05                	jmp    c0002152 <xdir_sum+0x23>
c000214d:	ba 03 00 00 00       	mov    edx,0x3
c0002152:	42                   	inc    edx
c0002153:	39 d3                	cmp    ebx,edx
c0002155:	77 e6                	ja     c000213d <xdir_sum+0xe>
c0002157:	89 c8                	mov    eax,ecx
c0002159:	5b                   	pop    ebx
c000215a:	5e                   	pop    esi
c000215b:	c3                   	ret    

c000215c <xsum32>:
c000215c:	d1 ca                	ror    edx,1
c000215e:	0f b6 c0             	movzx  eax,al
c0002161:	01 d0                	add    eax,edx
c0002163:	c3                   	ret    

c0002164 <get_xfileinfo>:
c0002164:	55                   	push   ebp
c0002165:	31 c9                	xor    ecx,ecx
c0002167:	57                   	push   edi
c0002168:	bd 40 00 00 00       	mov    ebp,0x40
c000216d:	56                   	push   esi
c000216e:	31 ff                	xor    edi,edi
c0002170:	53                   	push   ebx
c0002171:	89 c6                	mov    esi,eax
c0002173:	83 ec 0c             	sub    esp,0xc
c0002176:	89 d3                	mov    ebx,edx
c0002178:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000217f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002183:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002186:	76 6d                	jbe    c00021f5 <get_xfileinfo+0x91>
c0002188:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000218e:	76 0b                	jbe    c000219b <get_xfileinfo+0x37>
c0002190:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002194:	bf 01 00 00 00       	mov    edi,0x1
c0002199:	eb 63                	jmp    c00021fe <get_xfileinfo+0x9a>
c000219b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a1:	75 03                	jne    c00021a6 <get_xfileinfo+0x42>
c00021a3:	83 c5 02             	add    ebp,0x2
c00021a6:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021a9:	83 c5 02             	add    ebp,0x2
c00021ac:	e8 b0 fa ff ff       	call   c0001c61 <ld_word>
c00021b1:	ff 04 24             	inc    DWORD PTR [esp]
c00021b4:	66 85 c9             	test   cx,cx
c00021b7:	75 0d                	jne    c00021c6 <get_xfileinfo+0x62>
c00021b9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021bf:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021c4:	76 2b                	jbe    c00021f1 <get_xfileinfo+0x8d>
c00021c6:	c1 e1 10             	shl    ecx,0x10
c00021c9:	ba ff 00 00 00       	mov    edx,0xff
c00021ce:	0f b7 c0             	movzx  eax,ax
c00021d1:	29 fa                	sub    edx,edi
c00021d3:	09 c8                	or     eax,ecx
c00021d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021d9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e1:	e8 1b fc ff ff       	call   c0001e01 <put_utf>
c00021e6:	84 c0                	test   al,al
c00021e8:	74 a6                	je     c0002190 <get_xfileinfo+0x2c>
c00021ea:	0f b6 c0             	movzx  eax,al
c00021ed:	01 c7                	add    edi,eax
c00021ef:	31 c0                	xor    eax,eax
c00021f1:	89 c1                	mov    ecx,eax
c00021f3:	eb 8a                	jmp    c000217f <get_xfileinfo+0x1b>
c00021f5:	85 ff                	test   edi,edi
c00021f7:	74 97                	je     c0002190 <get_xfileinfo+0x2c>
c00021f9:	66 85 c9             	test   cx,cx
c00021fc:	75 92                	jne    c0002190 <get_xfileinfo+0x2c>
c00021fe:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002203:	31 c0                	xor    eax,eax
c0002205:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002209:	31 d2                	xor    edx,edx
c000220b:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000220e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002211:	80 e1 10             	and    cl,0x10
c0002214:	75 08                	jne    c000221e <get_xfileinfo+0xba>
c0002216:	8d 46 38             	lea    eax,[esi+0x38]
c0002219:	e8 68 fa ff ff       	call   c0001c86 <ld_qword>
c000221e:	89 03                	mov    DWORD PTR [ebx],eax
c0002220:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002223:	8d 46 0c             	lea    eax,[esi+0xc]
c0002226:	e8 36 fa ff ff       	call   c0001c61 <ld_word>
c000222b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000222f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002232:	e8 2a fa ff ff       	call   c0001c61 <ld_word>
c0002237:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000223b:	83 c4 0c             	add    esp,0xc
c000223e:	5b                   	pop    ebx
c000223f:	5e                   	pop    esi
c0002240:	5f                   	pop    edi
c0002241:	5d                   	pop    ebp
c0002242:	c3                   	ret    

c0002243 <get_ldnumber>:
c0002243:	8b 10                	mov    edx,DWORD PTR [eax]
c0002245:	85 d2                	test   edx,edx
c0002247:	74 14                	je     c000225d <get_ldnumber+0x1a>
c0002249:	56                   	push   esi
c000224a:	53                   	push   ebx
c000224b:	89 d3                	mov    ebx,edx
c000224d:	43                   	inc    ebx
c000224e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002251:	80 f9 1f             	cmp    cl,0x1f
c0002254:	76 0d                	jbe    c0002263 <get_ldnumber+0x20>
c0002256:	80 f9 3a             	cmp    cl,0x3a
c0002259:	75 f2                	jne    c000224d <get_ldnumber+0xa>
c000225b:	eb 0a                	jmp    c0002267 <get_ldnumber+0x24>
c000225d:	83 c9 ff             	or     ecx,0xffffffff
c0002260:	89 c8                	mov    eax,ecx
c0002262:	c3                   	ret    
c0002263:	31 c9                	xor    ecx,ecx
c0002265:	eb 24                	jmp    c000228b <get_ldnumber+0x48>
c0002267:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000226d:	80 f9 09             	cmp    cl,0x9
c0002270:	77 16                	ja     c0002288 <get_ldnumber+0x45>
c0002272:	83 c2 02             	add    edx,0x2
c0002275:	83 c9 ff             	or     ecx,0xffffffff
c0002278:	39 d3                	cmp    ebx,edx
c000227a:	75 0f                	jne    c000228b <get_ldnumber+0x48>
c000227c:	89 f2                	mov    edx,esi
c000227e:	89 18                	mov    DWORD PTR [eax],ebx
c0002280:	0f be ca             	movsx  ecx,dl
c0002283:	83 e9 30             	sub    ecx,0x30
c0002286:	eb 03                	jmp    c000228b <get_ldnumber+0x48>
c0002288:	83 c9 ff             	or     ecx,0xffffffff
c000228b:	89 c8                	mov    eax,ecx
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <crc32>:
c0002290:	56                   	push   esi
c0002291:	89 d6                	mov    esi,edx
c0002293:	53                   	push   ebx
c0002294:	b2 01                	mov    dl,0x1
c0002296:	bb 08 00 00 00       	mov    ebx,0x8
c000229b:	89 f1                	mov    ecx,esi
c000229d:	84 d1                	test   cl,dl
c000229f:	0f 95 c1             	setne  cl
c00022a2:	0f b6 c9             	movzx  ecx,cl
c00022a5:	31 c1                	xor    ecx,eax
c00022a7:	89 c8                	mov    eax,ecx
c00022a9:	d1 e8                	shr    eax,1
c00022ab:	80 e1 01             	and    cl,0x1
c00022ae:	74 05                	je     c00022b5 <crc32+0x25>
c00022b0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022b5:	d1 e2                	shl    edx,1
c00022b7:	4b                   	dec    ebx
c00022b8:	75 e1                	jne    c000229b <crc32+0xb>
c00022ba:	5b                   	pop    ebx
c00022bb:	5e                   	pop    esi
c00022bc:	c3                   	ret    

c00022bd <test_gpt_header>:
c00022bd:	55                   	push   ebp
c00022be:	b9 10 00 00 00       	mov    ecx,0x10
c00022c3:	57                   	push   edi
c00022c4:	ba 40 92 02 c0       	mov    edx,0xc0029240
c00022c9:	56                   	push   esi
c00022ca:	31 ff                	xor    edi,edi
c00022cc:	53                   	push   ebx
c00022cd:	89 c3                	mov    ebx,eax
c00022cf:	e8 2c fa ff ff       	call   c0001d00 <mem_cmp>
c00022d4:	85 c0                	test   eax,eax
c00022d6:	75 55                	jne    c000232d <test_gpt_header+0x70>
c00022d8:	89 c7                	mov    edi,eax
c00022da:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022df:	83 ce ff             	or     esi,0xffffffff
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	83 fd 03             	cmp    ebp,0x3
c00022e7:	76 05                	jbe    c00022ee <test_gpt_header+0x31>
c00022e9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022ee:	89 f0                	mov    eax,esi
c00022f0:	45                   	inc    ebp
c00022f1:	e8 9a ff ff ff       	call   c0002290 <crc32>
c00022f6:	83 fd 4c             	cmp    ebp,0x4c
c00022f9:	89 c6                	mov    esi,eax
c00022fb:	75 e5                	jne    c00022e2 <test_gpt_header+0x25>
c00022fd:	8d 43 10             	lea    eax,[ebx+0x10]
c0002300:	f7 d6                	not    esi
c0002302:	e8 67 f9 ff ff       	call   c0001c6e <ld_dword>
c0002307:	39 c6                	cmp    esi,eax
c0002309:	75 22                	jne    c000232d <test_gpt_header+0x70>
c000230b:	8d 43 54             	lea    eax,[ebx+0x54]
c000230e:	e8 5b f9 ff ff       	call   c0001c6e <ld_dword>
c0002313:	83 c0 80             	add    eax,0xffffff80
c0002316:	75 15                	jne    c000232d <test_gpt_header+0x70>
c0002318:	8d 43 50             	lea    eax,[ebx+0x50]
c000231b:	e8 4e f9 ff ff       	call   c0001c6e <ld_dword>
c0002320:	3d 80 00 00 00       	cmp    eax,0x80
c0002325:	0f 96 c0             	setbe  al
c0002328:	0f b6 c0             	movzx  eax,al
c000232b:	89 c7                	mov    edi,eax
c000232d:	5b                   	pop    ebx
c000232e:	89 f8                	mov    eax,edi
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    

c0002334 <make_rand>:
c0002334:	56                   	push   esi
c0002335:	85 c0                	test   eax,eax
c0002337:	53                   	push   ebx
c0002338:	75 05                	jne    c000233f <make_rand+0xb>
c000233a:	b8 01 00 00 00       	mov    eax,0x1
c000233f:	01 d1                	add    ecx,edx
c0002341:	bb 08 00 00 00       	mov    ebx,0x8
c0002346:	89 c6                	mov    esi,eax
c0002348:	d1 e8                	shr    eax,1
c000234a:	83 e6 01             	and    esi,0x1
c000234d:	85 f6                	test   esi,esi
c000234f:	74 05                	je     c0002356 <make_rand+0x22>
c0002351:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002356:	4b                   	dec    ebx
c0002357:	75 ed                	jne    c0002346 <make_rand+0x12>
c0002359:	42                   	inc    edx
c000235a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000235d:	39 ca                	cmp    edx,ecx
c000235f:	75 e0                	jne    c0002341 <make_rand+0xd>
c0002361:	5b                   	pop    ebx
c0002362:	5e                   	pop    esi
c0002363:	c3                   	ret    

c0002364 <validate>:
c0002364:	56                   	push   esi
c0002365:	53                   	push   ebx
c0002366:	89 d6                	mov    esi,edx
c0002368:	51                   	push   ecx
c0002369:	85 c0                	test   eax,eax
c000236b:	75 09                	jne    c0002376 <validate+0x12>
c000236d:	b8 09 00 00 00       	mov    eax,0x9
c0002372:	31 c9                	xor    ecx,ecx
c0002374:	eb 2f                	jmp    c00023a5 <validate+0x41>
c0002376:	89 c3                	mov    ebx,eax
c0002378:	8b 00                	mov    eax,DWORD PTR [eax]
c000237a:	85 c0                	test   eax,eax
c000237c:	74 ef                	je     c000236d <validate+0x9>
c000237e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002381:	74 ea                	je     c000236d <validate+0x9>
c0002383:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002387:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000238b:	75 e0                	jne    c000236d <validate+0x9>
c000238d:	83 ec 0c             	sub    esp,0xc
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 76 f8 ff ff       	call   c0001c10 <disk_status>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	a8 01                	test   al,0x1
c000239f:	75 cc                	jne    c000236d <validate+0x9>
c00023a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023a3:	31 c0                	xor    eax,eax
c00023a5:	89 0e                	mov    DWORD PTR [esi],ecx
c00023a7:	5a                   	pop    edx
c00023a8:	5b                   	pop    ebx
c00023a9:	5e                   	pop    esi
c00023aa:	c3                   	ret    

c00023ab <sync_window>:
c00023ab:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023af:	0f 84 85 00 00 00    	je     c000243a <sync_window+0x8f>
c00023b5:	55                   	push   ebp
c00023b6:	8d 68 54             	lea    ebp,[eax+0x54]
c00023b9:	57                   	push   edi
c00023ba:	56                   	push   esi
c00023bb:	53                   	push   ebx
c00023bc:	89 c3                	mov    ebx,eax
c00023be:	83 ec 28             	sub    esp,0x28
c00023c1:	6a 01                	push   0x1
c00023c3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023c6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023c9:	55                   	push   ebp
c00023ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ce:	50                   	push   eax
c00023cf:	e8 58 f8 ff ff       	call   c0001c2c <disk_write>
c00023d4:	83 c4 20             	add    esp,0x20
c00023d7:	ba 01 00 00 00       	mov    edx,0x1
c00023dc:	85 c0                	test   eax,eax
c00023de:	75 50                	jne    c0002430 <sync_window+0x85>
c00023e0:	31 ff                	xor    edi,edi
c00023e2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023e9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ed:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023f3:	89 c6                	mov    esi,eax
c00023f5:	89 d7                	mov    edi,edx
c00023f7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023fa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023fe:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002401:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002405:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002409:	73 23                	jae    c000242e <sync_window+0x83>
c000240b:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000240f:	75 1d                	jne    c000242e <sync_window+0x83>
c0002411:	83 ec 0c             	sub    esp,0xc
c0002414:	6a 01                	push   0x1
c0002416:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000241a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000241e:	52                   	push   edx
c000241f:	50                   	push   eax
c0002420:	55                   	push   ebp
c0002421:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002425:	50                   	push   eax
c0002426:	e8 01 f8 ff ff       	call   c0001c2c <disk_write>
c000242b:	83 c4 20             	add    esp,0x20
c000242e:	31 d2                	xor    edx,edx
c0002430:	83 c4 1c             	add    esp,0x1c
c0002433:	89 d0                	mov    eax,edx
c0002435:	5b                   	pop    ebx
c0002436:	5e                   	pop    esi
c0002437:	5f                   	pop    edi
c0002438:	5d                   	pop    ebp
c0002439:	c3                   	ret    
c000243a:	31 d2                	xor    edx,edx
c000243c:	89 d0                	mov    eax,edx
c000243e:	c3                   	ret    

c000243f <move_window>:
c000243f:	56                   	push   esi
c0002440:	53                   	push   ebx
c0002441:	89 c3                	mov    ebx,eax
c0002443:	83 ec 14             	sub    esp,0x14
c0002446:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002449:	75 07                	jne    c0002452 <move_window+0x13>
c000244b:	31 f6                	xor    esi,esi
c000244d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002450:	74 59                	je     c00024ab <move_window+0x6c>
c0002452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002456:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245a:	89 d8                	mov    eax,ebx
c000245c:	e8 4a ff ff ff       	call   c00023ab <sync_window>
c0002461:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002465:	89 c6                	mov    esi,eax
c0002467:	85 c0                	test   eax,eax
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	75 3c                	jne    c00024ab <move_window+0x6c>
c000246f:	83 ec 0c             	sub    esp,0xc
c0002472:	8d 43 54             	lea    eax,[ebx+0x54]
c0002475:	6a 01                	push   0x1
c0002477:	51                   	push   ecx
c0002478:	52                   	push   edx
c0002479:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000247d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002481:	50                   	push   eax
c0002482:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002486:	50                   	push   eax
c0002487:	e8 8a f7 ff ff       	call   c0001c16 <disk_read>
c000248c:	83 c4 20             	add    esp,0x20
c000248f:	85 c0                	test   eax,eax
c0002491:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002495:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002499:	74 0a                	je     c00024a5 <move_window+0x66>
c000249b:	83 ca ff             	or     edx,0xffffffff
c000249e:	be 01 00 00 00       	mov    esi,0x1
c00024a3:	89 d1                	mov    ecx,edx
c00024a5:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024a8:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024ab:	89 f0                	mov    eax,esi
c00024ad:	83 c4 14             	add    esp,0x14
c00024b0:	5b                   	pop    ebx
c00024b1:	5e                   	pop    esi
c00024b2:	c3                   	ret    

c00024b3 <check_fs>:
c00024b3:	53                   	push   ebx
c00024b4:	89 c3                	mov    ebx,eax
c00024b6:	83 ec 08             	sub    esp,0x8
c00024b9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024bd:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024c4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024cb:	e8 6f ff ff ff       	call   c000243f <move_window>
c00024d0:	ba 04 00 00 00       	mov    edx,0x4
c00024d5:	85 c0                	test   eax,eax
c00024d7:	0f 85 89 00 00 00    	jne    c0002566 <check_fs+0xb3>
c00024dd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024e3:	e8 79 f7 ff ff       	call   c0001c61 <ld_word>
c00024e8:	ba 03 00 00 00       	mov    edx,0x3
c00024ed:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f1:	75 73                	jne    c0002566 <check_fs+0xb3>
c00024f3:	ba 60 93 02 c0       	mov    edx,0xc0029360
c00024f8:	8d 43 54             	lea    eax,[ebx+0x54]
c00024fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0002500:	e8 fb f7 ff ff       	call   c0001d00 <mem_cmp>
c0002505:	ba 01 00 00 00       	mov    edx,0x1
c000250a:	85 c0                	test   eax,eax
c000250c:	74 58                	je     c0002566 <check_fs+0xb3>
c000250e:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002511:	8d 50 18             	lea    edx,[eax+0x18]
c0002514:	80 fa 01             	cmp    dl,0x1
c0002517:	76 09                	jbe    c0002522 <check_fs+0x6f>
c0002519:	ba 02 00 00 00       	mov    edx,0x2
c000251e:	3c eb                	cmp    al,0xeb
c0002520:	75 44                	jne    c0002566 <check_fs+0xb3>
c0002522:	ba c4 c6 02 c0       	mov    edx,0xc002c6c4
c0002527:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000252d:	b9 03 00 00 00       	mov    ecx,0x3
c0002532:	e8 c9 f7 ff ff       	call   c0001d00 <mem_cmp>
c0002537:	31 d2                	xor    edx,edx
c0002539:	85 c0                	test   eax,eax
c000253b:	74 29                	je     c0002566 <check_fs+0xb3>
c000253d:	ba 6c 93 02 c0       	mov    edx,0xc002936c
c0002542:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002548:	b9 05 00 00 00       	mov    ecx,0x5
c000254d:	e8 ae f7 ff ff       	call   c0001d00 <mem_cmp>
c0002552:	31 d2                	xor    edx,edx
c0002554:	85 c0                	test   eax,eax
c0002556:	74 0e                	je     c0002566 <check_fs+0xb3>
c0002558:	31 d2                	xor    edx,edx
c000255a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002561:	0f 95 c2             	setne  dl
c0002564:	01 d2                	add    edx,edx
c0002566:	89 d0                	mov    eax,edx
c0002568:	83 c4 08             	add    esp,0x8
c000256b:	5b                   	pop    ebx
c000256c:	c3                   	ret    

c000256d <find_volume>:
c000256d:	55                   	push   ebp
c000256e:	31 c9                	xor    ecx,ecx
c0002570:	57                   	push   edi
c0002571:	56                   	push   esi
c0002572:	89 d6                	mov    esi,edx
c0002574:	53                   	push   ebx
c0002575:	31 d2                	xor    edx,edx
c0002577:	83 ec 3c             	sub    esp,0x3c
c000257a:	89 c3                	mov    ebx,eax
c000257c:	e8 32 ff ff ff       	call   c00024b3 <check_fs>
c0002581:	83 f8 02             	cmp    eax,0x2
c0002584:	74 0e                	je     c0002594 <find_volume+0x27>
c0002586:	0f 87 5d 01 00 00    	ja     c00026e9 <find_volume+0x17c>
c000258c:	85 f6                	test   esi,esi
c000258e:	0f 84 55 01 00 00    	je     c00026e9 <find_volume+0x17c>
c0002594:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000259b:	0f 85 dd 00 00 00    	jne    c000267e <find_volume+0x111>
c00025a1:	31 c9                	xor    ecx,ecx
c00025a3:	ba 01 00 00 00       	mov    edx,0x1
c00025a8:	89 d8                	mov    eax,ebx
c00025aa:	e8 90 fe ff ff       	call   c000243f <move_window>
c00025af:	85 c0                	test   eax,eax
c00025b1:	74 0a                	je     c00025bd <find_volume+0x50>
c00025b3:	b8 04 00 00 00       	mov    eax,0x4
c00025b8:	e9 2c 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025bd:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c0:	89 e8                	mov    eax,ebp
c00025c2:	e8 f6 fc ff ff       	call   c00022bd <test_gpt_header>
c00025c7:	85 c0                	test   eax,eax
c00025c9:	75 0a                	jne    c00025d5 <find_volume+0x68>
c00025cb:	b8 03 00 00 00       	mov    eax,0x3
c00025d0:	e9 14 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025d5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025db:	e8 8e f6 ff ff       	call   c0001c6e <ld_dword>
c00025e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025e4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025ea:	e8 97 f6 ff ff       	call   c0001c86 <ld_qword>
c00025ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002607:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000260b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000260f:	74 ba                	je     c00025cb <find_volume+0x5e>
c0002611:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002615:	31 c9                	xor    ecx,ecx
c0002617:	c1 e7 07             	shl    edi,0x7
c000261a:	89 d8                	mov    eax,ebx
c000261c:	89 fa                	mov    edx,edi
c000261e:	c1 ea 09             	shr    edx,0x9
c0002621:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002625:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002629:	e8 11 fe ff ff       	call   c000243f <move_window>
c000262e:	85 c0                	test   eax,eax
c0002630:	75 81                	jne    c00025b3 <find_volume+0x46>
c0002632:	81 e7 80 01 00 00    	and    edi,0x180
c0002638:	b9 10 00 00 00       	mov    ecx,0x10
c000263d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002641:	ba 50 93 02 c0       	mov    edx,0xc0029350
c0002646:	e8 b5 f6 ff ff       	call   c0001d00 <mem_cmp>
c000264b:	85 c0                	test   eax,eax
c000264d:	75 29                	jne    c0002678 <find_volume+0x10b>
c000264f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002653:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002657:	e8 2a f6 ff ff       	call   c0001c86 <ld_qword>
c000265c:	89 d1                	mov    ecx,edx
c000265e:	89 c2                	mov    edx,eax
c0002660:	89 d8                	mov    eax,ebx
c0002662:	e8 4c fe ff ff       	call   c00024b3 <check_fs>
c0002667:	85 f6                	test   esi,esi
c0002669:	75 07                	jne    c0002672 <find_volume+0x105>
c000266b:	83 f8 01             	cmp    eax,0x1
c000266e:	77 08                	ja     c0002678 <find_volume+0x10b>
c0002670:	eb 77                	jmp    c00026e9 <find_volume+0x17c>
c0002672:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002676:	74 71                	je     c00026e9 <find_volume+0x17c>
c0002678:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000267c:	eb 89                	jmp    c0002607 <find_volume+0x9a>
c000267e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002682:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002688:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000268e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002692:	89 cd                	mov    ebp,ecx
c0002694:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002698:	89 f8                	mov    eax,edi
c000269a:	83 c7 10             	add    edi,0x10
c000269d:	e8 cc f5 ff ff       	call   c0001c6e <ld_dword>
c00026a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026a6:	89 01                	mov    DWORD PTR [ecx],eax
c00026a8:	83 c1 04             	add    ecx,0x4
c00026ab:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026af:	75 e3                	jne    c0002694 <find_volume+0x127>
c00026b1:	31 ff                	xor    edi,edi
c00026b3:	85 f6                	test   esi,esi
c00026b5:	74 03                	je     c00026ba <find_volume+0x14d>
c00026b7:	8d 7e ff             	lea    edi,[esi-0x1]
c00026ba:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026be:	85 d2                	test   edx,edx
c00026c0:	74 14                	je     c00026d6 <find_volume+0x169>
c00026c2:	31 c9                	xor    ecx,ecx
c00026c4:	89 d8                	mov    eax,ebx
c00026c6:	e8 e8 fd ff ff       	call   c00024b3 <check_fs>
c00026cb:	83 f8 01             	cmp    eax,0x1
c00026ce:	76 19                	jbe    c00026e9 <find_volume+0x17c>
c00026d0:	85 f6                	test   esi,esi
c00026d2:	74 0f                	je     c00026e3 <find_volume+0x176>
c00026d4:	eb 13                	jmp    c00026e9 <find_volume+0x17c>
c00026d6:	85 f6                	test   esi,esi
c00026d8:	0f 85 ed fe ff ff    	jne    c00025cb <find_volume+0x5e>
c00026de:	b8 03 00 00 00       	mov    eax,0x3
c00026e3:	47                   	inc    edi
c00026e4:	83 ff 03             	cmp    edi,0x3
c00026e7:	76 d1                	jbe    c00026ba <find_volume+0x14d>
c00026e9:	83 c4 3c             	add    esp,0x3c
c00026ec:	5b                   	pop    ebx
c00026ed:	5e                   	pop    esi
c00026ee:	5f                   	pop    edi
c00026ef:	5d                   	pop    ebp
c00026f0:	c3                   	ret    

c00026f1 <mount_volume>:
c00026f1:	55                   	push   ebp
c00026f2:	57                   	push   edi
c00026f3:	89 cf                	mov    edi,ecx
c00026f5:	56                   	push   esi
c00026f6:	53                   	push   ebx
c00026f7:	bb 0b 00 00 00       	mov    ebx,0xb
c00026fc:	83 ec 3c             	sub    esp,0x3c
c00026ff:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002705:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002709:	e8 35 fb ff ff       	call   c0002243 <get_ldnumber>
c000270e:	85 c0                	test   eax,eax
c0002710:	0f 88 3a 05 00 00    	js     c0002c50 <mount_volume+0x55f>
c0002716:	8b 2c 85 40 e2 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1dc0]
c000271d:	89 c6                	mov    esi,eax
c000271f:	bb 0c 00 00 00       	mov    ebx,0xc
c0002724:	85 ed                	test   ebp,ebp
c0002726:	0f 84 24 05 00 00    	je     c0002c50 <mount_volume+0x55f>
c000272c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002730:	83 e7 fe             	and    edi,0xfffffffe
c0002733:	89 2a                	mov    DWORD PTR [edx],ebp
c0002735:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002739:	74 32                	je     c000276d <mount_volume+0x7c>
c000273b:	83 ec 0c             	sub    esp,0xc
c000273e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002742:	50                   	push   eax
c0002743:	e8 c8 f4 ff ff       	call   c0001c10 <disk_status>
c0002748:	83 c4 10             	add    esp,0x10
c000274b:	a8 01                	test   al,0x1
c000274d:	75 1e                	jne    c000276d <mount_volume+0x7c>
c000274f:	31 db                	xor    ebx,ebx
c0002751:	89 f9                	mov    ecx,edi
c0002753:	84 c9                	test   cl,cl
c0002755:	0f 84 f5 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c000275b:	a8 04                	test   al,0x4
c000275d:	0f 84 ed 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c0002763:	bb 0a 00 00 00       	mov    ebx,0xa
c0002768:	e9 e3 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c000276d:	83 ec 0c             	sub    esp,0xc
c0002770:	89 f0                	mov    eax,esi
c0002772:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002776:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002779:	0f b6 f0             	movzx  esi,al
c000277c:	bb 03 00 00 00       	mov    ebx,0x3
c0002781:	56                   	push   esi
c0002782:	e8 8c f4 ff ff       	call   c0001c13 <disk_initialize>
c0002787:	83 c4 10             	add    esp,0x10
c000278a:	a8 01                	test   al,0x1
c000278c:	0f 85 be 04 00 00    	jne    c0002c50 <mount_volume+0x55f>
c0002792:	89 f9                	mov    ecx,edi
c0002794:	84 c9                	test   cl,cl
c0002796:	74 04                	je     c000279c <mount_volume+0xab>
c0002798:	a8 04                	test   al,0x4
c000279a:	75 c7                	jne    c0002763 <mount_volume+0x72>
c000279c:	31 d2                	xor    edx,edx
c000279e:	89 e8                	mov    eax,ebp
c00027a0:	e8 c8 fd ff ff       	call   c000256d <find_volume>
c00027a5:	83 f8 04             	cmp    eax,0x4
c00027a8:	75 0a                	jne    c00027b4 <mount_volume+0xc3>
c00027aa:	bb 01 00 00 00       	mov    ebx,0x1
c00027af:	e9 9c 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027b4:	83 f8 01             	cmp    eax,0x1
c00027b7:	76 0a                	jbe    c00027c3 <mount_volume+0xd2>
c00027b9:	bb 0d 00 00 00       	mov    ebx,0xd
c00027be:	e9 8d 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027c3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027c6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d1:	75 17                	jne    c00027ea <mount_volume+0xf9>
c00027d3:	b8 0b 00 00 00       	mov    eax,0xb
c00027d8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027dd:	75 da                	jne    c00027b9 <mount_volume+0xc8>
c00027df:	40                   	inc    eax
c00027e0:	83 f8 40             	cmp    eax,0x40
c00027e3:	75 f3                	jne    c00027d8 <mount_volume+0xe7>
c00027e5:	e9 5a 02 00 00       	jmp    c0002a44 <mount_volume+0x353>
c00027ea:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ed:	e8 6f f4 ff ff       	call   c0001c61 <ld_word>
c00027f2:	66 3d 00 02          	cmp    ax,0x200
c00027f6:	75 c1                	jne    c00027b9 <mount_volume+0xc8>
c00027f8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027fb:	e8 61 f4 ff ff       	call   c0001c61 <ld_word>
c0002800:	0f b7 c0             	movzx  eax,ax
c0002803:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002807:	85 c0                	test   eax,eax
c0002809:	75 0c                	jne    c0002817 <mount_volume+0x126>
c000280b:	8d 45 78             	lea    eax,[ebp+0x78]
c000280e:	e8 5b f4 ff ff       	call   c0001c6e <ld_dword>
c0002813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000281b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000281e:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002821:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002825:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002828:	48                   	dec    eax
c0002829:	3c 01                	cmp    al,0x1
c000282b:	77 8c                	ja     c00027b9 <mount_volume+0xc8>
c000282d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002831:	89 c3                	mov    ebx,eax
c0002833:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002837:	66 85 c0             	test   ax,ax
c000283a:	0f 84 79 ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002840:	8d 40 ff             	lea    eax,[eax-0x1]
c0002843:	85 d8                	test   eax,ebx
c0002845:	0f 85 6e ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000284b:	8d 45 65             	lea    eax,[ebp+0x65]
c000284e:	e8 0e f4 ff ff       	call   c0001c61 <ld_word>
c0002853:	89 c7                	mov    edi,eax
c0002855:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002859:	a8 0f                	test   al,0xf
c000285b:	0f 85 58 ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002861:	8d 45 67             	lea    eax,[ebp+0x67]
c0002864:	e8 f8 f3 ff ff       	call   c0001c61 <ld_word>
c0002869:	0f b7 f0             	movzx  esi,ax
c000286c:	85 f6                	test   esi,esi
c000286e:	75 0a                	jne    c000287a <mount_volume+0x189>
c0002870:	8d 45 74             	lea    eax,[ebp+0x74]
c0002873:	e8 f6 f3 ff ff       	call   c0001c6e <ld_dword>
c0002878:	89 c6                	mov    esi,eax
c000287a:	8d 45 62             	lea    eax,[ebp+0x62]
c000287d:	e8 df f3 ff ff       	call   c0001c61 <ld_word>
c0002882:	66 85 c0             	test   ax,ax
c0002885:	0f 84 2e ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c000288b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002890:	0f b7 c8             	movzx  ecx,ax
c0002893:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000289c:	89 fa                	mov    edx,edi
c000289e:	66 c1 ea 04          	shr    dx,0x4
c00028a2:	0f b7 d2             	movzx  edx,dx
c00028a5:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028a9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b0:	39 c6                	cmp    esi,eax
c00028b2:	0f 82 01 ff ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028b8:	29 c6                	sub    esi,eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 f0                	mov    eax,esi
c00028be:	f7 f3                	div    ebx
c00028c0:	39 de                	cmp    esi,ebx
c00028c2:	0f 82 f1 fe ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028c8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028cd:	0f 87 e6 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c00028d3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028d8:	0f 86 63 03 00 00    	jbe    c0002c41 <mount_volume+0x550>
c00028de:	bb 03 00 00 00       	mov    ebx,0x3
c00028e3:	8d 70 02             	lea    esi,[eax+0x2]
c00028e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ee:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f4:	31 d2                	xor    edx,edx
c00028f6:	89 c8                	mov    eax,ecx
c00028f8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002907:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000290b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002915:	31 d2                	xor    edx,edx
c0002917:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000291b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000291f:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002922:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002925:	83 fb 03             	cmp    ebx,0x3
c0002928:	75 2b                	jne    c0002955 <mount_volume+0x264>
c000292a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000292d:	e8 2f f3 ff ff       	call   c0001c61 <ld_word>
c0002932:	66 09 c7             	or     di,ax
c0002935:	0f 85 7e fe ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000293b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002941:	c1 e6 02             	shl    esi,0x2
c0002944:	e8 25 f3 ff ff       	call   c0001c6e <ld_dword>
c0002949:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002950:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002953:	eb 30                	jmp    c0002985 <mount_volume+0x294>
c0002955:	66 85 ff             	test   di,di
c0002958:	0f 84 5b fe ff ff    	je     c00027b9 <mount_volume+0xc8>
c000295e:	31 d2                	xor    edx,edx
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002968:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000296c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002972:	83 fb 02             	cmp    ebx,0x2
c0002975:	75 04                	jne    c000297b <mount_volume+0x28a>
c0002977:	01 f6                	add    esi,esi
c0002979:	eb 0a                	jmp    c0002985 <mount_volume+0x294>
c000297b:	8d 04 76             	lea    eax,[esi+esi*2]
c000297e:	83 e6 01             	and    esi,0x1
c0002981:	d1 e8                	shr    eax,1
c0002983:	01 c6                	add    esi,eax
c0002985:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000298b:	c1 ee 09             	shr    esi,0x9
c000298e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002992:	0f 87 21 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002998:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000299f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029a6:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029aa:	83 fb 03             	cmp    ebx,0x3
c00029ad:	75 7a                	jne    c0002a29 <mount_volume+0x338>
c00029af:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029b5:	e8 a7 f2 ff ff       	call   c0001c61 <ld_word>
c00029ba:	66 48                	dec    ax
c00029bc:	75 6b                	jne    c0002a29 <mount_volume+0x338>
c00029be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029c6:	83 c2 01             	add    edx,0x1
c00029c9:	89 e8                	mov    eax,ebp
c00029cb:	83 d1 00             	adc    ecx,0x0
c00029ce:	e8 6c fa ff ff       	call   c000243f <move_window>
c00029d3:	85 c0                	test   eax,eax
c00029d5:	75 52                	jne    c0002a29 <mount_volume+0x338>
c00029d7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029db:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e1:	e8 7b f2 ff ff       	call   c0001c61 <ld_word>
c00029e6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029ea:	75 3d                	jne    c0002a29 <mount_volume+0x338>
c00029ec:	8d 45 54             	lea    eax,[ebp+0x54]
c00029ef:	e8 7a f2 ff ff       	call   c0001c6e <ld_dword>
c00029f4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029f9:	75 2e                	jne    c0002a29 <mount_volume+0x338>
c00029fb:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a01:	e8 68 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a06:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a0b:	75 1c                	jne    c0002a29 <mount_volume+0x338>
c0002a0d:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a13:	e8 56 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a18:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a1b:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a21:	e8 48 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a26:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a29:	66 a1 20 e2 02 c0    	mov    ax,ds:0xc002e220
c0002a2f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a32:	40                   	inc    eax
c0002a33:	31 db                	xor    ebx,ebx
c0002a35:	66 a3 20 e2 02 c0    	mov    ds:0xc002e220,ax
c0002a3b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a3f:	e9 0c 02 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c0002a44:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a4a:	e8 12 f2 ff ff       	call   c0001c61 <ld_word>
c0002a4f:	66 3d 00 01          	cmp    ax,0x100
c0002a53:	0f 85 60 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a59:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a60:	0f 85 53 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a66:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a6c:	e8 15 f2 ff ff       	call   c0001c86 <ld_qword>
c0002a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a79:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a7f:	e8 ea f1 ff ff       	call   c0001c6e <ld_dword>
c0002a84:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a87:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a8d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a90:	fe c8                	dec    al
c0002a92:	0f 85 21 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a98:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a9f:	bb 01 00 00 00       	mov    ebx,0x1
c0002aa4:	d3 e3                	shl    ebx,cl
c0002aa6:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002aaa:	66 85 db             	test   bx,bx
c0002aad:	0f 84 06 fd ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002ab3:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ab9:	e8 b0 f1 ff ff       	call   c0001c6e <ld_dword>
c0002abe:	89 c6                	mov    esi,eax
c0002ac0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ac5:	0f 87 ee fc ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ad2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ad5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002adc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002adf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ae5:	e8 84 f1 ff ff       	call   c0001c6e <ld_dword>
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002af8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002afc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b02:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b08:	e8 61 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b0d:	31 d2                	xor    edx,edx
c0002b0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b1b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b1e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b21:	0f b7 c3             	movzx  eax,bx
c0002b24:	31 d2                	xor    edx,edx
c0002b26:	0f af f0             	imul   esi,eax
c0002b29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b2d:	89 f0                	mov    eax,esi
c0002b2f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b33:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b37:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b3b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b3f:	39 c1                	cmp    ecx,eax
c0002b41:	89 df                	mov    edi,ebx
c0002b43:	19 d7                	sbb    edi,edx
c0002b45:	0f 82 6e fc ff ff    	jb     c00027b9 <mount_volume+0xc8>
c0002b4b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b51:	31 db                	xor    ebx,ebx
c0002b53:	e8 16 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b58:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b5f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b6a:	85 db                	test   ebx,ebx
c0002b6c:	75 39                	jne    c0002ba7 <mount_volume+0x4b6>
c0002b6e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b72:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b76:	0f 86 3d fc ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002b7c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b7f:	31 ff                	xor    edi,edi
c0002b81:	89 e8                	mov    eax,ebp
c0002b83:	e8 72 f3 ff ff       	call   c0001efa <clst2sect>
c0002b88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b8c:	01 c6                	add    esi,eax
c0002b8e:	89 e8                	mov    eax,ebp
c0002b90:	11 d7                	adc    edi,edx
c0002b92:	89 f2                	mov    edx,esi
c0002b94:	89 f9                	mov    ecx,edi
c0002b96:	e8 a4 f8 ff ff       	call   c000243f <move_window>
c0002b9b:	85 c0                	test   eax,eax
c0002b9d:	0f 85 07 fc ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002ba3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ba7:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bac:	74 0b                	je     c0002bb9 <mount_volume+0x4c8>
c0002bae:	83 c3 20             	add    ebx,0x20
c0002bb1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bb7:	eb b1                	jmp    c0002b6a <mount_volume+0x479>
c0002bb9:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bbc:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc0:	e8 a9 f0 ff ff       	call   c0001c6e <ld_dword>
c0002bc5:	89 c3                	mov    ebx,eax
c0002bc7:	83 f8 01             	cmp    eax,0x1
c0002bca:	0f 86 e9 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bd3:	0f 86 e0 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bdc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be0:	0f af c2             	imul   eax,edx
c0002be3:	31 d2                	xor    edx,edx
c0002be5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002be8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002beb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bee:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	89 da                	mov    edx,ebx
c0002bf5:	89 e8                	mov    eax,ebp
c0002bf7:	c1 ea 07             	shr    edx,0x7
c0002bfa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bfd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c00:	e8 3a f8 ff ff       	call   c000243f <move_window>
c0002c05:	85 c0                	test   eax,eax
c0002c07:	0f 85 9d fb ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002c0d:	89 d8                	mov    eax,ebx
c0002c0f:	83 e0 7f             	and    eax,0x7f
c0002c12:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c15:	e8 54 f0 ff ff       	call   c0001c6e <ld_dword>
c0002c1a:	83 f8 ff             	cmp    eax,0xffffffff
c0002c1d:	74 0a                	je     c0002c29 <mount_volume+0x538>
c0002c1f:	43                   	inc    ebx
c0002c20:	39 d8                	cmp    eax,ebx
c0002c22:	74 cd                	je     c0002bf1 <mount_volume+0x500>
c0002c24:	e9 90 fb ff ff       	jmp    c00027b9 <mount_volume+0xc8>
c0002c29:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c30:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c37:	bb 04 00 00 00       	mov    ebx,0x4
c0002c3c:	e9 e8 fd ff ff       	jmp    c0002a29 <mount_volume+0x338>
c0002c41:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c46:	19 db                	sbb    ebx,ebx
c0002c48:	83 c3 02             	add    ebx,0x2
c0002c4b:	e9 93 fc ff ff       	jmp    c00028e3 <mount_volume+0x1f2>
c0002c50:	83 c4 3c             	add    esp,0x3c
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	5b                   	pop    ebx
c0002c56:	5e                   	pop    esi
c0002c57:	5f                   	pop    edi
c0002c58:	5d                   	pop    ebp
c0002c59:	c3                   	ret    

c0002c5a <find_bitmap>:
c0002c5a:	55                   	push   ebp
c0002c5b:	57                   	push   edi
c0002c5c:	89 c7                	mov    edi,eax
c0002c5e:	56                   	push   esi
c0002c5f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c62:	53                   	push   ebx
c0002c63:	83 ec 1c             	sub    esp,0x1c
c0002c66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c6d:	83 e8 02             	sub    eax,0x2
c0002c70:	39 f0                	cmp    eax,esi
c0002c72:	77 02                	ja     c0002c76 <find_bitmap+0x1c>
c0002c74:	31 f6                	xor    esi,esi
c0002c76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c7a:	89 f3                	mov    ebx,esi
c0002c7c:	31 ed                	xor    ebp,ebp
c0002c7e:	31 c9                	xor    ecx,ecx
c0002c80:	89 da                	mov    edx,ebx
c0002c82:	89 f8                	mov    eax,edi
c0002c84:	c1 ea 0c             	shr    edx,0xc
c0002c87:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c8a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c8d:	e8 ad f7 ff ff       	call   c000243f <move_window>
c0002c92:	85 c0                	test   eax,eax
c0002c94:	75 68                	jne    c0002cfe <find_bitmap+0xa4>
c0002c96:	89 da                	mov    edx,ebx
c0002c98:	89 d9                	mov    ecx,ebx
c0002c9a:	c1 ea 03             	shr    edx,0x3
c0002c9d:	83 e1 07             	and    ecx,0x7
c0002ca0:	b8 01 00 00 00       	mov    eax,0x1
c0002ca5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cab:	d3 e0                	shl    eax,cl
c0002cad:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb0:	83 e9 02             	sub    ecx,0x2
c0002cb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cb7:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cbb:	43                   	inc    ebx
c0002cbc:	21 c1                	and    ecx,eax
c0002cbe:	d1 e0                	shl    eax,1
c0002cc0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cc4:	77 09                	ja     c0002ccf <find_bitmap+0x75>
c0002cc6:	31 db                	xor    ebx,ebx
c0002cc8:	ba 00 02 00 00       	mov    edx,0x200
c0002ccd:	31 c0                	xor    eax,eax
c0002ccf:	84 c9                	test   cl,cl
c0002cd1:	75 10                	jne    c0002ce3 <find_bitmap+0x89>
c0002cd3:	45                   	inc    ebp
c0002cd4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cd8:	75 0f                	jne    c0002ce9 <find_bitmap+0x8f>
c0002cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cde:	83 c0 02             	add    eax,0x2
c0002ce1:	eb 22                	jmp    c0002d05 <find_bitmap+0xab>
c0002ce3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ce7:	31 ed                	xor    ebp,ebp
c0002ce9:	39 de                	cmp    esi,ebx
c0002ceb:	74 16                	je     c0002d03 <find_bitmap+0xa9>
c0002ced:	84 c0                	test   al,al
c0002cef:	75 c6                	jne    c0002cb7 <find_bitmap+0x5d>
c0002cf1:	42                   	inc    edx
c0002cf2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cf8:	77 84                	ja     c0002c7e <find_bitmap+0x24>
c0002cfa:	b0 01                	mov    al,0x1
c0002cfc:	eb b9                	jmp    c0002cb7 <find_bitmap+0x5d>
c0002cfe:	83 c8 ff             	or     eax,0xffffffff
c0002d01:	eb 02                	jmp    c0002d05 <find_bitmap+0xab>
c0002d03:	31 c0                	xor    eax,eax
c0002d05:	83 c4 1c             	add    esp,0x1c
c0002d08:	5b                   	pop    ebx
c0002d09:	5e                   	pop    esi
c0002d0a:	5f                   	pop    edi
c0002d0b:	5d                   	pop    ebp
c0002d0c:	c3                   	ret    

c0002d0d <change_bitmap>:
c0002d0d:	55                   	push   ebp
c0002d0e:	89 cd                	mov    ebp,ecx
c0002d10:	57                   	push   edi
c0002d11:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d14:	56                   	push   esi
c0002d15:	89 c7                	mov    edi,eax
c0002d17:	53                   	push   ebx
c0002d18:	89 c8                	mov    eax,ecx
c0002d1a:	83 ec 1c             	sub    esp,0x1c
c0002d1d:	31 d2                	xor    edx,edx
c0002d1f:	89 ce                	mov    esi,ecx
c0002d21:	c1 e8 0c             	shr    eax,0xc
c0002d24:	bb 01 00 00 00       	mov    ebx,0x1
c0002d29:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d2c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d2f:	c1 ee 03             	shr    esi,0x3
c0002d32:	83 e1 07             	and    ecx,0x7
c0002d35:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d3b:	d3 e3                	shl    ebx,cl
c0002d3d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d41:	89 c1                	mov    ecx,eax
c0002d43:	89 d3                	mov    ebx,edx
c0002d45:	83 c1 01             	add    ecx,0x1
c0002d48:	83 d3 00             	adc    ebx,0x0
c0002d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d4f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d53:	89 d1                	mov    ecx,edx
c0002d55:	89 c2                	mov    edx,eax
c0002d57:	89 f8                	mov    eax,edi
c0002d59:	e8 e1 f6 ff ff       	call   c000243f <move_window>
c0002d5e:	89 c1                	mov    ecx,eax
c0002d60:	85 c0                	test   eax,eax
c0002d62:	75 48                	jne    c0002dac <change_bitmap+0x9f>
c0002d64:	31 d2                	xor    edx,edx
c0002d66:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d6a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d6e:	0f 95 c2             	setne  dl
c0002d71:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d75:	74 3c                	je     c0002db3 <change_bitmap+0xa6>
c0002d77:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d7b:	4d                   	dec    ebp
c0002d7c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d80:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d84:	74 32                	je     c0002db8 <change_bitmap+0xab>
c0002d86:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d8a:	75 d8                	jne    c0002d64 <change_bitmap+0x57>
c0002d8c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d8f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d94:	89 c3                	mov    ebx,eax
c0002d96:	31 f6                	xor    esi,esi
c0002d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002da6:	74 99                	je     c0002d41 <change_bitmap+0x34>
c0002da8:	89 de                	mov    esi,ebx
c0002daa:	eb b8                	jmp    c0002d64 <change_bitmap+0x57>
c0002dac:	b9 01 00 00 00       	mov    ecx,0x1
c0002db1:	eb 05                	jmp    c0002db8 <change_bitmap+0xab>
c0002db3:	b9 02 00 00 00       	mov    ecx,0x2
c0002db8:	83 c4 1c             	add    esp,0x1c
c0002dbb:	89 c8                	mov    eax,ecx
c0002dbd:	5b                   	pop    ebx
c0002dbe:	5e                   	pop    esi
c0002dbf:	5f                   	pop    edi
c0002dc0:	5d                   	pop    ebp
c0002dc1:	c3                   	ret    

c0002dc2 <put_fat>:
c0002dc2:	83 fa 01             	cmp    edx,0x1
c0002dc5:	0f 86 7b 01 00 00    	jbe    c0002f46 <put_fat+0x184>
c0002dcb:	55                   	push   ebp
c0002dcc:	57                   	push   edi
c0002dcd:	89 cf                	mov    edi,ecx
c0002dcf:	56                   	push   esi
c0002dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0002dd5:	53                   	push   ebx
c0002dd6:	89 c6                	mov    esi,eax
c0002dd8:	83 ec 1c             	sub    esp,0x1c
c0002ddb:	89 d3                	mov    ebx,edx
c0002ddd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de0:	0f 86 68 01 00 00    	jbe    c0002f4e <put_fat+0x18c>
c0002de6:	8a 00                	mov    al,BYTE PTR [eax]
c0002de8:	3c 02                	cmp    al,0x2
c0002dea:	0f 84 c7 00 00 00    	je     c0002eb7 <put_fat+0xf5>
c0002df0:	77 09                	ja     c0002dfb <put_fat+0x39>
c0002df2:	fe c8                	dec    al
c0002df4:	74 17                	je     c0002e0d <put_fat+0x4b>
c0002df6:	e9 53 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002dfb:	b9 02 00 00 00       	mov    ecx,0x2
c0002e00:	3c 04                	cmp    al,0x4
c0002e02:	0f 86 e1 00 00 00    	jbe    c0002ee9 <put_fat+0x127>
c0002e08:	e9 41 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002e0d:	89 d5                	mov    ebp,edx
c0002e0f:	31 c9                	xor    ecx,ecx
c0002e11:	d1 ed                	shr    ebp,1
c0002e13:	89 f0                	mov    eax,esi
c0002e15:	01 d5                	add    ebp,edx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	c1 ea 09             	shr    edx,0x9
c0002e1c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e1f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e22:	e8 18 f6 ff ff       	call   c000243f <move_window>
c0002e27:	89 c1                	mov    ecx,eax
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	0f 85 1d 01 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e31:	8d 46 54             	lea    eax,[esi+0x54]
c0002e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e38:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e3b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e45:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e49:	89 f8                	mov    eax,edi
c0002e4b:	83 e3 01             	and    ebx,0x1
c0002e4e:	74 0d                	je     c0002e5d <put_fat+0x9b>
c0002e50:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e53:	89 fa                	mov    edx,edi
c0002e55:	83 e0 0f             	and    eax,0xf
c0002e58:	c1 e2 04             	shl    edx,0x4
c0002e5b:	09 d0                	or     eax,edx
c0002e5d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e64:	31 c9                	xor    ecx,ecx
c0002e66:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e6a:	c1 ea 09             	shr    edx,0x9
c0002e6d:	89 f0                	mov    eax,esi
c0002e6f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e72:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e75:	e8 c5 f5 ff ff       	call   c000243f <move_window>
c0002e7a:	89 c1                	mov    ecx,eax
c0002e7c:	85 c0                	test   eax,eax
c0002e7e:	0f 85 ca 00 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e84:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e88:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e92:	85 db                	test   ebx,ebx
c0002e94:	74 07                	je     c0002e9d <put_fat+0xdb>
c0002e96:	c1 ef 04             	shr    edi,0x4
c0002e99:	89 fa                	mov    edx,edi
c0002e9b:	eb 0e                	jmp    c0002eab <put_fat+0xe9>
c0002e9d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea0:	c1 ef 08             	shr    edi,0x8
c0002ea3:	83 e2 f0             	and    edx,0xfffffff0
c0002ea6:	83 e7 0f             	and    edi,0xf
c0002ea9:	09 fa                	or     edx,edi
c0002eab:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eae:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb2:	e9 97 00 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002eb7:	31 c9                	xor    ecx,ecx
c0002eb9:	c1 ea 08             	shr    edx,0x8
c0002ebc:	89 f0                	mov    eax,esi
c0002ebe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ec4:	e8 76 f5 ff ff       	call   c000243f <move_window>
c0002ec9:	89 c1                	mov    ecx,eax
c0002ecb:	85 c0                	test   eax,eax
c0002ecd:	75 7f                	jne    c0002f4e <put_fat+0x18c>
c0002ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ed3:	01 db                	add    ebx,ebx
c0002ed5:	0f b7 d7             	movzx  edx,di
c0002ed8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ede:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ee2:	e8 ec ed ff ff       	call   c0001cd3 <st_word>
c0002ee7:	eb 53                	jmp    c0002f3c <put_fat+0x17a>
c0002ee9:	31 c9                	xor    ecx,ecx
c0002eeb:	c1 ea 07             	shr    edx,0x7
c0002eee:	89 f0                	mov    eax,esi
c0002ef0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ef3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ef6:	e8 44 f5 ff ff       	call   c000243f <move_window>
c0002efb:	89 c1                	mov    ecx,eax
c0002efd:	85 c0                	test   eax,eax
c0002eff:	75 4d                	jne    c0002f4e <put_fat+0x18c>
c0002f01:	c1 e3 02             	shl    ebx,0x2
c0002f04:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f0a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f0d:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f11:	74 1c                	je     c0002f2f <put_fat+0x16d>
c0002f13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f17:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f1d:	89 d8                	mov    eax,ebx
c0002f1f:	e8 4a ed ff ff       	call   c0001c6e <ld_dword>
c0002f24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f28:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f2d:	09 c7                	or     edi,eax
c0002f2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f33:	89 fa                	mov    edx,edi
c0002f35:	89 d8                	mov    eax,ebx
c0002f37:	e8 9b ed ff ff       	call   c0001cd7 <st_dword>
c0002f3c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f44:	eb 08                	jmp    c0002f4e <put_fat+0x18c>
c0002f46:	b9 02 00 00 00       	mov    ecx,0x2
c0002f4b:	89 c8                	mov    eax,ecx
c0002f4d:	c3                   	ret    
c0002f4e:	83 c4 1c             	add    esp,0x1c
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	5b                   	pop    ebx
c0002f54:	5e                   	pop    esi
c0002f55:	5f                   	pop    edi
c0002f56:	5d                   	pop    ebp
c0002f57:	c3                   	ret    

c0002f58 <fill_last_frag>:
c0002f58:	57                   	push   edi
c0002f59:	89 cf                	mov    edi,ecx
c0002f5b:	56                   	push   esi
c0002f5c:	89 d6                	mov    esi,edx
c0002f5e:	53                   	push   ebx
c0002f5f:	89 c3                	mov    ebx,eax
c0002f61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f64:	85 c0                	test   eax,eax
c0002f66:	74 21                	je     c0002f89 <fill_last_frag+0x31>
c0002f68:	89 f9                	mov    ecx,edi
c0002f6a:	83 f8 01             	cmp    eax,0x1
c0002f6d:	76 05                	jbe    c0002f74 <fill_last_frag+0x1c>
c0002f6f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f72:	29 c1                	sub    ecx,eax
c0002f74:	8d 56 01             	lea    edx,[esi+0x1]
c0002f77:	29 c2                	sub    edx,eax
c0002f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f7b:	e8 42 fe ff ff       	call   c0002dc2 <put_fat>
c0002f80:	85 c0                	test   eax,eax
c0002f82:	75 05                	jne    c0002f89 <fill_last_frag+0x31>
c0002f84:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f87:	eb d8                	jmp    c0002f61 <fill_last_frag+0x9>
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <fill_first_frag>:
c0002f8d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f91:	75 2d                	jne    c0002fc0 <fill_first_frag+0x33>
c0002f93:	57                   	push   edi
c0002f94:	56                   	push   esi
c0002f95:	53                   	push   ebx
c0002f96:	89 c3                	mov    ebx,eax
c0002f98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f9b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f9e:	01 d7                	add    edi,edx
c0002fa0:	39 fa                	cmp    edx,edi
c0002fa2:	74 14                	je     c0002fb8 <fill_first_frag+0x2b>
c0002fa4:	8d 72 01             	lea    esi,[edx+0x1]
c0002fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fa9:	89 f1                	mov    ecx,esi
c0002fab:	e8 12 fe ff ff       	call   c0002dc2 <put_fat>
c0002fb0:	89 f2                	mov    edx,esi
c0002fb2:	85 c0                	test   eax,eax
c0002fb4:	74 ea                	je     c0002fa0 <fill_first_frag+0x13>
c0002fb6:	eb 0b                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fb8:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fbc:	31 c0                	xor    eax,eax
c0002fbe:	eb 03                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fc0:	31 c0                	xor    eax,eax
c0002fc2:	c3                   	ret    
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	c3                   	ret    

c0002fc7 <get_fat>:
c0002fc7:	83 fa 01             	cmp    edx,0x1
c0002fca:	0f 86 db 01 00 00    	jbe    c00031ab <get_fat+0x1e4>
c0002fd0:	55                   	push   ebp
c0002fd1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fde:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe1:	0f 86 cc 01 00 00    	jbe    c00031b3 <get_fat+0x1ec>
c0002fe7:	89 c3                	mov    ebx,eax
c0002fe9:	89 d6                	mov    esi,edx
c0002feb:	8a 07                	mov    al,BYTE PTR [edi]
c0002fed:	3c 02                	cmp    al,0x2
c0002fef:	0f 84 99 00 00 00    	je     c000308e <get_fat+0xc7>
c0002ff5:	77 09                	ja     c0003000 <get_fat+0x39>
c0002ff7:	fe c8                	dec    al
c0002ff9:	74 1a                	je     c0003015 <get_fat+0x4e>
c0002ffb:	e9 b3 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003000:	3c 03                	cmp    al,0x3
c0003002:	0f 84 b5 00 00 00    	je     c00030bd <get_fat+0xf6>
c0003008:	3c 04                	cmp    al,0x4
c000300a:	0f 84 e3 00 00 00    	je     c00030f3 <get_fat+0x12c>
c0003010:	e9 9e 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003015:	89 d3                	mov    ebx,edx
c0003017:	31 c9                	xor    ecx,ecx
c0003019:	d1 eb                	shr    ebx,1
c000301b:	89 f8                	mov    eax,edi
c000301d:	01 d3                	add    ebx,edx
c000301f:	89 da                	mov    edx,ebx
c0003021:	c1 ea 09             	shr    edx,0x9
c0003024:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003027:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000302a:	e8 10 f4 ff ff       	call   c000243f <move_window>
c000302f:	85 c0                	test   eax,eax
c0003031:	74 08                	je     c000303b <get_fat+0x74>
c0003033:	83 c9 ff             	or     ecx,0xffffffff
c0003036:	e9 78 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000303b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000303e:	31 c9                	xor    ecx,ecx
c0003040:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003046:	89 ea                	mov    edx,ebp
c0003048:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000304c:	c1 ea 09             	shr    edx,0x9
c000304f:	89 f8                	mov    eax,edi
c0003051:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003054:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003057:	e8 e3 f3 ff ff       	call   c000243f <move_window>
c000305c:	85 c0                	test   eax,eax
c000305e:	75 d3                	jne    c0003033 <get_fat+0x6c>
c0003060:	0f b6 c3             	movzx  eax,bl
c0003063:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003069:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000306e:	c1 e3 08             	shl    ebx,0x8
c0003071:	09 c3                	or     ebx,eax
c0003073:	89 d9                	mov    ecx,ebx
c0003075:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000307b:	83 e6 01             	and    esi,0x1
c000307e:	0f 84 2f 01 00 00    	je     c00031b3 <get_fat+0x1ec>
c0003084:	89 d9                	mov    ecx,ebx
c0003086:	c1 e9 04             	shr    ecx,0x4
c0003089:	e9 25 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000308e:	31 c9                	xor    ecx,ecx
c0003090:	c1 ea 08             	shr    edx,0x8
c0003093:	89 f8                	mov    eax,edi
c0003095:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003098:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000309b:	e8 9f f3 ff ff       	call   c000243f <move_window>
c00030a0:	85 c0                	test   eax,eax
c00030a2:	75 8f                	jne    c0003033 <get_fat+0x6c>
c00030a4:	01 f6                	add    esi,esi
c00030a6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030ac:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b0:	e8 ac eb ff ff       	call   c0001c61 <ld_word>
c00030b5:	0f b7 c8             	movzx  ecx,ax
c00030b8:	e9 f6 00 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c00030bd:	31 c9                	xor    ecx,ecx
c00030bf:	c1 ea 07             	shr    edx,0x7
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030c7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ca:	e8 70 f3 ff ff       	call   c000243f <move_window>
c00030cf:	85 c0                	test   eax,eax
c00030d1:	0f 85 5c ff ff ff    	jne    c0003033 <get_fat+0x6c>
c00030d7:	c1 e6 02             	shl    esi,0x2
c00030da:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030e4:	e8 85 eb ff ff       	call   c0001c6e <ld_dword>
c00030e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030ee:	e9 b4 00 00 00       	jmp    c00031a7 <get_fat+0x1e0>
c00030f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030f6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030f9:	89 d1                	mov    ecx,edx
c00030fb:	09 c1                	or     ecx,eax
c00030fd:	74 06                	je     c0003105 <get_fat+0x13e>
c00030ff:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003103:	75 0f                	jne    c0003114 <get_fat+0x14d>
c0003105:	b9 01 00 00 00       	mov    ecx,0x1
c000310a:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000310e:	0f 85 9f 00 00 00    	jne    c00031b3 <get_fat+0x1ec>
c0003114:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003118:	89 f5                	mov    ebp,esi
c000311a:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000311f:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003122:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003125:	80 f9 02             	cmp    cl,0x2
c0003128:	75 35                	jne    c000315f <get_fat+0x198>
c000312a:	83 c0 ff             	add    eax,0xffffffff
c000312d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003132:	83 d2 ff             	adc    edx,0xffffffff
c0003135:	31 db                	xor    ebx,ebx
c0003137:	0f ac d0 09          	shrd   eax,edx,0x9
c000313b:	53                   	push   ebx
c000313c:	c1 ea 09             	shr    edx,0x9
c000313f:	51                   	push   ecx
c0003140:	52                   	push   edx
c0003141:	50                   	push   eax
c0003142:	e8 65 37 02 00       	call   c00268ac <__udivdi3>
c0003147:	83 c4 10             	add    esp,0x10
c000314a:	b9 01 00 00 00       	mov    ecx,0x1
c000314f:	39 c5                	cmp    ebp,eax
c0003151:	77 60                	ja     c00031b3 <get_fat+0x1ec>
c0003153:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003158:	74 59                	je     c00031b3 <get_fat+0x1ec>
c000315a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000315d:	eb 54                	jmp    c00031b3 <get_fat+0x1ec>
c000315f:	80 f9 03             	cmp    cl,0x3
c0003162:	75 05                	jne    c0003169 <get_fat+0x1a2>
c0003164:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003167:	77 f1                	ja     c000315a <get_fat+0x193>
c0003169:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000316e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003172:	75 3f                	jne    c00031b3 <get_fat+0x1ec>
c0003174:	31 c9                	xor    ecx,ecx
c0003176:	89 f2                	mov    edx,esi
c0003178:	89 f8                	mov    eax,edi
c000317a:	c1 ea 07             	shr    edx,0x7
c000317d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003180:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003183:	e8 b7 f2 ff ff       	call   c000243f <move_window>
c0003188:	85 c0                	test   eax,eax
c000318a:	0f 85 a3 fe ff ff    	jne    c0003033 <get_fat+0x6c>
c0003190:	c1 e6 02             	shl    esi,0x2
c0003193:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003199:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319d:	e8 cc ea ff ff       	call   c0001c6e <ld_dword>
c00031a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031a7:	89 c1                	mov    ecx,eax
c00031a9:	eb 08                	jmp    c00031b3 <get_fat+0x1ec>
c00031ab:	b9 01 00 00 00       	mov    ecx,0x1
c00031b0:	89 c8                	mov    eax,ecx
c00031b2:	c3                   	ret    
c00031b3:	83 c4 1c             	add    esp,0x1c
c00031b6:	89 c8                	mov    eax,ecx
c00031b8:	5b                   	pop    ebx
c00031b9:	5e                   	pop    esi
c00031ba:	5f                   	pop    edi
c00031bb:	5d                   	pop    ebp
c00031bc:	c3                   	ret    

c00031bd <dir_sdi>:
c00031bd:	55                   	push   ebp
c00031be:	57                   	push   edi
c00031bf:	56                   	push   esi
c00031c0:	53                   	push   ebx
c00031c1:	89 c3                	mov    ebx,eax
c00031c3:	83 ec 1c             	sub    esp,0x1c
c00031c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031c8:	31 c0                	xor    eax,eax
c00031ca:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031cd:	0f 94 c0             	sete   al
c00031d0:	48                   	dec    eax
c00031d1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031d6:	05 00 00 00 10       	add    eax,0x10000000
c00031db:	39 d0                	cmp    eax,edx
c00031dd:	77 0a                	ja     c00031e9 <dir_sdi+0x2c>
c00031df:	b8 02 00 00 00       	mov    eax,0x2
c00031e4:	e9 c4 00 00 00       	jmp    c00032ad <dir_sdi+0xf0>
c00031e9:	89 d6                	mov    esi,edx
c00031eb:	f6 c2 1f             	test   dl,0x1f
c00031ee:	75 ef                	jne    c00031df <dir_sdi+0x22>
c00031f0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031f3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031f6:	85 c9                	test   ecx,ecx
c00031f8:	75 2d                	jne    c0003227 <dir_sdi+0x6a>
c00031fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031fd:	77 1b                	ja     c000321a <dir_sdi+0x5d>
c00031ff:	89 f2                	mov    edx,esi
c0003201:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003205:	c1 ea 05             	shr    edx,0x5
c0003208:	39 c2                	cmp    edx,eax
c000320a:	73 d3                	jae    c00031df <dir_sdi+0x22>
c000320c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000320f:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003212:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003215:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003218:	eb 4b                	jmp    c0003265 <dir_sdi+0xa8>
c000321a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000321d:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003221:	85 c0                	test   eax,eax
c0003223:	74 da                	je     c00031ff <dir_sdi+0x42>
c0003225:	89 c1                	mov    ecx,eax
c0003227:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000322b:	c1 e5 09             	shl    ebp,0x9
c000322e:	89 ca                	mov    edx,ecx
c0003230:	39 ee                	cmp    esi,ebp
c0003232:	72 1c                	jb     c0003250 <dir_sdi+0x93>
c0003234:	89 d8                	mov    eax,ebx
c0003236:	e8 8c fd ff ff       	call   c0002fc7 <get_fat>
c000323b:	89 c1                	mov    ecx,eax
c000323d:	83 f8 ff             	cmp    eax,0xffffffff
c0003240:	74 66                	je     c00032a8 <dir_sdi+0xeb>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	76 98                	jbe    c00031df <dir_sdi+0x22>
c0003247:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000324a:	76 93                	jbe    c00031df <dir_sdi+0x22>
c000324c:	29 ee                	sub    esi,ebp
c000324e:	eb de                	jmp    c000322e <dir_sdi+0x71>
c0003250:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003254:	89 f8                	mov    eax,edi
c0003256:	e8 9f ec ff ff       	call   c0001efa <clst2sect>
c000325b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000325f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003262:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003265:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003268:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000326b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000326e:	89 d1                	mov    ecx,edx
c0003270:	09 c1                	or     ecx,eax
c0003272:	0f 84 67 ff ff ff    	je     c00031df <dir_sdi+0x22>
c0003278:	89 f1                	mov    ecx,esi
c000327a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003282:	c1 e9 09             	shr    ecx,0x9
c0003285:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000328d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003291:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003294:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000329a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000329d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032a4:	31 c0                	xor    eax,eax
c00032a6:	eb 05                	jmp    c00032ad <dir_sdi+0xf0>
c00032a8:	b8 01 00 00 00       	mov    eax,0x1
c00032ad:	83 c4 1c             	add    esp,0x1c
c00032b0:	5b                   	pop    ebx
c00032b1:	5e                   	pop    esi
c00032b2:	5f                   	pop    edi
c00032b3:	5d                   	pop    ebp
c00032b4:	c3                   	ret    

c00032b5 <create_chain>:
c00032b5:	55                   	push   ebp
c00032b6:	89 c5                	mov    ebp,eax
c00032b8:	57                   	push   edi
c00032b9:	56                   	push   esi
c00032ba:	53                   	push   ebx
c00032bb:	83 ec 1c             	sub    esp,0x1c
c00032be:	85 d2                	test   edx,edx
c00032c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032c4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032c6:	75 0e                	jne    c00032d6 <create_chain+0x21>
c00032c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032cb:	85 ff                	test   edi,edi
c00032cd:	74 39                	je     c0003308 <create_chain+0x53>
c00032cf:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032d2:	77 39                	ja     c000330d <create_chain+0x58>
c00032d4:	eb 32                	jmp    c0003308 <create_chain+0x53>
c00032d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032da:	e8 e8 fc ff ff       	call   c0002fc7 <get_fat>
c00032df:	89 c3                	mov    ebx,eax
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	77 0a                	ja     c00032f0 <create_chain+0x3b>
c00032e6:	bb 01 00 00 00       	mov    ebx,0x1
c00032eb:	e9 ba 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c00032f0:	83 f8 ff             	cmp    eax,0xffffffff
c00032f3:	0f 84 62 01 00 00    	je     c000345b <create_chain+0x1a6>
c00032f9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032fc:	0f 87 a8 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c0003302:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003306:	eb 05                	jmp    c000330d <create_chain+0x58>
c0003308:	bf 01 00 00 00       	mov    edi,0x1
c000330d:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003311:	75 07                	jne    c000331a <create_chain+0x65>
c0003313:	31 db                	xor    ebx,ebx
c0003315:	e9 90 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c000331a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000331d:	75 74                	jne    c0003393 <create_chain+0xde>
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	89 fa                	mov    edx,edi
c0003326:	89 f0                	mov    eax,esi
c0003328:	e8 2d f9 ff ff       	call   c0002c5a <find_bitmap>
c000332d:	89 c3                	mov    ebx,eax
c000332f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003332:	83 f8 fd             	cmp    eax,0xfffffffd
c0003335:	0f 87 6f 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c000333b:	83 ec 0c             	sub    esp,0xc
c000333e:	b9 01 00 00 00       	mov    ecx,0x1
c0003343:	6a 01                	push   0x1
c0003345:	89 da                	mov    edx,ebx
c0003347:	89 f0                	mov    eax,esi
c0003349:	e8 bf f9 ff ff       	call   c0002d0d <change_bitmap>
c000334e:	83 c4 10             	add    esp,0x10
c0003351:	83 f8 02             	cmp    eax,0x2
c0003354:	74 90                	je     c00032e6 <create_chain+0x31>
c0003356:	83 f8 01             	cmp    eax,0x1
c0003359:	0f 84 fc 00 00 00    	je     c000345b <create_chain+0x1a6>
c000335f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003364:	75 09                	jne    c000336f <create_chain+0xba>
c0003366:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000336a:	e9 0c 01 00 00       	jmp    c000347b <create_chain+0x1c6>
c000336f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003373:	0f 85 e7 00 00 00    	jne    c0003460 <create_chain+0x1ab>
c0003379:	8d 57 01             	lea    edx,[edi+0x1]
c000337c:	39 da                	cmp    edx,ebx
c000337e:	0f 84 f7 00 00 00    	je     c000347b <create_chain+0x1c6>
c0003384:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003387:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000338b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000338e:	e9 cd 00 00 00       	jmp    c0003460 <create_chain+0x1ab>
c0003393:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003397:	75 41                	jne    c00033da <create_chain+0x125>
c0003399:	8d 5f 01             	lea    ebx,[edi+0x1]
c000339c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000339f:	77 05                	ja     c00033a6 <create_chain+0xf1>
c00033a1:	bb 02 00 00 00       	mov    ebx,0x2
c00033a6:	89 da                	mov    edx,ebx
c00033a8:	89 e8                	mov    eax,ebp
c00033aa:	e8 18 fc ff ff       	call   c0002fc7 <get_fat>
c00033af:	83 f8 01             	cmp    eax,0x1
c00033b2:	0f 84 2e ff ff ff    	je     c00032e6 <create_chain+0x31>
c00033b8:	83 f8 ff             	cmp    eax,0xffffffff
c00033bb:	0f 84 9a 00 00 00    	je     c000345b <create_chain+0x1a6>
c00033c1:	85 c0                	test   eax,eax
c00033c3:	74 11                	je     c00033d6 <create_chain+0x121>
c00033c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 0d                	jbe    c00033da <create_chain+0x125>
c00033cd:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d0:	76 08                	jbe    c00033da <create_chain+0x125>
c00033d2:	89 c7                	mov    edi,eax
c00033d4:	eb 04                	jmp    c00033da <create_chain+0x125>
c00033d6:	85 db                	test   ebx,ebx
c00033d8:	75 38                	jne    c0003412 <create_chain+0x15d>
c00033da:	89 fb                	mov    ebx,edi
c00033dc:	43                   	inc    ebx
c00033dd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e0:	77 0e                	ja     c00033f0 <create_chain+0x13b>
c00033e2:	83 ff 01             	cmp    edi,0x1
c00033e5:	0f 86 28 ff ff ff    	jbe    c0003313 <create_chain+0x5e>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 ce fb ff ff       	call   c0002fc7 <get_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 15                	je     c0003412 <create_chain+0x15d>
c00033fd:	83 f8 01             	cmp    eax,0x1
c0003400:	0f 84 e0 fe ff ff    	je     c00032e6 <create_chain+0x31>
c0003406:	40                   	inc    eax
c0003407:	74 52                	je     c000345b <create_chain+0x1a6>
c0003409:	39 fb                	cmp    ebx,edi
c000340b:	75 cf                	jne    c00033dc <create_chain+0x127>
c000340d:	e9 01 ff ff ff       	jmp    c0003313 <create_chain+0x5e>
c0003412:	83 c9 ff             	or     ecx,0xffffffff
c0003415:	89 da                	mov    edx,ebx
c0003417:	89 f0                	mov    eax,esi
c0003419:	e8 a4 f9 ff ff       	call   c0002dc2 <put_fat>
c000341e:	85 c0                	test   eax,eax
c0003420:	75 32                	jne    c0003454 <create_chain+0x19f>
c0003422:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003427:	74 11                	je     c000343a <create_chain+0x185>
c0003429:	89 d9                	mov    ecx,ebx
c000342b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000342f:	89 f0                	mov    eax,esi
c0003431:	e8 8c f9 ff ff       	call   c0002dc2 <put_fat>
c0003436:	85 c0                	test   eax,eax
c0003438:	75 1a                	jne    c0003454 <create_chain+0x19f>
c000343a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000343d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003440:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003443:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003446:	39 d0                	cmp    eax,edx
c0003448:	77 04                	ja     c000344e <create_chain+0x199>
c000344a:	48                   	dec    eax
c000344b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003452:	eb 56                	jmp    c00034aa <create_chain+0x1f5>
c0003454:	48                   	dec    eax
c0003455:	0f 85 8b fe ff ff    	jne    c00032e6 <create_chain+0x31>
c000345b:	83 cb ff             	or     ebx,0xffffffff
c000345e:	eb 4a                	jmp    c00034aa <create_chain+0x1f5>
c0003460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003464:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003467:	41                   	inc    ecx
c0003468:	39 d9                	cmp    ecx,ebx
c000346a:	75 19                	jne    c0003485 <create_chain+0x1d0>
c000346c:	b9 02 00 00 00       	mov    ecx,0x2
c0003471:	85 d2                	test   edx,edx
c0003473:	74 03                	je     c0003478 <create_chain+0x1c3>
c0003475:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003478:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000347b:	85 c0                	test   eax,eax
c000347d:	0f 85 63 fe ff ff    	jne    c00032e6 <create_chain+0x31>
c0003483:	eb b5                	jmp    c000343a <create_chain+0x185>
c0003485:	85 d2                	test   edx,edx
c0003487:	75 07                	jne    c0003490 <create_chain+0x1db>
c0003489:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003490:	89 d9                	mov    ecx,ebx
c0003492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003496:	89 e8                	mov    eax,ebp
c0003498:	e8 bb fa ff ff       	call   c0002f58 <fill_last_frag>
c000349d:	85 c0                	test   eax,eax
c000349f:	75 b3                	jne    c0003454 <create_chain+0x19f>
c00034a1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034a8:	eb 90                	jmp    c000343a <create_chain+0x185>
c00034aa:	83 c4 1c             	add    esp,0x1c
c00034ad:	89 d8                	mov    eax,ebx
c00034af:	5b                   	pop    ebx
c00034b0:	5e                   	pop    esi
c00034b1:	5f                   	pop    edi
c00034b2:	5d                   	pop    ebp
c00034b3:	c3                   	ret    

c00034b4 <remove_chain>:
c00034b4:	55                   	push   ebp
c00034b5:	57                   	push   edi
c00034b6:	56                   	push   esi
c00034b7:	53                   	push   ebx
c00034b8:	83 ec 1c             	sub    esp,0x1c
c00034bb:	83 fa 01             	cmp    edx,0x1
c00034be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034c2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034c4:	77 0a                	ja     c00034d0 <remove_chain+0x1c>
c00034c6:	b8 02 00 00 00       	mov    eax,0x2
c00034cb:	e9 24 01 00 00       	jmp    c00035f4 <remove_chain+0x140>
c00034d0:	89 d6                	mov    esi,edx
c00034d2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034d5:	76 ef                	jbe    c00034c6 <remove_chain+0x12>
c00034d7:	89 c7                	mov    edi,eax
c00034d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034de:	75 06                	jne    c00034e6 <remove_chain+0x32>
c00034e0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034e4:	eb 54                	jmp    c000353a <remove_chain+0x86>
c00034e6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034e9:	75 06                	jne    c00034f1 <remove_chain+0x3d>
c00034eb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034ef:	74 ef                	je     c00034e0 <remove_chain+0x2c>
c00034f1:	83 c9 ff             	or     ecx,0xffffffff
c00034f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034f8:	89 d8                	mov    eax,ebx
c00034fa:	e8 c3 f8 ff ff       	call   c0002dc2 <put_fat>
c00034ff:	85 c0                	test   eax,eax
c0003501:	74 dd                	je     c00034e0 <remove_chain+0x2c>
c0003503:	e9 ec 00 00 00       	jmp    c00035f4 <remove_chain+0x140>
c0003508:	83 f8 01             	cmp    eax,0x1
c000350b:	74 b9                	je     c00034c6 <remove_chain+0x12>
c000350d:	83 f8 ff             	cmp    eax,0xffffffff
c0003510:	74 6d                	je     c000357f <remove_chain+0xcb>
c0003512:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003515:	75 6f                	jne    c0003586 <remove_chain+0xd2>
c0003517:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000351a:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000351d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003520:	39 d0                	cmp    eax,edx
c0003522:	73 08                	jae    c000352c <remove_chain+0x78>
c0003524:	40                   	inc    eax
c0003525:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003529:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000352c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000352f:	39 e9                	cmp    ecx,ebp
c0003531:	75 64                	jne    c0003597 <remove_chain+0xe3>
c0003533:	89 ee                	mov    esi,ebp
c0003535:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003538:	76 0f                	jbe    c0003549 <remove_chain+0x95>
c000353a:	89 f2                	mov    edx,esi
c000353c:	89 f8                	mov    eax,edi
c000353e:	e8 84 fa ff ff       	call   c0002fc7 <get_fat>
c0003543:	89 c5                	mov    ebp,eax
c0003545:	85 c0                	test   eax,eax
c0003547:	75 bf                	jne    c0003508 <remove_chain+0x54>
c0003549:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000354c:	0f 85 a0 00 00 00    	jne    c00035f2 <remove_chain+0x13e>
c0003552:	eb 6c                	jmp    c00035c0 <remove_chain+0x10c>
c0003554:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003557:	84 c0                	test   al,al
c0003559:	75 7d                	jne    c00035d8 <remove_chain+0x124>
c000355b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000355e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003562:	0f 84 86 00 00 00    	je     c00035ee <remove_chain+0x13a>
c0003568:	89 da                	mov    edx,ebx
c000356a:	89 f8                	mov    eax,edi
c000356c:	e8 56 fa ff ff       	call   c0002fc7 <get_fat>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	0f 86 4c ff ff ff    	jbe    c00034c6 <remove_chain+0x12>
c000357a:	83 f8 ff             	cmp    eax,0xffffffff
c000357d:	75 4e                	jne    c00035cd <remove_chain+0x119>
c000357f:	b8 01 00 00 00       	mov    eax,0x1
c0003584:	eb 6e                	jmp    c00035f4 <remove_chain+0x140>
c0003586:	31 c9                	xor    ecx,ecx
c0003588:	89 f2                	mov    edx,esi
c000358a:	89 d8                	mov    eax,ebx
c000358c:	e8 31 f8 ff ff       	call   c0002dc2 <put_fat>
c0003591:	85 c0                	test   eax,eax
c0003593:	74 82                	je     c0003517 <remove_chain+0x63>
c0003595:	eb 5d                	jmp    c00035f4 <remove_chain+0x140>
c0003597:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000359a:	75 1b                	jne    c00035b7 <remove_chain+0x103>
c000359c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	83 ec 0c             	sub    esp,0xc
c00035a5:	6a 00                	push   0x0
c00035a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035ab:	e8 5d f7 ff ff       	call   c0002d0d <change_bitmap>
c00035b0:	83 c4 10             	add    esp,0x10
c00035b3:	85 c0                	test   eax,eax
c00035b5:	75 3d                	jne    c00035f4 <remove_chain+0x140>
c00035b7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035bb:	e9 73 ff ff ff       	jmp    c0003533 <remove_chain+0x7f>
c00035c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035c5:	75 8d                	jne    c0003554 <remove_chain+0xa0>
c00035c7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035cb:	eb 25                	jmp    c00035f2 <remove_chain+0x13e>
c00035cd:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d0:	89 c3                	mov    ebx,eax
c00035d2:	39 c2                	cmp    edx,eax
c00035d4:	74 88                	je     c000355e <remove_chain+0xaa>
c00035d6:	eb 1a                	jmp    c00035f2 <remove_chain+0x13e>
c00035d8:	3c 03                	cmp    al,0x3
c00035da:	75 16                	jne    c00035f2 <remove_chain+0x13e>
c00035dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035df:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035e3:	77 0d                	ja     c00035f2 <remove_chain+0x13e>
c00035e5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035e8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ec:	72 04                	jb     c00035f2 <remove_chain+0x13e>
c00035ee:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035f2:	31 c0                	xor    eax,eax
c00035f4:	83 c4 1c             	add    esp,0x1c
c00035f7:	5b                   	pop    ebx
c00035f8:	5e                   	pop    esi
c00035f9:	5f                   	pop    edi
c00035fa:	5d                   	pop    ebp
c00035fb:	c3                   	ret    

c00035fc <dir_clear>:
c00035fc:	55                   	push   ebp
c00035fd:	57                   	push   edi
c00035fe:	56                   	push   esi
c00035ff:	89 c6                	mov    esi,eax
c0003601:	53                   	push   ebx
c0003602:	83 ec 1c             	sub    esp,0x1c
c0003605:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003609:	e8 9d ed ff ff       	call   c00023ab <sync_window>
c000360e:	85 c0                	test   eax,eax
c0003610:	0f 85 de 00 00 00    	jne    c00036f4 <dir_clear+0xf8>
c0003616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000361a:	89 f0                	mov    eax,esi
c000361c:	8d 6e 54             	lea    ebp,[esi+0x54]
c000361f:	e8 d6 e8 ff ff       	call   c0001efa <clst2sect>
c0003624:	b9 00 02 00 00       	mov    ecx,0x200
c0003629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000362d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003631:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003634:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003637:	89 e8                	mov    eax,ebp
c0003639:	31 d2                	xor    edx,edx
c000363b:	e8 b5 e6 ff ff       	call   c0001cf5 <mem_set>
c0003640:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003644:	c1 e3 09             	shl    ebx,0x9
c0003647:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000364d:	76 1f                	jbe    c000366e <dir_clear+0x72>
c000364f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003654:	eb 18                	jmp    c000366e <dir_clear+0x72>
c0003656:	83 ec 0c             	sub    esp,0xc
c0003659:	53                   	push   ebx
c000365a:	e8 35 4e 00 00       	call   c0008494 <ff_memalloc>
c000365f:	83 c4 10             	add    esp,0x10
c0003662:	89 c7                	mov    edi,eax
c0003664:	85 c0                	test   eax,eax
c0003666:	0f 85 8f 00 00 00    	jne    c00036fb <dir_clear+0xff>
c000366c:	d1 eb                	shr    ebx,1
c000366e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003674:	77 e0                	ja     c0003656 <dir_clear+0x5a>
c0003676:	31 db                	xor    ebx,ebx
c0003678:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000367c:	39 d8                	cmp    eax,ebx
c000367e:	76 66                	jbe    c00036e6 <dir_clear+0xea>
c0003680:	83 ec 0c             	sub    esp,0xc
c0003683:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003687:	6a 01                	push   0x1
c0003689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000368d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003691:	55                   	push   ebp
c0003692:	50                   	push   eax
c0003693:	e8 94 e5 ff ff       	call   c0001c2c <disk_write>
c0003698:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000369d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036a2:	83 c4 20             	add    esp,0x20
c00036a5:	85 c0                	test   eax,eax
c00036a7:	75 3d                	jne    c00036e6 <dir_clear+0xea>
c00036a9:	43                   	inc    ebx
c00036aa:	eb cc                	jmp    c0003678 <dir_clear+0x7c>
c00036ac:	83 ec 0c             	sub    esp,0xc
c00036af:	31 d2                	xor    edx,edx
c00036b1:	55                   	push   ebp
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036b8:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036bc:	52                   	push   edx
c00036bd:	50                   	push   eax
c00036be:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036c2:	57                   	push   edi
c00036c3:	50                   	push   eax
c00036c4:	e8 63 e5 ff ff       	call   c0001c2c <disk_write>
c00036c9:	83 c4 20             	add    esp,0x20
c00036cc:	85 c0                	test   eax,eax
c00036ce:	75 0a                	jne    c00036da <dir_clear+0xde>
c00036d0:	01 eb                	add    ebx,ebp
c00036d2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d6:	39 d8                	cmp    eax,ebx
c00036d8:	77 d2                	ja     c00036ac <dir_clear+0xb0>
c00036da:	83 ec 0c             	sub    esp,0xc
c00036dd:	57                   	push   edi
c00036de:	e8 c7 4d 00 00       	call   c00084aa <ff_memfree>
c00036e3:	83 c4 10             	add    esp,0x10
c00036e6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036ea:	39 d8                	cmp    eax,ebx
c00036ec:	0f 95 c0             	setne  al
c00036ef:	0f b6 c0             	movzx  eax,al
c00036f2:	eb 19                	jmp    c000370d <dir_clear+0x111>
c00036f4:	b8 01 00 00 00       	mov    eax,0x1
c00036f9:	eb 12                	jmp    c000370d <dir_clear+0x111>
c00036fb:	89 d9                	mov    ecx,ebx
c00036fd:	31 d2                	xor    edx,edx
c00036ff:	c1 eb 09             	shr    ebx,0x9
c0003702:	e8 ee e5 ff ff       	call   c0001cf5 <mem_set>
c0003707:	89 dd                	mov    ebp,ebx
c0003709:	31 db                	xor    ebx,ebx
c000370b:	eb c5                	jmp    c00036d2 <dir_clear+0xd6>
c000370d:	83 c4 1c             	add    esp,0x1c
c0003710:	5b                   	pop    ebx
c0003711:	5e                   	pop    esi
c0003712:	5f                   	pop    edi
c0003713:	5d                   	pop    ebp
c0003714:	c3                   	ret    

c0003715 <dir_next>:
c0003715:	55                   	push   ebp
c0003716:	57                   	push   edi
c0003717:	56                   	push   esi
c0003718:	53                   	push   ebx
c0003719:	89 c3                	mov    ebx,eax
c000371b:	83 ec 1c             	sub    esp,0x1c
c000371e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003724:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003727:	8d 78 20             	lea    edi,[eax+0x20]
c000372a:	31 c0                	xor    eax,eax
c000372c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003730:	0f 94 c0             	sete   al
c0003733:	48                   	dec    eax
c0003734:	25 00 00 20 f0       	and    eax,0xf0200000
c0003739:	05 00 00 00 10       	add    eax,0x10000000
c000373e:	39 f8                	cmp    eax,edi
c0003740:	77 0e                	ja     c0003750 <dir_next+0x3b>
c0003742:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003749:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003750:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003753:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003756:	b8 04 00 00 00       	mov    eax,0x4
c000375b:	89 ce                	mov    esi,ecx
c000375d:	09 d6                	or     esi,edx
c000375f:	0f 84 da 00 00 00    	je     c000383f <dir_next+0x12a>
c0003765:	89 f8                	mov    eax,edi
c0003767:	25 ff 01 00 00       	and    eax,0x1ff
c000376c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003770:	0f 85 b9 00 00 00    	jne    c000382f <dir_next+0x11a>
c0003776:	83 c2 01             	add    edx,0x1
c0003779:	83 d1 00             	adc    ecx,0x0
c000377c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000377f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003782:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003785:	85 d2                	test   edx,edx
c0003787:	75 29                	jne    c00037b2 <dir_next+0x9d>
c0003789:	89 fa                	mov    edx,edi
c000378b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000378f:	c1 ea 05             	shr    edx,0x5
c0003792:	39 c2                	cmp    edx,eax
c0003794:	0f 82 95 00 00 00    	jb     c000382f <dir_next+0x11a>
c000379a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037a8:	b8 04 00 00 00       	mov    eax,0x4
c00037ad:	e9 8d 00 00 00       	jmp    c000383f <dir_next+0x12a>
c00037b2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037b6:	89 f9                	mov    ecx,edi
c00037b8:	48                   	dec    eax
c00037b9:	c1 e9 09             	shr    ecx,0x9
c00037bc:	85 c8                	test   eax,ecx
c00037be:	75 6f                	jne    c000382f <dir_next+0x11a>
c00037c0:	89 d8                	mov    eax,ebx
c00037c2:	e8 00 f8 ff ff       	call   c0002fc7 <get_fat>
c00037c7:	89 c6                	mov    esi,eax
c00037c9:	83 f8 01             	cmp    eax,0x1
c00037cc:	77 07                	ja     c00037d5 <dir_next+0xc0>
c00037ce:	b8 02 00 00 00       	mov    eax,0x2
c00037d3:	eb 6a                	jmp    c000383f <dir_next+0x12a>
c00037d5:	83 f8 ff             	cmp    eax,0xffffffff
c00037d8:	75 07                	jne    c00037e1 <dir_next+0xcc>
c00037da:	b8 01 00 00 00       	mov    eax,0x1
c00037df:	eb 5e                	jmp    c000383f <dir_next+0x12a>
c00037e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037e4:	77 37                	ja     c000381d <dir_next+0x108>
c00037e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037eb:	74 ad                	je     c000379a <dir_next+0x85>
c00037ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f0:	89 d8                	mov    eax,ebx
c00037f2:	e8 be fa ff ff       	call   c00032b5 <create_chain>
c00037f7:	89 c6                	mov    esi,eax
c00037f9:	b8 07 00 00 00       	mov    eax,0x7
c00037fe:	85 f6                	test   esi,esi
c0003800:	74 3d                	je     c000383f <dir_next+0x12a>
c0003802:	83 fe 01             	cmp    esi,0x1
c0003805:	74 c7                	je     c00037ce <dir_next+0xb9>
c0003807:	83 fe ff             	cmp    esi,0xffffffff
c000380a:	74 ce                	je     c00037da <dir_next+0xc5>
c000380c:	89 f2                	mov    edx,esi
c000380e:	89 e8                	mov    eax,ebp
c0003810:	e8 e7 fd ff ff       	call   c00035fc <dir_clear>
c0003815:	85 c0                	test   eax,eax
c0003817:	75 c1                	jne    c00037da <dir_next+0xc5>
c0003819:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000381d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003820:	89 f2                	mov    edx,esi
c0003822:	89 e8                	mov    eax,ebp
c0003824:	e8 d1 e6 ff ff       	call   c0001efa <clst2sect>
c0003829:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000382c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000382f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003833:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003836:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000383a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000383d:	31 c0                	xor    eax,eax
c000383f:	83 c4 1c             	add    esp,0x1c
c0003842:	5b                   	pop    ebx
c0003843:	5e                   	pop    esi
c0003844:	5f                   	pop    edi
c0003845:	5d                   	pop    ebp
c0003846:	c3                   	ret    

c0003847 <load_xdir>:
c0003847:	55                   	push   ebp
c0003848:	57                   	push   edi
c0003849:	56                   	push   esi
c000384a:	89 c6                	mov    esi,eax
c000384c:	53                   	push   ebx
c000384d:	83 ec 1c             	sub    esp,0x1c
c0003850:	8b 00                	mov    eax,DWORD PTR [eax]
c0003852:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003855:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003858:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000385b:	e8 df eb ff ff       	call   c000243f <move_window>
c0003860:	89 c3                	mov    ebx,eax
c0003862:	85 c0                	test   eax,eax
c0003864:	0f 85 0c 01 00 00    	jne    c0003976 <load_xdir+0x12f>
c000386a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000386d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003870:	0f 85 fb 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c0003876:	89 f8                	mov    eax,edi
c0003878:	b9 20 00 00 00       	mov    ecx,0x20
c000387d:	e8 5e e4 ff ff       	call   c0001ce0 <mem_cpy>
c0003882:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003886:	40                   	inc    eax
c0003887:	c1 e0 05             	shl    eax,0x5
c000388a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000388e:	83 e8 60             	sub    eax,0x60
c0003891:	3d 00 02 00 00       	cmp    eax,0x200
c0003896:	0f 87 d5 00 00 00    	ja     c0003971 <load_xdir+0x12a>
c000389c:	31 d2                	xor    edx,edx
c000389e:	89 f0                	mov    eax,esi
c00038a0:	e8 70 fe ff ff       	call   c0003715 <dir_next>
c00038a5:	89 c3                	mov    ebx,eax
c00038a7:	83 f8 04             	cmp    eax,0x4
c00038aa:	0f 84 c1 00 00 00    	je     c0003971 <load_xdir+0x12a>
c00038b0:	85 c0                	test   eax,eax
c00038b2:	0f 85 be 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038b8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038bb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038be:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c0:	e8 7a eb ff ff       	call   c000243f <move_window>
c00038c5:	89 c3                	mov    ebx,eax
c00038c7:	85 c0                	test   eax,eax
c00038c9:	0f 85 a7 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038d2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038d5:	0f 85 96 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c00038db:	8d 47 20             	lea    eax,[edi+0x20]
c00038de:	b9 20 00 00 00       	mov    ecx,0x20
c00038e3:	e8 f8 e3 ff ff       	call   c0001ce0 <mem_cpy>
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038ee:	b9 0f 00 00 00       	mov    ecx,0xf
c00038f3:	83 c0 2c             	add    eax,0x2c
c00038f6:	f7 f1                	div    ecx
c00038f8:	c1 e0 05             	shl    eax,0x5
c00038fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ff:	77 70                	ja     c0003971 <load_xdir+0x12a>
c0003901:	bd 40 00 00 00       	mov    ebp,0x40
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 f0                	mov    eax,esi
c000390a:	e8 06 fe ff ff       	call   c0003715 <dir_next>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	74 5b                	je     c0003971 <load_xdir+0x12a>
c0003916:	85 c0                	test   eax,eax
c0003918:	75 5c                	jne    c0003976 <load_xdir+0x12f>
c000391a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000391d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003920:	8b 06                	mov    eax,DWORD PTR [esi]
c0003922:	e8 18 eb ff ff       	call   c000243f <move_window>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 49                	jne    c0003976 <load_xdir+0x12f>
c000392d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003930:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003933:	75 3c                	jne    c0003971 <load_xdir+0x12a>
c0003935:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000393b:	77 0d                	ja     c000394a <load_xdir+0x103>
c000393d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003940:	b9 20 00 00 00       	mov    ecx,0x20
c0003945:	e8 96 e3 ff ff       	call   c0001ce0 <mem_cpy>
c000394a:	83 c5 20             	add    ebp,0x20
c000394d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003951:	77 b3                	ja     c0003906 <load_xdir+0xbf>
c0003953:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003959:	77 1b                	ja     c0003976 <load_xdir+0x12f>
c000395b:	89 f8                	mov    eax,edi
c000395d:	e8 cd e7 ff ff       	call   c000212f <xdir_sum>
c0003962:	89 c1                	mov    ecx,eax
c0003964:	8d 47 02             	lea    eax,[edi+0x2]
c0003967:	e8 f5 e2 ff ff       	call   c0001c61 <ld_word>
c000396c:	66 39 c1             	cmp    cx,ax
c000396f:	74 05                	je     c0003976 <load_xdir+0x12f>
c0003971:	bb 02 00 00 00       	mov    ebx,0x2
c0003976:	83 c4 1c             	add    esp,0x1c
c0003979:	89 d8                	mov    eax,ebx
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	5d                   	pop    ebp
c000397f:	c3                   	ret    

c0003980 <load_obj_xdir>:
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	83 ec 08             	sub    esp,0x8
c0003986:	8b 02                	mov    eax,DWORD PTR [edx]
c0003988:	89 03                	mov    DWORD PTR [ebx],eax
c000398a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000398d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003990:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003993:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003996:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003999:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a0:	30 c0                	xor    al,al
c00039a2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039a9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b1:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039b4:	e8 04 f8 ff ff       	call   c00031bd <dir_sdi>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	75 0b                	jne    c00039c8 <load_obj_xdir+0x48>
c00039bd:	89 d8                	mov    eax,ebx
c00039bf:	83 c4 08             	add    esp,0x8
c00039c2:	5b                   	pop    ebx
c00039c3:	e9 7f fe ff ff       	jmp    c0003847 <load_xdir>
c00039c8:	83 c4 08             	add    esp,0x8
c00039cb:	5b                   	pop    ebx
c00039cc:	c3                   	ret    

c00039cd <dir_read>:
c00039cd:	55                   	push   ebp
c00039ce:	bd 04 00 00 00       	mov    ebp,0x4
c00039d3:	57                   	push   edi
c00039d4:	56                   	push   esi
c00039d5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039da:	53                   	push   ebx
c00039db:	89 c3                	mov    ebx,eax
c00039dd:	83 ec 1c             	sub    esp,0x1c
c00039e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039e6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039eb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039ee:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f1:	89 c8                	mov    eax,ecx
c00039f3:	09 d0                	or     eax,edx
c00039f5:	0f 84 25 01 00 00    	je     c0003b20 <dir_read+0x153>
c00039fb:	89 f8                	mov    eax,edi
c00039fd:	e8 3d ea ff ff       	call   c000243f <move_window>
c0003a02:	89 c5                	mov    ebp,eax
c0003a04:	85 c0                	test   eax,eax
c0003a06:	0f 85 23 01 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a0c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a0f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a11:	84 c9                	test   cl,cl
c0003a13:	0f 84 11 01 00 00    	je     c0003b2a <dir_read+0x15d>
c0003a19:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a1c:	75 48                	jne    c0003a66 <dir_read+0x99>
c0003a1e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a23:	74 10                	je     c0003a35 <dir_read+0x68>
c0003a25:	80 f9 83             	cmp    cl,0x83
c0003a28:	0f 85 dd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a2e:	31 ed                	xor    ebp,ebp
c0003a30:	e9 08 01 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a35:	80 f9 85             	cmp    cl,0x85
c0003a38:	0f 85 cd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a3e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a41:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a44:	89 d8                	mov    eax,ebx
c0003a46:	e8 fc fd ff ff       	call   c0003847 <load_xdir>
c0003a4b:	89 c5                	mov    ebp,eax
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	0f 85 da 00 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a55:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a58:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a5b:	83 e0 3f             	and    eax,0x3f
c0003a5e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a61:	e9 d7 00 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a66:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a69:	83 e0 3f             	and    eax,0x3f
c0003a6c:	80 f9 2e             	cmp    cl,0x2e
c0003a6f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a76:	0f 84 8a 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a7c:	80 f9 e5             	cmp    cl,0xe5
c0003a7f:	0f 84 81 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a89:	83 e0 1f             	and    eax,0x1f
c0003a8c:	83 f8 08             	cmp    eax,0x8
c0003a8f:	0f 94 c0             	sete   al
c0003a92:	0f b6 c0             	movzx  eax,al
c0003a95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a99:	75 6b                	jne    c0003b06 <dir_read+0x139>
c0003a9b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa0:	75 44                	jne    c0003ae6 <dir_read+0x119>
c0003aa2:	f6 c1 40             	test   cl,0x40
c0003aa5:	74 12                	je     c0003ab9 <dir_read+0xec>
c0003aa7:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003aaa:	83 e1 bf             	and    ecx,0xffffffbf
c0003aad:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ab4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ab7:	eb 06                	jmp    c0003abf <dir_read+0xf2>
c0003ab9:	89 f0                	mov    eax,esi
c0003abb:	38 c8                	cmp    al,cl
c0003abd:	75 47                	jne    c0003b06 <dir_read+0x139>
c0003abf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ac3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ac8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003acb:	75 3e                	jne    c0003b0b <dir_read+0x13e>
c0003acd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ad4:	e8 8a e4 ff ff       	call   c0001f63 <pick_lfn>
c0003ad9:	85 c0                	test   eax,eax
c0003adb:	74 2e                	je     c0003b0b <dir_read+0x13e>
c0003add:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ae4:	eb 25                	jmp    c0003b0b <dir_read+0x13e>
c0003ae6:	89 f0                	mov    eax,esi
c0003ae8:	84 c0                	test   al,al
c0003aea:	75 11                	jne    c0003afd <dir_read+0x130>
c0003aec:	89 d0                	mov    eax,edx
c0003aee:	e8 2a e6 ff ff       	call   c000211d <sum_sfn>
c0003af3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003af7:	0f 84 31 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003afd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b04:	eb 37                	jmp    c0003b3d <dir_read+0x170>
c0003b06:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b0b:	31 d2                	xor    edx,edx
c0003b0d:	89 d8                	mov    eax,ebx
c0003b0f:	e8 01 fc ff ff       	call   c0003715 <dir_next>
c0003b14:	89 c5                	mov    ebp,eax
c0003b16:	85 c0                	test   eax,eax
c0003b18:	0f 84 cd fe ff ff    	je     c00039eb <dir_read+0x1e>
c0003b1e:	eb 0f                	jmp    c0003b2f <dir_read+0x162>
c0003b20:	85 ed                	test   ebp,ebp
c0003b22:	0f 84 06 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003b28:	eb 05                	jmp    c0003b2f <dir_read+0x162>
c0003b2a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b2f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b36:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b3d:	83 c4 1c             	add    esp,0x1c
c0003b40:	89 e8                	mov    eax,ebp
c0003b42:	5b                   	pop    ebx
c0003b43:	5e                   	pop    esi
c0003b44:	5f                   	pop    edi
c0003b45:	5d                   	pop    ebp
c0003b46:	c3                   	ret    

c0003b47 <dir_alloc>:
c0003b47:	55                   	push   ebp
c0003b48:	89 d5                	mov    ebp,edx
c0003b4a:	57                   	push   edi
c0003b4b:	31 d2                	xor    edx,edx
c0003b4d:	56                   	push   esi
c0003b4e:	53                   	push   ebx
c0003b4f:	89 c3                	mov    ebx,eax
c0003b51:	83 ec 0c             	sub    esp,0xc
c0003b54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b56:	e8 62 f6 ff ff       	call   c00031bd <dir_sdi>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	75 4e                	jne    c0003bad <dir_alloc+0x66>
c0003b5f:	31 f6                	xor    esi,esi
c0003b61:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b64:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b67:	89 f8                	mov    eax,edi
c0003b69:	e8 d1 e8 ff ff       	call   c000243f <move_window>
c0003b6e:	85 c0                	test   eax,eax
c0003b70:	75 3b                	jne    c0003bad <dir_alloc+0x66>
c0003b72:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b75:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b78:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b7a:	75 07                	jne    c0003b83 <dir_alloc+0x3c>
c0003b7c:	f7 d2                	not    edx
c0003b7e:	c0 ea 07             	shr    dl,0x7
c0003b81:	eb 0d                	jmp    c0003b90 <dir_alloc+0x49>
c0003b83:	84 d2                	test   dl,dl
c0003b85:	0f 94 c1             	sete   cl
c0003b88:	80 fa e5             	cmp    dl,0xe5
c0003b8b:	0f 94 c2             	sete   dl
c0003b8e:	09 ca                	or     edx,ecx
c0003b90:	84 d2                	test   dl,dl
c0003b92:	74 07                	je     c0003b9b <dir_alloc+0x54>
c0003b94:	46                   	inc    esi
c0003b95:	39 ee                	cmp    esi,ebp
c0003b97:	75 04                	jne    c0003b9d <dir_alloc+0x56>
c0003b99:	eb 1c                	jmp    c0003bb7 <dir_alloc+0x70>
c0003b9b:	31 f6                	xor    esi,esi
c0003b9d:	ba 01 00 00 00       	mov    edx,0x1
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 6c fb ff ff       	call   c0003715 <dir_next>
c0003ba9:	85 c0                	test   eax,eax
c0003bab:	74 b4                	je     c0003b61 <dir_alloc+0x1a>
c0003bad:	83 f8 04             	cmp    eax,0x4
c0003bb0:	75 05                	jne    c0003bb7 <dir_alloc+0x70>
c0003bb2:	b8 07 00 00 00       	mov    eax,0x7
c0003bb7:	83 c4 0c             	add    esp,0xc
c0003bba:	5b                   	pop    ebx
c0003bbb:	5e                   	pop    esi
c0003bbc:	5f                   	pop    edi
c0003bbd:	5d                   	pop    ebp
c0003bbe:	c3                   	ret    

c0003bbf <store_xdir>:
c0003bbf:	55                   	push   ebp
c0003bc0:	57                   	push   edi
c0003bc1:	89 c7                	mov    edi,eax
c0003bc3:	56                   	push   esi
c0003bc4:	53                   	push   ebx
c0003bc5:	83 ec 0c             	sub    esp,0xc
c0003bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bca:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bcd:	89 e8                	mov    eax,ebp
c0003bcf:	e8 5b e5 ff ff       	call   c000212f <xdir_sum>
c0003bd4:	0f b7 d0             	movzx  edx,ax
c0003bd7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bda:	e8 f4 e0 ff ff       	call   c0001cd3 <st_word>
c0003bdf:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003be3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003be6:	89 f8                	mov    eax,edi
c0003be8:	e8 d0 f5 ff ff       	call   c00031bd <dir_sdi>
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	85 f6                	test   esi,esi
c0003bf1:	75 3d                	jne    c0003c30 <store_xdir+0x71>
c0003bf3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bf6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bfb:	e8 3f e8 ff ff       	call   c000243f <move_window>
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	85 c0                	test   eax,eax
c0003c04:	75 2a                	jne    c0003c30 <store_xdir+0x71>
c0003c06:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c09:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0e:	89 ea                	mov    edx,ebp
c0003c10:	e8 cb e0 ff ff       	call   c0001ce0 <mem_cpy>
c0003c15:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c17:	85 db                	test   ebx,ebx
c0003c19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c1d:	74 11                	je     c0003c30 <store_xdir+0x71>
c0003c1f:	31 d2                	xor    edx,edx
c0003c21:	89 f8                	mov    eax,edi
c0003c23:	83 c5 20             	add    ebp,0x20
c0003c26:	e8 ea fa ff ff       	call   c0003715 <dir_next>
c0003c2b:	4b                   	dec    ebx
c0003c2c:	89 c6                	mov    esi,eax
c0003c2e:	eb bf                	jmp    c0003bef <store_xdir+0x30>
c0003c30:	89 f0                	mov    eax,esi
c0003c32:	83 fe 02             	cmp    esi,0x2
c0003c35:	76 05                	jbe    c0003c3c <store_xdir+0x7d>
c0003c37:	b8 02 00 00 00       	mov    eax,0x2
c0003c3c:	83 c4 0c             	add    esp,0xc
c0003c3f:	5b                   	pop    ebx
c0003c40:	5e                   	pop    esi
c0003c41:	5f                   	pop    edi
c0003c42:	5d                   	pop    ebp
c0003c43:	c3                   	ret    

c0003c44 <dir_remove>:
c0003c44:	57                   	push   edi
c0003c45:	56                   	push   esi
c0003c46:	53                   	push   ebx
c0003c47:	89 c3                	mov    ebx,eax
c0003c49:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c4c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c4e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c51:	83 fa ff             	cmp    edx,0xffffffff
c0003c54:	74 09                	je     c0003c5f <dir_remove+0x1b>
c0003c56:	e8 62 f5 ff ff       	call   c00031bd <dir_sdi>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	75 41                	jne    c0003ca0 <dir_remove+0x5c>
c0003c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c62:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c65:	89 f0                	mov    eax,esi
c0003c67:	e8 d3 e7 ff ff       	call   c000243f <move_window>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	75 26                	jne    c0003c96 <dir_remove+0x52>
c0003c70:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c73:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c76:	75 05                	jne    c0003c7d <dir_remove+0x39>
c0003c78:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c7b:	eb 03                	jmp    c0003c80 <dir_remove+0x3c>
c0003c7d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c80:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c84:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c87:	73 17                	jae    c0003ca0 <dir_remove+0x5c>
c0003c89:	31 d2                	xor    edx,edx
c0003c8b:	89 d8                	mov    eax,ebx
c0003c8d:	e8 83 fa ff ff       	call   c0003715 <dir_next>
c0003c92:	85 c0                	test   eax,eax
c0003c94:	74 c9                	je     c0003c5f <dir_remove+0x1b>
c0003c96:	83 f8 04             	cmp    eax,0x4
c0003c99:	75 05                	jne    c0003ca0 <dir_remove+0x5c>
c0003c9b:	b8 02 00 00 00       	mov    eax,0x2
c0003ca0:	5b                   	pop    ebx
c0003ca1:	5e                   	pop    esi
c0003ca2:	5f                   	pop    edi
c0003ca3:	c3                   	ret    

c0003ca4 <create_name>:
c0003ca4:	55                   	push   ebp
c0003ca5:	89 d5                	mov    ebp,edx
c0003ca7:	57                   	push   edi
c0003ca8:	89 c7                	mov    edi,eax
c0003caa:	56                   	push   esi
c0003cab:	31 f6                	xor    esi,esi
c0003cad:	53                   	push   ebx
c0003cae:	83 ec 3c             	sub    esp,0x3c
c0003cb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cb7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cc4:	e8 72 e0 ff ff       	call   c0001d3b <tchar2uni>
c0003cc9:	89 c3                	mov    ebx,eax
c0003ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0003cce:	75 0a                	jne    c0003cda <create_name+0x36>
c0003cd0:	b8 06 00 00 00       	mov    eax,0x6
c0003cd5:	e9 9e 02 00 00       	jmp    c0003f78 <create_name+0x2d4>
c0003cda:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cdf:	76 0c                	jbe    c0003ced <create_name+0x49>
c0003ce1:	c1 e8 10             	shr    eax,0x10
c0003ce4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ce8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cec:	46                   	inc    esi
c0003ced:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf1:	76 4f                	jbe    c0003d42 <create_name+0x9e>
c0003cf3:	66 83 fb 5c          	cmp    bx,0x5c
c0003cf7:	74 35                	je     c0003d2e <create_name+0x8a>
c0003cf9:	66 83 fb 2f          	cmp    bx,0x2f
c0003cfd:	74 2f                	je     c0003d2e <create_name+0x8a>
c0003cff:	66 83 fb 7f          	cmp    bx,0x7f
c0003d03:	77 11                	ja     c0003d16 <create_name+0x72>
c0003d05:	0f b7 d3             	movzx  edx,bx
c0003d08:	b8 72 93 02 c0       	mov    eax,0xc0029372
c0003d0d:	e8 11 e0 ff ff       	call   c0001d23 <chk_chr>
c0003d12:	85 c0                	test   eax,eax
c0003d14:	75 ba                	jne    c0003cd0 <create_name+0x2c>
c0003d16:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d1c:	77 b2                	ja     c0003cd0 <create_name+0x2c>
c0003d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d22:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d26:	46                   	inc    esi
c0003d27:	eb 97                	jmp    c0003cc0 <create_name+0x1c>
c0003d29:	40                   	inc    eax
c0003d2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d32:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d34:	80 fa 2f             	cmp    dl,0x2f
c0003d37:	74 f0                	je     c0003d29 <create_name+0x85>
c0003d39:	80 fa 5c             	cmp    dl,0x5c
c0003d3c:	74 eb                	je     c0003d29 <create_name+0x85>
c0003d3e:	31 db                	xor    ebx,ebx
c0003d40:	eb 02                	jmp    c0003d44 <create_name+0xa0>
c0003d42:	b3 04                	mov    bl,0x4
c0003d44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d4b:	85 f6                	test   esi,esi
c0003d4d:	74 18                	je     c0003d67 <create_name+0xc3>
c0003d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d53:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d58:	66 83 f8 20          	cmp    ax,0x20
c0003d5c:	74 06                	je     c0003d64 <create_name+0xc0>
c0003d5e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d62:	75 03                	jne    c0003d67 <create_name+0xc3>
c0003d64:	4e                   	dec    esi
c0003d65:	eb e4                	jmp    c0003d4b <create_name+0xa7>
c0003d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6b:	31 ed                	xor    ebp,ebp
c0003d6d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d73:	85 f6                	test   esi,esi
c0003d75:	0f 84 55 ff ff ff    	je     c0003cd0 <create_name+0x2c>
c0003d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d7f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d82:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d86:	66 83 f8 20          	cmp    ax,0x20
c0003d8a:	75 04                	jne    c0003d90 <create_name+0xec>
c0003d8c:	89 d5                	mov    ebp,edx
c0003d8e:	eb eb                	jmp    c0003d7b <create_name+0xd7>
c0003d90:	85 ed                	test   ebp,ebp
c0003d92:	75 06                	jne    c0003d9a <create_name+0xf6>
c0003d94:	66 83 f8 2e          	cmp    ax,0x2e
c0003d98:	75 08                	jne    c0003da2 <create_name+0xfe>
c0003d9a:	83 cb 03             	or     ebx,0x3
c0003d9d:	eb 03                	jmp    c0003da2 <create_name+0xfe>
c0003d9f:	4e                   	dec    esi
c0003da0:	74 0c                	je     c0003dae <create_name+0x10a>
c0003da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da6:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dac:	75 f1                	jne    c0003d9f <create_name+0xfb>
c0003dae:	b9 0b 00 00 00       	mov    ecx,0xb
c0003db3:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003db6:	ba 20 00 00 00       	mov    edx,0x20
c0003dbb:	e8 35 df ff ff       	call   c0001cf5 <mem_set>
c0003dc0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dc8:	31 c9                	xor    ecx,ecx
c0003dca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dcf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dda:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	0f 84 30 01 00 00    	je     c0003f17 <create_name+0x273>
c0003de7:	66 83 fd 20          	cmp    bp,0x20
c0003deb:	74 10                	je     c0003dfd <create_name+0x159>
c0003ded:	66 83 fd 2e          	cmp    bp,0x2e
c0003df1:	75 13                	jne    c0003e06 <create_name+0x162>
c0003df3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df7:	0f 84 6b 01 00 00    	je     c0003f68 <create_name+0x2c4>
c0003dfd:	83 cb 03             	or     ebx,0x3
c0003e00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e04:	eb c9                	jmp    c0003dcf <create_name+0x12b>
c0003e06:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e0a:	73 0b                	jae    c0003e17 <create_name+0x173>
c0003e0c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e10:	75 47                	jne    c0003e59 <create_name+0x1b5>
c0003e12:	e9 51 01 00 00       	jmp    c0003f68 <create_name+0x2c4>
c0003e17:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e1c:	75 10                	jne    c0003e2e <create_name+0x18a>
c0003e1e:	83 cb 03             	or     ebx,0x3
c0003e21:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e29:	e9 e9 00 00 00       	jmp    c0003f17 <create_name+0x273>
c0003e2e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e32:	74 0d                	je     c0003e41 <create_name+0x19d>
c0003e34:	83 cb 03             	or     ebx,0x3
c0003e37:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3b:	0f 87 d6 00 00 00    	ja     c0003f17 <create_name+0x273>
c0003e41:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e46:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e4a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e52:	b9 08 00 00 00       	mov    ecx,0x8
c0003e57:	eb a7                	jmp    c0003e00 <create_name+0x15c>
c0003e59:	66 83 fd 7f          	cmp    bp,0x7f
c0003e5d:	76 68                	jbe    c0003ec7 <create_name+0x223>
c0003e5f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e63:	88 da                	mov    dl,bl
c0003e65:	83 ca 02             	or     edx,0x2
c0003e68:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e6c:	50                   	push   eax
c0003e6d:	50                   	push   eax
c0003e6e:	68 b5 01 00 00       	push   0x1b5
c0003e73:	55                   	push   ebp
c0003e74:	e8 48 46 00 00       	call   c00084c1 <ff_uni2oem>
c0003e79:	83 c4 10             	add    esp,0x10
c0003e7c:	89 c5                	mov    ebp,eax
c0003e7e:	a8 80                	test   al,0x80
c0003e80:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e88:	74 0c                	je     c0003e96 <create_name+0x1f2>
c0003e8a:	83 e5 7f             	and    ebp,0x7f
c0003e8d:	0f b6 ad c0 92 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6d40]
c0003e94:	eb 2a                	jmp    c0003ec0 <create_name+0x21c>
c0003e96:	66 3d ff 00          	cmp    ax,0xff
c0003e9a:	76 24                	jbe    c0003ec0 <create_name+0x21c>
c0003e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea0:	48                   	dec    eax
c0003ea1:	39 c8                	cmp    eax,ecx
c0003ea3:	77 0c                	ja     c0003eb1 <create_name+0x20d>
c0003ea5:	83 cb 03             	or     ebx,0x3
c0003ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eac:	e9 4f ff ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003eb1:	89 e8                	mov    eax,ebp
c0003eb3:	88 d3                	mov    bl,dl
c0003eb5:	66 c1 e8 08          	shr    ax,0x8
c0003eb9:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ebd:	41                   	inc    ecx
c0003ebe:	eb 4b                	jmp    c0003f0b <create_name+0x267>
c0003ec0:	88 d3                	mov    bl,dl
c0003ec2:	66 85 ed             	test   bp,bp
c0003ec5:	74 19                	je     c0003ee0 <create_name+0x23c>
c0003ec7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ecb:	0f b7 d5             	movzx  edx,bp
c0003ece:	b8 7b 93 02 c0       	mov    eax,0xc002937b
c0003ed3:	e8 4b de ff ff       	call   c0001d23 <chk_chr>
c0003ed8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003edc:	85 c0                	test   eax,eax
c0003ede:	74 0a                	je     c0003eea <create_name+0x246>
c0003ee0:	83 cb 03             	or     ebx,0x3
c0003ee3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ee8:	eb 21                	jmp    c0003f0b <create_name+0x267>
c0003eea:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eed:	66 83 f8 19          	cmp    ax,0x19
c0003ef1:	77 07                	ja     c0003efa <create_name+0x256>
c0003ef3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ef8:	eb 11                	jmp    c0003f0b <create_name+0x267>
c0003efa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003efd:	66 83 f8 19          	cmp    ax,0x19
c0003f01:	77 08                	ja     c0003f0b <create_name+0x267>
c0003f03:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f08:	83 ed 20             	sub    ebp,0x20
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f11:	41                   	inc    ecx
c0003f12:	e9 e9 fe ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003f17:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f1b:	75 04                	jne    c0003f21 <create_name+0x27d>
c0003f1d:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f21:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f26:	75 05                	jne    c0003f2d <create_name+0x289>
c0003f28:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f31:	83 e0 0c             	and    eax,0xc
c0003f34:	3c 0c                	cmp    al,0xc
c0003f36:	74 0b                	je     c0003f43 <create_name+0x29f>
c0003f38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f3c:	83 e0 03             	and    eax,0x3
c0003f3f:	3c 03                	cmp    al,0x3
c0003f41:	75 05                	jne    c0003f48 <create_name+0x2a4>
c0003f43:	83 cb 02             	or     ebx,0x2
c0003f46:	eb 19                	jmp    c0003f61 <create_name+0x2bd>
c0003f48:	f6 c3 02             	test   bl,0x2
c0003f4b:	75 14                	jne    c0003f61 <create_name+0x2bd>
c0003f4d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f52:	74 03                	je     c0003f57 <create_name+0x2b3>
c0003f54:	83 cb 10             	or     ebx,0x10
c0003f57:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f5c:	74 03                	je     c0003f61 <create_name+0x2bd>
c0003f5e:	83 cb 08             	or     ebx,0x8
c0003f61:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f64:	31 c0                	xor    eax,eax
c0003f66:	eb 10                	jmp    c0003f78 <create_name+0x2d4>
c0003f68:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f6d:	0f 85 ce fe ff ff    	jne    c0003e41 <create_name+0x19d>
c0003f73:	e9 a6 fe ff ff       	jmp    c0003e1e <create_name+0x17a>
c0003f78:	83 c4 3c             	add    esp,0x3c
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	5f                   	pop    edi
c0003f7e:	5d                   	pop    ebp
c0003f7f:	c3                   	ret    

c0003f80 <xname_sum>:
c0003f80:	56                   	push   esi
c0003f81:	53                   	push   ebx
c0003f82:	89 c6                	mov    esi,eax
c0003f84:	51                   	push   ecx
c0003f85:	31 db                	xor    ebx,ebx
c0003f87:	83 c6 02             	add    esi,0x2
c0003f8a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f8e:	66 85 c0             	test   ax,ax
c0003f91:	74 1f                	je     c0003fb2 <xname_sum+0x32>
c0003f93:	83 ec 0c             	sub    esp,0xc
c0003f96:	66 d1 cb             	ror    bx,1
c0003f99:	50                   	push   eax
c0003f9a:	e8 1e 46 00 00       	call   c00085bd <ff_wtoupper>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	0f b6 d0             	movzx  edx,al
c0003fa5:	66 c1 e8 08          	shr    ax,0x8
c0003fa9:	01 d3                	add    ebx,edx
c0003fab:	66 d1 cb             	ror    bx,1
c0003fae:	01 c3                	add    ebx,eax
c0003fb0:	eb d5                	jmp    c0003f87 <xname_sum+0x7>
c0003fb2:	89 d8                	mov    eax,ebx
c0003fb4:	5a                   	pop    edx
c0003fb5:	5b                   	pop    ebx
c0003fb6:	5e                   	pop    esi
c0003fb7:	c3                   	ret    

c0003fb8 <create_xdir>:
c0003fb8:	55                   	push   ebp
c0003fb9:	b9 40 00 00 00       	mov    ecx,0x40
c0003fbe:	57                   	push   edi
c0003fbf:	bd 01 00 00 00       	mov    ebp,0x1
c0003fc4:	56                   	push   esi
c0003fc5:	31 ff                	xor    edi,edi
c0003fc7:	53                   	push   ebx
c0003fc8:	be 40 00 00 00       	mov    esi,0x40
c0003fcd:	89 c3                	mov    ebx,eax
c0003fcf:	83 ec 1c             	sub    esp,0x1c
c0003fd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fd6:	31 d2                	xor    edx,edx
c0003fd8:	e8 18 dd ff ff       	call   c0001cf5 <mem_set>
c0003fdd:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fe4:	31 c9                	xor    ecx,ecx
c0003fe6:	8d 46 01             	lea    eax,[esi+0x1]
c0003fe9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fed:	83 c6 02             	add    esi,0x2
c0003ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ff4:	66 85 ed             	test   bp,bp
c0003ff7:	74 12                	je     c000400b <create_xdir+0x53>
c0003ff9:	0f b6 c1             	movzx  eax,cl
c0003ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004000:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004004:	66 83 fd 01          	cmp    bp,0x1
c0004008:	80 d9 ff             	sbb    cl,0xff
c000400b:	8d 04 33             	lea    eax,[ebx+esi*1]
c000400e:	0f b7 d5             	movzx  edx,bp
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	e8 ba dc ff ff       	call   c0001cd3 <st_word>
c0004019:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000401f:	75 d3                	jne    c0003ff4 <create_xdir+0x3c>
c0004021:	8d 47 01             	lea    eax,[edi+0x1]
c0004024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004028:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000402c:	0f b6 c1             	movzx  eax,cl
c000402f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004034:	74 07                	je     c000403d <create_xdir+0x85>
c0004036:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000403b:	eb a9                	jmp    c0003fe6 <create_xdir+0x2e>
c000403d:	8d 47 02             	lea    eax,[edi+0x2]
c0004040:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004043:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004046:	89 d0                	mov    eax,edx
c0004048:	e8 33 ff ff ff       	call   c0003f80 <xname_sum>
c000404d:	83 c4 1c             	add    esp,0x1c
c0004050:	0f b7 d0             	movzx  edx,ax
c0004053:	8d 43 24             	lea    eax,[ebx+0x24]
c0004056:	5b                   	pop    ebx
c0004057:	5e                   	pop    esi
c0004058:	5f                   	pop    edi
c0004059:	5d                   	pop    ebp
c000405a:	e9 74 dc ff ff       	jmp    c0001cd3 <st_word>

c000405f <cmp_lfn>:
c000405f:	55                   	push   ebp
c0004060:	57                   	push   edi
c0004061:	89 d7                	mov    edi,edx
c0004063:	56                   	push   esi
c0004064:	53                   	push   ebx
c0004065:	83 ec 1c             	sub    esp,0x1c
c0004068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000406c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000406f:	e8 ed db ff ff       	call   c0001c61 <ld_word>
c0004074:	66 85 c0             	test   ax,ax
c0004077:	74 07                	je     c0004080 <cmp_lfn+0x21>
c0004079:	31 c0                	xor    eax,eax
c000407b:	e9 9a 00 00 00       	jmp    c000411a <cmp_lfn+0xbb>
c0004080:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004082:	bd 01 00 00 00       	mov    ebp,0x1
c0004087:	83 e3 3f             	and    ebx,0x3f
c000408a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004092:	4b                   	dec    ebx
c0004093:	6b db 0d             	imul   ebx,ebx,0xd
c0004096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000409a:	0f b6 80 40 93 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6cc0]
c00040a1:	01 f8                	add    eax,edi
c00040a3:	e8 b9 db ff ff       	call   c0001c61 <ld_word>
c00040a8:	66 85 ed             	test   bp,bp
c00040ab:	89 c6                	mov    esi,eax
c00040ad:	74 3c                	je     c00040eb <cmp_lfn+0x8c>
c00040af:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040b5:	77 c2                	ja     c0004079 <cmp_lfn+0x1a>
c00040b7:	83 ec 0c             	sub    esp,0xc
c00040ba:	0f b7 c0             	movzx  eax,ax
c00040bd:	50                   	push   eax
c00040be:	e8 fa 44 00 00       	call   c00085bd <ff_wtoupper>
c00040c3:	89 c5                	mov    ebp,eax
c00040c5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d7:	e8 e1 44 00 00       	call   c00085bd <ff_wtoupper>
c00040dc:	83 c4 10             	add    esp,0x10
c00040df:	39 c5                	cmp    ebp,eax
c00040e1:	75 96                	jne    c0004079 <cmp_lfn+0x1a>
c00040e3:	89 f5                	mov    ebp,esi
c00040e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040e9:	eb 04                	jmp    c00040ef <cmp_lfn+0x90>
c00040eb:	66 46                	inc    si
c00040ed:	75 8a                	jne    c0004079 <cmp_lfn+0x1a>
c00040ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040f3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040f8:	75 9c                	jne    c0004096 <cmp_lfn+0x37>
c00040fa:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040fd:	74 16                	je     c0004115 <cmp_lfn+0xb6>
c00040ff:	66 85 ed             	test   bp,bp
c0004102:	74 11                	je     c0004115 <cmp_lfn+0xb6>
c0004104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004108:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000410d:	0f 94 c0             	sete   al
c0004110:	0f b6 c0             	movzx  eax,al
c0004113:	eb 05                	jmp    c000411a <cmp_lfn+0xbb>
c0004115:	b8 01 00 00 00       	mov    eax,0x1
c000411a:	83 c4 1c             	add    esp,0x1c
c000411d:	5b                   	pop    ebx
c000411e:	5e                   	pop    esi
c000411f:	5f                   	pop    edi
c0004120:	5d                   	pop    ebp
c0004121:	c3                   	ret    

c0004122 <dir_find>:
c0004122:	55                   	push   ebp
c0004123:	31 d2                	xor    edx,edx
c0004125:	57                   	push   edi
c0004126:	56                   	push   esi
c0004127:	53                   	push   ebx
c0004128:	89 c3                	mov    ebx,eax
c000412a:	83 ec 1c             	sub    esp,0x1c
c000412d:	8b 30                	mov    esi,DWORD PTR [eax]
c000412f:	e8 89 f0 ff ff       	call   c00031bd <dir_sdi>
c0004134:	89 04 24             	mov    DWORD PTR [esp],eax
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 9e 01 00 00    	jne    c00042dd <dir_find+0x1bb>
c000413f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004142:	0f 85 8d 00 00 00    	jne    c00041d5 <dir_find+0xb3>
c0004148:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000414b:	e8 30 fe ff ff       	call   c0003f80 <xname_sum>
c0004150:	89 c7                	mov    edi,eax
c0004152:	31 d2                	xor    edx,edx
c0004154:	89 d8                	mov    eax,ebx
c0004156:	e8 72 f8 ff ff       	call   c00039cd <dir_read>
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 5e 01 00 00    	jne    c00042c1 <dir_find+0x19f>
c0004163:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004166:	8d 41 24             	lea    eax,[ecx+0x24]
c0004169:	e8 f3 da ff ff       	call   c0001c61 <ld_word>
c000416e:	66 39 f8             	cmp    ax,di
c0004171:	75 df                	jne    c0004152 <dir_find+0x30>
c0004173:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004176:	31 ed                	xor    ebp,ebp
c0004178:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000417c:	ba 40 00 00 00       	mov    edx,0x40
c0004181:	89 e9                	mov    ecx,ebp
c0004183:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004187:	0f 84 42 01 00 00    	je     c00042cf <dir_find+0x1ad>
c000418d:	f6 c2 1f             	test   dl,0x1f
c0004190:	75 03                	jne    c0004195 <dir_find+0x73>
c0004192:	83 c2 02             	add    edx,0x2
c0004195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004199:	89 d0                	mov    eax,edx
c000419b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000419e:	e8 be da ff ff       	call   c0001c61 <ld_word>
c00041a3:	83 ec 0c             	sub    esp,0xc
c00041a6:	0f b7 c0             	movzx  eax,ax
c00041a9:	50                   	push   eax
c00041aa:	e8 0e 44 00 00       	call   c00085bd <ff_wtoupper>
c00041af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041b3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041b6:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00041bd:	e8 fb 43 00 00       	call   c00085bd <ff_wtoupper>
c00041c2:	83 c4 10             	add    esp,0x10
c00041c5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041c9:	75 87                	jne    c0004152 <dir_find+0x30>
c00041cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041cf:	45                   	inc    ebp
c00041d0:	83 c2 02             	add    edx,0x2
c00041d3:	eb ac                	jmp    c0004181 <dir_find+0x5f>
c00041d5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041dc:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ec:	89 f0                	mov    eax,esi
c00041ee:	e8 4c e2 ff ff       	call   c000243f <move_window>
c00041f3:	85 c0                	test   eax,eax
c00041f5:	0f 85 c6 00 00 00    	jne    c00042c1 <dir_find+0x19f>
c00041fb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041fe:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004201:	84 c9                	test   cl,cl
c0004203:	0f 84 bd 00 00 00    	je     c00042c6 <dir_find+0x1a4>
c0004209:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000420c:	88 d0                	mov    al,dl
c000420e:	83 e0 3f             	and    eax,0x3f
c0004211:	80 f9 e5             	cmp    cl,0xe5
c0004214:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004217:	0f 84 87 00 00 00    	je     c00042a4 <dir_find+0x182>
c000421d:	80 e2 08             	and    dl,0x8
c0004220:	74 06                	je     c0004228 <dir_find+0x106>
c0004222:	3c 0f                	cmp    al,0xf
c0004224:	75 7e                	jne    c00042a4 <dir_find+0x182>
c0004226:	eb 04                	jmp    c000422c <dir_find+0x10a>
c0004228:	3c 0f                	cmp    al,0xf
c000422a:	75 4c                	jne    c0004278 <dir_find+0x156>
c000422c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004230:	75 7e                	jne    c00042b0 <dir_find+0x18e>
c0004232:	f6 c1 40             	test   cl,0x40
c0004235:	74 12                	je     c0004249 <dir_find+0x127>
c0004237:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000423a:	83 e1 bf             	and    ecx,0xffffffbf
c000423d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004244:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004247:	eb 06                	jmp    c000424f <dir_find+0x12d>
c0004249:	89 f8                	mov    eax,edi
c000424b:	38 c8                	cmp    al,cl
c000424d:	75 5c                	jne    c00042ab <dir_find+0x189>
c000424f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004253:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004258:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000425b:	75 53                	jne    c00042b0 <dir_find+0x18e>
c000425d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004261:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004264:	89 ea                	mov    edx,ebp
c0004266:	e8 f4 fd ff ff       	call   c000405f <cmp_lfn>
c000426b:	85 c0                	test   eax,eax
c000426d:	74 41                	je     c00042b0 <dir_find+0x18e>
c000426f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004273:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004276:	eb 38                	jmp    c00042b0 <dir_find+0x18e>
c0004278:	89 f8                	mov    eax,edi
c000427a:	84 c0                	test   al,al
c000427c:	75 0d                	jne    c000428b <dir_find+0x169>
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 98 de ff ff       	call   c000211d <sum_sfn>
c0004285:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004289:	74 52                	je     c00042dd <dir_find+0x1bb>
c000428b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000428f:	75 13                	jne    c00042a4 <dir_find+0x182>
c0004291:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004294:	b9 0b 00 00 00       	mov    ecx,0xb
c0004299:	89 e8                	mov    eax,ebp
c000429b:	e8 60 da ff ff       	call   c0001d00 <mem_cmp>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	74 39                	je     c00042dd <dir_find+0x1bb>
c00042a4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b0:	31 d2                	xor    edx,edx
c00042b2:	89 d8                	mov    eax,ebx
c00042b4:	e8 5c f4 ff ff       	call   c0003715 <dir_next>
c00042b9:	85 c0                	test   eax,eax
c00042bb:	0f 84 25 ff ff ff    	je     c00041e6 <dir_find+0xc4>
c00042c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042c4:	eb 17                	jmp    c00042dd <dir_find+0x1bb>
c00042c6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042cd:	eb 0e                	jmp    c00042dd <dir_find+0x1bb>
c00042cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042d2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042d7:	0f 85 75 fe ff ff    	jne    c0004152 <dir_find+0x30>
c00042dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e0:	83 c4 1c             	add    esp,0x1c
c00042e3:	5b                   	pop    ebx
c00042e4:	5e                   	pop    esi
c00042e5:	5f                   	pop    edi
c00042e6:	5d                   	pop    ebp
c00042e7:	c3                   	ret    

c00042e8 <dir_register>:
c00042e8:	55                   	push   ebp
c00042e9:	57                   	push   edi
c00042ea:	56                   	push   esi
c00042eb:	be 06 00 00 00       	mov    esi,0x6
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 6c             	sub    esp,0x6c
c00042f4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042f8:	0f 85 62 02 00 00    	jne    c0004560 <dir_register+0x278>
c00042fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004300:	31 ff                	xor    edi,edi
c0004302:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004305:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000430a:	74 03                	je     c000430f <dir_register+0x27>
c000430c:	47                   	inc    edi
c000430d:	eb f6                	jmp    c0004305 <dir_register+0x1d>
c000430f:	89 c3                	mov    ebx,eax
c0004311:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004315:	0f 85 e1 00 00 00    	jne    c00043fc <dir_register+0x114>
c000431b:	83 c7 0e             	add    edi,0xe
c000431e:	b9 0f 00 00 00       	mov    ecx,0xf
c0004323:	89 f8                	mov    eax,edi
c0004325:	31 d2                	xor    edx,edx
c0004327:	f7 f1                	div    ecx
c0004329:	8d 50 02             	lea    edx,[eax+0x2]
c000432c:	89 c7                	mov    edi,eax
c000432e:	89 d8                	mov    eax,ebx
c0004330:	e8 12 f8 ff ff       	call   c0003b47 <dir_alloc>
c0004335:	89 c6                	mov    esi,eax
c0004337:	85 c0                	test   eax,eax
c0004339:	0f 85 21 02 00 00    	jne    c0004560 <dir_register+0x278>
c000433f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004345:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004348:	c1 e7 05             	shl    edi,0x5
c000434b:	29 f8                	sub    eax,edi
c000434d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004350:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004353:	a8 04                	test   al,0x4
c0004355:	0f 84 91 00 00 00    	je     c00043ec <dir_register+0x104>
c000435b:	83 e0 fb             	and    eax,0xfffffffb
c000435e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004361:	89 d8                	mov    eax,ebx
c0004363:	e8 25 ec ff ff       	call   c0002f8d <fill_first_frag>
c0004368:	85 c0                	test   eax,eax
c000436a:	0f 85 ee 01 00 00    	jne    c000455e <dir_register+0x276>
c0004370:	83 c9 ff             	or     ecx,0xffffffff
c0004373:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004376:	89 d8                	mov    eax,ebx
c0004378:	e8 db eb ff ff       	call   c0002f58 <fill_last_frag>
c000437d:	85 c0                	test   eax,eax
c000437f:	0f 85 d9 01 00 00    	jne    c000455e <dir_register+0x276>
c0004385:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004389:	74 61                	je     c00043ec <dir_register+0x104>
c000438b:	89 da                	mov    edx,ebx
c000438d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004391:	e8 ea f5 ff ff       	call   c0003980 <load_obj_xdir>
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 c0 01 00 00    	jne    c000455e <dir_register+0x276>
c000439e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043a2:	31 c9                	xor    ecx,ecx
c00043a4:	c1 e2 09             	shl    edx,0x9
c00043a7:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043aa:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043ad:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b6:	83 c0 38             	add    eax,0x38
c00043b9:	e8 1c d9 ff ff       	call   c0001cda <st_qword>
c00043be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043c4:	83 c0 28             	add    eax,0x28
c00043c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ca:	e8 0b d9 ff ff       	call   c0001cda <st_qword>
c00043cf:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043d5:	83 c8 01             	or     eax,0x1
c00043d8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043df:	e8 db f7 ff ff       	call   c0003bbf <store_xdir>
c00043e4:	85 c0                	test   eax,eax
c00043e6:	0f 85 72 01 00 00    	jne    c000455e <dir_register+0x276>
c00043ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043f2:	e8 c1 fb ff ff       	call   c0003fb8 <create_xdir>
c00043f7:	e9 64 01 00 00       	jmp    c0004560 <dir_register+0x278>
c00043fc:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ff:	b9 0c 00 00 00       	mov    ecx,0xc
c0004404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004408:	89 c2                	mov    edx,eax
c000440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000440e:	e8 cd d8 ff ff       	call   c0001ce0 <mem_cpy>
c0004413:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004418:	74 58                	je     c0004472 <dir_register+0x18a>
c000441a:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000441e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004426:	83 ec 0c             	sub    esp,0xc
c0004429:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000442c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004430:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004438:	e8 24 dc ff ff       	call   c0002061 <gen_numname>
c000443d:	89 d8                	mov    eax,ebx
c000443f:	e8 de fc ff ff       	call   c0004122 <dir_find>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	89 c6                	mov    esi,eax
c0004449:	85 c0                	test   eax,eax
c000444b:	75 15                	jne    c0004462 <dir_register+0x17a>
c000444d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004451:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004456:	75 ce                	jne    c0004426 <dir_register+0x13e>
c0004458:	be 07 00 00 00       	mov    esi,0x7
c000445d:	e9 fe 00 00 00       	jmp    c0004560 <dir_register+0x278>
c0004462:	83 f8 04             	cmp    eax,0x4
c0004465:	0f 85 f5 00 00 00    	jne    c0004560 <dir_register+0x278>
c000446b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000446f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004472:	b9 01 00 00 00       	mov    ecx,0x1
c0004477:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000447c:	74 0f                	je     c000448d <dir_register+0x1a5>
c000447e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004483:	8d 47 0c             	lea    eax,[edi+0xc]
c0004486:	31 d2                	xor    edx,edx
c0004488:	f7 f1                	div    ecx
c000448a:	8d 48 01             	lea    ecx,[eax+0x1]
c000448d:	89 ca                	mov    edx,ecx
c000448f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004493:	89 d8                	mov    eax,ebx
c0004495:	e8 ad f6 ff ff       	call   c0003b47 <dir_alloc>
c000449a:	89 c6                	mov    esi,eax
c000449c:	85 c0                	test   eax,eax
c000449e:	0f 85 bc 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044a8:	49                   	dec    ecx
c00044a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044ad:	74 6a                	je     c0004519 <dir_register+0x231>
c00044af:	89 c8                	mov    eax,ecx
c00044b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044b4:	c1 e0 05             	shl    eax,0x5
c00044b7:	29 c2                	sub    edx,eax
c00044b9:	89 d8                	mov    eax,ebx
c00044bb:	e8 fd ec ff ff       	call   c00031bd <dir_sdi>
c00044c0:	89 c6                	mov    esi,eax
c00044c2:	85 c0                	test   eax,eax
c00044c4:	0f 85 96 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044ce:	e8 4a dc ff ff       	call   c000211d <sum_sfn>
c00044d3:	0f b6 f8             	movzx  edi,al
c00044d6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044d9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044dc:	89 e8                	mov    eax,ebp
c00044de:	e8 5c df ff ff       	call   c000243f <move_window>
c00044e3:	89 c6                	mov    esi,eax
c00044e5:	85 c0                	test   eax,eax
c00044e7:	75 77                	jne    c0004560 <dir_register+0x278>
c00044e9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044f7:	57                   	push   edi
c00044f8:	e8 e0 da ff ff       	call   c0001fdd <put_lfn>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 0b f2 ff ff       	call   c0003715 <dir_next>
c000450a:	83 c4 10             	add    esp,0x10
c000450d:	89 c6                	mov    esi,eax
c000450f:	85 c0                	test   eax,eax
c0004511:	75 4d                	jne    c0004560 <dir_register+0x278>
c0004513:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004517:	75 bd                	jne    c00044d6 <dir_register+0x1ee>
c0004519:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000451c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000451f:	89 e8                	mov    eax,ebp
c0004521:	e8 19 df ff ff       	call   c000243f <move_window>
c0004526:	89 c6                	mov    esi,eax
c0004528:	85 c0                	test   eax,eax
c000452a:	75 34                	jne    c0004560 <dir_register+0x278>
c000452c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000452f:	b9 20 00 00 00       	mov    ecx,0x20
c0004534:	31 d2                	xor    edx,edx
c0004536:	e8 ba d7 ff ff       	call   c0001cf5 <mem_set>
c000453b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000453e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004542:	b9 0b 00 00 00       	mov    ecx,0xb
c0004547:	e8 94 d7 ff ff       	call   c0001ce0 <mem_cpy>
c000454c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000454f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004552:	83 e0 18             	and    eax,0x18
c0004555:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004558:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000455c:	eb 02                	jmp    c0004560 <dir_register+0x278>
c000455e:	89 c6                	mov    esi,eax
c0004560:	83 c4 6c             	add    esp,0x6c
c0004563:	89 f0                	mov    eax,esi
c0004565:	5b                   	pop    ebx
c0004566:	5e                   	pop    esi
c0004567:	5f                   	pop    edi
c0004568:	5d                   	pop    ebp
c0004569:	c3                   	ret    

c000456a <sync_fs>:
c000456a:	56                   	push   esi
c000456b:	53                   	push   ebx
c000456c:	53                   	push   ebx
c000456d:	89 c3                	mov    ebx,eax
c000456f:	e8 37 de ff ff       	call   c00023ab <sync_window>
c0004574:	85 c0                	test   eax,eax
c0004576:	0f 85 b1 00 00 00    	jne    c000462d <sync_fs+0xc3>
c000457c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000457f:	0f 85 8e 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c0004585:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004589:	0f 85 84 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c000458f:	b9 00 02 00 00       	mov    ecx,0x200
c0004594:	8d 73 54             	lea    esi,[ebx+0x54]
c0004597:	31 d2                	xor    edx,edx
c0004599:	89 f0                	mov    eax,esi
c000459b:	e8 55 d7 ff ff       	call   c0001cf5 <mem_set>
c00045a0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045ab:	e8 23 d7 ff ff       	call   c0001cd3 <st_word>
c00045b0:	ba 52 52 61 41       	mov    edx,0x41615252
c00045b5:	89 f0                	mov    eax,esi
c00045b7:	e8 1b d7 ff ff       	call   c0001cd7 <st_dword>
c00045bc:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045c2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045c7:	e8 0b d7 ff ff       	call   c0001cd7 <st_dword>
c00045cc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045cf:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045d5:	e8 fd d6 ff ff       	call   c0001cd7 <st_dword>
c00045da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045dd:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045e3:	e8 ef d6 ff ff       	call   c0001cd7 <st_dword>
c00045e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045ee:	83 c0 01             	add    eax,0x1
c00045f1:	83 d2 00             	adc    edx,0x0
c00045f4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045f7:	83 ec 0c             	sub    esp,0xc
c00045fa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045fd:	6a 01                	push   0x1
c00045ff:	52                   	push   edx
c0004600:	50                   	push   eax
c0004601:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004605:	56                   	push   esi
c0004606:	50                   	push   eax
c0004607:	e8 20 d6 ff ff       	call   c0001c2c <disk_write>
c000460c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004610:	83 c4 20             	add    esp,0x20
c0004613:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004617:	51                   	push   ecx
c0004618:	6a 00                	push   0x0
c000461a:	6a 00                	push   0x0
c000461c:	50                   	push   eax
c000461d:	e8 20 d6 ff ff       	call   c0001c42 <disk_ioctl>
c0004622:	83 c4 10             	add    esp,0x10
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 95 c0             	setne  al
c000462a:	0f b6 c0             	movzx  eax,al
c000462d:	5a                   	pop    edx
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <create_partition>:
c0004631:	55                   	push   ebp
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	57                   	push   edi
c0004636:	56                   	push   esi
c0004637:	53                   	push   ebx
c0004638:	83 ec 60             	sub    esp,0x60
c000463b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000463f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004643:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004647:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000464b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000464f:	50                   	push   eax
c0004650:	6a 01                	push   0x1
c0004652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004656:	e8 e7 d5 ff ff       	call   c0001c42 <disk_ioctl>
c000465b:	83 c4 10             	add    esp,0x10
c000465e:	85 c0                	test   eax,eax
c0004660:	74 0a                	je     c000466c <create_partition+0x3b>
c0004662:	b8 01 00 00 00       	mov    eax,0x1
c0004667:	e9 67 05 00 00       	jmp    c0004bd3 <create_partition+0x5a2>
c000466c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004670:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004678:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000467c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004681:	0f 86 ed 03 00 00    	jbe    c0004a74 <create_partition+0x443>
c0004687:	83 c0 df             	add    eax,0xffffffdf
c000468a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004692:	83 d2 ff             	adc    edx,0xffffffff
c0004695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000469d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046a5:	83 c0 bd             	add    eax,0xffffffbd
c00046a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046af:	83 d2 ff             	adc    edx,0xffffffff
c00046b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c2:	be 22 00 00 00       	mov    esi,0x22
c00046c7:	31 ff                	xor    edi,edi
c00046c9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046d9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046e5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046eb:	75 0e                	jne    c00046fb <create_partition+0xca>
c00046ed:	b9 00 02 00 00       	mov    ecx,0x200
c00046f2:	31 d2                	xor    edx,edx
c00046f4:	89 d8                	mov    eax,ebx
c00046f6:	e8 fa d5 ff ff       	call   c0001cf5 <mem_set>
c00046fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004707:	0b 04 24             	or     eax,DWORD PTR [esp]
c000470a:	0f 84 23 01 00 00    	je     c0004833 <create_partition+0x202>
c0004710:	89 f0                	mov    eax,esi
c0004712:	89 fa                	mov    edx,edi
c0004714:	05 ff 07 00 00       	add    eax,0x7ff
c0004719:	83 d2 00             	adc    edx,0x0
c000471c:	89 c1                	mov    ecx,eax
c000471e:	89 d7                	mov    edi,edx
c0004720:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004726:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000472a:	89 ce                	mov    esi,ecx
c000472c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004730:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004734:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004738:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000473b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000473f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004742:	b8 64 00 00 00       	mov    eax,0x64
c0004747:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000474a:	b8 00 00 00 00       	mov    eax,0x0
c000474f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004753:	72 41                	jb     c0004796 <create_partition+0x165>
c0004755:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000475d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004761:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004766:	01 c1                	add    ecx,eax
c0004768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000476c:	f7 24 24             	mul    DWORD PTR [esp]
c000476f:	6a 00                	push   0x0
c0004771:	01 ca                	add    edx,ecx
c0004773:	6a 64                	push   0x64
c0004775:	52                   	push   edx
c0004776:	50                   	push   eax
c0004777:	e8 30 21 02 00       	call   c00268ac <__udivdi3>
c000477c:	83 c4 10             	add    esp,0x10
c000477f:	05 ff 07 00 00       	add    eax,0x7ff
c0004784:	83 d2 00             	adc    edx,0x0
c0004787:	89 c1                	mov    ecx,eax
c0004789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000478d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004796:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000479d:	01 f0                	add    eax,esi
c000479f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a3:	11 fa                	adc    edx,edi
c00047a5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047a9:	19 d1                	sbb    ecx,edx
c00047ab:	73 2e                	jae    c00047db <create_partition+0x1aa>
c00047ad:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b1:	89 f8                	mov    eax,edi
c00047b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047ba:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047c6:	73 6b                	jae    c0004833 <create_partition+0x202>
c00047c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d0:	29 f0                	sub    eax,esi
c00047d2:	19 fa                	sbb    edx,edi
c00047d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047df:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047e2:	74 4f                	je     c0004833 <create_partition+0x202>
c00047e4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047e7:	b9 10 00 00 00       	mov    ecx,0x10
c00047ec:	ba 50 93 02 c0       	mov    edx,0xc0029350
c00047f1:	e8 ea d4 ff ff       	call   c0001ce0 <mem_cpy>
c00047f6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047fa:	b9 10 00 00 00       	mov    ecx,0x10
c00047ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004803:	e8 2c db ff ff       	call   c0002334 <make_rand>
c0004808:	89 f2                	mov    edx,esi
c000480a:	89 f9                	mov    ecx,edi
c000480c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004810:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004814:	e8 c1 d4 ff ff       	call   c0001cda <st_qword>
c0004819:	03 34 24             	add    esi,DWORD PTR [esp]
c000481c:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004820:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004824:	89 f2                	mov    edx,esi
c0004826:	89 f9                	mov    ecx,edi
c0004828:	83 c2 ff             	add    edx,0xffffffff
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 a7 d4 ff ff       	call   c0001cda <st_qword>
c0004833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004837:	83 e8 80             	sub    eax,0xffffff80
c000483a:	89 c5                	mov    ebp,eax
c000483c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004840:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004846:	75 6b                	jne    c00048b3 <create_partition+0x282>
c0004848:	45                   	inc    ebp
c0004849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000484d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004852:	e8 39 da ff ff       	call   c0002290 <crc32>
c0004857:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000485d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004861:	75 e5                	jne    c0004848 <create_partition+0x217>
c0004863:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004867:	31 d2                	xor    edx,edx
c0004869:	83 ec 0c             	sub    esp,0xc
c000486c:	c1 ed 09             	shr    ebp,0x9
c000486f:	6a 01                	push   0x1
c0004871:	8d 45 02             	lea    eax,[ebp+0x2]
c0004874:	52                   	push   edx
c0004875:	50                   	push   eax
c0004876:	53                   	push   ebx
c0004877:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000487b:	e8 ac d3 ff ff       	call   c0001c2c <disk_write>
c0004880:	83 c4 20             	add    esp,0x20
c0004883:	85 c0                	test   eax,eax
c0004885:	0f 85 d7 fd ff ff    	jne    c0004662 <create_partition+0x31>
c000488b:	83 ec 0c             	sub    esp,0xc
c000488e:	31 d2                	xor    edx,edx
c0004890:	6a 01                	push   0x1
c0004892:	89 e8                	mov    eax,ebp
c0004894:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004898:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000489c:	52                   	push   edx
c000489d:	50                   	push   eax
c000489e:	53                   	push   ebx
c000489f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a3:	e8 84 d3 ff ff       	call   c0001c2c <disk_write>
c00048a8:	83 c4 20             	add    esp,0x20
c00048ab:	85 c0                	test   eax,eax
c00048ad:	0f 85 af fd ff ff    	jne    c0004662 <create_partition+0x31>
c00048b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048bb:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c0:	74 0d                	je     c00048cf <create_partition+0x29e>
c00048c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ca:	e9 12 fe ff ff       	jmp    c00046e1 <create_partition+0xb0>
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	b9 00 02 00 00       	mov    ecx,0x200
c00048d6:	89 d8                	mov    eax,ebx
c00048d8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048db:	e8 15 d4 ff ff       	call   c0001cf5 <mem_set>
c00048e0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048e3:	b9 10 00 00 00       	mov    ecx,0x10
c00048e8:	ba 40 92 02 c0       	mov    edx,0xc0029240
c00048ed:	89 d8                	mov    eax,ebx
c00048ef:	e8 ec d3 ff ff       	call   c0001ce0 <mem_cpy>
c00048f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048f8:	8d 43 58             	lea    eax,[ebx+0x58]
c00048fb:	f7 d2                	not    edx
c00048fd:	e8 d5 d3 ff ff       	call   c0001cd7 <st_dword>
c0004902:	8d 43 18             	lea    eax,[ebx+0x18]
c0004905:	31 c9                	xor    ecx,ecx
c0004907:	89 04 24             	mov    DWORD PTR [esp],eax
c000490a:	ba 01 00 00 00       	mov    edx,0x1
c000490f:	e8 c6 d3 ff ff       	call   c0001cda <st_qword>
c0004914:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004918:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000491c:	83 c2 ff             	add    edx,0xffffffff
c000491f:	89 e8                	mov    eax,ebp
c0004921:	83 d1 ff             	adc    ecx,0xffffffff
c0004924:	e8 b1 d3 ff ff       	call   c0001cda <st_qword>
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	8d 43 28             	lea    eax,[ebx+0x28]
c000492e:	ba 22 00 00 00       	mov    edx,0x22
c0004933:	e8 a2 d3 ff ff       	call   c0001cda <st_qword>
c0004938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000493c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004940:	83 c2 de             	add    edx,0xffffffde
c0004943:	8d 43 30             	lea    eax,[ebx+0x30]
c0004946:	83 d1 ff             	adc    ecx,0xffffffff
c0004949:	31 f6                	xor    esi,esi
c000494b:	e8 8a d3 ff ff       	call   c0001cda <st_qword>
c0004950:	8d 43 54             	lea    eax,[ebx+0x54]
c0004953:	ba 80 00 00 00       	mov    edx,0x80
c0004958:	e8 7a d3 ff ff       	call   c0001cd7 <st_dword>
c000495d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004960:	ba 80 00 00 00       	mov    edx,0x80
c0004965:	e8 6d d3 ff ff       	call   c0001cd7 <st_dword>
c000496a:	ba 02 00 00 00       	mov    edx,0x2
c000496f:	89 f8                	mov    eax,edi
c0004971:	e8 61 d3 ff ff       	call   c0001cd7 <st_dword>
c0004976:	8d 53 38             	lea    edx,[ebx+0x38]
c0004979:	b9 10 00 00 00       	mov    ecx,0x10
c000497e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004982:	e8 ad d9 ff ff       	call   c0002334 <make_rand>
c0004987:	83 c8 ff             	or     eax,0xffffffff
c000498a:	46                   	inc    esi
c000498b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004990:	e8 fb d8 ff ff       	call   c0002290 <crc32>
c0004995:	83 fe 5c             	cmp    esi,0x5c
c0004998:	75 f0                	jne    c000498a <create_partition+0x359>
c000499a:	f7 d0                	not    eax
c000499c:	8d 73 10             	lea    esi,[ebx+0x10]
c000499f:	89 c2                	mov    edx,eax
c00049a1:	89 f0                	mov    eax,esi
c00049a3:	e8 2f d3 ff ff       	call   c0001cd7 <st_dword>
c00049a8:	83 ec 0c             	sub    esp,0xc
c00049ab:	6a 01                	push   0x1
c00049ad:	6a 00                	push   0x0
c00049af:	6a 01                	push   0x1
c00049b1:	53                   	push   ebx
c00049b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049b6:	e8 71 d2 ff ff       	call   c0001c2c <disk_write>
c00049bb:	83 c4 20             	add    esp,0x20
c00049be:	85 c0                	test   eax,eax
c00049c0:	0f 85 9c fc ff ff    	jne    c0004662 <create_partition+0x31>
c00049c6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049ce:	83 c2 ff             	add    edx,0xffffffff
c00049d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049d4:	83 d1 ff             	adc    ecx,0xffffffff
c00049d7:	e8 fe d2 ff ff       	call   c0001cda <st_qword>
c00049dc:	ba 01 00 00 00       	mov    edx,0x1
c00049e1:	31 c9                	xor    ecx,ecx
c00049e3:	89 e8                	mov    eax,ebp
c00049e5:	e8 f0 d2 ff ff       	call   c0001cda <st_qword>
c00049ea:	89 f8                	mov    eax,edi
c00049ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049f4:	31 ff                	xor    edi,edi
c00049f6:	e8 df d2 ff ff       	call   c0001cda <st_qword>
c00049fb:	89 f0                	mov    eax,esi
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	e8 d3 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a04:	83 c8 ff             	or     eax,0xffffffff
c0004a07:	47                   	inc    edi
c0004a08:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a0d:	e8 7e d8 ff ff       	call   c0002290 <crc32>
c0004a12:	83 ff 5c             	cmp    edi,0x5c
c0004a15:	75 f0                	jne    c0004a07 <create_partition+0x3d6>
c0004a17:	f7 d0                	not    eax
c0004a19:	89 c2                	mov    edx,eax
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	e8 b5 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a22:	83 ec 0c             	sub    esp,0xc
c0004a25:	6a 01                	push   0x1
c0004a27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a2b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a2f:	83 c0 ff             	add    eax,0xffffffff
c0004a32:	83 d2 ff             	adc    edx,0xffffffff
c0004a35:	52                   	push   edx
c0004a36:	50                   	push   eax
c0004a37:	53                   	push   ebx
c0004a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a3c:	e8 eb d1 ff ff       	call   c0001c2c <disk_write>
c0004a41:	83 c4 20             	add    esp,0x20
c0004a44:	85 c0                	test   eax,eax
c0004a46:	0f 85 16 fc ff ff    	jne    c0004662 <create_partition+0x31>
c0004a4c:	31 d2                	xor    edx,edx
c0004a4e:	89 d8                	mov    eax,ebx
c0004a50:	b9 00 02 00 00       	mov    ecx,0x200
c0004a55:	e8 9b d2 ff ff       	call   c0001cf5 <mem_set>
c0004a5a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a60:	b9 10 00 00 00       	mov    ecx,0x10
c0004a65:	ba 50 92 02 c0       	mov    edx,0xc0029250
c0004a6a:	e8 71 d2 ff ff       	call   c0001ce0 <mem_cpy>
c0004a6f:	e9 21 01 00 00       	jmp    c0004b95 <create_partition+0x564>
c0004a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a78:	b9 05 00 00 00       	mov    ecx,0x5
c0004a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a80:	bf 08 00 00 00       	mov    edi,0x8
c0004a85:	89 f8                	mov    eax,edi
c0004a87:	31 d2                	xor    edx,edx
c0004a89:	0f b6 f0             	movzx  esi,al
c0004a8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a8f:	f7 f6                	div    esi
c0004a91:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a96:	76 0a                	jbe    c0004aa2 <create_partition+0x471>
c0004a98:	d1 e7                	shl    edi,1
c0004a9a:	49                   	dec    ecx
c0004a9b:	75 e8                	jne    c0004a85 <create_partition+0x454>
c0004a9d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0004aa7:	31 d2                	xor    edx,edx
c0004aa9:	89 d8                	mov    eax,ebx
c0004aab:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab1:	e8 3f d2 ff ff       	call   c0001cf5 <mem_set>
c0004ab6:	b9 64 00 00 00       	mov    ecx,0x64
c0004abb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004abe:	31 d2                	xor    edx,edx
c0004ac0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ac8:	f7 f1                	div    ecx
c0004aca:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ad3:	89 f8                	mov    eax,edi
c0004ad5:	0f b6 c0             	movzx  eax,al
c0004ad8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004adc:	e9 80 00 00 00       	jmp    c0004b61 <create_partition+0x530>
c0004ae1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ae4:	29 cf                	sub    edi,ecx
c0004ae6:	89 ca                	mov    edx,ecx
c0004ae8:	89 f0                	mov    eax,esi
c0004aea:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004aef:	e8 e3 d1 ff ff       	call   c0001cd7 <st_dword>
c0004af4:	8d 46 04             	lea    eax,[esi+0x4]
c0004af7:	89 fa                	mov    edx,edi
c0004af9:	83 c6 10             	add    esi,0x10
c0004afc:	e8 d6 d1 ff ff       	call   c0001cd7 <st_dword>
c0004b01:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b05:	31 d2                	xor    edx,edx
c0004b07:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b0a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b0e:	89 c8                	mov    eax,ecx
c0004b10:	01 f9                	add    ecx,edi
c0004b12:	f7 f5                	div    ebp
c0004b14:	89 d5                	mov    ebp,edx
c0004b16:	31 d2                	xor    edx,edx
c0004b18:	45                   	inc    ebp
c0004b19:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b1d:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b20:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b23:	89 c2                	mov    edx,eax
c0004b25:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b28:	c1 ea 02             	shr    edx,0x2
c0004b2b:	83 e2 c0             	and    edx,0xffffffc0
c0004b2e:	09 ea                	or     edx,ebp
c0004b30:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b35:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b38:	31 d2                	xor    edx,edx
c0004b3a:	f7 f5                	div    ebp
c0004b3c:	89 d7                	mov    edi,edx
c0004b3e:	31 d2                	xor    edx,edx
c0004b40:	47                   	inc    edi
c0004b41:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b45:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b48:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b4b:	89 c5                	mov    ebp,eax
c0004b4d:	c1 ed 02             	shr    ebp,0x2
c0004b50:	83 e5 c0             	and    ebp,0xffffffc0
c0004b53:	09 ef                	or     edi,ebp
c0004b55:	89 fa                	mov    edx,edi
c0004b57:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b5a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b5f:	74 34                	je     c0004b95 <create_partition+0x564>
c0004b61:	85 c9                	test   ecx,ecx
c0004b63:	74 30                	je     c0004b95 <create_partition+0x564>
c0004b65:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b68:	76 2b                	jbe    c0004b95 <create_partition+0x564>
c0004b6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b6e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b72:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b75:	83 ff 64             	cmp    edi,0x64
c0004b78:	76 4b                	jbe    c0004bc5 <create_partition+0x594>
c0004b7a:	89 f8                	mov    eax,edi
c0004b7c:	01 c8                	add    eax,ecx
c0004b7e:	0f 82 5d ff ff ff    	jb     c0004ae1 <create_partition+0x4b0>
c0004b84:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b87:	0f 87 54 ff ff ff    	ja     c0004ae1 <create_partition+0x4b0>
c0004b8d:	85 ff                	test   edi,edi
c0004b8f:	0f 85 51 ff ff ff    	jne    c0004ae6 <create_partition+0x4b5>
c0004b95:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b9b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba0:	e8 2e d1 ff ff       	call   c0001cd3 <st_word>
c0004ba5:	83 ec 0c             	sub    esp,0xc
c0004ba8:	6a 01                	push   0x1
c0004baa:	6a 00                	push   0x0
c0004bac:	6a 00                	push   0x0
c0004bae:	53                   	push   ebx
c0004baf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bb3:	e8 74 d0 ff ff       	call   c0001c2c <disk_write>
c0004bb8:	83 c4 20             	add    esp,0x20
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	0f 95 c0             	setne  al
c0004bc0:	0f b6 c0             	movzx  eax,al
c0004bc3:	eb 0e                	jmp    c0004bd3 <create_partition+0x5a2>
c0004bc5:	74 07                	je     c0004bce <create_partition+0x59d>
c0004bc7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bcc:	eb ac                	jmp    c0004b7a <create_partition+0x549>
c0004bce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd1:	eb a7                	jmp    c0004b7a <create_partition+0x549>
c0004bd3:	83 c4 5c             	add    esp,0x5c
c0004bd6:	5b                   	pop    ebx
c0004bd7:	5e                   	pop    esi
c0004bd8:	5f                   	pop    edi
c0004bd9:	5d                   	pop    ebp
c0004bda:	c3                   	ret    

c0004bdb <get_fileinfo>:
c0004bdb:	55                   	push   ebp
c0004bdc:	57                   	push   edi
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	83 ec 1c             	sub    esp,0x1c
c0004be2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004be4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004be8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bec:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bef:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bf2:	0f 84 dc 01 00 00    	je     c0004dd4 <get_fileinfo+0x1f9>
c0004bf8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bfb:	75 0f                	jne    c0004c0c <get_fileinfo+0x31>
c0004bfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c00:	83 c4 1c             	add    esp,0x1c
c0004c03:	5b                   	pop    ebx
c0004c04:	5e                   	pop    esi
c0004c05:	5f                   	pop    edi
c0004c06:	5d                   	pop    ebp
c0004c07:	e9 58 d5 ff ff       	jmp    c0002164 <get_xfileinfo>
c0004c0c:	89 d3                	mov    ebx,edx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c14:	74 6a                	je     c0004c80 <get_fileinfo+0xa5>
c0004c16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c1e:	31 ed                	xor    ebp,ebp
c0004c20:	31 ff                	xor    edi,edi
c0004c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c2d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c31:	66 85 d2             	test   dx,dx
c0004c34:	74 3e                	je     c0004c74 <get_fileinfo+0x99>
c0004c36:	66 85 ed             	test   bp,bp
c0004c39:	75 0c                	jne    c0004c47 <get_fileinfo+0x6c>
c0004c3b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c41:	66 3d ff 07          	cmp    ax,0x7ff
c0004c45:	76 22                	jbe    c0004c69 <get_fileinfo+0x8e>
c0004c47:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c4c:	89 e8                	mov    eax,ebp
c0004c4e:	29 f9                	sub    ecx,edi
c0004c50:	c1 e0 10             	shl    eax,0x10
c0004c53:	09 d0                	or     eax,edx
c0004c55:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c59:	e8 a3 d1 ff ff       	call   c0001e01 <put_utf>
c0004c5e:	84 c0                	test   al,al
c0004c60:	74 10                	je     c0004c72 <get_fileinfo+0x97>
c0004c62:	0f b6 c0             	movzx  eax,al
c0004c65:	31 d2                	xor    edx,edx
c0004c67:	01 c7                	add    edi,eax
c0004c69:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c6e:	89 d5                	mov    ebp,edx
c0004c70:	eb b0                	jmp    c0004c22 <get_fileinfo+0x47>
c0004c72:	31 ff                	xor    edi,edi
c0004c74:	66 85 ed             	test   bp,bp
c0004c77:	74 02                	je     c0004c7b <get_fileinfo+0xa0>
c0004c79:	31 ff                	xor    edi,edi
c0004c7b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c80:	31 ff                	xor    edi,edi
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	83 f9 0a             	cmp    ecx,0xa
c0004c87:	0f 87 ad 00 00 00    	ja     c0004d3a <get_fileinfo+0x15f>
c0004c8d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c90:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c93:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c97:	66 83 fa 20          	cmp    dx,0x20
c0004c9b:	0f 84 92 00 00 00    	je     c0004d33 <get_fileinfo+0x158>
c0004ca1:	66 83 fa 05          	cmp    dx,0x5
c0004ca5:	75 05                	jne    c0004cac <get_fileinfo+0xd1>
c0004ca7:	ba e5 00 00 00       	mov    edx,0xe5
c0004cac:	83 ff 0b             	cmp    edi,0xb
c0004caf:	77 0b                	ja     c0004cbc <get_fileinfo+0xe1>
c0004cb1:	83 fd 09             	cmp    ebp,0x9
c0004cb4:	75 06                	jne    c0004cbc <get_fileinfo+0xe1>
c0004cb6:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cbb:	47                   	inc    edi
c0004cbc:	0f b7 c2             	movzx  eax,dx
c0004cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cc3:	e8 6d d0 ff ff       	call   c0001d35 <dbc_1st>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 2f                	je     c0004cfb <get_fileinfo+0x120>
c0004ccc:	83 fd 08             	cmp    ebp,0x8
c0004ccf:	74 2a                	je     c0004cfb <get_fileinfo+0x120>
c0004cd1:	83 fd 0b             	cmp    ebp,0xb
c0004cd4:	74 25                	je     c0004cfb <get_fileinfo+0x120>
c0004cd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cdd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce1:	e8 52 d0 ff ff       	call   c0001d38 <dbc_2nd>
c0004ce6:	85 c0                	test   eax,eax
c0004ce8:	74 11                	je     c0004cfb <get_fileinfo+0x120>
c0004cea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cf3:	c1 e2 08             	shl    edx,0x8
c0004cf6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cf9:	09 c2                	or     edx,eax
c0004cfb:	0f b7 d2             	movzx  edx,dx
c0004cfe:	50                   	push   eax
c0004cff:	50                   	push   eax
c0004d00:	68 b5 01 00 00       	push   0x1b5
c0004d05:	52                   	push   edx
c0004d06:	e8 46 38 00 00       	call   c0008551 <ff_oem2uni>
c0004d0b:	83 c4 10             	add    esp,0x10
c0004d0e:	66 85 c0             	test   ax,ax
c0004d11:	75 04                	jne    c0004d17 <get_fileinfo+0x13c>
c0004d13:	31 ff                	xor    edi,edi
c0004d15:	eb 23                	jmp    c0004d3a <get_fileinfo+0x15f>
c0004d17:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d1c:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d20:	29 f9                	sub    ecx,edi
c0004d22:	0f b7 c0             	movzx  eax,ax
c0004d25:	e8 d7 d0 ff ff       	call   c0001e01 <put_utf>
c0004d2a:	84 c0                	test   al,al
c0004d2c:	74 e5                	je     c0004d13 <get_fileinfo+0x138>
c0004d2e:	0f b6 c0             	movzx  eax,al
c0004d31:	01 c7                	add    edi,eax
c0004d33:	89 e9                	mov    ecx,ebp
c0004d35:	e9 4a ff ff ff       	jmp    c0004c84 <get_fileinfo+0xa9>
c0004d3a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d3f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d43:	75 54                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d45:	85 ff                	test   edi,edi
c0004d47:	75 0b                	jne    c0004d54 <get_fileinfo+0x179>
c0004d49:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d4d:	ba 01 00 00 00       	mov    edx,0x1
c0004d52:	eb 33                	jmp    c0004d87 <get_fileinfo+0x1ac>
c0004d54:	b1 08                	mov    cl,0x8
c0004d56:	31 d2                	xor    edx,edx
c0004d58:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d5e:	84 c0                	test   al,al
c0004d60:	74 25                	je     c0004d87 <get_fileinfo+0x1ac>
c0004d62:	66 83 f8 2e          	cmp    ax,0x2e
c0004d66:	74 16                	je     c0004d7e <get_fileinfo+0x1a3>
c0004d68:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d6b:	66 83 ff 19          	cmp    di,0x19
c0004d6f:	77 0f                	ja     c0004d80 <get_fileinfo+0x1a5>
c0004d71:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d74:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d77:	74 07                	je     c0004d80 <get_fileinfo+0x1a5>
c0004d79:	83 c0 20             	add    eax,0x20
c0004d7c:	eb 02                	jmp    c0004d80 <get_fileinfo+0x1a5>
c0004d7e:	b1 10                	mov    cl,0x10
c0004d80:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d84:	42                   	inc    edx
c0004d85:	eb d1                	jmp    c0004d58 <get_fileinfo+0x17d>
c0004d87:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d93:	75 04                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d95:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d99:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d9f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004da2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da5:	83 c0 1c             	add    eax,0x1c
c0004da8:	e8 c1 ce ff ff       	call   c0001c6e <ld_dword>
c0004dad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004db4:	89 03                	mov    DWORD PTR [ebx],eax
c0004db6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db9:	83 c0 16             	add    eax,0x16
c0004dbc:	e8 a0 ce ff ff       	call   c0001c61 <ld_word>
c0004dc1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dc5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc8:	83 c0 18             	add    eax,0x18
c0004dcb:	e8 91 ce ff ff       	call   c0001c61 <ld_word>
c0004dd0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dd4:	83 c4 1c             	add    esp,0x1c
c0004dd7:	5b                   	pop    ebx
c0004dd8:	5e                   	pop    esi
c0004dd9:	5f                   	pop    edi
c0004dda:	5d                   	pop    ebp
c0004ddb:	c3                   	ret    

c0004ddc <ld_clust.isra.0>:
c0004ddc:	56                   	push   esi
c0004ddd:	89 c6                	mov    esi,eax
c0004ddf:	53                   	push   ebx
c0004de0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004de3:	89 d3                	mov    ebx,edx
c0004de5:	e8 77 ce ff ff       	call   c0001c61 <ld_word>
c0004dea:	0f b7 c8             	movzx  ecx,ax
c0004ded:	89 f0                	mov    eax,esi
c0004def:	3c 03                	cmp    al,0x3
c0004df1:	75 0d                	jne    c0004e00 <ld_clust.isra.0+0x24>
c0004df3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004df6:	e8 66 ce ff ff       	call   c0001c61 <ld_word>
c0004dfb:	c1 e0 10             	shl    eax,0x10
c0004dfe:	09 c1                	or     ecx,eax
c0004e00:	89 c8                	mov    eax,ecx
c0004e02:	5b                   	pop    ebx
c0004e03:	5e                   	pop    esi
c0004e04:	c3                   	ret    

c0004e05 <st_clust.isra.1>:
c0004e05:	56                   	push   esi
c0004e06:	89 c6                	mov    esi,eax
c0004e08:	53                   	push   ebx
c0004e09:	89 d3                	mov    ebx,edx
c0004e0b:	0f b7 d1             	movzx  edx,cx
c0004e0e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e11:	e8 bd ce ff ff       	call   c0001cd3 <st_word>
c0004e16:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e19:	75 0f                	jne    c0004e2a <st_clust.isra.1+0x25>
c0004e1b:	c1 e9 10             	shr    ecx,0x10
c0004e1e:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e21:	89 ca                	mov    edx,ecx
c0004e23:	5b                   	pop    ebx
c0004e24:	5e                   	pop    esi
c0004e25:	e9 a9 ce ff ff       	jmp    c0001cd3 <st_word>
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <init_alloc_info.isra.2>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c6                	mov    esi,eax
c0004e31:	89 d3                	mov    ebx,edx
c0004e33:	51                   	push   ecx
c0004e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e36:	83 c0 34             	add    eax,0x34
c0004e39:	e8 30 ce ff ff       	call   c0001c6e <ld_dword>
c0004e3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e41:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e43:	83 c0 38             	add    eax,0x38
c0004e46:	e8 3b ce ff ff       	call   c0001c86 <ld_qword>
c0004e4b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e4e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e53:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e56:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5d:	83 e0 02             	and    eax,0x2
c0004e60:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e63:	5b                   	pop    ebx
c0004e64:	5b                   	pop    ebx
c0004e65:	5e                   	pop    esi
c0004e66:	c3                   	ret    

c0004e67 <follow_path>:
c0004e67:	56                   	push   esi
c0004e68:	53                   	push   ebx
c0004e69:	89 c3                	mov    ebx,eax
c0004e6b:	83 ec 14             	sub    esp,0x14
c0004e6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e72:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e78:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e7a:	80 fa 5c             	cmp    dl,0x5c
c0004e7d:	75 07                	jne    c0004e86 <follow_path+0x1f>
c0004e7f:	40                   	inc    eax
c0004e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e84:	eb ee                	jmp    c0004e74 <follow_path+0xd>
c0004e86:	80 fa 2f             	cmp    dl,0x2f
c0004e89:	74 f4                	je     c0004e7f <follow_path+0x18>
c0004e8b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e99:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e9c:	77 52                	ja     c0004ef0 <follow_path+0x89>
c0004e9e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ea2:	31 d2                	xor    edx,edx
c0004ea4:	89 d8                	mov    eax,ebx
c0004ea6:	e8 12 e3 ff ff       	call   c00031bd <dir_sdi>
c0004eab:	eb 7c                	jmp    c0004f29 <follow_path+0xc2>
c0004ead:	89 d8                	mov    eax,ebx
c0004eaf:	e8 6e f2 ff ff       	call   c0004122 <dir_find>
c0004eb4:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004eb7:	85 c0                	test   eax,eax
c0004eb9:	75 46                	jne    c0004f01 <follow_path+0x9a>
c0004ebb:	80 e2 04             	and    dl,0x4
c0004ebe:	75 69                	jne    c0004f29 <follow_path+0xc2>
c0004ec0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ec4:	74 5e                	je     c0004f24 <follow_path+0xbd>
c0004ec6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ec8:	3c 04                	cmp    al,0x4
c0004eca:	75 41                	jne    c0004f0d <follow_path+0xa6>
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ed3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ed6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ed9:	30 c0                	xor    al,al
c0004edb:	09 d0                	or     eax,edx
c0004edd:	89 da                	mov    edx,ebx
c0004edf:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ee2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ee5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ee8:	8d 46 10             	lea    eax,[esi+0x10]
c0004eeb:	e8 3d ff ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0004ef0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ef4:	89 d8                	mov    eax,ebx
c0004ef6:	e8 a9 ed ff ff       	call   c0003ca4 <create_name>
c0004efb:	85 c0                	test   eax,eax
c0004efd:	74 ae                	je     c0004ead <follow_path+0x46>
c0004eff:	eb 28                	jmp    c0004f29 <follow_path+0xc2>
c0004f01:	83 f8 04             	cmp    eax,0x4
c0004f04:	75 23                	jne    c0004f29 <follow_path+0xc2>
c0004f06:	80 e2 04             	and    dl,0x4
c0004f09:	74 19                	je     c0004f24 <follow_path+0xbd>
c0004f0b:	eb 1c                	jmp    c0004f29 <follow_path+0xc2>
c0004f0d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f10:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f16:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f1a:	e8 bd fe ff ff       	call   c0004ddc <ld_clust.isra.0>
c0004f1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f22:	eb cc                	jmp    c0004ef0 <follow_path+0x89>
c0004f24:	b8 05 00 00 00       	mov    eax,0x5
c0004f29:	83 c4 14             	add    esp,0x14
c0004f2c:	5b                   	pop    ebx
c0004f2d:	5e                   	pop    esi
c0004f2e:	c3                   	ret    

c0004f2f <f_mount>:
c0004f2f:	53                   	push   ebx
c0004f30:	83 ec 18             	sub    esp,0x18
c0004f33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f43:	e8 fb d2 ff ff       	call   c0002243 <get_ldnumber>
c0004f48:	89 c2                	mov    edx,eax
c0004f4a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f4f:	85 d2                	test   edx,edx
c0004f51:	78 39                	js     c0004f8c <f_mount+0x5d>
c0004f53:	8b 04 95 40 e2 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1dc0]
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 03                	je     c0004f61 <f_mount+0x32>
c0004f5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 c0                	test   eax,eax
c0004f67:	74 03                	je     c0004f6c <f_mount+0x3d>
c0004f69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	89 04 95 40 e2 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1dc0],eax
c0004f77:	31 c0                	xor    eax,eax
c0004f79:	84 db                	test   bl,bl
c0004f7b:	74 0f                	je     c0004f8c <f_mount+0x5d>
c0004f7d:	31 c9                	xor    ecx,ecx
c0004f7f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 65 d7 ff ff       	call   c00026f1 <mount_volume>
c0004f8c:	83 c4 18             	add    esp,0x18
c0004f8f:	5b                   	pop    ebx
c0004f90:	c3                   	ret    

c0004f91 <f_open>:
c0004f91:	55                   	push   ebp
c0004f92:	bd 09 00 00 00       	mov    ebp,0x9
c0004f97:	57                   	push   edi
c0004f98:	56                   	push   esi
c0004f99:	53                   	push   ebx
c0004f9a:	83 ec 7c             	sub    esp,0x7c
c0004f9d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fa4:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fab:	85 db                	test   ebx,ebx
c0004fad:	0f 84 10 04 00 00    	je     c00053c3 <f_open+0x432>
c0004fb3:	89 fe                	mov    esi,edi
c0004fb5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fb9:	83 e6 3f             	and    esi,0x3f
c0004fbc:	89 f0                	mov    eax,esi
c0004fbe:	0f b6 c8             	movzx  ecx,al
c0004fc1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fc8:	e8 24 d7 ff ff       	call   c00026f1 <mount_volume>
c0004fcd:	89 c5                	mov    ebp,eax
c0004fcf:	85 c0                	test   eax,eax
c0004fd1:	0f 85 e6 03 00 00    	jne    c00053bd <f_open+0x42c>
c0004fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fdb:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe4:	83 ec 0c             	sub    esp,0xc
c0004fe7:	68 60 04 00 00       	push   0x460
c0004fec:	e8 a3 34 00 00       	call   c0008494 <ff_memalloc>
c0004ff1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ff5:	83 c4 10             	add    esp,0x10
c0004ff8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ffd:	0f 84 c0 03 00 00    	je     c00053c3 <f_open+0x432>
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000500b:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005011:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005014:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005017:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000501e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005022:	e8 40 fe ff ff       	call   c0004e67 <follow_path>
c0005027:	89 c5                	mov    ebp,eax
c0005029:	85 c0                	test   eax,eax
c000502b:	75 0c                	jne    c0005039 <f_open+0xa8>
c000502d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005032:	79 05                	jns    c0005039 <f_open+0xa8>
c0005034:	bd 06 00 00 00       	mov    ebp,0x6
c0005039:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000503f:	0f 84 84 01 00 00    	je     c00051c9 <f_open+0x238>
c0005045:	85 ed                	test   ebp,ebp
c0005047:	74 20                	je     c0005069 <f_open+0xd8>
c0005049:	83 fd 04             	cmp    ebp,0x4
c000504c:	0f 85 58 03 00 00    	jne    c00053aa <f_open+0x419>
c0005052:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005056:	83 ce 08             	or     esi,0x8
c0005059:	e8 8a f2 ff ff       	call   c00042e8 <dir_register>
c000505e:	89 c5                	mov    ebp,eax
c0005060:	85 c0                	test   eax,eax
c0005062:	74 2f                	je     c0005093 <f_open+0x102>
c0005064:	e9 41 03 00 00       	jmp    c00053aa <f_open+0x419>
c0005069:	bd 07 00 00 00       	mov    ebp,0x7
c000506e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005073:	0f 85 31 03 00 00    	jne    c00053aa <f_open+0x419>
c0005079:	bd 08 00 00 00       	mov    ebp,0x8
c000507e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005084:	0f 85 20 03 00 00    	jne    c00053aa <f_open+0x419>
c000508a:	83 e7 08             	and    edi,0x8
c000508d:	0f 84 65 01 00 00    	je     c00051f8 <f_open+0x267>
c0005093:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005097:	8a 02                	mov    al,BYTE PTR [edx]
c0005099:	3c 04                	cmp    al,0x4
c000509b:	0f 85 97 00 00 00    	jne    c0005138 <f_open+0x1a7>
c00050a1:	8d 42 10             	lea    eax,[edx+0x10]
c00050a4:	89 13                	mov    DWORD PTR [ebx],edx
c00050a6:	89 da                	mov    edx,ebx
c00050a8:	e8 80 fd ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c00050ad:	31 d2                	xor    edx,edx
c00050af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bb:	83 c0 02             	add    eax,0x2
c00050be:	e8 32 cc ff ff       	call   c0001cf5 <mem_set>
c00050c3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050c8:	31 d2                	xor    edx,edx
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d1:	83 c0 26             	add    eax,0x26
c00050d4:	e8 1c cc ff ff       	call   c0001cf5 <mem_set>
c00050d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ec:	83 c0 08             	add    eax,0x8
c00050ef:	e8 e3 cb ff ff       	call   c0001cd7 <st_dword>
c00050f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050fb:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005103:	e8 b7 ea ff ff       	call   c0003bbf <store_xdir>
c0005108:	89 c5                	mov    ebp,eax
c000510a:	85 c0                	test   eax,eax
c000510c:	0f 85 98 02 00 00    	jne    c00053aa <f_open+0x419>
c0005112:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005115:	85 d2                	test   edx,edx
c0005117:	0f 84 db 00 00 00    	je     c00051f8 <f_open+0x267>
c000511d:	31 c9                	xor    ecx,ecx
c000511f:	89 d8                	mov    eax,ebx
c0005121:	e8 8e e3 ff ff       	call   c00034b4 <remove_chain>
c0005126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000512a:	89 c5                	mov    ebp,eax
c000512c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000512f:	48                   	dec    eax
c0005130:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005133:	e9 b8 00 00 00       	jmp    c00051f0 <f_open+0x25f>
c0005138:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000513c:	89 ea                	mov    edx,ebp
c000513e:	e8 99 fc ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005143:	ba 00 00 21 50       	mov    edx,0x50210000
c0005148:	89 c7                	mov    edi,eax
c000514a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000514d:	e8 85 cb ff ff       	call   c0001cd7 <st_dword>
c0005152:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005156:	31 c9                	xor    ecx,ecx
c0005158:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000515c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005160:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005164:	e8 9c fc ff ff       	call   c0004e05 <st_clust.isra.1>
c0005169:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000516d:	31 d2                	xor    edx,edx
c000516f:	83 c0 1c             	add    eax,0x1c
c0005172:	e8 60 cb ff ff       	call   c0001cd7 <st_dword>
c0005177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517b:	85 ff                	test   edi,edi
c000517d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005181:	74 75                	je     c00051f8 <f_open+0x267>
c0005183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005187:	31 c9                	xor    ecx,ecx
c0005189:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000518c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000518f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005197:	89 fa                	mov    edx,edi
c0005199:	8d 44 24 24          	lea    eax,[esp+0x24]
c000519d:	e8 12 e3 ff ff       	call   c00034b4 <remove_chain>
c00051a2:	89 c5                	mov    ebp,eax
c00051a4:	85 c0                	test   eax,eax
c00051a6:	0f 85 fe 01 00 00    	jne    c00053aa <f_open+0x419>
c00051ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b8:	4f                   	dec    edi
c00051b9:	e8 81 d2 ff ff       	call   c000243f <move_window>
c00051be:	89 c5                	mov    ebp,eax
c00051c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051c7:	eb 27                	jmp    c00051f0 <f_open+0x25f>
c00051c9:	85 ed                	test   ebp,ebp
c00051cb:	0f 85 d9 01 00 00    	jne    c00053aa <f_open+0x419>
c00051d1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051d5:	bd 04 00 00 00       	mov    ebp,0x4
c00051da:	a8 10                	test   al,0x10
c00051dc:	0f 85 c8 01 00 00    	jne    c00053aa <f_open+0x419>
c00051e2:	83 e7 02             	and    edi,0x2
c00051e5:	74 11                	je     c00051f8 <f_open+0x267>
c00051e7:	bd 07 00 00 00       	mov    ebp,0x7
c00051ec:	a8 01                	test   al,0x1
c00051ee:	eb 02                	jmp    c00051f2 <f_open+0x261>
c00051f0:	85 ed                	test   ebp,ebp
c00051f2:	0f 85 b2 01 00 00    	jne    c00053aa <f_open+0x419>
c00051f8:	f7 c6 08 00 00 00    	test   esi,0x8
c00051fe:	74 03                	je     c0005203 <f_open+0x272>
c0005200:	83 ce 40             	or     esi,0x40
c0005203:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005207:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000520a:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000520d:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005210:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005213:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005217:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000521a:	8a 02                	mov    al,BYTE PTR [edx]
c000521c:	3c 04                	cmp    al,0x4
c000521e:	75 2a                	jne    c000524a <f_open+0x2b9>
c0005220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005224:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000522c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005230:	30 c0                	xor    al,al
c0005232:	09 c8                	or     eax,ecx
c0005234:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005237:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000523b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000523e:	8d 42 10             	lea    eax,[edx+0x10]
c0005241:	89 da                	mov    edx,ebx
c0005243:	e8 e5 fb ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0005248:	eb 1c                	jmp    c0005266 <f_open+0x2d5>
c000524a:	89 fa                	mov    edx,edi
c000524c:	e8 8b fb ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005251:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005254:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005257:	e8 12 ca ff ff       	call   c0001c6e <ld_dword>
c000525c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005263:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000526a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005271:	89 03                	mov    DWORD PTR [ebx],eax
c0005273:	31 d2                	xor    edx,edx
c0005275:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005279:	b9 00 02 00 00       	mov    ecx,0x200
c000527e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005282:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005286:	89 f0                	mov    eax,esi
c0005288:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000528f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005292:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005299:	8d 43 50             	lea    eax,[ebx+0x50]
c000529c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052a3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052ae:	e8 42 ca ff ff       	call   c0001cf5 <mem_set>
c00052b3:	83 e6 20             	and    esi,0x20
c00052b6:	75 07                	jne    c00052bf <f_open+0x32e>
c00052b8:	31 ed                	xor    ebp,ebp
c00052ba:	e9 eb 00 00 00       	jmp    c00053aa <f_open+0x419>
c00052bf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052c2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052d5:	74 e1                	je     c00052b8 <f_open+0x327>
c00052d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052e2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052e9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ec:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	c1 e5 09             	shl    ebp,0x9
c00052f5:	89 ee                	mov    esi,ebp
c00052f7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052fb:	89 f8                	mov    eax,edi
c00052fd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005301:	73 22                	jae    c0005325 <f_open+0x394>
c0005303:	89 d8                	mov    eax,ebx
c0005305:	e8 bd dc ff ff       	call   c0002fc7 <get_fat>
c000530a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000530e:	89 c2                	mov    edx,eax
c0005310:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005314:	83 f8 01             	cmp    eax,0x1
c0005317:	76 10                	jbe    c0005329 <f_open+0x398>
c0005319:	83 f8 ff             	cmp    eax,0xffffffff
c000531c:	75 d9                	jne    c00052f7 <f_open+0x366>
c000531e:	bd 01 00 00 00       	mov    ebp,0x1
c0005323:	eb 09                	jmp    c000532e <f_open+0x39d>
c0005325:	31 ed                	xor    ebp,ebp
c0005327:	eb 05                	jmp    c000532e <f_open+0x39d>
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005331:	85 ed                	test   ebp,ebp
c0005333:	75 75                	jne    c00053aa <f_open+0x419>
c0005335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005339:	25 ff 01 00 00       	and    eax,0x1ff
c000533e:	0f 84 74 ff ff ff    	je     c00052b8 <f_open+0x327>
c0005344:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005348:	bd 02 00 00 00       	mov    ebp,0x2
c000534d:	89 c8                	mov    eax,ecx
c000534f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005353:	e8 a2 cb ff ff       	call   c0001efa <clst2sect>
c0005358:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535c:	89 d7                	mov    edi,edx
c000535e:	09 c7                	or     edi,eax
c0005360:	74 48                	je     c00053aa <f_open+0x419>
c0005362:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005366:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000536a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005372:	0f ac fe 09          	shrd   esi,edi,0x9
c0005376:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000537a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000537e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005381:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005385:	83 ec 0c             	sub    esp,0xc
c0005388:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000538b:	6a 01                	push   0x1
c000538d:	52                   	push   edx
c000538e:	50                   	push   eax
c000538f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005397:	50                   	push   eax
c0005398:	e8 79 c8 ff ff       	call   c0001c16 <disk_read>
c000539d:	83 c4 20             	add    esp,0x20
c00053a0:	85 c0                	test   eax,eax
c00053a2:	0f 95 c0             	setne  al
c00053a5:	0f b6 c0             	movzx  eax,al
c00053a8:	89 c5                	mov    ebp,eax
c00053aa:	83 ec 0c             	sub    esp,0xc
c00053ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b1:	e8 f4 30 00 00       	call   c00084aa <ff_memfree>
c00053b6:	83 c4 10             	add    esp,0x10
c00053b9:	85 ed                	test   ebp,ebp
c00053bb:	74 06                	je     c00053c3 <f_open+0x432>
c00053bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053c3:	83 c4 7c             	add    esp,0x7c
c00053c6:	89 e8                	mov    eax,ebp
c00053c8:	5b                   	pop    ebx
c00053c9:	5e                   	pop    esi
c00053ca:	5f                   	pop    edi
c00053cb:	5d                   	pop    ebp
c00053cc:	c3                   	ret    

c00053cd <f_read>:
c00053cd:	55                   	push   ebp
c00053ce:	57                   	push   edi
c00053cf:	56                   	push   esi
c00053d0:	53                   	push   ebx
c00053d1:	83 ec 2c             	sub    esp,0x2c
c00053d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053e6:	89 d8                	mov    eax,ebx
c00053e8:	e8 77 cf ff ff       	call   c0002364 <validate>
c00053ed:	89 c5                	mov    ebp,eax
c00053ef:	85 c0                	test   eax,eax
c00053f1:	0f 85 4c 02 00 00    	jne    c0005643 <f_read+0x276>
c00053f7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053fb:	85 ed                	test   ebp,ebp
c00053fd:	0f 85 40 02 00 00    	jne    c0005643 <f_read+0x276>
c0005403:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005407:	0f 84 31 02 00 00    	je     c000563e <f_read+0x271>
c000540d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005410:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005413:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005416:	bf 00 00 00 00       	mov    edi,0x0
c000541b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000541e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005422:	89 d1                	mov    ecx,edx
c0005424:	19 f9                	sbb    ecx,edi
c0005426:	0f 83 cf 00 00 00    	jae    c00054fb <f_read+0x12e>
c000542c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005430:	e9 c6 00 00 00       	jmp    c00054fb <f_read+0x12e>
c0005435:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005438:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000543b:	89 d0                	mov    eax,edx
c000543d:	25 ff 01 00 00       	and    eax,0x1ff
c0005442:	0f 85 c9 01 00 00    	jne    c0005611 <f_read+0x244>
c0005448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000544c:	89 d6                	mov    esi,edx
c000544e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005452:	89 cf                	mov    edi,ecx
c0005454:	48                   	dec    eax
c0005455:	0f ac fe 09          	shrd   esi,edi,0x9
c0005459:	21 f0                	and    eax,esi
c000545b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000545f:	0f 84 a6 00 00 00    	je     c000550b <f_read+0x13e>
c0005465:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005469:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000546c:	89 c8                	mov    eax,ecx
c000546e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005471:	e8 84 ca ff ff       	call   c0001efa <clst2sect>
c0005476:	89 d7                	mov    edi,edx
c0005478:	09 c7                	or     edi,eax
c000547a:	0f 84 b4 00 00 00    	je     c0005534 <f_read+0x167>
c0005480:	31 ff                	xor    edi,edi
c0005482:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005486:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005489:	01 c6                	add    esi,eax
c000548b:	11 d7                	adc    edi,edx
c000548d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005495:	0f 86 fd 00 00 00    	jbe    c0005598 <f_read+0x1cb>
c000549b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054a3:	c1 e8 09             	shr    eax,0x9
c00054a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054ad:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b0:	39 c2                	cmp    edx,eax
c00054b2:	76 07                	jbe    c00054bb <f_read+0xee>
c00054b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054bb:	83 ec 0c             	sub    esp,0xc
c00054be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054c2:	57                   	push   edi
c00054c3:	56                   	push   esi
c00054c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 44 c7 ff ff       	call   c0001c16 <disk_read>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	75 6e                	jne    c0005547 <f_read+0x17a>
c00054d9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054dd:	78 7e                	js     c000555d <f_read+0x190>
c00054df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054e2:	c1 e6 09             	shl    esi,0x9
c00054e5:	31 ff                	xor    edi,edi
c00054e7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	01 30                	add    DWORD PTR [eax],esi
c00054f5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054f8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 2f ff ff ff    	jne    c0005435 <f_read+0x68>
c0005506:	e9 38 01 00 00       	jmp    c0005643 <f_read+0x276>
c000550b:	89 c8                	mov    eax,ecx
c000550d:	09 d0                	or     eax,edx
c000550f:	75 05                	jne    c0005516 <f_read+0x149>
c0005511:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005514:	eb 19                	jmp    c000552f <f_read+0x162>
c0005516:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551a:	74 09                	je     c0005525 <f_read+0x158>
c000551c:	89 d8                	mov    eax,ebx
c000551e:	e8 f8 c9 ff ff       	call   c0001f1b <clmt_clust>
c0005523:	eb 0a                	jmp    c000552f <f_read+0x162>
c0005525:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005528:	89 d8                	mov    eax,ebx
c000552a:	e8 98 da ff ff       	call   c0002fc7 <get_fat>
c000552f:	83 f8 01             	cmp    eax,0x1
c0005532:	77 0e                	ja     c0005542 <f_read+0x175>
c0005534:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005538:	bd 02 00 00 00       	mov    ebp,0x2
c000553d:	e9 01 01 00 00       	jmp    c0005643 <f_read+0x276>
c0005542:	83 f8 ff             	cmp    eax,0xffffffff
c0005545:	75 0e                	jne    c0005555 <f_read+0x188>
c0005547:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000554b:	bd 01 00 00 00       	mov    ebp,0x1
c0005550:	e9 ee 00 00 00       	jmp    c0005643 <f_read+0x276>
c0005555:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005558:	e9 08 ff ff ff       	jmp    c0005465 <f_read+0x98>
c000555d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005560:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005563:	29 f0                	sub    eax,esi
c0005565:	19 fa                	sbb    edx,edi
c0005567:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000556a:	89 d7                	mov    edi,edx
c000556c:	ba 00 00 00 00       	mov    edx,0x0
c0005571:	89 f9                	mov    ecx,edi
c0005573:	19 d1                	sbb    ecx,edx
c0005575:	0f 83 64 ff ff ff    	jae    c00054df <f_read+0x112>
c000557b:	89 c7                	mov    edi,eax
c000557d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005580:	c1 e7 09             	shl    edi,0x9
c0005583:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005587:	b9 00 02 00 00       	mov    ecx,0x200
c000558c:	01 f8                	add    eax,edi
c000558e:	e8 4d c7 ff ff       	call   c0001ce0 <mem_cpy>
c0005593:	e9 47 ff ff ff       	jmp    c00054df <f_read+0x112>
c0005598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000559b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000559e:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055a5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055a9:	75 05                	jne    c00055b0 <f_read+0x1e3>
c00055ab:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055ae:	74 5b                	je     c000560b <f_read+0x23e>
c00055b0:	8d 43 50             	lea    eax,[ebx+0x50]
c00055b3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055bb:	79 2a                	jns    c00055e7 <f_read+0x21a>
c00055bd:	83 ec 0c             	sub    esp,0xc
c00055c0:	6a 01                	push   0x1
c00055c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055d2:	50                   	push   eax
c00055d3:	e8 54 c6 ff ff       	call   c0001c2c <disk_write>
c00055d8:	83 c4 20             	add    esp,0x20
c00055db:	85 c0                	test   eax,eax
c00055dd:	0f 85 64 ff ff ff    	jne    c0005547 <f_read+0x17a>
c00055e3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055e7:	83 ec 0c             	sub    esp,0xc
c00055ea:	6a 01                	push   0x1
c00055ec:	57                   	push   edi
c00055ed:	56                   	push   esi
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055fa:	50                   	push   eax
c00055fb:	e8 16 c6 ff ff       	call   c0001c16 <disk_read>
c0005600:	83 c4 20             	add    esp,0x20
c0005603:	85 c0                	test   eax,eax
c0005605:	0f 85 3c ff ff ff    	jne    c0005547 <f_read+0x17a>
c000560b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000560e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005611:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005614:	ba 00 02 00 00       	mov    edx,0x200
c0005619:	25 ff 01 00 00       	and    eax,0x1ff
c000561e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005622:	29 c2                	sub    edx,eax
c0005624:	39 d6                	cmp    esi,edx
c0005626:	76 02                	jbe    c000562a <f_read+0x25d>
c0005628:	89 d6                	mov    esi,edx
c000562a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000562e:	89 f1                	mov    ecx,esi
c0005630:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005634:	e8 a7 c6 ff ff       	call   c0001ce0 <mem_cpy>
c0005639:	e9 a7 fe ff ff       	jmp    c00054e5 <f_read+0x118>
c000563e:	bd 07 00 00 00       	mov    ebp,0x7
c0005643:	83 c4 2c             	add    esp,0x2c
c0005646:	89 e8                	mov    eax,ebp
c0005648:	5b                   	pop    ebx
c0005649:	5e                   	pop    esi
c000564a:	5f                   	pop    edi
c000564b:	5d                   	pop    ebp
c000564c:	c3                   	ret    

c000564d <f_write>:
c000564d:	55                   	push   ebp
c000564e:	57                   	push   edi
c000564f:	56                   	push   esi
c0005650:	53                   	push   ebx
c0005651:	83 ec 2c             	sub    esp,0x2c
c0005654:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005658:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000565c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005662:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005666:	89 d8                	mov    eax,ebx
c0005668:	e8 f7 cc ff ff       	call   c0002364 <validate>
c000566d:	89 c5                	mov    ebp,eax
c000566f:	85 c0                	test   eax,eax
c0005671:	0f 85 86 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005677:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000567b:	85 ed                	test   ebp,ebp
c000567d:	0f 85 7a 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005683:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005687:	0f 84 6b 02 00 00    	je     c00058f8 <f_write+0x2ab>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005694:	0f 84 43 01 00 00    	je     c00057dd <f_write+0x190>
c000569a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569d:	89 c1                	mov    ecx,eax
c000569f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056a3:	0f 83 34 01 00 00    	jae    c00057dd <f_write+0x190>
c00056a9:	f7 d0                	not    eax
c00056ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056af:	e9 29 01 00 00       	jmp    c00057dd <f_write+0x190>
c00056b4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056b7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056ba:	89 d0                	mov    eax,edx
c00056bc:	25 ff 01 00 00       	and    eax,0x1ff
c00056c1:	0f 85 00 02 00 00    	jne    c00058c7 <f_write+0x27a>
c00056c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056cb:	89 d6                	mov    esi,edx
c00056cd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d1:	89 cf                	mov    edi,ecx
c00056d3:	48                   	dec    eax
c00056d4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056d8:	21 f0                	and    eax,esi
c00056da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056de:	0f 84 06 01 00 00    	je     c00057ea <f_write+0x19d>
c00056e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056e8:	0f 88 6e 01 00 00    	js     c000585c <f_write+0x20f>
c00056ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056f2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056f5:	89 c8                	mov    eax,ecx
c00056f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056fb:	e8 fa c7 ff ff       	call   c0001efa <clst2sect>
c0005700:	89 d1                	mov    ecx,edx
c0005702:	09 c1                	or     ecx,eax
c0005704:	0f 84 1c 01 00 00    	je     c0005826 <f_write+0x1d9>
c000570a:	31 ff                	xor    edi,edi
c000570c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005710:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005714:	01 c6                	add    esi,eax
c0005716:	11 d7                	adc    edi,edx
c0005718:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005720:	0f 86 63 01 00 00    	jbe    c0005889 <f_write+0x23c>
c0005726:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000572a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000572e:	c1 e8 09             	shr    eax,0x9
c0005731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005735:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005739:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000573d:	39 c2                	cmp    edx,eax
c000573f:	76 08                	jbe    c0005749 <f_write+0xfc>
c0005741:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005749:	83 ec 0c             	sub    esp,0xc
c000574c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005750:	57                   	push   edi
c0005751:	56                   	push   esi
c0005752:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000575a:	50                   	push   eax
c000575b:	e8 cc c4 ff ff       	call   c0001c2c <disk_write>
c0005760:	83 c4 20             	add    esp,0x20
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 ce 00 00 00    	jne    c0005839 <f_write+0x1ec>
c000576b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000576e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005771:	29 f0                	sub    eax,esi
c0005773:	19 fa                	sbb    edx,edi
c0005775:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005779:	89 d7                	mov    edi,edx
c000577b:	ba 00 00 00 00       	mov    edx,0x0
c0005780:	89 f9                	mov    ecx,edi
c0005782:	19 d1                	sbb    ecx,edx
c0005784:	73 1c                	jae    c00057a2 <f_write+0x155>
c0005786:	89 c7                	mov    edi,eax
c0005788:	b9 00 02 00 00       	mov    ecx,0x200
c000578d:	c1 e7 09             	shl    edi,0x9
c0005790:	8d 43 50             	lea    eax,[ebx+0x50]
c0005793:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005797:	89 fa                	mov    edx,edi
c0005799:	e8 42 c5 ff ff       	call   c0001ce0 <mem_cpy>
c000579e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057a6:	c1 e6 09             	shl    esi,0x9
c00057a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057ad:	31 ff                	xor    edi,edi
c00057af:	01 30                	add    DWORD PTR [eax],esi
c00057b1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bc:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057c2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057c5:	89 c1                	mov    ecx,eax
c00057c7:	39 f2                	cmp    edx,esi
c00057c9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057cc:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057cf:	19 f9                	sbb    ecx,edi
c00057d1:	73 04                	jae    c00057d7 <f_write+0x18a>
c00057d3:	89 f2                	mov    edx,esi
c00057d5:	89 f8                	mov    eax,edi
c00057d7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057e2:	0f 85 cc fe ff ff    	jne    c00056b4 <f_write+0x67>
c00057e8:	eb 2e                	jmp    c0005818 <f_write+0x1cb>
c00057ea:	89 c8                	mov    eax,ecx
c00057ec:	09 d0                	or     eax,edx
c00057ee:	75 0b                	jne    c00057fb <f_write+0x1ae>
c00057f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057f3:	31 d2                	xor    edx,edx
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 28                	jne    c0005821 <f_write+0x1d4>
c00057f9:	eb 12                	jmp    c000580d <f_write+0x1c0>
c00057fb:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ff:	74 09                	je     c000580a <f_write+0x1bd>
c0005801:	89 d8                	mov    eax,ebx
c0005803:	e8 13 c7 ff ff       	call   c0001f1b <clmt_clust>
c0005808:	eb 0a                	jmp    c0005814 <f_write+0x1c7>
c000580a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000580d:	89 d8                	mov    eax,ebx
c000580f:	e8 a1 da ff ff       	call   c00032b5 <create_chain>
c0005814:	85 c0                	test   eax,eax
c0005816:	75 09                	jne    c0005821 <f_write+0x1d4>
c0005818:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000581c:	e9 dc 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005821:	83 f8 01             	cmp    eax,0x1
c0005824:	75 0e                	jne    c0005834 <f_write+0x1e7>
c0005826:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000582a:	bd 02 00 00 00       	mov    ebp,0x2
c000582f:	e9 c9 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005834:	83 f8 ff             	cmp    eax,0xffffffff
c0005837:	75 0e                	jne    c0005847 <f_write+0x1fa>
c0005839:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000583d:	bd 01 00 00 00       	mov    ebp,0x1
c0005842:	e9 b6 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005847:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000584a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000584e:	0f 85 90 fe ff ff    	jne    c00056e4 <f_write+0x97>
c0005854:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005857:	e9 88 fe ff ff       	jmp    c00056e4 <f_write+0x97>
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005862:	6a 01                	push   0x1
c0005864:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005867:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000586a:	50                   	push   eax
c000586b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000586f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005873:	50                   	push   eax
c0005874:	e8 b3 c3 ff ff       	call   c0001c2c <disk_write>
c0005879:	83 c4 20             	add    esp,0x20
c000587c:	85 c0                	test   eax,eax
c000587e:	75 b9                	jne    c0005839 <f_write+0x1ec>
c0005880:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005884:	e9 65 fe ff ff       	jmp    c00056ee <f_write+0xa1>
c0005889:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000588c:	75 05                	jne    c0005893 <f_write+0x246>
c000588e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005891:	74 2e                	je     c00058c1 <f_write+0x274>
c0005893:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005896:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005899:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000589c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000589f:	73 20                	jae    c00058c1 <f_write+0x274>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00058a7:	6a 01                	push   0x1
c00058a9:	57                   	push   edi
c00058aa:	56                   	push   esi
c00058ab:	50                   	push   eax
c00058ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b0:	50                   	push   eax
c00058b1:	e8 60 c3 ff ff       	call   c0001c16 <disk_read>
c00058b6:	83 c4 20             	add    esp,0x20
c00058b9:	85 c0                	test   eax,eax
c00058bb:	0f 85 78 ff ff ff    	jne    c0005839 <f_write+0x1ec>
c00058c1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058c4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ca:	ba 00 02 00 00       	mov    edx,0x200
c00058cf:	25 ff 01 00 00       	and    eax,0x1ff
c00058d4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058d8:	29 c2                	sub    edx,eax
c00058da:	39 d6                	cmp    esi,edx
c00058dc:	76 02                	jbe    c00058e0 <f_write+0x293>
c00058de:	89 d6                	mov    esi,edx
c00058e0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058e4:	89 f1                	mov    ecx,esi
c00058e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058ea:	e8 f1 c3 ff ff       	call   c0001ce0 <mem_cpy>
c00058ef:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058f3:	e9 b1 fe ff ff       	jmp    c00057a9 <f_write+0x15c>
c00058f8:	bd 07 00 00 00       	mov    ebp,0x7
c00058fd:	83 c4 2c             	add    esp,0x2c
c0005900:	89 e8                	mov    eax,ebp
c0005902:	5b                   	pop    ebx
c0005903:	5e                   	pop    esi
c0005904:	5f                   	pop    edi
c0005905:	5d                   	pop    ebp
c0005906:	c3                   	ret    

c0005907 <f_sync>:
c0005907:	56                   	push   esi
c0005908:	53                   	push   ebx
c0005909:	83 ec 64             	sub    esp,0x64
c000590c:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005910:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005914:	89 d8                	mov    eax,ebx
c0005916:	e8 49 ca ff ff       	call   c0002364 <validate>
c000591b:	85 c0                	test   eax,eax
c000591d:	0f 85 ba 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005923:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005926:	f6 c2 40             	test   dl,0x40
c0005929:	0f 84 ae 01 00 00    	je     c0005add <f_sync+0x1d6>
c000592f:	84 d2                	test   dl,dl
c0005931:	79 33                	jns    c0005966 <f_sync+0x5f>
c0005933:	83 ec 0c             	sub    esp,0xc
c0005936:	8d 43 50             	lea    eax,[ebx+0x50]
c0005939:	6a 01                	push   0x1
c000593b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000593e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005941:	50                   	push   eax
c0005942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005946:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000594a:	50                   	push   eax
c000594b:	e8 dc c2 ff ff       	call   c0001c2c <disk_write>
c0005950:	83 c4 20             	add    esp,0x20
c0005953:	89 c2                	mov    edx,eax
c0005955:	b8 01 00 00 00       	mov    eax,0x1
c000595a:	85 d2                	test   edx,edx
c000595c:	0f 85 7b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005962:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596d:	0f 85 11 01 00 00    	jne    c0005a84 <f_sync+0x17d>
c0005973:	89 d8                	mov    eax,ebx
c0005975:	e8 13 d6 ff ff       	call   c0002f8d <fill_first_frag>
c000597a:	85 c0                	test   eax,eax
c000597c:	0f 85 5b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005982:	83 c9 ff             	or     ecx,0xffffffff
c0005985:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005988:	89 d8                	mov    eax,ebx
c000598a:	e8 c9 d5 ff ff       	call   c0002f58 <fill_last_frag>
c000598f:	85 c0                	test   eax,eax
c0005991:	0f 85 46 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005997:	83 ec 0c             	sub    esp,0xc
c000599a:	68 60 04 00 00       	push   0x460
c000599f:	e8 f0 2a 00 00       	call   c0008494 <ff_memalloc>
c00059a4:	83 c4 10             	add    esp,0x10
c00059a7:	89 c6                	mov    esi,eax
c00059a9:	b8 11 00 00 00       	mov    eax,0x11
c00059ae:	85 f6                	test   esi,esi
c00059b0:	0f 84 27 01 00 00    	je     c0005add <f_sync+0x1d6>
c00059b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ba:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059c3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059c6:	89 da                	mov    edx,ebx
c00059c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059cc:	e8 af df ff ff       	call   c0003980 <load_obj_xdir>
c00059d1:	85 c0                	test   eax,eax
c00059d3:	0f 85 95 00 00 00    	jne    c0005a6e <f_sync+0x167>
c00059d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059e4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059e7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059ea:	83 ca 01             	or     edx,0x1
c00059ed:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f6:	83 c0 34             	add    eax,0x34
c00059f9:	e8 d9 c2 ff ff       	call   c0001cd7 <st_dword>
c00059fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a08:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a0b:	83 c0 38             	add    eax,0x38
c0005a0e:	e8 c7 c2 ff ff       	call   c0001cda <st_qword>
c0005a13:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a20:	83 c0 28             	add    eax,0x28
c0005a23:	e8 b2 c2 ff ff       	call   c0001cda <st_qword>
c0005a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a34:	83 c0 0c             	add    eax,0xc
c0005a37:	e8 9b c2 ff ff       	call   c0001cd7 <st_dword>
c0005a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a40:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a43:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a47:	31 d2                	xor    edx,edx
c0005a49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a4c:	83 c0 10             	add    eax,0x10
c0005a4f:	e8 83 c2 ff ff       	call   c0001cd7 <st_dword>
c0005a54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a58:	e8 62 e1 ff ff       	call   c0003bbf <store_xdir>
c0005a5d:	85 c0                	test   eax,eax
c0005a5f:	75 0d                	jne    c0005a6e <f_sync+0x167>
c0005a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a65:	e8 00 eb ff ff       	call   c000456a <sync_fs>
c0005a6a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a72:	83 ec 0c             	sub    esp,0xc
c0005a75:	56                   	push   esi
c0005a76:	e8 2f 2a 00 00       	call   c00084aa <ff_memfree>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a82:	eb 59                	jmp    c0005add <f_sync+0x1d6>
c0005a84:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a87:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a8a:	e8 b0 c9 ff ff       	call   c000243f <move_window>
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 4a                	jne    c0005add <f_sync+0x1d6>
c0005a93:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a96:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a9a:	89 f2                	mov    edx,esi
c0005a9c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa1:	e8 5f f3 ff ff       	call   c0004e05 <st_clust.isra.1>
c0005aa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aa9:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005aac:	e8 26 c2 ff ff       	call   c0001cd7 <st_dword>
c0005ab1:	8d 46 16             	lea    eax,[esi+0x16]
c0005ab4:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ab9:	e8 19 c2 ff ff       	call   c0001cd7 <st_dword>
c0005abe:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac1:	31 d2                	xor    edx,edx
c0005ac3:	e8 0b c2 ff ff       	call   c0001cd3 <st_word>
c0005ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005acc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	e8 91 ea ff ff       	call   c000456a <sync_fs>
c0005ad9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005add:	83 c4 64             	add    esp,0x64
c0005ae0:	5b                   	pop    ebx
c0005ae1:	5e                   	pop    esi
c0005ae2:	c3                   	ret    

c0005ae3 <f_close>:
c0005ae3:	53                   	push   ebx
c0005ae4:	83 ec 24             	sub    esp,0x24
c0005ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005aeb:	53                   	push   ebx
c0005aec:	e8 16 fe ff ff       	call   c0005907 <f_sync>
c0005af1:	83 c4 10             	add    esp,0x10
c0005af4:	85 c0                	test   eax,eax
c0005af6:	75 15                	jne    c0005b0d <f_close+0x2a>
c0005af8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005afc:	89 d8                	mov    eax,ebx
c0005afe:	e8 61 c8 ff ff       	call   c0002364 <validate>
c0005b03:	85 c0                	test   eax,eax
c0005b05:	75 06                	jne    c0005b0d <f_close+0x2a>
c0005b07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b0d:	83 c4 18             	add    esp,0x18
c0005b10:	5b                   	pop    ebx
c0005b11:	c3                   	ret    

c0005b12 <f_lseek>:
c0005b12:	55                   	push   ebp
c0005b13:	57                   	push   edi
c0005b14:	56                   	push   esi
c0005b15:	53                   	push   ebx
c0005b16:	83 ec 3c             	sub    esp,0x3c
c0005b19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b1d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b21:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b28:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b2c:	89 d8                	mov    eax,ebx
c0005b2e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b32:	e8 2d c8 ff ff       	call   c0002364 <validate>
c0005b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	0f 85 7a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b43:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	0f 85 6a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b57:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b5a:	74 0c                	je     c0005b68 <f_lseek+0x56>
c0005b5c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	75 1f                	jne    c0005b82 <f_lseek+0x70>
c0005b63:	e9 b5 01 00 00       	jmp    c0005d1d <f_lseek+0x20b>
c0005b68:	83 c9 ff             	or     ecx,0xffffffff
c0005b6b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b6e:	89 d8                	mov    eax,ebx
c0005b70:	e8 e3 d3 ff ff       	call   c0002f58 <fill_last_frag>
c0005b75:	85 c0                	test   eax,eax
c0005b77:	74 e3                	je     c0005b5c <f_lseek+0x4a>
c0005b79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b7d:	e9 3b 04 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005b82:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b87:	0f 85 ac 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b8d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b91:	0f 85 a2 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b97:	8d 78 04             	lea    edi,[eax+0x4]
c0005b9a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b9f:	be 02 00 00 00       	mov    esi,0x2
c0005ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba8:	85 ed                	test   ebp,ebp
c0005baa:	74 73                	je     c0005c1f <f_lseek+0x10d>
c0005bac:	89 e9                	mov    ecx,ebp
c0005bae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bb5:	ff 04 24             	inc    DWORD PTR [esp]
c0005bb8:	89 ca                	mov    edx,ecx
c0005bba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 02 d4 ff ff       	call   c0002fc7 <get_fat>
c0005bc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bc9:	83 f8 01             	cmp    eax,0x1
c0005bcc:	77 11                	ja     c0005bdf <f_lseek+0xcd>
c0005bce:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bd2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bda:	e9 de 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bdf:	83 f8 ff             	cmp    eax,0xffffffff
c0005be2:	75 11                	jne    c0005bf5 <f_lseek+0xe3>
c0005be4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005be8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf0:	e9 c8 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bf5:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bf8:	89 c1                	mov    ecx,eax
c0005bfa:	39 c2                	cmp    edx,eax
c0005bfc:	74 b7                	je     c0005bb5 <f_lseek+0xa3>
c0005bfe:	83 c6 02             	add    esi,0x2
c0005c01:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c05:	72 0b                	jb     c0005c12 <f_lseek+0x100>
c0005c07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c0a:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c0d:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c0f:	83 c7 08             	add    edi,0x8
c0005c12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c19:	76 04                	jbe    c0005c1f <f_lseek+0x10d>
c0005c1b:	89 c5                	mov    ebp,eax
c0005c1d:	eb 8d                	jmp    c0005bac <f_lseek+0x9a>
c0005c1f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c22:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c26:	89 30                	mov    DWORD PTR [eax],esi
c0005c28:	0f 87 87 03 00 00    	ja     c0005fb5 <f_lseek+0x4a3>
c0005c2e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c34:	e9 84 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005c39:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c3c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c52:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c56:	73 0f                	jae    c0005c67 <f_lseek+0x155>
c0005c58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c72:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c79:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c7d:	0f 84 3a 03 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005c83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c8b:	83 c6 ff             	add    esi,0xffffffff
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	83 d7 ff             	adc    edi,0xffffffff
c0005c93:	89 f2                	mov    edx,esi
c0005c95:	89 f9                	mov    ecx,edi
c0005c97:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c9e:	e8 78 c2 ff ff       	call   c0001f1b <clmt_clust>
c0005ca3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ca7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb0:	89 c8                	mov    eax,ecx
c0005cb2:	e8 43 c2 ff ff       	call   c0001efa <clst2sect>
c0005cb7:	89 d7                	mov    edi,edx
c0005cb9:	09 c7                	or     edi,eax
c0005cbb:	0f 84 0d ff ff ff    	je     c0005bce <f_lseek+0xbc>
c0005cc1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cc5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ccb:	0f 84 ec 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cd1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cd9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cdc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ce4:	4d                   	dec    ebp
c0005ce5:	31 ff                	xor    edi,edi
c0005ce7:	21 ee                	and    esi,ebp
c0005ce9:	01 c6                	add    esi,eax
c0005ceb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cee:	11 d7                	adc    edi,edx
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	39 fa                	cmp    edx,edi
c0005cf5:	75 08                	jne    c0005cff <f_lseek+0x1ed>
c0005cf7:	39 f0                	cmp    eax,esi
c0005cf9:	0f 84 be 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cff:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d02:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d06:	0f 89 80 02 00 00    	jns    c0005f8c <f_lseek+0x47a>
c0005d0c:	83 ec 0c             	sub    esp,0xc
c0005d0f:	6a 01                	push   0x1
c0005d11:	52                   	push   edx
c0005d12:	50                   	push   eax
c0005d13:	55                   	push   ebp
c0005d14:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d18:	e9 5a 02 00 00       	jmp    c0005f77 <f_lseek+0x465>
c0005d1d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d21:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d24:	74 16                	je     c0005d3c <f_lseek+0x22a>
c0005d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d2b:	76 0f                	jbe    c0005d3c <f_lseek+0x22a>
c0005d2d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d34:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d42:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d45:	89 c7                	mov    edi,eax
c0005d47:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d4b:	73 0d                	jae    c0005d5a <f_lseek+0x248>
c0005d4d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d51:	75 07                	jne    c0005d5a <f_lseek+0x248>
c0005d53:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d5a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d5d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d60:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d64:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d6b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d72:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d75:	75 09                	jne    c0005d80 <f_lseek+0x26e>
c0005d77:	31 f6                	xor    esi,esi
c0005d79:	31 ff                	xor    edi,edi
c0005d7b:	e9 af 01 00 00       	jmp    c0005f2f <f_lseek+0x41d>
c0005d80:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d84:	89 d7                	mov    edi,edx
c0005d86:	c1 e1 09             	shl    ecx,0x9
c0005d89:	09 c7                	or     edi,eax
c0005d8b:	89 cd                	mov    ebp,ecx
c0005d8d:	74 6d                	je     c0005dfc <f_lseek+0x2ea>
c0005d8f:	83 c0 ff             	add    eax,0xffffffff
c0005d92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d96:	83 d2 ff             	adc    edx,0xffffffff
c0005d99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da0:	83 c0 ff             	add    eax,0xffffffff
c0005da3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005da7:	83 d2 ff             	adc    edx,0xffffffff
c0005daa:	31 ff                	xor    edi,edi
c0005dac:	57                   	push   edi
c0005dad:	51                   	push   ecx
c0005dae:	52                   	push   edx
c0005daf:	50                   	push   eax
c0005db0:	e8 f7 0a 02 00       	call   c00268ac <__udivdi3>
c0005db5:	83 c4 10             	add    esp,0x10
c0005db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc0:	57                   	push   edi
c0005dc1:	55                   	push   ebp
c0005dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dca:	e8 dd 0a 02 00       	call   c00268ac <__udivdi3>
c0005dcf:	83 c4 10             	add    esp,0x10
c0005dd2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dda:	19 d1                	sbb    ecx,edx
c0005ddc:	72 1e                	jb     c0005dfc <f_lseek+0x2ea>
c0005dde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005de2:	89 e9                	mov    ecx,ebp
c0005de4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005de7:	f7 d9                	neg    ecx
c0005de9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dec:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005df3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005df6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dfa:	eb 28                	jmp    c0005e24 <f_lseek+0x312>
c0005dfc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dff:	85 c0                	test   eax,eax
c0005e01:	75 1e                	jne    c0005e21 <f_lseek+0x30f>
c0005e03:	31 d2                	xor    edx,edx
c0005e05:	89 d8                	mov    eax,ebx
c0005e07:	e8 a9 d4 ff ff       	call   c00032b5 <create_chain>
c0005e0c:	83 f8 01             	cmp    eax,0x1
c0005e0f:	0f 84 b9 fd ff ff    	je     c0005bce <f_lseek+0xbc>
c0005e15:	83 f8 ff             	cmp    eax,0xffffffff
c0005e18:	0f 84 c6 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005e1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e21:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 84 4b ff ff ff    	je     c0005d77 <f_lseek+0x265>
c0005e2c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e38:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e3f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e42:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e45:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e49:	0f 83 9d 00 00 00    	jae    c0005eec <f_lseek+0x3da>
c0005e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e57:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e5a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e5e:	01 f2                	add    edx,esi
c0005e60:	11 f9                	adc    ecx,edi
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e6a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e6d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e70:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e73:	f6 c1 02             	test   cl,0x2
c0005e76:	74 35                	je     c0005ead <f_lseek+0x39b>
c0005e78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e7c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e7f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e82:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e86:	73 16                	jae    c0005e9e <f_lseek+0x38c>
c0005e88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e8c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e90:	88 ca                	mov    dl,cl
c0005e92:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e95:	83 ca 40             	or     edx,0x40
c0005e98:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e9b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e9e:	89 c2                	mov    edx,eax
c0005ea0:	89 d8                	mov    eax,ebx
c0005ea2:	e8 0e d4 ff ff       	call   c00032b5 <create_chain>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	75 0b                	jne    c0005eb6 <f_lseek+0x3a4>
c0005eab:	eb 30                	jmp    c0005edd <f_lseek+0x3cb>
c0005ead:	89 c2                	mov    edx,eax
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 11 d1 ff ff       	call   c0002fc7 <get_fat>
c0005eb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005eb9:	0f 84 25 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005ebf:	83 f8 01             	cmp    eax,0x1
c0005ec2:	0f 86 06 fd ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ec8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ecc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ecf:	0f 86 f9 fc ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ed5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ed8:	e9 5b ff ff ff       	jmp    c0005e38 <f_lseek+0x326>
c0005edd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ee4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eef:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ef3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ef6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ef9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005efc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f02:	0f 84 6f fe ff ff    	je     c0005d77 <f_lseek+0x265>
c0005f08:	89 c2                	mov    edx,eax
c0005f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f0e:	e8 e7 bf ff ff       	call   c0001efa <clst2sect>
c0005f13:	89 d7                	mov    edi,edx
c0005f15:	09 c7                	or     edi,eax
c0005f17:	0f 84 b1 fc ff ff    	je     c0005bce <f_lseek+0xbc>
c0005f1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f24:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f28:	c1 ef 09             	shr    edi,0x9
c0005f2b:	01 c6                	add    esi,eax
c0005f2d:	11 d7                	adc    edi,edx
c0005f2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f32:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f35:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f38:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f3b:	19 d1                	sbb    ecx,edx
c0005f3d:	73 0a                	jae    c0005f49 <f_lseek+0x437>
c0005f3f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f42:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f45:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f49:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f4e:	74 6d                	je     c0005fbd <f_lseek+0x4ab>
c0005f50:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f56:	39 fa                	cmp    edx,edi
c0005f58:	75 04                	jne    c0005f5e <f_lseek+0x44c>
c0005f5a:	39 f0                	cmp    eax,esi
c0005f5c:	74 5f                	je     c0005fbd <f_lseek+0x4ab>
c0005f5e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f61:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f65:	79 25                	jns    c0005f8c <f_lseek+0x47a>
c0005f67:	83 ec 0c             	sub    esp,0xc
c0005f6a:	6a 01                	push   0x1
c0005f6c:	52                   	push   edx
c0005f6d:	50                   	push   eax
c0005f6e:	55                   	push   ebp
c0005f6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f73:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f77:	50                   	push   eax
c0005f78:	e8 af bc ff ff       	call   c0001c2c <disk_write>
c0005f7d:	83 c4 20             	add    esp,0x20
c0005f80:	85 c0                	test   eax,eax
c0005f82:	0f 85 5c fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005f88:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f8c:	83 ec 0c             	sub    esp,0xc
c0005f8f:	6a 01                	push   0x1
c0005f91:	57                   	push   edi
c0005f92:	56                   	push   esi
c0005f93:	55                   	push   ebp
c0005f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9c:	50                   	push   eax
c0005f9d:	e8 74 bc ff ff       	call   c0001c16 <disk_read>
c0005fa2:	83 c4 20             	add    esp,0x20
c0005fa5:	85 c0                	test   eax,eax
c0005fa7:	0f 85 37 fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005fad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fb3:	eb 08                	jmp    c0005fbd <f_lseek+0x4ab>
c0005fb5:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	83 c4 3c             	add    esp,0x3c
c0005fc4:	5b                   	pop    ebx
c0005fc5:	5e                   	pop    esi
c0005fc6:	5f                   	pop    edi
c0005fc7:	5d                   	pop    ebp
c0005fc8:	c3                   	ret    

c0005fc9 <f_opendir>:
c0005fc9:	56                   	push   esi
c0005fca:	b8 09 00 00 00       	mov    eax,0x9
c0005fcf:	53                   	push   ebx
c0005fd0:	83 ec 24             	sub    esp,0x24
c0005fd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fd7:	85 db                	test   ebx,ebx
c0005fd9:	0f 84 e6 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c0005fdf:	31 c9                	xor    ecx,ecx
c0005fe1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fe5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fe9:	e8 03 c7 ff ff       	call   c00026f1 <mount_volume>
c0005fee:	85 c0                	test   eax,eax
c0005ff0:	0f 85 c9 00 00 00    	jne    c00060bf <f_opendir+0xf6>
c0005ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ffa:	83 ec 0c             	sub    esp,0xc
c0005ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0005fff:	68 60 04 00 00       	push   0x460
c0006004:	e8 8b 24 00 00       	call   c0008494 <ff_memalloc>
c0006009:	83 c4 10             	add    esp,0x10
c000600c:	89 c6                	mov    esi,eax
c000600e:	b8 11 00 00 00       	mov    eax,0x11
c0006013:	85 f6                	test   esi,esi
c0006015:	0f 84 aa 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c000601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006025:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006028:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000602b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000602f:	89 d8                	mov    eax,ebx
c0006031:	e8 31 ee ff ff       	call   c0004e67 <follow_path>
c0006036:	85 c0                	test   eax,eax
c0006038:	75 61                	jne    c000609b <f_opendir+0xd2>
c000603a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000603e:	78 46                	js     c0006086 <f_opendir+0xbd>
c0006040:	b8 05 00 00 00       	mov    eax,0x5
c0006045:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006049:	74 50                	je     c000609b <f_opendir+0xd2>
c000604b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000604f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006051:	3c 04                	cmp    al,0x4
c0006053:	75 26                	jne    c000607b <f_opendir+0xb2>
c0006055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000605b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000605e:	30 d2                	xor    dl,dl
c0006060:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006064:	09 c2                	or     edx,eax
c0006066:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006069:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000606c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000606f:	89 da                	mov    edx,ebx
c0006071:	8d 41 10             	lea    eax,[ecx+0x10]
c0006074:	e8 b4 ed ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0006079:	eb 0b                	jmp    c0006086 <f_opendir+0xbd>
c000607b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000607e:	e8 59 ed ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006083:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000608a:	31 d2                	xor    edx,edx
c000608c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006090:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006094:	89 d8                	mov    eax,ebx
c0006096:	e8 22 d1 ff ff       	call   c00031bd <dir_sdi>
c000609b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000609f:	83 ec 0c             	sub    esp,0xc
c00060a2:	56                   	push   esi
c00060a3:	e8 02 24 00 00       	call   c00084aa <ff_memfree>
c00060a8:	83 c4 10             	add    esp,0x10
c00060ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060af:	83 f8 04             	cmp    eax,0x4
c00060b2:	74 06                	je     c00060ba <f_opendir+0xf1>
c00060b4:	85 c0                	test   eax,eax
c00060b6:	74 0d                	je     c00060c5 <f_opendir+0xfc>
c00060b8:	eb 05                	jmp    c00060bf <f_opendir+0xf6>
c00060ba:	b8 05 00 00 00       	mov    eax,0x5
c00060bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c5:	83 c4 24             	add    esp,0x24
c00060c8:	5b                   	pop    ebx
c00060c9:	5e                   	pop    esi
c00060ca:	c3                   	ret    

c00060cb <f_closedir>:
c00060cb:	53                   	push   ebx
c00060cc:	83 ec 18             	sub    esp,0x18
c00060cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d7:	89 d8                	mov    eax,ebx
c00060d9:	e8 86 c2 ff ff       	call   c0002364 <validate>
c00060de:	85 c0                	test   eax,eax
c00060e0:	75 06                	jne    c00060e8 <f_closedir+0x1d>
c00060e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e8:	83 c4 18             	add    esp,0x18
c00060eb:	5b                   	pop    ebx
c00060ec:	c3                   	ret    

c00060ed <f_readdir>:
c00060ed:	57                   	push   edi
c00060ee:	56                   	push   esi
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 20             	sub    esp,0x20
c00060f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ff:	89 d8                	mov    eax,ebx
c0006101:	e8 5e c2 ff ff       	call   c0002364 <validate>
c0006106:	85 c0                	test   eax,eax
c0006108:	75 77                	jne    c0006181 <f_readdir+0x94>
c000610a:	85 ff                	test   edi,edi
c000610c:	75 0b                	jne    c0006119 <f_readdir+0x2c>
c000610e:	31 d2                	xor    edx,edx
c0006110:	89 d8                	mov    eax,ebx
c0006112:	e8 a6 d0 ff ff       	call   c00031bd <dir_sdi>
c0006117:	eb 68                	jmp    c0006181 <f_readdir+0x94>
c0006119:	83 ec 0c             	sub    esp,0xc
c000611c:	68 60 04 00 00       	push   0x460
c0006121:	e8 6e 23 00 00       	call   c0008494 <ff_memalloc>
c0006126:	83 c4 10             	add    esp,0x10
c0006129:	89 c6                	mov    esi,eax
c000612b:	b8 11 00 00 00       	mov    eax,0x11
c0006130:	85 f6                	test   esi,esi
c0006132:	74 4d                	je     c0006181 <f_readdir+0x94>
c0006134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006138:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000613e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006141:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006144:	31 d2                	xor    edx,edx
c0006146:	89 d8                	mov    eax,ebx
c0006148:	e8 80 d8 ff ff       	call   c00039cd <dir_read>
c000614d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006152:	75 19                	jne    c000616d <f_readdir+0x80>
c0006154:	89 fa                	mov    edx,edi
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e ea ff ff       	call   c0004bdb <get_fileinfo>
c000615d:	31 d2                	xor    edx,edx
c000615f:	89 d8                	mov    eax,ebx
c0006161:	e8 af d5 ff ff       	call   c0003715 <dir_next>
c0006166:	83 f8 04             	cmp    eax,0x4
c0006169:	75 02                	jne    c000616d <f_readdir+0x80>
c000616b:	31 c0                	xor    eax,eax
c000616d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006171:	83 ec 0c             	sub    esp,0xc
c0006174:	56                   	push   esi
c0006175:	e8 30 23 00 00       	call   c00084aa <ff_memfree>
c000617a:	83 c4 10             	add    esp,0x10
c000617d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006181:	83 c4 20             	add    esp,0x20
c0006184:	5b                   	pop    ebx
c0006185:	5e                   	pop    esi
c0006186:	5f                   	pop    edi
c0006187:	c3                   	ret    

c0006188 <f_stat>:
c0006188:	57                   	push   edi
c0006189:	31 c9                	xor    ecx,ecx
c000618b:	56                   	push   esi
c000618c:	53                   	push   ebx
c000618d:	83 ec 50             	sub    esp,0x50
c0006190:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006194:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006198:	8d 44 24 60          	lea    eax,[esp+0x60]
c000619c:	e8 50 c5 ff ff       	call   c00026f1 <mount_volume>
c00061a1:	89 c3                	mov    ebx,eax
c00061a3:	85 c0                	test   eax,eax
c00061a5:	75 67                	jne    c000620e <f_stat+0x86>
c00061a7:	83 ec 0c             	sub    esp,0xc
c00061aa:	bb 11 00 00 00       	mov    ebx,0x11
c00061af:	68 60 04 00 00       	push   0x460
c00061b4:	e8 db 22 00 00       	call   c0008494 <ff_memalloc>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	89 c6                	mov    esi,eax
c00061be:	85 c0                	test   eax,eax
c00061c0:	74 4c                	je     c000620e <f_stat+0x86>
c00061c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061c6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061cc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061d2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061d6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061da:	e8 88 ec ff ff       	call   c0004e67 <follow_path>
c00061df:	89 c3                	mov    ebx,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	75 1d                	jne    c0006202 <f_stat+0x7a>
c00061e5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061ea:	78 11                	js     c00061fd <f_stat+0x75>
c00061ec:	85 ff                	test   edi,edi
c00061ee:	74 12                	je     c0006202 <f_stat+0x7a>
c00061f0:	89 fa                	mov    edx,edi
c00061f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061f6:	e8 e0 e9 ff ff       	call   c0004bdb <get_fileinfo>
c00061fb:	eb 05                	jmp    c0006202 <f_stat+0x7a>
c00061fd:	bb 06 00 00 00       	mov    ebx,0x6
c0006202:	83 ec 0c             	sub    esp,0xc
c0006205:	56                   	push   esi
c0006206:	e8 9f 22 00 00       	call   c00084aa <ff_memfree>
c000620b:	83 c4 10             	add    esp,0x10
c000620e:	83 c4 50             	add    esp,0x50
c0006211:	89 d8                	mov    eax,ebx
c0006213:	5b                   	pop    ebx
c0006214:	5e                   	pop    esi
c0006215:	5f                   	pop    edi
c0006216:	c3                   	ret    

c0006217 <f_getfree>:
c0006217:	55                   	push   ebp
c0006218:	31 c9                	xor    ecx,ecx
c000621a:	57                   	push   edi
c000621b:	56                   	push   esi
c000621c:	53                   	push   ebx
c000621d:	83 ec 5c             	sub    esp,0x5c
c0006220:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006224:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006228:	e8 c4 c4 ff ff       	call   c00026f1 <mount_volume>
c000622d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 9d 01 00 00    	jne    c00063d6 <f_getfree+0x1bf>
c0006239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006241:	89 02                	mov    DWORD PTR [edx],eax
c0006243:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006246:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006249:	8d 71 fe             	lea    esi,[ecx-0x2]
c000624c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006250:	39 f2                	cmp    edx,esi
c0006252:	77 0b                	ja     c000625f <f_getfree+0x48>
c0006254:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006258:	89 10                	mov    DWORD PTR [eax],edx
c000625a:	e9 77 01 00 00       	jmp    c00063d6 <f_getfree+0x1bf>
c000625f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006261:	80 fa 01             	cmp    dl,0x1
c0006264:	75 3a                	jne    c00062a0 <f_getfree+0x89>
c0006266:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000626a:	be 02 00 00 00       	mov    esi,0x2
c000626f:	31 db                	xor    ebx,ebx
c0006271:	89 f2                	mov    edx,esi
c0006273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006277:	e8 4b cd ff ff       	call   c0002fc7 <get_fat>
c000627c:	83 f8 ff             	cmp    eax,0xffffffff
c000627f:	0f 84 28 01 00 00    	je     c00063ad <f_getfree+0x196>
c0006285:	83 f8 01             	cmp    eax,0x1
c0006288:	0f 84 29 01 00 00    	je     c00063b7 <f_getfree+0x1a0>
c000628e:	83 d3 00             	adc    ebx,0x0
c0006291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006295:	46                   	inc    esi
c0006296:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006299:	77 d6                	ja     c0006271 <f_getfree+0x5a>
c000629b:	e9 25 01 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c00062a0:	80 fa 04             	cmp    dl,0x4
c00062a3:	0f 85 88 00 00 00    	jne    c0006331 <f_getfree+0x11a>
c00062a9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062ac:	31 ed                	xor    ebp,ebp
c00062ae:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	85 ed                	test   ebp,ebp
c00062bd:	75 3f                	jne    c00062fe <f_getfree+0xe7>
c00062bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062c7:	83 c0 01             	add    eax,0x1
c00062ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062ce:	83 d2 00             	adc    edx,0x0
c00062d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e1:	e8 59 c1 ff ff       	call   c000243f <move_window>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 d3 00 00 00    	jne    c00063c1 <f_getfree+0x1aa>
c00062ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006302:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006305:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006309:	89 cf                	mov    edi,ecx
c000630b:	85 f6                	test   esi,esi
c000630d:	74 12                	je     c0006321 <f_getfree+0x10a>
c000630f:	88 c1                	mov    cl,al
c0006311:	83 e1 01             	and    ecx,0x1
c0006314:	80 f9 01             	cmp    cl,0x1
c0006317:	83 d3 00             	adc    ebx,0x0
c000631a:	d0 e8                	shr    al,1
c000631c:	4e                   	dec    esi
c000631d:	39 fe                	cmp    esi,edi
c000631f:	75 ea                	jne    c000630b <f_getfree+0xf4>
c0006321:	45                   	inc    ebp
c0006322:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006328:	85 f6                	test   esi,esi
c000632a:	75 8f                	jne    c00062bb <f_getfree+0xa4>
c000632c:	e9 94 00 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c0006331:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006334:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006337:	31 f6                	xor    esi,esi
c0006339:	31 db                	xor    ebx,ebx
c000633b:	85 f6                	test   esi,esi
c000633d:	75 1b                	jne    c000635a <f_getfree+0x143>
c000633f:	89 d7                	mov    edi,edx
c0006341:	89 cd                	mov    ebp,ecx
c0006343:	83 c7 01             	add    edi,0x1
c0006346:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634a:	83 d5 00             	adc    ebp,0x0
c000634d:	e8 ed c0 ff ff       	call   c000243f <move_window>
c0006352:	85 c0                	test   eax,eax
c0006354:	75 6b                	jne    c00063c1 <f_getfree+0x1aa>
c0006356:	89 fa                	mov    edx,edi
c0006358:	89 e9                	mov    ecx,ebp
c000635a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000635e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006362:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006366:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006369:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000636d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006371:	75 11                	jne    c0006384 <f_getfree+0x16d>
c0006373:	e8 e9 b8 ff ff       	call   c0001c61 <ld_word>
c0006378:	66 83 f8 01          	cmp    ax,0x1
c000637c:	83 d3 00             	adc    ebx,0x0
c000637f:	83 c6 02             	add    esi,0x2
c0006382:	eb 13                	jmp    c0006397 <f_getfree+0x180>
c0006384:	e8 e5 b8 ff ff       	call   c0001c6e <ld_dword>
c0006389:	25 ff ff ff 0f       	and    eax,0xfffffff
c000638e:	83 f8 01             	cmp    eax,0x1
c0006391:	83 d3 00             	adc    ebx,0x0
c0006394:	83 c6 04             	add    esi,0x4
c0006397:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000639d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063a5:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063a9:	75 90                	jne    c000633b <f_getfree+0x124>
c00063ab:	eb 18                	jmp    c00063c5 <f_getfree+0x1ae>
c00063ad:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063b5:	eb 0e                	jmp    c00063c5 <f_getfree+0x1ae>
c00063b7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063bf:	eb 04                	jmp    c00063c5 <f_getfree+0x1ae>
c00063c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063c9:	89 18                	mov    DWORD PTR [eax],ebx
c00063cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063cf:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063d2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063da:	83 c4 5c             	add    esp,0x5c
c00063dd:	5b                   	pop    ebx
c00063de:	5e                   	pop    esi
c00063df:	5f                   	pop    edi
c00063e0:	5d                   	pop    ebp
c00063e1:	c3                   	ret    

c00063e2 <f_truncate>:
c00063e2:	56                   	push   esi
c00063e3:	53                   	push   ebx
c00063e4:	83 ec 14             	sub    esp,0x14
c00063e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063ef:	89 d8                	mov    eax,ebx
c00063f1:	e8 6e bf ff ff       	call   c0002364 <validate>
c00063f6:	89 c6                	mov    esi,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	0f 85 d2 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c0006400:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006404:	85 f6                	test   esi,esi
c0006406:	0f 85 c6 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c000640c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006410:	0f 84 b7 00 00 00    	je     c00064cd <f_truncate+0xeb>
c0006416:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006419:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000641c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000641f:	89 d1                	mov    ecx,edx
c0006421:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006424:	0f 83 a8 00 00 00    	jae    c00064d2 <f_truncate+0xf0>
c000642a:	09 c2                	or     edx,eax
c000642c:	75 15                	jne    c0006443 <f_truncate+0x61>
c000642e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006431:	31 c9                	xor    ecx,ecx
c0006433:	89 d8                	mov    eax,ebx
c0006435:	e8 7a d0 ff ff       	call   c00034b4 <remove_chain>
c000643a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006441:	eb 35                	jmp    c0006478 <f_truncate+0x96>
c0006443:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006446:	89 d8                	mov    eax,ebx
c0006448:	e8 7a cb ff ff       	call   c0002fc7 <get_fat>
c000644d:	89 c2                	mov    edx,eax
c000644f:	b8 01 00 00 00       	mov    eax,0x1
c0006454:	83 fa ff             	cmp    edx,0xffffffff
c0006457:	74 1f                	je     c0006478 <f_truncate+0x96>
c0006459:	b8 02 00 00 00       	mov    eax,0x2
c000645e:	83 fa 01             	cmp    edx,0x1
c0006461:	74 15                	je     c0006478 <f_truncate+0x96>
c0006463:	31 c0                	xor    eax,eax
c0006465:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006469:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000646c:	76 0a                	jbe    c0006478 <f_truncate+0x96>
c000646e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006471:	89 d8                	mov    eax,ebx
c0006473:	e8 3c d0 ff ff       	call   c00034b4 <remove_chain>
c0006478:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000647b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000647e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006481:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006484:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006487:	83 ca 40             	or     edx,0x40
c000648a:	85 c0                	test   eax,eax
c000648c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000648f:	75 35                	jne    c00064c6 <f_truncate+0xe4>
c0006491:	84 d2                	test   dl,dl
c0006493:	79 3d                	jns    c00064d2 <f_truncate+0xf0>
c0006495:	83 ec 0c             	sub    esp,0xc
c0006498:	8d 43 50             	lea    eax,[ebx+0x50]
c000649b:	6a 01                	push   0x1
c000649d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064a3:	50                   	push   eax
c00064a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064a8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064ac:	50                   	push   eax
c00064ad:	e8 7a b7 ff ff       	call   c0001c2c <disk_write>
c00064b2:	83 c4 20             	add    esp,0x20
c00064b5:	85 c0                	test   eax,eax
c00064b7:	75 08                	jne    c00064c1 <f_truncate+0xdf>
c00064b9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064bd:	31 f6                	xor    esi,esi
c00064bf:	eb 11                	jmp    c00064d2 <f_truncate+0xf0>
c00064c1:	b8 01 00 00 00       	mov    eax,0x1
c00064c6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064c9:	89 c6                	mov    esi,eax
c00064cb:	eb 05                	jmp    c00064d2 <f_truncate+0xf0>
c00064cd:	be 07 00 00 00       	mov    esi,0x7
c00064d2:	89 f0                	mov    eax,esi
c00064d4:	83 c4 14             	add    esp,0x14
c00064d7:	5b                   	pop    ebx
c00064d8:	5e                   	pop    esi
c00064d9:	c3                   	ret    

c00064da <f_unlink>:
c00064da:	56                   	push   esi
c00064db:	b9 02 00 00 00       	mov    ecx,0x2
c00064e0:	53                   	push   ebx
c00064e1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064eb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064f2:	e8 fa c1 ff ff       	call   c00026f1 <mount_volume>
c00064f7:	85 c0                	test   eax,eax
c00064f9:	0f 85 55 01 00 00    	jne    c0006654 <f_unlink+0x17a>
c00064ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006503:	83 ec 0c             	sub    esp,0xc
c0006506:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000650a:	68 60 04 00 00       	push   0x460
c000650f:	e8 80 1f 00 00       	call   c0008494 <ff_memalloc>
c0006514:	83 c4 10             	add    esp,0x10
c0006517:	89 c3                	mov    ebx,eax
c0006519:	b8 11 00 00 00       	mov    eax,0x11
c000651e:	85 db                	test   ebx,ebx
c0006520:	0f 84 2e 01 00 00    	je     c0006654 <f_unlink+0x17a>
c0006526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006530:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006533:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006536:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000653d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006541:	e8 21 e9 ff ff       	call   c0004e67 <follow_path>
c0006546:	85 c0                	test   eax,eax
c0006548:	0f 85 f2 00 00 00    	jne    c0006640 <f_unlink+0x166>
c000654e:	b8 06 00 00 00       	mov    eax,0x6
c0006553:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000655b:	0f 88 df 00 00 00    	js     c0006640 <f_unlink+0x166>
c0006561:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006566:	74 0a                	je     c0006572 <f_unlink+0x98>
c0006568:	b8 07 00 00 00       	mov    eax,0x7
c000656d:	e9 ce 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c0006572:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006576:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000657a:	8a 02                	mov    al,BYTE PTR [edx]
c000657c:	3c 04                	cmp    al,0x4
c000657e:	75 12                	jne    c0006592 <f_unlink+0xb8>
c0006580:	8d 42 10             	lea    eax,[edx+0x10]
c0006583:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006587:	e8 a1 e8 ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c000658c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006590:	eb 0e                	jmp    c00065a0 <f_unlink+0xc6>
c0006592:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006599:	e8 3e e8 ff ff       	call   c0004ddc <ld_clust.isra.0>
c000659e:	89 c6                	mov    esi,eax
c00065a0:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065a5:	75 12                	jne    c00065b9 <f_unlink+0xdf>
c00065a7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065ab:	e8 94 d6 ff ff       	call   c0003c44 <dir_remove>
c00065b0:	85 c0                	test   eax,eax
c00065b2:	74 6c                	je     c0006620 <f_unlink+0x146>
c00065b4:	e9 87 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c00065b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065bd:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065c4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ce:	75 21                	jne    c00065f1 <f_unlink+0x117>
c00065d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065d8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065df:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065e6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065ea:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f1:	31 d2                	xor    edx,edx
c00065f3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065fa:	e8 be cb ff ff       	call   c00031bd <dir_sdi>
c00065ff:	85 c0                	test   eax,eax
c0006601:	75 3d                	jne    c0006640 <f_unlink+0x166>
c0006603:	31 d2                	xor    edx,edx
c0006605:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000660c:	e8 bc d3 ff ff       	call   c00039cd <dir_read>
c0006611:	85 c0                	test   eax,eax
c0006613:	0f 84 4f ff ff ff    	je     c0006568 <f_unlink+0x8e>
c0006619:	83 f8 04             	cmp    eax,0x4
c000661c:	75 22                	jne    c0006640 <f_unlink+0x166>
c000661e:	eb 87                	jmp    c00065a7 <f_unlink+0xcd>
c0006620:	85 f6                	test   esi,esi
c0006622:	75 0b                	jne    c000662f <f_unlink+0x155>
c0006624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006628:	e8 3d df ff ff       	call   c000456a <sync_fs>
c000662d:	eb 11                	jmp    c0006640 <f_unlink+0x166>
c000662f:	31 c9                	xor    ecx,ecx
c0006631:	89 f2                	mov    edx,esi
c0006633:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006637:	e8 78 ce ff ff       	call   c00034b4 <remove_chain>
c000663c:	85 c0                	test   eax,eax
c000663e:	74 e4                	je     c0006624 <f_unlink+0x14a>
c0006640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006644:	83 ec 0c             	sub    esp,0xc
c0006647:	53                   	push   ebx
c0006648:	e8 5d 1e 00 00       	call   c00084aa <ff_memfree>
c000664d:	83 c4 10             	add    esp,0x10
c0006650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006654:	81 c4 e4 00 00 00    	add    esp,0xe4
c000665a:	5b                   	pop    ebx
c000665b:	5e                   	pop    esi
c000665c:	c3                   	ret    

c000665d <f_mkdir>:
c000665d:	57                   	push   edi
c000665e:	b9 02 00 00 00       	mov    ecx,0x2
c0006663:	56                   	push   esi
c0006664:	53                   	push   ebx
c0006665:	83 c4 80             	add    esp,0xffffff80
c0006668:	8d 54 24 08          	lea    edx,[esp+0x8]
c000666c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006673:	e8 79 c0 ff ff       	call   c00026f1 <mount_volume>
c0006678:	89 c3                	mov    ebx,eax
c000667a:	85 c0                	test   eax,eax
c000667c:	0f 85 fe 01 00 00    	jne    c0006880 <f_mkdir+0x223>
c0006682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006686:	bb 11 00 00 00       	mov    ebx,0x11
c000668b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000668f:	83 ec 0c             	sub    esp,0xc
c0006692:	68 60 04 00 00       	push   0x460
c0006697:	e8 f8 1d 00 00       	call   c0008494 <ff_memalloc>
c000669c:	83 c4 10             	add    esp,0x10
c000669f:	89 c7                	mov    edi,eax
c00066a1:	85 c0                	test   eax,eax
c00066a3:	0f 84 d7 01 00 00    	je     c0006880 <f_mkdir+0x223>
c00066a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ad:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066b3:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066b9:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066c4:	e8 9e e7 ff ff       	call   c0004e67 <follow_path>
c00066c9:	89 c3                	mov    ebx,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 3e                	je     c000670d <f_mkdir+0xb0>
c00066cf:	83 f8 04             	cmp    eax,0x4
c00066d2:	75 3e                	jne    c0006712 <f_mkdir+0xb5>
c00066d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d8:	31 d2                	xor    edx,edx
c00066da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e2:	e8 ce cb ff ff       	call   c00032b5 <create_chain>
c00066e7:	89 c6                	mov    esi,eax
c00066e9:	85 c0                	test   eax,eax
c00066eb:	74 0c                	je     c00066f9 <f_mkdir+0x9c>
c00066ed:	bb 02 00 00 00       	mov    ebx,0x2
c00066f2:	83 f8 01             	cmp    eax,0x1
c00066f5:	74 07                	je     c00066fe <f_mkdir+0xa1>
c00066f7:	eb 2a                	jmp    c0006723 <f_mkdir+0xc6>
c00066f9:	bb 07 00 00 00       	mov    ebx,0x7
c00066fe:	31 c9                	xor    ecx,ecx
c0006700:	89 f2                	mov    edx,esi
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 a9 cd ff ff       	call   c00034b4 <remove_chain>
c000670b:	eb 05                	jmp    c0006712 <f_mkdir+0xb5>
c000670d:	bb 08 00 00 00       	mov    ebx,0x8
c0006712:	83 ec 0c             	sub    esp,0xc
c0006715:	57                   	push   edi
c0006716:	e8 8f 1d 00 00       	call   c00084aa <ff_memfree>
c000671b:	83 c4 10             	add    esp,0x10
c000671e:	e9 5d 01 00 00       	jmp    c0006880 <f_mkdir+0x223>
c0006723:	bb 01 00 00 00       	mov    ebx,0x1
c0006728:	83 f8 ff             	cmp    eax,0xffffffff
c000672b:	74 d1                	je     c00066fe <f_mkdir+0xa1>
c000672d:	89 f2                	mov    edx,esi
c000672f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006733:	e8 c4 ce ff ff       	call   c00035fc <dir_clear>
c0006738:	89 c3                	mov    ebx,eax
c000673a:	85 c0                	test   eax,eax
c000673c:	75 c0                	jne    c00066fe <f_mkdir+0xa1>
c000673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006742:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006745:	74 69                	je     c00067b0 <f_mkdir+0x153>
c0006747:	b9 0b 00 00 00       	mov    ecx,0xb
c000674c:	83 c0 54             	add    eax,0x54
c000674f:	ba 20 00 00 00       	mov    edx,0x20
c0006754:	e8 9c b5 ff ff       	call   c0001cf5 <mem_set>
c0006759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006762:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006766:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000676a:	83 c0 6a             	add    eax,0x6a
c000676d:	e8 65 b5 ff ff       	call   c0001cd7 <st_dword>
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	89 f1                	mov    ecx,esi
c0006778:	8d 50 54             	lea    edx,[eax+0x54]
c000677b:	e8 85 e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006784:	b9 20 00 00 00       	mov    ecx,0x20
c0006789:	8d 50 54             	lea    edx,[eax+0x54]
c000678c:	83 c0 74             	add    eax,0x74
c000678f:	e8 4c b5 ff ff       	call   c0001ce0 <mem_cpy>
c0006794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006798:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000679c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a0:	8d 50 74             	lea    edx,[eax+0x74]
c00067a3:	e8 5d e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c00067a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067b4:	e8 2f db ff ff       	call   c00042e8 <dir_register>
c00067b9:	89 c3                	mov    ebx,eax
c00067bb:	85 c0                	test   eax,eax
c00067bd:	0f 85 3b ff ff ff    	jne    c00066fe <f_mkdir+0xa1>
c00067c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ca:	75 74                	jne    c0006840 <f_mkdir+0x1e3>
c00067cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cf:	ba 00 00 21 50       	mov    edx,0x50210000
c00067d4:	83 c0 0c             	add    eax,0xc
c00067d7:	e8 fb b4 ff ff       	call   c0001cd7 <st_dword>
c00067dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e0:	89 f2                	mov    edx,esi
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 34             	add    eax,0x34
c00067e8:	e8 ea b4 ff ff       	call   c0001cd7 <st_dword>
c00067ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f8:	c1 e2 09             	shl    edx,0x9
c00067fb:	83 c0 38             	add    eax,0x38
c00067fe:	e8 d4 b4 ff ff       	call   c0001cd7 <st_dword>
c0006803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006807:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000680b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680e:	c1 e2 09             	shl    edx,0x9
c0006811:	83 c0 28             	add    eax,0x28
c0006814:	e8 be b4 ff ff       	call   c0001cd7 <st_dword>
c0006819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006827:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000682b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000682f:	e8 8b d3 ff ff       	call   c0003bbf <store_xdir>
c0006834:	89 c3                	mov    ebx,eax
c0006836:	85 c0                	test   eax,eax
c0006838:	0f 85 d4 fe ff ff    	jne    c0006712 <f_mkdir+0xb5>
c000683e:	eb 30                	jmp    c0006870 <f_mkdir+0x213>
c0006840:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006844:	ba 00 00 21 50       	mov    edx,0x50210000
c0006849:	83 c0 16             	add    eax,0x16
c000684c:	e8 86 b4 ff ff       	call   c0001cd7 <st_dword>
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	89 f1                	mov    ecx,esi
c0006857:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000685b:	e8 a5 e5 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006860:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006864:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000686c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	e8 f1 dc ff ff       	call   c000456a <sync_fs>
c0006879:	89 c3                	mov    ebx,eax
c000687b:	e9 92 fe ff ff       	jmp    c0006712 <f_mkdir+0xb5>
c0006880:	83 ec 80             	sub    esp,0xffffff80
c0006883:	89 d8                	mov    eax,ebx
c0006885:	5b                   	pop    ebx
c0006886:	5e                   	pop    esi
c0006887:	5f                   	pop    edi
c0006888:	c3                   	ret    

c0006889 <f_rename>:
c0006889:	55                   	push   ebp
c000688a:	57                   	push   edi
c000688b:	56                   	push   esi
c000688c:	53                   	push   ebx
c000688d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006893:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000689a:	e8 a4 b9 ff ff       	call   c0002243 <get_ldnumber>
c000689f:	b9 02 00 00 00       	mov    ecx,0x2
c00068a4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068a8:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068af:	e8 3d be ff ff       	call   c00026f1 <mount_volume>
c00068b4:	85 c0                	test   eax,eax
c00068b6:	0f 85 b5 02 00 00    	jne    c0006b71 <f_rename+0x2e8>
c00068bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c0:	83 ec 0c             	sub    esp,0xc
c00068c3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068c7:	68 60 04 00 00       	push   0x460
c00068cc:	e8 c3 1b 00 00       	call   c0008494 <ff_memalloc>
c00068d1:	83 c4 10             	add    esp,0x10
c00068d4:	89 c3                	mov    ebx,eax
c00068d6:	b8 11 00 00 00       	mov    eax,0x11
c00068db:	85 db                	test   ebx,ebx
c00068dd:	0f 84 8e 02 00 00    	je     c0006b71 <f_rename+0x2e8>
c00068e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ed:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fe:	e8 64 e5 ff ff       	call   c0004e67 <follow_path>
c0006903:	85 c0                	test   eax,eax
c0006905:	0f 85 52 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000690b:	b8 06 00 00 00       	mov    eax,0x6
c0006910:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006918:	0f 85 3f 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006925:	0f 85 05 01 00 00    	jne    c0006a30 <f_rename+0x1a7>
c000692b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000692e:	b9 40 00 00 00       	mov    ecx,0x40
c0006933:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006937:	e8 a4 b3 ff ff       	call   c0001ce0 <mem_cpy>
c000693c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006941:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006945:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694c:	e8 8f b3 ff ff       	call   c0001ce0 <mem_cpy>
c0006951:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 03 e5 ff ff       	call   c0004e67 <follow_path>
c0006964:	85 c0                	test   eax,eax
c0006966:	75 29                	jne    c0006991 <f_rename+0x108>
c0006968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006973:	74 0a                	je     c000697f <f_rename+0xf6>
c0006975:	b8 08 00 00 00       	mov    eax,0x8
c000697a:	e9 de 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c000697f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006986:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698d:	75 e6                	jne    c0006975 <f_rename+0xec>
c000698f:	eb 09                	jmp    c000699a <f_rename+0x111>
c0006991:	83 f8 04             	cmp    eax,0x4
c0006994:	0f 85 c3 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000699a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a1:	e8 42 d9 ff ff       	call   c00042e8 <dir_register>
c00069a6:	85 c0                	test   eax,eax
c00069a8:	0f 85 af 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c00069ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069b5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069b8:	89 c5                	mov    ebp,eax
c00069ba:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c1:	8d 46 24             	lea    eax,[esi+0x24]
c00069c4:	e8 98 b2 ff ff       	call   c0001c61 <ld_word>
c00069c9:	b9 40 00 00 00       	mov    ecx,0x40
c00069ce:	89 c7                	mov    edi,eax
c00069d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069d4:	89 f0                	mov    eax,esi
c00069d6:	e8 05 b3 ff ff       	call   c0001ce0 <mem_cpy>
c00069db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069df:	89 e9                	mov    ecx,ebp
c00069e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069e7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ef:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069f5:	0f b7 d7             	movzx  edx,di
c00069f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fb:	83 c0 24             	add    eax,0x24
c00069fe:	e8 d0 b2 ff ff       	call   c0001cd3 <st_word>
c0006a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a07:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a0a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a0d:	a8 10                	test   al,0x10
c0006a0f:	75 06                	jne    c0006a17 <f_rename+0x18e>
c0006a11:	83 c8 20             	or     eax,0x20
c0006a14:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a17:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1e:	e8 9c d1 ff ff       	call   c0003bbf <store_xdir>
c0006a23:	85 c0                	test   eax,eax
c0006a25:	0f 84 1c 01 00 00    	je     c0006b47 <f_rename+0x2be>
c0006a2b:	e9 2d 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c0006a30:	b9 20 00 00 00       	mov    ecx,0x20
c0006a35:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a40:	e8 9b b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a45:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a4a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a4e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a55:	e8 86 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a5a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 fa e3 ff ff       	call   c0004e67 <follow_path>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	75 27                	jne    c0006a98 <f_rename+0x20f>
c0006a71:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a75:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a7c:	0f 85 f3 fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a89:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a90:	0f 85 df fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a96:	eb 09                	jmp    c0006aa1 <f_rename+0x218>
c0006a98:	83 f8 04             	cmp    eax,0x4
c0006a9b:	0f 85 bc 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006aa1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006aa8:	e8 3b d8 ff ff       	call   c00042e8 <dir_register>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	0f 85 a8 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006ab5:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006abc:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ac4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ac8:	e8 13 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006acd:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad1:	a8 10                	test   al,0x10
c0006ad3:	75 03                	jne    c0006ad8 <f_rename+0x24f>
c0006ad5:	83 c8 20             	or     eax,0x20
c0006ad8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006adf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ae3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ae7:	74 5e                	je     c0006b47 <f_rename+0x2be>
c0006ae9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006af4:	74 51                	je     c0006b47 <f_rename+0x2be>
c0006af6:	89 f2                	mov    edx,esi
c0006af8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006afc:	8a 07                	mov    al,BYTE PTR [edi]
c0006afe:	e8 d9 e2 ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006b03:	89 c2                	mov    edx,eax
c0006b05:	89 f8                	mov    eax,edi
c0006b07:	e8 ee b3 ff ff       	call   c0001efa <clst2sect>
c0006b0c:	89 c6                	mov    esi,eax
c0006b0e:	89 d1                	mov    ecx,edx
c0006b10:	b8 02 00 00 00       	mov    eax,0x2
c0006b15:	09 f2                	or     edx,esi
c0006b17:	74 44                	je     c0006b5d <f_rename+0x2d4>
c0006b19:	89 f2                	mov    edx,esi
c0006b1b:	89 f8                	mov    eax,edi
c0006b1d:	e8 1d b9 ff ff       	call   c000243f <move_window>
c0006b22:	85 c0                	test   eax,eax
c0006b24:	75 37                	jne    c0006b5d <f_rename+0x2d4>
c0006b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b2a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b2e:	75 17                	jne    c0006b47 <f_rename+0x2be>
c0006b30:	8d 50 74             	lea    edx,[eax+0x74]
c0006b33:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b3a:	e8 c6 e2 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b47:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b4b:	e8 f4 d0 ff ff       	call   c0003c44 <dir_remove>
c0006b50:	85 c0                	test   eax,eax
c0006b52:	75 09                	jne    c0006b5d <f_rename+0x2d4>
c0006b54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b58:	e8 0d da ff ff       	call   c000456a <sync_fs>
c0006b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b61:	83 ec 0c             	sub    esp,0xc
c0006b64:	53                   	push   ebx
c0006b65:	e8 40 19 00 00       	call   c00084aa <ff_memfree>
c0006b6a:	83 c4 10             	add    esp,0x10
c0006b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b71:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b77:	5b                   	pop    ebx
c0006b78:	5e                   	pop    esi
c0006b79:	5f                   	pop    edi
c0006b7a:	5d                   	pop    ebp
c0006b7b:	c3                   	ret    

c0006b7c <f_chmod>:
c0006b7c:	57                   	push   edi
c0006b7d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b82:	56                   	push   esi
c0006b83:	53                   	push   ebx
c0006b84:	83 ec 60             	sub    esp,0x60
c0006b87:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b8b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b8f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b93:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b97:	e8 55 bb ff ff       	call   c00026f1 <mount_volume>
c0006b9c:	85 c0                	test   eax,eax
c0006b9e:	0f 85 af 00 00 00    	jne    c0006c53 <f_chmod+0xd7>
c0006ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba8:	83 ec 0c             	sub    esp,0xc
c0006bab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006baf:	68 60 04 00 00       	push   0x460
c0006bb4:	e8 db 18 00 00       	call   c0008494 <ff_memalloc>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	89 c6                	mov    esi,eax
c0006bbe:	b8 11 00 00 00       	mov    eax,0x11
c0006bc3:	85 f6                	test   esi,esi
c0006bc5:	0f 84 88 00 00 00    	je     c0006c53 <f_chmod+0xd7>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bdb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be3:	e8 7f e2 ff ff       	call   c0004e67 <follow_path>
c0006be8:	85 c0                	test   eax,eax
c0006bea:	75 53                	jne    c0006c3f <f_chmod+0xc3>
c0006bec:	b8 06 00 00 00       	mov    eax,0x6
c0006bf1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bf6:	75 47                	jne    c0006c3f <f_chmod+0xc3>
c0006bf8:	89 f9                	mov    ecx,edi
c0006bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfe:	83 e1 27             	and    ecx,0x27
c0006c01:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c04:	75 1d                	jne    c0006c23 <f_chmod+0xa7>
c0006c06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c09:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c11:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c18:	e8 a2 cf ff ff       	call   c0003bbf <store_xdir>
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 1e                	jne    c0006c3f <f_chmod+0xc3>
c0006c21:	eb 13                	jmp    c0006c36 <f_chmod+0xba>
c0006c23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c27:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2a:	21 cb                	and    ebx,ecx
c0006c2c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c32:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	e8 2b d9 ff ff       	call   c000456a <sync_fs>
c0006c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	56                   	push   esi
c0006c47:	e8 5e 18 00 00       	call   c00084aa <ff_memfree>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c53:	83 c4 60             	add    esp,0x60
c0006c56:	5b                   	pop    ebx
c0006c57:	5e                   	pop    esi
c0006c58:	5f                   	pop    edi
c0006c59:	c3                   	ret    

c0006c5a <f_utime>:
c0006c5a:	56                   	push   esi
c0006c5b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c60:	53                   	push   ebx
c0006c61:	83 ec 64             	sub    esp,0x64
c0006c64:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c70:	e8 7c ba ff ff       	call   c00026f1 <mount_volume>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	0f 85 b5 00 00 00    	jne    c0006d32 <f_utime+0xd8>
c0006c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c81:	83 ec 0c             	sub    esp,0xc
c0006c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c88:	68 60 04 00 00       	push   0x460
c0006c8d:	e8 02 18 00 00       	call   c0008494 <ff_memalloc>
c0006c92:	83 c4 10             	add    esp,0x10
c0006c95:	89 c3                	mov    ebx,eax
c0006c97:	b8 11 00 00 00       	mov    eax,0x11
c0006c9c:	85 db                	test   ebx,ebx
c0006c9e:	0f 84 8e 00 00 00    	je     c0006d32 <f_utime+0xd8>
c0006ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cae:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cb4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 a6 e1 ff ff       	call   c0004e67 <follow_path>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 59                	jne    c0006d1e <f_utime+0xc4>
c0006cc5:	b8 06 00 00 00       	mov    eax,0x6
c0006cca:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ccf:	75 4d                	jne    c0006d1e <f_utime+0xc4>
c0006cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cd9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cdd:	c1 e2 10             	shl    edx,0x10
c0006ce0:	09 ca                	or     edx,ecx
c0006ce2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ce5:	75 1a                	jne    c0006d01 <f_utime+0xa7>
c0006ce7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cea:	83 c0 0c             	add    eax,0xc
c0006ced:	e8 e5 af ff ff       	call   c0001cd7 <st_dword>
c0006cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cf6:	e8 c4 ce ff ff       	call   c0003bbf <store_xdir>
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 1f                	jne    c0006d1e <f_utime+0xc4>
c0006cff:	eb 14                	jmp    c0006d15 <f_utime+0xbb>
c0006d01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d05:	83 c0 16             	add    eax,0x16
c0006d08:	e8 ca af ff ff       	call   c0001cd7 <st_dword>
c0006d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	e8 4c d8 ff ff       	call   c000456a <sync_fs>
c0006d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d22:	83 ec 0c             	sub    esp,0xc
c0006d25:	53                   	push   ebx
c0006d26:	e8 7f 17 00 00       	call   c00084aa <ff_memfree>
c0006d2b:	83 c4 10             	add    esp,0x10
c0006d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d32:	83 c4 64             	add    esp,0x64
c0006d35:	5b                   	pop    ebx
c0006d36:	5e                   	pop    esi
c0006d37:	c3                   	ret    

c0006d38 <f_getlabel>:
c0006d38:	55                   	push   ebp
c0006d39:	31 c9                	xor    ecx,ecx
c0006d3b:	57                   	push   edi
c0006d3c:	56                   	push   esi
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 6c             	sub    esp,0x6c
c0006d41:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 a0 b9 ff ff       	call   c00026f1 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 c1 01 00 00    	jne    c0006f1c <f_getlabel+0x1e4>
c0006d5b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d63:	0f 84 5f 01 00 00    	je     c0006ec8 <f_getlabel+0x190>
c0006d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d7f:	e8 39 c4 ff ff       	call   c00031bd <dir_sdi>
c0006d84:	85 c0                	test   eax,eax
c0006d86:	0f 85 2d 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006d8c:	ba 01 00 00 00       	mov    edx,0x1
c0006d91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d95:	e8 33 cc ff ff       	call   c00039cd <dir_read>
c0006d9a:	85 c0                	test   eax,eax
c0006d9c:	0f 85 17 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006da6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006da9:	74 09                	je     c0006db4 <f_getlabel+0x7c>
c0006dab:	31 db                	xor    ebx,ebx
c0006dad:	31 c9                	xor    ecx,ecx
c0006daf:	e9 c8 00 00 00       	jmp    c0006e7c <f_getlabel+0x144>
c0006db4:	31 ed                	xor    ebp,ebp
c0006db6:	31 db                	xor    ebx,ebx
c0006db8:	31 ff                	xor    edi,edi
c0006dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dc2:	39 fa                	cmp    edx,edi
c0006dc4:	76 4b                	jbe    c0006e11 <f_getlabel+0xd9>
c0006dc6:	47                   	inc    edi
c0006dc7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dca:	01 d0                	add    eax,edx
c0006dcc:	e8 90 ae ff ff       	call   c0001c61 <ld_word>
c0006dd1:	66 85 ed             	test   bp,bp
c0006dd4:	75 0d                	jne    c0006de3 <f_getlabel+0xab>
c0006dd6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ddc:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de1:	76 28                	jbe    c0006e0b <f_getlabel+0xd3>
c0006de3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dea:	89 e9                	mov    ecx,ebp
c0006dec:	01 da                	add    edx,ebx
c0006dee:	c1 e1 10             	shl    ecx,0x10
c0006df1:	0f b7 c0             	movzx  eax,ax
c0006df4:	09 c8                	or     eax,ecx
c0006df6:	b9 04 00 00 00       	mov    ecx,0x4
c0006dfb:	e8 01 b0 ff ff       	call   c0001e01 <put_utf>
c0006e00:	84 c0                	test   al,al
c0006e02:	74 0b                	je     c0006e0f <f_getlabel+0xd7>
c0006e04:	0f b6 c0             	movzx  eax,al
c0006e07:	01 c3                	add    ebx,eax
c0006e09:	31 c0                	xor    eax,eax
c0006e0b:	89 c5                	mov    ebp,eax
c0006e0d:	eb ab                	jmp    c0006dba <f_getlabel+0x82>
c0006e0f:	31 db                	xor    ebx,ebx
c0006e11:	66 85 ed             	test   bp,bp
c0006e14:	74 02                	je     c0006e18 <f_getlabel+0xe0>
c0006e16:	31 db                	xor    ebx,ebx
c0006e18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e1f:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e23:	e9 a0 00 00 00       	jmp    c0006ec8 <f_getlabel+0x190>
c0006e28:	83 ff 0b             	cmp    edi,0xb
c0006e2b:	74 11                	je     c0006e3e <f_getlabel+0x106>
c0006e2d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e36:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e39:	c1 e0 08             	shl    eax,0x8
c0006e3c:	09 c2                	or     edx,eax
c0006e3e:	0f b7 d2             	movzx  edx,dx
c0006e41:	50                   	push   eax
c0006e42:	50                   	push   eax
c0006e43:	68 b5 01 00 00       	push   0x1b5
c0006e48:	52                   	push   edx
c0006e49:	e8 03 17 00 00       	call   c0008551 <ff_oem2uni>
c0006e4e:	83 c4 10             	add    esp,0x10
c0006e51:	66 85 c0             	test   ax,ax
c0006e54:	74 46                	je     c0006e9c <f_getlabel+0x164>
c0006e56:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e5d:	0f b7 c0             	movzx  eax,ax
c0006e60:	01 da                	add    edx,ebx
c0006e62:	b9 04 00 00 00       	mov    ecx,0x4
c0006e67:	e8 95 af ff ff       	call   c0001e01 <put_utf>
c0006e6c:	84 c0                	test   al,al
c0006e6e:	74 2c                	je     c0006e9c <f_getlabel+0x164>
c0006e70:	0f b6 c0             	movzx  eax,al
c0006e73:	01 c3                	add    ebx,eax
c0006e75:	83 ff 0b             	cmp    edi,0xb
c0006e78:	74 24                	je     c0006e9e <f_getlabel+0x166>
c0006e7a:	89 f9                	mov    ecx,edi
c0006e7c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e80:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e83:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e88:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e91:	e8 9f ae ff ff       	call   c0001d35 <dbc_1st>
c0006e96:	85 c0                	test   eax,eax
c0006e98:	74 a4                	je     c0006e3e <f_getlabel+0x106>
c0006e9a:	eb 8c                	jmp    c0006e28 <f_getlabel+0xf0>
c0006e9c:	31 db                	xor    ebx,ebx
c0006e9e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ea5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ea8:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eaf:	74 17                	je     c0006ec8 <f_getlabel+0x190>
c0006eb1:	4b                   	dec    ebx
c0006eb2:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eb5:	74 ee                	je     c0006ea5 <f_getlabel+0x16d>
c0006eb7:	eb 0f                	jmp    c0006ec8 <f_getlabel+0x190>
c0006eb9:	83 f8 04             	cmp    eax,0x4
c0006ebc:	75 5c                	jne    c0006f1a <f_getlabel+0x1e2>
c0006ebe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ec5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ec8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed0:	74 4a                	je     c0006f1c <f_getlabel+0x1e4>
c0006ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ed9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006edc:	e8 5e b5 ff ff       	call   c000243f <move_window>
c0006ee1:	89 c6                	mov    esi,eax
c0006ee3:	85 c0                	test   eax,eax
c0006ee5:	75 35                	jne    c0006f1c <f_getlabel+0x1e4>
c0006ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eeb:	b8 43 00 00 00       	mov    eax,0x43
c0006ef0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ef2:	80 f9 03             	cmp    cl,0x3
c0006ef5:	74 0f                	je     c0006f06 <f_getlabel+0x1ce>
c0006ef7:	31 c0                	xor    eax,eax
c0006ef9:	80 f9 04             	cmp    cl,0x4
c0006efc:	0f 94 c0             	sete   al
c0006eff:	48                   	dec    eax
c0006f00:	83 e0 c3             	and    eax,0xffffffc3
c0006f03:	83 c0 64             	add    eax,0x64
c0006f06:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f0a:	e8 5f ad ff ff       	call   c0001c6e <ld_dword>
c0006f0f:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f16:	89 07                	mov    DWORD PTR [edi],eax
c0006f18:	eb 02                	jmp    c0006f1c <f_getlabel+0x1e4>
c0006f1a:	89 c6                	mov    esi,eax
c0006f1c:	83 c4 6c             	add    esp,0x6c
c0006f1f:	89 f0                	mov    eax,esi
c0006f21:	5b                   	pop    ebx
c0006f22:	5e                   	pop    esi
c0006f23:	5f                   	pop    edi
c0006f24:	5d                   	pop    ebp
c0006f25:	c3                   	ret    

c0006f26 <f_setlabel>:
c0006f26:	56                   	push   esi
c0006f27:	b9 02 00 00 00       	mov    ecx,0x2
c0006f2c:	53                   	push   ebx
c0006f2d:	83 ec 74             	sub    esp,0x74
c0006f30:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f34:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f3b:	e8 b1 b7 ff ff       	call   c00026f1 <mount_volume>
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 85 41 02 00 00    	jne    c000718b <f_setlabel+0x265>
c0006f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f51:	0f 85 8e 00 00 00    	jne    c0006fe5 <f_setlabel+0xbf>
c0006f57:	b9 16 00 00 00       	mov    ecx,0x16
c0006f5c:	31 d2                	xor    edx,edx
c0006f5e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f62:	31 db                	xor    ebx,ebx
c0006f64:	e8 8c ad ff ff       	call   c0001cf5 <mem_set>
c0006f69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f70:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f73:	0f 86 0a 01 00 00    	jbe    c0007083 <f_setlabel+0x15d>
c0006f79:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f80:	e8 b6 ad ff ff       	call   c0001d3b <tchar2uni>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f8c:	76 2a                	jbe    c0006fb8 <f_setlabel+0x92>
c0006f8e:	83 f8 ff             	cmp    eax,0xffffffff
c0006f91:	74 05                	je     c0006f98 <f_setlabel+0x72>
c0006f93:	83 fb 09             	cmp    ebx,0x9
c0006f96:	76 0a                	jbe    c0006fa2 <f_setlabel+0x7c>
c0006f98:	be 06 00 00 00       	mov    esi,0x6
c0006f9d:	e9 e9 01 00 00       	jmp    c000718b <f_setlabel+0x265>
c0006fa2:	89 c2                	mov    edx,eax
c0006fa4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fa8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fab:	c1 ea 10             	shr    edx,0x10
c0006fae:	01 c8                	add    eax,ecx
c0006fb0:	43                   	inc    ebx
c0006fb1:	e8 1d ad ff ff       	call   c0001cd3 <st_word>
c0006fb6:	eb 04                	jmp    c0006fbc <f_setlabel+0x96>
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	74 dc                	je     c0006f98 <f_setlabel+0x72>
c0006fbc:	89 f2                	mov    edx,esi
c0006fbe:	b8 97 92 02 c0       	mov    eax,0xc0029297
c0006fc3:	e8 5b ad ff ff       	call   c0001d23 <chk_chr>
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	75 cc                	jne    c0006f98 <f_setlabel+0x72>
c0006fcc:	83 fb 0a             	cmp    ebx,0xa
c0006fcf:	77 c7                	ja     c0006f98 <f_setlabel+0x72>
c0006fd1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fd4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fd8:	0f b7 d6             	movzx  edx,si
c0006fdb:	01 c8                	add    eax,ecx
c0006fdd:	43                   	inc    ebx
c0006fde:	e8 f0 ac ff ff       	call   c0001cd3 <st_word>
c0006fe3:	eb 84                	jmp    c0006f69 <f_setlabel+0x43>
c0006fe5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fea:	ba 20 00 00 00       	mov    edx,0x20
c0006fef:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ff3:	31 db                	xor    ebx,ebx
c0006ff5:	e8 fb ac ff ff       	call   c0001cf5 <mem_set>
c0006ffa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007001:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007004:	76 60                	jbe    c0007066 <f_setlabel+0x140>
c0007006:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000700d:	e8 29 ad ff ff       	call   c0001d3b <tchar2uni>
c0007012:	3d ff ff 00 00       	cmp    eax,0xffff
c0007017:	0f 87 7b ff ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000701d:	83 ec 0c             	sub    esp,0xc
c0007020:	50                   	push   eax
c0007021:	e8 97 15 00 00       	call   c00085bd <ff_wtoupper>
c0007026:	5a                   	pop    edx
c0007027:	59                   	pop    ecx
c0007028:	68 b5 01 00 00       	push   0x1b5
c000702d:	50                   	push   eax
c000702e:	e8 8e 14 00 00       	call   c00084c1 <ff_uni2oem>
c0007033:	83 c4 10             	add    esp,0x10
c0007036:	89 c6                	mov    esi,eax
c0007038:	66 85 c0             	test   ax,ax
c000703b:	0f 84 57 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007041:	0f b7 d0             	movzx  edx,ax
c0007044:	b8 90 92 02 c0       	mov    eax,0xc0029290
c0007049:	e8 d5 ac ff ff       	call   c0001d23 <chk_chr>
c000704e:	85 c0                	test   eax,eax
c0007050:	0f 85 42 ff ff ff    	jne    c0006f98 <f_setlabel+0x72>
c0007056:	66 81 fe ff 00       	cmp    si,0xff
c000705b:	0f 87 14 01 00 00    	ja     c0007175 <f_setlabel+0x24f>
c0007061:	e9 fa 00 00 00       	jmp    c0007160 <f_setlabel+0x23a>
c0007066:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000706b:	0f 84 27 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007071:	85 db                	test   ebx,ebx
c0007073:	74 0e                	je     c0007083 <f_setlabel+0x15d>
c0007075:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007078:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000707d:	75 04                	jne    c0007083 <f_setlabel+0x15d>
c000707f:	89 c3                	mov    ebx,eax
c0007081:	eb ee                	jmp    c0007071 <f_setlabel+0x14b>
c0007083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007087:	31 d2                	xor    edx,edx
c0007089:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000708d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007095:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007099:	e8 1f c1 ff ff       	call   c00031bd <dir_sdi>
c000709e:	89 c6                	mov    esi,eax
c00070a0:	85 c0                	test   eax,eax
c00070a2:	0f 85 e3 00 00 00    	jne    c000718b <f_setlabel+0x265>
c00070a8:	ba 01 00 00 00       	mov    edx,0x1
c00070ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b1:	e8 17 c9 ff ff       	call   c00039cd <dir_read>
c00070b6:	85 c0                	test   eax,eax
c00070b8:	75 21                	jne    c00070db <f_setlabel+0x1b5>
c00070ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070be:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070c2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070c5:	74 5d                	je     c0007124 <f_setlabel+0x1fe>
c00070c7:	85 db                	test   ebx,ebx
c00070c9:	74 0b                	je     c00070d6 <f_setlabel+0x1b0>
c00070cb:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070d4:	eb 70                	jmp    c0007146 <f_setlabel+0x220>
c00070d6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070d9:	eb 70                	jmp    c000714b <f_setlabel+0x225>
c00070db:	83 f8 04             	cmp    eax,0x4
c00070de:	75 7c                	jne    c000715c <f_setlabel+0x236>
c00070e0:	85 db                	test   ebx,ebx
c00070e2:	0f 84 a3 00 00 00    	je     c000718b <f_setlabel+0x265>
c00070e8:	ba 01 00 00 00       	mov    edx,0x1
c00070ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f1:	e8 51 ca ff ff       	call   c0003b47 <dir_alloc>
c00070f6:	89 c6                	mov    esi,eax
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 85 8b 00 00 00    	jne    c000718b <f_setlabel+0x265>
c0007100:	31 d2                	xor    edx,edx
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	b9 20 00 00 00       	mov    ecx,0x20
c000710b:	e8 e5 ab ff ff       	call   c0001cf5 <mem_set>
c0007110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007114:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007117:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711b:	75 18                	jne    c0007135 <f_setlabel+0x20f>
c000711d:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007120:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007124:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007127:	b9 16 00 00 00       	mov    ecx,0x16
c000712c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007130:	83 c0 02             	add    eax,0x2
c0007133:	eb 9b                	jmp    c00070d0 <f_setlabel+0x1aa>
c0007135:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007139:	b9 0b 00 00 00       	mov    ecx,0xb
c000713e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007142:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007146:	e8 95 ab ff ff       	call   c0001ce0 <mem_cpy>
c000714b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000714f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	e8 0e d4 ff ff       	call   c000456a <sync_fs>
c000715c:	89 c6                	mov    esi,eax
c000715e:	eb 2b                	jmp    c000718b <f_setlabel+0x265>
c0007160:	83 fb 0a             	cmp    ebx,0xa
c0007163:	0f 87 2f fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c0007169:	89 f0                	mov    eax,esi
c000716b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716f:	43                   	inc    ebx
c0007170:	e9 85 fe ff ff       	jmp    c0006ffa <f_setlabel+0xd4>
c0007175:	83 fb 09             	cmp    ebx,0x9
c0007178:	0f 87 1a fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000717e:	89 f0                	mov    eax,esi
c0007180:	66 c1 e8 08          	shr    ax,0x8
c0007184:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007188:	43                   	inc    ebx
c0007189:	eb de                	jmp    c0007169 <f_setlabel+0x243>
c000718b:	89 f0                	mov    eax,esi
c000718d:	83 c4 74             	add    esp,0x74
c0007190:	5b                   	pop    ebx
c0007191:	5e                   	pop    esi
c0007192:	c3                   	ret    

c0007193 <f_forward>:
c0007193:	55                   	push   ebp
c0007194:	57                   	push   edi
c0007195:	56                   	push   esi
c0007196:	53                   	push   ebx
c0007197:	83 ec 2c             	sub    esp,0x2c
c000719a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000719e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071ac:	89 d8                	mov    eax,ebx
c00071ae:	e8 b1 b1 ff ff       	call   c0002364 <validate>
c00071b3:	89 c5                	mov    ebp,eax
c00071b5:	85 c0                	test   eax,eax
c00071b7:	0f 85 aa 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c1:	85 ed                	test   ebp,ebp
c00071c3:	0f 85 9e 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071cd:	0f 84 8f 01 00 00    	je     c0007362 <f_forward+0x1cf>
c00071d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071dc:	bf 00 00 00 00       	mov    edi,0x0
c00071e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071e8:	89 d1                	mov    ecx,edx
c00071ea:	19 f9                	sbb    ecx,edi
c00071ec:	0f 83 cf 00 00 00    	jae    c00072c1 <f_forward+0x12e>
c00071f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071f6:	e9 c6 00 00 00       	jmp    c00072c1 <f_forward+0x12e>
c00071fb:	50                   	push   eax
c00071fc:	50                   	push   eax
c00071fd:	6a 00                	push   0x0
c00071ff:	6a 00                	push   0x0
c0007201:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	85 c0                	test   eax,eax
c000720a:	0f 84 57 01 00 00    	je     c0007367 <f_forward+0x1d4>
c0007210:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007217:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000721a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000721e:	89 d7                	mov    edi,edx
c0007220:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007223:	89 c6                	mov    esi,eax
c0007225:	0f ac fe 09          	shrd   esi,edi,0x9
c0007229:	21 ce                	and    esi,ecx
c000722b:	89 c1                	mov    ecx,eax
c000722d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007233:	0f 84 98 00 00 00    	je     c00072d1 <f_forward+0x13e>
c0007239:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007240:	89 c8                	mov    eax,ecx
c0007242:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007246:	e8 af ac ff ff       	call   c0001efa <clst2sect>
c000724b:	89 d7                	mov    edi,edx
c000724d:	09 c7                	or     edi,eax
c000724f:	0f 84 9e 00 00 00    	je     c00072f3 <f_forward+0x160>
c0007255:	31 ff                	xor    edi,edi
c0007257:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000725a:	01 c6                	add    esi,eax
c000725c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007260:	11 d7                	adc    edi,edx
c0007262:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007265:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000726c:	39 fa                	cmp    edx,edi
c000726e:	0f 85 a2 00 00 00    	jne    c0007316 <f_forward+0x183>
c0007274:	39 f0                	cmp    eax,esi
c0007276:	0f 85 9a 00 00 00    	jne    c0007316 <f_forward+0x183>
c000727c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000727f:	ba 00 02 00 00       	mov    edx,0x200
c0007284:	25 ff 01 00 00       	and    eax,0x1ff
c0007289:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000728d:	29 c2                	sub    edx,eax
c000728f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007292:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007295:	39 d1                	cmp    ecx,edx
c0007297:	76 02                	jbe    c000729b <f_forward+0x108>
c0007299:	89 d1                	mov    ecx,edx
c000729b:	8d 73 50             	lea    esi,[ebx+0x50]
c000729e:	52                   	push   edx
c000729f:	01 c6                	add    esi,eax
c00072a1:	52                   	push   edx
c00072a2:	51                   	push   ecx
c00072a3:	56                   	push   esi
c00072a4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	85 c0                	test   eax,eax
c00072ad:	74 44                	je     c00072f3 <f_forward+0x160>
c00072af:	31 ff                	xor    edi,edi
c00072b1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072b4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072b7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072bb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072bf:	01 07                	add    DWORD PTR [edi],eax
c00072c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072c6:	0f 85 2f ff ff ff    	jne    c00071fb <f_forward+0x68>
c00072cc:	e9 96 00 00 00       	jmp    c0007367 <f_forward+0x1d4>
c00072d1:	85 f6                	test   esi,esi
c00072d3:	0f 85 60 ff ff ff    	jne    c0007239 <f_forward+0xa6>
c00072d9:	89 d7                	mov    edi,edx
c00072db:	09 c7                	or     edi,eax
c00072dd:	75 05                	jne    c00072e4 <f_forward+0x151>
c00072df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072e2:	eb 0a                	jmp    c00072ee <f_forward+0x15b>
c00072e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072e7:	89 d8                	mov    eax,ebx
c00072e9:	e8 d9 bc ff ff       	call   c0002fc7 <get_fat>
c00072ee:	83 f8 01             	cmp    eax,0x1
c00072f1:	77 0b                	ja     c00072fe <f_forward+0x16b>
c00072f3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072f7:	bd 02 00 00 00       	mov    ebp,0x2
c00072fc:	eb 69                	jmp    c0007367 <f_forward+0x1d4>
c00072fe:	83 f8 ff             	cmp    eax,0xffffffff
c0007301:	75 0b                	jne    c000730e <f_forward+0x17b>
c0007303:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007307:	bd 01 00 00 00       	mov    ebp,0x1
c000730c:	eb 59                	jmp    c0007367 <f_forward+0x1d4>
c000730e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007311:	e9 23 ff ff ff       	jmp    c0007239 <f_forward+0xa6>
c0007316:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000731a:	79 20                	jns    c000733c <f_forward+0x1a9>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	6a 01                	push   0x1
c0007321:	52                   	push   edx
c0007322:	50                   	push   eax
c0007323:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007327:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000732b:	50                   	push   eax
c000732c:	e8 fb a8 ff ff       	call   c0001c2c <disk_write>
c0007331:	83 c4 20             	add    esp,0x20
c0007334:	85 c0                	test   eax,eax
c0007336:	75 cb                	jne    c0007303 <f_forward+0x170>
c0007338:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000733c:	83 ec 0c             	sub    esp,0xc
c000733f:	6a 01                	push   0x1
c0007341:	57                   	push   edi
c0007342:	56                   	push   esi
c0007343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000734b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 c1 a8 ff ff       	call   c0001c16 <disk_read>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	0f 84 1c ff ff ff    	je     c000727c <f_forward+0xe9>
c0007360:	eb a1                	jmp    c0007303 <f_forward+0x170>
c0007362:	bd 07 00 00 00       	mov    ebp,0x7
c0007367:	83 c4 2c             	add    esp,0x2c
c000736a:	89 e8                	mov    eax,ebp
c000736c:	5b                   	pop    ebx
c000736d:	5e                   	pop    esi
c000736e:	5f                   	pop    edi
c000736f:	5d                   	pop    ebp
c0007370:	c3                   	ret    

c0007371 <f_mkfs>:
c0007371:	55                   	push   ebp
c0007372:	57                   	push   edi
c0007373:	56                   	push   esi
c0007374:	53                   	push   ebx
c0007375:	bb 0b 00 00 00       	mov    ebx,0xb
c000737a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007380:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007387:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000738e:	e8 b0 ae ff ff       	call   c0002243 <get_ldnumber>
c0007393:	85 c0                	test   eax,eax
c0007395:	0f 88 ec 10 00 00    	js     c0008487 <f_mkfs+0x1116>
c000739b:	8b 14 85 40 e2 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1dc0]
c00073a2:	85 d2                	test   edx,edx
c00073a4:	74 03                	je     c00073a9 <f_mkfs+0x38>
c00073a6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073a9:	85 f6                	test   esi,esi
c00073ab:	75 05                	jne    c00073b2 <f_mkfs+0x41>
c00073ad:	be 80 92 02 c0       	mov    esi,0xc0029280
c00073b2:	83 ec 0c             	sub    esp,0xc
c00073b5:	0f b6 c0             	movzx  eax,al
c00073b8:	bb 03 00 00 00       	mov    ebx,0x3
c00073bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073c5:	e8 49 a8 ff ff       	call   c0001c13 <disk_initialize>
c00073ca:	83 c4 10             	add    esp,0x10
c00073cd:	a8 01                	test   al,0x1
c00073cf:	0f 85 b2 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073d5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073da:	a8 04                	test   al,0x4
c00073dc:	0f 85 a5 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073e5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073e9:	85 c0                	test   eax,eax
c00073eb:	75 20                	jne    c000740d <f_mkfs+0x9c>
c00073ed:	51                   	push   ecx
c00073ee:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073f2:	50                   	push   eax
c00073f3:	6a 03                	push   0x3
c00073f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073f9:	e8 44 a8 ff ff       	call   c0001c42 <disk_ioctl>
c00073fe:	83 c4 10             	add    esp,0x10
c0007401:	85 c0                	test   eax,eax
c0007403:	74 08                	je     c000740d <f_mkfs+0x9c>
c0007405:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000740d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007411:	8d 42 ff             	lea    eax,[edx-0x1]
c0007414:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007419:	77 04                	ja     c000741f <f_mkfs+0xae>
c000741b:	85 c2                	test   edx,eax
c000741d:	74 08                	je     c0007427 <f_mkfs+0xb6>
c000741f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007427:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000742a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000742e:	48                   	dec    eax
c000742f:	3c 01                	cmp    al,0x1
c0007431:	76 05                	jbe    c0007438 <f_mkfs+0xc7>
c0007433:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007438:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000743b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000743f:	48                   	dec    eax
c0007440:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007445:	77 07                	ja     c000744e <f_mkfs+0xdd>
c0007447:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000744c:	74 08                	je     c0007456 <f_mkfs+0xe5>
c000744e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007456:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007459:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000745f:	77 07                	ja     c0007468 <f_mkfs+0xf7>
c0007461:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007464:	85 d8                	test   eax,ebx
c0007466:	74 02                	je     c000746a <f_mkfs+0xf9>
c0007468:	31 db                	xor    ebx,ebx
c000746a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007475:	77 0a                	ja     c0007481 <f_mkfs+0x110>
c0007477:	bb 11 00 00 00       	mov    ebx,0x11
c000747c:	e9 06 10 00 00       	jmp    c0008487 <f_mkfs+0x1116>
c0007481:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007488:	8b 36                	mov    esi,DWORD PTR [esi]
c000748a:	85 ed                	test   ebp,ebp
c000748c:	75 1e                	jne    c00074ac <f_mkfs+0x13b>
c000748e:	83 ec 0c             	sub    esp,0xc
c0007491:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007498:	25 00 fe ff ff       	and    eax,0xfffffe00
c000749d:	50                   	push   eax
c000749e:	e8 f1 0f 00 00       	call   c0008494 <ff_memalloc>
c00074a3:	83 c4 10             	add    esp,0x10
c00074a6:	89 c5                	mov    ebp,eax
c00074a8:	85 c0                	test   eax,eax
c00074aa:	74 cb                	je     c0007477 <f_mkfs+0x106>
c00074ac:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074b4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074bc:	52                   	push   edx
c00074bd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c1:	50                   	push   eax
c00074c2:	6a 01                	push   0x1
c00074c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c8:	e8 75 a7 ff ff       	call   c0001c42 <disk_ioctl>
c00074cd:	83 c4 10             	add    esp,0x10
c00074d0:	85 c0                	test   eax,eax
c00074d2:	0f 85 4a 0f 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00074d8:	89 f1                	mov    ecx,esi
c00074da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074e2:	83 e1 0f             	and    ecx,0xf
c00074e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ed:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f1:	83 e6 08             	and    esi,0x8
c00074f4:	75 56                	jne    c000754c <f_mkfs+0x1db>
c00074f6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074fa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074fe:	83 ff 00             	cmp    edi,0x0
c0007501:	76 20                	jbe    c0007523 <f_mkfs+0x1b2>
c0007503:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007508:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007510:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007516:	83 d7 ff             	adc    edi,0xffffffff
c0007519:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000751d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007521:	eb 21                	jmp    c0007544 <f_mkfs+0x1d3>
c0007523:	ba 3f 00 00 00       	mov    edx,0x3f
c0007528:	39 f2                	cmp    edx,esi
c000752a:	19 f8                	sbb    eax,edi
c000752c:	73 1e                	jae    c000754c <f_mkfs+0x1db>
c000752e:	83 c6 c1             	add    esi,0xffffffc1
c0007531:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007539:	83 d7 ff             	adc    edi,0xffffffff
c000753c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007540:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007544:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000754c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007550:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007554:	89 04 24             	mov    DWORD PTR [esp],eax
c0007557:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000755b:	31 c0                	xor    eax,eax
c000755d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007562:	89 c7                	mov    edi,eax
c0007564:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007567:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756b:	0f 83 c5 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c0007571:	89 df                	mov    edi,ebx
c0007573:	c1 ef 09             	shr    edi,0x9
c0007576:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000757a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007581:	c1 ef 09             	shr    edi,0x9
c0007584:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007589:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000758d:	74 29                	je     c00075b8 <f_mkfs+0x247>
c000758f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007595:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000759a:	0f 97 c2             	seta   dl
c000759d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a4:	0f 92 c0             	setb   al
c00075a7:	08 c2                	or     dl,al
c00075a9:	75 5b                	jne    c0007606 <f_mkfs+0x295>
c00075ab:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075af:	83 e0 07             	and    eax,0x7
c00075b2:	3c 04                	cmp    al,0x4
c00075b4:	74 50                	je     c0007606 <f_mkfs+0x295>
c00075b6:	eb 1b                	jmp    c00075d3 <f_mkfs+0x262>
c00075b8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075bd:	0f 87 73 0a 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c00075c3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075c9:	76 08                	jbe    c00075d3 <f_mkfs+0x262>
c00075cb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075db:	83 e0 01             	and    eax,0x1
c00075de:	80 e1 02             	and    cl,0x2
c00075e1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075e5:	74 0d                	je     c00075f4 <f_mkfs+0x283>
c00075e7:	84 c0                	test   al,al
c00075e9:	0f 84 53 09 00 00    	je     c0007f42 <f_mkfs+0xbd1>
c00075ef:	e9 12 08 00 00       	jmp    c0007e06 <f_mkfs+0xa95>
c00075f4:	bb 13 00 00 00       	mov    ebx,0x13
c00075f9:	84 c0                	test   al,al
c00075fb:	0f 85 05 08 00 00    	jne    c0007e06 <f_mkfs+0xa95>
c0007601:	e9 39 0e 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0007606:	31 c0                	xor    eax,eax
c0007608:	ba ff 0f 00 00       	mov    edx,0xfff
c000760d:	89 c7                	mov    edi,eax
c000760f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007612:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007616:	0f 83 1a 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c000761c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007622:	77 39                	ja     c000765d <f_mkfs+0x2ec>
c0007624:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007629:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007631:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007634:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007638:	73 08                	jae    c0007642 <f_mkfs+0x2d1>
c000763a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007642:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007647:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000764a:	b8 00 00 00 00       	mov    eax,0x0
c000764f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007653:	73 08                	jae    c000765d <f_mkfs+0x2ec>
c0007655:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007665:	83 c0 20             	add    eax,0x20
c0007668:	83 d2 00             	adc    edx,0x0
c000766b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007677:	31 d2                	xor    edx,edx
c0007679:	31 ff                	xor    edi,edi
c000767b:	52                   	push   edx
c000767c:	89 fb                	mov    ebx,edi
c000767e:	50                   	push   eax
c000767f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007687:	e8 20 f2 01 00       	call   c00268ac <__udivdi3>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	c1 e0 02             	shl    eax,0x2
c0007692:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007696:	05 07 02 00 00       	add    eax,0x207
c000769b:	89 f1                	mov    ecx,esi
c000769d:	c1 e8 09             	shr    eax,0x9
c00076a0:	83 c1 ff             	add    ecx,0xffffffff
c00076a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076a7:	83 d3 ff             	adc    ebx,0xffffffff
c00076aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076ae:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076b2:	31 d2                	xor    edx,edx
c00076b4:	01 c8                	add    eax,ecx
c00076b6:	11 da                	adc    edx,ebx
c00076b8:	89 c1                	mov    ecx,eax
c00076ba:	f7 de                	neg    esi
c00076bc:	89 d0                	mov    eax,edx
c00076be:	83 d7 00             	adc    edi,0x0
c00076c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076c5:	f7 df                	neg    edi
c00076c7:	21 f1                	and    ecx,esi
c00076c9:	21 f8                	and    eax,edi
c00076cb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076db:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076e2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076e6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076ea:	89 df                	mov    edi,ebx
c00076ec:	d1 ea                	shr    edx,1
c00076ee:	39 c1                	cmp    ecx,eax
c00076f0:	19 d7                	sbb    edi,edx
c00076f2:	0f 83 3e 09 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c00076f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007706:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000770a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000770d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007711:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007715:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007719:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000771d:	83 f8 0f             	cmp    eax,0xf
c0007720:	0f 86 10 09 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007726:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000772e:	0f 87 02 09 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007734:	31 d2                	xor    edx,edx
c0007736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000773a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007742:	83 c0 07             	add    eax,0x7
c0007745:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000774d:	c1 e8 03             	shr    eax,0x3
c0007750:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007757:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000775b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000775f:	c1 e0 09             	shl    eax,0x9
c0007762:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007766:	48                   	dec    eax
c0007767:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000776b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000776f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007773:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007777:	31 d2                	xor    edx,edx
c0007779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000777d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007788:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000778d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007791:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007795:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007799:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000779d:	31 ff                	xor    edi,edi
c000779f:	31 f6                	xor    esi,esi
c00077a1:	31 db                	xor    ebx,ebx
c00077a3:	85 ff                	test   edi,edi
c00077a5:	74 05                	je     c00077ac <f_mkfs+0x43b>
c00077a7:	4f                   	dec    edi
c00077a8:	74 44                	je     c00077ee <f_mkfs+0x47d>
c00077aa:	eb 4f                	jmp    c00077fb <f_mkfs+0x48a>
c00077ac:	83 ec 0c             	sub    esp,0xc
c00077af:	0f b7 c3             	movzx  eax,bx
c00077b2:	50                   	push   eax
c00077b3:	e8 05 0e 00 00       	call   c00085bd <ff_wtoupper>
c00077b8:	83 c4 10             	add    esp,0x10
c00077bb:	89 c1                	mov    ecx,eax
c00077bd:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c0:	66 39 c3             	cmp    bx,ax
c00077c3:	75 3e                	jne    c0007803 <f_mkfs+0x492>
c00077c5:	be 01 00 00 00       	mov    esi,0x1
c00077ca:	89 df                	mov    edi,ebx
c00077cc:	66 01 f7             	add    di,si
c00077cf:	75 07                	jne    c00077d8 <f_mkfs+0x467>
c00077d1:	83 fe 7f             	cmp    esi,0x7f
c00077d4:	77 31                	ja     c0007807 <f_mkfs+0x496>
c00077d6:	eb 16                	jmp    c00077ee <f_mkfs+0x47d>
c00077d8:	83 ec 0c             	sub    esp,0xc
c00077db:	0f b7 ff             	movzx  edi,di
c00077de:	57                   	push   edi
c00077df:	e8 d9 0d 00 00       	call   c00085bd <ff_wtoupper>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	39 c7                	cmp    edi,eax
c00077e9:	75 e6                	jne    c00077d1 <f_mkfs+0x460>
c00077eb:	46                   	inc    esi
c00077ec:	eb dc                	jmp    c00077ca <f_mkfs+0x459>
c00077ee:	31 c0                	xor    eax,eax
c00077f0:	89 d9                	mov    ecx,ebx
c00077f2:	4e                   	dec    esi
c00077f3:	0f 95 c0             	setne  al
c00077f6:	43                   	inc    ebx
c00077f7:	89 c7                	mov    edi,eax
c00077f9:	eb 14                	jmp    c000780f <f_mkfs+0x49e>
c00077fb:	89 f1                	mov    ecx,esi
c00077fd:	01 f3                	add    ebx,esi
c00077ff:	31 ff                	xor    edi,edi
c0007801:	eb 0c                	jmp    c000780f <f_mkfs+0x49e>
c0007803:	89 d3                	mov    ebx,edx
c0007805:	eb 08                	jmp    c000780f <f_mkfs+0x49e>
c0007807:	bf 02 00 00 00       	mov    edi,0x2
c000780c:	83 c9 ff             	or     ecx,0xffffffff
c000780f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007816:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000781a:	0f b6 c1             	movzx  eax,cl
c000781d:	e8 3a a9 ff ff       	call   c000215c <xsum32>
c0007822:	66 c1 e9 08          	shr    cx,0x8
c0007826:	89 c2                	mov    edx,eax
c0007828:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000782f:	0f b7 c1             	movzx  eax,cx
c0007832:	e8 25 a9 ff ff       	call   c000215c <xsum32>
c0007837:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000783c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007840:	66 85 db             	test   bx,bx
c0007843:	74 1f                	je     c0007864 <f_mkfs+0x4f3>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000784f:	83 c0 02             	add    eax,0x2
c0007852:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007858:	39 c2                	cmp    edx,eax
c000785a:	74 08                	je     c0007864 <f_mkfs+0x4f3>
c000785c:	89 04 24             	mov    DWORD PTR [esp],eax
c000785f:	e9 3f ff ff ff       	jmp    c00077a3 <f_mkfs+0x432>
c0007864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007867:	83 ec 0c             	sub    esp,0xc
c000786a:	05 01 02 00 00       	add    eax,0x201
c000786f:	c1 e8 09             	shr    eax,0x9
c0007872:	50                   	push   eax
c0007873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007877:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787f:	55                   	push   ebp
c0007880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007884:	e8 a3 a3 ff ff       	call   c0001c2c <disk_write>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	85 c0                	test   eax,eax
c000788e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007891:	0f 85 8b 0b 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007897:	89 d0                	mov    eax,edx
c0007899:	31 d2                	xor    edx,edx
c000789b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000789f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078a3:	66 85 db             	test   bx,bx
c00078a6:	74 04                	je     c00078ac <f_mkfs+0x53b>
c00078a8:	31 c0                	xor    eax,eax
c00078aa:	eb b0                	jmp    c000785c <f_mkfs+0x4eb>
c00078ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078b4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078b8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078be:	31 d2                	xor    edx,edx
c00078c0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078cb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078cf:	c1 eb 09             	shr    ebx,0x9
c00078d2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078dd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078e5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078e9:	8d 70 01             	lea    esi,[eax+0x1]
c00078ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078f4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078fb:	31 d2                	xor    edx,edx
c00078fd:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007902:	89 04 24             	mov    DWORD PTR [esp],eax
c0007905:	89 c1                	mov    ecx,eax
c0007907:	89 e8                	mov    eax,ebp
c0007909:	e8 e7 a3 ff ff       	call   c0001cf5 <mem_set>
c000790e:	31 c0                	xor    eax,eax
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 10                	jbe    c0007925 <f_mkfs+0x5b4>
c0007915:	83 fe 07             	cmp    esi,0x7
c0007918:	76 0b                	jbe    c0007925 <f_mkfs+0x5b4>
c000791a:	40                   	inc    eax
c000791b:	83 ee 08             	sub    esi,0x8
c000791e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007923:	eb eb                	jmp    c0007910 <f_mkfs+0x59f>
c0007925:	b2 01                	mov    dl,0x1
c0007927:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000792b:	85 f6                	test   esi,esi
c000792d:	74 0c                	je     c000793b <f_mkfs+0x5ca>
c000792f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007932:	76 07                	jbe    c000793b <f_mkfs+0x5ca>
c0007934:	08 11                	or     BYTE PTR [ecx],dl
c0007936:	4e                   	dec    esi
c0007937:	d1 e2                	shl    edx,1
c0007939:	eb f0                	jmp    c000792b <f_mkfs+0x5ba>
c000793b:	89 df                	mov    edi,ebx
c000793d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007941:	76 04                	jbe    c0007947 <f_mkfs+0x5d6>
c0007943:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007947:	83 ec 0c             	sub    esp,0xc
c000794a:	57                   	push   edi
c000794b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000794f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007953:	55                   	push   ebp
c0007954:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007958:	e8 cf a2 ff ff       	call   c0001c2c <disk_write>
c000795d:	83 c4 20             	add    esp,0x20
c0007960:	85 c0                	test   eax,eax
c0007962:	0f 85 ba 0a 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007968:	31 d2                	xor    edx,edx
c000796a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000796e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007972:	29 fb                	sub    ebx,edi
c0007974:	0f 85 7a ff ff ff    	jne    c00078f4 <f_mkfs+0x583>
c000797a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000797e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007986:	31 f6                	xor    esi,esi
c0007988:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000798c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000798f:	31 d2                	xor    edx,edx
c0007991:	89 e8                	mov    eax,ebp
c0007993:	e8 5d a3 ff ff       	call   c0001cf5 <mem_set>
c0007998:	31 c9                	xor    ecx,ecx
c000799a:	85 db                	test   ebx,ebx
c000799c:	75 40                	jne    c00079de <f_mkfs+0x66d>
c000799e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079a3:	89 e8                	mov    eax,ebp
c00079a5:	bb 02 00 00 00       	mov    ebx,0x2
c00079aa:	e8 28 a3 ff ff       	call   c0001cd7 <st_dword>
c00079af:	8d 45 04             	lea    eax,[ebp+0x4]
c00079b2:	83 ca ff             	or     edx,0xffffffff
c00079b5:	e8 1d a3 ff ff       	call   c0001cd7 <st_dword>
c00079ba:	b9 08 00 00 00       	mov    ecx,0x8
c00079bf:	eb 1d                	jmp    c00079de <f_mkfs+0x66d>
c00079c1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c4:	76 3b                	jbe    c0007a01 <f_mkfs+0x690>
c00079c6:	43                   	inc    ebx
c00079c7:	83 fe 01             	cmp    esi,0x1
c00079ca:	89 da                	mov    edx,ebx
c00079cc:	77 03                	ja     c00079d1 <f_mkfs+0x660>
c00079ce:	83 ca ff             	or     edx,0xffffffff
c00079d1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079d5:	4e                   	dec    esi
c00079d6:	e8 fc a2 ff ff       	call   c0001cd7 <st_dword>
c00079db:	83 c1 04             	add    ecx,0x4
c00079de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079e2:	85 f6                	test   esi,esi
c00079e4:	75 db                	jne    c00079c1 <f_mkfs+0x650>
c00079e6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079eb:	77 14                	ja     c0007a01 <f_mkfs+0x690>
c00079ed:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079f8:	85 f6                	test   esi,esi
c00079fa:	74 05                	je     c0007a01 <f_mkfs+0x690>
c00079fc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ff:	77 dd                	ja     c00079de <f_mkfs+0x66d>
c0007a01:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a05:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a09:	39 cf                	cmp    edi,ecx
c0007a0b:	76 02                	jbe    c0007a0f <f_mkfs+0x69e>
c0007a0d:	89 cf                	mov    edi,ecx
c0007a0f:	83 ec 0c             	sub    esp,0xc
c0007a12:	57                   	push   edi
c0007a13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1b:	55                   	push   ebp
c0007a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a20:	e8 07 a2 ff ff       	call   c0001c2c <disk_write>
c0007a25:	83 c4 20             	add    esp,0x20
c0007a28:	85 c0                	test   eax,eax
c0007a2a:	0f 85 f2 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a36:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a3a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a3e:	0f 85 48 ff ff ff    	jne    c000798c <f_mkfs+0x61b>
c0007a44:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a47:	31 d2                	xor    edx,edx
c0007a49:	89 e8                	mov    eax,ebp
c0007a4b:	31 ff                	xor    edi,edi
c0007a4d:	e8 a3 a2 ff ff       	call   c0001cf5 <mem_set>
c0007a52:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a55:	ba 02 00 00 00       	mov    edx,0x2
c0007a5a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a5e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a62:	e8 70 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a67:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a6a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a6e:	e8 64 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a73:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a76:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a7a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a7e:	e8 54 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a83:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a8e:	83 c2 02             	add    edx,0x2
c0007a91:	e8 41 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a96:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a99:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa1:	e8 31 a2 ff ff       	call   c0001cd7 <st_dword>
c0007aa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aaa:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007aaf:	89 c6                	mov    esi,eax
c0007ab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007abc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ac3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ac7:	39 cb                	cmp    ebx,ecx
c0007ac9:	76 02                	jbe    c0007acd <f_mkfs+0x75c>
c0007acb:	89 cb                	mov    ebx,ecx
c0007acd:	83 ec 0c             	sub    esp,0xc
c0007ad0:	53                   	push   ebx
c0007ad1:	57                   	push   edi
c0007ad2:	56                   	push   esi
c0007ad3:	55                   	push   ebp
c0007ad4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad8:	e8 4f a1 ff ff       	call   c0001c2c <disk_write>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	85 c0                	test   eax,eax
c0007ae2:	0f 85 3a 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007ae8:	31 d2                	xor    edx,edx
c0007aea:	b9 00 02 00 00       	mov    ecx,0x200
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 ff a1 ff ff       	call   c0001cf5 <mem_set>
c0007af6:	31 d2                	xor    edx,edx
c0007af8:	01 de                	add    esi,ebx
c0007afa:	11 d7                	adc    edi,edx
c0007afc:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aff:	75 bf                	jne    c0007ac0 <f_mkfs+0x74f>
c0007b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b09:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b11:	b9 00 02 00 00       	mov    ecx,0x200
c0007b16:	31 d2                	xor    edx,edx
c0007b18:	89 e8                	mov    eax,ebp
c0007b1a:	e8 d6 a1 ff ff       	call   c0001cf5 <mem_set>
c0007b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b24:	ba 60 93 02 c0       	mov    edx,0xc0029360
c0007b29:	89 e8                	mov    eax,ebp
c0007b2b:	e8 b0 a1 ff ff       	call   c0001ce0 <mem_cpy>
c0007b30:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b3b:	e8 9a a1 ff ff       	call   c0001cda <st_qword>
c0007b40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b44:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b47:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b4b:	e8 8a a1 ff ff       	call   c0001cda <st_qword>
c0007b50:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b53:	ba 20 00 00 00       	mov    edx,0x20
c0007b58:	e8 7a a1 ff ff       	call   c0001cd7 <st_dword>
c0007b5d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b65:	e8 6d a1 ff ff       	call   c0001cd7 <st_dword>
c0007b6a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b72:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b76:	e8 5c a1 ff ff       	call   c0001cd7 <st_dword>
c0007b7b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b82:	e8 50 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b8b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b8e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b91:	e8 41 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b96:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b99:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b9e:	e8 34 a1 ff ff       	call   c0001cd7 <st_dword>
c0007ba3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ba6:	ba 00 01 00 00       	mov    edx,0x100
c0007bab:	e8 23 a1 ff ff       	call   c0001cd3 <st_word>
c0007bb0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bb4:	b8 0a 00 00 00       	mov    eax,0xa
c0007bb9:	48                   	dec    eax
c0007bba:	74 05                	je     c0007bc1 <f_mkfs+0x850>
c0007bbc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bbf:	eb f8                	jmp    c0007bb9 <f_mkfs+0x848>
c0007bc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bc5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bcd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd1:	74 05                	je     c0007bd8 <f_mkfs+0x867>
c0007bd3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bd6:	eb f5                	jmp    c0007bcd <f_mkfs+0x85c>
c0007bd8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bdb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007be6:	31 db                	xor    ebx,ebx
c0007be8:	e8 e6 a0 ff ff       	call   c0001cd3 <st_word>
c0007bed:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bf3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfb:	e8 d3 a0 ff ff       	call   c0001cd3 <st_word>
c0007c00:	31 c9                	xor    ecx,ecx
c0007c02:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c05:	83 f8 01             	cmp    eax,0x1
c0007c08:	76 13                	jbe    c0007c1d <f_mkfs+0x8ac>
c0007c0a:	83 f9 70             	cmp    ecx,0x70
c0007c0d:	74 0e                	je     c0007c1d <f_mkfs+0x8ac>
c0007c0f:	89 da                	mov    edx,ebx
c0007c11:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c16:	e8 41 a5 ff ff       	call   c000215c <xsum32>
c0007c1b:	89 c3                	mov    ebx,eax
c0007c1d:	41                   	inc    ecx
c0007c1e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c24:	75 dc                	jne    c0007c02 <f_mkfs+0x891>
c0007c26:	89 f0                	mov    eax,esi
c0007c28:	89 fa                	mov    edx,edi
c0007c2a:	83 c0 01             	add    eax,0x1
c0007c2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c31:	83 d2 00             	adc    edx,0x0
c0007c34:	83 ec 0c             	sub    esp,0xc
c0007c37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c3b:	6a 01                	push   0x1
c0007c3d:	57                   	push   edi
c0007c3e:	56                   	push   esi
c0007c3f:	55                   	push   ebp
c0007c40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c44:	e8 e3 9f ff ff       	call   c0001c2c <disk_write>
c0007c49:	83 c4 20             	add    esp,0x20
c0007c4c:	85 c0                	test   eax,eax
c0007c4e:	0f 85 ce 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	b9 00 02 00 00       	mov    ecx,0x200
c0007c5b:	89 e8                	mov    eax,ebp
c0007c5d:	e8 93 a0 ff ff       	call   c0001cf5 <mem_set>
c0007c62:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c6a:	e8 64 a0 ff ff       	call   c0001cd3 <st_word>
c0007c6f:	89 f0                	mov    eax,esi
c0007c71:	89 fa                	mov    edx,edi
c0007c73:	83 c0 09             	add    eax,0x9
c0007c76:	83 d2 00             	adc    edx,0x0
c0007c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c80:	31 c9                	xor    ecx,ecx
c0007c82:	41                   	inc    ecx
c0007c83:	89 da                	mov    edx,ebx
c0007c85:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c8a:	e8 cd a4 ff ff       	call   c000215c <xsum32>
c0007c8f:	89 c3                	mov    ebx,eax
c0007c91:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c97:	75 e9                	jne    c0007c82 <f_mkfs+0x911>
c0007c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca1:	83 c0 01             	add    eax,0x1
c0007ca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ca8:	83 d2 00             	adc    edx,0x0
c0007cab:	83 ec 0c             	sub    esp,0xc
c0007cae:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cb2:	6a 01                	push   0x1
c0007cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cbc:	55                   	push   ebp
c0007cbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc1:	e8 66 9f ff ff       	call   c0001c2c <disk_write>
c0007cc6:	83 c4 20             	add    esp,0x20
c0007cc9:	85 c0                	test   eax,eax
c0007ccb:	0f 85 51 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cd9:	75 09                	jne    c0007ce4 <f_mkfs+0x973>
c0007cdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cde:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ce2:	74 12                	je     c0007cf6 <f_mkfs+0x985>
c0007ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cf4:	eb 8a                	jmp    c0007c80 <f_mkfs+0x90f>
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	b9 00 02 00 00       	mov    ecx,0x200
c0007cfd:	89 e8                	mov    eax,ebp
c0007cff:	e8 f1 9f ff ff       	call   c0001cf5 <mem_set>
c0007d04:	83 c6 0b             	add    esi,0xb
c0007d07:	83 d7 00             	adc    edi,0x0
c0007d0a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d0e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d12:	31 c9                	xor    ecx,ecx
c0007d14:	41                   	inc    ecx
c0007d15:	89 da                	mov    edx,ebx
c0007d17:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d1c:	e8 3b a4 ff ff       	call   c000215c <xsum32>
c0007d21:	89 c3                	mov    ebx,eax
c0007d23:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d29:	75 e9                	jne    c0007d14 <f_mkfs+0x9a3>
c0007d2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d32:	83 c6 01             	add    esi,0x1
c0007d35:	83 d7 00             	adc    edi,0x0
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	6a 01                	push   0x1
c0007d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d45:	55                   	push   ebp
c0007d46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d4a:	e8 dd 9e ff ff       	call   c0001c2c <disk_write>
c0007d4f:	83 c4 20             	add    esp,0x20
c0007d52:	85 c0                	test   eax,eax
c0007d54:	0f 85 c8 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007d5a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d5e:	75 06                	jne    c0007d66 <f_mkfs+0x9f5>
c0007d60:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d64:	74 09                	je     c0007d6f <f_mkfs+0x9fe>
c0007d66:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d6d:	eb a3                	jmp    c0007d12 <f_mkfs+0x9a1>
c0007d6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d73:	89 da                	mov    edx,ebx
c0007d75:	01 e8                	add    eax,ebp
c0007d77:	e8 5b 9f ff ff       	call   c0001cd7 <st_dword>
c0007d7c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d81:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d89:	75 e4                	jne    c0007d6f <f_mkfs+0x9fe>
c0007d8b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d8e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d92:	83 c6 02             	add    esi,0x2
c0007d95:	83 d7 00             	adc    edi,0x0
c0007d98:	83 ec 0c             	sub    esp,0xc
c0007d9b:	6a 01                	push   0x1
c0007d9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da5:	55                   	push   ebp
c0007da6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007daa:	e8 7d 9e ff ff       	call   c0001c2c <disk_write>
c0007daf:	83 c4 20             	add    esp,0x20
c0007db2:	85 c0                	test   eax,eax
c0007db4:	0f 85 68 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007dba:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dbf:	74 0d                	je     c0007dce <f_mkfs+0xa5d>
c0007dc1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dc9:	e9 43 fd ff ff       	jmp    c0007b11 <f_mkfs+0x7a0>
c0007dce:	b1 07                	mov    cl,0x7
c0007dd0:	e9 e3 05 00 00       	jmp    c00083b8 <f_mkfs+0x1047>
c0007dd5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dda:	0f 85 4f 02 00 00    	jne    c000802f <f_mkfs+0xcbe>
c0007de0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007de5:	0f 86 22 02 00 00    	jbe    c000800d <f_mkfs+0xc9c>
c0007deb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df0:	0f 85 81 06 00 00    	jne    c0008477 <f_mkfs+0x1106>
c0007df6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007df9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dfd:	83 f8 40             	cmp    eax,0x40
c0007e00:	0f 87 51 06 00 00    	ja     c0008457 <f_mkfs+0x10e6>
c0007e06:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e0a:	85 ff                	test   edi,edi
c0007e0c:	75 1c                	jne    c0007e2a <f_mkfs+0xab9>
c0007e0e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e11:	ba 60 92 02 c0       	mov    edx,0xc0029260
c0007e16:	c1 e9 0c             	shr    ecx,0xc
c0007e19:	bf 01 00 00 00       	mov    edi,0x1
c0007e1e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e21:	66 85 c0             	test   ax,ax
c0007e24:	0f 85 95 01 00 00    	jne    c0007fbf <f_mkfs+0xc4e>
c0007e2a:	31 d2                	xor    edx,edx
c0007e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e2f:	f7 f7                	div    edi
c0007e31:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e36:	0f 86 95 01 00 00    	jbe    c0007fd1 <f_mkfs+0xc60>
c0007e3c:	83 c0 02             	add    eax,0x2
c0007e3f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e44:	01 c0                	add    eax,eax
c0007e46:	05 ff 01 00 00       	add    eax,0x1ff
c0007e4b:	be 01 00 00 00       	mov    esi,0x1
c0007e50:	c1 e8 09             	shr    eax,0x9
c0007e53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e5b:	c1 e0 05             	shl    eax,0x5
c0007e5e:	c1 e8 09             	shr    eax,0x9
c0007e61:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e65:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e6a:	31 d2                	xor    edx,edx
c0007e6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e70:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e74:	89 f0                	mov    eax,esi
c0007e76:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e7a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e8a:	31 d2                	xor    edx,edx
c0007e8c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e91:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e95:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e99:	31 db                	xor    ebx,ebx
c0007e9b:	01 c8                	add    eax,ecx
c0007e9d:	11 da                	adc    edx,ebx
c0007e9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ea3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ea7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eab:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eaf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007eb3:	f7 da                	neg    edx
c0007eb5:	21 d1                	and    ecx,edx
c0007eb7:	29 d9                	sub    ecx,ebx
c0007eb9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ebe:	0f 85 20 01 00 00    	jne    c0007fe4 <f_mkfs+0xc73>
c0007ec4:	31 db                	xor    ebx,ebx
c0007ec6:	01 ce                	add    esi,ecx
c0007ec8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ecc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed0:	31 d2                	xor    edx,edx
c0007ed2:	89 f8                	mov    eax,edi
c0007ed4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ed8:	c1 e0 04             	shl    eax,0x4
c0007edb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007edf:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ee3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ee7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eeb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eee:	19 d3                	sbb    ebx,edx
c0007ef0:	0f 82 40 01 00 00    	jb     c0008036 <f_mkfs+0xcc5>
c0007ef6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ef9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efd:	89 c8                	mov    eax,ecx
c0007eff:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f04:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f08:	29 f0                	sub    eax,esi
c0007f0a:	29 d0                	sub    eax,edx
c0007f0c:	31 d2                	xor    edx,edx
c0007f0e:	f7 f7                	div    edi
c0007f10:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f15:	89 c3                	mov    ebx,eax
c0007f17:	0f 85 b8 fe ff ff    	jne    c0007dd5 <f_mkfs+0xa64>
c0007f1d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f22:	0f 87 1d 01 00 00    	ja     c0008045 <f_mkfs+0xcd4>
c0007f28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f2d:	0f 85 03 01 00 00    	jne    c0008036 <f_mkfs+0xcc5>
c0007f33:	83 ff 01             	cmp    edi,0x1
c0007f36:	0f 86 fa 00 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007f3c:	d1 ef                	shr    edi,1
c0007f3e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f46:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f49:	85 db                	test   ebx,ebx
c0007f4b:	75 2d                	jne    c0007f7a <f_mkfs+0xc09>
c0007f4d:	89 cb                	mov    ebx,ecx
c0007f4f:	ba 70 92 02 c0       	mov    edx,0xc0029270
c0007f54:	c1 eb 11             	shr    ebx,0x11
c0007f57:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f5f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f62:	66 85 c0             	test   ax,ax
c0007f65:	74 11                	je     c0007f78 <f_mkfs+0xc07>
c0007f67:	83 c2 02             	add    edx,0x2
c0007f6a:	39 d8                	cmp    eax,ebx
c0007f6c:	77 0a                	ja     c0007f78 <f_mkfs+0xc07>
c0007f6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f72:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f76:	eb e7                	jmp    c0007f5f <f_mkfs+0xbee>
c0007f78:	31 db                	xor    ebx,ebx
c0007f7a:	31 d2                	xor    edx,edx
c0007f7c:	89 c8                	mov    eax,ecx
c0007f7e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f82:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f89:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f8e:	c1 ea 09             	shr    edx,0x9
c0007f91:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f96:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f9a:	0f 87 96 00 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fa4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb0:	be 20 00 00 00       	mov    esi,0x20
c0007fb5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fba:	e9 a6 fe ff ff       	jmp    c0007e65 <f_mkfs+0xaf4>
c0007fbf:	83 c2 02             	add    edx,0x2
c0007fc2:	39 c8                	cmp    eax,ecx
c0007fc4:	0f 87 60 fe ff ff    	ja     c0007e2a <f_mkfs+0xab9>
c0007fca:	01 ff                	add    edi,edi
c0007fcc:	e9 4d fe ff ff       	jmp    c0007e1e <f_mkfs+0xaad>
c0007fd1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fd4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fd9:	40                   	inc    eax
c0007fda:	d1 e8                	shr    eax,1
c0007fdc:	83 c0 03             	add    eax,0x3
c0007fdf:	e9 62 fe ff ff       	jmp    c0007e46 <f_mkfs+0xad5>
c0007fe4:	31 d2                	xor    edx,edx
c0007fe6:	89 c8                	mov    eax,ecx
c0007fe8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fec:	85 d2                	test   edx,edx
c0007fee:	74 0c                	je     c0007ffc <f_mkfs+0xc8b>
c0007ff0:	49                   	dec    ecx
c0007ff1:	46                   	inc    esi
c0007ff2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007ff7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ffc:	89 c8                	mov    eax,ecx
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008004:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008008:	e9 c3 fe ff ff       	jmp    c0007ed0 <f_mkfs+0xb5f>
c000800d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008012:	77 31                	ja     c0008045 <f_mkfs+0xcd4>
c0008014:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008019:	75 1b                	jne    c0008036 <f_mkfs+0xcc5>
c000801b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008022:	3d 80 00 00 00       	cmp    eax,0x80
c0008027:	0f 86 d9 fd ff ff    	jbe    c0007e06 <f_mkfs+0xa95>
c000802d:	eb 07                	jmp    c0008036 <f_mkfs+0xcc5>
c000802f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008034:	76 0a                	jbe    c0008040 <f_mkfs+0xccf>
c0008036:	bb 0e 00 00 00       	mov    ebx,0xe
c000803b:	e9 ff 03 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0008040:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008045:	31 d2                	xor    edx,edx
c0008047:	b9 00 02 00 00       	mov    ecx,0x200
c000804c:	89 e8                	mov    eax,ebp
c000804e:	e8 a2 9c ff ff       	call   c0001cf5 <mem_set>
c0008053:	b9 0b 00 00 00       	mov    ecx,0xb
c0008058:	ba 82 93 02 c0       	mov    edx,0xc0029382
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 7c 9c ff ff       	call   c0001ce0 <mem_cpy>
c0008064:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008067:	ba 00 02 00 00       	mov    edx,0x200
c000806c:	e8 62 9c ff ff       	call   c0001cd3 <st_word>
c0008071:	89 f8                	mov    eax,edi
c0008073:	0f b7 d6             	movzx  edx,si
c0008076:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008079:	8d 45 0e             	lea    eax,[ebp+0xe]
c000807c:	e8 52 9c ff ff       	call   c0001cd3 <st_word>
c0008081:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008085:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000808d:	75 08                	jne    c0008097 <f_mkfs+0xd26>
c000808f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008097:	8d 45 11             	lea    eax,[ebp+0x11]
c000809a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000809e:	e8 30 9c ff ff       	call   c0001cd3 <st_word>
c00080a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00080a8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080ac:	39 d0                	cmp    eax,edx
c00080ae:	b8 00 00 00 00       	mov    eax,0x0
c00080b3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080b7:	72 0a                	jb     c00080c3 <f_mkfs+0xd52>
c00080b9:	8d 45 13             	lea    eax,[ebp+0x13]
c00080bc:	e8 12 9c ff ff       	call   c0001cd3 <st_word>
c00080c1:	eb 08                	jmp    c00080cb <f_mkfs+0xd5a>
c00080c3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080c6:	e8 0c 9c ff ff       	call   c0001cd7 <st_dword>
c00080cb:	8d 45 18             	lea    eax,[ebp+0x18]
c00080ce:	ba 3f 00 00 00       	mov    edx,0x3f
c00080d3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080d7:	e8 f7 9b ff ff       	call   c0001cd3 <st_word>
c00080dc:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080df:	ba ff 00 00 00       	mov    edx,0xff
c00080e4:	e8 ea 9b ff ff       	call   c0001cd3 <st_word>
c00080e9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f0:	e8 e2 9b ff ff       	call   c0001cd7 <st_dword>
c00080f5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080fa:	75 57                	jne    c0008153 <f_mkfs+0xde2>
c00080fc:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0008104:	e8 ce 9b ff ff       	call   c0001cd7 <st_dword>
c0008109:	8d 45 24             	lea    eax,[ebp+0x24]
c000810c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008110:	e8 c2 9b ff ff       	call   c0001cd7 <st_dword>
c0008115:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008118:	ba 02 00 00 00       	mov    edx,0x2
c000811d:	e8 b5 9b ff ff       	call   c0001cd7 <st_dword>
c0008122:	8d 45 30             	lea    eax,[ebp+0x30]
c0008125:	ba 01 00 00 00       	mov    edx,0x1
c000812a:	e8 a4 9b ff ff       	call   c0001cd3 <st_word>
c000812f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008132:	ba 06 00 00 00       	mov    edx,0x6
c0008137:	e8 97 9b ff ff       	call   c0001cd3 <st_word>
c000813c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008140:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008144:	8d 45 47             	lea    eax,[ebp+0x47]
c0008147:	b9 13 00 00 00       	mov    ecx,0x13
c000814c:	ba 8e 93 02 c0       	mov    edx,0xc002938e
c0008151:	eb 2f                	jmp    c0008182 <f_mkfs+0xe11>
c0008153:	8d 45 27             	lea    eax,[ebp+0x27]
c0008156:	ba 00 00 21 50       	mov    edx,0x50210000
c000815b:	e8 77 9b ff ff       	call   c0001cd7 <st_dword>
c0008160:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008165:	8d 45 16             	lea    eax,[ebp+0x16]
c0008168:	e8 66 9b ff ff       	call   c0001cd3 <st_word>
c000816d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008171:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008175:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008178:	b9 13 00 00 00       	mov    ecx,0x13
c000817d:	ba a2 93 02 c0       	mov    edx,0xc00293a2
c0008182:	e8 59 9b ff ff       	call   c0001ce0 <mem_cpy>
c0008187:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000818d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008192:	89 f0                	mov    eax,esi
c0008194:	e8 3a 9b ff ff       	call   c0001cd3 <st_word>
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	6a 01                	push   0x1
c000819e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a6:	55                   	push   ebp
c00081a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ab:	e8 7c 9a ff ff       	call   c0001c2c <disk_write>
c00081b0:	83 c4 20             	add    esp,0x20
c00081b3:	85 c0                	test   eax,eax
c00081b5:	0f 85 67 02 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00081bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c0:	0f 85 b7 00 00 00    	jne    c000827d <f_mkfs+0xf0c>
c00081c6:	83 ec 0c             	sub    esp,0xc
c00081c9:	6a 01                	push   0x1
c00081cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081d3:	83 c0 06             	add    eax,0x6
c00081d6:	83 d2 00             	adc    edx,0x0
c00081d9:	52                   	push   edx
c00081da:	50                   	push   eax
c00081db:	55                   	push   ebp
c00081dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e0:	e8 47 9a ff ff       	call   c0001c2c <disk_write>
c00081e5:	83 c4 20             	add    esp,0x20
c00081e8:	b9 00 02 00 00       	mov    ecx,0x200
c00081ed:	31 d2                	xor    edx,edx
c00081ef:	89 e8                	mov    eax,ebp
c00081f1:	e8 ff 9a ff ff       	call   c0001cf5 <mem_set>
c00081f6:	ba 52 52 61 41       	mov    edx,0x41615252
c00081fb:	89 e8                	mov    eax,ebp
c00081fd:	e8 d5 9a ff ff       	call   c0001cd7 <st_dword>
c0008202:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008208:	ba 72 72 41 61       	mov    edx,0x61417272
c000820d:	e8 c5 9a ff ff       	call   c0001cd7 <st_dword>
c0008212:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008215:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000821b:	e8 b7 9a ff ff       	call   c0001cd7 <st_dword>
c0008220:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008226:	ba 02 00 00 00       	mov    edx,0x2
c000822b:	e8 a7 9a ff ff       	call   c0001cd7 <st_dword>
c0008230:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008235:	89 f0                	mov    eax,esi
c0008237:	e8 97 9a ff ff       	call   c0001cd3 <st_word>
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 07             	add    eax,0x7
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 d1 99 ff ff       	call   c0001c2c <disk_write>
c000825b:	83 c4 14             	add    esp,0x14
c000825e:	6a 01                	push   0x1
c0008260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008264:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008268:	83 c0 01             	add    eax,0x1
c000826b:	83 d2 00             	adc    edx,0x0
c000826e:	52                   	push   edx
c000826f:	50                   	push   eax
c0008270:	55                   	push   ebp
c0008271:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008275:	e8 b2 99 ff ff       	call   c0001c2c <disk_write>
c000827a:	83 c4 20             	add    esp,0x20
c000827d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008284:	31 d2                	xor    edx,edx
c0008286:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000828c:	31 db                	xor    ebx,ebx
c000828e:	89 e8                	mov    eax,ebp
c0008290:	e8 60 9a ff ff       	call   c0001cf5 <mem_set>
c0008295:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000829a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a1:	0f 94 c3             	sete   bl
c00082a4:	4b                   	dec    ebx
c00082a5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082ab:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082b6:	75 21                	jne    c00082d9 <f_mkfs+0xf68>
c00082b8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 13 9a ff ff       	call   c0001cd7 <st_dword>
c00082c4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082c7:	83 ca ff             	or     edx,0xffffffff
c00082ca:	e8 08 9a ff ff       	call   c0001cd7 <st_dword>
c00082cf:	8d 45 08             	lea    eax,[ebp+0x8]
c00082d2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082d7:	eb 04                	jmp    c00082dd <f_mkfs+0xf6c>
c00082d9:	89 da                	mov    edx,ebx
c00082db:	89 e8                	mov    eax,ebp
c00082dd:	e8 f5 99 ff ff       	call   c0001cd7 <st_dword>
c00082e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082ea:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082f2:	39 ce                	cmp    esi,ecx
c00082f4:	76 02                	jbe    c00082f8 <f_mkfs+0xf87>
c00082f6:	89 ce                	mov    esi,ecx
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	56                   	push   esi
c00082fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008300:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008304:	55                   	push   ebp
c0008305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008309:	e8 1e 99 ff ff       	call   c0001c2c <disk_write>
c000830e:	83 c4 20             	add    esp,0x20
c0008311:	85 c0                	test   eax,eax
c0008313:	0f 85 09 01 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008319:	31 d2                	xor    edx,edx
c000831b:	b9 00 02 00 00       	mov    ecx,0x200
c0008320:	89 e8                	mov    eax,ebp
c0008322:	e8 ce 99 ff ff       	call   c0001cf5 <mem_set>
c0008327:	31 d2                	xor    edx,edx
c0008329:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000832d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008331:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008335:	75 b3                	jne    c00082ea <f_mkfs+0xf79>
c0008337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000833a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008341:	40                   	inc    eax
c0008342:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008346:	0f 87 65 ff ff ff    	ja     c00082b1 <f_mkfs+0xf40>
c000834c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008351:	74 04                	je     c0008357 <f_mkfs+0xfe6>
c0008353:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008357:	89 fb                	mov    ebx,edi
c0008359:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000835d:	76 04                	jbe    c0008363 <f_mkfs+0xff2>
c000835f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008363:	83 ec 0c             	sub    esp,0xc
c0008366:	53                   	push   ebx
c0008367:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836f:	55                   	push   ebp
c0008370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008374:	e8 b3 98 ff ff       	call   c0001c2c <disk_write>
c0008379:	83 c4 20             	add    esp,0x20
c000837c:	85 c0                	test   eax,eax
c000837e:	0f 85 9e 00 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008384:	31 d2                	xor    edx,edx
c0008386:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000838a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000838e:	29 df                	sub    edi,ebx
c0008390:	75 c5                	jne    c0008357 <f_mkfs+0xfe6>
c0008392:	b1 0c                	mov    cl,0xc
c0008394:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008399:	74 1d                	je     c00083b8 <f_mkfs+0x1047>
c000839b:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a0:	b1 06                	mov    cl,0x6
c00083a2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083a6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083aa:	72 0c                	jb     c00083b8 <f_mkfs+0x1047>
c00083ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b1:	0f 94 c1             	sete   cl
c00083b4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083b8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083bd:	75 4c                	jne    c000840b <f_mkfs+0x109a>
c00083bf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083c3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083d5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083eb:	0f b6 c9             	movzx  ecx,cl
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	55                   	push   ebp
c00083f2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083fd:	e8 2f c2 ff ff       	call   c0004631 <create_partition>
c0008402:	83 c4 10             	add    esp,0x10
c0008405:	89 c3                	mov    ebx,eax
c0008407:	85 c0                	test   eax,eax
c0008409:	75 34                	jne    c000843f <f_mkfs+0x10ce>
c000840b:	31 db                	xor    ebx,ebx
c000840d:	50                   	push   eax
c000840e:	6a 00                	push   0x0
c0008410:	6a 00                	push   0x0
c0008412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008416:	e8 27 98 ff ff       	call   c0001c42 <disk_ioctl>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	85 c0                	test   eax,eax
c0008420:	74 1d                	je     c000843f <f_mkfs+0x10ce>
c0008422:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000842a:	75 0c                	jne    c0008438 <f_mkfs+0x10c7>
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	55                   	push   ebp
c0008430:	e8 75 00 00 00       	call   c00084aa <ff_memfree>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	bb 01 00 00 00       	mov    ebx,0x1
c000843d:	eb 48                	jmp    c0008487 <f_mkfs+0x1116>
c000843f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008447:	75 3e                	jne    c0008487 <f_mkfs+0x1116>
c0008449:	83 ec 0c             	sub    esp,0xc
c000844c:	55                   	push   ebp
c000844d:	e8 58 00 00 00       	call   c00084aa <ff_memfree>
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	eb 30                	jmp    c0008487 <f_mkfs+0x1116>
c0008457:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845c:	0f 85 eb fa ff ff    	jne    c0007f4d <f_mkfs+0xbdc>
c0008462:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008466:	81 ff 80 00 00 00    	cmp    edi,0x80
c000846c:	0f 86 b8 f9 ff ff    	jbe    c0007e2a <f_mkfs+0xab9>
c0008472:	e9 bf fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008477:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000847c:	0f 85 c0 fa ff ff    	jne    c0007f42 <f_mkfs+0xbd1>
c0008482:	e9 af fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008487:	81 c4 9c 00 00 00    	add    esp,0x9c
c000848d:	89 d8                	mov    eax,ebx
c000848f:	5b                   	pop    ebx
c0008490:	5e                   	pop    esi
c0008491:	5f                   	pop    edi
c0008492:	5d                   	pop    ebp
c0008493:	c3                   	ret    

c0008494 <ff_memalloc>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	83 ec 0c             	sub    esp,0xc
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	e8 9d 73 00 00       	call   c000f840 <malloc>
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	83 c4 0c             	add    esp,0xc
c00084a9:	c3                   	ret    

c00084aa <ff_memfree>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 97 73 00 00       	call   c000f850 <free>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	90                   	nop
c00084bd:	83 c4 0c             	add    esp,0xc
c00084c0:	c3                   	ret    

c00084c1 <ff_uni2oem>:
c00084c1:	83 ec 14             	sub    esp,0x14
c00084c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084cc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084d3:	c7 44 24 0c c0 96 02 c0 	mov    DWORD PTR [esp+0xc],0xc00296c0
c00084db:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e0:	77 0b                	ja     c00084ed <ff_uni2oem+0x2c>
c00084e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084eb:	eb 5b                	jmp    c0008548 <ff_uni2oem+0x87>
c00084ed:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084f5:	77 51                	ja     c0008548 <ff_uni2oem+0x87>
c00084f7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084fd:	75 49                	jne    c0008548 <ff_uni2oem+0x87>
c00084ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008506:	eb 0b                	jmp    c0008513 <ff_uni2oem+0x52>
c0008508:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000850d:	40                   	inc    eax
c000850e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008513:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008519:	77 1b                	ja     c0008536 <ff_uni2oem+0x75>
c000851b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008520:	01 c0                	add    eax,eax
c0008522:	89 c2                	mov    edx,eax
c0008524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008528:	01 d0                	add    eax,edx
c000852a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000852d:	0f b7 c0             	movzx  eax,ax
c0008530:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008534:	75 d2                	jne    c0008508 <ff_uni2oem+0x47>
c0008536:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000853b:	83 e8 80             	sub    eax,0xffffff80
c000853e:	25 ff 00 00 00       	and    eax,0xff
c0008543:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008548:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000854d:	83 c4 14             	add    esp,0x14
c0008550:	c3                   	ret    

c0008551 <ff_oem2uni>:
c0008551:	83 ec 18             	sub    esp,0x18
c0008554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000855c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008561:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008565:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000856c:	c7 44 24 10 c0 96 02 c0 	mov    DWORD PTR [esp+0x10],0xc00296c0
c0008574:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000857a:	77 0b                	ja     c0008587 <ff_oem2uni+0x36>
c000857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008580:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008585:	eb 2d                	jmp    c00085b4 <ff_oem2uni+0x63>
c0008587:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000858d:	75 25                	jne    c00085b4 <ff_oem2uni+0x63>
c000858f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008596:	77 1c                	ja     c00085b4 <ff_oem2uni+0x63>
c0008598:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000859d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085a2:	01 c0                	add    eax,eax
c00085a4:	89 c2                	mov    edx,eax
c00085a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085aa:	01 d0                	add    eax,edx
c00085ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085af:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085b4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085b9:	83 c4 18             	add    esp,0x18
c00085bc:	c3                   	ret    

c00085bd <ff_wtoupper>:
c00085bd:	83 ec 10             	sub    esp,0x10
c00085c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085c8:	0f 87 3e 01 00 00    	ja     c000870c <ff_wtoupper+0x14f>
c00085ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085d7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085de:	77 07                	ja     c00085e7 <ff_wtoupper+0x2a>
c00085e0:	b8 c0 94 02 c0       	mov    eax,0xc00294c0
c00085e5:	eb 05                	jmp    c00085ec <ff_wtoupper+0x2f>
c00085e7:	b8 00 94 02 c0       	mov    eax,0xc0029400
c00085ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085f4:	8d 50 02             	lea    edx,[eax+0x2]
c00085f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008603:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008609:	0f 84 f4 00 00 00    	je     c0008703 <ff_wtoupper+0x146>
c000860f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008614:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008619:	0f 82 e4 00 00 00    	jb     c0008703 <ff_wtoupper+0x146>
c000861f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008623:	8d 50 02             	lea    edx,[eax+0x2]
c0008626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000862a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000862d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008632:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008637:	66 c1 e8 08          	shr    ax,0x8
c000863b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008640:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008647:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000864c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008651:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008656:	01 ca                	add    edx,ecx
c0008658:	39 d0                	cmp    eax,edx
c000865a:	0f 8d 86 00 00 00    	jge    c00086e6 <ff_wtoupper+0x129>
c0008660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008665:	83 f8 08             	cmp    eax,0x8
c0008668:	0f 87 94 00 00 00    	ja     c0008702 <ff_wtoupper+0x145>
c000866e:	8b 04 85 c0 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6c40]
c0008675:	ff e0                	jmp    eax
c0008677:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000867c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008681:	29 c2                	sub    edx,eax
c0008683:	89 d0                	mov    eax,edx
c0008685:	01 c0                	add    eax,eax
c0008687:	89 c2                	mov    edx,eax
c0008689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000868d:	01 d0                	add    eax,edx
c000868f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008692:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008697:	eb 4b                	jmp    c00086e4 <ff_wtoupper+0x127>
c0008699:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000869e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086a2:	83 e0 01             	and    eax,0x1
c00086a5:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086aa:	eb 38                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086ac:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086b2:	eb 30                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086ba:	eb 28                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086c2:	eb 20                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ca:	eb 18                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086cc:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086d2:	eb 10                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086d4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086da:	eb 08                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086dc:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086e3:	90                   	nop
c00086e4:	eb 1c                	jmp    c0008702 <ff_wtoupper+0x145>
c00086e6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ec:	0f 85 fe fe ff ff    	jne    c00085f0 <ff_wtoupper+0x33>
c00086f2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086f7:	01 c0                	add    eax,eax
c00086f9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086fd:	e9 ee fe ff ff       	jmp    c00085f0 <ff_wtoupper+0x33>
c0008702:	90                   	nop
c0008703:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008708:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000870c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008710:	83 c4 10             	add    esp,0x10
c0008713:	c3                   	ret    

c0008714 <psrc_set_converter>:
c0008714:	56                   	push   esi
c0008715:	89 d6                	mov    esi,edx
c0008717:	53                   	push   ebx
c0008718:	89 c3                	mov    ebx,eax
c000871a:	83 ec 0c             	sub    esp,0xc
c000871d:	52                   	push   edx
c000871e:	50                   	push   eax
c000871f:	e8 6f 55 00 00       	call   c000dc93 <sinc_set_converter>
c0008724:	83 c4 10             	add    esp,0x10
c0008727:	85 c0                	test   eax,eax
c0008729:	74 25                	je     c0008750 <psrc_set_converter+0x3c>
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	56                   	push   esi
c000872e:	53                   	push   ebx
c000872f:	e8 17 5d 00 00       	call   c000e44b <zoh_set_converter>
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	85 c0                	test   eax,eax
c0008739:	74 15                	je     c0008750 <psrc_set_converter+0x3c>
c000873b:	51                   	push   ecx
c000873c:	51                   	push   ecx
c000873d:	56                   	push   esi
c000873e:	53                   	push   ebx
c000873f:	e8 0f 11 00 00       	call   c0009853 <linear_set_converter>
c0008744:	83 c4 10             	add    esp,0x10
c0008747:	ba 0a 00 00 00       	mov    edx,0xa
c000874c:	85 c0                	test   eax,eax
c000874e:	75 02                	jne    c0008752 <psrc_set_converter+0x3e>
c0008750:	31 d2                	xor    edx,edx
c0008752:	89 d0                	mov    eax,edx
c0008754:	5a                   	pop    edx
c0008755:	5b                   	pop    ebx
c0008756:	5e                   	pop    esi
c0008757:	c3                   	ret    

c0008758 <src_delete>:
c0008758:	53                   	push   ebx
c0008759:	83 ec 08             	sub    esp,0x8
c000875c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008760:	85 db                	test   ebx,ebx
c0008762:	74 29                	je     c000878d <src_delete+0x35>
c0008764:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <src_delete+0x1f>
c000876b:	83 ec 0c             	sub    esp,0xc
c000876e:	50                   	push   eax
c000876f:	e8 dc 70 00 00       	call   c000f850 <free>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	50                   	push   eax
c0008778:	6a 3c                	push   0x3c
c000877a:	6a 00                	push   0x0
c000877c:	53                   	push   ebx
c000877d:	e8 f6 7f ff ff       	call   c0000778 <memset>
c0008782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008785:	e8 c6 70 00 00       	call   c000f850 <free>
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	31 c0                	xor    eax,eax
c000878f:	83 c4 08             	add    esp,0x8
c0008792:	5b                   	pop    ebx
c0008793:	c3                   	ret    

c0008794 <src_process>:
c0008794:	55                   	push   ebp
c0008795:	57                   	push   edi
c0008796:	56                   	push   esi
c0008797:	53                   	push   ebx
c0008798:	83 ec 1c             	sub    esp,0x1c
c000879b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000879f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087a3:	85 ed                	test   ebp,ebp
c00087a5:	0f 84 6f 01 00 00    	je     c000891a <src_process+0x186>
c00087ab:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087af:	0f 84 6c 01 00 00    	je     c0008921 <src_process+0x18d>
c00087b5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087b9:	0f 84 62 01 00 00    	je     c0008921 <src_process+0x18d>
c00087bf:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087c6:	0f 85 5c 01 00 00    	jne    c0008928 <src_process+0x194>
c00087cc:	85 db                	test   ebx,ebx
c00087ce:	0f 84 5b 01 00 00    	je     c000892f <src_process+0x19b>
c00087d4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087d6:	85 f6                	test   esi,esi
c00087d8:	0f 84 58 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e1:	85 ff                	test   edi,edi
c00087e3:	0f 84 4d 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	68 00 00 70 3f       	push   0x3f700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 74 fb 01 00       	call   c002837f <__ltdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 88 27 01 00 00    	js     c000893d <src_process+0x1a9>
c0008816:	68 00 00 70 40       	push   0x40700000
c000881b:	6a 00                	push   0x0
c000881d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008825:	e8 37 fb 01 00       	call   c0028361 <__gtdf2>
c000882a:	83 c4 10             	add    esp,0x10
c000882d:	85 c0                	test   eax,eax
c000882f:	0f 8f 08 01 00 00    	jg     c000893d <src_process+0x1a9>
c0008835:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008839:	79 07                	jns    c0008842 <src_process+0xae>
c000883b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008842:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008845:	85 c0                	test   eax,eax
c0008847:	79 50                	jns    c0008899 <src_process+0x105>
c0008849:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008850:	39 fe                	cmp    esi,edi
c0008852:	72 37                	jb     c000888b <src_process+0xf7>
c0008854:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000885b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008862:	68 00 00 70 3f       	push   0x3f700000
c0008867:	6a 00                	push   0x0
c0008869:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000886c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000886f:	e8 0b fb 01 00       	call   c002837f <__ltdf2>
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	85 c0                	test   eax,eax
c0008879:	79 37                	jns    c00088b2 <src_process+0x11e>
c000887b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000887f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008883:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008886:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008889:	eb 27                	jmp    c00088b2 <src_process+0x11e>
c000888b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000888e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008892:	8d 04 86             	lea    eax,[esi+eax*4]
c0008895:	39 c7                	cmp    edi,eax
c0008897:	eb 0d                	jmp    c00088a6 <src_process+0x112>
c0008899:	39 fe                	cmp    esi,edi
c000889b:	72 ee                	jb     c000888b <src_process+0xf7>
c000889d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a1:	8d 04 87             	lea    eax,[edi+eax*4]
c00088a4:	39 c6                	cmp    esi,eax
c00088a6:	73 ac                	jae    c0008854 <src_process+0xc0>
c00088a8:	b8 10 00 00 00       	mov    eax,0x10
c00088ad:	e9 90 00 00 00       	jmp    c0008942 <src_process+0x1ae>
c00088b2:	83 ec 10             	sub    esp,0x10
c00088b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c1:	e8 be f1 01 00       	call   c0027a84 <__subdf3>
c00088c6:	83 c4 18             	add    esp,0x18
c00088c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d1:	52                   	push   edx
c00088d2:	50                   	push   eax
c00088d3:	e8 38 fc 01 00       	call   c0028510 <fabs>
c00088d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e0:	83 c4 10             	add    esp,0x10
c00088e3:	68 af 03 d2 3c       	push   0x3cd203af
c00088e8:	68 16 56 e7 9e       	push   0x9ee75616
c00088ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f5:	e8 85 fa 01 00       	call   c002837f <__ltdf2>
c00088fa:	83 c4 10             	add    esp,0x10
c00088fd:	85 c0                	test   eax,eax
c00088ff:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008903:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008907:	79 05                	jns    c000890e <src_process+0x17a>
c0008909:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000890c:	eb 03                	jmp    c0008911 <src_process+0x17d>
c000890e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008911:	83 c4 1c             	add    esp,0x1c
c0008914:	5b                   	pop    ebx
c0008915:	5e                   	pop    esi
c0008916:	5f                   	pop    edi
c0008917:	5d                   	pop    ebp
c0008918:	ff e0                	jmp    eax
c000891a:	b8 02 00 00 00       	mov    eax,0x2
c000891f:	eb 21                	jmp    c0008942 <src_process+0x1ae>
c0008921:	b8 07 00 00 00       	mov    eax,0x7
c0008926:	eb 1a                	jmp    c0008942 <src_process+0x1ae>
c0008928:	b8 12 00 00 00       	mov    eax,0x12
c000892d:	eb 13                	jmp    c0008942 <src_process+0x1ae>
c000892f:	b8 03 00 00 00       	mov    eax,0x3
c0008934:	eb 0c                	jmp    c0008942 <src_process+0x1ae>
c0008936:	b8 04 00 00 00       	mov    eax,0x4
c000893b:	eb 05                	jmp    c0008942 <src_process+0x1ae>
c000893d:	b8 06 00 00 00       	mov    eax,0x6
c0008942:	83 c4 1c             	add    esp,0x1c
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	5f                   	pop    edi
c0008948:	5d                   	pop    ebp
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 3c             	sub    esp,0x3c
c0008951:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008955:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008959:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000895d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008961:	85 ed                	test   ebp,ebp
c0008963:	0f 8e 52 01 00 00    	jle    c0008abb <src_callback_read+0x171>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 4a 01 00 00    	je     c0008abb <src_callback_read+0x171>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 35 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 23 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a1:	50                   	push   eax
c00089a2:	e8 d1 7d ff ff       	call   c0000778 <memset>
c00089a7:	83 c4 10             	add    esp,0x10
c00089aa:	68 00 00 70 3f       	push   0x3f700000
c00089af:	6a 00                	push   0x0
c00089b1:	57                   	push   edi
c00089b2:	56                   	push   esi
c00089b3:	e8 c7 f9 01 00       	call   c002837f <__ltdf2>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	85 c0                	test   eax,eax
c00089bd:	78 3e                	js     c00089fd <src_callback_read+0xb3>
c00089bf:	68 00 00 70 40       	push   0x40700000
c00089c4:	6a 00                	push   0x0
c00089c6:	57                   	push   edi
c00089c7:	56                   	push   esi
c00089c8:	e8 94 f9 01 00       	call   c0028361 <__gtdf2>
c00089cd:	83 c4 10             	add    esp,0x10
c00089d0:	85 c0                	test   eax,eax
c00089d2:	7f 29                	jg     c00089fd <src_callback_read+0xb3>
c00089d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089d8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089e4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089e7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089ef:	31 f6                	xor    esi,esi
c00089f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089f8:	e9 97 00 00 00       	jmp    c0008a94 <src_callback_read+0x14a>
c00089fd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a04:	e9 b2 00 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008a09:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a11:	52                   	push   edx
c0008a12:	52                   	push   edx
c0008a13:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a17:	50                   	push   eax
c0008a18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a1b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a2a:	83 c4 10             	add    esp,0x10
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 08                	jne    c0008a39 <src_callback_read+0xef>
c0008a31:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a39:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a40:	50                   	push   eax
c0008a41:	50                   	push   eax
c0008a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a46:	50                   	push   eax
c0008a47:	53                   	push   ebx
c0008a48:	e8 47 fd ff ff       	call   c0008794 <src_process>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 49                	jne    c0008aa4 <src_callback_read+0x15a>
c0008a5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a5f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a62:	89 f9                	mov    ecx,edi
c0008a64:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a68:	0f af ca             	imul   ecx,edx
c0008a6b:	c1 e1 02             	shl    ecx,0x2
c0008a6e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a76:	0f af d1             	imul   edx,ecx
c0008a79:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a7d:	c1 e2 02             	shl    edx,0x2
c0008a80:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a84:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a87:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a8c:	74 12                	je     c0008aa0 <src_callback_read+0x156>
c0008a8e:	39 d5                	cmp    ebp,edx
c0008a90:	7e 14                	jle    c0008aa6 <src_callback_read+0x15c>
c0008a92:	89 d6                	mov    esi,edx
c0008a94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a99:	75 9e                	jne    c0008a39 <src_callback_read+0xef>
c0008a9b:	e9 69 ff ff ff       	jmp    c0008a09 <src_callback_read+0xbf>
c0008aa0:	85 c9                	test   ecx,ecx
c0008aa2:	75 ea                	jne    c0008a8e <src_callback_read+0x144>
c0008aa4:	89 f2                	mov    edx,esi
c0008aa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008aaa:	85 c0                	test   eax,eax
c0008aac:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008aaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ab6:	74 05                	je     c0008abd <src_callback_read+0x173>
c0008ab8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008abb:	31 d2                	xor    edx,edx
c0008abd:	83 c4 3c             	add    esp,0x3c
c0008ac0:	89 d0                	mov    eax,edx
c0008ac2:	5b                   	pop    ebx
c0008ac3:	5e                   	pop    esi
c0008ac4:	5f                   	pop    edi
c0008ac5:	5d                   	pop    ebp
c0008ac6:	c3                   	ret    

c0008ac7 <src_set_ratio>:
c0008ac7:	57                   	push   edi
c0008ac8:	ba 02 00 00 00       	mov    edx,0x2
c0008acd:	56                   	push   esi
c0008ace:	53                   	push   ebx
c0008acf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ad3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008adb:	85 db                	test   ebx,ebx
c0008add:	74 4c                	je     c0008b2b <src_set_ratio+0x64>
c0008adf:	ba 07 00 00 00       	mov    edx,0x7
c0008ae4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ae8:	74 41                	je     c0008b2b <src_set_ratio+0x64>
c0008aea:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008aee:	74 3b                	je     c0008b2b <src_set_ratio+0x64>
c0008af0:	68 00 00 70 3f       	push   0x3f700000
c0008af5:	6a 00                	push   0x0
c0008af7:	57                   	push   edi
c0008af8:	56                   	push   esi
c0008af9:	e8 81 f8 01 00       	call   c002837f <__ltdf2>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	ba 06 00 00 00       	mov    edx,0x6
c0008b06:	85 c0                	test   eax,eax
c0008b08:	78 21                	js     c0008b2b <src_set_ratio+0x64>
c0008b0a:	68 00 00 70 40       	push   0x40700000
c0008b0f:	6a 00                	push   0x0
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	e8 49 f8 01 00       	call   c0028361 <__gtdf2>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	ba 06 00 00 00       	mov    edx,0x6
c0008b20:	85 c0                	test   eax,eax
c0008b22:	7f 07                	jg     c0008b2b <src_set_ratio+0x64>
c0008b24:	89 33                	mov    DWORD PTR [ebx],esi
c0008b26:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b29:	31 d2                	xor    edx,edx
c0008b2b:	5b                   	pop    ebx
c0008b2c:	89 d0                	mov    eax,edx
c0008b2e:	5e                   	pop    esi
c0008b2f:	5f                   	pop    edi
c0008b30:	c3                   	ret    

c0008b31 <src_get_channels>:
c0008b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	85 d2                	test   edx,edx
c0008b3c:	74 14                	je     c0008b52 <src_get_channels+0x21>
c0008b3e:	b8 07 00 00 00       	mov    eax,0x7
c0008b43:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b47:	74 09                	je     c0008b52 <src_get_channels+0x21>
c0008b49:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b4d:	74 03                	je     c0008b52 <src_get_channels+0x21>
c0008b4f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b52:	c3                   	ret    

c0008b53 <src_reset>:
c0008b53:	53                   	push   ebx
c0008b54:	b8 02 00 00 00       	mov    eax,0x2
c0008b59:	83 ec 08             	sub    esp,0x8
c0008b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b60:	85 db                	test   ebx,ebx
c0008b62:	74 36                	je     c0008b9a <src_reset+0x47>
c0008b64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b67:	85 c0                	test   eax,eax
c0008b69:	74 09                	je     c0008b74 <src_reset+0x21>
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	53                   	push   ebx
c0008b6f:	ff d0                	call   eax
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	31 c0                	xor    eax,eax
c0008b76:	31 d2                	xor    edx,edx
c0008b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b7b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b80:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b83:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b8a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	83 c4 08             	add    esp,0x8
c0008b9d:	5b                   	pop    ebx
c0008b9e:	c3                   	ret    

c0008b9f <src_new>:
c0008b9f:	57                   	push   edi
c0008ba0:	56                   	push   esi
c0008ba1:	53                   	push   ebx
c0008ba2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008ba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008baa:	85 f6                	test   esi,esi
c0008bac:	74 73                	je     c0008c21 <src_new+0x82>
c0008bae:	85 ff                	test   edi,edi
c0008bb0:	7f 08                	jg     c0008bba <src_new+0x1b>
c0008bb2:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bb8:	eb 1e                	jmp    c0008bd8 <src_new+0x39>
c0008bba:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc0:	50                   	push   eax
c0008bc1:	50                   	push   eax
c0008bc2:	6a 3c                	push   0x3c
c0008bc4:	6a 01                	push   0x1
c0008bc6:	e8 a5 6c 00 00       	call   c000f870 <calloc>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	89 c3                	mov    ebx,eax
c0008bd0:	85 c0                	test   eax,eax
c0008bd2:	75 10                	jne    c0008be4 <src_new+0x45>
c0008bd4:	85 f6                	test   esi,esi
c0008bd6:	75 04                	jne    c0008bdc <src_new+0x3d>
c0008bd8:	31 db                	xor    ebx,ebx
c0008bda:	eb 4b                	jmp    c0008c27 <src_new+0x88>
c0008bdc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008be2:	eb 43                	jmp    c0008c27 <src_new+0x88>
c0008be4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008be7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bf2:	e8 1d fb ff ff       	call   c0008714 <psrc_set_converter>
c0008bf7:	85 c0                	test   eax,eax
c0008bf9:	74 18                	je     c0008c13 <src_new+0x74>
c0008bfb:	85 f6                	test   esi,esi
c0008bfd:	74 06                	je     c0008c05 <src_new+0x66>
c0008bff:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c05:	83 ec 0c             	sub    esp,0xc
c0008c08:	53                   	push   ebx
c0008c09:	31 db                	xor    ebx,ebx
c0008c0b:	e8 40 6c 00 00       	call   c000f850 <free>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	83 ec 0c             	sub    esp,0xc
c0008c16:	53                   	push   ebx
c0008c17:	e8 37 ff ff ff       	call   c0008b53 <src_reset>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	eb 06                	jmp    c0008c27 <src_new+0x88>
c0008c21:	85 ff                	test   edi,edi
c0008c23:	7f 9b                	jg     c0008bc0 <src_new+0x21>
c0008c25:	eb b1                	jmp    c0008bd8 <src_new+0x39>
c0008c27:	89 d8                	mov    eax,ebx
c0008c29:	5b                   	pop    ebx
c0008c2a:	5e                   	pop    esi
c0008c2b:	5f                   	pop    edi
c0008c2c:	c3                   	ret    

c0008c2d <src_callback_new>:
c0008c2d:	56                   	push   esi
c0008c2e:	53                   	push   ebx
c0008c2f:	53                   	push   ebx
c0008c30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	85 f6                	test   esi,esi
c0008c3a:	75 0e                	jne    c0008c4a <src_callback_new+0x1d>
c0008c3c:	31 db                	xor    ebx,ebx
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	74 47                	je     c0008c89 <src_callback_new+0x5c>
c0008c42:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c48:	eb 3f                	jmp    c0008c89 <src_callback_new+0x5c>
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 06                	je     c0008c54 <src_callback_new+0x27>
c0008c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c54:	51                   	push   ecx
c0008c55:	50                   	push   eax
c0008c56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5e:	e8 3c ff ff ff       	call   c0008b9f <src_new>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	89 c3                	mov    ebx,eax
c0008c68:	85 c0                	test   eax,eax
c0008c6a:	74 1d                	je     c0008c89 <src_callback_new+0x5c>
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 de fe ff ff       	call   c0008b53 <src_reset>
c0008c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c79:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c80:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c83:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c86:	83 c4 10             	add    esp,0x10
c0008c89:	89 d8                	mov    eax,ebx
c0008c8b:	5a                   	pop    edx
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_get_name>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 d0 4f 00 00       	call   c000dc6d <sinc_get_name>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_name+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 80 57 00 00       	call   c000e42d <zoh_get_name>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_name+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 74 0b 00 00       	jmp    c0009835 <linear_get_name>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_description>:
c0008cc6:	53                   	push   ebx
c0008cc7:	83 ec 14             	sub    esp,0x14
c0008cca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cce:	53                   	push   ebx
c0008ccf:	e8 ac 4f 00 00       	call   c000dc80 <sinc_get_description>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	85 c0                	test   eax,eax
c0008cd9:	75 1d                	jne    c0008cf8 <src_get_description+0x32>
c0008cdb:	83 ec 0c             	sub    esp,0xc
c0008cde:	53                   	push   ebx
c0008cdf:	e8 58 57 00 00       	call   c000e43c <zoh_get_description>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	85 c0                	test   eax,eax
c0008ce9:	75 0d                	jne    c0008cf8 <src_get_description+0x32>
c0008ceb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cef:	83 c4 08             	add    esp,0x8
c0008cf2:	5b                   	pop    ebx
c0008cf3:	e9 4c 0b 00 00       	jmp    c0009844 <linear_get_description>
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	c3                   	ret    

c0008cfd <src_get_version>:
c0008cfd:	b8 c0 97 02 c0       	mov    eax,0xc00297c0
c0008d02:	c3                   	ret    

c0008d03 <src_is_valid_ratio>:
c0008d03:	83 ec 1c             	sub    esp,0x1c
c0008d06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d16:	68 00 00 70 3f       	push   0x3f700000
c0008d1b:	6a 00                	push   0x0
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 55 f6 01 00       	call   c002837f <__ltdf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	31 d2                	xor    edx,edx
c0008d2f:	85 c0                	test   eax,eax
c0008d31:	78 1e                	js     c0008d51 <src_is_valid_ratio+0x4e>
c0008d33:	68 00 00 70 40       	push   0x40700000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 1a f6 01 00       	call   c0028361 <__gtdf2>
c0008d47:	31 d2                	xor    edx,edx
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	85 c0                	test   eax,eax
c0008d4e:	0f 9e c2             	setle  dl
c0008d51:	89 d0                	mov    eax,edx
c0008d53:	83 c4 1c             	add    esp,0x1c
c0008d56:	c3                   	ret    

c0008d57 <src_error>:
c0008d57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d5b:	31 c0                	xor    eax,eax
c0008d5d:	85 d2                	test   edx,edx
c0008d5f:	74 03                	je     c0008d64 <src_error+0xd>
c0008d61:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d64:	c3                   	ret    

c0008d65 <src_strerror>:
c0008d65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d69:	31 c0                	xor    eax,eax
c0008d6b:	83 fa 17             	cmp    edx,0x17
c0008d6e:	77 07                	ja     c0008d77 <src_strerror+0x12>
c0008d70:	8b 04 95 20 9c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd63e0]
c0008d77:	c3                   	ret    

c0008d78 <src_simple>:
c0008d78:	56                   	push   esi
c0008d79:	53                   	push   ebx
c0008d7a:	83 ec 18             	sub    esp,0x18
c0008d7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d85:	50                   	push   eax
c0008d86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8e:	e8 0c fe ff ff       	call   c0008b9f <src_new>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	75 06                	jne    c0008da0 <src_simple+0x28>
c0008d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9e:	eb 25                	jmp    c0008dc5 <src_simple+0x4d>
c0008da0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008da7:	89 c3                	mov    ebx,eax
c0008da9:	50                   	push   eax
c0008daa:	50                   	push   eax
c0008dab:	56                   	push   esi
c0008dac:	53                   	push   ebx
c0008dad:	e8 e2 f9 ff ff       	call   c0008794 <src_process>
c0008db2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008db9:	e8 9a f9 ff ff       	call   c0008758 <src_delete>
c0008dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dc2:	83 c4 10             	add    esp,0x10
c0008dc5:	83 c4 14             	add    esp,0x14
c0008dc8:	5b                   	pop    ebx
c0008dc9:	5e                   	pop    esi
c0008dca:	c3                   	ret    

c0008dcb <src_short_to_float_array>:
c0008dcb:	53                   	push   ebx
c0008dcc:	83 ec 18             	sub    esp,0x18
c0008dcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dd3:	85 db                	test   ebx,ebx
c0008dd5:	74 54                	je     c0008e2b <src_short_to_float_array+0x60>
c0008dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddb:	4b                   	dec    ebx
c0008ddc:	83 ec 0c             	sub    esp,0xc
c0008ddf:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008de3:	50                   	push   eax
c0008de4:	e8 2a f3 01 00       	call   c0028113 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008df4:	68 00 00 00 3f       	push   0x3f000000
c0008df9:	6a 00                	push   0x0
c0008dfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	e8 a8 ec 01 00       	call   c0027ab0 <__muldf3>
c0008e08:	59                   	pop    ecx
c0008e09:	59                   	pop    ecx
c0008e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1a:	e8 64 f5 01 00       	call   c0028383 <__truncdfsf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e26:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e29:	eb a8                	jmp    c0008dd3 <src_short_to_float_array+0x8>
c0008e2b:	83 c4 18             	add    esp,0x18
c0008e2e:	5b                   	pop    ebx
c0008e2f:	c3                   	ret    

c0008e30 <src_float_to_short_array>:
c0008e30:	56                   	push   esi
c0008e31:	53                   	push   ebx
c0008e32:	83 ec 14             	sub    esp,0x14
c0008e35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e3d:	85 db                	test   ebx,ebx
c0008e3f:	0f 84 a4 00 00 00    	je     c0008ee9 <src_float_to_short_array+0xb9>
c0008e45:	83 ec 0c             	sub    esp,0xc
c0008e48:	4b                   	dec    ebx
c0008e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e4d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e50:	e8 52 f6 01 00       	call   c00284a7 <__extendsfdf2>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 00 00 e0 41       	push   0x41e00000
c0008e65:	6a 00                	push   0x0
c0008e67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	e8 3c ec 01 00       	call   c0027ab0 <__muldf3>
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e7f:	68 ff ff df 41       	push   0x41dfffff
c0008e84:	68 00 00 c0 ff       	push   0xffc00000
c0008e89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	e8 e7 f4 01 00       	call   c002837d <__gedf2>
c0008e96:	83 c4 10             	add    esp,0x10
c0008e99:	85 c0                	test   eax,eax
c0008e9b:	78 08                	js     c0008ea5 <src_float_to_short_array+0x75>
c0008e9d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ea3:	eb 98                	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ea5:	68 00 00 e0 c1       	push   0xc1e00000
c0008eaa:	6a 00                	push   0x0
c0008eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb4:	e8 c8 f4 01 00       	call   c0028381 <__ledf2>
c0008eb9:	83 c4 10             	add    esp,0x10
c0008ebc:	85 c0                	test   eax,eax
c0008ebe:	7f 0b                	jg     c0008ecb <src_float_to_short_array+0x9b>
c0008ec0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ec6:	e9 72 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ecb:	50                   	push   eax
c0008ecc:	50                   	push   eax
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 56 f6 01 00       	call   c0028530 <lrint>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	c1 f8 10             	sar    eax,0x10
c0008ee0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ee4:	e9 54 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ee9:	83 c4 14             	add    esp,0x14
c0008eec:	5b                   	pop    ebx
c0008eed:	5e                   	pop    esi
c0008eee:	c3                   	ret    

c0008eef <src_int_to_float_array>:
c0008eef:	53                   	push   ebx
c0008ef0:	83 ec 18             	sub    esp,0x18
c0008ef3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ef7:	85 db                	test   ebx,ebx
c0008ef9:	74 52                	je     c0008f4d <src_int_to_float_array+0x5e>
c0008efb:	83 ec 0c             	sub    esp,0xc
c0008efe:	4b                   	dec    ebx
c0008eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f03:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f06:	e8 08 f2 01 00       	call   c0028113 <__floatsidf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f16:	68 00 00 00 3e       	push   0x3e000000
c0008f1b:	6a 00                	push   0x0
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f25:	e8 86 eb 01 00       	call   c0027ab0 <__muldf3>
c0008f2a:	59                   	pop    ecx
c0008f2b:	59                   	pop    ecx
c0008f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3c:	e8 42 f4 01 00       	call   c0028383 <__truncdfsf2>
c0008f41:	83 c4 10             	add    esp,0x10
c0008f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f48:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f4b:	eb aa                	jmp    c0008ef7 <src_int_to_float_array+0x8>
c0008f4d:	83 c4 18             	add    esp,0x18
c0008f50:	5b                   	pop    ebx
c0008f51:	c3                   	ret    

c0008f52 <src_float_to_int_array>:
c0008f52:	56                   	push   esi
c0008f53:	53                   	push   ebx
c0008f54:	83 ec 14             	sub    esp,0x14
c0008f57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f5f:	85 db                	test   ebx,ebx
c0008f61:	0f 84 a2 00 00 00    	je     c0009009 <src_float_to_int_array+0xb7>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	4b                   	dec    ebx
c0008f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f6f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f72:	e8 30 f5 01 00       	call   c00284a7 <__extendsfdf2>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 00 00 e0 41       	push   0x41e00000
c0008f87:	6a 00                	push   0x0
c0008f89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	e8 1a eb 01 00       	call   c0027ab0 <__muldf3>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa1:	68 ff ff df 41       	push   0x41dfffff
c0008fa6:	68 00 00 c0 ff       	push   0xffc00000
c0008fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb3:	e8 c5 f3 01 00       	call   c002837d <__gedf2>
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	85 c0                	test   eax,eax
c0008fbd:	78 09                	js     c0008fc8 <src_float_to_int_array+0x76>
c0008fbf:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fc6:	eb 97                	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fc8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fcd:	6a 00                	push   0x0
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 a5 f3 01 00       	call   c0028381 <__ledf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	7f 0c                	jg     c0008fef <src_float_to_int_array+0x9d>
c0008fe3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fea:	e9 70 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fef:	50                   	push   eax
c0008ff0:	50                   	push   eax
c0008ff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff9:	e8 32 f5 01 00       	call   c0028530 <lrint>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009004:	e9 56 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0009009:	83 c4 14             	add    esp,0x14
c000900c:	5b                   	pop    ebx
c000900d:	5e                   	pop    esi
c000900e:	c3                   	ret    

c000900f <linear_vari_process>:
c000900f:	55                   	push   ebp
c0009010:	31 d2                	xor    edx,edx
c0009012:	57                   	push   edi
c0009013:	56                   	push   esi
c0009014:	53                   	push   ebx
c0009015:	83 ec 3c             	sub    esp,0x3c
c0009018:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000901c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009020:	0f 8e d3 07 00 00    	jle    c00097f9 <linear_vari_process+0x7ea>
c0009026:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000902a:	ba 05 00 00 00       	mov    edx,0x5
c000902f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009032:	85 db                	test   ebx,ebx
c0009034:	0f 84 bf 07 00 00    	je     c00097f9 <linear_vari_process+0x7ea>
c000903a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000903d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009041:	74 19                	je     c000905c <linear_vari_process+0x4d>
c0009043:	31 d2                	xor    edx,edx
c0009045:	39 c2                	cmp    edx,eax
c0009047:	7d 0c                	jge    c0009055 <linear_vari_process+0x46>
c0009049:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000904b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000904e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009052:	42                   	inc    edx
c0009053:	eb f0                	jmp    c0009045 <linear_vari_process+0x36>
c0009055:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000905c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000905f:	0f af d0             	imul   edx,eax
c0009062:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009065:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009069:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009070:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009073:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000907a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000907e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009081:	8b 00                	mov    eax,DWORD PTR [eax]
c0009083:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908b:	68 00 00 70 3f       	push   0x3f700000
c0009090:	6a 00                	push   0x0
c0009092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	e8 e0 f2 01 00       	call   c002837f <__ltdf2>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	ba 16 00 00 00       	mov    edx,0x16
c00090a7:	85 c0                	test   eax,eax
c00090a9:	0f 88 4a 07 00 00    	js     c00097f9 <linear_vari_process+0x7ea>
c00090af:	68 00 00 70 40       	push   0x40700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 9e f2 01 00       	call   c0028361 <__gtdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 8f 26 07 00 00    	jg     c00097f9 <linear_vari_process+0x7ea>
c00090d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090d7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090e5:	68 00 00 f0 3f       	push   0x3ff00000
c00090ea:	6a 00                	push   0x0
c00090ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f4:	e8 86 f2 01 00       	call   c002837f <__ltdf2>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	85 c0                	test   eax,eax
c00090fe:	0f 89 89 02 00 00    	jns    c000938d <linear_vari_process+0x37e>
c0009104:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009107:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000910a:	0f 8d 7d 02 00 00    	jge    c000938d <linear_vari_process+0x37e>
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009116:	e8 f8 ef 01 00       	call   c0028113 <__floatsidf>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009121:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009125:	68 00 00 f0 3f       	push   0x3ff00000
c000912a:	6a 00                	push   0x0
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	e8 fa e2 01 00       	call   c0027433 <__adddf3>
c0009139:	83 c4 10             	add    esp,0x10
c000913c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009144:	52                   	push   edx
c0009145:	50                   	push   eax
c0009146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914e:	e8 5d e9 01 00       	call   c0027ab0 <__muldf3>
c0009153:	5d                   	pop    ebp
c0009154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000915c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000915f:	e8 af ef 01 00       	call   c0028113 <__floatsidf>
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000916b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000916f:	52                   	push   edx
c0009170:	50                   	push   eax
c0009171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009179:	e8 b5 e2 01 00       	call   c0027433 <__adddf3>
c000917e:	59                   	pop    ecx
c000917f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009183:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009187:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000918a:	e8 84 ef 01 00       	call   c0028113 <__floatsidf>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009196:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000919a:	52                   	push   edx
c000919b:	50                   	push   eax
c000919c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a4:	e8 d4 f1 01 00       	call   c002837d <__gedf2>
c00091a9:	83 c4 10             	add    esp,0x10
c00091ac:	85 c0                	test   eax,eax
c00091ae:	0f 89 d9 01 00 00    	jns    c000938d <linear_vari_process+0x37e>
c00091b4:	85 ff                	test   edi,edi
c00091b6:	0f 8e f4 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c00091bc:	83 ec 10             	sub    esp,0x10
c00091bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091c2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091cc:	ff 30                	push   DWORD PTR [eax]
c00091ce:	e8 b1 e8 01 00       	call   c0027a84 <__subdf3>
c00091d3:	83 c4 18             	add    esp,0x18
c00091d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091de:	52                   	push   edx
c00091df:	50                   	push   eax
c00091e0:	e8 2b f3 01 00       	call   c0028510 <fabs>
c00091e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091f5:	68 23 42 92 0c       	push   0xc924223
c00091fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009202:	e8 5a f1 01 00       	call   c0028361 <__gtdf2>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	85 c0                	test   eax,eax
c000920c:	0f 8e 9e 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c0009212:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009216:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009219:	8b 00                	mov    eax,DWORD PTR [eax]
c000921b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000921f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009222:	52                   	push   edx
c0009223:	50                   	push   eax
c0009224:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009227:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000922a:	e8 55 e8 01 00       	call   c0027a84 <__subdf3>
c000922f:	59                   	pop    ecx
c0009230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009234:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009238:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000923b:	e8 d3 ee 01 00       	call   c0028113 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009247:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924b:	52                   	push   edx
c000924c:	50                   	push   eax
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 56 e8 01 00       	call   c0027ab0 <__muldf3>
c000925a:	5f                   	pop    edi
c000925b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000925f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009263:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009266:	e8 a8 ee 01 00       	call   c0028113 <__floatsidf>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009276:	52                   	push   edx
c0009277:	50                   	push   eax
c0009278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	e8 0f eb 01 00       	call   c0027d94 <__divdf3>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009294:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	e8 8e e1 01 00       	call   c0027433 <__adddf3>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b0:	31 ff                	xor    edi,edi
c00092b2:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092b5:	0f 8e 9d 00 00 00    	jle    c0009358 <linear_vari_process+0x349>
c00092bb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092be:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00092ce:	52                   	push   edx
c00092cf:	52                   	push   edx
c00092d0:	55                   	push   ebp
c00092d1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092d4:	47                   	inc    edi
c00092d5:	e8 ee da 01 00       	call   c0026dc8 <__subsf3>
c00092da:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dd:	e8 c5 f1 01 00       	call   c00284a7 <__extendsfdf2>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092fd:	e8 ae e7 01 00       	call   c0027ab0 <__muldf3>
c0009302:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000930d:	e8 95 f1 01 00       	call   c00284a7 <__extendsfdf2>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009319:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000931d:	52                   	push   edx
c000931e:	50                   	push   eax
c000931f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009327:	e8 07 e1 01 00       	call   c0027433 <__adddf3>
c000932c:	59                   	pop    ecx
c000932d:	5d                   	pop    ebp
c000932e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009332:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009336:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933e:	e8 40 f0 01 00       	call   c0028383 <__truncdfsf2>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009349:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000934d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009350:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009353:	e9 5a ff ff ff       	jmp    c00092b2 <linear_vari_process+0x2a3>
c0009358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009360:	68 00 00 f0 3f       	push   0x3ff00000
c0009365:	6a 00                	push   0x0
c0009367:	e8 28 ea 01 00       	call   c0027d94 <__divdf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009372:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	e8 ae e0 01 00       	call   c0027433 <__adddf3>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	e9 50 fd ff ff       	jmp    c00090dd <linear_vari_process+0xce>
c000938d:	50                   	push   eax
c000938e:	50                   	push   eax
c000938f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009397:	e8 94 f1 01 00       	call   c0028530 <lrint>
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	50                   	push   eax
c00093a0:	e8 6e ed 01 00       	call   c0028113 <__floatsidf>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b0:	52                   	push   edx
c00093b1:	50                   	push   eax
c00093b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ba:	e8 c5 e6 01 00       	call   c0027a84 <__subdf3>
c00093bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	6a 00                	push   0x0
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d6:	e8 a4 ef 01 00       	call   c002837f <__ltdf2>
c00093db:	83 c4 10             	add    esp,0x10
c00093de:	85 c0                	test   eax,eax
c00093e0:	79 1e                	jns    c0009400 <linear_vari_process+0x3f1>
c00093e2:	68 00 00 f0 3f       	push   0x3ff00000
c00093e7:	6a 00                	push   0x0
c00093e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f1:	e8 3d e0 01 00       	call   c0027433 <__adddf3>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009400:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009403:	83 ec 10             	sub    esp,0x10
c0009406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009416:	e8 69 e6 01 00       	call   c0027a84 <__subdf3>
c000941b:	83 c4 18             	add    esp,0x18
c000941e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009422:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009426:	52                   	push   edx
c0009427:	50                   	push   eax
c0009428:	e8 03 f1 01 00       	call   c0028530 <lrint>
c000942d:	83 c4 10             	add    esp,0x10
c0009430:	0f af f8             	imul   edi,eax
c0009433:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009436:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009439:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000943c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000943f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009442:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009446:	0f 8d 13 03 00 00    	jge    c000975f <linear_vari_process+0x750>
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009452:	e8 bc ec 01 00       	call   c0028113 <__floatsidf>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009462:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009466:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	e8 39 e6 01 00       	call   c0027ab0 <__muldf3>
c0009477:	89 3c 24             	mov    DWORD PTR [esp],edi
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	e8 8c ec 01 00       	call   c0028113 <__floatsidf>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009492:	52                   	push   edx
c0009493:	50                   	push   eax
c0009494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	e8 92 df 01 00       	call   c0027433 <__adddf3>
c00094a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094ac:	e8 62 ec 01 00       	call   c0028113 <__floatsidf>
c00094b1:	83 c4 10             	add    esp,0x10
c00094b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094bc:	52                   	push   edx
c00094bd:	50                   	push   eax
c00094be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c6:	e8 b4 ee 01 00       	call   c002837f <__ltdf2>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	85 c0                	test   eax,eax
c00094d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094d4:	0f 89 85 02 00 00    	jns    c000975f <linear_vari_process+0x750>
c00094da:	85 c9                	test   ecx,ecx
c00094dc:	0f 8e f5 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094e8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094f2:	ff 30                	push   DWORD PTR [eax]
c00094f4:	e8 8b e5 01 00       	call   c0027a84 <__subdf3>
c00094f9:	83 c4 18             	add    esp,0x18
c00094fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009504:	52                   	push   edx
c0009505:	50                   	push   eax
c0009506:	e8 05 f0 01 00       	call   c0028510 <fabs>
c000950b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000950f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009513:	83 c4 10             	add    esp,0x10
c0009516:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000951b:	68 23 42 92 0c       	push   0xc924223
c0009520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 34 ee 01 00       	call   c0028361 <__gtdf2>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	85 c0                	test   eax,eax
c0009532:	0f 8e 9f 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c0009538:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000953c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000953f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	52                   	push   edx
c000954a:	50                   	push   eax
c000954b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000954e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009551:	e8 2e e5 01 00       	call   c0027a84 <__subdf3>
c0009556:	5f                   	pop    edi
c0009557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000955b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000955f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009562:	e8 ac eb 01 00       	call   c0028113 <__floatsidf>
c0009567:	83 c4 10             	add    esp,0x10
c000956a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000956e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000957c:	e8 2f e5 01 00       	call   c0027ab0 <__muldf3>
c0009581:	5d                   	pop    ebp
c0009582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009586:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000958a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000958d:	e8 81 eb 01 00       	call   c0028113 <__floatsidf>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009599:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000959d:	52                   	push   edx
c000959e:	50                   	push   eax
c000959f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a7:	e8 e8 e7 01 00       	call   c0027d94 <__divdf3>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	e8 67 de 01 00       	call   c0027433 <__adddf3>
c00095cc:	83 c4 10             	add    esp,0x10
c00095cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095d7:	31 ff                	xor    edi,edi
c00095d9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095dc:	39 f8                	cmp    eax,edi
c00095de:	0f 8e ac 00 00 00    	jle    c0009690 <linear_vari_process+0x681>
c00095e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095e9:	29 c1                	sub    ecx,eax
c00095eb:	89 c8                	mov    eax,ecx
c00095ed:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f0:	01 f8                	add    eax,edi
c00095f2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095f6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009600:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009603:	51                   	push   ecx
c0009604:	01 f8                	add    eax,edi
c0009606:	51                   	push   ecx
c0009607:	47                   	inc    edi
c0009608:	55                   	push   ebp
c0009609:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000960c:	e8 b7 d7 01 00       	call   c0026dc8 <__subsf3>
c0009611:	89 04 24             	mov    DWORD PTR [esp],eax
c0009614:	e8 8e ee 01 00       	call   c00284a7 <__extendsfdf2>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009620:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009624:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009628:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000962c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009630:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009634:	e8 77 e4 01 00       	call   c0027ab0 <__muldf3>
c0009639:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000963c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009644:	e8 5e ee 01 00       	call   c00284a7 <__extendsfdf2>
c0009649:	83 c4 10             	add    esp,0x10
c000964c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009650:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009654:	52                   	push   edx
c0009655:	50                   	push   eax
c0009656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965e:	e8 d0 dd 01 00       	call   c0027433 <__adddf3>
c0009663:	5d                   	pop    ebp
c0009664:	59                   	pop    ecx
c0009665:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009669:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000966d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009671:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009675:	e8 09 ed 01 00       	call   c0028383 <__truncdfsf2>
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009681:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009685:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009688:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000968b:	e9 49 ff ff ff       	jmp    c00095d9 <linear_vari_process+0x5ca>
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	68 00 00 f0 3f       	push   0x3ff00000
c000969d:	6a 00                	push   0x0
c000969f:	e8 f0 e6 01 00       	call   c0027d94 <__divdf3>
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 6f dd 01 00       	call   c0027433 <__adddf3>
c00096c4:	59                   	pop    ecx
c00096c5:	5f                   	pop    edi
c00096c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 55 ee 01 00       	call   c0028530 <lrint>
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 2f ea 01 00       	call   c0028113 <__floatsidf>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ef:	52                   	push   edx
c00096f0:	50                   	push   eax
c00096f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f9:	e8 86 e3 01 00       	call   c0027a84 <__subdf3>
c00096fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009706:	83 c4 20             	add    esp,0x20
c0009709:	6a 00                	push   0x0
c000970b:	6a 00                	push   0x0
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009715:	e8 65 ec 01 00       	call   c002837f <__ltdf2>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	85 c0                	test   eax,eax
c000971f:	79 1e                	jns    c000973f <linear_vari_process+0x730>
c0009721:	68 00 00 f0 3f       	push   0x3ff00000
c0009726:	6a 00                	push   0x0
c0009728:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000972c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009730:	e8 fe dc 01 00       	call   c0027433 <__adddf3>
c0009735:	83 c4 10             	add    esp,0x10
c0009738:	89 04 24             	mov    DWORD PTR [esp],eax
c000973b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000973f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009742:	83 ec 10             	sub    esp,0x10
c0009745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009751:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009755:	e8 2a e3 01 00       	call   c0027a84 <__subdf3>
c000975a:	e9 bc fc ff ff       	jmp    c000941b <linear_vari_process+0x40c>
c000975f:	39 fd                	cmp    ebp,edi
c0009761:	7d 38                	jge    c000979b <linear_vari_process+0x78c>
c0009763:	83 ec 0c             	sub    esp,0xc
c0009766:	89 f8                	mov    eax,edi
c0009768:	29 e8                	sub    eax,ebp
c000976a:	99                   	cdq    
c000976b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000976e:	50                   	push   eax
c000976f:	e8 9f e9 01 00       	call   c0028113 <__floatsidf>
c0009774:	83 c4 10             	add    esp,0x10
c0009777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000977b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000977f:	52                   	push   edx
c0009780:	50                   	push   eax
c0009781:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009789:	e8 a5 dc 01 00       	call   c0027433 <__adddf3>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009794:	89 04 24             	mov    DWORD PTR [esp],eax
c0009797:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000979b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000979f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a6:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097a9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097af:	85 c0                	test   eax,eax
c00097b1:	7f 29                	jg     c00097dc <linear_vari_process+0x7cd>
c00097b3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bf:	89 01                	mov    DWORD PTR [ecx],eax
c00097c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097c7:	99                   	cdq    
c00097c8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097cb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d1:	99                   	cdq    
c00097d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d5:	31 d2                	xor    edx,edx
c00097d7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097da:	eb 1d                	jmp    c00097f9 <linear_vari_process+0x7ea>
c00097dc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097df:	31 d2                	xor    edx,edx
c00097e1:	29 c8                	sub    eax,ecx
c00097e3:	c1 e0 02             	shl    eax,0x2
c00097e6:	39 d1                	cmp    ecx,edx
c00097e8:	7e c9                	jle    c00097b3 <linear_vari_process+0x7a4>
c00097ea:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ec:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097ef:	83 c0 04             	add    eax,0x4
c00097f2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097f6:	42                   	inc    edx
c00097f7:	eb ed                	jmp    c00097e6 <linear_vari_process+0x7d7>
c00097f9:	83 c4 3c             	add    esp,0x3c
c00097fc:	89 d0                	mov    eax,edx
c00097fe:	5b                   	pop    ebx
c00097ff:	5e                   	pop    esi
c0009800:	5f                   	pop    edi
c0009801:	5d                   	pop    ebp
c0009802:	c3                   	ret    

c0009803 <linear_reset>:
c0009803:	83 ec 0c             	sub    esp,0xc
c0009806:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000980a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000980d:	85 c0                	test   eax,eax
c000980f:	74 20                	je     c0009831 <linear_reset+0x2e>
c0009811:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009814:	83 c0 1c             	add    eax,0x1c
c0009817:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000981a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009821:	c1 e2 02             	shl    edx,0x2
c0009824:	51                   	push   ecx
c0009825:	52                   	push   edx
c0009826:	6a 00                	push   0x0
c0009828:	50                   	push   eax
c0009829:	e8 4a 6f ff ff       	call   c0000778 <memset>
c000982e:	83 c4 10             	add    esp,0x10
c0009831:	83 c4 0c             	add    esp,0xc
c0009834:	c3                   	ret    

c0009835 <linear_get_name>:
c0009835:	31 c0                	xor    eax,eax
c0009837:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000983c:	75 05                	jne    c0009843 <linear_get_name+0xe>
c000983e:	b8 80 9c 02 c0       	mov    eax,0xc0029c80
c0009843:	c3                   	ret    

c0009844 <linear_get_description>:
c0009844:	31 c0                	xor    eax,eax
c0009846:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000984b:	75 05                	jne    c0009852 <linear_get_description+0xe>
c000984d:	b8 94 9c 02 c0       	mov    eax,0xc0029c94
c0009852:	c3                   	ret    

c0009853 <linear_set_converter>:
c0009853:	53                   	push   ebx
c0009854:	b8 0a 00 00 00       	mov    eax,0xa
c0009859:	83 ec 08             	sub    esp,0x8
c000985c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009860:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009865:	75 6e                	jne    c00098d5 <linear_set_converter+0x82>
c0009867:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000986a:	85 c0                	test   eax,eax
c000986c:	74 13                	je     c0009881 <linear_set_converter+0x2e>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	50                   	push   eax
c0009872:	e8 d9 5f 00 00       	call   c000f850 <free>
c0009877:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000987e:	83 c4 10             	add    esp,0x10
c0009881:	50                   	push   eax
c0009882:	50                   	push   eax
c0009883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009886:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000988d:	50                   	push   eax
c000988e:	6a 01                	push   0x1
c0009890:	e8 db 5f 00 00       	call   c000f870 <calloc>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	89 c2                	mov    edx,eax
c000989a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000989d:	85 d2                	test   edx,edx
c000989f:	b8 01 00 00 00       	mov    eax,0x1
c00098a4:	74 2f                	je     c00098d5 <linear_set_converter+0x82>
c00098a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098a9:	83 ec 0c             	sub    esp,0xc
c00098ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098af:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098b5:	c7 43 24 0f 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000900f
c00098bc:	c7 43 20 0f 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000900f
c00098c3:	c7 43 28 03 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009803
c00098ca:	53                   	push   ebx
c00098cb:	e8 33 ff ff ff       	call   c0009803 <linear_reset>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	31 c0                	xor    eax,eax
c00098d5:	83 c4 08             	add    esp,0x8
c00098d8:	5b                   	pop    ebx
c00098d9:	c3                   	ret    

c00098da <int_to_fp>:
c00098da:	c1 e0 0c             	shl    eax,0xc
c00098dd:	c3                   	ret    

c00098de <fp_to_int>:
c00098de:	c1 f8 0c             	sar    eax,0xc
c00098e1:	c3                   	ret    

c00098e2 <fp_fraction_part>:
c00098e2:	25 ff 0f 00 00       	and    eax,0xfff
c00098e7:	c3                   	ret    

c00098e8 <fp_to_double>:
c00098e8:	83 ec 1c             	sub    esp,0x1c
c00098eb:	e8 f2 ff ff ff       	call   c00098e2 <fp_fraction_part>
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 1a e8 01 00       	call   c0028113 <__floatsidf>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009904:	68 00 00 30 3f       	push   0x3f300000
c0009909:	6a 00                	push   0x0
c000990b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009913:	e8 98 e1 01 00       	call   c0027ab0 <__muldf3>
c0009918:	83 c4 2c             	add    esp,0x2c
c000991b:	c3                   	ret    

c000991c <calc_output_single>:
c000991c:	55                   	push   ebp
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	89 c6                	mov    esi,eax
c0009921:	53                   	push   ebx
c0009922:	89 d3                	mov    ebx,edx
c0009924:	83 ec 4c             	sub    esp,0x4c
c0009927:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000992b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000992e:	e8 a7 ff ff ff       	call   c00098da <int_to_fp>
c0009933:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000993a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000993e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009942:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009945:	99                   	cdq    
c0009946:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000994e:	f7 fb                	idiv   ebx
c0009950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009958:	89 da                	mov    edx,ebx
c000995a:	0f af d0             	imul   edx,eax
c000995d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009961:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009969:	29 c2                	sub    edx,eax
c000996b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009972:	83 c5 04             	add    ebp,0x4
c0009975:	e8 6e ff ff ff       	call   c00098e8 <fp_to_double>
c000997a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000997e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009986:	e8 53 ff ff ff       	call   c00098de <fp_to_int>
c000998b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000998e:	52                   	push   edx
c000998f:	52                   	push   edx
c0009990:	51                   	push   ecx
c0009991:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009995:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009999:	e8 2a d4 01 00       	call   c0026dc8 <__subsf3>
c000999e:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a1:	e8 01 eb 01 00       	call   c00284a7 <__extendsfdf2>
c00099a6:	83 c4 10             	add    esp,0x10
c00099a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c1:	e8 ea e0 01 00       	call   c0027ab0 <__muldf3>
c00099c6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099d5:	e8 cd ea 01 00       	call   c00284a7 <__extendsfdf2>
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099e5:	52                   	push   edx
c00099e6:	50                   	push   eax
c00099e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ef:	e8 3f da 01 00       	call   c0027433 <__adddf3>
c00099f4:	59                   	pop    ecx
c00099f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099fd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a03:	e8 9f ea 01 00       	call   c00284a7 <__extendsfdf2>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a13:	52                   	push   edx
c0009a14:	50                   	push   eax
c0009a15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a1d:	e8 8e e0 01 00       	call   c0027ab0 <__muldf3>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a2d:	52                   	push   edx
c0009a2e:	50                   	push   eax
c0009a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a37:	e8 f7 d9 01 00       	call   c0027433 <__adddf3>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a47:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a4b:	0f 89 1d ff ff ff    	jns    c000996e <calc_output_single+0x52>
c0009a51:	89 d9                	mov    ecx,ebx
c0009a53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a57:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a5b:	89 dd                	mov    ebp,ebx
c0009a5d:	29 c8                	sub    eax,ecx
c0009a5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a67:	99                   	cdq    
c0009a68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a70:	f7 fb                	idiv   ebx
c0009a72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a76:	0f af e8             	imul   ebp,eax
c0009a79:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a7d:	01 cd                	add    ebp,ecx
c0009a7f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a82:	89 e8                	mov    eax,ebp
c0009a84:	83 ee 04             	sub    esi,0x4
c0009a87:	e8 5c fe ff ff       	call   c00098e8 <fp_to_double>
c0009a8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a94:	89 e8                	mov    eax,ebp
c0009a96:	29 dd                	sub    ebp,ebx
c0009a98:	e8 41 fe ff ff       	call   c00098de <fp_to_int>
c0009a9d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa0:	52                   	push   edx
c0009aa1:	52                   	push   edx
c0009aa2:	51                   	push   ecx
c0009aa3:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aa7:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009aab:	e8 18 d3 01 00       	call   c0026dc8 <__subsf3>
c0009ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ab3:	e8 ef e9 01 00       	call   c00284a7 <__extendsfdf2>
c0009ab8:	83 c4 10             	add    esp,0x10
c0009abb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009abf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad3:	e8 d8 df 01 00       	call   c0027ab0 <__muldf3>
c0009ad8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009adc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ae3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ae7:	e8 bb e9 01 00       	call   c00284a7 <__extendsfdf2>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b01:	e8 2d d9 01 00       	call   c0027433 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b0f:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b15:	e8 8d e9 01 00       	call   c00284a7 <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b25:	52                   	push   edx
c0009b26:	50                   	push   eax
c0009b27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2f:	e8 7c df 01 00       	call   c0027ab0 <__muldf3>
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	52                   	push   edx
c0009b40:	50                   	push   eax
c0009b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b49:	e8 e5 d8 01 00       	call   c0027433 <__adddf3>
c0009b4e:	83 c4 10             	add    esp,0x10
c0009b51:	85 ed                	test   ebp,ebp
c0009b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b5b:	0f 8f 21 ff ff ff    	jg     c0009a82 <calc_output_single+0x166>
c0009b61:	52                   	push   edx
c0009b62:	50                   	push   eax
c0009b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6b:	e8 c3 d8 01 00       	call   c0027433 <__adddf3>
c0009b70:	83 c4 5c             	add    esp,0x5c
c0009b73:	5b                   	pop    ebx
c0009b74:	5e                   	pop    esi
c0009b75:	5f                   	pop    edi
c0009b76:	5d                   	pop    ebp
c0009b77:	c3                   	ret    

c0009b78 <calc_output_stereo>:
c0009b78:	55                   	push   ebp
c0009b79:	89 cd                	mov    ebp,ecx
c0009b7b:	57                   	push   edi
c0009b7c:	56                   	push   esi
c0009b7d:	53                   	push   ebx
c0009b7e:	89 c3                	mov    ebx,eax
c0009b80:	83 ec 6c             	sub    esp,0x6c
c0009b83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b8e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b95:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b99:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba0:	e8 35 fd ff ff       	call   c00098da <int_to_fp>
c0009ba5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bb9:	29 c8                	sub    eax,ecx
c0009bbb:	99                   	cdq    
c0009bbc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bc4:	0f af d0             	imul   edx,eax
c0009bc7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bca:	31 d2                	xor    edx,edx
c0009bcc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bd4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bdb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009be2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009be6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009be9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bee:	29 c1                	sub    ecx,eax
c0009bf0:	31 c0                	xor    eax,eax
c0009bf2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	83 c7 08             	add    edi,0x8
c0009c00:	e8 e3 fc ff ff       	call   c00098e8 <fp_to_double>
c0009c05:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c09:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c11:	e8 c8 fc ff ff       	call   c00098de <fp_to_int>
c0009c16:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c19:	52                   	push   edx
c0009c1a:	52                   	push   edx
c0009c1b:	51                   	push   ecx
c0009c1c:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c20:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c24:	e8 9f d1 01 00       	call   c0026dc8 <__subsf3>
c0009c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c2c:	e8 76 e8 01 00       	call   c00284a7 <__extendsfdf2>
c0009c31:	83 c4 10             	add    esp,0x10
c0009c34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c38:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c4c:	e8 5f de 01 00       	call   c0027ab0 <__muldf3>
c0009c51:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c55:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c5c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c60:	e8 42 e8 01 00       	call   c00284a7 <__extendsfdf2>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c6c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c70:	52                   	push   edx
c0009c71:	50                   	push   eax
c0009c72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7a:	e8 b4 d7 01 00       	call   c0027433 <__adddf3>
c0009c7f:	59                   	pop    ecx
c0009c80:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c84:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c88:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c8e:	e8 14 e8 01 00       	call   c00284a7 <__extendsfdf2>
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009caa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cae:	e8 fd dd 01 00       	call   c0027ab0 <__muldf3>
c0009cb3:	83 c4 10             	add    esp,0x10
c0009cb6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cba:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cbe:	52                   	push   edx
c0009cbf:	50                   	push   eax
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 66 d7 01 00       	call   c0027433 <__adddf3>
c0009ccd:	59                   	pop    ecx
c0009cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cd6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cdc:	e8 c6 e7 01 00       	call   c00284a7 <__extendsfdf2>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ce8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cf8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cfc:	e8 af dd 01 00       	call   c0027ab0 <__muldf3>
c0009d01:	83 c4 10             	add    esp,0x10
c0009d04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d08:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d0c:	52                   	push   edx
c0009d0d:	50                   	push   eax
c0009d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d16:	e8 18 d7 01 00       	call   c0027433 <__adddf3>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d26:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d2a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d2e:	0f 89 c5 fe ff ff    	jns    c0009bf9 <calc_output_stereo+0x81>
c0009d34:	29 e9                	sub    ecx,ebp
c0009d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d3a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d3e:	29 c8                	sub    eax,ecx
c0009d40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d48:	99                   	cdq    
c0009d49:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d4d:	31 d2                	xor    edx,edx
c0009d4f:	0f af f8             	imul   edi,eax
c0009d52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d56:	40                   	inc    eax
c0009d57:	01 cf                	add    edi,ecx
c0009d59:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d5e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d62:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d6a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d6d:	31 c0                	xor    eax,eax
c0009d6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d73:	89 f8                	mov    eax,edi
c0009d75:	83 eb 08             	sub    ebx,0x8
c0009d78:	e8 6b fb ff ff       	call   c00098e8 <fp_to_double>
c0009d7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d85:	89 f8                	mov    eax,edi
c0009d87:	e8 52 fb ff ff       	call   c00098de <fp_to_int>
c0009d8c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d8f:	52                   	push   edx
c0009d90:	52                   	push   edx
c0009d91:	55                   	push   ebp
c0009d92:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d96:	e8 2d d0 01 00       	call   c0026dc8 <__subsf3>
c0009d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d9e:	e8 04 e7 01 00       	call   c00284a7 <__extendsfdf2>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009daa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dbe:	e8 ed dc 01 00       	call   c0027ab0 <__muldf3>
c0009dc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dce:	e8 d4 e6 01 00       	call   c00284a7 <__extendsfdf2>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dde:	52                   	push   edx
c0009ddf:	50                   	push   eax
c0009de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de8:	e8 46 d6 01 00       	call   c0027433 <__adddf3>
c0009ded:	59                   	pop    ecx
c0009dee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009df2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009df6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dfc:	e8 a6 e6 01 00       	call   c00284a7 <__extendsfdf2>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e1c:	e8 8f dc 01 00       	call   c0027ab0 <__muldf3>
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e2c:	52                   	push   edx
c0009e2d:	50                   	push   eax
c0009e2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e36:	e8 f8 d5 01 00       	call   c0027433 <__adddf3>
c0009e3b:	5d                   	pop    ebp
c0009e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e40:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e44:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e4a:	e8 58 e6 01 00       	call   c00284a7 <__extendsfdf2>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6a:	e8 41 dc 01 00       	call   c0027ab0 <__muldf3>
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e7a:	52                   	push   edx
c0009e7b:	50                   	push   eax
c0009e7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e84:	e8 aa d5 01 00       	call   c0027433 <__adddf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e98:	85 ff                	test   edi,edi
c0009e9a:	0f 8f d3 fe ff ff    	jg     c0009d73 <calc_output_stereo+0x1fb>
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 7e d5 01 00       	call   c0027433 <__adddf3>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed0:	e8 db db 01 00       	call   c0027ab0 <__muldf3>
c0009ed5:	59                   	pop    ecx
c0009ed6:	5b                   	pop    ebx
c0009ed7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009edb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009edf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee7:	e8 97 e4 01 00       	call   c0028383 <__truncdfsf2>
c0009eec:	83 c4 10             	add    esp,0x10
c0009eef:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ef6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	e8 26 d5 01 00       	call   c0027433 <__adddf3>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f28:	e8 83 db 01 00       	call   c0027ab0 <__muldf3>
c0009f2d:	5e                   	pop    esi
c0009f2e:	5f                   	pop    edi
c0009f2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3f:	e8 3f e4 01 00       	call   c0028383 <__truncdfsf2>
c0009f44:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f4b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f4e:	83 c4 7c             	add    esp,0x7c
c0009f51:	5b                   	pop    ebx
c0009f52:	5e                   	pop    esi
c0009f53:	5f                   	pop    edi
c0009f54:	5d                   	pop    ebp
c0009f55:	c3                   	ret    

c0009f56 <calc_output_quad>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	89 c6                	mov    esi,eax
c0009f5b:	53                   	push   ebx
c0009f5c:	83 ec 7c             	sub    esp,0x7c
c0009f5f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f63:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f67:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f6e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f75:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f80:	e8 55 f9 ff ff       	call   c00098da <int_to_fp>
c0009f85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f88:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f8b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f93:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f97:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f9b:	99                   	cdq    
c0009f9c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa4:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fa7:	31 d2                	xor    edx,edx
c0009fa9:	0f af d8             	imul   ebx,eax
c0009fac:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fb4:	0f af c7             	imul   eax,edi
c0009fb7:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fbb:	29 c1                	sub    ecx,eax
c0009fbd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fc5:	31 c0                	xor    eax,eax
c0009fc7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fde:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fe2:	89 d8                	mov    eax,ebx
c0009fe4:	83 c7 10             	add    edi,0x10
c0009fe7:	e8 fc f8 ff ff       	call   c00098e8 <fp_to_double>
c0009fec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff4:	89 d8                	mov    eax,ebx
c0009ff6:	e8 e3 f8 ff ff       	call   c00098de <fp_to_int>
c0009ffb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fff:	52                   	push   edx
c000a000:	52                   	push   edx
c000a001:	51                   	push   ecx
c000a002:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a006:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a00a:	e8 b9 cd 01 00       	call   c0026dc8 <__subsf3>
c000a00f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a012:	e8 90 e4 01 00       	call   c00284a7 <__extendsfdf2>
c000a017:	83 c4 10             	add    esp,0x10
c000a01a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a02e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a032:	e8 79 da 01 00       	call   c0027ab0 <__muldf3>
c000a037:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a03b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a042:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a046:	e8 5c e4 01 00       	call   c00284a7 <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a052:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a056:	52                   	push   edx
c000a057:	50                   	push   eax
c000a058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a060:	e8 ce d3 01 00       	call   c0027433 <__adddf3>
c000a065:	59                   	pop    ecx
c000a066:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a06a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a06e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a074:	e8 2e e4 01 00       	call   c00284a7 <__extendsfdf2>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a080:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a090:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a094:	e8 17 da 01 00       	call   c0027ab0 <__muldf3>
c000a099:	83 c4 10             	add    esp,0x10
c000a09c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ae:	e8 80 d3 01 00       	call   c0027433 <__adddf3>
c000a0b3:	59                   	pop    ecx
c000a0b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0b8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0bc:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0c2:	e8 e0 e3 01 00       	call   c00284a7 <__extendsfdf2>
c000a0c7:	83 c4 10             	add    esp,0x10
c000a0ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e2:	e8 c9 d9 01 00       	call   c0027ab0 <__muldf3>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f2:	52                   	push   edx
c000a0f3:	50                   	push   eax
c000a0f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0fc:	e8 32 d3 01 00       	call   c0027433 <__adddf3>
c000a101:	59                   	pop    ecx
c000a102:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a106:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a10a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a110:	e8 92 e3 01 00       	call   c00284a7 <__extendsfdf2>
c000a115:	83 c4 10             	add    esp,0x10
c000a118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a128:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a130:	e8 7b d9 01 00       	call   c0027ab0 <__muldf3>
c000a135:	83 c4 10             	add    esp,0x10
c000a138:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a13c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a140:	52                   	push   edx
c000a141:	50                   	push   eax
c000a142:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14a:	e8 e4 d2 01 00       	call   c0027433 <__adddf3>
c000a14f:	59                   	pop    ecx
c000a150:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a154:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a158:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a15e:	e8 44 e3 01 00       	call   c00284a7 <__extendsfdf2>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a16a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a176:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17e:	e8 2d d9 01 00       	call   c0027ab0 <__muldf3>
c000a183:	83 c4 10             	add    esp,0x10
c000a186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18e:	52                   	push   edx
c000a18f:	50                   	push   eax
c000a190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a194:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a198:	e8 96 d2 01 00       	call   c0027433 <__adddf3>
c000a19d:	83 c4 10             	add    esp,0x10
c000a1a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1a8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1ac:	0f 89 30 fe ff ff    	jns    c0009fe2 <calc_output_quad+0x8c>
c000a1b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1be:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ca:	29 c8                	sub    eax,ecx
c000a1cc:	99                   	cdq    
c000a1cd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d1:	31 d2                	xor    edx,edx
c000a1d3:	0f af d8             	imul   ebx,eax
c000a1d6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1da:	40                   	inc    eax
c000a1db:	01 cb                	add    ebx,ecx
c000a1dd:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1e2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1e6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1ee:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1f9:	31 c0                	xor    eax,eax
c000a1fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ff:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a207:	89 d8                	mov    eax,ebx
c000a209:	83 ee 10             	sub    esi,0x10
c000a20c:	e8 d7 f6 ff ff       	call   c00098e8 <fp_to_double>
c000a211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a219:	89 d8                	mov    eax,ebx
c000a21b:	e8 be f6 ff ff       	call   c00098de <fp_to_int>
c000a220:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a224:	52                   	push   edx
c000a225:	52                   	push   edx
c000a226:	57                   	push   edi
c000a227:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a22b:	e8 98 cb 01 00       	call   c0026dc8 <__subsf3>
c000a230:	89 04 24             	mov    DWORD PTR [esp],eax
c000a233:	e8 6f e2 01 00       	call   c00284a7 <__extendsfdf2>
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a23f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a24f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a253:	e8 58 d8 01 00       	call   c0027ab0 <__muldf3>
c000a258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a263:	e8 3f e2 01 00       	call   c00284a7 <__extendsfdf2>
c000a268:	83 c4 10             	add    esp,0x10
c000a26b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a26f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a273:	52                   	push   edx
c000a274:	50                   	push   eax
c000a275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a27d:	e8 b1 d1 01 00       	call   c0027433 <__adddf3>
c000a282:	59                   	pop    ecx
c000a283:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a287:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a28b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a291:	e8 11 e2 01 00       	call   c00284a7 <__extendsfdf2>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b1:	e8 fa d7 01 00       	call   c0027ab0 <__muldf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c1:	52                   	push   edx
c000a2c2:	50                   	push   eax
c000a2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cb:	e8 63 d1 01 00       	call   c0027433 <__adddf3>
c000a2d0:	5f                   	pop    edi
c000a2d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2d9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2df:	e8 c3 e1 01 00       	call   c00284a7 <__extendsfdf2>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ff:	e8 ac d7 01 00       	call   c0027ab0 <__muldf3>
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a30f:	52                   	push   edx
c000a310:	50                   	push   eax
c000a311:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a315:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a319:	e8 15 d1 01 00       	call   c0027433 <__adddf3>
c000a31e:	59                   	pop    ecx
c000a31f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a323:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a327:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a32d:	e8 75 e1 01 00       	call   c00284a7 <__extendsfdf2>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a339:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a349:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a34d:	e8 5e d7 01 00       	call   c0027ab0 <__muldf3>
c000a352:	83 c4 10             	add    esp,0x10
c000a355:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a359:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a35d:	52                   	push   edx
c000a35e:	50                   	push   eax
c000a35f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a363:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a367:	e8 c7 d0 01 00       	call   c0027433 <__adddf3>
c000a36c:	5f                   	pop    edi
c000a36d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a371:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a375:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a37b:	e8 27 e1 01 00       	call   c00284a7 <__extendsfdf2>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a387:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a393:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a397:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39b:	e8 10 d7 01 00       	call   c0027ab0 <__muldf3>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3ab:	52                   	push   edx
c000a3ac:	50                   	push   eax
c000a3ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b5:	e8 79 d0 01 00       	call   c0027433 <__adddf3>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3c5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 8f 36 fe ff ff    	jg     c000a207 <calc_output_quad+0x2b1>
c000a3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	e8 4d d0 01 00       	call   c0027433 <__adddf3>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	e8 aa d6 01 00       	call   c0027ab0 <__muldf3>
c000a406:	59                   	pop    ecx
c000a407:	5b                   	pop    ebx
c000a408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a40c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a418:	e8 66 df 01 00       	call   c0028383 <__truncdfsf2>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a427:	89 06                	mov    DWORD PTR [esi],eax
c000a429:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a42d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a431:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a439:	e8 f5 cf 01 00       	call   c0027433 <__adddf3>
c000a43e:	83 c4 10             	add    esp,0x10
c000a441:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	e8 52 d6 01 00       	call   c0027ab0 <__muldf3>
c000a45e:	5e                   	pop    esi
c000a45f:	5f                   	pop    edi
c000a460:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a464:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	e8 0e df 01 00       	call   c0028383 <__truncdfsf2>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a47f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a482:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a486:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a48e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a492:	e8 9c cf 01 00       	call   c0027433 <__adddf3>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a49e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	e8 f9 d5 01 00       	call   c0027ab0 <__muldf3>
c000a4b7:	5d                   	pop    ebp
c000a4b8:	59                   	pop    ecx
c000a4b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	e8 b5 de 01 00       	call   c0028383 <__truncdfsf2>
c000a4ce:	83 c4 10             	add    esp,0x10
c000a4d1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4d8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	e8 43 cf 01 00       	call   c0027433 <__adddf3>
c000a4f0:	83 c4 10             	add    esp,0x10
c000a4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	e8 a0 d5 01 00       	call   c0027ab0 <__muldf3>
c000a510:	5b                   	pop    ebx
c000a511:	5e                   	pop    esi
c000a512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a516:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a522:	e8 5c de 01 00       	call   c0028383 <__truncdfsf2>
c000a527:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a52e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a531:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a537:	5b                   	pop    ebx
c000a538:	5e                   	pop    esi
c000a539:	5f                   	pop    edi
c000a53a:	5d                   	pop    ebp
c000a53b:	c3                   	ret    

c000a53c <calc_output_hex>:
c000a53c:	55                   	push   ebp
c000a53d:	89 cd                	mov    ebp,ecx
c000a53f:	57                   	push   edi
c000a540:	56                   	push   esi
c000a541:	53                   	push   ebx
c000a542:	89 c3                	mov    ebx,eax
c000a544:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a54a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a54d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a554:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a55b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a55f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a563:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a566:	e8 6f f3 ff ff       	call   c00098da <int_to_fp>
c000a56b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a56e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a572:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a575:	29 c8                	sub    eax,ecx
c000a577:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a57b:	99                   	cdq    
c000a57c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a584:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a587:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a58f:	0f af f8             	imul   edi,eax
c000a592:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a595:	01 cf                	add    edi,ecx
c000a597:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a59b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a59e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5a2:	0f af c2             	imul   eax,edx
c000a5a5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5a9:	29 c1                	sub    ecx,eax
c000a5ab:	31 d2                	xor    edx,edx
c000a5ad:	31 c0                	xor    eax,eax
c000a5af:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5c6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5ce:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5da:	89 f8                	mov    eax,edi
c000a5dc:	e8 07 f3 ff ff       	call   c00098e8 <fp_to_double>
c000a5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5e9:	89 f8                	mov    eax,edi
c000a5eb:	e8 ee f2 ff ff       	call   c00098de <fp_to_int>
c000a5f0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5f4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5f7:	52                   	push   edx
c000a5f8:	52                   	push   edx
c000a5f9:	51                   	push   ecx
c000a5fa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5fe:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a605:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a609:	e8 ba c7 01 00       	call   c0026dc8 <__subsf3>
c000a60e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a611:	e8 91 de 01 00       	call   c00284a7 <__extendsfdf2>
c000a616:	83 c4 10             	add    esp,0x10
c000a619:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a61d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a629:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a62d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a631:	e8 7a d4 01 00       	call   c0027ab0 <__muldf3>
c000a636:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a63a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a63e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a645:	e8 5d de 01 00       	call   c00284a7 <__extendsfdf2>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a651:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a655:	52                   	push   edx
c000a656:	50                   	push   eax
c000a657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65f:	e8 cf cd 01 00       	call   c0027433 <__adddf3>
c000a664:	59                   	pop    ecx
c000a665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a669:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a66d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a673:	e8 2f de 01 00       	call   c00284a7 <__extendsfdf2>
c000a678:	83 c4 10             	add    esp,0x10
c000a67b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a67f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a68f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a693:	e8 18 d4 01 00       	call   c0027ab0 <__muldf3>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a69f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a3:	52                   	push   edx
c000a6a4:	50                   	push   eax
c000a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6ad:	e8 81 cd 01 00       	call   c0027433 <__adddf3>
c000a6b2:	59                   	pop    ecx
c000a6b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6bb:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c1:	e8 e1 dd 01 00       	call   c00284a7 <__extendsfdf2>
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e1:	e8 ca d3 01 00       	call   c0027ab0 <__muldf3>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f1:	52                   	push   edx
c000a6f2:	50                   	push   eax
c000a6f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6fb:	e8 33 cd 01 00       	call   c0027433 <__adddf3>
c000a700:	59                   	pop    ecx
c000a701:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a705:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a709:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a70f:	e8 93 dd 01 00       	call   c00284a7 <__extendsfdf2>
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a71f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a727:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72f:	e8 7c d3 01 00       	call   c0027ab0 <__muldf3>
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a73f:	52                   	push   edx
c000a740:	50                   	push   eax
c000a741:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a745:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a749:	e8 e5 cc 01 00       	call   c0027433 <__adddf3>
c000a74e:	59                   	pop    ecx
c000a74f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a753:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a757:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a75d:	e8 45 dd 01 00       	call   c00284a7 <__extendsfdf2>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a769:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a775:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a779:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a77d:	e8 2e d3 01 00       	call   c0027ab0 <__muldf3>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a789:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a793:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a797:	e8 97 cc 01 00       	call   c0027433 <__adddf3>
c000a79c:	59                   	pop    ecx
c000a79d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7a5:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7ab:	e8 f7 dc 01 00       	call   c00284a7 <__extendsfdf2>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cb:	e8 e0 d2 01 00       	call   c0027ab0 <__muldf3>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	83 c6 18             	add    esi,0x18
c000a7d6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7da:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7de:	52                   	push   edx
c000a7df:	50                   	push   eax
c000a7e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e8:	e8 46 cc 01 00       	call   c0027433 <__adddf3>
c000a7ed:	59                   	pop    ecx
c000a7ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7f6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7fc:	e8 a6 dc 01 00       	call   c00284a7 <__extendsfdf2>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a808:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a814:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a818:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a81c:	e8 8f d2 01 00       	call   c0027ab0 <__muldf3>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a82c:	52                   	push   edx
c000a82d:	50                   	push   eax
c000a82e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a832:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a836:	e8 f8 cb 01 00       	call   c0027433 <__adddf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a842:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a846:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a849:	0f 89 8b fd ff ff    	jns    c000a5da <calc_output_hex+0x9e>
c000a84f:	31 f6                	xor    esi,esi
c000a851:	31 ff                	xor    edi,edi
c000a853:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a857:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a85a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a85e:	29 e9                	sub    ecx,ebp
c000a860:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a864:	29 c8                	sub    eax,ecx
c000a866:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a869:	99                   	cdq    
c000a86a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a86e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a871:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a875:	0f af e8             	imul   ebp,eax
c000a878:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a87c:	40                   	inc    eax
c000a87d:	01 cd                	add    ebp,ecx
c000a87f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a884:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a888:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a890:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a893:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a897:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a89b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a89f:	89 e8                	mov    eax,ebp
c000a8a1:	e8 42 f0 ff ff       	call   c00098e8 <fp_to_double>
c000a8a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	89 e8                	mov    eax,ebp
c000a8b0:	e8 29 f0 ff ff       	call   c00098de <fp_to_int>
c000a8b5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8b9:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8bc:	52                   	push   edx
c000a8bd:	52                   	push   edx
c000a8be:	51                   	push   ecx
c000a8bf:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8c6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8cd:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d1:	e8 f2 c4 01 00       	call   c0026dc8 <__subsf3>
c000a8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d9:	e8 c9 db 01 00       	call   c00284a7 <__extendsfdf2>
c000a8de:	83 c4 10             	add    esp,0x10
c000a8e1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f9:	e8 b2 d1 01 00       	call   c0027ab0 <__muldf3>
c000a8fe:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a905:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a909:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a90c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a910:	e8 92 db 01 00       	call   c00284a7 <__extendsfdf2>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a91c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a920:	52                   	push   edx
c000a921:	50                   	push   eax
c000a922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92a:	e8 04 cb 01 00       	call   c0027433 <__adddf3>
c000a92f:	59                   	pop    ecx
c000a930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a934:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a938:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a93e:	e8 64 db 01 00       	call   c00284a7 <__extendsfdf2>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a956:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95e:	e8 4d d1 01 00       	call   c0027ab0 <__muldf3>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a96e:	52                   	push   edx
c000a96f:	50                   	push   eax
c000a970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a978:	e8 b6 ca 01 00       	call   c0027433 <__adddf3>
c000a97d:	59                   	pop    ecx
c000a97e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a982:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a986:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a98c:	e8 16 db 01 00       	call   c00284a7 <__extendsfdf2>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a998:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9a8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9ac:	e8 ff d0 01 00       	call   c0027ab0 <__muldf3>
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9b8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9bc:	52                   	push   edx
c000a9bd:	50                   	push   eax
c000a9be:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c6:	e8 68 ca 01 00       	call   c0027433 <__adddf3>
c000a9cb:	59                   	pop    ecx
c000a9cc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9d4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9da:	e8 c8 da 01 00       	call   c00284a7 <__extendsfdf2>
c000a9df:	83 c4 10             	add    esp,0x10
c000a9e2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fa:	e8 b1 d0 01 00       	call   c0027ab0 <__muldf3>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa06:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0a:	52                   	push   edx
c000aa0b:	50                   	push   eax
c000aa0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	e8 1a ca 01 00       	call   c0027433 <__adddf3>
c000aa19:	59                   	pop    ecx
c000aa1a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa1e:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa22:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa28:	e8 7a da 01 00       	call   c00284a7 <__extendsfdf2>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa34:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa44:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa48:	e8 63 d0 01 00       	call   c0027ab0 <__muldf3>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa54:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa58:	52                   	push   edx
c000aa59:	50                   	push   eax
c000aa5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa5e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa62:	e8 cc c9 01 00       	call   c0027433 <__adddf3>
c000aa67:	59                   	pop    ecx
c000aa68:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa6c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa70:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa76:	e8 2c da 01 00       	call   c00284a7 <__extendsfdf2>
c000aa7b:	83 c4 10             	add    esp,0x10
c000aa7e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa82:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa92:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa96:	e8 15 d0 01 00       	call   c0027ab0 <__muldf3>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 eb 18             	sub    ebx,0x18
c000aaa1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaa9:	52                   	push   edx
c000aaaa:	50                   	push   eax
c000aaab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aaaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab3:	e8 7b c9 01 00       	call   c0027433 <__adddf3>
c000aab8:	59                   	pop    ecx
c000aab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aabd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aac7:	e8 db d9 01 00       	call   c00284a7 <__extendsfdf2>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aad3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aad7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae7:	e8 c4 cf 01 00       	call   c0027ab0 <__muldf3>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaf7:	52                   	push   edx
c000aaf8:	50                   	push   eax
c000aaf9:	57                   	push   edi
c000aafa:	56                   	push   esi
c000aafb:	e8 33 c9 01 00       	call   c0027433 <__adddf3>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	89 c6                	mov    esi,eax
c000ab05:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab08:	89 d7                	mov    edi,edx
c000ab0a:	85 ed                	test   ebp,ebp
c000ab0c:	0f 8f 8d fd ff ff    	jg     c000a89f <calc_output_hex+0x363>
c000ab12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	e8 0c c9 01 00       	call   c0027433 <__adddf3>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	e8 6a cf 01 00       	call   c0027ab0 <__muldf3>
c000ab46:	59                   	pop    ecx
c000ab47:	5b                   	pop    ebx
c000ab48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab58:	e8 26 d8 01 00       	call   c0028383 <__truncdfsf2>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab67:	89 03                	mov    DWORD PTR [ebx],eax
c000ab69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab79:	e8 b5 c8 01 00       	call   c0027433 <__adddf3>
c000ab7e:	83 c4 10             	add    esp,0x10
c000ab81:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	e8 13 cf 01 00       	call   c0027ab0 <__muldf3>
c000ab9d:	5d                   	pop    ebp
c000ab9e:	59                   	pop    ecx
c000ab9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaf:	e8 cf d7 01 00       	call   c0028383 <__truncdfsf2>
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abbe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abcd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd1:	e8 5d c8 01 00       	call   c0027433 <__adddf3>
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	e8 bb ce 01 00       	call   c0027ab0 <__muldf3>
c000abf5:	5b                   	pop    ebx
c000abf6:	5d                   	pop    ebp
c000abf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac07:	e8 77 d7 01 00       	call   c0028383 <__truncdfsf2>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac29:	e8 05 c8 01 00       	call   c0027433 <__adddf3>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 63 ce 01 00       	call   c0027ab0 <__muldf3>
c000ac4d:	59                   	pop    ecx
c000ac4e:	5b                   	pop    ebx
c000ac4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5f:	e8 1f d7 01 00       	call   c0028383 <__truncdfsf2>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac6e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac81:	e8 ad c7 01 00       	call   c0027433 <__adddf3>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	e8 0b ce 01 00       	call   c0027ab0 <__muldf3>
c000aca5:	5d                   	pop    ebp
c000aca6:	59                   	pop    ecx
c000aca7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb7:	e8 c7 d6 01 00       	call   c0028383 <__truncdfsf2>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000accf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd3:	e8 5b c7 01 00       	call   c0027433 <__adddf3>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	e8 b9 cd 01 00       	call   c0027ab0 <__muldf3>
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad09:	e8 75 d6 01 00       	call   c0028383 <__truncdfsf2>
c000ad0e:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad15:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad18:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad1e:	5b                   	pop    ebx
c000ad1f:	5e                   	pop    esi
c000ad20:	5f                   	pop    edi
c000ad21:	5d                   	pop    ebp
c000ad22:	c3                   	ret    

c000ad23 <sinc_reset>:
c000ad23:	56                   	push   esi
c000ad24:	53                   	push   ebx
c000ad25:	51                   	push   ecx
c000ad26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad2d:	85 db                	test   ebx,ebx
c000ad2f:	74 59                	je     c000ad8a <sinc_reset+0x67>
c000ad31:	31 d2                	xor    edx,edx
c000ad33:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad3a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad3d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad47:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad4e:	31 c0                	xor    eax,eax
c000ad50:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad56:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad59:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad5c:	52                   	push   edx
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	c1 e0 02             	shl    eax,0x2
c000ad63:	50                   	push   eax
c000ad64:	6a 00                	push   0x0
c000ad66:	56                   	push   esi
c000ad67:	e8 0c 5a ff ff       	call   c0000778 <memset>
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad72:	c1 e0 02             	shl    eax,0x2
c000ad75:	50                   	push   eax
c000ad76:	68 aa 00 00 00       	push   0xaa
c000ad7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad7e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad81:	50                   	push   eax
c000ad82:	e8 f1 59 ff ff       	call   c0000778 <memset>
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	58                   	pop    eax
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <calc_output_multi>:
c000ad8e:	55                   	push   ebp
c000ad8f:	57                   	push   edi
c000ad90:	56                   	push   esi
c000ad91:	89 c6                	mov    esi,eax
c000ad93:	53                   	push   ebx
c000ad94:	83 ec 4c             	sub    esp,0x4c
c000ad97:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ada3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ada7:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adb3:	8d 46 44             	lea    eax,[esi+0x44]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adc6:	e8 0f eb ff ff       	call   c00098da <int_to_fp>
c000adcb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000add2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000add6:	99                   	cdq    
c000add7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000addb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000addf:	0f af d0             	imul   edx,eax
c000ade2:	0f af c3             	imul   eax,ebx
c000ade5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ade9:	29 c1                	sub    ecx,eax
c000adeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adf3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adfe:	57                   	push   edi
c000adff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae03:	6a 00                	push   0x0
c000ae05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae09:	e8 6a 59 ff ff       	call   c0000778 <memset>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae15:	89 df                	mov    edi,ebx
c000ae17:	e8 cc ea ff ff       	call   c00098e8 <fp_to_double>
c000ae1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae28:	e8 b1 ea ff ff       	call   c00098de <fp_to_int>
c000ae2d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae30:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae33:	51                   	push   ecx
c000ae34:	51                   	push   ecx
c000ae35:	55                   	push   ebp
c000ae36:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae3a:	e8 89 bf 01 00       	call   c0026dc8 <__subsf3>
c000ae3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae42:	e8 60 d6 01 00       	call   c00284a7 <__extendsfdf2>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae62:	e8 49 cc 01 00       	call   c0027ab0 <__muldf3>
c000ae67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae72:	e8 30 d6 01 00       	call   c00284a7 <__extendsfdf2>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae82:	52                   	push   edx
c000ae83:	50                   	push   eax
c000ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae8c:	e8 a2 c5 01 00       	call   c0027433 <__adddf3>
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae9c:	89 f8                	mov    eax,edi
c000ae9e:	b9 08 00 00 00       	mov    ecx,0x8
c000aea3:	99                   	cdq    
c000aea4:	f7 f9                	idiv   ecx
c000aea6:	4a                   	dec    edx
c000aea7:	83 fa 06             	cmp    edx,0x6
c000aeaa:	77 07                	ja     c000aeb3 <calc_output_multi+0x125>
c000aeac:	ff 24 95 c4 9c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd633c]
c000aeb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb6:	4f                   	dec    edi
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aecc:	e8 d6 d5 01 00       	call   c00284a7 <__extendsfdf2>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeec:	e8 bf cb 01 00       	call   c0027ab0 <__muldf3>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aefc:	52                   	push   edx
c000aefd:	50                   	push   eax
c000aefe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af01:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af04:	e8 2a c5 01 00       	call   c0027433 <__adddf3>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af0f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af15:	4f                   	dec    edi
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af20:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af27:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af2b:	e8 77 d5 01 00       	call   c00284a7 <__extendsfdf2>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4b:	e8 60 cb 01 00       	call   c0027ab0 <__muldf3>
c000af50:	83 c4 10             	add    esp,0x10
c000af53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af57:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5b:	52                   	push   edx
c000af5c:	50                   	push   eax
c000af5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af63:	e8 cb c4 01 00       	call   c0027433 <__adddf3>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af6e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af74:	4f                   	dec    edi
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af86:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af8a:	e8 18 d5 01 00       	call   c00284a7 <__extendsfdf2>
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afaa:	e8 01 cb 01 00       	call   c0027ab0 <__muldf3>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afba:	52                   	push   edx
c000afbb:	50                   	push   eax
c000afbc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afc2:	e8 6c c4 01 00       	call   c0027433 <__adddf3>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afcd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afd3:	4f                   	dec    edi
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afde:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afe5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afe9:	e8 b9 d4 01 00       	call   c00284a7 <__extendsfdf2>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b001:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b005:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b009:	e8 a2 ca 01 00       	call   c0027ab0 <__muldf3>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b015:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b019:	52                   	push   edx
c000b01a:	50                   	push   eax
c000b01b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b01e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b021:	e8 0d c4 01 00       	call   c0027433 <__adddf3>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b02c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b02f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b032:	4f                   	dec    edi
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b03d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b044:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b048:	e8 5a d4 01 00       	call   c00284a7 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b054:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b064:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b068:	e8 43 ca 01 00       	call   c0027ab0 <__muldf3>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b074:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b078:	52                   	push   edx
c000b079:	50                   	push   eax
c000b07a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b07d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b080:	e8 ae c3 01 00       	call   c0027433 <__adddf3>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b08b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b08e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b091:	4f                   	dec    edi
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b09c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a7:	e8 fb d3 01 00       	call   c00284a7 <__extendsfdf2>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c7:	e8 e4 c9 01 00       	call   c0027ab0 <__muldf3>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d7:	52                   	push   edx
c000b0d8:	50                   	push   eax
c000b0d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0dc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0df:	e8 4f c3 01 00       	call   c0027433 <__adddf3>
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ea:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f0:	4f                   	dec    edi
c000b0f1:	83 ec 0c             	sub    esp,0xc
c000b0f4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0fb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b102:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b106:	e8 9c d3 01 00       	call   c00284a7 <__extendsfdf2>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b112:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b126:	e8 85 c9 01 00       	call   c0027ab0 <__muldf3>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b132:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b136:	52                   	push   edx
c000b137:	50                   	push   eax
c000b138:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b13b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13e:	e8 f0 c2 01 00       	call   c0027433 <__adddf3>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b149:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b14f:	4f                   	dec    edi
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b15a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b161:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b165:	e8 3d d3 01 00       	call   c00284a7 <__extendsfdf2>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b171:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b181:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b185:	e8 26 c9 01 00       	call   c0027ab0 <__muldf3>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b191:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b195:	52                   	push   edx
c000b196:	50                   	push   eax
c000b197:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b19a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19d:	e8 91 c2 01 00       	call   c0027433 <__adddf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1ab:	85 ff                	test   edi,edi
c000b1ad:	0f 8f e9 fc ff ff    	jg     c000ae9c <calc_output_multi+0x10e>
c000b1b3:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1bb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1bf:	0f 89 4c fc ff ff    	jns    c000ae11 <calc_output_multi+0x83>
c000b1c5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1cd:	29 c8                	sub    eax,ecx
c000b1cf:	99                   	cdq    
c000b1d0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1d8:	0f af d0             	imul   edx,eax
c000b1db:	40                   	inc    eax
c000b1dc:	01 d1                	add    ecx,edx
c000b1de:	0f af c3             	imul   eax,ebx
c000b1e1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1e5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ec:	55                   	push   ebp
c000b1ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f1:	6a 00                	push   0x0
c000b1f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1f7:	e8 7c 55 ff ff       	call   c0000778 <memset>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b203:	e8 e0 e6 ff ff       	call   c00098e8 <fp_to_double>
c000b208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b20c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b214:	e8 c5 e6 ff ff       	call   c00098de <fp_to_int>
c000b219:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b21c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b21f:	57                   	push   edi
c000b220:	57                   	push   edi
c000b221:	89 df                	mov    edi,ebx
c000b223:	55                   	push   ebp
c000b224:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b228:	e8 9b bb 01 00       	call   c0026dc8 <__subsf3>
c000b22d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b230:	e8 72 d2 01 00       	call   c00284a7 <__extendsfdf2>
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b23c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b248:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b24c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b250:	e8 5b c8 01 00       	call   c0027ab0 <__muldf3>
c000b255:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b25c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b260:	e8 42 d2 01 00       	call   c00284a7 <__extendsfdf2>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b270:	52                   	push   edx
c000b271:	50                   	push   eax
c000b272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	e8 b4 c1 01 00       	call   c0027433 <__adddf3>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b28a:	89 f8                	mov    eax,edi
c000b28c:	b9 08 00 00 00       	mov    ecx,0x8
c000b291:	99                   	cdq    
c000b292:	f7 f9                	idiv   ecx
c000b294:	4a                   	dec    edx
c000b295:	83 fa 06             	cmp    edx,0x6
c000b298:	77 07                	ja     c000b2a1 <calc_output_multi+0x513>
c000b29a:	ff 24 95 e0 9c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6320]
c000b2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a5:	4f                   	dec    edi
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2bb:	e8 e7 d1 01 00       	call   c00284a7 <__extendsfdf2>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2db:	e8 d0 c7 01 00       	call   c0027ab0 <__muldf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2eb:	52                   	push   edx
c000b2ec:	50                   	push   eax
c000b2ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f3:	e8 3b c1 01 00       	call   c0027433 <__adddf3>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b305:	4f                   	dec    edi
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b310:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b317:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31b:	e8 87 d1 01 00       	call   c00284a7 <__extendsfdf2>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b333:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b337:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33b:	e8 70 c7 01 00       	call   c0027ab0 <__muldf3>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b347:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34b:	52                   	push   edx
c000b34c:	50                   	push   eax
c000b34d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b350:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b353:	e8 db c0 01 00       	call   c0027433 <__adddf3>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b365:	4f                   	dec    edi
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b370:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b377:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37b:	e8 27 d1 01 00       	call   c00284a7 <__extendsfdf2>
c000b380:	83 c4 10             	add    esp,0x10
c000b383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b387:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39b:	e8 10 c7 01 00       	call   c0027ab0 <__muldf3>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ab:	52                   	push   edx
c000b3ac:	50                   	push   eax
c000b3ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b3:	e8 7b c0 01 00       	call   c0027433 <__adddf3>
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c5:	4f                   	dec    edi
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3db:	e8 c7 d0 01 00       	call   c00284a7 <__extendsfdf2>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3fb:	e8 b0 c6 01 00       	call   c0027ab0 <__muldf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b407:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40b:	52                   	push   edx
c000b40c:	50                   	push   eax
c000b40d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b410:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b413:	e8 1b c0 01 00       	call   c0027433 <__adddf3>
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b41e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b425:	4f                   	dec    edi
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b430:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b437:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b43b:	e8 67 d0 01 00       	call   c00284a7 <__extendsfdf2>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b447:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b453:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45b:	e8 50 c6 01 00       	call   c0027ab0 <__muldf3>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46b:	52                   	push   edx
c000b46c:	50                   	push   eax
c000b46d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b470:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b473:	e8 bb bf 01 00       	call   c0027433 <__adddf3>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b47e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b485:	4f                   	dec    edi
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b48c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b490:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b497:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b49b:	e8 07 d0 01 00       	call   c00284a7 <__extendsfdf2>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bb:	e8 f0 c5 01 00       	call   c0027ab0 <__muldf3>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cb:	52                   	push   edx
c000b4cc:	50                   	push   eax
c000b4cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4d3:	e8 5b bf 01 00       	call   c0027433 <__adddf3>
c000b4d8:	83 c4 10             	add    esp,0x10
c000b4db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	4f                   	dec    edi
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4fb:	e8 a7 cf 01 00       	call   c00284a7 <__extendsfdf2>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b507:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b513:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b517:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51b:	e8 90 c5 01 00       	call   c0027ab0 <__muldf3>
c000b520:	83 c4 10             	add    esp,0x10
c000b523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b527:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b530:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b533:	e8 fb be 01 00       	call   c0027433 <__adddf3>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b53e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b545:	4f                   	dec    edi
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b550:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b557:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b55b:	e8 47 cf 01 00       	call   c00284a7 <__extendsfdf2>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b573:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b577:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57b:	e8 30 c5 01 00       	call   c0027ab0 <__muldf3>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b587:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58b:	52                   	push   edx
c000b58c:	50                   	push   eax
c000b58d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b590:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b593:	e8 9b be 01 00       	call   c0027433 <__adddf3>
c000b598:	83 c4 10             	add    esp,0x10
c000b59b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b59e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a1:	85 ff                	test   edi,edi
c000b5a3:	0f 8f e1 fc ff ff    	jg     c000b28a <calc_output_multi+0x4fc>
c000b5a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5ad:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b1:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5ba:	0f 8f 3f fc ff ff    	jg     c000b1ff <calc_output_multi+0x471>
c000b5c0:	be 08 00 00 00       	mov    esi,0x8
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	99                   	cdq    
c000b5c8:	f7 fe                	idiv   esi
c000b5ca:	4a                   	dec    edx
c000b5cb:	83 fa 06             	cmp    edx,0x6
c000b5ce:	77 07                	ja     c000b5d7 <calc_output_multi+0x849>
c000b5d0:	ff 24 95 fc 9c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6304]
c000b5d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5db:	4b                   	dec    ebx
c000b5dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ee:	e8 40 be 01 00       	call   c0027433 <__adddf3>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 9d c4 01 00       	call   c0027ab0 <__muldf3>
c000b613:	5d                   	pop    ebp
c000b614:	59                   	pop    ecx
c000b615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b619:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 59 cd 01 00       	call   c0028383 <__truncdfsf2>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b631:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b638:	4b                   	dec    ebx
c000b639:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b644:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b648:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64b:	e8 e3 bd 01 00       	call   c0027433 <__adddf3>
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 40 c4 01 00       	call   c0027ab0 <__muldf3>
c000b670:	59                   	pop    ecx
c000b671:	5f                   	pop    edi
c000b672:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 fc cc 01 00       	call   c0028383 <__truncdfsf2>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b695:	4b                   	dec    ebx
c000b696:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b69a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b69d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a8:	e8 86 bd 01 00       	call   c0027433 <__adddf3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 e3 c3 01 00       	call   c0027ab0 <__muldf3>
c000b6cd:	5f                   	pop    edi
c000b6ce:	5d                   	pop    ebp
c000b6cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6df:	e8 9f cc 01 00       	call   c0028383 <__truncdfsf2>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f2:	4b                   	dec    ebx
c000b6f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b702:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b705:	e8 29 bd 01 00       	call   c0027433 <__adddf3>
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b711:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b721:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b725:	e8 86 c3 01 00       	call   c0027ab0 <__muldf3>
c000b72a:	5d                   	pop    ebp
c000b72b:	59                   	pop    ecx
c000b72c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b730:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b73c:	e8 42 cc 01 00       	call   c0028383 <__truncdfsf2>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b748:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74f:	4b                   	dec    ebx
c000b750:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b754:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b75b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b762:	e8 cc bc 01 00       	call   c0027433 <__adddf3>
c000b767:	83 c4 10             	add    esp,0x10
c000b76a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b782:	e8 29 c3 01 00       	call   c0027ab0 <__muldf3>
c000b787:	59                   	pop    ecx
c000b788:	5f                   	pop    edi
c000b789:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b78d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b799:	e8 e5 cb 01 00       	call   c0028383 <__truncdfsf2>
c000b79e:	83 c4 10             	add    esp,0x10
c000b7a1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7a5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ac:	4b                   	dec    ebx
c000b7ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7bc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bf:	e8 6f bc 01 00       	call   c0027433 <__adddf3>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7df:	e8 cc c2 01 00       	call   c0027ab0 <__muldf3>
c000b7e4:	5f                   	pop    edi
c000b7e5:	5d                   	pop    ebp
c000b7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f6:	e8 88 cb 01 00       	call   c0028383 <__truncdfsf2>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b802:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b809:	4b                   	dec    ebx
c000b80a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b80e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b815:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b819:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b81c:	e8 12 bc 01 00       	call   c0027433 <__adddf3>
c000b821:	83 c4 10             	add    esp,0x10
c000b824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b828:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b838:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83c:	e8 6f c2 01 00       	call   c0027ab0 <__muldf3>
c000b841:	5d                   	pop    ebp
c000b842:	59                   	pop    ecx
c000b843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b847:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b84b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b84f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b853:	e8 2b cb 01 00       	call   c0028383 <__truncdfsf2>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b85f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	4b                   	dec    ebx
c000b867:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b86b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b872:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b876:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b879:	e8 b5 bb 01 00       	call   c0027433 <__adddf3>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b899:	e8 12 c2 01 00       	call   c0027ab0 <__muldf3>
c000b89e:	59                   	pop    ecx
c000b89f:	5f                   	pop    edi
c000b8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b0:	e8 ce ca 01 00       	call   c0028383 <__truncdfsf2>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	85 db                	test   ebx,ebx
c000b8ba:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8be:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c1:	0f 8f fe fc ff ff    	jg     c000b5c5 <calc_output_multi+0x837>
c000b8c7:	83 c4 4c             	add    esp,0x4c
c000b8ca:	5b                   	pop    ebx
c000b8cb:	5e                   	pop    esi
c000b8cc:	5f                   	pop    edi
c000b8cd:	5d                   	pop    ebp
c000b8ce:	c3                   	ret    

c000b8cf <double_to_fp>:
c000b8cf:	83 ec 0c             	sub    esp,0xc
c000b8d2:	68 00 00 b0 40       	push   0x40b00000
c000b8d7:	6a 00                	push   0x0
c000b8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e1:	e8 ca c1 01 00       	call   c0027ab0 <__muldf3>
c000b8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8ee:	83 c4 1c             	add    esp,0x1c
c000b8f1:	e9 3a cc 01 00       	jmp    c0028530 <lrint>

c000b8f6 <prepare_data>:
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	56                   	push   esi
c000b8f9:	53                   	push   ebx
c000b8fa:	83 ec 1c             	sub    esp,0x1c
c000b8fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b901:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b905:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b909:	0f 89 57 01 00 00    	jns    c000ba66 <prepare_data+0x170>
c000b90f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b912:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b915:	85 d2                	test   edx,edx
c000b917:	75 0d                	jne    c000b926 <prepare_data+0x30>
c000b919:	8d 14 36             	lea    edx,[esi+esi*1]
c000b91c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b91f:	29 d0                	sub    eax,edx
c000b921:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b924:	eb 44                	jmp    c000b96a <prepare_data+0x74>
c000b926:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b929:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b92c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b92f:	39 c1                	cmp    ecx,eax
c000b931:	7d 04                	jge    c000b937 <prepare_data+0x41>
c000b933:	29 d0                	sub    eax,edx
c000b935:	eb 2d                	jmp    c000b964 <prepare_data+0x6e>
c000b937:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b93d:	29 d7                	sub    edi,edx
c000b93f:	01 f7                	add    edi,esi
c000b941:	51                   	push   ecx
c000b942:	29 f2                	sub    edx,esi
c000b944:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b94b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b94e:	51                   	push   ecx
c000b94f:	52                   	push   edx
c000b950:	50                   	push   eax
c000b951:	e8 26 4d ff ff       	call   c000067c <memmove>
c000b956:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b959:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b95c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b95f:	29 f0                	sub    eax,esi
c000b961:	83 c4 10             	add    esp,0x10
c000b964:	29 f0                	sub    eax,esi
c000b966:	79 02                	jns    c000b96a <prepare_data+0x74>
c000b968:	31 c0                	xor    eax,eax
c000b96a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b96d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b970:	29 ef                	sub    edi,ebp
c000b972:	39 c7                	cmp    edi,eax
c000b974:	7e 02                	jle    c000b978 <prepare_data+0x82>
c000b976:	89 c7                	mov    edi,eax
c000b978:	89 f8                	mov    eax,edi
c000b97a:	99                   	cdq    
c000b97b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b97e:	b8 15 00 00 00       	mov    eax,0x15
c000b983:	29 d7                	sub    edi,edx
c000b985:	0f 88 dd 00 00 00    	js     c000ba68 <prepare_data+0x172>
c000b98b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b98e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b991:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b994:	0f 8f ce 00 00 00    	jg     c000ba68 <prepare_data+0x172>
c000b99a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a0:	50                   	push   eax
c000b9a1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9a8:	50                   	push   eax
c000b9a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9af:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9b2:	50                   	push   eax
c000b9b3:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	50                   	push   eax
c000b9bb:	e8 84 4d ff ff       	call   c0000744 <memcpy>
c000b9c0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9c3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9c6:	01 fd                	add    ebp,edi
c000b9c8:	01 f9                	add    ecx,edi
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9d3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9da:	0f 85 86 00 00 00    	jne    c000ba66 <prepare_data+0x170>
c000b9e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9e3:	89 e8                	mov    eax,ebp
c000b9e5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9e8:	29 c8                	sub    eax,ecx
c000b9ea:	39 f8                	cmp    eax,edi
c000b9ec:	7d 78                	jge    c000ba66 <prepare_data+0x170>
c000b9ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9f2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9f6:	74 6e                	je     c000ba66 <prepare_data+0x170>
c000b9f8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ff:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba02:	29 ef                	sub    edi,ebp
c000ba04:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba08:	7c 29                	jl     c000ba33 <prepare_data+0x13d>
c000ba0a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0d:	29 f1                	sub    ecx,esi
c000ba0f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba16:	55                   	push   ebp
c000ba17:	50                   	push   eax
c000ba18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba1b:	50                   	push   eax
c000ba1c:	52                   	push   edx
c000ba1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba21:	e8 56 4c ff ff       	call   c000067c <memmove>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba36:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba39:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba3c:	83 c6 05             	add    esi,0x5
c000ba3f:	78 07                	js     c000ba48 <prepare_data+0x152>
c000ba41:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba44:	39 cf                	cmp    edi,ecx
c000ba46:	7e 04                	jle    c000ba4c <prepare_data+0x156>
c000ba48:	89 ce                	mov    esi,ecx
c000ba4a:	29 c6                	sub    esi,eax
c000ba4c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba4f:	51                   	push   ecx
c000ba50:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba57:	51                   	push   ecx
c000ba58:	6a 00                	push   0x0
c000ba5a:	50                   	push   eax
c000ba5b:	e8 18 4d ff ff       	call   c0000778 <memset>
c000ba60:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	31 c0                	xor    eax,eax
c000ba68:	83 c4 1c             	add    esp,0x1c
c000ba6b:	5b                   	pop    ebx
c000ba6c:	5e                   	pop    esi
c000ba6d:	5f                   	pop    edi
c000ba6e:	5d                   	pop    ebp
c000ba6f:	c3                   	ret    

c000ba70 <sinc_multichan_vari_process>:
c000ba70:	55                   	push   ebp
c000ba71:	ba 05 00 00 00       	mov    edx,0x5
c000ba76:	57                   	push   edi
c000ba77:	56                   	push   esi
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 4c             	sub    esp,0x4c
c000ba7c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba80:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba84:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba87:	85 db                	test   ebx,ebx
c000ba89:	0f 84 9b 06 00 00    	je     c000c12a <sinc_multichan_vari_process+0x6ba>
c000ba8f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba92:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba95:	0f af c5             	imul   eax,ebp
c000ba98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba9b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baa5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000baac:	0f af c5             	imul   eax,ebp
c000baaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bab2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bab5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000babb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000babf:	68 00 00 70 3f       	push   0x3f700000
c000bac4:	6a 00                	push   0x0
c000bac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	e8 ac c8 01 00       	call   c002837f <__ltdf2>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	ba 16 00 00 00       	mov    edx,0x16
c000badb:	85 c0                	test   eax,eax
c000badd:	0f 88 47 06 00 00    	js     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bae3:	68 00 00 70 40       	push   0x40700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 6a c8 01 00       	call   c0028361 <__gtdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 8f 23 06 00 00    	jg     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bb07:	83 ec 0c             	sub    esp,0xc
c000bb0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb0d:	e8 01 c6 01 00       	call   c0028113 <__floatsidf>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb1d:	68 00 00 00 40       	push   0x40000000
c000bb22:	6a 00                	push   0x0
c000bb24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb2c:	e8 02 b9 01 00       	call   c0027433 <__adddf3>
c000bb31:	59                   	pop    ecx
c000bb32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb3d:	e8 d1 c5 01 00       	call   c0028113 <__floatsidf>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb4d:	52                   	push   edx
c000bb4e:	50                   	push   eax
c000bb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb57:	e8 38 c2 01 00       	call   c0027d94 <__divdf3>
c000bb5c:	83 c4 10             	add    esp,0x10
c000bb5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb67:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb6a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	e8 d7 c7 01 00       	call   c0028361 <__gtdf2>
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	7e 2d                	jle    c000bbbe <sinc_multichan_vari_process+0x14e>
c000bb91:	68 00 00 f0 3f       	push   0x3ff00000
c000bb96:	6a 00                	push   0x0
c000bb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba0:	e8 da c7 01 00       	call   c002837f <__ltdf2>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	85 c0                	test   eax,eax
c000bbaa:	79 4d                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbbc:	eb 1b                	jmp    c000bbd9 <sinc_multichan_vari_process+0x169>
c000bbbe:	68 00 00 f0 3f       	push   0x3ff00000
c000bbc3:	6a 00                	push   0x0
c000bbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbcd:	e8 ad c7 01 00       	call   c002837f <__ltdf2>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	85 c0                	test   eax,eax
c000bbd7:	79 20                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe9:	e8 a6 c1 01 00       	call   c0027d94 <__divdf3>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf9:	50                   	push   eax
c000bbfa:	50                   	push   eax
c000bbfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc03:	e8 28 c9 01 00       	call   c0028530 <lrint>
c000bc08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc0b:	40                   	inc    eax
c000bc0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc10:	0f af c5             	imul   eax,ebp
c000bc13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc17:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1e:	58                   	pop    eax
c000bc1f:	5a                   	pop    edx
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc28:	e8 03 c9 01 00       	call   c0028530 <lrint>
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	50                   	push   eax
c000bc31:	e8 dd c4 01 00       	call   c0028113 <__floatsidf>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc41:	52                   	push   edx
c000bc42:	50                   	push   eax
c000bc43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4b:	e8 34 be 01 00       	call   c0027a84 <__subdf3>
c000bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc58:	83 c4 20             	add    esp,0x20
c000bc5b:	6a 00                	push   0x0
c000bc5d:	6a 00                	push   0x0
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc67:	e8 13 c7 01 00       	call   c002837f <__ltdf2>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	85 c0                	test   eax,eax
c000bc71:	79 1f                	jns    c000bc92 <sinc_multichan_vari_process+0x222>
c000bc73:	68 00 00 f0 3f       	push   0x3ff00000
c000bc78:	6a 00                	push   0x0
c000bc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc82:	e8 ac b7 01 00       	call   c0027433 <__adddf3>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc92:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc95:	83 ec 10             	sub    esp,0x10
c000bc98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcaf:	e8 d0 bd 01 00       	call   c0027a84 <__subdf3>
c000bcb4:	83 c4 18             	add    esp,0x18
c000bcb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcbf:	52                   	push   edx
c000bcc0:	50                   	push   eax
c000bcc1:	e8 6a c8 01 00       	call   c0028530 <lrint>
c000bcc6:	0f af e8             	imul   ebp,eax
c000bcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bccd:	01 e8                	add    eax,ebp
c000bccf:	99                   	cdq    
c000bcd0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcd3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcde:	68 00 00 f0 3f       	push   0x3ff00000
c000bce3:	6a 00                	push   0x0
c000bce5:	e8 aa c0 01 00       	call   c0027d94 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcfa:	68 23 42 92 0c       	push   0xc924223
c000bcff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd07:	e8 27 b7 01 00       	call   c0027433 <__adddf3>
c000bd0c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd14:	83 c4 20             	add    esp,0x20
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd27:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd2a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd2d:	7d 50                	jge    c000bd7f <sinc_multichan_vari_process+0x30f>
c000bd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd35:	01 c8                	add    eax,ecx
c000bd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3a:	99                   	cdq    
c000bd3b:	f7 f9                	idiv   ecx
c000bd3d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd41:	7d 0c                	jge    c000bd4f <sinc_multichan_vari_process+0x2df>
c000bd43:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd46:	85 ed                	test   ebp,ebp
c000bd48:	79 6b                	jns    c000bdb5 <sinc_multichan_vari_process+0x345>
c000bd4a:	e9 e6 00 00 00       	jmp    c000be35 <sinc_multichan_vari_process+0x3c5>
c000bd4f:	50                   	push   eax
c000bd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd54:	57                   	push   edi
c000bd55:	53                   	push   ebx
c000bd56:	e8 9b fb ff ff       	call   c000b8f6 <prepare_data>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	89 c2                	mov    edx,eax
c000bd60:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd63:	85 c0                	test   eax,eax
c000bd65:	0f 85 bf 03 00 00    	jne    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bd6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd6e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd71:	01 c8                	add    eax,ecx
c000bd73:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd76:	99                   	cdq    
c000bd77:	f7 f9                	idiv   ecx
c000bd79:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd7d:	7c c4                	jl     c000bd43 <sinc_multichan_vari_process+0x2d3>
c000bd7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd87:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd8a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd95:	89 06                	mov    DWORD PTR [esi],eax
c000bd97:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd9d:	99                   	cdq    
c000bd9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bda4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bda7:	99                   	cdq    
c000bda8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb0:	e9 75 03 00 00       	jmp    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bdb5:	83 ec 0c             	sub    esp,0xc
c000bdb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdbb:	e8 53 c3 01 00       	call   c0028113 <__floatsidf>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddb:	e8 53 b6 01 00       	call   c0027433 <__adddf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	e8 33 b6 01 00       	call   c0027433 <__adddf3>
c000be00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be0b:	e8 03 c3 01 00       	call   c0028113 <__floatsidf>
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be1b:	52                   	push   edx
c000be1c:	50                   	push   eax
c000be1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be25:	e8 53 c5 01 00       	call   c002837d <__gedf2>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	85 c0                	test   eax,eax
c000be2f:	0f 89 4a ff ff ff    	jns    c000bd7f <sinc_multichan_vari_process+0x30f>
c000be35:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be39:	0f 8e ed 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be3f:	83 ec 10             	sub    esp,0x10
c000be42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be48:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be4b:	ff 36                	push   DWORD PTR [esi]
c000be4d:	e8 32 bc 01 00       	call   c0027a84 <__subdf3>
c000be52:	83 c4 18             	add    esp,0x18
c000be55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be5d:	52                   	push   edx
c000be5e:	50                   	push   eax
c000be5f:	e8 ac c6 01 00       	call   c0028510 <fabs>
c000be64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be74:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be81:	e8 db c4 01 00       	call   c0028361 <__gtdf2>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	85 c0                	test   eax,eax
c000be8b:	0f 8e 9b 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be91:	8b 06                	mov    eax,DWORD PTR [esi]
c000be93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be9e:	52                   	push   edx
c000be9f:	50                   	push   eax
c000bea0:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bea3:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bea6:	e8 d9 bb 01 00       	call   c0027a84 <__subdf3>
c000beab:	59                   	pop    ecx
c000beac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beb4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000beb7:	e8 57 c2 01 00       	call   c0028113 <__floatsidf>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bec3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bec7:	52                   	push   edx
c000bec8:	50                   	push   eax
c000bec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000becd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed1:	e8 da bb 01 00       	call   c0027ab0 <__muldf3>
c000bed6:	5d                   	pop    ebp
c000bed7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bedf:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bee2:	e8 2c c2 01 00       	call   c0028113 <__floatsidf>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef2:	52                   	push   edx
c000bef3:	50                   	push   eax
c000bef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befc:	e8 93 be 01 00       	call   c0027d94 <__divdf3>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	e8 12 b5 01 00       	call   c0027433 <__adddf3>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf32:	e8 dc c1 01 00       	call   c0028113 <__floatsidf>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	e8 28 c4 01 00       	call   c002837f <__ltdf2>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf64:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf6c:	78 10                	js     c000bf7e <sinc_multichan_vari_process+0x50e>
c000bf6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8e:	e8 1d bb 01 00       	call   c0027ab0 <__muldf3>
c000bf93:	59                   	pop    ecx
c000bf94:	5d                   	pop    ebp
c000bf95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa5:	e8 25 f9 ff ff       	call   c000b8cf <double_to_fp>
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	89 c5                	mov    ebp,eax
c000bfb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfbc:	e8 ef ba 01 00       	call   c0027ab0 <__muldf3>
c000bfc1:	83 c4 18             	add    esp,0x18
c000bfc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfcc:	52                   	push   edx
c000bfcd:	50                   	push   eax
c000bfce:	e8 fc f8 ff ff       	call   c000b8cf <double_to_fp>
c000bfd3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfda:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfdd:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe0:	50                   	push   eax
c000bfe1:	50                   	push   eax
c000bfe2:	50                   	push   eax
c000bfe3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe6:	e8 28 c1 01 00       	call   c0028113 <__floatsidf>
c000bfeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	e8 8c bd 01 00       	call   c0027d94 <__divdf3>
c000c008:	83 c4 1c             	add    esp,0x1c
c000c00b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c00f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c013:	52                   	push   edx
c000c014:	89 ea                	mov    edx,ebp
c000c016:	50                   	push   eax
c000c017:	89 d8                	mov    eax,ebx
c000c019:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c01c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c020:	e8 69 ed ff ff       	call   c000ad8e <calc_output_multi>
c000c025:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c028:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c02b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c033:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c037:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03b:	e8 54 bd 01 00       	call   c0027d94 <__divdf3>
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c047:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c053:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05b:	e8 d3 b3 01 00       	call   c0027433 <__adddf3>
c000c060:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c064:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c068:	83 c4 28             	add    esp,0x28
c000c06b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	e8 b8 c4 01 00       	call   c0028530 <lrint>
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	50                   	push   eax
c000c07c:	e8 92 c0 01 00       	call   c0028113 <__floatsidf>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c08c:	52                   	push   edx
c000c08d:	50                   	push   eax
c000c08e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c096:	e8 e9 b9 01 00       	call   c0027a84 <__subdf3>
c000c09b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c09f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a3:	83 c4 20             	add    esp,0x20
c000c0a6:	6a 00                	push   0x0
c000c0a8:	6a 00                	push   0x0
c000c0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b2:	e8 c8 c2 01 00       	call   c002837f <__ltdf2>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	85 c0                	test   eax,eax
c000c0bc:	79 20                	jns    c000c0de <sinc_multichan_vari_process+0x66e>
c000c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 60 b3 01 00       	call   c0027433 <__adddf3>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e1:	83 ec 10             	sub    esp,0x10
c000c0e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0e8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0fb:	e8 84 b9 01 00       	call   c0027a84 <__subdf3>
c000c100:	83 c4 18             	add    esp,0x18
c000c103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c107:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c10b:	52                   	push   edx
c000c10c:	50                   	push   eax
c000c10d:	e8 1e c4 01 00       	call   c0028530 <lrint>
c000c112:	0f af e8             	imul   ebp,eax
c000c115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	01 e8                	add    eax,ebp
c000c11e:	99                   	cdq    
c000c11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c125:	e9 fd fb ff ff       	jmp    c000bd27 <sinc_multichan_vari_process+0x2b7>
c000c12a:	83 c4 4c             	add    esp,0x4c
c000c12d:	89 d0                	mov    eax,edx
c000c12f:	5b                   	pop    ebx
c000c130:	5e                   	pop    esi
c000c131:	5f                   	pop    edi
c000c132:	5d                   	pop    ebp
c000c133:	c3                   	ret    

c000c134 <sinc_hex_vari_process>:
c000c134:	55                   	push   ebp
c000c135:	ba 05 00 00 00       	mov    edx,0x5
c000c13a:	57                   	push   edi
c000c13b:	56                   	push   esi
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 4c             	sub    esp,0x4c
c000c140:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c144:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c148:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c14b:	85 db                	test   ebx,ebx
c000c14d:	0f 84 9c 06 00 00    	je     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c153:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c156:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c159:	0f af c7             	imul   eax,edi
c000c15c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c15f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c169:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c170:	0f af c7             	imul   eax,edi
c000c173:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c176:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c179:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c17c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c184:	68 00 00 70 3f       	push   0x3f700000
c000c189:	6a 00                	push   0x0
c000c18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c193:	e8 e7 c1 01 00       	call   c002837f <__ltdf2>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	ba 16 00 00 00       	mov    edx,0x16
c000c1a0:	85 c0                	test   eax,eax
c000c1a2:	0f 88 47 06 00 00    	js     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1a8:	68 00 00 70 40       	push   0x40700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 a5 c1 01 00       	call   c0028361 <__gtdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 8f 23 06 00 00    	jg     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1d2:	e8 3c bf 01 00       	call   c0028113 <__floatsidf>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1e2:	68 00 00 00 40       	push   0x40000000
c000c1e7:	6a 00                	push   0x0
c000c1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f1:	e8 3d b2 01 00       	call   c0027433 <__adddf3>
c000c1f6:	59                   	pop    ecx
c000c1f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c202:	e8 0c bf 01 00       	call   c0028113 <__floatsidf>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c212:	52                   	push   edx
c000c213:	50                   	push   eax
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21c:	e8 73 bb 01 00       	call   c0027d94 <__divdf3>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c22c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c22f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c236:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	e8 12 c1 01 00       	call   c0028361 <__gtdf2>
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	85 c0                	test   eax,eax
c000c254:	7e 2d                	jle    c000c283 <sinc_hex_vari_process+0x14f>
c000c256:	68 00 00 f0 3f       	push   0x3ff00000
c000c25b:	6a 00                	push   0x0
c000c25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c265:	e8 15 c1 01 00       	call   c002837f <__ltdf2>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	85 c0                	test   eax,eax
c000c26f:	79 4d                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c27d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c281:	eb 1b                	jmp    c000c29e <sinc_hex_vari_process+0x16a>
c000c283:	68 00 00 f0 3f       	push   0x3ff00000
c000c288:	6a 00                	push   0x0
c000c28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c292:	e8 e8 c0 01 00       	call   c002837f <__ltdf2>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	85 c0                	test   eax,eax
c000c29c:	79 20                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c29e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ae:	e8 e1 ba 01 00       	call   c0027d94 <__divdf3>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2be:	50                   	push   eax
c000c2bf:	50                   	push   eax
c000c2c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c8:	e8 63 c2 01 00       	call   c0028530 <lrint>
c000c2cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d0:	40                   	inc    eax
c000c2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d5:	0f af c7             	imul   eax,edi
c000c2d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2e3:	58                   	pop    eax
c000c2e4:	5a                   	pop    edx
c000c2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ed:	e8 3e c2 01 00       	call   c0028530 <lrint>
c000c2f2:	83 ec 0c             	sub    esp,0xc
c000c2f5:	50                   	push   eax
c000c2f6:	e8 18 be 01 00       	call   c0028113 <__floatsidf>
c000c2fb:	83 c4 10             	add    esp,0x10
c000c2fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c302:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c30c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c310:	e8 6f b7 01 00       	call   c0027a84 <__subdf3>
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	83 c4 20             	add    esp,0x20
c000c320:	6a 00                	push   0x0
c000c322:	6a 00                	push   0x0
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32c:	e8 4e c0 01 00       	call   c002837f <__ltdf2>
c000c331:	83 c4 10             	add    esp,0x10
c000c334:	85 c0                	test   eax,eax
c000c336:	79 1f                	jns    c000c357 <sinc_hex_vari_process+0x223>
c000c338:	68 00 00 f0 3f       	push   0x3ff00000
c000c33d:	6a 00                	push   0x0
c000c33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c347:	e8 e7 b0 01 00       	call   c0027433 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c35a:	83 ec 10             	sub    esp,0x10
c000c35d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c361:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c370:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c374:	e8 0b b7 01 00       	call   c0027a84 <__subdf3>
c000c379:	83 c4 18             	add    esp,0x18
c000c37c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c380:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c384:	52                   	push   edx
c000c385:	50                   	push   eax
c000c386:	e8 a5 c1 01 00       	call   c0028530 <lrint>
c000c38b:	0f af f8             	imul   edi,eax
c000c38e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c392:	01 f8                	add    eax,edi
c000c394:	99                   	cdq    
c000c395:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c398:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a3:	68 00 00 f0 3f       	push   0x3ff00000
c000c3a8:	6a 00                	push   0x0
c000c3aa:	e8 e5 b9 01 00       	call   c0027d94 <__divdf3>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3bf:	68 23 42 92 0c       	push   0xc924223
c000c3c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3cc:	e8 62 b0 01 00       	call   c0027433 <__adddf3>
c000c3d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3e4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3f2:	7d 50                	jge    c000c444 <sinc_hex_vari_process+0x310>
c000c3f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fa:	01 c8                	add    eax,ecx
c000c3fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ff:	99                   	cdq    
c000c400:	f7 f9                	idiv   ecx
c000c402:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c406:	7d 0c                	jge    c000c414 <sinc_hex_vari_process+0x2e0>
c000c408:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c40b:	85 ff                	test   edi,edi
c000c40d:	79 6c                	jns    c000c47b <sinc_hex_vari_process+0x347>
c000c40f:	e9 e7 00 00 00       	jmp    c000c4fb <sinc_hex_vari_process+0x3c7>
c000c414:	50                   	push   eax
c000c415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c419:	56                   	push   esi
c000c41a:	53                   	push   ebx
c000c41b:	e8 d6 f4 ff ff       	call   c000b8f6 <prepare_data>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	89 c2                	mov    edx,eax
c000c425:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c428:	85 c0                	test   eax,eax
c000c42a:	0f 85 bf 03 00 00    	jne    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c430:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c433:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c436:	01 c8                	add    eax,ecx
c000c438:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c43b:	99                   	cdq    
c000c43c:	f7 f9                	idiv   ecx
c000c43e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c442:	7c c4                	jl     c000c408 <sinc_hex_vari_process+0x2d4>
c000c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c44c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c44f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c45a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c45d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c460:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c463:	99                   	cdq    
c000c464:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c467:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c46a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c46d:	99                   	cdq    
c000c46e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c471:	31 d2                	xor    edx,edx
c000c473:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c476:	e9 74 03 00 00       	jmp    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c481:	e8 8d bc 01 00       	call   c0028113 <__floatsidf>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c491:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c495:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a1:	e8 8d af 01 00       	call   c0027433 <__adddf3>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	e8 6d af 01 00       	call   c0027433 <__adddf3>
c000c4c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d1:	e8 3d bc 01 00       	call   c0028113 <__floatsidf>
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e1:	52                   	push   edx
c000c4e2:	50                   	push   eax
c000c4e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4eb:	e8 8d be 01 00       	call   c002837d <__gedf2>
c000c4f0:	83 c4 10             	add    esp,0x10
c000c4f3:	85 c0                	test   eax,eax
c000c4f5:	0f 89 49 ff ff ff    	jns    c000c444 <sinc_hex_vari_process+0x310>
c000c4fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ff:	0f 8e ef 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c505:	83 ec 10             	sub    esp,0x10
c000c508:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c50b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c514:	e8 6b b5 01 00       	call   c0027a84 <__subdf3>
c000c519:	83 c4 18             	add    esp,0x18
c000c51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c520:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c524:	52                   	push   edx
c000c525:	50                   	push   eax
c000c526:	e8 e5 bf 01 00       	call   c0028510 <fabs>
c000c52b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c52f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c53b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c548:	e8 14 be 01 00       	call   c0028361 <__gtdf2>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	85 c0                	test   eax,eax
c000c552:	0f 8e 9c 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c558:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c55b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c55e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c562:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c566:	52                   	push   edx
c000c567:	50                   	push   eax
c000c568:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c56b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c56e:	e8 11 b5 01 00       	call   c0027a84 <__subdf3>
c000c573:	59                   	pop    ecx
c000c574:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c578:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c57c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c57f:	e8 8f bb 01 00       	call   c0028113 <__floatsidf>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c58f:	52                   	push   edx
c000c590:	50                   	push   eax
c000c591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c599:	e8 12 b5 01 00       	call   c0027ab0 <__muldf3>
c000c59e:	5f                   	pop    edi
c000c59f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5aa:	e8 64 bb 01 00       	call   c0028113 <__floatsidf>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ba:	52                   	push   edx
c000c5bb:	50                   	push   eax
c000c5bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c4:	e8 cb b7 01 00       	call   c0027d94 <__divdf3>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	e8 4a ae 01 00       	call   c0027433 <__adddf3>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5fa:	e8 14 bb 01 00       	call   c0028113 <__floatsidf>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	e8 60 bd 01 00       	call   c002837f <__ltdf2>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	85 c0                	test   eax,eax
c000c624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c62c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c630:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c634:	78 10                	js     c000c646 <sinc_hex_vari_process+0x512>
c000c636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c63e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c642:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c656:	e8 55 b4 01 00       	call   c0027ab0 <__muldf3>
c000c65b:	59                   	pop    ecx
c000c65c:	5f                   	pop    edi
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c66d:	e8 5d f2 ff ff       	call   c000b8cf <double_to_fp>
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	89 c7                	mov    edi,eax
c000c678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c680:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c684:	e8 27 b4 01 00       	call   c0027ab0 <__muldf3>
c000c689:	83 c4 18             	add    esp,0x18
c000c68c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c694:	52                   	push   edx
c000c695:	50                   	push   eax
c000c696:	e8 34 f2 ff ff       	call   c000b8cf <double_to_fp>
c000c69b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c69e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6a2:	83 c4 0c             	add    esp,0xc
c000c6a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6a8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6ab:	50                   	push   eax
c000c6ac:	50                   	push   eax
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 5e ba 01 00       	call   c0028113 <__floatsidf>
c000c6b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6b9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	e8 c2 b6 01 00       	call   c0027d94 <__divdf3>
c000c6d2:	83 c4 18             	add    esp,0x18
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	89 fa                	mov    edx,edi
c000c6e0:	50                   	push   eax
c000c6e1:	89 d8                	mov    eax,ebx
c000c6e3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6e7:	e8 50 de ff ff       	call   c000a53c <calc_output_hex>
c000c6ec:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c700:	e8 8f b6 01 00       	call   c0027d94 <__divdf3>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c70c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c720:	e8 0e ad 01 00       	call   c0027433 <__adddf3>
c000c725:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c729:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c72d:	83 c4 18             	add    esp,0x18
c000c730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c738:	e8 f3 bd 01 00       	call   c0028530 <lrint>
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	50                   	push   eax
c000c741:	e8 cd b9 01 00       	call   c0028113 <__floatsidf>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c74d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c751:	52                   	push   edx
c000c752:	50                   	push   eax
c000c753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c757:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75b:	e8 24 b3 01 00       	call   c0027a84 <__subdf3>
c000c760:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c764:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c768:	83 c4 20             	add    esp,0x20
c000c76b:	6a 00                	push   0x0
c000c76d:	6a 00                	push   0x0
c000c76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c777:	e8 03 bc 01 00       	call   c002837f <__ltdf2>
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	85 c0                	test   eax,eax
c000c781:	79 20                	jns    c000c7a3 <sinc_hex_vari_process+0x66f>
c000c783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 9b ac 01 00       	call   c0027433 <__adddf3>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7a6:	83 ec 10             	sub    esp,0x10
c000c7a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c0:	e8 bf b2 01 00       	call   c0027a84 <__subdf3>
c000c7c5:	83 c4 18             	add    esp,0x18
c000c7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d0:	52                   	push   edx
c000c7d1:	50                   	push   eax
c000c7d2:	e8 59 bd 01 00       	call   c0028530 <lrint>
c000c7d7:	0f af f8             	imul   edi,eax
c000c7da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	01 f8                	add    eax,edi
c000c7e3:	99                   	cdq    
c000c7e4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7e7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7ea:	e9 fd fb ff ff       	jmp    c000c3ec <sinc_hex_vari_process+0x2b8>
c000c7ef:	83 c4 4c             	add    esp,0x4c
c000c7f2:	89 d0                	mov    eax,edx
c000c7f4:	5b                   	pop    ebx
c000c7f5:	5e                   	pop    esi
c000c7f6:	5f                   	pop    edi
c000c7f7:	5d                   	pop    ebp
c000c7f8:	c3                   	ret    

c000c7f9 <sinc_quad_vari_process>:
c000c7f9:	55                   	push   ebp
c000c7fa:	ba 05 00 00 00       	mov    edx,0x5
c000c7ff:	57                   	push   edi
c000c800:	56                   	push   esi
c000c801:	53                   	push   ebx
c000c802:	83 ec 4c             	sub    esp,0x4c
c000c805:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c809:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c80d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c810:	85 db                	test   ebx,ebx
c000c812:	0f 84 9c 06 00 00    	je     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c818:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c81b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c81e:	0f af c7             	imul   eax,edi
c000c821:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c824:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c827:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c82e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c835:	0f af c7             	imul   eax,edi
c000c838:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c83b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c83e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c841:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c845:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c849:	68 00 00 70 3f       	push   0x3f700000
c000c84e:	6a 00                	push   0x0
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c858:	e8 22 bb 01 00       	call   c002837f <__ltdf2>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	ba 16 00 00 00       	mov    edx,0x16
c000c865:	85 c0                	test   eax,eax
c000c867:	0f 88 47 06 00 00    	js     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c86d:	68 00 00 70 40       	push   0x40700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 e0 ba 01 00       	call   c0028361 <__gtdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 8f 23 06 00 00    	jg     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c891:	83 ec 0c             	sub    esp,0xc
c000c894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c897:	e8 77 b8 01 00       	call   c0028113 <__floatsidf>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	68 00 00 00 40       	push   0x40000000
c000c8ac:	6a 00                	push   0x0
c000c8ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b6:	e8 78 ab 01 00       	call   c0027433 <__adddf3>
c000c8bb:	59                   	pop    ecx
c000c8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8c4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c7:	e8 47 b8 01 00       	call   c0028113 <__floatsidf>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d7:	52                   	push   edx
c000c8d8:	50                   	push   eax
c000c8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e1:	e8 ae b4 01 00       	call   c0027d94 <__divdf3>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8f4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	e8 4d ba 01 00       	call   c0028361 <__gtdf2>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	85 c0                	test   eax,eax
c000c919:	7e 2d                	jle    c000c948 <sinc_quad_vari_process+0x14f>
c000c91b:	68 00 00 f0 3f       	push   0x3ff00000
c000c920:	6a 00                	push   0x0
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92a:	e8 50 ba 01 00       	call   c002837f <__ltdf2>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	85 c0                	test   eax,eax
c000c934:	79 4d                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c93e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c942:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c946:	eb 1b                	jmp    c000c963 <sinc_quad_vari_process+0x16a>
c000c948:	68 00 00 f0 3f       	push   0x3ff00000
c000c94d:	6a 00                	push   0x0
c000c94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	e8 23 ba 01 00       	call   c002837f <__ltdf2>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	85 c0                	test   eax,eax
c000c961:	79 20                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c963:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c967:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c973:	e8 1c b4 01 00       	call   c0027d94 <__divdf3>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c97f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 9e bb 01 00       	call   c0028530 <lrint>
c000c992:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c995:	40                   	inc    eax
c000c996:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c99a:	0f af c7             	imul   eax,edi
c000c99d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a8:	58                   	pop    eax
c000c9a9:	5a                   	pop    edx
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b2:	e8 79 bb 01 00       	call   c0028530 <lrint>
c000c9b7:	83 ec 0c             	sub    esp,0xc
c000c9ba:	50                   	push   eax
c000c9bb:	e8 53 b7 01 00       	call   c0028113 <__floatsidf>
c000c9c0:	83 c4 10             	add    esp,0x10
c000c9c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d5:	e8 aa b0 01 00       	call   c0027a84 <__subdf3>
c000c9da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e2:	83 c4 20             	add    esp,0x20
c000c9e5:	6a 00                	push   0x0
c000c9e7:	6a 00                	push   0x0
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f1:	e8 89 b9 01 00       	call   c002837f <__ltdf2>
c000c9f6:	83 c4 10             	add    esp,0x10
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	79 1f                	jns    c000ca1c <sinc_quad_vari_process+0x223>
c000c9fd:	68 00 00 f0 3f       	push   0x3ff00000
c000ca02:	6a 00                	push   0x0
c000ca04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca0c:	e8 22 aa 01 00       	call   c0027433 <__adddf3>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca1c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca1f:	83 ec 10             	sub    esp,0x10
c000ca22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca26:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca39:	e8 46 b0 01 00       	call   c0027a84 <__subdf3>
c000ca3e:	83 c4 18             	add    esp,0x18
c000ca41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca49:	52                   	push   edx
c000ca4a:	50                   	push   eax
c000ca4b:	e8 e0 ba 01 00       	call   c0028530 <lrint>
c000ca50:	0f af f8             	imul   edi,eax
c000ca53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca57:	01 f8                	add    eax,edi
c000ca59:	99                   	cdq    
c000ca5a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca68:	68 00 00 f0 3f       	push   0x3ff00000
c000ca6d:	6a 00                	push   0x0
c000ca6f:	e8 20 b3 01 00       	call   c0027d94 <__divdf3>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca84:	68 23 42 92 0c       	push   0xc924223
c000ca89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca91:	e8 9d a9 01 00       	call   c0027433 <__adddf3>
c000ca96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca9e:	83 c4 20             	add    esp,0x20
c000caa1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000caa9:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cab4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cab7:	7d 50                	jge    c000cb09 <sinc_quad_vari_process+0x310>
c000cab9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cabf:	01 c8                	add    eax,ecx
c000cac1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac4:	99                   	cdq    
c000cac5:	f7 f9                	idiv   ecx
c000cac7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacb:	7d 0c                	jge    c000cad9 <sinc_quad_vari_process+0x2e0>
c000cacd:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad0:	85 ff                	test   edi,edi
c000cad2:	79 6c                	jns    c000cb40 <sinc_quad_vari_process+0x347>
c000cad4:	e9 e7 00 00 00       	jmp    c000cbc0 <sinc_quad_vari_process+0x3c7>
c000cad9:	50                   	push   eax
c000cada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	e8 11 ee ff ff       	call   c000b8f6 <prepare_data>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	89 c2                	mov    edx,eax
c000caea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caed:	85 c0                	test   eax,eax
c000caef:	0f 85 bf 03 00 00    	jne    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000caf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cafb:	01 c8                	add    eax,ecx
c000cafd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb00:	99                   	cdq    
c000cb01:	f7 f9                	idiv   ecx
c000cb03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb07:	7c c4                	jl     c000cacd <sinc_quad_vari_process+0x2d4>
c000cb09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb11:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb22:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb25:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb28:	99                   	cdq    
c000cb29:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb2c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb32:	99                   	cdq    
c000cb33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb36:	31 d2                	xor    edx,edx
c000cb38:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb3b:	e9 74 03 00 00       	jmp    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb46:	e8 c8 b5 01 00       	call   c0028113 <__floatsidf>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb66:	e8 c8 a8 01 00       	call   c0027433 <__adddf3>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb72:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	e8 a8 a8 01 00       	call   c0027433 <__adddf3>
c000cb8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb96:	e8 78 b5 01 00       	call   c0028113 <__floatsidf>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cba6:	52                   	push   edx
c000cba7:	50                   	push   eax
c000cba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb0:	e8 c8 b7 01 00       	call   c002837d <__gedf2>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	85 c0                	test   eax,eax
c000cbba:	0f 89 49 ff ff ff    	jns    c000cb09 <sinc_quad_vari_process+0x310>
c000cbc0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbc4:	0f 8e ef 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cbca:	83 ec 10             	sub    esp,0x10
c000cbcd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbd3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbd6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbd9:	e8 a6 ae 01 00       	call   c0027a84 <__subdf3>
c000cbde:	83 c4 18             	add    esp,0x18
c000cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbe9:	52                   	push   edx
c000cbea:	50                   	push   eax
c000cbeb:	e8 20 b9 01 00       	call   c0028510 <fabs>
c000cbf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbf8:	83 c4 10             	add    esp,0x10
c000cbfb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc00:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0d:	e8 4f b7 01 00       	call   c0028361 <__gtdf2>
c000cc12:	83 c4 10             	add    esp,0x10
c000cc15:	85 c0                	test   eax,eax
c000cc17:	0f 8e 9c 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cc1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc2b:	52                   	push   edx
c000cc2c:	50                   	push   eax
c000cc2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc33:	e8 4c ae 01 00       	call   c0027a84 <__subdf3>
c000cc38:	59                   	pop    ecx
c000cc39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc3d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc44:	e8 ca b4 01 00       	call   c0028113 <__floatsidf>
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc54:	52                   	push   edx
c000cc55:	50                   	push   eax
c000cc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5e:	e8 4d ae 01 00       	call   c0027ab0 <__muldf3>
c000cc63:	5f                   	pop    edi
c000cc64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc6c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc6f:	e8 9f b4 01 00       	call   c0028113 <__floatsidf>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7f:	52                   	push   edx
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc89:	e8 06 b1 01 00       	call   c0027d94 <__divdf3>
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	e8 85 a7 01 00       	call   c0027433 <__adddf3>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccb9:	83 ec 0c             	sub    esp,0xc
c000ccbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccbf:	e8 4f b4 01 00       	call   c0028113 <__floatsidf>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	e8 9b b6 01 00       	call   c002837f <__ltdf2>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	85 c0                	test   eax,eax
c000cce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cced:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccf9:	78 10                	js     c000cd0b <sinc_quad_vari_process+0x512>
c000ccfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1b:	e8 90 ad 01 00       	call   c0027ab0 <__muldf3>
c000cd20:	59                   	pop    ecx
c000cd21:	5f                   	pop    edi
c000cd22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd32:	e8 98 eb ff ff       	call   c000b8cf <double_to_fp>
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	89 c7                	mov    edi,eax
c000cd3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd49:	e8 62 ad 01 00       	call   c0027ab0 <__muldf3>
c000cd4e:	83 c4 18             	add    esp,0x18
c000cd51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd59:	52                   	push   edx
c000cd5a:	50                   	push   eax
c000cd5b:	e8 6f eb ff ff       	call   c000b8cf <double_to_fp>
c000cd60:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd67:	83 c4 0c             	add    esp,0xc
c000cd6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd6d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd70:	50                   	push   eax
c000cd71:	50                   	push   eax
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 99 b3 01 00       	call   c0028113 <__floatsidf>
c000cd7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	e8 fd af 01 00       	call   c0027d94 <__divdf3>
c000cd97:	83 c4 18             	add    esp,0x18
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	89 fa                	mov    edx,edi
c000cda5:	50                   	push   eax
c000cda6:	89 d8                	mov    eax,ebx
c000cda8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdac:	e8 a5 d1 ff ff       	call   c0009f56 <calc_output_quad>
c000cdb1:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc5:	e8 ca af 01 00       	call   c0027d94 <__divdf3>
c000cdca:	83 c4 10             	add    esp,0x10
c000cdcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde5:	e8 49 a6 01 00       	call   c0027433 <__adddf3>
c000cdea:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdf2:	83 c4 18             	add    esp,0x18
c000cdf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdfd:	e8 2e b7 01 00       	call   c0028530 <lrint>
c000ce02:	83 ec 0c             	sub    esp,0xc
c000ce05:	50                   	push   eax
c000ce06:	e8 08 b3 01 00       	call   c0028113 <__floatsidf>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce16:	52                   	push   edx
c000ce17:	50                   	push   eax
c000ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce20:	e8 5f ac 01 00       	call   c0027a84 <__subdf3>
c000ce25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce2d:	83 c4 20             	add    esp,0x20
c000ce30:	6a 00                	push   0x0
c000ce32:	6a 00                	push   0x0
c000ce34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3c:	e8 3e b5 01 00       	call   c002837f <__ltdf2>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	85 c0                	test   eax,eax
c000ce46:	79 20                	jns    c000ce68 <sinc_quad_vari_process+0x66f>
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 d6 a5 01 00       	call   c0027433 <__adddf3>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce6b:	83 ec 10             	sub    esp,0x10
c000ce6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce72:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce85:	e8 fa ab 01 00       	call   c0027a84 <__subdf3>
c000ce8a:	83 c4 18             	add    esp,0x18
c000ce8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce95:	52                   	push   edx
c000ce96:	50                   	push   eax
c000ce97:	e8 94 b6 01 00       	call   c0028530 <lrint>
c000ce9c:	0f af f8             	imul   edi,eax
c000ce9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	01 f8                	add    eax,edi
c000cea8:	99                   	cdq    
c000cea9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceaf:	e9 fd fb ff ff       	jmp    c000cab1 <sinc_quad_vari_process+0x2b8>
c000ceb4:	83 c4 4c             	add    esp,0x4c
c000ceb7:	89 d0                	mov    eax,edx
c000ceb9:	5b                   	pop    ebx
c000ceba:	5e                   	pop    esi
c000cebb:	5f                   	pop    edi
c000cebc:	5d                   	pop    ebp
c000cebd:	c3                   	ret    

c000cebe <sinc_stereo_vari_process>:
c000cebe:	55                   	push   ebp
c000cebf:	ba 05 00 00 00       	mov    edx,0x5
c000cec4:	57                   	push   edi
c000cec5:	56                   	push   esi
c000cec6:	53                   	push   ebx
c000cec7:	83 ec 4c             	sub    esp,0x4c
c000ceca:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cece:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ced2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	0f 84 9c 06 00 00    	je     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cedd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cee3:	0f af c7             	imul   eax,edi
c000cee6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cee9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cef3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cefa:	0f af c7             	imul   eax,edi
c000cefd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf0e:	68 00 00 70 3f       	push   0x3f700000
c000cf13:	6a 00                	push   0x0
c000cf15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1d:	e8 5d b4 01 00       	call   c002837f <__ltdf2>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	ba 16 00 00 00       	mov    edx,0x16
c000cf2a:	85 c0                	test   eax,eax
c000cf2c:	0f 88 47 06 00 00    	js     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf32:	68 00 00 70 40       	push   0x40700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 1b b4 01 00       	call   c0028361 <__gtdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 8f 23 06 00 00    	jg     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf56:	83 ec 0c             	sub    esp,0xc
c000cf59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf5c:	e8 b2 b1 01 00       	call   c0028113 <__floatsidf>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf6c:	68 00 00 00 40       	push   0x40000000
c000cf71:	6a 00                	push   0x0
c000cf73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7b:	e8 b3 a4 01 00       	call   c0027433 <__adddf3>
c000cf80:	59                   	pop    ecx
c000cf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf8c:	e8 82 b1 01 00       	call   c0028113 <__floatsidf>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf9c:	52                   	push   edx
c000cf9d:	50                   	push   eax
c000cf9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa6:	e8 e9 ad 01 00       	call   c0027d94 <__divdf3>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfb6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfb9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	e8 88 b3 01 00       	call   c0028361 <__gtdf2>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	7e 2d                	jle    c000d00d <sinc_stereo_vari_process+0x14f>
c000cfe0:	68 00 00 f0 3f       	push   0x3ff00000
c000cfe5:	6a 00                	push   0x0
c000cfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfef:	e8 8b b3 01 00       	call   c002837f <__ltdf2>
c000cff4:	83 c4 10             	add    esp,0x10
c000cff7:	85 c0                	test   eax,eax
c000cff9:	79 4d                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d00b:	eb 1b                	jmp    c000d028 <sinc_stereo_vari_process+0x16a>
c000d00d:	68 00 00 f0 3f       	push   0x3ff00000
c000d012:	6a 00                	push   0x0
c000d014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01c:	e8 5e b3 01 00       	call   c002837f <__ltdf2>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	85 c0                	test   eax,eax
c000d026:	79 20                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000d028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d038:	e8 57 ad 01 00       	call   c0027d94 <__divdf3>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d048:	50                   	push   eax
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d04e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d052:	e8 d9 b4 01 00       	call   c0028530 <lrint>
c000d057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d05a:	40                   	inc    eax
c000d05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05f:	0f af c7             	imul   eax,edi
c000d062:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d069:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d077:	e8 b4 b4 01 00       	call   c0028530 <lrint>
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	50                   	push   eax
c000d080:	e8 8e b0 01 00       	call   c0028113 <__floatsidf>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d08c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d096:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09a:	e8 e5 a9 01 00       	call   c0027a84 <__subdf3>
c000d09f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0a7:	83 c4 20             	add    esp,0x20
c000d0aa:	6a 00                	push   0x0
c000d0ac:	6a 00                	push   0x0
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b6:	e8 c4 b2 01 00       	call   c002837f <__ltdf2>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	85 c0                	test   eax,eax
c000d0c0:	79 1f                	jns    c000d0e1 <sinc_stereo_vari_process+0x223>
c000d0c2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0c7:	6a 00                	push   0x0
c000d0c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d1:	e8 5d a3 01 00       	call   c0027433 <__adddf3>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0e4:	83 ec 10             	sub    esp,0x10
c000d0e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fe:	e8 81 a9 01 00       	call   c0027a84 <__subdf3>
c000d103:	83 c4 18             	add    esp,0x18
c000d106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10e:	52                   	push   edx
c000d10f:	50                   	push   eax
c000d110:	e8 1b b4 01 00       	call   c0028530 <lrint>
c000d115:	0f af f8             	imul   edi,eax
c000d118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d11c:	01 f8                	add    eax,edi
c000d11e:	99                   	cdq    
c000d11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d125:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d129:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d12d:	68 00 00 f0 3f       	push   0x3ff00000
c000d132:	6a 00                	push   0x0
c000d134:	e8 5b ac 01 00       	call   c0027d94 <__divdf3>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d149:	68 23 42 92 0c       	push   0xc924223
c000d14e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d156:	e8 d8 a2 01 00       	call   c0027433 <__adddf3>
c000d15b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d15f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d163:	83 c4 20             	add    esp,0x20
c000d166:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d16e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d176:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d179:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d17c:	7d 50                	jge    c000d1ce <sinc_stereo_vari_process+0x310>
c000d17e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d181:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d184:	01 c8                	add    eax,ecx
c000d186:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d189:	99                   	cdq    
c000d18a:	f7 f9                	idiv   ecx
c000d18c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d190:	7d 0c                	jge    c000d19e <sinc_stereo_vari_process+0x2e0>
c000d192:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d195:	85 ff                	test   edi,edi
c000d197:	79 6c                	jns    c000d205 <sinc_stereo_vari_process+0x347>
c000d199:	e9 e7 00 00 00       	jmp    c000d285 <sinc_stereo_vari_process+0x3c7>
c000d19e:	50                   	push   eax
c000d19f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1a3:	56                   	push   esi
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 4c e7 ff ff       	call   c000b8f6 <prepare_data>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	89 c2                	mov    edx,eax
c000d1af:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1b2:	85 c0                	test   eax,eax
c000d1b4:	0f 85 bf 03 00 00    	jne    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d1ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1c5:	99                   	cdq    
c000d1c6:	f7 f9                	idiv   ecx
c000d1c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1cc:	7c c4                	jl     c000d192 <sinc_stereo_vari_process+0x2d4>
c000d1ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1d6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1d9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ed:	99                   	cdq    
c000d1ee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1f7:	99                   	cdq    
c000d1f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1fb:	31 d2                	xor    edx,edx
c000d1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d200:	e9 74 03 00 00       	jmp    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d205:	83 ec 0c             	sub    esp,0xc
c000d208:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d20b:	e8 03 af 01 00       	call   c0028113 <__floatsidf>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d21f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22b:	e8 03 a2 01 00       	call   c0027433 <__adddf3>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d237:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	e8 e3 a1 01 00       	call   c0027433 <__adddf3>
c000d250:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d253:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d257:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d25b:	e8 b3 ae 01 00       	call   c0028113 <__floatsidf>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d26b:	52                   	push   edx
c000d26c:	50                   	push   eax
c000d26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d275:	e8 03 b1 01 00       	call   c002837d <__gedf2>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	85 c0                	test   eax,eax
c000d27f:	0f 89 49 ff ff ff    	jns    c000d1ce <sinc_stereo_vari_process+0x310>
c000d285:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d289:	0f 8e ef 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d28f:	83 ec 10             	sub    esp,0x10
c000d292:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d295:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d298:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d29b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d29e:	e8 e1 a7 01 00       	call   c0027a84 <__subdf3>
c000d2a3:	83 c4 18             	add    esp,0x18
c000d2a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ae:	52                   	push   edx
c000d2af:	50                   	push   eax
c000d2b0:	e8 5b b2 01 00       	call   c0028510 <fabs>
c000d2b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2c5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d2:	e8 8a b0 01 00       	call   c0028361 <__gtdf2>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	85 c0                	test   eax,eax
c000d2dc:	0f 8e 9c 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d2e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2e5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f0:	52                   	push   edx
c000d2f1:	50                   	push   eax
c000d2f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2f5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2f8:	e8 87 a7 01 00       	call   c0027a84 <__subdf3>
c000d2fd:	59                   	pop    ecx
c000d2fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d302:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d306:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d309:	e8 05 ae 01 00       	call   c0028113 <__floatsidf>
c000d30e:	83 c4 10             	add    esp,0x10
c000d311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d319:	52                   	push   edx
c000d31a:	50                   	push   eax
c000d31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d31f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d323:	e8 88 a7 01 00       	call   c0027ab0 <__muldf3>
c000d328:	5f                   	pop    edi
c000d329:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d32d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d331:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d334:	e8 da ad 01 00       	call   c0028113 <__floatsidf>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d344:	52                   	push   edx
c000d345:	50                   	push   eax
c000d346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34e:	e8 41 aa 01 00       	call   c0027d94 <__divdf3>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d35a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d35e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	e8 c0 a0 01 00       	call   c0027433 <__adddf3>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d384:	e8 8a ad 01 00       	call   c0028113 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d390:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	e8 d6 af 01 00       	call   c002837f <__ltdf2>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	85 c0                	test   eax,eax
c000d3ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3ba:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3be:	78 10                	js     c000d3d0 <sinc_stereo_vari_process+0x512>
c000d3c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e0:	e8 cb a6 01 00       	call   c0027ab0 <__muldf3>
c000d3e5:	59                   	pop    ecx
c000d3e6:	5f                   	pop    edi
c000d3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f7:	e8 d3 e4 ff ff       	call   c000b8cf <double_to_fp>
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	89 c7                	mov    edi,eax
c000d402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40e:	e8 9d a6 01 00       	call   c0027ab0 <__muldf3>
c000d413:	83 c4 18             	add    esp,0x18
c000d416:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d41a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d41e:	52                   	push   edx
c000d41f:	50                   	push   eax
c000d420:	e8 aa e4 ff ff       	call   c000b8cf <double_to_fp>
c000d425:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d428:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d42c:	83 c4 0c             	add    esp,0xc
c000d42f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d432:	8d 04 90             	lea    eax,[eax+edx*4]
c000d435:	50                   	push   eax
c000d436:	50                   	push   eax
c000d437:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43a:	e8 d4 ac 01 00       	call   c0028113 <__floatsidf>
c000d43f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d443:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d447:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	e8 38 a9 01 00       	call   c0027d94 <__divdf3>
c000d45c:	83 c4 18             	add    esp,0x18
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	89 fa                	mov    edx,edi
c000d46a:	50                   	push   eax
c000d46b:	89 d8                	mov    eax,ebx
c000d46d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d471:	e8 02 c7 ff ff       	call   c0009b78 <calc_output_stereo>
c000d476:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d47a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d482:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d486:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48a:	e8 05 a9 01 00       	call   c0027d94 <__divdf3>
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d496:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4aa:	e8 84 9f 01 00       	call   c0027433 <__adddf3>
c000d4af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4b7:	83 c4 18             	add    esp,0x18
c000d4ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c2:	e8 69 b0 01 00       	call   c0028530 <lrint>
c000d4c7:	83 ec 0c             	sub    esp,0xc
c000d4ca:	50                   	push   eax
c000d4cb:	e8 43 ac 01 00       	call   c0028113 <__floatsidf>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4db:	52                   	push   edx
c000d4dc:	50                   	push   eax
c000d4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e5:	e8 9a a5 01 00       	call   c0027a84 <__subdf3>
c000d4ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4f2:	83 c4 20             	add    esp,0x20
c000d4f5:	6a 00                	push   0x0
c000d4f7:	6a 00                	push   0x0
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d501:	e8 79 ae 01 00       	call   c002837f <__ltdf2>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	85 c0                	test   eax,eax
c000d50b:	79 20                	jns    c000d52d <sinc_stereo_vari_process+0x66f>
c000d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 11 9f 01 00       	call   c0027433 <__adddf3>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d52d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d530:	83 ec 10             	sub    esp,0x10
c000d533:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d537:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54a:	e8 35 a5 01 00       	call   c0027a84 <__subdf3>
c000d54f:	83 c4 18             	add    esp,0x18
c000d552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d556:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d55a:	52                   	push   edx
c000d55b:	50                   	push   eax
c000d55c:	e8 cf af 01 00       	call   c0028530 <lrint>
c000d561:	0f af f8             	imul   edi,eax
c000d564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	01 f8                	add    eax,edi
c000d56d:	99                   	cdq    
c000d56e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d571:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d574:	e9 fd fb ff ff       	jmp    c000d176 <sinc_stereo_vari_process+0x2b8>
c000d579:	83 c4 4c             	add    esp,0x4c
c000d57c:	89 d0                	mov    eax,edx
c000d57e:	5b                   	pop    ebx
c000d57f:	5e                   	pop    esi
c000d580:	5f                   	pop    edi
c000d581:	5d                   	pop    ebp
c000d582:	c3                   	ret    

c000d583 <sinc_mono_vari_process>:
c000d583:	55                   	push   ebp
c000d584:	ba 05 00 00 00       	mov    edx,0x5
c000d589:	57                   	push   edi
c000d58a:	56                   	push   esi
c000d58b:	53                   	push   ebx
c000d58c:	83 ec 4c             	sub    esp,0x4c
c000d58f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d593:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d597:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d59a:	85 db                	test   ebx,ebx
c000d59c:	0f 84 c1 06 00 00    	je     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5a2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5a5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5a8:	0f af c7             	imul   eax,edi
c000d5ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5b8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5bf:	0f af c7             	imul   eax,edi
c000d5c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5c5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5d6:	68 00 00 70 3f       	push   0x3f700000
c000d5db:	6a 00                	push   0x0
c000d5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e5:	e8 95 ad 01 00       	call   c002837f <__ltdf2>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	ba 16 00 00 00       	mov    edx,0x16
c000d5f2:	85 c0                	test   eax,eax
c000d5f4:	0f 88 69 06 00 00    	js     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5fa:	68 00 00 70 40       	push   0x40700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 53 ad 01 00       	call   c0028361 <__gtdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 8f 45 06 00 00    	jg     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d624:	e8 ea aa 01 00       	call   c0028113 <__floatsidf>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d634:	68 00 00 00 40       	push   0x40000000
c000d639:	6a 00                	push   0x0
c000d63b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d643:	e8 eb 9d 01 00       	call   c0027433 <__adddf3>
c000d648:	59                   	pop    ecx
c000d649:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d64d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d651:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d654:	e8 ba aa 01 00       	call   c0028113 <__floatsidf>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d660:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d664:	52                   	push   edx
c000d665:	50                   	push   eax
c000d666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66e:	e8 21 a7 01 00       	call   c0027d94 <__divdf3>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d67a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d67e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d681:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	e8 c0 ac 01 00       	call   c0028361 <__gtdf2>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	7e 2d                	jle    c000d6d5 <sinc_mono_vari_process+0x152>
c000d6a8:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ad:	6a 00                	push   0x0
c000d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b7:	e8 c3 ac 01 00       	call   c002837f <__ltdf2>
c000d6bc:	83 c4 10             	add    esp,0x10
c000d6bf:	85 c0                	test   eax,eax
c000d6c1:	79 4d                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6d3:	eb 1b                	jmp    c000d6f0 <sinc_mono_vari_process+0x16d>
c000d6d5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6da:	6a 00                	push   0x0
c000d6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e4:	e8 96 ac 01 00       	call   c002837f <__ltdf2>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	79 20                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d700:	e8 8f a6 01 00       	call   c0027d94 <__divdf3>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d70c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d710:	50                   	push   eax
c000d711:	50                   	push   eax
c000d712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d716:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71a:	e8 11 ae 01 00       	call   c0028530 <lrint>
c000d71f:	40                   	inc    eax
c000d720:	0f af c7             	imul   eax,edi
c000d723:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d727:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d72b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d72e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d739:	58                   	pop    eax
c000d73a:	5a                   	pop    edx
c000d73b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d743:	e8 e8 ad 01 00       	call   c0028530 <lrint>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 c2 a9 01 00       	call   c0028113 <__floatsidf>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d758:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d762:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d766:	e8 19 a3 01 00       	call   c0027a84 <__subdf3>
c000d76b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d76f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d773:	83 c4 20             	add    esp,0x20
c000d776:	6a 00                	push   0x0
c000d778:	6a 00                	push   0x0
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d782:	e8 f8 ab 01 00       	call   c002837f <__ltdf2>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	85 c0                	test   eax,eax
c000d78c:	79 1f                	jns    c000d7ad <sinc_mono_vari_process+0x22a>
c000d78e:	68 00 00 f0 3f       	push   0x3ff00000
c000d793:	6a 00                	push   0x0
c000d795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79d:	e8 91 9c 01 00       	call   c0027433 <__adddf3>
c000d7a2:	83 c4 10             	add    esp,0x10
c000d7a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7ad:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7b3:	83 ec 10             	sub    esp,0x10
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	e8 b9 a2 01 00       	call   c0027a84 <__subdf3>
c000d7cb:	83 c4 18             	add    esp,0x18
c000d7ce:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7d6:	52                   	push   edx
c000d7d7:	50                   	push   eax
c000d7d8:	e8 53 ad 01 00       	call   c0028530 <lrint>
c000d7dd:	0f af f8             	imul   edi,eax
c000d7e0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7e3:	31 ff                	xor    edi,edi
c000d7e5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7ea:	99                   	cdq    
c000d7eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f9:	55                   	push   ebp
c000d7fa:	57                   	push   edi
c000d7fb:	e8 94 a5 01 00       	call   c0027d94 <__divdf3>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d810:	68 23 42 92 0c       	push   0xc924223
c000d815:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	e8 11 9c 01 00       	call   c0027433 <__adddf3>
c000d822:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d826:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d82a:	83 c4 20             	add    esp,0x20
c000d82d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d831:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d835:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d838:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d83b:	7d 54                	jge    c000d891 <sinc_mono_vari_process+0x30e>
c000d83d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d840:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d843:	01 c8                	add    eax,ecx
c000d845:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d848:	99                   	cdq    
c000d849:	f7 f9                	idiv   ecx
c000d84b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d84f:	7d 0c                	jge    c000d85d <sinc_mono_vari_process+0x2da>
c000d851:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d854:	85 ff                	test   edi,edi
c000d856:	79 73                	jns    c000d8cb <sinc_mono_vari_process+0x348>
c000d858:	e9 ee 00 00 00       	jmp    c000d94b <sinc_mono_vari_process+0x3c8>
c000d85d:	50                   	push   eax
c000d85e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d862:	56                   	push   esi
c000d863:	53                   	push   ebx
c000d864:	e8 8d e0 ff ff       	call   c000b8f6 <prepare_data>
c000d869:	89 c2                	mov    edx,eax
c000d86b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d875:	85 d2                	test   edx,edx
c000d877:	0f 85 e6 03 00 00    	jne    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d87d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d880:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d883:	01 c8                	add    eax,ecx
c000d885:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d888:	99                   	cdq    
c000d889:	f7 f9                	idiv   ecx
c000d88b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d88f:	7c c0                	jl     c000d851 <sinc_mono_vari_process+0x2ce>
c000d891:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d89d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8ab:	89 01                	mov    DWORD PTR [ecx],eax
c000d8ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8b3:	99                   	cdq    
c000d8b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8bd:	99                   	cdq    
c000d8be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c1:	31 d2                	xor    edx,edx
c000d8c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8c6:	e9 98 03 00 00       	jmp    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d8cb:	83 ec 0c             	sub    esp,0xc
c000d8ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d1:	e8 3d a8 01 00       	call   c0028113 <__floatsidf>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f1:	e8 3d 9b 01 00       	call   c0027433 <__adddf3>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d901:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	e8 1d 9b 01 00       	call   c0027433 <__adddf3>
c000d916:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d919:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d921:	e8 ed a7 01 00       	call   c0028113 <__floatsidf>
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d92d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d937:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93b:	e8 21 aa 01 00       	call   c0028361 <__gtdf2>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	0f 8f 46 ff ff ff    	jg     c000d891 <sinc_mono_vari_process+0x30e>
c000d94b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d94f:	0f 8e f5 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d955:	83 ec 10             	sub    esp,0x10
c000d958:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d95b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d95e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d962:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d965:	ff 30                	push   DWORD PTR [eax]
c000d967:	e8 18 a1 01 00       	call   c0027a84 <__subdf3>
c000d96c:	83 c4 18             	add    esp,0x18
c000d96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d977:	52                   	push   edx
c000d978:	50                   	push   eax
c000d979:	e8 92 ab 01 00       	call   c0028510 <fabs>
c000d97e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d986:	83 c4 10             	add    esp,0x10
c000d989:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d98e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99b:	e8 c1 a9 01 00       	call   c0028361 <__gtdf2>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	85 c0                	test   eax,eax
c000d9a5:	0f 8e 9f 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d9ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9bc:	52                   	push   edx
c000d9bd:	50                   	push   eax
c000d9be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9c4:	e8 bb a0 01 00       	call   c0027a84 <__subdf3>
c000d9c9:	5f                   	pop    edi
c000d9ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9ce:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9d2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9d5:	e8 39 a7 01 00       	call   c0028113 <__floatsidf>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	52                   	push   edx
c000d9e6:	50                   	push   eax
c000d9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ef:	e8 bc a0 01 00       	call   c0027ab0 <__muldf3>
c000d9f4:	5d                   	pop    ebp
c000d9f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9fd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da00:	e8 0e a7 01 00       	call   c0028113 <__floatsidf>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da10:	52                   	push   edx
c000da11:	50                   	push   eax
c000da12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1a:	e8 75 a3 01 00       	call   c0027d94 <__divdf3>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	e8 f4 99 01 00       	call   c0027433 <__adddf3>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da50:	e8 be a6 01 00       	call   c0028113 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	e8 0a a9 01 00       	call   c002837f <__ltdf2>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	85 c0                	test   eax,eax
c000da7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da82:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da86:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da8a:	78 10                	js     c000da9c <sinc_mono_vari_process+0x519>
c000da8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daac:	e8 ff 9f 01 00       	call   c0027ab0 <__muldf3>
c000dab1:	59                   	pop    ecx
c000dab2:	5f                   	pop    edi
c000dab3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dab7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dabb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dabf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac3:	e8 07 de ff ff       	call   c000b8cf <double_to_fp>
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	89 c7                	mov    edi,eax
c000dace:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dada:	e8 d1 9f 01 00       	call   c0027ab0 <__muldf3>
c000dadf:	83 c4 18             	add    esp,0x18
c000dae2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dae6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	e8 de dd ff ff       	call   c000b8cf <double_to_fp>
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	89 c5                	mov    ebp,eax
c000daf6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf9:	e8 15 a6 01 00       	call   c0028113 <__floatsidf>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db05:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db09:	52                   	push   edx
c000db0a:	50                   	push   eax
c000db0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db13:	e8 7c a2 01 00       	call   c0027d94 <__divdf3>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	89 e9                	mov    ecx,ebp
c000db1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db21:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db25:	89 d8                	mov    eax,ebx
c000db27:	89 fa                	mov    edx,edi
c000db29:	e8 ee bd ff ff       	call   c000991c <calc_output_single>
c000db2e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db31:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db3c:	52                   	push   edx
c000db3d:	50                   	push   eax
c000db3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db46:	e8 65 9f 01 00       	call   c0027ab0 <__muldf3>
c000db4b:	59                   	pop    ecx
c000db4c:	59                   	pop    ecx
c000db4d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	e8 21 a8 01 00       	call   c0028383 <__truncdfsf2>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db68:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7b:	e8 14 a2 01 00       	call   c0027d94 <__divdf3>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9b:	e8 93 98 01 00       	call   c0027433 <__adddf3>
c000dba0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dba4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dba8:	83 c4 18             	add    esp,0x18
c000dbab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb3:	e8 78 a9 01 00       	call   c0028530 <lrint>
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	50                   	push   eax
c000dbbc:	e8 52 a5 01 00       	call   c0028113 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	52                   	push   edx
c000dbcd:	50                   	push   eax
c000dbce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd6:	e8 a9 9e 01 00       	call   c0027a84 <__subdf3>
c000dbdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbe3:	83 c4 20             	add    esp,0x20
c000dbe6:	6a 00                	push   0x0
c000dbe8:	6a 00                	push   0x0
c000dbea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf2:	e8 88 a7 01 00       	call   c002837f <__ltdf2>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	85 c0                	test   eax,eax
c000dbfc:	79 20                	jns    c000dc1e <sinc_mono_vari_process+0x69b>
c000dbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	e8 20 98 01 00       	call   c0027433 <__adddf3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc1e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc24:	83 ec 10             	sub    esp,0x10
c000dc27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc37:	e8 48 9e 01 00       	call   c0027a84 <__subdf3>
c000dc3c:	83 c4 18             	add    esp,0x18
c000dc3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc47:	52                   	push   edx
c000dc48:	50                   	push   eax
c000dc49:	e8 e2 a8 01 00       	call   c0028530 <lrint>
c000dc4e:	83 c4 10             	add    esp,0x10
c000dc51:	0f af f8             	imul   edi,eax
c000dc54:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc57:	99                   	cdq    
c000dc58:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc5b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc5e:	e9 d2 fb ff ff       	jmp    c000d835 <sinc_mono_vari_process+0x2b2>
c000dc63:	83 c4 4c             	add    esp,0x4c
c000dc66:	89 d0                	mov    eax,edx
c000dc68:	5b                   	pop    ebx
c000dc69:	5e                   	pop    esi
c000dc6a:	5f                   	pop    edi
c000dc6b:	5d                   	pop    ebp
c000dc6c:	c3                   	ret    

c000dc6d <sinc_get_name>:
c000dc6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc71:	31 c0                	xor    eax,eax
c000dc73:	83 fa 02             	cmp    edx,0x2
c000dc76:	77 07                	ja     c000dc7f <sinc_get_name+0x12>
c000dc78:	8b 04 95 24 9d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd62dc]
c000dc7f:	c3                   	ret    

c000dc80 <sinc_get_description>:
c000dc80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc84:	31 c0                	xor    eax,eax
c000dc86:	83 fa 02             	cmp    edx,0x2
c000dc89:	77 07                	ja     c000dc92 <sinc_get_description+0x12>
c000dc8b:	8b 04 95 18 9d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd62e8]
c000dc92:	c3                   	ret    

c000dc93 <sinc_set_converter>:
c000dc93:	53                   	push   ebx
c000dc94:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc9a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dca4:	85 c0                	test   eax,eax
c000dca6:	74 13                	je     c000dcbb <sinc_set_converter+0x28>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	50                   	push   eax
c000dcac:	e8 9f 1b 00 00       	call   c000f850 <free>
c000dcb1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	50                   	push   eax
c000dcbc:	68 44 08 00 00       	push   0x844
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcc7:	50                   	push   eax
c000dcc8:	e8 ab 2a ff ff       	call   c0000778 <memset>
c000dccd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcd8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcde:	7f 6e                	jg     c000dd4e <sinc_set_converter+0xbb>
c000dce0:	83 fa 01             	cmp    edx,0x1
c000dce3:	75 10                	jne    c000dcf5 <sinc_set_converter+0x62>
c000dce5:	c7 43 24 83 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d583
c000dcec:	c7 43 20 83 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d583
c000dcf3:	eb 4d                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dcf5:	83 fa 02             	cmp    edx,0x2
c000dcf8:	75 10                	jne    c000dd0a <sinc_set_converter+0x77>
c000dcfa:	c7 43 24 be ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cebe
c000dd01:	c7 43 20 be ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cebe
c000dd08:	eb 38                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd0a:	83 fa 04             	cmp    edx,0x4
c000dd0d:	75 10                	jne    c000dd1f <sinc_set_converter+0x8c>
c000dd0f:	c7 43 24 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7f9
c000dd16:	c7 43 20 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7f9
c000dd1d:	eb 23                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd1f:	83 fa 06             	cmp    edx,0x6
c000dd22:	75 10                	jne    c000dd34 <sinc_set_converter+0xa1>
c000dd24:	c7 43 24 34 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c134
c000dd2b:	c7 43 20 34 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c134
c000dd32:	eb 0e                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd34:	c7 43 24 70 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba70
c000dd3b:	c7 43 20 70 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba70
c000dd42:	c7 43 28 23 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad23
c000dd49:	b8 0a 00 00 00       	mov    eax,0xa
c000dd4e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd54:	5b                   	pop    ebx
c000dd55:	c3                   	ret    

c000dd56 <zoh_vari_process>:
c000dd56:	55                   	push   ebp
c000dd57:	31 d2                	xor    edx,edx
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	83 ec 3c             	sub    esp,0x3c
c000dd5f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd63:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd67:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd6b:	0f 8e 80 06 00 00    	jle    c000e3f1 <zoh_vari_process+0x69b>
c000dd71:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd74:	ba 05 00 00 00       	mov    edx,0x5
c000dd79:	85 db                	test   ebx,ebx
c000dd7b:	0f 84 70 06 00 00    	je     c000e3f1 <zoh_vari_process+0x69b>
c000dd81:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd84:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd88:	74 19                	je     c000dda3 <zoh_vari_process+0x4d>
c000dd8a:	31 d2                	xor    edx,edx
c000dd8c:	39 c2                	cmp    edx,eax
c000dd8e:	7d 0c                	jge    c000dd9c <zoh_vari_process+0x46>
c000dd90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd92:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd95:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd99:	42                   	inc    edx
c000dd9a:	eb f0                	jmp    c000dd8c <zoh_vari_process+0x36>
c000dd9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dda3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dda6:	0f af d0             	imul   edx,eax
c000dda9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddac:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddb7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddc4:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddce:	68 00 00 70 3f       	push   0x3f700000
c000ddd3:	6a 00                	push   0x0
c000ddd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddd:	e8 9d a5 01 00       	call   c002837f <__ltdf2>
c000dde2:	83 c4 10             	add    esp,0x10
c000dde5:	ba 16 00 00 00       	mov    edx,0x16
c000ddea:	85 c0                	test   eax,eax
c000ddec:	0f 88 ff 05 00 00    	js     c000e3f1 <zoh_vari_process+0x69b>
c000ddf2:	68 00 00 70 40       	push   0x40700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 5b a5 01 00       	call   c0028361 <__gtdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 8f db 05 00 00    	jg     c000e3f1 <zoh_vari_process+0x69b>
c000de16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de19:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de24:	68 00 00 f0 3f       	push   0x3ff00000
c000de29:	6a 00                	push   0x0
c000de2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de33:	e8 47 a5 01 00       	call   c002837f <__ltdf2>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	85 c0                	test   eax,eax
c000de3d:	0f 89 da 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000de43:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de46:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de49:	0f 8d ce 01 00 00    	jge    c000e01d <zoh_vari_process+0x2c7>
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de55:	e8 b9 a2 01 00       	call   c0028113 <__floatsidf>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de74:	e8 37 9c 01 00       	call   c0027ab0 <__muldf3>
c000de79:	59                   	pop    ecx
c000de7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de85:	e8 89 a2 01 00       	call   c0028113 <__floatsidf>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de95:	52                   	push   edx
c000de96:	50                   	push   eax
c000de97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9f:	e8 8f 95 01 00       	call   c0027433 <__adddf3>
c000dea4:	59                   	pop    ecx
c000dea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dead:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb0:	e8 5e a2 01 00       	call   c0028113 <__floatsidf>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000debc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec0:	52                   	push   edx
c000dec1:	50                   	push   eax
c000dec2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deca:	e8 ae a4 01 00       	call   c002837d <__gedf2>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	85 c0                	test   eax,eax
c000ded4:	0f 89 43 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000deda:	85 ed                	test   ebp,ebp
c000dedc:	0f 8e ec 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000dee2:	83 ec 10             	sub    esp,0x10
c000dee5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dee8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deeb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deee:	ff 37                	push   DWORD PTR [edi]
c000def0:	e8 8f 9b 01 00       	call   c0027a84 <__subdf3>
c000def5:	83 c4 18             	add    esp,0x18
c000def8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df00:	52                   	push   edx
c000df01:	50                   	push   eax
c000df02:	e8 09 a6 01 00       	call   c0028510 <fabs>
c000df07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df17:	68 23 42 92 0c       	push   0xc924223
c000df1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df24:	e8 38 a4 01 00       	call   c0028361 <__gtdf2>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	85 c0                	test   eax,eax
c000df2e:	0f 8e 9a 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000df34:	8b 07                	mov    eax,DWORD PTR [edi]
c000df36:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df39:	89 04 24             	mov    DWORD PTR [esp],eax
c000df3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df40:	52                   	push   edx
c000df41:	50                   	push   eax
c000df42:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df45:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df48:	e8 37 9b 01 00       	call   c0027a84 <__subdf3>
c000df4d:	59                   	pop    ecx
c000df4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df59:	e8 b5 a1 01 00       	call   c0028113 <__floatsidf>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df69:	52                   	push   edx
c000df6a:	50                   	push   eax
c000df6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df73:	e8 38 9b 01 00       	call   c0027ab0 <__muldf3>
c000df78:	5d                   	pop    ebp
c000df79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df7d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df84:	e8 8a a1 01 00       	call   c0028113 <__floatsidf>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df94:	52                   	push   edx
c000df95:	50                   	push   eax
c000df96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9e:	e8 f1 9d 01 00       	call   c0027d94 <__divdf3>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	e8 70 94 01 00       	call   c0027433 <__adddf3>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfce:	31 c0                	xor    eax,eax
c000dfd0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfd3:	7e 13                	jle    c000dfe8 <zoh_vari_process+0x292>
c000dfd5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfd9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfdc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfdf:	40                   	inc    eax
c000dfe0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfe3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfe6:	eb e8                	jmp    c000dfd0 <zoh_vari_process+0x27a>
c000dfe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff0:	68 00 00 f0 3f       	push   0x3ff00000
c000dff5:	6a 00                	push   0x0
c000dff7:	e8 98 9d 01 00       	call   c0027d94 <__divdf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e010:	e8 1e 94 01 00       	call   c0027433 <__adddf3>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	e9 ff fd ff ff       	jmp    c000de1c <zoh_vari_process+0xc6>
c000e01d:	55                   	push   ebp
c000e01e:	55                   	push   ebp
c000e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e027:	e8 04 a5 01 00       	call   c0028530 <lrint>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	50                   	push   eax
c000e030:	e8 de a0 01 00       	call   c0028113 <__floatsidf>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e040:	52                   	push   edx
c000e041:	50                   	push   eax
c000e042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04a:	e8 35 9a 01 00       	call   c0027a84 <__subdf3>
c000e04f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e053:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e057:	83 c4 20             	add    esp,0x20
c000e05a:	6a 00                	push   0x0
c000e05c:	6a 00                	push   0x0
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e066:	e8 14 a3 01 00       	call   c002837f <__ltdf2>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	85 c0                	test   eax,eax
c000e070:	79 1e                	jns    c000e090 <zoh_vari_process+0x33a>
c000e072:	68 00 00 f0 3f       	push   0x3ff00000
c000e077:	6a 00                	push   0x0
c000e079:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e081:	e8 ad 93 01 00       	call   c0027433 <__adddf3>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 04 24             	mov    DWORD PTR [esp],eax
c000e08c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e090:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e093:	83 ec 10             	sub    esp,0x10
c000e096:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a6:	e8 d9 99 01 00       	call   c0027a84 <__subdf3>
c000e0ab:	83 c4 18             	add    esp,0x18
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0b6:	52                   	push   edx
c000e0b7:	50                   	push   eax
c000e0b8:	e8 73 a4 01 00       	call   c0028530 <lrint>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	0f af e8             	imul   ebp,eax
c000e0c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0c6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0c9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0d7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0da:	0f 8d 7a 02 00 00    	jge    c000e35a <zoh_vari_process+0x604>
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0e6:	e8 28 a0 01 00       	call   c0028113 <__floatsidf>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e102:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e106:	e8 a5 99 01 00       	call   c0027ab0 <__muldf3>
c000e10b:	59                   	pop    ecx
c000e10c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e110:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e118:	e8 f6 9f 01 00       	call   c0028113 <__floatsidf>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e124:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e128:	52                   	push   edx
c000e129:	50                   	push   eax
c000e12a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e132:	e8 fc 92 01 00       	call   c0027433 <__adddf3>
c000e137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e13a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e13e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e142:	e8 cc 9f 01 00       	call   c0028113 <__floatsidf>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e14e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e152:	52                   	push   edx
c000e153:	50                   	push   eax
c000e154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e15c:	e8 20 a2 01 00       	call   c0028381 <__ledf2>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	85 c0                	test   eax,eax
c000e166:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e16a:	0f 8f ea 01 00 00    	jg     c000e35a <zoh_vari_process+0x604>
c000e170:	85 c9                	test   ecx,ecx
c000e172:	0f 8e ed 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e178:	83 ec 10             	sub    esp,0x10
c000e17b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e17e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e181:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e184:	ff 37                	push   DWORD PTR [edi]
c000e186:	e8 f9 98 01 00       	call   c0027a84 <__subdf3>
c000e18b:	83 c4 18             	add    esp,0x18
c000e18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e196:	52                   	push   edx
c000e197:	50                   	push   eax
c000e198:	e8 73 a3 01 00       	call   c0028510 <fabs>
c000e19d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1ad:	68 23 42 92 0c       	push   0xc924223
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ba:	e8 a2 a1 01 00       	call   c0028361 <__gtdf2>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	85 c0                	test   eax,eax
c000e1c4:	0f 8e 9b 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e1ca:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1cc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1d7:	52                   	push   edx
c000e1d8:	50                   	push   eax
c000e1d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1dc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1df:	e8 a0 98 01 00       	call   c0027a84 <__subdf3>
c000e1e4:	5d                   	pop    ebp
c000e1e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1e9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f0:	e8 1e 9f 01 00       	call   c0028113 <__floatsidf>
c000e1f5:	83 c4 10             	add    esp,0x10
c000e1f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e200:	52                   	push   edx
c000e201:	50                   	push   eax
c000e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20a:	e8 a1 98 01 00       	call   c0027ab0 <__muldf3>
c000e20f:	59                   	pop    ecx
c000e210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e214:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e218:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e21b:	e8 f3 9e 01 00       	call   c0028113 <__floatsidf>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e227:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e22b:	52                   	push   edx
c000e22c:	50                   	push   eax
c000e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e235:	e8 5a 9b 01 00       	call   c0027d94 <__divdf3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e249:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	e8 d9 91 01 00       	call   c0027433 <__adddf3>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e265:	31 d2                	xor    edx,edx
c000e267:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e26a:	39 d0                	cmp    eax,edx
c000e26c:	7e 1d                	jle    c000e28b <zoh_vari_process+0x535>
c000e26e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e271:	29 c1                	sub    ecx,eax
c000e273:	89 c8                	mov    eax,ecx
c000e275:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e277:	01 d0                	add    eax,edx
c000e279:	42                   	inc    edx
c000e27a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e27d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e280:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e283:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e286:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e289:	eb dc                	jmp    c000e267 <zoh_vari_process+0x511>
c000e28b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e28f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e293:	68 00 00 f0 3f       	push   0x3ff00000
c000e298:	6a 00                	push   0x0
c000e29a:	e8 f5 9a 01 00       	call   c0027d94 <__divdf3>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ba:	e8 74 91 01 00       	call   c0027433 <__adddf3>
c000e2bf:	5d                   	pop    ebp
c000e2c0:	59                   	pop    ecx
c000e2c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d1:	e8 5a a2 01 00       	call   c0028530 <lrint>
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	50                   	push   eax
c000e2da:	e8 34 9e 01 00       	call   c0028113 <__floatsidf>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ea:	52                   	push   edx
c000e2eb:	50                   	push   eax
c000e2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f4:	e8 8b 97 01 00       	call   c0027a84 <__subdf3>
c000e2f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	6a 00                	push   0x0
c000e306:	6a 00                	push   0x0
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e310:	e8 6a a0 01 00       	call   c002837f <__ltdf2>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	85 c0                	test   eax,eax
c000e31a:	79 1e                	jns    c000e33a <zoh_vari_process+0x5e4>
c000e31c:	68 00 00 f0 3f       	push   0x3ff00000
c000e321:	6a 00                	push   0x0
c000e323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e327:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32b:	e8 03 91 01 00       	call   c0027433 <__adddf3>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	89 04 24             	mov    DWORD PTR [esp],eax
c000e336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e33a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e33d:	83 ec 10             	sub    esp,0x10
c000e340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e350:	e8 2f 97 01 00       	call   c0027a84 <__subdf3>
c000e355:	e9 51 fd ff ff       	jmp    c000e0ab <zoh_vari_process+0x355>
c000e35a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e35e:	7d 3a                	jge    c000e39a <zoh_vari_process+0x644>
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	29 e8                	sub    eax,ebp
c000e369:	99                   	cdq    
c000e36a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e36d:	50                   	push   eax
c000e36e:	e8 a0 9d 01 00       	call   c0028113 <__floatsidf>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e37e:	52                   	push   edx
c000e37f:	50                   	push   eax
c000e380:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e384:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e388:	e8 a6 90 01 00       	call   c0027433 <__adddf3>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e393:	89 04 24             	mov    DWORD PTR [esp],eax
c000e396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e39a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e39d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a1:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3a4:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3aa:	85 c0                	test   eax,eax
c000e3ac:	7f 25                	jg     c000e3d3 <zoh_vari_process+0x67d>
c000e3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3b6:	89 07                	mov    DWORD PTR [edi],eax
c000e3b8:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3be:	99                   	cdq    
c000e3bf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3c2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3c8:	99                   	cdq    
c000e3c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3cc:	31 d2                	xor    edx,edx
c000e3ce:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d1:	eb 1e                	jmp    c000e3f1 <zoh_vari_process+0x69b>
c000e3d3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3d6:	31 d2                	xor    edx,edx
c000e3d8:	29 c8                	sub    eax,ecx
c000e3da:	c1 e0 02             	shl    eax,0x2
c000e3dd:	39 d1                	cmp    ecx,edx
c000e3df:	7e cd                	jle    c000e3ae <zoh_vari_process+0x658>
c000e3e1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3e3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3e7:	83 c0 04             	add    eax,0x4
c000e3ea:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3ee:	42                   	inc    edx
c000e3ef:	eb ec                	jmp    c000e3dd <zoh_vari_process+0x687>
c000e3f1:	83 c4 3c             	add    esp,0x3c
c000e3f4:	89 d0                	mov    eax,edx
c000e3f6:	5b                   	pop    ebx
c000e3f7:	5e                   	pop    esi
c000e3f8:	5f                   	pop    edi
c000e3f9:	5d                   	pop    ebp
c000e3fa:	c3                   	ret    

c000e3fb <zoh_reset>:
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e402:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e405:	85 c0                	test   eax,eax
c000e407:	74 20                	je     c000e429 <zoh_reset+0x2e>
c000e409:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e40c:	83 c0 1c             	add    eax,0x1c
c000e40f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e412:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e419:	c1 e2 02             	shl    edx,0x2
c000e41c:	51                   	push   ecx
c000e41d:	52                   	push   edx
c000e41e:	6a 00                	push   0x0
c000e420:	50                   	push   eax
c000e421:	e8 52 23 ff ff       	call   c0000778 <memset>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    

c000e42d <zoh_get_name>:
c000e42d:	31 c0                	xor    eax,eax
c000e42f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e434:	75 05                	jne    c000e43b <zoh_get_name+0xe>
c000e436:	b8 3e 9e 02 c0       	mov    eax,0xc0029e3e
c000e43b:	c3                   	ret    

c000e43c <zoh_get_description>:
c000e43c:	31 c0                	xor    eax,eax
c000e43e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e443:	75 05                	jne    c000e44a <zoh_get_description+0xe>
c000e445:	b8 4f 9e 02 c0       	mov    eax,0xc0029e4f
c000e44a:	c3                   	ret    

c000e44b <zoh_set_converter>:
c000e44b:	53                   	push   ebx
c000e44c:	b8 0a 00 00 00       	mov    eax,0xa
c000e451:	83 ec 08             	sub    esp,0x8
c000e454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e458:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e45d:	75 6e                	jne    c000e4cd <zoh_set_converter+0x82>
c000e45f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e462:	85 c0                	test   eax,eax
c000e464:	74 13                	je     c000e479 <zoh_set_converter+0x2e>
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	50                   	push   eax
c000e46a:	e8 e1 13 00 00       	call   c000f850 <free>
c000e46f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e476:	83 c4 10             	add    esp,0x10
c000e479:	50                   	push   eax
c000e47a:	50                   	push   eax
c000e47b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e47e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e485:	50                   	push   eax
c000e486:	6a 01                	push   0x1
c000e488:	e8 e3 13 00 00       	call   c000f870 <calloc>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 c2                	mov    edx,eax
c000e492:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e495:	85 d2                	test   edx,edx
c000e497:	b8 01 00 00 00       	mov    eax,0x1
c000e49c:	74 2f                	je     c000e4cd <zoh_set_converter+0x82>
c000e49e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4a7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4ad:	c7 43 24 56 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd56
c000e4b4:	c7 43 20 56 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd56
c000e4bb:	c7 43 28 fb e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3fb
c000e4c2:	53                   	push   ebx
c000e4c3:	e8 33 ff ff ff       	call   c000e3fb <zoh_reset>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	31 c0                	xor    eax,eax
c000e4cd:	83 c4 08             	add    esp,0x8
c000e4d0:	5b                   	pop    ebx
c000e4d1:	c3                   	ret    

c000e4d2 <CPU::current()>:
c000e4d2:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c000e4d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4dd:	90                   	nop
c000e4de:	c3                   	ret    

c000e4df <operator new(unsigned long)>:
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e9:	e8 52 13 00 00       	call   c000f840 <malloc>
c000e4ee:	83 c4 10             	add    esp,0x10
c000e4f1:	83 c4 0c             	add    esp,0xc
c000e4f4:	c3                   	ret    

c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4f5:	83 ec 0c             	sub    esp,0xc
c000e4f8:	83 ec 08             	sub    esp,0x8
c000e4fb:	68 86 9e 02 c0       	push   0xc0029e86
c000e500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e504:	e8 b7 23 ff ff       	call   c00008c0 <strcmp>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	85 c0                	test   eax,eax
c000e50e:	0f 94 c0             	sete   al
c000e511:	84 c0                	test   al,al
c000e513:	74 0a                	je     c000e51f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e515:	b8 a8 e2 02 c0       	mov    eax,0xc002e2a8
c000e51a:	e9 e3 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e51f:	83 ec 08             	sub    esp,0x8
c000e522:	68 8f 9e 02 c0       	push   0xc0029e8f
c000e527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52b:	e8 90 23 ff ff       	call   c00008c0 <strcmp>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	85 c0                	test   eax,eax
c000e535:	0f 94 c0             	sete   al
c000e538:	84 c0                	test   al,al
c000e53a:	74 0a                	je     c000e546 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e53c:	b8 ac 68 02 c0       	mov    eax,0xc00268ac
c000e541:	e9 bc 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e546:	83 ec 08             	sub    esp,0x8
c000e549:	68 99 9e 02 c0       	push   0xc0029e99
c000e54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e552:	e8 69 23 ff ff       	call   c00008c0 <strcmp>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	85 c0                	test   eax,eax
c000e55c:	0f 94 c0             	sete   al
c000e55f:	84 c0                	test   al,al
c000e561:	74 0a                	je     c000e56d <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e563:	b8 e0 65 02 c0       	mov    eax,0xc00265e0
c000e568:	e9 95 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e56d:	83 ec 08             	sub    esp,0x8
c000e570:	68 a2 9e 02 c0       	push   0xc0029ea2
c000e575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e579:	e8 42 23 ff ff       	call   c00008c0 <strcmp>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	85 c0                	test   eax,eax
c000e583:	0f 94 c0             	sete   al
c000e586:	84 c0                	test   al,al
c000e588:	74 07                	je     c000e591 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e58a:	b8 ac 69 02 c0       	mov    eax,0xc00269ac
c000e58f:	eb 71                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	68 ac 9e 02 c0       	push   0xc0029eac
c000e599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59d:	e8 1e 23 ff ff       	call   c00008c0 <strcmp>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	85 c0                	test   eax,eax
c000e5a7:	0f 94 c0             	sete   al
c000e5aa:	84 c0                	test   al,al
c000e5ac:	74 07                	je     c000e5b5 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5ae:	b8 2c 67 02 c0       	mov    eax,0xc002672c
c000e5b3:	eb 4d                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b5:	83 ec 08             	sub    esp,0x8
c000e5b8:	68 b5 9e 02 c0       	push   0xc0029eb5
c000e5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c1:	e8 fa 22 ff ff       	call   c00008c0 <strcmp>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	85 c0                	test   eax,eax
c000e5cb:	0f 94 c0             	sete   al
c000e5ce:	84 c0                	test   al,al
c000e5d0:	74 07                	je     c000e5d9 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5d2:	b8 ac e2 02 c0       	mov    eax,0xc002e2ac
c000e5d7:	eb 29                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	68 c2 9e 02 c0       	push   0xc0029ec2
c000e5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e5:	e8 d6 22 ff ff       	call   c00008c0 <strcmp>
c000e5ea:	83 c4 10             	add    esp,0x10
c000e5ed:	85 c0                	test   eax,eax
c000e5ef:	0f 94 c0             	sete   al
c000e5f2:	84 c0                	test   al,al
c000e5f4:	74 07                	je     c000e5fd <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5f6:	b8 ad e2 02 c0       	mov    eax,0xc002e2ad
c000e5fb:	eb 05                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5fd:	b8 00 00 00 00       	mov    eax,0x0
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	c3                   	ret    

c000e606 <Computer::close(int, int, void*)>:
c000e606:	57                   	push   edi
c000e607:	56                   	push   esi
c000e608:	53                   	push   ebx
c000e609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e60d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e611:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e615:	83 ec 0c             	sub    esp,0xc
c000e618:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e61e:	e8 4d 5d 00 00       	call   c0014370 <Device::closeAll()>
c000e623:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e62e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e632:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e63a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e642:	5b                   	pop    ebx
c000e643:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e646:	5e                   	pop    esi
c000e647:	5f                   	pop    edi
c000e648:	ff e0                	jmp    eax

c000e64a <Krnl::firstTask()>:
c000e64a:	53                   	push   ebx
c000e64b:	83 ec 14             	sub    esp,0x14
c000e64e:	fb                   	sti    
c000e64f:	68 3f 1b 00 00       	push   0x1b3f
c000e654:	e8 e7 11 00 00       	call   c000f840 <malloc>
c000e659:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e660:	89 c3                	mov    ebx,eax
c000e662:	ff 35 14 18 03 c0    	push   DWORD PTR ds:0xc0031814
c000e668:	68 cf 9e 02 c0       	push   0xc0029ecf
c000e66d:	6a 01                	push   0x1
c000e66f:	50                   	push   eax
c000e670:	e8 65 f4 00 00       	call   c001dada <Process::Process(bool, char const*, Process*, char**)>
c000e675:	83 c4 20             	add    esp,0x20
c000e678:	68 ff 00 00 00       	push   0xff
c000e67d:	6a 00                	push   0x0
c000e67f:	68 d5 f1 00 c0       	push   0xc000f1d5
c000e684:	53                   	push   ebx
c000e685:	e8 50 f7 00 00       	call   c001ddda <Process::createThread(void (*)(void*), void*, int)>
c000e68a:	6a 7a                	push   0x7a
c000e68c:	6a 00                	push   0x0
c000e68e:	68 39 e6 01 c0       	push   0xc001e639
c000e693:	ff 35 14 18 03 c0    	push   DWORD PTR ds:0xc0031814
c000e699:	e8 3c f7 00 00       	call   c001ddda <Process::createThread(void (*)(void*), void*, int)>
c000e69e:	83 c4 20             	add    esp,0x20
c000e6a1:	a3 c8 17 03 c0       	mov    ds:0xc00317c8,eax
c000e6a6:	c6 05 ad e2 02 c0 01 	mov    BYTE PTR ds:0xc002e2ad,0x1
c000e6ad:	e8 07 03 01 00       	call   c001e9b9 <Vm::initialise8086()>
c000e6b2:	e8 a1 4a 00 00       	call   c0013158 <Fs::initVFS()>
c000e6b7:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c000e6bc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6c4:	6a 00                	push   0x0
c000e6c6:	6a 00                	push   0x0
c000e6c8:	6a 00                	push   0x0
c000e6ca:	50                   	push   eax
c000e6cb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6ce:	e8 7b dd 00 00       	call   c001c44e <Sys::loadSyscalls()>
c000e6d3:	e8 9e bc 00 00       	call   c001a376 <Krnl::loadSystemEnv()>
c000e6d8:	83 c4 0c             	add    esp,0xc
c000e6db:	6a 3a                	push   0x3a
c000e6dd:	68 dc 9e 02 c0       	push   0xc0029edc
c000e6e2:	68 e5 9e 02 c0       	push   0xc0029ee5
c000e6e7:	e8 b0 c9 00 00       	call   c001b09c <Reg::readIntWithDefault(char*, char*, int)>
c000e6ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6ef:	e8 4c 55 00 00       	call   c0013c40 <User::loadClockSettings(int)>
c000e6f4:	58                   	pop    eax
c000e6f5:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c000e6fa:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e700:	e8 3f 5c 00 00       	call   c0014344 <Device::loadDriversForAll()>
c000e705:	e8 b2 b7 00 00       	call   c0019ebc <Krnl::startCPUs()>
c000e70a:	5a                   	pop    edx
c000e70b:	8b 1d a8 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e2a8
c000e711:	59                   	pop    ecx
c000e712:	6a 01                	push   0x1
c000e714:	68 ed 9e 02 c0       	push   0xc0029eed
c000e719:	e8 c4 ee 00 00       	call   c001d5e2 <Thr::loadDLL(char const*, bool)>
c000e71e:	5a                   	pop    edx
c000e71f:	59                   	pop    ecx
c000e720:	53                   	push   ebx
c000e721:	50                   	push   eax
c000e722:	e8 0a f1 00 00       	call   c001d831 <Thr::executeDLL(unsigned long, void*)>
c000e727:	83 c4 10             	add    esp,0x10
c000e72a:	83 ec 0c             	sub    esp,0xc
c000e72d:	6a 02                	push   0x2
c000e72f:	e8 0a fa 00 00       	call   c001e13e <blockTask(TaskState)>
c000e734:	83 c4 10             	add    esp,0x10
c000e737:	eb f1                	jmp    c000e72a <Krnl::firstTask()+0xe0>
c000e739:	90                   	nop

c000e73a <Computer::Computer()>:
c000e73a:	83 ec 0c             	sub    esp,0xc
c000e73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e741:	83 ec 08             	sub    esp,0x8
c000e744:	68 09 9f 02 c0       	push   0xc0029f09
c000e749:	50                   	push   eax
c000e74a:	e8 9b 5c 00 00       	call   c00143ea <Device::Device(char const*)>
c000e74f:	83 c4 10             	add    esp,0x10
c000e752:	ba a8 a0 02 c0       	mov    edx,0xc002a0a8
c000e757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75b:	89 10                	mov    DWORD PTR [eax],edx
c000e75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e761:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e783:	83 ca 04             	or     edx,0x4
c000e786:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e790:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e796:	0f b6 d0             	movzx  edx,al
c000e799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ae:	0f b6 d0             	movzx  edx,al
c000e7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7be:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7c4:	8d 50 01             	lea    edx,[eax+0x1]
c000e7c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7cb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d1:	0f b6 d0             	movzx  edx,al
c000e7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7dc:	83 e1 3f             	and    ecx,0x3f
c000e7df:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ed:	0f b6 d0             	movzx  edx,al
c000e7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e805:	0f b6 d0             	movzx  edx,al
c000e808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e815:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e81b:	8d 50 01             	lea    edx,[eax+0x1]
c000e81e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e822:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e828:	0f b6 d0             	movzx  edx,al
c000e82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e833:	83 e1 3f             	and    ecx,0x3f
c000e836:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e844:	0f b6 d0             	movzx  edx,al
c000e847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84b:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e85c:	0f b6 d0             	movzx  edx,al
c000e85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e863:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e872:	8d 50 01             	lea    edx,[eax+0x1]
c000e875:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e879:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e87f:	0f b6 d0             	movzx  edx,al
c000e882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e886:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e88a:	83 e1 3f             	and    ecx,0x3f
c000e88d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e891:	90                   	nop
c000e892:	83 c4 0c             	add    esp,0xc
c000e895:	c3                   	ret    

c000e896 <Computer::setBootMessage(char const*)>:
c000e896:	c3                   	ret    
c000e897:	90                   	nop

c000e898 <Computer::detectFeatures()>:
c000e898:	55                   	push   ebp
c000e899:	57                   	push   edi
c000e89a:	56                   	push   esi
c000e89b:	53                   	push   ebx
c000e89c:	83 ec 1c             	sub    esp,0x1c
c000e89f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8a3:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8ad:	e8 32 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8b2:	85 c0                	test   eax,eax
c000e8b4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8ba:	0f 95 c2             	setne  dl
c000e8bd:	83 e0 fd             	and    eax,0xfffffffd
c000e8c0:	d1 e2                	shl    edx,1
c000e8c2:	09 d0                	or     eax,edx
c000e8c4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8ca:	a8 02                	test   al,0x2
c000e8cc:	75 46                	jne    c000e914 <Computer::detectFeatures()+0x7c>
c000e8ce:	f6 05 c1 e2 02 c0 04 	test   BYTE PTR ds:0xc002e2c1,0x4
c000e8d5:	74 07                	je     c000e8de <Computer::detectFeatures()+0x46>
c000e8d7:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8de:	e8 93 7c 01 00       	call   c0026576 <x87Detect>
c000e8e3:	83 e0 01             	and    eax,0x1
c000e8e6:	c1 e0 04             	shl    eax,0x4
c000e8e9:	88 c2                	mov    dl,al
c000e8eb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f1:	83 e0 ef             	and    eax,0xffffffef
c000e8f4:	09 d0                	or     eax,edx
c000e8f6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8fc:	a8 10                	test   al,0x10
c000e8fe:	0f 85 2a 01 00 00    	jne    c000ea2e <Computer::detectFeatures()+0x196>
c000e904:	84 c0                	test   al,al
c000e906:	0f 88 45 01 00 00    	js     c000ea51 <Computer::detectFeatures()+0x1b9>
c000e90c:	83 c4 1c             	add    esp,0x1c
c000e90f:	5b                   	pop    ebx
c000e910:	5e                   	pop    esi
c000e911:	5f                   	pop    edi
c000e912:	5d                   	pop    ebp
c000e913:	c3                   	ret    
c000e914:	83 ec 0c             	sub    esp,0xc
c000e917:	6a 20                	push   0x20
c000e919:	e8 b0 a2 00 00       	call   c0018bce <CPU::cpuidCheckEDX(unsigned int)>
c000e91e:	83 e0 01             	and    eax,0x1
c000e921:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e928:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e92e:	83 e0 f7             	and    eax,0xfffffff7
c000e931:	09 d0                	or     eax,edx
c000e933:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e939:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e940:	e8 89 a2 00 00       	call   c0018bce <CPU::cpuidCheckEDX(unsigned int)>
c000e945:	83 e0 01             	and    eax,0x1
c000e948:	88 c2                	mov    dl,al
c000e94a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e950:	83 e0 fe             	and    eax,0xfffffffe
c000e953:	09 d0                	or     eax,edx
c000e955:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e95b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e962:	e8 67 a2 00 00       	call   c0018bce <CPU::cpuidCheckEDX(unsigned int)>
c000e967:	c1 e0 07             	shl    eax,0x7
c000e96a:	88 c2                	mov    dl,al
c000e96c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e972:	83 e0 7f             	and    eax,0x7f
c000e975:	09 d0                	or     eax,edx
c000e977:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e97d:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e984:	e8 45 a2 00 00       	call   c0018bce <CPU::cpuidCheckEDX(unsigned int)>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	83 e0 01             	and    eax,0x1
c000e98f:	c1 e0 05             	shl    eax,0x5
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e99a:	83 e0 df             	and    eax,0xffffffdf
c000e99d:	09 d0                	or     eax,edx
c000e99f:	f7 05 c0 e2 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e2c0,0x401
c000e9a9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9af:	0f 84 c2 00 00 00    	je     c000ea77 <Computer::detectFeatures()+0x1df>
c000e9b5:	83 e0 fe             	and    eax,0xfffffffe
c000e9b8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9be:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9c4:	88 c2                	mov    dl,al
c000e9c6:	83 e2 09             	and    edx,0x9
c000e9c9:	fe ca                	dec    dl
c000e9cb:	75 09                	jne    c000e9d6 <Computer::detectFeatures()+0x13e>
c000e9cd:	83 e0 fe             	and    eax,0xfffffffe
c000e9d0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d6:	83 ec 0c             	sub    esp,0xc
c000e9d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9dd:	50                   	push   eax
c000e9de:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9e2:	55                   	push   ebp
c000e9e3:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9e7:	57                   	push   edi
c000e9e8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9ec:	56                   	push   esi
c000e9ed:	68 00 00 00 80       	push   0x80000000
c000e9f2:	e8 53 a1 00 00       	call   c0018b4a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9f7:	83 c4 20             	add    esp,0x20
c000e9fa:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea05:	0f 86 c3 fe ff ff    	jbe    c000e8ce <Computer::detectFeatures()+0x36>
c000ea0b:	83 ec 0c             	sub    esp,0xc
c000ea0e:	50                   	push   eax
c000ea0f:	55                   	push   ebp
c000ea10:	57                   	push   edi
c000ea11:	56                   	push   esi
c000ea12:	68 01 00 00 80       	push   0x80000001
c000ea17:	e8 2e a1 00 00       	call   c0018b4a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea1c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea26:	83 c4 20             	add    esp,0x20
c000ea29:	e9 a0 fe ff ff       	jmp    c000e8ce <Computer::detectFeatures()+0x36>
c000ea2e:	e8 fd 7a 01 00       	call   c0026530 <absolutelyNoChanceInHell>
c000ea33:	88 c2                	mov    dl,al
c000ea35:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea3b:	c1 e2 07             	shl    edx,0x7
c000ea3e:	83 e0 7f             	and    eax,0x7f
c000ea41:	09 d0                	or     eax,edx
c000ea43:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea49:	84 c0                	test   al,al
c000ea4b:	0f 89 bb fe ff ff    	jns    c000e90c <Computer::detectFeatures()+0x74>
c000ea51:	e8 ba 7a 01 00       	call   c0026510 <avxDetect>
c000ea56:	83 e0 01             	and    eax,0x1
c000ea59:	c1 e0 05             	shl    eax,0x5
c000ea5c:	88 c2                	mov    dl,al
c000ea5e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea64:	83 e0 df             	and    eax,0xffffffdf
c000ea67:	09 d0                	or     eax,edx
c000ea69:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea6f:	83 c4 1c             	add    esp,0x1c
c000ea72:	5b                   	pop    ebx
c000ea73:	5e                   	pop    esi
c000ea74:	5f                   	pop    edi
c000ea75:	5d                   	pop    ebp
c000ea76:	c3                   	ret    
c000ea77:	83 ec 0c             	sub    esp,0xc
c000ea7a:	68 00 02 00 00       	push   0x200
c000ea7f:	e8 4a a1 00 00       	call   c0018bce <CPU::cpuidCheckEDX(unsigned int)>
c000ea84:	83 c4 10             	add    esp,0x10
c000ea87:	83 e0 01             	and    eax,0x1
c000ea8a:	88 c2                	mov    dl,al
c000ea8c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea92:	83 e0 fe             	and    eax,0xfffffffe
c000ea95:	09 d0                	or     eax,edx
c000ea97:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea9d:	e9 1c ff ff ff       	jmp    c000e9be <Computer::detectFeatures()+0x126>

c000eaa2 <Computer::displayFeatures()>:
c000eaa2:	53                   	push   ebx
c000eaa3:	83 ec 14             	sub    esp,0x14
c000eaa6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaaa:	68 19 9f 02 c0       	push   0xc0029f19
c000eaaf:	e8 20 43 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000eab4:	83 c4 10             	add    esp,0x10
c000eab7:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eabe:	0f 85 73 02 00 00    	jne    c000ed37 <Computer::displayFeatures()+0x295>
c000eac4:	b8 16 9f 02 c0       	mov    eax,0xc0029f16
c000eac9:	83 ec 08             	sub    esp,0x8
c000eacc:	50                   	push   eax
c000eacd:	68 2c 9f 02 c0       	push   0xc0029f2c
c000ead2:	e8 fd 42 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000ead7:	83 c4 10             	add    esp,0x10
c000eada:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae1:	0f 85 8c 02 00 00    	jne    c000ed73 <Computer::displayFeatures()+0x2d1>
c000eae7:	b8 16 9f 02 c0       	mov    eax,0xc0029f16
c000eaec:	83 ec 08             	sub    esp,0x8
c000eaef:	50                   	push   eax
c000eaf0:	68 3d 9f 02 c0       	push   0xc0029f3d
c000eaf5:	e8 da 42 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000eafa:	83 c4 10             	add    esp,0x10
c000eafd:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb04:	0f 85 5f 02 00 00    	jne    c000ed69 <Computer::displayFeatures()+0x2c7>
c000eb0a:	b8 16 9f 02 c0       	mov    eax,0xc0029f16
c000eb0f:	83 ec 08             	sub    esp,0x8
c000eb12:	50                   	push   eax
c000eb13:	68 4e 9f 02 c0       	push   0xc0029f4e
c000eb18:	e8 b7 42 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000eb1d:	83 c4 10             	add    esp,0x10
c000eb20:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb27:	0f 85 32 02 00 00    	jne    c000ed5f <Computer::displayFeatures()+0x2bd>
c000eb2d:	b8 16 9f 02 c0       	mov    eax,0xc0029f16
c000eb32:	83 ec 08             	sub    esp,0x8
c000eb35:	50                   	push   eax
c000eb36:	68 5f 9f 02 c0       	push   0xc0029f5f
c000eb3b:	e8 94 42 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000eb40:	83 c4 10             	add    esp,0x10
c000eb43:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb4a:	0f 85 05 02 00 00    	jne    c000ed55 <Computer::displayFeatures()+0x2b3>
c000eb50:	b8 16 9f 02 c0       	mov    eax,0xc0029f16
c000eb55:	83 ec 08             	sub    esp,0x8
c000eb58:	50                   	push   eax
c000eb59:	68 70 9f 02 c0       	push   0xc0029f70
c000eb5e:	e8 71 42 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000eb63:	83 c4 10             	add    esp,0x10
c000eb66:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb6d:	0f 85 d8 01 00 00    	jne    c000ed4b <Computer::displayFeatures()+0x2a9>
c000eb73:	b8 16 9f 02 c0       	mov    eax,0xc0029f16
c000eb78:	83 ec 08             	sub    esp,0x8
c000eb7b:	50                   	push   eax
c000eb7c:	68 81 9f 02 c0       	push   0xc0029f81
c000eb81:	e8 4e 42 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000eb86:	83 c4 10             	add    esp,0x10
c000eb89:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb90:	0f 85 ab 01 00 00    	jne    c000ed41 <Computer::displayFeatures()+0x29f>
c000eb96:	b8 16 9f 02 c0       	mov    eax,0xc0029f16
c000eb9b:	83 ec 08             	sub    esp,0x8
c000eb9e:	50                   	push   eax
c000eb9f:	68 92 9f 02 c0       	push   0xc0029f92
c000eba4:	e8 2b 42 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000eba9:	83 c4 10             	add    esp,0x10
c000ebac:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebb3:	0f 88 1b 02 00 00    	js     c000edd4 <Computer::displayFeatures()+0x332>
c000ebb9:	b8 16 9f 02 c0       	mov    eax,0xc0029f16
c000ebbe:	83 ec 08             	sub    esp,0x8
c000ebc1:	50                   	push   eax
c000ebc2:	68 a3 9f 02 c0       	push   0xc0029fa3
c000ebc7:	e8 08 42 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000ebcc:	83 c4 10             	add    esp,0x10
c000ebcf:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebd6:	0f 85 a1 01 00 00    	jne    c000ed7d <Computer::displayFeatures()+0x2db>
c000ebdc:	b8 16 9f 02 c0       	mov    eax,0xc0029f16
c000ebe1:	83 ec 08             	sub    esp,0x8
c000ebe4:	50                   	push   eax
c000ebe5:	68 b4 9f 02 c0       	push   0xc0029fb4
c000ebea:	e8 e5 41 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ebf9:	0f 85 cb 01 00 00    	jne    c000edca <Computer::displayFeatures()+0x328>
c000ebff:	b8 16 9f 02 c0       	mov    eax,0xc0029f16
c000ec04:	83 ec 08             	sub    esp,0x8
c000ec07:	50                   	push   eax
c000ec08:	68 c5 9f 02 c0       	push   0xc0029fc5
c000ec0d:	e8 c2 41 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000ec12:	83 c4 10             	add    esp,0x10
c000ec15:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec1c:	0f 85 9e 01 00 00    	jne    c000edc0 <Computer::displayFeatures()+0x31e>
c000ec22:	b8 16 9f 02 c0       	mov    eax,0xc0029f16
c000ec27:	83 ec 08             	sub    esp,0x8
c000ec2a:	50                   	push   eax
c000ec2b:	68 d6 9f 02 c0       	push   0xc0029fd6
c000ec30:	e8 9f 41 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000ec35:	83 c4 10             	add    esp,0x10
c000ec38:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec3f:	0f 85 71 01 00 00    	jne    c000edb6 <Computer::displayFeatures()+0x314>
c000ec45:	b8 16 9f 02 c0       	mov    eax,0xc0029f16
c000ec4a:	83 ec 08             	sub    esp,0x8
c000ec4d:	50                   	push   eax
c000ec4e:	68 e7 9f 02 c0       	push   0xc0029fe7
c000ec53:	e8 7c 41 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000ec58:	83 c4 10             	add    esp,0x10
c000ec5b:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec62:	0f 85 44 01 00 00    	jne    c000edac <Computer::displayFeatures()+0x30a>
c000ec68:	b8 16 9f 02 c0       	mov    eax,0xc0029f16
c000ec6d:	83 ec 08             	sub    esp,0x8
c000ec70:	50                   	push   eax
c000ec71:	68 f8 9f 02 c0       	push   0xc0029ff8
c000ec76:	e8 59 41 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec85:	0f 85 17 01 00 00    	jne    c000eda2 <Computer::displayFeatures()+0x300>
c000ec8b:	b8 16 9f 02 c0       	mov    eax,0xc0029f16
c000ec90:	83 ec 08             	sub    esp,0x8
c000ec93:	50                   	push   eax
c000ec94:	68 09 a0 02 c0       	push   0xc002a009
c000ec99:	e8 36 41 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000ec9e:	83 c4 10             	add    esp,0x10
c000eca1:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000eca8:	0f 85 ea 00 00 00    	jne    c000ed98 <Computer::displayFeatures()+0x2f6>
c000ecae:	b8 16 9f 02 c0       	mov    eax,0xc0029f16
c000ecb3:	83 ec 08             	sub    esp,0x8
c000ecb6:	50                   	push   eax
c000ecb7:	68 1a a0 02 c0       	push   0xc002a01a
c000ecbc:	e8 13 41 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000ecc1:	83 c4 10             	add    esp,0x10
c000ecc4:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eccb:	0f 88 0d 01 00 00    	js     c000edde <Computer::displayFeatures()+0x33c>
c000ecd1:	b8 16 9f 02 c0       	mov    eax,0xc0029f16
c000ecd6:	83 ec 08             	sub    esp,0x8
c000ecd9:	50                   	push   eax
c000ecda:	68 2b a0 02 c0       	push   0xc002a02b
c000ecdf:	e8 f0 40 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000ece4:	83 c4 10             	add    esp,0x10
c000ece7:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecee:	0f 85 9a 00 00 00    	jne    c000ed8e <Computer::displayFeatures()+0x2ec>
c000ecf4:	b8 16 9f 02 c0       	mov    eax,0xc0029f16
c000ecf9:	83 ec 08             	sub    esp,0x8
c000ecfc:	50                   	push   eax
c000ecfd:	68 3c a0 02 c0       	push   0xc002a03c
c000ed02:	e8 cd 40 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000ed07:	83 c4 10             	add    esp,0x10
c000ed0a:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed11:	75 74                	jne    c000ed87 <Computer::displayFeatures()+0x2e5>
c000ed13:	b8 16 9f 02 c0       	mov    eax,0xc0029f16
c000ed18:	83 ec 08             	sub    esp,0x8
c000ed1b:	50                   	push   eax
c000ed1c:	68 4d a0 02 c0       	push   0xc002a04d
c000ed21:	e8 ae 40 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000ed26:	c7 44 24 20 90 b9 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b990
c000ed2e:	83 c4 18             	add    esp,0x18
c000ed31:	5b                   	pop    ebx
c000ed32:	e9 9d 40 00 00       	jmp    c0012dd4 <Dbg::kprintf(char const*, ...)>
c000ed37:	b8 12 9f 02 c0       	mov    eax,0xc0029f12
c000ed3c:	e9 88 fd ff ff       	jmp    c000eac9 <Computer::displayFeatures()+0x27>
c000ed41:	b8 12 9f 02 c0       	mov    eax,0xc0029f12
c000ed46:	e9 50 fe ff ff       	jmp    c000eb9b <Computer::displayFeatures()+0xf9>
c000ed4b:	b8 12 9f 02 c0       	mov    eax,0xc0029f12
c000ed50:	e9 23 fe ff ff       	jmp    c000eb78 <Computer::displayFeatures()+0xd6>
c000ed55:	b8 12 9f 02 c0       	mov    eax,0xc0029f12
c000ed5a:	e9 f6 fd ff ff       	jmp    c000eb55 <Computer::displayFeatures()+0xb3>
c000ed5f:	b8 12 9f 02 c0       	mov    eax,0xc0029f12
c000ed64:	e9 c9 fd ff ff       	jmp    c000eb32 <Computer::displayFeatures()+0x90>
c000ed69:	b8 12 9f 02 c0       	mov    eax,0xc0029f12
c000ed6e:	e9 9c fd ff ff       	jmp    c000eb0f <Computer::displayFeatures()+0x6d>
c000ed73:	b8 12 9f 02 c0       	mov    eax,0xc0029f12
c000ed78:	e9 6f fd ff ff       	jmp    c000eaec <Computer::displayFeatures()+0x4a>
c000ed7d:	b8 12 9f 02 c0       	mov    eax,0xc0029f12
c000ed82:	e9 5a fe ff ff       	jmp    c000ebe1 <Computer::displayFeatures()+0x13f>
c000ed87:	b8 12 9f 02 c0       	mov    eax,0xc0029f12
c000ed8c:	eb 8a                	jmp    c000ed18 <Computer::displayFeatures()+0x276>
c000ed8e:	b8 12 9f 02 c0       	mov    eax,0xc0029f12
c000ed93:	e9 61 ff ff ff       	jmp    c000ecf9 <Computer::displayFeatures()+0x257>
c000ed98:	b8 12 9f 02 c0       	mov    eax,0xc0029f12
c000ed9d:	e9 11 ff ff ff       	jmp    c000ecb3 <Computer::displayFeatures()+0x211>
c000eda2:	b8 12 9f 02 c0       	mov    eax,0xc0029f12
c000eda7:	e9 e4 fe ff ff       	jmp    c000ec90 <Computer::displayFeatures()+0x1ee>
c000edac:	b8 12 9f 02 c0       	mov    eax,0xc0029f12
c000edb1:	e9 b7 fe ff ff       	jmp    c000ec6d <Computer::displayFeatures()+0x1cb>
c000edb6:	b8 12 9f 02 c0       	mov    eax,0xc0029f12
c000edbb:	e9 8a fe ff ff       	jmp    c000ec4a <Computer::displayFeatures()+0x1a8>
c000edc0:	b8 12 9f 02 c0       	mov    eax,0xc0029f12
c000edc5:	e9 5d fe ff ff       	jmp    c000ec27 <Computer::displayFeatures()+0x185>
c000edca:	b8 12 9f 02 c0       	mov    eax,0xc0029f12
c000edcf:	e9 30 fe ff ff       	jmp    c000ec04 <Computer::displayFeatures()+0x162>
c000edd4:	b8 12 9f 02 c0       	mov    eax,0xc0029f12
c000edd9:	e9 e0 fd ff ff       	jmp    c000ebbe <Computer::displayFeatures()+0x11c>
c000edde:	b8 12 9f 02 c0       	mov    eax,0xc0029f12
c000ede3:	e9 ee fe ff ff       	jmp    c000ecd6 <Computer::displayFeatures()+0x234>

c000ede8 <Computer::rdmsr(unsigned int)>:
c000ede8:	83 ec 0c             	sub    esp,0xc
c000edeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edf6:	74 0a                	je     c000ee02 <Computer::rdmsr(unsigned int)+0x1a>
c000edf8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edfc:	0f 32                	rdmsr  
c000edfe:	83 c4 0c             	add    esp,0xc
c000ee01:	c3                   	ret    
c000ee02:	83 ec 0c             	sub    esp,0xc
c000ee05:	68 5e a0 02 c0       	push   0xc002a05e
c000ee0a:	e8 a0 b6 00 00       	call   c001a4af <Krnl::panic(char const*)>
c000ee0f:	83 c4 10             	add    esp,0x10
c000ee12:	eb e4                	jmp    c000edf8 <Computer::rdmsr(unsigned int)+0x10>

c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee14:	57                   	push   edi
c000ee15:	56                   	push   esi
c000ee16:	52                   	push   edx
c000ee17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee1b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee1f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee23:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee2a:	74 0e                	je     c000ee3a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee30:	89 f0                	mov    eax,esi
c000ee32:	89 fa                	mov    edx,edi
c000ee34:	0f 30                	wrmsr  
c000ee36:	58                   	pop    eax
c000ee37:	5e                   	pop    esi
c000ee38:	5f                   	pop    edi
c000ee39:	c3                   	ret    
c000ee3a:	83 ec 0c             	sub    esp,0xc
c000ee3d:	68 64 a0 02 c0       	push   0xc002a064
c000ee42:	e8 68 b6 00 00       	call   c001a4af <Krnl::panic(char const*)>
c000ee47:	83 c4 10             	add    esp,0x10
c000ee4a:	eb e0                	jmp    c000ee2c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee4c <Computer::nmiEnabled()>:
c000ee4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee50:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee56:	c3                   	ret    
c000ee57:	90                   	nop

c000ee58 <Computer::readCMOS(unsigned char)>:
c000ee58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee5c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee63:	19 c0                	sbb    eax,eax
c000ee65:	83 e0 80             	and    eax,0xffffff80
c000ee68:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee6c:	e6 70                	out    0x70,al
c000ee6e:	e4 71                	in     al,0x71
c000ee70:	c3                   	ret    
c000ee71:	90                   	nop

c000ee72 <Computer::enableNMI(bool)>:
c000ee72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee7a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee80:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee88:	eb ce                	jmp    c000ee58 <Computer::readCMOS(unsigned char)>

c000ee8a <Computer::open(int, int, void*)>:
c000ee8a:	56                   	push   esi
c000ee8b:	53                   	push   ebx
c000ee8c:	83 ec 10             	sub    esp,0x10
c000ee8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee93:	f6 05 c0 e2 02 c0 04 	test   BYTE PTR ds:0xc002e2c0,0x4
c000ee9a:	68 68 12 00 00       	push   0x1268
c000ee9f:	0f 94 05 e4 d1 02 c0 	sete   BYTE PTR ds:0xc002d1e4
c000eea6:	e8 95 09 00 00       	call   c000f840 <malloc>
c000eeab:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeae:	89 c6                	mov    esi,eax
c000eeb0:	e8 e5 91 00 00       	call   c001809a <ACPI::ACPI()>
c000eeb5:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eebb:	58                   	pop    eax
c000eebc:	5a                   	pop    edx
c000eebd:	56                   	push   esi
c000eebe:	53                   	push   ebx
c000eebf:	e8 36 53 00 00       	call   c00141fa <Device::addChild(Device*)>
c000eec4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec7:	e8 cc f9 ff ff       	call   c000e898 <Computer::detectFeatures()>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 ce fb ff ff       	call   c000eaa2 <Computer::displayFeatures()>
c000eed4:	59                   	pop    ecx
c000eed5:	5e                   	pop    esi
c000eed6:	6a 01                	push   0x1
c000eed8:	53                   	push   ebx
c000eed9:	e8 94 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000eede:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eee5:	e8 56 09 00 00       	call   c000f840 <malloc>
c000eeea:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeed:	89 c6                	mov    esi,eax
c000eeef:	e8 92 9d 00 00       	call   c0018c86 <CPU::CPU()>
c000eef4:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eefa:	58                   	pop    eax
c000eefb:	5a                   	pop    edx
c000eefc:	56                   	push   esi
c000eefd:	53                   	push   ebx
c000eefe:	e8 f7 52 00 00       	call   c00141fa <Device::addChild(Device*)>
c000ef03:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef09:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef0f:	6a 00                	push   0x0
c000ef11:	6a 00                	push   0x0
c000ef13:	50                   	push   eax
c000ef14:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef17:	83 c4 20             	add    esp,0x20
c000ef1a:	e8 61 58 00 00       	call   c0014780 <setupFPU()>
c000ef1f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef25:	85 c0                	test   eax,eax
c000ef27:	74 1f                	je     c000ef48 <Computer::open(int, int, void*)+0xbe>
c000ef29:	83 ec 08             	sub    esp,0x8
c000ef2c:	50                   	push   eax
c000ef2d:	53                   	push   ebx
c000ef2e:	e8 c7 52 00 00       	call   c00141fa <Device::addChild(Device*)>
c000ef33:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef39:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef3b:	6a 00                	push   0x0
c000ef3d:	6a 00                	push   0x0
c000ef3f:	6a 00                	push   0x0
c000ef41:	50                   	push   eax
c000ef42:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef45:	83 c4 20             	add    esp,0x20
c000ef48:	83 ec 0c             	sub    esp,0xc
c000ef4b:	68 4a e6 00 c0       	push   0xc000e64a
c000ef50:	e8 85 ef 00 00       	call   c001deda <setupMultitasking(void (*)())>
c000ef55:	83 c4 14             	add    esp,0x14
c000ef58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef5d:	5b                   	pop    ebx
c000ef5e:	5e                   	pop    esi
c000ef5f:	c3                   	ret    

c000ef60 <Computer::disableNMI()>:
c000ef60:	6a 00                	push   0x0
c000ef62:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef66:	e8 07 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000ef6b:	58                   	pop    eax
c000ef6c:	5a                   	pop    edx
c000ef6d:	c3                   	ret    

c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef72:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef79:	19 c0                	sbb    eax,eax
c000ef7b:	83 e0 80             	and    eax,0xffffff80
c000ef7e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef82:	e6 70                	out    0x70,al
c000ef84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef88:	e6 71                	out    0x71,al
c000ef8a:	c3                   	ret    
c000ef8b:	90                   	nop

c000ef8c <Computer::handleNMI()>:
c000ef8c:	56                   	push   esi
c000ef8d:	53                   	push   ebx
c000ef8e:	83 ec 10             	sub    esp,0x10
c000ef91:	e4 92                	in     al,0x92
c000ef93:	89 c6                	mov    esi,eax
c000ef95:	e4 61                	in     al,0x61
c000ef97:	68 6a a0 02 c0       	push   0xc002a06a
c000ef9c:	88 c3                	mov    bl,al
c000ef9e:	e8 31 3e 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000efa3:	83 c4 10             	add    esp,0x10
c000efa6:	83 e6 10             	and    esi,0x10
c000efa9:	75 0d                	jne    c000efb8 <Computer::handleNMI()+0x2c>
c000efab:	f6 c3 40             	test   bl,0x40
c000efae:	75 1d                	jne    c000efcd <Computer::handleNMI()+0x41>
c000efb0:	84 db                	test   bl,bl
c000efb2:	78 2d                	js     c000efe1 <Computer::handleNMI()+0x55>
c000efb4:	58                   	pop    eax
c000efb5:	5b                   	pop    ebx
c000efb6:	5e                   	pop    esi
c000efb7:	c3                   	ret    
c000efb8:	83 ec 0c             	sub    esp,0xc
c000efbb:	68 7b a0 02 c0       	push   0xc002a07b
c000efc0:	e8 ea b4 00 00       	call   c001a4af <Krnl::panic(char const*)>
c000efc5:	83 c4 10             	add    esp,0x10
c000efc8:	f6 c3 40             	test   bl,0x40
c000efcb:	74 e3                	je     c000efb0 <Computer::handleNMI()+0x24>
c000efcd:	83 ec 0c             	sub    esp,0xc
c000efd0:	68 88 a0 02 c0       	push   0xc002a088
c000efd5:	e8 d5 b4 00 00       	call   c001a4af <Krnl::panic(char const*)>
c000efda:	83 c4 10             	add    esp,0x10
c000efdd:	84 db                	test   bl,bl
c000efdf:	79 d3                	jns    c000efb4 <Computer::handleNMI()+0x28>
c000efe1:	c7 44 24 10 92 a0 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a092
c000efe9:	5a                   	pop    edx
c000efea:	5b                   	pop    ebx
c000efeb:	5e                   	pop    esi
c000efec:	e9 be b4 00 00       	jmp    c001a4af <Krnl::panic(char const*)>
c000eff1:	90                   	nop

c000eff2 <Computer::setDiskActivityLight(int, bool)>:
c000eff2:	56                   	push   esi
c000eff3:	53                   	push   ebx
c000eff4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eff8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000effd:	77 1b                	ja     c000f01a <Computer::setDiskActivityLight(int, bool)+0x28>
c000efff:	e4 92                	in     al,0x92
c000f001:	bb 40 00 00 00       	mov    ebx,0x40
c000f006:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f00a:	89 da                	mov    edx,ebx
c000f00c:	d3 e2                	shl    edx,cl
c000f00e:	89 f1                	mov    ecx,esi
c000f010:	f7 d2                	not    edx
c000f012:	d3 e3                	shl    ebx,cl
c000f014:	21 d0                	and    eax,edx
c000f016:	09 d8                	or     eax,ebx
c000f018:	e6 92                	out    0x92,al
c000f01a:	5b                   	pop    ebx
c000f01b:	5e                   	pop    esi
c000f01c:	c3                   	ret    
c000f01d:	90                   	nop

c000f01e <GDTEntry::setBase(unsigned int)>:
c000f01e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f022:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f026:	89 c1                	mov    ecx,eax
c000f028:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f02c:	c1 e9 10             	shr    ecx,0x10
c000f02f:	c1 e8 18             	shr    eax,0x18
c000f032:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f035:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f038:	c3                   	ret    
c000f039:	90                   	nop

c000f03a <GDTEntry::setLimit(unsigned int)>:
c000f03a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f03e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f042:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f045:	66 89 01             	mov    WORD PTR [ecx],ax
c000f048:	83 e2 f0             	and    edx,0xfffffff0
c000f04b:	c1 e8 10             	shr    eax,0x10
c000f04e:	83 e0 0f             	and    eax,0xf
c000f051:	09 d0                	or     eax,edx
c000f053:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f056:	c3                   	ret    
c000f057:	90                   	nop

c000f058 <GDT::GDT()>:
c000f058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f05c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f066:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06c:	90                   	nop
c000f06d:	c3                   	ret    

c000f06e <GDT::addEntry(GDTEntry)>:
c000f06e:	53                   	push   ebx
c000f06f:	83 ec 0c             	sub    esp,0xc
c000f072:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f076:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f078:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f07f:	52                   	push   edx
c000f080:	50                   	push   eax
c000f081:	68 cc a0 02 c0       	push   0xc002a0cc
c000f086:	e8 49 3d 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000f08b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f08d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f091:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f095:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f099:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f09d:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a0:	c1 e0 03             	shl    eax,0x3
c000f0a3:	89 13                	mov    DWORD PTR [ebx],edx
c000f0a5:	83 c4 18             	add    esp,0x18
c000f0a8:	5b                   	pop    ebx
c000f0a9:	c3                   	ret    

c000f0aa <GDT::getNumberOfEntries()>:
c000f0aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b0:	c3                   	ret    
c000f0b1:	90                   	nop

c000f0b2 <GDT::flush()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0b8:	83 c0 04             	add    eax,0x4
c000f0bb:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0c2:	a3 b2 e2 02 c0       	mov    ds:0xc002e2b2,eax
c000f0c7:	66 89 15 b0 e2 02 c0 	mov    WORD PTR ds:0xc002e2b0,dx
c000f0ce:	e9 75 13 ff ff       	jmp    c0000448 <loadGDT>
c000f0d3:	90                   	nop

c000f0d4 <GDT::setup()>:
c000f0d4:	55                   	push   ebp
c000f0d5:	57                   	push   edi
c000f0d6:	56                   	push   esi
c000f0d7:	53                   	push   ebx
c000f0d8:	83 ec 3c             	sub    esp,0x3c
c000f0db:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0df:	6a 00                	push   0x0
c000f0e1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0e5:	53                   	push   ebx
c000f0e6:	e8 33 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f0eb:	6a 00                	push   0x0
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 47 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f0f3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f0fb:	6a 00                	push   0x0
c000f0fd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f101:	53                   	push   ebx
c000f102:	e8 17 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f107:	68 ff ff ff 00       	push   0xffffff
c000f10c:	53                   	push   ebx
c000f10d:	e8 28 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f112:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f116:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f11b:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f120:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f124:	83 c4 20             	add    esp,0x20
c000f127:	6a 00                	push   0x0
c000f129:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f12d:	53                   	push   ebx
c000f12e:	e8 eb fe ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f133:	68 ff ff ff 00       	push   0xffffff
c000f138:	53                   	push   ebx
c000f139:	e8 fc fe ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f13e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f142:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f146:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f14a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f14e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f152:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f157:	0d 00 92 c0 00       	or     eax,0xc09200
c000f15c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f160:	89 d8                	mov    eax,ebx
c000f162:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f166:	80 cc 60             	or     ah,0x60
c000f169:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f16d:	83 c4 0c             	add    esp,0xc
c000f170:	89 f8                	mov    eax,edi
c000f172:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f176:	80 cc 60             	or     ah,0x60
c000f179:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17d:	89 c7                	mov    edi,eax
c000f17f:	55                   	push   ebp
c000f180:	e8 e9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f185:	83 c4 0c             	add    esp,0xc
c000f188:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f18c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f190:	55                   	push   ebp
c000f191:	e8 d8 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f196:	83 c4 0c             	add    esp,0xc
c000f199:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f19d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a1:	55                   	push   ebp
c000f1a2:	e8 c7 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1a7:	83 c4 0c             	add    esp,0xc
c000f1aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1b2:	53                   	push   ebx
c000f1b3:	51                   	push   ecx
c000f1b4:	55                   	push   ebp
c000f1b5:	e8 b4 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1ba:	83 c4 0c             	add    esp,0xc
c000f1bd:	57                   	push   edi
c000f1be:	56                   	push   esi
c000f1bf:	55                   	push   ebp
c000f1c0:	e8 a9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1c8:	e8 e5 fe ff ff       	call   c000f0b2 <GDT::flush()>
c000f1cd:	83 c4 4c             	add    esp,0x4c
c000f1d0:	5b                   	pop    ebx
c000f1d1:	5e                   	pop    esi
c000f1d2:	5f                   	pop    edi
c000f1d3:	5d                   	pop    ebp
c000f1d4:	c3                   	ret    

c000f1d5 <idleFunction(void*)>:
c000f1d5:	53                   	push   ebx
c000f1d6:	83 ec 08             	sub    esp,0x8
c000f1d9:	e8 cd ea 00 00       	call   c001dcab <unlockScheduler()>
c000f1de:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c000f1e3:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1e9:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f0:	74 3c                	je     c000f22e <idleFunction(void*)+0x59>
c000f1f2:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f1f9:	74 33                	je     c000f22e <idleFunction(void*)+0x59>
c000f1fb:	31 db                	xor    ebx,ebx
c000f1fd:	52                   	push   edx
c000f1fe:	52                   	push   edx
c000f1ff:	68 e1 00 00 00       	push   0xe1
c000f204:	50                   	push   eax
c000f205:	e8 de fb ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c000f20a:	53                   	push   ebx
c000f20b:	83 e0 02             	and    eax,0x2
c000f20e:	50                   	push   eax
c000f20f:	68 e1 00 00 00       	push   0xe1
c000f214:	ff 35 a8 e2 02 c0    	push   DWORD PTR ds:0xc002e2a8
c000f21a:	e8 f5 fb ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f21f:	83 c4 20             	add    esp,0x20
c000f222:	e8 58 10 ff ff       	call   c000027f <doTPAUSE>
c000f227:	e8 84 93 01 00       	call   c00285b0 <idleCommon()>
c000f22c:	eb f4                	jmp    c000f222 <idleFunction(void*)+0x4d>
c000f22e:	fb                   	sti    
c000f22f:	f4                   	hlt    
c000f230:	e8 7b 93 01 00       	call   c00285b0 <idleCommon()>
c000f235:	eb f7                	jmp    c000f22e <idleFunction(void*)+0x59>
c000f237:	90                   	nop

c000f238 <IDTEntry::IDTEntry(bool)>:
c000f238:	83 ec 04             	sub    esp,0x4
c000f23b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f23f:	88 04 24             	mov    BYTE PTR [esp],al
c000f242:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f246:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f24c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f250:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f25b:	83 e2 f0             	and    edx,0xfffffff0
c000f25e:	83 ca 0e             	or     edx,0xe
c000f261:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f268:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f26b:	83 e2 ef             	and    edx,0xffffffef
c000f26e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f271:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f275:	74 04                	je     c000f27b <IDTEntry::IDTEntry(bool)+0x43>
c000f277:	b2 03                	mov    dl,0x3
c000f279:	eb 02                	jmp    c000f27d <IDTEntry::IDTEntry(bool)+0x45>
c000f27b:	b2 00                	mov    dl,0x0
c000f27d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f281:	83 e2 03             	and    edx,0x3
c000f284:	88 d1                	mov    cl,dl
c000f286:	c1 e1 05             	shl    ecx,0x5
c000f289:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f28c:	83 e2 9f             	and    edx,0xffffff9f
c000f28f:	09 ca                	or     edx,ecx
c000f291:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f29b:	83 ca 80             	or     edx,0xffffff80
c000f29e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a1:	90                   	nop
c000f2a2:	83 c4 04             	add    esp,0x4
c000f2a5:	c3                   	ret    

c000f2a6 <IDTEntry::setOffset(unsigned int)>:
c000f2a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ae:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b1:	c1 e8 10             	shr    eax,0x10
c000f2b4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2b8:	c3                   	ret    
c000f2b9:	90                   	nop

c000f2ba <IDT::IDT()>:
c000f2ba:	90                   	nop
c000f2bb:	c3                   	ret    

c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c0:	83 c0 30             	add    eax,0x30
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::addEntry(IDTEntry, int)>:
c000f2c4:	53                   	push   ebx
c000f2c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2d5:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2d8:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2dc:	5b                   	pop    ebx
c000f2dd:	c3                   	ret    

c000f2de <IDT::addEntry(int, void (*)(), bool)>:
c000f2de:	53                   	push   ebx
c000f2df:	83 ec 10             	sub    esp,0x10
c000f2e2:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2e7:	50                   	push   eax
c000f2e8:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2ec:	53                   	push   ebx
c000f2ed:	e8 46 ff ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f2f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2f6:	53                   	push   ebx
c000f2f7:	e8 aa ff ff ff       	call   c000f2a6 <IDTEntry::setOffset(unsigned int)>
c000f2fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f300:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f304:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f30c:	e8 b3 ff ff ff       	call   c000f2c4 <IDT::addEntry(IDTEntry, int)>
c000f311:	83 c4 30             	add    esp,0x30
c000f314:	5b                   	pop    ebx
c000f315:	c3                   	ret    

c000f316 <IDT::flush()>:
c000f316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f31a:	66 c7 05 b8 e2 02 c0 ff 07 	mov    WORD PTR ds:0xc002e2b8,0x7ff
c000f323:	a3 ba e2 02 c0       	mov    ds:0xc002e2ba,eax
c000f328:	0f 01 1d b8 e2 02 c0 	lidtd  ds:0xc002e2b8
c000f32f:	c3                   	ret    

c000f330 <IDT::setup()>:
c000f330:	57                   	push   edi
c000f331:	56                   	push   esi
c000f332:	53                   	push   ebx
c000f333:	83 ec 10             	sub    esp,0x10
c000f336:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f33a:	6a 00                	push   0x0
c000f33c:	68 68 04 00 c0       	push   0xc0000468
c000f341:	6a 00                	push   0x0
c000f343:	53                   	push   ebx
c000f344:	e8 95 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f349:	6a 00                	push   0x0
c000f34b:	68 78 04 00 c0       	push   0xc0000478
c000f350:	6a 01                	push   0x1
c000f352:	53                   	push   ebx
c000f353:	e8 86 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f358:	83 c4 20             	add    esp,0x20
c000f35b:	6a 00                	push   0x0
c000f35d:	68 82 04 00 c0       	push   0xc0000482
c000f362:	6a 02                	push   0x2
c000f364:	53                   	push   ebx
c000f365:	e8 74 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f36a:	6a 00                	push   0x0
c000f36c:	68 8c 04 00 c0       	push   0xc000048c
c000f371:	6a 03                	push   0x3
c000f373:	53                   	push   ebx
c000f374:	e8 65 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f379:	83 c4 20             	add    esp,0x20
c000f37c:	6a 00                	push   0x0
c000f37e:	68 96 04 00 c0       	push   0xc0000496
c000f383:	6a 04                	push   0x4
c000f385:	53                   	push   ebx
c000f386:	e8 53 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f38b:	6a 00                	push   0x0
c000f38d:	68 a0 04 00 c0       	push   0xc00004a0
c000f392:	6a 05                	push   0x5
c000f394:	53                   	push   ebx
c000f395:	e8 44 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f39a:	83 c4 20             	add    esp,0x20
c000f39d:	6a 00                	push   0x0
c000f39f:	68 aa 04 00 c0       	push   0xc00004aa
c000f3a4:	6a 06                	push   0x6
c000f3a6:	53                   	push   ebx
c000f3a7:	e8 32 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ac:	6a 00                	push   0x0
c000f3ae:	68 b4 04 00 c0       	push   0xc00004b4
c000f3b3:	6a 07                	push   0x7
c000f3b5:	53                   	push   ebx
c000f3b6:	e8 23 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3bb:	83 c4 20             	add    esp,0x20
c000f3be:	6a 00                	push   0x0
c000f3c0:	68 be 04 00 c0       	push   0xc00004be
c000f3c5:	6a 08                	push   0x8
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 11 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3cd:	6a 00                	push   0x0
c000f3cf:	68 c6 04 00 c0       	push   0xc00004c6
c000f3d4:	6a 09                	push   0x9
c000f3d6:	53                   	push   ebx
c000f3d7:	e8 02 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3dc:	83 c4 20             	add    esp,0x20
c000f3df:	6a 00                	push   0x0
c000f3e1:	68 d0 04 00 c0       	push   0xc00004d0
c000f3e6:	6a 0a                	push   0xa
c000f3e8:	53                   	push   ebx
c000f3e9:	e8 f0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ee:	6a 00                	push   0x0
c000f3f0:	68 d8 04 00 c0       	push   0xc00004d8
c000f3f5:	6a 0b                	push   0xb
c000f3f7:	53                   	push   ebx
c000f3f8:	e8 e1 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3fd:	83 c4 20             	add    esp,0x20
c000f400:	6a 00                	push   0x0
c000f402:	68 e0 04 00 c0       	push   0xc00004e0
c000f407:	6a 0c                	push   0xc
c000f409:	53                   	push   ebx
c000f40a:	e8 cf fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f40f:	6a 00                	push   0x0
c000f411:	68 e8 04 00 c0       	push   0xc00004e8
c000f416:	6a 0d                	push   0xd
c000f418:	53                   	push   ebx
c000f419:	e8 c0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f41e:	83 c4 20             	add    esp,0x20
c000f421:	6a 00                	push   0x0
c000f423:	68 f0 04 00 c0       	push   0xc00004f0
c000f428:	6a 0e                	push   0xe
c000f42a:	53                   	push   ebx
c000f42b:	e8 ae fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f430:	6a 00                	push   0x0
c000f432:	68 f8 04 00 c0       	push   0xc00004f8
c000f437:	6a 0f                	push   0xf
c000f439:	53                   	push   ebx
c000f43a:	e8 9f fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f43f:	83 c4 20             	add    esp,0x20
c000f442:	6a 00                	push   0x0
c000f444:	68 02 05 00 c0       	push   0xc0000502
c000f449:	6a 10                	push   0x10
c000f44b:	53                   	push   ebx
c000f44c:	e8 8d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f451:	6a 00                	push   0x0
c000f453:	68 0c 05 00 c0       	push   0xc000050c
c000f458:	6a 11                	push   0x11
c000f45a:	53                   	push   ebx
c000f45b:	e8 7e fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f460:	83 c4 20             	add    esp,0x20
c000f463:	6a 00                	push   0x0
c000f465:	68 16 05 00 c0       	push   0xc0000516
c000f46a:	6a 12                	push   0x12
c000f46c:	53                   	push   ebx
c000f46d:	e8 6c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f472:	6a 01                	push   0x1
c000f474:	68 b0 05 00 c0       	push   0xc00005b0
c000f479:	6a 60                	push   0x60
c000f47b:	53                   	push   ebx
c000f47c:	e8 5d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f481:	83 c4 20             	add    esp,0x20
c000f484:	6a 00                	push   0x0
c000f486:	68 b7 05 00 c0       	push   0xc00005b7
c000f48b:	6a 20                	push   0x20
c000f48d:	53                   	push   ebx
c000f48e:	e8 4b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f493:	6a 00                	push   0x0
c000f495:	68 a2 05 00 c0       	push   0xc00005a2
c000f49a:	6a 21                	push   0x21
c000f49c:	53                   	push   ebx
c000f49d:	e8 3c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4a2:	83 c4 20             	add    esp,0x20
c000f4a5:	6a 00                	push   0x0
c000f4a7:	68 a9 05 00 c0       	push   0xc00005a9
c000f4ac:	6a 22                	push   0x22
c000f4ae:	53                   	push   ebx
c000f4af:	e8 2a fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4b4:	6a 00                	push   0x0
c000f4b6:	68 20 05 00 c0       	push   0xc0000520
c000f4bb:	6a 23                	push   0x23
c000f4bd:	53                   	push   ebx
c000f4be:	e8 1b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4c3:	83 c4 20             	add    esp,0x20
c000f4c6:	6a 00                	push   0x0
c000f4c8:	68 2a 05 00 c0       	push   0xc000052a
c000f4cd:	6a 24                	push   0x24
c000f4cf:	53                   	push   ebx
c000f4d0:	e8 09 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4d5:	6a 00                	push   0x0
c000f4d7:	68 34 05 00 c0       	push   0xc0000534
c000f4dc:	6a 25                	push   0x25
c000f4de:	53                   	push   ebx
c000f4df:	e8 fa fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4e4:	83 c4 20             	add    esp,0x20
c000f4e7:	6a 00                	push   0x0
c000f4e9:	68 3e 05 00 c0       	push   0xc000053e
c000f4ee:	6a 26                	push   0x26
c000f4f0:	53                   	push   ebx
c000f4f1:	e8 e8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4f6:	6a 00                	push   0x0
c000f4f8:	68 48 05 00 c0       	push   0xc0000548
c000f4fd:	6a 27                	push   0x27
c000f4ff:	53                   	push   ebx
c000f500:	e8 d9 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f505:	83 c4 20             	add    esp,0x20
c000f508:	6a 00                	push   0x0
c000f50a:	68 52 05 00 c0       	push   0xc0000552
c000f50f:	6a 28                	push   0x28
c000f511:	53                   	push   ebx
c000f512:	e8 c7 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f517:	6a 00                	push   0x0
c000f519:	68 5c 05 00 c0       	push   0xc000055c
c000f51e:	6a 29                	push   0x29
c000f520:	53                   	push   ebx
c000f521:	e8 b8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f526:	83 c4 20             	add    esp,0x20
c000f529:	6a 00                	push   0x0
c000f52b:	68 66 05 00 c0       	push   0xc0000566
c000f530:	6a 2a                	push   0x2a
c000f532:	53                   	push   ebx
c000f533:	e8 a6 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f538:	6a 00                	push   0x0
c000f53a:	68 70 05 00 c0       	push   0xc0000570
c000f53f:	6a 2b                	push   0x2b
c000f541:	53                   	push   ebx
c000f542:	e8 97 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f547:	83 c4 20             	add    esp,0x20
c000f54a:	6a 00                	push   0x0
c000f54c:	68 7a 05 00 c0       	push   0xc000057a
c000f551:	6a 2c                	push   0x2c
c000f553:	53                   	push   ebx
c000f554:	e8 85 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f559:	6a 00                	push   0x0
c000f55b:	68 84 05 00 c0       	push   0xc0000584
c000f560:	6a 2d                	push   0x2d
c000f562:	53                   	push   ebx
c000f563:	e8 76 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f568:	83 c4 20             	add    esp,0x20
c000f56b:	6a 00                	push   0x0
c000f56d:	68 8e 05 00 c0       	push   0xc000058e
c000f572:	6a 2e                	push   0x2e
c000f574:	53                   	push   ebx
c000f575:	e8 64 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f57a:	6a 00                	push   0x0
c000f57c:	68 98 05 00 c0       	push   0xc0000598
c000f581:	6a 2f                	push   0x2f
c000f583:	53                   	push   ebx
c000f584:	e8 55 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f589:	83 c4 20             	add    esp,0x20
c000f58c:	6a 00                	push   0x0
c000f58e:	68 ed 05 00 c0       	push   0xc00005ed
c000f593:	6a 30                	push   0x30
c000f595:	53                   	push   ebx
c000f596:	e8 43 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f59b:	6a 00                	push   0x0
c000f59d:	68 f7 05 00 c0       	push   0xc00005f7
c000f5a2:	6a 31                	push   0x31
c000f5a4:	53                   	push   ebx
c000f5a5:	e8 34 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5aa:	83 c4 20             	add    esp,0x20
c000f5ad:	6a 00                	push   0x0
c000f5af:	68 01 06 00 c0       	push   0xc0000601
c000f5b4:	6a 32                	push   0x32
c000f5b6:	53                   	push   ebx
c000f5b7:	e8 22 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5bc:	6a 00                	push   0x0
c000f5be:	68 0b 06 00 c0       	push   0xc000060b
c000f5c3:	6a 33                	push   0x33
c000f5c5:	53                   	push   ebx
c000f5c6:	e8 13 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5cb:	83 c4 20             	add    esp,0x20
c000f5ce:	6a 00                	push   0x0
c000f5d0:	68 15 06 00 c0       	push   0xc0000615
c000f5d5:	6a 34                	push   0x34
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 01 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5dd:	6a 00                	push   0x0
c000f5df:	68 1f 06 00 c0       	push   0xc000061f
c000f5e4:	6a 35                	push   0x35
c000f5e6:	53                   	push   ebx
c000f5e7:	e8 f2 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5ec:	83 c4 20             	add    esp,0x20
c000f5ef:	6a 00                	push   0x0
c000f5f1:	68 29 06 00 c0       	push   0xc0000629
c000f5f6:	6a 36                	push   0x36
c000f5f8:	53                   	push   ebx
c000f5f9:	e8 e0 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5fe:	6a 00                	push   0x0
c000f600:	68 33 06 00 c0       	push   0xc0000633
c000f605:	6a 37                	push   0x37
c000f607:	53                   	push   ebx
c000f608:	e8 d1 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f60d:	83 c4 20             	add    esp,0x20
c000f610:	e8 09 28 00 00       	call   c0011e1e <Virt::getAKernelVAS()>
c000f615:	52                   	push   edx
c000f616:	6a 03                	push   0x3
c000f618:	6a 02                	push   0x2
c000f61a:	50                   	push   eax
c000f61b:	e8 20 2d 00 00       	call   c0012340 <VAS::allocatePages(int, int)>
c000f620:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f627:	89 c6                	mov    esi,eax
c000f629:	e8 12 02 00 00       	call   c000f840 <malloc>
c000f62e:	81 c6 00 20 00 00    	add    esi,0x2000
c000f634:	89 04 24             	mov    DWORD PTR [esp],eax
c000f637:	89 c7                	mov    edi,eax
c000f639:	e8 6a 1e 00 00       	call   c00114a8 <TSS::TSS()>
c000f63e:	83 c4 0c             	add    esp,0xc
c000f641:	68 be 04 00 c0       	push   0xc00004be
c000f646:	56                   	push   esi
c000f647:	57                   	push   edi
c000f648:	e8 9b 1e 00 00       	call   c00114e8 <TSS::setup(unsigned long, unsigned long)>
c000f64d:	59                   	pop    ecx
c000f64e:	89 c6                	mov    esi,eax
c000f650:	5f                   	pop    edi
c000f651:	6a 00                	push   0x0
c000f653:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f657:	50                   	push   eax
c000f658:	e8 db fb ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f65d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f661:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f666:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f66d:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f673:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f677:	80 ce 05             	or     dh,0x5
c000f67a:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f67d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f681:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f685:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f688:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f68b:	e8 86 fc ff ff       	call   c000f316 <IDT::flush()>
c000f690:	83 c4 20             	add    esp,0x20
c000f693:	5b                   	pop    ebx
c000f694:	5e                   	pop    esi
c000f695:	5f                   	pop    edi
c000f696:	c3                   	ret    

c000f697 <sbrk>:
c000f697:	55                   	push   ebp
c000f698:	57                   	push   edi
c000f699:	56                   	push   esi
c000f69a:	53                   	push   ebx
c000f69b:	83 ec 1c             	sub    esp,0x1c
c000f69e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6a2:	85 c0                	test   eax,eax
c000f6a4:	74 3e                	je     c000f6e4 <sbrk+0x4d>
c000f6a6:	78 43                	js     c000f6eb <sbrk+0x54>
c000f6a8:	8b 15 a8 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e2a8
c000f6ae:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6b4:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6ba:	83 e2 01             	and    edx,0x1
c000f6bd:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c1:	8b 0d d8 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d1d8
c000f6c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6cb:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d0:	89 c2                	mov    edx,eax
c000f6d2:	78 2f                	js     c000f703 <sbrk+0x6c>
c000f6d4:	c1 fa 0c             	sar    edx,0xc
c000f6d7:	89 d7                	mov    edi,edx
c000f6d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6dd:	be 00 00 00 00       	mov    esi,0x0
c000f6e2:	eb 36                	jmp    c000f71a <sbrk+0x83>
c000f6e4:	a1 d8 d1 02 c0       	mov    eax,ds:0xc002d1d8
c000f6e9:	eb 74                	jmp    c000f75f <sbrk+0xc8>
c000f6eb:	83 ec 08             	sub    esp,0x8
c000f6ee:	50                   	push   eax
c000f6ef:	68 e8 a0 02 c0       	push   0xc002a0e8
c000f6f4:	e8 db 36 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000f6f9:	83 c4 10             	add    esp,0x10
c000f6fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f701:	eb 5c                	jmp    c000f75f <sbrk+0xc8>
c000f703:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f709:	eb c9                	jmp    c000f6d4 <sbrk+0x3d>
c000f70b:	81 05 d8 d1 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d1d8,0x1000
c000f715:	46                   	inc    esi
c000f716:	39 f7                	cmp    edi,esi
c000f718:	74 34                	je     c000f74e <sbrk+0xb7>
c000f71a:	e8 ff 26 00 00       	call   c0011e1e <Virt::getAKernelVAS()>
c000f71f:	89 c3                	mov    ebx,eax
c000f721:	8b 2d d8 d1 02 c0    	mov    ebp,DWORD PTR ds:0xc002d1d8
c000f727:	e8 b1 07 00 00       	call   c000fedd <Phys::allocatePage()>
c000f72c:	68 01 04 00 00       	push   0x401
c000f731:	55                   	push   ebp
c000f732:	50                   	push   eax
c000f733:	53                   	push   ebx
c000f734:	e8 07 2b 00 00       	call   c0012240 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f739:	83 c4 10             	add    esp,0x10
c000f73c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f741:	74 c8                	je     c000f70b <sbrk+0x74>
c000f743:	8b 1d d8 d1 02 c0    	mov    ebx,DWORD PTR ds:0xc002d1d8
c000f749:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f74c:	eb bd                	jmp    c000f70b <sbrk+0x74>
c000f74e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f753:	75 12                	jne    c000f767 <sbrk+0xd0>
c000f755:	0f 20 d8             	mov    eax,cr3
c000f758:	0f 22 d8             	mov    cr3,eax
c000f75b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f75f:	83 c4 1c             	add    esp,0x1c
c000f762:	5b                   	pop    ebx
c000f763:	5e                   	pop    esi
c000f764:	5f                   	pop    edi
c000f765:	5d                   	pop    ebp
c000f766:	c3                   	ret    
c000f767:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f76b:	89 cb                	mov    ebx,ecx
c000f76d:	c1 eb 0a             	shr    ebx,0xa
c000f770:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f776:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f77c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f780:	c1 e0 0c             	shl    eax,0xc
c000f783:	01 c8                	add    eax,ecx
c000f785:	c1 e8 0a             	shr    eax,0xa
c000f788:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f78d:	2d 00 00 40 00       	sub    eax,0x400000
c000f792:	39 c3                	cmp    ebx,eax
c000f794:	77 c5                	ja     c000f75b <sbrk+0xc4>
c000f796:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f799:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f79f:	39 d8                	cmp    eax,ebx
c000f7a1:	73 f3                	jae    c000f796 <sbrk+0xff>
c000f7a3:	eb b6                	jmp    c000f75b <sbrk+0xc4>

c000f7a5 <mmap>:
c000f7a5:	83 ec 18             	sub    esp,0x18
c000f7a8:	68 18 a1 02 c0       	push   0xc002a118
c000f7ad:	e8 fd ac 00 00       	call   c001a4af <Krnl::panic(char const*)>
c000f7b2:	b8 00 00 00 00       	mov    eax,0x0
c000f7b7:	83 c4 1c             	add    esp,0x1c
c000f7ba:	c3                   	ret    

c000f7bb <munmap>:
c000f7bb:	83 ec 18             	sub    esp,0x18
c000f7be:	68 1d a1 02 c0       	push   0xc002a11d
c000f7c3:	e8 e7 ac 00 00       	call   c001a4af <Krnl::panic(char const*)>
c000f7c8:	b8 00 00 00 00       	mov    eax,0x0
c000f7cd:	83 c4 1c             	add    esp,0x1c
c000f7d0:	c3                   	ret    

c000f7d1 <liballoc_lock()>:
c000f7d1:	83 ec 0c             	sub    esp,0xc
c000f7d4:	e8 d0 e4 00 00       	call   c001dca9 <lockScheduler()>
c000f7d9:	b8 00 00 00 00       	mov    eax,0x0
c000f7de:	83 c4 0c             	add    esp,0xc
c000f7e1:	c3                   	ret    

c000f7e2 <liballoc_unlock()>:
c000f7e2:	83 ec 0c             	sub    esp,0xc
c000f7e5:	e8 c1 e4 00 00       	call   c001dcab <unlockScheduler()>
c000f7ea:	b8 00 00 00 00       	mov    eax,0x0
c000f7ef:	83 c4 0c             	add    esp,0xc
c000f7f2:	c3                   	ret    

c000f7f3 <liballoc_alloc(int)>:
c000f7f3:	83 ec 0c             	sub    esp,0xc
c000f7f6:	e8 23 26 00 00       	call   c0011e1e <Virt::getAKernelVAS()>
c000f7fb:	83 ec 04             	sub    esp,0x4
c000f7fe:	6a 01                	push   0x1
c000f800:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f804:	50                   	push   eax
c000f805:	e8 36 2b 00 00       	call   c0012340 <VAS::allocatePages(int, int)>
c000f80a:	83 c4 1c             	add    esp,0x1c
c000f80d:	c3                   	ret    

c000f80e <liballoc_free(void*, int)>:
c000f80e:	83 ec 0c             	sub    esp,0xc
c000f811:	e8 08 26 00 00       	call   c0011e1e <Virt::getAKernelVAS()>
c000f816:	83 ec 08             	sub    esp,0x8
c000f819:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f81d:	50                   	push   eax
c000f81e:	e8 d9 27 00 00       	call   c0011ffc <VAS::freeAllocatedPages(unsigned long)>
c000f823:	b8 00 00 00 00       	mov    eax,0x0
c000f828:	83 c4 1c             	add    esp,0x1c
c000f82b:	c3                   	ret    

c000f82c <realloc>:
c000f82c:	83 ec 14             	sub    esp,0x14
c000f82f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f833:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f837:	e8 18 1e ff ff       	call   c0001654 <dlrealloc>
c000f83c:	83 c4 1c             	add    esp,0x1c
c000f83f:	c3                   	ret    

c000f840 <malloc>:
c000f840:	83 ec 18             	sub    esp,0x18
c000f843:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f847:	e8 cb 18 ff ff       	call   c0001117 <dlmalloc>
c000f84c:	83 c4 1c             	add    esp,0x1c
c000f84f:	c3                   	ret    

c000f850 <free>:
c000f850:	83 ec 18             	sub    esp,0x18
c000f853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f857:	e8 60 15 ff ff       	call   c0000dbc <dlfree>
c000f85c:	83 c4 1c             	add    esp,0x1c
c000f85f:	c3                   	ret    

c000f860 <rfree>:
c000f860:	83 ec 18             	sub    esp,0x18
c000f863:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f867:	e8 50 15 ff ff       	call   c0000dbc <dlfree>
c000f86c:	83 c4 1c             	add    esp,0x1c
c000f86f:	c3                   	ret    

c000f870 <calloc>:
c000f870:	56                   	push   esi
c000f871:	53                   	push   ebx
c000f872:	83 ec 10             	sub    esp,0x10
c000f875:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f879:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f87e:	53                   	push   ebx
c000f87f:	e8 bc ff ff ff       	call   c000f840 <malloc>
c000f884:	89 c6                	mov    esi,eax
c000f886:	83 c4 0c             	add    esp,0xc
c000f889:	53                   	push   ebx
c000f88a:	6a 00                	push   0x0
c000f88c:	50                   	push   eax
c000f88d:	e8 e6 0e ff ff       	call   c0000778 <memset>
c000f892:	89 f0                	mov    eax,esi
c000f894:	83 c4 14             	add    esp,0x14
c000f897:	5b                   	pop    ebx
c000f898:	5e                   	pop    esi
c000f899:	c3                   	ret    

c000f89a <hwTextMode_loadInData(VgaText*)>:
c000f89a:	55                   	push   ebp
c000f89b:	a1 e0 d1 02 c0       	mov    eax,ds:0xc002d1e0
c000f8a0:	57                   	push   edi
c000f8a1:	56                   	push   esi
c000f8a2:	53                   	push   ebx
c000f8a3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8a7:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f8ad:	85 d2                	test   edx,edx
c000f8af:	7e 2f                	jle    c000f8e0 <hwTextMode_loadInData(VgaText*)+0x46>
c000f8b1:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f8b7:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f8ba:	31 f6                	xor    esi,esi
c000f8bc:	29 fd                	sub    ebp,edi
c000f8be:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8c1:	31 c0                	xor    eax,eax
c000f8c3:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8c7:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8cb:	40                   	inc    eax
c000f8cc:	83 f8 50             	cmp    eax,0x50
c000f8cf:	75 f2                	jne    c000f8c3 <hwTextMode_loadInData(VgaText*)+0x29>
c000f8d1:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8d7:	46                   	inc    esi
c000f8d8:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f8de:	7f de                	jg     c000f8be <hwTextMode_loadInData(VgaText*)+0x24>
c000f8e0:	5b                   	pop    ebx
c000f8e1:	5e                   	pop    esi
c000f8e2:	5f                   	pop    edi
c000f8e3:	5d                   	pop    ebp
c000f8e4:	c3                   	ret    

c000f8e5 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8e5:	55                   	push   ebp
c000f8e6:	80 3d 40 e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e340,0x0
c000f8ed:	57                   	push   edi
c000f8ee:	56                   	push   esi
c000f8ef:	53                   	push   ebx
c000f8f0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8f4:	75 50                	jne    c000f946 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f8f6:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f8fc:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f902:	8b 15 e0 d1 02 c0    	mov    edx,DWORD PTR ds:0xc002d1e0
c000f908:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f90c:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f912:	eb 0e                	jmp    c000f922 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f914:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f91a:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f920:	89 da                	mov    edx,ebx
c000f922:	83 e5 0f             	and    ebp,0xf
c000f925:	c1 e0 04             	shl    eax,0x4
c000f928:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f92b:	0f b6 c0             	movzx  eax,al
c000f92e:	41                   	inc    ecx
c000f92f:	09 e8                	or     eax,ebp
c000f931:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f935:	c1 e0 08             	shl    eax,0x8
c000f938:	09 e8                	or     eax,ebp
c000f93a:	39 fb                	cmp    ebx,edi
c000f93c:	66 89 02             	mov    WORD PTR [edx],ax
c000f93f:	75 d3                	jne    c000f914 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f941:	5b                   	pop    ebx
c000f942:	5e                   	pop    esi
c000f943:	5f                   	pop    edi
c000f944:	5d                   	pop    ebp
c000f945:	c3                   	ret    
c000f946:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f950:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f95a:	31 c0                	xor    eax,eax
c000f95c:	bd 02 00 00 00       	mov    ebp,0x2
c000f961:	eb 9f                	jmp    c000f902 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f963 <hwTextMode_showCursor(VgaText*, bool)>:
c000f963:	56                   	push   esi
c000f964:	80 3d 40 e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e340,0x0
c000f96b:	53                   	push   ebx
c000f96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f970:	75 39                	jne    c000f9ab <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f972:	84 c0                	test   al,al
c000f974:	74 38                	je     c000f9ae <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f976:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f97b:	b0 0a                	mov    al,0xa
c000f97d:	89 da                	mov    edx,ebx
c000f97f:	ee                   	out    dx,al
c000f980:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f985:	89 ca                	mov    edx,ecx
c000f987:	ec                   	in     al,dx
c000f988:	b2 0f                	mov    dl,0xf
c000f98a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f98e:	83 e0 c0             	and    eax,0xffffffc0
c000f991:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f997:	09 d0                	or     eax,edx
c000f999:	89 ca                	mov    edx,ecx
c000f99b:	ee                   	out    dx,al
c000f99c:	b0 0b                	mov    al,0xb
c000f99e:	89 da                	mov    edx,ebx
c000f9a0:	ee                   	out    dx,al
c000f9a1:	89 ca                	mov    edx,ecx
c000f9a3:	ec                   	in     al,dx
c000f9a4:	83 e0 e0             	and    eax,0xffffffe0
c000f9a7:	83 c8 0f             	or     eax,0xf
c000f9aa:	ee                   	out    dx,al
c000f9ab:	5b                   	pop    ebx
c000f9ac:	5e                   	pop    esi
c000f9ad:	c3                   	ret    
c000f9ae:	b0 0a                	mov    al,0xa
c000f9b0:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9b5:	ee                   	out    dx,al
c000f9b6:	b0 20                	mov    al,0x20
c000f9b8:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9bd:	ee                   	out    dx,al
c000f9be:	5b                   	pop    ebx
c000f9bf:	5e                   	pop    esi
c000f9c0:	c3                   	ret    

c000f9c1 <hwTextMode_update(VgaText*)>:
c000f9c1:	c3                   	ret    

c000f9c2 <hwTextMode_updateCursor(VgaText*)>:
c000f9c2:	56                   	push   esi
c000f9c3:	80 3d 40 e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e340,0x0
c000f9ca:	53                   	push   ebx
c000f9cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9cf:	75 3f                	jne    c000fa10 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f9d1:	be d4 03 00 00       	mov    esi,0x3d4
c000f9d6:	b9 19 00 00 00       	mov    ecx,0x19
c000f9db:	89 f2                	mov    edx,esi
c000f9dd:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f9e3:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f9e9:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9ec:	c1 e1 04             	shl    ecx,0x4
c000f9ef:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f9f5:	b0 0f                	mov    al,0xf
c000f9f7:	ee                   	out    dx,al
c000f9f8:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f9fd:	88 c8                	mov    al,cl
c000f9ff:	89 da                	mov    edx,ebx
c000fa01:	ee                   	out    dx,al
c000fa02:	b0 0e                	mov    al,0xe
c000fa04:	89 f2                	mov    edx,esi
c000fa06:	ee                   	out    dx,al
c000fa07:	89 c8                	mov    eax,ecx
c000fa09:	89 da                	mov    edx,ebx
c000fa0b:	66 c1 e8 08          	shr    ax,0x8
c000fa0f:	ee                   	out    dx,al
c000fa10:	5b                   	pop    ebx
c000fa11:	5e                   	pop    esi
c000fa12:	c3                   	ret    

c000fa13 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa17:	80 3d 40 e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e340,0x0
c000fa1e:	75 38                	jne    c000fa58 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa20:	ba da 03 00 00       	mov    edx,0x3da
c000fa25:	84 c0                	test   al,al
c000fa27:	75 18                	jne    c000fa41 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa29:	ec                   	in     al,dx
c000fa2a:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa2f:	b0 30                	mov    al,0x30
c000fa31:	89 ca                	mov    edx,ecx
c000fa33:	ee                   	out    dx,al
c000fa34:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa39:	ec                   	in     al,dx
c000fa3a:	83 c8 08             	or     eax,0x8
c000fa3d:	89 ca                	mov    edx,ecx
c000fa3f:	ee                   	out    dx,al
c000fa40:	c3                   	ret    
c000fa41:	ec                   	in     al,dx
c000fa42:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa47:	b0 30                	mov    al,0x30
c000fa49:	89 ca                	mov    edx,ecx
c000fa4b:	ee                   	out    dx,al
c000fa4c:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa51:	ec                   	in     al,dx
c000fa52:	83 e0 f7             	and    eax,0xfffffff7
c000fa55:	89 ca                	mov    edx,ecx
c000fa57:	ee                   	out    dx,al
c000fa58:	c3                   	ret    

c000fa59 <hwTextMode_scrollScreen(VgaText*)>:
c000fa59:	55                   	push   ebp
c000fa5a:	57                   	push   edi
c000fa5b:	56                   	push   esi
c000fa5c:	53                   	push   ebx
c000fa5d:	83 ec 1c             	sub    esp,0x1c
c000fa60:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa64:	80 3d 40 e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e340,0x0
c000fa6b:	74 14                	je     c000fa81 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fa6d:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fa77:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fa81:	a1 e0 d1 02 c0       	mov    eax,ds:0xc002d1e0
c000fa86:	bd 02 00 00 00       	mov    ebp,0x2
c000fa8b:	05 a0 00 00 00       	add    eax,0xa0
c000fa90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa94:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fa98:	31 c0                	xor    eax,eax
c000fa9a:	eb 0b                	jmp    c000faa7 <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000fa9c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faa2:	74 57                	je     c000fafb <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000faa4:	43                   	inc    ebx
c000faa5:	89 f0                	mov    eax,esi
c000faa7:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000faad:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fab3:	88 13                	mov    BYTE PTR [ebx],dl
c000fab5:	8d 70 01             	lea    esi,[eax+0x1]
c000fab8:	83 fd 18             	cmp    ebp,0x18
c000fabb:	75 df                	jne    c000fa9c <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fabd:	a8 01                	test   al,0x1
c000fabf:	75 13                	jne    c000fad4 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000fac1:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fac4:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faca:	75 d8                	jne    c000faa4 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000facc:	83 c4 1c             	add    esp,0x1c
c000facf:	5b                   	pop    ebx
c000fad0:	5e                   	pop    esi
c000fad1:	5f                   	pop    edi
c000fad2:	5d                   	pop    ebp
c000fad3:	c3                   	ret    
c000fad4:	83 ec 08             	sub    esp,0x8
c000fad7:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fade:	50                   	push   eax
c000fadf:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fae3:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000faea:	50                   	push   eax
c000faeb:	e8 8a 0c 00 00       	call   c001077a <VgaText::combineColours(unsigned char, unsigned char)>
c000faf0:	83 c4 10             	add    esp,0x10
c000faf3:	88 07                	mov    BYTE PTR [edi],al
c000faf5:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000faf9:	eb c9                	jmp    c000fac4 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fafb:	45                   	inc    ebp
c000fafc:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb04:	eb 8e                	jmp    c000fa94 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fb06 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb06:	57                   	push   edi
c000fb07:	80 3d 40 e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e340,0x0
c000fb0e:	56                   	push   esi
c000fb0f:	53                   	push   ebx
c000fb10:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb14:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb18:	75 65                	jne    c000fb7f <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fb1a:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb1f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb24:	83 ec 08             	sub    esp,0x8
c000fb27:	52                   	push   edx
c000fb28:	50                   	push   eax
c000fb29:	e8 4c 0c 00 00       	call   c001077a <VgaText::combineColours(unsigned char, unsigned char)>
c000fb2e:	5a                   	pop    edx
c000fb2f:	0f b6 c0             	movzx  eax,al
c000fb32:	59                   	pop    ecx
c000fb33:	50                   	push   eax
c000fb34:	0f be c3             	movsx  eax,bl
c000fb37:	50                   	push   eax
c000fb38:	e8 e3 0c 00 00       	call   c0010820 <VgaText::combineCharAndColour(char, unsigned char)>
c000fb3d:	83 c4 10             	add    esp,0x10
c000fb40:	8b 35 e0 d1 02 c0    	mov    esi,DWORD PTR ds:0xc002d1e0
c000fb46:	80 3d 40 e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e340,0x0
c000fb4d:	74 07                	je     c000fb56 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb4f:	66 0f be c3          	movsx  ax,bl
c000fb53:	80 cc 02             	or     ah,0x2
c000fb56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb5a:	ba 19 00 00 00       	mov    edx,0x19
c000fb5f:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fb65:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb68:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb6b:	c1 e1 04             	shl    ecx,0x4
c000fb6e:	c1 e2 04             	shl    edx,0x4
c000fb71:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb75:	01 ca                	add    edx,ecx
c000fb77:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb7b:	5b                   	pop    ebx
c000fb7c:	5e                   	pop    esi
c000fb7d:	5f                   	pop    edi
c000fb7e:	c3                   	ret    
c000fb7f:	b8 02 00 00 00       	mov    eax,0x2
c000fb84:	31 d2                	xor    edx,edx
c000fb86:	eb 9c                	jmp    c000fb24 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb88 <setupTextMode()>:
c000fb88:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb8d:	83 e0 30             	and    eax,0x30
c000fb90:	66 83 f8 30          	cmp    ax,0x30
c000fb94:	75 11                	jne    c000fba7 <setupTextMode()+0x1f>
c000fb96:	81 2d e0 d1 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002d1e0,0x8000
c000fba0:	c6 05 40 e3 02 c0 01 	mov    BYTE PTR ds:0xc002e340,0x1
c000fba7:	c7 05 78 e3 02 c0 13 fa 00 c0 	mov    DWORD PTR ds:0xc002e378,0xc000fa13
c000fbb1:	c7 05 64 e3 02 c0 9a f8 00 c0 	mov    DWORD PTR ds:0xc002e364,0xc000f89a
c000fbbb:	c7 05 60 e3 02 c0 e5 f8 00 c0 	mov    DWORD PTR ds:0xc002e360,0xc000f8e5
c000fbc5:	c7 05 6c e3 02 c0 59 fa 00 c0 	mov    DWORD PTR ds:0xc002e36c,0xc000fa59
c000fbcf:	c7 05 74 e3 02 c0 63 f9 00 c0 	mov    DWORD PTR ds:0xc002e374,0xc000f963
c000fbd9:	c7 05 68 e3 02 c0 c1 f9 00 c0 	mov    DWORD PTR ds:0xc002e368,0xc000f9c1
c000fbe3:	c7 05 70 e3 02 c0 c2 f9 00 c0 	mov    DWORD PTR ds:0xc002e370,0xc000f9c2
c000fbed:	c7 05 7c e3 02 c0 06 fb 00 c0 	mov    DWORD PTR ds:0xc002e37c,0xc000fb06
c000fbf7:	c3                   	ret    

c000fbf8 <kernel_main>:
c000fbf8:	57                   	push   edi
c000fbf9:	bf f9 03 00 00       	mov    edi,0x3f9
c000fbfe:	56                   	push   esi
c000fbff:	31 f6                	xor    esi,esi
c000fc01:	53                   	push   ebx
c000fc02:	83 ec 20             	sub    esp,0x20
c000fc05:	e8 ca 09 00 00       	call   c00105d4 <installVgaTextImplementation()>
c000fc0a:	e8 79 ff ff ff       	call   c000fb88 <setupTextMode()>
c000fc0f:	89 f0                	mov    eax,esi
c000fc11:	89 fa                	mov    edx,edi
c000fc13:	ee                   	out    dx,al
c000fc14:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc19:	b0 80                	mov    al,0x80
c000fc1b:	89 da                	mov    edx,ebx
c000fc1d:	ee                   	out    dx,al
c000fc1e:	b1 03                	mov    cl,0x3
c000fc20:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc25:	88 c8                	mov    al,cl
c000fc27:	ee                   	out    dx,al
c000fc28:	89 f0                	mov    eax,esi
c000fc2a:	89 fa                	mov    edx,edi
c000fc2c:	ee                   	out    dx,al
c000fc2d:	88 c8                	mov    al,cl
c000fc2f:	89 da                	mov    edx,ebx
c000fc31:	ee                   	out    dx,al
c000fc32:	b0 c7                	mov    al,0xc7
c000fc34:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc39:	ee                   	out    dx,al
c000fc3a:	b0 0b                	mov    al,0xb
c000fc3c:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc41:	ee                   	out    dx,al
c000fc42:	83 ec 0c             	sub    esp,0xc
c000fc45:	68 24 a1 02 c0       	push   0xc002a124
c000fc4a:	e8 85 31 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000fc4f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc54:	05 ff 0f 00 00       	add    eax,0xfff
c000fc59:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc5e:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc61:	e8 2a 04 00 00       	call   c0010090 <Phys::physicalMemorySetup(unsigned int)>
c000fc66:	e8 cb 20 00 00       	call   c0011d36 <Virt::virtualMemorySetup()>
c000fc6b:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc71:	83 c4 10             	add    esp,0x10
c000fc74:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc7a:	75 0e                	jne    c000fc8a <kernel_main+0x92>
c000fc7c:	89 d8                	mov    eax,ebx
c000fc7e:	25 48 03 00 00       	and    eax,0x348
c000fc83:	3d 00 03 00 00       	cmp    eax,0x300
c000fc88:	74 10                	je     c000fc9a <kernel_main+0xa2>
c000fc8a:	83 ec 0c             	sub    esp,0xc
c000fc8d:	68 91 b9 02 c0       	push   0xc002b991
c000fc92:	e8 18 a8 00 00       	call   c001a4af <Krnl::panic(char const*)>
c000fc97:	83 c4 10             	add    esp,0x10
c000fc9a:	83 ec 0c             	sub    esp,0xc
c000fc9d:	89 1d c0 e2 02 c0    	mov    DWORD PTR ds:0xc002e2c0,ebx
c000fca3:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fca7:	53                   	push   ebx
c000fca8:	e8 77 21 00 00       	call   c0011e24 <VAS::VAS()>
c000fcad:	89 1d 2c e4 02 c0    	mov    DWORD PTR ds:0xc002e42c,ebx
c000fcb3:	e8 68 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcb8:	c7 04 24 3b a1 02 c0 	mov    DWORD PTR [esp],0xc002a13b
c000fcbf:	e8 10 31 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000fcc4:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fccb:	e8 70 fb ff ff       	call   c000f840 <malloc>
c000fcd0:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcd3:	89 c6                	mov    esi,eax
c000fcd5:	e8 60 ea ff ff       	call   c000e73a <Computer::Computer()>
c000fcda:	58                   	pop    eax
c000fcdb:	89 35 a8 e2 02 c0    	mov    DWORD PTR ds:0xc002e2a8,esi
c000fce1:	5a                   	pop    edx
c000fce2:	56                   	push   esi
c000fce3:	68 58 a1 02 c0       	push   0xc002a158
c000fce8:	e8 e7 30 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000fced:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c000fcf2:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcf4:	6a 00                	push   0x0
c000fcf6:	6a 00                	push   0x0
c000fcf8:	6a 00                	push   0x0
c000fcfa:	50                   	push   eax
c000fcfb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fcfe:	83 c4 14             	add    esp,0x14
c000fd01:	53                   	push   ebx
c000fd02:	e8 cd 23 00 00       	call   c00120d4 <VAS::~VAS()>
c000fd07:	c7 04 24 6b a1 02 c0 	mov    DWORD PTR [esp],0xc002a16b
c000fd0e:	e8 9c a7 00 00       	call   c001a4af <Krnl::panic(char const*)>
c000fd13:	83 c4 30             	add    esp,0x30
c000fd16:	5b                   	pop    ebx
c000fd17:	5e                   	pop    esi
c000fd18:	5f                   	pop    edi
c000fd19:	c3                   	ret    

c000fd1a <Phys::allocateDMA(unsigned long)>:
c000fd1a:	55                   	push   ebp
c000fd1b:	31 d2                	xor    edx,edx
c000fd1d:	57                   	push   edi
c000fd1e:	31 ed                	xor    ebp,ebp
c000fd20:	56                   	push   esi
c000fd21:	31 c9                	xor    ecx,ecx
c000fd23:	53                   	push   ebx
c000fd24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd28:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd2e:	31 c0                	xor    eax,eax
c000fd30:	c1 ee 0c             	shr    esi,0xc
c000fd33:	eb 17                	jmp    c000fd4c <Phys::allocateDMA(unsigned long)+0x32>
c000fd35:	85 c9                	test   ecx,ecx
c000fd37:	75 04                	jne    c000fd3d <Phys::allocateDMA(unsigned long)+0x23>
c000fd39:	89 d5                	mov    ebp,edx
c000fd3b:	89 d0                	mov    eax,edx
c000fd3d:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd40:	39 de                	cmp    esi,ebx
c000fd42:	74 20                	je     c000fd64 <Phys::allocateDMA(unsigned long)+0x4a>
c000fd44:	42                   	inc    edx
c000fd45:	89 d9                	mov    ecx,ebx
c000fd47:	83 fa 2f             	cmp    edx,0x2f
c000fd4a:	7f 11                	jg     c000fd5d <Phys::allocateDMA(unsigned long)+0x43>
c000fd4c:	80 ba 00 e3 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1d00],0x0
c000fd53:	74 e0                	je     c000fd35 <Phys::allocateDMA(unsigned long)+0x1b>
c000fd55:	31 c9                	xor    ecx,ecx
c000fd57:	42                   	inc    edx
c000fd58:	83 fa 2f             	cmp    edx,0x2f
c000fd5b:	7e ef                	jle    c000fd4c <Phys::allocateDMA(unsigned long)+0x32>
c000fd5d:	5b                   	pop    ebx
c000fd5e:	31 c0                	xor    eax,eax
c000fd60:	5e                   	pop    esi
c000fd61:	5f                   	pop    edi
c000fd62:	5d                   	pop    ebp
c000fd63:	c3                   	ret    
c000fd64:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd67:	89 d7                	mov    edi,edx
c000fd69:	4f                   	dec    edi
c000fd6a:	79 03                	jns    c000fd6f <Phys::allocateDMA(unsigned long)+0x55>
c000fd6c:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd6f:	c1 ff 04             	sar    edi,0x4
c000fd72:	89 c2                	mov    edx,eax
c000fd74:	c1 fa 04             	sar    edx,0x4
c000fd77:	39 fa                	cmp    edx,edi
c000fd79:	75 2f                	jne    c000fdaa <Phys::allocateDMA(unsigned long)+0x90>
c000fd7b:	85 db                	test   ebx,ebx
c000fd7d:	74 1a                	je     c000fd99 <Phys::allocateDMA(unsigned long)+0x7f>
c000fd7f:	be 00 e3 02 c0       	mov    esi,0xc002e300
c000fd84:	8d 90 00 e3 02 c0    	lea    edx,[eax-0x3ffd1d00]
c000fd8a:	f7 d6                	not    esi
c000fd8c:	29 c6                	sub    esi,eax
c000fd8e:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd91:	42                   	inc    edx
c000fd92:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd95:	39 d9                	cmp    ecx,ebx
c000fd97:	7f f5                	jg     c000fd8e <Phys::allocateDMA(unsigned long)+0x74>
c000fd99:	85 ff                	test   edi,edi
c000fd9b:	74 13                	je     c000fdb0 <Phys::allocateDMA(unsigned long)+0x96>
c000fd9d:	5b                   	pop    ebx
c000fd9e:	05 50 20 0c 00       	add    eax,0xc2050
c000fda3:	5e                   	pop    esi
c000fda4:	c1 e0 0c             	shl    eax,0xc
c000fda7:	5f                   	pop    edi
c000fda8:	5d                   	pop    ebp
c000fda9:	c3                   	ret    
c000fdaa:	89 ea                	mov    edx,ebp
c000fdac:	31 c9                	xor    ecx,ecx
c000fdae:	eb a7                	jmp    c000fd57 <Phys::allocateDMA(unsigned long)+0x3d>
c000fdb0:	5b                   	pop    ebx
c000fdb1:	c1 e0 0c             	shl    eax,0xc
c000fdb4:	5e                   	pop    esi
c000fdb5:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdba:	5f                   	pop    edi
c000fdbb:	5d                   	pop    ebp
c000fdbc:	c3                   	ret    

c000fdbd <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdbd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdc5:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fdcb:	c1 e9 0c             	shr    ecx,0xc
c000fdce:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fdd3:	76 25                	jbe    c000fdfa <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fdd5:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fdda:	c1 e8 0c             	shr    eax,0xc
c000fddd:	8d 50 10             	lea    edx,[eax+0x10]
c000fde0:	85 c9                	test   ecx,ecx
c000fde2:	74 15                	je     c000fdf9 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fde4:	8d 82 00 e3 02 c0    	lea    eax,[edx-0x3ffd1d00]
c000fdea:	8d 94 11 00 e3 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1d00]
c000fdf1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdf4:	40                   	inc    eax
c000fdf5:	39 d0                	cmp    eax,edx
c000fdf7:	75 f8                	jne    c000fdf1 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fdf9:	c3                   	ret    
c000fdfa:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe00:	c1 ea 0c             	shr    edx,0xc
c000fe03:	eb db                	jmp    c000fde0 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe05 <Phys::setPageState(unsigned long, bool)>:
c000fe05:	56                   	push   esi
c000fe06:	ba 01 00 00 00       	mov    edx,0x1
c000fe0b:	53                   	push   ebx
c000fe0c:	8b 35 dc d1 02 c0    	mov    esi,DWORD PTR ds:0xc002d1dc
c000fe12:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe16:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe1a:	89 c8                	mov    eax,ecx
c000fe1c:	83 e1 07             	and    ecx,0x7
c000fe1f:	c1 e8 03             	shr    eax,0x3
c000fe22:	d3 e3                	shl    ebx,cl
c000fe24:	01 c6                	add    esi,eax
c000fe26:	d3 e2                	shl    edx,cl
c000fe28:	f7 d2                	not    edx
c000fe2a:	20 16                	and    BYTE PTR [esi],dl
c000fe2c:	03 05 dc d1 02 c0    	add    eax,DWORD PTR ds:0xc002d1dc
c000fe32:	08 18                	or     BYTE PTR [eax],bl
c000fe34:	5b                   	pop    ebx
c000fe35:	5e                   	pop    esi
c000fe36:	c3                   	ret    

c000fe37 <Phys::getPageState(unsigned long)>:
c000fe37:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe3b:	8b 15 dc d1 02 c0    	mov    edx,DWORD PTR ds:0xc002d1dc
c000fe41:	89 c8                	mov    eax,ecx
c000fe43:	83 e1 07             	and    ecx,0x7
c000fe46:	c1 e8 03             	shr    eax,0x3
c000fe49:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe4d:	d3 f8                	sar    eax,cl
c000fe4f:	83 e0 01             	and    eax,0x1
c000fe52:	c3                   	ret    

c000fe53 <Phys::freePage(unsigned long)>:
c000fe53:	53                   	push   ebx
c000fe54:	83 ec 08             	sub    esp,0x8
c000fe57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe5b:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe61:	76 57                	jbe    c000feba <Phys::freePage(unsigned long)+0x67>
c000fe63:	c1 eb 0c             	shr    ebx,0xc
c000fe66:	53                   	push   ebx
c000fe67:	e8 cb ff ff ff       	call   c000fe37 <Phys::getPageState(unsigned long)>
c000fe6c:	5a                   	pop    edx
c000fe6d:	84 c0                	test   al,al
c000fe6f:	74 5b                	je     c000fecc <Phys::freePage(unsigned long)+0x79>
c000fe71:	a1 f0 e2 02 c0       	mov    eax,ds:0xc002e2f0
c000fe76:	48                   	dec    eax
c000fe77:	a3 f0 e2 02 c0       	mov    ds:0xc002e2f0,eax
c000fe7c:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe7f:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe82:	c1 e0 02             	shl    eax,0x2
c000fe85:	99                   	cdq    
c000fe86:	f7 3d f4 e2 02 c0    	idiv   DWORD PTR ds:0xc002e2f4
c000fe8c:	39 05 ec e2 02 c0    	cmp    DWORD PTR ds:0xc002e2ec,eax
c000fe92:	75 13                	jne    c000fea7 <Phys::freePage(unsigned long)+0x54>
c000fe94:	83 ec 08             	sub    esp,0x8
c000fe97:	6a 00                	push   0x0
c000fe99:	53                   	push   ebx
c000fe9a:	e8 66 ff ff ff       	call   c000fe05 <Phys::setPageState(unsigned long, bool)>
c000fe9f:	83 c4 10             	add    esp,0x10
c000fea2:	83 c4 08             	add    esp,0x8
c000fea5:	5b                   	pop    ebx
c000fea6:	c3                   	ret    
c000fea7:	83 ec 0c             	sub    esp,0xc
c000feaa:	a3 ec e2 02 c0       	mov    ds:0xc002e2ec,eax
c000feaf:	50                   	push   eax
c000feb0:	e8 b3 0a 00 00       	call   c0010968 <VgaText::updateRAMUsageDisplay(int)>
c000feb5:	83 c4 10             	add    esp,0x10
c000feb8:	eb da                	jmp    c000fe94 <Phys::freePage(unsigned long)+0x41>
c000feba:	68 00 10 00 00       	push   0x1000
c000febf:	53                   	push   ebx
c000fec0:	e8 f8 fe ff ff       	call   c000fdbd <Phys::freeDMA(unsigned long, unsigned long)>
c000fec5:	59                   	pop    ecx
c000fec6:	5b                   	pop    ebx
c000fec7:	83 c4 08             	add    esp,0x8
c000feca:	5b                   	pop    ebx
c000fecb:	c3                   	ret    
c000fecc:	c7 44 24 10 86 a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a186
c000fed4:	83 c4 08             	add    esp,0x8
c000fed7:	5b                   	pop    ebx
c000fed8:	e9 d2 a5 00 00       	jmp    c001a4af <Krnl::panic(char const*)>

c000fedd <Phys::allocatePage()>:
c000fedd:	56                   	push   esi
c000fede:	53                   	push   ebx
c000fedf:	83 ec 14             	sub    esp,0x14
c000fee2:	8b 35 e4 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e2e4
c000fee8:	89 f3                	mov    ebx,esi
c000feea:	eb 0a                	jmp    c000fef6 <Phys::allocatePage()+0x19>
c000feec:	89 1d e4 e2 02 c0    	mov    DWORD PTR ds:0xc002e2e4,ebx
c000fef2:	39 de                	cmp    esi,ebx
c000fef4:	74 24                	je     c000ff1a <Phys::allocatePage()+0x3d>
c000fef6:	53                   	push   ebx
c000fef7:	e8 3b ff ff ff       	call   c000fe37 <Phys::getPageState(unsigned long)>
c000fefc:	5a                   	pop    edx
c000fefd:	84 c0                	test   al,al
c000feff:	74 7b                	je     c000ff7c <Phys::allocatePage()+0x9f>
c000ff01:	43                   	inc    ebx
c000ff02:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff08:	75 e2                	jne    c000feec <Phys::allocatePage()+0xf>
c000ff0a:	31 db                	xor    ebx,ebx
c000ff0c:	c7 05 e4 e2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e2e4,0x0
c000ff16:	39 de                	cmp    esi,ebx
c000ff18:	75 dc                	jne    c000fef6 <Phys::allocatePage()+0x19>
c000ff1a:	83 ec 0c             	sub    esp,0xc
c000ff1d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff22:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ff25:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c000ff2b:	e8 a0 2b 00 00       	call   c0012ad0 <VAS::scanForEviction()>
c000ff30:	83 c4 10             	add    esp,0x10
c000ff33:	85 c0                	test   eax,eax
c000ff35:	0f 85 a8 00 00 00    	jne    c000ffe3 <Phys::allocatePage()+0x106>
c000ff3b:	83 ec 0c             	sub    esp,0xc
c000ff3e:	68 ba a1 02 c0       	push   0xc002a1ba
c000ff43:	e8 8c 2e 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000ff48:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff4f:	e8 c6 fd ff ff       	call   c000fd1a <Phys::allocateDMA(unsigned long)>
c000ff54:	83 c4 10             	add    esp,0x10
c000ff57:	85 c0                	test   eax,eax
c000ff59:	75 6f                	jne    c000ffca <Phys::allocatePage()+0xed>
c000ff5b:	83 ec 0c             	sub    esp,0xc
c000ff5e:	68 cb a1 02 c0       	push   0xc002a1cb
c000ff63:	e8 47 a5 00 00       	call   c001a4af <Krnl::panic(char const*)>
c000ff68:	83 c4 10             	add    esp,0x10
c000ff6b:	8b 1d e4 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e2e4
c000ff71:	53                   	push   ebx
c000ff72:	e8 c0 fe ff ff       	call   c000fe37 <Phys::getPageState(unsigned long)>
c000ff77:	5a                   	pop    edx
c000ff78:	84 c0                	test   al,al
c000ff7a:	75 85                	jne    c000ff01 <Phys::allocatePage()+0x24>
c000ff7c:	6a 01                	push   0x1
c000ff7e:	53                   	push   ebx
c000ff7f:	e8 81 fe ff ff       	call   c000fe05 <Phys::setPageState(unsigned long, bool)>
c000ff84:	a1 f0 e2 02 c0       	mov    eax,ds:0xc002e2f0
c000ff89:	40                   	inc    eax
c000ff8a:	a3 f0 e2 02 c0       	mov    ds:0xc002e2f0,eax
c000ff8f:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff92:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff95:	c1 e0 02             	shl    eax,0x2
c000ff98:	99                   	cdq    
c000ff99:	f7 3d f4 e2 02 c0    	idiv   DWORD PTR ds:0xc002e2f4
c000ff9f:	5a                   	pop    edx
c000ffa0:	39 05 ec e2 02 c0    	cmp    DWORD PTR ds:0xc002e2ec,eax
c000ffa6:	59                   	pop    ecx
c000ffa7:	75 27                	jne    c000ffd0 <Phys::allocatePage()+0xf3>
c000ffa9:	83 ec 08             	sub    esp,0x8
c000ffac:	a1 e4 e2 02 c0       	mov    eax,ds:0xc002e2e4
c000ffb1:	c1 e0 0c             	shl    eax,0xc
c000ffb4:	50                   	push   eax
c000ffb5:	68 9c a1 02 c0       	push   0xc002a19c
c000ffba:	e8 15 2e 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000ffbf:	a1 e4 e2 02 c0       	mov    eax,ds:0xc002e2e4
c000ffc4:	83 c4 10             	add    esp,0x10
c000ffc7:	c1 e0 0c             	shl    eax,0xc
c000ffca:	83 c4 14             	add    esp,0x14
c000ffcd:	5b                   	pop    ebx
c000ffce:	5e                   	pop    esi
c000ffcf:	c3                   	ret    
c000ffd0:	83 ec 0c             	sub    esp,0xc
c000ffd3:	a3 ec e2 02 c0       	mov    ds:0xc002e2ec,eax
c000ffd8:	50                   	push   eax
c000ffd9:	e8 8a 09 00 00       	call   c0010968 <VgaText::updateRAMUsageDisplay(int)>
c000ffde:	83 c4 10             	add    esp,0x10
c000ffe1:	eb c6                	jmp    c000ffa9 <Phys::allocatePage()+0xcc>
c000ffe3:	83 ec 08             	sub    esp,0x8
c000ffe6:	50                   	push   eax
c000ffe7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ffeb:	68 ab a1 02 c0       	push   0xc002a1ab
c000fff0:	e8 df 2d 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000fff5:	83 c4 10             	add    esp,0x10
c000fff8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fffc:	eb cc                	jmp    c000ffca <Phys::allocatePage()+0xed>

c000fffe <Phys::allocateContiguousPages(int)>:
c000fffe:	57                   	push   edi
c000ffff:	56                   	push   esi
c0010000:	53                   	push   ebx
c0010001:	31 db                	xor    ebx,ebx
c0010003:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0010007:	e8 9d dc 00 00       	call   c001dca9 <lockScheduler()>
c001000c:	85 db                	test   ebx,ebx
c001000e:	75 11                	jne    c0010021 <Phys::allocateContiguousPages(int)+0x23>
c0010010:	e8 c8 fe ff ff       	call   c000fedd <Phys::allocatePage()>
c0010015:	83 ff 01             	cmp    edi,0x1
c0010018:	89 c6                	mov    esi,eax
c001001a:	74 21                	je     c001003d <Phys::allocateContiguousPages(int)+0x3f>
c001001c:	bb 01 00 00 00       	mov    ebx,0x1
c0010021:	e8 b7 fe ff ff       	call   c000fedd <Phys::allocatePage()>
c0010026:	89 da                	mov    edx,ebx
c0010028:	c1 e2 0c             	shl    edx,0xc
c001002b:	01 f2                	add    edx,esi
c001002d:	39 c2                	cmp    edx,eax
c001002f:	74 17                	je     c0010048 <Phys::allocateContiguousPages(int)+0x4a>
c0010031:	bb 01 00 00 00       	mov    ebx,0x1
c0010036:	89 c6                	mov    esi,eax
c0010038:	83 ff 01             	cmp    edi,0x1
c001003b:	75 e4                	jne    c0010021 <Phys::allocateContiguousPages(int)+0x23>
c001003d:	e8 69 dc 00 00       	call   c001dcab <unlockScheduler()>
c0010042:	89 f0                	mov    eax,esi
c0010044:	5b                   	pop    ebx
c0010045:	5e                   	pop    esi
c0010046:	5f                   	pop    edi
c0010047:	c3                   	ret    
c0010048:	43                   	inc    ebx
c0010049:	39 fb                	cmp    ebx,edi
c001004b:	75 bf                	jne    c001000c <Phys::allocateContiguousPages(int)+0xe>
c001004d:	e8 59 dc 00 00       	call   c001dcab <unlockScheduler()>
c0010052:	89 f0                	mov    eax,esi
c0010054:	5b                   	pop    ebx
c0010055:	5e                   	pop    esi
c0010056:	5f                   	pop    edi
c0010057:	c3                   	ret    

c0010058 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0010058:	56                   	push   esi
c0010059:	53                   	push   ebx
c001005a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001005e:	39 1d e8 e2 02 c0    	cmp    DWORD PTR ds:0xc002e2e8,ebx
c0010064:	73 06                	jae    c001006c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010066:	89 1d e8 e2 02 c0    	mov    DWORD PTR ds:0xc002e2e8,ebx
c001006c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010070:	c1 eb 0c             	shr    ebx,0xc
c0010073:	c1 e8 0c             	shr    eax,0xc
c0010076:	39 d8                	cmp    eax,ebx
c0010078:	73 13                	jae    c001008d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c001007a:	6a 00                	push   0x0
c001007c:	8d 70 01             	lea    esi,[eax+0x1]
c001007f:	50                   	push   eax
c0010080:	e8 80 fd ff ff       	call   c000fe05 <Phys::setPageState(unsigned long, bool)>
c0010085:	5a                   	pop    edx
c0010086:	89 f0                	mov    eax,esi
c0010088:	59                   	pop    ecx
c0010089:	39 f3                	cmp    ebx,esi
c001008b:	75 ed                	jne    c001007a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c001008d:	5b                   	pop    ebx
c001008e:	5e                   	pop    esi
c001008f:	c3                   	ret    

c0010090 <Phys::physicalMemorySetup(unsigned int)>:
c0010090:	55                   	push   ebp
c0010091:	57                   	push   edi
c0010092:	56                   	push   esi
c0010093:	53                   	push   ebx
c0010094:	31 db                	xor    ebx,ebx
c0010096:	83 ec 40             	sub    esp,0x40
c0010099:	6a 30                	push   0x30
c001009b:	6a 00                	push   0x0
c001009d:	68 00 e3 02 c0       	push   0xc002e300
c00100a2:	e8 d1 06 ff ff       	call   c0000778 <memset>
c00100a7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00100ab:	25 00 f0 ff ff       	and    eax,0xfffff000
c00100b0:	05 00 10 00 00       	add    eax,0x1000
c00100b5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00100b9:	83 c4 10             	add    esp,0x10
c00100bc:	83 ec 08             	sub    esp,0x8
c00100bf:	6a 01                	push   0x1
c00100c1:	53                   	push   ebx
c00100c2:	43                   	inc    ebx
c00100c3:	e8 3d fd ff ff       	call   c000fe05 <Phys::setPageState(unsigned long, bool)>
c00100c8:	83 c4 10             	add    esp,0x10
c00100cb:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00100d1:	75 e9                	jne    c00100bc <Phys::physicalMemorySetup(unsigned int)+0x2c>
c00100d3:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c00100da:	66 85 c0             	test   ax,ax
c00100dd:	0f 84 8e 01 00 00    	je     c0010271 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c00100e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00100e7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00100ef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00100f3:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00100f8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00100fc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0010104:	eb 15                	jmp    c001011b <Phys::physicalMemorySetup(unsigned int)+0x8b>
c0010106:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001010a:	83 c3 18             	add    ebx,0x18
c001010d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010111:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010115:	0f 84 66 01 00 00    	je     c0010281 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c001011b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001011e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010121:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0010124:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010128:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001012c:	8b 33                	mov    esi,DWORD PTR [ebx]
c001012e:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0010131:	01 f0                	add    eax,esi
c0010133:	55                   	push   ebp
c0010134:	11 fa                	adc    edx,edi
c0010136:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001013a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001013e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010142:	56                   	push   esi
c0010143:	68 04 a2 02 c0       	push   0xc002a204
c0010148:	e8 87 2c 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001014d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010151:	83 c4 10             	add    esp,0x10
c0010154:	09 f8                	or     eax,edi
c0010156:	0f 85 25 01 00 00    	jne    c0010281 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c001015c:	4d                   	dec    ebp
c001015d:	75 a7                	jne    c0010106 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001015f:	ba 00 00 08 00       	mov    edx,0x80000
c0010164:	89 c1                	mov    ecx,eax
c0010166:	39 f2                	cmp    edx,esi
c0010168:	19 f9                	sbb    ecx,edi
c001016a:	0f 82 a7 00 00 00    	jb     c0010217 <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010170:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010174:	89 c1                	mov    ecx,eax
c0010176:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c001017a:	0f 83 97 00 00 00    	jae    c0010217 <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010180:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010185:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010189:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001018d:	39 fa                	cmp    edx,edi
c001018f:	19 e8                	sbb    eax,ebp
c0010191:	0f 82 14 01 00 00    	jb     c00102ab <Phys::physicalMemorySetup(unsigned int)+0x21b>
c0010197:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001019b:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001019f:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00101a5:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101aa:	83 d5 ff             	adc    ebp,0xffffffff
c00101ad:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00101b1:	31 c0                	xor    eax,eax
c00101b3:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00101b7:	39 fa                	cmp    edx,edi
c00101b9:	89 c1                	mov    ecx,eax
c00101bb:	19 e9                	sbb    ecx,ebp
c00101bd:	0f 83 43 ff ff ff    	jae    c0010106 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101c3:	be 00 00 08 00       	mov    esi,0x80000
c00101c8:	50                   	push   eax
c00101c9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00101cd:	57                   	push   edi
c00101ce:	56                   	push   esi
c00101cf:	68 28 a2 02 c0       	push   0xc002a228
c00101d4:	e8 fb 2b 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c00101d9:	5a                   	pop    edx
c00101da:	59                   	pop    ecx
c00101db:	57                   	push   edi
c00101dc:	56                   	push   esi
c00101dd:	e8 76 fe ff ff       	call   c0010058 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00101e2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00101e6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00101ea:	83 c4 0c             	add    esp,0xc
c00101ed:	0f ac d0 0c          	shrd   eax,edx,0xc
c00101f1:	03 05 f4 e2 02 c0    	add    eax,DWORD PTR ds:0xc002e2f4
c00101f7:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00101fe:	a3 f4 e2 02 c0       	mov    ds:0xc002e2f4,eax
c0010203:	52                   	push   edx
c0010204:	50                   	push   eax
c0010205:	68 e7 a1 02 c0       	push   0xc002a1e7
c001020a:	e8 c5 2b 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001020f:	83 c4 10             	add    esp,0x10
c0010212:	e9 ef fe ff ff       	jmp    c0010106 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010217:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001021b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001021f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010223:	39 ea                	cmp    edx,ebp
c0010225:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0010229:	0f 82 d7 fe ff ff    	jb     c0010106 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001022f:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010234:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0010238:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c001023c:	0f 83 c4 fe ff ff    	jae    c0010106 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010242:	39 ee                	cmp    esi,ebp
c0010244:	89 f8                	mov    eax,edi
c0010246:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c001024a:	0f 83 78 ff ff ff    	jae    c00101c8 <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010250:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010254:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010258:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001025c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010260:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010264:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010268:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001026c:	e9 57 ff ff ff       	jmp    c00101c8 <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010271:	83 ec 0c             	sub    esp,0xc
c0010274:	68 d9 a1 02 c0       	push   0xc002a1d9
c0010279:	e8 31 a2 00 00       	call   c001a4af <Krnl::panic(char const*)>
c001027e:	83 c4 10             	add    esp,0x10
c0010281:	bb 40 01 00 00       	mov    ebx,0x140
c0010286:	83 ec 08             	sub    esp,0x8
c0010289:	6a 00                	push   0x0
c001028b:	53                   	push   ebx
c001028c:	43                   	inc    ebx
c001028d:	e8 73 fb ff ff       	call   c000fe05 <Phys::setPageState(unsigned long, bool)>
c0010292:	ff 05 f4 e2 02 c0    	inc    DWORD PTR ds:0xc002e2f4
c0010298:	83 c4 10             	add    esp,0x10
c001029b:	81 fb 80 01 00 00    	cmp    ebx,0x180
c00102a1:	75 e3                	jne    c0010286 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c00102a3:	83 c4 3c             	add    esp,0x3c
c00102a6:	5b                   	pop    ebx
c00102a7:	5e                   	pop    esi
c00102a8:	5f                   	pop    edi
c00102a9:	5d                   	pop    ebp
c00102aa:	c3                   	ret    
c00102ab:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c00102b3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00102bb:	e9 d7 fe ff ff       	jmp    c0010197 <Phys::physicalMemorySetup(unsigned int)+0x107>

c00102c0 <Pipe::isAtty()>:
c00102c0:	31 c0                	xor    eax,eax
c00102c2:	c3                   	ret    
c00102c3:	90                   	nop

c00102c4 <Pipe::~Pipe()>:
c00102c4:	83 ec 0c             	sub    esp,0xc
c00102c7:	ba 94 a2 02 c0       	mov    edx,0xc002a294
c00102cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102d0:	89 10                	mov    DWORD PTR [eax],edx
c00102d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102d6:	83 ec 0c             	sub    esp,0xc
c00102d9:	50                   	push   eax
c00102da:	e8 37 16 00 00       	call   c0011916 <UnixFile::~UnixFile()>
c00102df:	83 c4 10             	add    esp,0x10
c00102e2:	90                   	nop
c00102e3:	83 c4 0c             	add    esp,0xc
c00102e6:	c3                   	ret    
c00102e7:	90                   	nop

c00102e8 <Pipe::~Pipe()>:
c00102e8:	83 ec 0c             	sub    esp,0xc
c00102eb:	83 ec 0c             	sub    esp,0xc
c00102ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102f2:	e8 cd ff ff ff       	call   c00102c4 <Pipe::~Pipe()>
c00102f7:	83 c4 10             	add    esp,0x10
c00102fa:	83 ec 08             	sub    esp,0x8
c00102fd:	6a 20                	push   0x20
c00102ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010303:	e8 ec 29 00 00       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0010308:	83 c4 10             	add    esp,0x10
c001030b:	83 c4 0c             	add    esp,0xc
c001030e:	c3                   	ret    
c001030f:	90                   	nop

c0010310 <Pipe::read(unsigned long long, void*, int*)>:
c0010310:	55                   	push   ebp
c0010311:	57                   	push   edi
c0010312:	56                   	push   esi
c0010313:	53                   	push   ebx
c0010314:	83 ec 1c             	sub    esp,0x1c
c0010317:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001031b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001031f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010323:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010326:	89 c8                	mov    eax,ecx
c0010328:	99                   	cdq    
c0010329:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c001032d:	74 19                	je     c0010348 <Pipe::read(unsigned long long, void*, int*)+0x38>
c001032f:	39 f9                	cmp    ecx,edi
c0010331:	89 d1                	mov    ecx,edx
c0010333:	19 f1                	sbb    ecx,esi
c0010335:	73 11                	jae    c0010348 <Pipe::read(unsigned long long, void*, int*)+0x38>
c0010337:	e8 6d d9 00 00       	call   c001dca9 <lockScheduler()>
c001033c:	e8 a3 dc 00 00       	call   c001dfe4 <schedule()>
c0010341:	e8 65 d9 00 00       	call   c001dcab <unlockScheduler()>
c0010346:	eb db                	jmp    c0010323 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010348:	39 f8                	cmp    eax,edi
c001034a:	89 d1                	mov    ecx,edx
c001034c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010350:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0010354:	19 f1                	sbb    ecx,esi
c0010356:	73 08                	jae    c0010360 <Pipe::read(unsigned long long, void*, int*)+0x50>
c0010358:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001035c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010360:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010363:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010366:	29 c6                	sub    esi,eax
c0010368:	89 f1                	mov    ecx,esi
c001036a:	c1 f9 1f             	sar    ecx,0x1f
c001036d:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0010371:	89 ca                	mov    edx,ecx
c0010373:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010377:	19 d1                	sbb    ecx,edx
c0010379:	73 04                	jae    c001037f <Pipe::read(unsigned long long, void*, int*)+0x6f>
c001037b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001037f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010383:	89 fd                	mov    ebp,edi
c0010385:	29 f5                	sub    ebp,esi
c0010387:	85 f6                	test   esi,esi
c0010389:	74 12                	je     c001039d <Pipe::read(unsigned long long, void*, int*)+0x8d>
c001038b:	52                   	push   edx
c001038c:	56                   	push   esi
c001038d:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c0010390:	50                   	push   eax
c0010391:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010395:	e8 aa 03 ff ff       	call   c0000744 <memcpy>
c001039a:	83 c4 10             	add    esp,0x10
c001039d:	85 ed                	test   ebp,ebp
c001039f:	74 12                	je     c00103b3 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c00103a1:	50                   	push   eax
c00103a2:	55                   	push   ebp
c00103a3:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00103a6:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c00103aa:	56                   	push   esi
c00103ab:	e8 94 03 ff ff       	call   c0000744 <memcpy>
c00103b0:	83 c4 10             	add    esp,0x10
c00103b3:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c00103b6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00103b9:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00103bc:	99                   	cdq    
c00103bd:	89 f7                	mov    edi,esi
c00103bf:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00103c3:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00103c7:	c1 ff 1f             	sar    edi,0x1f
c00103ca:	57                   	push   edi
c00103cb:	56                   	push   esi
c00103cc:	52                   	push   edx
c00103cd:	50                   	push   eax
c00103ce:	e8 d9 65 01 00       	call   c00269ac <__umoddi3>
c00103d3:	83 c4 10             	add    esp,0x10
c00103d6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00103d9:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00103de:	75 10                	jne    c00103f0 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c00103e0:	83 ec 0c             	sub    esp,0xc
c00103e3:	68 51 a2 02 c0       	push   0xc002a251
c00103e8:	e8 c2 a0 00 00       	call   c001a4af <Krnl::panic(char const*)>
c00103ed:	83 c4 10             	add    esp,0x10
c00103f0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00103f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103f8:	89 10                	mov    DWORD PTR [eax],edx
c00103fa:	83 c4 1c             	add    esp,0x1c
c00103fd:	31 c0                	xor    eax,eax
c00103ff:	5b                   	pop    ebx
c0010400:	5e                   	pop    esi
c0010401:	5f                   	pop    edi
c0010402:	5d                   	pop    ebp
c0010403:	c3                   	ret    

c0010404 <Pipe::write(unsigned long long, void*, int*)>:
c0010404:	55                   	push   ebp
c0010405:	57                   	push   edi
c0010406:	56                   	push   esi
c0010407:	53                   	push   ebx
c0010408:	83 ec 1c             	sub    esp,0x1c
c001040b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001040f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010413:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010417:	89 04 24             	mov    DWORD PTR [esp],eax
c001041a:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001041d:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c0010420:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010424:	89 de                	mov    esi,ebx
c0010426:	89 df                	mov    edi,ebx
c0010428:	c1 ff 1f             	sar    edi,0x1f
c001042b:	01 c6                	add    esi,eax
c001042d:	89 c8                	mov    eax,ecx
c001042f:	11 d7                	adc    edi,edx
c0010431:	99                   	cdq    
c0010432:	39 f1                	cmp    ecx,esi
c0010434:	89 d0                	mov    eax,edx
c0010436:	19 f8                	sbb    eax,edi
c0010438:	b8 01 00 00 00       	mov    eax,0x1
c001043d:	0f 82 80 00 00 00    	jb     c00104c3 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c0010443:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0010446:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0010449:	01 d8                	add    eax,ebx
c001044b:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001044f:	99                   	cdq    
c0010450:	f7 f9                	idiv   ecx
c0010452:	29 d1                	sub    ecx,edx
c0010454:	89 d7                	mov    edi,edx
c0010456:	89 c8                	mov    eax,ecx
c0010458:	99                   	cdq    
c0010459:	39 ce                	cmp    esi,ecx
c001045b:	19 d3                	sbb    ebx,edx
c001045d:	bb 00 00 00 00       	mov    ebx,0x0
c0010462:	72 04                	jb     c0010468 <Pipe::write(unsigned long long, void*, int*)+0x64>
c0010464:	89 f3                	mov    ebx,esi
c0010466:	29 cb                	sub    ebx,ecx
c0010468:	89 f1                	mov    ecx,esi
c001046a:	29 d9                	sub    ecx,ebx
c001046c:	74 1a                	je     c0010488 <Pipe::write(unsigned long long, void*, int*)+0x84>
c001046e:	52                   	push   edx
c001046f:	51                   	push   ecx
c0010470:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010474:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010478:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c001047b:	57                   	push   edi
c001047c:	e8 c3 02 ff ff       	call   c0000744 <memcpy>
c0010481:	83 c4 10             	add    esp,0x10
c0010484:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010488:	85 db                	test   ebx,ebx
c001048a:	74 12                	je     c001049e <Pipe::write(unsigned long long, void*, int*)+0x9a>
c001048c:	50                   	push   eax
c001048d:	53                   	push   ebx
c001048e:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c0010492:	51                   	push   ecx
c0010493:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0010496:	e8 a9 02 ff ff       	call   c0000744 <memcpy>
c001049b:	83 c4 10             	add    esp,0x10
c001049e:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c00104a1:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00104a6:	75 10                	jne    c00104b8 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c00104a8:	83 ec 0c             	sub    esp,0xc
c00104ab:	68 6d a2 02 c0       	push   0xc002a26d
c00104b0:	e8 fa 9f 00 00       	call   c001a4af <Krnl::panic(char const*)>
c00104b5:	83 c4 10             	add    esp,0x10
c00104b8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00104bc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00104bf:	89 38                	mov    DWORD PTR [eax],edi
c00104c1:	31 c0                	xor    eax,eax
c00104c3:	83 c4 1c             	add    esp,0x1c
c00104c6:	5b                   	pop    ebx
c00104c7:	5e                   	pop    esi
c00104c8:	5f                   	pop    edi
c00104c9:	5d                   	pop    ebp
c00104ca:	c3                   	ret    
c00104cb:	90                   	nop

c00104cc <Pipe::Pipe(int)>:
c00104cc:	83 ec 0c             	sub    esp,0xc
c00104cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104d3:	83 ec 08             	sub    esp,0x8
c00104d6:	6a 00                	push   0x0
c00104d8:	50                   	push   eax
c00104d9:	e8 56 12 00 00       	call   c0011734 <UnixFile::UnixFile(int)>
c00104de:	83 c4 10             	add    esp,0x10
c00104e1:	ba 94 a2 02 c0       	mov    edx,0xc002a294
c00104e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ea:	89 10                	mov    DWORD PTR [eax],edx
c00104ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104f0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00104f4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00104f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104fb:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010502:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010506:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001050d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010511:	83 ec 0c             	sub    esp,0xc
c0010514:	50                   	push   eax
c0010515:	e8 26 f3 ff ff       	call   c000f840 <malloc>
c001051a:	83 c4 10             	add    esp,0x10
c001051d:	89 c2                	mov    edx,eax
c001051f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010523:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010526:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001052a:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c001052e:	90                   	nop
c001052f:	83 c4 0c             	add    esp,0xc
c0010532:	c3                   	ret    
c0010533:	90                   	nop

c0010534 <VgaText::isAtty()>:
c0010534:	b0 01                	mov    al,0x1
c0010536:	c3                   	ret    
c0010537:	90                   	nop

c0010538 <VgaText::~VgaText()>:
c0010538:	83 ec 0c             	sub    esp,0xc
c001053b:	ba 50 a3 02 c0       	mov    edx,0xc002a350
c0010540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010544:	89 10                	mov    DWORD PTR [eax],edx
c0010546:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001054a:	83 ec 0c             	sub    esp,0xc
c001054d:	50                   	push   eax
c001054e:	e8 c3 13 00 00       	call   c0011916 <UnixFile::~UnixFile()>
c0010553:	83 c4 10             	add    esp,0x10
c0010556:	90                   	nop
c0010557:	83 c4 0c             	add    esp,0xc
c001055a:	c3                   	ret    
c001055b:	90                   	nop

c001055c <VgaText::~VgaText()>:
c001055c:	83 ec 0c             	sub    esp,0xc
c001055f:	83 ec 0c             	sub    esp,0xc
c0010562:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010566:	e8 cd ff ff ff       	call   c0010538 <VgaText::~VgaText()>
c001056b:	83 c4 10             	add    esp,0x10
c001056e:	83 ec 08             	sub    esp,0x8
c0010571:	68 60 12 00 00       	push   0x1260
c0010576:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001057a:	e8 75 27 00 00       	call   c0012cf4 <operator delete(void*, unsigned long)>
c001057f:	83 c4 10             	add    esp,0x10
c0010582:	83 c4 0c             	add    esp,0xc
c0010585:	c3                   	ret    

c0010586 <VgaText::read(unsigned long long, void*, int*)>:
c0010586:	83 ec 10             	sub    esp,0x10
c0010589:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001058d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010591:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010595:	e8 12 5c 00 00       	call   c00161ac <readKeyboard(VgaText*, char*, unsigned long)>
c001059a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001059e:	89 02                	mov    DWORD PTR [edx],eax
c00105a0:	31 c0                	xor    eax,eax
c00105a2:	83 c4 1c             	add    esp,0x1c
c00105a5:	c3                   	ret    

c00105a6 <setTerminalScrollLock(bool)>:
c00105a6:	c3                   	ret    

c00105a7 <addToTerminalCycle(VgaText*)>:
c00105a7:	8b 15 80 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e380
c00105ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105b1:	85 d2                	test   edx,edx
c00105b3:	75 0c                	jne    c00105c1 <addToTerminalCycle(VgaText*)+0x1a>
c00105b5:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c00105bb:	a3 80 e3 02 c0       	mov    ds:0xc002e380,eax
c00105c0:	c3                   	ret    
c00105c1:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c00105c7:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c00105cd:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c00105d3:	c3                   	ret    

c00105d4 <installVgaTextImplementation()>:
c00105d4:	83 ec 10             	sub    esp,0x10
c00105d7:	6a 20                	push   0x20
c00105d9:	6a 00                	push   0x0
c00105db:	68 60 e3 02 c0       	push   0xc002e360
c00105e0:	e8 93 01 ff ff       	call   c0000778 <memset>
c00105e5:	83 c4 1c             	add    esp,0x1c
c00105e8:	c3                   	ret    

c00105e9 <scrollTerminalScrollLock(int)>:
c00105e9:	c3                   	ret    

c00105ea <VgaText::load()>:
c00105ea:	53                   	push   ebx
c00105eb:	31 c0                	xor    eax,eax
c00105ed:	83 ec 58             	sub    esp,0x58
c00105f0:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00105f4:	89 e2                	mov    edx,esp
c00105f6:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00105fa:	40                   	inc    eax
c00105fb:	83 f8 50             	cmp    eax,0x50
c00105fe:	75 f6                	jne    c00105f6 <VgaText::load()+0xc>
c0010600:	31 c0                	xor    eax,eax
c0010602:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c0010609:	84 c9                	test   cl,cl
c001060b:	74 06                	je     c0010613 <VgaText::load()+0x29>
c001060d:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010610:	40                   	inc    eax
c0010611:	eb ef                	jmp    c0010602 <VgaText::load()+0x18>
c0010613:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c0010619:	85 c0                	test   eax,eax
c001061b:	74 09                	je     c0010626 <VgaText::load()+0x3c>
c001061d:	51                   	push   ecx
c001061e:	51                   	push   ecx
c001061f:	52                   	push   edx
c0010620:	53                   	push   ebx
c0010621:	ff d0                	call   eax
c0010623:	83 c4 10             	add    esp,0x10
c0010626:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c001062c:	85 c0                	test   eax,eax
c001062e:	74 09                	je     c0010639 <VgaText::load()+0x4f>
c0010630:	83 ec 0c             	sub    esp,0xc
c0010633:	53                   	push   ebx
c0010634:	ff d0                	call   eax
c0010636:	83 c4 10             	add    esp,0x10
c0010639:	83 c4 58             	add    esp,0x58
c001063c:	5b                   	pop    ebx
c001063d:	c3                   	ret    

c001063e <VgaText::updateCursor()>:
c001063e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010642:	39 05 84 e3 02 c0    	cmp    DWORD PTR ds:0xc002e384,eax
c0010648:	75 0c                	jne    c0010656 <VgaText::updateCursor()+0x18>
c001064a:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c0010650:	85 c0                	test   eax,eax
c0010652:	74 02                	je     c0010656 <VgaText::updateCursor()+0x18>
c0010654:	ff e0                	jmp    eax
c0010656:	c3                   	ret    
c0010657:	90                   	nop

c0010658 <VgaText::showCursor(bool)>:
c0010658:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001065c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010660:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c0010666:	c3                   	ret    
c0010667:	90                   	nop

c0010668 <VgaText::disableBlink(bool)>:
c0010668:	56                   	push   esi
c0010669:	53                   	push   ebx
c001066a:	51                   	push   ecx
c001066b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001066f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010673:	39 1d 84 e3 02 c0    	cmp    DWORD PTR ds:0xc002e384,ebx
c0010679:	75 18                	jne    c0010693 <VgaText::disableBlink(bool)+0x2b>
c001067b:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c0010681:	85 c0                	test   eax,eax
c0010683:	74 0e                	je     c0010693 <VgaText::disableBlink(bool)+0x2b>
c0010685:	89 f1                	mov    ecx,esi
c0010687:	52                   	push   edx
c0010688:	52                   	push   edx
c0010689:	0f b6 d1             	movzx  edx,cl
c001068c:	52                   	push   edx
c001068d:	53                   	push   ebx
c001068e:	ff d0                	call   eax
c0010690:	83 c4 10             	add    esp,0x10
c0010693:	89 f0                	mov    eax,esi
c0010695:	83 f0 01             	xor    eax,0x1
c0010698:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c001069e:	58                   	pop    eax
c001069f:	5b                   	pop    ebx
c00106a0:	5e                   	pop    esi
c00106a1:	c3                   	ret    

c00106a2 <VgaText::doANSI_SGR(int)>:
c00106a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106aa:	85 d2                	test   edx,edx
c00106ac:	75 14                	jne    c00106c2 <VgaText::doANSI_SGR(int)+0x20>
c00106ae:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c00106b4:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00106ba:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c00106c0:	eb 65                	jmp    c0010727 <VgaText::doANSI_SGR(int)+0x85>
c00106c2:	83 fa 07             	cmp    edx,0x7
c00106c5:	75 14                	jne    c00106db <VgaText::doANSI_SGR(int)+0x39>
c00106c7:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c00106cd:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c00106d3:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c00106d9:	eb 4c                	jmp    c0010727 <VgaText::doANSI_SGR(int)+0x85>
c00106db:	83 fa 1b             	cmp    edx,0x1b
c00106de:	74 ce                	je     c00106ae <VgaText::doANSI_SGR(int)+0xc>
c00106e0:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00106e3:	83 f9 07             	cmp    ecx,0x7
c00106e6:	77 09                	ja     c00106f1 <VgaText::doANSI_SGR(int)+0x4f>
c00106e8:	8b 14 8d 00 d2 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2e00]
c00106ef:	eb 20                	jmp    c0010711 <VgaText::doANSI_SGR(int)+0x6f>
c00106f1:	8d 4a d8             	lea    ecx,[edx-0x28]
c00106f4:	83 f9 07             	cmp    ecx,0x7
c00106f7:	77 09                	ja     c0010702 <VgaText::doANSI_SGR(int)+0x60>
c00106f9:	8b 14 8d 00 d2 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2e00]
c0010700:	eb 25                	jmp    c0010727 <VgaText::doANSI_SGR(int)+0x85>
c0010702:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010705:	83 f9 07             	cmp    ecx,0x7
c0010708:	77 0e                	ja     c0010718 <VgaText::doANSI_SGR(int)+0x76>
c001070a:	8b 14 95 b8 d0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2f48]
c0010711:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010717:	c3                   	ret    
c0010718:	8d 4a 9c             	lea    ecx,[edx-0x64]
c001071b:	83 f9 07             	cmp    ecx,0x7
c001071e:	77 0d                	ja     c001072d <VgaText::doANSI_SGR(int)+0x8b>
c0010720:	8b 14 95 90 d0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2f70]
c0010727:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c001072d:	c3                   	ret    

c001072e <VgaText::setDefaultBgColour(VgaColour)>:
c001072e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010732:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010736:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c001073c:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010742:	c3                   	ret    
c0010743:	90                   	nop

c0010744 <VgaText::setDefaultFgColour(VgaColour)>:
c0010744:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010748:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001074c:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c0010752:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010758:	c3                   	ret    
c0010759:	90                   	nop

c001075a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c001075a:	53                   	push   ebx
c001075b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001075f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010763:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010767:	51                   	push   ecx
c0010768:	e8 c1 ff ff ff       	call   c001072e <VgaText::setDefaultBgColour(VgaColour)>
c001076d:	58                   	pop    eax
c001076e:	5a                   	pop    edx
c001076f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010773:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010777:	5b                   	pop    ebx
c0010778:	eb ca                	jmp    c0010744 <VgaText::setDefaultFgColour(VgaColour)>

c001077a <VgaText::combineColours(unsigned char, unsigned char)>:
c001077a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001077e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010783:	83 e0 0f             	and    eax,0xf
c0010786:	c1 e2 04             	shl    edx,0x4
c0010789:	09 d0                	or     eax,edx
c001078b:	c3                   	ret    

c001078c <VgaText::scrollScreen()>:
c001078c:	57                   	push   edi
c001078d:	56                   	push   esi
c001078e:	be 01 00 00 00       	mov    esi,0x1
c0010793:	53                   	push   ebx
c0010794:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010798:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c001079e:	31 ff                	xor    edi,edi
c00107a0:	01 d9                	add    ecx,ebx
c00107a2:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c00107a5:	83 fe 17             	cmp    esi,0x17
c00107a8:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c00107ae:	75 28                	jne    c00107d8 <VgaText::scrollScreen()+0x4c>
c00107b0:	f7 c7 01 00 00 00    	test   edi,0x1
c00107b6:	74 1c                	je     c00107d4 <VgaText::scrollScreen()+0x48>
c00107b8:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c00107bf:	50                   	push   eax
c00107c0:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c00107c7:	50                   	push   eax
c00107c8:	e8 ad ff ff ff       	call   c001077a <VgaText::combineColours(unsigned char, unsigned char)>
c00107cd:	5a                   	pop    edx
c00107ce:	5a                   	pop    edx
c00107cf:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c00107d2:	eb 04                	jmp    c00107d8 <VgaText::scrollScreen()+0x4c>
c00107d4:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c00107d8:	47                   	inc    edi
c00107d9:	41                   	inc    ecx
c00107da:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00107e0:	75 c0                	jne    c00107a2 <VgaText::scrollScreen()+0x16>
c00107e2:	46                   	inc    esi
c00107e3:	83 fe 18             	cmp    esi,0x18
c00107e6:	75 b0                	jne    c0010798 <VgaText::scrollScreen()+0xc>
c00107e8:	39 1d 84 e3 02 c0    	cmp    DWORD PTR ds:0xc002e384,ebx
c00107ee:	75 24                	jne    c0010814 <VgaText::scrollScreen()+0x88>
c00107f0:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00107f7:	74 08                	je     c0010801 <VgaText::scrollScreen()+0x75>
c00107f9:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c00107ff:	eb 13                	jmp    c0010814 <VgaText::scrollScreen()+0x88>
c0010801:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c0010807:	85 c0                	test   eax,eax
c0010809:	74 09                	je     c0010814 <VgaText::scrollScreen()+0x88>
c001080b:	83 ec 0c             	sub    esp,0xc
c001080e:	53                   	push   ebx
c001080f:	ff d0                	call   eax
c0010811:	83 c4 10             	add    esp,0x10
c0010814:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010818:	5b                   	pop    ebx
c0010819:	5e                   	pop    esi
c001081a:	5f                   	pop    edi
c001081b:	e9 1e fe ff ff       	jmp    c001063e <VgaText::updateCursor()>

c0010820 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010820:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010825:	c1 e0 08             	shl    eax,0x8
c0010828:	89 c2                	mov    edx,eax
c001082a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001082f:	09 d0                	or     eax,edx
c0010831:	c3                   	ret    

c0010832 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010832:	53                   	push   ebx
c0010833:	83 ec 08             	sub    esp,0x8
c0010836:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001083a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001083f:	50                   	push   eax
c0010840:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010845:	50                   	push   eax
c0010846:	e8 2f ff ff ff       	call   c001077a <VgaText::combineColours(unsigned char, unsigned char)>
c001084b:	5a                   	pop    edx
c001084c:	0f b6 c0             	movzx  eax,al
c001084f:	5b                   	pop    ebx
c0010850:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010855:	50                   	push   eax
c0010856:	53                   	push   ebx
c0010857:	e8 c4 ff ff ff       	call   c0010820 <VgaText::combineCharAndColour(char, unsigned char)>
c001085c:	5a                   	pop    edx
c001085d:	5a                   	pop    edx
c001085e:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010864:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010868:	0f b7 d2             	movzx  edx,dx
c001086b:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c0010870:	39 0d 84 e3 02 c0    	cmp    DWORD PTR ds:0xc002e384,ecx
c0010876:	75 14                	jne    c001088c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010878:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c001087e:	85 c0                	test   eax,eax
c0010880:	74 0a                	je     c001088c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010882:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010886:	83 c4 08             	add    esp,0x8
c0010889:	5b                   	pop    ebx
c001088a:	ff e0                	jmp    eax
c001088c:	83 c4 08             	add    esp,0x8
c001088f:	5b                   	pop    ebx
c0010890:	c3                   	ret    
c0010891:	90                   	nop

c0010892 <VgaText::getCursorX()>:
c0010892:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010896:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c001089c:	c3                   	ret    
c001089d:	90                   	nop

c001089e <VgaText::getCursorY()>:
c001089e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108a2:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c00108a8:	c3                   	ret    
c00108a9:	90                   	nop

c00108aa <VgaText::setCursor(int, int)>:
c00108aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00108b2:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c00108b8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00108bc:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c00108c2:	e9 77 fd ff ff       	jmp    c001063e <VgaText::updateCursor()>
c00108c7:	90                   	nop

c00108c8 <VgaText::setCursorX(int)>:
c00108c8:	83 ec 10             	sub    esp,0x10
c00108cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108cf:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c00108d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108d9:	50                   	push   eax
c00108da:	e8 cb ff ff ff       	call   c00108aa <VgaText::setCursor(int, int)>
c00108df:	83 c4 1c             	add    esp,0x1c
c00108e2:	c3                   	ret    
c00108e3:	90                   	nop

c00108e4 <VgaText::setCursorY(int)>:
c00108e4:	83 ec 10             	sub    esp,0x10
c00108e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108eb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00108ef:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c00108f5:	50                   	push   eax
c00108f6:	e8 af ff ff ff       	call   c00108aa <VgaText::setCursor(int, int)>
c00108fb:	83 c4 1c             	add    esp,0x1c
c00108fe:	c3                   	ret    
c00108ff:	90                   	nop

c0010900 <VgaText::incrementCursor(bool)>:
c0010900:	56                   	push   esi
c0010901:	53                   	push   ebx
c0010902:	51                   	push   ecx
c0010903:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010907:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001090b:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c0010911:	40                   	inc    eax
c0010912:	83 f8 50             	cmp    eax,0x50
c0010915:	74 08                	je     c001091f <VgaText::incrementCursor(bool)+0x1f>
c0010917:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c001091d:	eb 33                	jmp    c0010952 <VgaText::incrementCursor(bool)+0x52>
c001091f:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010925:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c001092f:	8d 50 01             	lea    edx,[eax+0x1]
c0010932:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010938:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c001093e:	75 12                	jne    c0010952 <VgaText::incrementCursor(bool)+0x52>
c0010940:	83 ec 0c             	sub    esp,0xc
c0010943:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010949:	53                   	push   ebx
c001094a:	e8 3d fe ff ff       	call   c001078c <VgaText::scrollScreen()>
c001094f:	83 c4 10             	add    esp,0x10
c0010952:	89 f0                	mov    eax,esi
c0010954:	84 c0                	test   al,al
c0010956:	74 0c                	je     c0010964 <VgaText::incrementCursor(bool)+0x64>
c0010958:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001095c:	5a                   	pop    edx
c001095d:	5b                   	pop    ebx
c001095e:	5e                   	pop    esi
c001095f:	e9 da fc ff ff       	jmp    c001063e <VgaText::updateCursor()>
c0010964:	58                   	pop    eax
c0010965:	5b                   	pop    ebx
c0010966:	5e                   	pop    esi
c0010967:	c3                   	ret    

c0010968 <VgaText::updateRAMUsageDisplay(int)>:
c0010968:	56                   	push   esi
c0010969:	8b 35 e0 d1 02 c0    	mov    esi,DWORD PTR ds:0xc002d1e0
c001096f:	53                   	push   ebx
c0010970:	bb 0a 00 00 00       	mov    ebx,0xa
c0010975:	6a 0f                	push   0xf
c0010977:	6a 00                	push   0x0
c0010979:	e8 fc fd ff ff       	call   c001077a <VgaText::combineColours(unsigned char, unsigned char)>
c001097e:	5a                   	pop    edx
c001097f:	59                   	pop    ecx
c0010980:	0f b6 c8             	movzx  ecx,al
c0010983:	51                   	push   ecx
c0010984:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010988:	99                   	cdq    
c0010989:	f7 fb                	idiv   ebx
c001098b:	89 d3                	mov    ebx,edx
c001098d:	83 c0 30             	add    eax,0x30
c0010990:	83 c3 30             	add    ebx,0x30
c0010993:	0f be c0             	movsx  eax,al
c0010996:	0f b6 db             	movzx  ebx,bl
c0010999:	50                   	push   eax
c001099a:	e8 81 fe ff ff       	call   c0010820 <VgaText::combineCharAndColour(char, unsigned char)>
c001099f:	5a                   	pop    edx
c00109a0:	5a                   	pop    edx
c00109a1:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c00109a8:	51                   	push   ecx
c00109a9:	53                   	push   ebx
c00109aa:	e8 71 fe ff ff       	call   c0010820 <VgaText::combineCharAndColour(char, unsigned char)>
c00109af:	5b                   	pop    ebx
c00109b0:	5a                   	pop    edx
c00109b1:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c00109b8:	51                   	push   ecx
c00109b9:	6a 25                	push   0x25
c00109bb:	e8 60 fe ff ff       	call   c0010820 <VgaText::combineCharAndColour(char, unsigned char)>
c00109c0:	59                   	pop    ecx
c00109c1:	5b                   	pop    ebx
c00109c2:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c00109c9:	5b                   	pop    ebx
c00109ca:	5e                   	pop    esi
c00109cb:	c3                   	ret    

c00109cc <VgaText::updateDiskUsage()>:
c00109cc:	55                   	push   ebp
c00109cd:	bd 10 27 00 00       	mov    ebp,0x2710
c00109d2:	57                   	push   edi
c00109d3:	8b 3d e0 d1 02 c0    	mov    edi,DWORD PTR ds:0xc002d1e0
c00109d9:	56                   	push   esi
c00109da:	53                   	push   ebx
c00109db:	6a 0f                	push   0xf
c00109dd:	6a 00                	push   0x0
c00109df:	e8 96 fd ff ff       	call   c001077a <VgaText::combineColours(unsigned char, unsigned char)>
c00109e4:	5a                   	pop    edx
c00109e5:	0f b6 d8             	movzx  ebx,al
c00109e8:	59                   	pop    ecx
c00109e9:	8b 35 08 26 03 c0    	mov    esi,DWORD PTR ds:0xc0032608
c00109ef:	53                   	push   ebx
c00109f0:	b9 0a 00 00 00       	mov    ecx,0xa
c00109f5:	89 f0                	mov    eax,esi
c00109f7:	99                   	cdq    
c00109f8:	f7 fd                	idiv   ebp
c00109fa:	99                   	cdq    
c00109fb:	f7 f9                	idiv   ecx
c00109fd:	8d 42 30             	lea    eax,[edx+0x30]
c0010a00:	0f b6 c0             	movzx  eax,al
c0010a03:	50                   	push   eax
c0010a04:	e8 17 fe ff ff       	call   c0010820 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a09:	5d                   	pop    ebp
c0010a0a:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a0f:	5a                   	pop    edx
c0010a10:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010a14:	53                   	push   ebx
c0010a15:	89 f0                	mov    eax,esi
c0010a17:	99                   	cdq    
c0010a18:	f7 fd                	idiv   ebp
c0010a1a:	99                   	cdq    
c0010a1b:	f7 f9                	idiv   ecx
c0010a1d:	8d 42 30             	lea    eax,[edx+0x30]
c0010a20:	0f b6 c0             	movzx  eax,al
c0010a23:	50                   	push   eax
c0010a24:	e8 f7 fd ff ff       	call   c0010820 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a29:	5d                   	pop    ebp
c0010a2a:	bd 64 00 00 00       	mov    ebp,0x64
c0010a2f:	5a                   	pop    edx
c0010a30:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010a37:	53                   	push   ebx
c0010a38:	89 f0                	mov    eax,esi
c0010a3a:	99                   	cdq    
c0010a3b:	f7 fd                	idiv   ebp
c0010a3d:	99                   	cdq    
c0010a3e:	f7 f9                	idiv   ecx
c0010a40:	8d 42 30             	lea    eax,[edx+0x30]
c0010a43:	0f b6 c0             	movzx  eax,al
c0010a46:	50                   	push   eax
c0010a47:	e8 d4 fd ff ff       	call   c0010820 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a4c:	5d                   	pop    ebp
c0010a4d:	5a                   	pop    edx
c0010a4e:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010a55:	53                   	push   ebx
c0010a56:	89 f0                	mov    eax,esi
c0010a58:	99                   	cdq    
c0010a59:	f7 f9                	idiv   ecx
c0010a5b:	89 d6                	mov    esi,edx
c0010a5d:	99                   	cdq    
c0010a5e:	f7 f9                	idiv   ecx
c0010a60:	8d 42 30             	lea    eax,[edx+0x30]
c0010a63:	0f b6 c0             	movzx  eax,al
c0010a66:	50                   	push   eax
c0010a67:	e8 b4 fd ff ff       	call   c0010820 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a6c:	5d                   	pop    ebp
c0010a6d:	5a                   	pop    edx
c0010a6e:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a75:	53                   	push   ebx
c0010a76:	8d 46 30             	lea    eax,[esi+0x30]
c0010a79:	0f b6 f0             	movzx  esi,al
c0010a7c:	56                   	push   esi
c0010a7d:	e8 9e fd ff ff       	call   c0010820 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a82:	5e                   	pop    esi
c0010a83:	8b 35 04 26 03 c0    	mov    esi,DWORD PTR ds:0xc0032604
c0010a89:	5d                   	pop    ebp
c0010a8a:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010a91:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a96:	53                   	push   ebx
c0010a97:	89 f0                	mov    eax,esi
c0010a99:	99                   	cdq    
c0010a9a:	f7 fd                	idiv   ebp
c0010a9c:	99                   	cdq    
c0010a9d:	f7 f9                	idiv   ecx
c0010a9f:	8d 42 30             	lea    eax,[edx+0x30]
c0010aa2:	0f b6 c0             	movzx  eax,al
c0010aa5:	50                   	push   eax
c0010aa6:	e8 75 fd ff ff       	call   c0010820 <VgaText::combineCharAndColour(char, unsigned char)>
c0010aab:	5a                   	pop    edx
c0010aac:	5d                   	pop    ebp
c0010aad:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010ab4:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010ab9:	53                   	push   ebx
c0010aba:	89 f0                	mov    eax,esi
c0010abc:	99                   	cdq    
c0010abd:	f7 fd                	idiv   ebp
c0010abf:	99                   	cdq    
c0010ac0:	f7 f9                	idiv   ecx
c0010ac2:	8d 42 30             	lea    eax,[edx+0x30]
c0010ac5:	0f b6 c0             	movzx  eax,al
c0010ac8:	50                   	push   eax
c0010ac9:	e8 52 fd ff ff       	call   c0010820 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ace:	5a                   	pop    edx
c0010acf:	5d                   	pop    ebp
c0010ad0:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010ad7:	bd 64 00 00 00       	mov    ebp,0x64
c0010adc:	53                   	push   ebx
c0010add:	89 f0                	mov    eax,esi
c0010adf:	99                   	cdq    
c0010ae0:	f7 fd                	idiv   ebp
c0010ae2:	99                   	cdq    
c0010ae3:	f7 f9                	idiv   ecx
c0010ae5:	83 c2 30             	add    edx,0x30
c0010ae8:	0f b6 d2             	movzx  edx,dl
c0010aeb:	52                   	push   edx
c0010aec:	e8 2f fd ff ff       	call   c0010820 <VgaText::combineCharAndColour(char, unsigned char)>
c0010af1:	5a                   	pop    edx
c0010af2:	5d                   	pop    ebp
c0010af3:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010afa:	53                   	push   ebx
c0010afb:	89 f0                	mov    eax,esi
c0010afd:	99                   	cdq    
c0010afe:	f7 f9                	idiv   ecx
c0010b00:	89 d6                	mov    esi,edx
c0010b02:	99                   	cdq    
c0010b03:	f7 f9                	idiv   ecx
c0010b05:	8d 42 30             	lea    eax,[edx+0x30]
c0010b08:	0f b6 c0             	movzx  eax,al
c0010b0b:	50                   	push   eax
c0010b0c:	e8 0f fd ff ff       	call   c0010820 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b11:	5a                   	pop    edx
c0010b12:	59                   	pop    ecx
c0010b13:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010b1a:	53                   	push   ebx
c0010b1b:	8d 46 30             	lea    eax,[esi+0x30]
c0010b1e:	0f b6 f0             	movzx  esi,al
c0010b21:	56                   	push   esi
c0010b22:	e8 f9 fc ff ff       	call   c0010820 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b27:	5b                   	pop    ebx
c0010b28:	5e                   	pop    esi
c0010b29:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010b30:	5b                   	pop    ebx
c0010b31:	5e                   	pop    esi
c0010b32:	5f                   	pop    edi
c0010b33:	5d                   	pop    ebp
c0010b34:	c3                   	ret    
c0010b35:	90                   	nop

c0010b36 <VgaText::updateTitle()>:
c0010b36:	53                   	push   ebx
c0010b37:	31 c0                	xor    eax,eax
c0010b39:	83 ec 58             	sub    esp,0x58
c0010b3c:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010b40:	89 e1                	mov    ecx,esp
c0010b42:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010b46:	40                   	inc    eax
c0010b47:	83 f8 50             	cmp    eax,0x50
c0010b4a:	75 f6                	jne    c0010b42 <VgaText::updateTitle()+0xc>
c0010b4c:	31 c0                	xor    eax,eax
c0010b4e:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010b55:	84 db                	test   bl,bl
c0010b57:	74 06                	je     c0010b5f <VgaText::updateTitle()+0x29>
c0010b59:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b5c:	40                   	inc    eax
c0010b5d:	eb ef                	jmp    c0010b4e <VgaText::updateTitle()+0x18>
c0010b5f:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010b65:	85 c0                	test   eax,eax
c0010b67:	74 09                	je     c0010b72 <VgaText::updateTitle()+0x3c>
c0010b69:	53                   	push   ebx
c0010b6a:	53                   	push   ebx
c0010b6b:	51                   	push   ecx
c0010b6c:	52                   	push   edx
c0010b6d:	ff d0                	call   eax
c0010b6f:	83 c4 10             	add    esp,0x10
c0010b72:	e8 55 fe ff ff       	call   c00109cc <VgaText::updateDiskUsage()>
c0010b77:	83 c4 58             	add    esp,0x58
c0010b7a:	5b                   	pop    ebx
c0010b7b:	c3                   	ret    

c0010b7c <VgaText::setTitleTextColour(VgaColour)>:
c0010b7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b80:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b84:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010b8a:	eb aa                	jmp    c0010b36 <VgaText::updateTitle()>

c0010b8c <VgaText::setTitleColour(VgaColour)>:
c0010b8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b90:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b94:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010b9a:	eb 9a                	jmp    c0010b36 <VgaText::updateTitle()>

c0010b9c <VgaText::setTitle(char*)>:
c0010b9c:	53                   	push   ebx
c0010b9d:	83 ec 10             	sub    esp,0x10
c0010ba0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010ba4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ba8:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010bae:	50                   	push   eax
c0010baf:	e8 80 fc fe ff       	call   c0000834 <strcpy>
c0010bb4:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010bb8:	83 c4 18             	add    esp,0x18
c0010bbb:	5b                   	pop    ebx
c0010bbc:	e9 75 ff ff ff       	jmp    c0010b36 <VgaText::updateTitle()>
c0010bc1:	90                   	nop

c0010bc2 <VgaText::decrementCursor(bool)>:
c0010bc2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010bc6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010bca:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010bd0:	85 c0                	test   eax,eax
c0010bd2:	74 07                	je     c0010bdb <VgaText::decrementCursor(bool)+0x19>
c0010bd4:	48                   	dec    eax
c0010bd5:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010bdb:	84 c9                	test   cl,cl
c0010bdd:	74 09                	je     c0010be8 <VgaText::decrementCursor(bool)+0x26>
c0010bdf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010be3:	e9 56 fa ff ff       	jmp    c001063e <VgaText::updateCursor()>
c0010be8:	c3                   	ret    
c0010be9:	90                   	nop

c0010bea <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010bea:	53                   	push   ebx
c0010beb:	83 ec 08             	sub    esp,0x8
c0010bee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010bf2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010bf6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010bfa:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010bfe:	3c 07                	cmp    al,0x7
c0010c00:	75 2a                	jne    c0010c2c <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010c02:	a1 34 e4 02 c0       	mov    eax,ds:0xc002e434
c0010c07:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010c0f:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010c17:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010c1f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010c23:	83 c4 08             	add    esp,0x8
c0010c26:	5b                   	pop    ebx
c0010c27:	e9 a6 2f 00 00       	jmp    c0013bd2 <Buzzer::beep(int, int, bool)>
c0010c2c:	3c 0d                	cmp    al,0xd
c0010c2e:	75 0c                	jne    c0010c3c <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010c30:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c3a:	eb 3b                	jmp    c0010c77 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010c3c:	3c 0a                	cmp    al,0xa
c0010c3e:	75 40                	jne    c0010c80 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010c40:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010c46:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c50:	8d 50 01             	lea    edx,[eax+0x1]
c0010c53:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010c59:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010c5f:	75 12                	jne    c0010c73 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010c61:	83 ec 0c             	sub    esp,0xc
c0010c64:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010c6a:	53                   	push   ebx
c0010c6b:	e8 1c fb ff ff       	call   c001078c <VgaText::scrollScreen()>
c0010c70:	83 c4 10             	add    esp,0x10
c0010c73:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010c77:	83 c4 08             	add    esp,0x8
c0010c7a:	5b                   	pop    ebx
c0010c7b:	e9 be f9 ff ff       	jmp    c001063e <VgaText::updateCursor()>
c0010c80:	3c 08                	cmp    al,0x8
c0010c82:	75 31                	jne    c0010cb5 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010c84:	50                   	push   eax
c0010c85:	50                   	push   eax
c0010c86:	6a 01                	push   0x1
c0010c88:	53                   	push   ebx
c0010c89:	e8 34 ff ff ff       	call   c0010bc2 <VgaText::decrementCursor(bool)>
c0010c8e:	5a                   	pop    edx
c0010c8f:	59                   	pop    ecx
c0010c90:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010c96:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010c9c:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010ca2:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010ca8:	6a 20                	push   0x20
c0010caa:	53                   	push   ebx
c0010cab:	e8 82 fb ff ff       	call   c0010832 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cb0:	83 c4 28             	add    esp,0x28
c0010cb3:	5b                   	pop    ebx
c0010cb4:	c3                   	ret    
c0010cb5:	83 ec 08             	sub    esp,0x8
c0010cb8:	0f be c0             	movsx  eax,al
c0010cbb:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010cc1:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010cc7:	51                   	push   ecx
c0010cc8:	52                   	push   edx
c0010cc9:	50                   	push   eax
c0010cca:	53                   	push   ebx
c0010ccb:	e8 62 fb ff ff       	call   c0010832 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cd0:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010cd4:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010cdc:	83 c4 28             	add    esp,0x28
c0010cdf:	5b                   	pop    ebx
c0010ce0:	e9 1b fc ff ff       	jmp    c0010900 <VgaText::incrementCursor(bool)>
c0010ce5:	90                   	nop

c0010ce6 <VgaText::isShowingCursor()>:
c0010ce6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cea:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010cf0:	c3                   	ret    
c0010cf1:	90                   	nop

c0010cf2 <VgaText::isBlinkDisabled()>:
c0010cf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cf6:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010cfc:	83 f0 01             	xor    eax,0x1
c0010cff:	c3                   	ret    

c0010d00 <VgaText::setCursorHeight(int)>:
c0010d00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d04:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010d08:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010d0e:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010d15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010d19:	e9 3a f9 ff ff       	jmp    c0010658 <VgaText::showCursor(bool)>

c0010d1e <VgaText::getCursorHeight()>:
c0010d1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d22:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010d28:	c3                   	ret    

c0010d29 <setActiveTerminal(VgaText*)>:
c0010d29:	53                   	push   ebx
c0010d2a:	83 ec 08             	sub    esp,0x8
c0010d2d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d31:	85 db                	test   ebx,ebx
c0010d33:	75 11                	jne    c0010d46 <setActiveTerminal(VgaText*)+0x1d>
c0010d35:	c7 44 24 10 a8 a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a2a8
c0010d3d:	83 c4 08             	add    esp,0x8
c0010d40:	5b                   	pop    ebx
c0010d41:	e9 69 97 00 00       	jmp    c001a4af <Krnl::panic(char const*)>
c0010d46:	50                   	push   eax
c0010d47:	50                   	push   eax
c0010d48:	53                   	push   ebx
c0010d49:	68 b6 a2 02 c0       	push   0xc002a2b6
c0010d4e:	e8 81 20 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0010d53:	a1 84 e3 02 c0       	mov    eax,ds:0xc002e384
c0010d58:	83 c4 10             	add    esp,0x10
c0010d5b:	85 c0                	test   eax,eax
c0010d5d:	74 0c                	je     c0010d6b <setActiveTerminal(VgaText*)+0x42>
c0010d5f:	83 ec 0c             	sub    esp,0xc
c0010d62:	50                   	push   eax
c0010d63:	e8 d6 f8 ff ff       	call   c001063e <VgaText::updateCursor()>
c0010d68:	83 c4 10             	add    esp,0x10
c0010d6b:	89 1d 84 e3 02 c0    	mov    DWORD PTR ds:0xc002e384,ebx
c0010d71:	51                   	push   ecx
c0010d72:	51                   	push   ecx
c0010d73:	53                   	push   ebx
c0010d74:	68 ce a2 02 c0       	push   0xc002a2ce
c0010d79:	e8 56 20 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0010d7e:	83 c4 0c             	add    esp,0xc
c0010d81:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010d87:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010d8d:	53                   	push   ebx
c0010d8e:	e8 17 fb ff ff       	call   c00108aa <VgaText::setCursor(int, int)>
c0010d93:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d96:	e8 57 ff ff ff       	call   c0010cf2 <VgaText::isBlinkDisabled()>
c0010d9b:	5a                   	pop    edx
c0010d9c:	0f b6 c0             	movzx  eax,al
c0010d9f:	59                   	pop    ecx
c0010da0:	50                   	push   eax
c0010da1:	53                   	push   ebx
c0010da2:	e8 c1 f8 ff ff       	call   c0010668 <VgaText::disableBlink(bool)>
c0010da7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010daa:	e8 6f ff ff ff       	call   c0010d1e <VgaText::getCursorHeight()>
c0010daf:	5a                   	pop    edx
c0010db0:	59                   	pop    ecx
c0010db1:	50                   	push   eax
c0010db2:	53                   	push   ebx
c0010db3:	e8 48 ff ff ff       	call   c0010d00 <VgaText::setCursorHeight(int)>
c0010db8:	83 c4 10             	add    esp,0x10
c0010dbb:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010dc2:	75 0a                	jne    c0010dce <setActiveTerminal(VgaText*)+0xa5>
c0010dc4:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010dce:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010dd2:	83 c4 08             	add    esp,0x8
c0010dd5:	5b                   	pop    ebx
c0010dd6:	e9 0f f8 ff ff       	jmp    c00105ea <VgaText::load()>

c0010ddb <doTerminalCycle()>:
c0010ddb:	83 ec 18             	sub    esp,0x18
c0010dde:	a1 80 e3 02 c0       	mov    eax,ds:0xc002e380
c0010de3:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010de9:	50                   	push   eax
c0010dea:	a3 80 e3 02 c0       	mov    ds:0xc002e380,eax
c0010def:	e8 35 ff ff ff       	call   c0010d29 <setActiveTerminal(VgaText*)>
c0010df4:	83 c4 1c             	add    esp,0x1c
c0010df7:	c3                   	ret    

c0010df8 <VgaText::doUpdate()>:
c0010df8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dfc:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010e02:	85 c0                	test   eax,eax
c0010e04:	74 02                	je     c0010e08 <VgaText::doUpdate()+0x10>
c0010e06:	ff e0                	jmp    eax
c0010e08:	c3                   	ret    
c0010e09:	90                   	nop

c0010e0a <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010e0a:	55                   	push   ebp
c0010e0b:	57                   	push   edi
c0010e0c:	56                   	push   esi
c0010e0d:	53                   	push   ebx
c0010e0e:	83 ec 1c             	sub    esp,0x1c
c0010e11:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010e15:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e1a:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010e21:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010e24:	50                   	push   eax
c0010e25:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e2a:	50                   	push   eax
c0010e2b:	e8 4a f9 ff ff       	call   c001077a <VgaText::combineColours(unsigned char, unsigned char)>
c0010e30:	59                   	pop    ecx
c0010e31:	0f b6 c0             	movzx  eax,al
c0010e34:	5b                   	pop    ebx
c0010e35:	31 c9                	xor    ecx,ecx
c0010e37:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e3f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010e43:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e4d:	0f b7 db             	movzx  ebx,bx
c0010e50:	01 db                	add    ebx,ebx
c0010e52:	01 fb                	add    ebx,edi
c0010e54:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010e57:	84 c0                	test   al,al
c0010e59:	0f 84 38 01 00 00    	je     c0010f97 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010e5f:	3c 0d                	cmp    al,0xd
c0010e61:	75 0f                	jne    c0010e72 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010e63:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e6d:	e9 1f 01 00 00       	jmp    c0010f91 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e72:	3c 0a                	cmp    al,0xa
c0010e74:	75 5b                	jne    c0010ed1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010e76:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010e7c:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e86:	8d 48 01             	lea    ecx,[eax+0x1]
c0010e89:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010e8f:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010e95:	75 12                	jne    c0010ea9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010e97:	83 ec 0c             	sub    esp,0xc
c0010e9a:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010ea0:	55                   	push   ebp
c0010ea1:	e8 e6 f8 ff ff       	call   c001078c <VgaText::scrollScreen()>
c0010ea6:	83 c4 10             	add    esp,0x10
c0010ea9:	83 ec 0c             	sub    esp,0xc
c0010eac:	55                   	push   ebp
c0010ead:	e8 8c f7 ff ff       	call   c001063e <VgaText::updateCursor()>
c0010eb2:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010eba:	83 c4 10             	add    esp,0x10
c0010ebd:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010ec3:	31 c9                	xor    ecx,ecx
c0010ec5:	0f b7 db             	movzx  ebx,bx
c0010ec8:	01 db                	add    ebx,ebx
c0010eca:	01 fb                	add    ebx,edi
c0010ecc:	e9 c0 00 00 00       	jmp    c0010f91 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ed1:	3c 08                	cmp    al,0x8
c0010ed3:	75 4e                	jne    c0010f23 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010ed5:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010ed9:	53                   	push   ebx
c0010eda:	53                   	push   ebx
c0010edb:	6a 01                	push   0x1
c0010edd:	55                   	push   ebp
c0010ede:	e8 df fc ff ff       	call   c0010bc2 <VgaText::decrementCursor(bool)>
c0010ee3:	58                   	pop    eax
c0010ee4:	5a                   	pop    edx
c0010ee5:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010eeb:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010ef1:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010ef7:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010efd:	6a 20                	push   0x20
c0010eff:	55                   	push   ebp
c0010f00:	e8 2d f9 ff ff       	call   c0010832 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010f05:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f0d:	83 c4 20             	add    esp,0x20
c0010f10:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010f16:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010f1a:	0f b7 db             	movzx  ebx,bx
c0010f1d:	01 db                	add    ebx,ebx
c0010f1f:	01 fb                	add    ebx,edi
c0010f21:	eb 6e                	jmp    c0010f91 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010f23:	51                   	push   ecx
c0010f24:	51                   	push   ecx
c0010f25:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f29:	50                   	push   eax
c0010f2a:	e8 f1 f8 ff ff       	call   c0010820 <VgaText::combineCharAndColour(char, unsigned char)>
c0010f2f:	83 c4 10             	add    esp,0x10
c0010f32:	66 89 03             	mov    WORD PTR [ebx],ax
c0010f35:	39 2d 84 e3 02 c0    	cmp    DWORD PTR ds:0xc002e384,ebp
c0010f3b:	75 2a                	jne    c0010f67 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f3d:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010f43:	85 c0                	test   eax,eax
c0010f45:	74 20                	je     c0010f67 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f47:	52                   	push   edx
c0010f48:	52                   	push   edx
c0010f49:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f4f:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f55:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f59:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f5d:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010f60:	51                   	push   ecx
c0010f61:	55                   	push   ebp
c0010f62:	ff d0                	call   eax
c0010f64:	83 c4 20             	add    esp,0x20
c0010f67:	83 c3 02             	add    ebx,0x2
c0010f6a:	50                   	push   eax
c0010f6b:	50                   	push   eax
c0010f6c:	6a 00                	push   0x0
c0010f6e:	55                   	push   ebp
c0010f6f:	e8 8c f9 ff ff       	call   c0010900 <VgaText::incrementCursor(bool)>
c0010f74:	83 c4 10             	add    esp,0x10
c0010f77:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010f7e:	75 0f                	jne    c0010f8f <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010f80:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f88:	0f b7 db             	movzx  ebx,bx
c0010f8b:	01 db                	add    ebx,ebx
c0010f8d:	01 fb                	add    ebx,edi
c0010f8f:	b1 01                	mov    cl,0x1
c0010f91:	46                   	inc    esi
c0010f92:	e9 bd fe ff ff       	jmp    c0010e54 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010f97:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010f9b:	83 ec 0c             	sub    esp,0xc
c0010f9e:	55                   	push   ebp
c0010f9f:	e8 9a f6 ff ff       	call   c001063e <VgaText::updateCursor()>
c0010fa4:	83 c4 10             	add    esp,0x10
c0010fa7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010fab:	84 c9                	test   cl,cl
c0010fad:	74 0c                	je     c0010fbb <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010faf:	83 ec 0c             	sub    esp,0xc
c0010fb2:	55                   	push   ebp
c0010fb3:	e8 40 fe ff ff       	call   c0010df8 <VgaText::doUpdate()>
c0010fb8:	83 c4 10             	add    esp,0x10
c0010fbb:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010fc2:	83 c4 1c             	add    esp,0x1c
c0010fc5:	5b                   	pop    ebx
c0010fc6:	5e                   	pop    esi
c0010fc7:	5f                   	pop    edi
c0010fc8:	5d                   	pop    ebp
c0010fc9:	c3                   	ret    

c0010fca <VgaText::clearScreen()>:
c0010fca:	57                   	push   edi
c0010fcb:	56                   	push   esi
c0010fcc:	31 f6                	xor    esi,esi
c0010fce:	53                   	push   ebx
c0010fcf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010fd3:	52                   	push   edx
c0010fd4:	6a 00                	push   0x0
c0010fd6:	6a 00                	push   0x0
c0010fd8:	53                   	push   ebx
c0010fd9:	e8 cc f8 ff ff       	call   c00108aa <VgaText::setCursor(int, int)>
c0010fde:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010fe5:	83 c4 10             	add    esp,0x10
c0010fe8:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010fee:	7e 26                	jle    c0011016 <VgaText::clearScreen()+0x4c>
c0010ff0:	31 ff                	xor    edi,edi
c0010ff2:	50                   	push   eax
c0010ff3:	50                   	push   eax
c0010ff4:	56                   	push   esi
c0010ff5:	57                   	push   edi
c0010ff6:	47                   	inc    edi
c0010ff7:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010ffd:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0011003:	6a 20                	push   0x20
c0011005:	53                   	push   ebx
c0011006:	e8 27 f8 ff ff       	call   c0010832 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001100b:	83 c4 20             	add    esp,0x20
c001100e:	83 ff 50             	cmp    edi,0x50
c0011011:	75 df                	jne    c0010ff2 <VgaText::clearScreen()+0x28>
c0011013:	46                   	inc    esi
c0011014:	eb d2                	jmp    c0010fe8 <VgaText::clearScreen()+0x1e>
c0011016:	83 ec 0c             	sub    esp,0xc
c0011019:	53                   	push   ebx
c001101a:	e8 d9 fd ff ff       	call   c0010df8 <VgaText::doUpdate()>
c001101f:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0011026:	83 c4 10             	add    esp,0x10
c0011029:	5b                   	pop    ebx
c001102a:	5e                   	pop    esi
c001102b:	5f                   	pop    edi
c001102c:	c3                   	ret    
c001102d:	90                   	nop

c001102e <VgaText::putchar(char)>:
c001102e:	56                   	push   esi
c001102f:	53                   	push   ebx
c0011030:	83 ec 14             	sub    esp,0x14
c0011033:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011037:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001103b:	3c 5b                	cmp    al,0x5b
c001103d:	75 21                	jne    c0011060 <VgaText::putchar(char)+0x32>
c001103f:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0011046:	74 28                	je     c0011070 <VgaText::putchar(char)+0x42>
c0011048:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0011051:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c001105b:	e9 e2 00 00 00       	jmp    c0011142 <VgaText::putchar(char)+0x114>
c0011060:	3c 1b                	cmp    al,0x1b
c0011062:	75 0c                	jne    c0011070 <VgaText::putchar(char)+0x42>
c0011064:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c001106b:	e9 d2 00 00 00       	jmp    c0011142 <VgaText::putchar(char)+0x114>
c0011070:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0011076:	84 c9                	test   cl,cl
c0011078:	0f 84 ab 00 00 00    	je     c0011129 <VgaText::putchar(char)+0xfb>
c001107e:	8d 50 c0             	lea    edx,[eax-0x40]
c0011081:	80 fa 3e             	cmp    dl,0x3e
c0011084:	0f 87 82 00 00 00    	ja     c001110c <VgaText::putchar(char)+0xde>
c001108a:	3c 6d                	cmp    al,0x6d
c001108c:	75 4d                	jne    c00110db <VgaText::putchar(char)+0xad>
c001108e:	31 f6                	xor    esi,esi
c0011090:	31 d2                	xor    edx,edx
c0011092:	31 c0                	xor    eax,eax
c0011094:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c001109a:	7e 30                	jle    c00110cc <VgaText::putchar(char)+0x9e>
c001109c:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c00110a4:	80 fa 3b             	cmp    dl,0x3b
c00110a7:	75 17                	jne    c00110c0 <VgaText::putchar(char)+0x92>
c00110a9:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00110ad:	50                   	push   eax
c00110ae:	53                   	push   ebx
c00110af:	e8 ee f5 ff ff       	call   c00106a2 <VgaText::doANSI_SGR(int)>
c00110b4:	59                   	pop    ecx
c00110b5:	31 d2                	xor    edx,edx
c00110b7:	58                   	pop    eax
c00110b8:	31 c0                	xor    eax,eax
c00110ba:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00110be:	eb 09                	jmp    c00110c9 <VgaText::putchar(char)+0x9b>
c00110c0:	6b c0 0a             	imul   eax,eax,0xa
c00110c3:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00110c7:	88 ca                	mov    dl,cl
c00110c9:	46                   	inc    esi
c00110ca:	eb c8                	jmp    c0011094 <VgaText::putchar(char)+0x66>
c00110cc:	84 d2                	test   dl,dl
c00110ce:	74 31                	je     c0011101 <VgaText::putchar(char)+0xd3>
c00110d0:	50                   	push   eax
c00110d1:	53                   	push   ebx
c00110d2:	e8 cb f5 ff ff       	call   c00106a2 <VgaText::doANSI_SGR(int)>
c00110d7:	58                   	pop    eax
c00110d8:	5a                   	pop    edx
c00110d9:	eb 26                	jmp    c0011101 <VgaText::putchar(char)+0xd3>
c00110db:	3c 4a                	cmp    al,0x4a
c00110dd:	75 22                	jne    c0011101 <VgaText::putchar(char)+0xd3>
c00110df:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c00110e6:	75 19                	jne    c0011101 <VgaText::putchar(char)+0xd3>
c00110e8:	83 ec 0c             	sub    esp,0xc
c00110eb:	53                   	push   ebx
c00110ec:	e8 d9 fe ff ff       	call   c0010fca <VgaText::clearScreen()>
c00110f1:	83 c4 0c             	add    esp,0xc
c00110f4:	6a 00                	push   0x0
c00110f6:	6a 00                	push   0x0
c00110f8:	53                   	push   ebx
c00110f9:	e8 ac f7 ff ff       	call   c00108aa <VgaText::setCursor(int, int)>
c00110fe:	83 c4 10             	add    esp,0x10
c0011101:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c001110a:	eb 36                	jmp    c0011142 <VgaText::putchar(char)+0x114>
c001110c:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0011112:	83 fa 0e             	cmp    edx,0xe
c0011115:	7f 2b                	jg     c0011142 <VgaText::putchar(char)+0x114>
c0011117:	8d 4a 01             	lea    ecx,[edx+0x1]
c001111a:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0011120:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0011127:	eb 19                	jmp    c0011142 <VgaText::putchar(char)+0x114>
c0011129:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c001112f:	0f be c0             	movsx  eax,al
c0011132:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0011138:	50                   	push   eax
c0011139:	53                   	push   ebx
c001113a:	e8 ab fa ff ff       	call   c0010bea <VgaText::putchar(char, VgaColour, VgaColour)>
c001113f:	83 c4 10             	add    esp,0x10
c0011142:	83 c4 14             	add    esp,0x14
c0011145:	5b                   	pop    ebx
c0011146:	5e                   	pop    esi
c0011147:	c3                   	ret    

c0011148 <VgaText::puts(char const*)>:
c0011148:	53                   	push   ebx
c0011149:	83 ec 08             	sub    esp,0x8
c001114c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011150:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0011153:	84 c0                	test   al,al
c0011155:	74 12                	je     c0011169 <VgaText::puts(char const*)+0x21>
c0011157:	43                   	inc    ebx
c0011158:	51                   	push   ecx
c0011159:	51                   	push   ecx
c001115a:	50                   	push   eax
c001115b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001115f:	e8 ca fe ff ff       	call   c001102e <VgaText::putchar(char)>
c0011164:	83 c4 10             	add    esp,0x10
c0011167:	eb e7                	jmp    c0011150 <VgaText::puts(char const*)+0x8>
c0011169:	83 c4 08             	add    esp,0x8
c001116c:	5b                   	pop    ebx
c001116d:	c3                   	ret    

c001116e <VgaText::putx(unsigned int)>:
c001116e:	57                   	push   edi
c001116f:	b9 11 00 00 00       	mov    ecx,0x11
c0011174:	56                   	push   esi
c0011175:	be ea a2 02 c0       	mov    esi,0xc002a2ea
c001117a:	53                   	push   ebx
c001117b:	83 ec 20             	sub    esp,0x20
c001117e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011182:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0011186:	fc                   	cld    
c0011187:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011189:	be 08 00 00 00       	mov    esi,0x8
c001118e:	50                   	push   eax
c001118f:	50                   	push   eax
c0011190:	89 d8                	mov    eax,ebx
c0011192:	c1 e3 04             	shl    ebx,0x4
c0011195:	c1 e8 1c             	shr    eax,0x1c
c0011198:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c001119d:	50                   	push   eax
c001119e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00111a2:	e8 87 fe ff ff       	call   c001102e <VgaText::putchar(char)>
c00111a7:	83 c4 10             	add    esp,0x10
c00111aa:	4e                   	dec    esi
c00111ab:	75 e1                	jne    c001118e <VgaText::putx(unsigned int)+0x20>
c00111ad:	83 c4 20             	add    esp,0x20
c00111b0:	5b                   	pop    ebx
c00111b1:	5e                   	pop    esi
c00111b2:	5f                   	pop    edi
c00111b3:	c3                   	ret    

c00111b4 <VgaText::VgaText(char const*)>:
c00111b4:	57                   	push   edi
c00111b5:	56                   	push   esi
c00111b6:	53                   	push   ebx
c00111b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111bb:	83 ec 08             	sub    esp,0x8
c00111be:	6a 00                	push   0x0
c00111c0:	50                   	push   eax
c00111c1:	e8 6e 05 00 00       	call   c0011734 <UnixFile::UnixFile(int)>
c00111c6:	83 c4 10             	add    esp,0x10
c00111c9:	ba 50 a3 02 c0       	mov    edx,0xc002a350
c00111ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111d2:	89 10                	mov    DWORD PTR [eax],edx
c00111d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111d8:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c00111e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111e6:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c00111f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111f4:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c00111fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ff:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0011206:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001120a:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0011214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011218:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0011222:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011226:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c001122d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011231:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0011238:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001123c:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0011242:	bb 60 e3 02 c0       	mov    ebx,0xc002e360
c0011247:	b8 08 00 00 00       	mov    eax,0x8
c001124c:	fc                   	cld    
c001124d:	89 d7                	mov    edi,edx
c001124f:	89 de                	mov    esi,ebx
c0011251:	89 c1                	mov    ecx,eax
c0011253:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011255:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011259:	05 1e 10 00 00       	add    eax,0x101e
c001125e:	83 ec 08             	sub    esp,0x8
c0011261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011265:	50                   	push   eax
c0011266:	e8 c9 f5 fe ff       	call   c0000834 <strcpy>
c001126b:	83 c4 10             	add    esp,0x10
c001126e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011272:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c001127c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011280:	83 c0 0c             	add    eax,0xc
c0011283:	83 ec 04             	sub    esp,0x4
c0011286:	68 00 0f 00 00       	push   0xf00
c001128b:	6a 00                	push   0x0
c001128d:	50                   	push   eax
c001128e:	e8 e5 f4 fe ff       	call   c0000778 <memset>
c0011293:	83 c4 10             	add    esp,0x10
c0011296:	83 ec 04             	sub    esp,0x4
c0011299:	6a 00                	push   0x0
c001129b:	6a 07                	push   0x7
c001129d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112a1:	e8 b4 f4 ff ff       	call   c001075a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00112a6:	83 c4 10             	add    esp,0x10
c00112a9:	83 ec 08             	sub    esp,0x8
c00112ac:	6a 02                	push   0x2
c00112ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112b2:	e8 49 fa ff ff       	call   c0010d00 <VgaText::setCursorHeight(int)>
c00112b7:	83 c4 10             	add    esp,0x10
c00112ba:	83 ec 04             	sub    esp,0x4
c00112bd:	6a 00                	push   0x0
c00112bf:	6a 00                	push   0x0
c00112c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112c5:	e8 e0 f5 ff ff       	call   c00108aa <VgaText::setCursor(int, int)>
c00112ca:	83 c4 10             	add    esp,0x10
c00112cd:	83 ec 08             	sub    esp,0x8
c00112d0:	6a 01                	push   0x1
c00112d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112d6:	e8 7d f3 ff ff       	call   c0010658 <VgaText::showCursor(bool)>
c00112db:	83 c4 10             	add    esp,0x10
c00112de:	83 ec 08             	sub    esp,0x8
c00112e1:	6a 01                	push   0x1
c00112e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112e7:	e8 7c f3 ff ff       	call   c0010668 <VgaText::disableBlink(bool)>
c00112ec:	83 c4 10             	add    esp,0x10
c00112ef:	83 ec 0c             	sub    esp,0xc
c00112f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112f6:	e8 cf fc ff ff       	call   c0010fca <VgaText::clearScreen()>
c00112fb:	83 c4 10             	add    esp,0x10
c00112fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011302:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0011309:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001130d:	05 9e 10 00 00       	add    eax,0x109e
c0011312:	83 ec 04             	sub    esp,0x4
c0011315:	68 96 00 00 00       	push   0x96
c001131a:	6a 00                	push   0x0
c001131c:	50                   	push   eax
c001131d:	e8 56 f4 fe ff       	call   c0000778 <memset>
c0011322:	83 c4 10             	add    esp,0x10
c0011325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011329:	05 34 11 00 00       	add    eax,0x1134
c001132e:	83 ec 04             	sub    esp,0x4
c0011331:	68 2c 01 00 00       	push   0x12c
c0011336:	6a 00                	push   0x0
c0011338:	50                   	push   eax
c0011339:	e8 3a f4 fe ff       	call   c0000778 <memset>
c001133e:	83 c4 10             	add    esp,0x10
c0011341:	90                   	nop
c0011342:	5b                   	pop    ebx
c0011343:	5e                   	pop    esi
c0011344:	5f                   	pop    edi
c0011345:	c3                   	ret    

c0011346 <VgaText::receiveKey(unsigned char)>:
c0011346:	55                   	push   ebp
c0011347:	57                   	push   edi
c0011348:	56                   	push   esi
c0011349:	53                   	push   ebx
c001134a:	83 ec 1c             	sub    esp,0x1c
c001134d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011351:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011355:	84 db                	test   bl,bl
c0011357:	0f 84 c9 00 00 00    	je     c0011426 <VgaText::receiveKey(unsigned char)+0xe0>
c001135d:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0011363:	80 fb 08             	cmp    bl,0x8
c0011366:	75 2c                	jne    c0011394 <VgaText::receiveKey(unsigned char)+0x4e>
c0011368:	83 ec 0c             	sub    esp,0xc
c001136b:	57                   	push   edi
c001136c:	e8 23 f4 fe ff       	call   c0000794 <strlen>
c0011371:	83 c4 10             	add    esp,0x10
c0011374:	85 c0                	test   eax,eax
c0011376:	74 41                	je     c00113b9 <VgaText::receiveKey(unsigned char)+0x73>
c0011378:	50                   	push   eax
c0011379:	50                   	push   eax
c001137a:	6a 08                	push   0x8
c001137c:	56                   	push   esi
c001137d:	e8 ac fc ff ff       	call   c001102e <VgaText::putchar(char)>
c0011382:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011385:	e8 0a f4 fe ff       	call   c0000794 <strlen>
c001138a:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0011392:	eb 22                	jmp    c00113b6 <VgaText::receiveKey(unsigned char)+0x70>
c0011394:	0f be c3             	movsx  eax,bl
c0011397:	52                   	push   edx
c0011398:	52                   	push   edx
c0011399:	50                   	push   eax
c001139a:	56                   	push   esi
c001139b:	e8 8e fc ff ff       	call   c001102e <VgaText::putchar(char)>
c00113a0:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c00113a4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00113a9:	59                   	pop    ecx
c00113aa:	5d                   	pop    ebp
c00113ab:	8d 44 24 16          	lea    eax,[esp+0x16]
c00113af:	50                   	push   eax
c00113b0:	57                   	push   edi
c00113b1:	e8 be f5 fe ff       	call   c0000974 <strcat>
c00113b6:	83 c4 10             	add    esp,0x10
c00113b9:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c00113c0:	75 05                	jne    c00113c7 <VgaText::receiveKey(unsigned char)+0x81>
c00113c2:	80 fb 0a             	cmp    bl,0xa
c00113c5:	75 53                	jne    c001141a <VgaText::receiveKey(unsigned char)+0xd4>
c00113c7:	83 ec 0c             	sub    esp,0xc
c00113ca:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c00113d0:	53                   	push   ebx
c00113d1:	e8 be f3 fe ff       	call   c0000794 <strlen>
c00113d6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113d9:	89 c5                	mov    ebp,eax
c00113db:	e8 b4 f3 fe ff       	call   c0000794 <strlen>
c00113e0:	83 c4 10             	add    esp,0x10
c00113e3:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c00113e7:	3d 2c 01 00 00       	cmp    eax,0x12c
c00113ec:	76 10                	jbe    c00113fe <VgaText::receiveKey(unsigned char)+0xb8>
c00113ee:	83 ec 0c             	sub    esp,0xc
c00113f1:	68 fb a2 02 c0       	push   0xc002a2fb
c00113f6:	e8 b4 90 00 00       	call   c001a4af <Krnl::panic(char const*)>
c00113fb:	83 c4 10             	add    esp,0x10
c00113fe:	50                   	push   eax
c00113ff:	50                   	push   eax
c0011400:	57                   	push   edi
c0011401:	53                   	push   ebx
c0011402:	e8 6d f5 fe ff       	call   c0000974 <strcat>
c0011407:	83 c4 0c             	add    esp,0xc
c001140a:	68 96 00 00 00       	push   0x96
c001140f:	6a 00                	push   0x0
c0011411:	57                   	push   edi
c0011412:	e8 61 f3 fe ff       	call   c0000778 <memset>
c0011417:	83 c4 10             	add    esp,0x10
c001141a:	83 ec 0c             	sub    esp,0xc
c001141d:	56                   	push   esi
c001141e:	e8 d5 f9 ff ff       	call   c0010df8 <VgaText::doUpdate()>
c0011423:	83 c4 10             	add    esp,0x10
c0011426:	83 c4 1c             	add    esp,0x1c
c0011429:	5b                   	pop    ebx
c001142a:	5e                   	pop    esi
c001142b:	5f                   	pop    edi
c001142c:	5d                   	pop    ebp
c001142d:	c3                   	ret    

c001142e <VgaText::write(unsigned long long, void*, int*)>:
c001142e:	55                   	push   ebp
c001142f:	57                   	push   edi
c0011430:	56                   	push   esi
c0011431:	53                   	push   ebx
c0011432:	83 ec 0c             	sub    esp,0xc
c0011435:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011439:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001143d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011441:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0011448:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c001144b:	39 eb                	cmp    ebx,ebp
c001144d:	74 13                	je     c0011462 <VgaText::write(unsigned long long, void*, int*)+0x34>
c001144f:	43                   	inc    ebx
c0011450:	50                   	push   eax
c0011451:	50                   	push   eax
c0011452:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0011456:	50                   	push   eax
c0011457:	56                   	push   esi
c0011458:	e8 d1 fb ff ff       	call   c001102e <VgaText::putchar(char)>
c001145d:	83 c4 10             	add    esp,0x10
c0011460:	eb e9                	jmp    c001144b <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0011462:	83 ec 0c             	sub    esp,0xc
c0011465:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c001146c:	56                   	push   esi
c001146d:	e8 86 f9 ff ff       	call   c0010df8 <VgaText::doUpdate()>
c0011472:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011476:	89 38                	mov    DWORD PTR [eax],edi
c0011478:	83 c4 1c             	add    esp,0x1c
c001147b:	31 c0                	xor    eax,eax
c001147d:	5b                   	pop    ebx
c001147e:	5e                   	pop    esi
c001147f:	5f                   	pop    edi
c0011480:	5d                   	pop    ebp
c0011481:	c3                   	ret    

c0011482 <newTerminal(char*)>:
c0011482:	83 ec 28             	sub    esp,0x28
c0011485:	68 60 12 00 00       	push   0x1260
c001148a:	e8 b1 e3 ff ff       	call   c000f840 <malloc>
c001148f:	5a                   	pop    edx
c0011490:	59                   	pop    ecx
c0011491:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011495:	50                   	push   eax
c0011496:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001149a:	e8 15 fd ff ff       	call   c00111b4 <VgaText::VgaText(char const*)>
c001149f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114a3:	83 c4 2c             	add    esp,0x2c
c00114a6:	c3                   	ret    
c00114a7:	90                   	nop

c00114a8 <TSS::TSS()>:
c00114a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114ac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00114b3:	90                   	nop
c00114b4:	c3                   	ret    
c00114b5:	90                   	nop

c00114b6 <TSS::setESP(unsigned long)>:
c00114b6:	55                   	push   ebp
c00114b7:	89 e5                	mov    ebp,esp
c00114b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114bf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00114c2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114c5:	90                   	nop
c00114c6:	5d                   	pop    ebp
c00114c7:	c3                   	ret    

c00114c8 <TSS::flush()>:
c00114c8:	55                   	push   ebp
c00114c9:	89 e5                	mov    ebp,esp
c00114cb:	83 ec 10             	sub    esp,0x10
c00114ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00114d3:	83 c8 03             	or     eax,0x3
c00114d6:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00114da:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00114de:	66 89 d0             	mov    ax,dx
c00114e1:	0f 00 d8             	ltr    ax
c00114e4:	90                   	nop
c00114e5:	c9                   	leave  
c00114e6:	c3                   	ret    
c00114e7:	90                   	nop

c00114e8 <TSS::setup(unsigned long, unsigned long)>:
c00114e8:	55                   	push   ebp
c00114e9:	89 e5                	mov    ebp,esp
c00114eb:	83 ec 18             	sub    esp,0x18
c00114ee:	83 ec 0c             	sub    esp,0xc
c00114f1:	6a 68                	push   0x68
c00114f3:	e8 48 e3 ff ff       	call   c000f840 <malloc>
c00114f8:	83 c4 10             	add    esp,0x10
c00114fb:	89 c2                	mov    edx,eax
c00114fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011500:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011503:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011506:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011509:	83 ec 04             	sub    esp,0x4
c001150c:	6a 68                	push   0x68
c001150e:	6a 00                	push   0x0
c0011510:	50                   	push   eax
c0011511:	e8 62 f2 fe ff       	call   c0000778 <memset>
c0011516:	83 c4 10             	add    esp,0x10
c0011519:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001151c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001151f:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0011525:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011528:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001152b:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011531:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011534:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011537:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001153a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001153d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011540:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011543:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011549:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001154c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001154f:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011555:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011558:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001155b:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011561:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011564:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011567:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c001156d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011570:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011573:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011579:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001157c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001157f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011585:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011588:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001158b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001158e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011591:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011594:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011597:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001159a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001159d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115a3:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00115aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115ad:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115b0:	0f 20 da             	mov    edx,cr3
c00115b3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00115b6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00115b9:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00115bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115bf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115c2:	83 ec 08             	sub    esp,0x8
c00115c5:	50                   	push   eax
c00115c6:	8d 45 ec             	lea    eax,[ebp-0x14]
c00115c9:	50                   	push   eax
c00115ca:	e8 4f da ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c00115cf:	83 c4 10             	add    esp,0x10
c00115d2:	83 ec 08             	sub    esp,0x8
c00115d5:	6a 68                	push   0x68
c00115d7:	8d 45 ec             	lea    eax,[ebp-0x14]
c00115da:	50                   	push   eax
c00115db:	e8 5a da ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c00115e0:	83 c4 10             	add    esp,0x10
c00115e3:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00115e7:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00115ea:	83 e0 0f             	and    eax,0xf
c00115ed:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00115f0:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00115f3:	83 c8 40             	or     eax,0x40
c00115f6:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00115f9:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c00115fe:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011604:	05 78 01 00 00       	add    eax,0x178
c0011609:	83 ec 04             	sub    esp,0x4
c001160c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001160f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011612:	50                   	push   eax
c0011613:	e8 56 da ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c0011618:	83 c4 10             	add    esp,0x10
c001161b:	89 c2                	mov    edx,eax
c001161d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011620:	89 10                	mov    DWORD PTR [eax],edx
c0011622:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c0011627:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001162d:	05 78 01 00 00       	add    eax,0x178
c0011632:	83 ec 0c             	sub    esp,0xc
c0011635:	50                   	push   eax
c0011636:	e8 77 da ff ff       	call   c000f0b2 <GDT::flush()>
c001163b:	83 c4 10             	add    esp,0x10
c001163e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011641:	8b 00                	mov    eax,DWORD PTR [eax]
c0011643:	83 ec 08             	sub    esp,0x8
c0011646:	50                   	push   eax
c0011647:	68 64 a3 02 c0       	push   0xc002a364
c001164c:	e8 83 17 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0011651:	83 c4 10             	add    esp,0x10
c0011654:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011657:	8b 00                	mov    eax,DWORD PTR [eax]
c0011659:	c9                   	leave  
c001165a:	c3                   	ret    
c001165b:	90                   	nop

c001165c <ReservedFilename::read(unsigned long long, void*, int*)>:
c001165c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011660:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011664:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011667:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001166c:	75 08                	jne    c0011676 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c001166e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011674:	eb 38                	jmp    c00116ae <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011676:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001167b:	75 17                	jne    c0011694 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c001167d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011682:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011685:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001168b:	8b 10                	mov    edx,DWORD PTR [eax]
c001168d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011691:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011694:	89 c1                	mov    ecx,eax
c0011696:	83 e1 fd             	and    ecx,0xfffffffd
c0011699:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c001169f:	74 cd                	je     c001166e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116a1:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00116a6:	83 e0 ef             	and    eax,0xffffffef
c00116a9:	83 f8 08             	cmp    eax,0x8
c00116ac:	76 c0                	jbe    c001166e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116ae:	31 c0                	xor    eax,eax
c00116b0:	c3                   	ret    
c00116b1:	90                   	nop

c00116b2 <ReservedFilename::isAtty()>:
c00116b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116b6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00116b9:	31 c0                	xor    eax,eax
c00116bb:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00116c1:	74 09                	je     c00116cc <ReservedFilename::isAtty()+0x1a>
c00116c3:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00116c9:	0f 94 c0             	sete   al
c00116cc:	c3                   	ret    
c00116cd:	90                   	nop

c00116ce <ReservedFilename::write(unsigned long long, void*, int*)>:
c00116ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116d2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00116d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116d9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00116dd:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00116e2:	75 08                	jne    c00116ec <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00116e4:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00116ea:	eb 3d                	jmp    c0011729 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00116ec:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00116f1:	75 17                	jne    c001170a <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00116f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116f8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116fb:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c0011701:	8b 10                	mov    edx,DWORD PTR [eax]
c0011703:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011707:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c001170a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001170f:	75 04                	jne    c0011715 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011711:	89 0a                	mov    DWORD PTR [edx],ecx
c0011713:	eb 14                	jmp    c0011729 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011715:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c001171a:	74 c8                	je     c00116e4 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001171c:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011721:	83 e0 ef             	and    eax,0xffffffef
c0011724:	83 f8 08             	cmp    eax,0x8
c0011727:	76 bb                	jbe    c00116e4 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011729:	31 c0                	xor    eax,eax
c001172b:	c3                   	ret    

c001172c <UnixFile::getFileDescriptor()>:
c001172c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011730:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011733:	c3                   	ret    

c0011734 <UnixFile::UnixFile(int)>:
c0011734:	53                   	push   ebx
c0011735:	83 ec 28             	sub    esp,0x28
c0011738:	ba 50 a4 02 c0       	mov    edx,0xc002a450
c001173d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011741:	89 10                	mov    DWORD PTR [eax],edx
c0011743:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c001174b:	0f 8f 8c 01 00 00    	jg     c00118dd <UnixFile::UnixFile(int)+0x1a9>
c0011751:	a1 40 d2 02 c0       	mov    eax,ds:0xc002d240
c0011756:	8d 50 01             	lea    edx,[eax+0x1]
c0011759:	89 15 40 d2 02 c0    	mov    DWORD PTR ds:0xc002d240,edx
c001175f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011763:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011766:	83 ec 08             	sub    esp,0x8
c0011769:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001176d:	68 18 e4 02 c0       	push   0xc002e418
c0011772:	e8 a9 6e 01 00       	call   c0028620 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011777:	83 c4 10             	add    esp,0x10
c001177a:	a0 14 e4 02 c0       	mov    al,ds:0xc002e414
c001177f:	83 f0 01             	xor    eax,0x1
c0011782:	84 c0                	test   al,al
c0011784:	0f 84 54 01 00 00    	je     c00118de <UnixFile::UnixFile(int)+0x1aa>
c001178a:	c6 05 14 e4 02 c0 01 	mov    BYTE PTR ds:0xc002e414,0x1
c0011791:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011799:	83 ec 0c             	sub    esp,0xc
c001179c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00117a0:	e8 9b e0 ff ff       	call   c000f840 <malloc>
c00117a5:	83 c4 10             	add    esp,0x10
c00117a8:	89 c3                	mov    ebx,eax
c00117aa:	83 ec 08             	sub    esp,0x8
c00117ad:	68 03 ff ff 0f       	push   0xfffff03
c00117b2:	53                   	push   ebx
c00117b3:	e8 2c 01 00 00       	call   c00118e4 <ReservedFilename::ReservedFilename(int)>
c00117b8:	83 c4 10             	add    esp,0x10
c00117bb:	89 1d 0c e4 02 c0    	mov    DWORD PTR ds:0xc002e40c,ebx
c00117c1:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00117c9:	83 ec 0c             	sub    esp,0xc
c00117cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117d0:	e8 6b e0 ff ff       	call   c000f840 <malloc>
c00117d5:	83 c4 10             	add    esp,0x10
c00117d8:	89 c3                	mov    ebx,eax
c00117da:	83 ec 08             	sub    esp,0x8
c00117dd:	68 01 ff ff 0f       	push   0xfffff01
c00117e2:	53                   	push   ebx
c00117e3:	e8 fc 00 00 00       	call   c00118e4 <ReservedFilename::ReservedFilename(int)>
c00117e8:	83 c4 10             	add    esp,0x10
c00117eb:	89 1d 10 e4 02 c0    	mov    DWORD PTR ds:0xc002e410,ebx
c00117f1:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00117f9:	83 ec 0c             	sub    esp,0xc
c00117fc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011800:	e8 3b e0 ff ff       	call   c000f840 <malloc>
c0011805:	83 c4 10             	add    esp,0x10
c0011808:	89 c3                	mov    ebx,eax
c001180a:	83 ec 08             	sub    esp,0x8
c001180d:	68 00 ff ff 0f       	push   0xfffff00
c0011812:	53                   	push   ebx
c0011813:	e8 cc 00 00 00       	call   c00118e4 <ReservedFilename::ReservedFilename(int)>
c0011818:	83 c4 10             	add    esp,0x10
c001181b:	89 1d 04 e4 02 c0    	mov    DWORD PTR ds:0xc002e404,ebx
c0011821:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011829:	83 ec 0c             	sub    esp,0xc
c001182c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011830:	e8 0b e0 ff ff       	call   c000f840 <malloc>
c0011835:	83 c4 10             	add    esp,0x10
c0011838:	89 c3                	mov    ebx,eax
c001183a:	83 ec 08             	sub    esp,0x8
c001183d:	68 02 ff ff 0f       	push   0xfffff02
c0011842:	53                   	push   ebx
c0011843:	e8 9c 00 00 00       	call   c00118e4 <ReservedFilename::ReservedFilename(int)>
c0011848:	83 c4 10             	add    esp,0x10
c001184b:	89 1d 08 e4 02 c0    	mov    DWORD PTR ds:0xc002e408,ebx
c0011851:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011859:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c001185e:	7f 7e                	jg     c00118de <UnixFile::UnixFile(int)+0x1aa>
c0011860:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011868:	83 ec 0c             	sub    esp,0xc
c001186b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001186f:	e8 cc df ff ff       	call   c000f840 <malloc>
c0011874:	83 c4 10             	add    esp,0x10
c0011877:	89 c3                	mov    ebx,eax
c0011879:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001187d:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011882:	83 ec 08             	sub    esp,0x8
c0011885:	50                   	push   eax
c0011886:	53                   	push   ebx
c0011887:	e8 58 00 00 00       	call   c00118e4 <ReservedFilename::ReservedFilename(int)>
c001188c:	83 c4 10             	add    esp,0x10
c001188f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011893:	89 1c 85 e0 e3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1c20],ebx
c001189a:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00118a2:	83 ec 0c             	sub    esp,0xc
c00118a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00118a9:	e8 92 df ff ff       	call   c000f840 <malloc>
c00118ae:	83 c4 10             	add    esp,0x10
c00118b1:	89 c3                	mov    ebx,eax
c00118b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118b7:	05 20 ff ff 0f       	add    eax,0xfffff20
c00118bc:	83 ec 08             	sub    esp,0x8
c00118bf:	50                   	push   eax
c00118c0:	53                   	push   ebx
c00118c1:	e8 1e 00 00 00       	call   c00118e4 <ReservedFilename::ReservedFilename(int)>
c00118c6:	83 c4 10             	add    esp,0x10
c00118c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118cd:	89 1c 85 a0 e3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1c60],ebx
c00118d4:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118d8:	e9 7c ff ff ff       	jmp    c0011859 <UnixFile::UnixFile(int)+0x125>
c00118dd:	90                   	nop
c00118de:	83 c4 28             	add    esp,0x28
c00118e1:	5b                   	pop    ebx
c00118e2:	c3                   	ret    
c00118e3:	90                   	nop

c00118e4 <ReservedFilename::ReservedFilename(int)>:
c00118e4:	83 ec 0c             	sub    esp,0xc
c00118e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118eb:	83 ec 08             	sub    esp,0x8
c00118ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118f2:	50                   	push   eax
c00118f3:	e8 3c fe ff ff       	call   c0011734 <UnixFile::UnixFile(int)>
c00118f8:	83 c4 10             	add    esp,0x10
c00118fb:	ba 6c a4 02 c0       	mov    edx,0xc002a46c
c0011900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011904:	89 10                	mov    DWORD PTR [eax],edx
c0011906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001190a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001190e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011911:	90                   	nop
c0011912:	83 c4 0c             	add    esp,0xc
c0011915:	c3                   	ret    

c0011916 <UnixFile::~UnixFile()>:
c0011916:	83 ec 1c             	sub    esp,0x1c
c0011919:	ba 50 a4 02 c0       	mov    edx,0xc002a450
c001191e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011922:	89 10                	mov    DWORD PTR [eax],edx
c0011924:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011928:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001192b:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011930:	7f 73                	jg     c00119a5 <UnixFile::~UnixFile()+0x8f>
c0011932:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001193a:	83 ec 0c             	sub    esp,0xc
c001193d:	68 18 e4 02 c0       	push   0xc002e418
c0011942:	e8 ad 6d 01 00       	call   c00286f4 <LinkedList<UnixFile>::getFirstElement()>
c0011947:	83 c4 10             	add    esp,0x10
c001194a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001194e:	83 ec 0c             	sub    esp,0xc
c0011951:	68 18 e4 02 c0       	push   0xc002e418
c0011956:	e8 a1 6d 01 00       	call   c00286fc <LinkedList<UnixFile>::removeFirst()>
c001195b:	83 c4 10             	add    esp,0x10
c001195e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011962:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011966:	74 40                	je     c00119a8 <UnixFile::~UnixFile()+0x92>
c0011968:	83 ec 08             	sub    esp,0x8
c001196b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001196f:	68 18 e4 02 c0       	push   0xc002e418
c0011974:	e8 a7 6c 01 00       	call   c0028620 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011979:	83 c4 10             	add    esp,0x10
c001197c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011980:	8d 50 01             	lea    edx,[eax+0x1]
c0011983:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011987:	3d 88 13 00 00       	cmp    eax,0x1388
c001198c:	0f 94 c0             	sete   al
c001198f:	84 c0                	test   al,al
c0011991:	74 a7                	je     c001193a <UnixFile::~UnixFile()+0x24>
c0011993:	83 ec 0c             	sub    esp,0xc
c0011996:	68 28 a4 02 c0       	push   0xc002a428
c001199b:	e8 0f 8b 00 00       	call   c001a4af <Krnl::panic(char const*)>
c00119a0:	83 c4 10             	add    esp,0x10
c00119a3:	eb 95                	jmp    c001193a <UnixFile::~UnixFile()+0x24>
c00119a5:	90                   	nop
c00119a6:	eb 01                	jmp    c00119a9 <UnixFile::~UnixFile()+0x93>
c00119a8:	90                   	nop
c00119a9:	90                   	nop
c00119aa:	83 c4 1c             	add    esp,0x1c
c00119ad:	c3                   	ret    

c00119ae <UnixFile::~UnixFile()>:
c00119ae:	83 ec 0c             	sub    esp,0xc
c00119b1:	83 ec 0c             	sub    esp,0xc
c00119b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119b8:	e8 59 ff ff ff       	call   c0011916 <UnixFile::~UnixFile()>
c00119bd:	83 c4 10             	add    esp,0x10
c00119c0:	83 ec 08             	sub    esp,0x8
c00119c3:	6a 0c                	push   0xc
c00119c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119c9:	e8 26 13 00 00       	call   c0012cf4 <operator delete(void*, unsigned long)>
c00119ce:	83 c4 10             	add    esp,0x10
c00119d1:	83 c4 0c             	add    esp,0xc
c00119d4:	c3                   	ret    
c00119d5:	90                   	nop

c00119d6 <ReservedFilename::~ReservedFilename()>:
c00119d6:	83 ec 0c             	sub    esp,0xc
c00119d9:	ba 6c a4 02 c0       	mov    edx,0xc002a46c
c00119de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119e2:	89 10                	mov    DWORD PTR [eax],edx
c00119e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119e8:	83 ec 0c             	sub    esp,0xc
c00119eb:	50                   	push   eax
c00119ec:	e8 25 ff ff ff       	call   c0011916 <UnixFile::~UnixFile()>
c00119f1:	83 c4 10             	add    esp,0x10
c00119f4:	90                   	nop
c00119f5:	83 c4 0c             	add    esp,0xc
c00119f8:	c3                   	ret    
c00119f9:	90                   	nop

c00119fa <ReservedFilename::~ReservedFilename()>:
c00119fa:	83 ec 0c             	sub    esp,0xc
c00119fd:	83 ec 0c             	sub    esp,0xc
c0011a00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a04:	e8 cd ff ff ff       	call   c00119d6 <ReservedFilename::~ReservedFilename()>
c0011a09:	83 c4 10             	add    esp,0x10
c0011a0c:	83 ec 08             	sub    esp,0x8
c0011a0f:	6a 0c                	push   0xc
c0011a11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a15:	e8 da 12 00 00       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0011a1a:	83 c4 10             	add    esp,0x10
c0011a1d:	83 c4 0c             	add    esp,0xc
c0011a20:	c3                   	ret    

c0011a21 <getFromFileDescriptor(int)>:
c0011a21:	53                   	push   ebx
c0011a22:	83 ec 08             	sub    esp,0x8
c0011a25:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011a29:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011a2f:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011a35:	7f 2c                	jg     c0011a63 <getFromFileDescriptor(int)+0x42>
c0011a37:	83 ec 0c             	sub    esp,0xc
c0011a3a:	68 18 e4 02 c0       	push   0xc002e418
c0011a3f:	e8 b0 6c 01 00       	call   c00286f4 <LinkedList<UnixFile>::getFirstElement()>
c0011a44:	83 c4 10             	add    esp,0x10
c0011a47:	85 c0                	test   eax,eax
c0011a49:	75 04                	jne    c0011a4f <getFromFileDescriptor(int)+0x2e>
c0011a4b:	31 c0                	xor    eax,eax
c0011a4d:	eb 6e                	jmp    c0011abd <getFromFileDescriptor(int)+0x9c>
c0011a4f:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011a52:	74 69                	je     c0011abd <getFromFileDescriptor(int)+0x9c>
c0011a54:	52                   	push   edx
c0011a55:	52                   	push   edx
c0011a56:	50                   	push   eax
c0011a57:	68 18 e4 02 c0       	push   0xc002e418
c0011a5c:	e8 3d 6d 01 00       	call   c002879e <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011a61:	eb e1                	jmp    c0011a44 <getFromFileDescriptor(int)+0x23>
c0011a63:	a1 0c e4 02 c0       	mov    eax,ds:0xc002e40c
c0011a68:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011a6e:	74 4d                	je     c0011abd <getFromFileDescriptor(int)+0x9c>
c0011a70:	a1 10 e4 02 c0       	mov    eax,ds:0xc002e410
c0011a75:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011a7b:	74 40                	je     c0011abd <getFromFileDescriptor(int)+0x9c>
c0011a7d:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0011a82:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011a88:	74 33                	je     c0011abd <getFromFileDescriptor(int)+0x9c>
c0011a8a:	a1 04 e4 02 c0       	mov    eax,ds:0xc002e404
c0011a8f:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011a95:	74 26                	je     c0011abd <getFromFileDescriptor(int)+0x9c>
c0011a97:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011a9d:	83 f8 08             	cmp    eax,0x8
c0011aa0:	77 09                	ja     c0011aab <getFromFileDescriptor(int)+0x8a>
c0011aa2:	8b 04 85 e0 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1c20]
c0011aa9:	eb 12                	jmp    c0011abd <getFromFileDescriptor(int)+0x9c>
c0011aab:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011ab1:	83 fb 08             	cmp    ebx,0x8
c0011ab4:	77 95                	ja     c0011a4b <getFromFileDescriptor(int)+0x2a>
c0011ab6:	8b 04 9d a0 e3 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1c60]
c0011abd:	83 c4 08             	add    esp,0x8
c0011ac0:	5b                   	pop    ebx
c0011ac1:	c3                   	ret    

c0011ac2 <__static_initialization_and_destruction_0(int, int)>:
c0011ac2:	83 ec 0c             	sub    esp,0xc
c0011ac5:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011aca:	75 34                	jne    c0011b00 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011acc:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011ad4:	75 2a                	jne    c0011b00 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011ad6:	83 ec 0c             	sub    esp,0xc
c0011ad9:	68 18 e4 02 c0       	push   0xc002e418
c0011ade:	e8 e5 6a 01 00       	call   c00285c8 <LinkedList<UnixFile>::LinkedList()>
c0011ae3:	83 c4 10             	add    esp,0x10
c0011ae6:	83 ec 04             	sub    esp,0x4
c0011ae9:	68 d4 d1 02 c0       	push   0xc002d1d4
c0011aee:	68 18 e4 02 c0       	push   0xc002e418
c0011af3:	68 c6 85 02 c0       	push   0xc00285c6
c0011af8:	e8 71 11 00 00       	call   c0012c6e <__cxa_atexit>
c0011afd:	83 c4 10             	add    esp,0x10
c0011b00:	90                   	nop
c0011b01:	83 c4 0c             	add    esp,0xc
c0011b04:	c3                   	ret    

c0011b05 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011b05:	83 ec 0c             	sub    esp,0xc
c0011b08:	83 ec 08             	sub    esp,0x8
c0011b0b:	68 ff ff 00 00       	push   0xffff
c0011b10:	6a 01                	push   0x1
c0011b12:	e8 ab ff ff ff       	call   c0011ac2 <__static_initialization_and_destruction_0(int, int)>
c0011b17:	83 c4 10             	add    esp,0x10
c0011b1a:	83 c4 0c             	add    esp,0xc
c0011b1d:	c3                   	ret    

c0011b1e <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011b1e:	53                   	push   ebx
c0011b1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011b23:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b27:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011b2d:	89 c8                	mov    eax,ecx
c0011b2f:	d1 e8                	shr    eax,1
c0011b31:	03 05 48 d2 02 c0    	add    eax,DWORD PTR ds:0xc002d248
c0011b37:	83 e1 01             	and    ecx,0x1
c0011b3a:	8a 10                	mov    dl,BYTE PTR [eax]
c0011b3c:	75 09                	jne    c0011b47 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011b3e:	83 e2 f0             	and    edx,0xfffffff0
c0011b41:	09 da                	or     edx,ebx
c0011b43:	88 10                	mov    BYTE PTR [eax],dl
c0011b45:	5b                   	pop    ebx
c0011b46:	c3                   	ret    
c0011b47:	c1 e3 04             	shl    ebx,0x4
c0011b4a:	83 e2 0f             	and    edx,0xf
c0011b4d:	09 da                	or     edx,ebx
c0011b4f:	88 10                	mov    BYTE PTR [eax],dl
c0011b51:	5b                   	pop    ebx
c0011b52:	c3                   	ret    

c0011b53 <Virt::getPageState(unsigned long)>:
c0011b53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b57:	8b 0d 48 d2 02 c0    	mov    ecx,DWORD PTR ds:0xc002d248
c0011b5d:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011b63:	89 d0                	mov    eax,edx
c0011b65:	d1 e8                	shr    eax,1
c0011b67:	83 e2 01             	and    edx,0x1
c0011b6a:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011b6d:	75 04                	jne    c0011b73 <Virt::getPageState(unsigned long)+0x20>
c0011b6f:	83 e0 0f             	and    eax,0xf
c0011b72:	c3                   	ret    
c0011b73:	c0 e8 04             	shr    al,0x4
c0011b76:	c3                   	ret    

c0011b77 <Virt::allocateKernelVirtualPages(int)>:
c0011b77:	55                   	push   ebp
c0011b78:	31 ed                	xor    ebp,ebp
c0011b7a:	57                   	push   edi
c0011b7b:	56                   	push   esi
c0011b7c:	53                   	push   ebx
c0011b7d:	31 db                	xor    ebx,ebx
c0011b7f:	83 ec 1c             	sub    esp,0x1c
c0011b82:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011b86:	8b 3d 44 d2 02 c0    	mov    edi,DWORD PTR ds:0xc002d244
c0011b8c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011b91:	57                   	push   edi
c0011b92:	e8 bc ff ff ff       	call   c0011b53 <Virt::getPageState(unsigned long)>
c0011b97:	5a                   	pop    edx
c0011b98:	84 c0                	test   al,al
c0011b9a:	75 3a                	jne    c0011bd6 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011b9c:	85 db                	test   ebx,ebx
c0011b9e:	75 02                	jne    c0011ba2 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011ba0:	89 fd                	mov    ebp,edi
c0011ba2:	43                   	inc    ebx
c0011ba3:	39 f3                	cmp    ebx,esi
c0011ba5:	74 5a                	je     c0011c01 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011ba7:	47                   	inc    edi
c0011ba8:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011bae:	76 31                	jbe    c0011be1 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011bb0:	c7 05 44 d2 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d244,0xc8000
c0011bba:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011bbf:	75 28                	jne    c0011be9 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011bc1:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011bc6:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011bcb:	57                   	push   edi
c0011bcc:	e8 82 ff ff ff       	call   c0011b53 <Virt::getPageState(unsigned long)>
c0011bd1:	5a                   	pop    edx
c0011bd2:	84 c0                	test   al,al
c0011bd4:	74 c6                	je     c0011b9c <Virt::allocateKernelVirtualPages(int)+0x25>
c0011bd6:	31 db                	xor    ebx,ebx
c0011bd8:	47                   	inc    edi
c0011bd9:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011bdf:	77 cf                	ja     c0011bb0 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011be1:	89 3d 44 d2 02 c0    	mov    DWORD PTR ds:0xc002d244,edi
c0011be7:	eb a8                	jmp    c0011b91 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011be9:	83 ec 0c             	sub    esp,0xc
c0011bec:	68 80 a4 02 c0       	push   0xc002a480
c0011bf1:	e8 b9 88 00 00       	call   c001a4af <Krnl::panic(char const*)>
c0011bf6:	8b 3d 44 d2 02 c0    	mov    edi,DWORD PTR ds:0xc002d244
c0011bfc:	83 c4 10             	add    esp,0x10
c0011bff:	eb 90                	jmp    c0011b91 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011c01:	89 2d 44 d2 02 c0    	mov    DWORD PTR ds:0xc002d244,ebp
c0011c07:	4b                   	dec    ebx
c0011c08:	74 5f                	je     c0011c69 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011c0a:	85 f6                	test   esi,esi
c0011c0c:	74 3d                	je     c0011c4b <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c0e:	89 e8                	mov    eax,ebp
c0011c10:	31 db                	xor    ebx,ebx
c0011c12:	8d 7e ff             	lea    edi,[esi-0x1]
c0011c15:	eb 14                	jmp    c0011c2b <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011c17:	6a 01                	push   0x1
c0011c19:	43                   	inc    ebx
c0011c1a:	50                   	push   eax
c0011c1b:	e8 fe fe ff ff       	call   c0011b1e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c20:	58                   	pop    eax
c0011c21:	39 f3                	cmp    ebx,esi
c0011c23:	5a                   	pop    edx
c0011c24:	74 25                	je     c0011c4b <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c26:	a1 44 d2 02 c0       	mov    eax,ds:0xc002d244
c0011c2b:	8d 50 01             	lea    edx,[eax+0x1]
c0011c2e:	85 db                	test   ebx,ebx
c0011c30:	89 15 44 d2 02 c0    	mov    DWORD PTR ds:0xc002d244,edx
c0011c36:	74 20                	je     c0011c58 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011c38:	39 df                	cmp    edi,ebx
c0011c3a:	75 db                	jne    c0011c17 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011c3c:	6a 03                	push   0x3
c0011c3e:	43                   	inc    ebx
c0011c3f:	50                   	push   eax
c0011c40:	e8 d9 fe ff ff       	call   c0011b1e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c45:	59                   	pop    ecx
c0011c46:	39 f3                	cmp    ebx,esi
c0011c48:	58                   	pop    eax
c0011c49:	75 db                	jne    c0011c26 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c4b:	83 c4 1c             	add    esp,0x1c
c0011c4e:	89 e8                	mov    eax,ebp
c0011c50:	5b                   	pop    ebx
c0011c51:	c1 e0 0c             	shl    eax,0xc
c0011c54:	5e                   	pop    esi
c0011c55:	5f                   	pop    edi
c0011c56:	5d                   	pop    ebp
c0011c57:	c3                   	ret    
c0011c58:	6a 02                	push   0x2
c0011c5a:	bb 01 00 00 00       	mov    ebx,0x1
c0011c5f:	50                   	push   eax
c0011c60:	e8 b9 fe ff ff       	call   c0011b1e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c65:	58                   	pop    eax
c0011c66:	5a                   	pop    edx
c0011c67:	eb bd                	jmp    c0011c26 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c69:	6a 04                	push   0x4
c0011c6b:	8d 45 01             	lea    eax,[ebp+0x1]
c0011c6e:	55                   	push   ebp
c0011c6f:	a3 44 d2 02 c0       	mov    ds:0xc002d244,eax
c0011c74:	e8 a5 fe ff ff       	call   c0011b1e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c79:	59                   	pop    ecx
c0011c7a:	89 e8                	mov    eax,ebp
c0011c7c:	5b                   	pop    ebx
c0011c7d:	c1 e0 0c             	shl    eax,0xc
c0011c80:	83 c4 1c             	add    esp,0x1c
c0011c83:	5b                   	pop    ebx
c0011c84:	5e                   	pop    esi
c0011c85:	5f                   	pop    edi
c0011c86:	5d                   	pop    ebp
c0011c87:	c3                   	ret    

c0011c88 <Virt::freeSwapfilePage(unsigned long)>:
c0011c88:	53                   	push   ebx
c0011c89:	8b 15 28 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e428
c0011c8f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011c93:	b8 01 00 00 00       	mov    eax,0x1
c0011c98:	89 cb                	mov    ebx,ecx
c0011c9a:	d3 e0                	shl    eax,cl
c0011c9c:	c1 eb 05             	shr    ebx,0x5
c0011c9f:	f7 d0                	not    eax
c0011ca1:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011ca4:	5b                   	pop    ebx
c0011ca5:	c3                   	ret    

c0011ca6 <Virt::swapIDToSector(unsigned long)>:
c0011ca6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011caa:	0f af 05 4c d2 02 c0 	imul   eax,DWORD PTR ds:0xc002d24c
c0011cb1:	03 05 54 d2 02 c0    	add    eax,DWORD PTR ds:0xc002d254
c0011cb7:	c3                   	ret    

c0011cb8 <Virt::allocateSwapfilePage()>:
c0011cb8:	55                   	push   ebp
c0011cb9:	31 d2                	xor    edx,edx
c0011cbb:	57                   	push   edi
c0011cbc:	56                   	push   esi
c0011cbd:	53                   	push   ebx
c0011cbe:	83 ec 0c             	sub    esp,0xc
c0011cc1:	8b 0d 4c d2 02 c0    	mov    ecx,DWORD PTR ds:0xc002d24c
c0011cc7:	a1 50 d2 02 c0       	mov    eax,ds:0xc002d250
c0011ccc:	f7 f1                	div    ecx
c0011cce:	39 0d 50 d2 02 c0    	cmp    DWORD PTR ds:0xc002d250,ecx
c0011cd4:	72 2d                	jb     c0011d03 <Virt::allocateSwapfilePage()+0x4b>
c0011cd6:	8b 35 28 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e428
c0011cdc:	8b 16                	mov    edx,DWORD PTR [esi]
c0011cde:	f6 c2 01             	test   dl,0x1
c0011ce1:	74 3c                	je     c0011d1f <Virt::allocateSwapfilePage()+0x67>
c0011ce3:	31 c9                	xor    ecx,ecx
c0011ce5:	bf 01 00 00 00       	mov    edi,0x1
c0011cea:	eb 12                	jmp    c0011cfe <Virt::allocateSwapfilePage()+0x46>
c0011cec:	89 fd                	mov    ebp,edi
c0011cee:	89 ca                	mov    edx,ecx
c0011cf0:	d3 e5                	shl    ebp,cl
c0011cf2:	c1 ea 05             	shr    edx,0x5
c0011cf5:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011cf8:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011cfa:	85 ea                	test   edx,ebp
c0011cfc:	74 2a                	je     c0011d28 <Virt::allocateSwapfilePage()+0x70>
c0011cfe:	41                   	inc    ecx
c0011cff:	39 c8                	cmp    eax,ecx
c0011d01:	77 e9                	ja     c0011cec <Virt::allocateSwapfilePage()+0x34>
c0011d03:	83 ec 0c             	sub    esp,0xc
c0011d06:	68 07 a6 02 c0       	push   0xc002a607
c0011d0b:	e8 9f 87 00 00       	call   c001a4af <Krnl::panic(char const*)>
c0011d10:	83 c4 10             	add    esp,0x10
c0011d13:	31 c9                	xor    ecx,ecx
c0011d15:	83 c4 0c             	add    esp,0xc
c0011d18:	89 c8                	mov    eax,ecx
c0011d1a:	5b                   	pop    ebx
c0011d1b:	5e                   	pop    esi
c0011d1c:	5f                   	pop    edi
c0011d1d:	5d                   	pop    ebp
c0011d1e:	c3                   	ret    
c0011d1f:	89 f3                	mov    ebx,esi
c0011d21:	bd 01 00 00 00       	mov    ebp,0x1
c0011d26:	31 c9                	xor    ecx,ecx
c0011d28:	09 ea                	or     edx,ebp
c0011d2a:	89 c8                	mov    eax,ecx
c0011d2c:	89 13                	mov    DWORD PTR [ebx],edx
c0011d2e:	83 c4 0c             	add    esp,0xc
c0011d31:	5b                   	pop    ebx
c0011d32:	5e                   	pop    esi
c0011d33:	5f                   	pop    edi
c0011d34:	5d                   	pop    ebp
c0011d35:	c3                   	ret    

c0011d36 <Virt::virtualMemorySetup()>:
c0011d36:	53                   	push   ebx
c0011d37:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d3c:	83 ec 08             	sub    esp,0x8
c0011d3f:	6a 0f                	push   0xf
c0011d41:	53                   	push   ebx
c0011d42:	43                   	inc    ebx
c0011d43:	e8 d6 fd ff ff       	call   c0011b1e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d48:	59                   	pop    ecx
c0011d49:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d4f:	58                   	pop    eax
c0011d50:	75 ed                	jne    c0011d3f <Virt::virtualMemorySetup()+0x9>
c0011d52:	83 ec 08             	sub    esp,0x8
c0011d55:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d5a:	68 00 00 00 c8       	push   0xc8000000
c0011d5f:	68 1e a6 02 c0       	push   0xc002a61e
c0011d64:	e8 6b 10 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0011d69:	58                   	pop    eax
c0011d6a:	5a                   	pop    edx
c0011d6b:	68 00 f0 ff ef       	push   0xeffff000
c0011d70:	68 32 a6 02 c0       	push   0xc002a632
c0011d75:	e8 5a 10 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0011d7a:	83 c4 10             	add    esp,0x10
c0011d7d:	83 ec 08             	sub    esp,0x8
c0011d80:	6a 00                	push   0x0
c0011d82:	53                   	push   ebx
c0011d83:	43                   	inc    ebx
c0011d84:	e8 95 fd ff ff       	call   c0011b1e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d89:	83 c4 10             	add    esp,0x10
c0011d8c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d92:	75 e9                	jne    c0011d7d <Virt::virtualMemorySetup()+0x47>
c0011d94:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011d99:	83 ec 08             	sub    esp,0x8
c0011d9c:	6a 0f                	push   0xf
c0011d9e:	53                   	push   ebx
c0011d9f:	43                   	inc    ebx
c0011da0:	e8 79 fd ff ff       	call   c0011b1e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011da5:	83 c4 10             	add    esp,0x10
c0011da8:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011dae:	75 e9                	jne    c0011d99 <Virt::virtualMemorySetup()+0x63>
c0011db0:	83 c4 08             	add    esp,0x8
c0011db3:	5b                   	pop    ebx
c0011db4:	c3                   	ret    

c0011db5 <Virt::swappingSetup()>:
c0011db5:	83 ec 18             	sub    esp,0x18
c0011db8:	68 46 a6 02 c0       	push   0xc002a646
c0011dbd:	e8 12 10 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0011dc2:	58                   	pop    eax
c0011dc3:	a1 50 d2 02 c0       	mov    eax,ds:0xc002d250
c0011dc8:	5a                   	pop    edx
c0011dc9:	31 d2                	xor    edx,edx
c0011dcb:	f7 35 4c d2 02 c0    	div    DWORD PTR ds:0xc002d24c
c0011dd1:	c1 e8 05             	shr    eax,0x5
c0011dd4:	50                   	push   eax
c0011dd5:	68 5c a6 02 c0       	push   0xc002a65c
c0011dda:	e8 f5 0f 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0011ddf:	a1 50 d2 02 c0       	mov    eax,ds:0xc002d250
c0011de4:	31 d2                	xor    edx,edx
c0011de6:	f7 35 4c d2 02 c0    	div    DWORD PTR ds:0xc002d24c
c0011dec:	c1 e8 05             	shr    eax,0x5
c0011def:	89 04 24             	mov    DWORD PTR [esp],eax
c0011df2:	e8 49 da ff ff       	call   c000f840 <malloc>
c0011df7:	83 c4 0c             	add    esp,0xc
c0011dfa:	89 c1                	mov    ecx,eax
c0011dfc:	a3 28 e4 02 c0       	mov    ds:0xc002e428,eax
c0011e01:	31 d2                	xor    edx,edx
c0011e03:	a1 50 d2 02 c0       	mov    eax,ds:0xc002d250
c0011e08:	f7 35 4c d2 02 c0    	div    DWORD PTR ds:0xc002d24c
c0011e0e:	c1 e8 05             	shr    eax,0x5
c0011e11:	50                   	push   eax
c0011e12:	6a 00                	push   0x0
c0011e14:	51                   	push   ecx
c0011e15:	e8 5e e9 fe ff       	call   c0000778 <memset>
c0011e1a:	83 c4 1c             	add    esp,0x1c
c0011e1d:	c3                   	ret    

c0011e1e <Virt::getAKernelVAS()>:
c0011e1e:	a1 2c e4 02 c0       	mov    eax,ds:0xc002e42c
c0011e23:	c3                   	ret    

c0011e24 <VAS::VAS()>:
c0011e24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e28:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e2f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e33:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0011e3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e3e:	a3 2c e4 02 c0       	mov    ds:0xc002e42c,eax
c0011e43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e47:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011e4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e4f:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011e52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e56:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011e5d:	90                   	nop
c0011e5e:	c3                   	ret    
c0011e5f:	90                   	nop

c0011e60 <VAS::VAS(VAS*)>:
c0011e60:	83 ec 0c             	sub    esp,0xc
c0011e63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e67:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e72:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0011e79:	83 ec 0c             	sub    esp,0xc
c0011e7c:	68 a0 a4 02 c0       	push   0xc002a4a0
c0011e81:	e8 29 86 00 00       	call   c001a4af <Krnl::panic(char const*)>
c0011e86:	83 c4 10             	add    esp,0x10
c0011e89:	90                   	nop
c0011e8a:	83 c4 0c             	add    esp,0xc
c0011e8d:	c3                   	ret    

c0011e8e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011e8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e92:	89 c2                	mov    edx,eax
c0011e94:	c1 e8 0a             	shr    eax,0xa
c0011e97:	c1 ea 16             	shr    edx,0x16
c0011e9a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011e9f:	19 c9                	sbb    ecx,ecx
c0011ea1:	c1 e2 0c             	shl    edx,0xc
c0011ea4:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011eaa:	25 fc 0f 00 00       	and    eax,0xffc
c0011eaf:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011eb6:	01 d0                	add    eax,edx
c0011eb8:	c3                   	ret    
c0011eb9:	90                   	nop

c0011eba <VAS::getPageTableEntry(unsigned long)>:
c0011eba:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011ebe:	89 ca                	mov    edx,ecx
c0011ec0:	c1 e9 0a             	shr    ecx,0xa
c0011ec3:	c1 ea 16             	shr    edx,0x16
c0011ec6:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011ecc:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011ed2:	c1 e0 0c             	shl    eax,0xc
c0011ed5:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011ed8:	c3                   	ret    

c0011ed9 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011ed9:	57                   	push   edi
c0011eda:	56                   	push   esi
c0011edb:	be 01 00 00 00       	mov    esi,0x1
c0011ee0:	53                   	push   ebx
c0011ee1:	83 ec 10             	sub    esp,0x10
c0011ee4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ee8:	c1 eb 0c             	shr    ebx,0xc
c0011eeb:	eb 3f                	jmp    c0011f2c <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011eed:	e8 2c ff ff ff       	call   c0011e1e <Virt::getAKernelVAS()>
c0011ef2:	83 ec 08             	sub    esp,0x8
c0011ef5:	57                   	push   edi
c0011ef6:	50                   	push   eax
c0011ef7:	e8 be ff ff ff       	call   c0011eba <VAS::getPageTableEntry(unsigned long)>
c0011efc:	83 c4 10             	add    esp,0x10
c0011eff:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f01:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f05:	f6 c4 04             	test   ah,0x4
c0011f08:	75 5f                	jne    c0011f69 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011f0a:	80 fa 04             	cmp    dl,0x4
c0011f0d:	74 78                	je     c0011f87 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011f0f:	80 fa 02             	cmp    dl,0x2
c0011f12:	0f 84 88 00 00 00    	je     c0011fa0 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011f18:	80 fa 03             	cmp    dl,0x3
c0011f1b:	0f 84 ad 00 00 00    	je     c0011fce <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011f21:	fe ca                	dec    dl
c0011f23:	0f 84 92 00 00 00    	je     c0011fbb <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011f29:	43                   	inc    ebx
c0011f2a:	31 f6                	xor    esi,esi
c0011f2c:	53                   	push   ebx
c0011f2d:	e8 21 fc ff ff       	call   c0011b53 <Virt::getPageState(unsigned long)>
c0011f32:	5f                   	pop    edi
c0011f33:	89 df                	mov    edi,ebx
c0011f35:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011f39:	c1 e7 0c             	shl    edi,0xc
c0011f3c:	84 c0                	test   al,al
c0011f3e:	75 ad                	jne    c0011eed <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011f40:	83 ec 0c             	sub    esp,0xc
c0011f43:	68 77 a6 02 c0       	push   0xc002a677
c0011f48:	e8 62 85 00 00       	call   c001a4af <Krnl::panic(char const*)>
c0011f4d:	e8 cc fe ff ff       	call   c0011e1e <Virt::getAKernelVAS()>
c0011f52:	5a                   	pop    edx
c0011f53:	59                   	pop    ecx
c0011f54:	57                   	push   edi
c0011f55:	50                   	push   eax
c0011f56:	e8 5f ff ff ff       	call   c0011eba <VAS::getPageTableEntry(unsigned long)>
c0011f5b:	83 c4 10             	add    esp,0x10
c0011f5e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f60:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f64:	f6 c4 04             	test   ah,0x4
c0011f67:	74 c0                	je     c0011f29 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f69:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011f6d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f72:	83 ec 0c             	sub    esp,0xc
c0011f75:	50                   	push   eax
c0011f76:	e8 d8 de ff ff       	call   c000fe53 <Phys::freePage(unsigned long)>
c0011f7b:	83 c4 10             	add    esp,0x10
c0011f7e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f82:	80 fa 04             	cmp    dl,0x4
c0011f85:	75 88                	jne    c0011f0f <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011f87:	89 f0                	mov    eax,esi
c0011f89:	84 c0                	test   al,al
c0011f8b:	75 47                	jne    c0011fd4 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011f8d:	c7 44 24 20 c4 a4 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a4c4
c0011f95:	83 c4 10             	add    esp,0x10
c0011f98:	5b                   	pop    ebx
c0011f99:	5e                   	pop    esi
c0011f9a:	5f                   	pop    edi
c0011f9b:	e9 0f 85 00 00       	jmp    c001a4af <Krnl::panic(char const*)>
c0011fa0:	89 f0                	mov    eax,esi
c0011fa2:	84 c0                	test   al,al
c0011fa4:	75 15                	jne    c0011fbb <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011fa6:	83 ec 0c             	sub    esp,0xc
c0011fa9:	68 93 a6 02 c0       	push   0xc002a693
c0011fae:	e8 fc 84 00 00       	call   c001a4af <Krnl::panic(char const*)>
c0011fb3:	83 c4 10             	add    esp,0x10
c0011fb6:	e9 6e ff ff ff       	jmp    c0011f29 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011fbb:	83 ec 08             	sub    esp,0x8
c0011fbe:	6a 00                	push   0x0
c0011fc0:	53                   	push   ebx
c0011fc1:	e8 58 fb ff ff       	call   c0011b1e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011fc6:	83 c4 10             	add    esp,0x10
c0011fc9:	e9 5b ff ff ff       	jmp    c0011f29 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011fce:	89 f0                	mov    eax,esi
c0011fd0:	84 c0                	test   al,al
c0011fd2:	75 15                	jne    c0011fe9 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011fd4:	83 ec 08             	sub    esp,0x8
c0011fd7:	6a 00                	push   0x0
c0011fd9:	53                   	push   ebx
c0011fda:	e8 3f fb ff ff       	call   c0011b1e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011fdf:	83 c4 10             	add    esp,0x10
c0011fe2:	83 c4 10             	add    esp,0x10
c0011fe5:	5b                   	pop    ebx
c0011fe6:	5e                   	pop    esi
c0011fe7:	5f                   	pop    edi
c0011fe8:	c3                   	ret    
c0011fe9:	c7 44 24 20 af a6 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a6af
c0011ff1:	83 c4 10             	add    esp,0x10
c0011ff4:	5b                   	pop    ebx
c0011ff5:	5e                   	pop    esi
c0011ff6:	5f                   	pop    edi
c0011ff7:	e9 b3 84 00 00       	jmp    c001a4af <Krnl::panic(char const*)>

c0011ffc <VAS::freeAllocatedPages(unsigned long)>:
c0011ffc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012000:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012004:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0012008:	74 09                	je     c0012013 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001200a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001200e:	e9 c6 fe ff ff       	jmp    c0011ed9 <Virt::freeKernelVirtualPages(unsigned long)>
c0012013:	c7 44 24 04 e8 a4 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a4e8
c001201b:	e9 b4 0d 00 00       	jmp    c0012dd4 <Dbg::kprintf(char const*, ...)>

c0012020 <VAS::virtualToPhysical(unsigned long)>:
c0012020:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012024:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012028:	e8 8d fe ff ff       	call   c0011eba <VAS::getPageTableEntry(unsigned long)>
c001202d:	5a                   	pop    edx
c001202e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012030:	59                   	pop    ecx
c0012031:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012036:	c3                   	ret    
c0012037:	90                   	nop

c0012038 <VAS::reflagRange(unsigned long, int, int, int)>:
c0012038:	55                   	push   ebp
c0012039:	57                   	push   edi
c001203a:	56                   	push   esi
c001203b:	53                   	push   ebx
c001203c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012040:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0012044:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012048:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001204c:	85 db                	test   ebx,ebx
c001204e:	7e 22                	jle    c0012072 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0012050:	c1 e3 0c             	shl    ebx,0xc
c0012053:	01 f3                	add    ebx,esi
c0012055:	56                   	push   esi
c0012056:	81 c6 00 10 00 00    	add    esi,0x1000
c001205c:	55                   	push   ebp
c001205d:	e8 58 fe ff ff       	call   c0011eba <VAS::getPageTableEntry(unsigned long)>
c0012062:	5a                   	pop    edx
c0012063:	59                   	pop    ecx
c0012064:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012066:	21 f9                	and    ecx,edi
c0012068:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c001206c:	39 f3                	cmp    ebx,esi
c001206e:	89 08                	mov    DWORD PTR [eax],ecx
c0012070:	75 e3                	jne    c0012055 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0012072:	5b                   	pop    ebx
c0012073:	5e                   	pop    esi
c0012074:	5f                   	pop    edi
c0012075:	5d                   	pop    ebp
c0012076:	c3                   	ret    
c0012077:	90                   	nop

c0012078 <VAS::setToWriteCombining(unsigned long, int)>:
c0012078:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c001207d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012083:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c001208a:	75 01                	jne    c001208d <VAS::setToWriteCombining(unsigned long, int)+0x15>
c001208c:	c3                   	ret    
c001208d:	68 80 00 00 00       	push   0x80
c0012092:	6a ff                	push   0xffffffff
c0012094:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012098:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001209c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00120a0:	e8 93 ff ff ff       	call   c0012038 <VAS::reflagRange(unsigned long, int, int, int)>
c00120a5:	83 c4 14             	add    esp,0x14
c00120a8:	c3                   	ret    
c00120a9:	90                   	nop

c00120aa <VAS::mapOtherVASIn(bool, VAS*)>:
c00120aa:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00120af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00120b3:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00120b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00120ba:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00120bd:	19 c0                	sbb    eax,eax
c00120bf:	83 ca 03             	or     edx,0x3
c00120c2:	83 e0 fc             	and    eax,0xfffffffc
c00120c5:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00120cc:	0f 20 d8             	mov    eax,cr3
c00120cf:	0f 22 d8             	mov    cr3,eax
c00120d2:	c3                   	ret    
c00120d3:	90                   	nop

c00120d4 <VAS::~VAS()>:
c00120d4:	83 ec 2c             	sub    esp,0x2c
c00120d7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00120df:	e8 c5 bb 00 00       	call   c001dca9 <lockScheduler()>
c00120e4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00120e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00120eb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00120ee:	8b 80 32 19 00 00    	mov    eax,DWORD PTR [eax+0x1932]
c00120f4:	83 ec 04             	sub    esp,0x4
c00120f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00120fb:	6a 01                	push   0x1
c00120fd:	50                   	push   eax
c00120fe:	e8 a7 ff ff ff       	call   c00120aa <VAS::mapOtherVASIn(bool, VAS*)>
c0012103:	83 c4 10             	add    esp,0x10
c0012106:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001210e:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0012116:	0f 8f d7 00 00 00    	jg     c00121f3 <VAS::~VAS()+0x11f>
c001211c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012120:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012123:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012127:	c1 e2 02             	shl    edx,0x2
c001212a:	01 d0                	add    eax,edx
c001212c:	8b 00                	mov    eax,DWORD PTR [eax]
c001212e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012136:	83 e0 01             	and    eax,0x1
c0012139:	0f 84 ab 00 00 00    	je     c00121ea <VAS::~VAS()+0x116>
c001213f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012147:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c001214f:	7f 75                	jg     c00121c6 <VAS::~VAS()+0xf2>
c0012151:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012155:	c1 e0 0a             	shl    eax,0xa
c0012158:	89 c2                	mov    edx,eax
c001215a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001215e:	01 d0                	add    eax,edx
c0012160:	c1 e0 0c             	shl    eax,0xc
c0012163:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012167:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001216c:	8b 00                	mov    eax,DWORD PTR [eax]
c001216e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012171:	8b 80 32 19 00 00    	mov    eax,DWORD PTR [eax+0x1932]
c0012177:	83 ec 04             	sub    esp,0x4
c001217a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001217e:	6a 01                	push   0x1
c0012180:	50                   	push   eax
c0012181:	e8 08 fd ff ff       	call   c0011e8e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0012186:	83 c4 10             	add    esp,0x10
c0012189:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001218d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012191:	8b 00                	mov    eax,DWORD PTR [eax]
c0012193:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012197:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001219b:	25 01 04 00 00       	and    eax,0x401
c00121a0:	3d 01 04 00 00       	cmp    eax,0x401
c00121a5:	75 19                	jne    c00121c0 <VAS::~VAS()+0xec>
c00121a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121ab:	25 00 f0 ff ff       	and    eax,0xfffff000
c00121b0:	83 ec 0c             	sub    esp,0xc
c00121b3:	50                   	push   eax
c00121b4:	e8 9a dc ff ff       	call   c000fe53 <Phys::freePage(unsigned long)>
c00121b9:	83 c4 10             	add    esp,0x10
c00121bc:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00121c0:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00121c4:	eb 81                	jmp    c0012147 <VAS::~VAS()+0x73>
c00121c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121ca:	25 00 04 00 00       	and    eax,0x400
c00121cf:	74 19                	je     c00121ea <VAS::~VAS()+0x116>
c00121d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121d5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00121da:	83 ec 0c             	sub    esp,0xc
c00121dd:	50                   	push   eax
c00121de:	e8 70 dc ff ff       	call   c000fe53 <Phys::freePage(unsigned long)>
c00121e3:	83 c4 10             	add    esp,0x10
c00121e6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00121ea:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00121ee:	e9 1b ff ff ff       	jmp    c001210e <VAS::~VAS()+0x3a>
c00121f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121f7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00121fa:	83 ec 0c             	sub    esp,0xc
c00121fd:	50                   	push   eax
c00121fe:	e8 d6 fc ff ff       	call   c0011ed9 <Virt::freeKernelVirtualPages(unsigned long)>
c0012203:	83 c4 10             	add    esp,0x10
c0012206:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001220a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001220d:	83 ec 0c             	sub    esp,0xc
c0012210:	50                   	push   eax
c0012211:	e8 3d dc ff ff       	call   c000fe53 <Phys::freePage(unsigned long)>
c0012216:	83 c4 10             	add    esp,0x10
c0012219:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001221d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012221:	c1 e0 02             	shl    eax,0x2
c0012224:	83 ec 08             	sub    esp,0x8
c0012227:	50                   	push   eax
c0012228:	68 0c a5 02 c0       	push   0xc002a50c
c001222d:	e8 a2 0b 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0012232:	83 c4 10             	add    esp,0x10
c0012235:	e8 71 ba 00 00       	call   c001dcab <unlockScheduler()>
c001223a:	90                   	nop
c001223b:	83 c4 2c             	add    esp,0x2c
c001223e:	c3                   	ret    
c001223f:	90                   	nop

c0012240 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0012240:	55                   	push   ebp
c0012241:	57                   	push   edi
c0012242:	56                   	push   esi
c0012243:	53                   	push   ebx
c0012244:	83 ec 1c             	sub    esp,0x1c
c0012247:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001224b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001224f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012255:	77 08                	ja     c001225f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0012257:	0f 20 d8             	mov    eax,cr3
c001225a:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c001225d:	75 47                	jne    c00122a6 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c001225f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012263:	09 d8                	or     eax,ebx
c0012265:	a9 ff 0f 00 00       	test   eax,0xfff
c001226a:	75 57                	jne    c00122c3 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c001226c:	89 de                	mov    esi,ebx
c001226e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012271:	c1 ee 16             	shr    esi,0x16
c0012274:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c001227b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c001227f:	74 54                	je     c00122d5 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0012281:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012285:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c001228b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001228f:	c1 e6 0c             	shl    esi,0xc
c0012292:	c1 eb 0a             	shr    ebx,0xa
c0012295:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c001229b:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c001229e:	83 c4 1c             	add    esp,0x1c
c00122a1:	5b                   	pop    ebx
c00122a2:	5e                   	pop    esi
c00122a3:	5f                   	pop    edi
c00122a4:	5d                   	pop    ebp
c00122a5:	c3                   	ret    
c00122a6:	83 ec 0c             	sub    esp,0xc
c00122a9:	68 2c a5 02 c0       	push   0xc002a52c
c00122ae:	e8 21 0b 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c00122b3:	83 c4 10             	add    esp,0x10
c00122b6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00122ba:	09 d8                	or     eax,ebx
c00122bc:	a9 ff 0f 00 00       	test   eax,0xfff
c00122c1:	74 a9                	je     c001226c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00122c3:	83 ec 0c             	sub    esp,0xc
c00122c6:	68 94 a5 02 c0       	push   0xc002a594
c00122cb:	e8 df 81 00 00       	call   c001a4af <Krnl::panic(char const*)>
c00122d0:	83 c4 10             	add    esp,0x10
c00122d3:	eb 97                	jmp    c001226c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00122d5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00122d9:	e8 ff db ff ff       	call   c000fedd <Phys::allocatePage()>
c00122de:	89 c5                	mov    ebp,eax
c00122e0:	e8 39 fb ff ff       	call   c0011e1e <Virt::getAKernelVAS()>
c00122e5:	83 ec 0c             	sub    esp,0xc
c00122e8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00122ec:	6a 01                	push   0x1
c00122ee:	e8 84 f8 ff ff       	call   c0011b77 <Virt::allocateKernelVirtualPages(int)>
c00122f3:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00122fa:	6a 01                	push   0x1
c00122fc:	50                   	push   eax
c00122fd:	55                   	push   ebp
c00122fe:	81 cd 07 04 00 00    	or     ebp,0x407
c0012304:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012308:	51                   	push   ecx
c0012309:	e8 26 02 00 00       	call   c0012534 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001230e:	83 c4 1c             	add    esp,0x1c
c0012311:	68 00 10 00 00       	push   0x1000
c0012316:	6a 00                	push   0x0
c0012318:	50                   	push   eax
c0012319:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001231d:	e8 56 e4 fe ff       	call   c0000778 <memset>
c0012322:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012326:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012329:	e8 ab fb ff ff       	call   c0011ed9 <Virt::freeKernelVirtualPages(unsigned long)>
c001232e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012332:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012335:	83 c4 10             	add    esp,0x10
c0012338:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c001233b:	e9 41 ff ff ff       	jmp    c0012281 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0012340 <VAS::allocatePages(int, int)>:
c0012340:	55                   	push   ebp
c0012341:	57                   	push   edi
c0012342:	56                   	push   esi
c0012343:	53                   	push   ebx
c0012344:	83 ec 1c             	sub    esp,0x1c
c0012347:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001234b:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c0012350:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012356:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001235c:	83 e0 01             	and    eax,0x1
c001235f:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0012363:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012367:	0f 85 cc 00 00 00    	jne    c0012439 <VAS::allocatePages(int, int)+0xf9>
c001236d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012370:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012374:	85 c0                	test   eax,eax
c0012376:	0f 84 a1 00 00 00    	je     c001241d <VAS::allocatePages(int, int)+0xdd>
c001237c:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012380:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012384:	c1 e6 0c             	shl    esi,0xc
c0012387:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001238b:	85 c0                	test   eax,eax
c001238d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0012390:	7e 33                	jle    c00123c5 <VAS::allocatePages(int, int)+0x85>
c0012392:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0012396:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001239a:	81 cd 00 04 00 00    	or     ebp,0x400
c00123a0:	e8 38 db ff ff       	call   c000fedd <Phys::allocatePage()>
c00123a5:	55                   	push   ebp
c00123a6:	53                   	push   ebx
c00123a7:	50                   	push   eax
c00123a8:	57                   	push   edi
c00123a9:	e8 92 fe ff ff       	call   c0012240 <VAS::mapPage(unsigned long, unsigned long, int)>
c00123ae:	83 c4 10             	add    esp,0x10
c00123b1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00123b6:	74 03                	je     c00123bb <VAS::allocatePages(int, int)+0x7b>
c00123b8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00123bb:	81 c3 00 10 00 00    	add    ebx,0x1000
c00123c1:	39 de                	cmp    esi,ebx
c00123c3:	75 db                	jne    c00123a0 <VAS::allocatePages(int, int)+0x60>
c00123c5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00123ca:	75 12                	jne    c00123de <VAS::allocatePages(int, int)+0x9e>
c00123cc:	0f 20 d8             	mov    eax,cr3
c00123cf:	0f 22 d8             	mov    cr3,eax
c00123d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00123d6:	83 c4 1c             	add    esp,0x1c
c00123d9:	5b                   	pop    ebx
c00123da:	5e                   	pop    esi
c00123db:	5f                   	pop    edi
c00123dc:	5d                   	pop    ebp
c00123dd:	c3                   	ret    
c00123de:	c1 ee 0a             	shr    esi,0xa
c00123e1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00123e5:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c00123eb:	c1 eb 0a             	shr    ebx,0xa
c00123ee:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c00123f4:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00123fa:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012400:	39 c3                	cmp    ebx,eax
c0012402:	77 ce                	ja     c00123d2 <VAS::allocatePages(int, int)+0x92>
c0012404:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012407:	81 c3 00 10 00 00    	add    ebx,0x1000
c001240d:	39 d8                	cmp    eax,ebx
c001240f:	73 f3                	jae    c0012404 <VAS::allocatePages(int, int)+0xc4>
c0012411:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012415:	83 c4 1c             	add    esp,0x1c
c0012418:	5b                   	pop    ebx
c0012419:	5e                   	pop    esi
c001241a:	5f                   	pop    edi
c001241b:	5d                   	pop    ebp
c001241c:	c3                   	ret    
c001241d:	83 ec 0c             	sub    esp,0xc
c0012420:	68 b8 a5 02 c0       	push   0xc002a5b8
c0012425:	e8 85 80 00 00       	call   c001a4af <Krnl::panic(char const*)>
c001242a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001242d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012431:	83 c4 10             	add    esp,0x10
c0012434:	e9 43 ff ff ff       	jmp    c001237c <VAS::allocatePages(int, int)+0x3c>
c0012439:	83 ec 0c             	sub    esp,0xc
c001243c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012440:	e8 32 f7 ff ff       	call   c0011b77 <Virt::allocateKernelVirtualPages(int)>
c0012445:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012449:	83 c4 10             	add    esp,0x10
c001244c:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012451:	0f 87 9b 00 00 00    	ja     c00124f2 <VAS::allocatePages(int, int)+0x1b2>
c0012457:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001245b:	85 d2                	test   edx,edx
c001245d:	7e 3c                	jle    c001249b <VAS::allocatePages(int, int)+0x15b>
c001245f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012463:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012467:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001246b:	c1 e5 0c             	shl    ebp,0xc
c001246e:	81 ce 00 04 00 00    	or     esi,0x400
c0012474:	01 dd                	add    ebp,ebx
c0012476:	e8 62 da ff ff       	call   c000fedd <Phys::allocatePage()>
c001247b:	56                   	push   esi
c001247c:	53                   	push   ebx
c001247d:	50                   	push   eax
c001247e:	57                   	push   edi
c001247f:	e8 bc fd ff ff       	call   c0012240 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012484:	83 c4 10             	add    esp,0x10
c0012487:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001248c:	74 03                	je     c0012491 <VAS::allocatePages(int, int)+0x151>
c001248e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012491:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012497:	39 dd                	cmp    ebp,ebx
c0012499:	75 db                	jne    c0012476 <VAS::allocatePages(int, int)+0x136>
c001249b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124a0:	0f 84 26 ff ff ff    	je     c00123cc <VAS::allocatePages(int, int)+0x8c>
c00124a6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00124aa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124ae:	89 d3                	mov    ebx,edx
c00124b0:	c1 e0 0c             	shl    eax,0xc
c00124b3:	c1 eb 0a             	shr    ebx,0xa
c00124b6:	01 d0                	add    eax,edx
c00124b8:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00124be:	c1 e8 0a             	shr    eax,0xa
c00124c1:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00124c7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00124cc:	2d 00 00 40 00       	sub    eax,0x400000
c00124d1:	39 c3                	cmp    ebx,eax
c00124d3:	0f 87 f9 fe ff ff    	ja     c00123d2 <VAS::allocatePages(int, int)+0x92>
c00124d9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124dc:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124e2:	39 d8                	cmp    eax,ebx
c00124e4:	73 f3                	jae    c00124d9 <VAS::allocatePages(int, int)+0x199>
c00124e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124ea:	83 c4 1c             	add    esp,0x1c
c00124ed:	5b                   	pop    ebx
c00124ee:	5e                   	pop    esi
c00124ef:	5f                   	pop    edi
c00124f0:	5d                   	pop    ebp
c00124f1:	c3                   	ret    
c00124f2:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c00124f7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124fd:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0012504:	0f 84 4d ff ff ff    	je     c0012457 <VAS::allocatePages(int, int)+0x117>
c001250a:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0012512:	e9 40 ff ff ff       	jmp    c0012457 <VAS::allocatePages(int, int)+0x117>
c0012517:	90                   	nop

c0012518 <VAS::setCPUSpecific(unsigned long)>:
c0012518:	83 ec 0c             	sub    esp,0xc
c001251b:	6a 05                	push   0x5
c001251d:	68 00 00 40 c2       	push   0xc2400000
c0012522:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001252a:	e8 11 fd ff ff       	call   c0012240 <VAS::mapPage(unsigned long, unsigned long, int)>
c001252f:	83 c4 1c             	add    esp,0x1c
c0012532:	c3                   	ret    
c0012533:	90                   	nop

c0012534 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012534:	55                   	push   ebp
c0012535:	57                   	push   edi
c0012536:	56                   	push   esi
c0012537:	53                   	push   ebx
c0012538:	83 ec 1c             	sub    esp,0x1c
c001253b:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c0012540:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012544:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001254a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001254e:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012554:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012558:	83 e0 01             	and    eax,0x1
c001255b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001255f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012563:	85 c0                	test   eax,eax
c0012565:	7e 39                	jle    c00125a0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012567:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001256b:	89 f3                	mov    ebx,esi
c001256d:	c1 e0 0c             	shl    eax,0xc
c0012570:	01 f0                	add    eax,esi
c0012572:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012576:	55                   	push   ebp
c0012577:	53                   	push   ebx
c0012578:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001257c:	29 f0                	sub    eax,esi
c001257e:	01 d8                	add    eax,ebx
c0012580:	50                   	push   eax
c0012581:	57                   	push   edi
c0012582:	e8 b9 fc ff ff       	call   c0012240 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012587:	83 c4 10             	add    esp,0x10
c001258a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001258f:	74 03                	je     c0012594 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0012591:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012594:	81 c3 00 10 00 00    	add    ebx,0x1000
c001259a:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001259e:	75 d6                	jne    c0012576 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00125a0:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125a5:	75 10                	jne    c00125b7 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00125a7:	0f 20 d8             	mov    eax,cr3
c00125aa:	0f 22 d8             	mov    cr3,eax
c00125ad:	83 c4 1c             	add    esp,0x1c
c00125b0:	89 f0                	mov    eax,esi
c00125b2:	5b                   	pop    ebx
c00125b3:	5e                   	pop    esi
c00125b4:	5f                   	pop    edi
c00125b5:	5d                   	pop    ebp
c00125b6:	c3                   	ret    
c00125b7:	89 f3                	mov    ebx,esi
c00125b9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00125bd:	c1 eb 0a             	shr    ebx,0xa
c00125c0:	c1 e0 0c             	shl    eax,0xc
c00125c3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00125c9:	01 f0                	add    eax,esi
c00125cb:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00125d1:	c1 e8 0a             	shr    eax,0xa
c00125d4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00125d9:	2d 00 00 40 00       	sub    eax,0x400000
c00125de:	39 c3                	cmp    ebx,eax
c00125e0:	77 cb                	ja     c00125ad <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c00125e2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125e5:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125eb:	39 d8                	cmp    eax,ebx
c00125ed:	73 f3                	jae    c00125e2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c00125ef:	83 c4 1c             	add    esp,0x1c
c00125f2:	89 f0                	mov    eax,esi
c00125f4:	5b                   	pop    ebx
c00125f5:	5e                   	pop    esi
c00125f6:	5f                   	pop    edi
c00125f7:	5d                   	pop    ebp
c00125f8:	c3                   	ret    
c00125f9:	90                   	nop

c00125fa <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00125fa:	55                   	push   ebp
c00125fb:	57                   	push   edi
c00125fc:	56                   	push   esi
c00125fd:	53                   	push   ebx
c00125fe:	83 ec 1c             	sub    esp,0x1c
c0012601:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012605:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012609:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c001260d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012611:	a9 ff 0f 00 00       	test   eax,0xfff
c0012616:	75 4a                	jne    c0012662 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012618:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001261c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001261f:	c1 eb 16             	shr    ebx,0x16
c0012622:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012629:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c001262d:	74 4d                	je     c001267c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c001262f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012633:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012637:	c1 e8 0a             	shr    eax,0xa
c001263a:	80 fa 01             	cmp    dl,0x1
c001263d:	19 d2                	sbb    edx,edx
c001263f:	c1 e3 0c             	shl    ebx,0xc
c0012642:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012646:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c001264c:	25 fc 0f 00 00       	and    eax,0xffc
c0012651:	01 d8                	add    eax,ebx
c0012653:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c001265a:	83 c4 1c             	add    esp,0x1c
c001265d:	5b                   	pop    ebx
c001265e:	5e                   	pop    esi
c001265f:	5f                   	pop    edi
c0012660:	5d                   	pop    ebp
c0012661:	c3                   	ret    
c0012662:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012666:	83 ec 0c             	sub    esp,0xc
c0012669:	68 e4 a5 02 c0       	push   0xc002a5e4
c001266e:	e8 3c 7e 00 00       	call   c001a4af <Krnl::panic(char const*)>
c0012673:	83 c4 10             	add    esp,0x10
c0012676:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001267a:	eb 9c                	jmp    c0012618 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c001267c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012680:	e8 58 d8 ff ff       	call   c000fedd <Phys::allocatePage()>
c0012685:	89 c5                	mov    ebp,eax
c0012687:	e8 92 f7 ff ff       	call   c0011e1e <Virt::getAKernelVAS()>
c001268c:	83 ec 0c             	sub    esp,0xc
c001268f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012693:	6a 01                	push   0x1
c0012695:	e8 dd f4 ff ff       	call   c0011b77 <Virt::allocateKernelVirtualPages(int)>
c001269a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00126a1:	6a 01                	push   0x1
c00126a3:	50                   	push   eax
c00126a4:	55                   	push   ebp
c00126a5:	81 cd 07 04 00 00    	or     ebp,0x407
c00126ab:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00126af:	51                   	push   ecx
c00126b0:	e8 7f fe ff ff       	call   c0012534 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00126b5:	83 c4 1c             	add    esp,0x1c
c00126b8:	68 00 10 00 00       	push   0x1000
c00126bd:	6a 00                	push   0x0
c00126bf:	50                   	push   eax
c00126c0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00126c4:	e8 af e0 fe ff       	call   c0000778 <memset>
c00126c9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00126cd:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00126d0:	e8 04 f8 ff ff       	call   c0011ed9 <Virt::freeKernelVirtualPages(unsigned long)>
c00126d5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00126d8:	83 c4 10             	add    esp,0x10
c00126db:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c00126de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00126e2:	e9 48 ff ff ff       	jmp    c001262f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c00126e7:	90                   	nop

c00126e8 <VAS::VAS(bool)>:
c00126e8:	53                   	push   ebx
c00126e9:	83 ec 28             	sub    esp,0x28
c00126ec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00126f0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00126f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126f8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00126ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012703:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c001270a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001270e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012712:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012715:	e8 c3 d7 ff ff       	call   c000fedd <Phys::allocatePage()>
c001271a:	89 c2                	mov    edx,eax
c001271c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012720:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012723:	e8 f6 f6 ff ff       	call   c0011e1e <Virt::getAKernelVAS()>
c0012728:	89 c3                	mov    ebx,eax
c001272a:	83 ec 0c             	sub    esp,0xc
c001272d:	6a 01                	push   0x1
c001272f:	e8 43 f4 ff ff       	call   c0011b77 <Virt::allocateKernelVirtualPages(int)>
c0012734:	83 c4 10             	add    esp,0x10
c0012737:	89 c2                	mov    edx,eax
c0012739:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001273d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012740:	83 ec 0c             	sub    esp,0xc
c0012743:	6a 03                	push   0x3
c0012745:	6a 01                	push   0x1
c0012747:	52                   	push   edx
c0012748:	50                   	push   eax
c0012749:	53                   	push   ebx
c001274a:	e8 e5 fd ff ff       	call   c0012534 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001274f:	83 c4 20             	add    esp,0x20
c0012752:	89 c2                	mov    edx,eax
c0012754:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012758:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001275b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012763:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c001276b:	7f 1c                	jg     c0012789 <VAS::VAS(bool)+0xa1>
c001276d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012771:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012774:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012778:	c1 e2 02             	shl    edx,0x2
c001277b:	01 d0                	add    eax,edx
c001277d:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012783:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012787:	eb da                	jmp    c0012763 <VAS::VAS(bool)+0x7b>
c0012789:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012791:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012799:	7f 7a                	jg     c0012815 <VAS::VAS(bool)+0x12d>
c001279b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001279f:	2d 00 02 00 00       	sub    eax,0x200
c00127a4:	c1 e0 0c             	shl    eax,0xc
c00127a7:	83 c8 03             	or     eax,0x3
c00127aa:	89 c2                	mov    edx,eax
c00127ac:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c00127b1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00127b7:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00127bd:	83 e0 10             	and    eax,0x10
c00127c0:	84 c0                	test   al,al
c00127c2:	74 07                	je     c00127cb <VAS::VAS(bool)+0xe3>
c00127c4:	b8 00 01 00 00       	mov    eax,0x100
c00127c9:	eb 05                	jmp    c00127d0 <VAS::VAS(bool)+0xe8>
c00127cb:	b8 00 00 00 00       	mov    eax,0x0
c00127d0:	09 d0                	or     eax,edx
c00127d2:	89 c1                	mov    ecx,eax
c00127d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127d8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00127db:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00127df:	c1 e2 02             	shl    edx,0x2
c00127e2:	01 d0                	add    eax,edx
c00127e4:	89 ca                	mov    edx,ecx
c00127e6:	89 10                	mov    DWORD PTR [eax],edx
c00127e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127ec:	2d 40 03 00 00       	sub    eax,0x340
c00127f1:	83 f8 7f             	cmp    eax,0x7f
c00127f4:	77 16                	ja     c001280c <VAS::VAS(bool)+0x124>
c00127f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127fa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00127fd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012801:	c1 e2 02             	shl    edx,0x2
c0012804:	01 d0                	add    eax,edx
c0012806:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001280c:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012810:	e9 7c ff ff ff       	jmp    c0012791 <VAS::VAS(bool)+0xa9>
c0012815:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c001281a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012820:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012826:	83 e0 10             	and    eax,0x10
c0012829:	84 c0                	test   al,al
c001282b:	74 07                	je     c0012834 <VAS::VAS(bool)+0x14c>
c001282d:	b8 03 41 00 00       	mov    eax,0x4103
c0012832:	eb 05                	jmp    c0012839 <VAS::VAS(bool)+0x151>
c0012834:	b8 03 40 00 00       	mov    eax,0x4003
c0012839:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001283d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012840:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012846:	89 02                	mov    DWORD PTR [edx],eax
c0012848:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c001284d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012853:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012859:	83 ec 08             	sub    esp,0x8
c001285c:	50                   	push   eax
c001285d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012861:	e8 b2 fc ff ff       	call   c0012518 <VAS::setCPUSpecific(unsigned long)>
c0012866:	83 c4 10             	add    esp,0x10
c0012869:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001286d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012870:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c0012875:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001287b:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012881:	83 e0 10             	and    eax,0x10
c0012884:	84 c0                	test   al,al
c0012886:	74 07                	je     c001288f <VAS::VAS(bool)+0x1a7>
c0012888:	b8 00 01 00 00       	mov    eax,0x100
c001288d:	eb 05                	jmp    c0012894 <VAS::VAS(bool)+0x1ac>
c001288f:	b8 00 00 00 00       	mov    eax,0x0
c0012894:	09 c2                	or     edx,eax
c0012896:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001289a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001289d:	05 fc 0f 00 00       	add    eax,0xffc
c00128a2:	83 ca 03             	or     edx,0x3
c00128a5:	89 10                	mov    DWORD PTR [eax],edx
c00128a7:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c00128ac:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128b2:	83 ec 0c             	sub    esp,0xc
c00128b5:	50                   	push   eax
c00128b6:	e8 2b 1c 00 00       	call   c00144e6 <Device::getName()>
c00128bb:	83 c4 10             	add    esp,0x10
c00128be:	83 ec 08             	sub    esp,0x8
c00128c1:	68 c9 a6 02 c0       	push   0xc002a6c9
c00128c6:	50                   	push   eax
c00128c7:	e8 f4 df fe ff       	call   c00008c0 <strcmp>
c00128cc:	83 c4 10             	add    esp,0x10
c00128cf:	85 c0                	test   eax,eax
c00128d1:	0f 94 c0             	sete   al
c00128d4:	84 c0                	test   al,al
c00128d6:	74 70                	je     c0012948 <VAS::VAS(bool)+0x260>
c00128d8:	e8 af b3 00 00       	call   c001dc8c <disableIRQs()>
c00128dd:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c00128e2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128e8:	05 7c 09 00 00       	add    eax,0x97c
c00128ed:	83 ec 0c             	sub    esp,0xc
c00128f0:	50                   	push   eax
c00128f1:	e8 c6 c9 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00128f6:	83 c4 10             	add    esp,0x10
c00128f9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00128fe:	89 c3                	mov    ebx,eax
c0012900:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c0012905:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001290b:	05 7c 09 00 00       	add    eax,0x97c
c0012910:	83 ec 0c             	sub    esp,0xc
c0012913:	50                   	push   eax
c0012914:	e8 a3 c9 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012919:	83 c4 10             	add    esp,0x10
c001291c:	83 ec 08             	sub    esp,0x8
c001291f:	50                   	push   eax
c0012920:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012924:	e8 91 f5 ff ff       	call   c0011eba <VAS::getPageTableEntry(unsigned long)>
c0012929:	83 c4 10             	add    esp,0x10
c001292c:	8b 00                	mov    eax,DWORD PTR [eax]
c001292e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012933:	6a 11                	push   0x11
c0012935:	53                   	push   ebx
c0012936:	50                   	push   eax
c0012937:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001293b:	e8 00 f9 ff ff       	call   c0012240 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012940:	83 c4 10             	add    esp,0x10
c0012943:	e8 52 b3 00 00       	call   c001dc9a <enableIRQs()>
c0012948:	90                   	nop
c0012949:	83 c4 28             	add    esp,0x28
c001294c:	5b                   	pop    ebx
c001294d:	c3                   	ret    

c001294e <VAS::evict(unsigned long)>:
c001294e:	55                   	push   ebp
c001294f:	57                   	push   edi
c0012950:	56                   	push   esi
c0012951:	53                   	push   ebx
c0012952:	83 ec 14             	sub    esp,0x14
c0012955:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0012959:	55                   	push   ebp
c001295a:	68 d7 a6 02 c0       	push   0xc002a6d7
c001295f:	e8 70 04 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0012964:	e8 4f f3 ff ff       	call   c0011cb8 <Virt::allocateSwapfilePage()>
c0012969:	83 c4 10             	add    esp,0x10
c001296c:	89 c7                	mov    edi,eax
c001296e:	a1 4c d2 02 c0       	mov    eax,ds:0xc002d24c
c0012973:	85 c0                	test   eax,eax
c0012975:	7e 3d                	jle    c00129b4 <VAS::evict(unsigned long)+0x66>
c0012977:	89 ee                	mov    esi,ebp
c0012979:	31 db                	xor    ebx,ebx
c001297b:	83 ec 0c             	sub    esp,0xc
c001297e:	57                   	push   edi
c001297f:	e8 22 f3 ff ff       	call   c0011ca6 <Virt::swapIDToSector(unsigned long)>
c0012984:	89 34 24             	mov    DWORD PTR [esp],esi
c0012987:	01 d8                	add    eax,ebx
c0012989:	6a 01                	push   0x1
c001298b:	31 d2                	xor    edx,edx
c001298d:	43                   	inc    ebx
c001298e:	52                   	push   edx
c001298f:	81 c6 00 02 00 00    	add    esi,0x200
c0012995:	50                   	push   eax
c0012996:	0f be 05 58 d2 02 c0 	movsx  eax,BYTE PTR ds:0xc002d258
c001299d:	ff 34 85 bc e7 02 c0 	push   DWORD PTR [eax*4-0x3ffd1844]
c00129a4:	e8 dd 3c 00 00       	call   c0016686 <LogicalDisk::write(unsigned long long, int, void*)>
c00129a9:	83 c4 20             	add    esp,0x20
c00129ac:	39 1d 4c d2 02 c0    	cmp    DWORD PTR ds:0xc002d24c,ebx
c00129b2:	7f c7                	jg     c001297b <VAS::evict(unsigned long)+0x2d>
c00129b4:	83 ec 08             	sub    esp,0x8
c00129b7:	c1 e7 0b             	shl    edi,0xb
c00129ba:	55                   	push   ebp
c00129bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00129bf:	e8 f6 f4 ff ff       	call   c0011eba <VAS::getPageTableEntry(unsigned long)>
c00129c4:	8b 10                	mov    edx,DWORD PTR [eax]
c00129c6:	81 e2 fe 07 00 00    	and    edx,0x7fe
c00129cc:	09 d7                	or     edi,edx
c00129ce:	89 38                	mov    DWORD PTR [eax],edi
c00129d0:	ff 05 24 e4 02 c0    	inc    DWORD PTR ds:0xc002e424
c00129d6:	0f 20 d8             	mov    eax,cr3
c00129d9:	0f 22 d8             	mov    cr3,eax
c00129dc:	83 c4 1c             	add    esp,0x1c
c00129df:	5b                   	pop    ebx
c00129e0:	5e                   	pop    esi
c00129e1:	5f                   	pop    edi
c00129e2:	5d                   	pop    ebp
c00129e3:	c3                   	ret    

c00129e4 <VAS::tryLoadBackOffDisk(unsigned long)>:
c00129e4:	57                   	push   edi
c00129e5:	56                   	push   esi
c00129e6:	53                   	push   ebx
c00129e7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00129eb:	83 ec 08             	sub    esp,0x8
c00129ee:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00129f4:	53                   	push   ebx
c00129f5:	68 e6 a6 02 c0       	push   0xc002a6e6
c00129fa:	e8 d5 03 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c00129ff:	83 c4 10             	add    esp,0x10
c0012a02:	85 db                	test   ebx,ebx
c0012a04:	74 20                	je     c0012a26 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c0012a06:	83 ec 08             	sub    esp,0x8
c0012a09:	53                   	push   ebx
c0012a0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a0e:	e8 a7 f4 ff ff       	call   c0011eba <VAS::getPageTableEntry(unsigned long)>
c0012a13:	83 c4 10             	add    esp,0x10
c0012a16:	89 c6                	mov    esi,eax
c0012a18:	85 c0                	test   eax,eax
c0012a1a:	74 0a                	je     c0012a26 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c0012a1c:	8b 38                	mov    edi,DWORD PTR [eax]
c0012a1e:	f7 c7 01 00 00 00    	test   edi,0x1
c0012a24:	74 06                	je     c0012a2c <VAS::tryLoadBackOffDisk(unsigned long)+0x48>
c0012a26:	31 c0                	xor    eax,eax
c0012a28:	5b                   	pop    ebx
c0012a29:	5e                   	pop    esi
c0012a2a:	5f                   	pop    edi
c0012a2b:	c3                   	ret    
c0012a2c:	e8 ac d4 ff ff       	call   c000fedd <Phys::allocatePage()>
c0012a31:	c1 ef 0b             	shr    edi,0xb
c0012a34:	8b 16                	mov    edx,DWORD PTR [esi]
c0012a36:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012a3c:	09 c2                	or     edx,eax
c0012a3e:	81 ca 01 08 00 00    	or     edx,0x801
c0012a44:	89 16                	mov    DWORD PTR [esi],edx
c0012a46:	0f 20 d8             	mov    eax,cr3
c0012a49:	0f 22 d8             	mov    cr3,eax
c0012a4c:	a1 4c d2 02 c0       	mov    eax,ds:0xc002d24c
c0012a51:	85 c0                	test   eax,eax
c0012a53:	7e 3b                	jle    c0012a90 <VAS::tryLoadBackOffDisk(unsigned long)+0xac>
c0012a55:	31 f6                	xor    esi,esi
c0012a57:	83 ec 0c             	sub    esp,0xc
c0012a5a:	57                   	push   edi
c0012a5b:	e8 46 f2 ff ff       	call   c0011ca6 <Virt::swapIDToSector(unsigned long)>
c0012a60:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012a63:	01 f0                	add    eax,esi
c0012a65:	6a 01                	push   0x1
c0012a67:	31 d2                	xor    edx,edx
c0012a69:	46                   	inc    esi
c0012a6a:	52                   	push   edx
c0012a6b:	81 c3 00 02 00 00    	add    ebx,0x200
c0012a71:	50                   	push   eax
c0012a72:	0f be 05 58 d2 02 c0 	movsx  eax,BYTE PTR ds:0xc002d258
c0012a79:	ff 34 85 bc e7 02 c0 	push   DWORD PTR [eax*4-0x3ffd1844]
c0012a80:	e8 95 3b 00 00       	call   c001661a <LogicalDisk::read(unsigned long long, int, void*)>
c0012a85:	83 c4 20             	add    esp,0x20
c0012a88:	39 35 4c d2 02 c0    	cmp    DWORD PTR ds:0xc002d24c,esi
c0012a8e:	7f c7                	jg     c0012a57 <VAS::tryLoadBackOffDisk(unsigned long)+0x73>
c0012a90:	83 ec 0c             	sub    esp,0xc
c0012a93:	ff 0d 24 e4 02 c0    	dec    DWORD PTR ds:0xc002e424
c0012a99:	57                   	push   edi
c0012a9a:	e8 e9 f1 ff ff       	call   c0011c88 <Virt::freeSwapfilePage(unsigned long)>
c0012a9f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012aa3:	83 c4 10             	add    esp,0x10
c0012aa6:	25 ff 0f 00 00       	and    eax,0xfff
c0012aab:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012ab0:	77 07                	ja     c0012ab9 <VAS::tryLoadBackOffDisk(unsigned long)+0xd5>
c0012ab2:	b0 01                	mov    al,0x1
c0012ab4:	e9 6f ff ff ff       	jmp    c0012a28 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c0012ab9:	83 ec 0c             	sub    esp,0xc
c0012abc:	68 f4 a6 02 c0       	push   0xc002a6f4
c0012ac1:	e8 0e 03 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0012ac6:	83 c4 10             	add    esp,0x10
c0012ac9:	b0 01                	mov    al,0x1
c0012acb:	e9 58 ff ff ff       	jmp    c0012a28 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c0012ad0 <VAS::scanForEviction()>:
c0012ad0:	55                   	push   ebp
c0012ad1:	57                   	push   edi
c0012ad2:	31 ff                	xor    edi,edi
c0012ad4:	56                   	push   esi
c0012ad5:	31 f6                	xor    esi,esi
c0012ad7:	53                   	push   ebx
c0012ad8:	83 ec 1c             	sub    esp,0x1c
c0012adb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012adf:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0012ae2:	89 d8                	mov    eax,ebx
c0012ae4:	39 c3                	cmp    ebx,eax
c0012ae6:	74 72                	je     c0012b5a <VAS::scanForEviction()+0x8a>
c0012ae8:	a9 ff ff 3f 00       	test   eax,0x3fffff
c0012aed:	75 0e                	jne    c0012afd <VAS::scanForEviction()+0x2d>
c0012aef:	89 c1                	mov    ecx,eax
c0012af1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012af4:	c1 e9 16             	shr    ecx,0x16
c0012af7:	f6 04 8a 01          	test   BYTE PTR [edx+ecx*4],0x1
c0012afb:	74 51                	je     c0012b4e <VAS::scanForEviction()+0x7e>
c0012afd:	50                   	push   eax
c0012afe:	55                   	push   ebp
c0012aff:	e8 b6 f3 ff ff       	call   c0011eba <VAS::getPageTableEntry(unsigned long)>
c0012b04:	5a                   	pop    edx
c0012b05:	8b 10                	mov    edx,DWORD PTR [eax]
c0012b07:	59                   	pop    ecx
c0012b08:	89 d1                	mov    ecx,edx
c0012b0a:	81 e1 00 0c 00 00    	and    ecx,0xc00
c0012b10:	81 f9 00 0c 00 00    	cmp    ecx,0xc00
c0012b16:	74 54                	je     c0012b6c <VAS::scanForEviction()+0x9c>
c0012b18:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0012b1b:	05 00 10 00 00       	add    eax,0x1000
c0012b20:	3d ff ff bf ff       	cmp    eax,0xffbfffff
c0012b25:	76 3d                	jbe    c0012b64 <VAS::scanForEviction()+0x94>
c0012b27:	c7 45 10 00 00 00 00 	mov    DWORD PTR [ebp+0x10],0x0
c0012b2e:	85 db                	test   ebx,ebx
c0012b30:	74 79                	je     c0012bab <VAS::scanForEviction()+0xdb>
c0012b32:	31 c0                	xor    eax,eax
c0012b34:	be 01 00 00 00       	mov    esi,0x1
c0012b39:	a9 ff ff 3f 00       	test   eax,0x3fffff
c0012b3e:	75 bd                	jne    c0012afd <VAS::scanForEviction()+0x2d>
c0012b40:	89 c1                	mov    ecx,eax
c0012b42:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012b45:	c1 e9 16             	shr    ecx,0x16
c0012b48:	f6 04 8a 01          	test   BYTE PTR [edx+ecx*4],0x1
c0012b4c:	75 af                	jne    c0012afd <VAS::scanForEviction()+0x2d>
c0012b4e:	05 00 00 40 00       	add    eax,0x400000
c0012b53:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0012b56:	39 c3                	cmp    ebx,eax
c0012b58:	75 8e                	jne    c0012ae8 <VAS::scanForEviction()+0x18>
c0012b5a:	89 f1                	mov    ecx,esi
c0012b5c:	84 c9                	test   cl,cl
c0012b5e:	74 88                	je     c0012ae8 <VAS::scanForEviction()+0x18>
c0012b60:	89 f7                	mov    edi,esi
c0012b62:	eb 84                	jmp    c0012ae8 <VAS::scanForEviction()+0x18>
c0012b64:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0012b67:	e9 78 ff ff ff       	jmp    c0012ae4 <VAS::scanForEviction()+0x14>
c0012b6c:	f6 c2 01             	test   dl,0x1
c0012b6f:	74 a7                	je     c0012b18 <VAS::scanForEviction()+0x48>
c0012b71:	f6 c2 40             	test   dl,0x40
c0012b74:	74 0b                	je     c0012b81 <VAS::scanForEviction()+0xb1>
c0012b76:	83 e2 bf             	and    edx,0xffffffbf
c0012b79:	89 10                	mov    DWORD PTR [eax],edx
c0012b7b:	89 f8                	mov    eax,edi
c0012b7d:	84 c0                	test   al,al
c0012b7f:	74 97                	je     c0012b18 <VAS::scanForEviction()+0x48>
c0012b81:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012b85:	83 ec 08             	sub    esp,0x8
c0012b88:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0012b8b:	55                   	push   ebp
c0012b8c:	e8 bd fd ff ff       	call   c001294e <VAS::evict(unsigned long)>
c0012b91:	81 45 10 00 10 00 00 	add    DWORD PTR [ebp+0x10],0x1000
c0012b98:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012b9c:	83 c4 2c             	add    esp,0x2c
c0012b9f:	89 d0                	mov    eax,edx
c0012ba1:	5b                   	pop    ebx
c0012ba2:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012ba7:	5e                   	pop    esi
c0012ba8:	5f                   	pop    edi
c0012ba9:	5d                   	pop    ebp
c0012baa:	c3                   	ret    
c0012bab:	bf 01 00 00 00       	mov    edi,0x1
c0012bb0:	eb 80                	jmp    c0012b32 <VAS::scanForEviction()+0x62>

c0012bb2 <mapVASFirstTime>:
c0012bb2:	55                   	push   ebp
c0012bb3:	57                   	push   edi
c0012bb4:	56                   	push   esi
c0012bb5:	53                   	push   ebx
c0012bb6:	83 ec 0c             	sub    esp,0xc
c0012bb9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012bbe:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012bc1:	4a                   	dec    edx
c0012bc2:	0f 84 8e 00 00 00    	je     c0012c56 <mapVASFirstTime+0xa4>
c0012bc8:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012bcb:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012bce:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012bd3:	c1 e5 15             	shl    ebp,0x15
c0012bd6:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012bdb:	8b ba 32 19 00 00    	mov    edi,DWORD PTR [edx+0x1932]
c0012be1:	29 eb                	sub    ebx,ebp
c0012be3:	29 ee                	sub    esi,ebp
c0012be5:	e8 f3 d2 ff ff       	call   c000fedd <Phys::allocatePage()>
c0012bea:	83 ec 0c             	sub    esp,0xc
c0012bed:	68 03 04 00 00       	push   0x403
c0012bf2:	6a 01                	push   0x1
c0012bf4:	53                   	push   ebx
c0012bf5:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012bfb:	50                   	push   eax
c0012bfc:	57                   	push   edi
c0012bfd:	e8 32 f9 ff ff       	call   c0012534 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012c02:	83 c4 20             	add    esp,0x20
c0012c05:	39 f3                	cmp    ebx,esi
c0012c07:	75 dc                	jne    c0012be5 <mapVASFirstTime+0x33>
c0012c09:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012c0e:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012c13:	29 ee                	sub    esi,ebp
c0012c15:	29 e8                	sub    eax,ebp
c0012c17:	89 c5                	mov    ebp,eax
c0012c19:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012c1d:	19 db                	sbb    ebx,ebx
c0012c1f:	e8 b9 d2 ff ff       	call   c000fedd <Phys::allocatePage()>
c0012c24:	83 e3 04             	and    ebx,0x4
c0012c27:	83 ec 0c             	sub    esp,0xc
c0012c2a:	81 c3 03 04 00 00    	add    ebx,0x403
c0012c30:	53                   	push   ebx
c0012c31:	6a 01                	push   0x1
c0012c33:	56                   	push   esi
c0012c34:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012c3a:	50                   	push   eax
c0012c3b:	57                   	push   edi
c0012c3c:	e8 f3 f8 ff ff       	call   c0012534 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012c41:	83 c4 20             	add    esp,0x20
c0012c44:	39 f5                	cmp    ebp,esi
c0012c46:	75 d1                	jne    c0012c19 <mapVASFirstTime+0x67>
c0012c48:	0f 20 d8             	mov    eax,cr3
c0012c4b:	0f 22 d8             	mov    cr3,eax
c0012c4e:	83 c4 0c             	add    esp,0xc
c0012c51:	5b                   	pop    ebx
c0012c52:	5e                   	pop    esi
c0012c53:	5f                   	pop    edi
c0012c54:	5d                   	pop    ebp
c0012c55:	c3                   	ret    
c0012c56:	83 ec 0c             	sub    esp,0xc
c0012c59:	68 08 a7 02 c0       	push   0xc002a708
c0012c5e:	e8 71 01 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0012c63:	83 c4 10             	add    esp,0x10
c0012c66:	83 c4 0c             	add    esp,0xc
c0012c69:	5b                   	pop    ebx
c0012c6a:	5e                   	pop    esi
c0012c6b:	5f                   	pop    edi
c0012c6c:	5d                   	pop    ebp
c0012c6d:	c3                   	ret    

c0012c6e <__cxa_atexit>:
c0012c6e:	31 c0                	xor    eax,eax
c0012c70:	c3                   	ret    

c0012c71 <__cxa_finalize>:
c0012c71:	c3                   	ret    

c0012c72 <__stack_chk_fail>:
c0012c72:	55                   	push   ebp
c0012c73:	89 e5                	mov    ebp,esp
c0012c75:	83 ec 14             	sub    esp,0x14
c0012c78:	68 21 a7 02 c0       	push   0xc002a721
c0012c7d:	e8 52 01 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0012c82:	58                   	pop    eax
c0012c83:	5a                   	pop    edx
c0012c84:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012c87:	68 71 a7 02 c0       	push   0xc002a771
c0012c8c:	e8 43 01 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0012c91:	59                   	pop    ecx
c0012c92:	58                   	pop    eax
c0012c93:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012c96:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012c99:	68 71 a7 02 c0       	push   0xc002a771
c0012c9e:	e8 31 01 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0012ca3:	5a                   	pop    edx
c0012ca4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012ca7:	59                   	pop    ecx
c0012ca8:	8b 00                	mov    eax,DWORD PTR [eax]
c0012caa:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012cad:	68 71 a7 02 c0       	push   0xc002a771
c0012cb2:	e8 1d 01 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0012cb7:	5a                   	pop    edx
c0012cb8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012cbb:	59                   	pop    ecx
c0012cbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0012cbe:	8b 00                	mov    eax,DWORD PTR [eax]
c0012cc0:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012cc3:	68 71 a7 02 c0       	push   0xc002a771
c0012cc8:	e8 07 01 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0012ccd:	c7 04 24 79 a7 02 c0 	mov    DWORD PTR [esp],0xc002a779
c0012cd4:	e8 d6 77 00 00       	call   c001a4af <Krnl::panic(char const*)>
c0012cd9:	83 c4 10             	add    esp,0x10
c0012cdc:	c9                   	leave  
c0012cdd:	c3                   	ret    

c0012cde <__cxa_pure_virtual>:
c0012cde:	83 ec 18             	sub    esp,0x18
c0012ce1:	68 91 a7 02 c0       	push   0xc002a791
c0012ce6:	e8 c4 77 00 00       	call   c001a4af <Krnl::panic(char const*)>
c0012ceb:	83 c4 1c             	add    esp,0x1c
c0012cee:	c3                   	ret    

c0012cef <operator new[](unsigned long)>:
c0012cef:	e9 4c cb ff ff       	jmp    c000f840 <malloc>

c0012cf4 <operator delete(void*, unsigned long)>:
c0012cf4:	e9 67 cb ff ff       	jmp    c000f860 <rfree>

c0012cf9 <operator delete[](void*)>:
c0012cf9:	e9 62 cb ff ff       	jmp    c000f860 <rfree>

c0012cfe <operator delete[](void*, unsigned long)>:
c0012cfe:	e9 5d cb ff ff       	jmp    c000f860 <rfree>

c0012d03 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012d03:	57                   	push   edi
c0012d04:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012d09:	56                   	push   esi
c0012d0a:	be a4 a7 02 c0       	mov    esi,0xc002a7a4
c0012d0f:	53                   	push   ebx
c0012d10:	83 ec 40             	sub    esp,0x40
c0012d13:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012d17:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012d1b:	fc                   	cld    
c0012d1c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012d1e:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012d22:	83 f9 3e             	cmp    ecx,0x3e
c0012d25:	7e 05                	jle    c0012d2c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012d27:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012d2c:	89 df                	mov    edi,ebx
c0012d2e:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012d32:	eb 02                	jmp    c0012d36 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012d34:	89 c7                	mov    edi,eax
c0012d36:	31 d2                	xor    edx,edx
c0012d38:	46                   	inc    esi
c0012d39:	89 f8                	mov    eax,edi
c0012d3b:	f7 f1                	div    ecx
c0012d3d:	39 cf                	cmp    edi,ecx
c0012d3f:	73 f3                	jae    c0012d34 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012d41:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012d44:	eb 02                	jmp    c0012d48 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012d46:	89 c3                	mov    ebx,eax
c0012d48:	31 d2                	xor    edx,edx
c0012d4a:	4e                   	dec    esi
c0012d4b:	89 d8                	mov    eax,ebx
c0012d4d:	f7 f1                	div    ecx
c0012d4f:	39 cb                	cmp    ebx,ecx
c0012d51:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012d55:	88 16                	mov    BYTE PTR [esi],dl
c0012d57:	73 ed                	jae    c0012d46 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012d59:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012d5d:	83 c4 40             	add    esp,0x40
c0012d60:	5b                   	pop    ebx
c0012d61:	5e                   	pop    esi
c0012d62:	5f                   	pop    edi
c0012d63:	c3                   	ret    

c0012d64 <Dbg::logc(char)>:
c0012d64:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012d68:	ba fd 03 00 00       	mov    edx,0x3fd
c0012d6d:	ec                   	in     al,dx
c0012d6e:	a8 20                	test   al,0x20
c0012d70:	74 fb                	je     c0012d6d <Dbg::logc(char)+0x9>
c0012d72:	ba f8 03 00 00       	mov    edx,0x3f8
c0012d77:	88 c8                	mov    al,cl
c0012d79:	ee                   	out    dx,al
c0012d7a:	c3                   	ret    

c0012d7b <Dbg::logs(char*)>:
c0012d7b:	53                   	push   ebx
c0012d7c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012d80:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012d83:	84 c0                	test   al,al
c0012d85:	74 0f                	je     c0012d96 <Dbg::logs(char*)+0x1b>
c0012d87:	50                   	push   eax
c0012d88:	43                   	inc    ebx
c0012d89:	e8 d6 ff ff ff       	call   c0012d64 <Dbg::logc(char)>
c0012d8e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012d91:	5a                   	pop    edx
c0012d92:	84 c0                	test   al,al
c0012d94:	75 f1                	jne    c0012d87 <Dbg::logs(char*)+0xc>
c0012d96:	5b                   	pop    ebx
c0012d97:	c3                   	ret    

c0012d98 <Dbg::logWriteInt(unsigned int)>:
c0012d98:	83 ec 10             	sub    esp,0x10
c0012d9b:	6a 0a                	push   0xa
c0012d9d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012da1:	50                   	push   eax
c0012da2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012da6:	e8 58 ff ff ff       	call   c0012d03 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012dab:	50                   	push   eax
c0012dac:	e8 ca ff ff ff       	call   c0012d7b <Dbg::logs(char*)>
c0012db1:	83 c4 20             	add    esp,0x20
c0012db4:	c3                   	ret    

c0012db5 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012db5:	83 ec 10             	sub    esp,0x10
c0012db8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012dbc:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012dc0:	50                   	push   eax
c0012dc1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012dc5:	e8 39 ff ff ff       	call   c0012d03 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012dca:	50                   	push   eax
c0012dcb:	e8 ab ff ff ff       	call   c0012d7b <Dbg::logs(char*)>
c0012dd0:	83 c4 20             	add    esp,0x20
c0012dd3:	c3                   	ret    

c0012dd4 <Dbg::kprintf(char const*, ...)>:
c0012dd4:	55                   	push   ebp
c0012dd5:	57                   	push   edi
c0012dd6:	56                   	push   esi
c0012dd7:	53                   	push   ebx
c0012dd8:	83 ec 0c             	sub    esp,0xc
c0012ddb:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012ddf:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012de3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012de7:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012dea:	84 c0                	test   al,al
c0012dec:	74 4a                	je     c0012e38 <Dbg::kprintf(char const*, ...)+0x64>
c0012dee:	31 db                	xor    ebx,ebx
c0012df0:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012df3:	3c 25                	cmp    al,0x25
c0012df5:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012df8:	0f 85 e4 00 00 00    	jne    c0012ee2 <Dbg::kprintf(char const*, ...)+0x10e>
c0012dfe:	83 c3 02             	add    ebx,0x2
c0012e01:	8a 07                	mov    al,BYTE PTR [edi]
c0012e03:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012e06:	83 e8 25             	sub    eax,0x25
c0012e09:	3c 53                	cmp    al,0x53
c0012e0b:	0f 87 ba 00 00 00    	ja     c0012ecb <Dbg::kprintf(char const*, ...)+0xf7>
c0012e11:	0f b6 c0             	movzx  eax,al
c0012e14:	ff 24 85 e4 a7 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd581c]
c0012e1b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e1f:	89 c8                	mov    eax,ecx
c0012e21:	83 c1 04             	add    ecx,0x4
c0012e24:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012e28:	ff 30                	push   DWORD PTR [eax]
c0012e2a:	e8 4c ff ff ff       	call   c0012d7b <Dbg::logs(char*)>
c0012e2f:	58                   	pop    eax
c0012e30:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012e34:	84 c0                	test   al,al
c0012e36:	75 b8                	jne    c0012df0 <Dbg::kprintf(char const*, ...)+0x1c>
c0012e38:	83 c4 0c             	add    esp,0xc
c0012e3b:	5b                   	pop    ebx
c0012e3c:	5e                   	pop    esi
c0012e3d:	5f                   	pop    edi
c0012e3e:	5d                   	pop    ebp
c0012e3f:	c3                   	ret    
c0012e40:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012e44:	89 d0                	mov    eax,edx
c0012e46:	83 c2 04             	add    edx,0x4
c0012e49:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012e4d:	ff 30                	push   DWORD PTR [eax]
c0012e4f:	e8 44 ff ff ff       	call   c0012d98 <Dbg::logWriteInt(unsigned int)>
c0012e54:	58                   	pop    eax
c0012e55:	eb d9                	jmp    c0012e30 <Dbg::kprintf(char const*, ...)+0x5c>
c0012e57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012e5b:	89 d0                	mov    eax,edx
c0012e5d:	83 c2 04             	add    edx,0x4
c0012e60:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012e63:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012e67:	50                   	push   eax
c0012e68:	e8 f7 fe ff ff       	call   c0012d64 <Dbg::logc(char)>
c0012e6d:	58                   	pop    eax
c0012e6e:	eb c0                	jmp    c0012e30 <Dbg::kprintf(char const*, ...)+0x5c>
c0012e70:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e74:	89 c8                	mov    eax,ecx
c0012e76:	83 c1 04             	add    ecx,0x4
c0012e79:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012e7d:	ff 30                	push   DWORD PTR [eax]
c0012e7f:	e8 14 ff ff ff       	call   c0012d98 <Dbg::logWriteInt(unsigned int)>
c0012e84:	5f                   	pop    edi
c0012e85:	eb a9                	jmp    c0012e30 <Dbg::kprintf(char const*, ...)+0x5c>
c0012e87:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e8b:	89 c8                	mov    eax,ecx
c0012e8d:	83 c1 04             	add    ecx,0x4
c0012e90:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012e94:	6a 10                	push   0x10
c0012e96:	ff 30                	push   DWORD PTR [eax]
c0012e98:	e8 18 ff ff ff       	call   c0012db5 <Dbg::logWriteIntBase(unsigned int, int)>
c0012e9d:	59                   	pop    ecx
c0012e9e:	5f                   	pop    edi
c0012e9f:	eb 8f                	jmp    c0012e30 <Dbg::kprintf(char const*, ...)+0x5c>
c0012ea1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012ea5:	89 d0                	mov    eax,edx
c0012ea7:	83 c2 08             	add    edx,0x8
c0012eaa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012eae:	6a 10                	push   0x10
c0012eb0:	ff 30                	push   DWORD PTR [eax]
c0012eb2:	e8 fe fe ff ff       	call   c0012db5 <Dbg::logWriteIntBase(unsigned int, int)>
c0012eb7:	58                   	pop    eax
c0012eb8:	5a                   	pop    edx
c0012eb9:	e9 72 ff ff ff       	jmp    c0012e30 <Dbg::kprintf(char const*, ...)+0x5c>
c0012ebe:	6a 25                	push   0x25
c0012ec0:	e8 9f fe ff ff       	call   c0012d64 <Dbg::logc(char)>
c0012ec5:	58                   	pop    eax
c0012ec6:	e9 65 ff ff ff       	jmp    c0012e30 <Dbg::kprintf(char const*, ...)+0x5c>
c0012ecb:	6a 25                	push   0x25
c0012ecd:	e8 92 fe ff ff       	call   c0012d64 <Dbg::logc(char)>
c0012ed2:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012ed5:	50                   	push   eax
c0012ed6:	e8 89 fe ff ff       	call   c0012d64 <Dbg::logc(char)>
c0012edb:	5a                   	pop    edx
c0012edc:	59                   	pop    ecx
c0012edd:	e9 4e ff ff ff       	jmp    c0012e30 <Dbg::kprintf(char const*, ...)+0x5c>
c0012ee2:	50                   	push   eax
c0012ee3:	89 eb                	mov    ebx,ebp
c0012ee5:	e8 7a fe ff ff       	call   c0012d64 <Dbg::logc(char)>
c0012eea:	89 fd                	mov    ebp,edi
c0012eec:	58                   	pop    eax
c0012eed:	e9 3e ff ff ff       	jmp    c0012e30 <Dbg::kprintf(char const*, ...)+0x5c>

c0012ef2 <File::read(unsigned long long, void*, int*)>:
c0012ef2:	53                   	push   ebx
c0012ef3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ef7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012efb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012f02:	3c 19                	cmp    al,0x19
c0012f04:	77 35                	ja     c0012f3b <File::read(unsigned long long, void*, int*)+0x49>
c0012f06:	8b 04 85 c0 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1740]
c0012f0d:	85 c0                	test   eax,eax
c0012f0f:	74 2a                	je     c0012f3b <File::read(unsigned long long, void*, int*)+0x49>
c0012f11:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012f17:	85 c0                	test   eax,eax
c0012f19:	74 20                	je     c0012f3b <File::read(unsigned long long, void*, int*)+0x49>
c0012f1b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f1f:	74 21                	je     c0012f42 <File::read(unsigned long long, void*, int*)+0x50>
c0012f21:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012f23:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012f27:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012f2d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012f31:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012f35:	5b                   	pop    ebx
c0012f36:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012f39:	ff e0                	jmp    eax
c0012f3b:	b8 0b 00 00 00       	mov    eax,0xb
c0012f40:	eb 05                	jmp    c0012f47 <File::read(unsigned long long, void*, int*)+0x55>
c0012f42:	b8 05 00 00 00       	mov    eax,0x5
c0012f47:	5b                   	pop    ebx
c0012f48:	c3                   	ret    
c0012f49:	90                   	nop

c0012f4a <File::write(unsigned long long, void*, int*)>:
c0012f4a:	53                   	push   ebx
c0012f4b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012f4f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012f53:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012f5a:	3c 19                	cmp    al,0x19
c0012f5c:	77 35                	ja     c0012f93 <File::write(unsigned long long, void*, int*)+0x49>
c0012f5e:	8b 04 85 c0 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1740]
c0012f65:	85 c0                	test   eax,eax
c0012f67:	74 2a                	je     c0012f93 <File::write(unsigned long long, void*, int*)+0x49>
c0012f69:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012f6f:	85 c0                	test   eax,eax
c0012f71:	74 20                	je     c0012f93 <File::write(unsigned long long, void*, int*)+0x49>
c0012f73:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f77:	74 21                	je     c0012f9a <File::write(unsigned long long, void*, int*)+0x50>
c0012f79:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012f7b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012f7f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012f85:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012f89:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012f8d:	5b                   	pop    ebx
c0012f8e:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012f91:	ff e0                	jmp    eax
c0012f93:	b8 0b 00 00 00       	mov    eax,0xb
c0012f98:	eb 05                	jmp    c0012f9f <File::write(unsigned long long, void*, int*)+0x55>
c0012f9a:	b8 05 00 00 00       	mov    eax,0x5
c0012f9f:	5b                   	pop    ebx
c0012fa0:	c3                   	ret    
c0012fa1:	90                   	nop

c0012fa2 <Directory::read(unsigned long long, void*, int*)>:
c0012fa2:	53                   	push   ebx
c0012fa3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012fa7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012fab:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012fb2:	3c 19                	cmp    al,0x19
c0012fb4:	77 35                	ja     c0012feb <Directory::read(unsigned long long, void*, int*)+0x49>
c0012fb6:	8b 04 85 c0 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1740]
c0012fbd:	85 c0                	test   eax,eax
c0012fbf:	74 2a                	je     c0012feb <Directory::read(unsigned long long, void*, int*)+0x49>
c0012fc1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012fc7:	85 c0                	test   eax,eax
c0012fc9:	74 20                	je     c0012feb <Directory::read(unsigned long long, void*, int*)+0x49>
c0012fcb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012fcf:	74 21                	je     c0012ff2 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012fd1:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012fd3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012fd7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012fdd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012fe1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012fe5:	5b                   	pop    ebx
c0012fe6:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012fe9:	ff e0                	jmp    eax
c0012feb:	b8 0b 00 00 00       	mov    eax,0xb
c0012ff0:	eb 05                	jmp    c0012ff7 <Directory::read(unsigned long long, void*, int*)+0x55>
c0012ff2:	b8 05 00 00 00       	mov    eax,0x5
c0012ff7:	5b                   	pop    ebx
c0012ff8:	c3                   	ret    
c0012ff9:	90                   	nop

c0012ffa <Directory::write(unsigned long long, void*, int*)>:
c0012ffa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ffe:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0013005:	b8 0b 00 00 00       	mov    eax,0xb
c001300a:	80 fa 19             	cmp    dl,0x19
c001300d:	77 18                	ja     c0013027 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001300f:	8b 14 95 c0 e8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1740]
c0013016:	85 d2                	test   edx,edx
c0013018:	74 0d                	je     c0013027 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001301a:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0013021:	19 c0                	sbb    eax,eax
c0013023:	83 e0 0a             	and    eax,0xa
c0013026:	40                   	inc    eax
c0013027:	c3                   	ret    

c0013028 <File::isAtty()>:
c0013028:	31 c0                	xor    eax,eax
c001302a:	c3                   	ret    
c001302b:	90                   	nop

c001302c <Directory::isAtty()>:
c001302c:	31 c0                	xor    eax,eax
c001302e:	c3                   	ret    
c001302f:	90                   	nop

c0013030 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0013030:	b8 0a 00 00 00       	mov    eax,0xa
c0013035:	c3                   	ret    

c0013036 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0013036:	b8 0a 00 00 00       	mov    eax,0xa
c001303b:	c3                   	ret    

c001303c <File::~File()>:
c001303c:	83 ec 0c             	sub    esp,0xc
c001303f:	ba a0 a9 02 c0       	mov    edx,0xc002a9a0
c0013044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013048:	89 10                	mov    DWORD PTR [eax],edx
c001304a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001304e:	83 ec 0c             	sub    esp,0xc
c0013051:	50                   	push   eax
c0013052:	e8 bf e8 ff ff       	call   c0011916 <UnixFile::~UnixFile()>
c0013057:	83 c4 10             	add    esp,0x10
c001305a:	90                   	nop
c001305b:	83 c4 0c             	add    esp,0xc
c001305e:	c3                   	ret    
c001305f:	90                   	nop

c0013060 <File::~File()>:
c0013060:	83 ec 0c             	sub    esp,0xc
c0013063:	83 ec 0c             	sub    esp,0xc
c0013066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001306a:	e8 cd ff ff ff       	call   c001303c <File::~File()>
c001306f:	83 c4 10             	add    esp,0x10
c0013072:	83 ec 08             	sub    esp,0x8
c0013075:	68 14 01 00 00       	push   0x114
c001307a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001307e:	e8 71 fc ff ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0013083:	83 c4 10             	add    esp,0x10
c0013086:	83 c4 0c             	add    esp,0xc
c0013089:	c3                   	ret    

c001308a <Directory::~Directory()>:
c001308a:	83 ec 0c             	sub    esp,0xc
c001308d:	ba bc a9 02 c0       	mov    edx,0xc002a9bc
c0013092:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013096:	89 10                	mov    DWORD PTR [eax],edx
c0013098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001309c:	83 ec 0c             	sub    esp,0xc
c001309f:	50                   	push   eax
c00130a0:	e8 71 e8 ff ff       	call   c0011916 <UnixFile::~UnixFile()>
c00130a5:	83 c4 10             	add    esp,0x10
c00130a8:	90                   	nop
c00130a9:	83 c4 0c             	add    esp,0xc
c00130ac:	c3                   	ret    
c00130ad:	90                   	nop

c00130ae <Directory::~Directory()>:
c00130ae:	83 ec 0c             	sub    esp,0xc
c00130b1:	83 ec 0c             	sub    esp,0xc
c00130b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130b8:	e8 cd ff ff ff       	call   c001308a <Directory::~Directory()>
c00130bd:	83 c4 10             	add    esp,0x10
c00130c0:	83 ec 08             	sub    esp,0x8
c00130c3:	68 14 01 00 00       	push   0x114
c00130c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130cc:	e8 23 fc ff ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c00130d1:	83 c4 10             	add    esp,0x10
c00130d4:	83 c4 0c             	add    esp,0xc
c00130d7:	c3                   	ret    

c00130d8 <Filesystem::Filesystem()>:
c00130d8:	ba 3c a9 02 c0       	mov    edx,0xc002a93c
c00130dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130e1:	89 10                	mov    DWORD PTR [eax],edx
c00130e3:	8b 15 30 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e430
c00130e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130ed:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00130f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130f4:	a3 30 e4 02 c0       	mov    ds:0xc002e430,eax
c00130f9:	90                   	nop
c00130fa:	c3                   	ret    
c00130fb:	90                   	nop

c00130fc <Filesystem::~Filesystem()>:
c00130fc:	ba 3c a9 02 c0       	mov    edx,0xc002a93c
c0013101:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013105:	89 10                	mov    DWORD PTR [eax],edx
c0013107:	90                   	nop
c0013108:	c3                   	ret    
c0013109:	90                   	nop

c001310a <Filesystem::~Filesystem()>:
c001310a:	83 ec 0c             	sub    esp,0xc
c001310d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013111:	e8 e6 ff ff ff       	call   c00130fc <Filesystem::~Filesystem()>
c0013116:	83 c4 04             	add    esp,0x4
c0013119:	83 ec 08             	sub    esp,0x8
c001311c:	6a 08                	push   0x8
c001311e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013122:	e8 cd fb ff ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0013127:	83 c4 10             	add    esp,0x10
c001312a:	83 c4 0c             	add    esp,0xc
c001312d:	c3                   	ret    

c001312e <Fs::getcwd(Process*, char*, int)>:
c001312e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013132:	31 c0                	xor    eax,eax
c0013134:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0013137:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001313b:	7d 15                	jge    c0013152 <Fs::getcwd(Process*, char*, int)+0x24>
c001313d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013141:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0013148:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001314b:	84 c9                	test   cl,cl
c001314d:	74 06                	je     c0013155 <Fs::getcwd(Process*, char*, int)+0x27>
c001314f:	40                   	inc    eax
c0013150:	eb e2                	jmp    c0013134 <Fs::getcwd(Process*, char*, int)+0x6>
c0013152:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0013155:	31 c0                	xor    eax,eax
c0013157:	c3                   	ret    

c0013158 <Fs::initVFS()>:
c0013158:	83 ec 18             	sub    esp,0x18
c001315b:	6a 08                	push   0x8
c001315d:	e8 de c6 ff ff       	call   c000f840 <malloc>
c0013162:	89 04 24             	mov    DWORD PTR [esp],eax
c0013165:	e8 e0 dc 00 00       	call   c0020e4a <FAT::FAT()>
c001316a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013171:	e8 ca c6 ff ff       	call   c000f840 <malloc>
c0013176:	89 04 24             	mov    DWORD PTR [esp],eax
c0013179:	e8 24 ef 00 00       	call   c00220a2 <ISO9660::ISO9660()>
c001317e:	83 c4 1c             	add    esp,0x1c
c0013181:	c3                   	ret    

c0013182 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0013182:	55                   	push   ebp
c0013183:	57                   	push   edi
c0013184:	56                   	push   esi
c0013185:	53                   	push   ebx
c0013186:	81 ec 10 04 00 00    	sub    esp,0x410
c001318c:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0013193:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c001319a:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c00131a1:	68 00 04 00 00       	push   0x400
c00131a6:	6a 00                	push   0x0
c00131a8:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00131ac:	56                   	push   esi
c00131ad:	e8 c6 d5 fe ff       	call   c0000778 <memset>
c00131b2:	83 c4 10             	add    esp,0x10
c00131b5:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c00131b9:	75 0b                	jne    c00131c6 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c00131bb:	50                   	push   eax
c00131bc:	50                   	push   eax
c00131bd:	57                   	push   edi
c00131be:	56                   	push   esi
c00131bf:	e8 70 d6 fe ff       	call   c0000834 <strcpy>
c00131c4:	eb 41                	jmp    c0013207 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c00131c6:	8a 07                	mov    al,BYTE PTR [edi]
c00131c8:	3c 5c                	cmp    al,0x5c
c00131ca:	74 04                	je     c00131d0 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c00131cc:	3c 2f                	cmp    al,0x2f
c00131ce:	75 18                	jne    c00131e8 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c00131d0:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c00131d3:	3c 60                	cmp    al,0x60
c00131d5:	7e 03                	jle    c00131da <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c00131d7:	83 e8 20             	sub    eax,0x20
c00131da:	88 04 24             	mov    BYTE PTR [esp],al
c00131dd:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00131e4:	50                   	push   eax
c00131e5:	50                   	push   eax
c00131e6:	eb 18                	jmp    c0013200 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c00131e8:	50                   	push   eax
c00131e9:	50                   	push   eax
c00131ea:	55                   	push   ebp
c00131eb:	56                   	push   esi
c00131ec:	e8 43 d6 fe ff       	call   c0000834 <strcpy>
c00131f1:	5a                   	pop    edx
c00131f2:	59                   	pop    ecx
c00131f3:	68 98 c0 02 c0       	push   0xc002c098
c00131f8:	56                   	push   esi
c00131f9:	e8 76 d7 fe ff       	call   c0000974 <strcat>
c00131fe:	5d                   	pop    ebp
c00131ff:	58                   	pop    eax
c0013200:	57                   	push   edi
c0013201:	56                   	push   esi
c0013202:	e8 6d d7 fe ff       	call   c0000974 <strcat>
c0013207:	83 c4 10             	add    esp,0x10
c001320a:	8a 04 24             	mov    al,BYTE PTR [esp]
c001320d:	3c 60                	cmp    al,0x60
c001320f:	7e 03                	jle    c0013214 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0013211:	83 e8 20             	sub    eax,0x20
c0013214:	88 04 24             	mov    BYTE PTR [esp],al
c0013217:	88 03                	mov    BYTE PTR [ebx],al
c0013219:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0013220:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0013226:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c001322a:	bf 03 00 00 00       	mov    edi,0x3
c001322f:	b8 03 00 00 00       	mov    eax,0x3
c0013234:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0013237:	84 d2                	test   dl,dl
c0013239:	0f 84 91 00 00 00    	je     c00132d0 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c001323f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0013242:	80 fa 5c             	cmp    dl,0x5c
c0013245:	74 05                	je     c001324c <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0013247:	80 fa 2f             	cmp    dl,0x2f
c001324a:	75 12                	jne    c001325e <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c001324c:	89 c5                	mov    ebp,eax
c001324e:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013253:	74 09                	je     c001325e <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013255:	40                   	inc    eax
c0013256:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c001325a:	89 cf                	mov    edi,ecx
c001325c:	eb d6                	jmp    c0013234 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c001325e:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0013263:	75 5b                	jne    c00132c0 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013265:	80 fa 2e             	cmp    dl,0x2e
c0013268:	75 56                	jne    c00132c0 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c001326a:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c001326e:	74 19                	je     c0013289 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0013270:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013275:	74 53                	je     c00132ca <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013277:	89 f9                	mov    ecx,edi
c0013279:	41                   	inc    ecx
c001327a:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c001327d:	80 fa 2f             	cmp    dl,0x2f
c0013280:	74 f7                	je     c0013279 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013282:	80 fa 5c             	cmp    dl,0x5c
c0013285:	74 f2                	je     c0013279 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013287:	eb d1                	jmp    c001325a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013289:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c001328e:	74 3a                	je     c00132ca <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013290:	83 f8 03             	cmp    eax,0x3
c0013293:	74 c5                	je     c001325a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013295:	41                   	inc    ecx
c0013296:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013299:	80 fa 2f             	cmp    dl,0x2f
c001329c:	74 f7                	je     c0013295 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c001329e:	80 fa 5c             	cmp    dl,0x5c
c00132a1:	74 f2                	je     c0013295 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00132a3:	48                   	dec    eax
c00132a4:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00132a8:	75 06                	jne    c00132b0 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00132aa:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00132ae:	eb f3                	jmp    c00132a3 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c00132b0:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00132b4:	74 07                	je     c00132bd <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c00132b6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00132ba:	48                   	dec    eax
c00132bb:	eb f3                	jmp    c00132b0 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00132bd:	40                   	inc    eax
c00132be:	eb 9a                	jmp    c001325a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00132c0:	80 fa 2f             	cmp    dl,0x2f
c00132c3:	74 95                	je     c001325a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00132c5:	80 fa 5c             	cmp    dl,0x5c
c00132c8:	74 90                	je     c001325a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00132ca:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c00132cd:	40                   	inc    eax
c00132ce:	eb 8a                	jmp    c001325a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00132d0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00132d4:	83 ec 0c             	sub    esp,0xc
c00132d7:	53                   	push   ebx
c00132d8:	e8 b7 d4 fe ff       	call   c0000794 <strlen>
c00132dd:	83 c4 10             	add    esp,0x10
c00132e0:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c00132e5:	75 26                	jne    c001330d <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c00132e7:	83 ec 0c             	sub    esp,0xc
c00132ea:	53                   	push   ebx
c00132eb:	e8 a4 d4 fe ff       	call   c0000794 <strlen>
c00132f0:	83 c4 10             	add    esp,0x10
c00132f3:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c00132f8:	74 26                	je     c0013320 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c00132fa:	83 ec 0c             	sub    esp,0xc
c00132fd:	53                   	push   ebx
c00132fe:	e8 91 d4 fe ff       	call   c0000794 <strlen>
c0013303:	83 c4 10             	add    esp,0x10
c0013306:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001330b:	eb c7                	jmp    c00132d4 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c001330d:	83 ec 0c             	sub    esp,0xc
c0013310:	53                   	push   ebx
c0013311:	e8 7e d4 fe ff       	call   c0000794 <strlen>
c0013316:	83 c4 10             	add    esp,0x10
c0013319:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001331e:	74 c7                	je     c00132e7 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0013320:	81 c4 0c 04 00 00    	add    esp,0x40c
c0013326:	5b                   	pop    ebx
c0013327:	5e                   	pop    esi
c0013328:	5f                   	pop    edi
c0013329:	5d                   	pop    ebp
c001332a:	c3                   	ret    
c001332b:	90                   	nop

c001332c <File::File(char const*, Process*)>:
c001332c:	83 ec 0c             	sub    esp,0xc
c001332f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013333:	83 ec 08             	sub    esp,0x8
c0013336:	6a 00                	push   0x0
c0013338:	50                   	push   eax
c0013339:	e8 f6 e3 ff ff       	call   c0011734 <UnixFile::UnixFile(int)>
c001333e:	83 c4 10             	add    esp,0x10
c0013341:	ba a0 a9 02 c0       	mov    edx,0xc002a9a0
c0013346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001334a:	89 10                	mov    DWORD PTR [eax],edx
c001334c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013350:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001335a:	83 c0 0d             	add    eax,0xd
c001335d:	83 ec 04             	sub    esp,0x4
c0013360:	52                   	push   edx
c0013361:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013365:	50                   	push   eax
c0013366:	e8 17 fe ff ff       	call   c0013182 <Fs::standardiseFiles(char*, char const*, char const*)>
c001336b:	83 c4 10             	add    esp,0x10
c001336e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013372:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013375:	8d 50 bf             	lea    edx,[eax-0x41]
c0013378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001337c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013386:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001338a:	90                   	nop
c001338b:	83 c4 0c             	add    esp,0xc
c001338e:	c3                   	ret    
c001338f:	90                   	nop

c0013390 <File::open(FileOpenMode)>:
c0013390:	53                   	push   ebx
c0013391:	b8 0b 00 00 00       	mov    eax,0xb
c0013396:	83 ec 08             	sub    esp,0x8
c0013399:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001339d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00133a4:	80 fa 19             	cmp    dl,0x19
c00133a7:	77 40                	ja     c00133e9 <File::open(FileOpenMode)+0x59>
c00133a9:	8b 14 95 c0 e8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1740]
c00133b0:	85 d2                	test   edx,edx
c00133b2:	74 35                	je     c00133e9 <File::open(FileOpenMode)+0x59>
c00133b4:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00133ba:	85 d2                	test   edx,edx
c00133bc:	74 2b                	je     c00133e9 <File::open(FileOpenMode)+0x59>
c00133be:	b8 06 00 00 00       	mov    eax,0x6
c00133c3:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00133c7:	75 20                	jne    c00133e9 <File::open(FileOpenMode)+0x59>
c00133c9:	8b 02                	mov    eax,DWORD PTR [edx]
c00133cb:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00133d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00133d5:	51                   	push   ecx
c00133d6:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00133d9:	51                   	push   ecx
c00133da:	52                   	push   edx
c00133db:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00133de:	83 c4 10             	add    esp,0x10
c00133e1:	85 c0                	test   eax,eax
c00133e3:	75 04                	jne    c00133e9 <File::open(FileOpenMode)+0x59>
c00133e5:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00133e9:	83 c4 08             	add    esp,0x8
c00133ec:	5b                   	pop    ebx
c00133ed:	c3                   	ret    

c00133ee <File::close()>:
c00133ee:	53                   	push   ebx
c00133ef:	b8 0b 00 00 00       	mov    eax,0xb
c00133f4:	83 ec 08             	sub    esp,0x8
c00133f7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00133fb:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013402:	80 fa 19             	cmp    dl,0x19
c0013405:	77 41                	ja     c0013448 <File::close()+0x5a>
c0013407:	8b 1c 95 c0 e8 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1740]
c001340e:	85 db                	test   ebx,ebx
c0013410:	74 36                	je     c0013448 <File::close()+0x5a>
c0013412:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013419:	74 2d                	je     c0013448 <File::close()+0x5a>
c001341b:	b8 05 00 00 00       	mov    eax,0x5
c0013420:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013424:	74 22                	je     c0013448 <File::close()+0x5a>
c0013426:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001342a:	8b 04 95 c0 e8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1740]
c0013431:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013437:	53                   	push   ebx
c0013438:	53                   	push   ebx
c0013439:	8b 10                	mov    edx,DWORD PTR [eax]
c001343b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013441:	50                   	push   eax
c0013442:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0013445:	83 c4 10             	add    esp,0x10
c0013448:	83 c4 08             	add    esp,0x8
c001344b:	5b                   	pop    ebx
c001344c:	c3                   	ret    
c001344d:	90                   	nop

c001344e <File::seek(unsigned long long)>:
c001344e:	56                   	push   esi
c001344f:	53                   	push   ebx
c0013450:	b8 0b 00 00 00       	mov    eax,0xb
c0013455:	51                   	push   ecx
c0013456:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001345a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001345e:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0013465:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013469:	80 fa 19             	cmp    dl,0x19
c001346c:	77 31                	ja     c001349f <File::seek(unsigned long long)+0x51>
c001346e:	8b 14 95 c0 e8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1740]
c0013475:	85 d2                	test   edx,edx
c0013477:	74 26                	je     c001349f <File::seek(unsigned long long)+0x51>
c0013479:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001347f:	85 d2                	test   edx,edx
c0013481:	74 1c                	je     c001349f <File::seek(unsigned long long)+0x51>
c0013483:	b8 05 00 00 00       	mov    eax,0x5
c0013488:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001348c:	74 11                	je     c001349f <File::seek(unsigned long long)+0x51>
c001348e:	8b 02                	mov    eax,DWORD PTR [edx]
c0013490:	53                   	push   ebx
c0013491:	51                   	push   ecx
c0013492:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0013498:	52                   	push   edx
c0013499:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001349c:	83 c4 10             	add    esp,0x10
c001349f:	5a                   	pop    edx
c00134a0:	5b                   	pop    ebx
c00134a1:	5e                   	pop    esi
c00134a2:	c3                   	ret    
c00134a3:	90                   	nop

c00134a4 <File::tell(unsigned long long*)>:
c00134a4:	83 ec 0c             	sub    esp,0xc
c00134a7:	b8 0b 00 00 00       	mov    eax,0xb
c00134ac:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00134b0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00134b7:	80 fa 19             	cmp    dl,0x19
c00134ba:	77 34                	ja     c00134f0 <File::tell(unsigned long long*)+0x4c>
c00134bc:	8b 14 95 c0 e8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1740]
c00134c3:	85 d2                	test   edx,edx
c00134c5:	74 29                	je     c00134f0 <File::tell(unsigned long long*)+0x4c>
c00134c7:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00134cd:	85 d2                	test   edx,edx
c00134cf:	74 1f                	je     c00134f0 <File::tell(unsigned long long*)+0x4c>
c00134d1:	b8 05 00 00 00       	mov    eax,0x5
c00134d6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00134da:	74 14                	je     c00134f0 <File::tell(unsigned long long*)+0x4c>
c00134dc:	50                   	push   eax
c00134dd:	8b 02                	mov    eax,DWORD PTR [edx]
c00134df:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00134e3:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00134e9:	52                   	push   edx
c00134ea:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00134ed:	83 c4 10             	add    esp,0x10
c00134f0:	83 c4 0c             	add    esp,0xc
c00134f3:	c3                   	ret    

c00134f4 <File::rewind()>:
c00134f4:	83 ec 10             	sub    esp,0x10
c00134f7:	6a 00                	push   0x0
c00134f9:	6a 00                	push   0x0
c00134fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134ff:	e8 4a ff ff ff       	call   c001344e <File::seek(unsigned long long)>
c0013504:	83 c4 1c             	add    esp,0x1c
c0013507:	c3                   	ret    

c0013508 <File::unlink()>:
c0013508:	83 ec 0c             	sub    esp,0xc
c001350b:	b8 0b 00 00 00       	mov    eax,0xb
c0013510:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013514:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001351b:	80 f9 19             	cmp    cl,0x19
c001351e:	77 2f                	ja     c001354f <File::unlink()+0x47>
c0013520:	8b 0c 8d c0 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1740]
c0013527:	85 c9                	test   ecx,ecx
c0013529:	74 24                	je     c001354f <File::unlink()+0x47>
c001352b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013531:	85 c9                	test   ecx,ecx
c0013533:	74 1a                	je     c001354f <File::unlink()+0x47>
c0013535:	b8 06 00 00 00       	mov    eax,0x6
c001353a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001353e:	75 0f                	jne    c001354f <File::unlink()+0x47>
c0013540:	83 c2 0d             	add    edx,0xd
c0013543:	50                   	push   eax
c0013544:	50                   	push   eax
c0013545:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013547:	52                   	push   edx
c0013548:	51                   	push   ecx
c0013549:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001354c:	83 c4 10             	add    esp,0x10
c001354f:	83 c4 0c             	add    esp,0xc
c0013552:	c3                   	ret    
c0013553:	90                   	nop

c0013554 <File::rename(char const*)>:
c0013554:	83 ec 0c             	sub    esp,0xc
c0013557:	b8 0b 00 00 00       	mov    eax,0xb
c001355c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013560:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013567:	80 f9 19             	cmp    cl,0x19
c001356a:	77 32                	ja     c001359e <File::rename(char const*)+0x4a>
c001356c:	8b 0c 8d c0 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1740]
c0013573:	85 c9                	test   ecx,ecx
c0013575:	74 27                	je     c001359e <File::rename(char const*)+0x4a>
c0013577:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001357d:	85 c9                	test   ecx,ecx
c001357f:	74 1d                	je     c001359e <File::rename(char const*)+0x4a>
c0013581:	b8 06 00 00 00       	mov    eax,0x6
c0013586:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001358a:	75 12                	jne    c001359e <File::rename(char const*)+0x4a>
c001358c:	83 c2 0d             	add    edx,0xd
c001358f:	50                   	push   eax
c0013590:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013592:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013596:	52                   	push   edx
c0013597:	51                   	push   ecx
c0013598:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001359b:	83 c4 10             	add    esp,0x10
c001359e:	83 c4 0c             	add    esp,0xc
c00135a1:	c3                   	ret    

c00135a2 <File::chfatattr(unsigned char, unsigned char)>:
c00135a2:	57                   	push   edi
c00135a3:	b8 0b 00 00 00       	mov    eax,0xb
c00135a8:	56                   	push   esi
c00135a9:	53                   	push   ebx
c00135aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00135ae:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00135b2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00135b9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00135bd:	80 f9 19             	cmp    cl,0x19
c00135c0:	77 37                	ja     c00135f9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00135c2:	8b 0c 8d c0 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1740]
c00135c9:	85 c9                	test   ecx,ecx
c00135cb:	74 2c                	je     c00135f9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00135cd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00135d3:	85 c9                	test   ecx,ecx
c00135d5:	74 22                	je     c00135f9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00135d7:	b8 06 00 00 00       	mov    eax,0x6
c00135dc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00135e0:	75 17                	jne    c00135f9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00135e2:	8b 39                	mov    edi,DWORD PTR [ecx]
c00135e4:	89 f0                	mov    eax,esi
c00135e6:	83 c2 0d             	add    edx,0xd
c00135e9:	0f b6 f0             	movzx  esi,al
c00135ec:	0f b6 db             	movzx  ebx,bl
c00135ef:	56                   	push   esi
c00135f0:	53                   	push   ebx
c00135f1:	52                   	push   edx
c00135f2:	51                   	push   ecx
c00135f3:	ff 57 34             	call   DWORD PTR [edi+0x34]
c00135f6:	83 c4 10             	add    esp,0x10
c00135f9:	5b                   	pop    ebx
c00135fa:	5e                   	pop    esi
c00135fb:	5f                   	pop    edi
c00135fc:	c3                   	ret    
c00135fd:	90                   	nop

c00135fe <File::exists()>:
c00135fe:	83 ec 0c             	sub    esp,0xc
c0013601:	31 c0                	xor    eax,eax
c0013603:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013607:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001360e:	80 f9 19             	cmp    cl,0x19
c0013611:	77 24                	ja     c0013637 <File::exists()+0x39>
c0013613:	8b 0c 8d c0 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1740]
c001361a:	85 c9                	test   ecx,ecx
c001361c:	74 19                	je     c0013637 <File::exists()+0x39>
c001361e:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013624:	85 c9                	test   ecx,ecx
c0013626:	74 0f                	je     c0013637 <File::exists()+0x39>
c0013628:	83 c2 0d             	add    edx,0xd
c001362b:	50                   	push   eax
c001362c:	50                   	push   eax
c001362d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001362f:	52                   	push   edx
c0013630:	51                   	push   ecx
c0013631:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013634:	83 c4 10             	add    esp,0x10
c0013637:	83 c4 0c             	add    esp,0xc
c001363a:	c3                   	ret    
c001363b:	90                   	nop

c001363c <File::stat(unsigned long long*, bool*)>:
c001363c:	56                   	push   esi
c001363d:	53                   	push   ebx
c001363e:	50                   	push   eax
c001363f:	b8 0b 00 00 00       	mov    eax,0xb
c0013644:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013648:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001364c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013653:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013657:	80 f9 19             	cmp    cl,0x19
c001365a:	77 3d                	ja     c0013699 <File::stat(unsigned long long*, bool*)+0x5d>
c001365c:	8b 0c 8d c0 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1740]
c0013663:	85 c9                	test   ecx,ecx
c0013665:	74 32                	je     c0013699 <File::stat(unsigned long long*, bool*)+0x5d>
c0013667:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001366d:	85 c9                	test   ecx,ecx
c001366f:	74 28                	je     c0013699 <File::stat(unsigned long long*, bool*)+0x5d>
c0013671:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013673:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013677:	74 13                	je     c001368c <File::stat(unsigned long long*, bool*)+0x50>
c0013679:	83 ec 04             	sub    esp,0x4
c001367c:	56                   	push   esi
c001367d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013683:	51                   	push   ecx
c0013684:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0013687:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001368a:	eb 0a                	jmp    c0013696 <File::stat(unsigned long long*, bool*)+0x5a>
c001368c:	53                   	push   ebx
c001368d:	83 c2 0d             	add    edx,0xd
c0013690:	56                   	push   esi
c0013691:	52                   	push   edx
c0013692:	51                   	push   ecx
c0013693:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0013696:	83 c4 10             	add    esp,0x10
c0013699:	5a                   	pop    edx
c001369a:	5b                   	pop    ebx
c001369b:	5e                   	pop    esi
c001369c:	c3                   	ret    

c001369d <Fs::setcwd(Process*, char*)>:
c001369d:	55                   	push   ebp
c001369e:	57                   	push   edi
c001369f:	56                   	push   esi
c00136a0:	53                   	push   ebx
c00136a1:	81 ec 20 02 00 00    	sub    esp,0x220
c00136a7:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00136ae:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00136b4:	57                   	push   edi
c00136b5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00136bc:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00136c0:	56                   	push   esi
c00136c1:	e8 bc fa ff ff       	call   c0013182 <Fs::standardiseFiles(char*, char const*, char const*)>
c00136c6:	89 34 24             	mov    DWORD PTR [esp],esi
c00136c9:	e8 c6 d0 fe ff       	call   c0000794 <strlen>
c00136ce:	83 c4 10             	add    esp,0x10
c00136d1:	83 f8 02             	cmp    eax,0x2
c00136d4:	77 17                	ja     c00136ed <Fs::setcwd(Process*, char*)+0x50>
c00136d6:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00136db:	83 e8 41             	sub    eax,0x41
c00136de:	83 f8 19             	cmp    eax,0x19
c00136e1:	76 24                	jbe    c0013707 <Fs::setcwd(Process*, char*)+0x6a>
c00136e3:	b8 03 00 00 00       	mov    eax,0x3
c00136e8:	e9 e0 00 00 00       	jmp    c00137cd <Fs::setcwd(Process*, char*)+0x130>
c00136ed:	83 ec 0c             	sub    esp,0xc
c00136f0:	56                   	push   esi
c00136f1:	e8 9e d0 fe ff       	call   c0000794 <strlen>
c00136f6:	83 c4 10             	add    esp,0x10
c00136f9:	83 f8 03             	cmp    eax,0x3
c00136fc:	75 34                	jne    c0013732 <Fs::setcwd(Process*, char*)+0x95>
c00136fe:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013703:	75 2d                	jne    c0013732 <Fs::setcwd(Process*, char*)+0x95>
c0013705:	eb cf                	jmp    c00136d6 <Fs::setcwd(Process*, char*)+0x39>
c0013707:	8b 14 85 c0 e8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1740]
c001370e:	b8 05 00 00 00       	mov    eax,0x5
c0013713:	85 d2                	test   edx,edx
c0013715:	0f 84 b2 00 00 00    	je     c00137cd <Fs::setcwd(Process*, char*)+0x130>
c001371b:	b8 06 00 00 00       	mov    eax,0x6
c0013720:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013727:	0f 85 92 00 00 00    	jne    c00137bf <Fs::setcwd(Process*, char*)+0x122>
c001372d:	e9 9b 00 00 00       	jmp    c00137cd <Fs::setcwd(Process*, char*)+0x130>
c0013732:	83 ec 0c             	sub    esp,0xc
c0013735:	68 14 01 00 00       	push   0x114
c001373a:	e8 01 c1 ff ff       	call   c000f840 <malloc>
c001373f:	83 c4 0c             	add    esp,0xc
c0013742:	89 c3                	mov    ebx,eax
c0013744:	55                   	push   ebp
c0013745:	56                   	push   esi
c0013746:	50                   	push   eax
c0013747:	e8 e0 fb ff ff       	call   c001332c <File::File(char const*, Process*)>
c001374c:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013751:	83 c4 0c             	add    esp,0xc
c0013754:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013758:	50                   	push   eax
c0013759:	8d 44 24 10          	lea    eax,[esp+0x10]
c001375d:	50                   	push   eax
c001375e:	53                   	push   ebx
c001375f:	e8 d8 fe ff ff       	call   c001363c <File::stat(unsigned long long*, bool*)>
c0013764:	83 c4 10             	add    esp,0x10
c0013767:	83 f8 02             	cmp    eax,0x2
c001376a:	74 04                	je     c0013770 <Fs::setcwd(Process*, char*)+0xd3>
c001376c:	85 c0                	test   eax,eax
c001376e:	74 1c                	je     c001378c <Fs::setcwd(Process*, char*)+0xef>
c0013770:	b8 01 00 00 00       	mov    eax,0x1
c0013775:	85 db                	test   ebx,ebx
c0013777:	74 54                	je     c00137cd <Fs::setcwd(Process*, char*)+0x130>
c0013779:	83 ec 0c             	sub    esp,0xc
c001377c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001377e:	53                   	push   ebx
c001377f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013782:	83 c4 10             	add    esp,0x10
c0013785:	b8 01 00 00 00       	mov    eax,0x1
c001378a:	eb 41                	jmp    c00137cd <Fs::setcwd(Process*, char*)+0x130>
c001378c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013791:	75 1c                	jne    c00137af <Fs::setcwd(Process*, char*)+0x112>
c0013793:	b8 02 00 00 00       	mov    eax,0x2
c0013798:	85 db                	test   ebx,ebx
c001379a:	74 31                	je     c00137cd <Fs::setcwd(Process*, char*)+0x130>
c001379c:	83 ec 0c             	sub    esp,0xc
c001379f:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137a1:	53                   	push   ebx
c00137a2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00137a5:	83 c4 10             	add    esp,0x10
c00137a8:	b8 02 00 00 00       	mov    eax,0x2
c00137ad:	eb 1e                	jmp    c00137cd <Fs::setcwd(Process*, char*)+0x130>
c00137af:	85 db                	test   ebx,ebx
c00137b1:	74 0c                	je     c00137bf <Fs::setcwd(Process*, char*)+0x122>
c00137b3:	83 ec 0c             	sub    esp,0xc
c00137b6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137b8:	53                   	push   ebx
c00137b9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00137bc:	83 c4 10             	add    esp,0x10
c00137bf:	50                   	push   eax
c00137c0:	50                   	push   eax
c00137c1:	56                   	push   esi
c00137c2:	57                   	push   edi
c00137c3:	e8 6c d0 fe ff       	call   c0000834 <strcpy>
c00137c8:	83 c4 10             	add    esp,0x10
c00137cb:	31 c0                	xor    eax,eax
c00137cd:	81 c4 1c 02 00 00    	add    esp,0x21c
c00137d3:	5b                   	pop    ebx
c00137d4:	5e                   	pop    esi
c00137d5:	5f                   	pop    edi
c00137d6:	5d                   	pop    ebp
c00137d7:	c3                   	ret    

c00137d8 <Directory::Directory(char const*, Process*)>:
c00137d8:	83 ec 0c             	sub    esp,0xc
c00137db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137df:	83 ec 08             	sub    esp,0x8
c00137e2:	6a 00                	push   0x0
c00137e4:	50                   	push   eax
c00137e5:	e8 4a df ff ff       	call   c0011734 <UnixFile::UnixFile(int)>
c00137ea:	83 c4 10             	add    esp,0x10
c00137ed:	ba bc a9 02 c0       	mov    edx,0xc002a9bc
c00137f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137f6:	89 10                	mov    DWORD PTR [eax],edx
c00137f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00137fc:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013806:	83 c0 0d             	add    eax,0xd
c0013809:	83 ec 04             	sub    esp,0x4
c001380c:	52                   	push   edx
c001380d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013811:	50                   	push   eax
c0013812:	e8 6b f9 ff ff       	call   c0013182 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013817:	83 c4 10             	add    esp,0x10
c001381a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001381e:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013821:	8d 50 bf             	lea    edx,[eax-0x41]
c0013824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013828:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001382e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013832:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013836:	90                   	nop
c0013837:	83 c4 0c             	add    esp,0xc
c001383a:	c3                   	ret    
c001383b:	90                   	nop

c001383c <Directory::open()>:
c001383c:	53                   	push   ebx
c001383d:	b8 0b 00 00 00       	mov    eax,0xb
c0013842:	83 ec 08             	sub    esp,0x8
c0013845:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013849:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013850:	80 fa 19             	cmp    dl,0x19
c0013853:	77 3d                	ja     c0013892 <Directory::open()+0x56>
c0013855:	8b 14 95 c0 e8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1740]
c001385c:	85 d2                	test   edx,edx
c001385e:	74 32                	je     c0013892 <Directory::open()+0x56>
c0013860:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013866:	85 d2                	test   edx,edx
c0013868:	74 28                	je     c0013892 <Directory::open()+0x56>
c001386a:	b8 06 00 00 00       	mov    eax,0x6
c001386f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013873:	75 1d                	jne    c0013892 <Directory::open()+0x56>
c0013875:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001387b:	50                   	push   eax
c001387c:	8b 02                	mov    eax,DWORD PTR [edx]
c001387e:	51                   	push   ecx
c001387f:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013882:	51                   	push   ecx
c0013883:	52                   	push   edx
c0013884:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013887:	83 c4 10             	add    esp,0x10
c001388a:	85 c0                	test   eax,eax
c001388c:	75 04                	jne    c0013892 <Directory::open()+0x56>
c001388e:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013892:	83 c4 08             	add    esp,0x8
c0013895:	5b                   	pop    ebx
c0013896:	c3                   	ret    
c0013897:	90                   	nop

c0013898 <Directory::close()>:
c0013898:	53                   	push   ebx
c0013899:	b8 0b 00 00 00       	mov    eax,0xb
c001389e:	83 ec 08             	sub    esp,0x8
c00138a1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00138a5:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00138ac:	80 fa 19             	cmp    dl,0x19
c00138af:	77 41                	ja     c00138f2 <Directory::close()+0x5a>
c00138b1:	8b 1c 95 c0 e8 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1740]
c00138b8:	85 db                	test   ebx,ebx
c00138ba:	74 36                	je     c00138f2 <Directory::close()+0x5a>
c00138bc:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00138c3:	74 2d                	je     c00138f2 <Directory::close()+0x5a>
c00138c5:	b8 05 00 00 00       	mov    eax,0x5
c00138ca:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00138ce:	74 22                	je     c00138f2 <Directory::close()+0x5a>
c00138d0:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00138d4:	8b 04 95 c0 e8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1740]
c00138db:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00138e1:	53                   	push   ebx
c00138e2:	53                   	push   ebx
c00138e3:	8b 10                	mov    edx,DWORD PTR [eax]
c00138e5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00138eb:	50                   	push   eax
c00138ec:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00138ef:	83 c4 10             	add    esp,0x10
c00138f2:	83 c4 08             	add    esp,0x8
c00138f5:	5b                   	pop    ebx
c00138f6:	c3                   	ret    
c00138f7:	90                   	nop

c00138f8 <Directory::unlink()>:
c00138f8:	83 ec 0c             	sub    esp,0xc
c00138fb:	b8 0b 00 00 00       	mov    eax,0xb
c0013900:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013904:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001390b:	80 f9 19             	cmp    cl,0x19
c001390e:	77 2f                	ja     c001393f <Directory::unlink()+0x47>
c0013910:	8b 0c 8d c0 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1740]
c0013917:	85 c9                	test   ecx,ecx
c0013919:	74 24                	je     c001393f <Directory::unlink()+0x47>
c001391b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013921:	85 c9                	test   ecx,ecx
c0013923:	74 1a                	je     c001393f <Directory::unlink()+0x47>
c0013925:	b8 06 00 00 00       	mov    eax,0x6
c001392a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001392e:	75 0f                	jne    c001393f <Directory::unlink()+0x47>
c0013930:	83 c2 0d             	add    edx,0xd
c0013933:	50                   	push   eax
c0013934:	50                   	push   eax
c0013935:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013937:	52                   	push   edx
c0013938:	51                   	push   ecx
c0013939:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001393c:	83 c4 10             	add    esp,0x10
c001393f:	83 c4 0c             	add    esp,0xc
c0013942:	c3                   	ret    
c0013943:	90                   	nop

c0013944 <Directory::rename(char const*)>:
c0013944:	83 ec 0c             	sub    esp,0xc
c0013947:	b8 0b 00 00 00       	mov    eax,0xb
c001394c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013950:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013957:	80 f9 19             	cmp    cl,0x19
c001395a:	77 32                	ja     c001398e <Directory::rename(char const*)+0x4a>
c001395c:	8b 0c 8d c0 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1740]
c0013963:	85 c9                	test   ecx,ecx
c0013965:	74 27                	je     c001398e <Directory::rename(char const*)+0x4a>
c0013967:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001396d:	85 c9                	test   ecx,ecx
c001396f:	74 1d                	je     c001398e <Directory::rename(char const*)+0x4a>
c0013971:	b8 06 00 00 00       	mov    eax,0x6
c0013976:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001397a:	75 12                	jne    c001398e <Directory::rename(char const*)+0x4a>
c001397c:	83 c2 0d             	add    edx,0xd
c001397f:	50                   	push   eax
c0013980:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013982:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013986:	52                   	push   edx
c0013987:	51                   	push   ecx
c0013988:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001398b:	83 c4 10             	add    esp,0x10
c001398e:	83 c4 0c             	add    esp,0xc
c0013991:	c3                   	ret    

c0013992 <Directory::exists()>:
c0013992:	83 ec 0c             	sub    esp,0xc
c0013995:	31 c0                	xor    eax,eax
c0013997:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001399b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00139a2:	80 f9 19             	cmp    cl,0x19
c00139a5:	77 24                	ja     c00139cb <Directory::exists()+0x39>
c00139a7:	8b 0c 8d c0 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1740]
c00139ae:	85 c9                	test   ecx,ecx
c00139b0:	74 19                	je     c00139cb <Directory::exists()+0x39>
c00139b2:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00139b8:	85 c9                	test   ecx,ecx
c00139ba:	74 0f                	je     c00139cb <Directory::exists()+0x39>
c00139bc:	83 c2 0d             	add    edx,0xd
c00139bf:	50                   	push   eax
c00139c0:	50                   	push   eax
c00139c1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00139c3:	52                   	push   edx
c00139c4:	51                   	push   ecx
c00139c5:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00139c8:	83 c4 10             	add    esp,0x10
c00139cb:	83 c4 0c             	add    esp,0xc
c00139ce:	c3                   	ret    
c00139cf:	90                   	nop

c00139d0 <Directory::read(dirent*)>:
c00139d0:	83 ec 1c             	sub    esp,0x1c
c00139d3:	b8 0b 00 00 00       	mov    eax,0xb
c00139d8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00139dc:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00139e3:	80 fa 19             	cmp    dl,0x19
c00139e6:	77 30                	ja     c0013a18 <Directory::read(dirent*)+0x48>
c00139e8:	8b 14 95 c0 e8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1740]
c00139ef:	85 d2                	test   edx,edx
c00139f1:	74 25                	je     c0013a18 <Directory::read(dirent*)+0x48>
c00139f3:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00139fa:	74 1c                	je     c0013a18 <Directory::read(dirent*)+0x48>
c00139fc:	83 ec 0c             	sub    esp,0xc
c00139ff:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a01:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013a05:	52                   	push   edx
c0013a06:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013a0a:	6a 00                	push   0x0
c0013a0c:	68 10 01 00 00       	push   0x110
c0013a11:	51                   	push   ecx
c0013a12:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013a15:	83 c4 20             	add    esp,0x20
c0013a18:	83 c4 1c             	add    esp,0x1c
c0013a1b:	c3                   	ret    

c0013a1c <Directory::create()>:
c0013a1c:	83 ec 0c             	sub    esp,0xc
c0013a1f:	b8 0b 00 00 00       	mov    eax,0xb
c0013a24:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a28:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a2f:	80 f9 19             	cmp    cl,0x19
c0013a32:	77 2f                	ja     c0013a63 <Directory::create()+0x47>
c0013a34:	8b 0c 8d c0 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1740]
c0013a3b:	85 c9                	test   ecx,ecx
c0013a3d:	74 24                	je     c0013a63 <Directory::create()+0x47>
c0013a3f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a45:	85 c9                	test   ecx,ecx
c0013a47:	74 1a                	je     c0013a63 <Directory::create()+0x47>
c0013a49:	b8 06 00 00 00       	mov    eax,0x6
c0013a4e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a52:	75 0f                	jne    c0013a63 <Directory::create()+0x47>
c0013a54:	83 c2 0d             	add    edx,0xd
c0013a57:	50                   	push   eax
c0013a58:	50                   	push   eax
c0013a59:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a5b:	52                   	push   edx
c0013a5c:	51                   	push   ecx
c0013a5d:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013a60:	83 c4 10             	add    esp,0x10
c0013a63:	83 c4 0c             	add    esp,0xc
c0013a66:	c3                   	ret    
c0013a67:	90                   	nop

c0013a68 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013a68:	b8 0a 00 00 00       	mov    eax,0xa
c0013a6d:	c3                   	ret    

c0013a6e <Bus::Bus(char const*)>:
c0013a6e:	83 ec 0c             	sub    esp,0xc
c0013a71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a75:	83 ec 08             	sub    esp,0x8
c0013a78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a7c:	50                   	push   eax
c0013a7d:	e8 68 09 00 00       	call   c00143ea <Device::Device(char const*)>
c0013a82:	83 c4 10             	add    esp,0x10
c0013a85:	ba d8 a9 02 c0       	mov    edx,0xc002a9d8
c0013a8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a8e:	89 10                	mov    DWORD PTR [eax],edx
c0013a90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a94:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013a9e:	90                   	nop
c0013a9f:	83 c4 0c             	add    esp,0xc
c0013aa2:	c3                   	ret    
c0013aa3:	90                   	nop

c0013aa4 <Bus::~Bus()>:
c0013aa4:	83 ec 0c             	sub    esp,0xc
c0013aa7:	ba d8 a9 02 c0       	mov    edx,0xc002a9d8
c0013aac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ab0:	89 10                	mov    DWORD PTR [eax],edx
c0013ab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ab6:	83 ec 0c             	sub    esp,0xc
c0013ab9:	50                   	push   eax
c0013aba:	e8 0d 06 00 00       	call   c00140cc <Device::~Device()>
c0013abf:	83 c4 10             	add    esp,0x10
c0013ac2:	90                   	nop
c0013ac3:	83 c4 0c             	add    esp,0xc
c0013ac6:	c3                   	ret    
c0013ac7:	90                   	nop

c0013ac8 <Bus::~Bus()>:
c0013ac8:	83 ec 0c             	sub    esp,0xc
c0013acb:	83 ec 0c             	sub    esp,0xc
c0013ace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ad2:	e8 cd ff ff ff       	call   c0013aa4 <Bus::~Bus()>
c0013ad7:	83 c4 10             	add    esp,0x10
c0013ada:	83 ec 08             	sub    esp,0x8
c0013add:	68 58 01 00 00       	push   0x158
c0013ae2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ae6:	e8 09 f2 ff ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0013aeb:	83 c4 10             	add    esp,0x10
c0013aee:	83 c4 0c             	add    esp,0xc
c0013af1:	c3                   	ret    

c0013af2 <Buzzer::Buzzer(char const*)>:
c0013af2:	83 ec 0c             	sub    esp,0xc
c0013af5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013af9:	83 ec 08             	sub    esp,0x8
c0013afc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b00:	50                   	push   eax
c0013b01:	e8 e4 08 00 00       	call   c00143ea <Device::Device(char const*)>
c0013b06:	83 c4 10             	add    esp,0x10
c0013b09:	ba 04 aa 02 c0       	mov    edx,0xc002aa04
c0013b0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b12:	89 10                	mov    DWORD PTR [eax],edx
c0013b14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b18:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013b22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b26:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013b30:	90                   	nop
c0013b31:	83 c4 0c             	add    esp,0xc
c0013b34:	c3                   	ret    
c0013b35:	90                   	nop

c0013b36 <Buzzer::~Buzzer()>:
c0013b36:	83 ec 0c             	sub    esp,0xc
c0013b39:	ba 04 aa 02 c0       	mov    edx,0xc002aa04
c0013b3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b42:	89 10                	mov    DWORD PTR [eax],edx
c0013b44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b48:	83 ec 0c             	sub    esp,0xc
c0013b4b:	50                   	push   eax
c0013b4c:	e8 7b 05 00 00       	call   c00140cc <Device::~Device()>
c0013b51:	83 c4 10             	add    esp,0x10
c0013b54:	90                   	nop
c0013b55:	83 c4 0c             	add    esp,0xc
c0013b58:	c3                   	ret    
c0013b59:	90                   	nop

c0013b5a <Buzzer::~Buzzer()>:
c0013b5a:	83 ec 0c             	sub    esp,0xc
c0013b5d:	83 ec 0c             	sub    esp,0xc
c0013b60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b64:	e8 cd ff ff ff       	call   c0013b36 <Buzzer::~Buzzer()>
c0013b69:	83 c4 10             	add    esp,0x10
c0013b6c:	83 ec 08             	sub    esp,0x8
c0013b6f:	68 5c 01 00 00       	push   0x15c
c0013b74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b78:	e8 77 f1 ff ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0013b7d:	83 c4 10             	add    esp,0x10
c0013b80:	83 c4 0c             	add    esp,0xc
c0013b83:	c3                   	ret    

c0013b84 <Buzzer::stop()>:
c0013b84:	83 ec 14             	sub    esp,0x14
c0013b87:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b8b:	8b 10                	mov    edx,DWORD PTR [eax]
c0013b8d:	6a 00                	push   0x0
c0013b8f:	50                   	push   eax
c0013b90:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013b93:	83 c4 1c             	add    esp,0x1c
c0013b96:	c3                   	ret    

c0013b97 <beepThread(void*)>:
c0013b97:	53                   	push   ebx
c0013b98:	83 ec 08             	sub    esp,0x8
c0013b9b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013b9f:	e8 07 a1 00 00       	call   c001dcab <unlockScheduler()>
c0013ba4:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013ba9:	52                   	push   edx
c0013baa:	52                   	push   edx
c0013bab:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013bb1:	52                   	push   edx
c0013bb2:	50                   	push   eax
c0013bb3:	e8 40 a6 00 00       	call   c001e1f8 <nanoSleep(unsigned long long)>
c0013bb8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013bbb:	e8 c4 ff ff ff       	call   c0013b84 <Buzzer::stop()>
c0013bc0:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013bc8:	83 c4 18             	add    esp,0x18
c0013bcb:	5b                   	pop    ebx
c0013bcc:	e9 6d a5 00 00       	jmp    c001e13e <blockTask(TaskState)>
c0013bd1:	90                   	nop

c0013bd2 <Buzzer::beep(int, int, bool)>:
c0013bd2:	57                   	push   edi
c0013bd3:	56                   	push   esi
c0013bd4:	53                   	push   ebx
c0013bd5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013bd9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013bdd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013be1:	52                   	push   edx
c0013be2:	52                   	push   edx
c0013be3:	8b 06                	mov    eax,DWORD PTR [esi]
c0013be5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013be9:	56                   	push   esi
c0013bea:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013bed:	83 c4 10             	add    esp,0x10
c0013bf0:	89 f8                	mov    eax,edi
c0013bf2:	84 c0                	test   al,al
c0013bf4:	74 1f                	je     c0013c15 <Buzzer::beep(int, int, bool)+0x43>
c0013bf6:	50                   	push   eax
c0013bf7:	50                   	push   eax
c0013bf8:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013bfe:	99                   	cdq    
c0013bff:	52                   	push   edx
c0013c00:	50                   	push   eax
c0013c01:	e8 f2 a5 00 00       	call   c001e1f8 <nanoSleep(unsigned long long)>
c0013c06:	83 c4 10             	add    esp,0x10
c0013c09:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013c0d:	5b                   	pop    ebx
c0013c0e:	5e                   	pop    esi
c0013c0f:	5f                   	pop    edi
c0013c10:	e9 6f ff ff ff       	jmp    c0013b84 <Buzzer::stop()>
c0013c15:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013c1b:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c0013c20:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013c28:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013c2c:	c7 44 24 14 97 3b 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013b97
c0013c34:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013c38:	5b                   	pop    ebx
c0013c39:	5e                   	pop    esi
c0013c3a:	5f                   	pop    edi
c0013c3b:	e9 9a a1 00 00       	jmp    c001ddda <Process::createThread(void (*)(void*), void*, int)>

c0013c40 <User::loadClockSettings(int)>:
c0013c40:	53                   	push   ebx
c0013c41:	83 ec 14             	sub    esp,0x14
c0013c44:	68 14 01 00 00       	push   0x114
c0013c49:	e8 f2 bb ff ff       	call   c000f840 <malloc>
c0013c4e:	83 c4 0c             	add    esp,0xc
c0013c51:	89 c3                	mov    ebx,eax
c0013c53:	ff 35 14 18 03 c0    	push   DWORD PTR ds:0xc0031814
c0013c59:	68 2c aa 02 c0       	push   0xc002aa2c
c0013c5e:	50                   	push   eax
c0013c5f:	e8 c8 f6 ff ff       	call   c001332c <File::File(char const*, Process*)>
c0013c64:	58                   	pop    eax
c0013c65:	5a                   	pop    edx
c0013c66:	6a 01                	push   0x1
c0013c68:	53                   	push   ebx
c0013c69:	e8 22 f7 ff ff       	call   c0013390 <File::open(FileOpenMode)>
c0013c6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c71:	e8 78 f7 ff ff       	call   c00133ee <File::close()>
c0013c76:	83 c4 10             	add    esp,0x10
c0013c79:	85 db                	test   ebx,ebx
c0013c7b:	74 0f                	je     c0013c8c <User::loadClockSettings(int)+0x4c>
c0013c7d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c7f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013c83:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013c86:	83 c4 08             	add    esp,0x8
c0013c89:	5b                   	pop    ebx
c0013c8a:	ff e0                	jmp    eax
c0013c8c:	83 c4 08             	add    esp,0x8
c0013c8f:	5b                   	pop    ebx
c0013c90:	c3                   	ret    
c0013c91:	90                   	nop

c0013c92 <Clock::Clock(char const*)>:
c0013c92:	83 ec 0c             	sub    esp,0xc
c0013c95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c99:	83 ec 08             	sub    esp,0x8
c0013c9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ca0:	50                   	push   eax
c0013ca1:	e8 44 07 00 00       	call   c00143ea <Device::Device(char const*)>
c0013ca6:	83 c4 10             	add    esp,0x10
c0013ca9:	ba 54 aa 02 c0       	mov    edx,0xc002aa54
c0013cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cb2:	89 10                	mov    DWORD PTR [eax],edx
c0013cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cb8:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013cc2:	90                   	nop
c0013cc3:	83 c4 0c             	add    esp,0xc
c0013cc6:	c3                   	ret    
c0013cc7:	90                   	nop

c0013cc8 <Clock::~Clock()>:
c0013cc8:	83 ec 0c             	sub    esp,0xc
c0013ccb:	ba 54 aa 02 c0       	mov    edx,0xc002aa54
c0013cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cd4:	89 10                	mov    DWORD PTR [eax],edx
c0013cd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cda:	83 ec 0c             	sub    esp,0xc
c0013cdd:	50                   	push   eax
c0013cde:	e8 e9 03 00 00       	call   c00140cc <Device::~Device()>
c0013ce3:	83 c4 10             	add    esp,0x10
c0013ce6:	90                   	nop
c0013ce7:	83 c4 0c             	add    esp,0xc
c0013cea:	c3                   	ret    
c0013ceb:	90                   	nop

c0013cec <Clock::~Clock()>:
c0013cec:	83 ec 0c             	sub    esp,0xc
c0013cef:	83 ec 0c             	sub    esp,0xc
c0013cf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cf6:	e8 cd ff ff ff       	call   c0013cc8 <Clock::~Clock()>
c0013cfb:	83 c4 10             	add    esp,0x10
c0013cfe:	83 ec 08             	sub    esp,0x8
c0013d01:	68 58 01 00 00       	push   0x158
c0013d06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d0a:	e8 e5 ef ff ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0013d0f:	83 c4 10             	add    esp,0x10
c0013d12:	83 c4 0c             	add    esp,0xc
c0013d15:	c3                   	ret    

c0013d16 <Clock::timeInSecondsLocal()>:
c0013d16:	53                   	push   ebx
c0013d17:	83 ec 14             	sub    esp,0x14
c0013d1a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d1e:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d20:	50                   	push   eax
c0013d21:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013d24:	0f b6 0d 38 e4 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e438
c0013d2b:	03 0d 3c e4 02 c0    	add    ecx,DWORD PTR ds:0xc002e43c
c0013d31:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013d37:	89 cb                	mov    ebx,ecx
c0013d39:	c1 fb 1f             	sar    ebx,0x1f
c0013d3c:	01 c8                	add    eax,ecx
c0013d3e:	11 da                	adc    edx,ebx
c0013d40:	83 c4 10             	add    esp,0x10
c0013d43:	31 c9                	xor    ecx,ecx
c0013d45:	80 3d 39 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e439,0x0
c0013d4c:	74 05                	je     c0013d53 <Clock::timeInSecondsLocal()+0x3d>
c0013d4e:	b9 08 07 00 00       	mov    ecx,0x708
c0013d53:	31 db                	xor    ebx,ebx
c0013d55:	01 c8                	add    eax,ecx
c0013d57:	11 da                	adc    edx,ebx
c0013d59:	83 c4 08             	add    esp,0x8
c0013d5c:	5b                   	pop    ebx
c0013d5d:	c3                   	ret    

c0013d5e <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013d5e:	57                   	push   edi
c0013d5f:	56                   	push   esi
c0013d60:	53                   	push   ebx
c0013d61:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013d65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013d69:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013d6b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013d6f:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013d72:	0f b6 05 38 e4 02 c0 	movzx  eax,BYTE PTR ds:0xc002e438
c0013d79:	03 05 3c e4 02 c0    	add    eax,DWORD PTR ds:0xc002e43c
c0013d7f:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013d85:	99                   	cdq    
c0013d86:	29 c6                	sub    esi,eax
c0013d88:	19 d7                	sbb    edi,edx
c0013d8a:	89 f0                	mov    eax,esi
c0013d8c:	89 fa                	mov    edx,edi
c0013d8e:	31 f6                	xor    esi,esi
c0013d90:	80 3d 39 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e439,0x0
c0013d97:	74 05                	je     c0013d9e <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013d99:	be 08 07 00 00       	mov    esi,0x708
c0013d9e:	31 ff                	xor    edi,edi
c0013da0:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013da4:	29 f0                	sub    eax,esi
c0013da6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013daa:	19 fa                	sbb    edx,edi
c0013dac:	89 d8                	mov    eax,ebx
c0013dae:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013db2:	5b                   	pop    ebx
c0013db3:	5e                   	pop    esi
c0013db4:	5f                   	pop    edi
c0013db5:	ff e0                	jmp    eax

c0013db7 <datetimeToSeconds(datetime_t)>:
c0013db7:	55                   	push   ebp
c0013db8:	57                   	push   edi
c0013db9:	56                   	push   esi
c0013dba:	53                   	push   ebx
c0013dbb:	83 ec 14             	sub    esp,0x14
c0013dbe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013dc2:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013dc6:	89 d3                	mov    ebx,edx
c0013dc8:	0f b6 c6             	movzx  eax,dh
c0013dcb:	c1 eb 10             	shr    ebx,0x10
c0013dce:	48                   	dec    eax
c0013dcf:	66 81 eb 6c 07       	sub    bx,0x76c
c0013dd4:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013dd8:	0f b6 f5             	movzx  esi,ch
c0013ddb:	89 cf                	mov    edi,ecx
c0013ddd:	6b f6 3c             	imul   esi,esi,0x3c
c0013de0:	c1 ef 10             	shr    edi,0x10
c0013de3:	0f b6 c9             	movzx  ecx,cl
c0013de6:	89 f8                	mov    eax,edi
c0013de8:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013dee:	0f b6 f8             	movzx  edi,al
c0013df1:	0f b6 d2             	movzx  edx,dl
c0013df4:	01 fe                	add    esi,edi
c0013df6:	01 f1                	add    ecx,esi
c0013df8:	0f b7 f3             	movzx  esi,bx
c0013dfb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013dff:	c1 f9 1f             	sar    ecx,0x1f
c0013e02:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013e07:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013e0b:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013e10:	8b 0c 8d a0 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5560]
c0013e17:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013e1b:	76 29                	jbe    c0013e46 <datetimeToSeconds(datetime_t)+0x8f>
c0013e1d:	f6 c3 03             	test   bl,0x3
c0013e20:	75 24                	jne    c0013e46 <datetimeToSeconds(datetime_t)+0x8f>
c0013e22:	31 d2                	xor    edx,edx
c0013e24:	bf 64 00 00 00       	mov    edi,0x64
c0013e29:	89 d8                	mov    eax,ebx
c0013e2b:	66 f7 f7             	div    di
c0013e2e:	66 85 d2             	test   dx,dx
c0013e31:	75 12                	jne    c0013e45 <datetimeToSeconds(datetime_t)+0x8e>
c0013e33:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013e39:	bf 90 01 00 00       	mov    edi,0x190
c0013e3e:	99                   	cdq    
c0013e3f:	f7 ff                	idiv   edi
c0013e41:	85 d2                	test   edx,edx
c0013e43:	75 01                	jne    c0013e46 <datetimeToSeconds(datetime_t)+0x8f>
c0013e45:	41                   	inc    ecx
c0013e46:	66 83 fb 46          	cmp    bx,0x46
c0013e4a:	76 45                	jbe    c0013e91 <datetimeToSeconds(datetime_t)+0xda>
c0013e4c:	bb 46 00 00 00       	mov    ebx,0x46
c0013e51:	bf 64 00 00 00       	mov    edi,0x64
c0013e56:	bd 90 01 00 00       	mov    ebp,0x190
c0013e5b:	b8 6d 01 00 00       	mov    eax,0x16d
c0013e60:	f6 c3 03             	test   bl,0x3
c0013e63:	75 23                	jne    c0013e88 <datetimeToSeconds(datetime_t)+0xd1>
c0013e65:	89 d8                	mov    eax,ebx
c0013e67:	99                   	cdq    
c0013e68:	f7 ff                	idiv   edi
c0013e6a:	b8 6e 01 00 00       	mov    eax,0x16e
c0013e6f:	85 d2                	test   edx,edx
c0013e71:	75 15                	jne    c0013e88 <datetimeToSeconds(datetime_t)+0xd1>
c0013e73:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013e79:	99                   	cdq    
c0013e7a:	f7 fd                	idiv   ebp
c0013e7c:	83 fa 01             	cmp    edx,0x1
c0013e7f:	19 c0                	sbb    eax,eax
c0013e81:	f7 d0                	not    eax
c0013e83:	05 6e 01 00 00       	add    eax,0x16e
c0013e88:	01 c1                	add    ecx,eax
c0013e8a:	43                   	inc    ebx
c0013e8b:	39 f3                	cmp    ebx,esi
c0013e8d:	7c cc                	jl     c0013e5b <datetimeToSeconds(datetime_t)+0xa4>
c0013e8f:	eb 35                	jmp    c0013ec6 <datetimeToSeconds(datetime_t)+0x10f>
c0013e91:	74 33                	je     c0013ec6 <datetimeToSeconds(datetime_t)+0x10f>
c0013e93:	b8 45 00 00 00       	mov    eax,0x45
c0013e98:	89 c2                	mov    edx,eax
c0013e9a:	83 e2 03             	and    edx,0x3
c0013e9d:	39 f0                	cmp    eax,esi
c0013e9f:	7e 0f                	jle    c0013eb0 <datetimeToSeconds(datetime_t)+0xf9>
c0013ea1:	83 fa 01             	cmp    edx,0x1
c0013ea4:	19 d2                	sbb    edx,edx
c0013ea6:	48                   	dec    eax
c0013ea7:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013eae:	eb e8                	jmp    c0013e98 <datetimeToSeconds(datetime_t)+0xe1>
c0013eb0:	b8 6d 01 00 00       	mov    eax,0x16d
c0013eb5:	85 d2                	test   edx,edx
c0013eb7:	75 0b                	jne    c0013ec4 <datetimeToSeconds(datetime_t)+0x10d>
c0013eb9:	66 83 fb 01          	cmp    bx,0x1
c0013ebd:	19 c0                	sbb    eax,eax
c0013ebf:	05 6e 01 00 00       	add    eax,0x16e
c0013ec4:	29 c1                	sub    ecx,eax
c0013ec6:	b8 80 51 01 00       	mov    eax,0x15180
c0013ecb:	f7 e9                	imul   ecx
c0013ecd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013ed1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013ed5:	83 c4 14             	add    esp,0x14
c0013ed8:	5b                   	pop    ebx
c0013ed9:	5e                   	pop    esi
c0013eda:	5f                   	pop    edi
c0013edb:	5d                   	pop    ebp
c0013edc:	c3                   	ret    
c0013edd:	90                   	nop

c0013ede <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013ede:	57                   	push   edi
c0013edf:	56                   	push   esi
c0013ee0:	53                   	push   ebx
c0013ee1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013ee5:	8b 06                	mov    eax,DWORD PTR [esi]
c0013ee7:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013eea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013eee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ef2:	e8 c0 fe ff ff       	call   c0013db7 <datetimeToSeconds(datetime_t)>
c0013ef7:	59                   	pop    ecx
c0013ef8:	0f b6 0d 38 e4 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e438
c0013eff:	5b                   	pop    ebx
c0013f00:	03 0d 3c e4 02 c0    	add    ecx,DWORD PTR ds:0xc002e43c
c0013f06:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013f0c:	89 cb                	mov    ebx,ecx
c0013f0e:	c1 fb 1f             	sar    ebx,0x1f
c0013f11:	29 c8                	sub    eax,ecx
c0013f13:	19 da                	sbb    edx,ebx
c0013f15:	31 c9                	xor    ecx,ecx
c0013f17:	80 3d 39 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e439,0x0
c0013f1e:	74 05                	je     c0013f25 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013f20:	b9 08 07 00 00       	mov    ecx,0x708
c0013f25:	31 db                	xor    ebx,ebx
c0013f27:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013f2b:	29 c8                	sub    eax,ecx
c0013f2d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013f31:	19 da                	sbb    edx,ebx
c0013f33:	89 f8                	mov    eax,edi
c0013f35:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013f39:	5b                   	pop    ebx
c0013f3a:	5e                   	pop    esi
c0013f3b:	5f                   	pop    edi
c0013f3c:	ff e0                	jmp    eax

c0013f3e <secondsToDatetime(unsigned long long)>:
c0013f3e:	55                   	push   ebp
c0013f3f:	57                   	push   edi
c0013f40:	56                   	push   esi
c0013f41:	53                   	push   ebx
c0013f42:	83 ec 1c             	sub    esp,0x1c
c0013f45:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013f49:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013f4d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013f51:	6a 00                	push   0x0
c0013f53:	68 80 51 01 00       	push   0x15180
c0013f58:	55                   	push   ebp
c0013f59:	57                   	push   edi
c0013f5a:	e8 4d 29 01 00       	call   c00268ac <__udivdi3>
c0013f5f:	83 c4 10             	add    esp,0x10
c0013f62:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013f68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013f6c:	6a 00                	push   0x0
c0013f6e:	68 80 51 01 00       	push   0x15180
c0013f73:	55                   	push   ebp
c0013f74:	57                   	push   edi
c0013f75:	bf 10 0e 00 00       	mov    edi,0xe10
c0013f7a:	e8 2d 2a 01 00       	call   c00269ac <__umoddi3>
c0013f7f:	83 c4 10             	add    esp,0x10
c0013f82:	99                   	cdq    
c0013f83:	f7 ff                	idiv   edi
c0013f85:	bf 3c 00 00 00       	mov    edi,0x3c
c0013f8a:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013f8d:	89 d0                	mov    eax,edx
c0013f8f:	99                   	cdq    
c0013f90:	f7 ff                	idiv   edi
c0013f92:	85 db                	test   ebx,ebx
c0013f94:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013f97:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013f9a:	79 11                	jns    c0013fad <secondsToDatetime(unsigned long long)+0x6f>
c0013f9c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013fa0:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013fa6:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013fab:	eb 07                	jmp    c0013fb4 <secondsToDatetime(unsigned long long)+0x76>
c0013fad:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013fb2:	89 d8                	mov    eax,ebx
c0013fb4:	bf b4 05 00 00       	mov    edi,0x5b4
c0013fb9:	99                   	cdq    
c0013fba:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013fbf:	f7 f9                	idiv   ecx
c0013fc1:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013fc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013fca:	31 d2                	xor    edx,edx
c0013fcc:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013fd4:	01 c3                	add    ebx,eax
c0013fd6:	89 d8                	mov    eax,ebx
c0013fd8:	f7 f1                	div    ecx
c0013fda:	31 d2                	xor    edx,edx
c0013fdc:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013fdf:	89 d8                	mov    eax,ebx
c0013fe1:	f7 f7                	div    edi
c0013fe3:	31 d2                	xor    edx,edx
c0013fe5:	29 c1                	sub    ecx,eax
c0013fe7:	89 d8                	mov    eax,ebx
c0013fe9:	f7 f5                	div    ebp
c0013feb:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013ff0:	29 c1                	sub    ecx,eax
c0013ff2:	31 d2                	xor    edx,edx
c0013ff4:	89 c8                	mov    eax,ecx
c0013ff6:	f7 f5                	div    ebp
c0013ff8:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013ffd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014001:	31 d2                	xor    edx,edx
c0014003:	89 c8                	mov    eax,ecx
c0014005:	f7 f5                	div    ebp
c0014007:	31 d2                	xor    edx,edx
c0014009:	01 c3                	add    ebx,eax
c001400b:	89 c8                	mov    eax,ecx
c001400d:	f7 f7                	div    edi
c001400f:	bf 99 00 00 00       	mov    edi,0x99
c0014014:	29 c3                	sub    ebx,eax
c0014016:	31 d2                	xor    edx,edx
c0014018:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0014020:	29 c3                	sub    ebx,eax
c0014022:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0014025:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0014028:	bb 05 00 00 00       	mov    ebx,0x5
c001402d:	83 c1 02             	add    ecx,0x2
c0014030:	89 c8                	mov    eax,ecx
c0014032:	f7 f7                	div    edi
c0014034:	31 d2                	xor    edx,edx
c0014036:	89 c7                	mov    edi,eax
c0014038:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001403e:	83 c0 02             	add    eax,0x2
c0014041:	f7 f3                	div    ebx
c0014043:	89 eb                	mov    ebx,ebp
c0014045:	29 c3                	sub    ebx,eax
c0014047:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001404d:	88 1e                	mov    BYTE PTR [esi],bl
c001404f:	19 c0                	sbb    eax,eax
c0014051:	31 d2                	xor    edx,edx
c0014053:	83 e0 0c             	and    eax,0xc
c0014056:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001405a:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0014062:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0014066:	83 f9 01             	cmp    ecx,0x1
c0014069:	0f 96 c2             	setbe  dl
c001406c:	41                   	inc    ecx
c001406d:	01 d0                	add    eax,edx
c001406f:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0014072:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0014076:	83 c4 1c             	add    esp,0x1c
c0014079:	89 f0                	mov    eax,esi
c001407b:	5b                   	pop    ebx
c001407c:	5e                   	pop    esi
c001407d:	5f                   	pop    edi
c001407e:	5d                   	pop    ebp
c001407f:	c2 04 00             	ret    0x4

c0014082 <Clock::timeInDatetimeLocal()>:
c0014082:	53                   	push   ebx
c0014083:	83 ec 14             	sub    esp,0x14
c0014086:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001408a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001408e:	e8 83 fc ff ff       	call   c0013d16 <Clock::timeInSecondsLocal()>
c0014093:	83 c4 0c             	add    esp,0xc
c0014096:	52                   	push   edx
c0014097:	50                   	push   eax
c0014098:	53                   	push   ebx
c0014099:	e8 a0 fe ff ff       	call   c0013f3e <secondsToDatetime(unsigned long long)>
c001409e:	89 d8                	mov    eax,ebx
c00140a0:	83 c4 14             	add    esp,0x14
c00140a3:	5b                   	pop    ebx
c00140a4:	c2 04 00             	ret    0x4
c00140a7:	90                   	nop

c00140a8 <Device::hibernate()>:
c00140a8:	c3                   	ret    
c00140a9:	90                   	nop

c00140aa <Device::wake()>:
c00140aa:	c3                   	ret    
c00140ab:	90                   	nop

c00140ac <Device::detect()>:
c00140ac:	c3                   	ret    
c00140ad:	90                   	nop

c00140ae <Device::disableLegacy()>:
c00140ae:	c3                   	ret    
c00140af:	90                   	nop

c00140b0 <Device::powerSaving(PowerSavingLevel)>:
c00140b0:	c3                   	ret    
c00140b1:	90                   	nop

c00140b2 <DriverlessDevice::close(int, int, void*)>:
c00140b2:	31 c0                	xor    eax,eax
c00140b4:	c3                   	ret    
c00140b5:	90                   	nop

c00140b6 <DriverlessDevice::detect()>:
c00140b6:	c3                   	ret    
c00140b7:	90                   	nop

c00140b8 <DriverlessDevice::open(int, int, void*)>:
c00140b8:	83 ec 18             	sub    esp,0x18
c00140bb:	68 d0 aa 02 c0       	push   0xc002aad0
c00140c0:	e8 ea 63 00 00       	call   c001a4af <Krnl::panic(char const*)>
c00140c5:	83 c8 ff             	or     eax,0xffffffff
c00140c8:	83 c4 1c             	add    esp,0x1c
c00140cb:	c3                   	ret    

c00140cc <Device::~Device()>:
c00140cc:	ba f8 aa 02 c0       	mov    edx,0xc002aaf8
c00140d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00140d5:	89 10                	mov    DWORD PTR [eax],edx
c00140d7:	90                   	nop
c00140d8:	c3                   	ret    
c00140d9:	90                   	nop

c00140da <Device::~Device()>:
c00140da:	83 ec 0c             	sub    esp,0xc
c00140dd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00140e1:	e8 e6 ff ff ff       	call   c00140cc <Device::~Device()>
c00140e6:	83 c4 04             	add    esp,0x4
c00140e9:	83 ec 08             	sub    esp,0x8
c00140ec:	68 58 01 00 00       	push   0x158
c00140f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140f5:	e8 fa eb ff ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c00140fa:	83 c4 10             	add    esp,0x10
c00140fd:	83 c4 0c             	add    esp,0xc
c0014100:	c3                   	ret    
c0014101:	90                   	nop

c0014102 <Device::findAndLoadDriver()>:
c0014102:	c3                   	ret    
c0014103:	90                   	nop

c0014104 <Device::preOpenPCI(PCIDeviceInfo)>:
c0014104:	57                   	push   edi
c0014105:	b9 09 00 00 00       	mov    ecx,0x9
c001410a:	56                   	push   esi
c001410b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001410f:	8d 74 24 10          	lea    esi,[esp+0x10]
c0014113:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001411d:	81 c7 18 01 00 00    	add    edi,0x118
c0014123:	fc                   	cld    
c0014124:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014126:	5e                   	pop    esi
c0014127:	5f                   	pop    edi
c0014128:	c3                   	ret    
c0014129:	90                   	nop

c001412a <Device::preOpenACPI(void*, char*, char*)>:
c001412a:	56                   	push   esi
c001412b:	53                   	push   ebx
c001412c:	83 ec 08             	sub    esp,0x8
c001412f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014133:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014137:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0014141:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014145:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c001414b:	6a 1e                	push   0x1e
c001414d:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0014153:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014157:	81 c3 3a 01 00 00    	add    ebx,0x13a
c001415d:	50                   	push   eax
c001415e:	e8 e1 c5 fe ff       	call   c0000744 <memcpy>
c0014163:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0014167:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001416b:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0014173:	83 c4 14             	add    esp,0x14
c0014176:	5b                   	pop    ebx
c0014177:	5e                   	pop    esi
c0014178:	e9 c7 c5 fe ff       	jmp    c0000744 <memcpy>
c001417d:	90                   	nop

c001417e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001417e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014182:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014187:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001418e:	75 0b                	jne    c001419b <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0014190:	8b 00                	mov    eax,DWORD PTR [eax]
c0014192:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014196:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014199:	eb 1e                	jmp    c00141b9 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c001419b:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c00141a0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00141a6:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00141ac:	8b 08                	mov    ecx,DWORD PTR [eax]
c00141ae:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00141b2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00141b6:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00141b9:	ff e0                	jmp    eax
c00141bb:	90                   	nop

c00141bc <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00141bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141c0:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00141c5:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00141cc:	75 0b                	jne    c00141d9 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c00141ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00141d0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00141d4:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00141d7:	eb 1e                	jmp    c00141f7 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c00141d9:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c00141de:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00141e4:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00141ea:	8b 08                	mov    ecx,DWORD PTR [eax]
c00141ec:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00141f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00141f4:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c00141f7:	ff e0                	jmp    eax
c00141f9:	90                   	nop

c00141fa <Device::addChild(Device*)>:
c00141fa:	53                   	push   ebx
c00141fb:	83 ec 08             	sub    esp,0x8
c00141fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014202:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014206:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001420c:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0014212:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014214:	85 d2                	test   edx,edx
c0014216:	74 04                	je     c001421c <Device::addChild(Device*)+0x22>
c0014218:	89 d3                	mov    ebx,edx
c001421a:	eb f6                	jmp    c0014212 <Device::addChild(Device*)+0x18>
c001421c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001421f:	83 ec 0c             	sub    esp,0xc
c0014222:	6a 08                	push   0x8
c0014224:	e8 17 b6 ff ff       	call   c000f840 <malloc>
c0014229:	89 03                	mov    DWORD PTR [ebx],eax
c001422b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014231:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014238:	83 c4 18             	add    esp,0x18
c001423b:	5b                   	pop    ebx
c001423c:	c3                   	ret    
c001423d:	90                   	nop

c001423e <Device::removeAllChildren()>:
c001423e:	56                   	push   esi
c001423f:	53                   	push   ebx
c0014240:	52                   	push   edx
c0014241:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014245:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c001424b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001424e:	74 17                	je     c0014267 <Device::removeAllChildren()+0x29>
c0014250:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014253:	85 c0                	test   eax,eax
c0014255:	74 0c                	je     c0014263 <Device::removeAllChildren()+0x25>
c0014257:	83 ec 0c             	sub    esp,0xc
c001425a:	8b 10                	mov    edx,DWORD PTR [eax]
c001425c:	50                   	push   eax
c001425d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0014260:	83 c4 10             	add    esp,0x10
c0014263:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014265:	eb e4                	jmp    c001424b <Device::removeAllChildren()+0xd>
c0014267:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001426d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014273:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014279:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014280:	58                   	pop    eax
c0014281:	5b                   	pop    ebx
c0014282:	5e                   	pop    esi
c0014283:	c3                   	ret    

c0014284 <Device::hibernateAll()>:
c0014284:	53                   	push   ebx
c0014285:	83 ec 14             	sub    esp,0x14
c0014288:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001428c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001428e:	53                   	push   ebx
c001428f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014292:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014298:	83 c4 10             	add    esp,0x10
c001429b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001429e:	74 0f                	je     c00142af <Device::hibernateAll()+0x2b>
c00142a0:	83 ec 0c             	sub    esp,0xc
c00142a3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00142a6:	e8 d9 ff ff ff       	call   c0014284 <Device::hibernateAll()>
c00142ab:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00142ad:	eb e9                	jmp    c0014298 <Device::hibernateAll()+0x14>
c00142af:	83 c4 08             	add    esp,0x8
c00142b2:	5b                   	pop    ebx
c00142b3:	c3                   	ret    

c00142b4 <Device::wakeAll()>:
c00142b4:	53                   	push   ebx
c00142b5:	83 ec 14             	sub    esp,0x14
c00142b8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00142bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00142be:	53                   	push   ebx
c00142bf:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00142c2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00142c8:	83 c4 10             	add    esp,0x10
c00142cb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00142ce:	74 0f                	je     c00142df <Device::wakeAll()+0x2b>
c00142d0:	83 ec 0c             	sub    esp,0xc
c00142d3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00142d6:	e8 d9 ff ff ff       	call   c00142b4 <Device::wakeAll()>
c00142db:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00142dd:	eb e9                	jmp    c00142c8 <Device::wakeAll()+0x14>
c00142df:	83 c4 08             	add    esp,0x8
c00142e2:	5b                   	pop    ebx
c00142e3:	c3                   	ret    

c00142e4 <Device::detectAll()>:
c00142e4:	53                   	push   ebx
c00142e5:	83 ec 14             	sub    esp,0x14
c00142e8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00142ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c00142ee:	53                   	push   ebx
c00142ef:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00142f2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00142f8:	83 c4 10             	add    esp,0x10
c00142fb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00142fe:	74 0f                	je     c001430f <Device::detectAll()+0x2b>
c0014300:	83 ec 0c             	sub    esp,0xc
c0014303:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014306:	e8 d9 ff ff ff       	call   c00142e4 <Device::detectAll()>
c001430b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001430d:	eb e9                	jmp    c00142f8 <Device::detectAll()+0x14>
c001430f:	83 c4 08             	add    esp,0x8
c0014312:	5b                   	pop    ebx
c0014313:	c3                   	ret    

c0014314 <Device::disableLegacyAll()>:
c0014314:	53                   	push   ebx
c0014315:	83 ec 14             	sub    esp,0x14
c0014318:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001431c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001431e:	53                   	push   ebx
c001431f:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0014322:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014328:	83 c4 10             	add    esp,0x10
c001432b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001432e:	74 0f                	je     c001433f <Device::disableLegacyAll()+0x2b>
c0014330:	83 ec 0c             	sub    esp,0xc
c0014333:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014336:	e8 d9 ff ff ff       	call   c0014314 <Device::disableLegacyAll()>
c001433b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001433d:	eb e9                	jmp    c0014328 <Device::disableLegacyAll()+0x14>
c001433f:	83 c4 08             	add    esp,0x8
c0014342:	5b                   	pop    ebx
c0014343:	c3                   	ret    

c0014344 <Device::loadDriversForAll()>:
c0014344:	53                   	push   ebx
c0014345:	83 ec 08             	sub    esp,0x8
c0014348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001434c:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014352:	8b 18                	mov    ebx,DWORD PTR [eax]
c0014354:	85 db                	test   ebx,ebx
c0014356:	74 12                	je     c001436a <Device::loadDriversForAll()+0x26>
c0014358:	83 ec 0c             	sub    esp,0xc
c001435b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001435e:	e8 e1 ff ff ff       	call   c0014344 <Device::loadDriversForAll()>
c0014363:	83 c4 10             	add    esp,0x10
c0014366:	89 d8                	mov    eax,ebx
c0014368:	eb e8                	jmp    c0014352 <Device::loadDriversForAll()+0xe>
c001436a:	83 c4 08             	add    esp,0x8
c001436d:	5b                   	pop    ebx
c001436e:	c3                   	ret    
c001436f:	90                   	nop

c0014370 <Device::closeAll()>:
c0014370:	53                   	push   ebx
c0014371:	83 ec 08             	sub    esp,0x8
c0014374:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014378:	8b 03                	mov    eax,DWORD PTR [ebx]
c001437a:	6a 00                	push   0x0
c001437c:	6a 00                	push   0x0
c001437e:	6a 00                	push   0x0
c0014380:	53                   	push   ebx
c0014381:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014384:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001438a:	83 c4 10             	add    esp,0x10
c001438d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014390:	74 0f                	je     c00143a1 <Device::closeAll()+0x31>
c0014392:	83 ec 0c             	sub    esp,0xc
c0014395:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014398:	e8 d3 ff ff ff       	call   c0014370 <Device::closeAll()>
c001439d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001439f:	eb e9                	jmp    c001438a <Device::closeAll()+0x1a>
c00143a1:	83 c4 08             	add    esp,0x8
c00143a4:	5b                   	pop    ebx
c00143a5:	c3                   	ret    

c00143a6 <Device::powerSavingAll(PowerSavingLevel)>:
c00143a6:	56                   	push   esi
c00143a7:	53                   	push   ebx
c00143a8:	83 ec 0c             	sub    esp,0xc
c00143ab:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00143af:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00143b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143b5:	56                   	push   esi
c00143b6:	53                   	push   ebx
c00143b7:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00143ba:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143c0:	83 c4 10             	add    esp,0x10
c00143c3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143c6:	74 0f                	je     c00143d7 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00143c8:	52                   	push   edx
c00143c9:	52                   	push   edx
c00143ca:	56                   	push   esi
c00143cb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143ce:	e8 d3 ff ff ff       	call   c00143a6 <Device::powerSavingAll(PowerSavingLevel)>
c00143d3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143d5:	eb e9                	jmp    c00143c0 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00143d7:	58                   	pop    eax
c00143d8:	5b                   	pop    ebx
c00143d9:	5e                   	pop    esi
c00143da:	c3                   	ret    
c00143db:	90                   	nop

c00143dc <Device::setName(char const*)>:
c00143dc:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00143e4:	e9 4b c4 fe ff       	jmp    c0000834 <strcpy>
c00143e9:	90                   	nop

c00143ea <Device::Device(char const*)>:
c00143ea:	83 ec 1c             	sub    esp,0x1c
c00143ed:	ba f8 aa 02 c0       	mov    edx,0xc002aaf8
c00143f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143f6:	89 10                	mov    DWORD PTR [eax],edx
c00143f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143fc:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0014406:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001440a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014414:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014418:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014422:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014426:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014430:	83 ec 08             	sub    esp,0x8
c0014433:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014437:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001443b:	e8 9c ff ff ff       	call   c00143dc <Device::setName(char const*)>
c0014440:	83 c4 10             	add    esp,0x10
c0014443:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c001444b:	83 ec 0c             	sub    esp,0xc
c001444e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014452:	e8 e9 b3 ff ff       	call   c000f840 <malloc>
c0014457:	83 c4 10             	add    esp,0x10
c001445a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014460:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014467:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001446b:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0014471:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014475:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001447b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014481:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014485:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001448b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014492:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014496:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c001449d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144a1:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00144a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144ac:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00144b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144ba:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00144c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144c8:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00144d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144d6:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c00144e0:	90                   	nop
c00144e1:	83 c4 1c             	add    esp,0x1c
c00144e4:	c3                   	ret    
c00144e5:	90                   	nop

c00144e6 <Device::getName()>:
c00144e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00144ea:	05 d0 00 00 00       	add    eax,0xd0
c00144ef:	c3                   	ret    

c00144f0 <DriverlessDevice::DriverlessDevice(char const*)>:
c00144f0:	83 ec 0c             	sub    esp,0xc
c00144f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144f7:	83 ec 08             	sub    esp,0x8
c00144fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144fe:	50                   	push   eax
c00144ff:	e8 e6 fe ff ff       	call   c00143ea <Device::Device(char const*)>
c0014504:	83 c4 10             	add    esp,0x10
c0014507:	ba 24 ab 02 c0       	mov    edx,0xc002ab24
c001450c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014510:	89 10                	mov    DWORD PTR [eax],edx
c0014512:	90                   	nop
c0014513:	83 c4 0c             	add    esp,0xc
c0014516:	c3                   	ret    
c0014517:	90                   	nop

c0014518 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0014518:	57                   	push   edi
c0014519:	56                   	push   esi
c001451a:	53                   	push   ebx
c001451b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001451f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014523:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014527:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001452d:	75 0c                	jne    c001453b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001452f:	52                   	push   edx
c0014530:	52                   	push   edx
c0014531:	53                   	push   ebx
c0014532:	56                   	push   esi
c0014533:	e8 b2 42 01 00       	call   c00287ea <LinkedList<Device>::addElement(Device*)>
c0014538:	83 c4 10             	add    esp,0x10
c001453b:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014541:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014544:	74 12                	je     c0014558 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0014546:	50                   	push   eax
c0014547:	57                   	push   edi
c0014548:	56                   	push   esi
c0014549:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001454c:	e8 c7 ff ff ff       	call   c0014518 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014551:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014553:	83 c4 10             	add    esp,0x10
c0014556:	eb e9                	jmp    c0014541 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0014558:	5b                   	pop    ebx
c0014559:	5e                   	pop    esi
c001455a:	5f                   	pop    edi
c001455b:	c3                   	ret    

c001455c <getDevicesOfType(DeviceType)>:
c001455c:	53                   	push   ebx
c001455d:	83 ec 14             	sub    esp,0x14
c0014560:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014564:	53                   	push   ebx
c0014565:	e8 5c 43 01 00       	call   c00288c6 <LinkedList<Device>::LinkedList()>
c001456a:	83 c4 0c             	add    esp,0xc
c001456d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014571:	53                   	push   ebx
c0014572:	ff 35 a8 e2 02 c0    	push   DWORD PTR ds:0xc002e2a8
c0014578:	e8 9b ff ff ff       	call   c0014518 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001457d:	89 d8                	mov    eax,ebx
c001457f:	83 c4 18             	add    esp,0x18
c0014582:	5b                   	pop    ebx
c0014583:	c2 04 00             	ret    0x4

c0014586 <HardDiskController::HardDiskController(char const*)>:
c0014586:	83 ec 0c             	sub    esp,0xc
c0014589:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001458d:	83 ec 08             	sub    esp,0x8
c0014590:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014594:	50                   	push   eax
c0014595:	e8 50 fe ff ff       	call   c00143ea <Device::Device(char const*)>
c001459a:	83 c4 10             	add    esp,0x10
c001459d:	ba 50 ab 02 c0       	mov    edx,0xc002ab50
c00145a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145a6:	89 10                	mov    DWORD PTR [eax],edx
c00145a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145ac:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00145b6:	90                   	nop
c00145b7:	83 c4 0c             	add    esp,0xc
c00145ba:	c3                   	ret    
c00145bb:	90                   	nop

c00145bc <HardDiskController::~HardDiskController()>:
c00145bc:	83 ec 0c             	sub    esp,0xc
c00145bf:	ba 50 ab 02 c0       	mov    edx,0xc002ab50
c00145c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145c8:	89 10                	mov    DWORD PTR [eax],edx
c00145ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145ce:	83 ec 0c             	sub    esp,0xc
c00145d1:	50                   	push   eax
c00145d2:	e8 f5 fa ff ff       	call   c00140cc <Device::~Device()>
c00145d7:	83 c4 10             	add    esp,0x10
c00145da:	90                   	nop
c00145db:	83 c4 0c             	add    esp,0xc
c00145de:	c3                   	ret    
c00145df:	90                   	nop

c00145e0 <HardDiskController::~HardDiskController()>:
c00145e0:	83 ec 0c             	sub    esp,0xc
c00145e3:	83 ec 0c             	sub    esp,0xc
c00145e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145ea:	e8 cd ff ff ff       	call   c00145bc <HardDiskController::~HardDiskController()>
c00145ef:	83 c4 10             	add    esp,0x10
c00145f2:	83 ec 08             	sub    esp,0x8
c00145f5:	68 58 01 00 00       	push   0x158
c00145fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145fe:	e8 f1 e6 ff ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0014603:	83 c4 10             	add    esp,0x10
c0014606:	83 c4 0c             	add    esp,0xc
c0014609:	c3                   	ret    

c001460a <PhysicalDisk::eject()>:
c001460a:	83 ec 18             	sub    esp,0x18
c001460d:	68 74 ab 02 c0       	push   0xc002ab74
c0014612:	e8 bd e7 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0014617:	83 c8 ff             	or     eax,0xffffffff
c001461a:	83 c4 1c             	add    esp,0x1c
c001461d:	c3                   	ret    

c001461e <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001461e:	83 ec 0c             	sub    esp,0xc
c0014621:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014625:	83 ec 08             	sub    esp,0x8
c0014628:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001462c:	50                   	push   eax
c001462d:	e8 b8 fd ff ff       	call   c00143ea <Device::Device(char const*)>
c0014632:	83 c4 10             	add    esp,0x10
c0014635:	ba a4 ab 02 c0       	mov    edx,0xc002aba4
c001463a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001463e:	89 10                	mov    DWORD PTR [eax],edx
c0014640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014644:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001464b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001464f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001465a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014664:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014668:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001466c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014672:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014676:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014680:	90                   	nop
c0014681:	83 c4 0c             	add    esp,0xc
c0014684:	c3                   	ret    
c0014685:	90                   	nop

c0014686 <PhysicalDisk::startCache()>:
c0014686:	56                   	push   esi
c0014687:	53                   	push   ebx
c0014688:	83 ec 10             	sub    esp,0x10
c001468b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001468f:	6a 44                	push   0x44
c0014691:	e8 aa b1 ff ff       	call   c000f840 <malloc>
c0014696:	89 c6                	mov    esi,eax
c0014698:	58                   	pop    eax
c0014699:	5a                   	pop    edx
c001469a:	53                   	push   ebx
c001469b:	56                   	push   esi
c001469c:	e8 5f 27 00 00       	call   c0016e00 <VCache::VCache(PhysicalDisk*)>
c00146a1:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00146a7:	83 c4 14             	add    esp,0x14
c00146aa:	5b                   	pop    ebx
c00146ab:	5e                   	pop    esi
c00146ac:	c3                   	ret    
c00146ad:	90                   	nop

c00146ae <PhysicalDisk::~PhysicalDisk()>:
c00146ae:	83 ec 0c             	sub    esp,0xc
c00146b1:	ba a4 ab 02 c0       	mov    edx,0xc002aba4
c00146b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146ba:	89 10                	mov    DWORD PTR [eax],edx
c00146bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146c0:	83 ec 0c             	sub    esp,0xc
c00146c3:	50                   	push   eax
c00146c4:	e8 03 fa ff ff       	call   c00140cc <Device::~Device()>
c00146c9:	83 c4 10             	add    esp,0x10
c00146cc:	90                   	nop
c00146cd:	83 c4 0c             	add    esp,0xc
c00146d0:	c3                   	ret    
c00146d1:	90                   	nop

c00146d2 <PhysicalDisk::~PhysicalDisk()>:
c00146d2:	83 ec 0c             	sub    esp,0xc
c00146d5:	83 ec 0c             	sub    esp,0xc
c00146d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146dc:	e8 cd ff ff ff       	call   c00146ae <PhysicalDisk::~PhysicalDisk()>
c00146e1:	83 c4 10             	add    esp,0x10
c00146e4:	83 ec 08             	sub    esp,0x8
c00146e7:	68 6c 01 00 00       	push   0x16c
c00146ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146f0:	e8 ff e5 ff ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c00146f5:	83 c4 10             	add    esp,0x10
c00146f8:	83 c4 0c             	add    esp,0xc
c00146fb:	c3                   	ret    

c00146fc <FPU::FPU(char const*)>:
c00146fc:	83 ec 0c             	sub    esp,0xc
c00146ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014703:	83 ec 08             	sub    esp,0x8
c0014706:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001470a:	50                   	push   eax
c001470b:	e8 da fc ff ff       	call   c00143ea <Device::Device(char const*)>
c0014710:	83 c4 10             	add    esp,0x10
c0014713:	ba e8 ab 02 c0       	mov    edx,0xc002abe8
c0014718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001471c:	89 10                	mov    DWORD PTR [eax],edx
c001471e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014722:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001472c:	90                   	nop
c001472d:	83 c4 0c             	add    esp,0xc
c0014730:	c3                   	ret    
c0014731:	90                   	nop

c0014732 <FPU::~FPU()>:
c0014732:	83 ec 0c             	sub    esp,0xc
c0014735:	ba e8 ab 02 c0       	mov    edx,0xc002abe8
c001473a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001473e:	89 10                	mov    DWORD PTR [eax],edx
c0014740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014744:	83 ec 0c             	sub    esp,0xc
c0014747:	50                   	push   eax
c0014748:	e8 7f f9 ff ff       	call   c00140cc <Device::~Device()>
c001474d:	83 c4 10             	add    esp,0x10
c0014750:	90                   	nop
c0014751:	83 c4 0c             	add    esp,0xc
c0014754:	c3                   	ret    
c0014755:	90                   	nop

c0014756 <FPU::~FPU()>:
c0014756:	83 ec 0c             	sub    esp,0xc
c0014759:	83 ec 0c             	sub    esp,0xc
c001475c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014760:	e8 cd ff ff ff       	call   c0014732 <FPU::~FPU()>
c0014765:	83 c4 10             	add    esp,0x10
c0014768:	83 ec 08             	sub    esp,0x8
c001476b:	68 58 01 00 00       	push   0x158
c0014770:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014774:	e8 7b e5 ff ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0014779:	83 c4 10             	add    esp,0x10
c001477c:	83 c4 0c             	add    esp,0xc
c001477f:	c3                   	ret    

c0014780 <setupFPU()>:
c0014780:	53                   	push   ebx
c0014781:	83 ec 08             	sub    esp,0x8
c0014784:	8b 15 a8 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e2a8
c001478a:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014791:	74 19                	je     c00147ac <setupFPU()+0x2c>
c0014793:	83 ec 0c             	sub    esp,0xc
c0014796:	68 58 01 00 00       	push   0x158
c001479b:	e8 a0 b0 ff ff       	call   c000f840 <malloc>
c00147a0:	89 c3                	mov    ebx,eax
c00147a2:	89 04 24             	mov    DWORD PTR [esp],eax
c00147a5:	e8 92 0c 01 00       	call   c002543c <AVX::AVX()>
c00147aa:	eb 5b                	jmp    c0014807 <setupFPU()+0x87>
c00147ac:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00147b2:	84 c0                	test   al,al
c00147b4:	79 19                	jns    c00147cf <setupFPU()+0x4f>
c00147b6:	83 ec 0c             	sub    esp,0xc
c00147b9:	68 58 01 00 00       	push   0x158
c00147be:	e8 7d b0 ff ff       	call   c000f840 <malloc>
c00147c3:	89 c3                	mov    ebx,eax
c00147c5:	89 04 24             	mov    DWORD PTR [esp],eax
c00147c8:	e8 95 0d 01 00       	call   c0025562 <SSE::SSE()>
c00147cd:	eb 38                	jmp    c0014807 <setupFPU()+0x87>
c00147cf:	a8 20                	test   al,0x20
c00147d1:	74 19                	je     c00147ec <setupFPU()+0x6c>
c00147d3:	83 ec 0c             	sub    esp,0xc
c00147d6:	68 58 01 00 00       	push   0x158
c00147db:	e8 60 b0 ff ff       	call   c000f840 <malloc>
c00147e0:	89 c3                	mov    ebx,eax
c00147e2:	89 04 24             	mov    DWORD PTR [esp],eax
c00147e5:	e8 e2 0c 01 00       	call   c00254cc <MMX::MMX()>
c00147ea:	eb 1b                	jmp    c0014807 <setupFPU()+0x87>
c00147ec:	a8 10                	test   al,0x10
c00147ee:	74 1c                	je     c001480c <setupFPU()+0x8c>
c00147f0:	83 ec 0c             	sub    esp,0xc
c00147f3:	68 58 01 00 00       	push   0x158
c00147f8:	e8 43 b0 ff ff       	call   c000f840 <malloc>
c00147fd:	89 c3                	mov    ebx,eax
c00147ff:	89 04 24             	mov    DWORD PTR [esp],eax
c0014802:	e8 e9 0d 01 00       	call   c00255f0 <x87::x87()>
c0014807:	83 c4 10             	add    esp,0x10
c001480a:	eb 24                	jmp    c0014830 <setupFPU()+0xb0>
c001480c:	83 e0 ef             	and    eax,0xffffffef
c001480f:	83 ec 0c             	sub    esp,0xc
c0014812:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014818:	68 d4 ab 02 c0       	push   0xc002abd4
c001481d:	e8 b2 e5 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0014822:	0f 20 c0             	mov    eax,cr0
c0014825:	83 c8 04             	or     eax,0x4
c0014828:	0f 22 c0             	mov    cr0,eax
c001482b:	31 db                	xor    ebx,ebx
c001482d:	83 c4 10             	add    esp,0x10
c0014830:	89 d8                	mov    eax,ebx
c0014832:	83 c4 08             	add    esp,0x8
c0014835:	5b                   	pop    ebx
c0014836:	c3                   	ret    
c0014837:	90                   	nop

c0014838 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014838:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001483c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014840:	c1 e0 04             	shl    eax,0x4
c0014843:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014847:	8d 50 10             	lea    edx,[eax+0x10]
c001484a:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014850:	74 08                	je     c001485a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014852:	83 c0 04             	add    eax,0x4
c0014855:	39 d0                	cmp    eax,edx
c0014857:	75 f1                	jne    c001484a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014859:	c3                   	ret    
c001485a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014864:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001486e:	eb e2                	jmp    c0014852 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014870 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014870:	57                   	push   edi
c0014871:	31 c0                	xor    eax,eax
c0014873:	56                   	push   esi
c0014874:	53                   	push   ebx
c0014875:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014879:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001487d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014881:	89 da                	mov    edx,ebx
c0014883:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014887:	c1 e2 04             	shl    edx,0x4
c001488a:	01 ca                	add    edx,ecx
c001488c:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014894:	74 16                	je     c00148ac <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014896:	40                   	inc    eax
c0014897:	83 f8 04             	cmp    eax,0x4
c001489a:	75 f0                	jne    c001488c <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c001489c:	c7 44 24 10 18 ac 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ac18
c00148a4:	5b                   	pop    ebx
c00148a5:	5e                   	pop    esi
c00148a6:	5f                   	pop    edi
c00148a7:	e9 03 5c 00 00       	jmp    c001a4af <Krnl::panic(char const*)>
c00148ac:	8d 04 98             	lea    eax,[eax+ebx*4]
c00148af:	8d 04 81             	lea    eax,[ecx+eax*4]
c00148b2:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00148b8:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00148be:	5b                   	pop    ebx
c00148bf:	5e                   	pop    esi
c00148c0:	5f                   	pop    edi
c00148c1:	c3                   	ret    

c00148c2 <doubleFault(regs*, void*)>:
c00148c2:	55                   	push   ebp
c00148c3:	89 e5                	mov    ebp,esp
c00148c5:	83 ec 08             	sub    esp,0x8
c00148c8:	83 ec 0c             	sub    esp,0xc
c00148cb:	68 53 ac 02 c0       	push   0xc002ac53
c00148d0:	e8 da 5b 00 00       	call   c001a4af <Krnl::panic(char const*)>
c00148d5:	83 c4 10             	add    esp,0x10
c00148d8:	90                   	nop
c00148d9:	c9                   	leave  
c00148da:	c3                   	ret    
c00148db:	90                   	nop

c00148dc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00148dc:	56                   	push   esi
c00148dd:	53                   	push   ebx
c00148de:	50                   	push   eax
c00148df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00148e3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00148e7:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00148ec:	75 35                	jne    c0014923 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00148ee:	8d 43 20             	lea    eax,[ebx+0x20]
c00148f1:	31 d2                	xor    edx,edx
c00148f3:	89 c1                	mov    ecx,eax
c00148f5:	c1 e1 04             	shl    ecx,0x4
c00148f8:	01 f1                	add    ecx,esi
c00148fa:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014902:	74 3e                	je     c0014942 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014904:	42                   	inc    edx
c0014905:	83 fa 04             	cmp    edx,0x4
c0014908:	75 f0                	jne    c00148fa <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c001490a:	83 ec 0c             	sub    esp,0xc
c001490d:	68 98 ac 02 c0       	push   0xc002ac98
c0014912:	e8 98 5b 00 00       	call   c001a4af <Krnl::panic(char const*)>
c0014917:	83 c4 10             	add    esp,0x10
c001491a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001491f:	5a                   	pop    edx
c0014920:	5b                   	pop    ebx
c0014921:	5e                   	pop    esi
c0014922:	c3                   	ret    
c0014923:	83 ec 0c             	sub    esp,0xc
c0014926:	56                   	push   esi
c0014927:	e8 ba fb ff ff       	call   c00144e6 <Device::getName()>
c001492c:	83 c4 10             	add    esp,0x10
c001492f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014932:	75 ba                	jne    c00148ee <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014934:	83 fb 0f             	cmp    ebx,0xf
c0014937:	7f 29                	jg     c0014962 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014939:	0f b6 9b 00 d5 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd2b00]
c0014940:	eb ac                	jmp    c00148ee <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014942:	8d 04 82             	lea    eax,[edx+eax*4]
c0014945:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014949:	8d 04 86             	lea    eax,[esi+eax*4]
c001494c:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014952:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014956:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c001495c:	89 d8                	mov    eax,ebx
c001495e:	5a                   	pop    edx
c001495f:	5b                   	pop    ebx
c0014960:	5e                   	pop    esi
c0014961:	c3                   	ret    
c0014962:	83 ec 0c             	sub    esp,0xc
c0014965:	68 60 ac 02 c0       	push   0xc002ac60
c001496a:	e8 40 5b 00 00       	call   c001a4af <Krnl::panic(char const*)>
c001496f:	83 c4 10             	add    esp,0x10
c0014972:	e9 77 ff ff ff       	jmp    c00148ee <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014977:	90                   	nop

c0014978 <InterruptController::clearAllHandlers(int, bool)>:
c0014978:	56                   	push   esi
c0014979:	53                   	push   ebx
c001497a:	52                   	push   edx
c001497b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001497f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014983:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014988:	75 61                	jne    c00149eb <InterruptController::clearAllHandlers(int, bool)+0x73>
c001498a:	8d 46 20             	lea    eax,[esi+0x20]
c001498d:	c1 e6 04             	shl    esi,0x4
c0014990:	c1 e0 04             	shl    eax,0x4
c0014993:	01 de                	add    esi,ebx
c0014995:	01 d8                	add    eax,ebx
c0014997:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00149a1:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00149ab:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00149b5:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00149bf:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c00149c9:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c00149d3:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c00149dd:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c00149e7:	58                   	pop    eax
c00149e8:	5b                   	pop    ebx
c00149e9:	5e                   	pop    esi
c00149ea:	c3                   	ret    
c00149eb:	83 ec 0c             	sub    esp,0xc
c00149ee:	53                   	push   ebx
c00149ef:	e8 f2 fa ff ff       	call   c00144e6 <Device::getName()>
c00149f4:	83 c4 10             	add    esp,0x10
c00149f7:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00149fa:	75 8e                	jne    c001498a <InterruptController::clearAllHandlers(int, bool)+0x12>
c00149fc:	83 fe 0f             	cmp    esi,0xf
c00149ff:	7f 09                	jg     c0014a0a <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014a01:	0f b6 b6 00 d5 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd2b00]
c0014a08:	eb 80                	jmp    c001498a <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014a0a:	83 ec 0c             	sub    esp,0xc
c0014a0d:	68 d4 ac 02 c0       	push   0xc002acd4
c0014a12:	e8 98 5a 00 00       	call   c001a4af <Krnl::panic(char const*)>
c0014a17:	83 c4 10             	add    esp,0x10
c0014a1a:	e9 6b ff ff ff       	jmp    c001498a <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014a1f:	90                   	nop

c0014a20 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014a20:	56                   	push   esi
c0014a21:	53                   	push   ebx
c0014a22:	52                   	push   edx
c0014a23:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014a27:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014a2b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014a30:	75 3a                	jne    c0014a6c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014a32:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014a36:	8d 50 20             	lea    edx,[eax+0x20]
c0014a39:	c1 e2 04             	shl    edx,0x4
c0014a3c:	8d 04 16             	lea    eax,[esi+edx*1]
c0014a3f:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014a43:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014a49:	74 0b                	je     c0014a56 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014a4b:	83 c0 04             	add    eax,0x4
c0014a4e:	39 d0                	cmp    eax,edx
c0014a50:	75 f1                	jne    c0014a43 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014a52:	58                   	pop    eax
c0014a53:	5b                   	pop    ebx
c0014a54:	5e                   	pop    esi
c0014a55:	c3                   	ret    
c0014a56:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014a60:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014a6a:	eb df                	jmp    c0014a4b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014a6c:	83 ec 0c             	sub    esp,0xc
c0014a6f:	56                   	push   esi
c0014a70:	e8 71 fa ff ff       	call   c00144e6 <Device::getName()>
c0014a75:	83 c4 10             	add    esp,0x10
c0014a78:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014a7b:	75 b5                	jne    c0014a32 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014a7d:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014a82:	7f 11                	jg     c0014a95 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014a84:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014a88:	0f b6 80 00 d5 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd2b00]
c0014a8f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014a93:	eb 9d                	jmp    c0014a32 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014a95:	83 ec 0c             	sub    esp,0xc
c0014a98:	68 d4 ac 02 c0       	push   0xc002acd4
c0014a9d:	e8 0d 5a 00 00       	call   c001a4af <Krnl::panic(char const*)>
c0014aa2:	83 c4 10             	add    esp,0x10
c0014aa5:	eb 8b                	jmp    c0014a32 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014aa7 <nmiHandler(regs*, void*)>:
c0014aa7:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c0014aac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014ab0:	e9 d7 a4 ff ff       	jmp    c000ef8c <Computer::handleNMI()>

c0014ab5 <int_handler>:
c0014ab5:	55                   	push   ebp
c0014ab6:	57                   	push   edi
c0014ab7:	56                   	push   esi
c0014ab8:	53                   	push   ebx
c0014ab9:	83 ec 0c             	sub    esp,0xc
c0014abc:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014ac0:	80 3d 04 0e 03 c0 00 	cmp    BYTE PTR ds:0xc0030e04,0x0
c0014ac7:	74 0b                	je     c0014ad4 <int_handler+0x1f>
c0014ac9:	fa                   	cli    
c0014aca:	f4                   	hlt    
c0014acb:	80 3d 04 0e 03 c0 00 	cmp    BYTE PTR ds:0xc0030e04,0x0
c0014ad2:	75 f5                	jne    c0014ac9 <int_handler+0x14>
c0014ad4:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c0014ad9:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014adc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014ae2:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014ae8:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014aeb:	83 f8 17             	cmp    eax,0x17
c0014aee:	77 13                	ja     c0014b03 <int_handler+0x4e>
c0014af0:	83 ec 08             	sub    esp,0x8
c0014af3:	8b 17                	mov    edx,DWORD PTR [edi]
c0014af5:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014af8:	0f b6 c0             	movzx  eax,al
c0014afb:	50                   	push   eax
c0014afc:	57                   	push   edi
c0014afd:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014b00:	83 c4 10             	add    esp,0x10
c0014b03:	83 c3 15             	add    ebx,0x15
c0014b06:	c1 e3 04             	shl    ebx,0x4
c0014b09:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014b0d:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014b14:	31 db                	xor    ebx,ebx
c0014b16:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014b1a:	85 c0                	test   eax,eax
c0014b1c:	74 13                	je     c0014b31 <int_handler+0x7c>
c0014b1e:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014b21:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014b25:	74 1c                	je     c0014b43 <int_handler+0x8e>
c0014b27:	83 ec 08             	sub    esp,0x8
c0014b2a:	52                   	push   edx
c0014b2b:	56                   	push   esi
c0014b2c:	ff d0                	call   eax
c0014b2e:	83 c4 10             	add    esp,0x10
c0014b31:	43                   	inc    ebx
c0014b32:	83 fb 04             	cmp    ebx,0x4
c0014b35:	75 df                	jne    c0014b16 <int_handler+0x61>
c0014b37:	83 c4 0c             	add    esp,0xc
c0014b3a:	31 c0                	xor    eax,eax
c0014b3c:	5b                   	pop    ebx
c0014b3d:	31 d2                	xor    edx,edx
c0014b3f:	5e                   	pop    esi
c0014b40:	5f                   	pop    edi
c0014b41:	5d                   	pop    ebp
c0014b42:	c3                   	ret    
c0014b43:	83 ec 08             	sub    esp,0x8
c0014b46:	52                   	push   edx
c0014b47:	56                   	push   esi
c0014b48:	ff d0                	call   eax
c0014b4a:	83 c4 10             	add    esp,0x10
c0014b4d:	83 c4 0c             	add    esp,0xc
c0014b50:	5b                   	pop    ebx
c0014b51:	5e                   	pop    esi
c0014b52:	5f                   	pop    edi
c0014b53:	5d                   	pop    ebp
c0014b54:	c3                   	ret    
c0014b55:	90                   	nop

c0014b56 <InterruptController::InterruptController(char const*)>:
c0014b56:	83 ec 1c             	sub    esp,0x1c
c0014b59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b5d:	83 ec 08             	sub    esp,0x8
c0014b60:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b64:	50                   	push   eax
c0014b65:	e8 80 f8 ff ff       	call   c00143ea <Device::Device(char const*)>
c0014b6a:	83 c4 10             	add    esp,0x10
c0014b6d:	ba 90 af 02 c0       	mov    edx,0xc002af90
c0014b72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b76:	89 10                	mov    DWORD PTR [eax],edx
c0014b78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b7c:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014b86:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014b8e:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014b96:	7f 5e                	jg     c0014bf6 <InterruptController::InterruptController(char const*)+0xa0>
c0014b98:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014ba0:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014ba5:	7f 49                	jg     c0014bf0 <InterruptController::InterruptController(char const*)+0x9a>
c0014ba7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014baf:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014bb6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014bba:	01 ca                	add    edx,ecx
c0014bbc:	83 c2 54             	add    edx,0x54
c0014bbf:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014bc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bcb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014bcf:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014bd6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014bda:	01 ca                	add    edx,ecx
c0014bdc:	81 c2 54 04 00 00    	add    edx,0x454
c0014be2:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014bea:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014bee:	eb b0                	jmp    c0014ba0 <InterruptController::InterruptController(char const*)+0x4a>
c0014bf0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014bf4:	eb 98                	jmp    c0014b8e <InterruptController::InterruptController(char const*)+0x38>
c0014bf6:	90                   	nop
c0014bf7:	83 c4 1c             	add    esp,0x1c
c0014bfa:	c3                   	ret    
c0014bfb:	90                   	nop

c0014bfc <InterruptController::~InterruptController()>:
c0014bfc:	83 ec 0c             	sub    esp,0xc
c0014bff:	ba 90 af 02 c0       	mov    edx,0xc002af90
c0014c04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c08:	89 10                	mov    DWORD PTR [eax],edx
c0014c0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c0e:	83 ec 0c             	sub    esp,0xc
c0014c11:	50                   	push   eax
c0014c12:	e8 b5 f4 ff ff       	call   c00140cc <Device::~Device()>
c0014c17:	83 c4 10             	add    esp,0x10
c0014c1a:	90                   	nop
c0014c1b:	83 c4 0c             	add    esp,0xc
c0014c1e:	c3                   	ret    
c0014c1f:	90                   	nop

c0014c20 <InterruptController::~InterruptController()>:
c0014c20:	83 ec 0c             	sub    esp,0xc
c0014c23:	83 ec 0c             	sub    esp,0xc
c0014c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c2a:	e8 cd ff ff ff       	call   c0014bfc <InterruptController::~InterruptController()>
c0014c2f:	83 c4 10             	add    esp,0x10
c0014c32:	83 ec 08             	sub    esp,0x8
c0014c35:	68 58 21 00 00       	push   0x2158
c0014c3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c3e:	e8 b1 e0 ff ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0014c43:	83 c4 10             	add    esp,0x10
c0014c46:	83 c4 0c             	add    esp,0xc
c0014c49:	c3                   	ret    

c0014c4a <displayDebugInfo(regs*)>:
c0014c4a:	55                   	push   ebp
c0014c4b:	57                   	push   edi
c0014c4c:	56                   	push   esi
c0014c4d:	53                   	push   ebx
c0014c4e:	83 ec 24             	sub    esp,0x24
c0014c51:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014c55:	0f 20 c2             	mov    edx,cr0
c0014c58:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014c5c:	0f 20 d7             	mov    edi,cr2
c0014c5f:	0f 20 de             	mov    esi,cr3
c0014c62:	0f 20 e5             	mov    ebp,cr4
c0014c65:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014c68:	68 0e ad 02 c0       	push   0xc002ad0e
c0014c6d:	e8 62 e1 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0014c72:	59                   	pop    ecx
c0014c73:	58                   	pop    eax
c0014c74:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014c77:	68 19 ad 02 c0       	push   0xc002ad19
c0014c7c:	e8 53 e1 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0014c81:	58                   	pop    eax
c0014c82:	5a                   	pop    edx
c0014c83:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014c86:	68 24 ad 02 c0       	push   0xc002ad24
c0014c8b:	e8 44 e1 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0014c90:	59                   	pop    ecx
c0014c91:	58                   	pop    eax
c0014c92:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014c95:	68 2f ad 02 c0       	push   0xc002ad2f
c0014c9a:	e8 35 e1 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0014c9f:	58                   	pop    eax
c0014ca0:	5a                   	pop    edx
c0014ca1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014ca4:	68 3a ad 02 c0       	push   0xc002ad3a
c0014ca9:	e8 26 e1 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0014cae:	59                   	pop    ecx
c0014caf:	58                   	pop    eax
c0014cb0:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014cb3:	68 45 ad 02 c0       	push   0xc002ad45
c0014cb8:	e8 17 e1 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0014cbd:	58                   	pop    eax
c0014cbe:	5a                   	pop    edx
c0014cbf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014cc2:	68 50 ad 02 c0       	push   0xc002ad50
c0014cc7:	e8 08 e1 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0014ccc:	59                   	pop    ecx
c0014ccd:	58                   	pop    eax
c0014cce:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014cd1:	68 5b ad 02 c0       	push   0xc002ad5b
c0014cd6:	e8 f9 e0 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0014cdb:	58                   	pop    eax
c0014cdc:	5a                   	pop    edx
c0014cdd:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014ce0:	68 66 ad 02 c0       	push   0xc002ad66
c0014ce5:	e8 ea e0 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0014cea:	59                   	pop    ecx
c0014ceb:	58                   	pop    eax
c0014cec:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014cef:	68 75 ad 02 c0       	push   0xc002ad75
c0014cf4:	e8 db e0 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0014cf9:	58                   	pop    eax
c0014cfa:	5a                   	pop    edx
c0014cfb:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014cfe:	68 80 ad 02 c0       	push   0xc002ad80
c0014d03:	e8 cc e0 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0014d08:	59                   	pop    ecx
c0014d09:	58                   	pop    eax
c0014d0a:	57                   	push   edi
c0014d0b:	68 8b ad 02 c0       	push   0xc002ad8b
c0014d10:	e8 bf e0 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0014d15:	58                   	pop    eax
c0014d16:	5a                   	pop    edx
c0014d17:	56                   	push   esi
c0014d18:	68 96 ad 02 c0       	push   0xc002ad96
c0014d1d:	e8 b2 e0 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0014d22:	59                   	pop    ecx
c0014d23:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c0014d28:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014d2e:	e8 f6 bf ff ff       	call   c0010d29 <setActiveTerminal(VgaText*)>
c0014d33:	58                   	pop    eax
c0014d34:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014d37:	5a                   	pop    edx
c0014d38:	c1 e0 05             	shl    eax,0x5
c0014d3b:	05 60 d2 02 c0       	add    eax,0xc002d260
c0014d40:	50                   	push   eax
c0014d41:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c0014d46:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014d4c:	e8 f7 c3 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c0014d51:	59                   	pop    ecx
c0014d52:	58                   	pop    eax
c0014d53:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c0014d58:	68 a1 ad 02 c0       	push   0xc002ada1
c0014d5d:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014d63:	e8 e0 c3 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c0014d68:	58                   	pop    eax
c0014d69:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d6e:	5a                   	pop    edx
c0014d6f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014d72:	83 c0 0c             	add    eax,0xc
c0014d75:	50                   	push   eax
c0014d76:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c0014d7b:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014d81:	e8 c2 c3 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c0014d86:	59                   	pop    ecx
c0014d87:	58                   	pop    eax
c0014d88:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c0014d8d:	68 aa ad 02 c0       	push   0xc002adaa
c0014d92:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014d98:	e8 ab c3 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c0014d9d:	58                   	pop    eax
c0014d9e:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c0014da3:	5a                   	pop    edx
c0014da4:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014da7:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014dad:	e8 bc c3 ff ff       	call   c001116e <VgaText::putx(unsigned int)>
c0014db2:	59                   	pop    ecx
c0014db3:	58                   	pop    eax
c0014db4:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c0014db9:	68 b2 ad 02 c0       	push   0xc002adb2
c0014dbe:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014dc4:	e8 7f c3 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c0014dc9:	58                   	pop    eax
c0014dca:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c0014dcf:	5a                   	pop    edx
c0014dd0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014dd3:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014dd9:	e8 90 c3 ff ff       	call   c001116e <VgaText::putx(unsigned int)>
c0014dde:	59                   	pop    ecx
c0014ddf:	58                   	pop    eax
c0014de0:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c0014de5:	68 ba ad 02 c0       	push   0xc002adba
c0014dea:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014df0:	e8 53 c3 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c0014df5:	58                   	pop    eax
c0014df6:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c0014dfb:	5a                   	pop    edx
c0014dfc:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014dff:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e05:	e8 64 c3 ff ff       	call   c001116e <VgaText::putx(unsigned int)>
c0014e0a:	59                   	pop    ecx
c0014e0b:	58                   	pop    eax
c0014e0c:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c0014e11:	68 c2 ad 02 c0       	push   0xc002adc2
c0014e16:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e1c:	e8 27 c3 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c0014e21:	58                   	pop    eax
c0014e22:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c0014e27:	5a                   	pop    edx
c0014e28:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014e2b:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e31:	e8 38 c3 ff ff       	call   c001116e <VgaText::putx(unsigned int)>
c0014e36:	59                   	pop    ecx
c0014e37:	58                   	pop    eax
c0014e38:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c0014e3d:	68 ca ad 02 c0       	push   0xc002adca
c0014e42:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e48:	e8 fb c2 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c0014e4d:	58                   	pop    eax
c0014e4e:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c0014e53:	5a                   	pop    edx
c0014e54:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014e57:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e5d:	e8 0c c3 ff ff       	call   c001116e <VgaText::putx(unsigned int)>
c0014e62:	59                   	pop    ecx
c0014e63:	58                   	pop    eax
c0014e64:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c0014e69:	68 d2 ad 02 c0       	push   0xc002add2
c0014e6e:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e74:	e8 cf c2 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c0014e79:	58                   	pop    eax
c0014e7a:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c0014e7f:	5a                   	pop    edx
c0014e80:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014e83:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e89:	e8 e0 c2 ff ff       	call   c001116e <VgaText::putx(unsigned int)>
c0014e8e:	59                   	pop    ecx
c0014e8f:	58                   	pop    eax
c0014e90:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c0014e95:	68 da ad 02 c0       	push   0xc002adda
c0014e9a:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014ea0:	e8 a3 c2 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c0014ea5:	58                   	pop    eax
c0014ea6:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c0014eab:	5a                   	pop    edx
c0014eac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014eb0:	52                   	push   edx
c0014eb1:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014eb7:	e8 b2 c2 ff ff       	call   c001116e <VgaText::putx(unsigned int)>
c0014ebc:	59                   	pop    ecx
c0014ebd:	58                   	pop    eax
c0014ebe:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c0014ec3:	68 e3 ad 02 c0       	push   0xc002ade3
c0014ec8:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014ece:	e8 75 c2 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c0014ed3:	58                   	pop    eax
c0014ed4:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c0014ed9:	5a                   	pop    edx
c0014eda:	57                   	push   edi
c0014edb:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014ee1:	e8 88 c2 ff ff       	call   c001116e <VgaText::putx(unsigned int)>
c0014ee6:	59                   	pop    ecx
c0014ee7:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c0014eec:	5f                   	pop    edi
c0014eed:	68 eb ad 02 c0       	push   0xc002adeb
c0014ef2:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014ef8:	e8 4b c2 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c0014efd:	58                   	pop    eax
c0014efe:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c0014f03:	5a                   	pop    edx
c0014f04:	56                   	push   esi
c0014f05:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f0b:	e8 5e c2 ff ff       	call   c001116e <VgaText::putx(unsigned int)>
c0014f10:	59                   	pop    ecx
c0014f11:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c0014f16:	5e                   	pop    esi
c0014f17:	68 f3 ad 02 c0       	push   0xc002adf3
c0014f1c:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f22:	e8 21 c2 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c0014f27:	5f                   	pop    edi
c0014f28:	58                   	pop    eax
c0014f29:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c0014f2e:	55                   	push   ebp
c0014f2f:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f35:	e8 34 c2 ff ff       	call   c001116e <VgaText::putx(unsigned int)>
c0014f3a:	58                   	pop    eax
c0014f3b:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c0014f40:	5a                   	pop    edx
c0014f41:	68 fb ad 02 c0       	push   0xc002adfb
c0014f46:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f4c:	e8 f7 c1 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c0014f51:	0f 21 c0             	mov    eax,db0
c0014f54:	59                   	pop    ecx
c0014f55:	5e                   	pop    esi
c0014f56:	50                   	push   eax
c0014f57:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c0014f5c:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f62:	e8 07 c2 ff ff       	call   c001116e <VgaText::putx(unsigned int)>
c0014f67:	5f                   	pop    edi
c0014f68:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c0014f6d:	5d                   	pop    ebp
c0014f6e:	68 04 ae 02 c0       	push   0xc002ae04
c0014f73:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f79:	e8 ca c1 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c0014f7e:	0f 21 c8             	mov    eax,db1
c0014f81:	5a                   	pop    edx
c0014f82:	59                   	pop    ecx
c0014f83:	50                   	push   eax
c0014f84:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c0014f89:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f8f:	e8 da c1 ff ff       	call   c001116e <VgaText::putx(unsigned int)>
c0014f94:	5e                   	pop    esi
c0014f95:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c0014f9a:	5f                   	pop    edi
c0014f9b:	68 0c ae 02 c0       	push   0xc002ae0c
c0014fa0:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014fa6:	e8 9d c1 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c0014fab:	0f 21 d0             	mov    eax,db2
c0014fae:	5d                   	pop    ebp
c0014faf:	5a                   	pop    edx
c0014fb0:	50                   	push   eax
c0014fb1:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c0014fb6:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014fbc:	e8 ad c1 ff ff       	call   c001116e <VgaText::putx(unsigned int)>
c0014fc1:	59                   	pop    ecx
c0014fc2:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c0014fc7:	5e                   	pop    esi
c0014fc8:	68 14 ae 02 c0       	push   0xc002ae14
c0014fcd:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014fd3:	e8 70 c1 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c0014fd8:	0f 21 d8             	mov    eax,db3
c0014fdb:	5f                   	pop    edi
c0014fdc:	5d                   	pop    ebp
c0014fdd:	50                   	push   eax
c0014fde:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c0014fe3:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014fe9:	e8 80 c1 ff ff       	call   c001116e <VgaText::putx(unsigned int)>
c0014fee:	58                   	pop    eax
c0014fef:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c0014ff4:	5a                   	pop    edx
c0014ff5:	68 1c ae 02 c0       	push   0xc002ae1c
c0014ffa:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0015000:	e8 43 c1 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c0015005:	0f 21 f0             	mov    eax,db6
c0015008:	59                   	pop    ecx
c0015009:	5e                   	pop    esi
c001500a:	50                   	push   eax
c001500b:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c0015010:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0015016:	e8 53 c1 ff ff       	call   c001116e <VgaText::putx(unsigned int)>
c001501b:	5f                   	pop    edi
c001501c:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c0015021:	5d                   	pop    ebp
c0015022:	68 24 ae 02 c0       	push   0xc002ae24
c0015027:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001502d:	e8 16 c1 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c0015032:	0f 21 f8             	mov    eax,db7
c0015035:	5a                   	pop    edx
c0015036:	59                   	pop    ecx
c0015037:	50                   	push   eax
c0015038:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c001503d:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0015043:	e8 26 c1 ff ff       	call   c001116e <VgaText::putx(unsigned int)>
c0015048:	5e                   	pop    esi
c0015049:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001504c:	e8 40 85 00 00       	call   c001d591 <Thr::getDriverNameFromAddress(unsigned long)>
c0015051:	83 c4 10             	add    esp,0x10
c0015054:	85 c0                	test   eax,eax
c0015056:	74 7d                	je     c00150d5 <displayDebugInfo(regs*)+0x48b>
c0015058:	89 c6                	mov    esi,eax
c001505a:	50                   	push   eax
c001505b:	50                   	push   eax
c001505c:	56                   	push   esi
c001505d:	68 2c ae 02 c0       	push   0xc002ae2c
c0015062:	e8 6d dd ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0015067:	5a                   	pop    edx
c0015068:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c001506d:	59                   	pop    ecx
c001506e:	68 3a ae 02 c0       	push   0xc002ae3a
c0015073:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0015079:	e8 ca c0 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c001507e:	5f                   	pop    edi
c001507f:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c0015084:	5d                   	pop    ebp
c0015085:	56                   	push   esi
c0015086:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001508c:	e8 b7 c0 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c0015091:	58                   	pop    eax
c0015092:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c0015097:	5a                   	pop    edx
c0015098:	68 46 ae 02 c0       	push   0xc002ae46
c001509d:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c00150a3:	e8 a0 c0 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c00150a8:	59                   	pop    ecx
c00150a9:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c00150ae:	8b b8 26 19 00 00    	mov    edi,DWORD PTR [eax+0x1926]
c00150b4:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00150b7:	e8 0c 85 00 00       	call   c001d5c8 <Thr::getDriverOffsetFromAddress(unsigned long)>
c00150bc:	5b                   	pop    ebx
c00150bd:	5d                   	pop    ebp
c00150be:	50                   	push   eax
c00150bf:	57                   	push   edi
c00150c0:	e8 a9 c0 ff ff       	call   c001116e <VgaText::putx(unsigned int)>
c00150c5:	58                   	pop    eax
c00150c6:	5a                   	pop    edx
c00150c7:	56                   	push   esi
c00150c8:	68 52 ae 02 c0       	push   0xc002ae52
c00150cd:	e8 02 dd ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c00150d2:	83 c4 10             	add    esp,0x10
c00150d5:	fa                   	cli    
c00150d6:	f4                   	hlt    
c00150d7:	eb fe                	jmp    c00150d7 <displayDebugInfo(regs*)+0x48d>

c00150d9 <x87EmulHandler(regs*, void*)>:
c00150d9:	53                   	push   ebx
c00150da:	83 ec 14             	sub    esp,0x14
c00150dd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00150e1:	53                   	push   ebx
c00150e2:	e8 83 a8 00 00       	call   c001f96a <Vm::x87Handler(regs*)>
c00150e7:	83 c4 10             	add    esp,0x10
c00150ea:	84 c0                	test   al,al
c00150ec:	74 05                	je     c00150f3 <x87EmulHandler(regs*, void*)+0x1a>
c00150ee:	83 c4 08             	add    esp,0x8
c00150f1:	5b                   	pop    ebx
c00150f2:	c3                   	ret    
c00150f3:	83 ec 0c             	sub    esp,0xc
c00150f6:	68 62 ae 02 c0       	push   0xc002ae62
c00150fb:	e8 d4 dc ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0015100:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015103:	e8 42 fb ff ff       	call   c0014c4a <displayDebugInfo(regs*)>

c0015108 <gpFault(regs*, void*)>:
c0015108:	53                   	push   ebx
c0015109:	83 ec 14             	sub    esp,0x14
c001510c:	c7 05 58 e4 02 c0 b9 ec 01 c0 	mov    DWORD PTR ds:0xc002e458,0xc001ecb9
c0015116:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001511a:	53                   	push   ebx
c001511b:	e8 99 9b 00 00       	call   c001ecb9 <Vm::faultHandler(regs*)>
c0015120:	83 c4 10             	add    esp,0x10
c0015123:	84 c0                	test   al,al
c0015125:	74 05                	je     c001512c <gpFault(regs*, void*)+0x24>
c0015127:	83 c4 08             	add    esp,0x8
c001512a:	5b                   	pop    ebx
c001512b:	c3                   	ret    
c001512c:	83 ec 0c             	sub    esp,0xc
c001512f:	68 78 ae 02 c0       	push   0xc002ae78
c0015134:	e8 9b dc ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0015139:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001513c:	e8 09 fb ff ff       	call   c0014c4a <displayDebugInfo(regs*)>

c0015141 <pgFault(regs*, void*)>:
c0015141:	83 ec 14             	sub    esp,0x14
c0015144:	0f 20 d0             	mov    eax,cr2
c0015147:	50                   	push   eax
c0015148:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001514d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015150:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c0015156:	e8 89 d8 ff ff       	call   c00129e4 <VAS::tryLoadBackOffDisk(unsigned long)>
c001515b:	83 c4 10             	add    esp,0x10
c001515e:	84 c0                	test   al,al
c0015160:	74 04                	je     c0015166 <pgFault(regs*, void*)+0x25>
c0015162:	83 c4 0c             	add    esp,0xc
c0015165:	c3                   	ret    
c0015166:	83 ec 0c             	sub    esp,0xc
c0015169:	68 93 ae 02 c0       	push   0xc002ae93
c001516e:	e8 61 dc ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0015173:	58                   	pop    eax
c0015174:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015178:	e8 cd fa ff ff       	call   c0014c4a <displayDebugInfo(regs*)>

c001517d <otherISRHandler(regs*, void*)>:
c001517d:	53                   	push   ebx
c001517e:	83 ec 0c             	sub    esp,0xc
c0015181:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015185:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0015188:	50                   	push   eax
c0015189:	50                   	push   eax
c001518a:	68 a5 ae 02 c0       	push   0xc002aea5
c001518f:	e8 40 dc ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0015194:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015197:	e8 ae fa ff ff       	call   c0014c4a <displayDebugInfo(regs*)>

c001519c <opcodeFault(regs*, void*)>:
c001519c:	55                   	push   ebp
c001519d:	89 e5                	mov    ebp,esp
c001519f:	56                   	push   esi
c00151a0:	53                   	push   ebx
c00151a1:	83 ec 40             	sub    esp,0x40
c00151a4:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c00151a9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00151af:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c00151b5:	84 c0                	test   al,al
c00151b7:	74 24                	je     c00151dd <opcodeFault(regs*, void*)+0x41>
c00151b9:	83 ec 0c             	sub    esp,0xc
c00151bc:	68 c4 ae 02 c0       	push   0xc002aec4
c00151c1:	e8 0e dc ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c00151c6:	83 c4 10             	add    esp,0x10
c00151c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151cc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151cf:	8d 50 19             	lea    edx,[eax+0x19]
c00151d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151d5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00151d8:	e9 be 05 00 00       	jmp    c001579b <opcodeFault(regs*, void*)+0x5ff>
c00151dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151e0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151e3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00151e6:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c00151ea:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c00151ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151f1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151f4:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00151f7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151fa:	8a 00                	mov    al,BYTE PTR [eax]
c00151fc:	3c f0                	cmp    al,0xf0
c00151fe:	75 17                	jne    c0015217 <opcodeFault(regs*, void*)+0x7b>
c0015200:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015203:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015206:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015209:	8d 50 01             	lea    edx,[eax+0x1]
c001520c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001520f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015212:	e9 da 00 00 00       	jmp    c00152f1 <opcodeFault(regs*, void*)+0x155>
c0015217:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001521a:	8a 00                	mov    al,BYTE PTR [eax]
c001521c:	3c f2                	cmp    al,0xf2
c001521e:	74 09                	je     c0015229 <opcodeFault(regs*, void*)+0x8d>
c0015220:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015223:	8a 00                	mov    al,BYTE PTR [eax]
c0015225:	3c f3                	cmp    al,0xf3
c0015227:	75 1b                	jne    c0015244 <opcodeFault(regs*, void*)+0xa8>
c0015229:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001522d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015230:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015233:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015236:	8d 50 01             	lea    edx,[eax+0x1]
c0015239:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001523c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001523f:	e9 ad 00 00 00       	jmp    c00152f1 <opcodeFault(regs*, void*)+0x155>
c0015244:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015247:	8a 00                	mov    al,BYTE PTR [eax]
c0015249:	3c 66                	cmp    al,0x66
c001524b:	75 1f                	jne    c001526c <opcodeFault(regs*, void*)+0xd0>
c001524d:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015251:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0015255:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015258:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001525b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001525e:	8d 50 01             	lea    edx,[eax+0x1]
c0015261:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015264:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015267:	e9 85 00 00 00       	jmp    c00152f1 <opcodeFault(regs*, void*)+0x155>
c001526c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001526f:	8a 00                	mov    al,BYTE PTR [eax]
c0015271:	3c 67                	cmp    al,0x67
c0015273:	75 18                	jne    c001528d <opcodeFault(regs*, void*)+0xf1>
c0015275:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015279:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001527c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001527f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015282:	8d 50 01             	lea    edx,[eax+0x1]
c0015285:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015288:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001528b:	eb 64                	jmp    c00152f1 <opcodeFault(regs*, void*)+0x155>
c001528d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015290:	8a 00                	mov    al,BYTE PTR [eax]
c0015292:	3c 2e                	cmp    al,0x2e
c0015294:	74 09                	je     c001529f <opcodeFault(regs*, void*)+0x103>
c0015296:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015299:	8a 00                	mov    al,BYTE PTR [eax]
c001529b:	3c 3e                	cmp    al,0x3e
c001529d:	75 18                	jne    c00152b7 <opcodeFault(regs*, void*)+0x11b>
c001529f:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00152a3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00152a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152a9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152ac:	8d 50 01             	lea    edx,[eax+0x1]
c00152af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152b2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152b5:	eb 3a                	jmp    c00152f1 <opcodeFault(regs*, void*)+0x155>
c00152b7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152ba:	8a 00                	mov    al,BYTE PTR [eax]
c00152bc:	3c 36                	cmp    al,0x36
c00152be:	74 1b                	je     c00152db <opcodeFault(regs*, void*)+0x13f>
c00152c0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152c3:	8a 00                	mov    al,BYTE PTR [eax]
c00152c5:	3c 26                	cmp    al,0x26
c00152c7:	74 12                	je     c00152db <opcodeFault(regs*, void*)+0x13f>
c00152c9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152cc:	8a 00                	mov    al,BYTE PTR [eax]
c00152ce:	3c 64                	cmp    al,0x64
c00152d0:	74 09                	je     c00152db <opcodeFault(regs*, void*)+0x13f>
c00152d2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152d5:	8a 00                	mov    al,BYTE PTR [eax]
c00152d7:	3c 65                	cmp    al,0x65
c00152d9:	75 16                	jne    c00152f1 <opcodeFault(regs*, void*)+0x155>
c00152db:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00152df:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00152e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152e5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152e8:	8d 50 01             	lea    edx,[eax+0x1]
c00152eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152ee:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152f1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152f4:	8a 00                	mov    al,BYTE PTR [eax]
c00152f6:	3c 0f                	cmp    al,0xf
c00152f8:	0f 85 ad 00 00 00    	jne    c00153ab <opcodeFault(regs*, void*)+0x20f>
c00152fe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015301:	40                   	inc    eax
c0015302:	8a 00                	mov    al,BYTE PTR [eax]
c0015304:	3c c2                	cmp    al,0xc2
c0015306:	74 0e                	je     c0015316 <opcodeFault(regs*, void*)+0x17a>
c0015308:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001530b:	40                   	inc    eax
c001530c:	8a 00                	mov    al,BYTE PTR [eax]
c001530e:	3c c3                	cmp    al,0xc3
c0015310:	0f 85 95 00 00 00    	jne    c00153ab <opcodeFault(regs*, void*)+0x20f>
c0015316:	83 ec 0c             	sub    esp,0xc
c0015319:	68 e7 ae 02 c0       	push   0xc002aee7
c001531e:	e8 b1 da ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0015323:	83 c4 10             	add    esp,0x10
c0015326:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015329:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001532c:	8d 50 01             	lea    edx,[eax+0x1]
c001532f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015332:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015335:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015338:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001533b:	8a 00                	mov    al,BYTE PTR [eax]
c001533d:	8d 50 fe             	lea    edx,[eax-0x2]
c0015340:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015343:	88 10                	mov    BYTE PTR [eax],dl
c0015345:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0015348:	50                   	push   eax
c0015349:	8d 45 c3             	lea    eax,[ebp-0x3d]
c001534c:	50                   	push   eax
c001534d:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0015350:	50                   	push   eax
c0015351:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015354:	e8 1d 48 00 00       	call   c0019b76 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015359:	83 c4 10             	add    esp,0x10
c001535c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001535f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015362:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015365:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0015368:	01 d0                	add    eax,edx
c001536a:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001536d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015370:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015373:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015376:	48                   	dec    eax
c0015377:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001537a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001537d:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0015380:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015383:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015386:	83 ec 04             	sub    esp,0x4
c0015389:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001538c:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001538f:	50                   	push   eax
c0015390:	e8 1f ae fe ff       	call   c00001b4 <voodooXADD>
c0015395:	83 c4 10             	add    esp,0x10
c0015398:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001539b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001539e:	01 c2                	add    edx,eax
c00153a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153a3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153a6:	e9 f0 03 00 00       	jmp    c001579b <opcodeFault(regs*, void*)+0x5ff>
c00153ab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153ae:	8a 00                	mov    al,BYTE PTR [eax]
c00153b0:	3c 0f                	cmp    al,0xf
c00153b2:	0f 85 8b 01 00 00    	jne    c0015543 <opcodeFault(regs*, void*)+0x3a7>
c00153b8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153bb:	40                   	inc    eax
c00153bc:	8a 00                	mov    al,BYTE PTR [eax]
c00153be:	3c c7                	cmp    al,0xc7
c00153c0:	0f 86 7d 01 00 00    	jbe    c0015543 <opcodeFault(regs*, void*)+0x3a7>
c00153c6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153c9:	40                   	inc    eax
c00153ca:	8a 00                	mov    al,BYTE PTR [eax]
c00153cc:	3c cf                	cmp    al,0xcf
c00153ce:	0f 87 6f 01 00 00    	ja     c0015543 <opcodeFault(regs*, void*)+0x3a7>
c00153d4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153d7:	40                   	inc    eax
c00153d8:	8a 00                	mov    al,BYTE PTR [eax]
c00153da:	83 c0 38             	add    eax,0x38
c00153dd:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00153e0:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00153e4:	75 0b                	jne    c00153f1 <opcodeFault(regs*, void*)+0x255>
c00153e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153e9:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00153ec:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00153ef:	eb 75                	jmp    c0015466 <opcodeFault(regs*, void*)+0x2ca>
c00153f1:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00153f5:	75 0b                	jne    c0015402 <opcodeFault(regs*, void*)+0x266>
c00153f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153fa:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00153fd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015400:	eb 64                	jmp    c0015466 <opcodeFault(regs*, void*)+0x2ca>
c0015402:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015406:	75 0b                	jne    c0015413 <opcodeFault(regs*, void*)+0x277>
c0015408:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001540b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001540e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015411:	eb 53                	jmp    c0015466 <opcodeFault(regs*, void*)+0x2ca>
c0015413:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015417:	75 0b                	jne    c0015424 <opcodeFault(regs*, void*)+0x288>
c0015419:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001541c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001541f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015422:	eb 42                	jmp    c0015466 <opcodeFault(regs*, void*)+0x2ca>
c0015424:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015428:	75 0b                	jne    c0015435 <opcodeFault(regs*, void*)+0x299>
c001542a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001542d:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0015430:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015433:	eb 31                	jmp    c0015466 <opcodeFault(regs*, void*)+0x2ca>
c0015435:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015439:	75 0b                	jne    c0015446 <opcodeFault(regs*, void*)+0x2aa>
c001543b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001543e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015441:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015444:	eb 20                	jmp    c0015466 <opcodeFault(regs*, void*)+0x2ca>
c0015446:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001544a:	75 0b                	jne    c0015457 <opcodeFault(regs*, void*)+0x2bb>
c001544c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001544f:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015452:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015455:	eb 0f                	jmp    c0015466 <opcodeFault(regs*, void*)+0x2ca>
c0015457:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001545b:	75 09                	jne    c0015466 <opcodeFault(regs*, void*)+0x2ca>
c001545d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015460:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015463:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015466:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c001546a:	74 10                	je     c001547c <opcodeFault(regs*, void*)+0x2e0>
c001546c:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0015473:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c001547a:	eb 2d                	jmp    c00154a9 <opcodeFault(regs*, void*)+0x30d>
c001547c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001547f:	c1 e0 18             	shl    eax,0x18
c0015482:	89 c2                	mov    edx,eax
c0015484:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015487:	c1 e0 08             	shl    eax,0x8
c001548a:	25 00 00 ff 00       	and    eax,0xff0000
c001548f:	09 c2                	or     edx,eax
c0015491:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015494:	c1 e8 08             	shr    eax,0x8
c0015497:	25 00 ff 00 00       	and    eax,0xff00
c001549c:	09 c2                	or     edx,eax
c001549e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00154a1:	c1 e8 18             	shr    eax,0x18
c00154a4:	09 d0                	or     eax,edx
c00154a6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154a9:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00154ad:	75 0b                	jne    c00154ba <opcodeFault(regs*, void*)+0x31e>
c00154af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154b2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00154b5:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00154b8:	eb 75                	jmp    c001552f <opcodeFault(regs*, void*)+0x393>
c00154ba:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00154be:	75 0b                	jne    c00154cb <opcodeFault(regs*, void*)+0x32f>
c00154c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154c3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00154c6:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00154c9:	eb 64                	jmp    c001552f <opcodeFault(regs*, void*)+0x393>
c00154cb:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00154cf:	75 0b                	jne    c00154dc <opcodeFault(regs*, void*)+0x340>
c00154d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154d4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00154d7:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00154da:	eb 53                	jmp    c001552f <opcodeFault(regs*, void*)+0x393>
c00154dc:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00154e0:	75 0b                	jne    c00154ed <opcodeFault(regs*, void*)+0x351>
c00154e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154e5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00154e8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00154eb:	eb 42                	jmp    c001552f <opcodeFault(regs*, void*)+0x393>
c00154ed:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00154f1:	75 0b                	jne    c00154fe <opcodeFault(regs*, void*)+0x362>
c00154f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154f6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00154f9:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00154fc:	eb 31                	jmp    c001552f <opcodeFault(regs*, void*)+0x393>
c00154fe:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015502:	75 0b                	jne    c001550f <opcodeFault(regs*, void*)+0x373>
c0015504:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015507:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001550a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001550d:	eb 20                	jmp    c001552f <opcodeFault(regs*, void*)+0x393>
c001550f:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015513:	75 0b                	jne    c0015520 <opcodeFault(regs*, void*)+0x384>
c0015515:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015518:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001551b:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001551e:	eb 0f                	jmp    c001552f <opcodeFault(regs*, void*)+0x393>
c0015520:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015524:	75 09                	jne    c001552f <opcodeFault(regs*, void*)+0x393>
c0015526:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015529:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001552c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001552f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015532:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015535:	8d 50 02             	lea    edx,[eax+0x2]
c0015538:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001553b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001553e:	e9 58 02 00 00       	jmp    c001579b <opcodeFault(regs*, void*)+0x5ff>
c0015543:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015546:	8a 00                	mov    al,BYTE PTR [eax]
c0015548:	3c 0f                	cmp    al,0xf
c001554a:	0f 85 76 01 00 00    	jne    c00156c6 <opcodeFault(regs*, void*)+0x52a>
c0015550:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015553:	40                   	inc    eax
c0015554:	8a 00                	mov    al,BYTE PTR [eax]
c0015556:	3c c7                	cmp    al,0xc7
c0015558:	0f 85 68 01 00 00    	jne    c00156c6 <opcodeFault(regs*, void*)+0x52a>
c001555e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015561:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015564:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015567:	8d 50 01             	lea    edx,[eax+0x1]
c001556a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001556d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015570:	8d 45 ba             	lea    eax,[ebp-0x46]
c0015573:	50                   	push   eax
c0015574:	8d 45 bb             	lea    eax,[ebp-0x45]
c0015577:	50                   	push   eax
c0015578:	8d 45 bc             	lea    eax,[ebp-0x44]
c001557b:	50                   	push   eax
c001557c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001557f:	e8 f2 45 00 00       	call   c0019b76 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015584:	83 c4 10             	add    esp,0x10
c0015587:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001558a:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c001558d:	83 f0 01             	xor    eax,0x1
c0015590:	84 c0                	test   al,al
c0015592:	0f 84 2e 01 00 00    	je     c00156c6 <opcodeFault(regs*, void*)+0x52a>
c0015598:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c001559b:	3c 01                	cmp    al,0x1
c001559d:	0f 85 23 01 00 00    	jne    c00156c6 <opcodeFault(regs*, void*)+0x52a>
c00155a3:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c00155a6:	83 f0 01             	xor    eax,0x1
c00155a9:	84 c0                	test   al,al
c00155ab:	0f 84 15 01 00 00    	je     c00156c6 <opcodeFault(regs*, void*)+0x52a>
c00155b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155b4:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00155b7:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00155ba:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c00155c1:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00155c4:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00155c7:	89 c2                	mov    edx,eax
c00155c9:	b8 00 00 00 00       	mov    eax,0x0
c00155ce:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00155d1:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00155d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155d7:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00155da:	ba 00 00 00 00       	mov    edx,0x0
c00155df:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00155e2:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00155e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155e8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00155eb:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00155ee:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00155f5:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00155f8:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00155fb:	89 c2                	mov    edx,eax
c00155fd:	b8 00 00 00 00       	mov    eax,0x0
c0015602:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015605:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015608:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001560b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001560e:	ba 00 00 00 00       	mov    edx,0x0
c0015613:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0015616:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015619:	e8 8b 86 00 00       	call   c001dca9 <lockScheduler()>
c001561e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015621:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015624:	8b 00                	mov    eax,DWORD PTR [eax]
c0015626:	89 c1                	mov    ecx,eax
c0015628:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c001562b:	89 cb                	mov    ebx,ecx
c001562d:	89 d0                	mov    eax,edx
c001562f:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0015632:	89 c6                	mov    esi,eax
c0015634:	89 f0                	mov    eax,esi
c0015636:	09 d8                	or     eax,ebx
c0015638:	85 c0                	test   eax,eax
c001563a:	75 21                	jne    c001565d <opcodeFault(regs*, void*)+0x4c1>
c001563c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c001563f:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015642:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015645:	89 01                	mov    DWORD PTR [ecx],eax
c0015647:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001564a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001564d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015650:	83 c8 40             	or     eax,0x40
c0015653:	89 c2                	mov    edx,eax
c0015655:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015658:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001565b:	eb 3e                	jmp    c001569b <opcodeFault(regs*, void*)+0x4ff>
c001565d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015660:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015663:	8b 00                	mov    eax,DWORD PTR [eax]
c0015665:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015668:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001566b:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001566e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015671:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015674:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015677:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001567a:	89 d0                	mov    eax,edx
c001567c:	31 d2                	xor    edx,edx
c001567e:	89 c3                	mov    ebx,eax
c0015680:	89 d6                	mov    esi,edx
c0015682:	89 da                	mov    edx,ebx
c0015684:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015687:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001568a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001568d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015690:	83 e0 bf             	and    eax,0xffffffbf
c0015693:	89 c2                	mov    edx,eax
c0015695:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015698:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001569b:	e8 0b 86 00 00       	call   c001dcab <unlockScheduler()>
c00156a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156a3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00156a6:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c00156a9:	01 c2                	add    edx,eax
c00156ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ae:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00156b1:	83 ec 0c             	sub    esp,0xc
c00156b4:	68 f6 ae 02 c0       	push   0xc002aef6
c00156b9:	e8 16 d7 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c00156be:	83 c4 10             	add    esp,0x10
c00156c1:	e9 d5 00 00 00       	jmp    c001579b <opcodeFault(regs*, void*)+0x5ff>
c00156c6:	83 ec 0c             	sub    esp,0xc
c00156c9:	68 09 af 02 c0       	push   0xc002af09
c00156ce:	e8 01 d7 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c00156d3:	83 c4 10             	add    esp,0x10
c00156d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156d9:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00156dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156df:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00156e2:	c1 e0 04             	shl    eax,0x4
c00156e5:	01 d0                	add    eax,edx
c00156e7:	83 c0 03             	add    eax,0x3
c00156ea:	8a 00                	mov    al,BYTE PTR [eax]
c00156ec:	0f b6 d8             	movzx  ebx,al
c00156ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156f2:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00156f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156f8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00156fb:	c1 e0 04             	shl    eax,0x4
c00156fe:	01 d0                	add    eax,edx
c0015700:	83 c0 02             	add    eax,0x2
c0015703:	8a 00                	mov    al,BYTE PTR [eax]
c0015705:	0f b6 c8             	movzx  ecx,al
c0015708:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001570b:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001570e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015711:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015714:	c1 e0 04             	shl    eax,0x4
c0015717:	01 d0                	add    eax,edx
c0015719:	40                   	inc    eax
c001571a:	8a 00                	mov    al,BYTE PTR [eax]
c001571c:	0f b6 d0             	movzx  edx,al
c001571f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015722:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015725:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015728:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001572b:	c1 e0 04             	shl    eax,0x4
c001572e:	01 f0                	add    eax,esi
c0015730:	8a 00                	mov    al,BYTE PTR [eax]
c0015732:	0f b6 c0             	movzx  eax,al
c0015735:	83 ec 0c             	sub    esp,0xc
c0015738:	53                   	push   ebx
c0015739:	51                   	push   ecx
c001573a:	52                   	push   edx
c001573b:	50                   	push   eax
c001573c:	68 1c af 02 c0       	push   0xc002af1c
c0015741:	e8 8e d6 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0015746:	83 c4 20             	add    esp,0x20
c0015749:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001574c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001574f:	83 c0 03             	add    eax,0x3
c0015752:	8a 00                	mov    al,BYTE PTR [eax]
c0015754:	0f b6 d8             	movzx  ebx,al
c0015757:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001575a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001575d:	83 c0 02             	add    eax,0x2
c0015760:	8a 00                	mov    al,BYTE PTR [eax]
c0015762:	0f b6 c8             	movzx  ecx,al
c0015765:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015768:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001576b:	40                   	inc    eax
c001576c:	8a 00                	mov    al,BYTE PTR [eax]
c001576e:	0f b6 d0             	movzx  edx,al
c0015771:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015774:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015777:	8a 00                	mov    al,BYTE PTR [eax]
c0015779:	0f b6 c0             	movzx  eax,al
c001577c:	83 ec 0c             	sub    esp,0xc
c001577f:	53                   	push   ebx
c0015780:	51                   	push   ecx
c0015781:	52                   	push   edx
c0015782:	50                   	push   eax
c0015783:	68 44 af 02 c0       	push   0xc002af44
c0015788:	e8 47 d6 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001578d:	83 c4 20             	add    esp,0x20
c0015790:	83 ec 0c             	sub    esp,0xc
c0015793:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015796:	e8 af f4 ff ff       	call   c0014c4a <displayDebugInfo(regs*)>
c001579b:	8d 65 f8             	lea    esp,[ebp-0x8]
c001579e:	5b                   	pop    ebx
c001579f:	5e                   	pop    esi
c00157a0:	5d                   	pop    ebp
c00157a1:	c3                   	ret    

c00157a2 <displayProgramFault(char const*)>:
c00157a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00157a7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00157aa:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c00157b0:	85 c0                	test   eax,eax
c00157b2:	74 15                	je     c00157c9 <displayProgramFault(char const*)+0x27>
c00157b4:	83 ec 0c             	sub    esp,0xc
c00157b7:	6a 04                	push   0x4
c00157b9:	6a 0f                	push   0xf
c00157bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00157bf:	50                   	push   eax
c00157c0:	e8 45 b6 ff ff       	call   c0010e0a <VgaText::puts(char const*, VgaColour, VgaColour)>
c00157c5:	83 c4 1c             	add    esp,0x1c
c00157c8:	c3                   	ret    
c00157c9:	c3                   	ret    

c00157ca <setupInterruptController()>:
c00157ca:	55                   	push   ebp
c00157cb:	89 e5                	mov    ebp,esp
c00157cd:	53                   	push   ebx
c00157ce:	83 ec 24             	sub    esp,0x24
c00157d1:	b8 00 00 00 00       	mov    eax,0x0
c00157d6:	85 c0                	test   eax,eax
c00157d8:	0f 95 c0             	setne  al
c00157db:	84 c0                	test   al,al
c00157dd:	74 5b                	je     c001583a <setupInterruptController()+0x70>
c00157df:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c00157e6:	83 ec 0c             	sub    esp,0xc
c00157e9:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c00157ec:	e8 4f a0 ff ff       	call   c000f840 <malloc>
c00157f1:	83 c4 10             	add    esp,0x10
c00157f4:	89 c3                	mov    ebx,eax
c00157f6:	83 ec 0c             	sub    esp,0xc
c00157f9:	53                   	push   ebx
c00157fa:	e8 2f 00 01 00       	call   c002582e <APIC::APIC()>
c00157ff:	83 c4 10             	add    esp,0x10
c0015802:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015805:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015808:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001580b:	8b 00                	mov    eax,DWORD PTR [eax]
c001580d:	83 c0 08             	add    eax,0x8
c0015810:	8b 00                	mov    eax,DWORD PTR [eax]
c0015812:	6a 00                	push   0x0
c0015814:	6a 00                	push   0x0
c0015816:	6a 00                	push   0x0
c0015818:	52                   	push   edx
c0015819:	ff d0                	call   eax
c001581b:	83 c4 10             	add    esp,0x10
c001581e:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c0015823:	83 ec 08             	sub    esp,0x8
c0015826:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015829:	50                   	push   eax
c001582a:	e8 cb e9 ff ff       	call   c00141fa <Device::addChild(Device*)>
c001582f:	83 c4 10             	add    esp,0x10
c0015832:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015835:	e9 88 03 00 00       	jmp    c0015bc2 <setupInterruptController()+0x3f8>
c001583a:	a0 40 0c 03 c0       	mov    al,ds:0xc0030c40
c001583f:	0f b6 c0             	movzx  eax,al
c0015842:	83 ec 08             	sub    esp,0x8
c0015845:	50                   	push   eax
c0015846:	68 69 af 02 c0       	push   0xc002af69
c001584b:	e8 84 d5 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0015850:	83 c4 10             	add    esp,0x10
c0015853:	a0 40 0c 03 c0       	mov    al,ds:0xc0030c40
c0015858:	84 c0                	test   al,al
c001585a:	75 14                	jne    c0015870 <setupInterruptController()+0xa6>
c001585c:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c0015861:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0015867:	83 e2 fe             	and    edx,0xfffffffe
c001586a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0015870:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c0015875:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001587b:	83 e0 01             	and    eax,0x1
c001587e:	84 c0                	test   al,al
c0015880:	0f 95 c0             	setne  al
c0015883:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015886:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c001588d:	83 ec 0c             	sub    esp,0xc
c0015890:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015893:	e8 a8 9f ff ff       	call   c000f840 <malloc>
c0015898:	83 c4 10             	add    esp,0x10
c001589b:	89 c3                	mov    ebx,eax
c001589d:	83 ec 0c             	sub    esp,0xc
c00158a0:	53                   	push   ebx
c00158a1:	e8 e0 04 01 00       	call   c0025d86 <PIC::PIC()>
c00158a6:	83 c4 10             	add    esp,0x10
c00158a9:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00158ac:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00158af:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00158b4:	83 c0 08             	add    eax,0x8
c00158b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00158b9:	6a 00                	push   0x0
c00158bb:	6a 00                	push   0x0
c00158bd:	6a 00                	push   0x0
c00158bf:	52                   	push   edx
c00158c0:	ff d0                	call   eax
c00158c2:	83 c4 10             	add    esp,0x10
c00158c5:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c00158c9:	74 73                	je     c001593e <setupInterruptController()+0x174>
c00158cb:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00158ce:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00158d3:	83 c0 0c             	add    eax,0xc
c00158d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00158d8:	6a 00                	push   0x0
c00158da:	6a 00                	push   0x0
c00158dc:	6a 00                	push   0x0
c00158de:	52                   	push   edx
c00158df:	ff d0                	call   eax
c00158e1:	83 c4 10             	add    esp,0x10
c00158e4:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00158e8:	74 15                	je     c00158ff <setupInterruptController()+0x135>
c00158ea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00158ef:	83 c0 04             	add    eax,0x4
c00158f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00158f4:	83 ec 0c             	sub    esp,0xc
c00158f7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00158fa:	ff d0                	call   eax
c00158fc:	83 c4 10             	add    esp,0x10
c00158ff:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015906:	83 ec 0c             	sub    esp,0xc
c0015909:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001590c:	e8 2f 9f ff ff       	call   c000f840 <malloc>
c0015911:	83 c4 10             	add    esp,0x10
c0015914:	89 c3                	mov    ebx,eax
c0015916:	83 ec 0c             	sub    esp,0xc
c0015919:	53                   	push   ebx
c001591a:	e8 0f ff 00 00       	call   c002582e <APIC::APIC()>
c001591f:	83 c4 10             	add    esp,0x10
c0015922:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015925:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015928:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001592b:	8b 00                	mov    eax,DWORD PTR [eax]
c001592d:	83 c0 08             	add    eax,0x8
c0015930:	8b 00                	mov    eax,DWORD PTR [eax]
c0015932:	6a 00                	push   0x0
c0015934:	6a 00                	push   0x0
c0015936:	6a 00                	push   0x0
c0015938:	52                   	push   edx
c0015939:	ff d0                	call   eax
c001593b:	83 c4 10             	add    esp,0x10
c001593e:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c0015943:	83 ec 08             	sub    esp,0x8
c0015946:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015949:	50                   	push   eax
c001594a:	e8 ab e8 ff ff       	call   c00141fa <Device::addChild(Device*)>
c001594f:	83 c4 10             	add    esp,0x10
c0015952:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015955:	8b 00                	mov    eax,DWORD PTR [eax]
c0015957:	83 c0 24             	add    eax,0x24
c001595a:	8b 00                	mov    eax,DWORD PTR [eax]
c001595c:	6a 00                	push   0x0
c001595e:	68 7d 51 01 c0       	push   0xc001517d
c0015963:	6a 00                	push   0x0
c0015965:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015968:	ff d0                	call   eax
c001596a:	83 c4 10             	add    esp,0x10
c001596d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015970:	8b 00                	mov    eax,DWORD PTR [eax]
c0015972:	83 c0 24             	add    eax,0x24
c0015975:	8b 00                	mov    eax,DWORD PTR [eax]
c0015977:	6a 00                	push   0x0
c0015979:	68 7d 51 01 c0       	push   0xc001517d
c001597e:	6a 01                	push   0x1
c0015980:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015983:	ff d0                	call   eax
c0015985:	83 c4 10             	add    esp,0x10
c0015988:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001598b:	8b 00                	mov    eax,DWORD PTR [eax]
c001598d:	83 c0 24             	add    eax,0x24
c0015990:	8b 00                	mov    eax,DWORD PTR [eax]
c0015992:	6a 00                	push   0x0
c0015994:	68 a7 4a 01 c0       	push   0xc0014aa7
c0015999:	6a 02                	push   0x2
c001599b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001599e:	ff d0                	call   eax
c00159a0:	83 c4 10             	add    esp,0x10
c00159a3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00159a8:	83 c0 24             	add    eax,0x24
c00159ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00159ad:	6a 00                	push   0x0
c00159af:	68 7d 51 01 c0       	push   0xc001517d
c00159b4:	6a 03                	push   0x3
c00159b6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159b9:	ff d0                	call   eax
c00159bb:	83 c4 10             	add    esp,0x10
c00159be:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00159c3:	83 c0 24             	add    eax,0x24
c00159c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00159c8:	6a 00                	push   0x0
c00159ca:	68 7d 51 01 c0       	push   0xc001517d
c00159cf:	6a 04                	push   0x4
c00159d1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159d4:	ff d0                	call   eax
c00159d6:	83 c4 10             	add    esp,0x10
c00159d9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00159de:	83 c0 24             	add    eax,0x24
c00159e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00159e3:	6a 00                	push   0x0
c00159e5:	68 7d 51 01 c0       	push   0xc001517d
c00159ea:	6a 05                	push   0x5
c00159ec:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159ef:	ff d0                	call   eax
c00159f1:	83 c4 10             	add    esp,0x10
c00159f4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00159f9:	83 c0 24             	add    eax,0x24
c00159fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00159fe:	6a 00                	push   0x0
c0015a00:	68 9c 51 01 c0       	push   0xc001519c
c0015a05:	6a 06                	push   0x6
c0015a07:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a0a:	ff d0                	call   eax
c0015a0c:	83 c4 10             	add    esp,0x10
c0015a0f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a12:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a14:	83 c0 24             	add    eax,0x24
c0015a17:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a19:	6a 00                	push   0x0
c0015a1b:	68 d9 50 01 c0       	push   0xc00150d9
c0015a20:	6a 07                	push   0x7
c0015a22:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a25:	ff d0                	call   eax
c0015a27:	83 c4 10             	add    esp,0x10
c0015a2a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a2f:	83 c0 24             	add    eax,0x24
c0015a32:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a34:	6a 00                	push   0x0
c0015a36:	68 c2 48 01 c0       	push   0xc00148c2
c0015a3b:	6a 08                	push   0x8
c0015a3d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a40:	ff d0                	call   eax
c0015a42:	83 c4 10             	add    esp,0x10
c0015a45:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a48:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a4a:	83 c0 24             	add    eax,0x24
c0015a4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a4f:	6a 00                	push   0x0
c0015a51:	68 7d 51 01 c0       	push   0xc001517d
c0015a56:	6a 09                	push   0x9
c0015a58:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a5b:	ff d0                	call   eax
c0015a5d:	83 c4 10             	add    esp,0x10
c0015a60:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a63:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a65:	83 c0 24             	add    eax,0x24
c0015a68:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a6a:	6a 00                	push   0x0
c0015a6c:	68 7d 51 01 c0       	push   0xc001517d
c0015a71:	6a 0a                	push   0xa
c0015a73:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a76:	ff d0                	call   eax
c0015a78:	83 c4 10             	add    esp,0x10
c0015a7b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a80:	83 c0 24             	add    eax,0x24
c0015a83:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a85:	6a 00                	push   0x0
c0015a87:	68 7d 51 01 c0       	push   0xc001517d
c0015a8c:	6a 0b                	push   0xb
c0015a8e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a91:	ff d0                	call   eax
c0015a93:	83 c4 10             	add    esp,0x10
c0015a96:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a99:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a9b:	83 c0 24             	add    eax,0x24
c0015a9e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aa0:	6a 00                	push   0x0
c0015aa2:	68 7d 51 01 c0       	push   0xc001517d
c0015aa7:	6a 0c                	push   0xc
c0015aa9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015aac:	ff d0                	call   eax
c0015aae:	83 c4 10             	add    esp,0x10
c0015ab1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ab4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ab6:	83 c0 24             	add    eax,0x24
c0015ab9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015abb:	6a 00                	push   0x0
c0015abd:	68 08 51 01 c0       	push   0xc0015108
c0015ac2:	6a 0d                	push   0xd
c0015ac4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ac7:	ff d0                	call   eax
c0015ac9:	83 c4 10             	add    esp,0x10
c0015acc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015acf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ad1:	83 c0 24             	add    eax,0x24
c0015ad4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ad6:	6a 00                	push   0x0
c0015ad8:	68 41 51 01 c0       	push   0xc0015141
c0015add:	6a 0e                	push   0xe
c0015adf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ae2:	ff d0                	call   eax
c0015ae4:	83 c4 10             	add    esp,0x10
c0015ae7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aea:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aec:	83 c0 24             	add    eax,0x24
c0015aef:	8b 00                	mov    eax,DWORD PTR [eax]
c0015af1:	6a 00                	push   0x0
c0015af3:	68 7d 51 01 c0       	push   0xc001517d
c0015af8:	6a 0f                	push   0xf
c0015afa:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015afd:	ff d0                	call   eax
c0015aff:	83 c4 10             	add    esp,0x10
c0015b02:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b05:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b07:	83 c0 24             	add    eax,0x24
c0015b0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b0c:	6a 00                	push   0x0
c0015b0e:	68 7d 51 01 c0       	push   0xc001517d
c0015b13:	6a 10                	push   0x10
c0015b15:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b18:	ff d0                	call   eax
c0015b1a:	83 c4 10             	add    esp,0x10
c0015b1d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b20:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b22:	83 c0 24             	add    eax,0x24
c0015b25:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b27:	6a 00                	push   0x0
c0015b29:	68 7d 51 01 c0       	push   0xc001517d
c0015b2e:	6a 11                	push   0x11
c0015b30:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b33:	ff d0                	call   eax
c0015b35:	83 c4 10             	add    esp,0x10
c0015b38:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b3d:	83 c0 24             	add    eax,0x24
c0015b40:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b42:	6a 00                	push   0x0
c0015b44:	68 7d 51 01 c0       	push   0xc001517d
c0015b49:	6a 12                	push   0x12
c0015b4b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b4e:	ff d0                	call   eax
c0015b50:	83 c4 10             	add    esp,0x10
c0015b53:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b56:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b58:	83 c0 24             	add    eax,0x24
c0015b5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b5d:	6a 00                	push   0x0
c0015b5f:	68 7d 51 01 c0       	push   0xc001517d
c0015b64:	6a 13                	push   0x13
c0015b66:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b69:	ff d0                	call   eax
c0015b6b:	83 c4 10             	add    esp,0x10
c0015b6e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b71:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b73:	83 c0 24             	add    eax,0x24
c0015b76:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b78:	6a 00                	push   0x0
c0015b7a:	68 7d 51 01 c0       	push   0xc001517d
c0015b7f:	6a 14                	push   0x14
c0015b81:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b84:	ff d0                	call   eax
c0015b86:	83 c4 10             	add    esp,0x10
c0015b89:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b8e:	83 c0 24             	add    eax,0x24
c0015b91:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b93:	6a 00                	push   0x0
c0015b95:	68 7d 51 01 c0       	push   0xc001517d
c0015b9a:	6a 1e                	push   0x1e
c0015b9c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b9f:	ff d0                	call   eax
c0015ba1:	83 c4 10             	add    esp,0x10
c0015ba4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ba7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ba9:	83 c0 24             	add    eax,0x24
c0015bac:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bae:	6a 00                	push   0x0
c0015bb0:	68 39 c6 01 c0       	push   0xc001c639
c0015bb5:	6a 60                	push   0x60
c0015bb7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bba:	ff d0                	call   eax
c0015bbc:	83 c4 10             	add    esp,0x10
c0015bbf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bc2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015bc5:	c9                   	leave  
c0015bc6:	c3                   	ret    
c0015bc7:	90                   	nop

c0015bc8 <InterruptController::convertLegacyIRQNumber(int)>:
c0015bc8:	55                   	push   ebp
c0015bc9:	89 e5                	mov    ebp,esp
c0015bcb:	83 ec 08             	sub    esp,0x8
c0015bce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bd1:	83 ec 0c             	sub    esp,0xc
c0015bd4:	50                   	push   eax
c0015bd5:	e8 0c e9 ff ff       	call   c00144e6 <Device::getName()>
c0015bda:	83 c4 10             	add    esp,0x10
c0015bdd:	8a 00                	mov    al,BYTE PTR [eax]
c0015bdf:	3c 41                	cmp    al,0x41
c0015be1:	0f 94 c0             	sete   al
c0015be4:	84 c0                	test   al,al
c0015be6:	74 28                	je     c0015c10 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015be8:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015bec:	7f 12                	jg     c0015c00 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015bee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015bf1:	05 00 d5 02 c0       	add    eax,0xc002d500
c0015bf6:	8a 00                	mov    al,BYTE PTR [eax]
c0015bf8:	0f b6 c0             	movzx  eax,al
c0015bfb:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015bfe:	eb 10                	jmp    c0015c10 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015c00:	83 ec 0c             	sub    esp,0xc
c0015c03:	68 60 ac 02 c0       	push   0xc002ac60
c0015c08:	e8 a2 48 00 00       	call   c001a4af <Krnl::panic(char const*)>
c0015c0d:	83 c4 10             	add    esp,0x10
c0015c10:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015c13:	c9                   	leave  
c0015c14:	c3                   	ret    
c0015c15:	90                   	nop

c0015c16 <startGUI(void*)>:
c0015c16:	55                   	push   ebp
c0015c17:	89 e5                	mov    ebp,esp
c0015c19:	53                   	push   ebx
c0015c1a:	83 ec 04             	sub    esp,0x4
c0015c1d:	e8 89 80 00 00       	call   c001dcab <unlockScheduler()>
c0015c22:	8b 1d a8 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e2a8
c0015c28:	83 ec 08             	sub    esp,0x8
c0015c2b:	6a 01                	push   0x1
c0015c2d:	68 d0 af 02 c0       	push   0xc002afd0
c0015c32:	e8 ab 79 00 00       	call   c001d5e2 <Thr::loadDLL(char const*, bool)>
c0015c37:	83 c4 10             	add    esp,0x10
c0015c3a:	83 ec 08             	sub    esp,0x8
c0015c3d:	53                   	push   ebx
c0015c3e:	50                   	push   eax
c0015c3f:	e8 ed 7b 00 00       	call   c001d831 <Thr::executeDLL(unsigned long, void*)>
c0015c44:	83 c4 10             	add    esp,0x10
c0015c47:	8b 1d a8 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e2a8
c0015c4d:	83 ec 08             	sub    esp,0x8
c0015c50:	6a 01                	push   0x1
c0015c52:	68 ea af 02 c0       	push   0xc002afea
c0015c57:	e8 86 79 00 00       	call   c001d5e2 <Thr::loadDLL(char const*, bool)>
c0015c5c:	83 c4 10             	add    esp,0x10
c0015c5f:	83 ec 08             	sub    esp,0x8
c0015c62:	53                   	push   ebx
c0015c63:	50                   	push   eax
c0015c64:	e8 c8 7b 00 00       	call   c001d831 <Thr::executeDLL(unsigned long, void*)>
c0015c69:	83 c4 10             	add    esp,0x10
c0015c6c:	90                   	nop
c0015c6d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015c70:	c9                   	leave  
c0015c71:	c3                   	ret    

c0015c72 <startGUIVESA(void*)>:
c0015c72:	55                   	push   ebp
c0015c73:	89 e5                	mov    ebp,esp
c0015c75:	53                   	push   ebx
c0015c76:	83 ec 04             	sub    esp,0x4
c0015c79:	e8 2d 80 00 00       	call   c001dcab <unlockScheduler()>
c0015c7e:	8b 1d a8 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e2a8
c0015c84:	83 ec 08             	sub    esp,0x8
c0015c87:	6a 01                	push   0x1
c0015c89:	68 04 b0 02 c0       	push   0xc002b004
c0015c8e:	e8 4f 79 00 00       	call   c001d5e2 <Thr::loadDLL(char const*, bool)>
c0015c93:	83 c4 10             	add    esp,0x10
c0015c96:	83 ec 08             	sub    esp,0x8
c0015c99:	53                   	push   ebx
c0015c9a:	50                   	push   eax
c0015c9b:	e8 91 7b 00 00       	call   c001d831 <Thr::executeDLL(unsigned long, void*)>
c0015ca0:	83 c4 10             	add    esp,0x10
c0015ca3:	8b 1d a8 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e2a8
c0015ca9:	83 ec 08             	sub    esp,0x8
c0015cac:	6a 01                	push   0x1
c0015cae:	68 ea af 02 c0       	push   0xc002afea
c0015cb3:	e8 2a 79 00 00       	call   c001d5e2 <Thr::loadDLL(char const*, bool)>
c0015cb8:	83 c4 10             	add    esp,0x10
c0015cbb:	83 ec 08             	sub    esp,0x8
c0015cbe:	53                   	push   ebx
c0015cbf:	50                   	push   eax
c0015cc0:	e8 6c 7b 00 00       	call   c001d831 <Thr::executeDLL(unsigned long, void*)>
c0015cc5:	83 c4 10             	add    esp,0x10
c0015cc8:	90                   	nop
c0015cc9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015ccc:	c9                   	leave  
c0015ccd:	c3                   	ret    

c0015cce <sendKeyToTerminal(unsigned char)>:
c0015cce:	55                   	push   ebp
c0015ccf:	89 e5                	mov    ebp,esp
c0015cd1:	83 ec 28             	sub    esp,0x28
c0015cd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cd7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015cda:	a1 84 e3 02 c0       	mov    eax,ds:0xc002e384
c0015cdf:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015ce3:	83 ec 08             	sub    esp,0x8
c0015ce6:	52                   	push   edx
c0015ce7:	50                   	push   eax
c0015ce8:	e8 59 b6 ff ff       	call   c0011346 <VgaText::receiveKey(unsigned char)>
c0015ced:	83 c4 10             	add    esp,0x10
c0015cf0:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015cf4:	75 41                	jne    c0015d37 <sendKeyToTerminal(unsigned char)+0x69>
c0015cf6:	e8 d5 7f 00 00       	call   c001dcd0 <lockStuff()>
c0015cfb:	a1 60 e4 02 c0       	mov    eax,ds:0xc002e460
c0015d00:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015d03:	c7 05 60 e4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e460,0x0
c0015d0d:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015d11:	74 1f                	je     c0015d32 <sendKeyToTerminal(unsigned char)+0x64>
c0015d13:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d16:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015d19:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015d1c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015d1f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015d22:	83 ec 0c             	sub    esp,0xc
c0015d25:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015d28:	e8 93 85 00 00       	call   c001e2c0 <unblockTask(ThreadControlBlock*)>
c0015d2d:	83 c4 10             	add    esp,0x10
c0015d30:	eb db                	jmp    c0015d0d <sendKeyToTerminal(unsigned char)+0x3f>
c0015d32:	e8 32 83 00 00       	call   c001e069 <unlockStuff()>
c0015d37:	90                   	nop
c0015d38:	c9                   	leave  
c0015d39:	c3                   	ret    

c0015d3a <sendKeyboardToken(KeyboardToken)>:
c0015d3a:	55                   	push   ebp
c0015d3b:	89 e5                	mov    ebp,esp
c0015d3d:	83 ec 18             	sub    esp,0x18
c0015d40:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015d43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d46:	0f b7 c0             	movzx  eax,ax
c0015d49:	83 f2 01             	xor    edx,0x1
c0015d4c:	88 90 80 e4 02 c0    	mov    BYTE PTR [eax-0x3ffd1b80],dl
c0015d52:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0015d57:	85 c0                	test   eax,eax
c0015d59:	74 24                	je     c0015d7f <sendKeyboardToken(KeyboardToken)+0x45>
c0015d5b:	8b 0d 68 e4 02 c0    	mov    ecx,DWORD PTR ds:0xc002e468
c0015d61:	83 ec 04             	sub    esp,0x4
c0015d64:	68 80 e4 02 c0       	push   0xc002e480
c0015d69:	83 ec 08             	sub    esp,0x8
c0015d6c:	89 e2                	mov    edx,esp
c0015d6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d71:	89 02                	mov    DWORD PTR [edx],eax
c0015d73:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d76:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015d7a:	ff d1                	call   ecx
c0015d7c:	83 c4 10             	add    esp,0x10
c0015d7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d82:	66 3d 03 02          	cmp    ax,0x203
c0015d86:	75 07                	jne    c0015d8f <sendKeyboardToken(KeyboardToken)+0x55>
c0015d88:	a0 80 e5 02 c0       	mov    al,ds:0xc002e580
c0015d8d:	84 c0                	test   al,al
c0015d8f:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015d93:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015d96:	a0 88 e8 02 c0       	mov    al,ds:0xc002e888
c0015d9b:	38 c2                	cmp    dl,al
c0015d9d:	74 1c                	je     c0015dbb <sendKeyboardToken(KeyboardToken)+0x81>
c0015d9f:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015da2:	a2 88 e8 02 c0       	mov    ds:0xc002e888,al
c0015da7:	a0 88 e8 02 c0       	mov    al,ds:0xc002e888
c0015dac:	0f b6 c0             	movzx  eax,al
c0015daf:	83 ec 0c             	sub    esp,0xc
c0015db2:	50                   	push   eax
c0015db3:	e8 ee a7 ff ff       	call   c00105a6 <setTerminalScrollLock(bool)>
c0015db8:	83 c4 10             	add    esp,0x10
c0015dbb:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015dbe:	84 c0                	test   al,al
c0015dc0:	0f 84 ae 00 00 00    	je     c0015e74 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015dc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dc9:	66 3d 10 03          	cmp    ax,0x310
c0015dcd:	75 06                	jne    c0015dd5 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015dcf:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015dd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dd8:	66 3d 11 03          	cmp    ax,0x311
c0015ddc:	75 06                	jne    c0015de4 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015dde:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015de4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015de7:	66 3d 12 03          	cmp    ax,0x312
c0015deb:	75 06                	jne    c0015df3 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015ded:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015df3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015df6:	66 3d 13 03          	cmp    ax,0x313
c0015dfa:	75 06                	jne    c0015e02 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015dfc:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015e02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e05:	66 3d 14 03          	cmp    ax,0x314
c0015e09:	75 06                	jne    c0015e11 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015e0b:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015e11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e14:	66 3d 15 03          	cmp    ax,0x315
c0015e18:	75 06                	jne    c0015e20 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015e1a:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015e20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e23:	66 3d 16 03          	cmp    ax,0x316
c0015e27:	75 06                	jne    c0015e2f <sendKeyboardToken(KeyboardToken)+0xf5>
c0015e29:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015e2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e32:	66 3d 17 03          	cmp    ax,0x317
c0015e36:	75 06                	jne    c0015e3e <sendKeyboardToken(KeyboardToken)+0x104>
c0015e38:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015e3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e41:	66 3d 18 03          	cmp    ax,0x318
c0015e45:	75 06                	jne    c0015e4d <sendKeyboardToken(KeyboardToken)+0x113>
c0015e47:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015e4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e50:	66 3d 19 03          	cmp    ax,0x319
c0015e54:	75 06                	jne    c0015e5c <sendKeyboardToken(KeyboardToken)+0x122>
c0015e56:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015e5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e5f:	66 3d 1a 03          	cmp    ax,0x31a
c0015e63:	0f 85 c9 00 00 00    	jne    c0015f32 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015e69:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015e6f:	e9 be 00 00 00       	jmp    c0015f32 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015e74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e77:	66 3d 10 03          	cmp    ax,0x310
c0015e7b:	75 0a                	jne    c0015e87 <sendKeyboardToken(KeyboardToken)+0x14d>
c0015e7d:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015e83:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015e87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e8a:	66 3d 11 03          	cmp    ax,0x311
c0015e8e:	75 0a                	jne    c0015e9a <sendKeyboardToken(KeyboardToken)+0x160>
c0015e90:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015e96:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015e9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e9d:	66 3d 12 03          	cmp    ax,0x312
c0015ea1:	75 0a                	jne    c0015ead <sendKeyboardToken(KeyboardToken)+0x173>
c0015ea3:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015ea9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ead:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eb0:	66 3d 13 03          	cmp    ax,0x313
c0015eb4:	75 0a                	jne    c0015ec0 <sendKeyboardToken(KeyboardToken)+0x186>
c0015eb6:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015ebc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ec0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ec3:	66 3d 14 03          	cmp    ax,0x314
c0015ec7:	75 0a                	jne    c0015ed3 <sendKeyboardToken(KeyboardToken)+0x199>
c0015ec9:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015ecf:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ed3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ed6:	66 3d 15 03          	cmp    ax,0x315
c0015eda:	75 0a                	jne    c0015ee6 <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015edc:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015ee2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ee6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ee9:	66 3d 16 03          	cmp    ax,0x316
c0015eed:	75 0a                	jne    c0015ef9 <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015eef:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015ef5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ef9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015efc:	66 3d 17 03          	cmp    ax,0x317
c0015f00:	75 0a                	jne    c0015f0c <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015f02:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015f08:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f0f:	66 3d 18 03          	cmp    ax,0x318
c0015f13:	75 0a                	jne    c0015f1f <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015f15:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015f1b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f22:	66 3d 19 03          	cmp    ax,0x319
c0015f26:	75 0a                	jne    c0015f32 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015f28:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015f2e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f35:	66 3d 00 02          	cmp    ax,0x200
c0015f39:	75 2c                	jne    c0015f67 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015f3b:	a0 80 e8 02 c0       	mov    al,ds:0xc002e880
c0015f40:	83 f0 01             	xor    eax,0x1
c0015f43:	84 c0                	test   al,al
c0015f45:	74 20                	je     c0015f67 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015f47:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c0015f4c:	6a 01                	push   0x1
c0015f4e:	6a 00                	push   0x0
c0015f50:	68 16 5c 01 c0       	push   0xc0015c16
c0015f55:	50                   	push   eax
c0015f56:	e8 7f 7e 00 00       	call   c001ddda <Process::createThread(void (*)(void*), void*, int)>
c0015f5b:	83 c4 10             	add    esp,0x10
c0015f5e:	c6 05 80 e8 02 c0 01 	mov    BYTE PTR ds:0xc002e880,0x1
c0015f65:	eb 33                	jmp    c0015f9a <sendKeyboardToken(KeyboardToken)+0x260>
c0015f67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f6a:	66 3d 01 02          	cmp    ax,0x201
c0015f6e:	75 2a                	jne    c0015f9a <sendKeyboardToken(KeyboardToken)+0x260>
c0015f70:	a0 80 e8 02 c0       	mov    al,ds:0xc002e880
c0015f75:	83 f0 01             	xor    eax,0x1
c0015f78:	84 c0                	test   al,al
c0015f7a:	74 1e                	je     c0015f9a <sendKeyboardToken(KeyboardToken)+0x260>
c0015f7c:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c0015f81:	6a 01                	push   0x1
c0015f83:	6a 00                	push   0x0
c0015f85:	68 72 5c 01 c0       	push   0xc0015c72
c0015f8a:	50                   	push   eax
c0015f8b:	e8 4a 7e 00 00       	call   c001ddda <Process::createThread(void (*)(void*), void*, int)>
c0015f90:	83 c4 10             	add    esp,0x10
c0015f93:	c6 05 80 e8 02 c0 01 	mov    BYTE PTR ds:0xc002e880,0x1
c0015f9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f9d:	66 3d 1d 03          	cmp    ax,0x31d
c0015fa1:	75 06                	jne    c0015fa9 <sendKeyboardToken(KeyboardToken)+0x26f>
c0015fa3:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015fa9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fac:	66 3d 1c 03          	cmp    ax,0x31c
c0015fb0:	75 06                	jne    c0015fb8 <sendKeyboardToken(KeyboardToken)+0x27e>
c0015fb2:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015fb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fbb:	66 3d 1b 03          	cmp    ax,0x31b
c0015fbf:	75 06                	jne    c0015fc7 <sendKeyboardToken(KeyboardToken)+0x28d>
c0015fc1:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015fc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fca:	66 3d 1e 03          	cmp    ax,0x31e
c0015fce:	75 06                	jne    c0015fd6 <sendKeyboardToken(KeyboardToken)+0x29c>
c0015fd0:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015fd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fd9:	66 3d 1f 03          	cmp    ax,0x31f
c0015fdd:	75 06                	jne    c0015fe5 <sendKeyboardToken(KeyboardToken)+0x2ab>
c0015fdf:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015fe5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fe8:	66 3d 1a 03          	cmp    ax,0x31a
c0015fec:	75 06                	jne    c0015ff4 <sendKeyboardToken(KeyboardToken)+0x2ba>
c0015fee:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015ff4:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015ff8:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015ffb:	83 f0 01             	xor    eax,0x1
c0015ffe:	84 c0                	test   al,al
c0016000:	74 77                	je     c0016079 <sendKeyboardToken(KeyboardToken)+0x33f>
c0016002:	a0 81 e5 02 c0       	mov    al,ds:0xc002e581
c0016007:	84 c0                	test   al,al
c0016009:	74 41                	je     c001604c <sendKeyboardToken(KeyboardToken)+0x312>
c001600b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001600f:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0016013:	74 2b                	je     c0016040 <sendKeyboardToken(KeyboardToken)+0x306>
c0016015:	8b 15 84 e8 02 c0    	mov    edx,DWORD PTR ds:0xc002e884
c001601b:	89 d0                	mov    eax,edx
c001601d:	c1 e0 02             	shl    eax,0x2
c0016020:	01 d0                	add    eax,edx
c0016022:	01 c0                	add    eax,eax
c0016024:	a3 84 e8 02 c0       	mov    ds:0xc002e884,eax
c0016029:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001602c:	0f b7 c0             	movzx  eax,ax
c001602f:	8d 50 d0             	lea    edx,[eax-0x30]
c0016032:	a1 84 e8 02 c0       	mov    eax,ds:0xc002e884
c0016037:	01 d0                	add    eax,edx
c0016039:	a3 84 e8 02 c0       	mov    ds:0xc002e884,eax
c001603e:	eb 6d                	jmp    c00160ad <sendKeyboardToken(KeyboardToken)+0x373>
c0016040:	c7 05 84 e8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e884,0x0
c001604a:	eb 61                	jmp    c00160ad <sendKeyboardToken(KeyboardToken)+0x373>
c001604c:	a1 84 e8 02 c0       	mov    eax,ds:0xc002e884
c0016051:	85 c0                	test   eax,eax
c0016053:	74 18                	je     c001606d <sendKeyboardToken(KeyboardToken)+0x333>
c0016055:	a1 84 e8 02 c0       	mov    eax,ds:0xc002e884
c001605a:	0f b6 c0             	movzx  eax,al
c001605d:	83 ec 0c             	sub    esp,0xc
c0016060:	50                   	push   eax
c0016061:	e8 68 fc ff ff       	call   c0015cce <sendKeyToTerminal(unsigned char)>
c0016066:	83 c4 10             	add    esp,0x10
c0016069:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001606d:	c7 05 84 e8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e884,0x0
c0016077:	eb 34                	jmp    c00160ad <sendKeyboardToken(KeyboardToken)+0x373>
c0016079:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001607c:	66 3d 01 01          	cmp    ax,0x101
c0016080:	75 2b                	jne    c00160ad <sendKeyboardToken(KeyboardToken)+0x373>
c0016082:	a1 84 e8 02 c0       	mov    eax,ds:0xc002e884
c0016087:	85 c0                	test   eax,eax
c0016089:	74 18                	je     c00160a3 <sendKeyboardToken(KeyboardToken)+0x369>
c001608b:	a1 84 e8 02 c0       	mov    eax,ds:0xc002e884
c0016090:	0f b6 c0             	movzx  eax,al
c0016093:	83 ec 0c             	sub    esp,0xc
c0016096:	50                   	push   eax
c0016097:	e8 32 fc ff ff       	call   c0015cce <sendKeyToTerminal(unsigned char)>
c001609c:	83 c4 10             	add    esp,0x10
c001609f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00160a3:	c7 05 84 e8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e884,0x0
c00160ad:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00160b0:	83 f0 01             	xor    eax,0x1
c00160b3:	84 c0                	test   al,al
c00160b5:	74 4c                	je     c0016103 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00160b7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00160ba:	83 f0 01             	xor    eax,0x1
c00160bd:	84 c0                	test   al,al
c00160bf:	74 42                	je     c0016103 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00160c1:	a0 80 e5 02 c0       	mov    al,ds:0xc002e580
c00160c6:	83 f0 01             	xor    eax,0x1
c00160c9:	84 c0                	test   al,al
c00160cb:	74 36                	je     c0016103 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00160cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160d0:	66 83 f8 1f          	cmp    ax,0x1f
c00160d4:	76 09                	jbe    c00160df <sendKeyboardToken(KeyboardToken)+0x3a5>
c00160d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160d9:	66 83 f8 7e          	cmp    ax,0x7e
c00160dd:	76 12                	jbe    c00160f1 <sendKeyboardToken(KeyboardToken)+0x3b7>
c00160df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160e2:	66 83 f8 0a          	cmp    ax,0xa
c00160e6:	74 09                	je     c00160f1 <sendKeyboardToken(KeyboardToken)+0x3b7>
c00160e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160eb:	66 83 f8 08          	cmp    ax,0x8
c00160ef:	75 12                	jne    c0016103 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00160f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160f4:	0f b6 c0             	movzx  eax,al
c00160f7:	83 ec 0c             	sub    esp,0xc
c00160fa:	50                   	push   eax
c00160fb:	e8 ce fb ff ff       	call   c0015cce <sendKeyToTerminal(unsigned char)>
c0016100:	83 c4 10             	add    esp,0x10
c0016103:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0016106:	83 f0 01             	xor    eax,0x1
c0016109:	84 c0                	test   al,al
c001610b:	74 4f                	je     c001615c <sendKeyboardToken(KeyboardToken)+0x422>
c001610d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016110:	83 f0 01             	xor    eax,0x1
c0016113:	84 c0                	test   al,al
c0016115:	74 45                	je     c001615c <sendKeyboardToken(KeyboardToken)+0x422>
c0016117:	a0 80 e5 02 c0       	mov    al,ds:0xc002e580
c001611c:	84 c0                	test   al,al
c001611e:	74 3c                	je     c001615c <sendKeyboardToken(KeyboardToken)+0x422>
c0016120:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016123:	66 83 f8 3f          	cmp    ax,0x3f
c0016127:	76 33                	jbe    c001615c <sendKeyboardToken(KeyboardToken)+0x422>
c0016129:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001612c:	66 83 f8 7f          	cmp    ax,0x7f
c0016130:	77 2a                	ja     c001615c <sendKeyboardToken(KeyboardToken)+0x422>
c0016132:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016135:	88 c2                	mov    dl,al
c0016137:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001613a:	66 83 f8 5f          	cmp    ax,0x5f
c001613e:	76 04                	jbe    c0016144 <sendKeyboardToken(KeyboardToken)+0x40a>
c0016140:	b0 20                	mov    al,0x20
c0016142:	eb 02                	jmp    c0016146 <sendKeyboardToken(KeyboardToken)+0x40c>
c0016144:	b0 00                	mov    al,0x0
c0016146:	29 c2                	sub    edx,eax
c0016148:	88 d0                	mov    al,dl
c001614a:	83 e8 40             	sub    eax,0x40
c001614d:	0f b6 c0             	movzx  eax,al
c0016150:	83 ec 0c             	sub    esp,0xc
c0016153:	50                   	push   eax
c0016154:	e8 75 fb ff ff       	call   c0015cce <sendKeyToTerminal(unsigned char)>
c0016159:	83 c4 10             	add    esp,0x10
c001615c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001615f:	66 3d 00 03          	cmp    ax,0x300
c0016163:	75 0f                	jne    c0016174 <sendKeyboardToken(KeyboardToken)+0x43a>
c0016165:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016168:	83 f0 01             	xor    eax,0x1
c001616b:	84 c0                	test   al,al
c001616d:	74 05                	je     c0016174 <sendKeyboardToken(KeyboardToken)+0x43a>
c001616f:	e8 67 ac ff ff       	call   c0010ddb <doTerminalCycle()>
c0016174:	90                   	nop
c0016175:	c9                   	leave  
c0016176:	c3                   	ret    

c0016177 <clearInternalKeybuffer(VgaText*)>:
c0016177:	55                   	push   ebp
c0016178:	89 e5                	mov    ebp,esp
c001617a:	83 ec 08             	sub    esp,0x8
c001617d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016180:	05 34 11 00 00       	add    eax,0x1134
c0016185:	83 ec 0c             	sub    esp,0xc
c0016188:	50                   	push   eax
c0016189:	e8 06 a6 fe ff       	call   c0000794 <strlen>
c001618e:	83 c4 10             	add    esp,0x10
c0016191:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016194:	81 c2 34 11 00 00    	add    edx,0x1134
c001619a:	83 ec 04             	sub    esp,0x4
c001619d:	50                   	push   eax
c001619e:	6a 00                	push   0x0
c00161a0:	52                   	push   edx
c00161a1:	e8 d2 a5 fe ff       	call   c0000778 <memset>
c00161a6:	83 c4 10             	add    esp,0x10
c00161a9:	90                   	nop
c00161aa:	c9                   	leave  
c00161ab:	c3                   	ret    

c00161ac <readKeyboard(VgaText*, char*, unsigned long)>:
c00161ac:	55                   	push   ebp
c00161ad:	89 e5                	mov    ebp,esp
c00161af:	83 ec 18             	sub    esp,0x18
c00161b2:	fb                   	sti    
c00161b3:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00161ba:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00161be:	0f 84 8a 00 00 00    	je     c001624e <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c00161c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161c7:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00161cd:	84 c0                	test   al,al
c00161cf:	75 11                	jne    c00161e2 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c00161d1:	e8 d3 7a 00 00       	call   c001dca9 <lockScheduler()>
c00161d6:	e8 09 7e 00 00       	call   c001dfe4 <schedule()>
c00161db:	e8 cb 7a 00 00       	call   c001dcab <unlockScheduler()>
c00161e0:	eb e2                	jmp    c00161c4 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c00161e2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00161e5:	8d 50 01             	lea    edx,[eax+0x1]
c00161e8:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00161eb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00161ee:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c00161f4:	88 10                	mov    BYTE PTR [eax],dl
c00161f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161f9:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00161ff:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0016202:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016205:	05 34 11 00 00       	add    eax,0x1134
c001620a:	83 ec 0c             	sub    esp,0xc
c001620d:	50                   	push   eax
c001620e:	e8 81 a5 fe ff       	call   c0000794 <strlen>
c0016213:	83 c4 10             	add    esp,0x10
c0016216:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016219:	81 c2 34 11 00 00    	add    edx,0x1134
c001621f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0016222:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016225:	81 c2 34 11 00 00    	add    edx,0x1134
c001622b:	83 ec 04             	sub    esp,0x4
c001622e:	50                   	push   eax
c001622f:	51                   	push   ecx
c0016230:	52                   	push   edx
c0016231:	e8 46 a4 fe ff       	call   c000067c <memmove>
c0016236:	83 c4 10             	add    esp,0x10
c0016239:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c001623c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001623f:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0016243:	0f 85 71 ff ff ff    	jne    c00161ba <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0016249:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001624c:	eb 03                	jmp    c0016251 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c001624e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016251:	c9                   	leave  
c0016252:	c3                   	ret    
c0016253:	90                   	nop

c0016254 <Keyboard::Keyboard(char const*)>:
c0016254:	83 ec 0c             	sub    esp,0xc
c0016257:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001625b:	83 ec 08             	sub    esp,0x8
c001625e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016262:	50                   	push   eax
c0016263:	e8 82 e1 ff ff       	call   c00143ea <Device::Device(char const*)>
c0016268:	83 c4 10             	add    esp,0x10
c001626b:	ba 28 b0 02 c0       	mov    edx,0xc002b028
c0016270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016274:	89 10                	mov    DWORD PTR [eax],edx
c0016276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001627a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0016284:	c6 05 64 e4 02 c0 01 	mov    BYTE PTR ds:0xc002e464,0x1
c001628b:	90                   	nop
c001628c:	83 c4 0c             	add    esp,0xc
c001628f:	c3                   	ret    

c0016290 <Keyboard::~Keyboard()>:
c0016290:	83 ec 0c             	sub    esp,0xc
c0016293:	ba 28 b0 02 c0       	mov    edx,0xc002b028
c0016298:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001629c:	89 10                	mov    DWORD PTR [eax],edx
c001629e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162a2:	83 ec 0c             	sub    esp,0xc
c00162a5:	50                   	push   eax
c00162a6:	e8 21 de ff ff       	call   c00140cc <Device::~Device()>
c00162ab:	83 c4 10             	add    esp,0x10
c00162ae:	90                   	nop
c00162af:	83 c4 0c             	add    esp,0xc
c00162b2:	c3                   	ret    
c00162b3:	90                   	nop

c00162b4 <Keyboard::~Keyboard()>:
c00162b4:	83 ec 0c             	sub    esp,0xc
c00162b7:	83 ec 0c             	sub    esp,0xc
c00162ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162be:	e8 cd ff ff ff       	call   c0016290 <Keyboard::~Keyboard()>
c00162c3:	83 c4 10             	add    esp,0x10
c00162c6:	83 ec 08             	sub    esp,0x8
c00162c9:	68 5c 01 00 00       	push   0x15c
c00162ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162d2:	e8 1d ca ff ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c00162d7:	83 c4 10             	add    esp,0x10
c00162da:	83 c4 0c             	add    esp,0xc
c00162dd:	c3                   	ret    

c00162de <LogicalDisk::close(int, int, void*)>:
c00162de:	83 c8 ff             	or     eax,0xffffffff
c00162e1:	c3                   	ret    

c00162e2 <LogicalDisk::~LogicalDisk()>:
c00162e2:	83 ec 0c             	sub    esp,0xc
c00162e5:	ba d8 b0 02 c0       	mov    edx,0xc002b0d8
c00162ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162ee:	89 10                	mov    DWORD PTR [eax],edx
c00162f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162f4:	83 ec 0c             	sub    esp,0xc
c00162f7:	50                   	push   eax
c00162f8:	e8 cf dd ff ff       	call   c00140cc <Device::~Device()>
c00162fd:	83 c4 10             	add    esp,0x10
c0016300:	90                   	nop
c0016301:	83 c4 0c             	add    esp,0xc
c0016304:	c3                   	ret    
c0016305:	90                   	nop

c0016306 <LogicalDisk::~LogicalDisk()>:
c0016306:	83 ec 0c             	sub    esp,0xc
c0016309:	83 ec 0c             	sub    esp,0xc
c001630c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016310:	e8 cd ff ff ff       	call   c00162e2 <LogicalDisk::~LogicalDisk()>
c0016315:	83 c4 10             	add    esp,0x10
c0016318:	83 ec 08             	sub    esp,0x8
c001631b:	68 74 01 00 00       	push   0x174
c0016320:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016324:	e8 cb c9 ff ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0016329:	83 c4 10             	add    esp,0x10
c001632c:	83 c4 0c             	add    esp,0xc
c001632f:	c3                   	ret    

c0016330 <LogicalDisk::open(int, int, void*)>:
c0016330:	83 ec 18             	sub    esp,0x18
c0016333:	68 54 b0 02 c0       	push   0xc002b054
c0016338:	e8 72 41 00 00       	call   c001a4af <Krnl::panic(char const*)>
c001633d:	83 c8 ff             	or     eax,0xffffffff
c0016340:	83 c4 1c             	add    esp,0x1c
c0016343:	c3                   	ret    

c0016344 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0016344:	53                   	push   ebx
c0016345:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016349:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001634d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016351:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0016357:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001635d:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0016363:	77 10                	ja     c0016375 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0016365:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c001636b:	89 d3                	mov    ebx,edx
c001636d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0016373:	72 05                	jb     c001637a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0016375:	83 c8 ff             	or     eax,0xffffffff
c0016378:	89 c2                	mov    edx,eax
c001637a:	5b                   	pop    ebx
c001637b:	c3                   	ret    

c001637c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001637c:	56                   	push   esi
c001637d:	83 c8 ff             	or     eax,0xffffffff
c0016380:	53                   	push   ebx
c0016381:	89 c2                	mov    edx,eax
c0016383:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016387:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001638b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001638f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016395:	77 27                	ja     c00163be <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016397:	89 d8                	mov    eax,ebx
c0016399:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001639f:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00163a5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00163aa:	89 c2                	mov    edx,eax
c00163ac:	73 10                	jae    c00163be <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00163ae:	89 c8                	mov    eax,ecx
c00163b0:	89 da                	mov    edx,ebx
c00163b2:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00163b8:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c00163be:	5b                   	pop    ebx
c00163bf:	5e                   	pop    esi
c00163c0:	c3                   	ret    
c00163c1:	90                   	nop

c00163c2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c00163c2:	83 ec 1c             	sub    esp,0x1c
c00163c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00163c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00163cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00163d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00163d5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00163d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00163dc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00163e0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00163e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163e8:	83 ec 08             	sub    esp,0x8
c00163eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00163ef:	50                   	push   eax
c00163f0:	e8 f5 df ff ff       	call   c00143ea <Device::Device(char const*)>
c00163f5:	83 c4 10             	add    esp,0x10
c00163f8:	ba d8 b0 02 c0       	mov    edx,0xc002b0d8
c00163fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016401:	89 10                	mov    DWORD PTR [eax],edx
c0016403:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016407:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001640e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016412:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016419:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001641d:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0016427:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001642b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001642f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016433:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0016439:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001643f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016443:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016446:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001644a:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0016450:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0016456:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001645a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001645e:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0016464:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016468:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016472:	90                   	nop
c0016473:	83 c4 1c             	add    esp,0x1c
c0016476:	c3                   	ret    
c0016477:	90                   	nop

c0016478 <LogicalDisk::assignDriveLetter()>:
c0016478:	55                   	push   ebp
c0016479:	57                   	push   edi
c001647a:	56                   	push   esi
c001647b:	53                   	push   ebx
c001647c:	83 ec 14             	sub    esp,0x14
c001647f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016483:	8b 3d a0 e8 02 c0    	mov    edi,DWORD PTR ds:0xc002e8a0
c0016489:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001648f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016493:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0016499:	8b 3d a4 e8 02 c0    	mov    edi,DWORD PTR ds:0xc002e8a4
c001649f:	3c 01                	cmp    al,0x1
c00164a1:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00164a5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00164a9:	19 c0                	sbb    eax,eax
c00164ab:	83 e0 02             	and    eax,0x2
c00164ae:	83 c0 41             	add    eax,0x41
c00164b1:	0f be e8             	movsx  ebp,al
c00164b4:	3c 43                	cmp    al,0x43
c00164b6:	75 10                	jne    c00164c8 <LogicalDisk::assignDriveLetter()+0x50>
c00164b8:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00164bf:	75 5d                	jne    c001651e <LogicalDisk::assignDriveLetter()+0xa6>
c00164c1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00164c6:	75 56                	jne    c001651e <LogicalDisk::assignDriveLetter()+0xa6>
c00164c8:	8d 75 bf             	lea    esi,[ebp-0x41]
c00164cb:	ba 01 00 00 00       	mov    edx,0x1
c00164d0:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00164d4:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00164d8:	d3 e2                	shl    edx,cl
c00164da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00164de:	89 d7                	mov    edi,edx
c00164e0:	89 d6                	mov    esi,edx
c00164e2:	c1 ff 1f             	sar    edi,0x1f
c00164e5:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c00164e9:	21 f9                	and    ecx,edi
c00164eb:	09 d1                	or     ecx,edx
c00164ed:	75 2f                	jne    c001651e <LogicalDisk::assignDriveLetter()+0xa6>
c00164ef:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00164f3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00164f7:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00164fd:	09 f2                	or     edx,esi
c00164ff:	89 15 a0 e8 02 c0    	mov    DWORD PTR ds:0xc002e8a0,edx
c0016505:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016509:	09 fa                	or     edx,edi
c001650b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001650f:	89 15 a4 e8 02 c0    	mov    DWORD PTR ds:0xc002e8a4,edx
c0016515:	89 1c bd c0 e8 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1740],ebx
c001651c:	eb 08                	jmp    c0016526 <LogicalDisk::assignDriveLetter()+0xae>
c001651e:	45                   	inc    ebp
c001651f:	40                   	inc    eax
c0016520:	3c 5b                	cmp    al,0x5b
c0016522:	75 90                	jne    c00164b4 <LogicalDisk::assignDriveLetter()+0x3c>
c0016524:	31 c0                	xor    eax,eax
c0016526:	83 c4 14             	add    esp,0x14
c0016529:	5b                   	pop    ebx
c001652a:	5e                   	pop    esi
c001652b:	5f                   	pop    edi
c001652c:	5d                   	pop    ebp
c001652d:	c3                   	ret    

c001652e <LogicalDisk::mount()>:
c001652e:	56                   	push   esi
c001652f:	53                   	push   ebx
c0016530:	51                   	push   ecx
c0016531:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016535:	8b 1d 30 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e430
c001653b:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0016545:	85 db                	test   ebx,ebx
c0016547:	74 50                	je     c0016599 <LogicalDisk::mount()+0x6b>
c0016549:	e8 46 77 00 00       	call   c001dc94 <getIRQNestingLevel()>
c001654e:	52                   	push   edx
c001654f:	52                   	push   edx
c0016550:	50                   	push   eax
c0016551:	68 78 b0 02 c0       	push   0xc002b078
c0016556:	e8 79 c8 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001655b:	83 c4 0c             	add    esp,0xc
c001655e:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0016565:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016567:	83 e8 41             	sub    eax,0x41
c001656a:	50                   	push   eax
c001656b:	56                   	push   esi
c001656c:	53                   	push   ebx
c001656d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016570:	83 c4 10             	add    esp,0x10
c0016573:	84 c0                	test   al,al
c0016575:	74 08                	je     c001657f <LogicalDisk::mount()+0x51>
c0016577:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c001657d:	eb 1c                	jmp    c001659b <LogicalDisk::mount()+0x6d>
c001657f:	e8 10 77 00 00       	call   c001dc94 <getIRQNestingLevel()>
c0016584:	51                   	push   ecx
c0016585:	51                   	push   ecx
c0016586:	50                   	push   eax
c0016587:	68 93 b0 02 c0       	push   0xc002b093
c001658c:	e8 43 c8 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0016591:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016594:	83 c4 10             	add    esp,0x10
c0016597:	eb ac                	jmp    c0016545 <LogicalDisk::mount()+0x17>
c0016599:	31 c0                	xor    eax,eax
c001659b:	5a                   	pop    edx
c001659c:	5b                   	pop    ebx
c001659d:	5e                   	pop    esi
c001659e:	c3                   	ret    
c001659f:	90                   	nop

c00165a0 <LogicalDisk::unmount()>:
c00165a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00165a4:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00165ae:	c3                   	ret    
c00165af:	90                   	nop

c00165b0 <LogicalDisk::eject()>:
c00165b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00165b4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00165ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00165bc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00165c0:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00165c3:	90                   	nop

c00165c4 <LogicalDisk::unassignDriveLetter()>:
c00165c4:	57                   	push   edi
c00165c5:	56                   	push   esi
c00165c6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00165ca:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c00165d1:	84 c9                	test   cl,cl
c00165d3:	75 0f                	jne    c00165e4 <LogicalDisk::unassignDriveLetter()+0x20>
c00165d5:	c7 44 24 0c ae b0 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b0ae
c00165dd:	5e                   	pop    esi
c00165de:	5f                   	pop    edi
c00165df:	e9 cb 3e 00 00       	jmp    c001a4af <Krnl::panic(char const*)>
c00165e4:	83 e9 41             	sub    ecx,0x41
c00165e7:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00165ee:	b8 01 00 00 00       	mov    eax,0x1
c00165f3:	c7 04 8d c0 e8 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1740],0x0
c00165fe:	d3 e0                	shl    eax,cl
c0016600:	89 c7                	mov    edi,eax
c0016602:	f7 d0                	not    eax
c0016604:	c1 ff 1f             	sar    edi,0x1f
c0016607:	21 05 a0 e8 02 c0    	and    DWORD PTR ds:0xc002e8a0,eax
c001660d:	89 fe                	mov    esi,edi
c001660f:	f7 d6                	not    esi
c0016611:	21 35 a4 e8 02 c0    	and    DWORD PTR ds:0xc002e8a4,esi
c0016617:	5e                   	pop    esi
c0016618:	5f                   	pop    edi
c0016619:	c3                   	ret    

c001661a <LogicalDisk::read(unsigned long long, int, void*)>:
c001661a:	57                   	push   edi
c001661b:	56                   	push   esi
c001661c:	53                   	push   ebx
c001661d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016621:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016625:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016629:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001662d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016633:	77 41                	ja     c0016676 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016635:	99                   	cdq    
c0016636:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001663c:	01 c8                	add    eax,ecx
c001663e:	11 da                	adc    edx,ebx
c0016640:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016646:	19 d7                	sbb    edi,edx
c0016648:	72 33                	jb     c001667d <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001664a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016650:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016656:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001665a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001665e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016664:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001666a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001666e:	5b                   	pop    ebx
c001666f:	5e                   	pop    esi
c0016670:	5f                   	pop    edi
c0016671:	e9 b0 0a 00 00       	jmp    c0017126 <VCache::read(unsigned long long, int, void*)>
c0016676:	b8 05 00 00 00       	mov    eax,0x5
c001667b:	eb 05                	jmp    c0016682 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001667d:	b8 07 00 00 00       	mov    eax,0x7
c0016682:	5b                   	pop    ebx
c0016683:	5e                   	pop    esi
c0016684:	5f                   	pop    edi
c0016685:	c3                   	ret    

c0016686 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016686:	57                   	push   edi
c0016687:	56                   	push   esi
c0016688:	53                   	push   ebx
c0016689:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001668d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016691:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016695:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016699:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001669f:	77 41                	ja     c00166e2 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00166a1:	99                   	cdq    
c00166a2:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00166a8:	01 c8                	add    eax,ecx
c00166aa:	11 da                	adc    edx,ebx
c00166ac:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00166b2:	19 d7                	sbb    edi,edx
c00166b4:	72 33                	jb     c00166e9 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00166b6:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00166bc:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00166c2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00166c6:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00166ca:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00166d0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00166d6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00166da:	5b                   	pop    ebx
c00166db:	5e                   	pop    esi
c00166dc:	5f                   	pop    edi
c00166dd:	e9 4e 09 00 00       	jmp    c0017030 <VCache::write(unsigned long long, int, void*)>
c00166e2:	b8 05 00 00 00       	mov    eax,0x5
c00166e7:	eb 05                	jmp    c00166ee <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00166e9:	b8 07 00 00 00       	mov    eax,0x7
c00166ee:	5b                   	pop    ebx
c00166ef:	5e                   	pop    esi
c00166f0:	5f                   	pop    edi
c00166f1:	c3                   	ret    

c00166f2 <Mouse::Mouse(char const*)>:
c00166f2:	83 ec 0c             	sub    esp,0xc
c00166f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166f9:	83 ec 08             	sub    esp,0x8
c00166fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016700:	50                   	push   eax
c0016701:	e8 e4 dc ff ff       	call   c00143ea <Device::Device(char const*)>
c0016706:	83 c4 10             	add    esp,0x10
c0016709:	ba 04 b1 02 c0       	mov    edx,0xc002b104
c001670e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016712:	89 10                	mov    DWORD PTR [eax],edx
c0016714:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016718:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016722:	90                   	nop
c0016723:	83 c4 0c             	add    esp,0xc
c0016726:	c3                   	ret    
c0016727:	90                   	nop

c0016728 <Mouse::~Mouse()>:
c0016728:	83 ec 0c             	sub    esp,0xc
c001672b:	ba 04 b1 02 c0       	mov    edx,0xc002b104
c0016730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016734:	89 10                	mov    DWORD PTR [eax],edx
c0016736:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001673a:	83 ec 0c             	sub    esp,0xc
c001673d:	50                   	push   eax
c001673e:	e8 89 d9 ff ff       	call   c00140cc <Device::~Device()>
c0016743:	83 c4 10             	add    esp,0x10
c0016746:	90                   	nop
c0016747:	83 c4 0c             	add    esp,0xc
c001674a:	c3                   	ret    
c001674b:	90                   	nop

c001674c <Mouse::~Mouse()>:
c001674c:	83 ec 0c             	sub    esp,0xc
c001674f:	83 ec 0c             	sub    esp,0xc
c0016752:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016756:	e8 cd ff ff ff       	call   c0016728 <Mouse::~Mouse()>
c001675b:	83 c4 10             	add    esp,0x10
c001675e:	83 ec 08             	sub    esp,0x8
c0016761:	68 58 01 00 00       	push   0x158
c0016766:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001676a:	e8 85 c5 ff ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c001676f:	83 c4 10             	add    esp,0x10
c0016772:	83 c4 0c             	add    esp,0xc
c0016775:	c3                   	ret    

c0016776 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016776:	55                   	push   ebp
c0016777:	57                   	push   edi
c0016778:	56                   	push   esi
c0016779:	53                   	push   ebx
c001677a:	81 ec 28 01 00 00    	sub    esp,0x128
c0016780:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016787:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001678e:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016795:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001679c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00167a0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00167a4:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00167ab:	e8 36 dd ff ff       	call   c00144e6 <Device::getName()>
c00167b0:	5a                   	pop    edx
c00167b1:	59                   	pop    ecx
c00167b2:	50                   	push   eax
c00167b3:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00167b7:	55                   	push   ebp
c00167b8:	e8 77 a0 fe ff       	call   c0000834 <strcpy>
c00167bd:	5b                   	pop    ebx
c00167be:	58                   	pop    eax
c00167bf:	68 28 b1 02 c0       	push   0xc002b128
c00167c4:	55                   	push   ebp
c00167c5:	e8 aa a1 fe ff       	call   c0000974 <strcat>
c00167ca:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00167d1:	e8 6a 90 ff ff       	call   c000f840 <malloc>
c00167d6:	83 c4 0c             	add    esp,0xc
c00167d9:	89 c3                	mov    ebx,eax
c00167db:	57                   	push   edi
c00167dc:	56                   	push   esi
c00167dd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00167e1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00167e5:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00167ec:	55                   	push   ebp
c00167ed:	50                   	push   eax
c00167ee:	e8 cf fb ff ff       	call   c00163c2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00167f3:	83 c4 14             	add    esp,0x14
c00167f6:	53                   	push   ebx
c00167f7:	e8 7c fc ff ff       	call   c0016478 <LogicalDisk::assignDriveLetter()>
c00167fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00167ff:	89 c6                	mov    esi,eax
c0016801:	e8 28 fd ff ff       	call   c001652e <LogicalDisk::mount()>
c0016806:	58                   	pop    eax
c0016807:	5a                   	pop    edx
c0016808:	53                   	push   ebx
c0016809:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016810:	e8 e5 d9 ff ff       	call   c00141fa <Device::addChild(Device*)>
c0016815:	59                   	pop    ecx
c0016816:	89 f0                	mov    eax,esi
c0016818:	5b                   	pop    ebx
c0016819:	0f be f0             	movsx  esi,al
c001681c:	56                   	push   esi
c001681d:	68 33 b1 02 c0       	push   0xc002b133
c0016822:	e8 ad c5 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0016827:	81 c4 2c 01 00 00    	add    esp,0x12c
c001682d:	5b                   	pop    ebx
c001682e:	5e                   	pop    esi
c001682f:	5f                   	pop    edi
c0016830:	5d                   	pop    ebp
c0016831:	c3                   	ret    

c0016832 <createPartitionsForDisk(PhysicalDisk*)>:
c0016832:	55                   	push   ebp
c0016833:	57                   	push   edi
c0016834:	56                   	push   esi
c0016835:	53                   	push   ebx
c0016836:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001683c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016843:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016849:	3d 00 02 00 00       	cmp    eax,0x200
c001684e:	74 27                	je     c0016877 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016850:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016856:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001685c:	83 ec 10             	sub    esp,0x10
c001685f:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016863:	99                   	cdq    
c0016864:	c1 e6 0a             	shl    esi,0xa
c0016867:	52                   	push   edx
c0016868:	89 fd                	mov    ebp,edi
c001686a:	50                   	push   eax
c001686b:	55                   	push   ebp
c001686c:	56                   	push   esi
c001686d:	e8 3a 00 01 00       	call   c00268ac <__udivdi3>
c0016872:	e9 b1 00 00 00       	jmp    c0016928 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016877:	83 ec 0c             	sub    esp,0xc
c001687a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001687c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016880:	56                   	push   esi
c0016881:	6a 01                	push   0x1
c0016883:	6a 00                	push   0x0
c0016885:	6a 00                	push   0x0
c0016887:	53                   	push   ebx
c0016888:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001688b:	83 c4 20             	add    esp,0x20
c001688e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016896:	75 0a                	jne    c00168a2 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016898:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00168a0:	74 2c                	je     c00168ce <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00168a2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00168a8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00168ae:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00168b4:	83 ec 10             	sub    esp,0x10
c00168b7:	0f a4 c2 0a          	shld   edx,eax,0xa
c00168bb:	89 f7                	mov    edi,esi
c00168bd:	c1 e0 0a             	shl    eax,0xa
c00168c0:	c1 ff 1f             	sar    edi,0x1f
c00168c3:	57                   	push   edi
c00168c4:	56                   	push   esi
c00168c5:	52                   	push   edx
c00168c6:	50                   	push   eax
c00168c7:	e8 e0 ff 00 00       	call   c00268ac <__udivdi3>
c00168cc:	eb 5a                	jmp    c0016928 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00168ce:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00168d5:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00168dc:	83 e1 7f             	and    ecx,0x7f
c00168df:	83 e0 7f             	and    eax,0x7f
c00168e2:	01 c1                	add    ecx,eax
c00168e4:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00168eb:	83 e0 7f             	and    eax,0x7f
c00168ee:	01 c1                	add    ecx,eax
c00168f0:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00168f7:	83 e0 7f             	and    eax,0x7f
c00168fa:	00 c1                	add    cl,al
c00168fc:	74 41                	je     c001693f <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00168fe:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016904:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001690a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016910:	83 ec 10             	sub    esp,0x10
c0016913:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016917:	89 f7                	mov    edi,esi
c0016919:	c1 e0 0a             	shl    eax,0xa
c001691c:	c1 ff 1f             	sar    edi,0x1f
c001691f:	57                   	push   edi
c0016920:	56                   	push   esi
c0016921:	52                   	push   edx
c0016922:	50                   	push   eax
c0016923:	e8 84 ff 00 00       	call   c00268ac <__udivdi3>
c0016928:	83 c4 14             	add    esp,0x14
c001692b:	52                   	push   edx
c001692c:	50                   	push   eax
c001692d:	6a 00                	push   0x0
c001692f:	6a 00                	push   0x0
c0016931:	53                   	push   ebx
c0016932:	e8 3f fe ff ff       	call   c0016776 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016937:	83 c4 20             	add    esp,0x20
c001693a:	e9 79 01 00 00       	jmp    c0016ab8 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c001693f:	89 f0                	mov    eax,esi
c0016941:	31 f6                	xor    esi,esi
c0016943:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001694a:	75 02                	jne    c001694e <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c001694c:	89 f1                	mov    ecx,esi
c001694e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016955:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c001695c:	c1 e2 08             	shl    edx,0x8
c001695f:	c1 e7 10             	shl    edi,0x10
c0016962:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c001696a:	09 fa                	or     edx,edi
c001696c:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016974:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c001697b:	83 c0 10             	add    eax,0x10
c001697e:	09 fa                	or     edx,edi
c0016980:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016987:	c1 e7 18             	shl    edi,0x18
c001698a:	09 fa                	or     edx,edi
c001698c:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016993:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016997:	c1 e7 10             	shl    edi,0x10
c001699a:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00169a1:	c1 e2 08             	shl    edx,0x8
c00169a4:	09 fa                	or     edx,edi
c00169a6:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00169ad:	09 fa                	or     edx,edi
c00169af:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00169b6:	c1 e7 18             	shl    edi,0x18
c00169b9:	09 fa                	or     edx,edi
c00169bb:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00169bf:	46                   	inc    esi
c00169c0:	83 fe 04             	cmp    esi,0x4
c00169c3:	0f 85 7a ff ff ff    	jne    c0016943 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00169c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00169cd:	83 f0 01             	xor    eax,0x1
c00169d0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00169d4:	75 57                	jne    c0016a2d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00169d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00169da:	83 f0 01             	xor    eax,0x1
c00169dd:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00169e1:	75 4a                	jne    c0016a2d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00169e3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00169e7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00169ef:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00169f7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00169fd:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a03:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a09:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a0d:	89 f7                	mov    edi,esi
c0016a0f:	c1 e0 0a             	shl    eax,0xa
c0016a12:	c1 ff 1f             	sar    edi,0x1f
c0016a15:	57                   	push   edi
c0016a16:	56                   	push   esi
c0016a17:	52                   	push   edx
c0016a18:	50                   	push   eax
c0016a19:	e8 8e fe 00 00       	call   c00268ac <__udivdi3>
c0016a1e:	83 c4 10             	add    esp,0x10
c0016a21:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016a25:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016a29:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016a2d:	84 c9                	test   cl,cl
c0016a2f:	74 53                	je     c0016a84 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016a31:	0f b6 c9             	movzx  ecx,cl
c0016a34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a38:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016a3c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016a40:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016a44:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016a48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016a4c:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016a50:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016a54:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016a58:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016a5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016a60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016a64:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016a68:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016a6c:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016a70:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016a74:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016a78:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016a7c:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016a80:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016a84:	31 ed                	xor    ebp,ebp
c0016a86:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016a8a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016a8e:	89 f8                	mov    eax,edi
c0016a90:	09 f0                	or     eax,esi
c0016a92:	74 1e                	je     c0016ab2 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016a94:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016a98:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016a9c:	89 d1                	mov    ecx,edx
c0016a9e:	09 c1                	or     ecx,eax
c0016aa0:	74 10                	je     c0016ab2 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016aa2:	83 ec 0c             	sub    esp,0xc
c0016aa5:	57                   	push   edi
c0016aa6:	56                   	push   esi
c0016aa7:	52                   	push   edx
c0016aa8:	50                   	push   eax
c0016aa9:	53                   	push   ebx
c0016aaa:	e8 c7 fc ff ff       	call   c0016776 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016aaf:	83 c4 20             	add    esp,0x20
c0016ab2:	45                   	inc    ebp
c0016ab3:	83 fd 04             	cmp    ebp,0x4
c0016ab6:	75 ce                	jne    c0016a86 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016ab8:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016abe:	5b                   	pop    ebx
c0016abf:	5e                   	pop    esi
c0016ac0:	5f                   	pop    edi
c0016ac1:	5d                   	pop    ebp
c0016ac2:	c3                   	ret    
c0016ac3:	90                   	nop

c0016ac4 <Serial::Serial(char const*)>:
c0016ac4:	83 ec 0c             	sub    esp,0xc
c0016ac7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016acb:	83 ec 08             	sub    esp,0x8
c0016ace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ad2:	50                   	push   eax
c0016ad3:	e8 12 d9 ff ff       	call   c00143ea <Device::Device(char const*)>
c0016ad8:	83 c4 10             	add    esp,0x10
c0016adb:	ba 60 b1 02 c0       	mov    edx,0xc002b160
c0016ae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ae4:	89 10                	mov    DWORD PTR [eax],edx
c0016ae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016aea:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016af4:	90                   	nop
c0016af5:	83 c4 0c             	add    esp,0xc
c0016af8:	c3                   	ret    
c0016af9:	90                   	nop

c0016afa <Serial::~Serial()>:
c0016afa:	83 ec 0c             	sub    esp,0xc
c0016afd:	ba 60 b1 02 c0       	mov    edx,0xc002b160
c0016b02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b06:	89 10                	mov    DWORD PTR [eax],edx
c0016b08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b0c:	83 ec 0c             	sub    esp,0xc
c0016b0f:	50                   	push   eax
c0016b10:	e8 b7 d5 ff ff       	call   c00140cc <Device::~Device()>
c0016b15:	83 c4 10             	add    esp,0x10
c0016b18:	90                   	nop
c0016b19:	83 c4 0c             	add    esp,0xc
c0016b1c:	c3                   	ret    
c0016b1d:	90                   	nop

c0016b1e <Serial::~Serial()>:
c0016b1e:	83 ec 0c             	sub    esp,0xc
c0016b21:	83 ec 0c             	sub    esp,0xc
c0016b24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b28:	e8 cd ff ff ff       	call   c0016afa <Serial::~Serial()>
c0016b2d:	83 c4 10             	add    esp,0x10
c0016b30:	83 ec 08             	sub    esp,0x8
c0016b33:	68 58 01 00 00       	push   0x158
c0016b38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b3c:	e8 b3 c1 ff ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0016b41:	83 c4 10             	add    esp,0x10
c0016b44:	83 c4 0c             	add    esp,0xc
c0016b47:	c3                   	ret    

c0016b48 <Timer::Timer(char const*)>:
c0016b48:	83 ec 0c             	sub    esp,0xc
c0016b4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b4f:	83 ec 08             	sub    esp,0x8
c0016b52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b56:	50                   	push   eax
c0016b57:	e8 8e d8 ff ff       	call   c00143ea <Device::Device(char const*)>
c0016b5c:	83 c4 10             	add    esp,0x10
c0016b5f:	ba a4 b1 02 c0       	mov    edx,0xc002b1a4
c0016b64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b68:	89 10                	mov    DWORD PTR [eax],edx
c0016b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b6e:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016b78:	90                   	nop
c0016b79:	83 c4 0c             	add    esp,0xc
c0016b7c:	c3                   	ret    
c0016b7d:	90                   	nop

c0016b7e <Timer::~Timer()>:
c0016b7e:	83 ec 0c             	sub    esp,0xc
c0016b81:	ba a4 b1 02 c0       	mov    edx,0xc002b1a4
c0016b86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b8a:	89 10                	mov    DWORD PTR [eax],edx
c0016b8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b90:	83 ec 0c             	sub    esp,0xc
c0016b93:	50                   	push   eax
c0016b94:	e8 33 d5 ff ff       	call   c00140cc <Device::~Device()>
c0016b99:	83 c4 10             	add    esp,0x10
c0016b9c:	90                   	nop
c0016b9d:	83 c4 0c             	add    esp,0xc
c0016ba0:	c3                   	ret    
c0016ba1:	90                   	nop

c0016ba2 <Timer::~Timer()>:
c0016ba2:	83 ec 0c             	sub    esp,0xc
c0016ba5:	83 ec 0c             	sub    esp,0xc
c0016ba8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016bac:	e8 cd ff ff ff       	call   c0016b7e <Timer::~Timer()>
c0016bb1:	83 c4 10             	add    esp,0x10
c0016bb4:	83 ec 08             	sub    esp,0x8
c0016bb7:	68 5c 01 00 00       	push   0x15c
c0016bbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016bc0:	e8 2f c1 ff ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0016bc5:	83 c4 10             	add    esp,0x10
c0016bc8:	83 c4 0c             	add    esp,0xc
c0016bcb:	c3                   	ret    

c0016bcc <Timer::read()>:
c0016bcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016bd0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016bd6:	c3                   	ret    

c0016bd7 <timerHandler(unsigned long long)>:
c0016bd7:	55                   	push   ebp
c0016bd8:	57                   	push   edi
c0016bd9:	56                   	push   esi
c0016bda:	53                   	push   ebx
c0016bdb:	83 ec 0c             	sub    esp,0xc
c0016bde:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016be2:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016be6:	01 35 30 e9 02 c0    	add    DWORD PTR ds:0xc002e930,esi
c0016bec:	11 3d 34 e9 02 c0    	adc    DWORD PTR ds:0xc002e934,edi
c0016bf2:	80 3d ad e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e2ad,0x0
c0016bf9:	0f 84 07 01 00 00    	je     c0016d06 <timerHandler(unsigned long long)+0x12f>
c0016bff:	e8 cc 70 00 00       	call   c001dcd0 <lockStuff()>
c0016c04:	83 ec 0c             	sub    esp,0xc
c0016c07:	68 fc 17 03 c0       	push   0xc00317fc
c0016c0c:	e8 0d 1d 01 00       	call   c002891e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016c11:	c7 04 24 fc 17 03 c0 	mov    DWORD PTR [esp],0xc00317fc
c0016c18:	89 c3                	mov    ebx,eax
c0016c1a:	e8 07 1d 01 00       	call   c0028926 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016c1f:	83 c4 10             	add    esp,0x10
c0016c22:	84 c0                	test   al,al
c0016c24:	74 60                	je     c0016c86 <timerHandler(unsigned long long)+0xaf>
c0016c26:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016c2c:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016c2f:	85 c0                	test   eax,eax
c0016c31:	0f 85 91 00 00 00    	jne    c0016cc8 <timerHandler(unsigned long long)+0xf1>
c0016c37:	e9 be 00 00 00       	jmp    c0016cfa <timerHandler(unsigned long long)+0x123>
c0016c3c:	83 ec 0c             	sub    esp,0xc
c0016c3f:	55                   	push   ebp
c0016c40:	e8 7b 76 00 00       	call   c001e2c0 <unblockTask(ThreadControlBlock*)>
c0016c45:	83 c4 10             	add    esp,0x10
c0016c48:	39 eb                	cmp    ebx,ebp
c0016c4a:	75 12                	jne    c0016c5e <timerHandler(unsigned long long)+0x87>
c0016c4c:	83 ec 0c             	sub    esp,0xc
c0016c4f:	68 fc 17 03 c0       	push   0xc00317fc
c0016c54:	e8 c5 1c 01 00       	call   c002891e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016c59:	89 c3                	mov    ebx,eax
c0016c5b:	83 c4 10             	add    esp,0x10
c0016c5e:	83 ec 0c             	sub    esp,0xc
c0016c61:	68 fc 17 03 c0       	push   0xc00317fc
c0016c66:	e8 bb 1c 01 00       	call   c0028926 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016c6b:	83 c4 10             	add    esp,0x10
c0016c6e:	84 c0                	test   al,al
c0016c70:	75 b4                	jne    c0016c26 <timerHandler(unsigned long long)+0x4f>
c0016c72:	83 ec 0c             	sub    esp,0xc
c0016c75:	68 fc 17 03 c0       	push   0xc00317fc
c0016c7a:	e8 9f 1c 01 00       	call   c002891e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016c7f:	83 c4 10             	add    esp,0x10
c0016c82:	39 d8                	cmp    eax,ebx
c0016c84:	74 a0                	je     c0016c26 <timerHandler(unsigned long long)+0x4f>
c0016c86:	83 ec 0c             	sub    esp,0xc
c0016c89:	68 fc 17 03 c0       	push   0xc00317fc
c0016c8e:	e8 8b 1c 01 00       	call   c002891e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016c93:	c7 04 24 fc 17 03 c0 	mov    DWORD PTR [esp],0xc00317fc
c0016c9a:	89 c5                	mov    ebp,eax
c0016c9c:	e8 a1 1c 01 00       	call   c0028942 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016ca1:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016ca4:	83 c4 10             	add    esp,0x10
c0016ca7:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016caa:	39 15 30 e9 02 c0    	cmp    DWORD PTR ds:0xc002e930,edx
c0016cb0:	a1 34 e9 02 c0       	mov    eax,ds:0xc002e934
c0016cb5:	19 c8                	sbb    eax,ecx
c0016cb7:	73 83                	jae    c0016c3c <timerHandler(unsigned long long)+0x65>
c0016cb9:	50                   	push   eax
c0016cba:	50                   	push   eax
c0016cbb:	55                   	push   ebp
c0016cbc:	68 fc 17 03 c0       	push   0xc00317fc
c0016cc1:	e8 2a 1d 01 00       	call   c00289f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016cc6:	eb 93                	jmp    c0016c5b <timerHandler(unsigned long long)+0x84>
c0016cc8:	80 3d ac e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e2ac,0x0
c0016ccf:	74 29                	je     c0016cfa <timerHandler(unsigned long long)+0x123>
c0016cd1:	39 c6                	cmp    esi,eax
c0016cd3:	bb 00 00 00 00       	mov    ebx,0x0
c0016cd8:	19 df                	sbb    edi,ebx
c0016cda:	72 19                	jb     c0016cf5 <timerHandler(unsigned long long)+0x11e>
c0016cdc:	e8 c8 6f 00 00       	call   c001dca9 <lockScheduler()>
c0016ce1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ce6:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016ce9:	e8 f6 72 00 00       	call   c001dfe4 <schedule()>
c0016cee:	e8 b8 6f 00 00       	call   c001dcab <unlockScheduler()>
c0016cf3:	eb 05                	jmp    c0016cfa <timerHandler(unsigned long long)+0x123>
c0016cf5:	29 f0                	sub    eax,esi
c0016cf7:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016cfa:	83 c4 0c             	add    esp,0xc
c0016cfd:	5b                   	pop    ebx
c0016cfe:	5e                   	pop    esi
c0016cff:	5f                   	pop    edi
c0016d00:	5d                   	pop    ebp
c0016d01:	e9 63 73 00 00       	jmp    c001e069 <unlockStuff()>
c0016d06:	83 c4 0c             	add    esp,0xc
c0016d09:	5b                   	pop    ebx
c0016d0a:	5e                   	pop    esi
c0016d0b:	5f                   	pop    edi
c0016d0c:	5d                   	pop    ebp
c0016d0d:	c3                   	ret    

c0016d0e <setupTimer(int)>:
c0016d0e:	57                   	push   edi
c0016d0f:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c0016d14:	56                   	push   esi
c0016d15:	53                   	push   ebx
c0016d16:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016d1a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016d20:	83 ec 0c             	sub    esp,0xc
c0016d23:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016d29:	e8 b8 d7 ff ff       	call   c00144e6 <Device::getName()>
c0016d2e:	83 c4 10             	add    esp,0x10
c0016d31:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016d34:	0f 85 8d 00 00 00    	jne    c0016dc7 <setupTimer(int)+0xb9>
c0016d3a:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c0016d3f:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016d46:	74 7f                	je     c0016dc7 <setupTimer(int)+0xb9>
c0016d48:	83 ec 0c             	sub    esp,0xc
c0016d4b:	68 5c 01 00 00       	push   0x15c
c0016d50:	e8 eb 8a ff ff       	call   c000f840 <malloc>
c0016d55:	89 04 24             	mov    DWORD PTR [esp],eax
c0016d58:	89 c3                	mov    ebx,eax
c0016d5a:	e8 31 f7 00 00       	call   c0026490 <PIT::PIT()>
c0016d5f:	59                   	pop    ecx
c0016d60:	5f                   	pop    edi
c0016d61:	53                   	push   ebx
c0016d62:	ff 35 a8 e2 02 c0    	push   DWORD PTR ds:0xc002e2a8
c0016d68:	e8 8d d4 ff ff       	call   c00141fa <Device::addChild(Device*)>
c0016d6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016d6f:	6a 00                	push   0x0
c0016d71:	6a 00                	push   0x0
c0016d73:	56                   	push   esi
c0016d74:	53                   	push   ebx
c0016d75:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016d78:	83 c4 14             	add    esp,0x14
c0016d7b:	68 60 01 00 00       	push   0x160
c0016d80:	e8 bb 8a ff ff       	call   c000f840 <malloc>
c0016d85:	89 04 24             	mov    DWORD PTR [esp],eax
c0016d88:	89 c7                	mov    edi,eax
c0016d8a:	e8 b1 f5 00 00       	call   c0026340 <APICTimer::APICTimer()>
c0016d8f:	6a 00                	push   0x0
c0016d91:	6a 00                	push   0x0
c0016d93:	56                   	push   esi
c0016d94:	57                   	push   edi
c0016d95:	e8 a8 f4 00 00       	call   c0026242 <APICTimer::open(int, int, void*)>
c0016d9a:	83 c4 20             	add    esp,0x20
c0016d9d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016d9f:	6a 00                	push   0x0
c0016da1:	6a 00                	push   0x0
c0016da3:	6a 00                	push   0x0
c0016da5:	53                   	push   ebx
c0016da6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016da9:	58                   	pop    eax
c0016daa:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c0016daf:	5a                   	pop    edx
c0016db0:	57                   	push   edi
c0016db1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016db7:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016dbd:	e8 38 d4 ff ff       	call   c00141fa <Device::addChild(Device*)>
c0016dc2:	83 c4 10             	add    esp,0x10
c0016dc5:	eb 33                	jmp    c0016dfa <setupTimer(int)+0xec>
c0016dc7:	83 ec 0c             	sub    esp,0xc
c0016dca:	68 5c 01 00 00       	push   0x15c
c0016dcf:	e8 6c 8a ff ff       	call   c000f840 <malloc>
c0016dd4:	89 04 24             	mov    DWORD PTR [esp],eax
c0016dd7:	89 c3                	mov    ebx,eax
c0016dd9:	e8 b2 f6 00 00       	call   c0026490 <PIT::PIT()>
c0016dde:	58                   	pop    eax
c0016ddf:	5a                   	pop    edx
c0016de0:	53                   	push   ebx
c0016de1:	ff 35 a8 e2 02 c0    	push   DWORD PTR ds:0xc002e2a8
c0016de7:	e8 0e d4 ff ff       	call   c00141fa <Device::addChild(Device*)>
c0016dec:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016dee:	6a 00                	push   0x0
c0016df0:	6a 00                	push   0x0
c0016df2:	56                   	push   esi
c0016df3:	53                   	push   ebx
c0016df4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016df7:	83 c4 20             	add    esp,0x20
c0016dfa:	89 d8                	mov    eax,ebx
c0016dfc:	5b                   	pop    ebx
c0016dfd:	5e                   	pop    esi
c0016dfe:	5f                   	pop    edi
c0016dff:	c3                   	ret    

c0016e00 <VCache::VCache(PhysicalDisk*)>:
c0016e00:	53                   	push   ebx
c0016e01:	83 ec 18             	sub    esp,0x18
c0016e04:	ba d4 b1 02 c0       	mov    edx,0xc002b1d4
c0016e09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e0d:	89 10                	mov    DWORD PTR [eax],edx
c0016e0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e13:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016e1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e1e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016e25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e29:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016e30:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016e37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e3b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016e42:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016e49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e4d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016e54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e58:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016e5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e60:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016e67:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016e6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e72:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016e76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e7a:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016e7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e82:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016e86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e8a:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016e91:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016e99:	83 ec 0c             	sub    esp,0xc
c0016e9c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016ea0:	e8 9b 89 ff ff       	call   c000f840 <malloc>
c0016ea5:	83 c4 10             	add    esp,0x10
c0016ea8:	89 c3                	mov    ebx,eax
c0016eaa:	83 ec 0c             	sub    esp,0xc
c0016ead:	53                   	push   ebx
c0016eae:	e8 15 6f 00 00       	call   c001ddc8 <Mutex::Mutex()>
c0016eb3:	83 c4 10             	add    esp,0x10
c0016eb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016eba:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016ebd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ec1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016ec5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016ec8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ecc:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016ed3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016ed7:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016edd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ee1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016ee4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016ee8:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016eee:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016ef4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016ef8:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016efb:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016efe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f02:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016f06:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016f0a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016f10:	05 00 01 00 00       	add    eax,0x100
c0016f15:	c1 e0 04             	shl    eax,0x4
c0016f18:	83 ec 0c             	sub    esp,0xc
c0016f1b:	50                   	push   eax
c0016f1c:	e8 1f 89 ff ff       	call   c000f840 <malloc>
c0016f21:	83 c4 10             	add    esp,0x10
c0016f24:	89 c2                	mov    edx,eax
c0016f26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f2a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016f2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f31:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016f38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f3c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016f40:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016f44:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016f4a:	c1 e0 07             	shl    eax,0x7
c0016f4d:	83 ec 0c             	sub    esp,0xc
c0016f50:	50                   	push   eax
c0016f51:	e8 ea 88 ff ff       	call   c000f840 <malloc>
c0016f56:	83 c4 10             	add    esp,0x10
c0016f59:	89 c2                	mov    edx,eax
c0016f5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f5f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016f62:	90                   	nop
c0016f63:	83 c4 18             	add    esp,0x18
c0016f66:	5b                   	pop    ebx
c0016f67:	c3                   	ret    

c0016f68 <VCache::invalidateReadBuffer()>:
c0016f68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f6c:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0016f72:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016f76:	c3                   	ret    
c0016f77:	90                   	nop

c0016f78 <VCache::writeWriteBuffer()>:
c0016f78:	53                   	push   ebx
c0016f79:	83 ec 14             	sub    esp,0x14
c0016f7c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016f80:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016f83:	8b 10                	mov    edx,DWORD PTR [eax]
c0016f85:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016f88:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016f8b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016f8e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016f91:	50                   	push   eax
c0016f92:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016f95:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016f9c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016fa3:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016fa7:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016fae:	83 c4 28             	add    esp,0x28
c0016fb1:	5b                   	pop    ebx
c0016fb2:	c3                   	ret    
c0016fb3:	90                   	nop

c0016fb4 <VCache::~VCache()>:
c0016fb4:	83 ec 0c             	sub    esp,0xc
c0016fb7:	ba d4 b1 02 c0       	mov    edx,0xc002b1d4
c0016fbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fc0:	89 10                	mov    DWORD PTR [eax],edx
c0016fc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fc6:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016fc9:	84 c0                	test   al,al
c0016fcb:	74 0f                	je     c0016fdc <VCache::~VCache()+0x28>
c0016fcd:	83 ec 0c             	sub    esp,0xc
c0016fd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016fd4:	e8 9f ff ff ff       	call   c0016f78 <VCache::writeWriteBuffer()>
c0016fd9:	83 c4 10             	add    esp,0x10
c0016fdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fe0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016fe3:	83 ec 0c             	sub    esp,0xc
c0016fe6:	50                   	push   eax
c0016fe7:	e8 64 88 ff ff       	call   c000f850 <free>
c0016fec:	83 c4 10             	add    esp,0x10
c0016fef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ff3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016ff6:	83 ec 0c             	sub    esp,0xc
c0016ff9:	50                   	push   eax
c0016ffa:	e8 51 88 ff ff       	call   c000f850 <free>
c0016fff:	83 c4 10             	add    esp,0x10
c0017002:	90                   	nop
c0017003:	83 c4 0c             	add    esp,0xc
c0017006:	c3                   	ret    
c0017007:	90                   	nop

c0017008 <VCache::~VCache()>:
c0017008:	83 ec 0c             	sub    esp,0xc
c001700b:	83 ec 0c             	sub    esp,0xc
c001700e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017012:	e8 9d ff ff ff       	call   c0016fb4 <VCache::~VCache()>
c0017017:	83 c4 10             	add    esp,0x10
c001701a:	83 ec 08             	sub    esp,0x8
c001701d:	6a 44                	push   0x44
c001701f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017023:	e8 cc bc ff ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0017028:	83 c4 10             	add    esp,0x10
c001702b:	83 c4 0c             	add    esp,0xc
c001702e:	c3                   	ret    
c001702f:	90                   	nop

c0017030 <VCache::write(unsigned long long, int, void*)>:
c0017030:	55                   	push   ebp
c0017031:	57                   	push   edi
c0017032:	56                   	push   esi
c0017033:	53                   	push   ebx
c0017034:	83 ec 28             	sub    esp,0x28
c0017037:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001703b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001703f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017043:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0017047:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001704a:	e8 db 71 00 00       	call   c001e22a <Semaphore::acquire()>
c001704f:	83 c4 10             	add    esp,0x10
c0017052:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017056:	74 0c                	je     c0017064 <VCache::write(unsigned long long, int, void*)+0x34>
c0017058:	83 ec 0c             	sub    esp,0xc
c001705b:	53                   	push   ebx
c001705c:	e8 07 ff ff ff       	call   c0016f68 <VCache::invalidateReadBuffer()>
c0017061:	83 c4 10             	add    esp,0x10
c0017064:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017068:	74 66                	je     c00170d0 <VCache::write(unsigned long long, int, void*)+0xa0>
c001706a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001706d:	99                   	cdq    
c001706e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017072:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0017075:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0017078:	89 c1                	mov    ecx,eax
c001707a:	89 d0                	mov    eax,edx
c001707c:	31 f1                	xor    ecx,esi
c001707e:	31 f8                	xor    eax,edi
c0017080:	89 ca                	mov    edx,ecx
c0017082:	09 c2                	or     edx,eax
c0017084:	75 3e                	jne    c00170c4 <VCache::write(unsigned long long, int, void*)+0x94>
c0017086:	83 fd 01             	cmp    ebp,0x1
c0017089:	75 39                	jne    c00170c4 <VCache::write(unsigned long long, int, void*)+0x94>
c001708b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001708e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017094:	51                   	push   ecx
c0017095:	50                   	push   eax
c0017096:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001709a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001709e:	0f af c8             	imul   ecx,eax
c00170a1:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00170a4:	51                   	push   ecx
c00170a5:	e8 9a 96 fe ff       	call   c0000744 <memcpy>
c00170aa:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00170ad:	83 c4 10             	add    esp,0x10
c00170b0:	40                   	inc    eax
c00170b1:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00170b4:	83 c0 80             	add    eax,0xffffff80
c00170b7:	75 57                	jne    c0017110 <VCache::write(unsigned long long, int, void*)+0xe0>
c00170b9:	83 ec 0c             	sub    esp,0xc
c00170bc:	53                   	push   ebx
c00170bd:	e8 b6 fe ff ff       	call   c0016f78 <VCache::writeWriteBuffer()>
c00170c2:	eb 34                	jmp    c00170f8 <VCache::write(unsigned long long, int, void*)+0xc8>
c00170c4:	83 ec 0c             	sub    esp,0xc
c00170c7:	53                   	push   ebx
c00170c8:	e8 ab fe ff ff       	call   c0016f78 <VCache::writeWriteBuffer()>
c00170cd:	83 c4 10             	add    esp,0x10
c00170d0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00170d3:	83 fd 7f             	cmp    ebp,0x7f
c00170d6:	7f 25                	jg     c00170fd <VCache::write(unsigned long long, int, void*)+0xcd>
c00170d8:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00170db:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00170de:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c00170e1:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00170e5:	52                   	push   edx
c00170e6:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00170ec:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00170f0:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00170f3:	e8 4c 96 fe ff       	call   c0000744 <memcpy>
c00170f8:	83 c4 10             	add    esp,0x10
c00170fb:	eb 13                	jmp    c0017110 <VCache::write(unsigned long long, int, void*)+0xe0>
c00170fd:	83 ec 0c             	sub    esp,0xc
c0017100:	8b 10                	mov    edx,DWORD PTR [eax]
c0017102:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017106:	55                   	push   ebp
c0017107:	57                   	push   edi
c0017108:	56                   	push   esi
c0017109:	50                   	push   eax
c001710a:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001710d:	83 c4 20             	add    esp,0x20
c0017110:	83 ec 0c             	sub    esp,0xc
c0017113:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017116:	e8 bd 76 00 00       	call   c001e7d8 <Semaphore::release()>
c001711b:	83 c4 2c             	add    esp,0x2c
c001711e:	31 c0                	xor    eax,eax
c0017120:	5b                   	pop    ebx
c0017121:	5e                   	pop    esi
c0017122:	5f                   	pop    edi
c0017123:	5d                   	pop    ebp
c0017124:	c3                   	ret    
c0017125:	90                   	nop

c0017126 <VCache::read(unsigned long long, int, void*)>:
c0017126:	55                   	push   ebp
c0017127:	57                   	push   edi
c0017128:	56                   	push   esi
c0017129:	53                   	push   ebx
c001712a:	83 ec 28             	sub    esp,0x28
c001712d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017131:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017135:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017139:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001713d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0017141:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017145:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0017149:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001714c:	e8 d9 70 00 00       	call   c001e22a <Semaphore::acquire()>
c0017151:	83 c4 10             	add    esp,0x10
c0017154:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017158:	74 0c                	je     c0017166 <VCache::read(unsigned long long, int, void*)+0x40>
c001715a:	83 ec 0c             	sub    esp,0xc
c001715d:	53                   	push   ebx
c001715e:	e8 15 fe ff ff       	call   c0016f78 <VCache::writeWriteBuffer()>
c0017163:	83 c4 10             	add    esp,0x10
c0017166:	83 fe 01             	cmp    esi,0x1
c0017169:	0f 85 80 00 00 00    	jne    c00171ef <VCache::read(unsigned long long, int, void*)+0xc9>
c001716f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017172:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0017179:	75 74                	jne    c00171ef <VCache::read(unsigned long long, int, void*)+0xc9>
c001717b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001717e:	89 d1                	mov    ecx,edx
c0017180:	f7 d9                	neg    ecx
c0017182:	89 cf                	mov    edi,ecx
c0017184:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017188:	c1 ff 1f             	sar    edi,0x1f
c001718b:	23 0c 24             	and    ecx,DWORD PTR [esp]
c001718e:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0017192:	89 ce                	mov    esi,ecx
c0017194:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017198:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c001719c:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00171a0:	89 cf                	mov    edi,ecx
c00171a2:	74 0a                	je     c00171ae <VCache::read(unsigned long long, int, void*)+0x88>
c00171a4:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c00171a7:	75 05                	jne    c00171ae <VCache::read(unsigned long long, int, void*)+0x88>
c00171a9:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c00171ac:	74 1c                	je     c00171ca <VCache::read(unsigned long long, int, void*)+0xa4>
c00171ae:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c00171b2:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00171b5:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c00171b8:	83 ec 0c             	sub    esp,0xc
c00171bb:	8b 08                	mov    ecx,DWORD PTR [eax]
c00171bd:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00171c0:	52                   	push   edx
c00171c1:	57                   	push   edi
c00171c2:	56                   	push   esi
c00171c3:	50                   	push   eax
c00171c4:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c00171c7:	83 c4 20             	add    esp,0x20
c00171ca:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00171cd:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00171d3:	50                   	push   eax
c00171d4:	52                   	push   edx
c00171d5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00171d8:	48                   	dec    eax
c00171d9:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c00171dd:	0f af c2             	imul   eax,edx
c00171e0:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c00171e3:	50                   	push   eax
c00171e4:	55                   	push   ebp
c00171e5:	e8 5a 95 fe ff       	call   c0000744 <memcpy>
c00171ea:	83 c4 10             	add    esp,0x10
c00171ed:	eb 21                	jmp    c0017210 <VCache::read(unsigned long long, int, void*)+0xea>
c00171ef:	83 ec 0c             	sub    esp,0xc
c00171f2:	53                   	push   ebx
c00171f3:	e8 70 fd ff ff       	call   c0016f68 <VCache::invalidateReadBuffer()>
c00171f8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00171fb:	8b 10                	mov    edx,DWORD PTR [eax]
c00171fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017200:	56                   	push   esi
c0017201:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017205:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017209:	50                   	push   eax
c001720a:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001720d:	83 c4 20             	add    esp,0x20
c0017210:	83 ec 0c             	sub    esp,0xc
c0017213:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017216:	e8 bd 75 00 00       	call   c001e7d8 <Semaphore::release()>
c001721b:	83 c4 2c             	add    esp,0x2c
c001721e:	31 c0                	xor    eax,eax
c0017220:	5b                   	pop    ebx
c0017221:	5e                   	pop    esi
c0017222:	5f                   	pop    edi
c0017223:	5d                   	pop    ebp
c0017224:	c3                   	ret    
c0017225:	90                   	nop

c0017226 <Video::putrect(int, int, int, int, unsigned int)>:
c0017226:	55                   	push   ebp
c0017227:	57                   	push   edi
c0017228:	56                   	push   esi
c0017229:	53                   	push   ebx
c001722a:	83 ec 1c             	sub    esp,0x1c
c001722d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017231:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017235:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0017239:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001723d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017241:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017245:	01 df                	add    edi,ebx
c0017247:	39 fb                	cmp    ebx,edi
c0017249:	7d 1f                	jge    c001726a <Video::putrect(int, int, int, int, unsigned int)+0x44>
c001724b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001724f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0017253:	7d 12                	jge    c0017267 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0017255:	8b 16                	mov    edx,DWORD PTR [esi]
c0017257:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001725b:	53                   	push   ebx
c001725c:	55                   	push   ebp
c001725d:	45                   	inc    ebp
c001725e:	56                   	push   esi
c001725f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0017262:	83 c4 10             	add    esp,0x10
c0017265:	eb e8                	jmp    c001724f <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0017267:	43                   	inc    ebx
c0017268:	eb dd                	jmp    c0017247 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c001726a:	83 c4 1c             	add    esp,0x1c
c001726d:	5b                   	pop    ebx
c001726e:	5e                   	pop    esi
c001726f:	5f                   	pop    edi
c0017270:	5d                   	pop    ebp
c0017271:	c3                   	ret    

c0017272 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0017272:	55                   	push   ebp
c0017273:	57                   	push   edi
c0017274:	31 ff                	xor    edi,edi
c0017276:	56                   	push   esi
c0017277:	53                   	push   ebx
c0017278:	83 ec 1c             	sub    esp,0x1c
c001727b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001727f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0017283:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c001728a:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001728f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017293:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0017297:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001729b:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001729e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00172a2:	01 f9                	add    ecx,edi
c00172a4:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c00172a8:	7d 2f                	jge    c00172d9 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c00172aa:	31 f6                	xor    esi,esi
c00172ac:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00172b0:	01 f2                	add    edx,esi
c00172b2:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00172b6:	7d 1a                	jge    c00172d2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c00172b8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00172bb:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c00172be:	46                   	inc    esi
c00172bf:	51                   	push   ecx
c00172c0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00172c4:	52                   	push   edx
c00172c5:	55                   	push   ebp
c00172c6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00172c9:	83 c4 10             	add    esp,0x10
c00172cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00172d0:	eb da                	jmp    c00172ac <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c00172d2:	47                   	inc    edi
c00172d3:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00172d7:	eb c5                	jmp    c001729e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c00172d9:	83 c4 1c             	add    esp,0x1c
c00172dc:	5b                   	pop    ebx
c00172dd:	5e                   	pop    esi
c00172de:	5f                   	pop    edi
c00172df:	5d                   	pop    ebp
c00172e0:	c3                   	ret    
c00172e1:	90                   	nop

c00172e2 <Video::blit(unsigned int*, int, int, int, int)>:
c00172e2:	55                   	push   ebp
c00172e3:	57                   	push   edi
c00172e4:	56                   	push   esi
c00172e5:	53                   	push   ebx
c00172e6:	83 ec 1c             	sub    esp,0x1c
c00172e9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00172ed:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00172f1:	85 c0                	test   eax,eax
c00172f3:	79 02                	jns    c00172f7 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00172f5:	31 c0                	xor    eax,eax
c00172f7:	c1 e0 02             	shl    eax,0x2
c00172fa:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00172fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017302:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017306:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c001730a:	39 d8                	cmp    eax,ebx
c001730c:	7e 49                	jle    c0017357 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001730e:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017314:	7c 41                	jl     c0017357 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017316:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001731a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001731e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017322:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0017326:	39 f9                	cmp    ecx,edi
c0017328:	7e 22                	jle    c001734c <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c001732a:	83 c5 04             	add    ebp,0x4
c001732d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017333:	7c 14                	jl     c0017349 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0017335:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017337:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c001733a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001733e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017342:	56                   	push   esi
c0017343:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0017346:	83 c4 10             	add    esp,0x10
c0017349:	47                   	inc    edi
c001734a:	eb d2                	jmp    c001731e <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001734c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017350:	43                   	inc    ebx
c0017351:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017355:	eb ab                	jmp    c0017302 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0017357:	83 c4 1c             	add    esp,0x1c
c001735a:	5b                   	pop    ebx
c001735b:	5e                   	pop    esi
c001735c:	5f                   	pop    edi
c001735d:	5d                   	pop    ebp
c001735e:	c3                   	ret    
c001735f:	90                   	nop

c0017360 <Video::clearScreen(unsigned int)>:
c0017360:	57                   	push   edi
c0017361:	56                   	push   esi
c0017362:	53                   	push   ebx
c0017363:	31 db                	xor    ebx,ebx
c0017365:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017369:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001736f:	7e 1f                	jle    c0017390 <Video::clearScreen(unsigned int)+0x30>
c0017371:	31 ff                	xor    edi,edi
c0017373:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017379:	7e 12                	jle    c001738d <Video::clearScreen(unsigned int)+0x2d>
c001737b:	8b 06                	mov    eax,DWORD PTR [esi]
c001737d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017381:	53                   	push   ebx
c0017382:	57                   	push   edi
c0017383:	47                   	inc    edi
c0017384:	56                   	push   esi
c0017385:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017388:	83 c4 10             	add    esp,0x10
c001738b:	eb e6                	jmp    c0017373 <Video::clearScreen(unsigned int)+0x13>
c001738d:	43                   	inc    ebx
c001738e:	eb d9                	jmp    c0017369 <Video::clearScreen(unsigned int)+0x9>
c0017390:	5b                   	pop    ebx
c0017391:	5e                   	pop    esi
c0017392:	5f                   	pop    edi
c0017393:	c3                   	ret    

c0017394 <Video::putpixel(int, int, unsigned int)>:
c0017394:	c7 44 24 04 dc b1 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b1dc
c001739c:	e9 0e 31 00 00       	jmp    c001a4af <Krnl::panic(char const*)>
c00173a1:	90                   	nop

c00173a2 <Video::Video(char const*)>:
c00173a2:	83 ec 0c             	sub    esp,0xc
c00173a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00173a9:	83 ec 08             	sub    esp,0x8
c00173ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00173b0:	50                   	push   eax
c00173b1:	e8 34 d0 ff ff       	call   c00143ea <Device::Device(char const*)>
c00173b6:	83 c4 10             	add    esp,0x10
c00173b9:	ba 60 b2 02 c0       	mov    edx,0xc002b260
c00173be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00173c2:	89 10                	mov    DWORD PTR [eax],edx
c00173c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00173c8:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00173d2:	90                   	nop
c00173d3:	83 c4 0c             	add    esp,0xc
c00173d6:	c3                   	ret    
c00173d7:	90                   	nop

c00173d8 <Video::~Video()>:
c00173d8:	83 ec 0c             	sub    esp,0xc
c00173db:	ba 60 b2 02 c0       	mov    edx,0xc002b260
c00173e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00173e4:	89 10                	mov    DWORD PTR [eax],edx
c00173e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00173ea:	83 ec 0c             	sub    esp,0xc
c00173ed:	50                   	push   eax
c00173ee:	e8 d9 cc ff ff       	call   c00140cc <Device::~Device()>
c00173f3:	83 c4 10             	add    esp,0x10
c00173f6:	90                   	nop
c00173f7:	83 c4 0c             	add    esp,0xc
c00173fa:	c3                   	ret    
c00173fb:	90                   	nop

c00173fc <Video::~Video()>:
c00173fc:	83 ec 0c             	sub    esp,0xc
c00173ff:	83 ec 0c             	sub    esp,0xc
c0017402:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017406:	e8 cd ff ff ff       	call   c00173d8 <Video::~Video()>
c001740b:	83 c4 10             	add    esp,0x10
c001740e:	83 ec 08             	sub    esp,0x8
c0017411:	68 64 01 00 00       	push   0x164
c0017416:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001741a:	e8 d5 b8 ff ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c001741f:	83 c4 10             	add    esp,0x10
c0017422:	83 c4 0c             	add    esp,0xc
c0017425:	c3                   	ret    

c0017426 <Video::isMonochrome()>:
c0017426:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001742a:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0017430:	c3                   	ret    
c0017431:	90                   	nop

c0017432 <Video::getWidth()>:
c0017432:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017436:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001743c:	c3                   	ret    
c001743d:	90                   	nop

c001743e <Video::getHeight()>:
c001743e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017442:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017448:	c3                   	ret    
c0017449:	90                   	nop

c001744a <Video::drawCursor(int, int, unsigned char*, int)>:
c001744a:	55                   	push   ebp
c001744b:	57                   	push   edi
c001744c:	56                   	push   esi
c001744d:	53                   	push   ebx
c001744e:	83 ec 2c             	sub    esp,0x2c
c0017451:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017455:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017459:	83 f8 01             	cmp    eax,0x1
c001745c:	19 c9                	sbb    ecx,ecx
c001745e:	31 db                	xor    ebx,ebx
c0017460:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0017464:	89 cd                	mov    ebp,ecx
c0017466:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001746e:	f7 d5                	not    ebp
c0017470:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0017476:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001747a:	01 d8                	add    eax,ebx
c001747c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017480:	56                   	push   esi
c0017481:	e8 b8 ff ff ff       	call   c001743e <Video::getHeight()>
c0017486:	59                   	pop    ecx
c0017487:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001748b:	7e 70                	jle    c00174fd <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c001748d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017491:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017495:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0017498:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001749c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00174a0:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00174a7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00174ab:	89 f8                	mov    eax,edi
c00174ad:	83 c0 20             	add    eax,0x20
c00174b0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00174b4:	56                   	push   esi
c00174b5:	e8 78 ff ff ff       	call   c0017432 <Video::getWidth()>
c00174ba:	5a                   	pop    edx
c00174bb:	39 c7                	cmp    edi,eax
c00174bd:	7d 34                	jge    c00174f3 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00174bf:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00174c4:	74 05                	je     c00174cb <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00174c6:	8b 06                	mov    eax,DWORD PTR [esi]
c00174c8:	55                   	push   ebp
c00174c9:	eb 0d                	jmp    c00174d8 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00174cb:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00174d0:	74 12                	je     c00174e4 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00174d2:	8b 06                	mov    eax,DWORD PTR [esi]
c00174d4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00174d8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00174dc:	57                   	push   edi
c00174dd:	56                   	push   esi
c00174de:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00174e1:	83 c4 10             	add    esp,0x10
c00174e4:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00174e8:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00174ec:	47                   	inc    edi
c00174ed:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00174f1:	75 c1                	jne    c00174b4 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00174f3:	43                   	inc    ebx
c00174f4:	83 fb 20             	cmp    ebx,0x20
c00174f7:	0f 85 79 ff ff ff    	jne    c0017476 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00174fd:	83 c4 2c             	add    esp,0x2c
c0017500:	5b                   	pop    ebx
c0017501:	5e                   	pop    esi
c0017502:	5f                   	pop    edi
c0017503:	5d                   	pop    ebp
c0017504:	c3                   	ret    
c0017505:	90                   	nop

c0017506 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0017506:	55                   	push   ebp
c0017507:	57                   	push   edi
c0017508:	56                   	push   esi
c0017509:	53                   	push   ebx
c001750a:	83 ec 28             	sub    esp,0x28
c001750d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017511:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0017515:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0017519:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001751d:	c1 e7 08             	shl    edi,0x8
c0017520:	01 c7                	add    edi,eax
c0017522:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0017526:	c1 e0 08             	shl    eax,0x8
c0017529:	01 d0                	add    eax,edx
c001752b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001752f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017533:	0f af c7             	imul   eax,edi
c0017536:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001753d:	50                   	push   eax
c001753e:	e8 fd 82 ff ff       	call   c000f840 <malloc>
c0017543:	83 c4 10             	add    esp,0x10
c0017546:	89 c5                	mov    ebp,eax
c0017548:	85 c0                	test   eax,eax
c001754a:	75 15                	jne    c0017561 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c001754c:	83 ec 0c             	sub    esp,0xc
c001754f:	68 fd b1 02 c0       	push   0xc002b1fd
c0017554:	e8 7b b8 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0017559:	83 c4 10             	add    esp,0x10
c001755c:	e9 1c 01 00 00       	jmp    c001767d <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017561:	be 12 00 00 00       	mov    esi,0x12
c0017566:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c001756a:	74 11                	je     c001757d <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c001756c:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0017570:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0017574:	c1 fe 03             	sar    esi,0x3
c0017577:	0f af f0             	imul   esi,eax
c001757a:	83 c6 12             	add    esi,0x12
c001757d:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0017581:	74 04                	je     c0017587 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0017583:	85 ff                	test   edi,edi
c0017585:	75 12                	jne    c0017599 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0017587:	83 ec 0c             	sub    esp,0xc
c001758a:	68 14 b2 02 c0       	push   0xc002b214
c001758f:	e8 40 b8 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0017594:	e9 ce 00 00 00       	jmp    c0017667 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0017599:	52                   	push   edx
c001759a:	52                   	push   edx
c001759b:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c001759f:	50                   	push   eax
c00175a0:	68 29 b2 02 c0       	push   0xc002b229
c00175a5:	e8 2a b8 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c00175aa:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c00175ae:	83 c4 10             	add    esp,0x10
c00175b1:	80 fa 02             	cmp    dl,0x2
c00175b4:	0f 85 98 00 00 00    	jne    c0017652 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c00175ba:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c00175bf:	75 10                	jne    c00175d1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00175c1:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00175c5:	75 0a                	jne    c00175d1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00175c7:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00175ca:	83 e8 18             	sub    eax,0x18
c00175cd:	a8 f7                	test   al,0xf7
c00175cf:	74 0a                	je     c00175db <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c00175d1:	83 ec 0c             	sub    esp,0xc
c00175d4:	68 36 b2 02 c0       	push   0xc002b236
c00175d9:	eb 7f                	jmp    c001765a <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c00175db:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00175e3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00175eb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00175ef:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00175f7:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00175fb:	75 0c                	jne    c0017609 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c00175fd:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0017602:	c1 e0 18             	shl    eax,0x18
c0017605:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017609:	41                   	inc    ecx
c001760a:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c001760f:	c1 e2 10             	shl    edx,0x10
c0017612:	89 d0                	mov    eax,edx
c0017614:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0017619:	c1 e2 08             	shl    edx,0x8
c001761c:	09 c2                	or     edx,eax
c001761e:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0017622:	09 c2                	or     edx,eax
c0017624:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0017628:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c001762c:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0017630:	c1 f8 03             	sar    eax,0x3
c0017633:	01 c6                	add    esi,eax
c0017635:	89 c8                	mov    eax,ecx
c0017637:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c001763b:	39 c7                	cmp    edi,eax
c001763d:	7f b0                	jg     c00175ef <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c001763f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017643:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017647:	39 14 24             	cmp    DWORD PTR [esp],edx
c001764a:	7e 22                	jle    c001766e <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c001764c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0017650:	eb 99                	jmp    c00175eb <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0017652:	50                   	push   eax
c0017653:	50                   	push   eax
c0017654:	52                   	push   edx
c0017655:	68 44 b2 02 c0       	push   0xc002b244
c001765a:	e8 75 b7 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001765f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017662:	e8 e9 81 ff ff       	call   c000f850 <free>
c0017667:	83 c4 10             	add    esp,0x10
c001766a:	31 ed                	xor    ebp,ebp
c001766c:	eb 0f                	jmp    c001767d <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001766e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017672:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0017675:	89 38                	mov    DWORD PTR [eax],edi
c0017677:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001767b:	89 08                	mov    DWORD PTR [eax],ecx
c001767d:	83 c4 1c             	add    esp,0x1c
c0017680:	89 e8                	mov    eax,ebp
c0017682:	5b                   	pop    ebx
c0017683:	5e                   	pop    esi
c0017684:	5f                   	pop    edi
c0017685:	5d                   	pop    ebp
c0017686:	c3                   	ret    
c0017687:	90                   	nop

c0017688 <Video::putTGA(int, int, unsigned char*, int)>:
c0017688:	55                   	push   ebp
c0017689:	57                   	push   edi
c001768a:	56                   	push   esi
c001768b:	53                   	push   ebx
c001768c:	83 ec 28             	sub    esp,0x28
c001768f:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0017693:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017697:	50                   	push   eax
c0017698:	8d 44 24 18          	lea    eax,[esp+0x18]
c001769c:	50                   	push   eax
c001769d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00176a1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00176a5:	56                   	push   esi
c00176a6:	e8 5b fe ff ff       	call   c0017506 <Video::tgaParse(unsigned char*, int, int*, int*)>
c00176ab:	83 c4 20             	add    esp,0x20
c00176ae:	85 c0                	test   eax,eax
c00176b0:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00176b4:	74 35                	je     c00176eb <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00176b6:	89 c7                	mov    edi,eax
c00176b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00176bc:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00176c0:	39 d8                	cmp    eax,ebx
c00176c2:	7e 27                	jle    c00176eb <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00176c4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00176c8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00176cc:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00176d0:	39 e8                	cmp    eax,ebp
c00176d2:	7e 14                	jle    c00176e8 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00176d4:	8b 06                	mov    eax,DWORD PTR [esi]
c00176d6:	83 c7 04             	add    edi,0x4
c00176d9:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00176dc:	53                   	push   ebx
c00176dd:	55                   	push   ebp
c00176de:	45                   	inc    ebp
c00176df:	56                   	push   esi
c00176e0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00176e3:	83 c4 10             	add    esp,0x10
c00176e6:	eb e0                	jmp    c00176c8 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00176e8:	43                   	inc    ebx
c00176e9:	eb cd                	jmp    c00176b8 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00176eb:	83 c4 1c             	add    esp,0x1c
c00176ee:	5b                   	pop    ebx
c00176ef:	5e                   	pop    esi
c00176f0:	5f                   	pop    edi
c00176f1:	5d                   	pop    ebp
c00176f2:	c3                   	ret    
c00176f3:	90                   	nop

c00176f4 <ACPI::close(int, int, void*)>:
c00176f4:	83 ec 1c             	sub    esp,0x1c
c00176f7:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00176ff:	74 0a                	je     c001770b <ACPI::close(int, int, void*)+0x17>
c0017701:	b8 00 00 00 00       	mov    eax,0x0
c0017706:	e9 9a 00 00 00       	jmp    c00177a5 <ACPI::close(int, int, void*)+0xb1>
c001770b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017710:	75 37                	jne    c0017749 <ACPI::close(int, int, void*)+0x55>
c0017712:	83 ec 0c             	sub    esp,0xc
c0017715:	68 a0 b2 02 c0       	push   0xc002b2a0
c001771a:	e8 b5 b6 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001771f:	83 c4 10             	add    esp,0x10
c0017722:	a1 68 09 03 c0       	mov    eax,ds:0xc0030968
c0017727:	85 c0                	test   eax,eax
c0017729:	74 07                	je     c0017732 <ACPI::close(int, int, void*)+0x3e>
c001772b:	a1 68 09 03 c0       	mov    eax,ds:0xc0030968
c0017730:	ff d0                	call   eax
c0017732:	83 ec 0c             	sub    esp,0xc
c0017735:	68 c4 b3 02 c0       	push   0xc002b3c4
c001773a:	e8 70 2d 00 00       	call   c001a4af <Krnl::panic(char const*)>
c001773f:	83 c4 10             	add    esp,0x10
c0017742:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017747:	eb 5c                	jmp    c00177a5 <ACPI::close(int, int, void*)+0xb1>
c0017749:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001774e:	75 50                	jne    c00177a0 <ACPI::close(int, int, void*)+0xac>
c0017750:	a1 64 09 03 c0       	mov    eax,ds:0xc0030964
c0017755:	85 c0                	test   eax,eax
c0017757:	74 07                	je     c0017760 <ACPI::close(int, int, void*)+0x6c>
c0017759:	a1 64 09 03 c0       	mov    eax,ds:0xc0030964
c001775e:	ff d0                	call   eax
c0017760:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017765:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001776a:	83 e0 02             	and    eax,0x2
c001776d:	74 1c                	je     c001778b <ACPI::close(int, int, void*)+0x97>
c001776f:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001777a:	89 c2                	mov    edx,eax
c001777c:	ec                   	in     al,dx
c001777d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017781:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017785:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017789:	eb da                	jmp    c0017765 <ACPI::close(int, int, void*)+0x71>
c001778b:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0017792:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0017797:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001779b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001779f:	ee                   	out    dx,al
c00177a0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00177a5:	83 c4 1c             	add    esp,0x1c
c00177a8:	c3                   	ret    

c00177a9 <findRSDP()>:
c00177a9:	83 ec 1c             	sub    esp,0x1c
c00177ac:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c00177b1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00177b7:	83 e0 04             	and    eax,0x4
c00177ba:	84 c0                	test   al,al
c00177bc:	75 07                	jne    c00177c5 <findRSDP()+0x1c>
c00177be:	b8 00 00 00 00       	mov    eax,0x0
c00177c3:	eb 6a                	jmp    c001782f <findRSDP()+0x86>
c00177c5:	a1 f4 e2 02 c0       	mov    eax,ds:0xc002e2f4
c00177ca:	3d ff 07 00 00       	cmp    eax,0x7ff
c00177cf:	7f 1b                	jg     c00177ec <findRSDP()+0x43>
c00177d1:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c00177d6:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00177dc:	83 e2 fb             	and    edx,0xfffffffb
c00177df:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00177e5:	b8 00 00 00 00       	mov    eax,0x0
c00177ea:	eb 43                	jmp    c001782f <findRSDP()+0x86>
c00177ec:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00177f4:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00177fc:	77 2c                	ja     c001782a <findRSDP()+0x81>
c00177fe:	83 ec 04             	sub    esp,0x4
c0017801:	6a 08                	push   0x8
c0017803:	68 ad b2 02 c0       	push   0xc002b2ad
c0017808:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001780c:	e8 2f 8e fe ff       	call   c0000640 <memcmp>
c0017811:	83 c4 10             	add    esp,0x10
c0017814:	85 c0                	test   eax,eax
c0017816:	0f 94 c0             	sete   al
c0017819:	84 c0                	test   al,al
c001781b:	74 06                	je     c0017823 <findRSDP()+0x7a>
c001781d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017821:	eb 0c                	jmp    c001782f <findRSDP()+0x86>
c0017823:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017828:	eb ca                	jmp    c00177f4 <findRSDP()+0x4b>
c001782a:	b8 00 00 00 00       	mov    eax,0x0
c001782f:	83 c4 1c             	add    esp,0x1c
c0017832:	c3                   	ret    

c0017833 <loadACPITables(unsigned char*)>:
c0017833:	56                   	push   esi
c0017834:	53                   	push   ebx
c0017835:	83 ec 44             	sub    esp,0x44
c0017838:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c001783d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017843:	83 e0 04             	and    eax,0x4
c0017846:	84 c0                	test   al,al
c0017848:	0f 84 05 02 00 00    	je     c0017a53 <loadACPITables(unsigned char*)+0x220>
c001784e:	a0 80 0b 03 c0       	mov    al,ds:0xc0030b80
c0017853:	84 c0                	test   al,al
c0017855:	74 75                	je     c00178cc <loadACPITables(unsigned char*)+0x99>
c0017857:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001785b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001785f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017863:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017866:	83 e8 24             	sub    eax,0x24
c0017869:	c1 e8 03             	shr    eax,0x3
c001786c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017870:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017878:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001787c:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0017880:	0f 8d b2 00 00 00    	jge    c0017938 <loadACPITables(unsigned char*)+0x105>
c0017886:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001788a:	83 c0 24             	add    eax,0x24
c001788d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017891:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017895:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017899:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001789d:	c1 e0 03             	shl    eax,0x3
c00178a0:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c00178a4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00178a8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00178ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00178ad:	89 c1                	mov    ecx,eax
c00178af:	a1 6c 09 03 c0       	mov    eax,ds:0xc003096c
c00178b4:	8d 50 01             	lea    edx,[eax+0x1]
c00178b7:	89 15 6c 09 03 c0    	mov    DWORD PTR ds:0xc003096c,edx
c00178bd:	89 ca                	mov    edx,ecx
c00178bf:	89 14 c5 84 09 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf67c],edx
c00178c6:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c00178ca:	eb ac                	jmp    c0017878 <loadACPITables(unsigned char*)+0x45>
c00178cc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00178d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00178d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178db:	83 e8 24             	sub    eax,0x24
c00178de:	c1 e8 02             	shr    eax,0x2
c00178e1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00178e5:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c00178ed:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00178f1:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c00178f5:	7d 41                	jge    c0017938 <loadACPITables(unsigned char*)+0x105>
c00178f7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00178fb:	83 c0 24             	add    eax,0x24
c00178fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017902:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017906:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001790a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001790e:	c1 e0 02             	shl    eax,0x2
c0017911:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0017915:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017919:	8b 08                	mov    ecx,DWORD PTR [eax]
c001791b:	a1 6c 09 03 c0       	mov    eax,ds:0xc003096c
c0017920:	8d 50 01             	lea    edx,[eax+0x1]
c0017923:	89 15 6c 09 03 c0    	mov    DWORD PTR ds:0xc003096c,edx
c0017929:	89 ca                	mov    edx,ecx
c001792b:	89 14 c5 84 09 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf67c],edx
c0017932:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017936:	eb b5                	jmp    c00178ed <loadACPITables(unsigned char*)+0xba>
c0017938:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017940:	a1 6c 09 03 c0       	mov    eax,ds:0xc003096c
c0017945:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017949:	0f 8d 05 01 00 00    	jge    c0017a54 <loadACPITables(unsigned char*)+0x221>
c001794f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017953:	8b 04 c5 84 09 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf67c]
c001795a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001795e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017962:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001796a:	25 ff 0f 00 00       	and    eax,0xfff
c001796f:	89 c6                	mov    esi,eax
c0017971:	e8 a8 a4 ff ff       	call   c0011e1e <Virt::getAKernelVAS()>
c0017976:	89 c3                	mov    ebx,eax
c0017978:	83 ec 0c             	sub    esp,0xc
c001797b:	6a 01                	push   0x1
c001797d:	e8 f5 a1 ff ff       	call   c0011b77 <Virt::allocateKernelVirtualPages(int)>
c0017982:	83 c4 10             	add    esp,0x10
c0017985:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017989:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001798f:	83 ec 0c             	sub    esp,0xc
c0017992:	6a 01                	push   0x1
c0017994:	6a 01                	push   0x1
c0017996:	50                   	push   eax
c0017997:	52                   	push   edx
c0017998:	53                   	push   ebx
c0017999:	e8 96 ab ff ff       	call   c0012534 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001799e:	83 c4 20             	add    esp,0x20
c00179a1:	09 f0                	or     eax,esi
c00179a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00179a7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00179ab:	c1 e0 03             	shl    eax,0x3
c00179ae:	05 80 09 03 c0       	add    eax,0xc0030980
c00179b3:	83 ec 04             	sub    esp,0x4
c00179b6:	6a 04                	push   0x4
c00179b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00179bc:	50                   	push   eax
c00179bd:	e8 82 8d fe ff       	call   c0000744 <memcpy>
c00179c2:	83 c4 10             	add    esp,0x10
c00179c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179c9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179cc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00179d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00179d4:	05 00 10 00 00       	add    eax,0x1000
c00179d9:	c1 e8 0c             	shr    eax,0xc
c00179dc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00179e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00179e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179eb:	25 ff 0f 00 00       	and    eax,0xfff
c00179f0:	89 c6                	mov    esi,eax
c00179f2:	e8 27 a4 ff ff       	call   c0011e1e <Virt::getAKernelVAS()>
c00179f7:	89 c3                	mov    ebx,eax
c00179f9:	83 ec 0c             	sub    esp,0xc
c00179fc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017a00:	e8 72 a1 ff ff       	call   c0011b77 <Virt::allocateKernelVirtualPages(int)>
c0017a05:	83 c4 10             	add    esp,0x10
c0017a08:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017a0c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017a12:	83 ec 0c             	sub    esp,0xc
c0017a15:	6a 01                	push   0x1
c0017a17:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017a1b:	50                   	push   eax
c0017a1c:	52                   	push   edx
c0017a1d:	53                   	push   ebx
c0017a1e:	e8 11 ab ff ff       	call   c0012534 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017a23:	83 c4 20             	add    esp,0x20
c0017a26:	09 f0                	or     eax,esi
c0017a28:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017a2f:	83 ec 0c             	sub    esp,0xc
c0017a32:	50                   	push   eax
c0017a33:	e8 a1 a4 ff ff       	call   c0011ed9 <Virt::freeKernelVirtualPages(unsigned long)>
c0017a38:	83 c4 10             	add    esp,0x10
c0017a3b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a3f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017a43:	89 14 c5 84 09 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf67c],edx
c0017a4a:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017a4e:	e9 ed fe ff ff       	jmp    c0017940 <loadACPITables(unsigned char*)+0x10d>
c0017a53:	90                   	nop
c0017a54:	83 c4 44             	add    esp,0x44
c0017a57:	5b                   	pop    ebx
c0017a58:	5e                   	pop    esi
c0017a59:	c3                   	ret    

c0017a5a <findRSDT(unsigned char*)>:
c0017a5a:	56                   	push   esi
c0017a5b:	53                   	push   ebx
c0017a5c:	83 ec 44             	sub    esp,0x44
c0017a5f:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c0017a64:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017a6a:	83 e0 04             	and    eax,0x4
c0017a6d:	84 c0                	test   al,al
c0017a6f:	75 0a                	jne    c0017a7b <findRSDT(unsigned char*)+0x21>
c0017a71:	b8 00 00 00 00       	mov    eax,0x0
c0017a76:	e9 f7 00 00 00       	jmp    c0017b72 <findRSDT(unsigned char*)+0x118>
c0017a7b:	83 ec 04             	sub    esp,0x4
c0017a7e:	6a 24                	push   0x24
c0017a80:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017a84:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017a88:	50                   	push   eax
c0017a89:	e8 b6 8c fe ff       	call   c0000744 <memcpy>
c0017a8e:	83 c4 10             	add    esp,0x10
c0017a91:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017a95:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017a99:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017aa1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017aa5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017aa9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017aad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017ab1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017ab5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ab9:	25 ff 0f 00 00       	and    eax,0xfff
c0017abe:	89 c6                	mov    esi,eax
c0017ac0:	e8 59 a3 ff ff       	call   c0011e1e <Virt::getAKernelVAS()>
c0017ac5:	89 c3                	mov    ebx,eax
c0017ac7:	83 ec 0c             	sub    esp,0xc
c0017aca:	6a 02                	push   0x2
c0017acc:	e8 a6 a0 ff ff       	call   c0011b77 <Virt::allocateKernelVirtualPages(int)>
c0017ad1:	83 c4 10             	add    esp,0x10
c0017ad4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017ad8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017ade:	83 ec 0c             	sub    esp,0xc
c0017ae1:	6a 01                	push   0x1
c0017ae3:	6a 02                	push   0x2
c0017ae5:	50                   	push   eax
c0017ae6:	52                   	push   edx
c0017ae7:	53                   	push   ebx
c0017ae8:	e8 47 aa ff ff       	call   c0012534 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017aed:	83 c4 20             	add    esp,0x20
c0017af0:	09 f0                	or     eax,esi
c0017af2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017af6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017afa:	25 ff 0f 00 00       	and    eax,0xfff
c0017aff:	89 c6                	mov    esi,eax
c0017b01:	e8 18 a3 ff ff       	call   c0011e1e <Virt::getAKernelVAS()>
c0017b06:	89 c3                	mov    ebx,eax
c0017b08:	83 ec 0c             	sub    esp,0xc
c0017b0b:	6a 02                	push   0x2
c0017b0d:	e8 65 a0 ff ff       	call   c0011b77 <Virt::allocateKernelVirtualPages(int)>
c0017b12:	83 c4 10             	add    esp,0x10
c0017b15:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017b19:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b1f:	83 ec 0c             	sub    esp,0xc
c0017b22:	6a 01                	push   0x1
c0017b24:	6a 02                	push   0x2
c0017b26:	50                   	push   eax
c0017b27:	52                   	push   edx
c0017b28:	53                   	push   ebx
c0017b29:	e8 06 aa ff ff       	call   c0012534 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017b2e:	83 c4 20             	add    esp,0x20
c0017b31:	09 f0                	or     eax,esi
c0017b33:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017b37:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017b3c:	75 11                	jne    c0017b4f <findRSDT(unsigned char*)+0xf5>
c0017b3e:	c6 05 80 0b 03 c0 00 	mov    BYTE PTR ds:0xc0030b80,0x0
c0017b45:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b49:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017b4d:	eb 1f                	jmp    c0017b6e <findRSDT(unsigned char*)+0x114>
c0017b4f:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017b54:	75 11                	jne    c0017b67 <findRSDT(unsigned char*)+0x10d>
c0017b56:	c6 05 80 0b 03 c0 01 	mov    BYTE PTR ds:0xc0030b80,0x1
c0017b5d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b61:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017b65:	eb 07                	jmp    c0017b6e <findRSDT(unsigned char*)+0x114>
c0017b67:	b8 00 00 00 00       	mov    eax,0x0
c0017b6c:	eb 04                	jmp    c0017b72 <findRSDT(unsigned char*)+0x118>
c0017b6e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017b72:	83 c4 44             	add    esp,0x44
c0017b75:	5b                   	pop    ebx
c0017b76:	5e                   	pop    esi
c0017b77:	c3                   	ret    

c0017b78 <findDataTable(unsigned char*, char*)>:
c0017b78:	83 ec 1c             	sub    esp,0x1c
c0017b7b:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c0017b80:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017b86:	83 e0 04             	and    eax,0x4
c0017b89:	84 c0                	test   al,al
c0017b8b:	75 07                	jne    c0017b94 <findDataTable(unsigned char*, char*)+0x1c>
c0017b8d:	b8 00 00 00 00       	mov    eax,0x0
c0017b92:	eb 7c                	jmp    c0017c10 <findDataTable(unsigned char*, char*)+0x98>
c0017b94:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017b9c:	a1 6c 09 03 c0       	mov    eax,ds:0xc003096c
c0017ba1:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017ba5:	7d 3a                	jge    c0017be1 <findDataTable(unsigned char*, char*)+0x69>
c0017ba7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017bab:	c1 e0 03             	shl    eax,0x3
c0017bae:	05 80 09 03 c0       	add    eax,0xc0030980
c0017bb3:	83 ec 04             	sub    esp,0x4
c0017bb6:	6a 04                	push   0x4
c0017bb8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017bbc:	50                   	push   eax
c0017bbd:	e8 7e 8a fe ff       	call   c0000640 <memcmp>
c0017bc2:	83 c4 10             	add    esp,0x10
c0017bc5:	85 c0                	test   eax,eax
c0017bc7:	0f 94 c0             	sete   al
c0017bca:	84 c0                	test   al,al
c0017bcc:	74 0d                	je     c0017bdb <findDataTable(unsigned char*, char*)+0x63>
c0017bce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017bd2:	8b 04 c5 84 09 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf67c]
c0017bd9:	eb 35                	jmp    c0017c10 <findDataTable(unsigned char*, char*)+0x98>
c0017bdb:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017bdf:	eb bb                	jmp    c0017b9c <findDataTable(unsigned char*, char*)+0x24>
c0017be1:	a0 80 0b 03 c0       	mov    al,ds:0xc0030b80
c0017be6:	84 c0                	test   al,al
c0017be8:	74 07                	je     c0017bf1 <findDataTable(unsigned char*, char*)+0x79>
c0017bea:	b8 58 00 00 00       	mov    eax,0x58
c0017bef:	eb 05                	jmp    c0017bf6 <findDataTable(unsigned char*, char*)+0x7e>
c0017bf1:	b8 52 00 00 00       	mov    eax,0x52
c0017bf6:	83 ec 04             	sub    esp,0x4
c0017bf9:	50                   	push   eax
c0017bfa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017bfe:	68 e8 b3 02 c0       	push   0xc002b3e8
c0017c03:	e8 cc b1 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0017c08:	83 c4 10             	add    esp,0x10
c0017c0b:	b8 00 00 00 00       	mov    eax,0x0
c0017c10:	83 c4 1c             	add    esp,0x1c
c0017c13:	c3                   	ret    

c0017c14 <scanMADT()>:
c0017c14:	53                   	push   ebx
c0017c15:	83 ec 38             	sub    esp,0x38
c0017c18:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c0017c1d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017c23:	83 e0 04             	and    eax,0x4
c0017c26:	84 c0                	test   al,al
c0017c28:	0f 84 63 04 00 00    	je     c0018091 <scanMADT()+0x47d>
c0017c2e:	e8 76 fb ff ff       	call   c00177a9 <findRSDP()>
c0017c33:	a3 8c 0b 03 c0       	mov    ds:0xc0030b8c,eax
c0017c38:	a1 8c 0b 03 c0       	mov    eax,ds:0xc0030b8c
c0017c3d:	85 c0                	test   eax,eax
c0017c3f:	75 19                	jne    c0017c5a <scanMADT()+0x46>
c0017c41:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c0017c46:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017c4c:	83 e2 fb             	and    edx,0xfffffffb
c0017c4f:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017c55:	e9 3b 04 00 00       	jmp    c0018095 <scanMADT()+0x481>
c0017c5a:	a1 8c 0b 03 c0       	mov    eax,ds:0xc0030b8c
c0017c5f:	83 ec 0c             	sub    esp,0xc
c0017c62:	50                   	push   eax
c0017c63:	e8 f2 fd ff ff       	call   c0017a5a <findRSDT(unsigned char*)>
c0017c68:	83 c4 10             	add    esp,0x10
c0017c6b:	a3 88 0b 03 c0       	mov    ds:0xc0030b88,eax
c0017c70:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c0017c75:	85 c0                	test   eax,eax
c0017c77:	75 19                	jne    c0017c92 <scanMADT()+0x7e>
c0017c79:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c0017c7e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017c84:	83 e2 fb             	and    edx,0xfffffffb
c0017c87:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017c8d:	e9 03 04 00 00       	jmp    c0018095 <scanMADT()+0x481>
c0017c92:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c0017c97:	83 ec 0c             	sub    esp,0xc
c0017c9a:	50                   	push   eax
c0017c9b:	e8 93 fb ff ff       	call   c0017833 <loadACPITables(unsigned char*)>
c0017ca0:	83 c4 10             	add    esp,0x10
c0017ca3:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c0017ca8:	83 ec 08             	sub    esp,0x8
c0017cab:	68 b6 b2 02 c0       	push   0xc002b2b6
c0017cb0:	50                   	push   eax
c0017cb1:	e8 c2 fe ff ff       	call   c0017b78 <findDataTable(unsigned char*, char*)>
c0017cb6:	83 c4 10             	add    esp,0x10
c0017cb9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017cbd:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017cc2:	75 19                	jne    c0017cdd <scanMADT()+0xc9>
c0017cc4:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c0017cc9:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017ccf:	83 e2 fe             	and    edx,0xfffffffe
c0017cd2:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017cd8:	e9 b8 03 00 00       	jmp    c0018095 <scanMADT()+0x481>
c0017cdd:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017ce5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ce9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017cec:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017cf0:	0f 87 9f 03 00 00    	ja     c0018095 <scanMADT()+0x481>
c0017cf6:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017cfe:	0f 87 91 03 00 00    	ja     c0018095 <scanMADT()+0x481>
c0017d04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d08:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017d0c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d10:	8d 50 01             	lea    edx,[eax+0x1]
c0017d13:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017d17:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d1b:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017d1f:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017d23:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d27:	8d 50 01             	lea    edx,[eax+0x1]
c0017d2a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017d2e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d32:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017d36:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017d3a:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017d3f:	0f 86 4f 03 00 00    	jbe    c0018094 <scanMADT()+0x480>
c0017d45:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017d4a:	75 57                	jne    c0017da3 <scanMADT()+0x18f>
c0017d4c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d50:	8d 50 01             	lea    edx,[eax+0x1]
c0017d53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017d57:	8a 15 80 0d 03 c0    	mov    dl,BYTE PTR ds:0xc0030d80
c0017d5d:	0f b6 d2             	movzx  edx,dl
c0017d60:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017d64:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017d68:	88 82 c0 0d 03 c0    	mov    BYTE PTR [edx-0x3ffcf240],al
c0017d6e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d72:	8d 50 01             	lea    edx,[eax+0x1]
c0017d75:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017d79:	8a 15 80 0d 03 c0    	mov    dl,BYTE PTR ds:0xc0030d80
c0017d7f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017d82:	88 0d 80 0d 03 c0    	mov    BYTE PTR ds:0xc0030d80,cl
c0017d88:	0f b6 d2             	movzx  edx,dl
c0017d8b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017d8f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017d93:	88 82 a0 0d 03 c0    	mov    BYTE PTR [edx-0x3ffcf260],al
c0017d99:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017d9e:	e9 da 02 00 00       	jmp    c001807d <scanMADT()+0x469>
c0017da3:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017da8:	0f 85 14 01 00 00    	jne    c0017ec2 <scanMADT()+0x2ae>
c0017dae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017db2:	8d 50 01             	lea    edx,[eax+0x1]
c0017db5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017db9:	8a 15 40 0c 03 c0    	mov    dl,BYTE PTR ds:0xc0030c40
c0017dbf:	0f b6 d2             	movzx  edx,dl
c0017dc2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017dc6:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017dca:	88 82 60 0c 03 c0    	mov    BYTE PTR [edx-0x3ffcf3a0],al
c0017dd0:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017dd4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017dd8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ddc:	01 d0                	add    eax,edx
c0017dde:	83 c0 2c             	add    eax,0x2c
c0017de1:	8a 00                	mov    al,BYTE PTR [eax]
c0017de3:	0f b6 d0             	movzx  edx,al
c0017de6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017dea:	8d 48 01             	lea    ecx,[eax+0x1]
c0017ded:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017df1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017df5:	0f b6 c0             	movzx  eax,al
c0017df8:	c1 e0 08             	shl    eax,0x8
c0017dfb:	89 d1                	mov    ecx,edx
c0017dfd:	09 c1                	or     ecx,eax
c0017dff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e03:	8d 50 02             	lea    edx,[eax+0x2]
c0017e06:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e0a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017e0e:	0f b6 c0             	movzx  eax,al
c0017e11:	c1 e0 10             	shl    eax,0x10
c0017e14:	09 c1                	or     ecx,eax
c0017e16:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e1a:	8d 50 03             	lea    edx,[eax+0x3]
c0017e1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e21:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017e25:	0f b6 c0             	movzx  eax,al
c0017e28:	c1 e0 18             	shl    eax,0x18
c0017e2b:	09 c1                	or     ecx,eax
c0017e2d:	89 ca                	mov    edx,ecx
c0017e2f:	a0 40 0c 03 c0       	mov    al,ds:0xc0030c40
c0017e34:	0f b6 c0             	movzx  eax,al
c0017e37:	89 14 85 80 0c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf380],edx
c0017e3e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017e43:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e47:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e4b:	01 d0                	add    eax,edx
c0017e4d:	83 c0 2c             	add    eax,0x2c
c0017e50:	8a 00                	mov    al,BYTE PTR [eax]
c0017e52:	0f b6 d0             	movzx  edx,al
c0017e55:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e59:	8d 48 01             	lea    ecx,[eax+0x1]
c0017e5c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e60:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017e64:	0f b6 c0             	movzx  eax,al
c0017e67:	c1 e0 08             	shl    eax,0x8
c0017e6a:	89 d1                	mov    ecx,edx
c0017e6c:	09 c1                	or     ecx,eax
c0017e6e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e72:	8d 50 02             	lea    edx,[eax+0x2]
c0017e75:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e79:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017e7d:	0f b6 c0             	movzx  eax,al
c0017e80:	c1 e0 10             	shl    eax,0x10
c0017e83:	09 c1                	or     ecx,eax
c0017e85:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e89:	8d 50 03             	lea    edx,[eax+0x3]
c0017e8c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e90:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017e94:	0f b6 c0             	movzx  eax,al
c0017e97:	c1 e0 18             	shl    eax,0x18
c0017e9a:	09 c1                	or     ecx,eax
c0017e9c:	89 ca                	mov    edx,ecx
c0017e9e:	a0 40 0c 03 c0       	mov    al,ds:0xc0030c40
c0017ea3:	0f b6 c0             	movzx  eax,al
c0017ea6:	89 14 85 00 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf300],edx
c0017ead:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017eb2:	a0 40 0c 03 c0       	mov    al,ds:0xc0030c40
c0017eb7:	40                   	inc    eax
c0017eb8:	a2 40 0c 03 c0       	mov    ds:0xc0030c40,al
c0017ebd:	e9 bb 01 00 00       	jmp    c001807d <scanMADT()+0x469>
c0017ec2:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017ec7:	0f 85 e9 00 00 00    	jne    c0017fb6 <scanMADT()+0x3a2>
c0017ecd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ed1:	8d 50 01             	lea    edx,[eax+0x1]
c0017ed4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ed8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017edc:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017ee0:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017ee4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ee8:	8d 50 01             	lea    edx,[eax+0x1]
c0017eeb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017eef:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ef3:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017ef7:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017efb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f03:	01 d0                	add    eax,edx
c0017f05:	83 c0 2c             	add    eax,0x2c
c0017f08:	8a 00                	mov    al,BYTE PTR [eax]
c0017f0a:	0f b6 d0             	movzx  edx,al
c0017f0d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f11:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f14:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f18:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017f1c:	0f b6 c0             	movzx  eax,al
c0017f1f:	c1 e0 08             	shl    eax,0x8
c0017f22:	89 d1                	mov    ecx,edx
c0017f24:	09 c1                	or     ecx,eax
c0017f26:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f2a:	8d 50 02             	lea    edx,[eax+0x2]
c0017f2d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f31:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f35:	0f b6 c0             	movzx  eax,al
c0017f38:	c1 e0 10             	shl    eax,0x10
c0017f3b:	09 c1                	or     ecx,eax
c0017f3d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f41:	8d 50 03             	lea    edx,[eax+0x3]
c0017f44:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f48:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f4c:	0f b6 c0             	movzx  eax,al
c0017f4f:	c1 e0 18             	shl    eax,0x18
c0017f52:	09 c8                	or     eax,ecx
c0017f54:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017f58:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017f5d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f61:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f65:	01 d0                	add    eax,edx
c0017f67:	83 c0 2c             	add    eax,0x2c
c0017f6a:	8a 00                	mov    al,BYTE PTR [eax]
c0017f6c:	0f b6 c0             	movzx  eax,al
c0017f6f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017f73:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017f76:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f7a:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017f7e:	0f b6 d2             	movzx  edx,dl
c0017f81:	c1 e2 08             	shl    edx,0x8
c0017f84:	09 d0                	or     eax,edx
c0017f86:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017f8b:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017f90:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017f95:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017f99:	88 90 00 d5 02 c0    	mov    BYTE PTR [eax-0x3ffd2b00],dl
c0017f9f:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017fa4:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017fa9:	66 89 84 12 20 0c 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf3e0],ax
c0017fb1:	e9 c7 00 00 00       	jmp    c001807d <scanMADT()+0x469>
c0017fb6:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017fbb:	0f 85 b0 00 00 00    	jne    c0018071 <scanMADT()+0x45d>
c0017fc1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fc5:	8d 50 01             	lea    edx,[eax+0x1]
c0017fc8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fcc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fd0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017fd4:	0f b6 c0             	movzx  eax,al
c0017fd7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017fdb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fdf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fe3:	01 d0                	add    eax,edx
c0017fe5:	83 c0 2c             	add    eax,0x2c
c0017fe8:	8a 00                	mov    al,BYTE PTR [eax]
c0017fea:	0f b6 d0             	movzx  edx,al
c0017fed:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ff1:	8d 48 01             	lea    ecx,[eax+0x1]
c0017ff4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ff8:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017ffc:	0f b6 c0             	movzx  eax,al
c0017fff:	c1 e0 08             	shl    eax,0x8
c0018002:	09 d0                	or     eax,edx
c0018004:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018008:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001800d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018011:	8d 50 01             	lea    edx,[eax+0x1]
c0018014:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018018:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001801c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018020:	0f b6 c0             	movzx  eax,al
c0018023:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001802b:	c1 e0 08             	shl    eax,0x8
c001802e:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0018032:	89 c1                	mov    ecx,eax
c0018034:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018038:	c1 e0 18             	shl    eax,0x18
c001803b:	89 c3                	mov    ebx,eax
c001803d:	a1 90 0b 03 c0       	mov    eax,ds:0xc0030b90
c0018042:	8d 50 01             	lea    edx,[eax+0x1]
c0018045:	89 15 90 0b 03 c0    	mov    DWORD PTR ds:0xc0030b90,edx
c001804b:	09 d9                	or     ecx,ebx
c001804d:	89 ca                	mov    edx,ecx
c001804f:	89 14 85 a0 0b 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf460],edx
c0018056:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001805a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001805e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018062:	68 18 b4 02 c0       	push   0xc002b418
c0018067:	e8 68 ad ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001806c:	83 c4 10             	add    esp,0x10
c001806f:	eb 0c                	jmp    c001807d <scanMADT()+0x469>
c0018071:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0018076:	75 05                	jne    c001807d <scanMADT()+0x469>
c0018078:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001807d:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0018082:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018086:	01 d0                	add    eax,edx
c0018088:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001808c:	e9 54 fc ff ff       	jmp    c0017ce5 <scanMADT()+0xd1>
c0018091:	90                   	nop
c0018092:	eb 01                	jmp    c0018095 <scanMADT()+0x481>
c0018094:	90                   	nop
c0018095:	83 c4 38             	add    esp,0x38
c0018098:	5b                   	pop    ebx
c0018099:	c3                   	ret    

c001809a <ACPI::ACPI()>:
c001809a:	83 ec 0c             	sub    esp,0xc
c001809d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180a1:	83 ec 08             	sub    esp,0x8
c00180a4:	68 bb b2 02 c0       	push   0xc002b2bb
c00180a9:	50                   	push   eax
c00180aa:	e8 3b c3 ff ff       	call   c00143ea <Device::Device(char const*)>
c00180af:	83 c4 10             	add    esp,0x10
c00180b2:	ba 8c b4 02 c0       	mov    edx,0xc002b48c
c00180b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180bb:	89 10                	mov    DWORD PTR [eax],edx
c00180bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180c1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00180c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180cc:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00180d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180da:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c00180e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180e8:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00180ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180f3:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00180fa:	e8 15 fb ff ff       	call   c0017c14 <scanMADT()>
c00180ff:	90                   	nop
c0018100:	83 c4 0c             	add    esp,0xc
c0018103:	c3                   	ret    

c0018104 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0018104:	83 ec 2c             	sub    esp,0x2c
c0018107:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001810b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001810f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018113:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018117:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001811c:	88 d0                	mov    al,dl
c001811e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018122:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0018127:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001812f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018133:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018139:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001813d:	0f 8d 97 00 00 00    	jge    c00181da <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0018143:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018147:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001814b:	83 c2 2a             	add    edx,0x2a
c001814e:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0018152:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0018157:	75 78                	jne    c00181d1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018159:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001815d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018161:	83 c2 2a             	add    edx,0x2a
c0018164:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0018168:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c001816c:	75 63                	jne    c00181d1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001816e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018173:	74 3a                	je     c00181af <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0018175:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018179:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001817d:	83 c2 2a             	add    edx,0x2a
c0018180:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0018184:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018188:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001818b:	39 c2                	cmp    edx,eax
c001818d:	74 10                	je     c001819f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c001818f:	83 ec 0c             	sub    esp,0xc
c0018192:	68 54 b4 02 c0       	push   0xc002b454
c0018197:	e8 13 23 00 00       	call   c001a4af <Krnl::panic(char const*)>
c001819c:	83 c4 10             	add    esp,0x10
c001819f:	83 ec 0c             	sub    esp,0xc
c00181a2:	68 c0 b2 02 c0       	push   0xc002b2c0
c00181a7:	e8 03 23 00 00       	call   c001a4af <Krnl::panic(char const*)>
c00181ac:	83 c4 10             	add    esp,0x10
c00181af:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00181b3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00181b7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00181bb:	83 c2 2a             	add    edx,0x2a
c00181be:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00181c2:	8b 02                	mov    eax,DWORD PTR [edx]
c00181c4:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00181c7:	89 01                	mov    DWORD PTR [ecx],eax
c00181c9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00181cc:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00181d1:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00181d5:	e9 55 ff ff ff       	jmp    c001812f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00181da:	90                   	nop
c00181db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00181df:	83 c4 2c             	add    esp,0x2c
c00181e2:	c2 04 00             	ret    0x4
c00181e5:	90                   	nop

c00181e6 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00181e6:	83 ec 1c             	sub    esp,0x1c
c00181e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181ed:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00181f1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00181f5:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00181fa:	88 c8                	mov    al,cl
c00181fc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018200:	88 d0                	mov    al,dl
c0018202:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018206:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001820a:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018210:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018214:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018217:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c001821b:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c001821f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018223:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018229:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001822d:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0018230:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018234:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0018239:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001823d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018243:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018247:	8d 48 01             	lea    ecx,[eax+0x1]
c001824a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001824e:	83 c2 2a             	add    edx,0x2a
c0018251:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0018255:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018259:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001825f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018263:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018266:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001826a:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001826e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018272:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018278:	8d 50 01             	lea    edx,[eax+0x1]
c001827b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001827f:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0018285:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018289:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001828f:	3d 00 02 00 00       	cmp    eax,0x200
c0018294:	75 10                	jne    c00182a6 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0018296:	83 ec 0c             	sub    esp,0xc
c0018299:	68 cf b2 02 c0       	push   0xc002b2cf
c001829e:	e8 0c 22 00 00       	call   c001a4af <Krnl::panic(char const*)>
c00182a3:	83 c4 10             	add    esp,0x10
c00182a6:	90                   	nop
c00182a7:	83 c4 1c             	add    esp,0x1c
c00182aa:	c3                   	ret    
c00182ab:	90                   	nop

c00182ac <ACPI::setScreenBrightnessLevel(void*, int)>:
c00182ac:	b8 00 00 00 00       	mov    eax,0x0
c00182b1:	c3                   	ret    

c00182b2 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00182b2:	83 ec 1c             	sub    esp,0x1c
c00182b5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00182b9:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00182bc:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00182c0:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c00182c5:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00182ca:	83 ec 08             	sub    esp,0x8
c00182cd:	52                   	push   edx
c00182ce:	50                   	push   eax
c00182cf:	e8 84 6b ff ff       	call   c000ee58 <Computer::readCMOS(unsigned char)>
c00182d4:	83 c4 10             	add    esp,0x10
c00182d7:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00182db:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c00182e0:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00182e5:	83 ec 04             	sub    esp,0x4
c00182e8:	6a 01                	push   0x1
c00182ea:	52                   	push   edx
c00182eb:	50                   	push   eax
c00182ec:	e8 7d 6c ff ff       	call   c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>
c00182f1:	83 c4 10             	add    esp,0x10
c00182f4:	90                   	nop
c00182f5:	83 c4 1c             	add    esp,0x1c
c00182f8:	c3                   	ret    
c00182f9:	90                   	nop

c00182fa <ACPI::open(int, int, void*)>:
c00182fa:	53                   	push   ebx
c00182fb:	83 ec 28             	sub    esp,0x28
c00182fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018302:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018309:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001830d:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018314:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c0018319:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001831f:	83 e0 04             	and    eax,0x4
c0018322:	84 c0                	test   al,al
c0018324:	74 47                	je     c001836d <ACPI::open(int, int, void*)+0x73>
c0018326:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c001832b:	83 ec 08             	sub    esp,0x8
c001832e:	68 ec b2 02 c0       	push   0xc002b2ec
c0018333:	50                   	push   eax
c0018334:	e8 3f f8 ff ff       	call   c0017b78 <findDataTable(unsigned char*, char*)>
c0018339:	83 c4 10             	add    esp,0x10
c001833c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018340:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0018345:	74 26                	je     c001836d <ACPI::open(int, int, void*)+0x73>
c0018347:	83 ec 0c             	sub    esp,0xc
c001834a:	68 f1 b2 02 c0       	push   0xc002b2f1
c001834f:	e8 80 aa ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0018354:	83 c4 10             	add    esp,0x10
c0018357:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001835b:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018362:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018366:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001836d:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c0018375:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018379:	8a 00                	mov    al,BYTE PTR [eax]
c001837b:	3c 01                	cmp    al,0x1
c001837d:	75 28                	jne    c00183a7 <ACPI::open(int, int, void*)+0xad>
c001837f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018383:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001838a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001838e:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018395:	83 ec 0c             	sub    esp,0xc
c0018398:	68 02 b3 02 c0       	push   0xc002b302
c001839d:	e8 32 aa ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c00183a2:	83 c4 10             	add    esp,0x10
c00183a5:	eb 25                	jmp    c00183cc <ACPI::open(int, int, void*)+0xd2>
c00183a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00183ab:	8a 00                	mov    al,BYTE PTR [eax]
c00183ad:	3c 02                	cmp    al,0x2
c00183af:	75 1b                	jne    c00183cc <ACPI::open(int, int, void*)+0xd2>
c00183b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183b5:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00183bc:	83 ec 0c             	sub    esp,0xc
c00183bf:	68 0a b3 02 c0       	push   0xc002b30a
c00183c4:	e8 0b aa ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c00183c9:	83 c4 10             	add    esp,0x10
c00183cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183d0:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00183d6:	83 f0 01             	xor    eax,0x1
c00183d9:	84 c0                	test   al,al
c00183db:	74 6a                	je     c0018447 <ACPI::open(int, int, void*)+0x14d>
c00183dd:	83 ec 0c             	sub    esp,0xc
c00183e0:	68 12 b3 02 c0       	push   0xc002b312
c00183e5:	e8 ea a9 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c00183ea:	83 c4 10             	add    esp,0x10
c00183ed:	e8 5e 7d fe ff       	call   c0000150 <manualPCIProbe>
c00183f2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00183f6:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c00183fb:	75 28                	jne    c0018425 <ACPI::open(int, int, void*)+0x12b>
c00183fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018401:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018408:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001840c:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018413:	83 ec 0c             	sub    esp,0xc
c0018416:	68 20 b3 02 c0       	push   0xc002b320
c001841b:	e8 b4 a9 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0018420:	83 c4 10             	add    esp,0x10
c0018423:	eb 22                	jmp    c0018447 <ACPI::open(int, int, void*)+0x14d>
c0018425:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c001842a:	75 1b                	jne    c0018447 <ACPI::open(int, int, void*)+0x14d>
c001842c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018430:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018437:	83 ec 0c             	sub    esp,0xc
c001843a:	68 2a b3 02 c0       	push   0xc002b32a
c001843f:	e8 90 a9 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0018444:	83 c4 10             	add    esp,0x10
c0018447:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001844b:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018451:	84 c0                	test   al,al
c0018453:	74 13                	je     c0018468 <ACPI::open(int, int, void*)+0x16e>
c0018455:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018459:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c001845f:	83 f0 01             	xor    eax,0x1
c0018462:	0f b6 c0             	movzx  eax,al
c0018465:	40                   	inc    eax
c0018466:	eb 05                	jmp    c001846d <ACPI::open(int, int, void*)+0x173>
c0018468:	b8 00 00 00 00       	mov    eax,0x0
c001846d:	83 ec 08             	sub    esp,0x8
c0018470:	50                   	push   eax
c0018471:	68 34 b3 02 c0       	push   0xc002b334
c0018476:	e8 59 a9 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001847b:	83 c4 10             	add    esp,0x10
c001847e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018482:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018488:	84 c0                	test   al,al
c001848a:	74 67                	je     c00184f3 <ACPI::open(int, int, void*)+0x1f9>
c001848c:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c0018494:	83 ec 0c             	sub    esp,0xc
c0018497:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001849b:	e8 a0 73 ff ff       	call   c000f840 <malloc>
c00184a0:	83 c4 10             	add    esp,0x10
c00184a3:	89 c3                	mov    ebx,eax
c00184a5:	83 ec 0c             	sub    esp,0xc
c00184a8:	53                   	push   ebx
c00184a9:	e8 2c a3 00 00       	call   c00227da <PCI::PCI()>
c00184ae:	83 c4 10             	add    esp,0x10
c00184b1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00184b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184b9:	83 ec 08             	sub    esp,0x8
c00184bc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00184c0:	50                   	push   eax
c00184c1:	e8 34 bd ff ff       	call   c00141fa <Device::addChild(Device*)>
c00184c6:	83 c4 10             	add    esp,0x10
c00184c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00184cf:	83 c0 08             	add    eax,0x8
c00184d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00184d4:	6a 00                	push   0x0
c00184d6:	6a 00                	push   0x0
c00184d8:	6a 00                	push   0x0
c00184da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00184de:	ff d0                	call   eax
c00184e0:	83 c4 10             	add    esp,0x10
c00184e3:	83 ec 0c             	sub    esp,0xc
c00184e6:	68 3d b3 02 c0       	push   0xc002b33d
c00184eb:	e8 e4 a8 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c00184f0:	83 c4 10             	add    esp,0x10
c00184f3:	e8 bd 98 ff ff       	call   c0011db5 <Virt::swappingSetup()>
c00184f8:	83 ec 0c             	sub    esp,0xc
c00184fb:	68 48 b3 02 c0       	push   0xc002b348
c0018500:	e8 80 46 00 00       	call   c001cb85 <Thr::loadKernelSymbolTable(char const*)>
c0018505:	83 c4 10             	add    esp,0x10
c0018508:	8b 1d a8 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e2a8
c001850e:	83 ec 08             	sub    esp,0x8
c0018511:	6a 01                	push   0x1
c0018513:	68 66 b3 02 c0       	push   0xc002b366
c0018518:	e8 c5 50 00 00       	call   c001d5e2 <Thr::loadDLL(char const*, bool)>
c001851d:	83 c4 10             	add    esp,0x10
c0018520:	83 ec 08             	sub    esp,0x8
c0018523:	53                   	push   ebx
c0018524:	50                   	push   eax
c0018525:	e8 07 53 00 00       	call   c001d831 <Thr::executeDLL(unsigned long, void*)>
c001852a:	83 c4 10             	add    esp,0x10
c001852d:	8b 1d a8 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e2a8
c0018533:	83 ec 08             	sub    esp,0x8
c0018536:	6a 01                	push   0x1
c0018538:	68 83 b3 02 c0       	push   0xc002b383
c001853d:	e8 a0 50 00 00       	call   c001d5e2 <Thr::loadDLL(char const*, bool)>
c0018542:	83 c4 10             	add    esp,0x10
c0018545:	83 ec 08             	sub    esp,0x8
c0018548:	53                   	push   ebx
c0018549:	50                   	push   eax
c001854a:	e8 e2 52 00 00       	call   c001d831 <Thr::executeDLL(unsigned long, void*)>
c001854f:	83 c4 10             	add    esp,0x10
c0018552:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c0018557:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001855d:	83 e0 04             	and    eax,0x4
c0018560:	84 c0                	test   al,al
c0018562:	0f 84 d2 00 00 00    	je     c001863a <ACPI::open(int, int, void*)+0x340>
c0018568:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001856f:	83 ec 0c             	sub    esp,0xc
c0018572:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018576:	e8 c5 72 ff ff       	call   c000f840 <malloc>
c001857b:	83 c4 10             	add    esp,0x10
c001857e:	89 c3                	mov    ebx,eax
c0018580:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c0018585:	83 ec 04             	sub    esp,0x4
c0018588:	50                   	push   eax
c0018589:	68 a0 b3 02 c0       	push   0xc002b3a0
c001858e:	53                   	push   ebx
c001858f:	e8 98 ad ff ff       	call   c001332c <File::File(char const*, Process*)>
c0018594:	83 c4 10             	add    esp,0x10
c0018597:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001859b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00185a0:	74 17                	je     c00185b9 <ACPI::open(int, int, void*)+0x2bf>
c00185a2:	83 ec 0c             	sub    esp,0xc
c00185a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00185a9:	e8 50 b0 ff ff       	call   c00135fe <File::exists()>
c00185ae:	83 c4 10             	add    esp,0x10
c00185b1:	84 c0                	test   al,al
c00185b3:	74 04                	je     c00185b9 <ACPI::open(int, int, void*)+0x2bf>
c00185b5:	b0 01                	mov    al,0x1
c00185b7:	eb 02                	jmp    c00185bb <ACPI::open(int, int, void*)+0x2c1>
c00185b9:	b0 00                	mov    al,0x0
c00185bb:	84 c0                	test   al,al
c00185bd:	74 22                	je     c00185e1 <ACPI::open(int, int, void*)+0x2e7>
c00185bf:	83 ec 08             	sub    esp,0x8
c00185c2:	6a 01                	push   0x1
c00185c4:	68 a0 b3 02 c0       	push   0xc002b3a0
c00185c9:	e8 14 50 00 00       	call   c001d5e2 <Thr::loadDLL(char const*, bool)>
c00185ce:	83 c4 10             	add    esp,0x10
c00185d1:	83 ec 08             	sub    esp,0x8
c00185d4:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00185d8:	50                   	push   eax
c00185d9:	e8 53 52 00 00       	call   c001d831 <Thr::executeDLL(unsigned long, void*)>
c00185de:	83 c4 10             	add    esp,0x10
c00185e1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00185e6:	74 1e                	je     c0018606 <ACPI::open(int, int, void*)+0x30c>
c00185e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00185ed:	74 17                	je     c0018606 <ACPI::open(int, int, void*)+0x30c>
c00185ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00185f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00185f5:	83 c0 08             	add    eax,0x8
c00185f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00185fa:	83 ec 0c             	sub    esp,0xc
c00185fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018601:	ff d0                	call   eax
c0018603:	83 c4 10             	add    esp,0x10
c0018606:	a1 88 0b 03 c0       	mov    eax,ds:0xc0030b88
c001860b:	83 ec 08             	sub    esp,0x8
c001860e:	68 bd b3 02 c0       	push   0xc002b3bd
c0018613:	50                   	push   eax
c0018614:	e8 5f f5 ff ff       	call   c0017b78 <findDataTable(unsigned char*, char*)>
c0018619:	83 c4 10             	add    esp,0x10
c001861c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018620:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018625:	74 13                	je     c001863a <ACPI::open(int, int, void*)+0x340>
c0018627:	83 ec 08             	sub    esp,0x8
c001862a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001862e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018632:	e8 7b fc ff ff       	call   c00182b2 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018637:	83 c4 10             	add    esp,0x10
c001863a:	b8 00 00 00 00       	mov    eax,0x0
c001863f:	83 c4 28             	add    esp,0x28
c0018642:	5b                   	pop    ebx
c0018643:	c3                   	ret    

c0018644 <ACPI::sleep()>:
c0018644:	83 ec 0c             	sub    esp,0xc
c0018647:	a1 60 09 03 c0       	mov    eax,ds:0xc0030960
c001864c:	85 c0                	test   eax,eax
c001864e:	74 07                	je     c0018657 <ACPI::sleep()+0x13>
c0018650:	a1 60 09 03 c0       	mov    eax,ds:0xc0030960
c0018655:	ff d0                	call   eax
c0018657:	90                   	nop
c0018658:	83 c4 0c             	add    esp,0xc
c001865b:	c3                   	ret    

c001865c <CPU::close(int, int, void*)>:
c001865c:	31 c0                	xor    eax,eax
c001865e:	c3                   	ret    
c001865f:	90                   	nop

c0018660 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018660:	55                   	push   ebp
c0018661:	57                   	push   edi
c0018662:	56                   	push   esi
c0018663:	53                   	push   ebx
c0018664:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018668:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001866c:	89 ce                	mov    esi,ecx
c001866e:	89 d5                	mov    ebp,edx
c0018670:	80 f9 04             	cmp    cl,0x4
c0018673:	75 28                	jne    c001869d <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018675:	8d 42 f9             	lea    eax,[edx-0x7]
c0018678:	3c 03                	cmp    al,0x3
c001867a:	0f 86 63 01 00 00    	jbe    c00187e3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018680:	80 fa 03             	cmp    dl,0x3
c0018683:	0f 84 5a 01 00 00    	je     c00187e3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018689:	8d 7a f2             	lea    edi,[edx-0xe]
c001868c:	b8 d0 d6 02 c0       	mov    eax,0xc002d6d0
c0018691:	89 fb                	mov    ebx,edi
c0018693:	80 fb 01             	cmp    bl,0x1
c0018696:	77 4e                	ja     c00186e6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018698:	e9 52 01 00 00       	jmp    c00187ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001869d:	80 f9 05             	cmp    cl,0x5
c00186a0:	75 4d                	jne    c00186ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00186a2:	b8 e0 d6 02 c0       	mov    eax,0xc002d6e0
c00186a7:	80 fa 03             	cmp    dl,0x3
c00186aa:	0f 86 3f 01 00 00    	jbe    c00187ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186b0:	8d 7a fa             	lea    edi,[edx-0x6]
c00186b3:	b8 f0 d6 02 c0       	mov    eax,0xc002d6f0
c00186b8:	89 fb                	mov    ebx,edi
c00186ba:	80 fb 01             	cmp    bl,0x1
c00186bd:	0f 86 2c 01 00 00    	jbe    c00187ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186c3:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c00186c8:	80 fa 08             	cmp    dl,0x8
c00186cb:	0f 84 1e 01 00 00    	je     c00187ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186d1:	89 d7                	mov    edi,edx
c00186d3:	b8 10 d7 02 c0       	mov    eax,0xc002d710
c00186d8:	83 e7 fb             	and    edi,0xfffffffb
c00186db:	89 fb                	mov    ebx,edi
c00186dd:	80 fb 09             	cmp    bl,0x9
c00186e0:	0f 84 09 01 00 00    	je     c00187ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186e6:	31 c0                	xor    eax,eax
c00186e8:	89 eb                	mov    ebx,ebp
c00186ea:	0f b6 fb             	movzx  edi,bl
c00186ed:	eb 30                	jmp    c001871f <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00186ef:	31 c0                	xor    eax,eax
c00186f1:	80 f9 06             	cmp    cl,0x6
c00186f4:	75 f2                	jne    c00186e8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00186f6:	80 fa 0a             	cmp    dl,0xa
c00186f9:	77 ed                	ja     c00186e8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00186fb:	bf de 05 00 00       	mov    edi,0x5de
c0018700:	0f a3 d7             	bt     edi,edx
c0018703:	73 e3                	jae    c00186e8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018705:	b8 20 d7 02 c0       	mov    eax,0xc002d720
c001870a:	e9 e0 00 00 00       	jmp    c00187ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001870f:	39 c7                	cmp    edi,eax
c0018711:	0f 84 d3 00 00 00    	je     c00187ea <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018717:	40                   	inc    eax
c0018718:	3d d0 00 00 00       	cmp    eax,0xd0
c001871d:	74 09                	je     c0018728 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c001871f:	89 f3                	mov    ebx,esi
c0018721:	80 fb 0f             	cmp    bl,0xf
c0018724:	75 f1                	jne    c0018717 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018726:	eb e7                	jmp    c001870f <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018728:	80 f9 10             	cmp    cl,0x10
c001872b:	75 14                	jne    c0018741 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c001872d:	8d 42 fc             	lea    eax,[edx-0x4]
c0018730:	83 e0 fb             	and    eax,0xfffffffb
c0018733:	3c 02                	cmp    al,0x2
c0018735:	76 34                	jbe    c001876b <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018737:	b8 a2 b7 02 c0       	mov    eax,0xc002b7a2
c001873c:	80 fa 02             	cmp    dl,0x2
c001873f:	eb 24                	jmp    c0018765 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018741:	80 f9 11             	cmp    cl,0x11
c0018744:	75 13                	jne    c0018759 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018746:	b8 a2 b7 02 c0       	mov    eax,0xc002b7a2
c001874b:	80 fa 03             	cmp    dl,0x3
c001874e:	0f 85 9b 00 00 00    	jne    c00187ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018754:	e9 91 00 00 00       	jmp    c00187ea <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018759:	80 f9 12             	cmp    cl,0x12
c001875c:	75 14                	jne    c0018772 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c001875e:	b8 a2 b7 02 c0       	mov    eax,0xc002b7a2
c0018763:	fe ca                	dec    dl
c0018765:	0f 85 84 00 00 00    	jne    c00187ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001876b:	b8 40 d7 02 c0       	mov    eax,0xc002d740
c0018770:	eb 7d                	jmp    c00187ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018772:	80 f9 14             	cmp    cl,0x14
c0018775:	75 12                	jne    c0018789 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018777:	4a                   	dec    edx
c0018778:	b8 a2 b7 02 c0       	mov    eax,0xc002b7a2
c001877d:	80 fa 01             	cmp    dl,0x1
c0018780:	77 6d                	ja     c00187ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018782:	b8 50 d7 02 c0       	mov    eax,0xc002d750
c0018787:	eb 66                	jmp    c00187ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018789:	80 f9 15             	cmp    cl,0x15
c001878c:	75 31                	jne    c00187bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c001878e:	b8 60 d7 02 c0       	mov    eax,0xc002d760
c0018793:	80 fa 01             	cmp    dl,0x1
c0018796:	74 57                	je     c00187ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018798:	b8 a2 b7 02 c0       	mov    eax,0xc002b7a2
c001879d:	80 fa 13             	cmp    dl,0x13
c00187a0:	76 0c                	jbe    c00187ae <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00187a2:	80 fa 30             	cmp    dl,0x30
c00187a5:	75 48                	jne    c00187ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187a7:	b8 80 d7 02 c0       	mov    eax,0xc002d780
c00187ac:	eb 41                	jmp    c00187ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187ae:	b9 04 00 09 00       	mov    ecx,0x90004
c00187b3:	0f a3 d1             	bt     ecx,edx
c00187b6:	73 37                	jae    c00187ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187b8:	b8 70 d7 02 c0       	mov    eax,0xc002d770
c00187bd:	eb 30                	jmp    c00187ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187bf:	b8 a2 b7 02 c0       	mov    eax,0xc002b7a2
c00187c4:	80 f9 16             	cmp    cl,0x16
c00187c7:	75 26                	jne    c00187ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187c9:	b8 90 d7 02 c0       	mov    eax,0xc002d790
c00187ce:	84 d2                	test   dl,dl
c00187d0:	74 1d                	je     c00187ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187d2:	b8 a2 b7 02 c0       	mov    eax,0xc002b7a2
c00187d7:	80 fa 30             	cmp    dl,0x30
c00187da:	75 13                	jne    c00187ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187dc:	b8 a0 d7 02 c0       	mov    eax,0xc002d7a0
c00187e1:	eb 0c                	jmp    c00187ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187e3:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c00187e8:	eb 05                	jmp    c00187ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187ea:	b8 30 d7 02 c0       	mov    eax,0xc002d730
c00187ef:	5b                   	pop    ebx
c00187f0:	5e                   	pop    esi
c00187f1:	5f                   	pop    edi
c00187f2:	5d                   	pop    ebp
c00187f3:	c3                   	ret    

c00187f4 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00187f4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00187f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00187fc:	80 f9 04             	cmp    cl,0x4
c00187ff:	75 6b                	jne    c001886c <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018801:	b8 20 d5 02 c0       	mov    eax,0xc002d520
c0018806:	80 fa 01             	cmp    dl,0x1
c0018809:	0f 86 92 02 00 00    	jbe    c0018aa1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001880f:	b8 30 d5 02 c0       	mov    eax,0xc002d530
c0018814:	80 fa 02             	cmp    dl,0x2
c0018817:	0f 84 84 02 00 00    	je     c0018aa1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001881d:	b8 40 d5 02 c0       	mov    eax,0xc002d540
c0018822:	80 fa 03             	cmp    dl,0x3
c0018825:	0f 84 76 02 00 00    	je     c0018aa1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001882b:	b8 50 d5 02 c0       	mov    eax,0xc002d550
c0018830:	80 fa 04             	cmp    dl,0x4
c0018833:	0f 84 68 02 00 00    	je     c0018aa1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018839:	b8 60 d5 02 c0       	mov    eax,0xc002d560
c001883e:	80 fa 05             	cmp    dl,0x5
c0018841:	0f 84 5a 02 00 00    	je     c0018aa1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018847:	b8 40 d5 02 c0       	mov    eax,0xc002d540
c001884c:	80 fa 07             	cmp    dl,0x7
c001884f:	0f 84 4c 02 00 00    	je     c0018aa1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018855:	83 ea 08             	sub    edx,0x8
c0018858:	b8 a2 b7 02 c0       	mov    eax,0xc002b7a2
c001885d:	80 fa 01             	cmp    dl,0x1
c0018860:	0f 87 3b 02 00 00    	ja     c0018aa1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018866:	b8 70 d5 02 c0       	mov    eax,0xc002d570
c001886b:	c3                   	ret    
c001886c:	80 f9 05             	cmp    cl,0x5
c001886f:	75 45                	jne    c00188b6 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018871:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018874:	b8 80 d5 02 c0       	mov    eax,0xc002d580
c0018879:	80 f9 02             	cmp    cl,0x2
c001887c:	0f 86 1f 02 00 00    	jbe    c0018aa1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018882:	80 fa 04             	cmp    dl,0x4
c0018885:	0f 84 f3 01 00 00    	je     c0018a7e <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c001888b:	80 fa 07             	cmp    dl,0x7
c001888e:	0f 84 0d 02 00 00    	je     c0018aa1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018894:	b8 90 d5 02 c0       	mov    eax,0xc002d590
c0018899:	80 fa 08             	cmp    dl,0x8
c001889c:	0f 84 ff 01 00 00    	je     c0018aa1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188a2:	b8 a2 b7 02 c0       	mov    eax,0xc002b7a2
c00188a7:	80 fa 09             	cmp    dl,0x9
c00188aa:	0f 85 f1 01 00 00    	jne    c0018aa1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188b0:	b8 a0 d5 02 c0       	mov    eax,0xc002d5a0
c00188b5:	c3                   	ret    
c00188b6:	80 f9 06             	cmp    cl,0x6
c00188b9:	0f 85 85 01 00 00    	jne    c0018a44 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c00188bf:	b8 b0 d5 02 c0       	mov    eax,0xc002d5b0
c00188c4:	80 fa 01             	cmp    dl,0x1
c00188c7:	0f 84 d4 01 00 00    	je     c0018aa1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188cd:	8d 42 fb             	lea    eax,[edx-0x5]
c00188d0:	3c 01                	cmp    al,0x1
c00188d2:	0f 86 ac 01 00 00    	jbe    c0018a84 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00188d8:	80 fa 03             	cmp    dl,0x3
c00188db:	0f 84 a3 01 00 00    	je     c0018a84 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00188e1:	8d 4a f9             	lea    ecx,[edx-0x7]
c00188e4:	b8 d0 d5 02 c0       	mov    eax,0xc002d5d0
c00188e9:	80 f9 01             	cmp    cl,0x1
c00188ec:	0f 86 af 01 00 00    	jbe    c0018aa1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188f2:	80 fa 09             	cmp    dl,0x9
c00188f5:	0f 84 8f 01 00 00    	je     c0018a8a <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c00188fb:	8d 4a f6             	lea    ecx,[edx-0xa]
c00188fe:	80 f9 01             	cmp    cl,0x1
c0018901:	0f 86 9a 01 00 00    	jbe    c0018aa1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018907:	b8 e0 d5 02 c0       	mov    eax,0xc002d5e0
c001890c:	80 fa 0d             	cmp    dl,0xd
c001890f:	0f 84 8c 01 00 00    	je     c0018aa1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018915:	b8 f0 d5 02 c0       	mov    eax,0xc002d5f0
c001891a:	80 fa 0e             	cmp    dl,0xe
c001891d:	0f 84 7e 01 00 00    	je     c0018aa1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018923:	b8 00 d6 02 c0       	mov    eax,0xc002d600
c0018928:	80 fa 0f             	cmp    dl,0xf
c001892b:	0f 84 70 01 00 00    	je     c0018aa1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018931:	b8 e0 d5 02 c0       	mov    eax,0xc002d5e0
c0018936:	80 fa 15             	cmp    dl,0x15
c0018939:	0f 84 62 01 00 00    	je     c0018aa1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001893f:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018942:	b8 00 d6 02 c0       	mov    eax,0xc002d600
c0018947:	80 f9 01             	cmp    cl,0x1
c001894a:	0f 86 51 01 00 00    	jbe    c0018aa1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018950:	80 fa 1a             	cmp    dl,0x1a
c0018953:	0f 84 37 01 00 00    	je     c0018a90 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018959:	80 fa 1c             	cmp    dl,0x1c
c001895c:	0f 84 34 01 00 00    	je     c0018a96 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018962:	80 fa 1d             	cmp    dl,0x1d
c0018965:	0f 84 36 01 00 00    	je     c0018aa1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001896b:	b8 30 d6 02 c0       	mov    eax,0xc002d630
c0018970:	80 fa 25             	cmp    dl,0x25
c0018973:	0f 84 28 01 00 00    	je     c0018aa1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018979:	8d 4a da             	lea    ecx,[edx-0x26]
c001897c:	b8 20 d6 02 c0       	mov    eax,0xc002d620
c0018981:	80 f9 01             	cmp    cl,0x1
c0018984:	0f 86 17 01 00 00    	jbe    c0018aa1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001898a:	b8 40 d6 02 c0       	mov    eax,0xc002d640
c001898f:	80 fa 2a             	cmp    dl,0x2a
c0018992:	0f 84 09 01 00 00    	je     c0018aa1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018998:	b8 30 d6 02 c0       	mov    eax,0xc002d630
c001899d:	80 fa 2c             	cmp    dl,0x2c
c00189a0:	0f 84 fb 00 00 00    	je     c0018aa1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189a6:	b8 40 d6 02 c0       	mov    eax,0xc002d640
c00189ab:	80 fa 2d             	cmp    dl,0x2d
c00189ae:	0f 84 ed 00 00 00    	je     c0018aa1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189b4:	b8 10 d6 02 c0       	mov    eax,0xc002d610
c00189b9:	80 fa 2e             	cmp    dl,0x2e
c00189bc:	0f 84 df 00 00 00    	je     c0018aa1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189c2:	b8 30 d6 02 c0       	mov    eax,0xc002d630
c00189c7:	80 fa 2f             	cmp    dl,0x2f
c00189ca:	0f 84 d1 00 00 00    	je     c0018aa1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189d0:	8d 4a cb             	lea    ecx,[edx-0x35]
c00189d3:	b8 20 d6 02 c0       	mov    eax,0xc002d620
c00189d8:	80 f9 01             	cmp    cl,0x1
c00189db:	0f 86 c0 00 00 00    	jbe    c0018aa1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189e1:	b8 50 d6 02 c0       	mov    eax,0xc002d650
c00189e6:	80 fa 37             	cmp    dl,0x37
c00189e9:	0f 84 b2 00 00 00    	je     c0018aa1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189ef:	b8 60 d6 02 c0       	mov    eax,0xc002d660
c00189f4:	80 fa 3a             	cmp    dl,0x3a
c00189f7:	0f 84 a4 00 00 00    	je     c0018aa1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189fd:	b8 70 d6 02 c0       	mov    eax,0xc002d670
c0018a02:	80 fa 3c             	cmp    dl,0x3c
c0018a05:	0f 84 96 00 00 00    	je     c0018aa1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a0b:	b8 80 d6 02 c0       	mov    eax,0xc002d680
c0018a10:	80 fa 3d             	cmp    dl,0x3d
c0018a13:	0f 84 88 00 00 00    	je     c0018aa1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a19:	b8 60 d6 02 c0       	mov    eax,0xc002d660
c0018a1e:	80 fa 3e             	cmp    dl,0x3e
c0018a21:	74 7e                	je     c0018aa1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a23:	8d 42 bb             	lea    eax,[edx-0x45]
c0018a26:	3c 01                	cmp    al,0x1
c0018a28:	76 72                	jbe    c0018a9c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018a2a:	80 fa 3f             	cmp    dl,0x3f
c0018a2d:	74 6d                	je     c0018a9c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018a2f:	80 fa 4a             	cmp    dl,0x4a
c0018a32:	74 0a                	je     c0018a3e <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018a34:	b8 a2 b7 02 c0       	mov    eax,0xc002b7a2
c0018a39:	80 fa 4d             	cmp    dl,0x4d
c0018a3c:	75 63                	jne    c0018aa1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a3e:	b8 50 d6 02 c0       	mov    eax,0xc002d650
c0018a43:	c3                   	ret    
c0018a44:	b8 a2 b7 02 c0       	mov    eax,0xc002b7a2
c0018a49:	80 f9 0b             	cmp    cl,0xb
c0018a4c:	75 0a                	jne    c0018a58 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018a4e:	fe ca                	dec    dl
c0018a50:	75 4f                	jne    c0018aa1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a52:	b8 90 d6 02 c0       	mov    eax,0xc002d690
c0018a57:	c3                   	ret    
c0018a58:	80 f9 0f             	cmp    cl,0xf
c0018a5b:	75 44                	jne    c0018aa1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a5d:	b8 a0 d6 02 c0       	mov    eax,0xc002d6a0
c0018a62:	80 fa 02             	cmp    dl,0x2
c0018a65:	76 3a                	jbe    c0018aa1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a67:	8d 42 fd             	lea    eax,[edx-0x3]
c0018a6a:	3c 01                	cmp    al,0x1
c0018a6c:	76 0a                	jbe    c0018a78 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018a6e:	b8 a2 b7 02 c0       	mov    eax,0xc002b7a2
c0018a73:	80 fa 06             	cmp    dl,0x6
c0018a76:	75 29                	jne    c0018aa1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a78:	b8 b0 d6 02 c0       	mov    eax,0xc002d6b0
c0018a7d:	c3                   	ret    
c0018a7e:	b8 90 d5 02 c0       	mov    eax,0xc002d590
c0018a83:	c3                   	ret    
c0018a84:	b8 c0 d5 02 c0       	mov    eax,0xc002d5c0
c0018a89:	c3                   	ret    
c0018a8a:	b8 e0 d5 02 c0       	mov    eax,0xc002d5e0
c0018a8f:	c3                   	ret    
c0018a90:	b8 10 d6 02 c0       	mov    eax,0xc002d610
c0018a95:	c3                   	ret    
c0018a96:	b8 20 d6 02 c0       	mov    eax,0xc002d620
c0018a9b:	c3                   	ret    
c0018a9c:	b8 70 d6 02 c0       	mov    eax,0xc002d670
c0018aa1:	c3                   	ret    

c0018aa2 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018aa2:	60                   	pusha  
c0018aa3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018aa7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018aab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018aaf:	9c                   	pushf  
c0018ab0:	fa                   	cli    
c0018ab1:	0f 09                	wbinvd 
c0018ab3:	0f 30                	wrmsr  
c0018ab5:	9d                   	popf   
c0018ab6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018aba:	89 02                	mov    DWORD PTR [edx],eax
c0018abc:	61                   	popa   
c0018abd:	c3                   	ret    

c0018abe <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018abe:	60                   	pusha  
c0018abf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018ac3:	9c                   	pushf  
c0018ac4:	fa                   	cli    
c0018ac5:	0f 09                	wbinvd 
c0018ac7:	31 c0                	xor    eax,eax
c0018ac9:	31 d2                	xor    edx,edx
c0018acb:	0f 32                	rdmsr  
c0018acd:	9d                   	popf   
c0018ace:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018ad2:	89 02                	mov    DWORD PTR [edx],eax
c0018ad4:	61                   	popa   
c0018ad5:	c3                   	ret    

c0018ad6 <CPU::AMD_K6_writeback(int, int, int)>:
c0018ad6:	56                   	push   esi
c0018ad7:	53                   	push   ebx
c0018ad8:	83 ec 10             	sub    esp,0x10
c0018adb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018adf:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018ae4:	75 5d                	jne    c0018b43 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018ae6:	83 f8 08             	cmp    eax,0x8
c0018ae9:	75 09                	jne    c0018af4 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018aeb:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018af0:	7e 13                	jle    c0018b05 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018af2:	eb 30                	jmp    c0018b24 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018af4:	83 f8 06             	cmp    eax,0x6
c0018af7:	7c 4a                	jl     c0018b43 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018af9:	83 f8 07             	cmp    eax,0x7
c0018afc:	7e 07                	jle    c0018b05 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018afe:	83 f8 09             	cmp    eax,0x9
c0018b01:	74 21                	je     c0018b24 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018b03:	eb 3e                	jmp    c0018b43 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018b05:	89 e6                	mov    esi,esp
c0018b07:	8b 1d e8 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e2e8
c0018b0d:	56                   	push   esi
c0018b0e:	c1 eb 15             	shr    ebx,0x15
c0018b11:	68 82 00 00 c0       	push   0xc0000082
c0018b16:	83 e3 7e             	and    ebx,0x7e
c0018b19:	e8 a0 ff ff ff       	call   c0018abe <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018b1e:	56                   	push   esi
c0018b1f:	6a 00                	push   0x0
c0018b21:	53                   	push   ebx
c0018b22:	eb 12                	jmp    c0018b36 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018b24:	89 e3                	mov    ebx,esp
c0018b26:	53                   	push   ebx
c0018b27:	68 82 00 00 c0       	push   0xc0000082
c0018b2c:	e8 8d ff ff ff       	call   c0018abe <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018b31:	53                   	push   ebx
c0018b32:	6a 00                	push   0x0
c0018b34:	6a 00                	push   0x0
c0018b36:	68 82 00 00 c0       	push   0xc0000082
c0018b3b:	e8 62 ff ff ff       	call   c0018aa2 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018b40:	83 c4 18             	add    esp,0x18
c0018b43:	83 c4 10             	add    esp,0x10
c0018b46:	5b                   	pop    ebx
c0018b47:	5e                   	pop    esi
c0018b48:	c3                   	ret    
c0018b49:	90                   	nop

c0018b4a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018b4a:	55                   	push   ebp
c0018b4b:	57                   	push   edi
c0018b4c:	56                   	push   esi
c0018b4d:	53                   	push   ebx
c0018b4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018b52:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018b56:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018b5a:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018b5e:	39 05 c0 d7 02 c0    	cmp    DWORD PTR ds:0xc002d7c0,eax
c0018b64:	75 23                	jne    c0018b89 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018b66:	a1 ec 0d 03 c0       	mov    eax,ds:0xc0030dec
c0018b6b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018b6f:	89 06                	mov    DWORD PTR [esi],eax
c0018b71:	a1 e8 0d 03 c0       	mov    eax,ds:0xc0030de8
c0018b76:	89 07                	mov    DWORD PTR [edi],eax
c0018b78:	a1 e4 0d 03 c0       	mov    eax,ds:0xc0030de4
c0018b7d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018b80:	a1 e0 0d 03 c0       	mov    eax,ds:0xc0030de0
c0018b85:	89 02                	mov    DWORD PTR [edx],eax
c0018b87:	eb 3f                	jmp    c0018bc8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018b89:	31 c9                	xor    ecx,ecx
c0018b8b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018b8f:	0f a2                	cpuid  
c0018b91:	89 06                	mov    DWORD PTR [esi],eax
c0018b93:	89 1f                	mov    DWORD PTR [edi],ebx
c0018b95:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018b99:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018b9c:	89 10                	mov    DWORD PTR [eax],edx
c0018b9e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018ba2:	a3 c0 d7 02 c0       	mov    ds:0xc002d7c0,eax
c0018ba7:	8b 06                	mov    eax,DWORD PTR [esi]
c0018ba9:	a3 ec 0d 03 c0       	mov    ds:0xc0030dec,eax
c0018bae:	8b 07                	mov    eax,DWORD PTR [edi]
c0018bb0:	a3 e8 0d 03 c0       	mov    ds:0xc0030de8,eax
c0018bb5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018bb8:	a3 e4 0d 03 c0       	mov    ds:0xc0030de4,eax
c0018bbd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018bc1:	8b 00                	mov    eax,DWORD PTR [eax]
c0018bc3:	a3 e0 0d 03 c0       	mov    ds:0xc0030de0,eax
c0018bc8:	5b                   	pop    ebx
c0018bc9:	5e                   	pop    esi
c0018bca:	5f                   	pop    edi
c0018bcb:	5d                   	pop    ebp
c0018bcc:	c3                   	ret    
c0018bcd:	90                   	nop

c0018bce <CPU::cpuidCheckEDX(unsigned int)>:
c0018bce:	83 ec 10             	sub    esp,0x10
c0018bd1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bd5:	50                   	push   eax
c0018bd6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bda:	50                   	push   eax
c0018bdb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bdf:	50                   	push   eax
c0018be0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018be4:	50                   	push   eax
c0018be5:	6a 01                	push   0x1
c0018be7:	e8 5e ff ff ff       	call   c0018b4a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018bec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018bf0:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018bf4:	0f 95 c0             	setne  al
c0018bf7:	83 c4 24             	add    esp,0x24
c0018bfa:	c3                   	ret    
c0018bfb:	90                   	nop

c0018bfc <CPU::cpuidCheckECX(unsigned int)>:
c0018bfc:	83 ec 10             	sub    esp,0x10
c0018bff:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c03:	50                   	push   eax
c0018c04:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c08:	50                   	push   eax
c0018c09:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c0d:	50                   	push   eax
c0018c0e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c12:	50                   	push   eax
c0018c13:	6a 01                	push   0x1
c0018c15:	e8 30 ff ff ff       	call   c0018b4a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018c1a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018c1e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018c22:	0f 95 c0             	setne  al
c0018c25:	83 c4 24             	add    esp,0x24
c0018c28:	c3                   	ret    
c0018c29:	90                   	nop

c0018c2a <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018c2a:	83 ec 10             	sub    esp,0x10
c0018c2d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c31:	50                   	push   eax
c0018c32:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c36:	50                   	push   eax
c0018c37:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c3b:	50                   	push   eax
c0018c3c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c40:	50                   	push   eax
c0018c41:	6a 07                	push   0x7
c0018c43:	e8 02 ff ff ff       	call   c0018b4a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018c48:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018c4c:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018c50:	0f 95 c0             	setne  al
c0018c53:	83 c4 24             	add    esp,0x24
c0018c56:	c3                   	ret    
c0018c57:	90                   	nop

c0018c58 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018c58:	83 ec 10             	sub    esp,0x10
c0018c5b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c5f:	50                   	push   eax
c0018c60:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c64:	50                   	push   eax
c0018c65:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c69:	50                   	push   eax
c0018c6a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c6e:	50                   	push   eax
c0018c6f:	6a 07                	push   0x7
c0018c71:	e8 d4 fe ff ff       	call   c0018b4a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018c76:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018c7a:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018c7e:	0f 95 c0             	setne  al
c0018c81:	83 c4 24             	add    esp,0x24
c0018c84:	c3                   	ret    
c0018c85:	90                   	nop

c0018c86 <CPU::CPU()>:
c0018c86:	83 ec 0c             	sub    esp,0xc
c0018c89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c8d:	83 ec 08             	sub    esp,0x8
c0018c90:	68 a2 b7 02 c0       	push   0xc002b7a2
c0018c95:	50                   	push   eax
c0018c96:	e8 4f b7 ff ff       	call   c00143ea <Device::Device(char const*)>
c0018c9b:	83 c4 10             	add    esp,0x10
c0018c9e:	ba 7c b8 02 c0       	mov    edx,0xc002b87c
c0018ca3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ca7:	89 10                	mov    DWORD PTR [eax],edx
c0018ca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018cad:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018cb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018cbb:	05 78 01 00 00       	add    eax,0x178
c0018cc0:	83 ec 0c             	sub    esp,0xc
c0018cc3:	50                   	push   eax
c0018cc4:	e8 8f 63 ff ff       	call   c000f058 <GDT::GDT()>
c0018cc9:	83 c4 10             	add    esp,0x10
c0018ccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018cd0:	05 7c 09 00 00       	add    eax,0x97c
c0018cd5:	83 ec 0c             	sub    esp,0xc
c0018cd8:	50                   	push   eax
c0018cd9:	e8 dc 65 ff ff       	call   c000f2ba <IDT::IDT()>
c0018cde:	83 c4 10             	add    esp,0x10
c0018ce1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ce5:	05 7c 11 00 00       	add    eax,0x117c
c0018cea:	83 ec 0c             	sub    esp,0xc
c0018ced:	50                   	push   eax
c0018cee:	e8 b5 87 ff ff       	call   c00114a8 <TSS::TSS()>
c0018cf3:	83 c4 10             	add    esp,0x10
c0018cf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018cfa:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018d01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d05:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018d0f:	90                   	nop
c0018d10:	83 c4 0c             	add    esp,0xc
c0018d13:	c3                   	ret    

c0018d14 <CPU::displayFeatures()>:
c0018d14:	53                   	push   ebx
c0018d15:	83 ec 10             	sub    esp,0x10
c0018d18:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018d1c:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018d22:	68 b0 b4 02 c0       	push   0xc002b4b0
c0018d27:	e8 a8 a0 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0018d2c:	59                   	pop    ecx
c0018d2d:	58                   	pop    eax
c0018d2e:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018d34:	50                   	push   eax
c0018d35:	68 c1 b4 02 c0       	push   0xc002b4c1
c0018d3a:	e8 95 a0 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0018d3f:	58                   	pop    eax
c0018d40:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018d46:	5a                   	pop    edx
c0018d47:	c1 e8 0e             	shr    eax,0xe
c0018d4a:	0f b6 c0             	movzx  eax,al
c0018d4d:	50                   	push   eax
c0018d4e:	68 d2 b4 02 c0       	push   0xc002b4d2
c0018d53:	e8 7c a0 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0018d58:	59                   	pop    ecx
c0018d59:	58                   	pop    eax
c0018d5a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018d60:	66 c1 e8 06          	shr    ax,0x6
c0018d64:	0f b6 c0             	movzx  eax,al
c0018d67:	50                   	push   eax
c0018d68:	68 e3 b4 02 c0       	push   0xc002b4e3
c0018d6d:	e8 62 a0 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0018d72:	c7 04 24 90 b9 02 c0 	mov    DWORD PTR [esp],0xc002b990
c0018d79:	e8 56 a0 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0018d7e:	83 c4 10             	add    esp,0x10
c0018d81:	b8 16 9f 02 c0       	mov    eax,0xc0029f16
c0018d86:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018d8d:	74 05                	je     c0018d94 <CPU::displayFeatures()+0x80>
c0018d8f:	b8 12 9f 02 c0       	mov    eax,0xc0029f12
c0018d94:	52                   	push   edx
c0018d95:	52                   	push   edx
c0018d96:	50                   	push   eax
c0018d97:	68 f4 b4 02 c0       	push   0xc002b4f4
c0018d9c:	e8 33 a0 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0018da1:	83 c4 10             	add    esp,0x10
c0018da4:	b8 12 9f 02 c0       	mov    eax,0xc0029f12
c0018da9:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018db0:	78 05                	js     c0018db7 <CPU::displayFeatures()+0xa3>
c0018db2:	b8 16 9f 02 c0       	mov    eax,0xc0029f16
c0018db7:	51                   	push   ecx
c0018db8:	51                   	push   ecx
c0018db9:	50                   	push   eax
c0018dba:	68 0b b5 02 c0       	push   0xc002b50b
c0018dbf:	e8 10 a0 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0018dc4:	83 c4 10             	add    esp,0x10
c0018dc7:	b8 12 9f 02 c0       	mov    eax,0xc0029f12
c0018dcc:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018dd3:	75 05                	jne    c0018dda <CPU::displayFeatures()+0xc6>
c0018dd5:	b8 16 9f 02 c0       	mov    eax,0xc0029f16
c0018dda:	52                   	push   edx
c0018ddb:	52                   	push   edx
c0018ddc:	50                   	push   eax
c0018ddd:	68 22 b5 02 c0       	push   0xc002b522
c0018de2:	e8 ed 9f ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0018de7:	83 c4 10             	add    esp,0x10
c0018dea:	b8 12 9f 02 c0       	mov    eax,0xc0029f12
c0018def:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018df6:	75 05                	jne    c0018dfd <CPU::displayFeatures()+0xe9>
c0018df8:	b8 16 9f 02 c0       	mov    eax,0xc0029f16
c0018dfd:	51                   	push   ecx
c0018dfe:	51                   	push   ecx
c0018dff:	50                   	push   eax
c0018e00:	68 39 b5 02 c0       	push   0xc002b539
c0018e05:	e8 ca 9f ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0018e0a:	83 c4 10             	add    esp,0x10
c0018e0d:	b8 12 9f 02 c0       	mov    eax,0xc0029f12
c0018e12:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018e19:	75 05                	jne    c0018e20 <CPU::displayFeatures()+0x10c>
c0018e1b:	b8 16 9f 02 c0       	mov    eax,0xc0029f16
c0018e20:	52                   	push   edx
c0018e21:	52                   	push   edx
c0018e22:	50                   	push   eax
c0018e23:	68 50 b5 02 c0       	push   0xc002b550
c0018e28:	e8 a7 9f ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0018e2d:	83 c4 10             	add    esp,0x10
c0018e30:	b8 12 9f 02 c0       	mov    eax,0xc0029f12
c0018e35:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018e3c:	75 05                	jne    c0018e43 <CPU::displayFeatures()+0x12f>
c0018e3e:	b8 16 9f 02 c0       	mov    eax,0xc0029f16
c0018e43:	51                   	push   ecx
c0018e44:	51                   	push   ecx
c0018e45:	50                   	push   eax
c0018e46:	68 67 b5 02 c0       	push   0xc002b567
c0018e4b:	e8 84 9f ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0018e50:	83 c4 10             	add    esp,0x10
c0018e53:	b8 12 9f 02 c0       	mov    eax,0xc0029f12
c0018e58:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018e5f:	75 05                	jne    c0018e66 <CPU::displayFeatures()+0x152>
c0018e61:	b8 16 9f 02 c0       	mov    eax,0xc0029f16
c0018e66:	52                   	push   edx
c0018e67:	52                   	push   edx
c0018e68:	50                   	push   eax
c0018e69:	68 7e b5 02 c0       	push   0xc002b57e
c0018e6e:	e8 61 9f ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0018e73:	83 c4 10             	add    esp,0x10
c0018e76:	b8 12 9f 02 c0       	mov    eax,0xc0029f12
c0018e7b:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018e82:	75 05                	jne    c0018e89 <CPU::displayFeatures()+0x175>
c0018e84:	b8 16 9f 02 c0       	mov    eax,0xc0029f16
c0018e89:	51                   	push   ecx
c0018e8a:	51                   	push   ecx
c0018e8b:	50                   	push   eax
c0018e8c:	68 95 b5 02 c0       	push   0xc002b595
c0018e91:	e8 3e 9f ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0018e96:	83 c4 10             	add    esp,0x10
c0018e99:	b8 12 9f 02 c0       	mov    eax,0xc0029f12
c0018e9e:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018ea5:	75 05                	jne    c0018eac <CPU::displayFeatures()+0x198>
c0018ea7:	b8 16 9f 02 c0       	mov    eax,0xc0029f16
c0018eac:	52                   	push   edx
c0018ead:	52                   	push   edx
c0018eae:	50                   	push   eax
c0018eaf:	68 ac b5 02 c0       	push   0xc002b5ac
c0018eb4:	e8 1b 9f ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0018eb9:	83 c4 10             	add    esp,0x10
c0018ebc:	b8 12 9f 02 c0       	mov    eax,0xc0029f12
c0018ec1:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018ec8:	75 05                	jne    c0018ecf <CPU::displayFeatures()+0x1bb>
c0018eca:	b8 16 9f 02 c0       	mov    eax,0xc0029f16
c0018ecf:	51                   	push   ecx
c0018ed0:	51                   	push   ecx
c0018ed1:	50                   	push   eax
c0018ed2:	68 c3 b5 02 c0       	push   0xc002b5c3
c0018ed7:	e8 f8 9e ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0018edc:	83 c4 10             	add    esp,0x10
c0018edf:	b8 12 9f 02 c0       	mov    eax,0xc0029f12
c0018ee4:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018eeb:	75 05                	jne    c0018ef2 <CPU::displayFeatures()+0x1de>
c0018eed:	b8 16 9f 02 c0       	mov    eax,0xc0029f16
c0018ef2:	52                   	push   edx
c0018ef3:	52                   	push   edx
c0018ef4:	50                   	push   eax
c0018ef5:	68 da b5 02 c0       	push   0xc002b5da
c0018efa:	e8 d5 9e ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0018eff:	83 c4 10             	add    esp,0x10
c0018f02:	b8 12 9f 02 c0       	mov    eax,0xc0029f12
c0018f07:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0018f0e:	75 05                	jne    c0018f15 <CPU::displayFeatures()+0x201>
c0018f10:	b8 16 9f 02 c0       	mov    eax,0xc0029f16
c0018f15:	51                   	push   ecx
c0018f16:	51                   	push   ecx
c0018f17:	50                   	push   eax
c0018f18:	68 f1 b5 02 c0       	push   0xc002b5f1
c0018f1d:	e8 b2 9e ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0018f22:	83 c4 10             	add    esp,0x10
c0018f25:	b8 12 9f 02 c0       	mov    eax,0xc0029f12
c0018f2a:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0018f31:	75 05                	jne    c0018f38 <CPU::displayFeatures()+0x224>
c0018f33:	b8 16 9f 02 c0       	mov    eax,0xc0029f16
c0018f38:	52                   	push   edx
c0018f39:	52                   	push   edx
c0018f3a:	50                   	push   eax
c0018f3b:	68 08 b6 02 c0       	push   0xc002b608
c0018f40:	e8 8f 9e ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0018f45:	83 c4 10             	add    esp,0x10
c0018f48:	b8 12 9f 02 c0       	mov    eax,0xc0029f12
c0018f4d:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0018f54:	78 05                	js     c0018f5b <CPU::displayFeatures()+0x247>
c0018f56:	b8 16 9f 02 c0       	mov    eax,0xc0029f16
c0018f5b:	51                   	push   ecx
c0018f5c:	51                   	push   ecx
c0018f5d:	50                   	push   eax
c0018f5e:	68 1f b6 02 c0       	push   0xc002b61f
c0018f63:	e8 6c 9e ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0018f68:	83 c4 10             	add    esp,0x10
c0018f6b:	b8 12 9f 02 c0       	mov    eax,0xc0029f12
c0018f70:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0018f77:	75 05                	jne    c0018f7e <CPU::displayFeatures()+0x26a>
c0018f79:	b8 16 9f 02 c0       	mov    eax,0xc0029f16
c0018f7e:	52                   	push   edx
c0018f7f:	52                   	push   edx
c0018f80:	50                   	push   eax
c0018f81:	68 36 b6 02 c0       	push   0xc002b636
c0018f86:	e8 49 9e ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0018f8b:	83 c4 18             	add    esp,0x18
c0018f8e:	5b                   	pop    ebx
c0018f8f:	c3                   	ret    

c0018f90 <CPU::detectFeatures()>:
c0018f90:	55                   	push   ebp
c0018f91:	57                   	push   edi
c0018f92:	56                   	push   esi
c0018f93:	53                   	push   ebx
c0018f94:	83 ec 50             	sub    esp,0x50
c0018f97:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018f9b:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018fa5:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018fac:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0018fb2:	6a 0d                	push   0xd
c0018fb4:	6a 00                	push   0x0
c0018fb6:	57                   	push   edi
c0018fb7:	e8 bc 77 fe ff       	call   c0000778 <memset>
c0018fbc:	83 c4 10             	add    esp,0x10
c0018fbf:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c0018fc4:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018fcb:	0f 84 20 09 00 00    	je     c00198f1 <CPU::detectFeatures()+0x961>
c0018fd1:	83 ec 0c             	sub    esp,0xc
c0018fd4:	6a 10                	push   0x10
c0018fd6:	e8 f3 fb ff ff       	call   c0018bce <CPU::cpuidCheckEDX(unsigned int)>
c0018fdb:	83 e0 01             	and    eax,0x1
c0018fde:	8d 14 00             	lea    edx,[eax+eax*1]
c0018fe1:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018fe7:	83 e0 fd             	and    eax,0xfffffffd
c0018fea:	09 d0                	or     eax,edx
c0018fec:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018ff2:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018ff9:	e8 d0 fb ff ff       	call   c0018bce <CPU::cpuidCheckEDX(unsigned int)>
c0018ffe:	83 e0 01             	and    eax,0x1
c0019001:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019008:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001900e:	83 e0 fb             	and    eax,0xfffffffb
c0019011:	09 d0                	or     eax,edx
c0019013:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019019:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0019020:	e8 a9 fb ff ff       	call   c0018bce <CPU::cpuidCheckEDX(unsigned int)>
c0019025:	83 e0 01             	and    eax,0x1
c0019028:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001902f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019035:	83 e0 f7             	and    eax,0xfffffff7
c0019038:	09 d0                	or     eax,edx
c001903a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019040:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0019047:	e8 82 fb ff ff       	call   c0018bce <CPU::cpuidCheckEDX(unsigned int)>
c001904c:	83 e0 01             	and    eax,0x1
c001904f:	c1 e0 04             	shl    eax,0x4
c0019052:	88 c2                	mov    dl,al
c0019054:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001905a:	83 e0 ef             	and    eax,0xffffffef
c001905d:	09 d0                	or     eax,edx
c001905f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019065:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001906c:	e8 5d fb ff ff       	call   c0018bce <CPU::cpuidCheckEDX(unsigned int)>
c0019071:	83 e0 01             	and    eax,0x1
c0019074:	c1 e0 05             	shl    eax,0x5
c0019077:	88 c2                	mov    dl,al
c0019079:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001907f:	83 e0 df             	and    eax,0xffffffdf
c0019082:	09 d0                	or     eax,edx
c0019084:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001908a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0019091:	e8 38 fb ff ff       	call   c0018bce <CPU::cpuidCheckEDX(unsigned int)>
c0019096:	83 e0 01             	and    eax,0x1
c0019099:	8d 14 00             	lea    edx,[eax+eax*1]
c001909c:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00190a2:	83 e0 fd             	and    eax,0xfffffffd
c00190a5:	09 d0                	or     eax,edx
c00190a7:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00190ad:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00190b4:	e8 15 fb ff ff       	call   c0018bce <CPU::cpuidCheckEDX(unsigned int)>
c00190b9:	83 e0 01             	and    eax,0x1
c00190bc:	c1 e0 06             	shl    eax,0x6
c00190bf:	88 c2                	mov    dl,al
c00190c1:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00190c7:	83 e0 bf             	and    eax,0xffffffbf
c00190ca:	09 d0                	or     eax,edx
c00190cc:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00190d2:	58                   	pop    eax
c00190d3:	8d 74 24 28          	lea    esi,[esp+0x28]
c00190d7:	56                   	push   esi
c00190d8:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00190dc:	55                   	push   ebp
c00190dd:	8d 44 24 28          	lea    eax,[esp+0x28]
c00190e1:	50                   	push   eax
c00190e2:	8d 54 24 28          	lea    edx,[esp+0x28]
c00190e6:	52                   	push   edx
c00190e7:	6a 00                	push   0x0
c00190e9:	e8 5c fa ff ff       	call   c0018b4a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00190ee:	83 c4 1c             	add    esp,0x1c
c00190f1:	6a 04                	push   0x4
c00190f3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00190f7:	50                   	push   eax
c00190f8:	57                   	push   edi
c00190f9:	e8 46 76 fe ff       	call   c0000744 <memcpy>
c00190fe:	83 c4 0c             	add    esp,0xc
c0019101:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0019107:	6a 04                	push   0x4
c0019109:	56                   	push   esi
c001910a:	50                   	push   eax
c001910b:	e8 34 76 fe ff       	call   c0000744 <memcpy>
c0019110:	83 c4 0c             	add    esp,0xc
c0019113:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0019119:	6a 04                	push   0x4
c001911b:	55                   	push   ebp
c001911c:	50                   	push   eax
c001911d:	e8 22 76 fe ff       	call   c0000744 <memcpy>
c0019122:	58                   	pop    eax
c0019123:	5a                   	pop    edx
c0019124:	68 4d b6 02 c0       	push   0xc002b64d
c0019129:	57                   	push   edi
c001912a:	e8 91 77 fe ff       	call   c00008c0 <strcmp>
c001912f:	83 c4 10             	add    esp,0x10
c0019132:	85 c0                	test   eax,eax
c0019134:	75 0f                	jne    c0019145 <CPU::detectFeatures()+0x1b5>
c0019136:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0019140:	e9 22 02 00 00       	jmp    c0019367 <CPU::detectFeatures()+0x3d7>
c0019145:	50                   	push   eax
c0019146:	50                   	push   eax
c0019147:	68 5a b6 02 c0       	push   0xc002b65a
c001914c:	57                   	push   edi
c001914d:	e8 6e 77 fe ff       	call   c00008c0 <strcmp>
c0019152:	83 c4 10             	add    esp,0x10
c0019155:	85 c0                	test   eax,eax
c0019157:	74 dd                	je     c0019136 <CPU::detectFeatures()+0x1a6>
c0019159:	51                   	push   ecx
c001915a:	51                   	push   ecx
c001915b:	68 67 b6 02 c0       	push   0xc002b667
c0019160:	57                   	push   edi
c0019161:	e8 5a 77 fe ff       	call   c00008c0 <strcmp>
c0019166:	83 c4 10             	add    esp,0x10
c0019169:	85 c0                	test   eax,eax
c001916b:	74 2a                	je     c0019197 <CPU::detectFeatures()+0x207>
c001916d:	52                   	push   edx
c001916e:	52                   	push   edx
c001916f:	68 74 b6 02 c0       	push   0xc002b674
c0019174:	57                   	push   edi
c0019175:	e8 46 77 fe ff       	call   c00008c0 <strcmp>
c001917a:	83 c4 10             	add    esp,0x10
c001917d:	85 c0                	test   eax,eax
c001917f:	74 16                	je     c0019197 <CPU::detectFeatures()+0x207>
c0019181:	50                   	push   eax
c0019182:	50                   	push   eax
c0019183:	68 81 b6 02 c0       	push   0xc002b681
c0019188:	57                   	push   edi
c0019189:	e8 32 77 fe ff       	call   c00008c0 <strcmp>
c001918e:	83 c4 10             	add    esp,0x10
c0019191:	85 c0                	test   eax,eax
c0019193:	74 48                	je     c00191dd <CPU::detectFeatures()+0x24d>
c0019195:	eb 0f                	jmp    c00191a6 <CPU::detectFeatures()+0x216>
c0019197:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00191a1:	e9 c1 01 00 00       	jmp    c0019367 <CPU::detectFeatures()+0x3d7>
c00191a6:	50                   	push   eax
c00191a7:	50                   	push   eax
c00191a8:	68 8e b6 02 c0       	push   0xc002b68e
c00191ad:	57                   	push   edi
c00191ae:	e8 0d 77 fe ff       	call   c00008c0 <strcmp>
c00191b3:	83 c4 10             	add    esp,0x10
c00191b6:	85 c0                	test   eax,eax
c00191b8:	74 23                	je     c00191dd <CPU::detectFeatures()+0x24d>
c00191ba:	50                   	push   eax
c00191bb:	50                   	push   eax
c00191bc:	68 9b b6 02 c0       	push   0xc002b69b
c00191c1:	57                   	push   edi
c00191c2:	e8 f9 76 fe ff       	call   c00008c0 <strcmp>
c00191c7:	83 c4 10             	add    esp,0x10
c00191ca:	85 c0                	test   eax,eax
c00191cc:	75 1e                	jne    c00191ec <CPU::detectFeatures()+0x25c>
c00191ce:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00191d8:	e9 8a 01 00 00       	jmp    c0019367 <CPU::detectFeatures()+0x3d7>
c00191dd:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00191e7:	e9 7b 01 00 00       	jmp    c0019367 <CPU::detectFeatures()+0x3d7>
c00191ec:	50                   	push   eax
c00191ed:	50                   	push   eax
c00191ee:	68 a8 b6 02 c0       	push   0xc002b6a8
c00191f3:	57                   	push   edi
c00191f4:	e8 c7 76 fe ff       	call   c00008c0 <strcmp>
c00191f9:	83 c4 10             	add    esp,0x10
c00191fc:	85 c0                	test   eax,eax
c00191fe:	75 0f                	jne    c001920f <CPU::detectFeatures()+0x27f>
c0019200:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001920a:	e9 58 01 00 00       	jmp    c0019367 <CPU::detectFeatures()+0x3d7>
c001920f:	50                   	push   eax
c0019210:	50                   	push   eax
c0019211:	68 67 b6 02 c0       	push   0xc002b667
c0019216:	57                   	push   edi
c0019217:	e8 a4 76 fe ff       	call   c00008c0 <strcmp>
c001921c:	83 c4 10             	add    esp,0x10
c001921f:	85 c0                	test   eax,eax
c0019221:	75 0f                	jne    c0019232 <CPU::detectFeatures()+0x2a2>
c0019223:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001922d:	e9 35 01 00 00       	jmp    c0019367 <CPU::detectFeatures()+0x3d7>
c0019232:	50                   	push   eax
c0019233:	50                   	push   eax
c0019234:	68 b5 b6 02 c0       	push   0xc002b6b5
c0019239:	57                   	push   edi
c001923a:	e8 81 76 fe ff       	call   c00008c0 <strcmp>
c001923f:	83 c4 10             	add    esp,0x10
c0019242:	85 c0                	test   eax,eax
c0019244:	75 0f                	jne    c0019255 <CPU::detectFeatures()+0x2c5>
c0019246:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0019250:	e9 12 01 00 00       	jmp    c0019367 <CPU::detectFeatures()+0x3d7>
c0019255:	51                   	push   ecx
c0019256:	51                   	push   ecx
c0019257:	68 c2 b6 02 c0       	push   0xc002b6c2
c001925c:	57                   	push   edi
c001925d:	e8 5e 76 fe ff       	call   c00008c0 <strcmp>
c0019262:	83 c4 10             	add    esp,0x10
c0019265:	85 c0                	test   eax,eax
c0019267:	75 0f                	jne    c0019278 <CPU::detectFeatures()+0x2e8>
c0019269:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0019273:	e9 ef 00 00 00       	jmp    c0019367 <CPU::detectFeatures()+0x3d7>
c0019278:	52                   	push   edx
c0019279:	52                   	push   edx
c001927a:	68 cf b6 02 c0       	push   0xc002b6cf
c001927f:	57                   	push   edi
c0019280:	e8 3b 76 fe ff       	call   c00008c0 <strcmp>
c0019285:	83 c4 10             	add    esp,0x10
c0019288:	85 c0                	test   eax,eax
c001928a:	75 0f                	jne    c001929b <CPU::detectFeatures()+0x30b>
c001928c:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0019296:	e9 cc 00 00 00       	jmp    c0019367 <CPU::detectFeatures()+0x3d7>
c001929b:	50                   	push   eax
c001929c:	50                   	push   eax
c001929d:	68 dc b6 02 c0       	push   0xc002b6dc
c00192a2:	57                   	push   edi
c00192a3:	e8 18 76 fe ff       	call   c00008c0 <strcmp>
c00192a8:	83 c4 10             	add    esp,0x10
c00192ab:	85 c0                	test   eax,eax
c00192ad:	75 0f                	jne    c00192be <CPU::detectFeatures()+0x32e>
c00192af:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00192b9:	e9 a9 00 00 00       	jmp    c0019367 <CPU::detectFeatures()+0x3d7>
c00192be:	50                   	push   eax
c00192bf:	50                   	push   eax
c00192c0:	68 e9 b6 02 c0       	push   0xc002b6e9
c00192c5:	57                   	push   edi
c00192c6:	e8 f5 75 fe ff       	call   c00008c0 <strcmp>
c00192cb:	83 c4 10             	add    esp,0x10
c00192ce:	85 c0                	test   eax,eax
c00192d0:	75 0f                	jne    c00192e1 <CPU::detectFeatures()+0x351>
c00192d2:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00192dc:	e9 86 00 00 00       	jmp    c0019367 <CPU::detectFeatures()+0x3d7>
c00192e1:	50                   	push   eax
c00192e2:	50                   	push   eax
c00192e3:	68 f6 b6 02 c0       	push   0xc002b6f6
c00192e8:	57                   	push   edi
c00192e9:	e8 d2 75 fe ff       	call   c00008c0 <strcmp>
c00192ee:	83 c4 10             	add    esp,0x10
c00192f1:	85 c0                	test   eax,eax
c00192f3:	75 0c                	jne    c0019301 <CPU::detectFeatures()+0x371>
c00192f5:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00192ff:	eb 66                	jmp    c0019367 <CPU::detectFeatures()+0x3d7>
c0019301:	50                   	push   eax
c0019302:	50                   	push   eax
c0019303:	68 03 b7 02 c0       	push   0xc002b703
c0019308:	57                   	push   edi
c0019309:	e8 b2 75 fe ff       	call   c00008c0 <strcmp>
c001930e:	83 c4 10             	add    esp,0x10
c0019311:	85 c0                	test   eax,eax
c0019313:	75 0c                	jne    c0019321 <CPU::detectFeatures()+0x391>
c0019315:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001931f:	eb 46                	jmp    c0019367 <CPU::detectFeatures()+0x3d7>
c0019321:	50                   	push   eax
c0019322:	50                   	push   eax
c0019323:	68 10 b7 02 c0       	push   0xc002b710
c0019328:	57                   	push   edi
c0019329:	e8 92 75 fe ff       	call   c00008c0 <strcmp>
c001932e:	83 c4 10             	add    esp,0x10
c0019331:	85 c0                	test   eax,eax
c0019333:	74 e0                	je     c0019315 <CPU::detectFeatures()+0x385>
c0019335:	50                   	push   eax
c0019336:	50                   	push   eax
c0019337:	68 1d b7 02 c0       	push   0xc002b71d
c001933c:	57                   	push   edi
c001933d:	e8 7e 75 fe ff       	call   c00008c0 <strcmp>
c0019342:	83 c4 10             	add    esp,0x10
c0019345:	85 c0                	test   eax,eax
c0019347:	74 cc                	je     c0019315 <CPU::detectFeatures()+0x385>
c0019349:	51                   	push   ecx
c001934a:	51                   	push   ecx
c001934b:	68 2a b7 02 c0       	push   0xc002b72a
c0019350:	57                   	push   edi
c0019351:	e8 6a 75 fe ff       	call   c00008c0 <strcmp>
c0019356:	83 c4 10             	add    esp,0x10
c0019359:	85 c0                	test   eax,eax
c001935b:	74 b8                	je     c0019315 <CPU::detectFeatures()+0x385>
c001935d:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0019367:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001936c:	0f 86 be 00 00 00    	jbe    c0019430 <CPU::detectFeatures()+0x4a0>
c0019372:	83 ec 0c             	sub    esp,0xc
c0019375:	68 80 00 00 00       	push   0x80
c001937a:	e8 ab f8 ff ff       	call   c0018c2a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001937f:	83 e0 01             	and    eax,0x1
c0019382:	c1 e0 06             	shl    eax,0x6
c0019385:	88 c2                	mov    dl,al
c0019387:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001938d:	83 e0 bf             	and    eax,0xffffffbf
c0019390:	09 d0                	or     eax,edx
c0019392:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019398:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001939f:	e8 86 f8 ff ff       	call   c0018c2a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00193a4:	83 e0 01             	and    eax,0x1
c00193a7:	c1 e0 04             	shl    eax,0x4
c00193aa:	88 c2                	mov    dl,al
c00193ac:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00193b2:	83 e0 ef             	and    eax,0xffffffef
c00193b5:	09 d0                	or     eax,edx
c00193b7:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00193bd:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00193c4:	e8 61 f8 ff ff       	call   c0018c2a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00193c9:	c1 e0 07             	shl    eax,0x7
c00193cc:	88 c2                	mov    dl,al
c00193ce:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00193d4:	83 e0 7f             	and    eax,0x7f
c00193d7:	09 d0                	or     eax,edx
c00193d9:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00193df:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00193e6:	e8 6d f8 ff ff       	call   c0018c58 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00193eb:	83 e0 01             	and    eax,0x1
c00193ee:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00193f5:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00193fb:	83 e0 f7             	and    eax,0xfffffff7
c00193fe:	09 d0                	or     eax,edx
c0019400:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019406:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001940d:	e8 46 f8 ff ff       	call   c0018c58 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019412:	83 c4 10             	add    esp,0x10
c0019415:	83 e0 01             	and    eax,0x1
c0019418:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001941f:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019425:	83 e0 fb             	and    eax,0xfffffffb
c0019428:	09 d0                	or     eax,edx
c001942a:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019430:	83 ec 0c             	sub    esp,0xc
c0019433:	56                   	push   esi
c0019434:	55                   	push   ebp
c0019435:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0019439:	57                   	push   edi
c001943a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001943e:	50                   	push   eax
c001943f:	6a 01                	push   0x1
c0019441:	e8 04 f7 ff ff       	call   c0018b4a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019446:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001944a:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019450:	88 ca                	mov    dl,cl
c0019452:	83 e0 f0             	and    eax,0xfffffff0
c0019455:	83 e2 0f             	and    edx,0xf
c0019458:	09 d0                	or     eax,edx
c001945a:	88 ca                	mov    dl,cl
c001945c:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0019462:	c0 ea 04             	shr    dl,0x4
c0019465:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0019469:	0f b6 c2             	movzx  eax,dl
c001946c:	83 c4 20             	add    esp,0x20
c001946f:	c1 e0 06             	shl    eax,0x6
c0019472:	89 c5                	mov    ebp,eax
c0019474:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001947a:	66 25 3f c0          	and    ax,0xc03f
c001947e:	09 e8                	or     eax,ebp
c0019480:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019487:	89 c8                	mov    eax,ecx
c0019489:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001948f:	c1 e8 08             	shr    eax,0x8
c0019492:	83 e2 3f             	and    edx,0x3f
c0019495:	83 e0 0f             	and    eax,0xf
c0019498:	89 c5                	mov    ebp,eax
c001949a:	c1 e5 06             	shl    ebp,0x6
c001949d:	09 d5                	or     ebp,edx
c001949f:	89 ea                	mov    edx,ebp
c00194a1:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00194a7:	88 c2                	mov    dl,al
c00194a9:	c0 ea 02             	shr    dl,0x2
c00194ac:	89 d5                	mov    ebp,edx
c00194ae:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00194b4:	83 e2 c0             	and    edx,0xffffffc0
c00194b7:	09 d5                	or     ebp,edx
c00194b9:	89 ea                	mov    edx,ebp
c00194bb:	89 cd                	mov    ebp,ecx
c00194bd:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00194c3:	c1 ed 0c             	shr    ebp,0xc
c00194c6:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00194cc:	83 e5 03             	and    ebp,0x3
c00194cf:	83 e2 cf             	and    edx,0xffffffcf
c00194d2:	c1 e5 04             	shl    ebp,0x4
c00194d5:	09 d5                	or     ebp,edx
c00194d7:	3c 06                	cmp    al,0x6
c00194d9:	89 ea                	mov    edx,ebp
c00194db:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00194e1:	74 04                	je     c00194e7 <CPU::detectFeatures()+0x557>
c00194e3:	3c 0f                	cmp    al,0xf
c00194e5:	75 5c                	jne    c0019543 <CPU::detectFeatures()+0x5b3>
c00194e7:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00194eb:	89 cd                	mov    ebp,ecx
c00194ed:	c1 ed 10             	shr    ebp,0x10
c00194f0:	c1 e5 04             	shl    ebp,0x4
c00194f3:	09 ea                	or     edx,ebp
c00194f5:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00194fb:	0f b6 d2             	movzx  edx,dl
c00194fe:	66 81 e5 3f c0       	and    bp,0xc03f
c0019503:	c1 e2 06             	shl    edx,0x6
c0019506:	09 ea                	or     edx,ebp
c0019508:	3c 0f                	cmp    al,0xf
c001950a:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0019511:	75 30                	jne    c0019543 <CPU::detectFeatures()+0x5b3>
c0019513:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0019519:	c1 e9 14             	shr    ecx,0x14
c001951c:	83 e0 3f             	and    eax,0x3f
c001951f:	83 c1 0f             	add    ecx,0xf
c0019522:	88 ca                	mov    dl,cl
c0019524:	c0 e9 02             	shr    cl,0x2
c0019527:	c1 e2 06             	shl    edx,0x6
c001952a:	09 d0                	or     eax,edx
c001952c:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0019532:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0019538:	83 e0 c0             	and    eax,0xffffffc0
c001953b:	09 c1                	or     ecx,eax
c001953d:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019543:	83 ec 0c             	sub    esp,0xc
c0019546:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001954d:	56                   	push   esi
c001954e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019552:	50                   	push   eax
c0019553:	57                   	push   edi
c0019554:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019558:	55                   	push   ebp
c0019559:	68 00 00 00 80       	push   0x80000000
c001955e:	e8 e7 f5 ff ff       	call   c0018b4a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019563:	83 c4 20             	add    esp,0x20
c0019566:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001956e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019572:	76 1e                	jbe    c0019592 <CPU::detectFeatures()+0x602>
c0019574:	83 ec 0c             	sub    esp,0xc
c0019577:	56                   	push   esi
c0019578:	50                   	push   eax
c0019579:	57                   	push   edi
c001957a:	55                   	push   ebp
c001957b:	68 01 00 00 80       	push   0x80000001
c0019580:	e8 c5 f5 ff ff       	call   c0018b4a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019585:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c001958f:	83 c4 20             	add    esp,0x20
c0019592:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019598:	83 f8 01             	cmp    eax,0x1
c001959b:	75 6f                	jne    c001960c <CPU::detectFeatures()+0x67c>
c001959d:	51                   	push   ecx
c001959e:	51                   	push   ecx
c001959f:	68 36 b7 02 c0       	push   0xc002b736
c00195a4:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00195a8:	56                   	push   esi
c00195a9:	e8 86 72 fe ff       	call   c0000834 <strcpy>
c00195ae:	5f                   	pop    edi
c00195af:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00195b5:	5d                   	pop    ebp
c00195b6:	66 c1 e8 06          	shr    ax,0x6
c00195ba:	0f b6 c0             	movzx  eax,al
c00195bd:	50                   	push   eax
c00195be:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00195c4:	c1 e8 0e             	shr    eax,0xe
c00195c7:	0f b6 c0             	movzx  eax,al
c00195ca:	50                   	push   eax
c00195cb:	e8 24 f2 ff ff       	call   c00187f4 <CPU::lookupIntelName(unsigned char, unsigned char)>
c00195d0:	5a                   	pop    edx
c00195d1:	59                   	pop    ecx
c00195d2:	50                   	push   eax
c00195d3:	56                   	push   esi
c00195d4:	e8 9b 73 fe ff       	call   c0000974 <strcat>
c00195d9:	5f                   	pop    edi
c00195da:	5d                   	pop    ebp
c00195db:	56                   	push   esi
c00195dc:	53                   	push   ebx
c00195dd:	e8 fa ad ff ff       	call   c00143dc <Device::setName(char const*)>
c00195e2:	58                   	pop    eax
c00195e3:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00195e9:	5a                   	pop    edx
c00195ea:	68 3d b7 02 c0       	push   0xc002b73d
c00195ef:	50                   	push   eax
c00195f0:	e8 cb 72 fe ff       	call   c00008c0 <strcmp>
c00195f5:	83 c4 10             	add    esp,0x10
c00195f8:	85 c0                	test   eax,eax
c00195fa:	0f 85 71 03 00 00    	jne    c0019971 <CPU::detectFeatures()+0x9e1>
c0019600:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0019607:	e9 65 03 00 00       	jmp    c0019971 <CPU::detectFeatures()+0x9e1>
c001960c:	83 f8 02             	cmp    eax,0x2
c001960f:	0f 85 b5 00 00 00    	jne    c00196ca <CPU::detectFeatures()+0x73a>
c0019615:	57                   	push   edi
c0019616:	57                   	push   edi
c0019617:	68 4f b7 02 c0       	push   0xc002b74f
c001961c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019620:	56                   	push   esi
c0019621:	e8 0e 72 fe ff       	call   c0000834 <strcpy>
c0019626:	5d                   	pop    ebp
c0019627:	58                   	pop    eax
c0019628:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001962e:	66 c1 e8 06          	shr    ax,0x6
c0019632:	0f b6 c0             	movzx  eax,al
c0019635:	50                   	push   eax
c0019636:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001963c:	c1 e8 0e             	shr    eax,0xe
c001963f:	0f b6 c0             	movzx  eax,al
c0019642:	50                   	push   eax
c0019643:	e8 18 f0 ff ff       	call   c0018660 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019648:	5a                   	pop    edx
c0019649:	59                   	pop    ecx
c001964a:	50                   	push   eax
c001964b:	56                   	push   esi
c001964c:	e8 23 73 fe ff       	call   c0000974 <strcat>
c0019651:	5f                   	pop    edi
c0019652:	5d                   	pop    ebp
c0019653:	56                   	push   esi
c0019654:	53                   	push   ebx
c0019655:	e8 82 ad ff ff       	call   c00143dc <Device::setName(char const*)>
c001965a:	58                   	pop    eax
c001965b:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019661:	5a                   	pop    edx
c0019662:	68 54 b7 02 c0       	push   0xc002b754
c0019667:	50                   	push   eax
c0019668:	e8 53 72 fe ff       	call   c00008c0 <strcmp>
c001966d:	83 c4 10             	add    esp,0x10
c0019670:	85 c0                	test   eax,eax
c0019672:	75 20                	jne    c0019694 <CPU::detectFeatures()+0x704>
c0019674:	8b 15 a8 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e2a8
c001967a:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019680:	a8 01                	test   al,0x1
c0019682:	74 10                	je     c0019694 <CPU::detectFeatures()+0x704>
c0019684:	83 e0 fe             	and    eax,0xfffffffe
c0019687:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001968d:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019694:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001969a:	c1 e8 0e             	shr    eax,0xe
c001969d:	3c 05                	cmp    al,0x5
c001969f:	0f 85 cc 02 00 00    	jne    c0019971 <CPU::detectFeatures()+0x9e1>
c00196a5:	56                   	push   esi
c00196a6:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00196ac:	83 e0 0f             	and    eax,0xf
c00196af:	50                   	push   eax
c00196b0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00196b6:	66 c1 e8 06          	shr    ax,0x6
c00196ba:	0f b6 c0             	movzx  eax,al
c00196bd:	50                   	push   eax
c00196be:	6a 05                	push   0x5
c00196c0:	e8 11 f4 ff ff       	call   c0018ad6 <CPU::AMD_K6_writeback(int, int, int)>
c00196c5:	e9 1f 02 00 00       	jmp    c00198e9 <CPU::detectFeatures()+0x959>
c00196ca:	8d 50 fd             	lea    edx,[eax-0x3]
c00196cd:	83 fa 01             	cmp    edx,0x1
c00196d0:	76 09                	jbe    c00196db <CPU::detectFeatures()+0x74b>
c00196d2:	83 f8 06             	cmp    eax,0x6
c00196d5:	0f 85 91 01 00 00    	jne    c001986c <CPU::detectFeatures()+0x8dc>
c00196db:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00196e1:	c1 ea 0e             	shr    edx,0xe
c00196e4:	80 fa 05             	cmp    dl,0x5
c00196e7:	75 7b                	jne    c0019764 <CPU::detectFeatures()+0x7d4>
c00196e9:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00196ef:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00196f4:	66 81 fa 00 01       	cmp    dx,0x100
c00196f9:	75 0c                	jne    c0019707 <CPU::detectFeatures()+0x777>
c00196fb:	51                   	push   ecx
c00196fc:	51                   	push   ecx
c00196fd:	68 5b b7 02 c0       	push   0xc002b75b
c0019702:	e9 dc 01 00 00       	jmp    c00198e3 <CPU::detectFeatures()+0x953>
c0019707:	66 81 fa 00 02       	cmp    dx,0x200
c001970c:	75 0c                	jne    c001971a <CPU::detectFeatures()+0x78a>
c001970e:	52                   	push   edx
c001970f:	52                   	push   edx
c0019710:	68 6e b7 02 c0       	push   0xc002b76e
c0019715:	e9 c9 01 00 00       	jmp    c00198e3 <CPU::detectFeatures()+0x953>
c001971a:	66 81 fa 40 02       	cmp    dx,0x240
c001971f:	75 0c                	jne    c001972d <CPU::detectFeatures()+0x79d>
c0019721:	50                   	push   eax
c0019722:	50                   	push   eax
c0019723:	68 80 b7 02 c0       	push   0xc002b780
c0019728:	e9 b6 01 00 00       	jmp    c00198e3 <CPU::detectFeatures()+0x953>
c001972d:	83 f8 06             	cmp    eax,0x6
c0019730:	75 0c                	jne    c001973e <CPU::detectFeatures()+0x7ae>
c0019732:	50                   	push   eax
c0019733:	50                   	push   eax
c0019734:	68 92 b7 02 c0       	push   0xc002b792
c0019739:	e9 a5 01 00 00       	jmp    c00198e3 <CPU::detectFeatures()+0x953>
c001973e:	83 f8 04             	cmp    eax,0x4
c0019741:	75 0c                	jne    c001974f <CPU::detectFeatures()+0x7bf>
c0019743:	50                   	push   eax
c0019744:	50                   	push   eax
c0019745:	68 9e b7 02 c0       	push   0xc002b79e
c001974a:	e9 94 01 00 00       	jmp    c00198e3 <CPU::detectFeatures()+0x953>
c001974f:	83 f8 03             	cmp    eax,0x3
c0019752:	0f 85 19 02 00 00    	jne    c0019971 <CPU::detectFeatures()+0x9e1>
c0019758:	50                   	push   eax
c0019759:	50                   	push   eax
c001975a:	68 a6 b7 02 c0       	push   0xc002b7a6
c001975f:	e9 7f 01 00 00       	jmp    c00198e3 <CPU::detectFeatures()+0x953>
c0019764:	80 fa 06             	cmp    dl,0x6
c0019767:	0f 85 db 00 00 00    	jne    c0019848 <CPU::detectFeatures()+0x8b8>
c001976d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019773:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019778:	66 81 fa 80 01       	cmp    dx,0x180
c001977d:	75 0c                	jne    c001978b <CPU::detectFeatures()+0x7fb>
c001977f:	50                   	push   eax
c0019780:	50                   	push   eax
c0019781:	68 b1 b7 02 c0       	push   0xc002b7b1
c0019786:	e9 58 01 00 00       	jmp    c00198e3 <CPU::detectFeatures()+0x953>
c001978b:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019791:	66 f7 c1 80 ff       	test   cx,0xff80
c0019796:	75 0c                	jne    c00197a4 <CPU::detectFeatures()+0x814>
c0019798:	50                   	push   eax
c0019799:	50                   	push   eax
c001979a:	68 c1 b7 02 c0       	push   0xc002b7c1
c001979f:	e9 3f 01 00 00       	jmp    c00198e3 <CPU::detectFeatures()+0x953>
c00197a4:	66 81 fa 40 02       	cmp    dx,0x240
c00197a9:	75 0c                	jne    c00197b7 <CPU::detectFeatures()+0x827>
c00197ab:	55                   	push   ebp
c00197ac:	55                   	push   ebp
c00197ad:	68 c8 b7 02 c0       	push   0xc002b7c8
c00197b2:	e9 2c 01 00 00       	jmp    c00198e3 <CPU::detectFeatures()+0x953>
c00197b7:	66 81 fa 80 02       	cmp    dx,0x280
c00197bc:	75 0c                	jne    c00197ca <CPU::detectFeatures()+0x83a>
c00197be:	57                   	push   edi
c00197bf:	57                   	push   edi
c00197c0:	68 d1 b7 02 c0       	push   0xc002b7d1
c00197c5:	e9 19 01 00 00       	jmp    c00198e3 <CPU::detectFeatures()+0x953>
c00197ca:	66 81 fa 40 03       	cmp    dx,0x340
c00197cf:	74 ed                	je     c00197be <CPU::detectFeatures()+0x82e>
c00197d1:	66 81 fa c0 03       	cmp    dx,0x3c0
c00197d6:	75 0c                	jne    c00197e4 <CPU::detectFeatures()+0x854>
c00197d8:	56                   	push   esi
c00197d9:	56                   	push   esi
c00197da:	68 d8 b7 02 c0       	push   0xc002b7d8
c00197df:	e9 ff 00 00 00       	jmp    c00198e3 <CPU::detectFeatures()+0x953>
c00197e4:	83 f8 06             	cmp    eax,0x6
c00197e7:	0f 84 45 ff ff ff    	je     c0019732 <CPU::detectFeatures()+0x7a2>
c00197ed:	83 f8 04             	cmp    eax,0x4
c00197f0:	0f 84 4d ff ff ff    	je     c0019743 <CPU::detectFeatures()+0x7b3>
c00197f6:	83 f8 03             	cmp    eax,0x3
c00197f9:	0f 85 72 01 00 00    	jne    c0019971 <CPU::detectFeatures()+0x9e1>
c00197ff:	51                   	push   ecx
c0019800:	51                   	push   ecx
c0019801:	68 e1 b7 02 c0       	push   0xc002b7e1
c0019806:	53                   	push   ebx
c0019807:	e8 d0 ab ff ff       	call   c00143dc <Device::setName(char const*)>
c001980c:	b1 c1                	mov    cl,0xc1
c001980e:	88 c8                	mov    al,cl
c0019810:	e6 22                	out    0x22,al
c0019812:	e4 23                	in     al,0x23
c0019814:	88 c2                	mov    dl,al
c0019816:	88 c8                	mov    al,cl
c0019818:	e6 22                	out    0x22,al
c001981a:	88 d0                	mov    al,dl
c001981c:	83 c8 10             	or     eax,0x10
c001981f:	e6 23                	out    0x23,al
c0019821:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019828:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001982b:	89 d0                	mov    eax,edx
c001982d:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019833:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019837:	40                   	inc    eax
c0019838:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001983e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019843:	e9 a1 00 00 00       	jmp    c00198e9 <CPU::detectFeatures()+0x959>
c0019848:	83 f8 06             	cmp    eax,0x6
c001984b:	0f 84 e1 fe ff ff    	je     c0019732 <CPU::detectFeatures()+0x7a2>
c0019851:	83 f8 04             	cmp    eax,0x4
c0019854:	0f 84 e9 fe ff ff    	je     c0019743 <CPU::detectFeatures()+0x7b3>
c001985a:	83 f8 03             	cmp    eax,0x3
c001985d:	0f 85 0e 01 00 00    	jne    c0019971 <CPU::detectFeatures()+0x9e1>
c0019863:	52                   	push   edx
c0019864:	52                   	push   edx
c0019865:	68 ec b7 02 c0       	push   0xc002b7ec
c001986a:	eb 77                	jmp    c00198e3 <CPU::detectFeatures()+0x953>
c001986c:	83 f8 07             	cmp    eax,0x7
c001986f:	75 09                	jne    c001987a <CPU::detectFeatures()+0x8ea>
c0019871:	50                   	push   eax
c0019872:	50                   	push   eax
c0019873:	68 f6 b7 02 c0       	push   0xc002b7f6
c0019878:	eb 69                	jmp    c00198e3 <CPU::detectFeatures()+0x953>
c001987a:	83 f8 0a             	cmp    eax,0xa
c001987d:	75 09                	jne    c0019888 <CPU::detectFeatures()+0x8f8>
c001987f:	50                   	push   eax
c0019880:	50                   	push   eax
c0019881:	68 01 b8 02 c0       	push   0xc002b801
c0019886:	eb 5b                	jmp    c00198e3 <CPU::detectFeatures()+0x953>
c0019888:	83 f8 0b             	cmp    eax,0xb
c001988b:	75 09                	jne    c0019896 <CPU::detectFeatures()+0x906>
c001988d:	50                   	push   eax
c001988e:	50                   	push   eax
c001988f:	68 09 b8 02 c0       	push   0xc002b809
c0019894:	eb 4d                	jmp    c00198e3 <CPU::detectFeatures()+0x953>
c0019896:	83 f8 08             	cmp    eax,0x8
c0019899:	75 09                	jne    c00198a4 <CPU::detectFeatures()+0x914>
c001989b:	50                   	push   eax
c001989c:	50                   	push   eax
c001989d:	68 12 b8 02 c0       	push   0xc002b812
c00198a2:	eb 3f                	jmp    c00198e3 <CPU::detectFeatures()+0x953>
c00198a4:	83 f8 09             	cmp    eax,0x9
c00198a7:	75 09                	jne    c00198b2 <CPU::detectFeatures()+0x922>
c00198a9:	50                   	push   eax
c00198aa:	50                   	push   eax
c00198ab:	68 1a b8 02 c0       	push   0xc002b81a
c00198b0:	eb 31                	jmp    c00198e3 <CPU::detectFeatures()+0x953>
c00198b2:	83 f8 05             	cmp    eax,0x5
c00198b5:	75 09                	jne    c00198c0 <CPU::detectFeatures()+0x930>
c00198b7:	50                   	push   eax
c00198b8:	50                   	push   eax
c00198b9:	68 22 b8 02 c0       	push   0xc002b822
c00198be:	eb 23                	jmp    c00198e3 <CPU::detectFeatures()+0x953>
c00198c0:	83 f8 0c             	cmp    eax,0xc
c00198c3:	75 09                	jne    c00198ce <CPU::detectFeatures()+0x93e>
c00198c5:	55                   	push   ebp
c00198c6:	55                   	push   ebp
c00198c7:	68 30 b8 02 c0       	push   0xc002b830
c00198cc:	eb 15                	jmp    c00198e3 <CPU::detectFeatures()+0x953>
c00198ce:	83 f8 0d             	cmp    eax,0xd
c00198d1:	75 09                	jne    c00198dc <CPU::detectFeatures()+0x94c>
c00198d3:	57                   	push   edi
c00198d4:	57                   	push   edi
c00198d5:	68 3b b8 02 c0       	push   0xc002b83b
c00198da:	eb 07                	jmp    c00198e3 <CPU::detectFeatures()+0x953>
c00198dc:	56                   	push   esi
c00198dd:	56                   	push   esi
c00198de:	68 4f b8 02 c0       	push   0xc002b84f
c00198e3:	53                   	push   ebx
c00198e4:	e8 f3 aa ff ff       	call   c00143dc <Device::setName(char const*)>
c00198e9:	83 c4 10             	add    esp,0x10
c00198ec:	e9 80 00 00 00       	jmp    c0019971 <CPU::detectFeatures()+0x9e1>
c00198f1:	51                   	push   ecx
c00198f2:	51                   	push   ecx
c00198f3:	68 9b b6 02 c0       	push   0xc002b69b
c00198f8:	57                   	push   edi
c00198f9:	e8 36 6f fe ff       	call   c0000834 <strcpy>
c00198fe:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019908:	e8 a1 69 fe ff       	call   c00002ae <is486>
c001990d:	83 c4 10             	add    esp,0x10
c0019910:	85 c0                	test   eax,eax
c0019912:	74 2b                	je     c001993f <CPU::detectFeatures()+0x9af>
c0019914:	52                   	push   edx
c0019915:	52                   	push   edx
c0019916:	68 5b b8 02 c0       	push   0xc002b85b
c001991b:	53                   	push   ebx
c001991c:	e8 bb aa ff ff       	call   c00143dc <Device::setName(char const*)>
c0019921:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019928:	0f 20 c0             	mov    eax,cr0
c001992b:	83 e0 14             	and    eax,0x14
c001992e:	83 c4 10             	add    esp,0x10
c0019931:	83 f8 04             	cmp    eax,0x4
c0019934:	75 1f                	jne    c0019955 <CPU::detectFeatures()+0x9c5>
c0019936:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c001993d:	eb 32                	jmp    c0019971 <CPU::detectFeatures()+0x9e1>
c001993f:	50                   	push   eax
c0019940:	50                   	push   eax
c0019941:	68 66 b8 02 c0       	push   0xc002b866
c0019946:	53                   	push   ebx
c0019947:	e8 90 aa ff ff       	call   c00143dc <Device::setName(char const*)>
c001994c:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019953:	eb d3                	jmp    c0019928 <CPU::detectFeatures()+0x998>
c0019955:	e8 2f 69 fe ff       	call   c0000289 <hasLegacyFPU>
c001995a:	83 e0 01             	and    eax,0x1
c001995d:	8d 14 00             	lea    edx,[eax+eax*1]
c0019960:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019966:	83 e0 fd             	and    eax,0xfffffffd
c0019969:	09 d0                	or     eax,edx
c001996b:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019971:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019978:	83 c4 4c             	add    esp,0x4c
c001997b:	5b                   	pop    ebx
c001997c:	5e                   	pop    esi
c001997d:	5f                   	pop    edi
c001997e:	5d                   	pop    ebp
c001997f:	c3                   	ret    

c0019980 <CPU::setupSMEP()>:
c0019980:	0f 20 e0             	mov    eax,cr4
c0019983:	0d 00 00 10 00       	or     eax,0x100000
c0019988:	0f 22 e0             	mov    cr4,eax
c001998b:	c3                   	ret    

c001998c <CPU::setupUMIP()>:
c001998c:	0f 20 e0             	mov    eax,cr4
c001998f:	80 cc 08             	or     ah,0x8
c0019992:	0f 22 e0             	mov    cr4,eax
c0019995:	c3                   	ret    

c0019996 <CPU::setupTSC()>:
c0019996:	0f 20 e0             	mov    eax,cr4
c0019999:	83 c8 04             	or     eax,0x4
c001999c:	0f 22 e0             	mov    cr4,eax
c001999f:	c3                   	ret    

c00199a0 <CPU::setupLargePages()>:
c00199a0:	0f 20 e0             	mov    eax,cr4
c00199a3:	83 c8 10             	or     eax,0x10
c00199a6:	0f 22 e0             	mov    cr4,eax
c00199a9:	c3                   	ret    

c00199aa <CPU::setupPAT()>:
c00199aa:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c00199af:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00199b6:	74 2c                	je     c00199e4 <CPU::setupPAT()+0x3a>
c00199b8:	53                   	push   ebx
c00199b9:	83 ec 10             	sub    esp,0x10
c00199bc:	68 77 02 00 00       	push   0x277
c00199c1:	50                   	push   eax
c00199c2:	e8 21 54 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c00199c7:	83 e2 f8             	and    edx,0xfffffff8
c00199ca:	83 ca 01             	or     edx,0x1
c00199cd:	52                   	push   edx
c00199ce:	50                   	push   eax
c00199cf:	68 77 02 00 00       	push   0x277
c00199d4:	ff 35 a8 e2 02 c0    	push   DWORD PTR ds:0xc002e2a8
c00199da:	e8 35 54 ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c00199df:	83 c4 28             	add    esp,0x28
c00199e2:	5b                   	pop    ebx
c00199e3:	c3                   	ret    
c00199e4:	c3                   	ret    
c00199e5:	90                   	nop

c00199e6 <CPU::setupMTRR()>:
c00199e6:	c3                   	ret    
c00199e7:	90                   	nop

c00199e8 <CPU::setupGlobalPages()>:
c00199e8:	0f 20 e0             	mov    eax,cr4
c00199eb:	0c 80                	or     al,0x80
c00199ed:	0f 22 e0             	mov    cr4,eax
c00199f0:	c3                   	ret    
c00199f1:	90                   	nop

c00199f2 <CPU::allowUsermodeDataAccess()>:
c00199f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00199f6:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00199fd:	74 03                	je     c0019a02 <CPU::allowUsermodeDataAccess()+0x10>
c00199ff:	0f 01 cb             	stac   
c0019a02:	c3                   	ret    
c0019a03:	90                   	nop

c0019a04 <CPU::prohibitUsermodeDataAccess()>:
c0019a04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019a08:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019a0f:	74 03                	je     c0019a14 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019a11:	0f 01 ca             	clac   
c0019a14:	c3                   	ret    
c0019a15:	90                   	nop

c0019a16 <CPU::setupSMAP()>:
c0019a16:	0f 20 e0             	mov    eax,cr4
c0019a19:	0d 00 00 20 00       	or     eax,0x200000
c0019a1e:	0f 22 e0             	mov    cr4,eax
c0019a21:	eb e1                	jmp    c0019a04 <CPU::prohibitUsermodeDataAccess()>
c0019a23:	90                   	nop

c0019a24 <CPU::setupFeatures()>:
c0019a24:	83 ec 0c             	sub    esp,0xc
c0019a27:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019a2b:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019a32:	74 07                	je     c0019a3b <CPU::setupFeatures()+0x17>
c0019a34:	52                   	push   edx
c0019a35:	e8 46 ff ff ff       	call   c0019980 <CPU::setupSMEP()>
c0019a3a:	58                   	pop    eax
c0019a3b:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019a42:	74 07                	je     c0019a4b <CPU::setupFeatures()+0x27>
c0019a44:	52                   	push   edx
c0019a45:	e8 cc ff ff ff       	call   c0019a16 <CPU::setupSMAP()>
c0019a4a:	58                   	pop    eax
c0019a4b:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019a52:	74 07                	je     c0019a5b <CPU::setupFeatures()+0x37>
c0019a54:	52                   	push   edx
c0019a55:	e8 32 ff ff ff       	call   c001998c <CPU::setupUMIP()>
c0019a5a:	58                   	pop    eax
c0019a5b:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019a62:	74 07                	je     c0019a6b <CPU::setupFeatures()+0x47>
c0019a64:	52                   	push   edx
c0019a65:	e8 2c ff ff ff       	call   c0019996 <CPU::setupTSC()>
c0019a6a:	58                   	pop    eax
c0019a6b:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019a72:	74 07                	je     c0019a7b <CPU::setupFeatures()+0x57>
c0019a74:	52                   	push   edx
c0019a75:	e8 26 ff ff ff       	call   c00199a0 <CPU::setupLargePages()>
c0019a7a:	59                   	pop    ecx
c0019a7b:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019a82:	74 07                	je     c0019a8b <CPU::setupFeatures()+0x67>
c0019a84:	52                   	push   edx
c0019a85:	e8 5e ff ff ff       	call   c00199e8 <CPU::setupGlobalPages()>
c0019a8a:	58                   	pop    eax
c0019a8b:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019a92:	74 0c                	je     c0019aa0 <CPU::setupFeatures()+0x7c>
c0019a94:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019a98:	83 c4 0c             	add    esp,0xc
c0019a9b:	e9 0a ff ff ff       	jmp    c00199aa <CPU::setupPAT()>
c0019aa0:	83 c4 0c             	add    esp,0xc
c0019aa3:	c3                   	ret    

c0019aa4 <CPU::open(int, int, void*)>:
c0019aa4:	57                   	push   edi
c0019aa5:	56                   	push   esi
c0019aa6:	53                   	push   ebx
c0019aa7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019aab:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019aaf:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019ab5:	83 ec 0c             	sub    esp,0xc
c0019ab8:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019abe:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019ac4:	50                   	push   eax
c0019ac5:	e8 0a 56 ff ff       	call   c000f0d4 <GDT::setup()>
c0019aca:	83 c4 0c             	add    esp,0xc
c0019acd:	6a 00                	push   0x0
c0019acf:	68 ef be ad de       	push   0xdeadbeef
c0019ad4:	57                   	push   edi
c0019ad5:	e8 0e 7a ff ff       	call   c00114e8 <TSS::setup(unsigned long, unsigned long)>
c0019ada:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019add:	e8 e6 79 ff ff       	call   c00114c8 <TSS::flush()>
c0019ae2:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019ae8:	89 04 24             	mov    DWORD PTR [esp],eax
c0019aeb:	e8 40 58 ff ff       	call   c000f330 <IDT::setup()>
c0019af0:	b8 00 04 00 00       	mov    eax,0x400
c0019af5:	0f 23 f8             	mov    db7,eax
c0019af8:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019b02:	e8 d6 63 ff ff       	call   c000fedd <Phys::allocatePage()>
c0019b07:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019b0d:	89 30                	mov    DWORD PTR [eax],esi
c0019b0f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019b15:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019b18:	58                   	pop    eax
c0019b19:	5a                   	pop    edx
c0019b1a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019b20:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019b24:	e8 ef 89 ff ff       	call   c0012518 <VAS::setCPUSpecific(unsigned long)>
c0019b29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b2c:	e8 5f f4 ff ff       	call   c0018f90 <CPU::detectFeatures()>
c0019b31:	e8 94 bc ff ff       	call   c00157ca <setupInterruptController()>
c0019b36:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019b3c:	a1 c0 e2 02 c0       	mov    eax,ds:0xc002e2c0
c0019b41:	83 e0 10             	and    eax,0x10
c0019b44:	83 f8 01             	cmp    eax,0x1
c0019b47:	19 c0                	sbb    eax,eax
c0019b49:	83 e0 46             	and    eax,0x46
c0019b4c:	83 c0 1e             	add    eax,0x1e
c0019b4f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019b52:	e8 b7 d1 ff ff       	call   c0016d0e <setupTimer(int)>
c0019b57:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019b5d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b60:	e8 bf fe ff ff       	call   c0019a24 <CPU::setupFeatures()>
c0019b65:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b68:	e8 a7 f1 ff ff       	call   c0018d14 <CPU::displayFeatures()>
c0019b6d:	83 c4 10             	add    esp,0x10
c0019b70:	31 c0                	xor    eax,eax
c0019b72:	5b                   	pop    ebx
c0019b73:	5e                   	pop    esi
c0019b74:	5f                   	pop    edi
c0019b75:	c3                   	ret    

c0019b76 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019b76:	57                   	push   edi
c0019b77:	56                   	push   esi
c0019b78:	53                   	push   ebx
c0019b79:	51                   	push   ecx
c0019b7a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019b7e:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019b81:	0f 02 c0             	lar    eax,ax
c0019b84:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019b87:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019b8b:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019b8e:	88 ca                	mov    dl,cl
c0019b90:	c0 ea 06             	shr    dl,0x6
c0019b93:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019b97:	89 ca                	mov    edx,ecx
c0019b99:	66 c1 ea 03          	shr    dx,0x3
c0019b9d:	83 e2 07             	and    edx,0x7
c0019ba0:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019ba5:	88 17                	mov    BYTE PTR [edi],dl
c0019ba7:	0f 84 a6 01 00 00    	je     c0019d53 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019bad:	83 e1 07             	and    ecx,0x7
c0019bb0:	80 f9 04             	cmp    cl,0x4
c0019bb3:	0f 84 98 00 00 00    	je     c0019c51 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019bb9:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019bbe:	0f 95 c0             	setne  al
c0019bc1:	80 f9 05             	cmp    cl,0x5
c0019bc4:	0f 95 c2             	setne  dl
c0019bc7:	08 c2                	or     dl,al
c0019bc9:	74 79                	je     c0019c44 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019bcb:	84 c9                	test   cl,cl
c0019bcd:	75 05                	jne    c0019bd4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019bcf:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019bd2:	eb 3c                	jmp    c0019c10 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019bd4:	80 f9 01             	cmp    cl,0x1
c0019bd7:	75 05                	jne    c0019bde <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019bd9:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019bdc:	eb 32                	jmp    c0019c10 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019bde:	80 f9 02             	cmp    cl,0x2
c0019be1:	75 05                	jne    c0019be8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019be3:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019be6:	eb 28                	jmp    c0019c10 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019be8:	31 c0                	xor    eax,eax
c0019bea:	80 f9 03             	cmp    cl,0x3
c0019bed:	75 05                	jne    c0019bf4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019bef:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019bf2:	eb 1c                	jmp    c0019c10 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019bf4:	80 f9 05             	cmp    cl,0x5
c0019bf7:	75 05                	jne    c0019bfe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019bf9:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019bfc:	eb 12                	jmp    c0019c10 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019bfe:	80 f9 06             	cmp    cl,0x6
c0019c01:	75 05                	jne    c0019c08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019c03:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019c06:	eb 08                	jmp    c0019c10 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019c08:	80 f9 07             	cmp    cl,0x7
c0019c0b:	75 03                	jne    c0019c10 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019c0d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019c10:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019c15:	75 10                	jne    c0019c27 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019c17:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019c1b:	b9 03 00 00 00       	mov    ecx,0x3
c0019c20:	01 d0                	add    eax,edx
c0019c22:	e9 37 01 00 00       	jmp    c0019d5e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019c27:	b9 02 00 00 00       	mov    ecx,0x2
c0019c2c:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019c31:	0f 85 27 01 00 00    	jne    c0019d5e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019c37:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019c3a:	b9 06 00 00 00       	mov    ecx,0x6
c0019c3f:	e9 1a 01 00 00       	jmp    c0019d5e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019c44:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019c47:	b9 06 00 00 00       	mov    ecx,0x6
c0019c4c:	e9 0f 01 00 00       	jmp    c0019d60 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019c51:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019c54:	88 ca                	mov    dl,cl
c0019c56:	c0 ea 06             	shr    dl,0x6
c0019c59:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019c5d:	89 ca                	mov    edx,ecx
c0019c5f:	66 c1 ea 03          	shr    dx,0x3
c0019c63:	83 e2 07             	and    edx,0x7
c0019c66:	80 e1 07             	and    cl,0x7
c0019c69:	75 05                	jne    c0019c70 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019c6b:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019c6e:	eb 4c                	jmp    c0019cbc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c70:	80 f9 01             	cmp    cl,0x1
c0019c73:	75 05                	jne    c0019c7a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019c75:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019c78:	eb 42                	jmp    c0019cbc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c7a:	80 f9 02             	cmp    cl,0x2
c0019c7d:	75 05                	jne    c0019c84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019c7f:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019c82:	eb 38                	jmp    c0019cbc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c84:	80 f9 03             	cmp    cl,0x3
c0019c87:	75 05                	jne    c0019c8e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019c89:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019c8c:	eb 2e                	jmp    c0019cbc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c8e:	80 f9 04             	cmp    cl,0x4
c0019c91:	75 12                	jne    c0019ca5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019c93:	f6 c4 60             	test   ah,0x60
c0019c96:	75 08                	jne    c0019ca0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019c98:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019c9b:	8d 78 14             	lea    edi,[eax+0x14]
c0019c9e:	eb 1c                	jmp    c0019cbc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ca0:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019ca3:	eb 17                	jmp    c0019cbc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ca5:	80 f9 05             	cmp    cl,0x5
c0019ca8:	75 05                	jne    c0019caf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019caa:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019cad:	eb 0d                	jmp    c0019cbc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019caf:	80 f9 06             	cmp    cl,0x6
c0019cb2:	75 05                	jne    c0019cb9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019cb4:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019cb7:	eb 03                	jmp    c0019cbc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019cb9:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019cbc:	84 d2                	test   dl,dl
c0019cbe:	75 05                	jne    c0019cc5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019cc0:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019cc3:	eb 3c                	jmp    c0019d01 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019cc5:	80 fa 01             	cmp    dl,0x1
c0019cc8:	75 05                	jne    c0019ccf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019cca:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019ccd:	eb 32                	jmp    c0019d01 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ccf:	80 fa 02             	cmp    dl,0x2
c0019cd2:	75 05                	jne    c0019cd9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019cd4:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019cd7:	eb 28                	jmp    c0019d01 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019cd9:	80 fa 03             	cmp    dl,0x3
c0019cdc:	75 05                	jne    c0019ce3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019cde:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019ce1:	eb 1e                	jmp    c0019d01 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ce3:	31 c0                	xor    eax,eax
c0019ce5:	80 fa 04             	cmp    dl,0x4
c0019ce8:	74 17                	je     c0019d01 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019cea:	80 fa 05             	cmp    dl,0x5
c0019ced:	75 05                	jne    c0019cf4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019cef:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019cf2:	eb 0d                	jmp    c0019d01 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019cf4:	80 fa 06             	cmp    dl,0x6
c0019cf7:	75 05                	jne    c0019cfe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019cf9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019cfc:	eb 03                	jmp    c0019d01 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019cfe:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019d01:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019d06:	0f 94 c2             	sete   dl
c0019d09:	80 f9 05             	cmp    cl,0x5
c0019d0c:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019d10:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019d15:	d3 e0                	shl    eax,cl
c0019d17:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019d1b:	74 0a                	je     c0019d27 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019d1d:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019d20:	b9 07 00 00 00       	mov    ecx,0x7
c0019d25:	eb 37                	jmp    c0019d5e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d27:	01 f8                	add    eax,edi
c0019d29:	b9 03 00 00 00       	mov    ecx,0x3
c0019d2e:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019d33:	74 2b                	je     c0019d60 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019d35:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019d3a:	75 0d                	jne    c0019d49 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019d3c:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019d40:	01 c8                	add    eax,ecx
c0019d42:	b9 04 00 00 00       	mov    ecx,0x4
c0019d47:	eb 17                	jmp    c0019d60 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019d49:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019d4c:	b9 07 00 00 00       	mov    ecx,0x7
c0019d51:	eb 0d                	jmp    c0019d60 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019d53:	b9 02 00 00 00       	mov    ecx,0x2
c0019d58:	b2 01                	mov    dl,0x1
c0019d5a:	31 c0                	xor    eax,eax
c0019d5c:	eb 02                	jmp    c0019d60 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019d5e:	31 d2                	xor    edx,edx
c0019d60:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019d64:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019d66:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019d6a:	88 11                	mov    BYTE PTR [ecx],dl
c0019d6c:	5a                   	pop    edx
c0019d6d:	5b                   	pop    ebx
c0019d6e:	5e                   	pop    esi
c0019d6f:	5f                   	pop    edi
c0019d70:	c3                   	ret    

c0019d71 <Krnl::smpEntry()>:
c0019d71:	eb fe                	jmp    c0019d71 <Krnl::smpEntry()>

c0019d73 <Krnl::startCPU(int)>:
c0019d73:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c0019d78:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019d7f:	0f 84 36 01 00 00    	je     c0019ebb <Krnl::startCPU(int)+0x148>
c0019d85:	53                   	push   ebx
c0019d86:	83 ec 08             	sub    esp,0x8
c0019d89:	e8 1b 3f 00 00       	call   c001dca9 <lockScheduler()>
c0019d8e:	52                   	push   edx
c0019d8f:	52                   	push   edx
c0019d90:	6a 1b                	push   0x1b
c0019d92:	ff 35 a8 e2 02 c0    	push   DWORD PTR ds:0xc002e2a8
c0019d98:	e8 4b 50 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019d9d:	59                   	pop    ecx
c0019d9e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019da3:	89 c3                	mov    ebx,eax
c0019da5:	58                   	pop    eax
c0019da6:	53                   	push   ebx
c0019da7:	68 a0 b8 02 c0       	push   0xc002b8a0
c0019dac:	e8 23 90 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0019db1:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019dbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019dbf:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019dc9:	c1 e0 18             	shl    eax,0x18
c0019dcc:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019dd2:	83 c4 10             	add    esp,0x10
c0019dd5:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019ddb:	09 c2                	or     edx,eax
c0019ddd:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019de3:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019de9:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019def:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019df5:	80 cd c5             	or     ch,0xc5
c0019df8:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019dfe:	f3 90                	pause  
c0019e00:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019e02:	0f ba e1 0c          	bt     ecx,0xc
c0019e06:	72 f6                	jb     c0019dfe <Krnl::startCPU(int)+0x8b>
c0019e08:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019e0e:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019e14:	09 c1                	or     ecx,eax
c0019e16:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019e1c:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019e22:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019e28:	80 cd 85             	or     ch,0x85
c0019e2b:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019e31:	f3 90                	pause  
c0019e33:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019e35:	0f ba e1 0c          	bt     ecx,0xc
c0019e39:	72 f6                	jb     c0019e31 <Krnl::startCPU(int)+0xbe>
c0019e3b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019e45:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019e4b:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019e51:	09 c1                	or     ecx,eax
c0019e53:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019e59:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019e5f:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019e65:	81 c9 02 06 00 00    	or     ecx,0x602
c0019e6b:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019e71:	f3 90                	pause  
c0019e73:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019e75:	0f ba e1 0c          	bt     ecx,0xc
c0019e79:	72 f6                	jb     c0019e71 <Krnl::startCPU(int)+0xfe>
c0019e7b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019e85:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019e8b:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019e91:	09 c8                	or     eax,ecx
c0019e93:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019e99:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019e9f:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019ea4:	0d 02 06 00 00       	or     eax,0x602
c0019ea9:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019eaf:	f3 90                	pause  
c0019eb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0019eb3:	0f ba e0 0c          	bt     eax,0xc
c0019eb7:	72 f6                	jb     c0019eaf <Krnl::startCPU(int)+0x13c>
c0019eb9:	eb fe                	jmp    c0019eb9 <Krnl::startCPU(int)+0x146>
c0019ebb:	c3                   	ret    

c0019ebc <Krnl::startCPUs()>:
c0019ebc:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c0019ec1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019ec7:	88 c2                	mov    dl,al
c0019ec9:	83 e2 0a             	and    edx,0xa
c0019ecc:	80 fa 0a             	cmp    dl,0xa
c0019ecf:	75 09                	jne    c0019eda <Krnl::startCPUs()+0x1e>
c0019ed1:	a8 01                	test   al,0x1
c0019ed3:	74 05                	je     c0019eda <Krnl::startCPUs()+0x1e>
c0019ed5:	e9 c1 62 fe ff       	jmp    c000019b <prepareTramp>
c0019eda:	c3                   	ret    
c0019edb:	90                   	nop

c0019edc <EnvVarContainer::getEnv(char const*)>:
c0019edc:	57                   	push   edi
c0019edd:	56                   	push   esi
c0019ede:	53                   	push   ebx
c0019edf:	31 db                	xor    ebx,ebx
c0019ee1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019ee5:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019ee7:	7e 2b                	jle    c0019f14 <EnvVarContainer::getEnv(char const*)+0x38>
c0019ee9:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019ef0:	50                   	push   eax
c0019ef1:	50                   	push   eax
c0019ef2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019ef5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019ef8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019efc:	e8 bf 69 fe ff       	call   c00008c0 <strcmp>
c0019f01:	83 c4 10             	add    esp,0x10
c0019f04:	85 c0                	test   eax,eax
c0019f06:	75 09                	jne    c0019f11 <EnvVarContainer::getEnv(char const*)+0x35>
c0019f08:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019f0b:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019f0f:	eb 05                	jmp    c0019f16 <EnvVarContainer::getEnv(char const*)+0x3a>
c0019f11:	43                   	inc    ebx
c0019f12:	eb d1                	jmp    c0019ee5 <EnvVarContainer::getEnv(char const*)+0x9>
c0019f14:	31 c0                	xor    eax,eax
c0019f16:	5b                   	pop    ebx
c0019f17:	5e                   	pop    esi
c0019f18:	5f                   	pop    edi
c0019f19:	c3                   	ret    

c0019f1a <EnvVarContainer::setEnv(char const*, char const*)>:
c0019f1a:	57                   	push   edi
c0019f1b:	56                   	push   esi
c0019f1c:	53                   	push   ebx
c0019f1d:	83 ec 1c             	sub    esp,0x1c
c0019f20:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019f24:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019f28:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019f2c:	57                   	push   edi
c0019f2d:	e8 62 68 fe ff       	call   c0000794 <strlen>
c0019f32:	40                   	inc    eax
c0019f33:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f36:	e8 05 59 ff ff       	call   c000f840 <malloc>
c0019f3b:	89 34 24             	mov    DWORD PTR [esp],esi
c0019f3e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019f42:	e8 4d 68 fe ff       	call   c0000794 <strlen>
c0019f47:	40                   	inc    eax
c0019f48:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f4b:	e8 f0 58 ff ff       	call   c000f840 <malloc>
c0019f50:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019f53:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019f57:	e8 38 68 fe ff       	call   c0000794 <strlen>
c0019f5c:	83 c4 0c             	add    esp,0xc
c0019f5f:	40                   	inc    eax
c0019f60:	50                   	push   eax
c0019f61:	6a 00                	push   0x0
c0019f63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019f67:	e8 0c 68 fe ff       	call   c0000778 <memset>
c0019f6c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019f6f:	e8 20 68 fe ff       	call   c0000794 <strlen>
c0019f74:	83 c4 0c             	add    esp,0xc
c0019f77:	40                   	inc    eax
c0019f78:	50                   	push   eax
c0019f79:	57                   	push   edi
c0019f7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019f7e:	e8 c1 67 fe ff       	call   c0000744 <memcpy>
c0019f83:	89 34 24             	mov    DWORD PTR [esp],esi
c0019f86:	e8 09 68 fe ff       	call   c0000794 <strlen>
c0019f8b:	83 c4 0c             	add    esp,0xc
c0019f8e:	40                   	inc    eax
c0019f8f:	50                   	push   eax
c0019f90:	6a 00                	push   0x0
c0019f92:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019f96:	e8 dd 67 fe ff       	call   c0000778 <memset>
c0019f9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0019f9e:	e8 f1 67 fe ff       	call   c0000794 <strlen>
c0019fa3:	83 c4 0c             	add    esp,0xc
c0019fa6:	40                   	inc    eax
c0019fa7:	50                   	push   eax
c0019fa8:	56                   	push   esi
c0019fa9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019fad:	e8 92 67 fe ff       	call   c0000744 <memcpy>
c0019fb2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019fb4:	40                   	inc    eax
c0019fb5:	89 03                	mov    DWORD PTR [ebx],eax
c0019fb7:	c1 e0 03             	shl    eax,0x3
c0019fba:	5a                   	pop    edx
c0019fbb:	59                   	pop    ecx
c0019fbc:	50                   	push   eax
c0019fbd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0019fc0:	e8 67 58 ff ff       	call   c000f82c <realloc>
c0019fc5:	83 c4 0c             	add    esp,0xc
c0019fc8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019fcb:	6a 08                	push   0x8
c0019fcd:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019fd1:	52                   	push   edx
c0019fd2:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019fd4:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c0019fd8:	50                   	push   eax
c0019fd9:	e8 66 67 fe ff       	call   c0000744 <memcpy>
c0019fde:	83 c4 20             	add    esp,0x20
c0019fe1:	5b                   	pop    ebx
c0019fe2:	5e                   	pop    esi
c0019fe3:	5f                   	pop    edi
c0019fe4:	c3                   	ret    
c0019fe5:	90                   	nop

c0019fe6 <EnvVarContainer::deleteEnv(char const*)>:
c0019fe6:	c3                   	ret    
c0019fe7:	90                   	nop

c0019fe8 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019fe8:	55                   	push   ebp
c0019fe9:	57                   	push   edi
c0019fea:	56                   	push   esi
c0019feb:	53                   	push   ebx
c0019fec:	81 ec 38 01 00 00    	sub    esp,0x138
c0019ff2:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c0019ff9:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001a000:	68 14 01 00 00       	push   0x114
c001a005:	e8 36 58 ff ff       	call   c000f840 <malloc>
c001a00a:	83 c4 0c             	add    esp,0xc
c001a00d:	89 c7                	mov    edi,eax
c001a00f:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001a012:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a019:	50                   	push   eax
c001a01a:	e8 0d 93 ff ff       	call   c001332c <File::File(char const*, Process*)>
c001a01f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a022:	e8 d7 95 ff ff       	call   c00135fe <File::exists()>
c001a027:	83 c4 10             	add    esp,0x10
c001a02a:	84 c0                	test   al,al
c001a02c:	75 31                	jne    c001a05f <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a02e:	51                   	push   ecx
c001a02f:	51                   	push   ecx
c001a030:	6a 12                	push   0x12
c001a032:	57                   	push   edi
c001a033:	e8 58 93 ff ff       	call   c0013390 <File::open(FileOpenMode)>
c001a038:	8b 07                	mov    eax,DWORD PTR [edi]
c001a03a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a03d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a040:	e8 4f 67 fe ff       	call   c0000794 <strlen>
c001a045:	5a                   	pop    edx
c001a046:	31 d2                	xor    edx,edx
c001a048:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a04c:	51                   	push   ecx
c001a04d:	55                   	push   ebp
c001a04e:	52                   	push   edx
c001a04f:	50                   	push   eax
c001a050:	57                   	push   edi
c001a051:	ff d3                	call   ebx
c001a053:	83 c4 14             	add    esp,0x14
c001a056:	57                   	push   edi
c001a057:	e8 92 93 ff ff       	call   c00133ee <File::close()>
c001a05c:	83 c4 10             	add    esp,0x10
c001a05f:	31 db                	xor    ebx,ebx
c001a061:	50                   	push   eax
c001a062:	31 ed                	xor    ebp,ebp
c001a064:	68 00 01 00 00       	push   0x100
c001a069:	6a 00                	push   0x0
c001a06b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a06f:	50                   	push   eax
c001a070:	e8 03 67 fe ff       	call   c0000778 <memset>
c001a075:	58                   	pop    eax
c001a076:	5a                   	pop    edx
c001a077:	6a 01                	push   0x1
c001a079:	57                   	push   edi
c001a07a:	e8 11 93 ff ff       	call   c0013390 <File::open(FileOpenMode)>
c001a07f:	83 c4 10             	add    esp,0x10
c001a082:	83 ec 0c             	sub    esp,0xc
c001a085:	8b 07                	mov    eax,DWORD PTR [edi]
c001a087:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a08b:	51                   	push   ecx
c001a08c:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a090:	52                   	push   edx
c001a091:	6a 00                	push   0x0
c001a093:	6a 01                	push   0x1
c001a095:	57                   	push   edi
c001a096:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a099:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a09d:	83 c4 20             	add    esp,0x20
c001a0a0:	3c 0d                	cmp    al,0xd
c001a0a2:	0f 84 12 01 00 00    	je     c001a1ba <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a0a8:	85 db                	test   ebx,ebx
c001a0aa:	0f 84 fd 00 00 00    	je     c001a1ad <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a0b0:	3c 0a                	cmp    al,0xa
c001a0b2:	74 13                	je     c001a0c7 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a0b4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a0b9:	74 0c                	je     c001a0c7 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a0bb:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a0c1:	0f 8e e6 00 00 00    	jle    c001a1ad <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a0c7:	83 ec 0c             	sub    esp,0xc
c001a0ca:	8d 53 01             	lea    edx,[ebx+0x1]
c001a0cd:	29 dd                	sub    ebp,ebx
c001a0cf:	52                   	push   edx
c001a0d0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a0d4:	e8 67 57 ff ff       	call   c000f840 <malloc>
c001a0d9:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a0dc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a0e0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a0e3:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a0e7:	e8 54 57 ff ff       	call   c000f840 <malloc>
c001a0ec:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a0f0:	83 c4 0c             	add    esp,0xc
c001a0f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a0f7:	52                   	push   edx
c001a0f8:	6a 00                	push   0x0
c001a0fa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a0fe:	e8 75 66 fe ff       	call   c0000778 <memset>
c001a103:	83 c4 0c             	add    esp,0xc
c001a106:	53                   	push   ebx
c001a107:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a10b:	55                   	push   ebp
c001a10c:	01 eb                	add    ebx,ebp
c001a10e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a112:	e8 2d 66 fe ff       	call   c0000744 <memcpy>
c001a117:	83 c4 0c             	add    esp,0xc
c001a11a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a11e:	51                   	push   ecx
c001a11f:	6a 00                	push   0x0
c001a121:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a125:	e8 4e 66 fe ff       	call   c0000778 <memset>
c001a12a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a12d:	e8 62 66 fe ff       	call   c0000794 <strlen>
c001a132:	83 c4 0c             	add    esp,0xc
c001a135:	50                   	push   eax
c001a136:	53                   	push   ebx
c001a137:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a13b:	e8 04 66 fe ff       	call   c0000744 <memcpy>
c001a140:	5b                   	pop    ebx
c001a141:	58                   	pop    eax
c001a142:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a146:	68 b1 b8 02 c0       	push   0xc002b8b1
c001a14b:	e8 84 8c ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001a150:	8b 06                	mov    eax,DWORD PTR [esi]
c001a152:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a155:	40                   	inc    eax
c001a156:	83 c4 10             	add    esp,0x10
c001a159:	89 06                	mov    DWORD PTR [esi],eax
c001a15b:	85 d2                	test   edx,edx
c001a15d:	75 0c                	jne    c001a16b <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a15f:	83 ec 0c             	sub    esp,0xc
c001a162:	6a 08                	push   0x8
c001a164:	e8 d7 56 ff ff       	call   c000f840 <malloc>
c001a169:	eb 0c                	jmp    c001a177 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a16b:	c1 e0 03             	shl    eax,0x3
c001a16e:	51                   	push   ecx
c001a16f:	51                   	push   ecx
c001a170:	50                   	push   eax
c001a171:	52                   	push   edx
c001a172:	e8 b5 56 ff ff       	call   c000f82c <realloc>
c001a177:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a17a:	83 c4 10             	add    esp,0x10
c001a17d:	31 db                	xor    ebx,ebx
c001a17f:	52                   	push   edx
c001a180:	6a 08                	push   0x8
c001a182:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a186:	50                   	push   eax
c001a187:	8b 16                	mov    edx,DWORD PTR [esi]
c001a189:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a18c:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a190:	50                   	push   eax
c001a191:	e8 ae 65 fe ff       	call   c0000744 <memcpy>
c001a196:	83 c4 0c             	add    esp,0xc
c001a199:	68 00 01 00 00       	push   0x100
c001a19e:	6a 00                	push   0x0
c001a1a0:	55                   	push   ebp
c001a1a1:	31 ed                	xor    ebp,ebp
c001a1a3:	e8 d0 65 fe ff       	call   c0000778 <memset>
c001a1a8:	83 c4 10             	add    esp,0x10
c001a1ab:	eb 0d                	jmp    c001a1ba <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a1ad:	3c 3d                	cmp    al,0x3d
c001a1af:	74 07                	je     c001a1b8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a1b1:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a1b5:	45                   	inc    ebp
c001a1b6:	eb 02                	jmp    c001a1ba <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a1b8:	89 eb                	mov    ebx,ebp
c001a1ba:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a1bf:	0f 85 bd fe ff ff    	jne    c001a082 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a1c5:	50                   	push   eax
c001a1c6:	50                   	push   eax
c001a1c7:	ff 36                	push   DWORD PTR [esi]
c001a1c9:	68 bf b8 02 c0       	push   0xc002b8bf
c001a1ce:	e8 01 8c ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001a1d3:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a1d9:	5b                   	pop    ebx
c001a1da:	5e                   	pop    esi
c001a1db:	5f                   	pop    edi
c001a1dc:	5d                   	pop    ebp
c001a1dd:	c3                   	ret    

c001a1de <EnvVarContainer::__loadSystem()>:
c001a1de:	83 ec 10             	sub    esp,0x10
c001a1e1:	68 e0 d7 02 c0       	push   0xc002d7e0
c001a1e6:	68 ea b8 02 c0       	push   0xc002b8ea
c001a1eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a1ef:	e8 f4 fd ff ff       	call   c0019fe8 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a1f4:	83 c4 1c             	add    esp,0x1c
c001a1f7:	c3                   	ret    

c001a1f8 <EnvVarContainer::__loadUser()>:
c001a1f8:	c3                   	ret    
c001a1f9:	90                   	nop

c001a1fa <EnvVarContainer::EnvVarContainer(Process*)>:
c001a1fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1fe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a204:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a208:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a20c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a20f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a213:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a21a:	90                   	nop
c001a21b:	c3                   	ret    

c001a21c <EnvVarContainer::~EnvVarContainer()>:
c001a21c:	83 ec 0c             	sub    esp,0xc
c001a21f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a223:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a226:	85 c0                	test   eax,eax
c001a228:	74 1d                	je     c001a247 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a22a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a22e:	8b 00                	mov    eax,DWORD PTR [eax]
c001a230:	85 c0                	test   eax,eax
c001a232:	74 13                	je     c001a247 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a238:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a23b:	83 ec 0c             	sub    esp,0xc
c001a23e:	50                   	push   eax
c001a23f:	e8 0c 56 ff ff       	call   c000f850 <free>
c001a244:	83 c4 10             	add    esp,0x10
c001a247:	90                   	nop
c001a248:	83 c4 0c             	add    esp,0xc
c001a24b:	c3                   	ret    

c001a24c <Krnl::getEnv(Process*, char const*)>:
c001a24c:	53                   	push   ebx
c001a24d:	83 ec 08             	sub    esp,0x8
c001a250:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a254:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a258:	39 05 14 18 03 c0    	cmp    DWORD PTR ds:0xc0031814,eax
c001a25e:	74 04                	je     c001a264 <Krnl::getEnv(Process*, char const*)+0x18>
c001a260:	85 c0                	test   eax,eax
c001a262:	75 0b                	jne    c001a26f <Krnl::getEnv(Process*, char const*)+0x23>
c001a264:	a1 f4 0d 03 c0       	mov    eax,ds:0xc0030df4
c001a269:	85 c0                	test   eax,eax
c001a26b:	75 19                	jne    c001a286 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a26d:	eb 27                	jmp    c001a296 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a26f:	52                   	push   edx
c001a270:	52                   	push   edx
c001a271:	53                   	push   ebx
c001a272:	ff b0 3a 1b 00 00    	push   DWORD PTR [eax+0x1b3a]
c001a278:	e8 5f fc ff ff       	call   c0019edc <EnvVarContainer::getEnv(char const*)>
c001a27d:	83 c4 10             	add    esp,0x10
c001a280:	85 c0                	test   eax,eax
c001a282:	75 28                	jne    c001a2ac <Krnl::getEnv(Process*, char const*)+0x60>
c001a284:	eb de                	jmp    c001a264 <Krnl::getEnv(Process*, char const*)+0x18>
c001a286:	52                   	push   edx
c001a287:	52                   	push   edx
c001a288:	53                   	push   ebx
c001a289:	50                   	push   eax
c001a28a:	e8 4d fc ff ff       	call   c0019edc <EnvVarContainer::getEnv(char const*)>
c001a28f:	83 c4 10             	add    esp,0x10
c001a292:	85 c0                	test   eax,eax
c001a294:	75 16                	jne    c001a2ac <Krnl::getEnv(Process*, char const*)+0x60>
c001a296:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a29a:	a1 f8 0d 03 c0       	mov    eax,ds:0xc0030df8
c001a29f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a2a3:	83 c4 08             	add    esp,0x8
c001a2a6:	5b                   	pop    ebx
c001a2a7:	e9 30 fc ff ff       	jmp    c0019edc <EnvVarContainer::getEnv(char const*)>
c001a2ac:	83 c4 08             	add    esp,0x8
c001a2af:	5b                   	pop    ebx
c001a2b0:	c3                   	ret    

c001a2b1 <Krnl::setEnvSystem(char const*, char const*)>:
c001a2b1:	83 ec 10             	sub    esp,0x10
c001a2b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a2b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a2bc:	ff 35 f8 0d 03 c0    	push   DWORD PTR ds:0xc0030df8
c001a2c2:	e8 53 fc ff ff       	call   c0019f1a <EnvVarContainer::setEnv(char const*, char const*)>
c001a2c7:	83 c4 1c             	add    esp,0x1c
c001a2ca:	c3                   	ret    

c001a2cb <Krnl::setEnvUser(char const*, char const*)>:
c001a2cb:	a1 f4 0d 03 c0       	mov    eax,ds:0xc0030df4
c001a2d0:	85 c0                	test   eax,eax
c001a2d2:	74 15                	je     c001a2e9 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a2d4:	83 ec 10             	sub    esp,0x10
c001a2d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a2db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a2df:	50                   	push   eax
c001a2e0:	e8 35 fc ff ff       	call   c0019f1a <EnvVarContainer::setEnv(char const*, char const*)>
c001a2e5:	83 c4 1c             	add    esp,0x1c
c001a2e8:	c3                   	ret    
c001a2e9:	c3                   	ret    

c001a2ea <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a2ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2ee:	8b 80 3a 1b 00 00    	mov    eax,DWORD PTR [eax+0x1b3a]
c001a2f4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a2f8:	e9 1d fc ff ff       	jmp    c0019f1a <EnvVarContainer::setEnv(char const*, char const*)>

c001a2fd <Krnl::deleteEnvSystem(char const*)>:
c001a2fd:	c3                   	ret    

c001a2fe <Krnl::deleteEnvUser(char const*)>:
c001a2fe:	c3                   	ret    

c001a2ff <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a2ff:	c3                   	ret    

c001a300 <Krnl::newProcessEnv(Process*)>:
c001a300:	83 ec 28             	sub    esp,0x28
c001a303:	6a 0c                	push   0xc
c001a305:	e8 36 55 ff ff       	call   c000f840 <malloc>
c001a30a:	5a                   	pop    edx
c001a30b:	59                   	pop    ecx
c001a30c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a310:	50                   	push   eax
c001a311:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a315:	e8 e0 fe ff ff       	call   c001a1fa <EnvVarContainer::EnvVarContainer(Process*)>
c001a31a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a31e:	83 c4 2c             	add    esp,0x2c
c001a321:	c3                   	ret    

c001a322 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a322:	56                   	push   esi
c001a323:	53                   	push   ebx
c001a324:	83 ec 10             	sub    esp,0x10
c001a327:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a32b:	8b b0 3a 1b 00 00    	mov    esi,DWORD PTR [eax+0x1b3a]
c001a331:	6a 0c                	push   0xc
c001a333:	e8 08 55 ff ff       	call   c000f840 <malloc>
c001a338:	89 c3                	mov    ebx,eax
c001a33a:	58                   	pop    eax
c001a33b:	5a                   	pop    edx
c001a33c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a340:	53                   	push   ebx
c001a341:	e8 b4 fe ff ff       	call   c001a1fa <EnvVarContainer::EnvVarContainer(Process*)>
c001a346:	8b 06                	mov    eax,DWORD PTR [esi]
c001a348:	89 03                	mov    DWORD PTR [ebx],eax
c001a34a:	c1 e0 03             	shl    eax,0x3
c001a34d:	89 04 24             	mov    DWORD PTR [esp],eax
c001a350:	e8 eb 54 ff ff       	call   c000f840 <malloc>
c001a355:	83 c4 0c             	add    esp,0xc
c001a358:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a35b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a35d:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a364:	52                   	push   edx
c001a365:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a368:	50                   	push   eax
c001a369:	e8 d6 63 fe ff       	call   c0000744 <memcpy>
c001a36e:	89 d8                	mov    eax,ebx
c001a370:	83 c4 14             	add    esp,0x14
c001a373:	5b                   	pop    ebx
c001a374:	5e                   	pop    esi
c001a375:	c3                   	ret    

c001a376 <Krnl::loadSystemEnv()>:
c001a376:	53                   	push   ebx
c001a377:	83 ec 14             	sub    esp,0x14
c001a37a:	6a 0c                	push   0xc
c001a37c:	e8 bf 54 ff ff       	call   c000f840 <malloc>
c001a381:	89 c3                	mov    ebx,eax
c001a383:	58                   	pop    eax
c001a384:	5a                   	pop    edx
c001a385:	ff 35 14 18 03 c0    	push   DWORD PTR ds:0xc0031814
c001a38b:	53                   	push   ebx
c001a38c:	e8 69 fe ff ff       	call   c001a1fa <EnvVarContainer::EnvVarContainer(Process*)>
c001a391:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a394:	89 1d f8 0d 03 c0    	mov    DWORD PTR ds:0xc0030df8,ebx
c001a39a:	e8 3f fe ff ff       	call   c001a1de <EnvVarContainer::__loadSystem()>
c001a39f:	83 c4 18             	add    esp,0x18
c001a3a2:	5b                   	pop    ebx
c001a3a3:	c3                   	ret    

c001a3a4 <Krnl::loadUserEnv()>:
c001a3a4:	53                   	push   ebx
c001a3a5:	83 ec 14             	sub    esp,0x14
c001a3a8:	6a 0c                	push   0xc
c001a3aa:	e8 91 54 ff ff       	call   c000f840 <malloc>
c001a3af:	89 c3                	mov    ebx,eax
c001a3b1:	58                   	pop    eax
c001a3b2:	5a                   	pop    edx
c001a3b3:	ff 35 14 18 03 c0    	push   DWORD PTR ds:0xc0031814
c001a3b9:	53                   	push   ebx
c001a3ba:	e8 3b fe ff ff       	call   c001a1fa <EnvVarContainer::EnvVarContainer(Process*)>
c001a3bf:	89 1d f4 0d 03 c0    	mov    DWORD PTR ds:0xc0030df4,ebx
c001a3c5:	83 c4 18             	add    esp,0x18
c001a3c8:	5b                   	pop    ebx
c001a3c9:	c3                   	ret    

c001a3ca <Krnl::flushEnv()>:
c001a3ca:	c3                   	ret    

c001a3cb <Krnl::getProcessTotalEnvCount(Process*)>:
c001a3cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3cf:	8b 15 f4 0d 03 c0    	mov    edx,DWORD PTR ds:0xc0030df4
c001a3d5:	8b 88 3a 1b 00 00    	mov    ecx,DWORD PTR [eax+0x1b3a]
c001a3db:	a1 f8 0d 03 c0       	mov    eax,ds:0xc0030df8
c001a3e0:	8b 00                	mov    eax,DWORD PTR [eax]
c001a3e2:	03 01                	add    eax,DWORD PTR [ecx]
c001a3e4:	85 d2                	test   edx,edx
c001a3e6:	74 02                	je     c001a3ea <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a3e8:	03 02                	add    eax,DWORD PTR [edx]
c001a3ea:	c3                   	ret    

c001a3eb <Krnl::getProcessEnvPair(Process*, int)>:
c001a3eb:	57                   	push   edi
c001a3ec:	8b 0d f4 0d 03 c0    	mov    ecx,DWORD PTR ds:0xc0030df4
c001a3f2:	56                   	push   esi
c001a3f3:	85 c9                	test   ecx,ecx
c001a3f5:	53                   	push   ebx
c001a3f6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a3fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a3fe:	8b 97 3a 1b 00 00    	mov    edx,DWORD PTR [edi+0x1b3a]
c001a404:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a408:	8b 02                	mov    eax,DWORD PTR [edx]
c001a40a:	75 47                	jne    c001a453 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a40c:	39 c3                	cmp    ebx,eax
c001a40e:	7c 47                	jl     c001a457 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a410:	8b 15 f8 0d 03 c0    	mov    edx,DWORD PTR ds:0xc0030df8
c001a416:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a418:	01 c1                	add    ecx,eax
c001a41a:	39 d9                	cmp    ecx,ebx
c001a41c:	7e 6c                	jle    c001a48a <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a41e:	51                   	push   ecx
c001a41f:	89 d9                	mov    ecx,ebx
c001a421:	29 c1                	sub    ecx,eax
c001a423:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a426:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a42a:	53                   	push   ebx
c001a42b:	68 0c b9 02 c0       	push   0xc002b90c
c001a430:	e8 9f 89 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001a435:	8b 87 3a 1b 00 00    	mov    eax,DWORD PTR [edi+0x1b3a]
c001a43b:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a43d:	a1 f8 0d 03 c0       	mov    eax,ds:0xc0030df8
c001a442:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a445:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a449:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a44c:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a44f:	89 06                	mov    DWORD PTR [esi],eax
c001a451:	eb 51                	jmp    c001a4a4 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a453:	39 c3                	cmp    ebx,eax
c001a455:	7d 05                	jge    c001a45c <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a457:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a45a:	eb 20                	jmp    c001a47c <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a45c:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a45e:	8d 14 07             	lea    edx,[edi+eax*1]
c001a461:	39 da                	cmp    edx,ebx
c001a463:	7e 04                	jle    c001a469 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a465:	29 c3                	sub    ebx,eax
c001a467:	eb 10                	jmp    c001a479 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a469:	8b 0d f8 0d 03 c0    	mov    ecx,DWORD PTR ds:0xc0030df8
c001a46f:	03 11                	add    edx,DWORD PTR [ecx]
c001a471:	39 da                	cmp    edx,ebx
c001a473:	7e 15                	jle    c001a48a <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a475:	29 c3                	sub    ebx,eax
c001a477:	29 fb                	sub    ebx,edi
c001a479:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a47c:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a480:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a483:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a486:	89 06                	mov    DWORD PTR [esi],eax
c001a488:	eb 1d                	jmp    c001a4a7 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a48a:	83 ec 0c             	sub    esp,0xc
c001a48d:	68 20 b9 02 c0       	push   0xc002b920
c001a492:	e8 18 00 00 00       	call   c001a4af <Krnl::panic(char const*)>
c001a497:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a49d:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a4a4:	83 c4 10             	add    esp,0x10
c001a4a7:	89 f0                	mov    eax,esi
c001a4a9:	5b                   	pop    ebx
c001a4aa:	5e                   	pop    esi
c001a4ab:	5f                   	pop    edi
c001a4ac:	c2 04 00             	ret    0x4

c001a4af <Krnl::panic(char const*)>:
c001a4af:	55                   	push   ebp
c001a4b0:	89 e5                	mov    ebp,esp
c001a4b2:	53                   	push   ebx
c001a4b3:	83 ec 0c             	sub    esp,0xc
c001a4b6:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a4b9:	fa                   	cli    
c001a4ba:	c6 05 04 0e 03 c0 01 	mov    BYTE PTR ds:0xc0030e04,0x1
c001a4c1:	53                   	push   ebx
c001a4c2:	c6 05 e4 d1 02 c0 00 	mov    BYTE PTR ds:0xc002d1e4,0x0
c001a4c9:	68 3a b9 02 c0       	push   0xc002b93a
c001a4ce:	e8 01 89 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001a4d3:	58                   	pop    eax
c001a4d4:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c001a4d9:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a4df:	e8 45 68 ff ff       	call   c0010d29 <setActiveTerminal(VgaText*)>
c001a4e4:	83 c4 0c             	add    esp,0xc
c001a4e7:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c001a4ec:	6a 01                	push   0x1
c001a4ee:	6a 0f                	push   0xf
c001a4f0:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a4f6:	e8 5f 62 ff ff       	call   c001075a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a4fb:	58                   	pop    eax
c001a4fc:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c001a501:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a507:	e8 be 6a ff ff       	call   c0010fca <VgaText::clearScreen()>
c001a50c:	58                   	pop    eax
c001a50d:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c001a512:	5a                   	pop    edx
c001a513:	68 53 b9 02 c0       	push   0xc002b953
c001a518:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a51e:	e8 25 6c ff ff       	call   c0011148 <VgaText::puts(char const*)>
c001a523:	59                   	pop    ecx
c001a524:	58                   	pop    eax
c001a525:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c001a52a:	68 f8 b9 02 c0       	push   0xc002b9f8
c001a52f:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a535:	e8 0e 6c ff ff       	call   c0011148 <VgaText::puts(char const*)>
c001a53a:	58                   	pop    eax
c001a53b:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c001a540:	5a                   	pop    edx
c001a541:	68 6f b9 02 c0       	push   0xc002b96f
c001a546:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a54c:	e8 f7 6b ff ff       	call   c0011148 <VgaText::puts(char const*)>
c001a551:	59                   	pop    ecx
c001a552:	58                   	pop    eax
c001a553:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c001a558:	53                   	push   ebx
c001a559:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a55f:	e8 e4 6b ff ff       	call   c0011148 <VgaText::puts(char const*)>
c001a564:	58                   	pop    eax
c001a565:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c001a56a:	5a                   	pop    edx
c001a56b:	68 8f b9 02 c0       	push   0xc002b98f
c001a570:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a576:	e8 cd 6b ff ff       	call   c0011148 <VgaText::puts(char const*)>
c001a57b:	a1 00 0e 03 c0       	mov    eax,ds:0xc0030e00
c001a580:	83 c4 10             	add    esp,0x10
c001a583:	85 c0                	test   eax,eax
c001a585:	74 02                	je     c001a589 <Krnl::panic(char const*)+0xda>
c001a587:	ff d0                	call   eax
c001a589:	83 ec 0c             	sub    esp,0xc
c001a58c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a58f:	e8 fd 2f 00 00       	call   c001d591 <Thr::getDriverNameFromAddress(unsigned long)>
c001a594:	83 c4 10             	add    esp,0x10
c001a597:	89 c3                	mov    ebx,eax
c001a599:	85 c0                	test   eax,eax
c001a59b:	0f 84 50 02 00 00    	je     c001a7f1 <Krnl::panic(char const*)+0x342>
c001a5a1:	83 ec 08             	sub    esp,0x8
c001a5a4:	8b 15 14 18 03 c0    	mov    edx,DWORD PTR ds:0xc0031814
c001a5aa:	68 34 ba 02 c0       	push   0xc002ba34
c001a5af:	ff b2 26 19 00 00    	push   DWORD PTR [edx+0x1926]
c001a5b5:	e8 8e 6b ff ff       	call   c0011148 <VgaText::puts(char const*)>
c001a5ba:	58                   	pop    eax
c001a5bb:	5a                   	pop    edx
c001a5bc:	8b 15 14 18 03 c0    	mov    edx,DWORD PTR ds:0xc0031814
c001a5c2:	68 6f b9 02 c0       	push   0xc002b96f
c001a5c7:	ff b2 26 19 00 00    	push   DWORD PTR [edx+0x1926]
c001a5cd:	e8 76 6b ff ff       	call   c0011148 <VgaText::puts(char const*)>
c001a5d2:	59                   	pop    ecx
c001a5d3:	58                   	pop    eax
c001a5d4:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c001a5d9:	53                   	push   ebx
c001a5da:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a5e0:	e8 63 6b ff ff       	call   c0011148 <VgaText::puts(char const*)>
c001a5e5:	83 c4 10             	add    esp,0x10
c001a5e8:	83 ec 08             	sub    esp,0x8
c001a5eb:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c001a5f0:	68 8e b9 02 c0       	push   0xc002b98e
c001a5f5:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a5fb:	e8 48 6b ff ff       	call   c0011148 <VgaText::puts(char const*)>
c001a600:	58                   	pop    eax
c001a601:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c001a606:	5a                   	pop    edx
c001a607:	68 8c ba 02 c0       	push   0xc002ba8c
c001a60c:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a612:	e8 31 6b ff ff       	call   c0011148 <VgaText::puts(char const*)>
c001a617:	59                   	pop    ecx
c001a618:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c001a61d:	5b                   	pop    ebx
c001a61e:	68 cc ba 02 c0       	push   0xc002bacc
c001a623:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a629:	e8 1a 6b ff ff       	call   c0011148 <VgaText::puts(char const*)>
c001a62e:	58                   	pop    eax
c001a62f:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c001a634:	5a                   	pop    edx
c001a635:	68 7a b9 02 c0       	push   0xc002b97a
c001a63a:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a640:	e8 03 6b ff ff       	call   c0011148 <VgaText::puts(char const*)>
c001a645:	59                   	pop    ecx
c001a646:	5b                   	pop    ebx
c001a647:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a64a:	68 92 b9 02 c0       	push   0xc002b992
c001a64f:	e8 80 87 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001a654:	58                   	pop    eax
c001a655:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a658:	5a                   	pop    edx
c001a659:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a65c:	68 9b b9 02 c0       	push   0xc002b99b
c001a661:	e8 6e 87 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001a666:	59                   	pop    ecx
c001a667:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a66a:	5b                   	pop    ebx
c001a66b:	8b 00                	mov    eax,DWORD PTR [eax]
c001a66d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a670:	68 a4 b9 02 c0       	push   0xc002b9a4
c001a675:	e8 5a 87 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001a67a:	58                   	pop    eax
c001a67b:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c001a680:	5a                   	pop    edx
c001a681:	68 10 bb 02 c0       	push   0xc002bb10
c001a686:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a68c:	e8 b7 6a ff ff       	call   c0011148 <VgaText::puts(char const*)>
c001a691:	59                   	pop    ecx
c001a692:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c001a697:	5b                   	pop    ebx
c001a698:	68 ad b9 02 c0       	push   0xc002b9ad
c001a69d:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a6a3:	e8 a0 6a ff ff       	call   c0011148 <VgaText::puts(char const*)>
c001a6a8:	0f 20 c0             	mov    eax,cr0
c001a6ab:	5a                   	pop    edx
c001a6ac:	59                   	pop    ecx
c001a6ad:	50                   	push   eax
c001a6ae:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c001a6b3:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a6b9:	e8 b0 6a ff ff       	call   c001116e <VgaText::putx(unsigned int)>
c001a6be:	5b                   	pop    ebx
c001a6bf:	58                   	pop    eax
c001a6c0:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c001a6c5:	68 b7 b9 02 c0       	push   0xc002b9b7
c001a6ca:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a6d0:	e8 73 6a ff ff       	call   c0011148 <VgaText::puts(char const*)>
c001a6d5:	0f 20 d0             	mov    eax,cr2
c001a6d8:	5a                   	pop    edx
c001a6d9:	59                   	pop    ecx
c001a6da:	50                   	push   eax
c001a6db:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c001a6e0:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a6e6:	e8 83 6a ff ff       	call   c001116e <VgaText::putx(unsigned int)>
c001a6eb:	5b                   	pop    ebx
c001a6ec:	58                   	pop    eax
c001a6ed:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c001a6f2:	68 c1 b9 02 c0       	push   0xc002b9c1
c001a6f7:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a6fd:	e8 46 6a ff ff       	call   c0011148 <VgaText::puts(char const*)>
c001a702:	0f 20 d8             	mov    eax,cr3
c001a705:	5a                   	pop    edx
c001a706:	59                   	pop    ecx
c001a707:	50                   	push   eax
c001a708:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c001a70d:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a713:	e8 56 6a ff ff       	call   c001116e <VgaText::putx(unsigned int)>
c001a718:	5b                   	pop    ebx
c001a719:	58                   	pop    eax
c001a71a:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c001a71f:	68 d4 b9 02 c0       	push   0xc002b9d4
c001a724:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a72a:	e8 19 6a ff ff       	call   c0011148 <VgaText::puts(char const*)>
c001a72f:	0f 20 e0             	mov    eax,cr4
c001a732:	5a                   	pop    edx
c001a733:	59                   	pop    ecx
c001a734:	50                   	push   eax
c001a735:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c001a73a:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a740:	e8 29 6a ff ff       	call   c001116e <VgaText::putx(unsigned int)>
c001a745:	5b                   	pop    ebx
c001a746:	58                   	pop    eax
c001a747:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c001a74c:	68 de b9 02 c0       	push   0xc002b9de
c001a751:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a757:	e8 ec 69 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c001a75c:	5a                   	pop    edx
c001a75d:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c001a762:	59                   	pop    ecx
c001a763:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001a769:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a76c:	50                   	push   eax
c001a76d:	e8 fc 69 ff ff       	call   c001116e <VgaText::putx(unsigned int)>
c001a772:	5b                   	pop    ebx
c001a773:	58                   	pop    eax
c001a774:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c001a779:	68 f5 b9 02 c0       	push   0xc002b9f5
c001a77e:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a784:	e8 bf 69 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c001a789:	5a                   	pop    edx
c001a78a:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c001a78f:	59                   	pop    ecx
c001a790:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001a796:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a799:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a79c:	50                   	push   eax
c001a79d:	e8 cc 69 ff ff       	call   c001116e <VgaText::putx(unsigned int)>
c001a7a2:	5b                   	pop    ebx
c001a7a3:	58                   	pop    eax
c001a7a4:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c001a7a9:	68 f5 b9 02 c0       	push   0xc002b9f5
c001a7ae:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a7b4:	e8 8f 69 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c001a7b9:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c001a7be:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a7c1:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001a7c7:	8b 12                	mov    edx,DWORD PTR [edx]
c001a7c9:	59                   	pop    ecx
c001a7ca:	5b                   	pop    ebx
c001a7cb:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a7ce:	50                   	push   eax
c001a7cf:	e8 9a 69 ff ff       	call   c001116e <VgaText::putx(unsigned int)>
c001a7d4:	83 c4 10             	add    esp,0x10
c001a7d7:	b2 fe                	mov    dl,0xfe
c001a7d9:	e4 60                	in     al,0x60
c001a7db:	3c 1c                	cmp    al,0x1c
c001a7dd:	74 04                	je     c001a7e3 <Krnl::panic(char const*)+0x334>
c001a7df:	3c 5a                	cmp    al,0x5a
c001a7e1:	75 f6                	jne    c001a7d9 <Krnl::panic(char const*)+0x32a>
c001a7e3:	e4 64                	in     al,0x64
c001a7e5:	a8 02                	test   al,0x2
c001a7e7:	75 fa                	jne    c001a7e3 <Krnl::panic(char const*)+0x334>
c001a7e9:	88 d0                	mov    al,dl
c001a7eb:	e6 64                	out    0x64,al
c001a7ed:	fa                   	cli    
c001a7ee:	f4                   	hlt    
c001a7ef:	eb e8                	jmp    c001a7d9 <Krnl::panic(char const*)+0x32a>
c001a7f1:	50                   	push   eax
c001a7f2:	50                   	push   eax
c001a7f3:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c001a7f8:	68 60 ba 02 c0       	push   0xc002ba60
c001a7fd:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a803:	e8 40 69 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c001a808:	58                   	pop    eax
c001a809:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c001a80e:	5a                   	pop    edx
c001a80f:	68 6f b9 02 c0       	push   0xc002b96f
c001a814:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a81a:	e8 29 69 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c001a81f:	59                   	pop    ecx
c001a820:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a825:	5b                   	pop    ebx
c001a826:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a829:	83 c0 0c             	add    eax,0xc
c001a82c:	50                   	push   eax
c001a82d:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c001a832:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a838:	e8 0b 69 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c001a83d:	83 c4 10             	add    esp,0x10
c001a840:	e9 a3 fd ff ff       	jmp    c001a5e8 <Krnl::panic(char const*)+0x139>

c001a845 <Net::switchEndian16(unsigned short)>:
c001a845:	83 ec 04             	sub    esp,0x4
c001a848:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a84c:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a850:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a854:	c1 f8 08             	sar    eax,0x8
c001a857:	89 c2                	mov    edx,eax
c001a859:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a85d:	c1 e0 08             	shl    eax,0x8
c001a860:	09 d0                	or     eax,edx
c001a862:	83 c4 04             	add    esp,0x4
c001a865:	c3                   	ret    

c001a866 <Net::switchEndian32(unsigned int)>:
c001a866:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a86a:	c1 e8 18             	shr    eax,0x18
c001a86d:	89 c2                	mov    edx,eax
c001a86f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a873:	c1 e0 08             	shl    eax,0x8
c001a876:	25 00 00 ff 00       	and    eax,0xff0000
c001a87b:	09 c2                	or     edx,eax
c001a87d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a881:	c1 e8 08             	shr    eax,0x8
c001a884:	25 00 ff 00 00       	and    eax,0xff00
c001a889:	09 c2                	or     edx,eax
c001a88b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a88f:	c1 e0 18             	shl    eax,0x18
c001a892:	09 d0                	or     eax,edx
c001a894:	c3                   	ret    

c001a895 <Net::crc32Calc(unsigned char*, int)>:
c001a895:	83 ec 10             	sub    esp,0x10
c001a898:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a89d:	75 07                	jne    c001a8a6 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a89f:	b8 00 00 00 00       	mov    eax,0x0
c001a8a4:	eb 7c                	jmp    c001a922 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a8a6:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a8ab:	7f 07                	jg     c001a8b4 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a8ad:	b8 00 00 00 00       	mov    eax,0x0
c001a8b2:	eb 6e                	jmp    c001a922 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a8b4:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a8bc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a8c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a8c8:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a8cc:	7d 4e                	jge    c001a91c <Net::crc32Calc(unsigned char*, int)+0x87>
c001a8ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a8d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a8d6:	01 d0                	add    eax,edx
c001a8d8:	8a 00                	mov    al,BYTE PTR [eax]
c001a8da:	0f b6 c0             	movzx  eax,al
c001a8dd:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a8e1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a8e9:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a8ee:	7f 26                	jg     c001a916 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a8f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8f4:	83 e0 01             	and    eax,0x1
c001a8f7:	74 0d                	je     c001a906 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a8f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8fd:	d1 e8                	shr    eax,1
c001a8ff:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a904:	eb 06                	jmp    c001a90c <Net::crc32Calc(unsigned char*, int)+0x77>
c001a906:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a90a:	d1 e8                	shr    eax,1
c001a90c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a910:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a914:	eb d3                	jmp    c001a8e9 <Net::crc32Calc(unsigned char*, int)+0x54>
c001a916:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a91a:	eb a8                	jmp    c001a8c4 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a91c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a920:	f7 d0                	not    eax
c001a922:	83 c4 10             	add    esp,0x10
c001a925:	c3                   	ret    

c001a926 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a926:	83 ec 1c             	sub    esp,0x1c
c001a929:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a92d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a931:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a939:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001a93e:	7f 14                	jg     c001a954 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001a940:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a944:	8d 50 01             	lea    edx,[eax+0x1]
c001a947:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a94b:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a94e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a952:	eb e5                	jmp    c001a939 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001a954:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a958:	8d 50 01             	lea    edx,[eax+0x1]
c001a95b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a95f:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a962:	83 ec 04             	sub    esp,0x4
c001a965:	6a 06                	push   0x6
c001a967:	8d 44 24 36          	lea    eax,[esp+0x36]
c001a96b:	50                   	push   eax
c001a96c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a970:	e8 cf 5d fe ff       	call   c0000744 <memcpy>
c001a975:	83 c4 10             	add    esp,0x10
c001a978:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a97d:	83 ec 04             	sub    esp,0x4
c001a980:	6a 06                	push   0x6
c001a982:	8d 44 24 30          	lea    eax,[esp+0x30]
c001a986:	50                   	push   eax
c001a987:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a98b:	e8 b4 5d fe ff       	call   c0000744 <memcpy>
c001a990:	83 c4 10             	add    esp,0x10
c001a993:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a998:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a99c:	0f b7 c0             	movzx  eax,ax
c001a99f:	c1 f8 08             	sar    eax,0x8
c001a9a2:	89 c1                	mov    ecx,eax
c001a9a4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a9a8:	8d 50 01             	lea    edx,[eax+0x1]
c001a9ab:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a9af:	88 ca                	mov    dl,cl
c001a9b1:	88 10                	mov    BYTE PTR [eax],dl
c001a9b3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a9b7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a9bb:	8d 48 01             	lea    ecx,[eax+0x1]
c001a9be:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001a9c2:	88 10                	mov    BYTE PTR [eax],dl
c001a9c4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a9c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a9cc:	83 ec 04             	sub    esp,0x4
c001a9cf:	52                   	push   edx
c001a9d0:	50                   	push   eax
c001a9d1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a9d5:	e8 6a 5d fe ff       	call   c0000744 <memcpy>
c001a9da:	83 c4 10             	add    esp,0x10
c001a9dd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a9e1:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001a9e5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a9e9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001a9ed:	83 ec 08             	sub    esp,0x8
c001a9f0:	50                   	push   eax
c001a9f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a9f5:	e8 9b fe ff ff       	call   c001a895 <Net::crc32Calc(unsigned char*, int)>
c001a9fa:	83 c4 10             	add    esp,0x10
c001a9fd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aa01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa05:	c1 e8 18             	shr    eax,0x18
c001aa08:	89 c1                	mov    ecx,eax
c001aa0a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa0e:	8d 50 01             	lea    edx,[eax+0x1]
c001aa11:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa15:	88 ca                	mov    dl,cl
c001aa17:	88 10                	mov    BYTE PTR [eax],dl
c001aa19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa1d:	c1 e8 10             	shr    eax,0x10
c001aa20:	89 c1                	mov    ecx,eax
c001aa22:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa26:	8d 50 01             	lea    edx,[eax+0x1]
c001aa29:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa2d:	88 ca                	mov    dl,cl
c001aa2f:	88 10                	mov    BYTE PTR [eax],dl
c001aa31:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa35:	c1 e8 08             	shr    eax,0x8
c001aa38:	89 c1                	mov    ecx,eax
c001aa3a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa3e:	8d 50 01             	lea    edx,[eax+0x1]
c001aa41:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa45:	88 ca                	mov    dl,cl
c001aa47:	88 10                	mov    BYTE PTR [eax],dl
c001aa49:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa4d:	8d 50 01             	lea    edx,[eax+0x1]
c001aa50:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa54:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001aa58:	88 10                	mov    BYTE PTR [eax],dl
c001aa5a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001aa5e:	83 c4 1c             	add    esp,0x1c
c001aa61:	c3                   	ret    

c001aa62 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001aa62:	83 ec 2c             	sub    esp,0x2c
c001aa65:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aa69:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aa6d:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001aa72:	83 ec 04             	sub    esp,0x4
c001aa75:	6a 06                	push   0x6
c001aa77:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001aa7b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001aa7f:	83 c0 0e             	add    eax,0xe
c001aa82:	50                   	push   eax
c001aa83:	e8 bc 5c fe ff       	call   c0000744 <memcpy>
c001aa88:	83 c4 10             	add    esp,0x10
c001aa8b:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001aa90:	83 ec 04             	sub    esp,0x4
c001aa93:	6a 06                	push   0x6
c001aa95:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001aa99:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001aa9d:	83 c0 08             	add    eax,0x8
c001aaa0:	50                   	push   eax
c001aaa1:	e8 9e 5c fe ff       	call   c0000744 <memcpy>
c001aaa6:	83 c4 10             	add    esp,0x10
c001aaa9:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001aaae:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aab2:	8d 50 01             	lea    edx,[eax+0x1]
c001aab5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001aab9:	8a 00                	mov    al,BYTE PTR [eax]
c001aabb:	0f b6 c0             	movzx  eax,al
c001aabe:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001aac3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aac7:	8d 50 01             	lea    edx,[eax+0x1]
c001aaca:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001aace:	8a 00                	mov    al,BYTE PTR [eax]
c001aad0:	0f b6 c0             	movzx  eax,al
c001aad3:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001aad8:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001aadd:	c1 e0 08             	shl    eax,0x8
c001aae0:	89 c2                	mov    edx,eax
c001aae2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aae6:	09 d0                	or     eax,edx
c001aae8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001aaec:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001aaf0:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001aaf5:	75 3a                	jne    c001ab31 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001aaf7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aafb:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aafe:	66 3d dc 05          	cmp    ax,0x5dc
c001ab02:	77 10                	ja     c001ab14 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001ab04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ab08:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ab0b:	0f b7 c0             	movzx  eax,ax
c001ab0e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ab12:	eb 1d                	jmp    c001ab31 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ab14:	83 ec 0c             	sub    esp,0xc
c001ab17:	68 38 bb 02 c0       	push   0xc002bb38
c001ab1c:	e8 b3 82 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001ab21:	83 c4 10             	add    esp,0x10
c001ab24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ab28:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001ab2c:	e9 c0 00 00 00       	jmp    c001abf1 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001ab31:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ab35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ab39:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab3b:	83 ec 04             	sub    esp,0x4
c001ab3e:	52                   	push   edx
c001ab3f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ab43:	50                   	push   eax
c001ab44:	e8 fb 5b fe ff       	call   c0000744 <memcpy>
c001ab49:	83 c4 10             	add    esp,0x10
c001ab4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab50:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001ab54:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab58:	8d 50 01             	lea    edx,[eax+0x1]
c001ab5b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ab5f:	8a 00                	mov    al,BYTE PTR [eax]
c001ab61:	0f b6 c0             	movzx  eax,al
c001ab64:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ab68:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab6c:	8d 50 01             	lea    edx,[eax+0x1]
c001ab6f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ab73:	8a 00                	mov    al,BYTE PTR [eax]
c001ab75:	0f b6 c0             	movzx  eax,al
c001ab78:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ab7c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab80:	8d 50 01             	lea    edx,[eax+0x1]
c001ab83:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ab87:	8a 00                	mov    al,BYTE PTR [eax]
c001ab89:	0f b6 c0             	movzx  eax,al
c001ab8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ab90:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab94:	8d 50 01             	lea    edx,[eax+0x1]
c001ab97:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ab9b:	8a 00                	mov    al,BYTE PTR [eax]
c001ab9d:	0f b6 c0             	movzx  eax,al
c001aba0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aba4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aba8:	c1 e0 18             	shl    eax,0x18
c001abab:	89 c2                	mov    edx,eax
c001abad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abb1:	c1 e0 10             	shl    eax,0x10
c001abb4:	09 c2                	or     edx,eax
c001abb6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001abba:	c1 e0 08             	shl    eax,0x8
c001abbd:	09 d0                	or     eax,edx
c001abbf:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001abc3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001abc7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001abcb:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001abcf:	83 e8 04             	sub    eax,0x4
c001abd2:	83 ec 08             	sub    esp,0x8
c001abd5:	50                   	push   eax
c001abd6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001abda:	e8 b6 fc ff ff       	call   c001a895 <Net::crc32Calc(unsigned char*, int)>
c001abdf:	83 c4 10             	add    esp,0x10
c001abe2:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001abe6:	0f 94 c2             	sete   dl
c001abe9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001abed:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001abf0:	90                   	nop
c001abf1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001abf5:	83 c4 2c             	add    esp,0x2c
c001abf8:	c2 04 00             	ret    0x4

c001abfb <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001abfb:	55                   	push   ebp
c001abfc:	57                   	push   edi
c001abfd:	56                   	push   esi
c001abfe:	53                   	push   ebx
c001abff:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ac05:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001ac0c:	8a 1e                	mov    bl,BYTE PTR [esi]
c001ac0e:	8d 6e 01             	lea    ebp,[esi+0x1]
c001ac11:	80 fb 40             	cmp    bl,0x40
c001ac14:	75 1b                	jne    c001ac31 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001ac16:	8a 16                	mov    dl,BYTE PTR [esi]
c001ac18:	84 d2                	test   dl,dl
c001ac1a:	0f 84 f1 00 00 00    	je     c001ad11 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ac20:	8d 46 01             	lea    eax,[esi+0x1]
c001ac23:	80 fa 3a             	cmp    dl,0x3a
c001ac26:	74 04                	je     c001ac2c <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001ac28:	89 c6                	mov    esi,eax
c001ac2a:	eb ea                	jmp    c001ac16 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001ac2c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ac2f:	89 c6                	mov    esi,eax
c001ac31:	50                   	push   eax
c001ac32:	6a 40                	push   0x40
c001ac34:	6a 00                	push   0x0
c001ac36:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ac3a:	50                   	push   eax
c001ac3b:	e8 38 5b fe ff       	call   c0000778 <memset>
c001ac40:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ac47:	31 c0                	xor    eax,eax
c001ac49:	83 c4 10             	add    esp,0x10
c001ac4c:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ac4e:	84 c9                	test   cl,cl
c001ac50:	0f 84 bb 00 00 00    	je     c001ad11 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ac56:	3d c7 00 00 00       	cmp    eax,0xc7
c001ac5b:	0f 8f b0 00 00 00    	jg     c001ad11 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ac61:	80 f9 0a             	cmp    cl,0xa
c001ac64:	0f 85 98 00 00 00    	jne    c001ad02 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001ac6a:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001ac6f:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001ac73:	a8 df                	test   al,0xdf
c001ac75:	0f 94 c1             	sete   cl
c001ac78:	3c 23                	cmp    al,0x23
c001ac7a:	0f 94 c2             	sete   dl
c001ac7d:	08 d1                	or     cl,dl
c001ac7f:	75 4a                	jne    c001accb <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ac81:	8d 50 f7             	lea    edx,[eax-0x9]
c001ac84:	80 fa 01             	cmp    dl,0x1
c001ac87:	76 42                	jbe    c001accb <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ac89:	3c 5b                	cmp    al,0x5b
c001ac8b:	75 42                	jne    c001accf <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001ac8d:	80 fb 40             	cmp    bl,0x40
c001ac90:	75 39                	jne    c001accb <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ac92:	83 ec 0c             	sub    esp,0xc
c001ac95:	8d 54 24 65          	lea    edx,[esp+0x65]
c001ac99:	52                   	push   edx
c001ac9a:	e8 f5 5a fe ff       	call   c0000794 <strlen>
c001ac9f:	83 c4 10             	add    esp,0x10
c001aca2:	83 f8 3f             	cmp    eax,0x3f
c001aca5:	77 6a                	ja     c001ad11 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001aca7:	50                   	push   eax
c001aca8:	50                   	push   eax
c001aca9:	8d 54 24 61          	lea    edx,[esp+0x61]
c001acad:	52                   	push   edx
c001acae:	8d 54 24 24          	lea    edx,[esp+0x24]
c001acb2:	52                   	push   edx
c001acb3:	e8 7c 5b fe ff       	call   c0000834 <strcpy>
c001acb8:	58                   	pop    eax
c001acb9:	8d 54 24 24          	lea    edx,[esp+0x24]
c001acbd:	52                   	push   edx
c001acbe:	e8 d1 5a fe ff       	call   c0000794 <strlen>
c001acc3:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001acc8:	83 c4 10             	add    esp,0x10
c001accb:	31 d2                	xor    edx,edx
c001accd:	eb 3a                	jmp    c001ad09 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001accf:	80 fb 40             	cmp    bl,0x40
c001acd2:	74 06                	je     c001acda <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001acd4:	8d 44 24 58          	lea    eax,[esp+0x58]
c001acd8:	eb 20                	jmp    c001acfa <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001acda:	50                   	push   eax
c001acdb:	50                   	push   eax
c001acdc:	55                   	push   ebp
c001acdd:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ace1:	50                   	push   eax
c001ace2:	e8 d9 5b fe ff       	call   c00008c0 <strcmp>
c001ace7:	83 c4 10             	add    esp,0x10
c001acea:	85 c0                	test   eax,eax
c001acec:	75 dd                	jne    c001accb <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001acee:	eb e4                	jmp    c001acd4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001acf0:	8d 50 01             	lea    edx,[eax+0x1]
c001acf3:	80 f9 3d             	cmp    cl,0x3d
c001acf6:	74 1d                	je     c001ad15 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001acf8:	89 d0                	mov    eax,edx
c001acfa:	8a 08                	mov    cl,BYTE PTR [eax]
c001acfc:	84 c9                	test   cl,cl
c001acfe:	75 f0                	jne    c001acf0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001ad00:	eb 0f                	jmp    c001ad11 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad02:	8d 50 01             	lea    edx,[eax+0x1]
c001ad05:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001ad09:	47                   	inc    edi
c001ad0a:	89 d0                	mov    eax,edx
c001ad0c:	e9 3b ff ff ff       	jmp    c001ac4c <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001ad11:	31 c0                	xor    eax,eax
c001ad13:	eb 33                	jmp    c001ad48 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001ad15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ad19:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001ad1c:	50                   	push   eax
c001ad1d:	50                   	push   eax
c001ad1e:	8d 44 24 60          	lea    eax,[esp+0x60]
c001ad22:	50                   	push   eax
c001ad23:	56                   	push   esi
c001ad24:	e8 97 5b fe ff       	call   c00008c0 <strcmp>
c001ad29:	83 c4 10             	add    esp,0x10
c001ad2c:	85 c0                	test   eax,eax
c001ad2e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ad32:	75 97                	jne    c001accb <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad34:	51                   	push   ecx
c001ad35:	51                   	push   ecx
c001ad36:	52                   	push   edx
c001ad37:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001ad3e:	e8 f1 5a fe ff       	call   c0000834 <strcpy>
c001ad43:	83 c4 10             	add    esp,0x10
c001ad46:	b0 01                	mov    al,0x1
c001ad48:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ad4e:	5b                   	pop    ebx
c001ad4f:	5e                   	pop    esi
c001ad50:	5f                   	pop    edi
c001ad51:	5d                   	pop    ebp
c001ad52:	c3                   	ret    

c001ad53 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001ad53:	57                   	push   edi
c001ad54:	56                   	push   esi
c001ad55:	53                   	push   ebx
c001ad56:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ad5c:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001ad63:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001ad6a:	53                   	push   ebx
c001ad6b:	e8 24 5a fe ff       	call   c0000794 <strlen>
c001ad70:	89 34 24             	mov    DWORD PTR [esp],esi
c001ad73:	89 c7                	mov    edi,eax
c001ad75:	e8 1a 5a fe ff       	call   c0000794 <strlen>
c001ad7a:	83 c4 10             	add    esp,0x10
c001ad7d:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001ad81:	3d ff 00 00 00       	cmp    eax,0xff
c001ad86:	0f 87 d3 00 00 00    	ja     c001ae5f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ad8c:	57                   	push   edi
c001ad8d:	57                   	push   edi
c001ad8e:	56                   	push   esi
c001ad8f:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001ad93:	56                   	push   esi
c001ad94:	e8 9b 5a fe ff       	call   c0000834 <strcpy>
c001ad99:	58                   	pop    eax
c001ad9a:	5a                   	pop    edx
c001ad9b:	68 98 c0 02 c0       	push   0xc002c098
c001ada0:	56                   	push   esi
c001ada1:	e8 ce 5b fe ff       	call   c0000974 <strcat>
c001ada6:	59                   	pop    ecx
c001ada7:	5f                   	pop    edi
c001ada8:	53                   	push   ebx
c001ada9:	56                   	push   esi
c001adaa:	e8 c5 5b fe ff       	call   c0000974 <strcat>
c001adaf:	58                   	pop    eax
c001adb0:	5a                   	pop    edx
c001adb1:	68 84 bb 02 c0       	push   0xc002bb84
c001adb6:	56                   	push   esi
c001adb7:	e8 b8 5b fe ff       	call   c0000974 <strcat>
c001adbc:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001adc3:	e8 78 4a ff ff       	call   c000f840 <malloc>
c001adc8:	83 c4 0c             	add    esp,0xc
c001adcb:	89 c3                	mov    ebx,eax
c001adcd:	ff 35 14 18 03 c0    	push   DWORD PTR ds:0xc0031814
c001add3:	56                   	push   esi
c001add4:	50                   	push   eax
c001add5:	e8 52 85 ff ff       	call   c001332c <File::File(char const*, Process*)>
c001adda:	83 c4 10             	add    esp,0x10
c001addd:	85 db                	test   ebx,ebx
c001addf:	74 7e                	je     c001ae5f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ade1:	51                   	push   ecx
c001ade2:	51                   	push   ecx
c001ade3:	6a 01                	push   0x1
c001ade5:	53                   	push   ebx
c001ade6:	e8 a5 85 ff ff       	call   c0013390 <File::open(FileOpenMode)>
c001adeb:	83 c4 10             	add    esp,0x10
c001adee:	85 c0                	test   eax,eax
c001adf0:	74 08                	je     c001adfa <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001adf2:	83 ec 0c             	sub    esp,0xc
c001adf5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001adf7:	53                   	push   ebx
c001adf8:	eb 5f                	jmp    c001ae59 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001adfa:	52                   	push   edx
c001adfb:	8d 44 24 17          	lea    eax,[esp+0x17]
c001adff:	50                   	push   eax
c001ae00:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ae04:	50                   	push   eax
c001ae05:	53                   	push   ebx
c001ae06:	e8 31 88 ff ff       	call   c001363c <File::stat(unsigned long long*, bool*)>
c001ae0b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ae0f:	83 c4 10             	add    esp,0x10
c001ae12:	89 c1                	mov    ecx,eax
c001ae14:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001ae18:	74 31                	je     c001ae4b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001ae1a:	83 ec 0c             	sub    esp,0xc
c001ae1d:	50                   	push   eax
c001ae1e:	e8 1d 4a ff ff       	call   c000f840 <malloc>
c001ae23:	89 c6                	mov    esi,eax
c001ae25:	58                   	pop    eax
c001ae26:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae28:	8d 54 24 20          	lea    edx,[esp+0x20]
c001ae2c:	52                   	push   edx
c001ae2d:	56                   	push   esi
c001ae2e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ae32:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ae36:	53                   	push   ebx
c001ae37:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ae3a:	83 c4 20             	add    esp,0x20
c001ae3d:	85 c0                	test   eax,eax
c001ae3f:	75 0a                	jne    c001ae4b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001ae41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ae45:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001ae49:	74 18                	je     c001ae63 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001ae4b:	83 ec 0c             	sub    esp,0xc
c001ae4e:	53                   	push   ebx
c001ae4f:	e8 9a 85 ff ff       	call   c00133ee <File::close()>
c001ae54:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae59:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ae5c:	83 c4 10             	add    esp,0x10
c001ae5f:	31 c0                	xor    eax,eax
c001ae61:	eb 3b                	jmp    c001ae9e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001ae63:	83 ec 0c             	sub    esp,0xc
c001ae66:	53                   	push   ebx
c001ae67:	e8 82 85 ff ff       	call   c00133ee <File::close()>
c001ae6c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae71:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ae74:	83 c4 0c             	add    esp,0xc
c001ae77:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001ae7e:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001ae85:	56                   	push   esi
c001ae86:	e8 70 fd ff ff       	call   c001abfb <Reg::findLineFromLoadedData(char*, char*, char*)>
c001ae8b:	89 34 24             	mov    DWORD PTR [esp],esi
c001ae8e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ae92:	e8 b9 49 ff ff       	call   c000f850 <free>
c001ae97:	83 c4 10             	add    esp,0x10
c001ae9a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ae9e:	81 c4 20 01 00 00    	add    esp,0x120
c001aea4:	5b                   	pop    ebx
c001aea5:	5e                   	pop    esi
c001aea6:	5f                   	pop    edi
c001aea7:	c3                   	ret    

c001aea8 <Reg::getLine(char*, char*, char*)>:
c001aea8:	57                   	push   edi
c001aea9:	56                   	push   esi
c001aeaa:	53                   	push   ebx
c001aeab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aeaf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001aeb3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001aeb7:	57                   	push   edi
c001aeb8:	56                   	push   esi
c001aeb9:	53                   	push   ebx
c001aeba:	68 89 bb 02 c0       	push   0xc002bb89
c001aebf:	e8 8f fe ff ff       	call   c001ad53 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aec4:	83 c4 10             	add    esp,0x10
c001aec7:	84 c0                	test   al,al
c001aec9:	75 10                	jne    c001aedb <Reg::getLine(char*, char*, char*)+0x33>
c001aecb:	57                   	push   edi
c001aecc:	56                   	push   esi
c001aecd:	53                   	push   ebx
c001aece:	68 ae bb 02 c0       	push   0xc002bbae
c001aed3:	e8 7b fe ff ff       	call   c001ad53 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aed8:	83 c4 10             	add    esp,0x10
c001aedb:	5b                   	pop    ebx
c001aedc:	5e                   	pop    esi
c001aedd:	5f                   	pop    edi
c001aede:	c3                   	ret    

c001aedf <Reg::readInt(char*, char*, int*)>:
c001aedf:	55                   	push   ebp
c001aee0:	57                   	push   edi
c001aee1:	56                   	push   esi
c001aee2:	53                   	push   ebx
c001aee3:	81 ec f0 00 00 00    	sub    esp,0xf0
c001aee9:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001aeed:	57                   	push   edi
c001aeee:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001aef5:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001aefc:	e8 a7 ff ff ff       	call   c001aea8 <Reg::getLine(char*, char*, char*)>
c001af01:	83 c4 10             	add    esp,0x10
c001af04:	84 c0                	test   al,al
c001af06:	0f 84 b3 00 00 00    	je     c001afbf <Reg::readInt(char*, char*, int*)+0xe0>
c001af0c:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001af10:	80 fa 2b             	cmp    dl,0x2b
c001af13:	74 0c                	je     c001af21 <Reg::readInt(char*, char*, int*)+0x42>
c001af15:	80 fa 2d             	cmp    dl,0x2d
c001af18:	75 0e                	jne    c001af28 <Reg::readInt(char*, char*, int*)+0x49>
c001af1a:	ba 01 00 00 00       	mov    edx,0x1
c001af1f:	eb 0b                	jmp    c001af2c <Reg::readInt(char*, char*, int*)+0x4d>
c001af21:	ba 01 00 00 00       	mov    edx,0x1
c001af26:	eb 02                	jmp    c001af2a <Reg::readInt(char*, char*, int*)+0x4b>
c001af28:	31 d2                	xor    edx,edx
c001af2a:	31 c0                	xor    eax,eax
c001af2c:	be 0a 00 00 00       	mov    esi,0xa
c001af31:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001af36:	75 20                	jne    c001af58 <Reg::readInt(char*, char*, int*)+0x79>
c001af38:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001af3c:	80 f9 78             	cmp    cl,0x78
c001af3f:	75 0a                	jne    c001af4b <Reg::readInt(char*, char*, int*)+0x6c>
c001af41:	83 c2 02             	add    edx,0x2
c001af44:	be 10 00 00 00       	mov    esi,0x10
c001af49:	eb 0d                	jmp    c001af58 <Reg::readInt(char*, char*, int*)+0x79>
c001af4b:	80 f9 62             	cmp    cl,0x62
c001af4e:	75 08                	jne    c001af58 <Reg::readInt(char*, char*, int*)+0x79>
c001af50:	83 c2 02             	add    edx,0x2
c001af53:	be 02 00 00 00       	mov    esi,0x2
c001af58:	01 d7                	add    edi,edx
c001af5a:	31 d2                	xor    edx,edx
c001af5c:	8a 1f                	mov    bl,BYTE PTR [edi]
c001af5e:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001af62:	80 fb 0d             	cmp    bl,0xd
c001af65:	0f 94 c3             	sete   bl
c001af68:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001af6d:	0f 94 c1             	sete   cl
c001af70:	08 cb                	or     bl,cl
c001af72:	75 3a                	jne    c001afae <Reg::readInt(char*, char*, int*)+0xcf>
c001af74:	0f af d6             	imul   edx,esi
c001af77:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001af7c:	83 fe 10             	cmp    esi,0x10
c001af7f:	75 26                	jne    c001afa7 <Reg::readInt(char*, char*, int*)+0xc8>
c001af81:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001af85:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001af88:	89 e9                	mov    ecx,ebp
c001af8a:	80 f9 05             	cmp    cl,0x5
c001af8d:	77 06                	ja     c001af95 <Reg::readInt(char*, char*, int*)+0xb6>
c001af8f:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001af93:	eb 16                	jmp    c001afab <Reg::readInt(char*, char*, int*)+0xcc>
c001af95:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001af99:	83 e9 61             	sub    ecx,0x61
c001af9c:	80 f9 05             	cmp    cl,0x5
c001af9f:	77 06                	ja     c001afa7 <Reg::readInt(char*, char*, int*)+0xc8>
c001afa1:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001afa5:	eb 04                	jmp    c001afab <Reg::readInt(char*, char*, int*)+0xcc>
c001afa7:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001afab:	47                   	inc    edi
c001afac:	eb ae                	jmp    c001af5c <Reg::readInt(char*, char*, int*)+0x7d>
c001afae:	84 c0                	test   al,al
c001afb0:	74 02                	je     c001afb4 <Reg::readInt(char*, char*, int*)+0xd5>
c001afb2:	f7 da                	neg    edx
c001afb4:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001afbb:	89 10                	mov    DWORD PTR [eax],edx
c001afbd:	88 d8                	mov    al,bl
c001afbf:	81 c4 ec 00 00 00    	add    esp,0xec
c001afc5:	5b                   	pop    ebx
c001afc6:	5e                   	pop    esi
c001afc7:	5f                   	pop    edi
c001afc8:	5d                   	pop    ebp
c001afc9:	c3                   	ret    

c001afca <Reg::readString(char*, char*, char*, int)>:
c001afca:	57                   	push   edi
c001afcb:	56                   	push   esi
c001afcc:	53                   	push   ebx
c001afcd:	81 ec d4 00 00 00    	sub    esp,0xd4
c001afd3:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001afda:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001afde:	57                   	push   edi
c001afdf:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001afe6:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001afed:	e8 b6 fe ff ff       	call   c001aea8 <Reg::getLine(char*, char*, char*)>
c001aff2:	83 c4 10             	add    esp,0x10
c001aff5:	89 c6                	mov    esi,eax
c001aff7:	84 c0                	test   al,al
c001aff9:	74 44                	je     c001b03f <Reg::readString(char*, char*, char*, int)+0x75>
c001affb:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b002:	31 c0                	xor    eax,eax
c001b004:	4a                   	dec    edx
c001b005:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b008:	84 c9                	test   cl,cl
c001b00a:	74 0f                	je     c001b01b <Reg::readString(char*, char*, char*, int)+0x51>
c001b00c:	39 c2                	cmp    edx,eax
c001b00e:	7e 0b                	jle    c001b01b <Reg::readString(char*, char*, char*, int)+0x51>
c001b010:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b013:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b018:	40                   	inc    eax
c001b019:	eb ea                	jmp    c001b005 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b01b:	83 ec 0c             	sub    esp,0xc
c001b01e:	53                   	push   ebx
c001b01f:	e8 70 57 fe ff       	call   c0000794 <strlen>
c001b024:	83 c4 10             	add    esp,0x10
c001b027:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b02c:	75 11                	jne    c001b03f <Reg::readString(char*, char*, char*, int)+0x75>
c001b02e:	83 ec 0c             	sub    esp,0xc
c001b031:	53                   	push   ebx
c001b032:	e8 5d 57 fe ff       	call   c0000794 <strlen>
c001b037:	83 c4 10             	add    esp,0x10
c001b03a:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b03f:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b045:	89 f0                	mov    eax,esi
c001b047:	5b                   	pop    ebx
c001b048:	5e                   	pop    esi
c001b049:	5f                   	pop    edi
c001b04a:	c3                   	ret    

c001b04b <Reg::readBool(char*, char*, bool*)>:
c001b04b:	83 ec 20             	sub    esp,0x20
c001b04e:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b052:	50                   	push   eax
c001b053:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b057:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b05b:	e8 7f fe ff ff       	call   c001aedf <Reg::readInt(char*, char*, int*)>
c001b060:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b065:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b069:	0f 95 02             	setne  BYTE PTR [edx]
c001b06c:	83 c4 2c             	add    esp,0x2c
c001b06f:	c3                   	ret    

c001b070 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b070:	53                   	push   ebx
c001b071:	83 ec 1c             	sub    esp,0x1c
c001b074:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b078:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b07c:	50                   	push   eax
c001b07d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b081:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b085:	e8 c1 ff ff ff       	call   c001b04b <Reg::readBool(char*, char*, bool*)>
c001b08a:	83 c4 10             	add    esp,0x10
c001b08d:	84 c0                	test   al,al
c001b08f:	74 04                	je     c001b095 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b091:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b095:	88 d8                	mov    al,bl
c001b097:	83 c4 18             	add    esp,0x18
c001b09a:	5b                   	pop    ebx
c001b09b:	c3                   	ret    

c001b09c <Reg::readIntWithDefault(char*, char*, int)>:
c001b09c:	53                   	push   ebx
c001b09d:	83 ec 1c             	sub    esp,0x1c
c001b0a0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b0a4:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b0a8:	50                   	push   eax
c001b0a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0b1:	e8 29 fe ff ff       	call   c001aedf <Reg::readInt(char*, char*, int*)>
c001b0b6:	83 c4 10             	add    esp,0x10
c001b0b9:	84 c0                	test   al,al
c001b0bb:	74 04                	je     c001b0c1 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b0bd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b0c1:	89 d8                	mov    eax,ebx
c001b0c3:	83 c4 18             	add    esp,0x18
c001b0c6:	5b                   	pop    ebx
c001b0c7:	c3                   	ret    

c001b0c8 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b0c8:	57                   	push   edi
c001b0c9:	56                   	push   esi
c001b0ca:	53                   	push   ebx
c001b0cb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b0cf:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b0d3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b0d7:	56                   	push   esi
c001b0d8:	53                   	push   ebx
c001b0d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b0dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b0e1:	e8 e4 fe ff ff       	call   c001afca <Reg::readString(char*, char*, char*, int)>
c001b0e6:	83 c4 10             	add    esp,0x10
c001b0e9:	84 c0                	test   al,al
c001b0eb:	75 1b                	jne    c001b108 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b0ed:	50                   	push   eax
c001b0ee:	56                   	push   esi
c001b0ef:	4e                   	dec    esi
c001b0f0:	6a 00                	push   0x0
c001b0f2:	53                   	push   ebx
c001b0f3:	e8 80 56 fe ff       	call   c0000778 <memset>
c001b0f8:	83 c4 0c             	add    esp,0xc
c001b0fb:	56                   	push   esi
c001b0fc:	57                   	push   edi
c001b0fd:	53                   	push   ebx
c001b0fe:	89 fb                	mov    ebx,edi
c001b100:	e8 3f 56 fe ff       	call   c0000744 <memcpy>
c001b105:	83 c4 10             	add    esp,0x10
c001b108:	89 d8                	mov    eax,ebx
c001b10a:	5b                   	pop    ebx
c001b10b:	5e                   	pop    esi
c001b10c:	5f                   	pop    edi
c001b10d:	c3                   	ret    

c001b10e <Sys::eject(regs*)>:
c001b10e:	83 ec 0c             	sub    esp,0xc
c001b111:	83 ca ff             	or     edx,0xffffffff
c001b114:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b118:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b11b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b120:	83 e9 41             	sub    ecx,0x41
c001b123:	83 f9 19             	cmp    ecx,0x19
c001b126:	77 18                	ja     c001b140 <Sys::eject(regs*)+0x32>
c001b128:	8b 0c 8d c0 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1740]
c001b12f:	85 c9                	test   ecx,ecx
c001b131:	74 0d                	je     c001b140 <Sys::eject(regs*)+0x32>
c001b133:	83 ec 0c             	sub    esp,0xc
c001b136:	51                   	push   ecx
c001b137:	e8 74 b4 ff ff       	call   c00165b0 <LogicalDisk::eject()>
c001b13c:	83 c4 10             	add    esp,0x10
c001b13f:	99                   	cdq    
c001b140:	83 c4 0c             	add    esp,0xc
c001b143:	c3                   	ret    

c001b144 <Sys::exit(regs*)>:
c001b144:	83 ec 18             	sub    esp,0x18
c001b147:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b14b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b14e:	e8 99 35 00 00       	call   c001e6ec <terminateTask(int)>
c001b153:	83 c8 ff             	or     eax,0xffffffff
c001b156:	83 c4 1c             	add    esp,0x1c
c001b159:	89 c2                	mov    edx,eax
c001b15b:	c3                   	ret    

c001b15c <Sys::getCwd(regs*)>:
c001b15c:	83 ec 10             	sub    esp,0x10
c001b15f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b163:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b166:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b169:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b16e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b171:	e8 b8 7f ff ff       	call   c001312e <Fs::getcwd(Process*, char*, int)>
c001b176:	83 c4 1c             	add    esp,0x1c
c001b179:	99                   	cdq    
c001b17a:	c3                   	ret    

c001b17b <Sys::getPID(regs*)>:
c001b17b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b180:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b183:	8b 00                	mov    eax,DWORD PTR [eax]
c001b185:	99                   	cdq    
c001b186:	c3                   	ret    

c001b187 <Sys::getRAMData(regs*)>:
c001b187:	8b 0d f4 e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e2f4
c001b18d:	6b 05 f0 e2 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e2f0,0x64
c001b194:	99                   	cdq    
c001b195:	f7 f9                	idiv   ecx
c001b197:	c1 e0 18             	shl    eax,0x18
c001b19a:	09 c8                	or     eax,ecx
c001b19c:	99                   	cdq    
c001b19d:	c3                   	ret    

c001b19e <Sys::loadDLL(regs*)>:
c001b19e:	56                   	push   esi
c001b19f:	53                   	push   ebx
c001b1a0:	31 d2                	xor    edx,edx
c001b1a2:	51                   	push   ecx
c001b1a3:	b8 01 00 00 00       	mov    eax,0x1
c001b1a8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b1ac:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b1b0:	0f 84 8c 00 00 00    	je     c001b242 <Sys::loadDLL(regs*)+0xa4>
c001b1b6:	83 ec 0c             	sub    esp,0xc
c001b1b9:	68 14 01 00 00       	push   0x114
c001b1be:	e8 7d 46 ff ff       	call   c000f840 <malloc>
c001b1c3:	83 c4 0c             	add    esp,0xc
c001b1c6:	89 c3                	mov    ebx,eax
c001b1c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1cd:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b1d0:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b1d3:	53                   	push   ebx
c001b1d4:	e8 53 81 ff ff       	call   c001332c <File::File(char const*, Process*)>
c001b1d9:	83 c4 10             	add    esp,0x10
c001b1dc:	31 d2                	xor    edx,edx
c001b1de:	b8 02 00 00 00       	mov    eax,0x2
c001b1e3:	85 db                	test   ebx,ebx
c001b1e5:	74 5b                	je     c001b242 <Sys::loadDLL(regs*)+0xa4>
c001b1e7:	83 ec 0c             	sub    esp,0xc
c001b1ea:	53                   	push   ebx
c001b1eb:	e8 0e 84 ff ff       	call   c00135fe <File::exists()>
c001b1f0:	83 c4 10             	add    esp,0x10
c001b1f3:	84 c0                	test   al,al
c001b1f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b1f7:	75 11                	jne    c001b20a <Sys::loadDLL(regs*)+0x6c>
c001b1f9:	83 ec 0c             	sub    esp,0xc
c001b1fc:	53                   	push   ebx
c001b1fd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b200:	83 c4 10             	add    esp,0x10
c001b203:	b8 03 00 00 00       	mov    eax,0x3
c001b208:	eb 36                	jmp    c001b240 <Sys::loadDLL(regs*)+0xa2>
c001b20a:	83 ec 0c             	sub    esp,0xc
c001b20d:	53                   	push   ebx
c001b20e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b211:	58                   	pop    eax
c001b212:	5a                   	pop    edx
c001b213:	6a 00                	push   0x0
c001b215:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b218:	e8 c5 23 00 00       	call   c001d5e2 <Thr::loadDLL(char const*, bool)>
c001b21d:	83 c4 10             	add    esp,0x10
c001b220:	89 c1                	mov    ecx,eax
c001b222:	31 d2                	xor    edx,edx
c001b224:	b8 04 00 00 00       	mov    eax,0x4
c001b229:	85 c9                	test   ecx,ecx
c001b22b:	74 15                	je     c001b242 <Sys::loadDLL(regs*)+0xa4>
c001b22d:	53                   	push   ebx
c001b22e:	53                   	push   ebx
c001b22f:	ff 35 a8 e2 02 c0    	push   DWORD PTR ds:0xc002e2a8
c001b235:	51                   	push   ecx
c001b236:	e8 f6 25 00 00       	call   c001d831 <Thr::executeDLL(unsigned long, void*)>
c001b23b:	83 c4 10             	add    esp,0x10
c001b23e:	31 c0                	xor    eax,eax
c001b240:	31 d2                	xor    edx,edx
c001b242:	59                   	pop    ecx
c001b243:	5b                   	pop    ebx
c001b244:	5e                   	pop    esi
c001b245:	c3                   	ret    

c001b246 <Sys::read(regs*)>:
c001b246:	57                   	push   edi
c001b247:	56                   	push   esi
c001b248:	53                   	push   ebx
c001b249:	83 ec 10             	sub    esp,0x10
c001b24c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b250:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b253:	83 f8 02             	cmp    eax,0x2
c001b256:	77 10                	ja     c001b268 <Sys::read(regs*)+0x22>
c001b258:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b25d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b260:	8b 88 26 19 00 00    	mov    ecx,DWORD PTR [eax+0x1926]
c001b266:	eb 0e                	jmp    c001b276 <Sys::read(regs*)+0x30>
c001b268:	83 ec 0c             	sub    esp,0xc
c001b26b:	50                   	push   eax
c001b26c:	e8 b0 67 ff ff       	call   c0011a21 <getFromFileDescriptor(int)>
c001b271:	83 c4 10             	add    esp,0x10
c001b274:	89 c1                	mov    ecx,eax
c001b276:	83 c8 ff             	or     eax,0xffffffff
c001b279:	85 c9                	test   ecx,ecx
c001b27b:	89 c2                	mov    edx,eax
c001b27d:	74 28                	je     c001b2a7 <Sys::read(regs*)+0x61>
c001b27f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b287:	31 ff                	xor    edi,edi
c001b289:	83 ec 0c             	sub    esp,0xc
c001b28c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b28e:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b292:	52                   	push   edx
c001b293:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b296:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b299:	57                   	push   edi
c001b29a:	56                   	push   esi
c001b29b:	51                   	push   ecx
c001b29c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b29f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b2a3:	83 c4 20             	add    esp,0x20
c001b2a6:	99                   	cdq    
c001b2a7:	83 c4 10             	add    esp,0x10
c001b2aa:	5b                   	pop    ebx
c001b2ab:	5e                   	pop    esi
c001b2ac:	5f                   	pop    edi
c001b2ad:	c3                   	ret    

c001b2ae <Sys::sbrk(regs*)>:
c001b2ae:	56                   	push   esi
c001b2af:	53                   	push   ebx
c001b2b0:	50                   	push   eax
c001b2b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b2ba:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b2bd:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b2c0:	8b 88 32 19 00 00    	mov    ecx,DWORD PTR [eax+0x1932]
c001b2c6:	85 db                	test   ebx,ebx
c001b2c8:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b2cb:	74 02                	je     c001b2cf <Sys::sbrk(regs*)+0x21>
c001b2cd:	79 06                	jns    c001b2d5 <Sys::sbrk(regs*)+0x27>
c001b2cf:	89 f0                	mov    eax,esi
c001b2d1:	31 d2                	xor    edx,edx
c001b2d3:	eb 2a                	jmp    c001b2ff <Sys::sbrk(regs*)+0x51>
c001b2d5:	83 c8 ff             	or     eax,0xffffffff
c001b2d8:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b2de:	89 c2                	mov    edx,eax
c001b2e0:	77 1d                	ja     c001b2ff <Sys::sbrk(regs*)+0x51>
c001b2e2:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b2e8:	50                   	push   eax
c001b2e9:	c1 ea 0c             	shr    edx,0xc
c001b2ec:	68 07 0c 00 00       	push   0xc07
c001b2f1:	52                   	push   edx
c001b2f2:	51                   	push   ecx
c001b2f3:	e8 48 70 ff ff       	call   c0012340 <VAS::allocatePages(int, int)>
c001b2f8:	89 f0                	mov    eax,esi
c001b2fa:	31 d2                	xor    edx,edx
c001b2fc:	83 c4 10             	add    esp,0x10
c001b2ff:	59                   	pop    ecx
c001b300:	5b                   	pop    ebx
c001b301:	5e                   	pop    esi
c001b302:	c3                   	ret    

c001b303 <Sys::setCwd(regs*)>:
c001b303:	83 ec 14             	sub    esp,0x14
c001b306:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b30a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b30d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b312:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b315:	e8 83 83 ff ff       	call   c001369d <Fs::setcwd(Process*, char*)>
c001b31a:	83 c4 1c             	add    esp,0x1c
c001b31d:	99                   	cdq    
c001b31e:	c3                   	ret    

c001b31f <Sys::setTime(regs*)>:
c001b31f:	55                   	push   ebp
c001b320:	31 d2                	xor    edx,edx
c001b322:	57                   	push   edi
c001b323:	bf 18 00 00 00       	mov    edi,0x18
c001b328:	56                   	push   esi
c001b329:	53                   	push   ebx
c001b32a:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b32f:	83 ec 30             	sub    esp,0x30
c001b332:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b336:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b339:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b33c:	f7 f3                	div    ebx
c001b33e:	89 d6                	mov    esi,edx
c001b340:	31 d2                	xor    edx,edx
c001b342:	f7 f3                	div    ebx
c001b344:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b347:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b34b:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b350:	31 d2                	xor    edx,edx
c001b352:	f7 f3                	div    ebx
c001b354:	31 d2                	xor    edx,edx
c001b356:	bb 0c 00 00 00       	mov    ebx,0xc
c001b35b:	f7 f7                	div    edi
c001b35d:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b360:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b364:	0f b7 cd             	movzx  ecx,bp
c001b367:	56                   	push   esi
c001b368:	89 c7                	mov    edi,eax
c001b36a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b36e:	c1 e6 10             	shl    esi,0x10
c001b371:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b375:	83 e7 1f             	and    edi,0x1f
c001b378:	51                   	push   ecx
c001b379:	47                   	inc    edi
c001b37a:	c1 e8 05             	shr    eax,0x5
c001b37d:	31 d2                	xor    edx,edx
c001b37f:	f7 f3                	div    ebx
c001b381:	31 db                	xor    ebx,ebx
c001b383:	52                   	push   edx
c001b384:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b388:	57                   	push   edi
c001b389:	68 c9 bb 02 c0       	push   0xc002bbc9
c001b38e:	e8 41 7a ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001b393:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b397:	89 f8                	mov    eax,edi
c001b399:	31 c9                	xor    ecx,ecx
c001b39b:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b39f:	88 c1                	mov    cl,al
c001b3a1:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b3a7:	88 d5                	mov    ch,dl
c001b3a9:	c1 e0 10             	shl    eax,0x10
c001b3ac:	0f b7 d1             	movzx  edx,cx
c001b3af:	09 c2                	or     edx,eax
c001b3b1:	89 d8                	mov    eax,ebx
c001b3b3:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b3b8:	09 f0                	or     eax,esi
c001b3ba:	89 c3                	mov    ebx,eax
c001b3bc:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b3c0:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b3c4:	83 c4 18             	add    esp,0x18
c001b3c7:	53                   	push   ebx
c001b3c8:	52                   	push   edx
c001b3c9:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b3cd:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b3d1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b3d5:	e8 dd 89 ff ff       	call   c0013db7 <datetimeToSeconds(datetime_t)>
c001b3da:	83 c4 0c             	add    esp,0xc
c001b3dd:	52                   	push   edx
c001b3de:	50                   	push   eax
c001b3df:	56                   	push   esi
c001b3e0:	e8 59 8b ff ff       	call   c0013f3e <secondsToDatetime(unsigned long long)>
c001b3e5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b3e9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b3ed:	51                   	push   ecx
c001b3ee:	89 d6                	mov    esi,edx
c001b3f0:	51                   	push   ecx
c001b3f1:	c1 ee 10             	shr    esi,0x10
c001b3f4:	89 f3                	mov    ebx,esi
c001b3f6:	0f b6 f3             	movzx  esi,bl
c001b3f9:	56                   	push   esi
c001b3fa:	0f b6 f6             	movzx  esi,dh
c001b3fd:	0f b6 d2             	movzx  edx,dl
c001b400:	56                   	push   esi
c001b401:	52                   	push   edx
c001b402:	89 c2                	mov    edx,eax
c001b404:	c1 ea 10             	shr    edx,0x10
c001b407:	52                   	push   edx
c001b408:	0f b6 d4             	movzx  edx,ah
c001b40b:	0f b6 c0             	movzx  eax,al
c001b40e:	52                   	push   edx
c001b40f:	50                   	push   eax
c001b410:	68 e5 bb 02 c0       	push   0xc002bbe5
c001b415:	e8 ba 79 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001b41a:	83 c4 2c             	add    esp,0x2c
c001b41d:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c001b422:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b426:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b42a:	53                   	push   ebx
c001b42b:	51                   	push   ecx
c001b42c:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b432:	e8 a7 8a ff ff       	call   c0013ede <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b437:	83 f0 01             	xor    eax,0x1
c001b43a:	31 d2                	xor    edx,edx
c001b43c:	0f b6 c0             	movzx  eax,al
c001b43f:	83 c4 3c             	add    esp,0x3c
c001b442:	5b                   	pop    ebx
c001b443:	5e                   	pop    esi
c001b444:	5f                   	pop    edi
c001b445:	5d                   	pop    ebp
c001b446:	c3                   	ret    

c001b447 <Sys::timezone(regs*)>:
c001b447:	53                   	push   ebx
c001b448:	83 ec 08             	sub    esp,0x8
c001b44b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b44f:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b453:	75 17                	jne    c001b46c <Sys::timezone(regs*)+0x25>
c001b455:	83 ec 0c             	sub    esp,0xc
c001b458:	68 01 bc 02 c0       	push   0xc002bc01
c001b45d:	e8 72 79 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001b462:	83 c8 ff             	or     eax,0xffffffff
c001b465:	83 c4 10             	add    esp,0x10
c001b468:	89 c2                	mov    edx,eax
c001b46a:	eb 20                	jmp    c001b48c <Sys::timezone(regs*)+0x45>
c001b46c:	83 ec 0c             	sub    esp,0xc
c001b46f:	68 39 bc 02 c0       	push   0xc002bc39
c001b474:	e8 5b 79 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001b479:	58                   	pop    eax
c001b47a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b47d:	e8 be 87 ff ff       	call   c0013c40 <User::loadClockSettings(int)>
c001b482:	83 c4 10             	add    esp,0x10
c001b485:	b8 01 00 00 00       	mov    eax,0x1
c001b48a:	31 d2                	xor    edx,edx
c001b48c:	83 c4 08             	add    esp,0x8
c001b48f:	5b                   	pop    ebx
c001b490:	c3                   	ret    

c001b491 <Sys::write(regs*)>:
c001b491:	57                   	push   edi
c001b492:	56                   	push   esi
c001b493:	53                   	push   ebx
c001b494:	83 ec 10             	sub    esp,0x10
c001b497:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b49b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b49e:	83 f8 02             	cmp    eax,0x2
c001b4a1:	77 10                	ja     c001b4b3 <Sys::write(regs*)+0x22>
c001b4a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4a8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b4ab:	8b 88 26 19 00 00    	mov    ecx,DWORD PTR [eax+0x1926]
c001b4b1:	eb 0e                	jmp    c001b4c1 <Sys::write(regs*)+0x30>
c001b4b3:	83 ec 0c             	sub    esp,0xc
c001b4b6:	50                   	push   eax
c001b4b7:	e8 65 65 ff ff       	call   c0011a21 <getFromFileDescriptor(int)>
c001b4bc:	83 c4 10             	add    esp,0x10
c001b4bf:	89 c1                	mov    ecx,eax
c001b4c1:	83 c8 ff             	or     eax,0xffffffff
c001b4c4:	85 c9                	test   ecx,ecx
c001b4c6:	89 c2                	mov    edx,eax
c001b4c8:	74 28                	je     c001b4f2 <Sys::write(regs*)+0x61>
c001b4ca:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b4d2:	31 ff                	xor    edi,edi
c001b4d4:	83 ec 0c             	sub    esp,0xc
c001b4d7:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b4d9:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b4dd:	52                   	push   edx
c001b4de:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b4e1:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b4e4:	57                   	push   edi
c001b4e5:	56                   	push   esi
c001b4e6:	51                   	push   ecx
c001b4e7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b4ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b4ee:	83 c4 20             	add    esp,0x20
c001b4f1:	99                   	cdq    
c001b4f2:	83 c4 10             	add    esp,0x10
c001b4f5:	5b                   	pop    ebx
c001b4f6:	5e                   	pop    esi
c001b4f7:	5f                   	pop    edi
c001b4f8:	c3                   	ret    

c001b4f9 <Sys::wsbe(regs*)>:
c001b4f9:	57                   	push   edi
c001b4fa:	b9 0b 00 00 00       	mov    ecx,0xb
c001b4ff:	56                   	push   esi
c001b500:	be 78 bc 02 c0       	mov    esi,0xc002bc78
c001b505:	53                   	push   ebx
c001b506:	83 ec 30             	sub    esp,0x30
c001b509:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b50d:	fc                   	cld    
c001b50e:	83 ec 0c             	sub    esp,0xc
c001b511:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b513:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b517:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b51c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b51f:	8b b0 26 19 00 00    	mov    esi,DWORD PTR [eax+0x1926]
c001b525:	8b 06                	mov    eax,DWORD PTR [esi]
c001b527:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b52a:	57                   	push   edi
c001b52b:	e8 64 52 fe ff       	call   c0000794 <strlen>
c001b530:	5a                   	pop    edx
c001b531:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b535:	52                   	push   edx
c001b536:	31 d2                	xor    edx,edx
c001b538:	57                   	push   edi
c001b539:	52                   	push   edx
c001b53a:	50                   	push   eax
c001b53b:	56                   	push   esi
c001b53c:	ff d3                	call   ebx
c001b53e:	83 c4 14             	add    esp,0x14
c001b541:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b545:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b548:	e8 9f 31 00 00       	call   c001e6ec <terminateTask(int)>
c001b54d:	83 c4 40             	add    esp,0x40
c001b550:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b555:	5b                   	pop    ebx
c001b556:	31 d2                	xor    edx,edx
c001b558:	5e                   	pop    esi
c001b559:	5f                   	pop    edi
c001b55a:	c3                   	ret    

c001b55b <Sys::yield(regs*)>:
c001b55b:	57                   	push   edi
c001b55c:	56                   	push   esi
c001b55d:	53                   	push   ebx
c001b55e:	e8 46 27 00 00       	call   c001dca9 <lockScheduler()>
c001b563:	e8 7c 2a 00 00       	call   c001dfe4 <schedule()>
c001b568:	e8 3e 27 00 00       	call   c001dcab <unlockScheduler()>
c001b56d:	8b 35 30 e9 02 c0    	mov    esi,DWORD PTR ds:0xc002e930
c001b573:	8b 3d 34 e9 02 c0    	mov    edi,DWORD PTR ds:0xc002e934
c001b579:	89 f0                	mov    eax,esi
c001b57b:	89 fb                	mov    ebx,edi
c001b57d:	89 f1                	mov    ecx,esi
c001b57f:	c1 e0 07             	shl    eax,0x7
c001b582:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b586:	25 80 30 0f 00       	and    eax,0xf3080
c001b58b:	c1 eb 17             	shr    ebx,0x17
c001b58e:	31 c8                	xor    eax,ecx
c001b590:	89 da                	mov    edx,ebx
c001b592:	5b                   	pop    ebx
c001b593:	5e                   	pop    esi
c001b594:	5f                   	pop    edi
c001b595:	c3                   	ret    

c001b596 <sysCallSeekDir(regs*)>:
c001b596:	31 c0                	xor    eax,eax
c001b598:	31 d2                	xor    edx,edx
c001b59a:	c3                   	ret    

c001b59b <sysCallTellDir(regs*)>:
c001b59b:	31 c0                	xor    eax,eax
c001b59d:	31 d2                	xor    edx,edx
c001b59f:	c3                   	ret    

c001b5a0 <sysCallVerify(regs*)>:
c001b5a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b5a4:	31 d2                	xor    edx,edx
c001b5a6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b5a9:	c3                   	ret    

c001b5aa <sysFormatDisk(regs*)>:
c001b5aa:	56                   	push   esi
c001b5ab:	53                   	push   ebx
c001b5ac:	53                   	push   ebx
c001b5ad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b5b1:	8b 1d 30 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e430
c001b5b7:	eb 25                	jmp    c001b5de <sysFormatDisk(regs*)+0x34>
c001b5b9:	83 ec 0c             	sub    esp,0xc
c001b5bc:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b5bf:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b5c1:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b5c4:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b5c7:	50                   	push   eax
c001b5c8:	ff 34 85 c0 e8 02 c0 	push   DWORD PTR [eax*4-0x3ffd1740]
c001b5cf:	53                   	push   ebx
c001b5d0:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b5d3:	83 c4 20             	add    esp,0x20
c001b5d6:	83 f8 08             	cmp    eax,0x8
c001b5d9:	75 12                	jne    c001b5ed <sysFormatDisk(regs*)+0x43>
c001b5db:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b5de:	85 db                	test   ebx,ebx
c001b5e0:	75 d7                	jne    c001b5b9 <sysFormatDisk(regs*)+0xf>
c001b5e2:	59                   	pop    ecx
c001b5e3:	b8 03 00 00 00       	mov    eax,0x3
c001b5e8:	31 d2                	xor    edx,edx
c001b5ea:	5b                   	pop    ebx
c001b5eb:	5e                   	pop    esi
c001b5ec:	c3                   	ret    
c001b5ed:	85 c0                	test   eax,eax
c001b5ef:	74 1b                	je     c001b60c <sysFormatDisk(regs*)+0x62>
c001b5f1:	83 f8 09             	cmp    eax,0x9
c001b5f4:	74 0b                	je     c001b601 <sysFormatDisk(regs*)+0x57>
c001b5f6:	59                   	pop    ecx
c001b5f7:	b8 02 00 00 00       	mov    eax,0x2
c001b5fc:	31 d2                	xor    edx,edx
c001b5fe:	5b                   	pop    ebx
c001b5ff:	5e                   	pop    esi
c001b600:	c3                   	ret    
c001b601:	59                   	pop    ecx
c001b602:	b8 01 00 00 00       	mov    eax,0x1
c001b607:	31 d2                	xor    edx,edx
c001b609:	5b                   	pop    ebx
c001b60a:	5e                   	pop    esi
c001b60b:	c3                   	ret    
c001b60c:	59                   	pop    ecx
c001b60d:	31 c0                	xor    eax,eax
c001b60f:	31 d2                	xor    edx,edx
c001b611:	5b                   	pop    ebx
c001b612:	5e                   	pop    esi
c001b613:	c3                   	ret    

c001b614 <sysSetDiskVolumeLabel(regs*)>:
c001b614:	56                   	push   esi
c001b615:	53                   	push   ebx
c001b616:	53                   	push   ebx
c001b617:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b61b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b61e:	83 f8 19             	cmp    eax,0x19
c001b621:	77 29                	ja     c001b64c <sysSetDiskVolumeLabel(regs*)+0x38>
c001b623:	8b 0c 85 c0 e8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1740]
c001b62a:	85 c9                	test   ecx,ecx
c001b62c:	74 1e                	je     c001b64c <sysSetDiskVolumeLabel(regs*)+0x38>
c001b62e:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b631:	85 d2                	test   edx,edx
c001b633:	74 17                	je     c001b64c <sysSetDiskVolumeLabel(regs*)+0x38>
c001b635:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b63b:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b63d:	52                   	push   edx
c001b63e:	50                   	push   eax
c001b63f:	51                   	push   ecx
c001b640:	53                   	push   ebx
c001b641:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b644:	83 c4 10             	add    esp,0x10
c001b647:	99                   	cdq    
c001b648:	59                   	pop    ecx
c001b649:	5b                   	pop    ebx
c001b64a:	5e                   	pop    esi
c001b64b:	c3                   	ret    
c001b64c:	59                   	pop    ecx
c001b64d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b652:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b657:	5b                   	pop    ebx
c001b658:	5e                   	pop    esi
c001b659:	c3                   	ret    

c001b65a <sysGetDiskVolumeLabel(regs*)>:
c001b65a:	57                   	push   edi
c001b65b:	56                   	push   esi
c001b65c:	53                   	push   ebx
c001b65d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b661:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b664:	83 fa 19             	cmp    edx,0x19
c001b667:	77 34                	ja     c001b69d <sysGetDiskVolumeLabel(regs*)+0x43>
c001b669:	8b 0c 95 c0 e8 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1740]
c001b670:	85 c9                	test   ecx,ecx
c001b672:	74 29                	je     c001b69d <sysGetDiskVolumeLabel(regs*)+0x43>
c001b674:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b677:	85 db                	test   ebx,ebx
c001b679:	74 22                	je     c001b69d <sysGetDiskVolumeLabel(regs*)+0x43>
c001b67b:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b67e:	85 c0                	test   eax,eax
c001b680:	74 1b                	je     c001b69d <sysGetDiskVolumeLabel(regs*)+0x43>
c001b682:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b688:	83 ec 0c             	sub    esp,0xc
c001b68b:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b68d:	50                   	push   eax
c001b68e:	53                   	push   ebx
c001b68f:	52                   	push   edx
c001b690:	51                   	push   ecx
c001b691:	56                   	push   esi
c001b692:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b695:	83 c4 20             	add    esp,0x20
c001b698:	99                   	cdq    
c001b699:	5b                   	pop    ebx
c001b69a:	5e                   	pop    esi
c001b69b:	5f                   	pop    edi
c001b69c:	c3                   	ret    
c001b69d:	5b                   	pop    ebx
c001b69e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b6a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b6a8:	5e                   	pop    esi
c001b6a9:	5f                   	pop    edi
c001b6aa:	c3                   	ret    

c001b6ab <sysShutdown(regs*)>:
c001b6ab:	83 ec 0c             	sub    esp,0xc
c001b6ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6b2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b6b5:	85 c0                	test   eax,eax
c001b6b7:	74 18                	je     c001b6d1 <sysShutdown(regs*)+0x26>
c001b6b9:	83 f8 01             	cmp    eax,0x1
c001b6bc:	74 38                	je     c001b6f6 <sysShutdown(regs*)+0x4b>
c001b6be:	83 f8 02             	cmp    eax,0x2
c001b6c1:	74 24                	je     c001b6e7 <sysShutdown(regs*)+0x3c>
c001b6c3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b6c8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b6cd:	83 c4 0c             	add    esp,0xc
c001b6d0:	c3                   	ret    
c001b6d1:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c001b6d6:	8b 10                	mov    edx,DWORD PTR [eax]
c001b6d8:	6a 00                	push   0x0
c001b6da:	6a 00                	push   0x0
c001b6dc:	6a 00                	push   0x0
c001b6de:	50                   	push   eax
c001b6df:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b6e2:	83 c4 10             	add    esp,0x10
c001b6e5:	eb dc                	jmp    c001b6c3 <sysShutdown(regs*)+0x18>
c001b6e7:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c001b6ec:	8b 10                	mov    edx,DWORD PTR [eax]
c001b6ee:	6a 00                	push   0x0
c001b6f0:	6a 00                	push   0x0
c001b6f2:	6a 01                	push   0x1
c001b6f4:	eb e8                	jmp    c001b6de <sysShutdown(regs*)+0x33>
c001b6f6:	a1 60 09 03 c0       	mov    eax,ds:0xc0030960
c001b6fb:	85 c0                	test   eax,eax
c001b6fd:	74 02                	je     c001b701 <sysShutdown(regs*)+0x56>
c001b6ff:	ff d0                	call   eax
c001b701:	31 c0                	xor    eax,eax
c001b703:	31 d2                	xor    edx,edx
c001b705:	83 c4 0c             	add    esp,0xc
c001b708:	c3                   	ret    

c001b709 <sysCallRealpath(regs*)>:
c001b709:	83 ec 0c             	sub    esp,0xc
c001b70c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b710:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b713:	85 d2                	test   edx,edx
c001b715:	74 07                	je     c001b71e <sysCallRealpath(regs*)+0x15>
c001b717:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b71a:	85 c0                	test   eax,eax
c001b71c:	75 0b                	jne    c001b729 <sysCallRealpath(regs*)+0x20>
c001b71e:	b8 01 00 00 00       	mov    eax,0x1
c001b723:	31 d2                	xor    edx,edx
c001b725:	83 c4 0c             	add    esp,0xc
c001b728:	c3                   	ret    
c001b729:	51                   	push   ecx
c001b72a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b730:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b733:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b739:	51                   	push   ecx
c001b73a:	52                   	push   edx
c001b73b:	50                   	push   eax
c001b73c:	e8 41 7a ff ff       	call   c0013182 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b741:	83 c4 10             	add    esp,0x10
c001b744:	31 c0                	xor    eax,eax
c001b746:	31 d2                	xor    edx,edx
c001b748:	83 c4 0c             	add    esp,0xc
c001b74b:	c3                   	ret    

c001b74c <sysCallGetArgc(regs*)>:
c001b74c:	83 ec 14             	sub    esp,0x14
c001b74f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b754:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b757:	ff b0 36 19 00 00    	push   DWORD PTR [eax+0x1936]
c001b75d:	68 a4 bc 02 c0       	push   0xc002bca4
c001b762:	e8 6d 76 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001b767:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b76c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b76f:	8b 80 36 19 00 00    	mov    eax,DWORD PTR [eax+0x1936]
c001b775:	83 c4 1c             	add    esp,0x1c
c001b778:	99                   	cdq    
c001b779:	c3                   	ret    

c001b77a <sysCallReadDir(regs*)>:
c001b77a:	53                   	push   ebx
c001b77b:	83 ec 18             	sub    esp,0x18
c001b77e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b782:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b785:	83 f8 02             	cmp    eax,0x2
c001b788:	76 53                	jbe    c001b7dd <sysCallReadDir(regs*)+0x63>
c001b78a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b78d:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b793:	77 4f                	ja     c001b7e4 <sysCallReadDir(regs*)+0x6a>
c001b795:	83 ec 0c             	sub    esp,0xc
c001b798:	50                   	push   eax
c001b799:	e8 83 62 ff ff       	call   c0011a21 <getFromFileDescriptor(int)>
c001b79e:	83 c4 10             	add    esp,0x10
c001b7a1:	85 c0                	test   eax,eax
c001b7a3:	74 50                	je     c001b7f5 <sysCallReadDir(regs*)+0x7b>
c001b7a5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b7ad:	83 ec 0c             	sub    esp,0xc
c001b7b0:	8b 10                	mov    edx,DWORD PTR [eax]
c001b7b2:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b7b6:	51                   	push   ecx
c001b7b7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b7ba:	6a 00                	push   0x0
c001b7bc:	68 10 01 00 00       	push   0x110
c001b7c1:	50                   	push   eax
c001b7c2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b7c5:	83 c4 20             	add    esp,0x20
c001b7c8:	85 c0                	test   eax,eax
c001b7ca:	74 38                	je     c001b804 <sysCallReadDir(regs*)+0x8a>
c001b7cc:	83 f8 07             	cmp    eax,0x7
c001b7cf:	74 0c                	je     c001b7dd <sysCallReadDir(regs*)+0x63>
c001b7d1:	b8 02 00 00 00       	mov    eax,0x2
c001b7d6:	31 d2                	xor    edx,edx
c001b7d8:	83 c4 18             	add    esp,0x18
c001b7db:	5b                   	pop    ebx
c001b7dc:	c3                   	ret    
c001b7dd:	b8 01 00 00 00       	mov    eax,0x1
c001b7e2:	eb f2                	jmp    c001b7d6 <sysCallReadDir(regs*)+0x5c>
c001b7e4:	83 ec 08             	sub    esp,0x8
c001b7e7:	52                   	push   edx
c001b7e8:	68 bc bd 02 c0       	push   0xc002bdbc
c001b7ed:	e8 e2 75 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001b7f2:	83 c4 10             	add    esp,0x10
c001b7f5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b7fa:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7ff:	83 c4 18             	add    esp,0x18
c001b802:	5b                   	pop    ebx
c001b803:	c3                   	ret    
c001b804:	31 c0                	xor    eax,eax
c001b806:	eb ce                	jmp    c001b7d6 <sysCallReadDir(regs*)+0x5c>

c001b808 <sysCallIsATTY(regs*)>:
c001b808:	83 ec 0c             	sub    esp,0xc
c001b80b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b80f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b812:	83 f8 02             	cmp    eax,0x2
c001b815:	76 07                	jbe    c001b81e <sysCallIsATTY(regs*)+0x16>
c001b817:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b81c:	75 26                	jne    c001b844 <sysCallIsATTY(regs*)+0x3c>
c001b81e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b823:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b826:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001b82c:	85 c0                	test   eax,eax
c001b82e:	74 24                	je     c001b854 <sysCallIsATTY(regs*)+0x4c>
c001b830:	83 ec 0c             	sub    esp,0xc
c001b833:	8b 10                	mov    edx,DWORD PTR [eax]
c001b835:	50                   	push   eax
c001b836:	ff 12                	call   DWORD PTR [edx]
c001b838:	31 d2                	xor    edx,edx
c001b83a:	0f b6 c0             	movzx  eax,al
c001b83d:	83 c4 10             	add    esp,0x10
c001b840:	83 c4 0c             	add    esp,0xc
c001b843:	c3                   	ret    
c001b844:	83 ec 0c             	sub    esp,0xc
c001b847:	50                   	push   eax
c001b848:	e8 d4 61 ff ff       	call   c0011a21 <getFromFileDescriptor(int)>
c001b84d:	83 c4 10             	add    esp,0x10
c001b850:	85 c0                	test   eax,eax
c001b852:	75 dc                	jne    c001b830 <sysCallIsATTY(regs*)+0x28>
c001b854:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b859:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b85e:	83 c4 0c             	add    esp,0xc
c001b861:	c3                   	ret    

c001b862 <sysCallSeek(regs*)>:
c001b862:	53                   	push   ebx
c001b863:	83 ec 08             	sub    esp,0x8
c001b866:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b86a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b86d:	83 f8 02             	cmp    eax,0x2
c001b870:	76 4a                	jbe    c001b8bc <sysCallSeek(regs*)+0x5a>
c001b872:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b877:	77 32                	ja     c001b8ab <sysCallSeek(regs*)+0x49>
c001b879:	83 ec 0c             	sub    esp,0xc
c001b87c:	50                   	push   eax
c001b87d:	e8 9f 61 ff ff       	call   c0011a21 <getFromFileDescriptor(int)>
c001b882:	83 c4 0c             	add    esp,0xc
c001b885:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b888:	31 db                	xor    ebx,ebx
c001b88a:	53                   	push   ebx
c001b88b:	51                   	push   ecx
c001b88c:	50                   	push   eax
c001b88d:	e8 bc 7b ff ff       	call   c001344e <File::seek(unsigned long long)>
c001b892:	83 c4 10             	add    esp,0x10
c001b895:	85 c0                	test   eax,eax
c001b897:	0f 95 c0             	setne  al
c001b89a:	31 d2                	xor    edx,edx
c001b89c:	0f b6 c0             	movzx  eax,al
c001b89f:	f7 d8                	neg    eax
c001b8a1:	83 d2 00             	adc    edx,0x0
c001b8a4:	83 c4 08             	add    esp,0x8
c001b8a7:	f7 da                	neg    edx
c001b8a9:	5b                   	pop    ebx
c001b8aa:	c3                   	ret    
c001b8ab:	83 ec 08             	sub    esp,0x8
c001b8ae:	50                   	push   eax
c001b8af:	68 af bc 02 c0       	push   0xc002bcaf
c001b8b4:	e8 1b 75 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001b8b9:	83 c4 10             	add    esp,0x10
c001b8bc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b8c1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8c6:	83 c4 08             	add    esp,0x8
c001b8c9:	5b                   	pop    ebx
c001b8ca:	c3                   	ret    

c001b8cb <sysCallTell(regs*)>:
c001b8cb:	53                   	push   ebx
c001b8cc:	83 ec 08             	sub    esp,0x8
c001b8cf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b8d3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b8d6:	83 f8 02             	cmp    eax,0x2
c001b8d9:	76 5e                	jbe    c001b939 <sysCallTell(regs*)+0x6e>
c001b8db:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b8e0:	77 2d                	ja     c001b90f <sysCallTell(regs*)+0x44>
c001b8e2:	83 ec 0c             	sub    esp,0xc
c001b8e5:	50                   	push   eax
c001b8e6:	e8 36 61 ff ff       	call   c0011a21 <getFromFileDescriptor(int)>
c001b8eb:	5a                   	pop    edx
c001b8ec:	59                   	pop    ecx
c001b8ed:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b8f0:	50                   	push   eax
c001b8f1:	e8 ae 7b ff ff       	call   c00134a4 <File::tell(unsigned long long*)>
c001b8f6:	83 c4 10             	add    esp,0x10
c001b8f9:	85 c0                	test   eax,eax
c001b8fb:	0f 95 c0             	setne  al
c001b8fe:	31 d2                	xor    edx,edx
c001b900:	0f b6 c0             	movzx  eax,al
c001b903:	f7 d8                	neg    eax
c001b905:	83 d2 00             	adc    edx,0x0
c001b908:	83 c4 08             	add    esp,0x8
c001b90b:	f7 da                	neg    edx
c001b90d:	5b                   	pop    ebx
c001b90e:	c3                   	ret    
c001b90f:	83 ec 08             	sub    esp,0x8
c001b912:	50                   	push   eax
c001b913:	68 c9 bc 02 c0       	push   0xc002bcc9
c001b918:	e8 b7 74 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001b91d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b920:	83 c4 10             	add    esp,0x10
c001b923:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b929:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b930:	31 d2                	xor    edx,edx
c001b932:	31 c0                	xor    eax,eax
c001b934:	83 c4 08             	add    esp,0x8
c001b937:	5b                   	pop    ebx
c001b938:	c3                   	ret    
c001b939:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b93e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b943:	83 c4 08             	add    esp,0x8
c001b946:	5b                   	pop    ebx
c001b947:	c3                   	ret    

c001b948 <sysCallSize(regs*)>:
c001b948:	53                   	push   ebx
c001b949:	83 ec 18             	sub    esp,0x18
c001b94c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b950:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b953:	83 f8 02             	cmp    eax,0x2
c001b956:	76 64                	jbe    c001b9bc <sysCallSize(regs*)+0x74>
c001b958:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b95d:	77 33                	ja     c001b992 <sysCallSize(regs*)+0x4a>
c001b95f:	83 ec 0c             	sub    esp,0xc
c001b962:	50                   	push   eax
c001b963:	e8 b9 60 ff ff       	call   c0011a21 <getFromFileDescriptor(int)>
c001b968:	83 c4 0c             	add    esp,0xc
c001b96b:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b96f:	52                   	push   edx
c001b970:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b973:	50                   	push   eax
c001b974:	e8 c3 7c ff ff       	call   c001363c <File::stat(unsigned long long*, bool*)>
c001b979:	83 c4 10             	add    esp,0x10
c001b97c:	85 c0                	test   eax,eax
c001b97e:	0f 95 c0             	setne  al
c001b981:	31 d2                	xor    edx,edx
c001b983:	0f b6 c0             	movzx  eax,al
c001b986:	f7 d8                	neg    eax
c001b988:	83 d2 00             	adc    edx,0x0
c001b98b:	83 c4 18             	add    esp,0x18
c001b98e:	f7 da                	neg    edx
c001b990:	5b                   	pop    ebx
c001b991:	c3                   	ret    
c001b992:	83 ec 08             	sub    esp,0x8
c001b995:	50                   	push   eax
c001b996:	68 e3 bc 02 c0       	push   0xc002bce3
c001b99b:	e8 34 74 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001b9a0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b9a3:	83 c4 10             	add    esp,0x10
c001b9a6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b9ac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b9b3:	31 d2                	xor    edx,edx
c001b9b5:	31 c0                	xor    eax,eax
c001b9b7:	83 c4 18             	add    esp,0x18
c001b9ba:	5b                   	pop    ebx
c001b9bb:	c3                   	ret    
c001b9bc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9c1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9c6:	83 c4 18             	add    esp,0x18
c001b9c9:	5b                   	pop    ebx
c001b9ca:	c3                   	ret    

c001b9cb <sysCallSizeFromFilename(regs*)>:
c001b9cb:	57                   	push   edi
c001b9cc:	56                   	push   esi
c001b9cd:	53                   	push   ebx
c001b9ce:	83 ec 20             	sub    esp,0x20
c001b9d1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b9d5:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001b9d8:	83 fb 02             	cmp    ebx,0x2
c001b9db:	0f 86 99 00 00 00    	jbe    c001ba7a <sysCallSizeFromFilename(regs*)+0xaf>
c001b9e1:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b9e7:	77 65                	ja     c001ba4e <sysCallSizeFromFilename(regs*)+0x83>
c001b9e9:	83 ec 0c             	sub    esp,0xc
c001b9ec:	68 14 01 00 00       	push   0x114
c001b9f1:	e8 4a 3e ff ff       	call   c000f840 <malloc>
c001b9f6:	83 c4 0c             	add    esp,0xc
c001b9f9:	89 c6                	mov    esi,eax
c001b9fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba00:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ba03:	53                   	push   ebx
c001ba04:	56                   	push   esi
c001ba05:	e8 22 79 ff ff       	call   c001332c <File::File(char const*, Process*)>
c001ba0a:	83 c4 0c             	add    esp,0xc
c001ba0d:	8d 44 24 23          	lea    eax,[esp+0x23]
c001ba11:	50                   	push   eax
c001ba12:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001ba15:	56                   	push   esi
c001ba16:	e8 21 7c ff ff       	call   c001363c <File::stat(unsigned long long*, bool*)>
c001ba1b:	83 c4 10             	add    esp,0x10
c001ba1e:	85 f6                	test   esi,esi
c001ba20:	74 14                	je     c001ba36 <sysCallSizeFromFilename(regs*)+0x6b>
c001ba22:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ba26:	8b 16                	mov    edx,DWORD PTR [esi]
c001ba28:	83 ec 0c             	sub    esp,0xc
c001ba2b:	56                   	push   esi
c001ba2c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ba2f:	83 c4 10             	add    esp,0x10
c001ba32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba36:	85 c0                	test   eax,eax
c001ba38:	0f 95 c0             	setne  al
c001ba3b:	31 d2                	xor    edx,edx
c001ba3d:	0f b6 c0             	movzx  eax,al
c001ba40:	f7 d8                	neg    eax
c001ba42:	83 d2 00             	adc    edx,0x0
c001ba45:	83 c4 20             	add    esp,0x20
c001ba48:	f7 da                	neg    edx
c001ba4a:	5b                   	pop    ebx
c001ba4b:	5e                   	pop    esi
c001ba4c:	5f                   	pop    edi
c001ba4d:	c3                   	ret    
c001ba4e:	83 ec 08             	sub    esp,0x8
c001ba51:	53                   	push   ebx
c001ba52:	68 e3 bc 02 c0       	push   0xc002bce3
c001ba57:	e8 78 73 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001ba5c:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001ba5f:	83 c4 10             	add    esp,0x10
c001ba62:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ba68:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba6f:	31 d2                	xor    edx,edx
c001ba71:	83 c4 20             	add    esp,0x20
c001ba74:	31 c0                	xor    eax,eax
c001ba76:	5b                   	pop    ebx
c001ba77:	5e                   	pop    esi
c001ba78:	5f                   	pop    edi
c001ba79:	c3                   	ret    
c001ba7a:	83 c4 20             	add    esp,0x20
c001ba7d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba82:	5b                   	pop    ebx
c001ba83:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba88:	5e                   	pop    esi
c001ba89:	5f                   	pop    edi
c001ba8a:	c3                   	ret    

c001ba8b <sysCallClose(regs*)>:
c001ba8b:	53                   	push   ebx
c001ba8c:	83 ec 08             	sub    esp,0x8
c001ba8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba93:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ba96:	83 f8 02             	cmp    eax,0x2
c001ba99:	76 50                	jbe    c001baeb <sysCallClose(regs*)+0x60>
c001ba9b:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001baa0:	74 58                	je     c001bafa <sysCallClose(regs*)+0x6f>
c001baa2:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001baa7:	74 60                	je     c001bb09 <sysCallClose(regs*)+0x7e>
c001baa9:	77 2f                	ja     c001bada <sysCallClose(regs*)+0x4f>
c001baab:	83 ec 0c             	sub    esp,0xc
c001baae:	50                   	push   eax
c001baaf:	e8 6d 5f ff ff       	call   c0011a21 <getFromFileDescriptor(int)>
c001bab4:	89 c3                	mov    ebx,eax
c001bab6:	89 04 24             	mov    DWORD PTR [esp],eax
c001bab9:	e8 30 79 ff ff       	call   c00133ee <File::close()>
c001babe:	83 c4 10             	add    esp,0x10
c001bac1:	85 db                	test   ebx,ebx
c001bac3:	74 0c                	je     c001bad1 <sysCallClose(regs*)+0x46>
c001bac5:	83 ec 0c             	sub    esp,0xc
c001bac8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001baca:	53                   	push   ebx
c001bacb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bace:	83 c4 10             	add    esp,0x10
c001bad1:	31 c0                	xor    eax,eax
c001bad3:	31 d2                	xor    edx,edx
c001bad5:	83 c4 08             	add    esp,0x8
c001bad8:	5b                   	pop    ebx
c001bad9:	c3                   	ret    
c001bada:	83 ec 08             	sub    esp,0x8
c001badd:	50                   	push   eax
c001bade:	68 e0 bd 02 c0       	push   0xc002bde0
c001bae3:	e8 ec 72 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001bae8:	83 c4 10             	add    esp,0x10
c001baeb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001baf0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001baf5:	83 c4 08             	add    esp,0x8
c001baf8:	5b                   	pop    ebx
c001baf9:	c3                   	ret    
c001bafa:	83 ec 0c             	sub    esp,0xc
c001bafd:	68 fe bc 02 c0       	push   0xc002bcfe
c001bb02:	e8 cd 72 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001bb07:	eb c5                	jmp    c001bace <sysCallClose(regs*)+0x43>
c001bb09:	83 ec 0c             	sub    esp,0xc
c001bb0c:	68 0c bd 02 c0       	push   0xc002bd0c
c001bb11:	eb ef                	jmp    c001bb02 <sysCallClose(regs*)+0x77>

c001bb13 <sysCallOpenDir(regs*)>:
c001bb13:	56                   	push   esi
c001bb14:	53                   	push   ebx
c001bb15:	53                   	push   ebx
c001bb16:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bb1a:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bb1d:	85 f6                	test   esi,esi
c001bb1f:	74 59                	je     c001bb7a <sysCallOpenDir(regs*)+0x67>
c001bb21:	83 ec 0c             	sub    esp,0xc
c001bb24:	68 14 01 00 00       	push   0x114
c001bb29:	e8 12 3d ff ff       	call   c000f840 <malloc>
c001bb2e:	83 c4 0c             	add    esp,0xc
c001bb31:	89 c6                	mov    esi,eax
c001bb33:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb38:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb3b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb3e:	56                   	push   esi
c001bb3f:	e8 94 7c ff ff       	call   c00137d8 <Directory::Directory(char const*, Process*)>
c001bb44:	83 c4 10             	add    esp,0x10
c001bb47:	85 f6                	test   esi,esi
c001bb49:	74 2f                	je     c001bb7a <sysCallOpenDir(regs*)+0x67>
c001bb4b:	83 ec 0c             	sub    esp,0xc
c001bb4e:	56                   	push   esi
c001bb4f:	e8 e8 7c ff ff       	call   c001383c <Directory::open()>
c001bb54:	83 c4 10             	add    esp,0x10
c001bb57:	85 c0                	test   eax,eax
c001bb59:	75 1f                	jne    c001bb7a <sysCallOpenDir(regs*)+0x67>
c001bb5b:	83 ec 0c             	sub    esp,0xc
c001bb5e:	56                   	push   esi
c001bb5f:	e8 c8 5b ff ff       	call   c001172c <UnixFile::getFileDescriptor()>
c001bb64:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bb67:	83 c4 10             	add    esp,0x10
c001bb6a:	89 02                	mov    DWORD PTR [edx],eax
c001bb6c:	c1 f8 1f             	sar    eax,0x1f
c001bb6f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bb72:	31 c0                	xor    eax,eax
c001bb74:	59                   	pop    ecx
c001bb75:	31 d2                	xor    edx,edx
c001bb77:	5b                   	pop    ebx
c001bb78:	5e                   	pop    esi
c001bb79:	c3                   	ret    
c001bb7a:	59                   	pop    ecx
c001bb7b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb80:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb85:	5b                   	pop    ebx
c001bb86:	5e                   	pop    esi
c001bb87:	c3                   	ret    

c001bb88 <sysCallCloseDir(regs*)>:
c001bb88:	53                   	push   ebx
c001bb89:	83 ec 08             	sub    esp,0x8
c001bb8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb90:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bb93:	83 f8 02             	cmp    eax,0x2
c001bb96:	76 47                	jbe    c001bbdf <sysCallCloseDir(regs*)+0x57>
c001bb98:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bb9d:	77 2f                	ja     c001bbce <sysCallCloseDir(regs*)+0x46>
c001bb9f:	83 ec 0c             	sub    esp,0xc
c001bba2:	50                   	push   eax
c001bba3:	e8 79 5e ff ff       	call   c0011a21 <getFromFileDescriptor(int)>
c001bba8:	89 c3                	mov    ebx,eax
c001bbaa:	89 04 24             	mov    DWORD PTR [esp],eax
c001bbad:	e8 e6 7c ff ff       	call   c0013898 <Directory::close()>
c001bbb2:	83 c4 10             	add    esp,0x10
c001bbb5:	85 db                	test   ebx,ebx
c001bbb7:	74 0c                	je     c001bbc5 <sysCallCloseDir(regs*)+0x3d>
c001bbb9:	83 ec 0c             	sub    esp,0xc
c001bbbc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bbbe:	53                   	push   ebx
c001bbbf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bbc2:	83 c4 10             	add    esp,0x10
c001bbc5:	31 c0                	xor    eax,eax
c001bbc7:	31 d2                	xor    edx,edx
c001bbc9:	83 c4 08             	add    esp,0x8
c001bbcc:	5b                   	pop    ebx
c001bbcd:	c3                   	ret    
c001bbce:	83 ec 08             	sub    esp,0x8
c001bbd1:	50                   	push   eax
c001bbd2:	68 08 be 02 c0       	push   0xc002be08
c001bbd7:	e8 f8 71 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001bbdc:	83 c4 10             	add    esp,0x10
c001bbdf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bbe4:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbe9:	83 c4 08             	add    esp,0x8
c001bbec:	5b                   	pop    ebx
c001bbed:	c3                   	ret    

c001bbee <sysCallMakeDir(regs*)>:
c001bbee:	56                   	push   esi
c001bbef:	53                   	push   ebx
c001bbf0:	83 ec 10             	sub    esp,0x10
c001bbf3:	68 14 01 00 00       	push   0x114
c001bbf8:	e8 43 3c ff ff       	call   c000f840 <malloc>
c001bbfd:	83 c4 0c             	add    esp,0xc
c001bc00:	89 c3                	mov    ebx,eax
c001bc02:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc07:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc0a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bc0e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bc11:	53                   	push   ebx
c001bc12:	e8 c1 7b ff ff       	call   c00137d8 <Directory::Directory(char const*, Process*)>
c001bc17:	83 c4 10             	add    esp,0x10
c001bc1a:	85 db                	test   ebx,ebx
c001bc1c:	74 32                	je     c001bc50 <sysCallMakeDir(regs*)+0x62>
c001bc1e:	83 ec 0c             	sub    esp,0xc
c001bc21:	53                   	push   ebx
c001bc22:	e8 f5 7d ff ff       	call   c0013a1c <Directory::create()>
c001bc27:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc2a:	89 c6                	mov    esi,eax
c001bc2c:	e8 67 7c ff ff       	call   c0013898 <Directory::close()>
c001bc31:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc33:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc36:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc39:	83 c4 10             	add    esp,0x10
c001bc3c:	31 c0                	xor    eax,eax
c001bc3e:	59                   	pop    ecx
c001bc3f:	85 f6                	test   esi,esi
c001bc41:	5b                   	pop    ebx
c001bc42:	0f 95 c0             	setne  al
c001bc45:	5e                   	pop    esi
c001bc46:	31 d2                	xor    edx,edx
c001bc48:	f7 d8                	neg    eax
c001bc4a:	83 d2 00             	adc    edx,0x0
c001bc4d:	f7 da                	neg    edx
c001bc4f:	c3                   	ret    
c001bc50:	59                   	pop    ecx
c001bc51:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc56:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc5b:	5b                   	pop    ebx
c001bc5c:	5e                   	pop    esi
c001bc5d:	c3                   	ret    

c001bc5e <sysCallWait(regs*)>:
c001bc5e:	83 ec 10             	sub    esp,0x10
c001bc61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bc65:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001bc68:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bc6b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001bc6e:	e8 ec 24 00 00       	call   c001e15f <waitTask(int, int*, int)>
c001bc73:	83 c4 1c             	add    esp,0x1c
c001bc76:	99                   	cdq    
c001bc77:	c3                   	ret    

c001bc78 <sysCallNotImpl(regs*)>:
c001bc78:	83 ec 18             	sub    esp,0x18
c001bc7b:	68 1a bd 02 c0       	push   0xc002bd1a
c001bc80:	e8 2a e8 ff ff       	call   c001a4af <Krnl::panic(char const*)>
c001bc85:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc8a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc8f:	83 c4 1c             	add    esp,0x1c
c001bc92:	c3                   	ret    

c001bc93 <sysPanic(regs*)>:
c001bc93:	83 ec 18             	sub    esp,0x18
c001bc96:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bc9a:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bc9d:	e8 0d e8 ff ff       	call   c001a4af <Krnl::panic(char const*)>
c001bca2:	c7 04 24 34 bd 02 c0 	mov    DWORD PTR [esp],0xc002bd34
c001bca9:	e8 01 e8 ff ff       	call   c001a4af <Krnl::panic(char const*)>
c001bcae:	b8 01 00 00 00       	mov    eax,0x1
c001bcb3:	31 d2                	xor    edx,edx
c001bcb5:	83 c4 1c             	add    esp,0x1c
c001bcb8:	c3                   	ret    

c001bcb9 <sysCallRmdir(regs*)>:
c001bcb9:	56                   	push   esi
c001bcba:	53                   	push   ebx
c001bcbb:	83 ec 20             	sub    esp,0x20
c001bcbe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bcc2:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bcc5:	68 14 01 00 00       	push   0x114
c001bcca:	e8 71 3b ff ff       	call   c000f840 <malloc>
c001bccf:	83 c4 0c             	add    esp,0xc
c001bcd2:	89 c3                	mov    ebx,eax
c001bcd4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bcd9:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bcdc:	56                   	push   esi
c001bcdd:	53                   	push   ebx
c001bcde:	e8 49 76 ff ff       	call   c001332c <File::File(char const*, Process*)>
c001bce3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bce6:	e8 1d 78 ff ff       	call   c0013508 <File::unlink()>
c001bceb:	83 c4 10             	add    esp,0x10
c001bcee:	85 db                	test   ebx,ebx
c001bcf0:	74 14                	je     c001bd06 <sysCallRmdir(regs*)+0x4d>
c001bcf2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bcf6:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bcf8:	83 ec 0c             	sub    esp,0xc
c001bcfb:	53                   	push   ebx
c001bcfc:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bcff:	83 c4 10             	add    esp,0x10
c001bd02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd06:	85 c0                	test   eax,eax
c001bd08:	0f 95 c0             	setne  al
c001bd0b:	31 d2                	xor    edx,edx
c001bd0d:	0f b6 c0             	movzx  eax,al
c001bd10:	f7 d8                	neg    eax
c001bd12:	83 d2 00             	adc    edx,0x0
c001bd15:	83 c4 14             	add    esp,0x14
c001bd18:	f7 da                	neg    edx
c001bd1a:	5b                   	pop    ebx
c001bd1b:	5e                   	pop    esi
c001bd1c:	c3                   	ret    

c001bd1d <sysCallUnlink(regs*)>:
c001bd1d:	56                   	push   esi
c001bd1e:	53                   	push   ebx
c001bd1f:	83 ec 20             	sub    esp,0x20
c001bd22:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bd26:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bd29:	68 14 01 00 00       	push   0x114
c001bd2e:	e8 0d 3b ff ff       	call   c000f840 <malloc>
c001bd33:	83 c4 0c             	add    esp,0xc
c001bd36:	89 c3                	mov    ebx,eax
c001bd38:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd3d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd40:	56                   	push   esi
c001bd41:	53                   	push   ebx
c001bd42:	e8 e5 75 ff ff       	call   c001332c <File::File(char const*, Process*)>
c001bd47:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd4a:	e8 b9 77 ff ff       	call   c0013508 <File::unlink()>
c001bd4f:	83 c4 10             	add    esp,0x10
c001bd52:	85 db                	test   ebx,ebx
c001bd54:	74 14                	je     c001bd6a <sysCallUnlink(regs*)+0x4d>
c001bd56:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd5a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bd5c:	83 ec 0c             	sub    esp,0xc
c001bd5f:	53                   	push   ebx
c001bd60:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bd63:	83 c4 10             	add    esp,0x10
c001bd66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd6a:	85 c0                	test   eax,eax
c001bd6c:	0f 95 c0             	setne  al
c001bd6f:	31 d2                	xor    edx,edx
c001bd71:	0f b6 c0             	movzx  eax,al
c001bd74:	f7 d8                	neg    eax
c001bd76:	83 d2 00             	adc    edx,0x0
c001bd79:	83 c4 14             	add    esp,0x14
c001bd7c:	f7 da                	neg    edx
c001bd7e:	5b                   	pop    ebx
c001bd7f:	5e                   	pop    esi
c001bd80:	c3                   	ret    

c001bd81 <sysCallGetArgv(regs*)>:
c001bd81:	83 ec 0c             	sub    esp,0xc
c001bd84:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bd88:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bd8b:	85 c0                	test   eax,eax
c001bd8d:	78 2b                	js     c001bdba <sysCallGetArgv(regs*)+0x39>
c001bd8f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bd95:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bd98:	3b 81 36 19 00 00    	cmp    eax,DWORD PTR [ecx+0x1936]
c001bd9e:	7d 1a                	jge    c001bdba <sysCallGetArgv(regs*)+0x39>
c001bda0:	8b 84 81 3a 19 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x193a]
c001bda7:	85 c0                	test   eax,eax
c001bda9:	74 17                	je     c001bdc2 <sysCallGetArgv(regs*)+0x41>
c001bdab:	83 ec 08             	sub    esp,0x8
c001bdae:	50                   	push   eax
c001bdaf:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bdb2:	e8 7d 4a fe ff       	call   c0000834 <strcpy>
c001bdb7:	83 c4 10             	add    esp,0x10
c001bdba:	31 c0                	xor    eax,eax
c001bdbc:	31 d2                	xor    edx,edx
c001bdbe:	83 c4 0c             	add    esp,0xc
c001bdc1:	c3                   	ret    
c001bdc2:	b8 01 00 00 00       	mov    eax,0x1
c001bdc7:	31 d2                	xor    edx,edx
c001bdc9:	83 c4 0c             	add    esp,0xc
c001bdcc:	c3                   	ret    

c001bdcd <sysCallTTYName(regs*)>:
c001bdcd:	56                   	push   esi
c001bdce:	53                   	push   ebx
c001bdcf:	53                   	push   ebx
c001bdd0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bdd4:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bdd7:	85 c0                	test   eax,eax
c001bdd9:	74 5f                	je     c001be3a <sysCallTTYName(regs*)+0x6d>
c001bddb:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bdde:	83 f8 02             	cmp    eax,0x2
c001bde1:	77 3e                	ja     c001be21 <sysCallTTYName(regs*)+0x54>
c001bde3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bde8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bdeb:	8b 98 26 19 00 00    	mov    ebx,DWORD PTR [eax+0x1926]
c001bdf1:	85 db                	test   ebx,ebx
c001bdf3:	74 45                	je     c001be3a <sysCallTTYName(regs*)+0x6d>
c001bdf5:	83 ec 0c             	sub    esp,0xc
c001bdf8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bdfa:	53                   	push   ebx
c001bdfb:	ff 10                	call   DWORD PTR [eax]
c001bdfd:	83 c4 10             	add    esp,0x10
c001be00:	84 c0                	test   al,al
c001be02:	74 41                	je     c001be45 <sysCallTTYName(regs*)+0x78>
c001be04:	83 ec 08             	sub    esp,0x8
c001be07:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001be0d:	53                   	push   ebx
c001be0e:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001be11:	e8 1e 4a fe ff       	call   c0000834 <strcpy>
c001be16:	83 c4 10             	add    esp,0x10
c001be19:	31 c0                	xor    eax,eax
c001be1b:	59                   	pop    ecx
c001be1c:	31 d2                	xor    edx,edx
c001be1e:	5b                   	pop    ebx
c001be1f:	5e                   	pop    esi
c001be20:	c3                   	ret    
c001be21:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001be26:	74 bb                	je     c001bde3 <sysCallTTYName(regs*)+0x16>
c001be28:	83 ec 0c             	sub    esp,0xc
c001be2b:	50                   	push   eax
c001be2c:	e8 f0 5b ff ff       	call   c0011a21 <getFromFileDescriptor(int)>
c001be31:	83 c4 10             	add    esp,0x10
c001be34:	89 c3                	mov    ebx,eax
c001be36:	85 db                	test   ebx,ebx
c001be38:	75 bb                	jne    c001bdf5 <sysCallTTYName(regs*)+0x28>
c001be3a:	59                   	pop    ecx
c001be3b:	b8 01 00 00 00       	mov    eax,0x1
c001be40:	31 d2                	xor    edx,edx
c001be42:	5b                   	pop    ebx
c001be43:	5e                   	pop    esi
c001be44:	c3                   	ret    
c001be45:	59                   	pop    ecx
c001be46:	b8 02 00 00 00       	mov    eax,0x2
c001be4b:	31 d2                	xor    edx,edx
c001be4d:	5b                   	pop    ebx
c001be4e:	5e                   	pop    esi
c001be4f:	c3                   	ret    

c001be50 <sysCallUSleep(regs*)>:
c001be50:	83 ec 14             	sub    esp,0x14
c001be53:	b8 e8 03 00 00       	mov    eax,0x3e8
c001be58:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001be5c:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001be63:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001be66:	01 ca                	add    edx,ecx
c001be68:	52                   	push   edx
c001be69:	50                   	push   eax
c001be6a:	e8 89 23 00 00       	call   c001e1f8 <nanoSleep(unsigned long long)>
c001be6f:	31 c0                	xor    eax,eax
c001be71:	31 d2                	xor    edx,edx
c001be73:	83 c4 1c             	add    esp,0x1c
c001be76:	c3                   	ret    

c001be77 <sysCallSpawn(regs*)>:
c001be77:	56                   	push   esi
c001be78:	53                   	push   ebx
c001be79:	53                   	push   ebx
c001be7a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001be7e:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001be81:	85 f6                	test   esi,esi
c001be83:	75 08                	jne    c001be8d <sysCallSpawn(regs*)+0x16>
c001be85:	59                   	pop    ecx
c001be86:	31 c0                	xor    eax,eax
c001be88:	31 d2                	xor    edx,edx
c001be8a:	5b                   	pop    ebx
c001be8b:	5e                   	pop    esi
c001be8c:	c3                   	ret    
c001be8d:	83 ec 0c             	sub    esp,0xc
c001be90:	68 3f 1b 00 00       	push   0x1b3f
c001be95:	e8 a6 39 ff ff       	call   c000f840 <malloc>
c001be9a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001be9d:	89 c6                	mov    esi,eax
c001be9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bea4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bea7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001beaa:	56                   	push   esi
c001beab:	e8 44 1a 00 00       	call   c001d8f4 <Process::Process(char const*, Process*, char**)>
c001beb0:	83 c4 20             	add    esp,0x20
c001beb3:	80 be 3e 1b 00 00 00 	cmp    BYTE PTR [esi+0x1b3e],0x0
c001beba:	75 c9                	jne    c001be85 <sysCallSpawn(regs*)+0xe>
c001bebc:	83 ec 0c             	sub    esp,0xc
c001bebf:	56                   	push   esi
c001bec0:	e8 f9 1f 00 00       	call   c001debe <Process::createUserThread()>
c001bec5:	8b 06                	mov    eax,DWORD PTR [esi]
c001bec7:	83 c4 10             	add    esp,0x10
c001beca:	99                   	cdq    
c001becb:	59                   	pop    ecx
c001becc:	5b                   	pop    ebx
c001becd:	5e                   	pop    esi
c001bece:	c3                   	ret    

c001becf <sysCallGetEnv(regs*)>:
c001becf:	55                   	push   ebp
c001bed0:	57                   	push   edi
c001bed1:	56                   	push   esi
c001bed2:	53                   	push   ebx
c001bed3:	83 ec 28             	sub    esp,0x28
c001bed6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001beda:	68 43 bd 02 c0       	push   0xc002bd43
c001bedf:	e8 f0 6e ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001bee4:	5f                   	pop    edi
c001bee5:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001bee8:	5d                   	pop    ebp
c001bee9:	53                   	push   ebx
c001beea:	68 89 c0 02 c0       	push   0xc002c089
c001beef:	e8 e0 6e ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001bef4:	58                   	pop    eax
c001bef5:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001bef8:	5a                   	pop    edx
c001bef9:	57                   	push   edi
c001befa:	68 4c bd 02 c0       	push   0xc002bd4c
c001beff:	e8 d0 6e ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001bf04:	59                   	pop    ecx
c001bf05:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf0a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bf0d:	e8 b9 e4 ff ff       	call   c001a3cb <Krnl::getProcessTotalEnvCount(Process*)>
c001bf12:	5a                   	pop    edx
c001bf13:	89 c5                	mov    ebp,eax
c001bf15:	59                   	pop    ecx
c001bf16:	50                   	push   eax
c001bf17:	68 56 bd 02 c0       	push   0xc002bd56
c001bf1c:	e8 b3 6e ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001bf21:	83 c4 10             	add    esp,0x10
c001bf24:	39 ef                	cmp    edi,ebp
c001bf26:	7c 15                	jl     c001bf3d <sysCallGetEnv(regs*)+0x6e>
c001bf28:	85 db                	test   ebx,ebx
c001bf2a:	75 0c                	jne    c001bf38 <sysCallGetEnv(regs*)+0x69>
c001bf2c:	83 c4 1c             	add    esp,0x1c
c001bf2f:	31 c0                	xor    eax,eax
c001bf31:	5b                   	pop    ebx
c001bf32:	31 d2                	xor    edx,edx
c001bf34:	5e                   	pop    esi
c001bf35:	5f                   	pop    edi
c001bf36:	5d                   	pop    ebp
c001bf37:	c3                   	ret    
c001bf38:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001bf3b:	eb ef                	jmp    c001bf2c <sysCallGetEnv(regs*)+0x5d>
c001bf3d:	83 ec 0c             	sub    esp,0xc
c001bf40:	68 62 bd 02 c0       	push   0xc002bd62
c001bf45:	e8 8a 6e ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001bf4a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bf4e:	83 c4 0c             	add    esp,0xc
c001bf51:	57                   	push   edi
c001bf52:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bf58:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001bf5b:	50                   	push   eax
c001bf5c:	e8 8a e4 ff ff       	call   c001a3eb <Krnl::getProcessEnvPair(Process*, int)>
c001bf61:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001bf65:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001bf69:	68 08 c1 02 c0       	push   0xc002c108
c001bf6e:	e8 61 6e ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001bf73:	83 c4 10             	add    esp,0x10
c001bf76:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001bf79:	85 f6                	test   esi,esi
c001bf7b:	75 47                	jne    c001bfc4 <sysCallGetEnv(regs*)+0xf5>
c001bf7d:	83 ec 0c             	sub    esp,0xc
c001bf80:	55                   	push   ebp
c001bf81:	e8 0e 48 fe ff       	call   c0000794 <strlen>
c001bf86:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bf89:	89 c3                	mov    ebx,eax
c001bf8b:	e8 04 48 fe ff       	call   c0000794 <strlen>
c001bf90:	5a                   	pop    edx
c001bf91:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001bf95:	59                   	pop    ecx
c001bf96:	50                   	push   eax
c001bf97:	68 65 bd 02 c0       	push   0xc002bd65
c001bf9c:	e8 33 6e ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001bfa1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001bfa4:	e8 eb 47 fe ff       	call   c0000794 <strlen>
c001bfa9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bfac:	89 c3                	mov    ebx,eax
c001bfae:	e8 e1 47 fe ff       	call   c0000794 <strlen>
c001bfb3:	83 c4 10             	add    esp,0x10
c001bfb6:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001bfba:	83 c4 1c             	add    esp,0x1c
c001bfbd:	31 d2                	xor    edx,edx
c001bfbf:	5b                   	pop    ebx
c001bfc0:	5e                   	pop    esi
c001bfc1:	5f                   	pop    edi
c001bfc2:	5d                   	pop    ebp
c001bfc3:	c3                   	ret    
c001bfc4:	83 ec 0c             	sub    esp,0xc
c001bfc7:	68 22 c1 02 c0       	push   0xc002c122
c001bfcc:	e8 03 6e ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001bfd1:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001bfd4:	58                   	pop    eax
c001bfd5:	5a                   	pop    edx
c001bfd6:	55                   	push   ebp
c001bfd7:	53                   	push   ebx
c001bfd8:	e8 57 48 fe ff       	call   c0000834 <strcpy>
c001bfdd:	59                   	pop    ecx
c001bfde:	5e                   	pop    esi
c001bfdf:	68 6f bd 02 c0       	push   0xc002bd6f
c001bfe4:	53                   	push   ebx
c001bfe5:	e8 8a 49 fe ff       	call   c0000974 <strcat>
c001bfea:	5d                   	pop    ebp
c001bfeb:	58                   	pop    eax
c001bfec:	57                   	push   edi
c001bfed:	53                   	push   ebx
c001bfee:	e8 81 49 fe ff       	call   c0000974 <strcat>
c001bff3:	c7 04 24 3c c1 02 c0 	mov    DWORD PTR [esp],0xc002c13c
c001bffa:	e8 d5 6d ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001bfff:	83 c4 10             	add    esp,0x10
c001c002:	e9 25 ff ff ff       	jmp    c001bf2c <sysCallGetEnv(regs*)+0x5d>

c001c007 <sysAppSettings(regs*)>:
c001c007:	53                   	push   ebx
c001c008:	83 ec 08             	sub    esp,0x8
c001c00b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c00f:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c012:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c018:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c01d:	66 3d c0 09          	cmp    ax,0x9c0
c001c021:	75 2f                	jne    c001c052 <sysAppSettings(regs*)+0x4b>
c001c023:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c029:	83 e0 1f             	and    eax,0x1f
c001c02c:	3c 01                	cmp    al,0x1
c001c02e:	74 2e                	je     c001c05e <sysAppSettings(regs*)+0x57>
c001c030:	3c 07                	cmp    al,0x7
c001c032:	0f 84 bd 00 00 00    	je     c001c0f5 <sysAppSettings(regs*)+0xee>
c001c038:	84 c0                	test   al,al
c001c03a:	0f 84 dc 00 00 00    	je     c001c11c <sysAppSettings(regs*)+0x115>
c001c040:	3c 08                	cmp    al,0x8
c001c042:	74 6d                	je     c001c0b1 <sysAppSettings(regs*)+0xaa>
c001c044:	0f b6 c0             	movzx  eax,al
c001c047:	83 c4 08             	add    esp,0x8
c001c04a:	05 e8 03 00 00       	add    eax,0x3e8
c001c04f:	5b                   	pop    ebx
c001c050:	99                   	cdq    
c001c051:	c3                   	ret    
c001c052:	b8 01 00 00 00       	mov    eax,0x1
c001c057:	31 d2                	xor    edx,edx
c001c059:	83 c4 08             	add    esp,0x8
c001c05c:	5b                   	pop    ebx
c001c05d:	c3                   	ret    
c001c05e:	51                   	push   ecx
c001c05f:	68 00 01 00 00       	push   0x100
c001c064:	6a 00                	push   0x0
c001c066:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c06b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c06e:	83 c0 0c             	add    eax,0xc
c001c071:	50                   	push   eax
c001c072:	e8 01 47 fe ff       	call   c0000778 <memset>
c001c077:	83 c4 0c             	add    esp,0xc
c001c07a:	68 ff 00 00 00       	push   0xff
c001c07f:	53                   	push   ebx
c001c080:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c085:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c088:	83 c0 0c             	add    eax,0xc
c001c08b:	50                   	push   eax
c001c08c:	e8 b3 46 fe ff       	call   c0000744 <memcpy>
c001c091:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c096:	5b                   	pop    ebx
c001c097:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c09a:	5a                   	pop    edx
c001c09b:	8d 50 0c             	lea    edx,[eax+0xc]
c001c09e:	52                   	push   edx
c001c09f:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001c0a5:	e8 f2 4a ff ff       	call   c0010b9c <VgaText::setTitle(char*)>
c001c0aa:	83 c4 10             	add    esp,0x10
c001c0ad:	31 c0                	xor    eax,eax
c001c0af:	eb a6                	jmp    c001c057 <sysAppSettings(regs*)+0x50>
c001c0b1:	83 ec 08             	sub    esp,0x8
c001c0b4:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c0ba:	83 e0 0f             	and    eax,0xf
c001c0bd:	50                   	push   eax
c001c0be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0c3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c0c6:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001c0cc:	e8 bb 4a ff ff       	call   c0010b8c <VgaText::setTitleColour(VgaColour)>
c001c0d1:	58                   	pop    eax
c001c0d2:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c0d8:	5a                   	pop    edx
c001c0d9:	c1 e8 04             	shr    eax,0x4
c001c0dc:	83 e0 0f             	and    eax,0xf
c001c0df:	50                   	push   eax
c001c0e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0e5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c0e8:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001c0ee:	e8 89 4a ff ff       	call   c0010b7c <VgaText::setTitleTextColour(VgaColour)>
c001c0f3:	eb b5                	jmp    c001c0aa <sysAppSettings(regs*)+0xa3>
c001c0f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0fa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c0fd:	8b 90 26 19 00 00    	mov    edx,DWORD PTR [eax+0x1926]
c001c103:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c109:	c0 e8 06             	shr    al,0x6
c001c10c:	83 e0 01             	and    eax,0x1
c001c10f:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001c115:	31 c0                	xor    eax,eax
c001c117:	e9 3b ff ff ff       	jmp    c001c057 <sysAppSettings(regs*)+0x50>
c001c11c:	b8 02 00 00 00       	mov    eax,0x2
c001c121:	e9 31 ff ff ff       	jmp    c001c057 <sysAppSettings(regs*)+0x50>

c001c126 <sysSetFatAttrib(regs*)>:
c001c126:	57                   	push   edi
c001c127:	56                   	push   esi
c001c128:	53                   	push   ebx
c001c129:	83 ec 1c             	sub    esp,0x1c
c001c12c:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c130:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c133:	68 14 01 00 00       	push   0x114
c001c138:	e8 03 37 ff ff       	call   c000f840 <malloc>
c001c13d:	83 c4 0c             	add    esp,0xc
c001c140:	89 c3                	mov    ebx,eax
c001c142:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c147:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c14a:	57                   	push   edi
c001c14b:	53                   	push   ebx
c001c14c:	e8 db 71 ff ff       	call   c001332c <File::File(char const*, Process*)>
c001c151:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c154:	83 c4 0c             	add    esp,0xc
c001c157:	0f b6 d4             	movzx  edx,ah
c001c15a:	0f b6 c0             	movzx  eax,al
c001c15d:	52                   	push   edx
c001c15e:	50                   	push   eax
c001c15f:	53                   	push   ebx
c001c160:	e8 3d 74 ff ff       	call   c00135a2 <File::chfatattr(unsigned char, unsigned char)>
c001c165:	83 c4 10             	add    esp,0x10
c001c168:	85 db                	test   ebx,ebx
c001c16a:	74 14                	je     c001c180 <sysSetFatAttrib(regs*)+0x5a>
c001c16c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c170:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c172:	83 ec 0c             	sub    esp,0xc
c001c175:	53                   	push   ebx
c001c176:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c179:	83 c4 10             	add    esp,0x10
c001c17c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c180:	85 c0                	test   eax,eax
c001c182:	0f 95 c0             	setne  al
c001c185:	31 d2                	xor    edx,edx
c001c187:	0f b6 c0             	movzx  eax,al
c001c18a:	f7 d8                	neg    eax
c001c18c:	83 d2 00             	adc    edx,0x0
c001c18f:	83 c4 10             	add    esp,0x10
c001c192:	f7 da                	neg    edx
c001c194:	5b                   	pop    ebx
c001c195:	5e                   	pop    esi
c001c196:	5f                   	pop    edi
c001c197:	c3                   	ret    

c001c198 <sysPipe(regs*)>:
c001c198:	57                   	push   edi
c001c199:	56                   	push   esi
c001c19a:	53                   	push   ebx
c001c19b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c19f:	83 ec 0c             	sub    esp,0xc
c001c1a2:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c1a5:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c1a8:	6a 20                	push   0x20
c001c1aa:	e8 91 36 ff ff       	call   c000f840 <malloc>
c001c1af:	89 c3                	mov    ebx,eax
c001c1b1:	58                   	pop    eax
c001c1b2:	5a                   	pop    edx
c001c1b3:	68 00 50 00 00       	push   0x5000
c001c1b8:	53                   	push   ebx
c001c1b9:	e8 0e 43 ff ff       	call   c00104cc <Pipe::Pipe(int)>
c001c1be:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c1c1:	e8 66 55 ff ff       	call   c001172c <UnixFile::getFileDescriptor()>
c001c1c6:	89 07                	mov    DWORD PTR [edi],eax
c001c1c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c1cb:	e8 5c 55 ff ff       	call   c001172c <UnixFile::getFileDescriptor()>
c001c1d0:	83 c4 10             	add    esp,0x10
c001c1d3:	89 06                	mov    DWORD PTR [esi],eax
c001c1d5:	31 d2                	xor    edx,edx
c001c1d7:	5b                   	pop    ebx
c001c1d8:	31 c0                	xor    eax,eax
c001c1da:	5e                   	pop    esi
c001c1db:	5f                   	pop    edi
c001c1dc:	c3                   	ret    

c001c1dd <sysGetUnixTime(regs*)>:
c001c1dd:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c001c1e2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c1e8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c1ec:	e9 25 7b ff ff       	jmp    c0013d16 <Clock::timeInSecondsLocal()>

c001c1f1 <string_ends_with(char const*, char const*)>:
c001c1f1:	57                   	push   edi
c001c1f2:	56                   	push   esi
c001c1f3:	53                   	push   ebx
c001c1f4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c1f8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c1fc:	83 ec 0c             	sub    esp,0xc
c001c1ff:	53                   	push   ebx
c001c200:	e8 8f 45 fe ff       	call   c0000794 <strlen>
c001c205:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c208:	89 c6                	mov    esi,eax
c001c20a:	e8 85 45 fe ff       	call   c0000794 <strlen>
c001c20f:	83 c4 10             	add    esp,0x10
c001c212:	39 c6                	cmp    esi,eax
c001c214:	7d 06                	jge    c001c21c <string_ends_with(char const*, char const*)+0x2b>
c001c216:	5b                   	pop    ebx
c001c217:	31 c0                	xor    eax,eax
c001c219:	5e                   	pop    esi
c001c21a:	5f                   	pop    edi
c001c21b:	c3                   	ret    
c001c21c:	83 ec 08             	sub    esp,0x8
c001c21f:	29 c6                	sub    esi,eax
c001c221:	57                   	push   edi
c001c222:	01 f3                	add    ebx,esi
c001c224:	53                   	push   ebx
c001c225:	e8 96 46 fe ff       	call   c00008c0 <strcmp>
c001c22a:	83 c4 10             	add    esp,0x10
c001c22d:	85 c0                	test   eax,eax
c001c22f:	5b                   	pop    ebx
c001c230:	0f 94 c0             	sete   al
c001c233:	5e                   	pop    esi
c001c234:	0f b6 c0             	movzx  eax,al
c001c237:	5f                   	pop    edi
c001c238:	c3                   	ret    

c001c239 <sysCallOpen(regs*)>:
c001c239:	56                   	push   esi
c001c23a:	53                   	push   ebx
c001c23b:	81 ec 04 01 00 00    	sub    esp,0x104
c001c241:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c248:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c24b:	85 c9                	test   ecx,ecx
c001c24d:	0f 84 b3 00 00 00    	je     c001c306 <sysCallOpen(regs*)+0xcd>
c001c253:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c256:	85 c0                	test   eax,eax
c001c258:	0f 84 a8 00 00 00    	je     c001c306 <sysCallOpen(regs*)+0xcd>
c001c25e:	52                   	push   edx
c001c25f:	68 71 bd 02 c0       	push   0xc002bd71
c001c264:	50                   	push   eax
c001c265:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c269:	56                   	push   esi
c001c26a:	e8 13 6f ff ff       	call   c0013182 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c26f:	89 34 24             	mov    DWORD PTR [esp],esi
c001c272:	e8 1d 45 fe ff       	call   c0000794 <strlen>
c001c277:	83 c4 10             	add    esp,0x10
c001c27a:	48                   	dec    eax
c001c27b:	74 1d                	je     c001c29a <sysCallOpen(regs*)+0x61>
c001c27d:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c280:	eb 0f                	jmp    c001c291 <sysCallOpen(regs*)+0x58>
c001c282:	80 fa 3a             	cmp    dl,0x3a
c001c285:	74 0f                	je     c001c296 <sysCallOpen(regs*)+0x5d>
c001c287:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c28b:	48                   	dec    eax
c001c28c:	74 0c                	je     c001c29a <sysCallOpen(regs*)+0x61>
c001c28e:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c291:	80 fa 2e             	cmp    dl,0x2e
c001c294:	75 ec                	jne    c001c282 <sysCallOpen(regs*)+0x49>
c001c296:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c29a:	83 ec 08             	sub    esp,0x8
c001c29d:	68 75 bd 02 c0       	push   0xc002bd75
c001c2a2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c2a5:	e8 47 ff ff ff       	call   c001c1f1 <string_ends_with(char const*, char const*)>
c001c2aa:	83 c4 10             	add    esp,0x10
c001c2ad:	85 c0                	test   eax,eax
c001c2af:	75 17                	jne    c001c2c8 <sysCallOpen(regs*)+0x8f>
c001c2b1:	83 ec 08             	sub    esp,0x8
c001c2b4:	68 96 bd 02 c0       	push   0xc002bd96
c001c2b9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c2bc:	e8 30 ff ff ff       	call   c001c1f1 <string_ends_with(char const*, char const*)>
c001c2c1:	83 c4 10             	add    esp,0x10
c001c2c4:	85 c0                	test   eax,eax
c001c2c6:	74 51                	je     c001c319 <sysCallOpen(regs*)+0xe0>
c001c2c8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c2cb:	83 ec 08             	sub    esp,0x8
c001c2ce:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c2d4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c2db:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c2de:	ff 30                	push   DWORD PTR [eax]
c001c2e0:	68 7a bd 02 c0       	push   0xc002bd7a
c001c2e5:	e8 ea 6a ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001c2ea:	c7 04 24 89 bd 02 c0 	mov    DWORD PTR [esp],0xc002bd89
c001c2f1:	e8 de 6a ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001c2f6:	83 c4 10             	add    esp,0x10
c001c2f9:	81 c4 04 01 00 00    	add    esp,0x104
c001c2ff:	31 c0                	xor    eax,eax
c001c301:	31 d2                	xor    edx,edx
c001c303:	5b                   	pop    ebx
c001c304:	5e                   	pop    esi
c001c305:	c3                   	ret    
c001c306:	81 c4 04 01 00 00    	add    esp,0x104
c001c30c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c311:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c316:	5b                   	pop    ebx
c001c317:	5e                   	pop    esi
c001c318:	c3                   	ret    
c001c319:	83 ec 08             	sub    esp,0x8
c001c31c:	68 76 bd 02 c0       	push   0xc002bd76
c001c321:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c324:	e8 97 45 fe ff       	call   c00008c0 <strcmp>
c001c329:	83 c4 10             	add    esp,0x10
c001c32c:	85 c0                	test   eax,eax
c001c32e:	74 98                	je     c001c2c8 <sysCallOpen(regs*)+0x8f>
c001c330:	83 ec 08             	sub    esp,0x8
c001c333:	68 75 bd 02 c0       	push   0xc002bd75
c001c338:	56                   	push   esi
c001c339:	e8 b3 fe ff ff       	call   c001c1f1 <string_ends_with(char const*, char const*)>
c001c33e:	83 c4 10             	add    esp,0x10
c001c341:	85 c0                	test   eax,eax
c001c343:	75 83                	jne    c001c2c8 <sysCallOpen(regs*)+0x8f>
c001c345:	83 ec 08             	sub    esp,0x8
c001c348:	68 9b bd 02 c0       	push   0xc002bd9b
c001c34d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c350:	e8 9c fe ff ff       	call   c001c1f1 <string_ends_with(char const*, char const*)>
c001c355:	83 c4 10             	add    esp,0x10
c001c358:	85 c0                	test   eax,eax
c001c35a:	0f 85 d9 00 00 00    	jne    c001c439 <sysCallOpen(regs*)+0x200>
c001c360:	83 ec 08             	sub    esp,0x8
c001c363:	68 a0 bd 02 c0       	push   0xc002bda0
c001c368:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c36b:	e8 81 fe ff ff       	call   c001c1f1 <string_ends_with(char const*, char const*)>
c001c370:	83 c4 10             	add    esp,0x10
c001c373:	85 c0                	test   eax,eax
c001c375:	0f 85 be 00 00 00    	jne    c001c439 <sysCallOpen(regs*)+0x200>
c001c37b:	83 ec 08             	sub    esp,0x8
c001c37e:	68 9c bd 02 c0       	push   0xc002bd9c
c001c383:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c386:	e8 35 45 fe ff       	call   c00008c0 <strcmp>
c001c38b:	83 c4 10             	add    esp,0x10
c001c38e:	85 c0                	test   eax,eax
c001c390:	0f 84 a3 00 00 00    	je     c001c439 <sysCallOpen(regs*)+0x200>
c001c396:	83 ec 08             	sub    esp,0x8
c001c399:	68 9b bd 02 c0       	push   0xc002bd9b
c001c39e:	56                   	push   esi
c001c39f:	e8 4d fe ff ff       	call   c001c1f1 <string_ends_with(char const*, char const*)>
c001c3a4:	83 c4 10             	add    esp,0x10
c001c3a7:	85 c0                	test   eax,eax
c001c3a9:	0f 85 8a 00 00 00    	jne    c001c439 <sysCallOpen(regs*)+0x200>
c001c3af:	83 ec 0c             	sub    esp,0xc
c001c3b2:	68 14 01 00 00       	push   0x114
c001c3b7:	e8 84 34 ff ff       	call   c000f840 <malloc>
c001c3bc:	83 c4 0c             	add    esp,0xc
c001c3bf:	89 c6                	mov    esi,eax
c001c3c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c3c6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c3c9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c3cc:	56                   	push   esi
c001c3cd:	e8 5a 6f ff ff       	call   c001332c <File::File(char const*, Process*)>
c001c3d2:	83 c4 10             	add    esp,0x10
c001c3d5:	85 f6                	test   esi,esi
c001c3d7:	0f 84 29 ff ff ff    	je     c001c306 <sysCallOpen(regs*)+0xcd>
c001c3dd:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c3e0:	0f b6 c2             	movzx  eax,dl
c001c3e3:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c3e6:	89 d0                	mov    eax,edx
c001c3e8:	83 e0 01             	and    eax,0x1
c001c3eb:	f6 c2 02             	test   dl,0x2
c001c3ee:	74 03                	je     c001c3f3 <sysCallOpen(regs*)+0x1ba>
c001c3f0:	83 c8 02             	or     eax,0x2
c001c3f3:	f6 c2 04             	test   dl,0x4
c001c3f6:	74 03                	je     c001c3fb <sysCallOpen(regs*)+0x1c2>
c001c3f8:	83 c8 04             	or     eax,0x4
c001c3fb:	f6 c2 08             	test   dl,0x8
c001c3fe:	74 03                	je     c001c403 <sysCallOpen(regs*)+0x1ca>
c001c400:	83 c8 0a             	or     eax,0xa
c001c403:	83 e2 10             	and    edx,0x10
c001c406:	74 03                	je     c001c40b <sysCallOpen(regs*)+0x1d2>
c001c408:	83 c8 12             	or     eax,0x12
c001c40b:	83 ec 08             	sub    esp,0x8
c001c40e:	50                   	push   eax
c001c40f:	56                   	push   esi
c001c410:	e8 7b 6f ff ff       	call   c0013390 <File::open(FileOpenMode)>
c001c415:	83 c4 10             	add    esp,0x10
c001c418:	85 c0                	test   eax,eax
c001c41a:	0f 85 e6 fe ff ff    	jne    c001c306 <sysCallOpen(regs*)+0xcd>
c001c420:	83 ec 0c             	sub    esp,0xc
c001c423:	56                   	push   esi
c001c424:	e8 03 53 ff ff       	call   c001172c <UnixFile::getFileDescriptor()>
c001c429:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c42c:	89 02                	mov    DWORD PTR [edx],eax
c001c42e:	c1 f8 1f             	sar    eax,0x1f
c001c431:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c434:	e9 bd fe ff ff       	jmp    c001c2f6 <sysCallOpen(regs*)+0xbd>
c001c439:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c43c:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c442:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c449:	e9 ab fe ff ff       	jmp    c001c2f9 <sysCallOpen(regs*)+0xc0>

c001c44e <Sys::loadSyscalls()>:
c001c44e:	c7 05 20 0e 03 c0 5b b5 01 c0 	mov    DWORD PTR ds:0xc0030e20,0xc001b55b
c001c458:	c7 05 24 0e 03 c0 44 b1 01 c0 	mov    DWORD PTR ds:0xc0030e24,0xc001b144
c001c462:	c7 05 28 0e 03 c0 ae b2 01 c0 	mov    DWORD PTR ds:0xc0030e28,0xc001b2ae
c001c46c:	c7 05 2c 0e 03 c0 91 b4 01 c0 	mov    DWORD PTR ds:0xc0030e2c,0xc001b491
c001c476:	c7 05 30 0e 03 c0 46 b2 01 c0 	mov    DWORD PTR ds:0xc0030e30,0xc001b246
c001c480:	c7 05 34 0e 03 c0 7b b1 01 c0 	mov    DWORD PTR ds:0xc0030e34,0xc001b17b
c001c48a:	c7 05 38 0e 03 c0 5c b1 01 c0 	mov    DWORD PTR ds:0xc0030e38,0xc001b15c
c001c494:	c7 05 3c 0e 03 c0 03 b3 01 c0 	mov    DWORD PTR ds:0xc0030e3c,0xc001b303
c001c49e:	c7 05 44 0e 03 c0 8b ba 01 c0 	mov    DWORD PTR ds:0xc0030e44,0xc001ba8b
c001c4a8:	c7 05 40 0e 03 c0 39 c2 01 c0 	mov    DWORD PTR ds:0xc0030e40,0xc001c239
c001c4b2:	c7 05 48 0e 03 c0 13 bb 01 c0 	mov    DWORD PTR ds:0xc0030e48,0xc001bb13
c001c4bc:	c7 05 4c 0e 03 c0 7a b7 01 c0 	mov    DWORD PTR ds:0xc0030e4c,0xc001b77a
c001c4c6:	c7 05 50 0e 03 c0 96 b5 01 c0 	mov    DWORD PTR ds:0xc0030e50,0xc001b596
c001c4d0:	c7 05 54 0e 03 c0 9b b5 01 c0 	mov    DWORD PTR ds:0xc0030e54,0xc001b59b
c001c4da:	c7 05 58 0e 03 c0 ee bb 01 c0 	mov    DWORD PTR ds:0xc0030e58,0xc001bbee
c001c4e4:	c7 05 5c 0e 03 c0 88 bb 01 c0 	mov    DWORD PTR ds:0xc0030e5c,0xc001bb88
c001c4ee:	c7 05 60 0e 03 c0 62 b8 01 c0 	mov    DWORD PTR ds:0xc0030e60,0xc001b862
c001c4f8:	c7 05 64 0e 03 c0 cb b8 01 c0 	mov    DWORD PTR ds:0xc0030e64,0xc001b8cb
c001c502:	c7 05 68 0e 03 c0 48 b9 01 c0 	mov    DWORD PTR ds:0xc0030e68,0xc001b948
c001c50c:	c7 05 6c 0e 03 c0 a0 b5 01 c0 	mov    DWORD PTR ds:0xc0030e6c,0xc001b5a0
c001c516:	c7 05 70 0e 03 c0 5e bc 01 c0 	mov    DWORD PTR ds:0xc0030e70,0xc001bc5e
c001c520:	c7 05 74 0e 03 c0 78 bc 01 c0 	mov    DWORD PTR ds:0xc0030e74,0xc001bc78
c001c52a:	c7 05 78 0e 03 c0 78 bc 01 c0 	mov    DWORD PTR ds:0xc0030e78,0xc001bc78
c001c534:	c7 05 7c 0e 03 c0 b9 bc 01 c0 	mov    DWORD PTR ds:0xc0030e7c,0xc001bcb9
c001c53e:	c7 05 80 0e 03 c0 1d bd 01 c0 	mov    DWORD PTR ds:0xc0030e80,0xc001bd1d
c001c548:	c7 05 84 0e 03 c0 4c b7 01 c0 	mov    DWORD PTR ds:0xc0030e84,0xc001b74c
c001c552:	c7 05 88 0e 03 c0 81 bd 01 c0 	mov    DWORD PTR ds:0xc0030e88,0xc001bd81
c001c55c:	c7 05 8c 0e 03 c0 09 b7 01 c0 	mov    DWORD PTR ds:0xc0030e8c,0xc001b709
c001c566:	c7 05 90 0e 03 c0 cd bd 01 c0 	mov    DWORD PTR ds:0xc0030e90,0xc001bdcd
c001c570:	c7 05 94 0e 03 c0 08 b8 01 c0 	mov    DWORD PTR ds:0xc0030e94,0xc001b808
c001c57a:	c7 05 98 0e 03 c0 50 be 01 c0 	mov    DWORD PTR ds:0xc0030e98,0xc001be50
c001c584:	c7 05 9c 0e 03 c0 cb b9 01 c0 	mov    DWORD PTR ds:0xc0030e9c,0xc001b9cb
c001c58e:	c7 05 a0 0e 03 c0 77 be 01 c0 	mov    DWORD PTR ds:0xc0030ea0,0xc001be77
c001c598:	c7 05 a4 0e 03 c0 cf be 01 c0 	mov    DWORD PTR ds:0xc0030ea4,0xc001becf
c001c5a2:	c7 05 a8 0e 03 c0 07 c0 01 c0 	mov    DWORD PTR ds:0xc0030ea8,0xc001c007
c001c5ac:	c7 05 ac 0e 03 c0 aa b5 01 c0 	mov    DWORD PTR ds:0xc0030eac,0xc001b5aa
c001c5b6:	c7 05 b0 0e 03 c0 14 b6 01 c0 	mov    DWORD PTR ds:0xc0030eb0,0xc001b614
c001c5c0:	c7 05 b4 0e 03 c0 5a b6 01 c0 	mov    DWORD PTR ds:0xc0030eb4,0xc001b65a
c001c5ca:	c7 05 b8 0e 03 c0 26 c1 01 c0 	mov    DWORD PTR ds:0xc0030eb8,0xc001c126
c001c5d4:	c7 05 bc 0e 03 c0 93 bc 01 c0 	mov    DWORD PTR ds:0xc0030ebc,0xc001bc93
c001c5de:	c7 05 c0 0e 03 c0 ab b6 01 c0 	mov    DWORD PTR ds:0xc0030ec0,0xc001b6ab
c001c5e8:	c7 05 c4 0e 03 c0 98 c1 01 c0 	mov    DWORD PTR ds:0xc0030ec4,0xc001c198
c001c5f2:	c7 05 c8 0e 03 c0 dd c1 01 c0 	mov    DWORD PTR ds:0xc0030ec8,0xc001c1dd
c001c5fc:	c7 05 cc 0e 03 c0 9e b1 01 c0 	mov    DWORD PTR ds:0xc0030ecc,0xc001b19e
c001c606:	c7 05 d0 0e 03 c0 1f b3 01 c0 	mov    DWORD PTR ds:0xc0030ed0,0xc001b31f
c001c610:	c7 05 d4 0e 03 c0 47 b4 01 c0 	mov    DWORD PTR ds:0xc0030ed4,0xc001b447
c001c61a:	c7 05 d8 0e 03 c0 0e b1 01 c0 	mov    DWORD PTR ds:0xc0030ed8,0xc001b10e
c001c624:	c7 05 dc 0e 03 c0 f9 b4 01 c0 	mov    DWORD PTR ds:0xc0030edc,0xc001b4f9
c001c62e:	c7 05 e0 0e 03 c0 87 b1 01 c0 	mov    DWORD PTR ds:0xc0030ee0,0xc001b187
c001c638:	c3                   	ret    

c001c639 <Sys::systemCall(regs*, void*)>:
c001c639:	53                   	push   ebx
c001c63a:	83 ec 08             	sub    esp,0x8
c001c63d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c641:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c644:	83 f8 7f             	cmp    eax,0x7f
c001c647:	77 16                	ja     c001c65f <Sys::systemCall(regs*, void*)+0x26>
c001c649:	8b 14 85 20 0e 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf1e0]
c001c650:	85 d2                	test   edx,edx
c001c652:	74 0b                	je     c001c65f <Sys::systemCall(regs*, void*)+0x26>
c001c654:	83 ec 0c             	sub    esp,0xc
c001c657:	53                   	push   ebx
c001c658:	ff d2                	call   edx
c001c65a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c65d:	eb 0d                	jmp    c001c66c <Sys::systemCall(regs*, void*)+0x33>
c001c65f:	52                   	push   edx
c001c660:	52                   	push   edx
c001c661:	50                   	push   eax
c001c662:	68 a5 bd 02 c0       	push   0xc002bda5
c001c667:	e8 68 67 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001c66c:	83 c4 10             	add    esp,0x10
c001c66f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c674:	31 d2                	xor    edx,edx
c001c676:	83 c4 08             	add    esp,0x8
c001c679:	5b                   	pop    ebx
c001c67a:	c3                   	ret    

c001c67b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c67b:	55                   	push   ebp
c001c67c:	57                   	push   edi
c001c67d:	56                   	push   esi
c001c67e:	53                   	push   ebx
c001c67f:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c685:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c68c:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c693:	85 c0                	test   eax,eax
c001c695:	0f 95 c1             	setne  cl
c001c698:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c6a0:	0f 94 c2             	sete   dl
c001c6a3:	84 d1                	test   cl,dl
c001c6a5:	74 23                	je     c001c6ca <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c6a7:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c6ad:	74 1b                	je     c001c6ca <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c6af:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c6b5:	89 da                	mov    edx,ebx
c001c6b7:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c6bd:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c6c3:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c6ca:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c6d1:	05 ff 0f 00 00       	add    eax,0xfff
c001c6d6:	83 ec 0c             	sub    esp,0xc
c001c6d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c6dd:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c6e3:	c1 e8 0c             	shr    eax,0xc
c001c6e6:	89 ef                	mov    edi,ebp
c001c6e8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c6ec:	c1 ef 0c             	shr    edi,0xc
c001c6ef:	6a 01                	push   0x1
c001c6f1:	e8 81 54 ff ff       	call   c0011b77 <Virt::allocateKernelVirtualPages(int)>
c001c6f6:	89 c6                	mov    esi,eax
c001c6f8:	58                   	pop    eax
c001c6f9:	5a                   	pop    edx
c001c6fa:	57                   	push   edi
c001c6fb:	68 2b be 02 c0       	push   0xc002be2b
c001c700:	e8 cf 66 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001c705:	59                   	pop    ecx
c001c706:	58                   	pop    eax
c001c707:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c70b:	68 3d be 02 c0       	push   0xc002be3d
c001c710:	e8 bf 66 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001c715:	83 c4 10             	add    esp,0x10
c001c718:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c71e:	0f 86 24 01 00 00    	jbe    c001c848 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c724:	c1 e7 0c             	shl    edi,0xc
c001c727:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c72a:	89 df                	mov    edi,ebx
c001c72c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c730:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c737:	01 dd                	add    ebp,ebx
c001c739:	29 fd                	sub    ebp,edi
c001c73b:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c73f:	0f 84 01 01 00 00    	je     c001c846 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c745:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c74b:	76 05                	jbe    c001c752 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c74d:	bd 00 10 00 00       	mov    ebp,0x1000
c001c752:	83 ec 0c             	sub    esp,0xc
c001c755:	31 d2                	xor    edx,edx
c001c757:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c75e:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c760:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c764:	50                   	push   eax
c001c765:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c769:	50                   	push   eax
c001c76a:	52                   	push   edx
c001c76b:	55                   	push   ebp
c001c76c:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c773:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c776:	83 c4 20             	add    esp,0x20
c001c779:	85 c0                	test   eax,eax
c001c77b:	74 0a                	je     c001c787 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c77d:	53                   	push   ebx
c001c77e:	53                   	push   ebx
c001c77f:	50                   	push   eax
c001c780:	68 4f be 02 c0       	push   0xc002be4f
c001c785:	eb 0f                	jmp    c001c796 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c787:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c78b:	74 20                	je     c001c7ad <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c78d:	51                   	push   ecx
c001c78e:	51                   	push   ecx
c001c78f:	6a 00                	push   0x0
c001c791:	68 7a be 02 c0       	push   0xc002be7a
c001c796:	e8 39 66 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001c79b:	89 34 24             	mov    DWORD PTR [esp],esi
c001c79e:	e8 36 57 ff ff       	call   c0011ed9 <Virt::freeKernelVirtualPages(unsigned long)>
c001c7a3:	83 c4 10             	add    esp,0x10
c001c7a6:	31 c0                	xor    eax,eax
c001c7a8:	e9 55 01 00 00       	jmp    c001c902 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c7ad:	e8 f7 14 00 00       	call   c001dca9 <lockScheduler()>
c001c7b2:	e8 26 37 ff ff       	call   c000fedd <Phys::allocatePage()>
c001c7b7:	6a 07                	push   0x7
c001c7b9:	89 c5                	mov    ebp,eax
c001c7bb:	56                   	push   esi
c001c7bc:	50                   	push   eax
c001c7bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c7c2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c7c5:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c7cb:	e8 70 5a ff ff       	call   c0012240 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c7d0:	83 c4 0c             	add    esp,0xc
c001c7d3:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c7da:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c7e0:	6a 00                	push   0x0
c001c7e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c7e7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c7ea:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c7f0:	e8 b5 58 ff ff       	call   c00120aa <VAS::mapOtherVASIn(bool, VAS*)>
c001c7f5:	58                   	pop    eax
c001c7f6:	5a                   	pop    edx
c001c7f7:	68 07 0c 00 00       	push   0xc07
c001c7fc:	57                   	push   edi
c001c7fd:	81 c7 00 10 00 00    	add    edi,0x1000
c001c803:	55                   	push   ebp
c001c804:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c80b:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c811:	6a 00                	push   0x0
c001c813:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c818:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c81b:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c821:	e8 d4 5d ff ff       	call   c00125fa <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c826:	83 c4 1c             	add    esp,0x1c
c001c829:	68 00 10 00 00       	push   0x1000
c001c82e:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c832:	50                   	push   eax
c001c833:	56                   	push   esi
c001c834:	e8 0b 3f fe ff       	call   c0000744 <memcpy>
c001c839:	e8 6d 14 00 00       	call   c001dcab <unlockScheduler()>
c001c83e:	83 c4 10             	add    esp,0x10
c001c841:	e9 ea fe ff ff       	jmp    c001c730 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001c846:	89 fb                	mov    ebx,edi
c001c848:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c850:	0f 86 9e 00 00 00    	jbe    c001c8f4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001c856:	e8 4e 14 00 00       	call   c001dca9 <lockScheduler()>
c001c85b:	51                   	push   ecx
c001c85c:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c863:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c869:	6a 00                	push   0x0
c001c86b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c870:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c873:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c879:	e8 2c 58 ff ff       	call   c00120aa <VAS::mapOtherVASIn(bool, VAS*)>
c001c87e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c882:	c1 e7 0c             	shl    edi,0xc
c001c885:	01 df                	add    edi,ebx
c001c887:	83 c4 10             	add    esp,0x10
c001c88a:	39 fb                	cmp    ebx,edi
c001c88c:	74 61                	je     c001c8ef <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001c88e:	e8 4a 36 ff ff       	call   c000fedd <Phys::allocatePage()>
c001c893:	6a 07                	push   0x7
c001c895:	89 c5                	mov    ebp,eax
c001c897:	56                   	push   esi
c001c898:	50                   	push   eax
c001c899:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c89e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c8a1:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c8a7:	e8 94 59 ff ff       	call   c0012240 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c8ac:	58                   	pop    eax
c001c8ad:	5a                   	pop    edx
c001c8ae:	68 07 0c 00 00       	push   0xc07
c001c8b3:	53                   	push   ebx
c001c8b4:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c8ba:	55                   	push   ebp
c001c8bb:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c8c2:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c8c8:	6a 00                	push   0x0
c001c8ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c8cf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c8d2:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c8d8:	e8 1d 5d ff ff       	call   c00125fa <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c8dd:	83 c4 1c             	add    esp,0x1c
c001c8e0:	68 00 10 00 00       	push   0x1000
c001c8e5:	6a 00                	push   0x0
c001c8e7:	56                   	push   esi
c001c8e8:	e8 8b 3e fe ff       	call   c0000778 <memset>
c001c8ed:	eb 98                	jmp    c001c887 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001c8ef:	e8 b7 13 00 00       	call   c001dcab <unlockScheduler()>
c001c8f4:	83 ec 0c             	sub    esp,0xc
c001c8f7:	56                   	push   esi
c001c8f8:	e8 dc 55 ff ff       	call   c0011ed9 <Virt::freeKernelVirtualPages(unsigned long)>
c001c8fd:	83 c4 10             	add    esp,0x10
c001c900:	b0 01                	mov    al,0x1
c001c902:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c908:	5b                   	pop    ebx
c001c909:	5e                   	pop    esi
c001c90a:	5f                   	pop    edi
c001c90b:	5d                   	pop    ebp
c001c90c:	c3                   	ret    

c001c90d <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c90d:	55                   	push   ebp
c001c90e:	57                   	push   edi
c001c90f:	56                   	push   esi
c001c910:	53                   	push   ebx
c001c911:	83 ec 48             	sub    esp,0x48
c001c914:	68 14 01 00 00       	push   0x114
c001c919:	e8 22 2f ff ff       	call   c000f840 <malloc>
c001c91e:	83 c4 0c             	add    esp,0xc
c001c921:	89 c6                	mov    esi,eax
c001c923:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c927:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c92b:	50                   	push   eax
c001c92c:	e8 fb 69 ff ff       	call   c001332c <File::File(char const*, Process*)>
c001c931:	58                   	pop    eax
c001c932:	5a                   	pop    edx
c001c933:	6a 01                	push   0x1
c001c935:	56                   	push   esi
c001c936:	e8 55 6a ff ff       	call   c0013390 <File::open(FileOpenMode)>
c001c93b:	83 c4 10             	add    esp,0x10
c001c93e:	85 c0                	test   eax,eax
c001c940:	0f 85 47 01 00 00    	jne    c001ca8d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c946:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c94e:	83 ec 0c             	sub    esp,0xc
c001c951:	6a 34                	push   0x34
c001c953:	e8 e8 2e ff ff       	call   c000f840 <malloc>
c001c958:	89 c3                	mov    ebx,eax
c001c95a:	58                   	pop    eax
c001c95b:	8b 06                	mov    eax,DWORD PTR [esi]
c001c95d:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c961:	57                   	push   edi
c001c962:	53                   	push   ebx
c001c963:	6a 00                	push   0x0
c001c965:	6a 34                	push   0x34
c001c967:	56                   	push   esi
c001c968:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c96b:	83 c4 20             	add    esp,0x20
c001c96e:	85 c0                	test   eax,eax
c001c970:	0f 85 17 01 00 00    	jne    c001ca8d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c976:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c97c:	0f 85 0b 01 00 00    	jne    c001ca8d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c982:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c985:	85 c0                	test   eax,eax
c001c987:	0f 84 00 01 00 00    	je     c001ca8d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c98d:	31 d2                	xor    edx,edx
c001c98f:	55                   	push   ebp
c001c990:	52                   	push   edx
c001c991:	50                   	push   eax
c001c992:	56                   	push   esi
c001c993:	e8 b6 6a ff ff       	call   c001344e <File::seek(unsigned long long)>
c001c998:	83 c4 10             	add    esp,0x10
c001c99b:	85 c0                	test   eax,eax
c001c99d:	0f 85 ea 00 00 00    	jne    c001ca8d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c9a3:	83 ec 0c             	sub    esp,0xc
c001c9a6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c9a9:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c9ad:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c9b1:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c9b5:	0f af c2             	imul   eax,edx
c001c9b8:	50                   	push   eax
c001c9b9:	e8 82 2e ff ff       	call   c000f840 <malloc>
c001c9be:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c9c0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c9c4:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c9c7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c9cb:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c9cf:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c9d3:	0f af c2             	imul   eax,edx
c001c9d6:	99                   	cdq    
c001c9d7:	52                   	push   edx
c001c9d8:	50                   	push   eax
c001c9d9:	56                   	push   esi
c001c9da:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c9dd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c9e0:	83 c4 20             	add    esp,0x20
c001c9e3:	85 c0                	test   eax,eax
c001c9e5:	0f 84 a2 00 00 00    	je     c001ca8d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c9eb:	31 d2                	xor    edx,edx
c001c9ed:	51                   	push   ecx
c001c9ee:	52                   	push   edx
c001c9ef:	50                   	push   eax
c001c9f0:	56                   	push   esi
c001c9f1:	e8 58 6a ff ff       	call   c001344e <File::seek(unsigned long long)>
c001c9f6:	83 c4 10             	add    esp,0x10
c001c9f9:	85 c0                	test   eax,eax
c001c9fb:	0f 85 8c 00 00 00    	jne    c001ca8d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca01:	83 ec 0c             	sub    esp,0xc
c001ca04:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001ca08:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001ca0c:	31 ed                	xor    ebp,ebp
c001ca0e:	0f af c2             	imul   eax,edx
c001ca11:	50                   	push   eax
c001ca12:	e8 29 2e ff ff       	call   c000f840 <malloc>
c001ca17:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001ca19:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ca1d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ca20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca24:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001ca28:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001ca2c:	0f af c2             	imul   eax,edx
c001ca2f:	99                   	cdq    
c001ca30:	52                   	push   edx
c001ca31:	50                   	push   eax
c001ca32:	56                   	push   esi
c001ca33:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ca36:	83 c4 20             	add    esp,0x20
c001ca39:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ca41:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001ca45:	0f 86 80 00 00 00    	jbe    c001cacb <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001ca4b:	0f b7 fd             	movzx  edi,bp
c001ca4e:	c1 e7 05             	shl    edi,0x5
c001ca51:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001ca55:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001ca58:	75 6b                	jne    c001cac5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001ca5a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001ca5d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ca61:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001ca64:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ca68:	52                   	push   edx
c001ca69:	31 d2                	xor    edx,edx
c001ca6b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001ca6e:	52                   	push   edx
c001ca6f:	50                   	push   eax
c001ca70:	56                   	push   esi
c001ca71:	e8 d8 69 ff ff       	call   c001344e <File::seek(unsigned long long)>
c001ca76:	83 c4 10             	add    esp,0x10
c001ca79:	85 c0                	test   eax,eax
c001ca7b:	74 17                	je     c001ca94 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001ca7d:	83 ec 0c             	sub    esp,0xc
c001ca80:	68 a6 be 02 c0       	push   0xc002bea6
c001ca85:	e8 4a 63 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001ca8a:	83 c4 10             	add    esp,0x10
c001ca8d:	31 c0                	xor    eax,eax
c001ca8f:	e9 87 00 00 00       	jmp    c001cb1b <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001ca94:	83 ec 0c             	sub    esp,0xc
c001ca97:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001ca9a:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001ca9d:	50                   	push   eax
c001ca9e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001caa2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001caa6:	56                   	push   esi
c001caa7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001caab:	e8 cb fb ff ff       	call   c001c67b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cab0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cab4:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cab8:	83 c4 20             	add    esp,0x20
c001cabb:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cabf:	73 04                	jae    c001cac5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cac1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cac5:	45                   	inc    ebp
c001cac6:	e9 76 ff ff ff       	jmp    c001ca41 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cacb:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cacf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cad3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cad7:	89 91 2e 19 00 00    	mov    DWORD PTR [ecx+0x192e],edx
c001cadd:	83 ec 0c             	sub    esp,0xc
c001cae0:	8b 91 32 19 00 00    	mov    edx,DWORD PTR [ecx+0x1932]
c001cae6:	25 00 f0 ff ff       	and    eax,0xfffff000
c001caeb:	05 00 10 00 00       	add    eax,0x1000
c001caf0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001caf3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001caf7:	e8 54 2d ff ff       	call   c000f850 <free>
c001cafc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001caff:	e8 4c 2d ff ff       	call   c000f850 <free>
c001cb04:	58                   	pop    eax
c001cb05:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cb09:	e8 42 2d ff ff       	call   c000f850 <free>
c001cb0e:	89 34 24             	mov    DWORD PTR [esp],esi
c001cb11:	e8 d8 68 ff ff       	call   c00133ee <File::close()>
c001cb16:	83 c4 10             	add    esp,0x10
c001cb19:	b0 01                	mov    al,0x1
c001cb1b:	83 c4 3c             	add    esp,0x3c
c001cb1e:	5b                   	pop    ebx
c001cb1f:	5e                   	pop    esi
c001cb20:	5f                   	pop    edi
c001cb21:	5d                   	pop    ebp
c001cb22:	c3                   	ret    

c001cb23 <Thr::runtimeReferenceHelper()>:
c001cb23:	83 ec 18             	sub    esp,0x18
c001cb26:	68 ae be 02 c0       	push   0xc002beae
c001cb2b:	e8 a4 62 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001cb30:	fa                   	cli    
c001cb31:	83 c4 10             	add    esp,0x10
c001cb34:	eb fe                	jmp    c001cb34 <Thr::runtimeReferenceHelper()+0x11>

c001cb36 <Thr::getAddressOfKernelSymbol(char const*)>:
c001cb36:	57                   	push   edi
c001cb37:	56                   	push   esi
c001cb38:	53                   	push   ebx
c001cb39:	31 db                	xor    ebx,ebx
c001cb3b:	39 1d c0 17 03 c0    	cmp    DWORD PTR ds:0xc00317c0,ebx
c001cb41:	7e 3c                	jle    c001cb7f <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cb43:	8b 34 9d 40 17 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffce8c0]
c001cb4a:	31 ff                	xor    edi,edi
c001cb4c:	39 3c 9d 40 16 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffce9c0],edi
c001cb53:	7e 27                	jle    c001cb7c <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cb55:	50                   	push   eax
c001cb56:	50                   	push   eax
c001cb57:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cb5b:	8b 06                	mov    eax,DWORD PTR [esi]
c001cb5d:	03 04 9d c0 16 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffce940]
c001cb64:	50                   	push   eax
c001cb65:	e8 56 3d fe ff       	call   c00008c0 <strcmp>
c001cb6a:	83 c4 10             	add    esp,0x10
c001cb6d:	85 c0                	test   eax,eax
c001cb6f:	75 05                	jne    c001cb76 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cb71:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cb74:	eb 0b                	jmp    c001cb81 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cb76:	83 c6 10             	add    esi,0x10
c001cb79:	47                   	inc    edi
c001cb7a:	eb d0                	jmp    c001cb4c <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cb7c:	43                   	inc    ebx
c001cb7d:	eb bc                	jmp    c001cb3b <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cb7f:	31 c0                	xor    eax,eax
c001cb81:	5b                   	pop    ebx
c001cb82:	5e                   	pop    esi
c001cb83:	5f                   	pop    edi
c001cb84:	c3                   	ret    

c001cb85 <Thr::loadKernelSymbolTable(char const*)>:
c001cb85:	55                   	push   ebp
c001cb86:	57                   	push   edi
c001cb87:	56                   	push   esi
c001cb88:	53                   	push   ebx
c001cb89:	83 ec 68             	sub    esp,0x68
c001cb8c:	8b 35 14 18 03 c0    	mov    esi,DWORD PTR ds:0xc0031814
c001cb92:	68 14 01 00 00       	push   0x114
c001cb97:	e8 a4 2c ff ff       	call   c000f840 <malloc>
c001cb9c:	83 c4 0c             	add    esp,0xc
c001cb9f:	89 c3                	mov    ebx,eax
c001cba1:	56                   	push   esi
c001cba2:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cba6:	50                   	push   eax
c001cba7:	e8 80 67 ff ff       	call   c001332c <File::File(char const*, Process*)>
c001cbac:	5e                   	pop    esi
c001cbad:	5f                   	pop    edi
c001cbae:	6a 01                	push   0x1
c001cbb0:	53                   	push   ebx
c001cbb1:	e8 da 67 ff ff       	call   c0013390 <File::open(FileOpenMode)>
c001cbb6:	83 c4 10             	add    esp,0x10
c001cbb9:	85 c0                	test   eax,eax
c001cbbb:	74 0a                	je     c001cbc7 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cbbd:	83 ec 0c             	sub    esp,0xc
c001cbc0:	68 d0 be 02 c0       	push   0xc002bed0
c001cbc5:	eb 34                	jmp    c001cbfb <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cbc7:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cbcf:	83 ec 0c             	sub    esp,0xc
c001cbd2:	6a 34                	push   0x34
c001cbd4:	e8 67 2c ff ff       	call   c000f840 <malloc>
c001cbd9:	59                   	pop    ecx
c001cbda:	89 c7                	mov    edi,eax
c001cbdc:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cbe0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cbe2:	56                   	push   esi
c001cbe3:	57                   	push   edi
c001cbe4:	6a 00                	push   0x0
c001cbe6:	6a 34                	push   0x34
c001cbe8:	53                   	push   ebx
c001cbe9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cbec:	83 c4 20             	add    esp,0x20
c001cbef:	85 c0                	test   eax,eax
c001cbf1:	74 17                	je     c001cc0a <Thr::loadKernelSymbolTable(char const*)+0x85>
c001cbf3:	83 ec 0c             	sub    esp,0xc
c001cbf6:	68 e7 be 02 c0       	push   0xc002bee7
c001cbfb:	e8 af d8 ff ff       	call   c001a4af <Krnl::panic(char const*)>
c001cc00:	83 c4 10             	add    esp,0x10
c001cc03:	31 c0                	xor    eax,eax
c001cc05:	e9 31 02 00 00       	jmp    c001ce3b <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cc0a:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cc10:	75 e1                	jne    c001cbf3 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cc12:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cc15:	85 c0                	test   eax,eax
c001cc17:	74 da                	je     c001cbf3 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cc19:	52                   	push   edx
c001cc1a:	31 d2                	xor    edx,edx
c001cc1c:	52                   	push   edx
c001cc1d:	50                   	push   eax
c001cc1e:	53                   	push   ebx
c001cc1f:	e8 2a 68 ff ff       	call   c001344e <File::seek(unsigned long long)>
c001cc24:	83 c4 10             	add    esp,0x10
c001cc27:	85 c0                	test   eax,eax
c001cc29:	75 c8                	jne    c001cbf3 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cc2b:	83 ec 0c             	sub    esp,0xc
c001cc2e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cc32:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cc36:	31 ed                	xor    ebp,ebp
c001cc38:	0f af c2             	imul   eax,edx
c001cc3b:	50                   	push   eax
c001cc3c:	e8 ff 2b ff ff       	call   c000f840 <malloc>
c001cc41:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cc43:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cc47:	89 34 24             	mov    DWORD PTR [esp],esi
c001cc4a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc4e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cc52:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cc56:	0f af c2             	imul   eax,edx
c001cc59:	99                   	cdq    
c001cc5a:	52                   	push   edx
c001cc5b:	50                   	push   eax
c001cc5c:	53                   	push   ebx
c001cc5d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc60:	83 c4 20             	add    esp,0x20
c001cc63:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cc6b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cc73:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cc7b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cc83:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001cc87:	0f 86 aa 00 00 00    	jbe    c001cd37 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001cc8d:	0f b7 f5             	movzx  esi,bp
c001cc90:	6b f6 28             	imul   esi,esi,0x28
c001cc93:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cc97:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cc9a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cc9e:	50                   	push   eax
c001cc9f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cca3:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001cca7:	8b 16                	mov    edx,DWORD PTR [esi]
c001cca9:	6b c0 28             	imul   eax,eax,0x28
c001ccac:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001ccb0:	89 d0                	mov    eax,edx
c001ccb2:	31 d2                	xor    edx,edx
c001ccb4:	52                   	push   edx
c001ccb5:	50                   	push   eax
c001ccb6:	53                   	push   ebx
c001ccb7:	e8 92 67 ff ff       	call   c001344e <File::seek(unsigned long long)>
c001ccbc:	83 c4 0c             	add    esp,0xc
c001ccbf:	6a 20                	push   0x20
c001ccc1:	6a 00                	push   0x0
c001ccc3:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ccc7:	52                   	push   edx
c001ccc8:	e8 ab 3a fe ff       	call   c0000778 <memset>
c001cccd:	58                   	pop    eax
c001ccce:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ccd0:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001ccd4:	51                   	push   ecx
c001ccd5:	8d 54 24 40          	lea    edx,[esp+0x40]
c001ccd9:	52                   	push   edx
c001ccda:	6a 00                	push   0x0
c001ccdc:	6a 1f                	push   0x1f
c001ccde:	53                   	push   ebx
c001ccdf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cce2:	83 c4 18             	add    esp,0x18
c001cce5:	68 fe be 02 c0       	push   0xc002befe
c001ccea:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ccee:	52                   	push   edx
c001ccef:	e8 cc 3b fe ff       	call   c00008c0 <strcmp>
c001ccf4:	83 c4 10             	add    esp,0x10
c001ccf7:	85 c0                	test   eax,eax
c001ccf9:	75 0f                	jne    c001cd0a <Thr::loadKernelSymbolTable(char const*)+0x185>
c001ccfb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ccfe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cd02:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cd06:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cd0a:	50                   	push   eax
c001cd0b:	50                   	push   eax
c001cd0c:	68 06 bf 02 c0       	push   0xc002bf06
c001cd11:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001cd15:	50                   	push   eax
c001cd16:	e8 a5 3b fe ff       	call   c00008c0 <strcmp>
c001cd1b:	83 c4 10             	add    esp,0x10
c001cd1e:	85 c0                	test   eax,eax
c001cd20:	75 0f                	jne    c001cd31 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001cd22:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cd25:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cd29:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cd2d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cd31:	45                   	inc    ebp
c001cd32:	e9 4c ff ff ff       	jmp    c001cc83 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001cd37:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cd3c:	75 10                	jne    c001cd4e <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001cd3e:	83 ec 0c             	sub    esp,0xc
c001cd41:	68 0e bf 02 c0       	push   0xc002bf0e
c001cd46:	e8 64 d7 ff ff       	call   c001a4af <Krnl::panic(char const*)>
c001cd4b:	83 c4 10             	add    esp,0x10
c001cd4e:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001cd53:	75 10                	jne    c001cd65 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001cd55:	83 ec 0c             	sub    esp,0xc
c001cd58:	68 0e bf 02 c0       	push   0xc002bf0e
c001cd5d:	e8 4d d7 ff ff       	call   c001a4af <Krnl::panic(char const*)>
c001cd62:	83 c4 10             	add    esp,0x10
c001cd65:	31 d2                	xor    edx,edx
c001cd67:	50                   	push   eax
c001cd68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd6c:	52                   	push   edx
c001cd6d:	50                   	push   eax
c001cd6e:	53                   	push   ebx
c001cd6f:	e8 da 66 ff ff       	call   c001344e <File::seek(unsigned long long)>
c001cd74:	5a                   	pop    edx
c001cd75:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cd79:	e8 c2 2a ff ff       	call   c000f840 <malloc>
c001cd7e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cd82:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cd86:	31 c9                	xor    ecx,ecx
c001cd88:	5e                   	pop    esi
c001cd89:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd8b:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cd8f:	55                   	push   ebp
c001cd90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd94:	51                   	push   ecx
c001cd95:	52                   	push   edx
c001cd96:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cd9a:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cd9e:	53                   	push   ebx
c001cd9f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cda2:	83 c4 14             	add    esp,0x14
c001cda5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cda9:	e8 92 2a ff ff       	call   c000f840 <malloc>
c001cdae:	89 c6                	mov    esi,eax
c001cdb0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cdb2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cdb5:	56                   	push   esi
c001cdb6:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cdba:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cdbe:	51                   	push   ecx
c001cdbf:	52                   	push   edx
c001cdc0:	53                   	push   ebx
c001cdc1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cdc4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cdc8:	8b 15 c0 17 03 c0    	mov    edx,DWORD PTR ds:0xc00317c0
c001cdce:	83 c4 1c             	add    esp,0x1c
c001cdd1:	c1 e8 04             	shr    eax,0x4
c001cdd4:	89 04 95 40 16 03 c0 	mov    DWORD PTR [edx*4-0x3ffce9c0],eax
c001cddb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cddf:	31 d2                	xor    edx,edx
c001cde1:	52                   	push   edx
c001cde2:	50                   	push   eax
c001cde3:	53                   	push   ebx
c001cde4:	e8 65 66 ff ff       	call   c001344e <File::seek(unsigned long long)>
c001cde9:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cdeb:	31 d2                	xor    edx,edx
c001cded:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cdf0:	56                   	push   esi
c001cdf1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cdf5:	52                   	push   edx
c001cdf6:	50                   	push   eax
c001cdf7:	53                   	push   ebx
c001cdf8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cdfb:	83 c4 14             	add    esp,0x14
c001cdfe:	53                   	push   ebx
c001cdff:	e8 ea 65 ff ff       	call   c00133ee <File::close()>
c001ce04:	5d                   	pop    ebp
c001ce05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ce09:	e8 42 2a ff ff       	call   c000f850 <free>
c001ce0e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ce11:	e8 3a 2a ff ff       	call   c000f850 <free>
c001ce16:	a1 c0 17 03 c0       	mov    eax,ds:0xc00317c0
c001ce1b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ce1f:	8d 50 01             	lea    edx,[eax+0x1]
c001ce22:	89 0c 85 40 17 03 c0 	mov    DWORD PTR [eax*4-0x3ffce8c0],ecx
c001ce29:	89 34 85 c0 16 03 c0 	mov    DWORD PTR [eax*4-0x3ffce940],esi
c001ce30:	89 15 c0 17 03 c0    	mov    DWORD PTR ds:0xc00317c0,edx
c001ce36:	83 c4 10             	add    esp,0x10
c001ce39:	b0 01                	mov    al,0x1
c001ce3b:	83 c4 5c             	add    esp,0x5c
c001ce3e:	5b                   	pop    ebx
c001ce3f:	5e                   	pop    esi
c001ce40:	5f                   	pop    edi
c001ce41:	5d                   	pop    ebp
c001ce42:	c3                   	ret    

c001ce43 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001ce43:	55                   	push   ebp
c001ce44:	57                   	push   edi
c001ce45:	56                   	push   esi
c001ce46:	53                   	push   ebx
c001ce47:	81 ec 68 03 00 00    	sub    esp,0x368
c001ce4d:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001ce54:	8b 1d 14 18 03 c0    	mov    ebx,DWORD PTR ds:0xc0031814
c001ce5a:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001ce5e:	68 14 01 00 00       	push   0x114
c001ce63:	e8 d8 29 ff ff       	call   c000f840 <malloc>
c001ce68:	83 c4 0c             	add    esp,0xc
c001ce6b:	89 c5                	mov    ebp,eax
c001ce6d:	53                   	push   ebx
c001ce6e:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001ce75:	50                   	push   eax
c001ce76:	e8 b1 64 ff ff       	call   c001332c <File::File(char const*, Process*)>
c001ce7b:	5e                   	pop    esi
c001ce7c:	5f                   	pop    edi
c001ce7d:	6a 01                	push   0x1
c001ce7f:	55                   	push   ebp
c001ce80:	e8 0b 65 ff ff       	call   c0013390 <File::open(FileOpenMode)>
c001ce85:	83 c4 10             	add    esp,0x10
c001ce88:	85 c0                	test   eax,eax
c001ce8a:	0f 85 8d 06 00 00    	jne    c001d51d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001ce90:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001ce98:	83 ec 0c             	sub    esp,0xc
c001ce9b:	6a 34                	push   0x34
c001ce9d:	e8 9e 29 ff ff       	call   c000f840 <malloc>
c001cea2:	5b                   	pop    ebx
c001cea3:	89 c7                	mov    edi,eax
c001cea5:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cea9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ceac:	53                   	push   ebx
c001cead:	57                   	push   edi
c001ceae:	6a 00                	push   0x0
c001ceb0:	6a 34                	push   0x34
c001ceb2:	55                   	push   ebp
c001ceb3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ceb6:	83 c4 20             	add    esp,0x20
c001ceb9:	85 c0                	test   eax,eax
c001cebb:	0f 85 5c 06 00 00    	jne    c001d51d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cec1:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cec7:	0f 85 50 06 00 00    	jne    c001d51d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cecd:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001ced0:	85 c0                	test   eax,eax
c001ced2:	0f 84 45 06 00 00    	je     c001d51d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001ced8:	31 d2                	xor    edx,edx
c001ceda:	51                   	push   ecx
c001cedb:	52                   	push   edx
c001cedc:	50                   	push   eax
c001cedd:	55                   	push   ebp
c001cede:	e8 6b 65 ff ff       	call   c001344e <File::seek(unsigned long long)>
c001cee3:	83 c4 10             	add    esp,0x10
c001cee6:	85 c0                	test   eax,eax
c001cee8:	0f 85 2f 06 00 00    	jne    c001d51d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001ceee:	83 ec 0c             	sub    esp,0xc
c001cef1:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001cef4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cef8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001cefc:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cf00:	0f af c2             	imul   eax,edx
c001cf03:	50                   	push   eax
c001cf04:	e8 37 29 ff ff       	call   c000f840 <malloc>
c001cf09:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cf0c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cf10:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cf13:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cf17:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cf1b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cf1f:	0f af c2             	imul   eax,edx
c001cf22:	99                   	cdq    
c001cf23:	52                   	push   edx
c001cf24:	50                   	push   eax
c001cf25:	55                   	push   ebp
c001cf26:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cf29:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001cf2c:	83 c4 20             	add    esp,0x20
c001cf2f:	85 c0                	test   eax,eax
c001cf31:	0f 84 e6 05 00 00    	je     c001d51d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cf37:	52                   	push   edx
c001cf38:	31 d2                	xor    edx,edx
c001cf3a:	52                   	push   edx
c001cf3b:	50                   	push   eax
c001cf3c:	55                   	push   ebp
c001cf3d:	e8 0c 65 ff ff       	call   c001344e <File::seek(unsigned long long)>
c001cf42:	83 c4 10             	add    esp,0x10
c001cf45:	85 c0                	test   eax,eax
c001cf47:	0f 85 d0 05 00 00    	jne    c001d51d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cf4d:	83 ec 0c             	sub    esp,0xc
c001cf50:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cf54:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cf58:	31 f6                	xor    esi,esi
c001cf5a:	0f af c2             	imul   eax,edx
c001cf5d:	50                   	push   eax
c001cf5e:	e8 dd 28 ff ff       	call   c000f840 <malloc>
c001cf63:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cf66:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cf6a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cf6d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cf71:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cf75:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cf79:	0f af c2             	imul   eax,edx
c001cf7c:	99                   	cdq    
c001cf7d:	52                   	push   edx
c001cf7e:	50                   	push   eax
c001cf7f:	55                   	push   ebp
c001cf80:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cf83:	83 c4 20             	add    esp,0x20
c001cf86:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001cf8a:	0f 86 8a 00 00 00    	jbe    c001d01a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001cf90:	0f b7 de             	movzx  ebx,si
c001cf93:	c1 e3 05             	shl    ebx,0x5
c001cf96:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001cf9a:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001cf9d:	75 75                	jne    c001d014 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001cf9f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001cfa2:	31 d2                	xor    edx,edx
c001cfa4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cfa8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cfab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cfaf:	50                   	push   eax
c001cfb0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001cfb3:	52                   	push   edx
c001cfb4:	50                   	push   eax
c001cfb5:	55                   	push   ebp
c001cfb6:	e8 93 64 ff ff       	call   c001344e <File::seek(unsigned long long)>
c001cfbb:	83 c4 10             	add    esp,0x10
c001cfbe:	85 c0                	test   eax,eax
c001cfc0:	0f 85 57 05 00 00    	jne    c001d51d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cfc6:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001cfcd:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cfd0:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001cfd4:	31 d2                	xor    edx,edx
c001cfd6:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001cfda:	83 ec 0c             	sub    esp,0xc
c001cfdd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cfe1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cfe8:	50                   	push   eax
c001cfe9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cfed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cff1:	52                   	push   edx
c001cff2:	50                   	push   eax
c001cff3:	55                   	push   ebp
c001cff4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cff7:	83 c4 1c             	add    esp,0x1c
c001cffa:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001cffd:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d000:	50                   	push   eax
c001d001:	6a 00                	push   0x0
c001d003:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d007:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d00b:	50                   	push   eax
c001d00c:	e8 67 37 fe ff       	call   c0000778 <memset>
c001d011:	83 c4 10             	add    esp,0x10
c001d014:	46                   	inc    esi
c001d015:	e9 6c ff ff ff       	jmp    c001cf86 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d01a:	53                   	push   ebx
c001d01b:	31 db                	xor    ebx,ebx
c001d01d:	68 00 01 00 00       	push   0x100
c001d022:	6a 00                	push   0x0
c001d024:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d028:	50                   	push   eax
c001d029:	e8 4a 37 fe ff       	call   c0000778 <memset>
c001d02e:	83 c4 0c             	add    esp,0xc
c001d031:	68 00 01 00 00       	push   0x100
c001d036:	6a 00                	push   0x0
c001d038:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d03f:	50                   	push   eax
c001d040:	e8 33 37 fe ff       	call   c0000778 <memset>
c001d045:	83 c4 10             	add    esp,0x10
c001d048:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d050:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d058:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d060:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d068:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d070:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d074:	0f 86 30 01 00 00    	jbe    c001d1aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d07a:	0f b7 f3             	movzx  esi,bx
c001d07d:	6b f6 28             	imul   esi,esi,0x28
c001d080:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d084:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d087:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d08b:	52                   	push   edx
c001d08c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d090:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d094:	8b 06                	mov    eax,DWORD PTR [esi]
c001d096:	6b d2 28             	imul   edx,edx,0x28
c001d099:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d09d:	31 d2                	xor    edx,edx
c001d09f:	52                   	push   edx
c001d0a0:	50                   	push   eax
c001d0a1:	55                   	push   ebp
c001d0a2:	e8 a7 63 ff ff       	call   c001344e <File::seek(unsigned long long)>
c001d0a7:	83 c4 0c             	add    esp,0xc
c001d0aa:	6a 20                	push   0x20
c001d0ac:	6a 00                	push   0x0
c001d0ae:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d0b5:	51                   	push   ecx
c001d0b6:	e8 bd 36 fe ff       	call   c0000778 <memset>
c001d0bb:	59                   	pop    ecx
c001d0bc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d0bf:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d0c3:	52                   	push   edx
c001d0c4:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d0cb:	51                   	push   ecx
c001d0cc:	6a 00                	push   0x0
c001d0ce:	6a 1f                	push   0x1f
c001d0d0:	55                   	push   ebp
c001d0d1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d0d4:	83 c4 1c             	add    esp,0x1c
c001d0d7:	6a 09                	push   0x9
c001d0d9:	68 28 bf 02 c0       	push   0xc002bf28
c001d0de:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d0e5:	51                   	push   ecx
c001d0e6:	e8 55 35 fe ff       	call   c0000640 <memcmp>
c001d0eb:	83 c4 10             	add    esp,0x10
c001d0ee:	85 c0                	test   eax,eax
c001d0f0:	75 21                	jne    c001d113 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d0f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d0f6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d0fa:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d0fe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d102:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d105:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d10c:	89 d0                	mov    eax,edx
c001d10e:	40                   	inc    eax
c001d10f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d113:	50                   	push   eax
c001d114:	6a 09                	push   0x9
c001d116:	68 32 bf 02 c0       	push   0xc002bf32
c001d11b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d122:	50                   	push   eax
c001d123:	e8 18 35 fe ff       	call   c0000640 <memcmp>
c001d128:	83 c4 10             	add    esp,0x10
c001d12b:	85 c0                	test   eax,eax
c001d12d:	75 21                	jne    c001d150 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d12f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d133:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d137:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d13b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d13f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d142:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d149:	89 d0                	mov    eax,edx
c001d14b:	40                   	inc    eax
c001d14c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d150:	50                   	push   eax
c001d151:	50                   	push   eax
c001d152:	68 fe be 02 c0       	push   0xc002befe
c001d157:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d15e:	50                   	push   eax
c001d15f:	e8 5c 37 fe ff       	call   c00008c0 <strcmp>
c001d164:	83 c4 10             	add    esp,0x10
c001d167:	85 c0                	test   eax,eax
c001d169:	75 0f                	jne    c001d17a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d16b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d16e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d172:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d176:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d17a:	50                   	push   eax
c001d17b:	50                   	push   eax
c001d17c:	68 06 bf 02 c0       	push   0xc002bf06
c001d181:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d188:	50                   	push   eax
c001d189:	e8 32 37 fe ff       	call   c00008c0 <strcmp>
c001d18e:	83 c4 10             	add    esp,0x10
c001d191:	85 c0                	test   eax,eax
c001d193:	75 0f                	jne    c001d1a4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d195:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d198:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d19c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d1a0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d1a4:	43                   	inc    ebx
c001d1a5:	e9 c6 fe ff ff       	jmp    c001d070 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d1aa:	31 d2                	xor    edx,edx
c001d1ac:	50                   	push   eax
c001d1ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d1b1:	52                   	push   edx
c001d1b2:	50                   	push   eax
c001d1b3:	55                   	push   ebp
c001d1b4:	e8 95 62 ff ff       	call   c001344e <File::seek(unsigned long long)>
c001d1b9:	58                   	pop    eax
c001d1ba:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d1be:	e8 7d 26 ff ff       	call   c000f840 <malloc>
c001d1c3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d1c6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d1ca:	31 d2                	xor    edx,edx
c001d1cc:	58                   	pop    eax
c001d1cd:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d1d1:	53                   	push   ebx
c001d1d2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d1d6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d1da:	52                   	push   edx
c001d1db:	50                   	push   eax
c001d1dc:	55                   	push   ebp
c001d1dd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d1e0:	83 c4 14             	add    esp,0x14
c001d1e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d1e7:	e8 54 26 ff ff       	call   c000f840 <malloc>
c001d1ec:	31 d2                	xor    edx,edx
c001d1ee:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d1f2:	83 c4 0c             	add    esp,0xc
c001d1f5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d1f9:	52                   	push   edx
c001d1fa:	50                   	push   eax
c001d1fb:	55                   	push   ebp
c001d1fc:	e8 4d 62 ff ff       	call   c001344e <File::seek(unsigned long long)>
c001d201:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d204:	31 d2                	xor    edx,edx
c001d206:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d209:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d20d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d211:	52                   	push   edx
c001d212:	50                   	push   eax
c001d213:	55                   	push   ebp
c001d214:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d217:	83 c4 20             	add    esp,0x20
c001d21a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d222:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d226:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d22a:	0f 84 f1 02 00 00    	je     c001d521 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001d230:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d237:	31 d2                	xor    edx,edx
c001d239:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d23d:	c1 e8 03             	shr    eax,0x3
c001d240:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d244:	51                   	push   ecx
c001d245:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d249:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d24d:	52                   	push   edx
c001d24e:	50                   	push   eax
c001d24f:	55                   	push   ebp
c001d250:	e8 f9 61 ff ff       	call   c001344e <File::seek(unsigned long long)>
c001d255:	5b                   	pop    ebx
c001d256:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d25a:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d261:	e8 da 25 ff ff       	call   c000f840 <malloc>
c001d266:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d269:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d26d:	31 d2                	xor    edx,edx
c001d26f:	5e                   	pop    esi
c001d270:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d274:	50                   	push   eax
c001d275:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d279:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d27d:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d284:	52                   	push   edx
c001d285:	50                   	push   eax
c001d286:	55                   	push   ebp
c001d287:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d28a:	83 c4 20             	add    esp,0x20
c001d28d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d295:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d299:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d29d:	0f 8d 62 02 00 00    	jge    c001d505 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d2a3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d2a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d2ab:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d2b0:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d2b3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d2b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d2bb:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d2bf:	89 d8                	mov    eax,ebx
c001d2c1:	c1 e8 08             	shr    eax,0x8
c001d2c4:	89 c6                	mov    esi,eax
c001d2c6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d2ca:	c1 e6 04             	shl    esi,0x4
c001d2cd:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d2d1:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d2d4:	85 d2                	test   edx,edx
c001d2d6:	0f 85 bf 00 00 00    	jne    c001d39b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d2dc:	83 ec 0c             	sub    esp,0xc
c001d2df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d2e3:	03 06                	add    eax,DWORD PTR [esi]
c001d2e5:	50                   	push   eax
c001d2e6:	e8 4b f8 ff ff       	call   c001cb36 <Thr::getAddressOfKernelSymbol(char const*)>
c001d2eb:	83 c4 10             	add    esp,0x10
c001d2ee:	89 c2                	mov    edx,eax
c001d2f0:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d2f5:	85 c0                	test   eax,eax
c001d2f7:	0f 85 9e 00 00 00    	jne    c001d39b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d2fd:	83 ec 0c             	sub    esp,0xc
c001d300:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d304:	03 06                	add    eax,DWORD PTR [esi]
c001d306:	50                   	push   eax
c001d307:	e8 e9 11 ff ff       	call   c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>
c001d30c:	83 c4 10             	add    esp,0x10
c001d30f:	89 c2                	mov    edx,eax
c001d311:	85 c0                	test   eax,eax
c001d313:	0f 85 82 00 00 00    	jne    c001d39b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d319:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d31d:	50                   	push   eax
c001d31e:	50                   	push   eax
c001d31f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d323:	03 06                	add    eax,DWORD PTR [esi]
c001d325:	50                   	push   eax
c001d326:	68 3c bf 02 c0       	push   0xc002bf3c
c001d32b:	e8 a4 5a ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001d330:	58                   	pop    eax
c001d331:	5a                   	pop    edx
c001d332:	68 56 bf 02 c0       	push   0xc002bf56
c001d337:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d33e:	50                   	push   eax
c001d33f:	e8 f0 34 fe ff       	call   c0000834 <strcpy>
c001d344:	59                   	pop    ecx
c001d345:	58                   	pop    eax
c001d346:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d34a:	03 06                	add    eax,DWORD PTR [esi]
c001d34c:	50                   	push   eax
c001d34d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d354:	50                   	push   eax
c001d355:	e8 1a 36 fe ff       	call   c0000974 <strcat>
c001d35a:	58                   	pop    eax
c001d35b:	5a                   	pop    edx
c001d35c:	68 ec bf 02 c0       	push   0xc002bfec
c001d361:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d368:	50                   	push   eax
c001d369:	e8 06 36 fe ff       	call   c0000974 <strcat>
c001d36e:	83 c4 10             	add    esp,0x10
c001d371:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d376:	0f 84 43 01 00 00    	je     c001d4bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d37c:	83 ec 0c             	sub    esp,0xc
c001d37f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d386:	50                   	push   eax
c001d387:	e8 23 d1 ff ff       	call   c001a4af <Krnl::panic(char const*)>
c001d38c:	83 c4 10             	add    esp,0x10
c001d38f:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d393:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d397:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d39b:	80 fb 01             	cmp    bl,0x1
c001d39e:	75 7d                	jne    c001d41d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d3a0:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d3a7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d3ab:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d3af:	01 ce                	add    esi,ecx
c001d3b1:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d3b7:	0f 94 c0             	sete   al
c001d3ba:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d3c0:	0f 94 c3             	sete   bl
c001d3c3:	09 c3                	or     ebx,eax
c001d3c5:	8b 06                	mov    eax,DWORD PTR [esi]
c001d3c7:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d3cc:	74 36                	je     c001d404 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d3ce:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d3d1:	84 db                	test   bl,bl
c001d3d3:	75 0a                	jne    c001d3df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d3d5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d3d9:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d3dd:	76 37                	jbe    c001d416 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d3df:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d3e3:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d3e8:	0f 84 d1 00 00 00    	je     c001d4bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d3ee:	83 ec 0c             	sub    esp,0xc
c001d3f1:	68 6d bf 02 c0       	push   0xc002bf6d
c001d3f6:	e8 b4 d0 ff ff       	call   c001a4af <Krnl::panic(char const*)>
c001d3fb:	83 c4 10             	add    esp,0x10
c001d3fe:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d402:	eb 12                	jmp    c001d416 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d404:	01 c1                	add    ecx,eax
c001d406:	84 db                	test   bl,bl
c001d408:	75 0c                	jne    c001d416 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d40a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d40e:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d412:	77 02                	ja     c001d416 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d414:	01 d1                	add    ecx,edx
c001d416:	89 0e                	mov    DWORD PTR [esi],ecx
c001d418:	e9 df 00 00 00       	jmp    c001d4fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d41d:	80 fb 02             	cmp    bl,0x2
c001d420:	75 71                	jne    c001d493 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d422:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d429:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d42d:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d431:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d437:	74 15                	je     c001d44e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d439:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d43f:	74 0d                	je     c001d44e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d441:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d445:	83 e8 04             	sub    eax,0x4
c001d448:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d44c:	76 1f                	jbe    c001d46d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d44e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d452:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d457:	74 66                	je     c001d4bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d459:	83 ec 0c             	sub    esp,0xc
c001d45c:	68 89 bf 02 c0       	push   0xc002bf89
c001d461:	e8 49 d0 ff ff       	call   c001a4af <Krnl::panic(char const*)>
c001d466:	83 c4 10             	add    esp,0x10
c001d469:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d46d:	8b 06                	mov    eax,DWORD PTR [esi]
c001d46f:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d474:	74 13                	je     c001d489 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d476:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d47a:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d481:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d485:	01 c8                	add    eax,ecx
c001d487:	eb 04                	jmp    c001d48d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d489:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d48d:	01 c2                	add    edx,eax
c001d48f:	89 16                	mov    DWORD PTR [esi],edx
c001d491:	eb 69                	jmp    c001d4fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d493:	0f b6 db             	movzx  ebx,bl
c001d496:	50                   	push   eax
c001d497:	50                   	push   eax
c001d498:	53                   	push   ebx
c001d499:	68 a5 bf 02 c0       	push   0xc002bfa5
c001d49e:	e8 31 59 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001d4a3:	83 c4 10             	add    esp,0x10
c001d4a6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d4ab:	74 12                	je     c001d4bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d4ad:	83 ec 0c             	sub    esp,0xc
c001d4b0:	68 b0 bf 02 c0       	push   0xc002bfb0
c001d4b5:	e8 f5 cf ff ff       	call   c001a4af <Krnl::panic(char const*)>
c001d4ba:	83 c4 10             	add    esp,0x10
c001d4bd:	eb 3d                	jmp    c001d4fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d4bf:	83 ec 0c             	sub    esp,0xc
c001d4c2:	55                   	push   ebp
c001d4c3:	e8 26 5f ff ff       	call   c00133ee <File::close()>
c001d4c8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d4cb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d4ce:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d4d1:	59                   	pop    ecx
c001d4d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d4d6:	e8 75 23 ff ff       	call   c000f850 <free>
c001d4db:	5b                   	pop    ebx
c001d4dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d4e0:	e8 6b 23 ff ff       	call   c000f850 <free>
c001d4e5:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d4e8:	e8 63 23 ff ff       	call   c000f850 <free>
c001d4ed:	5e                   	pop    esi
c001d4ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d4f2:	e8 59 23 ff ff       	call   c000f850 <free>
c001d4f7:	83 c4 10             	add    esp,0x10
c001d4fa:	eb 21                	jmp    c001d51d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d4fc:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d500:	e9 90 fd ff ff       	jmp    c001d295 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d505:	83 ec 0c             	sub    esp,0xc
c001d508:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d50c:	e8 3f 23 ff ff       	call   c000f850 <free>
c001d511:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d515:	83 c4 10             	add    esp,0x10
c001d518:	e9 05 fd ff ff       	jmp    c001d222 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d51d:	31 c0                	xor    eax,eax
c001d51f:	eb 33                	jmp    c001d554 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d521:	83 ec 0c             	sub    esp,0xc
c001d524:	55                   	push   ebp
c001d525:	e8 c4 5e ff ff       	call   c00133ee <File::close()>
c001d52a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d52d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d530:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d533:	58                   	pop    eax
c001d534:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d538:	e8 13 23 ff ff       	call   c000f850 <free>
c001d53d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d540:	e8 0b 23 ff ff       	call   c000f850 <free>
c001d545:	5a                   	pop    edx
c001d546:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d54a:	e8 01 23 ff ff       	call   c000f850 <free>
c001d54f:	83 c4 10             	add    esp,0x10
c001d552:	b0 01                	mov    al,0x1
c001d554:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d55a:	5b                   	pop    ebx
c001d55b:	5e                   	pop    esi
c001d55c:	5f                   	pop    edi
c001d55d:	5d                   	pop    ebp
c001d55e:	c3                   	ret    

c001d55f <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d55f:	56                   	push   esi
c001d560:	31 d2                	xor    edx,edx
c001d562:	53                   	push   ebx
c001d563:	8b 1d 20 10 03 c0    	mov    ebx,DWORD PTR ds:0xc0031020
c001d569:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d56d:	39 d3                	cmp    ebx,edx
c001d56f:	7e 1b                	jle    c001d58c <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d571:	8b 04 95 40 12 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcedc0]
c001d578:	39 c8                	cmp    eax,ecx
c001d57a:	77 0d                	ja     c001d589 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d57c:	8b 34 95 40 10 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcefc0]
c001d583:	01 c6                	add    esi,eax
c001d585:	39 ce                	cmp    esi,ecx
c001d587:	77 05                	ja     c001d58e <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d589:	42                   	inc    edx
c001d58a:	eb e1                	jmp    c001d56d <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d58c:	31 c0                	xor    eax,eax
c001d58e:	5b                   	pop    ebx
c001d58f:	5e                   	pop    esi
c001d590:	c3                   	ret    

c001d591 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d591:	53                   	push   ebx
c001d592:	31 c0                	xor    eax,eax
c001d594:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d598:	8b 1d 20 10 03 c0    	mov    ebx,DWORD PTR ds:0xc0031020
c001d59e:	39 c3                	cmp    ebx,eax
c001d5a0:	7e 22                	jle    c001d5c4 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d5a2:	8b 14 85 40 12 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcedc0]
c001d5a9:	39 ca                	cmp    edx,ecx
c001d5ab:	77 14                	ja     c001d5c1 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d5ad:	03 14 85 40 10 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcefc0]
c001d5b4:	39 ca                	cmp    edx,ecx
c001d5b6:	76 09                	jbe    c001d5c1 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d5b8:	8b 04 85 40 14 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcebc0]
c001d5bf:	eb 05                	jmp    c001d5c6 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d5c1:	40                   	inc    eax
c001d5c2:	eb da                	jmp    c001d59e <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d5c4:	31 c0                	xor    eax,eax
c001d5c6:	5b                   	pop    ebx
c001d5c7:	c3                   	ret    

c001d5c8 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d5c8:	53                   	push   ebx
c001d5c9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d5cd:	53                   	push   ebx
c001d5ce:	e8 8c ff ff ff       	call   c001d55f <Thr::getDriverBaseFromAddress(unsigned long)>
c001d5d3:	5a                   	pop    edx
c001d5d4:	31 d2                	xor    edx,edx
c001d5d6:	85 c0                	test   eax,eax
c001d5d8:	74 04                	je     c001d5de <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d5da:	89 da                	mov    edx,ebx
c001d5dc:	29 c2                	sub    edx,eax
c001d5de:	89 d0                	mov    eax,edx
c001d5e0:	5b                   	pop    ebx
c001d5e1:	c3                   	ret    

c001d5e2 <Thr::loadDLL(char const*, bool)>:
c001d5e2:	55                   	push   ebp
c001d5e3:	57                   	push   edi
c001d5e4:	56                   	push   esi
c001d5e5:	53                   	push   ebx
c001d5e6:	81 ec 34 01 00 00    	sub    esp,0x134
c001d5ec:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d5f3:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d5fa:	56                   	push   esi
c001d5fb:	68 c8 bf 02 c0       	push   0xc002bfc8
c001d600:	e8 cf 57 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001d605:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d60c:	e8 2f 22 ff ff       	call   c000f840 <malloc>
c001d611:	83 c4 0c             	add    esp,0xc
c001d614:	89 c3                	mov    ebx,eax
c001d616:	ff 35 14 18 03 c0    	push   DWORD PTR ds:0xc0031814
c001d61c:	56                   	push   esi
c001d61d:	50                   	push   eax
c001d61e:	e8 09 5d ff ff       	call   c001332c <File::File(char const*, Process*)>
c001d623:	83 c4 10             	add    esp,0x10
c001d626:	85 db                	test   ebx,ebx
c001d628:	75 3c                	jne    c001d666 <Thr::loadDLL(char const*, bool)+0x84>
c001d62a:	89 e8                	mov    eax,ebp
c001d62c:	84 c0                	test   al,al
c001d62e:	0f 84 f0 01 00 00    	je     c001d824 <Thr::loadDLL(char const*, bool)+0x242>
c001d634:	50                   	push   eax
c001d635:	50                   	push   eax
c001d636:	68 d9 bf 02 c0       	push   0xc002bfd9
c001d63b:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d63f:	57                   	push   edi
c001d640:	e8 ef 31 fe ff       	call   c0000834 <strcpy>
c001d645:	58                   	pop    eax
c001d646:	5a                   	pop    edx
c001d647:	56                   	push   esi
c001d648:	57                   	push   edi
c001d649:	e8 26 33 fe ff       	call   c0000974 <strcat>
c001d64e:	59                   	pop    ecx
c001d64f:	58                   	pop    eax
c001d650:	68 ec bf 02 c0       	push   0xc002bfec
c001d655:	57                   	push   edi
c001d656:	e8 19 33 fe ff       	call   c0000974 <strcat>
c001d65b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d65e:	e8 4c ce ff ff       	call   c001a4af <Krnl::panic(char const*)>
c001d663:	83 c4 10             	add    esp,0x10
c001d666:	50                   	push   eax
c001d667:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d66b:	50                   	push   eax
c001d66c:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d670:	50                   	push   eax
c001d671:	53                   	push   ebx
c001d672:	e8 c5 5f ff ff       	call   c001363c <File::stat(unsigned long long*, bool*)>
c001d677:	83 c4 10             	add    esp,0x10
c001d67a:	85 db                	test   ebx,ebx
c001d67c:	74 0c                	je     c001d68a <Thr::loadDLL(char const*, bool)+0xa8>
c001d67e:	83 ec 0c             	sub    esp,0xc
c001d681:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d683:	53                   	push   ebx
c001d684:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d687:	83 c4 10             	add    esp,0x10
c001d68a:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d68f:	75 0a                	jne    c001d69b <Thr::loadDLL(char const*, bool)+0xb9>
c001d691:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d695:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d699:	75 3c                	jne    c001d6d7 <Thr::loadDLL(char const*, bool)+0xf5>
c001d69b:	89 e8                	mov    eax,ebp
c001d69d:	84 c0                	test   al,al
c001d69f:	0f 84 67 01 00 00    	je     c001d80c <Thr::loadDLL(char const*, bool)+0x22a>
c001d6a5:	50                   	push   eax
c001d6a6:	50                   	push   eax
c001d6a7:	68 d9 bf 02 c0       	push   0xc002bfd9
c001d6ac:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d6b0:	53                   	push   ebx
c001d6b1:	e8 7e 31 fe ff       	call   c0000834 <strcpy>
c001d6b6:	58                   	pop    eax
c001d6b7:	5a                   	pop    edx
c001d6b8:	56                   	push   esi
c001d6b9:	53                   	push   ebx
c001d6ba:	e8 b5 32 fe ff       	call   c0000974 <strcat>
c001d6bf:	59                   	pop    ecx
c001d6c0:	5f                   	pop    edi
c001d6c1:	68 ec bf 02 c0       	push   0xc002bfec
c001d6c6:	53                   	push   ebx
c001d6c7:	e8 a8 32 fe ff       	call   c0000974 <strcat>
c001d6cc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d6cf:	e8 db cd ff ff       	call   c001a4af <Krnl::panic(char const*)>
c001d6d4:	83 c4 10             	add    esp,0x10
c001d6d7:	e8 42 47 ff ff       	call   c0011e1e <Virt::getAKernelVAS()>
c001d6dc:	51                   	push   ecx
c001d6dd:	68 03 08 00 00       	push   0x803
c001d6e2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d6e6:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d6ea:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d6f0:	83 d3 00             	adc    ebx,0x0
c001d6f3:	89 ca                	mov    edx,ecx
c001d6f5:	89 d1                	mov    ecx,edx
c001d6f7:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d6fb:	51                   	push   ecx
c001d6fc:	50                   	push   eax
c001d6fd:	e8 3e 4c ff ff       	call   c0012340 <VAS::allocatePages(int, int)>
c001d702:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d706:	89 c3                	mov    ebx,eax
c001d708:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d70c:	05 ff 0f 00 00       	add    eax,0xfff
c001d711:	83 d2 00             	adc    edx,0x0
c001d714:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d718:	c1 ea 0c             	shr    edx,0xc
c001d71b:	52                   	push   edx
c001d71c:	50                   	push   eax
c001d71d:	53                   	push   ebx
c001d71e:	68 ee bf 02 c0       	push   0xc002bfee
c001d723:	e8 ac 56 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001d728:	83 c4 14             	add    esp,0x14
c001d72b:	56                   	push   esi
c001d72c:	e8 63 30 fe ff       	call   c0000794 <strlen>
c001d731:	8b 3d 20 10 03 c0    	mov    edi,DWORD PTR ds:0xc0031020
c001d737:	40                   	inc    eax
c001d738:	89 04 24             	mov    DWORD PTR [esp],eax
c001d73b:	e8 00 21 ff ff       	call   c000f840 <malloc>
c001d740:	89 04 bd 40 14 03 c0 	mov    DWORD PTR [edi*4-0x3ffcebc0],eax
c001d747:	5f                   	pop    edi
c001d748:	58                   	pop    eax
c001d749:	a1 20 10 03 c0       	mov    eax,ds:0xc0031020
c001d74e:	56                   	push   esi
c001d74f:	ff 34 85 40 14 03 c0 	push   DWORD PTR [eax*4-0x3ffcebc0]
c001d756:	e8 d9 30 fe ff       	call   c0000834 <strcpy>
c001d75b:	a1 20 10 03 c0       	mov    eax,ds:0xc0031020
c001d760:	8d 50 01             	lea    edx,[eax+0x1]
c001d763:	89 1c 85 40 12 03 c0 	mov    DWORD PTR [eax*4-0x3ffcedc0],ebx
c001d76a:	89 15 20 10 03 c0    	mov    DWORD PTR ds:0xc0031020,edx
c001d770:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d774:	83 c4 0c             	add    esp,0xc
c001d777:	89 14 85 40 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcefc0],edx
c001d77e:	6a 01                	push   0x1
c001d780:	53                   	push   ebx
c001d781:	56                   	push   esi
c001d782:	e8 bc f6 ff ff       	call   c001ce43 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d787:	83 c4 10             	add    esp,0x10
c001d78a:	89 c7                	mov    edi,eax
c001d78c:	84 c0                	test   al,al
c001d78e:	0f 85 8c 00 00 00    	jne    c001d820 <Thr::loadDLL(char const*, bool)+0x23e>
c001d794:	89 e8                	mov    eax,ebp
c001d796:	84 c0                	test   al,al
c001d798:	74 76                	je     c001d810 <Thr::loadDLL(char const*, bool)+0x22e>
c001d79a:	83 ec 0c             	sub    esp,0xc
c001d79d:	68 12 c0 02 c0       	push   0xc002c012
c001d7a2:	e8 08 cd ff ff       	call   c001a4af <Krnl::panic(char const*)>
c001d7a7:	83 c4 10             	add    esp,0x10
c001d7aa:	eb 64                	jmp    c001d810 <Thr::loadDLL(char const*, bool)+0x22e>
c001d7ac:	e8 6d 46 ff ff       	call   c0011e1e <Virt::getAKernelVAS()>
c001d7b1:	89 f5                	mov    ebp,esi
c001d7b3:	c1 e5 0c             	shl    ebp,0xc
c001d7b6:	52                   	push   edx
c001d7b7:	01 dd                	add    ebp,ebx
c001d7b9:	52                   	push   edx
c001d7ba:	55                   	push   ebp
c001d7bb:	50                   	push   eax
c001d7bc:	e8 f9 46 ff ff       	call   c0011eba <VAS::getPageTableEntry(unsigned long)>
c001d7c1:	83 c4 10             	add    esp,0x10
c001d7c4:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d7c7:	75 0c                	jne    c001d7d5 <Thr::loadDLL(char const*, bool)+0x1f3>
c001d7c9:	83 ec 0c             	sub    esp,0xc
c001d7cc:	55                   	push   ebp
c001d7cd:	e8 81 26 ff ff       	call   c000fe53 <Phys::freePage(unsigned long)>
c001d7d2:	83 c4 10             	add    esp,0x10
c001d7d5:	46                   	inc    esi
c001d7d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d7da:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d7de:	05 ff 0f 00 00       	add    eax,0xfff
c001d7e3:	83 d2 00             	adc    edx,0x0
c001d7e6:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d7ea:	c1 ea 0c             	shr    edx,0xc
c001d7ed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d7f1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d7f5:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d7f9:	ba 00 00 00 00       	mov    edx,0x0
c001d7fe:	89 d0                	mov    eax,edx
c001d800:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d804:	72 a6                	jb     c001d7ac <Thr::loadDLL(char const*, bool)+0x1ca>
c001d806:	89 f8                	mov    eax,edi
c001d808:	84 c0                	test   al,al
c001d80a:	75 18                	jne    c001d824 <Thr::loadDLL(char const*, bool)+0x242>
c001d80c:	31 db                	xor    ebx,ebx
c001d80e:	eb 14                	jmp    c001d824 <Thr::loadDLL(char const*, bool)+0x242>
c001d810:	83 ec 0c             	sub    esp,0xc
c001d813:	68 31 c0 02 c0       	push   0xc002c031
c001d818:	e8 92 cc ff ff       	call   c001a4af <Krnl::panic(char const*)>
c001d81d:	83 c4 10             	add    esp,0x10
c001d820:	31 f6                	xor    esi,esi
c001d822:	eb b2                	jmp    c001d7d6 <Thr::loadDLL(char const*, bool)+0x1f4>
c001d824:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d82a:	89 d8                	mov    eax,ebx
c001d82c:	5b                   	pop    ebx
c001d82d:	5e                   	pop    esi
c001d82e:	5f                   	pop    edi
c001d82f:	5d                   	pop    ebp
c001d830:	c3                   	ret    

c001d831 <Thr::executeDLL(unsigned long, void*)>:
c001d831:	56                   	push   esi
c001d832:	53                   	push   ebx
c001d833:	52                   	push   edx
c001d834:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d838:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d83c:	85 db                	test   ebx,ebx
c001d83e:	75 10                	jne    c001d850 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d840:	83 ec 0c             	sub    esp,0xc
c001d843:	68 4d c0 02 c0       	push   0xc002c04d
c001d848:	e8 62 cc ff ff       	call   c001a4af <Krnl::panic(char const*)>
c001d84d:	83 c4 10             	add    esp,0x10
c001d850:	50                   	push   eax
c001d851:	50                   	push   eax
c001d852:	53                   	push   ebx
c001d853:	68 77 c0 02 c0       	push   0xc002c077
c001d858:	e8 77 55 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001d85d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d861:	89 d8                	mov    eax,ebx
c001d863:	83 c4 14             	add    esp,0x14
c001d866:	5b                   	pop    ebx
c001d867:	5e                   	pop    esi
c001d868:	ff e0                	jmp    eax

c001d86a <changeTSS>:
c001d86a:	83 ec 14             	sub    esp,0x14
c001d86d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d872:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d875:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d87a:	c1 e2 15             	shl    edx,0x15
c001d87d:	29 d0                	sub    eax,edx
c001d87f:	50                   	push   eax
c001d880:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c001d885:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d88b:	05 7c 11 00 00       	add    eax,0x117c
c001d890:	50                   	push   eax
c001d891:	e8 20 3c ff ff       	call   c00114b6 <TSS::setESP(unsigned long)>
c001d896:	83 c4 1c             	add    esp,0x1c
c001d899:	c3                   	ret    

c001d89a <Process::addArgs(char**)>:
c001d89a:	57                   	push   edi
c001d89b:	56                   	push   esi
c001d89c:	53                   	push   ebx
c001d89d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d8a1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d8a5:	c7 86 36 19 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1936],0x0
c001d8af:	85 ff                	test   edi,edi
c001d8b1:	74 3d                	je     c001d8f0 <Process::addArgs(char**)+0x56>
c001d8b3:	8b 07                	mov    eax,DWORD PTR [edi]
c001d8b5:	85 c0                	test   eax,eax
c001d8b7:	74 37                	je     c001d8f0 <Process::addArgs(char**)+0x56>
c001d8b9:	31 db                	xor    ebx,ebx
c001d8bb:	83 ec 0c             	sub    esp,0xc
c001d8be:	50                   	push   eax
c001d8bf:	e8 d0 2e fe ff       	call   c0000794 <strlen>
c001d8c4:	40                   	inc    eax
c001d8c5:	89 04 24             	mov    DWORD PTR [esp],eax
c001d8c8:	e8 73 1f ff ff       	call   c000f840 <malloc>
c001d8cd:	89 84 9e 3a 19 00 00 	mov    DWORD PTR [esi+ebx*4+0x193a],eax
c001d8d4:	5a                   	pop    edx
c001d8d5:	59                   	pop    ecx
c001d8d6:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d8d9:	43                   	inc    ebx
c001d8da:	50                   	push   eax
c001d8db:	e8 54 2f fe ff       	call   c0000834 <strcpy>
c001d8e0:	ff 86 36 19 00 00    	inc    DWORD PTR [esi+0x1936]
c001d8e6:	83 c4 10             	add    esp,0x10
c001d8e9:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d8ec:	85 c0                	test   eax,eax
c001d8ee:	75 cb                	jne    c001d8bb <Process::addArgs(char**)+0x21>
c001d8f0:	5b                   	pop    ebx
c001d8f1:	5e                   	pop    esi
c001d8f2:	5f                   	pop    edi
c001d8f3:	c3                   	ret    

c001d8f4 <Process::Process(char const*, Process*, char**)>:
c001d8f4:	56                   	push   esi
c001d8f5:	53                   	push   ebx
c001d8f6:	83 ec 14             	sub    esp,0x14
c001d8f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8fd:	05 0c 02 00 00       	add    eax,0x20c
c001d902:	bb 07 00 00 00       	mov    ebx,0x7
c001d907:	89 c6                	mov    esi,eax
c001d909:	85 db                	test   ebx,ebx
c001d90b:	78 15                	js     c001d922 <Process::Process(char const*, Process*, char**)+0x2e>
c001d90d:	83 ec 0c             	sub    esp,0xc
c001d910:	56                   	push   esi
c001d911:	e8 4c b2 00 00       	call   c0028b62 <ThreadControlBlock::ThreadControlBlock()>
c001d916:	83 c4 10             	add    esp,0x10
c001d919:	81 c6 e3 02 00 00    	add    esi,0x2e3
c001d91f:	4b                   	dec    ebx
c001d920:	eb e7                	jmp    c001d909 <Process::Process(char const*, Process*, char**)+0x15>
c001d922:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d926:	c6 80 3e 1b 00 00 00 	mov    BYTE PTR [eax+0x1b3e],0x0
c001d92d:	83 ec 0c             	sub    esp,0xc
c001d930:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d934:	e8 c7 c9 ff ff       	call   c001a300 <Krnl::newProcessEnv(Process*)>
c001d939:	83 c4 10             	add    esp,0x10
c001d93c:	89 c2                	mov    edx,eax
c001d93e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d942:	89 90 3a 1b 00 00    	mov    DWORD PTR [eax+0x1b3a],edx
c001d948:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d94c:	66 c7 80 24 19 00 00 00 00 	mov    WORD PTR [eax+0x1924],0x0
c001d955:	a1 30 d8 02 c0       	mov    eax,ds:0xc002d830
c001d95a:	8d 50 01             	lea    edx,[eax+0x1]
c001d95d:	89 15 30 d8 02 c0    	mov    DWORD PTR ds:0xc002d830,edx
c001d963:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d967:	89 02                	mov    DWORD PTR [edx],eax
c001d969:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001d971:	83 ec 0c             	sub    esp,0xc
c001d974:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d978:	e8 c3 1e ff ff       	call   c000f840 <malloc>
c001d97d:	83 c4 10             	add    esp,0x10
c001d980:	89 c3                	mov    ebx,eax
c001d982:	83 ec 08             	sub    esp,0x8
c001d985:	6a 00                	push   0x0
c001d987:	53                   	push   ebx
c001d988:	e8 5b 4d ff ff       	call   c00126e8 <VAS::VAS(bool)>
c001d98d:	83 c4 10             	add    esp,0x10
c001d990:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d994:	89 98 32 19 00 00    	mov    DWORD PTR [eax+0x1932],ebx
c001d99a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d99e:	c7 80 36 19 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1936],0x0
c001d9a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9ac:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d9b0:	89 90 2a 19 00 00    	mov    DWORD PTR [eax+0x192a],edx
c001d9b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9ba:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001d9c0:	85 c0                	test   eax,eax
c001d9c2:	74 42                	je     c001da06 <Process::Process(char const*, Process*, char**)+0x112>
c001d9c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9c8:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001d9ce:	8b 90 26 19 00 00    	mov    edx,DWORD PTR [eax+0x1926]
c001d9d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9d8:	89 90 26 19 00 00    	mov    DWORD PTR [eax+0x1926],edx
c001d9de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9e2:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001d9e8:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d9ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9f2:	05 0c 01 00 00       	add    eax,0x10c
c001d9f7:	83 ec 08             	sub    esp,0x8
c001d9fa:	52                   	push   edx
c001d9fb:	50                   	push   eax
c001d9fc:	e8 33 2e fe ff       	call   c0000834 <strcpy>
c001da01:	83 c4 10             	add    esp,0x10
c001da04:	eb 63                	jmp    c001da69 <Process::Process(char const*, Process*, char**)+0x175>
c001da06:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001da0e:	83 ec 0c             	sub    esp,0xc
c001da11:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001da15:	e8 26 1e ff ff       	call   c000f840 <malloc>
c001da1a:	83 c4 10             	add    esp,0x10
c001da1d:	89 c3                	mov    ebx,eax
c001da1f:	83 ec 08             	sub    esp,0x8
c001da22:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da26:	53                   	push   ebx
c001da27:	e8 88 37 ff ff       	call   c00111b4 <VgaText::VgaText(char const*)>
c001da2c:	83 c4 10             	add    esp,0x10
c001da2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da33:	89 98 26 19 00 00    	mov    DWORD PTR [eax+0x1926],ebx
c001da39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da3d:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001da43:	83 ec 0c             	sub    esp,0xc
c001da46:	50                   	push   eax
c001da47:	e8 5b 2b ff ff       	call   c00105a7 <addToTerminalCycle(VgaText*)>
c001da4c:	83 c4 10             	add    esp,0x10
c001da4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da53:	05 0c 01 00 00       	add    eax,0x10c
c001da58:	83 ec 08             	sub    esp,0x8
c001da5b:	68 96 c0 02 c0       	push   0xc002c096
c001da60:	50                   	push   eax
c001da61:	e8 ce 2d fe ff       	call   c0000834 <strcpy>
c001da66:	83 c4 10             	add    esp,0x10
c001da69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da6d:	83 c0 0c             	add    eax,0xc
c001da70:	83 ec 08             	sub    esp,0x8
c001da73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da77:	50                   	push   eax
c001da78:	e8 b7 2d fe ff       	call   c0000834 <strcpy>
c001da7d:	83 c4 10             	add    esp,0x10
c001da80:	83 ec 08             	sub    esp,0x8
c001da83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001da87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da8b:	e8 0a fe ff ff       	call   c001d89a <Process::addArgs(char**)>
c001da90:	83 c4 10             	add    esp,0x10
c001da93:	83 ec 08             	sub    esp,0x8
c001da96:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da9a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da9e:	e8 6a ee ff ff       	call   c001c90d <Thr::loadProgramIntoMemory(Process*, char const*)>
c001daa3:	83 c4 10             	add    esp,0x10
c001daa6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001daaa:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001daae:	83 f0 01             	xor    eax,0x1
c001dab1:	88 c2                	mov    dl,al
c001dab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dab7:	88 90 3e 1b 00 00    	mov    BYTE PTR [eax+0x1b3e],dl
c001dabd:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dac2:	83 ec 08             	sub    esp,0x8
c001dac5:	50                   	push   eax
c001dac6:	68 94 c1 02 c0       	push   0xc002c194
c001dacb:	e8 04 53 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001dad0:	83 c4 10             	add    esp,0x10
c001dad3:	90                   	nop
c001dad4:	83 c4 14             	add    esp,0x14
c001dad7:	5b                   	pop    ebx
c001dad8:	5e                   	pop    esi
c001dad9:	c3                   	ret    

c001dada <Process::Process(bool, char const*, Process*, char**)>:
c001dada:	56                   	push   esi
c001dadb:	53                   	push   ebx
c001dadc:	83 ec 24             	sub    esp,0x24
c001dadf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dae3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dae7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001daeb:	05 0c 02 00 00       	add    eax,0x20c
c001daf0:	bb 07 00 00 00       	mov    ebx,0x7
c001daf5:	89 c6                	mov    esi,eax
c001daf7:	85 db                	test   ebx,ebx
c001daf9:	78 15                	js     c001db10 <Process::Process(bool, char const*, Process*, char**)+0x36>
c001dafb:	83 ec 0c             	sub    esp,0xc
c001dafe:	56                   	push   esi
c001daff:	e8 5e b0 00 00       	call   c0028b62 <ThreadControlBlock::ThreadControlBlock()>
c001db04:	83 c4 10             	add    esp,0x10
c001db07:	81 c6 e3 02 00 00    	add    esi,0x2e3
c001db0d:	4b                   	dec    ebx
c001db0e:	eb e7                	jmp    c001daf7 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001db10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db14:	c6 80 3e 1b 00 00 00 	mov    BYTE PTR [eax+0x1b3e],0x0
c001db1b:	83 ec 0c             	sub    esp,0xc
c001db1e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001db22:	e8 d9 c7 ff ff       	call   c001a300 <Krnl::newProcessEnv(Process*)>
c001db27:	83 c4 10             	add    esp,0x10
c001db2a:	89 c2                	mov    edx,eax
c001db2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db30:	89 90 3a 1b 00 00    	mov    DWORD PTR [eax+0x1b3a],edx
c001db36:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db3a:	66 c7 80 24 19 00 00 00 00 	mov    WORD PTR [eax+0x1924],0x0
c001db43:	a1 30 d8 02 c0       	mov    eax,ds:0xc002d830
c001db48:	8d 50 01             	lea    edx,[eax+0x1]
c001db4b:	89 15 30 d8 02 c0    	mov    DWORD PTR ds:0xc002d830,edx
c001db51:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001db55:	89 02                	mov    DWORD PTR [edx],eax
c001db57:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001db5f:	83 ec 0c             	sub    esp,0xc
c001db62:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001db66:	e8 d5 1c ff ff       	call   c000f840 <malloc>
c001db6b:	83 c4 10             	add    esp,0x10
c001db6e:	89 c3                	mov    ebx,eax
c001db70:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001db75:	83 ec 08             	sub    esp,0x8
c001db78:	50                   	push   eax
c001db79:	53                   	push   ebx
c001db7a:	e8 69 4b ff ff       	call   c00126e8 <VAS::VAS(bool)>
c001db7f:	83 c4 10             	add    esp,0x10
c001db82:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db86:	89 98 32 19 00 00    	mov    DWORD PTR [eax+0x1932],ebx
c001db8c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db90:	c7 80 36 19 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1936],0x0
c001db9a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db9e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dba2:	89 90 2a 19 00 00    	mov    DWORD PTR [eax+0x192a],edx
c001dba8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbac:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001dbb2:	85 c0                	test   eax,eax
c001dbb4:	74 42                	je     c001dbf8 <Process::Process(bool, char const*, Process*, char**)+0x11e>
c001dbb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbba:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001dbc0:	8b 90 26 19 00 00    	mov    edx,DWORD PTR [eax+0x1926]
c001dbc6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbca:	89 90 26 19 00 00    	mov    DWORD PTR [eax+0x1926],edx
c001dbd0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbd4:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001dbda:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dbe0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbe4:	05 0c 01 00 00       	add    eax,0x10c
c001dbe9:	83 ec 08             	sub    esp,0x8
c001dbec:	52                   	push   edx
c001dbed:	50                   	push   eax
c001dbee:	e8 41 2c fe ff       	call   c0000834 <strcpy>
c001dbf3:	83 c4 10             	add    esp,0x10
c001dbf6:	eb 63                	jmp    c001dc5b <Process::Process(bool, char const*, Process*, char**)+0x181>
c001dbf8:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001dc00:	83 ec 0c             	sub    esp,0xc
c001dc03:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001dc07:	e8 34 1c ff ff       	call   c000f840 <malloc>
c001dc0c:	83 c4 10             	add    esp,0x10
c001dc0f:	89 c3                	mov    ebx,eax
c001dc11:	83 ec 08             	sub    esp,0x8
c001dc14:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dc18:	53                   	push   ebx
c001dc19:	e8 96 35 ff ff       	call   c00111b4 <VgaText::VgaText(char const*)>
c001dc1e:	83 c4 10             	add    esp,0x10
c001dc21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc25:	89 98 26 19 00 00    	mov    DWORD PTR [eax+0x1926],ebx
c001dc2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc2f:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001dc35:	83 ec 0c             	sub    esp,0xc
c001dc38:	50                   	push   eax
c001dc39:	e8 69 29 ff ff       	call   c00105a7 <addToTerminalCycle(VgaText*)>
c001dc3e:	83 c4 10             	add    esp,0x10
c001dc41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc45:	05 0c 01 00 00       	add    eax,0x10c
c001dc4a:	83 ec 08             	sub    esp,0x8
c001dc4d:	68 96 c0 02 c0       	push   0xc002c096
c001dc52:	50                   	push   eax
c001dc53:	e8 dc 2b fe ff       	call   c0000834 <strcpy>
c001dc58:	83 c4 10             	add    esp,0x10
c001dc5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc5f:	83 c0 0c             	add    eax,0xc
c001dc62:	83 ec 08             	sub    esp,0x8
c001dc65:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dc69:	50                   	push   eax
c001dc6a:	e8 c5 2b fe ff       	call   c0000834 <strcpy>
c001dc6f:	83 c4 10             	add    esp,0x10
c001dc72:	83 ec 08             	sub    esp,0x8
c001dc75:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001dc79:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dc7d:	e8 18 fc ff ff       	call   c001d89a <Process::addArgs(char**)>
c001dc82:	83 c4 10             	add    esp,0x10
c001dc85:	90                   	nop
c001dc86:	83 c4 24             	add    esp,0x24
c001dc89:	5b                   	pop    ebx
c001dc8a:	5e                   	pop    esi
c001dc8b:	c3                   	ret    

c001dc8c <disableIRQs()>:
c001dc8c:	fa                   	cli    
c001dc8d:	ff 05 ec 17 03 c0    	inc    DWORD PTR ds:0xc00317ec
c001dc93:	c3                   	ret    

c001dc94 <getIRQNestingLevel()>:
c001dc94:	a1 ec 17 03 c0       	mov    eax,ds:0xc00317ec
c001dc99:	c3                   	ret    

c001dc9a <enableIRQs()>:
c001dc9a:	a1 ec 17 03 c0       	mov    eax,ds:0xc00317ec
c001dc9f:	48                   	dec    eax
c001dca0:	a3 ec 17 03 c0       	mov    ds:0xc00317ec,eax
c001dca5:	75 01                	jne    c001dca8 <enableIRQs()+0xe>
c001dca7:	fb                   	sti    
c001dca8:	c3                   	ret    

c001dca9 <lockScheduler()>:
c001dca9:	eb e1                	jmp    c001dc8c <disableIRQs()>

c001dcab <unlockScheduler()>:
c001dcab:	eb ed                	jmp    c001dc9a <enableIRQs()>

c001dcad <userModeEntryPoint(void*)>:
c001dcad:	83 ec 0c             	sub    esp,0xc
c001dcb0:	e8 f6 ff ff ff       	call   c001dcab <unlockScheduler()>
c001dcb5:	fb                   	sti    
c001dcb6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dcbb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001dcbe:	8b 80 2e 19 00 00    	mov    eax,DWORD PTR [eax+0x192e]
c001dcc4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dcc8:	83 c4 0c             	add    esp,0xc
c001dccb:	e9 5a 26 fe ff       	jmp    c000032a <goToUsermode>

c001dcd0 <lockStuff()>:
c001dcd0:	e8 b7 ff ff ff       	call   c001dc8c <disableIRQs()>
c001dcd5:	ff 05 e8 17 03 c0    	inc    DWORD PTR ds:0xc00317e8
c001dcdb:	c3                   	ret    

c001dcdc <taskStartupFunction>:
c001dcdc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dce1:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001dce4:	c3                   	ret    

c001dce5 <updateTimeUsed()>:
c001dce5:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c001dcea:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dcf0:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001dcf7:	74 50                	je     c001dd49 <updateTimeUsed()+0x64>
c001dcf9:	57                   	push   edi
c001dcfa:	56                   	push   esi
c001dcfb:	53                   	push   ebx
c001dcfc:	0f 31                	rdtsc  
c001dcfe:	89 c1                	mov    ecx,eax
c001dd00:	a3 28 18 03 c0       	mov    ds:0xc0031828,eax
c001dd05:	2b 0d 18 18 03 c0    	sub    ecx,DWORD PTR ds:0xc0031818
c001dd0b:	89 d3                	mov    ebx,edx
c001dd0d:	89 0d 20 18 03 c0    	mov    DWORD PTR ds:0xc0031820,ecx
c001dd13:	1b 1d 1c 18 03 c0    	sbb    ebx,DWORD PTR ds:0xc003181c
c001dd19:	a3 18 18 03 c0       	mov    ds:0xc0031818,eax
c001dd1e:	89 1d 24 18 03 c0    	mov    DWORD PTR ds:0xc0031824,ebx
c001dd24:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd29:	89 15 2c 18 03 c0    	mov    DWORD PTR ds:0xc003182c,edx
c001dd2f:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001dd32:	89 15 1c 18 03 c0    	mov    DWORD PTR ds:0xc003181c,edx
c001dd38:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001dd3b:	01 f1                	add    ecx,esi
c001dd3d:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001dd40:	11 fb                	adc    ebx,edi
c001dd42:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001dd45:	5b                   	pop    ebx
c001dd46:	5e                   	pop    esi
c001dd47:	5f                   	pop    edi
c001dd48:	c3                   	ret    
c001dd49:	c3                   	ret    

c001dd4a <switchToThread(ThreadControlBlock*)>:
c001dd4a:	53                   	push   ebx
c001dd4b:	83 ec 08             	sub    esp,0x8
c001dd4e:	a1 e8 17 03 c0       	mov    eax,ds:0xc00317e8
c001dd53:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dd57:	85 c0                	test   eax,eax
c001dd59:	75 30                	jne    c001dd8b <switchToThread(ThreadControlBlock*)+0x41>
c001dd5b:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001dd5e:	3c ff                	cmp    al,0xff
c001dd60:	74 25                	je     c001dd87 <switchToThread(ThreadControlBlock*)+0x3d>
c001dd62:	0f b6 d0             	movzx  edx,al
c001dd65:	b8 84 03 00 00       	mov    eax,0x384
c001dd6a:	29 d0                	sub    eax,edx
c001dd6c:	c1 e0 10             	shl    eax,0x10
c001dd6f:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001dd72:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001dd75:	e8 6b ff ff ff       	call   c001dce5 <updateTimeUsed()>
c001dd7a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001dd7e:	83 c4 08             	add    esp,0x8
c001dd81:	5b                   	pop    ebx
c001dd82:	e9 db 25 fe ff       	jmp    c0000362 <switchToThreadASM>
c001dd87:	31 c0                	xor    eax,eax
c001dd89:	eb e7                	jmp    c001dd72 <switchToThread(ThreadControlBlock*)+0x28>
c001dd8b:	c7 05 e4 17 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00317e4,0x1
c001dd95:	83 c4 08             	add    esp,0x8
c001dd98:	5b                   	pop    ebx
c001dd99:	c3                   	ret    

c001dd9a <Semaphore::Semaphore(int)>:
c001dd9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd9e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dda2:	89 10                	mov    DWORD PTR [eax],edx
c001dda4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dda8:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ddaf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ddb3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ddba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ddbe:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ddc5:	90                   	nop
c001ddc6:	c3                   	ret    
c001ddc7:	90                   	nop

c001ddc8 <Mutex::Mutex()>:
c001ddc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ddcc:	6a 01                	push   0x1
c001ddce:	50                   	push   eax
c001ddcf:	e8 c6 ff ff ff       	call   c001dd9a <Semaphore::Semaphore(int)>
c001ddd4:	83 c4 08             	add    esp,0x8
c001ddd7:	90                   	nop
c001ddd8:	c3                   	ret    
c001ddd9:	90                   	nop

c001ddda <Process::createThread(void (*)(void*), void*, int)>:
c001ddda:	55                   	push   ebp
c001dddb:	31 c9                	xor    ecx,ecx
c001dddd:	57                   	push   edi
c001ddde:	56                   	push   esi
c001dddf:	53                   	push   ebx
c001dde0:	83 ec 1c             	sub    esp,0x1c
c001dde3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dde7:	66 8b b3 24 19 00 00 	mov    si,WORD PTR [ebx+0x1924]
c001ddee:	89 f2                	mov    edx,esi
c001ddf0:	0f b7 c2             	movzx  eax,dx
c001ddf3:	83 e2 01             	and    edx,0x1
c001ddf6:	74 14                	je     c001de0c <Process::createThread(void (*)(void*), void*, int)+0x32>
c001ddf8:	d1 f8                	sar    eax,1
c001ddfa:	41                   	inc    ecx
c001ddfb:	89 c2                	mov    edx,eax
c001ddfd:	83 f9 10             	cmp    ecx,0x10
c001de00:	75 ee                	jne    c001ddf0 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001de02:	83 c4 1c             	add    esp,0x1c
c001de05:	31 c0                	xor    eax,eax
c001de07:	5b                   	pop    ebx
c001de08:	5e                   	pop    esi
c001de09:	5f                   	pop    edi
c001de0a:	5d                   	pop    ebp
c001de0b:	c3                   	ret    
c001de0c:	83 ec 08             	sub    esp,0x8
c001de0f:	b8 01 00 00 00       	mov    eax,0x1
c001de14:	d3 e0                	shl    eax,cl
c001de16:	09 c6                	or     esi,eax
c001de18:	8b 83 32 19 00 00    	mov    eax,DWORD PTR [ebx+0x1932]
c001de1e:	66 89 b3 24 19 00 00 	mov    WORD PTR [ebx+0x1924],si
c001de25:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001de28:	8d 04 89             	lea    eax,[ecx+ecx*4]
c001de2b:	8d 04 c1             	lea    eax,[ecx+eax*8]
c001de2e:	8d 34 c0             	lea    esi,[eax+eax*8]
c001de31:	01 f6                	add    esi,esi
c001de33:	01 ce                	add    esi,ecx
c001de35:	8d 04 33             	lea    eax,[ebx+esi*1]
c001de38:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001de3e:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001de44:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001de48:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001de4e:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001de54:	89 ca                	mov    edx,ecx
c001de56:	f7 da                	neg    edx
c001de58:	c1 e2 15             	shl    edx,0x15
c001de5b:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001de61:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001de67:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001de6b:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001de75:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001de7b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001de7f:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001de85:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001de8f:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001de99:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001dea0:	50                   	push   eax
c001dea1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dea5:	68 08 18 03 c0       	push   0xc0031808
c001deaa:	e8 41 ab 00 00       	call   c00289f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001deaf:	83 c4 10             	add    esp,0x10
c001deb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001deb6:	83 c4 1c             	add    esp,0x1c
c001deb9:	5b                   	pop    ebx
c001deba:	5e                   	pop    esi
c001debb:	5f                   	pop    edi
c001debc:	5d                   	pop    ebp
c001debd:	c3                   	ret    

c001debe <Process::createUserThread()>:
c001debe:	83 ec 0c             	sub    esp,0xc
c001dec1:	68 80 00 00 00       	push   0x80
c001dec6:	6a 00                	push   0x0
c001dec8:	68 ad dc 01 c0       	push   0xc001dcad
c001decd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ded1:	e8 04 ff ff ff       	call   c001ddda <Process::createThread(void (*)(void*), void*, int)>
c001ded6:	83 c4 1c             	add    esp,0x1c
c001ded9:	c3                   	ret    

c001deda <setupMultitasking(void (*)())>:
c001deda:	56                   	push   esi
c001dedb:	53                   	push   ebx
c001dedc:	53                   	push   ebx
c001dedd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dee1:	eb 10                	jmp    c001def3 <setupMultitasking(void (*)())+0x19>
c001dee3:	83 ec 0c             	sub    esp,0xc
c001dee6:	68 08 18 03 c0       	push   0xc0031808
c001deeb:	e8 52 aa 00 00       	call   c0028942 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001def0:	83 c4 10             	add    esp,0x10
c001def3:	83 ec 0c             	sub    esp,0xc
c001def6:	68 08 18 03 c0       	push   0xc0031808
c001defb:	e8 26 aa 00 00       	call   c0028926 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001df00:	83 c4 10             	add    esp,0x10
c001df03:	84 c0                	test   al,al
c001df05:	74 dc                	je     c001dee3 <setupMultitasking(void (*)())+0x9>
c001df07:	83 ec 0c             	sub    esp,0xc
c001df0a:	68 3f 1b 00 00       	push   0x1b3f
c001df0f:	e8 2c 19 ff ff       	call   c000f840 <malloc>
c001df14:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001df1b:	89 c3                	mov    ebx,eax
c001df1d:	6a 00                	push   0x0
c001df1f:	68 9a c0 02 c0       	push   0xc002c09a
c001df24:	6a 01                	push   0x1
c001df26:	50                   	push   eax
c001df27:	e8 ae fb ff ff       	call   c001dada <Process::Process(bool, char const*, Process*, char**)>
c001df2c:	83 c4 18             	add    esp,0x18
c001df2f:	89 1d 14 18 03 c0    	mov    DWORD PTR ds:0xc0031814,ebx
c001df35:	ff b3 26 19 00 00    	push   DWORD PTR [ebx+0x1926]
c001df3b:	68 bc c1 02 c0       	push   0xc002c1bc
c001df40:	e8 8f 4e ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001df45:	58                   	pop    eax
c001df46:	ff b3 26 19 00 00    	push   DWORD PTR [ebx+0x1926]
c001df4c:	e8 d8 2d ff ff       	call   c0010d29 <setActiveTerminal(VgaText*)>
c001df51:	66 83 8b 24 19 00 00 01 	or     WORD PTR [ebx+0x1924],0x1
c001df59:	8b 83 32 19 00 00    	mov    eax,DWORD PTR [ebx+0x1932]
c001df5f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001df62:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001df6c:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001df72:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001df78:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001df82:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001df8c:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001df96:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001df9c:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001dfa2:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001dfac:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001dfb2:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001dfbc:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001dfc2:	5a                   	pop    edx
c001dfc3:	59                   	pop    ecx
c001dfc4:	68 96 c0 02 c0       	push   0xc002c096
c001dfc9:	50                   	push   eax
c001dfca:	e8 65 28 fe ff       	call   c0000834 <strcpy>
c001dfcf:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001dfd6:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001dfda:	83 c4 14             	add    esp,0x14
c001dfdd:	5b                   	pop    ebx
c001dfde:	5e                   	pop    esi
c001dfdf:	e9 70 23 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001dfe4 <schedule()>:
c001dfe4:	a1 e8 17 03 c0       	mov    eax,ds:0xc00317e8
c001dfe9:	85 c0                	test   eax,eax
c001dfeb:	74 0b                	je     c001dff8 <schedule()+0x14>
c001dfed:	c7 05 e4 17 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00317e4,0x1
c001dff7:	c3                   	ret    
c001dff8:	53                   	push   ebx
c001dff9:	83 ec 14             	sub    esp,0x14
c001dffc:	68 08 18 03 c0       	push   0xc0031808
c001e001:	e8 20 a9 00 00       	call   c0028926 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e006:	83 c4 10             	add    esp,0x10
c001e009:	84 c0                	test   al,al
c001e00b:	75 38                	jne    c001e045 <schedule()+0x61>
c001e00d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e012:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e015:	4a                   	dec    edx
c001e016:	74 32                	je     c001e04a <schedule()+0x66>
c001e018:	83 ec 0c             	sub    esp,0xc
c001e01b:	68 08 18 03 c0       	push   0xc0031808
c001e020:	e8 f9 a8 00 00       	call   c002891e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e025:	c7 04 24 08 18 03 c0 	mov    DWORD PTR [esp],0xc0031808
c001e02c:	89 c3                	mov    ebx,eax
c001e02e:	e8 0f a9 00 00       	call   c0028942 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e033:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e03a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e03d:	e8 08 fd ff ff       	call   c001dd4a <switchToThread(ThreadControlBlock*)>
c001e042:	83 c4 10             	add    esp,0x10
c001e045:	83 c4 08             	add    esp,0x8
c001e048:	5b                   	pop    ebx
c001e049:	c3                   	ret    
c001e04a:	83 ec 08             	sub    esp,0x8
c001e04d:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e054:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e05a:	68 08 18 03 c0       	push   0xc0031808
c001e05f:	e8 8c a9 00 00       	call   c00289f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e064:	83 c4 10             	add    esp,0x10
c001e067:	eb af                	jmp    c001e018 <schedule()+0x34>

c001e069 <unlockStuff()>:
c001e069:	a1 e8 17 03 c0       	mov    eax,ds:0xc00317e8
c001e06e:	48                   	dec    eax
c001e06f:	a3 e8 17 03 c0       	mov    ds:0xc00317e8,eax
c001e074:	75 09                	jne    c001e07f <unlockStuff()+0x16>
c001e076:	a1 e4 17 03 c0       	mov    eax,ds:0xc00317e4
c001e07b:	85 c0                	test   eax,eax
c001e07d:	75 05                	jne    c001e084 <unlockStuff()+0x1b>
c001e07f:	e9 16 fc ff ff       	jmp    c001dc9a <enableIRQs()>
c001e084:	83 ec 0c             	sub    esp,0xc
c001e087:	c7 05 e4 17 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00317e4,0x0
c001e091:	e8 4e ff ff ff       	call   c001dfe4 <schedule()>
c001e096:	83 c4 0c             	add    esp,0xc
c001e099:	e9 fc fb ff ff       	jmp    c001dc9a <enableIRQs()>

c001e09e <Semaphore::tryAcquire()>:
c001e09e:	83 ec 0c             	sub    esp,0xc
c001e0a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0a5:	e8 26 fc ff ff       	call   c001dcd0 <lockStuff()>
c001e0aa:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e0ad:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e0af:	7c 0b                	jl     c001e0bc <Semaphore::tryAcquire()+0x1e>
c001e0b1:	e8 b3 ff ff ff       	call   c001e069 <unlockStuff()>
c001e0b6:	31 c0                	xor    eax,eax
c001e0b8:	83 c4 0c             	add    esp,0xc
c001e0bb:	c3                   	ret    
c001e0bc:	42                   	inc    edx
c001e0bd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e0c0:	e8 a4 ff ff ff       	call   c001e069 <unlockStuff()>
c001e0c5:	b0 01                	mov    al,0x1
c001e0c7:	83 c4 0c             	add    esp,0xc
c001e0ca:	c3                   	ret    
c001e0cb:	90                   	nop

c001e0cc <Semaphore::assertLocked(char const*)>:
c001e0cc:	83 ec 0c             	sub    esp,0xc
c001e0cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0d3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e0d7:	e8 f4 fb ff ff       	call   c001dcd0 <lockStuff()>
c001e0dc:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e0de:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001e0e1:	7c 05                	jl     c001e0e8 <Semaphore::assertLocked(char const*)+0x1c>
c001e0e3:	83 c4 0c             	add    esp,0xc
c001e0e6:	eb 81                	jmp    c001e069 <unlockStuff()>
c001e0e8:	83 ec 0c             	sub    esp,0xc
c001e0eb:	52                   	push   edx
c001e0ec:	e8 be c3 ff ff       	call   c001a4af <Krnl::panic(char const*)>
c001e0f1:	83 c4 10             	add    esp,0x10
c001e0f4:	83 c4 0c             	add    esp,0xc
c001e0f7:	e9 6d ff ff ff       	jmp    c001e069 <unlockStuff()>

c001e0fc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e0fc:	83 ec 0c             	sub    esp,0xc
c001e0ff:	e8 90 fb ff ff       	call   c001dc94 <getIRQNestingLevel()>
c001e104:	83 ec 08             	sub    esp,0x8
c001e107:	50                   	push   eax
c001e108:	68 f0 c1 02 c0       	push   0xc002c1f0
c001e10d:	e8 c2 4c ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001e112:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e116:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e11b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e11e:	e8 c1 fe ff ff       	call   c001dfe4 <schedule()>
c001e123:	e8 83 fb ff ff       	call   c001dcab <unlockScheduler()>
c001e128:	e8 67 fb ff ff       	call   c001dc94 <getIRQNestingLevel()>
c001e12d:	5a                   	pop    edx
c001e12e:	59                   	pop    ecx
c001e12f:	50                   	push   eax
c001e130:	68 24 c2 02 c0       	push   0xc002c224
c001e135:	e8 9a 4c ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001e13a:	83 c4 1c             	add    esp,0x1c
c001e13d:	c3                   	ret    

c001e13e <blockTask(TaskState)>:
c001e13e:	83 ec 0c             	sub    esp,0xc
c001e141:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e145:	e8 5f fb ff ff       	call   c001dca9 <lockScheduler()>
c001e14a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e14f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e152:	e8 8d fe ff ff       	call   c001dfe4 <schedule()>
c001e157:	83 c4 0c             	add    esp,0xc
c001e15a:	e9 4c fb ff ff       	jmp    c001dcab <unlockScheduler()>

c001e15f <waitTask(int, int*, int)>:
c001e15f:	83 ec 18             	sub    esp,0x18
c001e162:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e167:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e16b:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e16e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e172:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e177:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e17a:	6a 07                	push   0x7
c001e17c:	e8 bd ff ff ff       	call   c001e13e <blockTask(TaskState)>
c001e181:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e186:	83 c4 10             	add    esp,0x10
c001e189:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e18c:	85 d2                	test   edx,edx
c001e18e:	74 0a                	je     c001e19a <waitTask(int, int*, int)+0x3b>
c001e190:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e193:	89 02                	mov    DWORD PTR [edx],eax
c001e195:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e19a:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e19d:	83 c4 0c             	add    esp,0xc
c001e1a0:	c3                   	ret    

c001e1a1 <nanoSleepUntil(unsigned long long)>:
c001e1a1:	83 ec 0c             	sub    esp,0xc
c001e1a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1a8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e1ac:	3b 05 30 e9 02 c0    	cmp    eax,DWORD PTR ds:0xc002e930
c001e1b2:	89 d1                	mov    ecx,edx
c001e1b4:	1b 0d 34 e9 02 c0    	sbb    ecx,DWORD PTR ds:0xc002e934
c001e1ba:	73 04                	jae    c001e1c0 <nanoSleepUntil(unsigned long long)+0x1f>
c001e1bc:	83 c4 0c             	add    esp,0xc
c001e1bf:	c3                   	ret    
c001e1c0:	e8 0b fb ff ff       	call   c001dcd0 <lockStuff()>
c001e1c5:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e1cb:	83 ec 08             	sub    esp,0x8
c001e1ce:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e1d1:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e1d4:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e1da:	68 fc 17 03 c0       	push   0xc00317fc
c001e1df:	e8 0c a8 00 00       	call   c00289f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e1e4:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e1eb:	e8 4e ff ff ff       	call   c001e13e <blockTask(TaskState)>
c001e1f0:	83 c4 1c             	add    esp,0x1c
c001e1f3:	e9 71 fe ff ff       	jmp    c001e069 <unlockStuff()>

c001e1f8 <nanoSleep(unsigned long long)>:
c001e1f8:	a1 30 e9 02 c0       	mov    eax,ds:0xc002e930
c001e1fd:	8b 15 34 e9 02 c0    	mov    edx,DWORD PTR ds:0xc002e934
c001e203:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e207:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e20b:	eb 94                	jmp    c001e1a1 <nanoSleepUntil(unsigned long long)>

c001e20d <sleep(unsigned long long)>:
c001e20d:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e215:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e21a:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e21e:	01 ca                	add    edx,ecx
c001e220:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e224:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e228:	eb ce                	jmp    c001e1f8 <nanoSleep(unsigned long long)>

c001e22a <Semaphore::acquire()>:
c001e22a:	83 ec 0c             	sub    esp,0xc
c001e22d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e231:	e8 9a fa ff ff       	call   c001dcd0 <lockStuff()>
c001e236:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e239:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e23b:	7d 0c                	jge    c001e249 <Semaphore::acquire()+0x1f>
c001e23d:	42                   	inc    edx
c001e23e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e241:	83 c4 0c             	add    esp,0xc
c001e244:	e9 20 fe ff ff       	jmp    c001e069 <unlockStuff()>
c001e249:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e24f:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e256:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e259:	85 d2                	test   edx,edx
c001e25b:	74 2a                	je     c001e287 <Semaphore::acquire()+0x5d>
c001e25d:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e260:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e266:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e269:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e26f:	83 ec 0c             	sub    esp,0xc
c001e272:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e275:	6a 05                	push   0x5
c001e277:	e8 c2 fe ff ff       	call   c001e13e <blockTask(TaskState)>
c001e27c:	83 c4 10             	add    esp,0x10
c001e27f:	83 c4 0c             	add    esp,0xc
c001e282:	e9 e2 fd ff ff       	jmp    c001e069 <unlockStuff()>
c001e287:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e28d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e290:	eb d7                	jmp    c001e269 <Semaphore::acquire()+0x3f>

c001e292 <taskReturned>:
c001e292:	83 ec 18             	sub    esp,0x18
c001e295:	68 58 c2 02 c0       	push   0xc002c258
c001e29a:	e8 10 c2 ff ff       	call   c001a4af <Krnl::panic(char const*)>
c001e29f:	83 c4 10             	add    esp,0x10
c001e2a2:	83 ec 0c             	sub    esp,0xc
c001e2a5:	6a 02                	push   0x2
c001e2a7:	e8 92 fe ff ff       	call   c001e13e <blockTask(TaskState)>
c001e2ac:	e8 f8 f9 ff ff       	call   c001dca9 <lockScheduler()>
c001e2b1:	e8 2e fd ff ff       	call   c001dfe4 <schedule()>
c001e2b6:	e8 f0 f9 ff ff       	call   c001dcab <unlockScheduler()>
c001e2bb:	83 c4 10             	add    esp,0x10
c001e2be:	eb e2                	jmp    c001e2a2 <taskReturned+0x10>

c001e2c0 <unblockTask(ThreadControlBlock*)>:
c001e2c0:	53                   	push   ebx
c001e2c1:	83 ec 08             	sub    esp,0x8
c001e2c4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e2c8:	e8 dc f9 ff ff       	call   c001dca9 <lockScheduler()>
c001e2cd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e2d0:	85 c0                	test   eax,eax
c001e2d2:	74 5c                	je     c001e330 <unblockTask(ThreadControlBlock*)+0x70>
c001e2d4:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e2d7:	48                   	dec    eax
c001e2d8:	74 31                	je     c001e30b <unblockTask(ThreadControlBlock*)+0x4b>
c001e2da:	83 ec 0c             	sub    esp,0xc
c001e2dd:	68 08 18 03 c0       	push   0xc0031808
c001e2e2:	e8 37 a6 00 00       	call   c002891e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e2e7:	83 c4 10             	add    esp,0x10
c001e2ea:	85 c0                	test   eax,eax
c001e2ec:	75 17                	jne    c001e305 <unblockTask(ThreadControlBlock*)+0x45>
c001e2ee:	eb 65                	jmp    c001e355 <unblockTask(ThreadControlBlock*)+0x95>
c001e2f0:	83 ec 08             	sub    esp,0x8
c001e2f3:	50                   	push   eax
c001e2f4:	68 08 18 03 c0       	push   0xc0031808
c001e2f9:	e8 fa a8 00 00       	call   c0028bf8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e2fe:	83 c4 10             	add    esp,0x10
c001e301:	85 c0                	test   eax,eax
c001e303:	74 50                	je     c001e355 <unblockTask(ThreadControlBlock*)+0x95>
c001e305:	39 c3                	cmp    ebx,eax
c001e307:	75 e7                	jne    c001e2f0 <unblockTask(ThreadControlBlock*)+0x30>
c001e309:	eb 1c                	jmp    c001e327 <unblockTask(ThreadControlBlock*)+0x67>
c001e30b:	83 ec 0c             	sub    esp,0xc
c001e30e:	68 48 c3 02 c0       	push   0xc002c348
c001e313:	e8 bc 4a ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001e318:	c7 04 24 d4 c2 02 c0 	mov    DWORD PTR [esp],0xc002c2d4
c001e31f:	e8 b0 4a ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001e324:	83 c4 10             	add    esp,0x10
c001e327:	83 c4 08             	add    esp,0x8
c001e32a:	5b                   	pop    ebx
c001e32b:	e9 7b f9 ff ff       	jmp    c001dcab <unlockScheduler()>
c001e330:	83 ec 0c             	sub    esp,0xc
c001e333:	68 8c c2 02 c0       	push   0xc002c28c
c001e338:	e8 97 4a ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001e33d:	c7 04 24 d4 c2 02 c0 	mov    DWORD PTR [esp],0xc002c2d4
c001e344:	e8 8b 4a ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001e349:	83 c4 10             	add    esp,0x10
c001e34c:	83 c4 08             	add    esp,0x8
c001e34f:	5b                   	pop    ebx
c001e350:	e9 56 f9 ff ff       	jmp    c001dcab <unlockScheduler()>
c001e355:	83 ec 08             	sub    esp,0x8
c001e358:	53                   	push   ebx
c001e359:	68 08 18 03 c0       	push   0xc0031808
c001e35e:	e8 8d a6 00 00       	call   c00289f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e363:	83 c4 10             	add    esp,0x10
c001e366:	83 c4 08             	add    esp,0x8
c001e369:	5b                   	pop    ebx
c001e36a:	e9 3c f9 ff ff       	jmp    c001dcab <unlockScheduler()>

c001e36f <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e36f:	55                   	push   ebp
c001e370:	57                   	push   edi
c001e371:	56                   	push   esi
c001e372:	53                   	push   ebx
c001e373:	83 ec 1c             	sub    esp,0x1c
c001e376:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e37a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e37d:	8b b8 36 19 00 00    	mov    edi,DWORD PTR [eax+0x1936]
c001e383:	85 ff                	test   edi,edi
c001e385:	7e 20                	jle    c001e3a7 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e387:	31 f6                	xor    esi,esi
c001e389:	83 ec 0c             	sub    esp,0xc
c001e38c:	ff b4 b0 3a 19 00 00 	push   DWORD PTR [eax+esi*4+0x193a]
c001e393:	46                   	inc    esi
c001e394:	e8 b7 14 ff ff       	call   c000f850 <free>
c001e399:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e39c:	83 c4 10             	add    esp,0x10
c001e39f:	39 b0 36 19 00 00    	cmp    DWORD PTR [eax+0x1936],esi
c001e3a5:	7f e2                	jg     c001e389 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e3a7:	c7 80 36 19 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1936],0x0
c001e3b1:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e3b6:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e3b9:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e3bc:	d3 c0                	rol    eax,cl
c001e3be:	66 21 82 24 19 00 00 	and    WORD PTR [edx+0x1924],ax
c001e3c5:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e3c8:	89 f7                	mov    edi,esi
c001e3ca:	66 83 be 24 19 00 00 00 	cmp    WORD PTR [esi+0x1924],0x0
c001e3d2:	0f 85 75 01 00 00    	jne    c001e54d <cleanupTerminatedTask(ThreadControlBlock*)+0x1de>
c001e3d8:	8b ae 3a 1b 00 00    	mov    ebp,DWORD PTR [esi+0x1b3a]
c001e3de:	85 ed                	test   ebp,ebp
c001e3e0:	74 1b                	je     c001e3fd <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e3e2:	83 ec 0c             	sub    esp,0xc
c001e3e5:	55                   	push   ebp
c001e3e6:	e8 31 be ff ff       	call   c001a21c <EnvVarContainer::~EnvVarContainer()>
c001e3eb:	59                   	pop    ecx
c001e3ec:	5e                   	pop    esi
c001e3ed:	6a 0c                	push   0xc
c001e3ef:	55                   	push   ebp
c001e3f0:	e8 ff 48 ff ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c001e3f5:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e3f8:	83 c4 10             	add    esp,0x10
c001e3fb:	89 f7                	mov    edi,esi
c001e3fd:	8b 86 2a 19 00 00    	mov    eax,DWORD PTR [esi+0x192a]
c001e403:	85 c0                	test   eax,eax
c001e405:	0f 84 ab 00 00 00    	je     c001e4b6 <cleanupTerminatedTask(ThreadControlBlock*)+0x147>
c001e40b:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e40e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e412:	31 c9                	xor    ecx,ecx
c001e414:	eb 10                	jmp    c001e426 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e416:	41                   	inc    ecx
c001e417:	83 f9 10             	cmp    ecx,0x10
c001e41a:	0f 84 96 00 00 00    	je     c001e4b6 <cleanupTerminatedTask(ThreadControlBlock*)+0x147>
c001e420:	8b 86 2a 19 00 00    	mov    eax,DWORD PTR [esi+0x192a]
c001e426:	0f b7 90 24 19 00 00 	movzx  edx,WORD PTR [eax+0x1924]
c001e42d:	d3 fa                	sar    edx,cl
c001e42f:	83 e2 01             	and    edx,0x1
c001e432:	74 e2                	je     c001e416 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e434:	8d 14 89             	lea    edx,[ecx+ecx*4]
c001e437:	8d 14 d1             	lea    edx,[ecx+edx*8]
c001e43a:	8d 14 d2             	lea    edx,[edx+edx*8]
c001e43d:	01 d2                	add    edx,edx
c001e43f:	01 ca                	add    edx,ecx
c001e441:	01 d0                	add    eax,edx
c001e443:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e449:	83 fd 07             	cmp    ebp,0x7
c001e44c:	75 c8                	jne    c001e416 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e44e:	05 40 02 00 00       	add    eax,0x240
c001e453:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e456:	83 fd ff             	cmp    ebp,0xffffffff
c001e459:	0f 8c 08 01 00 00    	jl     c001e567 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c001e45f:	0f 84 b9 01 00 00    	je     c001e61e <cleanupTerminatedTask(ThreadControlBlock*)+0x2af>
c001e465:	85 ed                	test   ebp,ebp
c001e467:	0f 84 a0 01 00 00    	je     c001e60d <cleanupTerminatedTask(ThreadControlBlock*)+0x29e>
c001e46d:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e46f:	75 a5                	jne    c001e416 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e471:	8b 86 2a 19 00 00    	mov    eax,DWORD PTR [esi+0x192a]
c001e477:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e47b:	01 d0                	add    eax,edx
c001e47d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e481:	83 ec 0c             	sub    esp,0xc
c001e484:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e48a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e48d:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001e493:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e49a:	50                   	push   eax
c001e49b:	e8 20 fe ff ff       	call   c001e2c0 <unblockTask(ThreadControlBlock*)>
c001e4a0:	83 c4 10             	add    esp,0x10
c001e4a3:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e4a6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e4aa:	89 f7                	mov    edi,esi
c001e4ac:	41                   	inc    ecx
c001e4ad:	83 f9 10             	cmp    ecx,0x10
c001e4b0:	0f 85 6a ff ff ff    	jne    c001e420 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e4b6:	8b 86 26 19 00 00    	mov    eax,DWORD PTR [esi+0x1926]
c001e4bc:	85 c0                	test   eax,eax
c001e4be:	74 5d                	je     c001e51d <cleanupTerminatedTask(ThreadControlBlock*)+0x1ae>
c001e4c0:	8b 96 2a 19 00 00    	mov    edx,DWORD PTR [esi+0x192a]
c001e4c6:	3b 82 26 19 00 00    	cmp    eax,DWORD PTR [edx+0x1926]
c001e4cc:	74 4f                	je     c001e51d <cleanupTerminatedTask(ThreadControlBlock*)+0x1ae>
c001e4ce:	83 ec 0c             	sub    esp,0xc
c001e4d1:	68 08 18 03 c0       	push   0xc0031808
c001e4d6:	e8 43 a4 00 00       	call   c002891e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e4db:	c7 04 24 08 18 03 c0 	mov    DWORD PTR [esp],0xc0031808
c001e4e2:	89 c7                	mov    edi,eax
c001e4e4:	e8 3d a4 00 00       	call   c0028926 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e4e9:	83 c4 10             	add    esp,0x10
c001e4ec:	84 c0                	test   al,al
c001e4ee:	0f 84 e4 00 00 00    	je     c001e5d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x269>
c001e4f4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e4f7:	8b 90 26 19 00 00    	mov    edx,DWORD PTR [eax+0x1926]
c001e4fd:	85 d2                	test   edx,edx
c001e4ff:	74 0f                	je     c001e510 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a1>
c001e501:	83 ec 0c             	sub    esp,0xc
c001e504:	8b 02                	mov    eax,DWORD PTR [edx]
c001e506:	52                   	push   edx
c001e507:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e50a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e50d:	83 c4 10             	add    esp,0x10
c001e510:	c7 80 26 19 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1926],0x0
c001e51a:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e51d:	8b 9f 32 19 00 00    	mov    ebx,DWORD PTR [edi+0x1932]
c001e523:	85 db                	test   ebx,ebx
c001e525:	74 16                	je     c001e53d <cleanupTerminatedTask(ThreadControlBlock*)+0x1ce>
c001e527:	83 ec 0c             	sub    esp,0xc
c001e52a:	53                   	push   ebx
c001e52b:	e8 a4 3b ff ff       	call   c00120d4 <VAS::~VAS()>
c001e530:	58                   	pop    eax
c001e531:	5a                   	pop    edx
c001e532:	6a 14                	push   0x14
c001e534:	53                   	push   ebx
c001e535:	e8 ba 47 ff ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c001e53a:	83 c4 10             	add    esp,0x10
c001e53d:	83 ec 0c             	sub    esp,0xc
c001e540:	68 a1 c0 02 c0       	push   0xc002c0a1
c001e545:	e8 8a 48 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001e54a:	83 c4 10             	add    esp,0x10
c001e54d:	83 ec 08             	sub    esp,0x8
c001e550:	68 3f 1b 00 00       	push   0x1b3f
c001e555:	68 af c0 02 c0       	push   0xc002c0af
c001e55a:	e8 75 48 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001e55f:	83 c4 2c             	add    esp,0x2c
c001e562:	5b                   	pop    ebx
c001e563:	5e                   	pop    esi
c001e564:	5f                   	pop    edi
c001e565:	5d                   	pop    ebp
c001e566:	c3                   	ret    
c001e567:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e56b:	83 ec 0c             	sub    esp,0xc
c001e56e:	68 8c c3 02 c0       	push   0xc002c38c
c001e573:	e8 37 bf ff ff       	call   c001a4af <Krnl::panic(char const*)>
c001e578:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e57b:	83 c4 10             	add    esp,0x10
c001e57e:	89 f7                	mov    edi,esi
c001e580:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e584:	e9 8d fe ff ff       	jmp    c001e416 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e589:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001e58f:	39 82 26 19 00 00    	cmp    DWORD PTR [edx+0x1926],eax
c001e595:	75 1c                	jne    c001e5b3 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001e597:	83 ec 0c             	sub    esp,0xc
c001e59a:	68 f4 c3 02 c0       	push   0xc002c3f4
c001e59f:	e8 30 48 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001e5a4:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e5ab:	e8 8e fb ff ff       	call   c001e13e <blockTask(TaskState)>
c001e5b0:	83 c4 10             	add    esp,0x10
c001e5b3:	83 ec 08             	sub    esp,0x8
c001e5b6:	56                   	push   esi
c001e5b7:	68 08 18 03 c0       	push   0xc0031808
c001e5bc:	e8 2f a4 00 00       	call   c00289f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e5c1:	c7 04 24 08 18 03 c0 	mov    DWORD PTR [esp],0xc0031808
c001e5c8:	e8 51 a3 00 00       	call   c002891e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e5cd:	83 c4 10             	add    esp,0x10
c001e5d0:	39 f8                	cmp    eax,edi
c001e5d2:	0f 84 1c ff ff ff    	je     c001e4f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x185>
c001e5d8:	83 ec 0c             	sub    esp,0xc
c001e5db:	68 08 18 03 c0       	push   0xc0031808
c001e5e0:	e8 39 a3 00 00       	call   c002891e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e5e5:	c7 04 24 08 18 03 c0 	mov    DWORD PTR [esp],0xc0031808
c001e5ec:	89 c6                	mov    esi,eax
c001e5ee:	e8 4f a3 00 00       	call   c0028942 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e5f3:	83 c4 10             	add    esp,0x10
c001e5f6:	39 f3                	cmp    ebx,esi
c001e5f8:	74 b9                	je     c001e5b3 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001e5fa:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e5fd:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e600:	39 82 2a 19 00 00    	cmp    DWORD PTR [edx+0x192a],eax
c001e606:	75 ab                	jne    c001e5b3 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001e608:	e9 7c ff ff ff       	jmp    c001e589 <cleanupTerminatedTask(ThreadControlBlock*)+0x21a>
c001e60d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e611:	83 ec 0c             	sub    esp,0xc
c001e614:	68 c0 c3 02 c0       	push   0xc002c3c0
c001e619:	e9 55 ff ff ff       	jmp    c001e573 <cleanupTerminatedTask(ThreadControlBlock*)+0x204>
c001e61e:	8b 36                	mov    esi,DWORD PTR [esi]
c001e620:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e624:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e627:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e62a:	8b b8 2a 19 00 00    	mov    edi,DWORD PTR [eax+0x192a]
c001e630:	01 d7                	add    edi,edx
c001e632:	89 f8                	mov    eax,edi
c001e634:	e9 44 fe ff ff       	jmp    c001e47d <cleanupTerminatedTask(ThreadControlBlock*)+0x10e>

c001e639 <cleanerTaskFunction(void*)>:
c001e639:	53                   	push   ebx
c001e63a:	83 ec 08             	sub    esp,0x8
c001e63d:	e8 69 f6 ff ff       	call   c001dcab <unlockScheduler()>
c001e642:	e8 62 f6 ff ff       	call   c001dca9 <lockScheduler()>
c001e647:	80 3d cc 17 03 c0 00 	cmp    BYTE PTR ds:0xc00317cc,0x0
c001e64e:	0f 85 8e 00 00 00    	jne    c001e6e2 <cleanerTaskFunction(void*)+0xa9>
c001e654:	83 ec 0c             	sub    esp,0xc
c001e657:	6a 02                	push   0x2
c001e659:	e8 9e fa ff ff       	call   c001e0fc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e65e:	83 c4 10             	add    esp,0x10
c001e661:	c6 05 cc 17 03 c0 00 	mov    BYTE PTR ds:0xc00317cc,0x0
c001e668:	e8 63 f6 ff ff       	call   c001dcd0 <lockStuff()>
c001e66d:	e8 37 f6 ff ff       	call   c001dca9 <lockScheduler()>
c001e672:	83 ec 0c             	sub    esp,0xc
c001e675:	68 f0 17 03 c0       	push   0xc00317f0
c001e67a:	e8 a7 a2 00 00       	call   c0028926 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e67f:	83 c4 10             	add    esp,0x10
c001e682:	84 c0                	test   al,al
c001e684:	75 40                	jne    c001e6c6 <cleanerTaskFunction(void*)+0x8d>
c001e686:	83 ec 0c             	sub    esp,0xc
c001e689:	68 f0 17 03 c0       	push   0xc00317f0
c001e68e:	e8 8b a2 00 00       	call   c002891e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e693:	c7 04 24 f0 17 03 c0 	mov    DWORD PTR [esp],0xc00317f0
c001e69a:	89 c3                	mov    ebx,eax
c001e69c:	e8 a1 a2 00 00       	call   c0028942 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e6a1:	c7 04 24 c5 c0 02 c0 	mov    DWORD PTR [esp],0xc002c0c5
c001e6a8:	e8 27 47 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001e6ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e6b0:	e8 ba fc ff ff       	call   c001e36f <cleanupTerminatedTask(ThreadControlBlock*)>
c001e6b5:	c7 04 24 de c0 02 c0 	mov    DWORD PTR [esp],0xc002c0de
c001e6bc:	e8 13 47 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001e6c1:	83 c4 10             	add    esp,0x10
c001e6c4:	eb ac                	jmp    c001e672 <cleanerTaskFunction(void*)+0x39>
c001e6c6:	e8 e0 f5 ff ff       	call   c001dcab <unlockScheduler()>
c001e6cb:	e8 99 f9 ff ff       	call   c001e069 <unlockStuff()>
c001e6d0:	e8 d4 f5 ff ff       	call   c001dca9 <lockScheduler()>
c001e6d5:	80 3d cc 17 03 c0 00 	cmp    BYTE PTR ds:0xc00317cc,0x0
c001e6dc:	0f 84 72 ff ff ff    	je     c001e654 <cleanerTaskFunction(void*)+0x1b>
c001e6e2:	e8 c4 f5 ff ff       	call   c001dcab <unlockScheduler()>
c001e6e7:	e9 75 ff ff ff       	jmp    c001e661 <cleanerTaskFunction(void*)+0x28>

c001e6ec <terminateTask(int)>:
c001e6ec:	83 ec 14             	sub    esp,0x14
c001e6ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6f4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e6f7:	83 c0 0c             	add    eax,0xc
c001e6fa:	50                   	push   eax
c001e6fb:	68 1c c4 02 c0       	push   0xc002c41c
c001e700:	e8 cf 46 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001e705:	e8 c6 f5 ff ff       	call   c001dcd0 <lockStuff()>
c001e70a:	e8 9a f5 ff ff       	call   c001dca9 <lockScheduler()>
c001e70f:	c7 04 24 f1 c0 02 c0 	mov    DWORD PTR [esp],0xc002c0f1
c001e716:	e8 b9 46 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001e71b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e71f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e724:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e727:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e72c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e72f:	5a                   	pop    edx
c001e730:	59                   	pop    ecx
c001e731:	50                   	push   eax
c001e732:	68 f0 17 03 c0       	push   0xc00317f0
c001e737:	e8 b4 a2 00 00       	call   c00289f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e73c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e741:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e748:	c7 04 24 0b c1 02 c0 	mov    DWORD PTR [esp],0xc002c10b
c001e74f:	e8 80 46 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001e754:	83 c4 10             	add    esp,0x10
c001e757:	a1 c8 17 03 c0       	mov    eax,ds:0xc00317c8
c001e75c:	85 c0                	test   eax,eax
c001e75e:	74 5a                	je     c001e7ba <terminateTask(int)+0xce>
c001e760:	83 ec 0c             	sub    esp,0xc
c001e763:	68 25 c1 02 c0       	push   0xc002c125
c001e768:	e8 67 46 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001e76d:	58                   	pop    eax
c001e76e:	c6 05 cc 17 03 c0 01 	mov    BYTE PTR ds:0xc00317cc,0x1
c001e775:	ff 35 c8 17 03 c0    	push   DWORD PTR ds:0xc00317c8
c001e77b:	e8 40 fb ff ff       	call   c001e2c0 <unblockTask(ThreadControlBlock*)>
c001e780:	c7 04 24 3f c1 02 c0 	mov    DWORD PTR [esp],0xc002c13f
c001e787:	e8 48 46 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001e78c:	83 c4 10             	add    esp,0x10
c001e78f:	e8 17 f5 ff ff       	call   c001dcab <unlockScheduler()>
c001e794:	e8 d0 f8 ff ff       	call   c001e069 <unlockStuff()>
c001e799:	83 ec 0c             	sub    esp,0xc
c001e79c:	68 77 c1 02 c0       	push   0xc002c177
c001e7a1:	e8 2e 46 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001e7a6:	83 c4 10             	add    esp,0x10
c001e7a9:	e8 fb f4 ff ff       	call   c001dca9 <lockScheduler()>
c001e7ae:	e8 31 f8 ff ff       	call   c001dfe4 <schedule()>
c001e7b3:	e8 f3 f4 ff ff       	call   c001dcab <unlockScheduler()>
c001e7b8:	eb ef                	jmp    c001e7a9 <terminateTask(int)+0xbd>
c001e7ba:	83 ec 0c             	sub    esp,0xc
c001e7bd:	68 59 c1 02 c0       	push   0xc002c159
c001e7c2:	e8 0d 46 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001e7c7:	83 c4 10             	add    esp,0x10
c001e7ca:	eb c3                	jmp    c001e78f <terminateTask(int)+0xa3>

c001e7cc <Thr::terminateFromIRQ(int)>:
c001e7cc:	83 ec 18             	sub    esp,0x18
c001e7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e7d3:	e8 14 ff ff ff       	call   c001e6ec <terminateTask(int)>

c001e7d8 <Semaphore::release()>:
c001e7d8:	83 ec 0c             	sub    esp,0xc
c001e7db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7df:	e8 ec f4 ff ff       	call   c001dcd0 <lockStuff()>
c001e7e4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e7e7:	85 d2                	test   edx,edx
c001e7e9:	74 1a                	je     c001e805 <Semaphore::release()+0x2d>
c001e7eb:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e7ee:	83 ec 0c             	sub    esp,0xc
c001e7f1:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e7f4:	52                   	push   edx
c001e7f5:	e8 c6 fa ff ff       	call   c001e2c0 <unblockTask(ThreadControlBlock*)>
c001e7fa:	83 c4 10             	add    esp,0x10
c001e7fd:	83 c4 0c             	add    esp,0xc
c001e800:	e9 64 f8 ff ff       	jmp    c001e069 <unlockStuff()>
c001e805:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e808:	83 c4 0c             	add    esp,0xc
c001e80b:	e9 59 f8 ff ff       	jmp    c001e069 <unlockStuff()>

c001e810 <__static_initialization_and_destruction_0(int, int)>:
c001e810:	83 ec 0c             	sub    esp,0xc
c001e813:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e818:	0f 85 88 00 00 00    	jne    c001e8a6 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e81e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e826:	75 7e                	jne    c001e8a6 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e828:	83 ec 0c             	sub    esp,0xc
c001e82b:	68 08 18 03 c0       	push   0xc0031808
c001e830:	e8 6b a3 00 00       	call   c0028ba0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e835:	83 c4 10             	add    esp,0x10
c001e838:	83 ec 04             	sub    esp,0x4
c001e83b:	68 d4 d1 02 c0       	push   0xc002d1d4
c001e840:	68 08 18 03 c0       	push   0xc0031808
c001e845:	68 60 8b 02 c0       	push   0xc0028b60
c001e84a:	e8 1f 44 ff ff       	call   c0012c6e <__cxa_atexit>
c001e84f:	83 c4 10             	add    esp,0x10
c001e852:	83 ec 0c             	sub    esp,0xc
c001e855:	68 fc 17 03 c0       	push   0xc00317fc
c001e85a:	e8 41 a3 00 00       	call   c0028ba0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e85f:	83 c4 10             	add    esp,0x10
c001e862:	83 ec 04             	sub    esp,0x4
c001e865:	68 d4 d1 02 c0       	push   0xc002d1d4
c001e86a:	68 fc 17 03 c0       	push   0xc00317fc
c001e86f:	68 60 8b 02 c0       	push   0xc0028b60
c001e874:	e8 f5 43 ff ff       	call   c0012c6e <__cxa_atexit>
c001e879:	83 c4 10             	add    esp,0x10
c001e87c:	83 ec 0c             	sub    esp,0xc
c001e87f:	68 f0 17 03 c0       	push   0xc00317f0
c001e884:	e8 17 a3 00 00       	call   c0028ba0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e889:	83 c4 10             	add    esp,0x10
c001e88c:	83 ec 04             	sub    esp,0x4
c001e88f:	68 d4 d1 02 c0       	push   0xc002d1d4
c001e894:	68 f0 17 03 c0       	push   0xc00317f0
c001e899:	68 60 8b 02 c0       	push   0xc0028b60
c001e89e:	e8 cb 43 ff ff       	call   c0012c6e <__cxa_atexit>
c001e8a3:	83 c4 10             	add    esp,0x10
c001e8a6:	90                   	nop
c001e8a7:	83 c4 0c             	add    esp,0xc
c001e8aa:	c3                   	ret    

c001e8ab <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e8ab:	83 ec 0c             	sub    esp,0xc
c001e8ae:	83 ec 08             	sub    esp,0x8
c001e8b1:	68 ff ff 00 00       	push   0xffff
c001e8b6:	6a 01                	push   0x1
c001e8b8:	e8 53 ff ff ff       	call   c001e810 <__static_initialization_and_destruction_0(int, int)>
c001e8bd:	83 c4 10             	add    esp,0x10
c001e8c0:	83 c4 0c             	add    esp,0xc
c001e8c3:	c3                   	ret    

c001e8c4 <Vm::inbv(unsigned short)>:
c001e8c4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e8c8:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e8cd:	75 06                	jne    c001e8d5 <Vm::inbv(unsigned short)+0x11>
c001e8cf:	a0 4c 18 03 c0       	mov    al,ds:0xc003184c
c001e8d4:	c3                   	ret    
c001e8d5:	ec                   	in     al,dx
c001e8d6:	c3                   	ret    

c001e8d7 <Vm::outbv(unsigned short, unsigned char)>:
c001e8d7:	53                   	push   ebx
c001e8d8:	83 ec 08             	sub    esp,0x8
c001e8db:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e8df:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e8e3:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e8e8:	75 38                	jne    c001e922 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001e8ea:	0f b6 c3             	movzx  eax,bl
c001e8ed:	51                   	push   ecx
c001e8ee:	51                   	push   ecx
c001e8ef:	50                   	push   eax
c001e8f0:	68 3b c4 02 c0       	push   0xc002c43b
c001e8f5:	e8 da 44 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001e8fa:	8b 15 4c 18 03 c0    	mov    edx,DWORD PTR ds:0xc003184c
c001e900:	83 c4 10             	add    esp,0x10
c001e903:	8d 42 01             	lea    eax,[edx+0x1]
c001e906:	88 9a 60 18 03 c0    	mov    BYTE PTR [edx-0x3ffce7a0],bl
c001e90c:	a3 4c 18 03 c0       	mov    ds:0xc003184c,eax
c001e911:	83 f8 20             	cmp    eax,0x20
c001e914:	75 0f                	jne    c001e925 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e916:	c7 05 4c 18 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc003184c,0x1f
c001e920:	eb 03                	jmp    c001e925 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e922:	88 d8                	mov    al,bl
c001e924:	ee                   	out    dx,al
c001e925:	83 c4 08             	add    esp,0x8
c001e928:	5b                   	pop    ebx
c001e929:	c3                   	ret    

c001e92a <Vm::realToLinear(unsigned short, unsigned short)>:
c001e92a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e92f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e934:	c1 e0 04             	shl    eax,0x4
c001e937:	01 d0                	add    eax,edx
c001e939:	c3                   	ret    

c001e93a <Vm::getSegment(unsigned int)>:
c001e93a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e93e:	c1 e8 10             	shr    eax,0x10
c001e941:	c3                   	ret    

c001e942 <Vm::getOffset(unsigned int)>:
c001e942:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e946:	c3                   	ret    

c001e947 <Vm::mainloop2()>:
c001e947:	83 ec 0c             	sub    esp,0xc
c001e94a:	e8 5a f3 ff ff       	call   c001dca9 <lockScheduler()>
c001e94f:	83 ec 0c             	sub    esp,0xc
c001e952:	c6 05 45 18 03 c0 01 	mov    BYTE PTR ds:0xc0031845,0x1
c001e959:	6a 02                	push   0x2
c001e95b:	e8 9c f7 ff ff       	call   c001e0fc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e960:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e965:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e969:	52                   	push   edx
c001e96a:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e96e:	52                   	push   edx
c001e96f:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e973:	52                   	push   edx
c001e974:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e978:	50                   	push   eax
c001e979:	e8 7c 19 fe ff       	call   c00002fa <goToVM86>
c001e97e:	83 c4 2c             	add    esp,0x2c
c001e981:	c3                   	ret    

c001e982 <Vm::mainVm8086Loop(void*)>:
c001e982:	83 ec 0c             	sub    esp,0xc
c001e985:	e8 21 f3 ff ff       	call   c001dcab <unlockScheduler()>
c001e98a:	83 c4 0c             	add    esp,0xc
c001e98d:	eb b8                	jmp    c001e947 <Vm::mainloop2()>

c001e98f <Vm::mainloop3(unsigned long)>:
c001e98f:	53                   	push   ebx
c001e990:	83 ec 08             	sub    esp,0x8
c001e993:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e997:	e8 0d f3 ff ff       	call   c001dca9 <lockScheduler()>
c001e99c:	83 ec 0c             	sub    esp,0xc
c001e99f:	89 1d 40 18 03 c0    	mov    DWORD PTR ds:0xc0031840,ebx
c001e9a5:	6a 02                	push   0x2
c001e9a7:	c6 05 44 18 03 c0 01 	mov    BYTE PTR ds:0xc0031844,0x1
c001e9ae:	e8 49 f7 ff ff       	call   c001e0fc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e9b3:	83 c4 18             	add    esp,0x18
c001e9b6:	5b                   	pop    ebx
c001e9b7:	eb 8e                	jmp    c001e947 <Vm::mainloop2()>

c001e9b9 <Vm::initialise8086()>:
c001e9b9:	83 ec 0c             	sub    esp,0xc
c001e9bc:	68 80 00 00 00       	push   0x80
c001e9c1:	6a 00                	push   0x0
c001e9c3:	68 82 e9 01 c0       	push   0xc001e982
c001e9c8:	ff 35 14 18 03 c0    	push   DWORD PTR ds:0xc0031814
c001e9ce:	e8 07 f4 ff ff       	call   c001ddda <Process::createThread(void (*)(void*), void*, int)>
c001e9d3:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e9da:	a3 48 18 03 c0       	mov    ds:0xc0031848,eax
c001e9df:	68 00 01 00 00       	push   0x100
c001e9e4:	a1 14 18 03 c0       	mov    eax,ds:0xc0031814
c001e9e9:	6a 00                	push   0x0
c001e9eb:	6a 00                	push   0x0
c001e9ed:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001e9f3:	e8 3c 3b ff ff       	call   c0012534 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e9f8:	83 c4 2c             	add    esp,0x2c
c001e9fb:	c3                   	ret    

c001e9fc <Vm::finish8086()>:
c001e9fc:	53                   	push   ebx
c001e9fd:	83 ec 08             	sub    esp,0x8
c001ea00:	e8 a4 f2 ff ff       	call   c001dca9 <lockScheduler()>
c001ea05:	80 3d 44 18 03 c0 00 	cmp    BYTE PTR ds:0xc0031844,0x0
c001ea0c:	75 0c                	jne    c001ea1a <Vm::finish8086()+0x1e>
c001ea0e:	e8 d1 f5 ff ff       	call   c001dfe4 <schedule()>
c001ea13:	e8 93 f2 ff ff       	call   c001dcab <unlockScheduler()>
c001ea18:	eb e6                	jmp    c001ea00 <Vm::finish8086()+0x4>
c001ea1a:	83 ec 0c             	sub    esp,0xc
c001ea1d:	8b 1d 40 18 03 c0    	mov    ebx,DWORD PTR ds:0xc0031840
c001ea23:	ff 35 48 18 03 c0    	push   DWORD PTR ds:0xc0031848
c001ea29:	c6 05 44 18 03 c0 00 	mov    BYTE PTR ds:0xc0031844,0x0
c001ea30:	e8 8b f8 ff ff       	call   c001e2c0 <unblockTask(ThreadControlBlock*)>
c001ea35:	e8 71 f2 ff ff       	call   c001dcab <unlockScheduler()>
c001ea3a:	89 d8                	mov    eax,ebx
c001ea3c:	83 c4 18             	add    esp,0x18
c001ea3f:	5b                   	pop    ebx
c001ea40:	c3                   	ret    

c001ea41 <Vm::getOutput8086(unsigned char*)>:
c001ea41:	83 ec 10             	sub    esp,0x10
c001ea44:	ff 35 4c 18 03 c0    	push   DWORD PTR ds:0xc003184c
c001ea4a:	68 60 18 03 c0       	push   0xc0031860
c001ea4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea53:	e8 ec 1c fe ff       	call   c0000744 <memcpy>
c001ea58:	a1 4c 18 03 c0       	mov    eax,ds:0xc003184c
c001ea5d:	c7 05 4c 18 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003184c,0x0
c001ea67:	83 c4 1c             	add    esp,0x1c
c001ea6a:	c3                   	ret    

c001ea6b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001ea6b:	55                   	push   ebp
c001ea6c:	57                   	push   edi
c001ea6d:	56                   	push   esi
c001ea6e:	53                   	push   ebx
c001ea6f:	83 ec 2c             	sub    esp,0x2c
c001ea72:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ea76:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001ea7a:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001ea7e:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ea82:	e8 22 f2 ff ff       	call   c001dca9 <lockScheduler()>
c001ea87:	a0 45 18 03 c0       	mov    al,ds:0xc0031845
c001ea8c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ea90:	84 c0                	test   al,al
c001ea92:	75 0c                	jne    c001eaa0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001ea94:	e8 4b f5 ff ff       	call   c001dfe4 <schedule()>
c001ea99:	e8 0d f2 ff ff       	call   c001dcab <unlockScheduler()>
c001ea9e:	eb e2                	jmp    c001ea82 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001eaa0:	a1 48 18 03 c0       	mov    eax,ds:0xc0031848
c001eaa5:	c7 05 4c 18 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003184c,0x0
c001eaaf:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001eab3:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001eab7:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001eabb:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001eabf:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001eac3:	50                   	push   eax
c001eac4:	6a 20                	push   0x20
c001eac6:	6a 00                	push   0x0
c001eac8:	68 60 18 03 c0       	push   0xc0031860
c001eacd:	e8 a6 1c fe ff       	call   c0000778 <memset>
c001ead2:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ead9:	e8 62 0d ff ff       	call   c000f840 <malloc>
c001eade:	83 c4 0c             	add    esp,0xc
c001eae1:	89 c7                	mov    edi,eax
c001eae3:	ff 35 14 18 03 c0    	push   DWORD PTR ds:0xc0031814
c001eae9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001eaed:	50                   	push   eax
c001eaee:	e8 39 48 ff ff       	call   c001332c <File::File(char const*, Process*)>
c001eaf3:	83 c4 10             	add    esp,0x10
c001eaf6:	85 ff                	test   edi,edi
c001eaf8:	75 0a                	jne    c001eb04 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001eafa:	83 ec 0c             	sub    esp,0xc
c001eafd:	68 57 c4 02 c0       	push   0xc002c457
c001eb02:	eb 27                	jmp    c001eb2b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001eb04:	50                   	push   eax
c001eb05:	8d 44 24 17          	lea    eax,[esp+0x17]
c001eb09:	50                   	push   eax
c001eb0a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001eb0e:	50                   	push   eax
c001eb0f:	57                   	push   edi
c001eb10:	e8 27 4b ff ff       	call   c001363c <File::stat(unsigned long long*, bool*)>
c001eb15:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001eb1a:	83 c4 10             	add    esp,0x10
c001eb1d:	89 e8                	mov    eax,ebp
c001eb1f:	84 c0                	test   al,al
c001eb21:	74 19                	je     c001eb3c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001eb23:	83 ec 0c             	sub    esp,0xc
c001eb26:	68 6b c4 02 c0       	push   0xc002c46b
c001eb2b:	e8 7f b9 ff ff       	call   c001a4af <Krnl::panic(char const*)>
c001eb30:	31 ed                	xor    ebp,ebp
c001eb32:	e8 74 f1 ff ff       	call   c001dcab <unlockScheduler()>
c001eb37:	83 c4 10             	add    esp,0x10
c001eb3a:	eb 75                	jmp    c001ebb1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001eb3c:	50                   	push   eax
c001eb3d:	50                   	push   eax
c001eb3e:	6a 01                	push   0x1
c001eb40:	57                   	push   edi
c001eb41:	e8 4a 48 ff ff       	call   c0013390 <File::open(FileOpenMode)>
c001eb46:	83 c4 10             	add    esp,0x10
c001eb49:	85 c0                	test   eax,eax
c001eb4b:	74 17                	je     c001eb64 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001eb4d:	83 ec 0c             	sub    esp,0xc
c001eb50:	68 84 c4 02 c0       	push   0xc002c484
c001eb55:	e8 55 b9 ff ff       	call   c001a4af <Krnl::panic(char const*)>
c001eb5a:	e8 4c f1 ff ff       	call   c001dcab <unlockScheduler()>
c001eb5f:	83 c4 10             	add    esp,0x10
c001eb62:	eb 4d                	jmp    c001ebb1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001eb64:	0f b7 f6             	movzx  esi,si
c001eb67:	50                   	push   eax
c001eb68:	0f b7 db             	movzx  ebx,bx
c001eb6b:	50                   	push   eax
c001eb6c:	56                   	push   esi
c001eb6d:	53                   	push   ebx
c001eb6e:	e8 b7 fd ff ff       	call   c001e92a <Vm::realToLinear(unsigned short, unsigned short)>
c001eb73:	5a                   	pop    edx
c001eb74:	8b 17                	mov    edx,DWORD PTR [edi]
c001eb76:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001eb7a:	51                   	push   ecx
c001eb7b:	50                   	push   eax
c001eb7c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001eb80:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001eb84:	57                   	push   edi
c001eb85:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001eb88:	83 c4 14             	add    esp,0x14
c001eb8b:	57                   	push   edi
c001eb8c:	e8 5d 48 ff ff       	call   c00133ee <File::close()>
c001eb91:	c6 05 45 18 03 c0 00 	mov    BYTE PTR ds:0xc0031845,0x0
c001eb98:	e8 0e f1 ff ff       	call   c001dcab <unlockScheduler()>
c001eb9d:	59                   	pop    ecx
c001eb9e:	ff 35 48 18 03 c0    	push   DWORD PTR ds:0xc0031848
c001eba4:	e8 17 f7 ff ff       	call   c001e2c0 <unblockTask(ThreadControlBlock*)>
c001eba9:	83 c4 10             	add    esp,0x10
c001ebac:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001ebb1:	83 c4 2c             	add    esp,0x2c
c001ebb4:	89 e8                	mov    eax,ebp
c001ebb6:	5b                   	pop    ebx
c001ebb7:	5e                   	pop    esi
c001ebb8:	5f                   	pop    edi
c001ebb9:	5d                   	pop    ebp
c001ebba:	c3                   	ret    

c001ebbb <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001ebbb:	57                   	push   edi
c001ebbc:	56                   	push   esi
c001ebbd:	53                   	push   ebx
c001ebbe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ebc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ebc6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ebca:	83 e8 06             	sub    eax,0x6
c001ebcd:	0f b7 c0             	movzx  eax,ax
c001ebd0:	50                   	push   eax
c001ebd1:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001ebd6:	50                   	push   eax
c001ebd7:	e8 4e fd ff ff       	call   c001e92a <Vm::realToLinear(unsigned short, unsigned short)>
c001ebdc:	5a                   	pop    edx
c001ebdd:	5e                   	pop    esi
c001ebde:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001ebe1:	8d 56 fa             	lea    edx,[esi-0x6]
c001ebe4:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ebea:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001ebed:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ebf0:	83 c2 02             	add    edx,0x2
c001ebf3:	66 89 10             	mov    WORD PTR [eax],dx
c001ebf6:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ebf9:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001ebfd:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001ec00:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001ec04:	89 d6                	mov    esi,edx
c001ec06:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001ec0c:	66 81 e6 ff fd       	and    si,0xfdff
c001ec11:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ec15:	74 07                	je     c001ec1e <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ec17:	89 d6                	mov    esi,edx
c001ec19:	66 81 ce 00 02       	or     si,0x200
c001ec1e:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ec22:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ec27:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ec2b:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ec33:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001ec36:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001ec3e:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ec41:	5b                   	pop    ebx
c001ec42:	5e                   	pop    esi
c001ec43:	5f                   	pop    edi
c001ec44:	c3                   	ret    

c001ec45 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001ec45:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec4a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec4f:	c1 e0 04             	shl    eax,0x4
c001ec52:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001ec55:	c3                   	ret    

c001ec56 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001ec56:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec5b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec60:	c1 e0 04             	shl    eax,0x4
c001ec63:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001ec67:	c3                   	ret    

c001ec68 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ec68:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec6d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec72:	c1 e0 04             	shl    eax,0x4
c001ec75:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001ec78:	c3                   	ret    

c001ec79 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001ec79:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec7e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec83:	c1 e0 04             	shl    eax,0x4
c001ec86:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ec8a:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001ec8d:	c3                   	ret    

c001ec8e <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001ec8e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec93:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec98:	c1 e0 04             	shl    eax,0x4
c001ec9b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ec9f:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001eca3:	c3                   	ret    

c001eca4 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001eca4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eca9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ecae:	c1 e0 04             	shl    eax,0x4
c001ecb1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ecb5:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001ecb8:	c3                   	ret    

c001ecb9 <Vm::faultHandler(regs*)>:
c001ecb9:	55                   	push   ebp
c001ecba:	57                   	push   edi
c001ecbb:	56                   	push   esi
c001ecbc:	53                   	push   ebx
c001ecbd:	83 ec 1c             	sub    esp,0x1c
c001ecc0:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ecc4:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001ecc7:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001ecca:	0f b7 c1             	movzx  eax,cx
c001eccd:	50                   	push   eax
c001ecce:	0f b7 c3             	movzx  eax,bx
c001ecd1:	c1 e3 04             	shl    ebx,0x4
c001ecd4:	50                   	push   eax
c001ecd5:	e8 50 fc ff ff       	call   c001e92a <Vm::realToLinear(unsigned short, unsigned short)>
c001ecda:	5a                   	pop    edx
c001ecdb:	89 c5                	mov    ebp,eax
c001ecdd:	5e                   	pop    esi
c001ecde:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001ece2:	50                   	push   eax
c001ece3:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ece7:	50                   	push   eax
c001ece8:	e8 3d fc ff ff       	call   c001e92a <Vm::realToLinear(unsigned short, unsigned short)>
c001eced:	01 cb                	add    ebx,ecx
c001ecef:	89 c6                	mov    esi,eax
c001ecf1:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001ecf5:	50                   	push   eax
c001ecf6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ecfa:	50                   	push   eax
c001ecfb:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ecff:	50                   	push   eax
c001ed00:	55                   	push   ebp
c001ed01:	53                   	push   ebx
c001ed02:	b3 06                	mov    bl,0x6
c001ed04:	68 9d c4 02 c0       	push   0xc002c49d
c001ed09:	e8 c6 40 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001ed0e:	83 c4 20             	add    esp,0x20
c001ed11:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001ed16:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ed1b:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ed1f:	3c 9d                	cmp    al,0x9d
c001ed21:	0f 84 d7 02 00 00    	je     c001effe <Vm::faultHandler(regs*)+0x345>
c001ed27:	0f 87 a3 00 00 00    	ja     c001edd0 <Vm::faultHandler(regs*)+0x117>
c001ed2d:	3c 66                	cmp    al,0x66
c001ed2f:	0f 84 15 02 00 00    	je     c001ef4a <Vm::faultHandler(regs*)+0x291>
c001ed35:	77 5f                	ja     c001ed96 <Vm::faultHandler(regs*)+0xdd>
c001ed37:	3c 36                	cmp    al,0x36
c001ed39:	0f 84 f1 01 00 00    	je     c001ef30 <Vm::faultHandler(regs*)+0x277>
c001ed3f:	77 28                	ja     c001ed69 <Vm::faultHandler(regs*)+0xb0>
c001ed41:	3c 26                	cmp    al,0x26
c001ed43:	0f 84 99 01 00 00    	je     c001eee2 <Vm::faultHandler(regs*)+0x229>
c001ed49:	3c 2e                	cmp    al,0x2e
c001ed4b:	0f 85 3b 07 00 00    	jne    c001f48c <Vm::faultHandler(regs*)+0x7d3>
c001ed51:	83 ec 0c             	sub    esp,0xc
c001ed54:	31 db                	xor    ebx,ebx
c001ed56:	68 b2 c4 02 c0       	push   0xc002c4b2
c001ed5b:	e8 74 40 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001ed60:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ed63:	83 c4 10             	add    esp,0x10
c001ed66:	45                   	inc    ebp
c001ed67:	eb b2                	jmp    c001ed1b <Vm::faultHandler(regs*)+0x62>
c001ed69:	3c 64                	cmp    al,0x64
c001ed6b:	0f 84 8b 01 00 00    	je     c001eefc <Vm::faultHandler(regs*)+0x243>
c001ed71:	0f 87 9f 01 00 00    	ja     c001ef16 <Vm::faultHandler(regs*)+0x25d>
c001ed77:	3c 3e                	cmp    al,0x3e
c001ed79:	0f 85 0d 07 00 00    	jne    c001f48c <Vm::faultHandler(regs*)+0x7d3>
c001ed7f:	83 ec 0c             	sub    esp,0xc
c001ed82:	b3 01                	mov    bl,0x1
c001ed84:	68 b6 c4 02 c0       	push   0xc002c4b6
c001ed89:	e8 46 40 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001ed8e:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ed91:	83 c4 10             	add    esp,0x10
c001ed94:	eb d0                	jmp    c001ed66 <Vm::faultHandler(regs*)+0xad>
c001ed96:	3c 6d                	cmp    al,0x6d
c001ed98:	0f 84 af 03 00 00    	je     c001f14d <Vm::faultHandler(regs*)+0x494>
c001ed9e:	77 15                	ja     c001edb5 <Vm::faultHandler(regs*)+0xfc>
c001eda0:	3c 67                	cmp    al,0x67
c001eda2:	0f 84 bf 01 00 00    	je     c001ef67 <Vm::faultHandler(regs*)+0x2ae>
c001eda8:	3c 6c                	cmp    al,0x6c
c001edaa:	0f 84 3f 03 00 00    	je     c001f0ef <Vm::faultHandler(regs*)+0x436>
c001edb0:	e9 d7 06 00 00       	jmp    c001f48c <Vm::faultHandler(regs*)+0x7d3>
c001edb5:	3c 6f                	cmp    al,0x6f
c001edb7:	0f 84 a4 04 00 00    	je     c001f261 <Vm::faultHandler(regs*)+0x5a8>
c001edbd:	0f 82 11 04 00 00    	jb     c001f1d4 <Vm::faultHandler(regs*)+0x51b>
c001edc3:	3c 9c                	cmp    al,0x9c
c001edc5:	0f 84 ba 01 00 00    	je     c001ef85 <Vm::faultHandler(regs*)+0x2cc>
c001edcb:	e9 bc 06 00 00       	jmp    c001f48c <Vm::faultHandler(regs*)+0x7d3>
c001edd0:	3c ec                	cmp    al,0xec
c001edd2:	0f 84 24 06 00 00    	je     c001f3fc <Vm::faultHandler(regs*)+0x743>
c001edd8:	0f 87 93 00 00 00    	ja     c001ee71 <Vm::faultHandler(regs*)+0x1b8>
c001edde:	3c e4                	cmp    al,0xe4
c001ede0:	0f 84 5c 05 00 00    	je     c001f342 <Vm::faultHandler(regs*)+0x689>
c001ede6:	77 6a                	ja     c001ee52 <Vm::faultHandler(regs*)+0x199>
c001ede8:	3c cd                	cmp    al,0xcd
c001edea:	0f 84 7e 02 00 00    	je     c001f06e <Vm::faultHandler(regs*)+0x3b5>
c001edf0:	3c cf                	cmp    al,0xcf
c001edf2:	0f 85 94 06 00 00    	jne    c001f48c <Vm::faultHandler(regs*)+0x7d3>
c001edf8:	83 ec 0c             	sub    esp,0xc
c001edfb:	68 fa c4 02 c0       	push   0xc002c4fa
c001ee00:	e8 cf 3f ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001ee05:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001ee08:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001ee0b:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001ee0f:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001ee12:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001ee16:	0d 00 02 02 00       	or     eax,0x20200
c001ee1b:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001ee1e:	56                   	push   esi
c001ee1f:	53                   	push   ebx
c001ee20:	52                   	push   edx
c001ee21:	68 00 c5 02 c0       	push   0xc002c500
c001ee26:	e8 a9 3f ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001ee2b:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001ee2f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ee35:	66 c1 e8 09          	shr    ax,0x9
c001ee39:	83 e0 01             	and    eax,0x1
c001ee3c:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ee3f:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001ee42:	83 c0 06             	add    eax,0x6
c001ee45:	25 ff ff 00 00       	and    eax,0xffff
c001ee4a:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001ee4d:	e9 95 02 00 00       	jmp    c001f0e7 <Vm::faultHandler(regs*)+0x42e>
c001ee52:	3c e6                	cmp    al,0xe6
c001ee54:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001ee58:	0f 84 4e 05 00 00    	je     c001f3ac <Vm::faultHandler(regs*)+0x6f3>
c001ee5e:	0f 82 0a 05 00 00    	jb     c001f36e <Vm::faultHandler(regs*)+0x6b5>
c001ee64:	3c e7                	cmp    al,0xe7
c001ee66:	0f 84 69 05 00 00    	je     c001f3d5 <Vm::faultHandler(regs*)+0x71c>
c001ee6c:	e9 1b 06 00 00       	jmp    c001f48c <Vm::faultHandler(regs*)+0x7d3>
c001ee71:	3c ef                	cmp    al,0xef
c001ee73:	0f 84 e6 05 00 00    	je     c001f45f <Vm::faultHandler(regs*)+0x7a6>
c001ee79:	77 37                	ja     c001eeb2 <Vm::faultHandler(regs*)+0x1f9>
c001ee7b:	3c ed                	cmp    al,0xed
c001ee7d:	0f 84 a3 05 00 00    	je     c001f426 <Vm::faultHandler(regs*)+0x76d>
c001ee83:	3c ee                	cmp    al,0xee
c001ee85:	0f 85 01 06 00 00    	jne    c001f48c <Vm::faultHandler(regs*)+0x7d3>
c001ee8b:	52                   	push   edx
c001ee8c:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001ee8f:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001ee92:	68 9b c5 02 c0       	push   0xc002c59b
c001ee97:	e8 38 3f ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001ee9c:	59                   	pop    ecx
c001ee9d:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001eea1:	5b                   	pop    ebx
c001eea2:	50                   	push   eax
c001eea3:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001eea7:	50                   	push   eax
c001eea8:	e8 2a fa ff ff       	call   c001e8d7 <Vm::outbv(unsigned short, unsigned char)>
c001eead:	e9 a5 05 00 00       	jmp    c001f457 <Vm::faultHandler(regs*)+0x79e>
c001eeb2:	3c fa                	cmp    al,0xfa
c001eeb4:	0f 84 f7 01 00 00    	je     c001f0b1 <Vm::faultHandler(regs*)+0x3f8>
c001eeba:	3c fb                	cmp    al,0xfb
c001eebc:	0f 84 0a 02 00 00    	je     c001f0cc <Vm::faultHandler(regs*)+0x413>
c001eec2:	3c f3                	cmp    al,0xf3
c001eec4:	0f 85 c2 05 00 00    	jne    c001f48c <Vm::faultHandler(regs*)+0x7d3>
c001eeca:	83 ec 0c             	sub    esp,0xc
c001eecd:	68 d3 c4 02 c0       	push   0xc002c4d3
c001eed2:	e8 fd 3e ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001eed7:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eeda:	83 c4 10             	add    esp,0x10
c001eedd:	e9 84 fe ff ff       	jmp    c001ed66 <Vm::faultHandler(regs*)+0xad>
c001eee2:	83 ec 0c             	sub    esp,0xc
c001eee5:	b3 02                	mov    bl,0x2
c001eee7:	68 ae c4 02 c0       	push   0xc002c4ae
c001eeec:	e8 e3 3e ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001eef1:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eef4:	83 c4 10             	add    esp,0x10
c001eef7:	e9 6a fe ff ff       	jmp    c001ed66 <Vm::faultHandler(regs*)+0xad>
c001eefc:	83 ec 0c             	sub    esp,0xc
c001eeff:	b3 03                	mov    bl,0x3
c001ef01:	68 ba c4 02 c0       	push   0xc002c4ba
c001ef06:	e8 c9 3e ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001ef0b:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef0e:	83 c4 10             	add    esp,0x10
c001ef11:	e9 50 fe ff ff       	jmp    c001ed66 <Vm::faultHandler(regs*)+0xad>
c001ef16:	83 ec 0c             	sub    esp,0xc
c001ef19:	b3 04                	mov    bl,0x4
c001ef1b:	68 be c4 02 c0       	push   0xc002c4be
c001ef20:	e8 af 3e ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001ef25:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef28:	83 c4 10             	add    esp,0x10
c001ef2b:	e9 36 fe ff ff       	jmp    c001ed66 <Vm::faultHandler(regs*)+0xad>
c001ef30:	83 ec 0c             	sub    esp,0xc
c001ef33:	b3 05                	mov    bl,0x5
c001ef35:	68 c2 c4 02 c0       	push   0xc002c4c2
c001ef3a:	e8 95 3e ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001ef3f:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef42:	83 c4 10             	add    esp,0x10
c001ef45:	e9 1c fe ff ff       	jmp    c001ed66 <Vm::faultHandler(regs*)+0xad>
c001ef4a:	83 ec 0c             	sub    esp,0xc
c001ef4d:	68 c6 c4 02 c0       	push   0xc002c4c6
c001ef52:	e8 7d 3e ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001ef57:	83 c4 10             	add    esp,0x10
c001ef5a:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef5d:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001ef62:	e9 ff fd ff ff       	jmp    c001ed66 <Vm::faultHandler(regs*)+0xad>
c001ef67:	50                   	push   eax
c001ef68:	50                   	push   eax
c001ef69:	6a 01                	push   0x1
c001ef6b:	68 cb c4 02 c0       	push   0xc002c4cb
c001ef70:	e8 5f 3e ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001ef75:	83 c4 10             	add    esp,0x10
c001ef78:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef7b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001ef80:	e9 e1 fd ff ff       	jmp    c001ed66 <Vm::faultHandler(regs*)+0xad>
c001ef85:	83 ec 0c             	sub    esp,0xc
c001ef88:	68 d9 c4 02 c0       	push   0xc002c4d9
c001ef8d:	e8 42 3e ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001ef92:	83 c4 10             	add    esp,0x10
c001ef95:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001ef98:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ef9d:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001efa0:	74 2f                	je     c001efd1 <Vm::faultHandler(regs*)+0x318>
c001efa2:	83 ea 04             	sub    edx,0x4
c001efa5:	25 ff 0d 00 00       	and    eax,0xdff
c001efaa:	81 e2 ff ff 00 00    	and    edx,0xffff
c001efb0:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001efb3:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001efb6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001efbc:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001efc0:	0f 84 bf 04 00 00    	je     c001f485 <Vm::faultHandler(regs*)+0x7cc>
c001efc6:	80 cc 02             	or     ah,0x2
c001efc9:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001efcc:	e9 b4 04 00 00       	jmp    c001f485 <Vm::faultHandler(regs*)+0x7cc>
c001efd1:	83 ea 02             	sub    edx,0x2
c001efd4:	81 e2 ff ff 00 00    	and    edx,0xffff
c001efda:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001efdd:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001efe1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001efe7:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001efeb:	74 05                	je     c001eff2 <Vm::faultHandler(regs*)+0x339>
c001efed:	80 cc 02             	or     ah,0x2
c001eff0:	eb 03                	jmp    c001eff5 <Vm::faultHandler(regs*)+0x33c>
c001eff2:	80 e4 fd             	and    ah,0xfd
c001eff5:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001eff9:	e9 87 04 00 00       	jmp    c001f485 <Vm::faultHandler(regs*)+0x7cc>
c001effe:	83 ec 0c             	sub    esp,0xc
c001f001:	68 e0 c4 02 c0       	push   0xc002c4e0
c001f006:	e8 c9 3d ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001f00b:	83 c4 10             	add    esp,0x10
c001f00e:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f013:	74 28                	je     c001f03d <Vm::faultHandler(regs*)+0x384>
c001f015:	8b 06                	mov    eax,DWORD PTR [esi]
c001f017:	25 ff 0d 00 00       	and    eax,0xdff
c001f01c:	0d 00 02 02 00       	or     eax,0x20200
c001f021:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f024:	8b 06                	mov    eax,DWORD PTR [esi]
c001f026:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f02c:	c1 e8 09             	shr    eax,0x9
c001f02f:	83 e0 01             	and    eax,0x1
c001f032:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f035:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f038:	83 c0 04             	add    eax,0x4
c001f03b:	eb 24                	jmp    c001f061 <Vm::faultHandler(regs*)+0x3a8>
c001f03d:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f040:	0d 00 02 02 00       	or     eax,0x20200
c001f045:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f048:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f04b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f051:	66 c1 e8 09          	shr    ax,0x9
c001f055:	83 e0 01             	and    eax,0x1
c001f058:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f05b:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f05e:	83 c0 02             	add    eax,0x2
c001f061:	25 ff ff 00 00       	and    eax,0xffff
c001f066:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f069:	e9 17 04 00 00       	jmp    c001f485 <Vm::faultHandler(regs*)+0x7cc>
c001f06e:	53                   	push   ebx
c001f06f:	53                   	push   ebx
c001f070:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f074:	50                   	push   eax
c001f075:	68 e6 c4 02 c0       	push   0xc002c4e6
c001f07a:	e8 55 3d ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001f07f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f083:	83 c4 10             	add    esp,0x10
c001f086:	3c ee                	cmp    al,0xee
c001f088:	75 10                	jne    c001f09a <Vm::faultHandler(regs*)+0x3e1>
c001f08a:	83 ec 0c             	sub    esp,0xc
c001f08d:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f090:	e8 fa f8 ff ff       	call   c001e98f <Vm::mainloop3(unsigned long)>
c001f095:	e9 c0 03 00 00       	jmp    c001f45a <Vm::faultHandler(regs*)+0x7a1>
c001f09a:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f09e:	83 ec 0c             	sub    esp,0xc
c001f0a1:	53                   	push   ebx
c001f0a2:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f0a6:	53                   	push   ebx
c001f0a7:	55                   	push   ebp
c001f0a8:	50                   	push   eax
c001f0a9:	57                   	push   edi
c001f0aa:	e8 0c fb ff ff       	call   c001ebbb <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f0af:	eb 36                	jmp    c001f0e7 <Vm::faultHandler(regs*)+0x42e>
c001f0b1:	83 ec 0c             	sub    esp,0xc
c001f0b4:	68 f0 c4 02 c0       	push   0xc002c4f0
c001f0b9:	e8 16 3d ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001f0be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f0c3:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f0c7:	e9 8b 03 00 00       	jmp    c001f457 <Vm::faultHandler(regs*)+0x79e>
c001f0cc:	83 ec 0c             	sub    esp,0xc
c001f0cf:	68 f5 c4 02 c0       	push   0xc002c4f5
c001f0d4:	e8 fb 3c ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001f0d9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f0de:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f0e2:	e9 70 03 00 00       	jmp    c001f457 <Vm::faultHandler(regs*)+0x79e>
c001f0e7:	83 c4 20             	add    esp,0x20
c001f0ea:	e9 99 03 00 00       	jmp    c001f488 <Vm::faultHandler(regs*)+0x7cf>
c001f0ef:	83 ec 0c             	sub    esp,0xc
c001f0f2:	68 33 c5 02 c0       	push   0xc002c533
c001f0f7:	e8 d8 3c ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001f0fc:	83 c4 10             	add    esp,0x10
c001f0ff:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f102:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f107:	74 0d                	je     c001f116 <Vm::faultHandler(regs*)+0x45d>
c001f109:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f110:	0f 87 9e 01 00 00    	ja     c001f2b4 <Vm::faultHandler(regs*)+0x5fb>
c001f116:	83 ec 0c             	sub    esp,0xc
c001f119:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f11d:	0f b7 db             	movzx  ebx,bx
c001f120:	50                   	push   eax
c001f121:	e8 9e f7 ff ff       	call   c001e8c4 <Vm::inbv(unsigned short)>
c001f126:	83 c4 0c             	add    esp,0xc
c001f129:	0f b6 c0             	movzx  eax,al
c001f12c:	50                   	push   eax
c001f12d:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f131:	50                   	push   eax
c001f132:	53                   	push   ebx
c001f133:	e8 41 fb ff ff       	call   c001ec79 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f138:	83 c4 10             	add    esp,0x10
c001f13b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f13e:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f142:	74 03                	je     c001f147 <Vm::faultHandler(regs*)+0x48e>
c001f144:	48                   	dec    eax
c001f145:	eb 01                	jmp    c001f148 <Vm::faultHandler(regs*)+0x48f>
c001f147:	40                   	inc    eax
c001f148:	0f b7 c0             	movzx  eax,ax
c001f14b:	eb 7f                	jmp    c001f1cc <Vm::faultHandler(regs*)+0x513>
c001f14d:	83 ec 0c             	sub    esp,0xc
c001f150:	68 65 c5 02 c0       	push   0xc002c565
c001f155:	e8 7a 3c ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001f15a:	83 c4 10             	add    esp,0x10
c001f15d:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f160:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f165:	74 0d                	je     c001f174 <Vm::faultHandler(regs*)+0x4bb>
c001f167:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f16e:	0f 87 40 01 00 00    	ja     c001f2b4 <Vm::faultHandler(regs*)+0x5fb>
c001f174:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f177:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f17b:	0f b7 db             	movzx  ebx,bx
c001f17e:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f183:	74 20                	je     c001f1a5 <Vm::faultHandler(regs*)+0x4ec>
c001f185:	ed                   	in     eax,dx
c001f186:	51                   	push   ecx
c001f187:	50                   	push   eax
c001f188:	56                   	push   esi
c001f189:	53                   	push   ebx
c001f18a:	e8 15 fb ff ff       	call   c001eca4 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f18f:	83 c4 10             	add    esp,0x10
c001f192:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f195:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f199:	74 05                	je     c001f1a0 <Vm::faultHandler(regs*)+0x4e7>
c001f19b:	83 e8 04             	sub    eax,0x4
c001f19e:	eb 27                	jmp    c001f1c7 <Vm::faultHandler(regs*)+0x50e>
c001f1a0:	83 c0 04             	add    eax,0x4
c001f1a3:	eb 22                	jmp    c001f1c7 <Vm::faultHandler(regs*)+0x50e>
c001f1a5:	66 ed                	in     ax,dx
c001f1a7:	0f b7 c0             	movzx  eax,ax
c001f1aa:	52                   	push   edx
c001f1ab:	50                   	push   eax
c001f1ac:	56                   	push   esi
c001f1ad:	53                   	push   ebx
c001f1ae:	e8 db fa ff ff       	call   c001ec8e <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f1b3:	83 c4 10             	add    esp,0x10
c001f1b6:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f1b9:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f1bd:	74 05                	je     c001f1c4 <Vm::faultHandler(regs*)+0x50b>
c001f1bf:	83 e8 02             	sub    eax,0x2
c001f1c2:	eb 03                	jmp    c001f1c7 <Vm::faultHandler(regs*)+0x50e>
c001f1c4:	83 c0 02             	add    eax,0x2
c001f1c7:	25 ff ff 00 00       	and    eax,0xffff
c001f1cc:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f1cf:	e9 b1 02 00 00       	jmp    c001f485 <Vm::faultHandler(regs*)+0x7cc>
c001f1d4:	83 ec 0c             	sub    esp,0xc
c001f1d7:	4b                   	dec    ebx
c001f1d8:	68 6b c5 02 c0       	push   0xc002c56b
c001f1dd:	e8 f2 3b ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001f1e2:	83 c4 10             	add    esp,0x10
c001f1e5:	80 fb 05             	cmp    bl,0x5
c001f1e8:	77 0a                	ja     c001f1f4 <Vm::faultHandler(regs*)+0x53b>
c001f1ea:	0f b6 db             	movzx  ebx,bl
c001f1ed:	ff 24 9d dc c5 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3a24]
c001f1f4:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f1f8:	eb 1b                	jmp    c001f215 <Vm::faultHandler(regs*)+0x55c>
c001f1fa:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f1fe:	eb 15                	jmp    c001f215 <Vm::faultHandler(regs*)+0x55c>
c001f200:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f204:	eb 0f                	jmp    c001f215 <Vm::faultHandler(regs*)+0x55c>
c001f206:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f20a:	eb 09                	jmp    c001f215 <Vm::faultHandler(regs*)+0x55c>
c001f20c:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f20f:	eb 04                	jmp    c001f215 <Vm::faultHandler(regs*)+0x55c>
c001f211:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f215:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f21a:	74 0d                	je     c001f229 <Vm::faultHandler(regs*)+0x570>
c001f21c:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f223:	0f 87 8b 00 00 00    	ja     c001f2b4 <Vm::faultHandler(regs*)+0x5fb>
c001f229:	53                   	push   ebx
c001f22a:	53                   	push   ebx
c001f22b:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f22f:	52                   	push   edx
c001f230:	50                   	push   eax
c001f231:	e8 0f fa ff ff       	call   c001ec45 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f236:	5e                   	pop    esi
c001f237:	0f b6 c0             	movzx  eax,al
c001f23a:	5d                   	pop    ebp
c001f23b:	50                   	push   eax
c001f23c:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f240:	50                   	push   eax
c001f241:	e8 91 f6 ff ff       	call   c001e8d7 <Vm::outbv(unsigned short, unsigned char)>
c001f246:	83 c4 10             	add    esp,0x10
c001f249:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f24c:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f250:	74 03                	je     c001f255 <Vm::faultHandler(regs*)+0x59c>
c001f252:	48                   	dec    eax
c001f253:	eb 01                	jmp    c001f256 <Vm::faultHandler(regs*)+0x59d>
c001f255:	40                   	inc    eax
c001f256:	0f b7 c0             	movzx  eax,ax
c001f259:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f25c:	e9 24 02 00 00       	jmp    c001f485 <Vm::faultHandler(regs*)+0x7cc>
c001f261:	83 ec 0c             	sub    esp,0xc
c001f264:	4b                   	dec    ebx
c001f265:	68 6b c5 02 c0       	push   0xc002c56b
c001f26a:	e8 65 3b ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001f26f:	83 c4 10             	add    esp,0x10
c001f272:	80 fb 05             	cmp    bl,0x5
c001f275:	77 0a                	ja     c001f281 <Vm::faultHandler(regs*)+0x5c8>
c001f277:	0f b6 db             	movzx  ebx,bl
c001f27a:	ff 24 9d f4 c5 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3a0c]
c001f281:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f285:	eb 1b                	jmp    c001f2a2 <Vm::faultHandler(regs*)+0x5e9>
c001f287:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f28b:	eb 15                	jmp    c001f2a2 <Vm::faultHandler(regs*)+0x5e9>
c001f28d:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f291:	eb 0f                	jmp    c001f2a2 <Vm::faultHandler(regs*)+0x5e9>
c001f293:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f297:	eb 09                	jmp    c001f2a2 <Vm::faultHandler(regs*)+0x5e9>
c001f299:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f29c:	eb 04                	jmp    c001f2a2 <Vm::faultHandler(regs*)+0x5e9>
c001f29e:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f2a2:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f2a5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f2aa:	74 39                	je     c001f2e5 <Vm::faultHandler(regs*)+0x62c>
c001f2ac:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f2b2:	76 31                	jbe    c001f2e5 <Vm::faultHandler(regs*)+0x62c>
c001f2b4:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f2b8:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f2bc:	51                   	push   ecx
c001f2bd:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f2c1:	51                   	push   ecx
c001f2c2:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f2c6:	51                   	push   ecx
c001f2c7:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f2cb:	51                   	push   ecx
c001f2cc:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f2d0:	52                   	push   edx
c001f2d1:	50                   	push   eax
c001f2d2:	50                   	push   eax
c001f2d3:	68 38 c5 02 c0       	push   0xc002c538
c001f2d8:	e8 f7 3a ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001f2dd:	83 c4 20             	add    esp,0x20
c001f2e0:	e9 fb 01 00 00       	jmp    c001f4e0 <Vm::faultHandler(regs*)+0x827>
c001f2e5:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f2e8:	0f b7 d3             	movzx  edx,bx
c001f2eb:	81 e6 00 04 00 00    	and    esi,0x400
c001f2f1:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f2f4:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f2f9:	74 1d                	je     c001f318 <Vm::faultHandler(regs*)+0x65f>
c001f2fb:	51                   	push   ecx
c001f2fc:	51                   	push   ecx
c001f2fd:	52                   	push   edx
c001f2fe:	50                   	push   eax
c001f2ff:	e8 64 f9 ff ff       	call   c001ec68 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f304:	83 c4 10             	add    esp,0x10
c001f307:	89 ea                	mov    edx,ebp
c001f309:	ef                   	out    dx,eax
c001f30a:	85 f6                	test   esi,esi
c001f30c:	74 05                	je     c001f313 <Vm::faultHandler(regs*)+0x65a>
c001f30e:	83 eb 04             	sub    ebx,0x4
c001f311:	eb 21                	jmp    c001f334 <Vm::faultHandler(regs*)+0x67b>
c001f313:	83 c3 04             	add    ebx,0x4
c001f316:	eb 1c                	jmp    c001f334 <Vm::faultHandler(regs*)+0x67b>
c001f318:	51                   	push   ecx
c001f319:	51                   	push   ecx
c001f31a:	52                   	push   edx
c001f31b:	50                   	push   eax
c001f31c:	e8 35 f9 ff ff       	call   c001ec56 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f321:	83 c4 10             	add    esp,0x10
c001f324:	89 ea                	mov    edx,ebp
c001f326:	66 ef                	out    dx,ax
c001f328:	85 f6                	test   esi,esi
c001f32a:	74 05                	je     c001f331 <Vm::faultHandler(regs*)+0x678>
c001f32c:	83 eb 02             	sub    ebx,0x2
c001f32f:	eb 03                	jmp    c001f334 <Vm::faultHandler(regs*)+0x67b>
c001f331:	83 c3 02             	add    ebx,0x2
c001f334:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f33a:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f33d:	e9 43 01 00 00       	jmp    c001f485 <Vm::faultHandler(regs*)+0x7cc>
c001f342:	53                   	push   ebx
c001f343:	53                   	push   ebx
c001f344:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f348:	50                   	push   eax
c001f349:	68 71 c5 02 c0       	push   0xc002c571
c001f34e:	e8 81 3a ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001f353:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f35a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f35e:	89 04 24             	mov    DWORD PTR [esp],eax
c001f361:	e8 5e f5 ff ff       	call   c001e8c4 <Vm::inbv(unsigned short)>
c001f366:	0f b6 c0             	movzx  eax,al
c001f369:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f36c:	eb 5e                	jmp    c001f3cc <Vm::faultHandler(regs*)+0x713>
c001f36e:	51                   	push   ecx
c001f36f:	51                   	push   ecx
c001f370:	53                   	push   ebx
c001f371:	68 77 c5 02 c0       	push   0xc002c577
c001f376:	e8 59 3a ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001f37b:	83 c4 10             	add    esp,0x10
c001f37e:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f383:	74 07                	je     c001f38c <Vm::faultHandler(regs*)+0x6d3>
c001f385:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f389:	ed                   	in     eax,dx
c001f38a:	eb 14                	jmp    c001f3a0 <Vm::faultHandler(regs*)+0x6e7>
c001f38c:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f38f:	66 31 db             	xor    bx,bx
c001f392:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f395:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f399:	66 ed                	in     ax,dx
c001f39b:	0f b7 c0             	movzx  eax,ax
c001f39e:	09 d8                	or     eax,ebx
c001f3a0:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f3a3:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f3a7:	e9 dc 00 00 00       	jmp    c001f488 <Vm::faultHandler(regs*)+0x7cf>
c001f3ac:	50                   	push   eax
c001f3ad:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f3b0:	53                   	push   ebx
c001f3b1:	68 7d c5 02 c0       	push   0xc002c57d
c001f3b6:	e8 19 3a ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001f3bb:	58                   	pop    eax
c001f3bc:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f3c0:	5a                   	pop    edx
c001f3c1:	50                   	push   eax
c001f3c2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f3c6:	50                   	push   eax
c001f3c7:	e8 0b f5 ff ff       	call   c001e8d7 <Vm::outbv(unsigned short, unsigned char)>
c001f3cc:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f3d0:	e9 85 00 00 00       	jmp    c001f45a <Vm::faultHandler(regs*)+0x7a1>
c001f3d5:	50                   	push   eax
c001f3d6:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f3d9:	53                   	push   ebx
c001f3da:	68 86 c5 02 c0       	push   0xc002c586
c001f3df:	e8 f0 39 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001f3e4:	83 c4 10             	add    esp,0x10
c001f3e7:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f3eb:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f3f0:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f3f3:	74 03                	je     c001f3f8 <Vm::faultHandler(regs*)+0x73f>
c001f3f5:	ef                   	out    dx,eax
c001f3f6:	eb ab                	jmp    c001f3a3 <Vm::faultHandler(regs*)+0x6ea>
c001f3f8:	66 ef                	out    dx,ax
c001f3fa:	eb a7                	jmp    c001f3a3 <Vm::faultHandler(regs*)+0x6ea>
c001f3fc:	55                   	push   ebp
c001f3fd:	55                   	push   ebp
c001f3fe:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f401:	68 8f c5 02 c0       	push   0xc002c58f
c001f406:	e8 c9 39 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001f40b:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f412:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f416:	89 04 24             	mov    DWORD PTR [esp],eax
c001f419:	e8 a6 f4 ff ff       	call   c001e8c4 <Vm::inbv(unsigned short)>
c001f41e:	0f b6 c0             	movzx  eax,al
c001f421:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f424:	eb 31                	jmp    c001f457 <Vm::faultHandler(regs*)+0x79e>
c001f426:	56                   	push   esi
c001f427:	56                   	push   esi
c001f428:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f42b:	68 95 c5 02 c0       	push   0xc002c595
c001f430:	e8 9f 39 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001f435:	83 c4 10             	add    esp,0x10
c001f438:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f43b:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f440:	74 03                	je     c001f445 <Vm::faultHandler(regs*)+0x78c>
c001f442:	ed                   	in     eax,dx
c001f443:	eb 0d                	jmp    c001f452 <Vm::faultHandler(regs*)+0x799>
c001f445:	66 ed                	in     ax,dx
c001f447:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f44a:	0f b7 c0             	movzx  eax,ax
c001f44d:	66 31 d2             	xor    dx,dx
c001f450:	09 d0                	or     eax,edx
c001f452:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f455:	eb 2e                	jmp    c001f485 <Vm::faultHandler(regs*)+0x7cc>
c001f457:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f45a:	83 c4 10             	add    esp,0x10
c001f45d:	eb 29                	jmp    c001f488 <Vm::faultHandler(regs*)+0x7cf>
c001f45f:	50                   	push   eax
c001f460:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f463:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f466:	68 a4 c5 02 c0       	push   0xc002c5a4
c001f46b:	e8 64 39 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001f470:	83 c4 10             	add    esp,0x10
c001f473:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f476:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f47b:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f47e:	74 03                	je     c001f483 <Vm::faultHandler(regs*)+0x7ca>
c001f480:	ef                   	out    dx,eax
c001f481:	eb 02                	jmp    c001f485 <Vm::faultHandler(regs*)+0x7cc>
c001f483:	66 ef                	out    dx,ax
c001f485:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f488:	b0 01                	mov    al,0x1
c001f48a:	eb 56                	jmp    c001f4e2 <Vm::faultHandler(regs*)+0x829>
c001f48c:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f490:	51                   	push   ecx
c001f491:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f495:	51                   	push   ecx
c001f496:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f49a:	51                   	push   ecx
c001f49b:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f49f:	51                   	push   ecx
c001f4a0:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f4a4:	52                   	push   edx
c001f4a5:	50                   	push   eax
c001f4a6:	50                   	push   eax
c001f4a7:	68 ad c5 02 c0       	push   0xc002c5ad
c001f4ac:	e8 23 39 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001f4b1:	83 c4 20             	add    esp,0x20
c001f4b4:	83 ec 0c             	sub    esp,0xc
c001f4b7:	6a 60                	push   0x60
c001f4b9:	e8 06 f4 ff ff       	call   c001e8c4 <Vm::inbv(unsigned short)>
c001f4be:	83 c4 10             	add    esp,0x10
c001f4c1:	3c 1c                	cmp    al,0x1c
c001f4c3:	74 04                	je     c001f4c9 <Vm::faultHandler(regs*)+0x810>
c001f4c5:	3c 5a                	cmp    al,0x5a
c001f4c7:	75 eb                	jne    c001f4b4 <Vm::faultHandler(regs*)+0x7fb>
c001f4c9:	3c 1c                	cmp    al,0x1c
c001f4cb:	74 04                	je     c001f4d1 <Vm::faultHandler(regs*)+0x818>
c001f4cd:	3c 5a                	cmp    al,0x5a
c001f4cf:	75 0f                	jne    c001f4e0 <Vm::faultHandler(regs*)+0x827>
c001f4d1:	83 ec 0c             	sub    esp,0xc
c001f4d4:	6a 60                	push   0x60
c001f4d6:	e8 e9 f3 ff ff       	call   c001e8c4 <Vm::inbv(unsigned short)>
c001f4db:	83 c4 10             	add    esp,0x10
c001f4de:	eb e9                	jmp    c001f4c9 <Vm::faultHandler(regs*)+0x810>
c001f4e0:	31 c0                	xor    eax,eax
c001f4e2:	83 c4 1c             	add    esp,0x1c
c001f4e5:	5b                   	pop    ebx
c001f4e6:	5e                   	pop    esi
c001f4e7:	5f                   	pop    edi
c001f4e8:	5d                   	pop    ebp
c001f4e9:	c3                   	ret    

c001f4ea <Vm::x87Save(void*)>:
c001f4ea:	83 ec 10             	sub    esp,0x10
c001f4ed:	6a 48                	push   0x48
c001f4ef:	68 80 18 03 c0       	push   0xc0031880
c001f4f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4f8:	e8 47 12 fe ff       	call   c0000744 <memcpy>
c001f4fd:	83 c4 1c             	add    esp,0x1c
c001f500:	c3                   	ret    

c001f501 <Vm::x87Load(void*)>:
c001f501:	83 ec 10             	sub    esp,0x10
c001f504:	6a 48                	push   0x48
c001f506:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f50a:	68 80 18 03 c0       	push   0xc0031880
c001f50f:	e8 30 12 fe ff       	call   c0000744 <memcpy>
c001f514:	83 c4 1c             	add    esp,0x1c
c001f517:	c3                   	ret    

c001f518 <Vm::fpuInternalTo32(unsigned long long)>:
c001f518:	57                   	push   edi
c001f519:	56                   	push   esi
c001f51a:	53                   	push   ebx
c001f51b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f51f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f523:	89 d6                	mov    esi,edx
c001f525:	89 d7                	mov    edi,edx
c001f527:	89 c1                	mov    ecx,eax
c001f529:	c1 ef 14             	shr    edi,0x14
c001f52c:	89 d3                	mov    ebx,edx
c001f52e:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f534:	31 d2                	xor    edx,edx
c001f536:	89 f8                	mov    eax,edi
c001f538:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f53e:	bf ff 00 00 00       	mov    edi,0xff
c001f543:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f548:	83 d2 ff             	adc    edx,0xffffffff
c001f54b:	39 c7                	cmp    edi,eax
c001f54d:	bf 00 00 00 00       	mov    edi,0x0
c001f552:	19 d7                	sbb    edi,edx
c001f554:	72 15                	jb     c001f56b <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f556:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f55a:	c1 e0 17             	shl    eax,0x17
c001f55d:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f563:	09 f1                	or     ecx,esi
c001f565:	09 c1                	or     ecx,eax
c001f567:	89 cf                	mov    edi,ecx
c001f569:	eb 02                	jmp    c001f56d <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f56b:	31 ff                	xor    edi,edi
c001f56d:	89 f8                	mov    eax,edi
c001f56f:	5b                   	pop    ebx
c001f570:	5e                   	pop    esi
c001f571:	5f                   	pop    edi
c001f572:	c3                   	ret    

c001f573 <Vm::fpuInternalTo64(unsigned long long)>:
c001f573:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f577:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f57b:	c3                   	ret    

c001f57c <Vm::fpu32ToInternal(unsigned int)>:
c001f57c:	57                   	push   edi
c001f57d:	31 ff                	xor    edi,edi
c001f57f:	56                   	push   esi
c001f580:	53                   	push   ebx
c001f581:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f585:	89 cb                	mov    ebx,ecx
c001f587:	89 ce                	mov    esi,ecx
c001f589:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f58f:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f595:	c1 e9 17             	shr    ecx,0x17
c001f598:	89 f0                	mov    eax,esi
c001f59a:	0f b6 d1             	movzx  edx,cl
c001f59d:	81 c2 80 03 00 00    	add    edx,0x380
c001f5a3:	89 d1                	mov    ecx,edx
c001f5a5:	89 fa                	mov    edx,edi
c001f5a7:	c1 e1 14             	shl    ecx,0x14
c001f5aa:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f5ae:	c1 e0 1d             	shl    eax,0x1d
c001f5b1:	89 d7                	mov    edi,edx
c001f5b3:	89 c6                	mov    esi,eax
c001f5b5:	89 ca                	mov    edx,ecx
c001f5b7:	89 f0                	mov    eax,esi
c001f5b9:	09 fa                	or     edx,edi
c001f5bb:	09 da                	or     edx,ebx
c001f5bd:	5b                   	pop    ebx
c001f5be:	5e                   	pop    esi
c001f5bf:	5f                   	pop    edi
c001f5c0:	c3                   	ret    

c001f5c1 <Vm::fpu64ToInternal(unsigned long long)>:
c001f5c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f5c5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f5c9:	c3                   	ret    

c001f5ca <Vm::fpuFloatToLong(unsigned long long)>:
c001f5ca:	57                   	push   edi
c001f5cb:	31 c0                	xor    eax,eax
c001f5cd:	56                   	push   esi
c001f5ce:	31 d2                	xor    edx,edx
c001f5d0:	53                   	push   ebx
c001f5d1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f5d5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f5d9:	89 d9                	mov    ecx,ebx
c001f5db:	c1 e9 14             	shr    ecx,0x14
c001f5de:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f5e4:	89 cf                	mov    edi,ecx
c001f5e6:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f5ec:	78 33                	js     c001f621 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f5ee:	89 d9                	mov    ecx,ebx
c001f5f0:	89 f0                	mov    eax,esi
c001f5f2:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f5f8:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f5fe:	89 ca                	mov    edx,ecx
c001f600:	b9 34 00 00 00       	mov    ecx,0x34
c001f605:	29 f9                	sub    ecx,edi
c001f607:	0f ad d0             	shrd   eax,edx,cl
c001f60a:	d3 fa                	sar    edx,cl
c001f60c:	f6 c1 20             	test   cl,0x20
c001f60f:	74 05                	je     c001f616 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f611:	89 d0                	mov    eax,edx
c001f613:	c1 fa 1f             	sar    edx,0x1f
c001f616:	85 db                	test   ebx,ebx
c001f618:	79 07                	jns    c001f621 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f61a:	f7 d8                	neg    eax
c001f61c:	83 d2 00             	adc    edx,0x0
c001f61f:	f7 da                	neg    edx
c001f621:	5b                   	pop    ebx
c001f622:	5e                   	pop    esi
c001f623:	5f                   	pop    edi
c001f624:	c3                   	ret    

c001f625 <Vm::fpuULongToFloat(unsigned long long)>:
c001f625:	57                   	push   edi
c001f626:	31 c9                	xor    ecx,ecx
c001f628:	56                   	push   esi
c001f629:	53                   	push   ebx
c001f62a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f62e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f632:	0f ba e7 14          	bt     edi,0x14
c001f636:	72 07                	jb     c001f63f <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f638:	01 f6                	add    esi,esi
c001f63a:	11 ff                	adc    edi,edi
c001f63c:	41                   	inc    ecx
c001f63d:	eb f3                	jmp    c001f632 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f63f:	89 fa                	mov    edx,edi
c001f641:	89 f0                	mov    eax,esi
c001f643:	bb 33 04 00 00       	mov    ebx,0x433
c001f648:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f64e:	29 cb                	sub    ebx,ecx
c001f650:	89 d9                	mov    ecx,ebx
c001f652:	5b                   	pop    ebx
c001f653:	c1 e1 14             	shl    ecx,0x14
c001f656:	5e                   	pop    esi
c001f657:	09 ca                	or     edx,ecx
c001f659:	5f                   	pop    edi
c001f65a:	c3                   	ret    

c001f65b <Vm::fpuLongToFloat(long long)>:
c001f65b:	56                   	push   esi
c001f65c:	31 c0                	xor    eax,eax
c001f65e:	53                   	push   ebx
c001f65f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f663:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f667:	39 c8                	cmp    eax,ecx
c001f669:	19 d8                	sbb    eax,ebx
c001f66b:	7d 04                	jge    c001f671 <Vm::fpuLongToFloat(long long)+0x16>
c001f66d:	31 f6                	xor    esi,esi
c001f66f:	eb 0c                	jmp    c001f67d <Vm::fpuLongToFloat(long long)+0x22>
c001f671:	f7 d9                	neg    ecx
c001f673:	be 01 00 00 00       	mov    esi,0x1
c001f678:	83 d3 00             	adc    ebx,0x0
c001f67b:	f7 db                	neg    ebx
c001f67d:	31 c0                	xor    eax,eax
c001f67f:	0f ba e3 14          	bt     ebx,0x14
c001f683:	72 07                	jb     c001f68c <Vm::fpuLongToFloat(long long)+0x31>
c001f685:	01 c9                	add    ecx,ecx
c001f687:	11 db                	adc    ebx,ebx
c001f689:	40                   	inc    eax
c001f68a:	eb f3                	jmp    c001f67f <Vm::fpuLongToFloat(long long)+0x24>
c001f68c:	ba 33 04 00 00       	mov    edx,0x433
c001f691:	29 c2                	sub    edx,eax
c001f693:	89 c8                	mov    eax,ecx
c001f695:	c1 e2 14             	shl    edx,0x14
c001f698:	89 d9                	mov    ecx,ebx
c001f69a:	89 f3                	mov    ebx,esi
c001f69c:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f6a2:	09 ca                	or     edx,ecx
c001f6a4:	84 db                	test   bl,bl
c001f6a6:	74 06                	je     c001f6ae <Vm::fpuLongToFloat(long long)+0x53>
c001f6a8:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f6ae:	5b                   	pop    ebx
c001f6af:	5e                   	pop    esi
c001f6b0:	c3                   	ret    

c001f6b1 <Vm::fpuGet0()>:
c001f6b1:	31 c0                	xor    eax,eax
c001f6b3:	31 d2                	xor    edx,edx
c001f6b5:	c3                   	ret    

c001f6b6 <Vm::fpuGet1()>:
c001f6b6:	b8 01 00 00 00       	mov    eax,0x1
c001f6bb:	31 d2                	xor    edx,edx
c001f6bd:	c3                   	ret    

c001f6be <Vm::fpuGetPi()>:
c001f6be:	b8 03 00 00 00       	mov    eax,0x3
c001f6c3:	31 d2                	xor    edx,edx
c001f6c5:	c3                   	ret    

c001f6c6 <Vm::fpuGetLog2E()>:
c001f6c6:	83 ec 18             	sub    esp,0x18
c001f6c9:	68 0c c6 02 c0       	push   0xc002c60c
c001f6ce:	e8 dc ad ff ff       	call   c001a4af <Krnl::panic(char const*)>
c001f6d3:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f6d8:	31 d2                	xor    edx,edx
c001f6da:	83 c4 1c             	add    esp,0x1c
c001f6dd:	c3                   	ret    

c001f6de <Vm::fpuGetLogE2()>:
c001f6de:	83 ec 18             	sub    esp,0x18
c001f6e1:	68 18 c6 02 c0       	push   0xc002c618
c001f6e6:	e8 c4 ad ff ff       	call   c001a4af <Krnl::panic(char const*)>
c001f6eb:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f6f0:	31 d2                	xor    edx,edx
c001f6f2:	83 c4 1c             	add    esp,0x1c
c001f6f5:	c3                   	ret    

c001f6f6 <Vm::fpuGetLog210()>:
c001f6f6:	83 ec 18             	sub    esp,0x18
c001f6f9:	68 24 c6 02 c0       	push   0xc002c624
c001f6fe:	e8 ac ad ff ff       	call   c001a4af <Krnl::panic(char const*)>
c001f703:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f708:	31 d2                	xor    edx,edx
c001f70a:	83 c4 1c             	add    esp,0x1c
c001f70d:	c3                   	ret    

c001f70e <Vm::fpuGetLog102()>:
c001f70e:	83 ec 18             	sub    esp,0x18
c001f711:	68 31 c6 02 c0       	push   0xc002c631
c001f716:	e8 94 ad ff ff       	call   c001a4af <Krnl::panic(char const*)>
c001f71b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f720:	31 d2                	xor    edx,edx
c001f722:	83 c4 1c             	add    esp,0x1c
c001f725:	c3                   	ret    

c001f726 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f726:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f72a:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f72e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f732:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f736:	0f 92 c0             	setb   al
c001f739:	c3                   	ret    

c001f73a <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f73a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f73e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f742:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f746:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f74a:	09 c2                	or     edx,eax
c001f74c:	0f 94 c0             	sete   al
c001f74f:	c3                   	ret    

c001f750 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f750:	57                   	push   edi
c001f751:	56                   	push   esi
c001f752:	53                   	push   ebx
c001f753:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f757:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f75b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f75f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f763:	57                   	push   edi
c001f764:	56                   	push   esi
c001f765:	53                   	push   ebx
c001f766:	51                   	push   ecx
c001f767:	e8 ce ff ff ff       	call   c001f73a <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f76c:	83 c4 10             	add    esp,0x10
c001f76f:	88 c2                	mov    dl,al
c001f771:	31 c0                	xor    eax,eax
c001f773:	84 d2                	test   dl,dl
c001f775:	75 0c                	jne    c001f783 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f777:	57                   	push   edi
c001f778:	56                   	push   esi
c001f779:	53                   	push   ebx
c001f77a:	51                   	push   ecx
c001f77b:	e8 a6 ff ff ff       	call   c001f726 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f780:	83 c4 10             	add    esp,0x10
c001f783:	83 e0 01             	and    eax,0x1
c001f786:	5b                   	pop    ebx
c001f787:	88 c1                	mov    cl,al
c001f789:	83 e2 01             	and    edx,0x1
c001f78c:	a0 81 18 03 c0       	mov    al,ds:0xc0031881
c001f791:	c1 e2 06             	shl    edx,0x6
c001f794:	83 e0 ba             	and    eax,0xffffffba
c001f797:	5e                   	pop    esi
c001f798:	09 c8                	or     eax,ecx
c001f79a:	5f                   	pop    edi
c001f79b:	09 d0                	or     eax,edx
c001f79d:	a2 81 18 03 c0       	mov    ds:0xc0031881,al
c001f7a2:	c3                   	ret    

c001f7a3 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f7a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f7a7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f7ab:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f7af:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f7b3:	c3                   	ret    

c001f7b4 <Vm::fpuAbs(unsigned long long)>:
c001f7b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f7bc:	c3                   	ret    

c001f7bd <Vm::fpuChs(unsigned long long)>:
c001f7bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7c1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f7c5:	f7 d8                	neg    eax
c001f7c7:	83 d2 00             	adc    edx,0x0
c001f7ca:	f7 da                	neg    edx
c001f7cc:	c3                   	ret    

c001f7cd <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f7cd:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f7d1:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f7d6:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f7da:	eb c7                	jmp    c001f7a3 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f7dc <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f7dc:	53                   	push   ebx
c001f7dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f7e1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f7e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f7e9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f7ed:	0f af ca             	imul   ecx,edx
c001f7f0:	0f af d8             	imul   ebx,eax
c001f7f3:	f7 e2                	mul    edx
c001f7f5:	01 d9                	add    ecx,ebx
c001f7f7:	5b                   	pop    ebx
c001f7f8:	01 ca                	add    edx,ecx
c001f7fa:	c3                   	ret    

c001f7fb <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f7fb:	83 ec 0c             	sub    esp,0xc
c001f7fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f802:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f806:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f80a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f80e:	e8 99 70 00 00       	call   c00268ac <__udivdi3>
c001f813:	83 c4 1c             	add    esp,0x1c
c001f816:	c3                   	ret    

c001f817 <Vm::fpuSquare(unsigned long long)>:
c001f817:	50                   	push   eax
c001f818:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f81c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f820:	52                   	push   edx
c001f821:	50                   	push   eax
c001f822:	52                   	push   edx
c001f823:	50                   	push   eax
c001f824:	e8 b3 ff ff ff       	call   c001f7dc <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f829:	83 c4 14             	add    esp,0x14
c001f82c:	c3                   	ret    

c001f82d <Vm::fpuGetReg(int)>:
c001f82d:	83 ec 0c             	sub    esp,0xc
c001f830:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f835:	76 10                	jbe    c001f847 <Vm::fpuGetReg(int)+0x1a>
c001f837:	83 ec 0c             	sub    esp,0xc
c001f83a:	68 3e c6 02 c0       	push   0xc002c63e
c001f83f:	e8 6b ac ff ff       	call   c001a4af <Krnl::panic(char const*)>
c001f844:	83 c4 10             	add    esp,0x10
c001f847:	a0 81 18 03 c0       	mov    al,ds:0xc0031881
c001f84c:	b9 08 00 00 00       	mov    ecx,0x8
c001f851:	c0 e8 03             	shr    al,0x3
c001f854:	83 e0 07             	and    eax,0x7
c001f857:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f85b:	99                   	cdq    
c001f85c:	f7 f9                	idiv   ecx
c001f85e:	8b 04 d5 84 18 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce77c]
c001f865:	8b 14 d5 88 18 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce778]
c001f86c:	83 c4 0c             	add    esp,0xc
c001f86f:	c3                   	ret    

c001f870 <Vm::fpuSetReg(int, unsigned long long)>:
c001f870:	57                   	push   edi
c001f871:	56                   	push   esi
c001f872:	52                   	push   edx
c001f873:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f877:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f87b:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f880:	76 10                	jbe    c001f892 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f882:	83 ec 0c             	sub    esp,0xc
c001f885:	68 51 c6 02 c0       	push   0xc002c651
c001f88a:	e8 20 ac ff ff       	call   c001a4af <Krnl::panic(char const*)>
c001f88f:	83 c4 10             	add    esp,0x10
c001f892:	a0 81 18 03 c0       	mov    al,ds:0xc0031881
c001f897:	b9 08 00 00 00       	mov    ecx,0x8
c001f89c:	c0 e8 03             	shr    al,0x3
c001f89f:	83 e0 07             	and    eax,0x7
c001f8a2:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f8a6:	99                   	cdq    
c001f8a7:	f7 f9                	idiv   ecx
c001f8a9:	89 34 d5 84 18 03 c0 	mov    DWORD PTR [edx*8-0x3ffce77c],esi
c001f8b0:	89 3c d5 88 18 03 c0 	mov    DWORD PTR [edx*8-0x3ffce778],edi
c001f8b7:	58                   	pop    eax
c001f8b8:	5e                   	pop    esi
c001f8b9:	5f                   	pop    edi
c001f8ba:	c3                   	ret    

c001f8bb <Vm::fpuPush(unsigned long long)>:
c001f8bb:	a0 81 18 03 c0       	mov    al,ds:0xc0031881
c001f8c0:	c0 e8 03             	shr    al,0x3
c001f8c3:	83 e0 07             	and    eax,0x7
c001f8c6:	83 c0 07             	add    eax,0x7
c001f8c9:	88 c2                	mov    dl,al
c001f8cb:	83 e0 07             	and    eax,0x7
c001f8ce:	83 e2 07             	and    edx,0x7
c001f8d1:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f8d8:	8a 15 81 18 03 c0    	mov    dl,BYTE PTR ds:0xc0031881
c001f8de:	83 e2 c7             	and    edx,0xffffffc7
c001f8e1:	09 ca                	or     edx,ecx
c001f8e3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f8e7:	88 15 81 18 03 c0    	mov    BYTE PTR ds:0xc0031881,dl
c001f8ed:	89 0c c5 88 18 03 c0 	mov    DWORD PTR [eax*8-0x3ffce778],ecx
c001f8f4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f8f8:	89 14 c5 84 18 03 c0 	mov    DWORD PTR [eax*8-0x3ffce77c],edx
c001f8ff:	a1 c4 18 03 c0       	mov    eax,ds:0xc00318c4
c001f904:	83 f8 08             	cmp    eax,0x8
c001f907:	75 08                	jne    c001f911 <Vm::fpuPush(unsigned long long)+0x56>
c001f909:	80 0d 80 18 03 c0 40 	or     BYTE PTR ds:0xc0031880,0x40
c001f910:	c3                   	ret    
c001f911:	40                   	inc    eax
c001f912:	a3 c4 18 03 c0       	mov    ds:0xc00318c4,eax
c001f917:	c3                   	ret    

c001f918 <Vm::fpuPop()>:
c001f918:	8a 0d 81 18 03 c0    	mov    cl,BYTE PTR ds:0xc0031881
c001f91e:	53                   	push   ebx
c001f91f:	c0 e9 03             	shr    cl,0x3
c001f922:	8a 1d 81 18 03 c0    	mov    bl,BYTE PTR ds:0xc0031881
c001f928:	83 e1 07             	and    ecx,0x7
c001f92b:	83 e3 c7             	and    ebx,0xffffffc7
c001f92e:	8b 04 cd 84 18 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce77c]
c001f935:	8b 14 cd 88 18 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce778]
c001f93c:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f943:	83 e1 38             	and    ecx,0x38
c001f946:	09 d9                	or     ecx,ebx
c001f948:	88 0d 81 18 03 c0    	mov    BYTE PTR ds:0xc0031881,cl
c001f94e:	8b 0d c4 18 03 c0    	mov    ecx,DWORD PTR ds:0xc00318c4
c001f954:	85 c9                	test   ecx,ecx
c001f956:	74 09                	je     c001f961 <Vm::fpuPop()+0x49>
c001f958:	49                   	dec    ecx
c001f959:	89 0d c4 18 03 c0    	mov    DWORD PTR ds:0xc00318c4,ecx
c001f95f:	eb 07                	jmp    c001f968 <Vm::fpuPop()+0x50>
c001f961:	80 0d 80 18 03 c0 40 	or     BYTE PTR ds:0xc0031880,0x40
c001f968:	5b                   	pop    ebx
c001f969:	c3                   	ret    

c001f96a <Vm::x87Handler(regs*)>:
c001f96a:	55                   	push   ebp
c001f96b:	57                   	push   edi
c001f96c:	56                   	push   esi
c001f96d:	53                   	push   ebx
c001f96e:	83 ec 1c             	sub    esp,0x1c
c001f971:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f975:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f97a:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f97d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f985:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f989:	50                   	push   eax
c001f98a:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f98e:	50                   	push   eax
c001f98f:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f993:	50                   	push   eax
c001f994:	53                   	push   ebx
c001f995:	e8 dc a1 ff ff       	call   c0019b76 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f99a:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f99d:	83 c4 10             	add    esp,0x10
c001f9a0:	89 c6                	mov    esi,eax
c001f9a2:	80 fa d9             	cmp    dl,0xd9
c001f9a5:	0f 85 52 01 00 00    	jne    c001fafd <Vm::x87Handler(regs*)+0x193>
c001f9ab:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9af:	8d 50 20             	lea    edx,[eax+0x20]
c001f9b2:	80 fa 0e             	cmp    dl,0xe
c001f9b5:	0f 87 86 00 00 00    	ja     c001fa41 <Vm::x87Handler(regs*)+0xd7>
c001f9bb:	0f b6 d2             	movzx  edx,dl
c001f9be:	ff 24 95 64 c6 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd399c]
c001f9c5:	e8 e7 fc ff ff       	call   c001f6b1 <Vm::fpuGet0()>
c001f9ca:	eb 05                	jmp    c001f9d1 <Vm::x87Handler(regs*)+0x67>
c001f9cc:	e8 e5 fc ff ff       	call   c001f6b6 <Vm::fpuGet1()>
c001f9d1:	57                   	push   edi
c001f9d2:	57                   	push   edi
c001f9d3:	52                   	push   edx
c001f9d4:	50                   	push   eax
c001f9d5:	e8 e1 fe ff ff       	call   c001f8bb <Vm::fpuPush(unsigned long long)>
c001f9da:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f9de:	83 c4 10             	add    esp,0x10
c001f9e1:	b0 01                	mov    al,0x1
c001f9e3:	e9 e3 09 00 00       	jmp    c00203cb <Vm::x87Handler(regs*)+0xa61>
c001f9e8:	83 ec 0c             	sub    esp,0xc
c001f9eb:	6a 00                	push   0x0
c001f9ed:	e8 3b fe ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c001f9f2:	59                   	pop    ecx
c001f9f3:	5e                   	pop    esi
c001f9f4:	52                   	push   edx
c001f9f5:	50                   	push   eax
c001f9f6:	e8 c2 fd ff ff       	call   c001f7bd <Vm::fpuChs(unsigned long long)>
c001f9fb:	eb 13                	jmp    c001fa10 <Vm::x87Handler(regs*)+0xa6>
c001f9fd:	83 ec 0c             	sub    esp,0xc
c001fa00:	6a 00                	push   0x0
c001fa02:	e8 26 fe ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c001fa07:	5f                   	pop    edi
c001fa08:	5d                   	pop    ebp
c001fa09:	52                   	push   edx
c001fa0a:	50                   	push   eax
c001fa0b:	e8 a4 fd ff ff       	call   c001f7b4 <Vm::fpuAbs(unsigned long long)>
c001fa10:	83 c4 0c             	add    esp,0xc
c001fa13:	52                   	push   edx
c001fa14:	50                   	push   eax
c001fa15:	6a 00                	push   0x0
c001fa17:	e8 54 fe ff ff       	call   c001f870 <Vm::fpuSetReg(int, unsigned long long)>
c001fa1c:	eb bc                	jmp    c001f9da <Vm::x87Handler(regs*)+0x70>
c001fa1e:	e8 d3 fc ff ff       	call   c001f6f6 <Vm::fpuGetLog210()>
c001fa23:	eb ac                	jmp    c001f9d1 <Vm::x87Handler(regs*)+0x67>
c001fa25:	e8 9c fc ff ff       	call   c001f6c6 <Vm::fpuGetLog2E()>
c001fa2a:	eb a5                	jmp    c001f9d1 <Vm::x87Handler(regs*)+0x67>
c001fa2c:	e8 8d fc ff ff       	call   c001f6be <Vm::fpuGetPi()>
c001fa31:	eb 9e                	jmp    c001f9d1 <Vm::x87Handler(regs*)+0x67>
c001fa33:	e8 d6 fc ff ff       	call   c001f70e <Vm::fpuGetLog102()>
c001fa38:	eb 97                	jmp    c001f9d1 <Vm::x87Handler(regs*)+0x67>
c001fa3a:	e8 9f fc ff ff       	call   c001f6de <Vm::fpuGetLogE2()>
c001fa3f:	eb 90                	jmp    c001f9d1 <Vm::x87Handler(regs*)+0x67>
c001fa41:	8d 50 40             	lea    edx,[eax+0x40]
c001fa44:	80 fa 07             	cmp    dl,0x7
c001fa47:	77 15                	ja     c001fa5e <Vm::x87Handler(regs*)+0xf4>
c001fa49:	83 ec 0c             	sub    esp,0xc
c001fa4c:	2d c0 00 00 00       	sub    eax,0xc0
c001fa51:	50                   	push   eax
c001fa52:	e8 d6 fd ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c001fa57:	59                   	pop    ecx
c001fa58:	5e                   	pop    esi
c001fa59:	e9 75 ff ff ff       	jmp    c001f9d3 <Vm::x87Handler(regs*)+0x69>
c001fa5e:	8d 50 38             	lea    edx,[eax+0x38]
c001fa61:	80 fa 07             	cmp    dl,0x7
c001fa64:	77 3c                	ja     c001faa2 <Vm::x87Handler(regs*)+0x138>
c001fa66:	83 ec 0c             	sub    esp,0xc
c001fa69:	2d c8 00 00 00       	sub    eax,0xc8
c001fa6e:	50                   	push   eax
c001fa6f:	e8 b9 fd ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c001fa74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa7b:	89 c6                	mov    esi,eax
c001fa7d:	89 d7                	mov    edi,edx
c001fa7f:	e8 a9 fd ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c001fa84:	83 c4 0c             	add    esp,0xc
c001fa87:	52                   	push   edx
c001fa88:	50                   	push   eax
c001fa89:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa8d:	2d c8 00 00 00       	sub    eax,0xc8
c001fa92:	50                   	push   eax
c001fa93:	e8 d8 fd ff ff       	call   c001f870 <Vm::fpuSetReg(int, unsigned long long)>
c001fa98:	83 c4 0c             	add    esp,0xc
c001fa9b:	57                   	push   edi
c001fa9c:	56                   	push   esi
c001fa9d:	e9 73 ff ff ff       	jmp    c001fa15 <Vm::x87Handler(regs*)+0xab>
c001faa2:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001faa6:	84 d2                	test   dl,dl
c001faa8:	75 0f                	jne    c001fab9 <Vm::x87Handler(regs*)+0x14f>
c001faaa:	83 ec 0c             	sub    esp,0xc
c001faad:	ff 36                	push   DWORD PTR [esi]
c001faaf:	e8 c8 fa ff ff       	call   c001f57c <Vm::fpu32ToInternal(unsigned int)>
c001fab4:	e9 bf 00 00 00       	jmp    c001fb78 <Vm::x87Handler(regs*)+0x20e>
c001fab9:	80 fa 03             	cmp    dl,0x3
c001fabc:	75 13                	jne    c001fad1 <Vm::x87Handler(regs*)+0x167>
c001fabe:	e8 55 fe ff ff       	call   c001f918 <Vm::fpuPop()>
c001fac3:	55                   	push   ebp
c001fac4:	55                   	push   ebp
c001fac5:	52                   	push   edx
c001fac6:	50                   	push   eax
c001fac7:	e8 4c fa ff ff       	call   c001f518 <Vm::fpuInternalTo32(unsigned long long)>
c001facc:	e9 88 00 00 00       	jmp    c001fb59 <Vm::x87Handler(regs*)+0x1ef>
c001fad1:	80 fa 05             	cmp    dl,0x5
c001fad4:	75 0e                	jne    c001fae4 <Vm::x87Handler(regs*)+0x17a>
c001fad6:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fad9:	66 a3 82 18 03 c0    	mov    ds:0xc0031882,ax
c001fadf:	e9 df 00 00 00       	jmp    c001fbc3 <Vm::x87Handler(regs*)+0x259>
c001fae4:	31 c0                	xor    eax,eax
c001fae6:	80 fa 07             	cmp    dl,0x7
c001fae9:	0f 85 dc 08 00 00    	jne    c00203cb <Vm::x87Handler(regs*)+0xa61>
c001faef:	66 a1 82 18 03 c0    	mov    ax,ds:0xc0031882
c001faf5:	66 89 06             	mov    WORD PTR [esi],ax
c001faf8:	e9 c6 00 00 00       	jmp    c001fbc3 <Vm::x87Handler(regs*)+0x259>
c001fafd:	80 fa d8             	cmp    dl,0xd8
c001fb00:	0f 84 c9 00 00 00    	je     c001fbcf <Vm::x87Handler(regs*)+0x265>
c001fb06:	80 fa dc             	cmp    dl,0xdc
c001fb09:	0f 84 0d 02 00 00    	je     c001fd1c <Vm::x87Handler(regs*)+0x3b2>
c001fb0f:	80 fa de             	cmp    dl,0xde
c001fb12:	0f 84 cd 02 00 00    	je     c001fde5 <Vm::x87Handler(regs*)+0x47b>
c001fb18:	80 fa dd             	cmp    dl,0xdd
c001fb1b:	0f 84 5f 04 00 00    	je     c001ff80 <Vm::x87Handler(regs*)+0x616>
c001fb21:	80 fa da             	cmp    dl,0xda
c001fb24:	0f 84 24 05 00 00    	je     c002004e <Vm::x87Handler(regs*)+0x6e4>
c001fb2a:	80 fa df             	cmp    dl,0xdf
c001fb2d:	0f 84 68 05 00 00    	je     c002009b <Vm::x87Handler(regs*)+0x731>
c001fb33:	31 c0                	xor    eax,eax
c001fb35:	80 fa db             	cmp    dl,0xdb
c001fb38:	0f 85 8d 08 00 00    	jne    c00203cb <Vm::x87Handler(regs*)+0xa61>
c001fb3e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fb42:	80 fa 03             	cmp    dl,0x3
c001fb45:	0f 85 70 06 00 00    	jne    c00201bb <Vm::x87Handler(regs*)+0x851>
c001fb4b:	e8 c8 fd ff ff       	call   c001f918 <Vm::fpuPop()>
c001fb50:	55                   	push   ebp
c001fb51:	55                   	push   ebp
c001fb52:	52                   	push   edx
c001fb53:	50                   	push   eax
c001fb54:	e8 71 fa ff ff       	call   c001f5ca <Vm::fpuFloatToLong(unsigned long long)>
c001fb59:	83 c4 10             	add    esp,0x10
c001fb5c:	89 06                	mov    DWORD PTR [esi],eax
c001fb5e:	eb 63                	jmp    c001fbc3 <Vm::x87Handler(regs*)+0x259>
c001fb60:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fb64:	84 d2                	test   dl,dl
c001fb66:	0f 85 e6 05 00 00    	jne    c0020152 <Vm::x87Handler(regs*)+0x7e8>
c001fb6c:	57                   	push   edi
c001fb6d:	57                   	push   edi
c001fb6e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb71:	ff 36                	push   DWORD PTR [esi]
c001fb73:	e8 49 fa ff ff       	call   c001f5c1 <Vm::fpu64ToInternal(unsigned long long)>
c001fb78:	5e                   	pop    esi
c001fb79:	5f                   	pop    edi
c001fb7a:	52                   	push   edx
c001fb7b:	50                   	push   eax
c001fb7c:	e8 3a fd ff ff       	call   c001f8bb <Vm::fpuPush(unsigned long long)>
c001fb81:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fb85:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fb88:	e9 51 fe ff ff       	jmp    c001f9de <Vm::x87Handler(regs*)+0x74>
c001fb8d:	80 fa 03             	cmp    dl,0x3
c001fb90:	0f 85 d7 06 00 00    	jne    c002026d <Vm::x87Handler(regs*)+0x903>
c001fb96:	57                   	push   edi
c001fb97:	57                   	push   edi
c001fb98:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb9b:	ff 36                	push   DWORD PTR [esi]
c001fb9d:	e8 1f fa ff ff       	call   c001f5c1 <Vm::fpu64ToInternal(unsigned long long)>
c001fba2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fba9:	89 c6                	mov    esi,eax
c001fbab:	89 d7                	mov    edi,edx
c001fbad:	e8 7b fc ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c001fbb2:	57                   	push   edi
c001fbb3:	56                   	push   esi
c001fbb4:	52                   	push   edx
c001fbb5:	50                   	push   eax
c001fbb6:	e8 95 fb ff ff       	call   c001f750 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fbbb:	83 c4 20             	add    esp,0x20
c001fbbe:	e8 55 fd ff ff       	call   c001f918 <Vm::fpuPop()>
c001fbc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fbc7:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fbca:	e9 12 fe ff ff       	jmp    c001f9e1 <Vm::x87Handler(regs*)+0x77>
c001fbcf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fbd3:	8d 50 40             	lea    edx,[eax+0x40]
c001fbd6:	80 fa 07             	cmp    dl,0x7
c001fbd9:	77 29                	ja     c001fc04 <Vm::x87Handler(regs*)+0x29a>
c001fbdb:	83 ec 0c             	sub    esp,0xc
c001fbde:	2d c0 00 00 00       	sub    eax,0xc0
c001fbe3:	50                   	push   eax
c001fbe4:	e8 44 fc ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c001fbe9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbf0:	89 c6                	mov    esi,eax
c001fbf2:	89 d7                	mov    edi,edx
c001fbf4:	e8 34 fc ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c001fbf9:	57                   	push   edi
c001fbfa:	56                   	push   esi
c001fbfb:	52                   	push   edx
c001fbfc:	50                   	push   eax
c001fbfd:	e8 a1 fb ff ff       	call   c001f7a3 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fc02:	eb 2f                	jmp    c001fc33 <Vm::x87Handler(regs*)+0x2c9>
c001fc04:	8d 50 38             	lea    edx,[eax+0x38]
c001fc07:	80 fa 07             	cmp    dl,0x7
c001fc0a:	77 2f                	ja     c001fc3b <Vm::x87Handler(regs*)+0x2d1>
c001fc0c:	83 ec 0c             	sub    esp,0xc
c001fc0f:	2d c8 00 00 00       	sub    eax,0xc8
c001fc14:	50                   	push   eax
c001fc15:	e8 13 fc ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c001fc1a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc21:	89 c6                	mov    esi,eax
c001fc23:	89 d7                	mov    edi,edx
c001fc25:	e8 03 fc ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c001fc2a:	57                   	push   edi
c001fc2b:	56                   	push   esi
c001fc2c:	52                   	push   edx
c001fc2d:	50                   	push   eax
c001fc2e:	e8 a9 fb ff ff       	call   c001f7dc <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fc33:	83 c4 1c             	add    esp,0x1c
c001fc36:	e9 d8 fd ff ff       	jmp    c001fa13 <Vm::x87Handler(regs*)+0xa9>
c001fc3b:	8d 50 30             	lea    edx,[eax+0x30]
c001fc3e:	80 fa 07             	cmp    dl,0x7
c001fc41:	77 0d                	ja     c001fc50 <Vm::x87Handler(regs*)+0x2e6>
c001fc43:	83 ec 0c             	sub    esp,0xc
c001fc46:	2d d0 00 00 00       	sub    eax,0xd0
c001fc4b:	e9 99 03 00 00       	jmp    c001ffe9 <Vm::x87Handler(regs*)+0x67f>
c001fc50:	8d 50 28             	lea    edx,[eax+0x28]
c001fc53:	80 fa 07             	cmp    dl,0x7
c001fc56:	77 0d                	ja     c001fc65 <Vm::x87Handler(regs*)+0x2fb>
c001fc58:	83 ec 0c             	sub    esp,0xc
c001fc5b:	2d d8 00 00 00       	sub    eax,0xd8
c001fc60:	e9 c0 03 00 00       	jmp    c0020025 <Vm::x87Handler(regs*)+0x6bb>
c001fc65:	8d 50 20             	lea    edx,[eax+0x20]
c001fc68:	80 fa 07             	cmp    dl,0x7
c001fc6b:	77 1b                	ja     c001fc88 <Vm::x87Handler(regs*)+0x31e>
c001fc6d:	83 ec 0c             	sub    esp,0xc
c001fc70:	2d e0 00 00 00       	sub    eax,0xe0
c001fc75:	50                   	push   eax
c001fc76:	e8 b2 fb ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c001fc7b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc82:	89 c6                	mov    esi,eax
c001fc84:	89 d7                	mov    edi,edx
c001fc86:	eb 22                	jmp    c001fcaa <Vm::x87Handler(regs*)+0x340>
c001fc88:	8d 50 18             	lea    edx,[eax+0x18]
c001fc8b:	80 fa 07             	cmp    dl,0x7
c001fc8e:	77 2d                	ja     c001fcbd <Vm::x87Handler(regs*)+0x353>
c001fc90:	83 ec 0c             	sub    esp,0xc
c001fc93:	6a 00                	push   0x0
c001fc95:	e8 93 fb ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c001fc9a:	89 c6                	mov    esi,eax
c001fc9c:	89 d7                	mov    edi,edx
c001fc9e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fca2:	2d e8 00 00 00       	sub    eax,0xe8
c001fca7:	89 04 24             	mov    DWORD PTR [esp],eax
c001fcaa:	e8 7e fb ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c001fcaf:	57                   	push   edi
c001fcb0:	56                   	push   esi
c001fcb1:	52                   	push   edx
c001fcb2:	50                   	push   eax
c001fcb3:	e8 15 fb ff ff       	call   c001f7cd <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fcb8:	e9 76 ff ff ff       	jmp    c001fc33 <Vm::x87Handler(regs*)+0x2c9>
c001fcbd:	8d 50 10             	lea    edx,[eax+0x10]
c001fcc0:	80 fa 07             	cmp    dl,0x7
c001fcc3:	77 1b                	ja     c001fce0 <Vm::x87Handler(regs*)+0x376>
c001fcc5:	83 ec 0c             	sub    esp,0xc
c001fcc8:	2d f0 00 00 00       	sub    eax,0xf0
c001fccd:	50                   	push   eax
c001fcce:	e8 5a fb ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c001fcd3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcda:	89 c6                	mov    esi,eax
c001fcdc:	89 d7                	mov    edi,edx
c001fcde:	eb 22                	jmp    c001fd02 <Vm::x87Handler(regs*)+0x398>
c001fce0:	3c f7                	cmp    al,0xf7
c001fce2:	0f 86 d1 03 00 00    	jbe    c00200b9 <Vm::x87Handler(regs*)+0x74f>
c001fce8:	83 ec 0c             	sub    esp,0xc
c001fceb:	6a 00                	push   0x0
c001fced:	e8 3b fb ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c001fcf2:	89 c6                	mov    esi,eax
c001fcf4:	89 d7                	mov    edi,edx
c001fcf6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fcfa:	2d f8 00 00 00       	sub    eax,0xf8
c001fcff:	89 04 24             	mov    DWORD PTR [esp],eax
c001fd02:	e8 26 fb ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c001fd07:	57                   	push   edi
c001fd08:	56                   	push   esi
c001fd09:	52                   	push   edx
c001fd0a:	50                   	push   eax
c001fd0b:	e8 eb fa ff ff       	call   c001f7fb <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fd10:	83 c4 1c             	add    esp,0x1c
c001fd13:	52                   	push   edx
c001fd14:	50                   	push   eax
c001fd15:	6a 00                	push   0x0
c001fd17:	e9 51 02 00 00       	jmp    c001ff6d <Vm::x87Handler(regs*)+0x603>
c001fd1c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd20:	8d 50 40             	lea    edx,[eax+0x40]
c001fd23:	80 fa 07             	cmp    dl,0x7
c001fd26:	77 37                	ja     c001fd5f <Vm::x87Handler(regs*)+0x3f5>
c001fd28:	83 ec 0c             	sub    esp,0xc
c001fd2b:	2d c0 00 00 00       	sub    eax,0xc0
c001fd30:	50                   	push   eax
c001fd31:	e8 f7 fa ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c001fd36:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd3d:	89 c6                	mov    esi,eax
c001fd3f:	89 d7                	mov    edi,edx
c001fd41:	e8 e7 fa ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c001fd46:	57                   	push   edi
c001fd47:	56                   	push   esi
c001fd48:	52                   	push   edx
c001fd49:	50                   	push   eax
c001fd4a:	e8 54 fa ff ff       	call   c001f7a3 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fd4f:	83 c4 1c             	add    esp,0x1c
c001fd52:	52                   	push   edx
c001fd53:	50                   	push   eax
c001fd54:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd58:	2d c0 00 00 00       	sub    eax,0xc0
c001fd5d:	eb 3d                	jmp    c001fd9c <Vm::x87Handler(regs*)+0x432>
c001fd5f:	8d 50 38             	lea    edx,[eax+0x38]
c001fd62:	80 fa 07             	cmp    dl,0x7
c001fd65:	77 3b                	ja     c001fda2 <Vm::x87Handler(regs*)+0x438>
c001fd67:	83 ec 0c             	sub    esp,0xc
c001fd6a:	2d c8 00 00 00       	sub    eax,0xc8
c001fd6f:	50                   	push   eax
c001fd70:	e8 b8 fa ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c001fd75:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd7c:	89 c6                	mov    esi,eax
c001fd7e:	89 d7                	mov    edi,edx
c001fd80:	e8 a8 fa ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c001fd85:	57                   	push   edi
c001fd86:	56                   	push   esi
c001fd87:	52                   	push   edx
c001fd88:	50                   	push   eax
c001fd89:	e8 4e fa ff ff       	call   c001f7dc <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fd8e:	83 c4 1c             	add    esp,0x1c
c001fd91:	52                   	push   edx
c001fd92:	50                   	push   eax
c001fd93:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd97:	2d c8 00 00 00       	sub    eax,0xc8
c001fd9c:	50                   	push   eax
c001fd9d:	e9 75 fc ff ff       	jmp    c001fa17 <Vm::x87Handler(regs*)+0xad>
c001fda2:	83 c0 18             	add    eax,0x18
c001fda5:	3c 07                	cmp    al,0x7
c001fda7:	0f 87 3b 04 00 00    	ja     c00201e8 <Vm::x87Handler(regs*)+0x87e>
c001fdad:	83 ec 0c             	sub    esp,0xc
c001fdb0:	6a 00                	push   0x0
c001fdb2:	e8 76 fa ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c001fdb7:	89 c6                	mov    esi,eax
c001fdb9:	89 d7                	mov    edi,edx
c001fdbb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdbf:	2d e8 00 00 00       	sub    eax,0xe8
c001fdc4:	89 04 24             	mov    DWORD PTR [esp],eax
c001fdc7:	e8 61 fa ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c001fdcc:	57                   	push   edi
c001fdcd:	56                   	push   esi
c001fdce:	52                   	push   edx
c001fdcf:	50                   	push   eax
c001fdd0:	e8 f8 f9 ff ff       	call   c001f7cd <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fdd5:	83 c4 1c             	add    esp,0x1c
c001fdd8:	52                   	push   edx
c001fdd9:	50                   	push   eax
c001fdda:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdde:	2d e8 00 00 00       	sub    eax,0xe8
c001fde3:	eb b7                	jmp    c001fd9c <Vm::x87Handler(regs*)+0x432>
c001fde5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fde9:	8d 50 40             	lea    edx,[eax+0x40]
c001fdec:	80 fa 07             	cmp    dl,0x7
c001fdef:	77 3a                	ja     c001fe2b <Vm::x87Handler(regs*)+0x4c1>
c001fdf1:	83 ec 0c             	sub    esp,0xc
c001fdf4:	2d c0 00 00 00       	sub    eax,0xc0
c001fdf9:	50                   	push   eax
c001fdfa:	e8 2e fa ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c001fdff:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe06:	89 c6                	mov    esi,eax
c001fe08:	89 d7                	mov    edi,edx
c001fe0a:	e8 1e fa ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c001fe0f:	57                   	push   edi
c001fe10:	56                   	push   esi
c001fe11:	52                   	push   edx
c001fe12:	50                   	push   eax
c001fe13:	e8 8b f9 ff ff       	call   c001f7a3 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fe18:	83 c4 1c             	add    esp,0x1c
c001fe1b:	52                   	push   edx
c001fe1c:	50                   	push   eax
c001fe1d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe21:	2d c0 00 00 00       	sub    eax,0xc0
c001fe26:	e9 9e 01 00 00       	jmp    c001ffc9 <Vm::x87Handler(regs*)+0x65f>
c001fe2b:	8d 50 20             	lea    edx,[eax+0x20]
c001fe2e:	80 fa 07             	cmp    dl,0x7
c001fe31:	77 3a                	ja     c001fe6d <Vm::x87Handler(regs*)+0x503>
c001fe33:	83 ec 0c             	sub    esp,0xc
c001fe36:	2d e0 00 00 00       	sub    eax,0xe0
c001fe3b:	50                   	push   eax
c001fe3c:	e8 ec f9 ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c001fe41:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe48:	89 c6                	mov    esi,eax
c001fe4a:	89 d7                	mov    edi,edx
c001fe4c:	e8 dc f9 ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c001fe51:	57                   	push   edi
c001fe52:	56                   	push   esi
c001fe53:	52                   	push   edx
c001fe54:	50                   	push   eax
c001fe55:	e8 73 f9 ff ff       	call   c001f7cd <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe5a:	83 c4 1c             	add    esp,0x1c
c001fe5d:	52                   	push   edx
c001fe5e:	50                   	push   eax
c001fe5f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe63:	2d e0 00 00 00       	sub    eax,0xe0
c001fe68:	e9 5c 01 00 00       	jmp    c001ffc9 <Vm::x87Handler(regs*)+0x65f>
c001fe6d:	8d 50 18             	lea    edx,[eax+0x18]
c001fe70:	80 fa 07             	cmp    dl,0x7
c001fe73:	77 3b                	ja     c001feb0 <Vm::x87Handler(regs*)+0x546>
c001fe75:	83 ec 0c             	sub    esp,0xc
c001fe78:	6a 00                	push   0x0
c001fe7a:	e8 ae f9 ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c001fe7f:	89 c6                	mov    esi,eax
c001fe81:	89 d7                	mov    edi,edx
c001fe83:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe87:	2d e8 00 00 00       	sub    eax,0xe8
c001fe8c:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe8f:	e8 99 f9 ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c001fe94:	57                   	push   edi
c001fe95:	56                   	push   esi
c001fe96:	52                   	push   edx
c001fe97:	50                   	push   eax
c001fe98:	e8 30 f9 ff ff       	call   c001f7cd <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe9d:	83 c4 1c             	add    esp,0x1c
c001fea0:	52                   	push   edx
c001fea1:	50                   	push   eax
c001fea2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fea6:	2d e8 00 00 00       	sub    eax,0xe8
c001feab:	e9 19 01 00 00       	jmp    c001ffc9 <Vm::x87Handler(regs*)+0x65f>
c001feb0:	8d 50 38             	lea    edx,[eax+0x38]
c001feb3:	80 fa 07             	cmp    dl,0x7
c001feb6:	77 37                	ja     c001feef <Vm::x87Handler(regs*)+0x585>
c001feb8:	83 ec 0c             	sub    esp,0xc
c001febb:	2d c8 00 00 00       	sub    eax,0xc8
c001fec0:	50                   	push   eax
c001fec1:	e8 67 f9 ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c001fec6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fecd:	89 c6                	mov    esi,eax
c001fecf:	89 d7                	mov    edi,edx
c001fed1:	e8 57 f9 ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c001fed6:	57                   	push   edi
c001fed7:	56                   	push   esi
c001fed8:	52                   	push   edx
c001fed9:	50                   	push   eax
c001feda:	e8 fd f8 ff ff       	call   c001f7dc <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fedf:	83 c4 1c             	add    esp,0x1c
c001fee2:	52                   	push   edx
c001fee3:	50                   	push   eax
c001fee4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fee8:	2d c8 00 00 00       	sub    eax,0xc8
c001feed:	eb 7d                	jmp    c001ff6c <Vm::x87Handler(regs*)+0x602>
c001feef:	3c f7                	cmp    al,0xf7
c001fef1:	76 38                	jbe    c001ff2b <Vm::x87Handler(regs*)+0x5c1>
c001fef3:	83 ec 0c             	sub    esp,0xc
c001fef6:	6a 00                	push   0x0
c001fef8:	e8 30 f9 ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c001fefd:	89 c6                	mov    esi,eax
c001feff:	89 d7                	mov    edi,edx
c001ff01:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff05:	2d f8 00 00 00       	sub    eax,0xf8
c001ff0a:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff0d:	e8 1b f9 ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c001ff12:	57                   	push   edi
c001ff13:	56                   	push   esi
c001ff14:	52                   	push   edx
c001ff15:	50                   	push   eax
c001ff16:	e8 e0 f8 ff ff       	call   c001f7fb <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ff1b:	83 c4 1c             	add    esp,0x1c
c001ff1e:	52                   	push   edx
c001ff1f:	50                   	push   eax
c001ff20:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff24:	2d f8 00 00 00       	sub    eax,0xf8
c001ff29:	eb 41                	jmp    c001ff6c <Vm::x87Handler(regs*)+0x602>
c001ff2b:	8d 50 10             	lea    edx,[eax+0x10]
c001ff2e:	80 fa 07             	cmp    dl,0x7
c001ff31:	0f 87 5a 01 00 00    	ja     c0020091 <Vm::x87Handler(regs*)+0x727>
c001ff37:	83 ec 0c             	sub    esp,0xc
c001ff3a:	2d f0 00 00 00       	sub    eax,0xf0
c001ff3f:	50                   	push   eax
c001ff40:	e8 e8 f8 ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c001ff45:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff4c:	89 c6                	mov    esi,eax
c001ff4e:	89 d7                	mov    edi,edx
c001ff50:	e8 d8 f8 ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c001ff55:	57                   	push   edi
c001ff56:	56                   	push   esi
c001ff57:	52                   	push   edx
c001ff58:	50                   	push   eax
c001ff59:	e8 9d f8 ff ff       	call   c001f7fb <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ff5e:	83 c4 1c             	add    esp,0x1c
c001ff61:	52                   	push   edx
c001ff62:	50                   	push   eax
c001ff63:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff67:	2d f0 00 00 00       	sub    eax,0xf0
c001ff6c:	50                   	push   eax
c001ff6d:	e8 fe f8 ff ff       	call   c001f870 <Vm::fpuSetReg(int, unsigned long long)>
c001ff72:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ff76:	e8 9d f9 ff ff       	call   c001f918 <Vm::fpuPop()>
c001ff7b:	e9 5e fa ff ff       	jmp    c001f9de <Vm::x87Handler(regs*)+0x74>
c001ff80:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff84:	8d 50 30             	lea    edx,[eax+0x30]
c001ff87:	80 fa 07             	cmp    dl,0x7
c001ff8a:	77 1d                	ja     c001ffa9 <Vm::x87Handler(regs*)+0x63f>
c001ff8c:	83 ec 0c             	sub    esp,0xc
c001ff8f:	6a 00                	push   0x0
c001ff91:	e8 97 f8 ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c001ff96:	83 c4 0c             	add    esp,0xc
c001ff99:	52                   	push   edx
c001ff9a:	50                   	push   eax
c001ff9b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff9f:	2d d0 00 00 00       	sub    eax,0xd0
c001ffa4:	e9 f3 fd ff ff       	jmp    c001fd9c <Vm::x87Handler(regs*)+0x432>
c001ffa9:	8d 50 28             	lea    edx,[eax+0x28]
c001ffac:	80 fa 07             	cmp    dl,0x7
c001ffaf:	77 28                	ja     c001ffd9 <Vm::x87Handler(regs*)+0x66f>
c001ffb1:	83 ec 0c             	sub    esp,0xc
c001ffb4:	6a 00                	push   0x0
c001ffb6:	e8 72 f8 ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c001ffbb:	83 c4 0c             	add    esp,0xc
c001ffbe:	52                   	push   edx
c001ffbf:	50                   	push   eax
c001ffc0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffc4:	2d d8 00 00 00       	sub    eax,0xd8
c001ffc9:	50                   	push   eax
c001ffca:	e8 a1 f8 ff ff       	call   c001f870 <Vm::fpuSetReg(int, unsigned long long)>
c001ffcf:	e8 44 f9 ff ff       	call   c001f918 <Vm::fpuPop()>
c001ffd4:	e9 01 fa ff ff       	jmp    c001f9da <Vm::x87Handler(regs*)+0x70>
c001ffd9:	8d 50 20             	lea    edx,[eax+0x20]
c001ffdc:	80 fa 07             	cmp    dl,0x7
c001ffdf:	77 30                	ja     c0020011 <Vm::x87Handler(regs*)+0x6a7>
c001ffe1:	83 ec 0c             	sub    esp,0xc
c001ffe4:	2d e0 00 00 00       	sub    eax,0xe0
c001ffe9:	50                   	push   eax
c001ffea:	e8 3e f8 ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c001ffef:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fff6:	89 c6                	mov    esi,eax
c001fff8:	89 d7                	mov    edi,edx
c001fffa:	e8 2e f8 ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c001ffff:	57                   	push   edi
c0020000:	56                   	push   esi
c0020001:	52                   	push   edx
c0020002:	50                   	push   eax
c0020003:	e8 48 f7 ff ff       	call   c001f750 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020008:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002000c:	e9 54 02 00 00       	jmp    c0020265 <Vm::x87Handler(regs*)+0x8fb>
c0020011:	8d 50 18             	lea    edx,[eax+0x18]
c0020014:	80 fa 07             	cmp    dl,0x7
c0020017:	0f 87 43 fb ff ff    	ja     c001fb60 <Vm::x87Handler(regs*)+0x1f6>
c002001d:	83 ec 0c             	sub    esp,0xc
c0020020:	2d e8 00 00 00       	sub    eax,0xe8
c0020025:	50                   	push   eax
c0020026:	e8 02 f8 ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c002002b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020032:	89 c6                	mov    esi,eax
c0020034:	89 d7                	mov    edi,edx
c0020036:	e8 f2 f7 ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c002003b:	57                   	push   edi
c002003c:	56                   	push   esi
c002003d:	52                   	push   edx
c002003e:	50                   	push   eax
c002003f:	e8 0c f7 ff ff       	call   c001f750 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020044:	83 c4 20             	add    esp,0x20
c0020047:	e8 cc f8 ff ff       	call   c001f918 <Vm::fpuPop()>
c002004c:	eb 62                	jmp    c00200b0 <Vm::x87Handler(regs*)+0x746>
c002004e:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0020052:	0f 85 0f 01 00 00    	jne    c0020167 <Vm::x87Handler(regs*)+0x7fd>
c0020058:	83 ec 0c             	sub    esp,0xc
c002005b:	6a 01                	push   0x1
c002005d:	e8 cb f7 ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c0020062:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020069:	89 c6                	mov    esi,eax
c002006b:	89 d7                	mov    edi,edx
c002006d:	e8 bb f7 ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c0020072:	57                   	push   edi
c0020073:	56                   	push   esi
c0020074:	52                   	push   edx
c0020075:	50                   	push   eax
c0020076:	e8 d5 f6 ff ff       	call   c001f750 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002007b:	83 c4 20             	add    esp,0x20
c002007e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020082:	e8 91 f8 ff ff       	call   c001f918 <Vm::fpuPop()>
c0020087:	e8 8c f8 ff ff       	call   c001f918 <Vm::fpuPop()>
c002008c:	e9 50 f9 ff ff       	jmp    c001f9e1 <Vm::x87Handler(regs*)+0x77>
c0020091:	3c d9                	cmp    al,0xd9
c0020093:	0f 85 b5 02 00 00    	jne    c002034e <Vm::x87Handler(regs*)+0x9e4>
c0020099:	eb bd                	jmp    c0020058 <Vm::x87Handler(regs*)+0x6ee>
c002009b:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c002009f:	0f 85 ea 02 00 00    	jne    c002038f <Vm::x87Handler(regs*)+0xa25>
c00200a5:	0f b7 05 80 18 03 c0 	movzx  eax,WORD PTR ds:0xc0031880
c00200ac:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c00200b0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00200b4:	e9 28 f9 ff ff       	jmp    c001f9e1 <Vm::x87Handler(regs*)+0x77>
c00200b9:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00200bd:	84 d2                	test   dl,dl
c00200bf:	75 0f                	jne    c00200d0 <Vm::x87Handler(regs*)+0x766>
c00200c1:	83 ec 0c             	sub    esp,0xc
c00200c4:	ff 36                	push   DWORD PTR [esi]
c00200c6:	e8 b1 f4 ff ff       	call   c001f57c <Vm::fpu32ToInternal(unsigned int)>
c00200cb:	e9 2c 01 00 00       	jmp    c00201fc <Vm::x87Handler(regs*)+0x892>
c00200d0:	80 fa 01             	cmp    dl,0x1
c00200d3:	75 0f                	jne    c00200e4 <Vm::x87Handler(regs*)+0x77a>
c00200d5:	83 ec 0c             	sub    esp,0xc
c00200d8:	ff 36                	push   DWORD PTR [esi]
c00200da:	e8 9d f4 ff ff       	call   c001f57c <Vm::fpu32ToInternal(unsigned int)>
c00200df:	e9 81 02 00 00       	jmp    c0020365 <Vm::x87Handler(regs*)+0x9fb>
c00200e4:	80 fa 04             	cmp    dl,0x4
c00200e7:	75 0f                	jne    c00200f8 <Vm::x87Handler(regs*)+0x78e>
c00200e9:	83 ec 0c             	sub    esp,0xc
c00200ec:	ff 36                	push   DWORD PTR [esi]
c00200ee:	e8 89 f4 ff ff       	call   c001f57c <Vm::fpu32ToInternal(unsigned int)>
c00200f3:	e9 86 01 00 00       	jmp    c002027e <Vm::x87Handler(regs*)+0x914>
c00200f8:	80 fa 05             	cmp    dl,0x5
c00200fb:	75 1b                	jne    c0020118 <Vm::x87Handler(regs*)+0x7ae>
c00200fd:	83 ec 0c             	sub    esp,0xc
c0020100:	6a 00                	push   0x0
c0020102:	e8 26 f7 ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c0020107:	89 c7                	mov    edi,eax
c0020109:	89 d5                	mov    ebp,edx
c002010b:	58                   	pop    eax
c002010c:	ff 36                	push   DWORD PTR [esi]
c002010e:	e8 69 f4 ff ff       	call   c001f57c <Vm::fpu32ToInternal(unsigned int)>
c0020113:	e9 a3 01 00 00       	jmp    c00202bb <Vm::x87Handler(regs*)+0x951>
c0020118:	80 fa 06             	cmp    dl,0x6
c002011b:	75 0f                	jne    c002012c <Vm::x87Handler(regs*)+0x7c2>
c002011d:	83 ec 0c             	sub    esp,0xc
c0020120:	ff 36                	push   DWORD PTR [esi]
c0020122:	e8 55 f4 ff ff       	call   c001f57c <Vm::fpu32ToInternal(unsigned int)>
c0020127:	e9 ae 01 00 00       	jmp    c00202da <Vm::x87Handler(regs*)+0x970>
c002012c:	31 c0                	xor    eax,eax
c002012e:	80 fa 07             	cmp    dl,0x7
c0020131:	0f 85 94 02 00 00    	jne    c00203cb <Vm::x87Handler(regs*)+0xa61>
c0020137:	83 ec 0c             	sub    esp,0xc
c002013a:	6a 00                	push   0x0
c002013c:	e8 ec f6 ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c0020141:	89 c7                	mov    edi,eax
c0020143:	89 d5                	mov    ebp,edx
c0020145:	58                   	pop    eax
c0020146:	ff 36                	push   DWORD PTR [esi]
c0020148:	e8 2f f4 ff ff       	call   c001f57c <Vm::fpu32ToInternal(unsigned int)>
c002014d:	e9 cb 01 00 00       	jmp    c002031d <Vm::x87Handler(regs*)+0x9b3>
c0020152:	80 fa 03             	cmp    dl,0x3
c0020155:	0f 85 d3 01 00 00    	jne    c002032e <Vm::x87Handler(regs*)+0x9c4>
c002015b:	e8 b8 f7 ff ff       	call   c001f918 <Vm::fpuPop()>
c0020160:	51                   	push   ecx
c0020161:	51                   	push   ecx
c0020162:	e9 de 01 00 00       	jmp    c0020345 <Vm::x87Handler(regs*)+0x9db>
c0020167:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002016b:	80 fa 01             	cmp    dl,0x1
c002016e:	75 09                	jne    c0020179 <Vm::x87Handler(regs*)+0x80f>
c0020170:	57                   	push   edi
c0020171:	57                   	push   edi
c0020172:	8b 06                	mov    eax,DWORD PTR [esi]
c0020174:	e9 e3 01 00 00       	jmp    c002035c <Vm::x87Handler(regs*)+0x9f2>
c0020179:	80 fa 04             	cmp    dl,0x4
c002017c:	75 12                	jne    c0020190 <Vm::x87Handler(regs*)+0x826>
c002017e:	31 d2                	xor    edx,edx
c0020180:	51                   	push   ecx
c0020181:	51                   	push   ecx
c0020182:	8b 06                	mov    eax,DWORD PTR [esi]
c0020184:	52                   	push   edx
c0020185:	50                   	push   eax
c0020186:	e8 d0 f4 ff ff       	call   c001f65b <Vm::fpuLongToFloat(long long)>
c002018b:	e9 ee 00 00 00       	jmp    c002027e <Vm::x87Handler(regs*)+0x914>
c0020190:	31 c0                	xor    eax,eax
c0020192:	80 fa 07             	cmp    dl,0x7
c0020195:	0f 85 30 02 00 00    	jne    c00203cb <Vm::x87Handler(regs*)+0xa61>
c002019b:	83 ec 0c             	sub    esp,0xc
c002019e:	6a 00                	push   0x0
c00201a0:	e8 88 f6 ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c00201a5:	89 c7                	mov    edi,eax
c00201a7:	89 d5                	mov    ebp,edx
c00201a9:	58                   	pop    eax
c00201aa:	8b 06                	mov    eax,DWORD PTR [esi]
c00201ac:	5a                   	pop    edx
c00201ad:	31 d2                	xor    edx,edx
c00201af:	52                   	push   edx
c00201b0:	50                   	push   eax
c00201b1:	e8 a5 f4 ff ff       	call   c001f65b <Vm::fpuLongToFloat(long long)>
c00201b6:	e9 62 01 00 00       	jmp    c002031d <Vm::x87Handler(regs*)+0x9b3>
c00201bb:	84 d2                	test   dl,dl
c00201bd:	75 0d                	jne    c00201cc <Vm::x87Handler(regs*)+0x862>
c00201bf:	31 d2                	xor    edx,edx
c00201c1:	55                   	push   ebp
c00201c2:	55                   	push   ebp
c00201c3:	8b 06                	mov    eax,DWORD PTR [esi]
c00201c5:	52                   	push   edx
c00201c6:	50                   	push   eax
c00201c7:	e9 d3 01 00 00       	jmp    c002039f <Vm::x87Handler(regs*)+0xa35>
c00201cc:	31 c0                	xor    eax,eax
c00201ce:	80 fa 02             	cmp    dl,0x2
c00201d1:	0f 85 f4 01 00 00    	jne    c00203cb <Vm::x87Handler(regs*)+0xa61>
c00201d7:	83 ec 0c             	sub    esp,0xc
c00201da:	6a 00                	push   0x0
c00201dc:	e8 4c f6 ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c00201e1:	59                   	pop    ecx
c00201e2:	5f                   	pop    edi
c00201e3:	e9 6a f9 ff ff       	jmp    c001fb52 <Vm::x87Handler(regs*)+0x1e8>
c00201e8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00201ec:	84 d2                	test   dl,dl
c00201ee:	75 2a                	jne    c002021a <Vm::x87Handler(regs*)+0x8b0>
c00201f0:	50                   	push   eax
c00201f1:	50                   	push   eax
c00201f2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00201f5:	ff 36                	push   DWORD PTR [esi]
c00201f7:	e8 c5 f3 ff ff       	call   c001f5c1 <Vm::fpu64ToInternal(unsigned long long)>
c00201fc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020203:	89 c6                	mov    esi,eax
c0020205:	89 d7                	mov    edi,edx
c0020207:	e8 21 f6 ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c002020c:	57                   	push   edi
c002020d:	56                   	push   esi
c002020e:	52                   	push   edx
c002020f:	50                   	push   eax
c0020210:	e8 8e f5 ff ff       	call   c001f7a3 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020215:	e9 64 01 00 00       	jmp    c002037e <Vm::x87Handler(regs*)+0xa14>
c002021a:	80 fa 01             	cmp    dl,0x1
c002021d:	75 11                	jne    c0020230 <Vm::x87Handler(regs*)+0x8c6>
c002021f:	50                   	push   eax
c0020220:	50                   	push   eax
c0020221:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020224:	ff 36                	push   DWORD PTR [esi]
c0020226:	e8 96 f3 ff ff       	call   c001f5c1 <Vm::fpu64ToInternal(unsigned long long)>
c002022b:	e9 35 01 00 00       	jmp    c0020365 <Vm::x87Handler(regs*)+0x9fb>
c0020230:	80 fa 02             	cmp    dl,0x2
c0020233:	0f 85 54 f9 ff ff    	jne    c001fb8d <Vm::x87Handler(regs*)+0x223>
c0020239:	55                   	push   ebp
c002023a:	55                   	push   ebp
c002023b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002023e:	ff 36                	push   DWORD PTR [esi]
c0020240:	e8 7c f3 ff ff       	call   c001f5c1 <Vm::fpu64ToInternal(unsigned long long)>
c0020245:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002024c:	89 c6                	mov    esi,eax
c002024e:	89 d7                	mov    edi,edx
c0020250:	e8 d8 f5 ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c0020255:	57                   	push   edi
c0020256:	56                   	push   esi
c0020257:	52                   	push   edx
c0020258:	50                   	push   eax
c0020259:	e8 f2 f4 ff ff       	call   c001f750 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002025e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020262:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020265:	83 c4 20             	add    esp,0x20
c0020268:	e9 74 f7 ff ff       	jmp    c001f9e1 <Vm::x87Handler(regs*)+0x77>
c002026d:	80 fa 04             	cmp    dl,0x4
c0020270:	75 2a                	jne    c002029c <Vm::x87Handler(regs*)+0x932>
c0020272:	51                   	push   ecx
c0020273:	51                   	push   ecx
c0020274:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020277:	ff 36                	push   DWORD PTR [esi]
c0020279:	e8 43 f3 ff ff       	call   c001f5c1 <Vm::fpu64ToInternal(unsigned long long)>
c002027e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020285:	89 c6                	mov    esi,eax
c0020287:	89 d7                	mov    edi,edx
c0020289:	e8 9f f5 ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c002028e:	57                   	push   edi
c002028f:	56                   	push   esi
c0020290:	52                   	push   edx
c0020291:	50                   	push   eax
c0020292:	e8 36 f5 ff ff       	call   c001f7cd <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020297:	e9 e2 00 00 00       	jmp    c002037e <Vm::x87Handler(regs*)+0xa14>
c002029c:	80 fa 05             	cmp    dl,0x5
c002029f:	75 28                	jne    c00202c9 <Vm::x87Handler(regs*)+0x95f>
c00202a1:	83 ec 0c             	sub    esp,0xc
c00202a4:	6a 00                	push   0x0
c00202a6:	e8 82 f5 ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c00202ab:	89 c7                	mov    edi,eax
c00202ad:	89 d5                	mov    ebp,edx
c00202af:	58                   	pop    eax
c00202b0:	5a                   	pop    edx
c00202b1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202b4:	ff 36                	push   DWORD PTR [esi]
c00202b6:	e8 06 f3 ff ff       	call   c001f5c1 <Vm::fpu64ToInternal(unsigned long long)>
c00202bb:	83 c4 10             	add    esp,0x10
c00202be:	55                   	push   ebp
c00202bf:	57                   	push   edi
c00202c0:	52                   	push   edx
c00202c1:	50                   	push   eax
c00202c2:	e8 06 f5 ff ff       	call   c001f7cd <Vm::fpuSub(unsigned long long, unsigned long long)>
c00202c7:	eb 60                	jmp    c0020329 <Vm::x87Handler(regs*)+0x9bf>
c00202c9:	80 fa 06             	cmp    dl,0x6
c00202cc:	75 2a                	jne    c00202f8 <Vm::x87Handler(regs*)+0x98e>
c00202ce:	51                   	push   ecx
c00202cf:	51                   	push   ecx
c00202d0:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202d3:	ff 36                	push   DWORD PTR [esi]
c00202d5:	e8 e7 f2 ff ff       	call   c001f5c1 <Vm::fpu64ToInternal(unsigned long long)>
c00202da:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00202e1:	89 c6                	mov    esi,eax
c00202e3:	89 d7                	mov    edi,edx
c00202e5:	e8 43 f5 ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c00202ea:	57                   	push   edi
c00202eb:	56                   	push   esi
c00202ec:	52                   	push   edx
c00202ed:	50                   	push   eax
c00202ee:	e8 08 f5 ff ff       	call   c001f7fb <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00202f3:	e9 86 00 00 00       	jmp    c002037e <Vm::x87Handler(regs*)+0xa14>
c00202f8:	31 c0                	xor    eax,eax
c00202fa:	80 fa 07             	cmp    dl,0x7
c00202fd:	0f 85 c8 00 00 00    	jne    c00203cb <Vm::x87Handler(regs*)+0xa61>
c0020303:	83 ec 0c             	sub    esp,0xc
c0020306:	6a 00                	push   0x0
c0020308:	e8 20 f5 ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c002030d:	89 c7                	mov    edi,eax
c002030f:	89 d5                	mov    ebp,edx
c0020311:	58                   	pop    eax
c0020312:	5a                   	pop    edx
c0020313:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020316:	ff 36                	push   DWORD PTR [esi]
c0020318:	e8 a4 f2 ff ff       	call   c001f5c1 <Vm::fpu64ToInternal(unsigned long long)>
c002031d:	83 c4 10             	add    esp,0x10
c0020320:	55                   	push   ebp
c0020321:	57                   	push   edi
c0020322:	52                   	push   edx
c0020323:	50                   	push   eax
c0020324:	e8 d2 f4 ff ff       	call   c001f7fb <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020329:	83 c4 0c             	add    esp,0xc
c002032c:	eb 53                	jmp    c0020381 <Vm::x87Handler(regs*)+0xa17>
c002032e:	31 c0                	xor    eax,eax
c0020330:	80 fa 02             	cmp    dl,0x2
c0020333:	0f 85 92 00 00 00    	jne    c00203cb <Vm::x87Handler(regs*)+0xa61>
c0020339:	83 ec 0c             	sub    esp,0xc
c002033c:	6a 00                	push   0x0
c002033e:	e8 ea f4 ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c0020343:	59                   	pop    ecx
c0020344:	5f                   	pop    edi
c0020345:	52                   	push   edx
c0020346:	50                   	push   eax
c0020347:	e8 27 f2 ff ff       	call   c001f573 <Vm::fpuInternalTo64(unsigned long long)>
c002034c:	eb 70                	jmp    c00203be <Vm::x87Handler(regs*)+0xa54>
c002034e:	31 c0                	xor    eax,eax
c0020350:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020355:	75 74                	jne    c00203cb <Vm::x87Handler(regs*)+0xa61>
c0020357:	50                   	push   eax
c0020358:	50                   	push   eax
c0020359:	0f b7 06             	movzx  eax,WORD PTR [esi]
c002035c:	31 d2                	xor    edx,edx
c002035e:	52                   	push   edx
c002035f:	50                   	push   eax
c0020360:	e8 f6 f2 ff ff       	call   c001f65b <Vm::fpuLongToFloat(long long)>
c0020365:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002036c:	89 c6                	mov    esi,eax
c002036e:	89 d7                	mov    edi,edx
c0020370:	e8 b8 f4 ff ff       	call   c001f82d <Vm::fpuGetReg(int)>
c0020375:	57                   	push   edi
c0020376:	56                   	push   esi
c0020377:	52                   	push   edx
c0020378:	50                   	push   eax
c0020379:	e8 5e f4 ff ff       	call   c001f7dc <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002037e:	83 c4 1c             	add    esp,0x1c
c0020381:	52                   	push   edx
c0020382:	50                   	push   eax
c0020383:	6a 00                	push   0x0
c0020385:	e8 e6 f4 ff ff       	call   c001f870 <Vm::fpuSetReg(int, unsigned long long)>
c002038a:	e9 f2 f7 ff ff       	jmp    c001fb81 <Vm::x87Handler(regs*)+0x217>
c002038f:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020393:	80 fa 05             	cmp    dl,0x5
c0020396:	75 11                	jne    c00203a9 <Vm::x87Handler(regs*)+0xa3f>
c0020398:	55                   	push   ebp
c0020399:	55                   	push   ebp
c002039a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002039d:	ff 36                	push   DWORD PTR [esi]
c002039f:	e8 81 f2 ff ff       	call   c001f625 <Vm::fpuULongToFloat(unsigned long long)>
c00203a4:	e9 cf f7 ff ff       	jmp    c001fb78 <Vm::x87Handler(regs*)+0x20e>
c00203a9:	31 c0                	xor    eax,eax
c00203ab:	80 fa 07             	cmp    dl,0x7
c00203ae:	75 1b                	jne    c00203cb <Vm::x87Handler(regs*)+0xa61>
c00203b0:	e8 63 f5 ff ff       	call   c001f918 <Vm::fpuPop()>
c00203b5:	51                   	push   ecx
c00203b6:	51                   	push   ecx
c00203b7:	52                   	push   edx
c00203b8:	50                   	push   eax
c00203b9:	e8 0c f2 ff ff       	call   c001f5ca <Vm::fpuFloatToLong(unsigned long long)>
c00203be:	83 c4 10             	add    esp,0x10
c00203c1:	89 06                	mov    DWORD PTR [esi],eax
c00203c3:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c00203c6:	e9 f8 f7 ff ff       	jmp    c001fbc3 <Vm::x87Handler(regs*)+0x259>
c00203cb:	83 c4 1c             	add    esp,0x1c
c00203ce:	5b                   	pop    ebx
c00203cf:	5e                   	pop    esi
c00203d0:	5f                   	pop    edi
c00203d1:	5d                   	pop    ebp
c00203d2:	c3                   	ret    

c00203d3 <__static_initialization_and_destruction_0(int, int)>:
c00203d3:	83 ec 0c             	sub    esp,0xc
c00203d6:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00203db:	75 1a                	jne    c00203f7 <__static_initialization_and_destruction_0(int, int)+0x24>
c00203dd:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00203e5:	75 10                	jne    c00203f7 <__static_initialization_and_destruction_0(int, int)+0x24>
c00203e7:	83 ec 0c             	sub    esp,0xc
c00203ea:	68 80 18 03 c0       	push   0xc0031880
c00203ef:	e8 0c 88 00 00       	call   c0028c00 <Vm::_FPUState::_FPUState()>
c00203f4:	83 c4 10             	add    esp,0x10
c00203f7:	90                   	nop
c00203f8:	83 c4 0c             	add    esp,0xc
c00203fb:	c3                   	ret    

c00203fc <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c00203fc:	83 ec 0c             	sub    esp,0xc
c00203ff:	83 ec 08             	sub    esp,0x8
c0020402:	68 ff ff 00 00       	push   0xffff
c0020407:	6a 01                	push   0x1
c0020409:	e8 c5 ff ff ff       	call   c00203d3 <__static_initialization_and_destruction_0(int, int)>
c002040e:	83 c4 10             	add    esp,0x10
c0020411:	83 c4 0c             	add    esp,0xc
c0020414:	c3                   	ret    
c0020415:	90                   	nop

c0020416 <FAT::getName()>:
c0020416:	b8 a0 c6 02 c0       	mov    eax,0xc002c6a0
c002041b:	c3                   	ret    

c002041c <FAT::tell(void*, unsigned long long*)>:
c002041c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020421:	75 06                	jne    c0020429 <FAT::tell(void*, unsigned long long*)+0xd>
c0020423:	b8 04 00 00 00       	mov    eax,0x4
c0020428:	c3                   	ret    
c0020429:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002042e:	75 06                	jne    c0020436 <FAT::tell(void*, unsigned long long*)+0x1a>
c0020430:	b8 04 00 00 00       	mov    eax,0x4
c0020435:	c3                   	ret    
c0020436:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002043a:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c002043d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020440:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020444:	89 01                	mov    DWORD PTR [ecx],eax
c0020446:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020449:	b8 00 00 00 00       	mov    eax,0x0
c002044e:	c3                   	ret    
c002044f:	90                   	nop

c0020450 <FAT::stat(void*, unsigned long long*)>:
c0020450:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020455:	75 06                	jne    c002045d <FAT::stat(void*, unsigned long long*)+0xd>
c0020457:	b8 04 00 00 00       	mov    eax,0x4
c002045c:	c3                   	ret    
c002045d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020462:	75 06                	jne    c002046a <FAT::stat(void*, unsigned long long*)+0x1a>
c0020464:	b8 04 00 00 00       	mov    eax,0x4
c0020469:	c3                   	ret    
c002046a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002046e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020471:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020474:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020478:	89 01                	mov    DWORD PTR [ecx],eax
c002047a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002047d:	b8 00 00 00 00       	mov    eax,0x0
c0020482:	c3                   	ret    
c0020483:	90                   	nop

c0020484 <FAT::~FAT()>:
c0020484:	83 ec 0c             	sub    esp,0xc
c0020487:	ba 24 c7 02 c0       	mov    edx,0xc002c724
c002048c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020490:	89 10                	mov    DWORD PTR [eax],edx
c0020492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020496:	83 ec 0c             	sub    esp,0xc
c0020499:	50                   	push   eax
c002049a:	e8 5d 2c ff ff       	call   c00130fc <Filesystem::~Filesystem()>
c002049f:	83 c4 10             	add    esp,0x10
c00204a2:	90                   	nop
c00204a3:	83 c4 0c             	add    esp,0xc
c00204a6:	c3                   	ret    
c00204a7:	90                   	nop

c00204a8 <FAT::~FAT()>:
c00204a8:	83 ec 0c             	sub    esp,0xc
c00204ab:	83 ec 0c             	sub    esp,0xc
c00204ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204b2:	e8 cd ff ff ff       	call   c0020484 <FAT::~FAT()>
c00204b7:	83 c4 10             	add    esp,0x10
c00204ba:	83 ec 08             	sub    esp,0x8
c00204bd:	6a 08                	push   0x8
c00204bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204c3:	e8 2c 28 ff ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c00204c8:	83 c4 10             	add    esp,0x10
c00204cb:	83 c4 0c             	add    esp,0xc
c00204ce:	c3                   	ret    
c00204cf:	90                   	nop

c00204d0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00204d0:	83 ec 1c             	sub    esp,0x1c
c00204d3:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00204da:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00204df:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00204e3:	8b 04 85 00 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce700]
c00204ea:	83 f8 ff             	cmp    eax,0xffffffff
c00204ed:	75 34                	jne    c0020523 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c00204ef:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00204f3:	88 c2                	mov    dl,al
c00204f5:	a1 e0 18 03 c0       	mov    eax,ds:0xc00318e0
c00204fa:	01 d0                	add    eax,edx
c00204fc:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020500:	8b 15 e0 18 03 c0    	mov    edx,DWORD PTR ds:0xc00318e0
c0020506:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002050a:	89 14 85 00 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce700],edx
c0020511:	a1 e0 18 03 c0       	mov    eax,ds:0xc00318e0
c0020516:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002051a:	89 14 85 80 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce680],edx
c0020521:	eb 17                	jmp    c002053a <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020523:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020527:	88 c2                	mov    dl,al
c0020529:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002052d:	8b 04 85 00 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce700]
c0020534:	01 d0                	add    eax,edx
c0020536:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002053a:	83 ec 04             	sub    esp,0x4
c002053d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020541:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020545:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020549:	50                   	push   eax
c002054a:	e8 e9 67 fe ff       	call   c0006d38 <f_getlabel>
c002054f:	83 c4 10             	add    esp,0x10
c0020552:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020556:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002055b:	75 07                	jne    c0020564 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c002055d:	b8 00 00 00 00       	mov    eax,0x0
c0020562:	eb 05                	jmp    c0020569 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020564:	b8 01 00 00 00       	mov    eax,0x1
c0020569:	83 c4 1c             	add    esp,0x1c
c002056c:	c3                   	ret    
c002056d:	90                   	nop

c002056e <FAT::setlabel(LogicalDisk*, int, char*)>:
c002056e:	57                   	push   edi
c002056f:	83 ec 58             	sub    esp,0x58
c0020572:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c002057a:	8d 54 24 10          	lea    edx,[esp+0x10]
c002057e:	b9 0f 00 00 00       	mov    ecx,0xf
c0020583:	b8 00 00 00 00       	mov    eax,0x0
c0020588:	fc                   	cld    
c0020589:	89 d7                	mov    edi,edx
c002058b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002058d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020591:	8b 04 85 00 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce700]
c0020598:	83 f8 ff             	cmp    eax,0xffffffff
c002059b:	75 34                	jne    c00205d1 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c002059d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00205a1:	88 c2                	mov    dl,al
c00205a3:	a1 e0 18 03 c0       	mov    eax,ds:0xc00318e0
c00205a8:	01 d0                	add    eax,edx
c00205aa:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00205ae:	8b 15 e0 18 03 c0    	mov    edx,DWORD PTR ds:0xc00318e0
c00205b4:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00205b8:	89 14 85 00 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce700],edx
c00205bf:	a1 e0 18 03 c0       	mov    eax,ds:0xc00318e0
c00205c4:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00205c8:	89 14 85 80 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce680],edx
c00205cf:	eb 17                	jmp    c00205e8 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c00205d1:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00205d5:	88 c2                	mov    dl,al
c00205d7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00205db:	8b 04 85 00 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce700]
c00205e2:	01 d0                	add    eax,edx
c00205e4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00205e8:	83 ec 08             	sub    esp,0x8
c00205eb:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00205ef:	8d 44 24 18          	lea    eax,[esp+0x18]
c00205f3:	50                   	push   eax
c00205f4:	e8 7b 03 fe ff       	call   c0000974 <strcat>
c00205f9:	83 c4 10             	add    esp,0x10
c00205fc:	83 ec 0c             	sub    esp,0xc
c00205ff:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020603:	50                   	push   eax
c0020604:	e8 1d 69 fe ff       	call   c0006f26 <f_setlabel>
c0020609:	83 c4 10             	add    esp,0x10
c002060c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020610:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020615:	75 07                	jne    c002061e <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020617:	b8 00 00 00 00       	mov    eax,0x0
c002061c:	eb 05                	jmp    c0020623 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c002061e:	b8 01 00 00 00       	mov    eax,0x1
c0020623:	83 c4 58             	add    esp,0x58
c0020626:	5f                   	pop    edi
c0020627:	c3                   	ret    

c0020628 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020628:	83 ec 2c             	sub    esp,0x2c
c002062b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020633:	83 ec 08             	sub    esp,0x8
c0020636:	68 c4 c6 02 c0       	push   0xc002c6c4
c002063b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002063f:	e8 7c 02 fe ff       	call   c00008c0 <strcmp>
c0020644:	83 c4 10             	add    esp,0x10
c0020647:	85 c0                	test   eax,eax
c0020649:	0f 94 c0             	sete   al
c002064c:	84 c0                	test   al,al
c002064e:	74 0d                	je     c002065d <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020650:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020658:	e9 a6 00 00 00       	jmp    c0020703 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002065d:	83 ec 08             	sub    esp,0x8
c0020660:	68 b6 c6 02 c0       	push   0xc002c6b6
c0020665:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020669:	e8 52 02 fe ff       	call   c00008c0 <strcmp>
c002066e:	83 c4 10             	add    esp,0x10
c0020671:	85 c0                	test   eax,eax
c0020673:	0f 94 c0             	sete   al
c0020676:	84 c0                	test   al,al
c0020678:	74 0a                	je     c0020684 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c002067a:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020682:	eb 7f                	jmp    c0020703 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020684:	83 ec 08             	sub    esp,0x8
c0020687:	68 bc c6 02 c0       	push   0xc002c6bc
c002068c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020690:	e8 2b 02 fe ff       	call   c00008c0 <strcmp>
c0020695:	83 c4 10             	add    esp,0x10
c0020698:	85 c0                	test   eax,eax
c002069a:	0f 94 c0             	sete   al
c002069d:	84 c0                	test   al,al
c002069f:	74 0a                	je     c00206ab <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c00206a1:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00206a9:	eb 58                	jmp    c0020703 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00206ab:	83 ec 08             	sub    esp,0x8
c00206ae:	68 6c 93 02 c0       	push   0xc002936c
c00206b3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00206b7:	e8 04 02 fe ff       	call   c00008c0 <strcmp>
c00206bc:	83 c4 10             	add    esp,0x10
c00206bf:	85 c0                	test   eax,eax
c00206c1:	0f 94 c0             	sete   al
c00206c4:	84 c0                	test   al,al
c00206c6:	74 0a                	je     c00206d2 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c00206c8:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00206d0:	eb 31                	jmp    c0020703 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00206d2:	83 ec 08             	sub    esp,0x8
c00206d5:	68 c2 c6 02 c0       	push   0xc002c6c2
c00206da:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00206de:	e8 dd 01 fe ff       	call   c00008c0 <strcmp>
c00206e3:	83 c4 10             	add    esp,0x10
c00206e6:	85 c0                	test   eax,eax
c00206e8:	0f 94 c0             	sete   al
c00206eb:	84 c0                	test   al,al
c00206ed:	74 0a                	je     c00206f9 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c00206ef:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00206f7:	eb 0a                	jmp    c0020703 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00206f9:	b8 08 00 00 00       	mov    eax,0x8
c00206fe:	e9 04 01 00 00       	jmp    c0020807 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020703:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c002070a:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c002070f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020713:	8b 04 85 00 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce700]
c002071a:	83 f8 ff             	cmp    eax,0xffffffff
c002071d:	75 34                	jne    c0020753 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c002071f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020723:	88 c2                	mov    dl,al
c0020725:	a1 e0 18 03 c0       	mov    eax,ds:0xc00318e0
c002072a:	01 d0                	add    eax,edx
c002072c:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020730:	8b 15 e0 18 03 c0    	mov    edx,DWORD PTR ds:0xc00318e0
c0020736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002073a:	89 14 85 00 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce700],edx
c0020741:	a1 e0 18 03 c0       	mov    eax,ds:0xc00318e0
c0020746:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002074a:	89 14 85 80 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce680],edx
c0020751:	eb 17                	jmp    c002076a <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020753:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020757:	88 c2                	mov    dl,al
c0020759:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002075d:	8b 04 85 00 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce700]
c0020764:	01 d0                	add    eax,edx
c0020766:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002076a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002076e:	88 04 24             	mov    BYTE PTR [esp],al
c0020771:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020775:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020779:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020781:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020786:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002078e:	83 ec 0c             	sub    esp,0xc
c0020791:	68 00 20 00 00       	push   0x2000
c0020796:	e8 a5 f0 fe ff       	call   c000f840 <malloc>
c002079b:	83 c4 10             	add    esp,0x10
c002079e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00207a2:	68 00 20 00 00       	push   0x2000
c00207a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00207ab:	8d 44 24 08          	lea    eax,[esp+0x8]
c00207af:	50                   	push   eax
c00207b0:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00207b4:	50                   	push   eax
c00207b5:	e8 b7 6b fe ff       	call   c0007371 <f_mkfs>
c00207ba:	83 c4 10             	add    esp,0x10
c00207bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00207c1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00207c6:	75 07                	jne    c00207cf <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00207c8:	b8 00 00 00 00       	mov    eax,0x0
c00207cd:	eb 38                	jmp    c0020807 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00207cf:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00207d4:	75 17                	jne    c00207ed <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c00207d6:	83 ec 0c             	sub    esp,0xc
c00207d9:	68 f4 c6 02 c0       	push   0xc002c6f4
c00207de:	e8 f1 25 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c00207e3:	83 c4 10             	add    esp,0x10
c00207e6:	b8 09 00 00 00       	mov    eax,0x9
c00207eb:	eb 1a                	jmp    c0020807 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00207ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00207f1:	83 ec 08             	sub    esp,0x8
c00207f4:	50                   	push   eax
c00207f5:	68 c8 c6 02 c0       	push   0xc002c6c8
c00207fa:	e8 d5 25 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c00207ff:	83 c4 10             	add    esp,0x10
c0020802:	b8 01 00 00 00       	mov    eax,0x1
c0020807:	83 c4 2c             	add    esp,0x2c
c002080a:	c3                   	ret    
c002080b:	90                   	nop

c002080c <FAT::tryMount(LogicalDisk*, int)>:
c002080c:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020812:	a1 e0 18 03 c0       	mov    eax,ds:0xc00318e0
c0020817:	83 f8 14             	cmp    eax,0x14
c002081a:	75 17                	jne    c0020833 <FAT::tryMount(LogicalDisk*, int)+0x27>
c002081c:	83 ec 0c             	sub    esp,0xc
c002081f:	68 da c6 02 c0       	push   0xc002c6da
c0020824:	e8 86 9c ff ff       	call   c001a4af <Krnl::panic(char const*)>
c0020829:	83 c4 10             	add    esp,0x10
c002082c:	b0 00                	mov    al,0x0
c002082e:	e9 d7 01 00 00       	jmp    c0020a0a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020833:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c002083a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020840:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020846:	3d 00 02 00 00       	cmp    eax,0x200
c002084b:	74 07                	je     c0020854 <FAT::tryMount(LogicalDisk*, int)+0x48>
c002084d:	b0 00                	mov    al,0x0
c002084f:	e9 b6 01 00 00       	jmp    c0020a0a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020854:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c002085c:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020863:	8b 04 85 00 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce700]
c002086a:	83 f8 ff             	cmp    eax,0xffffffff
c002086d:	74 07                	je     c0020876 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c002086f:	b0 01                	mov    al,0x1
c0020871:	e9 94 01 00 00       	jmp    c0020a0a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020876:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020880:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020888:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c002088f:	88 c2                	mov    dl,al
c0020891:	a1 e0 18 03 c0       	mov    eax,ds:0xc00318e0
c0020896:	01 d0                	add    eax,edx
c0020898:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c002089f:	8b 15 e0 18 03 c0    	mov    edx,DWORD PTR ds:0xc00318e0
c00208a5:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00208ac:	89 14 85 00 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce700],edx
c00208b3:	a1 e0 18 03 c0       	mov    eax,ds:0xc00318e0
c00208b8:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00208bf:	89 14 85 80 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce680],edx
c00208c6:	83 ec 0c             	sub    esp,0xc
c00208c9:	68 54 02 00 00       	push   0x254
c00208ce:	e8 6d ef fe ff       	call   c000f840 <malloc>
c00208d3:	83 c4 10             	add    esp,0x10
c00208d6:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00208dd:	83 ec 04             	sub    esp,0x4
c00208e0:	6a 00                	push   0x0
c00208e2:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00208e9:	50                   	push   eax
c00208ea:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00208f1:	e8 39 46 fe ff       	call   c0004f2f <f_mount>
c00208f6:	83 c4 10             	add    esp,0x10
c00208f9:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020900:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020908:	74 19                	je     c0020923 <FAT::tryMount(LogicalDisk*, int)+0x117>
c002090a:	83 ec 0c             	sub    esp,0xc
c002090d:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020914:	e8 47 ef fe ff       	call   c000f860 <rfree>
c0020919:	83 c4 10             	add    esp,0x10
c002091c:	b0 00                	mov    al,0x0
c002091e:	e9 e7 00 00 00       	jmp    c0020a0a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020923:	83 ec 04             	sub    esp,0x4
c0020926:	68 00 01 00 00       	push   0x100
c002092b:	6a 00                	push   0x0
c002092d:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020934:	50                   	push   eax
c0020935:	e8 3e fe fd ff       	call   c0000778 <memset>
c002093a:	83 c4 10             	add    esp,0x10
c002093d:	83 ec 08             	sub    esp,0x8
c0020940:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020947:	50                   	push   eax
c0020948:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002094f:	50                   	push   eax
c0020950:	e8 1f 00 fe ff       	call   c0000974 <strcat>
c0020955:	83 c4 10             	add    esp,0x10
c0020958:	83 ec 08             	sub    esp,0x8
c002095b:	68 e8 c6 02 c0       	push   0xc002c6e8
c0020960:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020967:	50                   	push   eax
c0020968:	e8 07 00 fe ff       	call   c0000974 <strcat>
c002096d:	83 c4 10             	add    esp,0x10
c0020970:	83 ec 04             	sub    esp,0x4
c0020973:	6a 01                	push   0x1
c0020975:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c002097c:	50                   	push   eax
c002097d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020981:	50                   	push   eax
c0020982:	e8 0a 46 fe ff       	call   c0004f91 <f_open>
c0020987:	83 c4 10             	add    esp,0x10
c002098a:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020991:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020998:	85 c0                	test   eax,eax
c002099a:	74 0a                	je     c00209a6 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c002099c:	78 2d                	js     c00209cb <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c002099e:	83 e8 04             	sub    eax,0x4
c00209a1:	83 f8 01             	cmp    eax,0x1
c00209a4:	77 25                	ja     c00209cb <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00209a6:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c00209ae:	83 ec 0c             	sub    esp,0xc
c00209b1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00209b5:	50                   	push   eax
c00209b6:	e8 28 51 fe ff       	call   c0005ae3 <f_close>
c00209bb:	83 c4 10             	add    esp,0x10
c00209be:	90                   	nop
c00209bf:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c00209c7:	74 3a                	je     c0020a03 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c00209c9:	eb 2d                	jmp    c00209f8 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c00209cb:	83 ec 0c             	sub    esp,0xc
c00209ce:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00209d5:	e8 86 ee fe ff       	call   c000f860 <rfree>
c00209da:	83 c4 10             	add    esp,0x10
c00209dd:	83 ec 04             	sub    esp,0x4
c00209e0:	6a 00                	push   0x0
c00209e2:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00209e9:	50                   	push   eax
c00209ea:	6a 00                	push   0x0
c00209ec:	e8 3e 45 fe ff       	call   c0004f2f <f_mount>
c00209f1:	83 c4 10             	add    esp,0x10
c00209f4:	b0 00                	mov    al,0x0
c00209f6:	eb 12                	jmp    c0020a0a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00209f8:	a1 e0 18 03 c0       	mov    eax,ds:0xc00318e0
c00209fd:	40                   	inc    eax
c00209fe:	a3 e0 18 03 c0       	mov    ds:0xc00318e0,eax
c0020a03:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020a0a:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020a10:	c3                   	ret    
c0020a11:	90                   	nop

c0020a12 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020a12:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020a18:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020a20:	74 0a                	je     c0020a2c <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0020a22:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020a2a:	75 0a                	jne    c0020a36 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020a2c:	b8 04 00 00 00       	mov    eax,0x4
c0020a31:	e9 db 00 00 00       	jmp    c0020b11 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020a36:	83 ec 08             	sub    esp,0x8
c0020a39:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020a40:	50                   	push   eax
c0020a41:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020a48:	e8 a0 56 fe ff       	call   c00060ed <f_readdir>
c0020a4d:	83 c4 10             	add    esp,0x10
c0020a50:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020a57:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020a5d:	83 ec 0c             	sub    esp,0xc
c0020a60:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020a67:	83 c0 1a             	add    eax,0x1a
c0020a6a:	50                   	push   eax
c0020a6b:	e8 24 fd fd ff       	call   c0000794 <strlen>
c0020a70:	83 c4 10             	add    esp,0x10
c0020a73:	ba 00 00 00 00       	mov    edx,0x0
c0020a78:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020a7c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020a80:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020a87:	0f b6 c0             	movzx  eax,al
c0020a8a:	83 e0 10             	and    eax,0x10
c0020a8d:	74 07                	je     c0020a96 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020a8f:	b8 02 00 00 00       	mov    eax,0x2
c0020a94:	eb 05                	jmp    c0020a9b <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020a96:	b8 01 00 00 00       	mov    eax,0x1
c0020a9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020a9f:	83 ec 08             	sub    esp,0x8
c0020aa2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020aa9:	83 c0 1a             	add    eax,0x1a
c0020aac:	50                   	push   eax
c0020aad:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020ab1:	83 c0 10             	add    eax,0x10
c0020ab4:	50                   	push   eax
c0020ab5:	e8 7a fd fd ff       	call   c0000834 <strcpy>
c0020aba:	83 c4 10             	add    esp,0x10
c0020abd:	83 ec 04             	sub    esp,0x4
c0020ac0:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020ac7:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020acb:	50                   	push   eax
c0020acc:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020ad3:	e8 6c fc fd ff       	call   c0000744 <memcpy>
c0020ad8:	83 c4 10             	add    esp,0x10
c0020adb:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020ae2:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020ae8:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020aef:	84 c0                	test   al,al
c0020af1:	75 07                	jne    c0020afa <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020af3:	b8 07 00 00 00       	mov    eax,0x7
c0020af8:	eb 17                	jmp    c0020b11 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020afa:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020b01:	85 c0                	test   eax,eax
c0020b03:	75 07                	jne    c0020b0c <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020b05:	b8 00 00 00 00       	mov    eax,0x0
c0020b0a:	eb 05                	jmp    c0020b11 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020b0c:	b8 01 00 00 00       	mov    eax,0x1
c0020b11:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020b17:	c3                   	ret    

c0020b18 <FAT::read(void*, unsigned long, void*, int*)>:
c0020b18:	83 ec 1c             	sub    esp,0x1c
c0020b1b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020b20:	74 07                	je     c0020b29 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020b22:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020b27:	75 07                	jne    c0020b30 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020b29:	b8 04 00 00 00       	mov    eax,0x4
c0020b2e:	eb 3d                	jmp    c0020b6d <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020b30:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020b34:	50                   	push   eax
c0020b35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020b39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020b3d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020b41:	e8 87 48 fe ff       	call   c00053cd <f_read>
c0020b46:	83 c4 10             	add    esp,0x10
c0020b49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020b4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020b51:	89 c2                	mov    edx,eax
c0020b53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020b57:	89 10                	mov    DWORD PTR [eax],edx
c0020b59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020b5d:	85 c0                	test   eax,eax
c0020b5f:	75 07                	jne    c0020b68 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020b61:	b8 00 00 00 00       	mov    eax,0x0
c0020b66:	eb 05                	jmp    c0020b6d <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020b68:	b8 01 00 00 00       	mov    eax,0x1
c0020b6d:	83 c4 1c             	add    esp,0x1c
c0020b70:	c3                   	ret    
c0020b71:	90                   	nop

c0020b72 <FAT::write(void*, unsigned long, void*, int*)>:
c0020b72:	83 ec 1c             	sub    esp,0x1c
c0020b75:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020b7a:	74 07                	je     c0020b83 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020b7c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020b81:	75 07                	jne    c0020b8a <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020b83:	b8 04 00 00 00       	mov    eax,0x4
c0020b88:	eb 3d                	jmp    c0020bc7 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020b8a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020b8e:	50                   	push   eax
c0020b8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020b93:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020b97:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020b9b:	e8 ad 4a fe ff       	call   c000564d <f_write>
c0020ba0:	83 c4 10             	add    esp,0x10
c0020ba3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020ba7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020bab:	89 c2                	mov    edx,eax
c0020bad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020bb1:	89 10                	mov    DWORD PTR [eax],edx
c0020bb3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020bb7:	85 c0                	test   eax,eax
c0020bb9:	75 07                	jne    c0020bc2 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020bbb:	b8 00 00 00 00       	mov    eax,0x0
c0020bc0:	eb 05                	jmp    c0020bc7 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020bc2:	b8 01 00 00 00       	mov    eax,0x1
c0020bc7:	83 c4 1c             	add    esp,0x1c
c0020bca:	c3                   	ret    
c0020bcb:	90                   	nop

c0020bcc <FAT::close(void*)>:
c0020bcc:	83 ec 1c             	sub    esp,0x1c
c0020bcf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020bd4:	75 07                	jne    c0020bdd <FAT::close(void*)+0x11>
c0020bd6:	b8 04 00 00 00       	mov    eax,0x4
c0020bdb:	eb 36                	jmp    c0020c13 <FAT::close(void*)+0x47>
c0020bdd:	83 ec 0c             	sub    esp,0xc
c0020be0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020be4:	e8 fa 4e fe ff       	call   c0005ae3 <f_close>
c0020be9:	83 c4 10             	add    esp,0x10
c0020bec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020bf0:	83 ec 0c             	sub    esp,0xc
c0020bf3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020bf7:	e8 54 ec fe ff       	call   c000f850 <free>
c0020bfc:	83 c4 10             	add    esp,0x10
c0020bff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c03:	85 c0                	test   eax,eax
c0020c05:	75 07                	jne    c0020c0e <FAT::close(void*)+0x42>
c0020c07:	b8 00 00 00 00       	mov    eax,0x0
c0020c0c:	eb 05                	jmp    c0020c13 <FAT::close(void*)+0x47>
c0020c0e:	b8 01 00 00 00       	mov    eax,0x1
c0020c13:	83 c4 1c             	add    esp,0x1c
c0020c16:	c3                   	ret    
c0020c17:	90                   	nop

c0020c18 <FAT::closeDir(void*)>:
c0020c18:	83 ec 1c             	sub    esp,0x1c
c0020c1b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c20:	75 07                	jne    c0020c29 <FAT::closeDir(void*)+0x11>
c0020c22:	b8 04 00 00 00       	mov    eax,0x4
c0020c27:	eb 36                	jmp    c0020c5f <FAT::closeDir(void*)+0x47>
c0020c29:	83 ec 0c             	sub    esp,0xc
c0020c2c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c30:	e8 96 54 fe ff       	call   c00060cb <f_closedir>
c0020c35:	83 c4 10             	add    esp,0x10
c0020c38:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c3c:	83 ec 0c             	sub    esp,0xc
c0020c3f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c43:	e8 08 ec fe ff       	call   c000f850 <free>
c0020c48:	83 c4 10             	add    esp,0x10
c0020c4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c4f:	85 c0                	test   eax,eax
c0020c51:	75 07                	jne    c0020c5a <FAT::closeDir(void*)+0x42>
c0020c53:	b8 00 00 00 00       	mov    eax,0x0
c0020c58:	eb 05                	jmp    c0020c5f <FAT::closeDir(void*)+0x47>
c0020c5a:	b8 01 00 00 00       	mov    eax,0x1
c0020c5f:	83 c4 1c             	add    esp,0x1c
c0020c62:	c3                   	ret    
c0020c63:	90                   	nop

c0020c64 <FAT::seek(void*, unsigned long long)>:
c0020c64:	83 ec 2c             	sub    esp,0x2c
c0020c67:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020c6b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020c6f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020c73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c77:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020c7c:	75 07                	jne    c0020c85 <FAT::seek(void*, unsigned long long)+0x21>
c0020c7e:	b8 04 00 00 00       	mov    eax,0x4
c0020c83:	eb 2f                	jmp    c0020cb4 <FAT::seek(void*, unsigned long long)+0x50>
c0020c85:	83 ec 04             	sub    esp,0x4
c0020c88:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020c8c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020c90:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020c94:	e8 79 4e fe ff       	call   c0005b12 <f_lseek>
c0020c99:	83 c4 10             	add    esp,0x10
c0020c9c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020ca0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020ca4:	85 c0                	test   eax,eax
c0020ca6:	75 07                	jne    c0020caf <FAT::seek(void*, unsigned long long)+0x4b>
c0020ca8:	b8 00 00 00 00       	mov    eax,0x0
c0020cad:	eb 05                	jmp    c0020cb4 <FAT::seek(void*, unsigned long long)+0x50>
c0020caf:	b8 01 00 00 00       	mov    eax,0x1
c0020cb4:	83 c4 2c             	add    esp,0x2c
c0020cb7:	c3                   	ret    

c0020cb8 <fatWrapperReadDisk>:
c0020cb8:	83 ec 1c             	sub    esp,0x1c
c0020cbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020cbf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020cc3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020cc7:	89 04 24             	mov    DWORD PTR [esp],eax
c0020cca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020cce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020cd2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020cd7:	8b 04 85 c0 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1740]
c0020cde:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020ce2:	83 ec 0c             	sub    esp,0xc
c0020ce5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ce9:	52                   	push   edx
c0020cea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020cee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020cf2:	50                   	push   eax
c0020cf3:	e8 22 59 ff ff       	call   c001661a <LogicalDisk::read(unsigned long long, int, void*)>
c0020cf8:	83 c4 20             	add    esp,0x20
c0020cfb:	83 c4 1c             	add    esp,0x1c
c0020cfe:	c3                   	ret    

c0020cff <fatWrapperWriteDisk>:
c0020cff:	83 ec 1c             	sub    esp,0x1c
c0020d02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020d06:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020d0a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020d0e:	89 04 24             	mov    DWORD PTR [esp],eax
c0020d11:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020d15:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020d19:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020d1e:	8b 04 85 c0 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1740]
c0020d25:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020d29:	83 ec 0c             	sub    esp,0xc
c0020d2c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d30:	52                   	push   edx
c0020d31:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020d35:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020d39:	50                   	push   eax
c0020d3a:	e8 47 59 ff ff       	call   c0016686 <LogicalDisk::write(unsigned long long, int, void*)>
c0020d3f:	83 c4 20             	add    esp,0x20
c0020d42:	83 c4 1c             	add    esp,0x1c
c0020d45:	c3                   	ret    

c0020d46 <fatWrapperIoctl>:
c0020d46:	53                   	push   ebx
c0020d47:	83 ec 28             	sub    esp,0x28
c0020d4a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020d4e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020d52:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020d56:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020d5a:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020d5f:	75 31                	jne    c0020d92 <fatWrapperIoctl+0x4c>
c0020d61:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020d65:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020d69:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020d6e:	8b 04 85 c0 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1740]
c0020d75:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020d7b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020d81:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020d85:	66 89 02             	mov    WORD PTR [edx],ax
c0020d88:	b8 00 00 00 00       	mov    eax,0x0
c0020d8d:	e9 b2 00 00 00       	jmp    c0020e44 <fatWrapperIoctl+0xfe>
c0020d92:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020d97:	75 6a                	jne    c0020e03 <fatWrapperIoctl+0xbd>
c0020d99:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020d9d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020da1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020da6:	8b 04 85 c0 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1740]
c0020dad:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020db3:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020db9:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020dbf:	89 c8                	mov    eax,ecx
c0020dc1:	89 da                	mov    edx,ebx
c0020dc3:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020dc7:	c1 e0 0a             	shl    eax,0xa
c0020dca:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020dcf:	8b 0c 8d c0 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1740]
c0020dd6:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020ddc:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020de2:	89 cb                	mov    ebx,ecx
c0020de4:	c1 fb 1f             	sar    ebx,0x1f
c0020de7:	53                   	push   ebx
c0020de8:	51                   	push   ecx
c0020de9:	52                   	push   edx
c0020dea:	50                   	push   eax
c0020deb:	e8 bc 5a 00 00       	call   c00268ac <__udivdi3>
c0020df0:	83 c4 10             	add    esp,0x10
c0020df3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020df7:	89 01                	mov    DWORD PTR [ecx],eax
c0020df9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020dfc:	b8 00 00 00 00       	mov    eax,0x0
c0020e01:	eb 41                	jmp    c0020e44 <fatWrapperIoctl+0xfe>
c0020e03:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020e08:	75 07                	jne    c0020e11 <fatWrapperIoctl+0xcb>
c0020e0a:	b8 00 00 00 00       	mov    eax,0x0
c0020e0f:	eb 33                	jmp    c0020e44 <fatWrapperIoctl+0xfe>
c0020e11:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020e16:	75 19                	jne    c0020e31 <fatWrapperIoctl+0xeb>
c0020e18:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e1c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020e20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020e24:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020e2a:	b8 00 00 00 00       	mov    eax,0x0
c0020e2f:	eb 13                	jmp    c0020e44 <fatWrapperIoctl+0xfe>
c0020e31:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020e36:	75 07                	jne    c0020e3f <fatWrapperIoctl+0xf9>
c0020e38:	b8 00 00 00 00       	mov    eax,0x0
c0020e3d:	eb 05                	jmp    c0020e44 <fatWrapperIoctl+0xfe>
c0020e3f:	b8 04 00 00 00       	mov    eax,0x4
c0020e44:	83 c4 28             	add    esp,0x28
c0020e47:	5b                   	pop    ebx
c0020e48:	c3                   	ret    
c0020e49:	90                   	nop

c0020e4a <FAT::FAT()>:
c0020e4a:	83 ec 1c             	sub    esp,0x1c
c0020e4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e51:	83 ec 0c             	sub    esp,0xc
c0020e54:	50                   	push   eax
c0020e55:	e8 7e 22 ff ff       	call   c00130d8 <Filesystem::Filesystem()>
c0020e5a:	83 c4 10             	add    esp,0x10
c0020e5d:	ba 24 c7 02 c0       	mov    edx,0xc002c724
c0020e62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e66:	89 10                	mov    DWORD PTR [eax],edx
c0020e68:	c7 05 e0 18 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00318e0,0x0
c0020e72:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020e7a:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020e7f:	7f 15                	jg     c0020e96 <FAT::FAT()+0x4c>
c0020e81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020e85:	c7 04 85 00 19 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce700],0xffffffff
c0020e90:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020e94:	eb e4                	jmp    c0020e7a <FAT::FAT()+0x30>
c0020e96:	90                   	nop
c0020e97:	83 c4 1c             	add    esp,0x1c
c0020e9a:	c3                   	ret    
c0020e9b:	90                   	nop

c0020e9c <FAT::fixFilepath(char*)>:
c0020e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020ea0:	8a 00                	mov    al,BYTE PTR [eax]
c0020ea2:	3c 40                	cmp    al,0x40
c0020ea4:	7e 2c                	jle    c0020ed2 <FAT::fixFilepath(char*)+0x36>
c0020ea6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020eaa:	8a 00                	mov    al,BYTE PTR [eax]
c0020eac:	83 e8 41             	sub    eax,0x41
c0020eaf:	88 c2                	mov    dl,al
c0020eb1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020eb5:	88 10                	mov    BYTE PTR [eax],dl
c0020eb7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020ebb:	8a 00                	mov    al,BYTE PTR [eax]
c0020ebd:	0f be c0             	movsx  eax,al
c0020ec0:	8b 04 85 00 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce700]
c0020ec7:	83 c0 30             	add    eax,0x30
c0020eca:	88 c2                	mov    dl,al
c0020ecc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020ed0:	88 10                	mov    BYTE PTR [eax],dl
c0020ed2:	90                   	nop
c0020ed3:	c3                   	ret    

c0020ed4 <FAT::open(char const*, void**, FileOpenMode)>:
c0020ed4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020eda:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020ee2:	74 0a                	je     c0020eee <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020ee4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020eec:	75 0a                	jne    c0020ef8 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020eee:	b8 04 00 00 00       	mov    eax,0x4
c0020ef3:	e9 fd 00 00 00       	jmp    c0020ff5 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020ef8:	83 ec 08             	sub    esp,0x8
c0020efb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020f02:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020f06:	50                   	push   eax
c0020f07:	e8 28 f9 fd ff       	call   c0000834 <strcpy>
c0020f0c:	83 c4 10             	add    esp,0x10
c0020f0f:	83 ec 08             	sub    esp,0x8
c0020f12:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020f16:	50                   	push   eax
c0020f17:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020f1e:	e8 79 ff ff ff       	call   c0020e9c <FAT::fixFilepath(char*)>
c0020f23:	83 c4 10             	add    esp,0x10
c0020f26:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020f2e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020f35:	83 e0 01             	and    eax,0x1
c0020f38:	74 08                	je     c0020f42 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0020f3a:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020f42:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020f49:	83 e0 04             	and    eax,0x4
c0020f4c:	74 10                	je     c0020f5e <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020f4e:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0020f56:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020f5e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020f65:	83 e0 02             	and    eax,0x2
c0020f68:	74 08                	je     c0020f72 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0020f6a:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020f72:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020f79:	83 e0 08             	and    eax,0x8
c0020f7c:	74 08                	je     c0020f86 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020f7e:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0020f86:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020f8d:	83 e0 10             	and    eax,0x10
c0020f90:	74 08                	je     c0020f9a <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0020f92:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0020f9a:	83 ec 0c             	sub    esp,0xc
c0020f9d:	68 50 02 00 00       	push   0x250
c0020fa2:	e8 99 e8 fe ff       	call   c000f840 <malloc>
c0020fa7:	83 c4 10             	add    esp,0x10
c0020faa:	89 c2                	mov    edx,eax
c0020fac:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020fb3:	89 10                	mov    DWORD PTR [eax],edx
c0020fb5:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0020fbd:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020fc4:	8b 00                	mov    eax,DWORD PTR [eax]
c0020fc6:	83 ec 04             	sub    esp,0x4
c0020fc9:	52                   	push   edx
c0020fca:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020fce:	52                   	push   edx
c0020fcf:	50                   	push   eax
c0020fd0:	e8 bc 3f fe ff       	call   c0004f91 <f_open>
c0020fd5:	83 c4 10             	add    esp,0x10
c0020fd8:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0020fdf:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0020fe7:	74 07                	je     c0020ff0 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0020fe9:	b8 01 00 00 00       	mov    eax,0x1
c0020fee:	eb 05                	jmp    c0020ff5 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020ff0:	b8 00 00 00 00       	mov    eax,0x0
c0020ff5:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020ffb:	c3                   	ret    

c0020ffc <FAT::openDir(char const*, void**)>:
c0020ffc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021002:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002100a:	74 0a                	je     c0021016 <FAT::openDir(char const*, void**)+0x1a>
c002100c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021014:	75 07                	jne    c002101d <FAT::openDir(char const*, void**)+0x21>
c0021016:	b8 04 00 00 00       	mov    eax,0x4
c002101b:	eb 7d                	jmp    c002109a <FAT::openDir(char const*, void**)+0x9e>
c002101d:	83 ec 08             	sub    esp,0x8
c0021020:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021027:	8d 44 24 18          	lea    eax,[esp+0x18]
c002102b:	50                   	push   eax
c002102c:	e8 03 f8 fd ff       	call   c0000834 <strcpy>
c0021031:	83 c4 10             	add    esp,0x10
c0021034:	83 ec 08             	sub    esp,0x8
c0021037:	8d 44 24 14          	lea    eax,[esp+0x14]
c002103b:	50                   	push   eax
c002103c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021043:	e8 54 fe ff ff       	call   c0020e9c <FAT::fixFilepath(char*)>
c0021048:	83 c4 10             	add    esp,0x10
c002104b:	83 ec 0c             	sub    esp,0xc
c002104e:	6a 4c                	push   0x4c
c0021050:	e8 eb e7 fe ff       	call   c000f840 <malloc>
c0021055:	83 c4 10             	add    esp,0x10
c0021058:	89 c2                	mov    edx,eax
c002105a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021061:	89 10                	mov    DWORD PTR [eax],edx
c0021063:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002106a:	8b 00                	mov    eax,DWORD PTR [eax]
c002106c:	83 ec 08             	sub    esp,0x8
c002106f:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021073:	52                   	push   edx
c0021074:	50                   	push   eax
c0021075:	e8 4f 4f fe ff       	call   c0005fc9 <f_opendir>
c002107a:	83 c4 10             	add    esp,0x10
c002107d:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021084:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c002108c:	74 07                	je     c0021095 <FAT::openDir(char const*, void**)+0x99>
c002108e:	b8 01 00 00 00       	mov    eax,0x1
c0021093:	eb 05                	jmp    c002109a <FAT::openDir(char const*, void**)+0x9e>
c0021095:	b8 00 00 00 00       	mov    eax,0x0
c002109a:	81 c4 1c 01 00 00    	add    esp,0x11c
c00210a0:	c3                   	ret    
c00210a1:	90                   	nop

c00210a2 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00210a2:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00210a8:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00210b0:	75 0a                	jne    c00210bc <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c00210b2:	b8 04 00 00 00       	mov    eax,0x4
c00210b7:	e9 c9 00 00 00       	jmp    c0021185 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00210bc:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00210c4:	75 0a                	jne    c00210d0 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00210c6:	b8 04 00 00 00       	mov    eax,0x4
c00210cb:	e9 b5 00 00 00       	jmp    c0021185 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00210d0:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00210d8:	75 0a                	jne    c00210e4 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c00210da:	b8 04 00 00 00       	mov    eax,0x4
c00210df:	e9 a1 00 00 00       	jmp    c0021185 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00210e4:	83 ec 08             	sub    esp,0x8
c00210e7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00210ee:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00210f5:	50                   	push   eax
c00210f6:	e8 39 f7 fd ff       	call   c0000834 <strcpy>
c00210fb:	83 c4 10             	add    esp,0x10
c00210fe:	83 ec 08             	sub    esp,0x8
c0021101:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0021108:	50                   	push   eax
c0021109:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021110:	e8 87 fd ff ff       	call   c0020e9c <FAT::fixFilepath(char*)>
c0021115:	83 c4 10             	add    esp,0x10
c0021118:	83 ec 08             	sub    esp,0x8
c002111b:	8d 44 24 08          	lea    eax,[esp+0x8]
c002111f:	50                   	push   eax
c0021120:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021127:	50                   	push   eax
c0021128:	e8 5b 50 fe ff       	call   c0006188 <f_stat>
c002112d:	83 c4 10             	add    esp,0x10
c0021130:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021137:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002113e:	85 c0                	test   eax,eax
c0021140:	74 07                	je     c0021149 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0021142:	83 f8 04             	cmp    eax,0x4
c0021145:	74 32                	je     c0021179 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021147:	eb 37                	jmp    c0021180 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0021149:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002114d:	0f b6 c0             	movzx  eax,al
c0021150:	83 e0 10             	and    eax,0x10
c0021153:	0f 95 c2             	setne  dl
c0021156:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c002115d:	88 10                	mov    BYTE PTR [eax],dl
c002115f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021162:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021166:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c002116d:	89 01                	mov    DWORD PTR [ecx],eax
c002116f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021172:	b8 00 00 00 00       	mov    eax,0x0
c0021177:	eb 0c                	jmp    c0021185 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021179:	b8 02 00 00 00       	mov    eax,0x2
c002117e:	eb 05                	jmp    c0021185 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021180:	b8 01 00 00 00       	mov    eax,0x1
c0021185:	81 c4 2c 02 00 00    	add    esp,0x22c
c002118b:	c3                   	ret    

c002118c <FAT::unlink(char const*)>:
c002118c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021192:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002119a:	75 07                	jne    c00211a3 <FAT::unlink(char const*)+0x17>
c002119c:	b8 04 00 00 00       	mov    eax,0x4
c00211a1:	eb 5c                	jmp    c00211ff <FAT::unlink(char const*)+0x73>
c00211a3:	83 ec 08             	sub    esp,0x8
c00211a6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00211ad:	8d 44 24 18          	lea    eax,[esp+0x18]
c00211b1:	50                   	push   eax
c00211b2:	e8 7d f6 fd ff       	call   c0000834 <strcpy>
c00211b7:	83 c4 10             	add    esp,0x10
c00211ba:	83 ec 08             	sub    esp,0x8
c00211bd:	8d 44 24 14          	lea    eax,[esp+0x14]
c00211c1:	50                   	push   eax
c00211c2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00211c9:	e8 ce fc ff ff       	call   c0020e9c <FAT::fixFilepath(char*)>
c00211ce:	83 c4 10             	add    esp,0x10
c00211d1:	83 ec 0c             	sub    esp,0xc
c00211d4:	8d 44 24 18          	lea    eax,[esp+0x18]
c00211d8:	50                   	push   eax
c00211d9:	e8 fc 52 fe ff       	call   c00064da <f_unlink>
c00211de:	83 c4 10             	add    esp,0x10
c00211e1:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00211e8:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00211ef:	85 c0                	test   eax,eax
c00211f1:	75 07                	jne    c00211fa <FAT::unlink(char const*)+0x6e>
c00211f3:	b8 00 00 00 00       	mov    eax,0x0
c00211f8:	eb 05                	jmp    c00211ff <FAT::unlink(char const*)+0x73>
c00211fa:	b8 01 00 00 00       	mov    eax,0x1
c00211ff:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021205:	c3                   	ret    

c0021206 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0021206:	81 ec 2c 01 00 00    	sub    esp,0x12c
c002120c:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0021213:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c002121a:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c002121e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021222:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c002122a:	75 0a                	jne    c0021236 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c002122c:	b8 04 00 00 00       	mov    eax,0x4
c0021231:	e9 1c 01 00 00       	jmp    c0021352 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021236:	83 ec 08             	sub    esp,0x8
c0021239:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021240:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021244:	50                   	push   eax
c0021245:	e8 ea f5 fd ff       	call   c0000834 <strcpy>
c002124a:	83 c4 10             	add    esp,0x10
c002124d:	83 ec 08             	sub    esp,0x8
c0021250:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021254:	50                   	push   eax
c0021255:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002125c:	e8 3b fc ff ff       	call   c0020e9c <FAT::fixFilepath(char*)>
c0021261:	83 c4 10             	add    esp,0x10
c0021264:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c002126c:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021274:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021279:	83 e0 01             	and    eax,0x1
c002127c:	74 08                	je     c0021286 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c002127e:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021286:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002128b:	83 e0 02             	and    eax,0x2
c002128e:	74 08                	je     c0021298 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021290:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021298:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002129d:	83 e0 04             	and    eax,0x4
c00212a0:	74 08                	je     c00212aa <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c00212a2:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00212aa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00212af:	83 e0 08             	and    eax,0x8
c00212b2:	74 08                	je     c00212bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c00212b4:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00212bc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00212c1:	83 e0 01             	and    eax,0x1
c00212c4:	74 08                	je     c00212ce <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c00212c6:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00212ce:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00212d3:	83 e0 02             	and    eax,0x2
c00212d6:	74 08                	je     c00212e0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c00212d8:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00212e0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00212e5:	83 e0 04             	and    eax,0x4
c00212e8:	74 08                	je     c00212f2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c00212ea:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00212f2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00212f7:	83 e0 08             	and    eax,0x8
c00212fa:	74 08                	je     c0021304 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c00212fc:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0021304:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c002130b:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0021312:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c002131a:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0021322:	83 ec 04             	sub    esp,0x4
c0021325:	52                   	push   edx
c0021326:	50                   	push   eax
c0021327:	8d 44 24 24          	lea    eax,[esp+0x24]
c002132b:	50                   	push   eax
c002132c:	e8 4b 58 fe ff       	call   c0006b7c <f_chmod>
c0021331:	83 c4 10             	add    esp,0x10
c0021334:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c002133b:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021342:	85 c0                	test   eax,eax
c0021344:	75 07                	jne    c002134d <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021346:	b8 00 00 00 00       	mov    eax,0x0
c002134b:	eb 05                	jmp    c0021352 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c002134d:	b8 01 00 00 00       	mov    eax,0x1
c0021352:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021358:	c3                   	ret    
c0021359:	90                   	nop

c002135a <FAT::rename(char const*, char const*)>:
c002135a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021360:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021368:	74 0a                	je     c0021374 <FAT::rename(char const*, char const*)+0x1a>
c002136a:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021372:	75 0a                	jne    c002137e <FAT::rename(char const*, char const*)+0x24>
c0021374:	b8 04 00 00 00       	mov    eax,0x4
c0021379:	e9 98 00 00 00       	jmp    c0021416 <FAT::rename(char const*, char const*)+0xbc>
c002137e:	83 ec 08             	sub    esp,0x8
c0021381:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021388:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002138f:	50                   	push   eax
c0021390:	e8 9f f4 fd ff       	call   c0000834 <strcpy>
c0021395:	83 c4 10             	add    esp,0x10
c0021398:	83 ec 08             	sub    esp,0x8
c002139b:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00213a2:	50                   	push   eax
c00213a3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00213aa:	e8 ed fa ff ff       	call   c0020e9c <FAT::fixFilepath(char*)>
c00213af:	83 c4 10             	add    esp,0x10
c00213b2:	83 ec 08             	sub    esp,0x8
c00213b5:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00213bc:	8d 44 24 18          	lea    eax,[esp+0x18]
c00213c0:	50                   	push   eax
c00213c1:	e8 6e f4 fd ff       	call   c0000834 <strcpy>
c00213c6:	83 c4 10             	add    esp,0x10
c00213c9:	83 ec 08             	sub    esp,0x8
c00213cc:	8d 44 24 14          	lea    eax,[esp+0x14]
c00213d0:	50                   	push   eax
c00213d1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00213d8:	e8 bf fa ff ff       	call   c0020e9c <FAT::fixFilepath(char*)>
c00213dd:	83 c4 10             	add    esp,0x10
c00213e0:	83 ec 08             	sub    esp,0x8
c00213e3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00213e7:	50                   	push   eax
c00213e8:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00213ef:	50                   	push   eax
c00213f0:	e8 94 54 fe ff       	call   c0006889 <f_rename>
c00213f5:	83 c4 10             	add    esp,0x10
c00213f8:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00213ff:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021406:	85 c0                	test   eax,eax
c0021408:	75 07                	jne    c0021411 <FAT::rename(char const*, char const*)+0xb7>
c002140a:	b8 00 00 00 00       	mov    eax,0x0
c002140f:	eb 05                	jmp    c0021416 <FAT::rename(char const*, char const*)+0xbc>
c0021411:	b8 01 00 00 00       	mov    eax,0x1
c0021416:	81 c4 1c 02 00 00    	add    esp,0x21c
c002141c:	c3                   	ret    
c002141d:	90                   	nop

c002141e <FAT::mkdir(char const*)>:
c002141e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021424:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002142c:	75 07                	jne    c0021435 <FAT::mkdir(char const*)+0x17>
c002142e:	b8 04 00 00 00       	mov    eax,0x4
c0021433:	eb 5c                	jmp    c0021491 <FAT::mkdir(char const*)+0x73>
c0021435:	83 ec 08             	sub    esp,0x8
c0021438:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002143f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021443:	50                   	push   eax
c0021444:	e8 eb f3 fd ff       	call   c0000834 <strcpy>
c0021449:	83 c4 10             	add    esp,0x10
c002144c:	83 ec 08             	sub    esp,0x8
c002144f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021453:	50                   	push   eax
c0021454:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002145b:	e8 3c fa ff ff       	call   c0020e9c <FAT::fixFilepath(char*)>
c0021460:	83 c4 10             	add    esp,0x10
c0021463:	83 ec 0c             	sub    esp,0xc
c0021466:	8d 44 24 18          	lea    eax,[esp+0x18]
c002146a:	50                   	push   eax
c002146b:	e8 ed 51 fe ff       	call   c000665d <f_mkdir>
c0021470:	83 c4 10             	add    esp,0x10
c0021473:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002147a:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021481:	85 c0                	test   eax,eax
c0021483:	75 07                	jne    c002148c <FAT::mkdir(char const*)+0x6e>
c0021485:	b8 00 00 00 00       	mov    eax,0x0
c002148a:	eb 05                	jmp    c0021491 <FAT::mkdir(char const*)+0x73>
c002148c:	b8 01 00 00 00       	mov    eax,0x1
c0021491:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021497:	c3                   	ret    

c0021498 <FAT::exists(char const*)>:
c0021498:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002149e:	83 ec 08             	sub    esp,0x8
c00214a1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00214a8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00214ac:	50                   	push   eax
c00214ad:	e8 82 f3 fd ff       	call   c0000834 <strcpy>
c00214b2:	83 c4 10             	add    esp,0x10
c00214b5:	83 ec 08             	sub    esp,0x8
c00214b8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00214bc:	50                   	push   eax
c00214bd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00214c4:	e8 d3 f9 ff ff       	call   c0020e9c <FAT::fixFilepath(char*)>
c00214c9:	83 c4 10             	add    esp,0x10
c00214cc:	83 ec 08             	sub    esp,0x8
c00214cf:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c00214d6:	50                   	push   eax
c00214d7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00214db:	50                   	push   eax
c00214dc:	e8 a7 4c fe ff       	call   c0006188 <f_stat>
c00214e1:	83 c4 10             	add    esp,0x10
c00214e4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00214eb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00214f2:	85 c0                	test   eax,eax
c00214f4:	75 04                	jne    c00214fa <FAT::exists(char const*)+0x62>
c00214f6:	b0 01                	mov    al,0x1
c00214f8:	eb 02                	jmp    c00214fc <FAT::exists(char const*)+0x64>
c00214fa:	b0 00                	mov    al,0x0
c00214fc:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021502:	c3                   	ret    
c0021503:	90                   	nop

c0021504 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021504:	b8 08 00 00 00       	mov    eax,0x8
c0021509:	c3                   	ret    

c002150a <ISO9660::seek(void*, unsigned long long)>:
c002150a:	53                   	push   ebx
c002150b:	b8 04 00 00 00       	mov    eax,0x4
c0021510:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021514:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021518:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002151c:	85 d2                	test   edx,edx
c002151e:	74 17                	je     c0021537 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021520:	89 c8                	mov    eax,ecx
c0021522:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021525:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021528:	b8 01 00 00 00       	mov    eax,0x1
c002152d:	73 08                	jae    c0021537 <ISO9660::seek(void*, unsigned long long)+0x2d>
c002152f:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021532:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021535:	31 c0                	xor    eax,eax
c0021537:	5b                   	pop    ebx
c0021538:	c3                   	ret    
c0021539:	90                   	nop

c002153a <ISO9660::tell(void*, unsigned long long*)>:
c002153a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002153e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021542:	85 d2                	test   edx,edx
c0021544:	74 12                	je     c0021558 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021546:	85 c0                	test   eax,eax
c0021548:	74 0e                	je     c0021558 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002154a:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002154d:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021550:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021553:	89 10                	mov    DWORD PTR [eax],edx
c0021555:	31 c0                	xor    eax,eax
c0021557:	c3                   	ret    
c0021558:	b8 04 00 00 00       	mov    eax,0x4
c002155d:	c3                   	ret    

c002155e <ISO9660::getName()>:
c002155e:	b8 80 c7 02 c0       	mov    eax,0xc002c780
c0021563:	c3                   	ret    

c0021564 <ISO9660::stat(void*, unsigned long long*)>:
c0021564:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021568:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002156c:	85 d2                	test   edx,edx
c002156e:	74 12                	je     c0021582 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021570:	85 c0                	test   eax,eax
c0021572:	74 0e                	je     c0021582 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021574:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021577:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c002157a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002157d:	89 10                	mov    DWORD PTR [eax],edx
c002157f:	31 c0                	xor    eax,eax
c0021581:	c3                   	ret    
c0021582:	b8 04 00 00 00       	mov    eax,0x4
c0021587:	c3                   	ret    

c0021588 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021588:	b8 01 00 00 00       	mov    eax,0x1
c002158d:	c3                   	ret    

c002158e <ISO9660::unlink(char const*)>:
c002158e:	b8 01 00 00 00       	mov    eax,0x1
c0021593:	c3                   	ret    

c0021594 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021594:	b8 01 00 00 00       	mov    eax,0x1
c0021599:	c3                   	ret    

c002159a <ISO9660::rename(char const*, char const*)>:
c002159a:	b8 01 00 00 00       	mov    eax,0x1
c002159f:	c3                   	ret    

c00215a0 <ISO9660::mkdir(char const*)>:
c00215a0:	b8 01 00 00 00       	mov    eax,0x1
c00215a5:	c3                   	ret    

c00215a6 <ISO9660::close(void*)>:
c00215a6:	83 ec 0c             	sub    esp,0xc
c00215a9:	b8 04 00 00 00       	mov    eax,0x4
c00215ae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00215b2:	85 d2                	test   edx,edx
c00215b4:	74 0e                	je     c00215c4 <ISO9660::close(void*)+0x1e>
c00215b6:	83 ec 0c             	sub    esp,0xc
c00215b9:	52                   	push   edx
c00215ba:	e8 91 e2 fe ff       	call   c000f850 <free>
c00215bf:	83 c4 10             	add    esp,0x10
c00215c2:	31 c0                	xor    eax,eax
c00215c4:	83 c4 0c             	add    esp,0xc
c00215c7:	c3                   	ret    

c00215c8 <ISO9660::closeDir(void*)>:
c00215c8:	83 ec 0c             	sub    esp,0xc
c00215cb:	b8 04 00 00 00       	mov    eax,0x4
c00215d0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00215d4:	85 d2                	test   edx,edx
c00215d6:	74 0e                	je     c00215e6 <ISO9660::closeDir(void*)+0x1e>
c00215d8:	83 ec 0c             	sub    esp,0xc
c00215db:	52                   	push   edx
c00215dc:	e8 6f e2 fe ff       	call   c000f850 <free>
c00215e1:	83 c4 10             	add    esp,0x10
c00215e4:	31 c0                	xor    eax,eax
c00215e6:	83 c4 0c             	add    esp,0xc
c00215e9:	c3                   	ret    

c00215ea <ISO9660::~ISO9660()>:
c00215ea:	83 ec 0c             	sub    esp,0xc
c00215ed:	ba e4 c7 02 c0       	mov    edx,0xc002c7e4
c00215f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215f6:	89 10                	mov    DWORD PTR [eax],edx
c00215f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215fc:	83 ec 0c             	sub    esp,0xc
c00215ff:	50                   	push   eax
c0021600:	e8 f7 1a ff ff       	call   c00130fc <Filesystem::~Filesystem()>
c0021605:	83 c4 10             	add    esp,0x10
c0021608:	90                   	nop
c0021609:	83 c4 0c             	add    esp,0xc
c002160c:	c3                   	ret    
c002160d:	90                   	nop

c002160e <ISO9660::~ISO9660()>:
c002160e:	83 ec 0c             	sub    esp,0xc
c0021611:	83 ec 0c             	sub    esp,0xc
c0021614:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021618:	e8 cd ff ff ff       	call   c00215ea <ISO9660::~ISO9660()>
c002161d:	83 c4 10             	add    esp,0x10
c0021620:	83 ec 08             	sub    esp,0x8
c0021623:	6a 08                	push   0x8
c0021625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021629:	e8 c6 16 ff ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c002162e:	83 c4 10             	add    esp,0x10
c0021631:	83 c4 0c             	add    esp,0xc
c0021634:	c3                   	ret    

c0021635 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021635:	55                   	push   ebp
c0021636:	31 c9                	xor    ecx,ecx
c0021638:	57                   	push   edi
c0021639:	56                   	push   esi
c002163a:	53                   	push   ebx
c002163b:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c002163f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021643:	89 eb                	mov    ebx,ebp
c0021645:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021649:	39 ce                	cmp    esi,ecx
c002164b:	7e 17                	jle    c0021664 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c002164d:	31 d2                	xor    edx,edx
c002164f:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021653:	7d 13                	jge    c0021668 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021655:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021659:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002165c:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c002165f:	75 0d                	jne    c002166e <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021661:	42                   	inc    edx
c0021662:	eb eb                	jmp    c002164f <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021664:	31 c0                	xor    eax,eax
c0021666:	eb 0a                	jmp    c0021672 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021668:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c002166c:	eb 04                	jmp    c0021672 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002166e:	41                   	inc    ecx
c002166f:	43                   	inc    ebx
c0021670:	eb d7                	jmp    c0021649 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021672:	5b                   	pop    ebx
c0021673:	5e                   	pop    esi
c0021674:	5f                   	pop    edi
c0021675:	5d                   	pop    ebp
c0021676:	c3                   	ret    

c0021677 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021677:	56                   	push   esi
c0021678:	53                   	push   ebx
c0021679:	52                   	push   edx
c002167a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002167e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021682:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021686:	39 0d e0 19 03 c0    	cmp    DWORD PTR ds:0xc00319e0,ecx
c002168c:	75 08                	jne    c0021696 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c002168e:	38 05 34 d8 02 c0    	cmp    BYTE PTR ds:0xc002d834,al
c0021694:	74 2b                	je     c00216c1 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0021696:	83 ec 0c             	sub    esp,0xc
c0021699:	a2 34 d8 02 c0       	mov    ds:0xc002d834,al
c002169e:	68 00 1a 03 c0       	push   0xc0031a00
c00216a3:	0f be c0             	movsx  eax,al
c00216a6:	6a 01                	push   0x1
c00216a8:	89 0d e0 19 03 c0    	mov    DWORD PTR ds:0xc00319e0,ecx
c00216ae:	31 db                	xor    ebx,ebx
c00216b0:	53                   	push   ebx
c00216b1:	51                   	push   ecx
c00216b2:	ff 34 85 bc e7 02 c0 	push   DWORD PTR [eax*4-0x3ffd1844]
c00216b9:	e8 5c 4f ff ff       	call   c001661a <LogicalDisk::read(unsigned long long, int, void*)>
c00216be:	83 c4 20             	add    esp,0x20
c00216c1:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c00216c9:	c7 44 24 14 00 1a 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031a00
c00216d1:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00216d5:	58                   	pop    eax
c00216d6:	5b                   	pop    ebx
c00216d7:	5e                   	pop    esi
c00216d8:	e9 67 f0 fd ff       	jmp    c0000744 <memcpy>
c00216dd:	90                   	nop

c00216de <ISO9660::tryMount(LogicalDisk*, int)>:
c00216de:	81 ec 10 08 00 00    	sub    esp,0x810
c00216e4:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00216eb:	83 c0 41             	add    eax,0x41
c00216ee:	0f be c0             	movsx  eax,al
c00216f1:	50                   	push   eax
c00216f2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00216f6:	50                   	push   eax
c00216f7:	6a 10                	push   0x10
c00216f9:	e8 79 ff ff ff       	call   c0021677 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00216fe:	83 c4 10             	add    esp,0x10
c0021701:	31 c0                	xor    eax,eax
c0021703:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021708:	75 1d                	jne    c0021727 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002170a:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c002170f:	75 16                	jne    c0021727 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021711:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021716:	75 0f                	jne    c0021727 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021718:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c002171d:	75 08                	jne    c0021727 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002171f:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021724:	0f 94 c0             	sete   al
c0021727:	81 c4 0c 08 00 00    	add    esp,0x80c
c002172d:	c3                   	ret    

c002172e <ISO9660::read(void*, unsigned long, void*, int*)>:
c002172e:	55                   	push   ebp
c002172f:	57                   	push   edi
c0021730:	56                   	push   esi
c0021731:	53                   	push   ebx
c0021732:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021738:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c002173f:	85 ed                	test   ebp,ebp
c0021741:	0f 84 d6 01 00 00    	je     c002191d <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021747:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c002174f:	0f 84 c8 01 00 00    	je     c002191d <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021755:	b8 01 00 00 00       	mov    eax,0x1
c002175a:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c002175e:	0f 85 be 01 00 00    	jne    c0021922 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021764:	31 d2                	xor    edx,edx
c0021766:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c002176d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021770:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0021773:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021777:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c002177a:	89 04 24             	mov    DWORD PTR [esp],eax
c002177d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021781:	01 f0                	add    eax,esi
c0021783:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0021786:	11 fa                	adc    edx,edi
c0021788:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c002178c:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021790:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021794:	19 d1                	sbb    ecx,edx
c0021796:	72 0a                	jb     c00217a2 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c0021798:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002179c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00217a0:	eb 13                	jmp    c00217b5 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c00217a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00217a6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00217aa:	29 f0                	sub    eax,esi
c00217ac:	19 fa                	sbb    edx,edi
c00217ae:	89 04 24             	mov    DWORD PTR [esp],eax
c00217b1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00217b5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00217b8:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00217bb:	0f a4 c2 0b          	shld   edx,eax,0xb
c00217bf:	51                   	push   ecx
c00217c0:	c1 e0 0b             	shl    eax,0xb
c00217c3:	01 c6                	add    esi,eax
c00217c5:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00217c9:	11 d7                	adc    edi,edx
c00217cb:	50                   	push   eax
c00217cc:	89 fa                	mov    edx,edi
c00217ce:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c00217d2:	89 f0                	mov    eax,esi
c00217d4:	53                   	push   ebx
c00217d5:	0f ac d0 0b          	shrd   eax,edx,0xb
c00217d9:	50                   	push   eax
c00217da:	e8 98 fe ff ff       	call   c0021677 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00217df:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00217e3:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00217e6:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00217ea:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00217f0:	83 c4 10             	add    esp,0x10
c00217f3:	b8 00 08 00 00       	mov    eax,0x800
c00217f8:	29 d0                	sub    eax,edx
c00217fa:	39 c1                	cmp    ecx,eax
c00217fc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0021800:	83 d9 00             	sbb    ecx,0x0
c0021803:	7d 1c                	jge    c0021821 <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c0021805:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c002180a:	75 12                	jne    c002181e <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c002180c:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021813:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021819:	e9 fb 00 00 00       	jmp    c0021919 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c002181e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021821:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c0021824:	31 d2                	xor    edx,edx
c0021826:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c002182a:	39 c2                	cmp    edx,eax
c002182c:	7d 14                	jge    c0021842 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c002182e:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021835:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021839:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c002183c:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c002183f:	42                   	inc    edx
c0021840:	eb e8                	jmp    c002182a <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c0021842:	89 c3                	mov    ebx,eax
c0021844:	85 c0                	test   eax,eax
c0021846:	79 02                	jns    c002184a <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c0021848:	31 db                	xor    ebx,ebx
c002184a:	99                   	cdq    
c002184b:	01 c3                	add    ebx,eax
c002184d:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0021854:	01 c6                	add    esi,eax
c0021856:	11 d7                	adc    edi,edx
c0021858:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c002185c:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021860:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021863:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021867:	29 c6                	sub    esi,eax
c0021869:	19 d7                	sbb    edi,edx
c002186b:	89 34 24             	mov    DWORD PTR [esp],esi
c002186e:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021872:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021877:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c002187a:	b8 00 00 00 00       	mov    eax,0x0
c002187f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021883:	7d 3e                	jge    c00218c3 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0021885:	52                   	push   edx
c0021886:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002188a:	50                   	push   eax
c002188b:	53                   	push   ebx
c002188c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021890:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021894:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021898:	50                   	push   eax
c0021899:	e8 d9 fd ff ff       	call   c0021677 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002189e:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c00218a6:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c00218ab:	81 c3 00 08 00 00    	add    ebx,0x800
c00218b1:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c00218b9:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00218be:	83 c4 10             	add    esp,0x10
c00218c1:	eb af                	jmp    c0021872 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c00218c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218c7:	0b 04 24             	or     eax,DWORD PTR [esp]
c00218ca:	74 32                	je     c00218fe <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c00218cc:	50                   	push   eax
c00218cd:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00218d1:	50                   	push   eax
c00218d2:	8d 44 24 28          	lea    eax,[esp+0x28]
c00218d6:	50                   	push   eax
c00218d7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00218db:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00218df:	0f ac fe 0b          	shrd   esi,edi,0xb
c00218e3:	56                   	push   esi
c00218e4:	e8 8e fd ff ff       	call   c0021677 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00218e9:	83 c4 0c             	add    esp,0xc
c00218ec:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00218f0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00218f4:	50                   	push   eax
c00218f5:	53                   	push   ebx
c00218f6:	e8 49 ee fd ff       	call   c0000744 <memcpy>
c00218fb:	83 c4 10             	add    esp,0x10
c00218fe:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021905:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021909:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002190d:	89 38                	mov    DWORD PTR [eax],edi
c002190f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021913:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021916:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021919:	31 c0                	xor    eax,eax
c002191b:	eb 05                	jmp    c0021922 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c002191d:	b8 04 00 00 00       	mov    eax,0x4
c0021922:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021928:	5b                   	pop    ebx
c0021929:	5e                   	pop    esi
c002192a:	5f                   	pop    edi
c002192b:	5d                   	pop    ebp
c002192c:	c3                   	ret    
c002192d:	90                   	nop

c002192e <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c002192e:	55                   	push   ebp
c002192f:	57                   	push   edi
c0021930:	56                   	push   esi
c0021931:	53                   	push   ebx
c0021932:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021938:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c002193f:	85 f6                	test   esi,esi
c0021941:	0f 84 64 02 00 00    	je     c0021bab <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021947:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c002194f:	0f 84 56 02 00 00    	je     c0021bab <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021955:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0021958:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c002195b:	75 0a                	jne    c0021967 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c002195d:	b8 07 00 00 00       	mov    eax,0x7
c0021962:	e9 49 02 00 00       	jmp    c0021bb0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021967:	50                   	push   eax
c0021968:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c002196c:	50                   	push   eax
c002196d:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021974:	53                   	push   ebx
c0021975:	8b 06                	mov    eax,DWORD PTR [esi]
c0021977:	c1 e0 0b             	shl    eax,0xb
c002197a:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c002197d:	c1 e8 0b             	shr    eax,0xb
c0021980:	50                   	push   eax
c0021981:	e8 f1 fc ff ff       	call   c0021677 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021986:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021989:	83 c4 10             	add    esp,0x10
c002198c:	89 c1                	mov    ecx,eax
c002198e:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021991:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021997:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c002199a:	84 db                	test   bl,bl
c002199c:	0f 85 90 00 00 00    	jne    c0021a32 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c00219a2:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c00219a8:	81 e7 ff 07 00 00    	and    edi,0x7ff
c00219ae:	29 c7                	sub    edi,eax
c00219b0:	89 fb                	mov    ebx,edi
c00219b2:	c1 fb 1f             	sar    ebx,0x1f
c00219b5:	01 f8                	add    eax,edi
c00219b7:	11 da                	adc    edx,ebx
c00219b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00219bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00219c1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00219c4:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c00219c7:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00219ca:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00219cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00219d0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00219d4:	89 d8                	mov    eax,ebx
c00219d6:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00219d9:	ba 00 00 00 00       	mov    edx,0x0
c00219de:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00219e2:	b8 00 00 00 00       	mov    eax,0x0
c00219e7:	73 0b                	jae    c00219f4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c00219e9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00219ec:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00219f0:	29 f8                	sub    eax,edi
c00219f2:	19 da                	sbb    edx,ebx
c00219f4:	89 d3                	mov    ebx,edx
c00219f6:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c00219f9:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c00219fc:	09 c3                	or     ebx,eax
c00219fe:	0f 84 59 ff ff ff    	je     c002195d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021a04:	55                   	push   ebp
c0021a05:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021a09:	50                   	push   eax
c0021a0a:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021a11:	53                   	push   ebx
c0021a12:	8b 06                	mov    eax,DWORD PTR [esi]
c0021a14:	c1 e0 0b             	shl    eax,0xb
c0021a17:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021a1b:	c1 e8 0b             	shr    eax,0xb
c0021a1e:	50                   	push   eax
c0021a1f:	e8 53 fc ff ff       	call   c0021677 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a24:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021a27:	83 c4 10             	add    esp,0x10
c0021a2a:	25 ff 07 00 00       	and    eax,0x7ff
c0021a2f:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021a32:	57                   	push   edi
c0021a33:	6a 28                	push   0x28
c0021a35:	6a 00                	push   0x0
c0021a37:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021a3b:	50                   	push   eax
c0021a3c:	e8 37 ed fd ff       	call   c0000778 <memset>
c0021a41:	31 d2                	xor    edx,edx
c0021a43:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021a46:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021a4c:	89 f8                	mov    eax,edi
c0021a4e:	83 c0 21             	add    eax,0x21
c0021a51:	83 d2 00             	adc    edx,0x0
c0021a54:	89 c7                	mov    edi,eax
c0021a56:	89 d5                	mov    ebp,edx
c0021a58:	83 c4 10             	add    esp,0x10
c0021a5b:	31 c9                	xor    ecx,ecx
c0021a5d:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021a64:	83 f9 28             	cmp    ecx,0x28
c0021a67:	88 04 24             	mov    BYTE PTR [esp],al
c0021a6a:	0f 94 c2             	sete   dl
c0021a6d:	88 d0                	mov    al,dl
c0021a6f:	ba ff 07 00 00       	mov    edx,0x7ff
c0021a74:	39 fa                	cmp    edx,edi
c0021a76:	ba 00 00 00 00       	mov    edx,0x0
c0021a7b:	19 ea                	sbb    edx,ebp
c0021a7d:	0f 92 c2             	setb   dl
c0021a80:	09 c2                	or     edx,eax
c0021a82:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021a86:	0f 94 c0             	sete   al
c0021a89:	08 d0                	or     al,dl
c0021a8b:	75 16                	jne    c0021aa3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021a8d:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021a91:	74 10                	je     c0021aa3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021a93:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021a96:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021a9a:	41                   	inc    ecx
c0021a9b:	83 c7 01             	add    edi,0x1
c0021a9e:	83 d5 00             	adc    ebp,0x0
c0021aa1:	eb ba                	jmp    c0021a5d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021aa3:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021aaa:	83 ec 0c             	sub    esp,0xc
c0021aad:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021ab1:	57                   	push   edi
c0021ab2:	e8 dd ec fd ff       	call   c0000794 <strlen>
c0021ab7:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021abf:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021ac3:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021aca:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021acd:	5a                   	pop    edx
c0021ace:	25 ff 07 00 00       	and    eax,0x7ff
c0021ad3:	01 c8                	add    eax,ecx
c0021ad5:	59                   	pop    ecx
c0021ad6:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021adc:	83 e0 02             	and    eax,0x2
c0021adf:	3c 01                	cmp    al,0x1
c0021ae1:	19 c0                	sbb    eax,eax
c0021ae3:	83 c0 02             	add    eax,0x2
c0021ae6:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021aea:	57                   	push   edi
c0021aeb:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021aef:	50                   	push   eax
c0021af0:	e8 3f ed fd ff       	call   c0000834 <strcpy>
c0021af5:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021af9:	83 c4 10             	add    esp,0x10
c0021afc:	84 c0                	test   al,al
c0021afe:	75 21                	jne    c0021b21 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021b00:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021b08:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021b10:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021b18:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021b1f:	eb 28                	jmp    c0021b49 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021b21:	fe c8                	dec    al
c0021b23:	75 24                	jne    c0021b49 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021b25:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021b2d:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021b35:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021b3d:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021b44:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021b49:	0f b6 fb             	movzx  edi,bl
c0021b4c:	31 db                	xor    ebx,ebx
c0021b4e:	50                   	push   eax
c0021b4f:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021b56:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021b5a:	50                   	push   eax
c0021b5b:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021b62:	e8 dd eb fd ff       	call   c0000744 <memcpy>
c0021b67:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021b6e:	89 f9                	mov    ecx,edi
c0021b70:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021b76:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021b79:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021b7c:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021b7f:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021b82:	83 c4 10             	add    esp,0x10
c0021b85:	39 c7                	cmp    edi,eax
c0021b87:	89 df                	mov    edi,ebx
c0021b89:	19 d7                	sbb    edi,edx
c0021b8b:	72 10                	jb     c0021b9d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021b8d:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021b94:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021b9b:	eb 0a                	jmp    c0021ba7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021b9d:	29 c8                	sub    eax,ecx
c0021b9f:	19 da                	sbb    edx,ebx
c0021ba1:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021ba4:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021ba7:	31 c0                	xor    eax,eax
c0021ba9:	eb 05                	jmp    c0021bb0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021bab:	b8 04 00 00 00       	mov    eax,0x4
c0021bb0:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021bb6:	5b                   	pop    ebx
c0021bb7:	5e                   	pop    esi
c0021bb8:	5f                   	pop    edi
c0021bb9:	5d                   	pop    ebp
c0021bba:	c3                   	ret    

c0021bbb <readRoot(unsigned int*, unsigned int*, char)>:
c0021bbb:	81 ec 40 08 00 00    	sub    esp,0x840
c0021bc1:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021bc9:	50                   	push   eax
c0021bca:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021bce:	50                   	push   eax
c0021bcf:	6a 10                	push   0x10
c0021bd1:	e8 a1 fa ff ff       	call   c0021677 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021bd6:	83 c4 0c             	add    esp,0xc
c0021bd9:	6a 22                	push   0x22
c0021bdb:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021be2:	50                   	push   eax
c0021be3:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021be7:	50                   	push   eax
c0021be8:	e8 57 eb fd ff       	call   c0000744 <memcpy>
c0021bed:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021bf4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021bf8:	89 10                	mov    DWORD PTR [eax],edx
c0021bfa:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021c01:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021c05:	89 10                	mov    DWORD PTR [eax],edx
c0021c07:	b0 01                	mov    al,0x1
c0021c09:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021c0f:	c3                   	ret    

c0021c10 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021c10:	55                   	push   ebp
c0021c11:	57                   	push   edi
c0021c12:	56                   	push   esi
c0021c13:	53                   	push   ebx
c0021c14:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021c1a:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021c21:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021c28:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021c2c:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021c30:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021c34:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021c38:	75 03                	jne    c0021c3d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021c3a:	83 c3 02             	add    ebx,0x2
c0021c3d:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021c40:	75 03                	jne    c0021c45 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021c42:	43                   	inc    ebx
c0021c43:	eb f8                	jmp    c0021c3d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021c45:	51                   	push   ecx
c0021c46:	68 00 01 00 00       	push   0x100
c0021c4b:	6a 00                	push   0x0
c0021c4d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021c51:	50                   	push   eax
c0021c52:	e8 21 eb fd ff       	call   c0000778 <memset>
c0021c57:	83 c4 10             	add    esp,0x10
c0021c5a:	31 d2                	xor    edx,edx
c0021c5c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021c5f:	84 c0                	test   al,al
c0021c61:	74 21                	je     c0021c84 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021c63:	3c 2f                	cmp    al,0x2f
c0021c65:	75 0b                	jne    c0021c72 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021c67:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021c6b:	bd 01 00 00 00       	mov    ebp,0x1
c0021c70:	eb 14                	jmp    c0021c86 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021c72:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021c75:	80 f9 19             	cmp    cl,0x19
c0021c78:	77 03                	ja     c0021c7d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021c7a:	83 e8 20             	sub    eax,0x20
c0021c7d:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021c81:	42                   	inc    edx
c0021c82:	eb d8                	jmp    c0021c5c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021c84:	31 ed                	xor    ebp,ebp
c0021c86:	83 ec 0c             	sub    esp,0xc
c0021c89:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021c90:	e8 ab db fe ff       	call   c000f840 <malloc>
c0021c95:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021c9c:	89 c6                	mov    esi,eax
c0021c9e:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021ca4:	c1 ef 0b             	shr    edi,0xb
c0021ca7:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021cae:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021cb2:	83 c4 10             	add    esp,0x10
c0021cb5:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021cba:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021cbe:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021cc5:	74 28                	je     c0021cef <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021cc7:	52                   	push   edx
c0021cc8:	57                   	push   edi
c0021cc9:	50                   	push   eax
c0021cca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021cce:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021cd5:	e8 9d f9 ff ff       	call   c0021677 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021cda:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021cde:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021ce5:	05 00 08 00 00       	add    eax,0x800
c0021cea:	83 c4 10             	add    esp,0x10
c0021ced:	eb cb                	jmp    c0021cba <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021cef:	83 ec 0c             	sub    esp,0xc
c0021cf2:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021cf6:	57                   	push   edi
c0021cf7:	e8 98 ea fd ff       	call   c0000794 <strlen>
c0021cfc:	50                   	push   eax
c0021cfd:	57                   	push   edi
c0021cfe:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021d05:	56                   	push   esi
c0021d06:	e8 2a f9 ff ff       	call   c0021635 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021d0b:	83 c4 20             	add    esp,0x20
c0021d0e:	85 c0                	test   eax,eax
c0021d10:	75 13                	jne    c0021d25 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021d12:	83 ec 0c             	sub    esp,0xc
c0021d15:	56                   	push   esi
c0021d16:	e8 35 db fe ff       	call   c000f850 <free>
c0021d1b:	83 c4 10             	add    esp,0x10
c0021d1e:	31 c0                	xor    eax,eax
c0021d20:	e9 b3 00 00 00       	jmp    c0021dd8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021d25:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021d29:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021d2d:	c1 e7 08             	shl    edi,0x8
c0021d30:	c1 e2 10             	shl    edx,0x10
c0021d33:	09 d7                	or     edi,edx
c0021d35:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021d39:	09 d7                	or     edi,edx
c0021d3b:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021d3f:	c1 e2 18             	shl    edx,0x18
c0021d42:	09 d7                	or     edi,edx
c0021d44:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021d48:	89 d1                	mov    ecx,edx
c0021d4a:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021d4e:	c1 e1 08             	shl    ecx,0x8
c0021d51:	c1 e2 10             	shl    edx,0x10
c0021d54:	09 ca                	or     edx,ecx
c0021d56:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021d5a:	09 ca                	or     edx,ecx
c0021d5c:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021d60:	c1 e1 18             	shl    ecx,0x18
c0021d63:	09 ca                	or     edx,ecx
c0021d65:	89 e9                	mov    ecx,ebp
c0021d67:	84 c9                	test   cl,cl
c0021d69:	74 3c                	je     c0021da7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021d6b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021d6f:	83 ec 0c             	sub    esp,0xc
c0021d72:	56                   	push   esi
c0021d73:	e8 d8 da fe ff       	call   c000f850 <free>
c0021d78:	83 c4 0c             	add    esp,0xc
c0021d7b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021d82:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021d87:	50                   	push   eax
c0021d88:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021d8f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021d96:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021d9a:	52                   	push   edx
c0021d9b:	57                   	push   edi
c0021d9c:	53                   	push   ebx
c0021d9d:	e8 6e fe ff ff       	call   c0021c10 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021da2:	83 c4 20             	add    esp,0x20
c0021da5:	eb 31                	jmp    c0021dd8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021da7:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021daa:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021db1:	d0 e8                	shr    al,1
c0021db3:	89 3b                	mov    DWORD PTR [ebx],edi
c0021db5:	83 e0 01             	and    eax,0x1
c0021db8:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021dbf:	83 ec 0c             	sub    esp,0xc
c0021dc2:	89 13                	mov    DWORD PTR [ebx],edx
c0021dc4:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021dcb:	89 03                	mov    DWORD PTR [ebx],eax
c0021dcd:	56                   	push   esi
c0021dce:	e8 7d da fe ff       	call   c000f850 <free>
c0021dd3:	83 c4 10             	add    esp,0x10
c0021dd6:	b0 01                	mov    al,0x1
c0021dd8:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021dde:	5b                   	pop    ebx
c0021ddf:	5e                   	pop    esi
c0021de0:	5f                   	pop    edi
c0021de1:	5d                   	pop    ebp
c0021de2:	c3                   	ret    

c0021de3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021de3:	55                   	push   ebp
c0021de4:	57                   	push   edi
c0021de5:	56                   	push   esi
c0021de6:	53                   	push   ebx
c0021de7:	83 ec 20             	sub    esp,0x20
c0021dea:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021dee:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021df2:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021df6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021dfe:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021e06:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021e0b:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021e11:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021e17:	57                   	push   edi
c0021e18:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021e1c:	50                   	push   eax
c0021e1d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021e21:	50                   	push   eax
c0021e22:	e8 94 fd ff ff       	call   c0021bbb <readRoot(unsigned int*, unsigned int*, char)>
c0021e27:	5a                   	pop    edx
c0021e28:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021e2c:	e8 63 e9 fd ff       	call   c0000794 <strlen>
c0021e31:	83 c4 10             	add    esp,0x10
c0021e34:	83 f8 03             	cmp    eax,0x3
c0021e37:	77 17                	ja     c0021e50 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021e39:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021e3d:	89 03                	mov    DWORD PTR [ebx],eax
c0021e3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021e43:	89 06                	mov    DWORD PTR [esi],eax
c0021e45:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021e4c:	b0 01                	mov    al,0x1
c0021e4e:	eb 19                	jmp    c0021e69 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021e50:	50                   	push   eax
c0021e51:	55                   	push   ebp
c0021e52:	57                   	push   edi
c0021e53:	56                   	push   esi
c0021e54:	53                   	push   ebx
c0021e55:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021e59:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021e5d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021e61:	e8 aa fd ff ff       	call   c0021c10 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021e66:	83 c4 20             	add    esp,0x20
c0021e69:	83 c4 1c             	add    esp,0x1c
c0021e6c:	5b                   	pop    ebx
c0021e6d:	5e                   	pop    esi
c0021e6e:	5f                   	pop    edi
c0021e6f:	5d                   	pop    ebp
c0021e70:	c3                   	ret    
c0021e71:	90                   	nop

c0021e72 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021e72:	57                   	push   edi
c0021e73:	56                   	push   esi
c0021e74:	53                   	push   ebx
c0021e75:	83 ec 10             	sub    esp,0x10
c0021e78:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021e7c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021e80:	85 ff                	test   edi,edi
c0021e82:	0f 84 9d 00 00 00    	je     c0021f25 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021e88:	85 f6                	test   esi,esi
c0021e8a:	0f 84 95 00 00 00    	je     c0021f25 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021e90:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021e95:	74 17                	je     c0021eae <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0021e97:	83 ec 0c             	sub    esp,0xc
c0021e9a:	68 9b c7 02 c0       	push   0xc002c79b
c0021e9f:	e8 30 0f ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0021ea4:	83 c4 10             	add    esp,0x10
c0021ea7:	b8 03 00 00 00       	mov    eax,0x3
c0021eac:	eb 7c                	jmp    c0021f2a <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021eae:	83 ec 0c             	sub    esp,0xc
c0021eb1:	6a 1c                	push   0x1c
c0021eb3:	e8 88 d9 fe ff       	call   c000f840 <malloc>
c0021eb8:	89 07                	mov    DWORD PTR [edi],eax
c0021eba:	89 c3                	mov    ebx,eax
c0021ebc:	58                   	pop    eax
c0021ebd:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021ec1:	50                   	push   eax
c0021ec2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021ec5:	50                   	push   eax
c0021ec6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021eca:	50                   	push   eax
c0021ecb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021ecf:	50                   	push   eax
c0021ed0:	56                   	push   esi
c0021ed1:	e8 0d ff ff ff       	call   c0021de3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021ed6:	83 c4 20             	add    esp,0x20
c0021ed9:	84 c0                	test   al,al
c0021edb:	74 07                	je     c0021ee4 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0021edd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021ee2:	74 0b                	je     c0021eef <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0021ee4:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021ee8:	b8 01 00 00 00       	mov    eax,0x1
c0021eed:	eb 3b                	jmp    c0021f2a <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021eef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ef3:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021ef7:	89 03                	mov    DWORD PTR [ebx],eax
c0021ef9:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021f00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021f04:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021f0b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021f12:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021f15:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021f1c:	8a 06                	mov    al,BYTE PTR [esi]
c0021f1e:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021f21:	31 c0                	xor    eax,eax
c0021f23:	eb 05                	jmp    c0021f2a <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021f25:	b8 04 00 00 00       	mov    eax,0x4
c0021f2a:	83 c4 10             	add    esp,0x10
c0021f2d:	5b                   	pop    ebx
c0021f2e:	5e                   	pop    esi
c0021f2f:	5f                   	pop    edi
c0021f30:	c3                   	ret    
c0021f31:	90                   	nop

c0021f32 <ISO9660::exists(char const*)>:
c0021f32:	83 ec 28             	sub    esp,0x28
c0021f35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021f39:	8d 54 24 18          	lea    edx,[esp+0x18]
c0021f3d:	52                   	push   edx
c0021f3e:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0021f41:	52                   	push   edx
c0021f42:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021f46:	52                   	push   edx
c0021f47:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021f4b:	52                   	push   edx
c0021f4c:	50                   	push   eax
c0021f4d:	e8 91 fe ff ff       	call   c0021de3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021f52:	83 c4 3c             	add    esp,0x3c
c0021f55:	c3                   	ret    

c0021f56 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0021f56:	56                   	push   esi
c0021f57:	53                   	push   ebx
c0021f58:	83 ec 14             	sub    esp,0x14
c0021f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0021f5f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021f63:	85 db                	test   ebx,ebx
c0021f65:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021f69:	0f 94 c2             	sete   dl
c0021f6c:	85 f6                	test   esi,esi
c0021f6e:	0f 94 c0             	sete   al
c0021f71:	08 c2                	or     dl,al
c0021f73:	75 68                	jne    c0021fdd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021f75:	85 c9                	test   ecx,ecx
c0021f77:	74 64                	je     c0021fdd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021f79:	83 ec 0c             	sub    esp,0xc
c0021f7c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021f7f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021f83:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021f89:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021f90:	50                   	push   eax
c0021f91:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0021f94:	50                   	push   eax
c0021f95:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f99:	50                   	push   eax
c0021f9a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f9e:	50                   	push   eax
c0021f9f:	51                   	push   ecx
c0021fa0:	e8 3e fe ff ff       	call   c0021de3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021fa5:	83 c4 20             	add    esp,0x20
c0021fa8:	ba 01 00 00 00       	mov    edx,0x1
c0021fad:	84 c0                	test   al,al
c0021faf:	74 31                	je     c0021fe2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021fb1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021fb5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021fbc:	89 03                	mov    DWORD PTR [ebx],eax
c0021fbe:	ba 00 00 00 00       	mov    edx,0x0
c0021fc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021fc7:	85 c0                	test   eax,eax
c0021fc9:	0f 95 06             	setne  BYTE PTR [esi]
c0021fcc:	74 14                	je     c0021fe2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021fce:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021fd4:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021fdb:	eb 05                	jmp    c0021fe2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021fdd:	ba 04 00 00 00       	mov    edx,0x4
c0021fe2:	83 c4 14             	add    esp,0x14
c0021fe5:	89 d0                	mov    eax,edx
c0021fe7:	5b                   	pop    ebx
c0021fe8:	5e                   	pop    esi
c0021fe9:	c3                   	ret    

c0021fea <ISO9660::openDir(char const*, void**)>:
c0021fea:	57                   	push   edi
c0021feb:	56                   	push   esi
c0021fec:	53                   	push   ebx
c0021fed:	83 ec 10             	sub    esp,0x10
c0021ff0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021ff4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021ff8:	85 ff                	test   edi,edi
c0021ffa:	0f 84 95 00 00 00    	je     c0022095 <ISO9660::openDir(char const*, void**)+0xab>
c0022000:	85 f6                	test   esi,esi
c0022002:	0f 84 8d 00 00 00    	je     c0022095 <ISO9660::openDir(char const*, void**)+0xab>
c0022008:	83 ec 0c             	sub    esp,0xc
c002200b:	6a 1c                	push   0x1c
c002200d:	e8 2e d8 fe ff       	call   c000f840 <malloc>
c0022012:	89 07                	mov    DWORD PTR [edi],eax
c0022014:	89 c3                	mov    ebx,eax
c0022016:	59                   	pop    ecx
c0022017:	8d 44 24 18          	lea    eax,[esp+0x18]
c002201b:	50                   	push   eax
c002201c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c002201f:	50                   	push   eax
c0022020:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022024:	50                   	push   eax
c0022025:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022029:	50                   	push   eax
c002202a:	56                   	push   esi
c002202b:	e8 b3 fd ff ff       	call   c0021de3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022030:	83 c4 20             	add    esp,0x20
c0022033:	84 c0                	test   al,al
c0022035:	74 07                	je     c002203e <ISO9660::openDir(char const*, void**)+0x54>
c0022037:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002203c:	75 21                	jne    c002205f <ISO9660::openDir(char const*, void**)+0x75>
c002203e:	0f b6 c0             	movzx  eax,al
c0022041:	52                   	push   edx
c0022042:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022046:	50                   	push   eax
c0022047:	68 c1 c7 02 c0       	push   0xc002c7c1
c002204c:	e8 83 0d ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0022051:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022055:	83 c4 10             	add    esp,0x10
c0022058:	b8 01 00 00 00       	mov    eax,0x1
c002205d:	eb 3b                	jmp    c002209a <ISO9660::openDir(char const*, void**)+0xb0>
c002205f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022063:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022067:	89 03                	mov    DWORD PTR [ebx],eax
c0022069:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022070:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022074:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002207b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022082:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022085:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002208c:	8a 06                	mov    al,BYTE PTR [esi]
c002208e:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022091:	31 c0                	xor    eax,eax
c0022093:	eb 05                	jmp    c002209a <ISO9660::openDir(char const*, void**)+0xb0>
c0022095:	b8 04 00 00 00       	mov    eax,0x4
c002209a:	83 c4 10             	add    esp,0x10
c002209d:	5b                   	pop    ebx
c002209e:	5e                   	pop    esi
c002209f:	5f                   	pop    edi
c00220a0:	c3                   	ret    
c00220a1:	90                   	nop

c00220a2 <ISO9660::ISO9660()>:
c00220a2:	83 ec 0c             	sub    esp,0xc
c00220a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220a9:	83 ec 0c             	sub    esp,0xc
c00220ac:	50                   	push   eax
c00220ad:	e8 26 10 ff ff       	call   c00130d8 <Filesystem::Filesystem()>
c00220b2:	83 c4 10             	add    esp,0x10
c00220b5:	ba e4 c7 02 c0       	mov    edx,0xc002c7e4
c00220ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220be:	89 10                	mov    DWORD PTR [eax],edx
c00220c0:	90                   	nop
c00220c1:	83 c4 0c             	add    esp,0xc
c00220c4:	c3                   	ret    
c00220c5:	90                   	nop

c00220c6 <SoundChannel::~SoundChannel()>:
c00220c6:	83 ec 0c             	sub    esp,0xc
c00220c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220cd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00220d0:	83 ec 0c             	sub    esp,0xc
c00220d3:	50                   	push   eax
c00220d4:	e8 77 d7 fe ff       	call   c000f850 <free>
c00220d9:	83 c4 10             	add    esp,0x10
c00220dc:	90                   	nop
c00220dd:	83 c4 0c             	add    esp,0xc
c00220e0:	c3                   	ret    
c00220e1:	90                   	nop

c00220e2 <SoundChannel::setSpeed(float)>:
c00220e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00220ea:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00220ed:	c3                   	ret    

c00220ee <SoundChannel::getSpeed()>:
c00220ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220f2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00220f5:	c3                   	ret    

c00220f6 <SoundChannel::setVolume(int)>:
c00220f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00220fa:	83 f8 64             	cmp    eax,0x64
c00220fd:	7e 05                	jle    c0022104 <SoundChannel::setVolume(int)+0xe>
c00220ff:	b8 64 00 00 00       	mov    eax,0x64
c0022104:	85 c0                	test   eax,eax
c0022106:	79 02                	jns    c002210a <SoundChannel::setVolume(int)+0x14>
c0022108:	31 c0                	xor    eax,eax
c002210a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002210e:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0022111:	c3                   	ret    

c0022112 <SoundChannel::getVolume()>:
c0022112:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022116:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0022119:	c3                   	ret    

c002211a <SoundChannel::pause()>:
c002211a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002211e:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0022122:	c3                   	ret    
c0022123:	90                   	nop

c0022124 <SoundChannel::SoundChannel(int, int, int, int)>:
c0022124:	83 ec 1c             	sub    esp,0x1c
c0022127:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002212b:	e8 ea ff ff ff       	call   c002211a <SoundChannel::pause()>
c0022130:	83 c4 04             	add    esp,0x4
c0022133:	6a 50                	push   0x50
c0022135:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022139:	e8 b8 ff ff ff       	call   c00220f6 <SoundChannel::setVolume(int)>
c002213e:	83 c4 08             	add    esp,0x8
c0022141:	a1 5c c8 02 c0       	mov    eax,ds:0xc002c85c
c0022146:	50                   	push   eax
c0022147:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002214b:	e8 92 ff ff ff       	call   c00220e2 <SoundChannel::setSpeed(float)>
c0022150:	83 c4 08             	add    esp,0x8
c0022153:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022157:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002215b:	89 10                	mov    DWORD PTR [eax],edx
c002215d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022161:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022165:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022168:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002216c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022170:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022173:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0022178:	75 23                	jne    c002219d <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c002217a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002217e:	8b 10                	mov    edx,DWORD PTR [eax]
c0022180:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022184:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022187:	0f af c2             	imul   eax,edx
c002218a:	85 c0                	test   eax,eax
c002218c:	79 03                	jns    c0022191 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c002218e:	83 c0 03             	add    eax,0x3
c0022191:	c1 f8 02             	sar    eax,0x2
c0022194:	05 a0 0f 00 00       	add    eax,0xfa0
c0022199:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002219d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221a1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00221a5:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00221a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221ac:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00221b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221b7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00221be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221c2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00221c5:	c1 e0 02             	shl    eax,0x2
c00221c8:	83 ec 0c             	sub    esp,0xc
c00221cb:	50                   	push   eax
c00221cc:	e8 6f d6 fe ff       	call   c000f840 <malloc>
c00221d1:	83 c4 10             	add    esp,0x10
c00221d4:	89 c2                	mov    edx,eax
c00221d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221da:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00221dd:	83 ec 04             	sub    esp,0x4
c00221e0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00221e4:	50                   	push   eax
c00221e5:	6a 01                	push   0x1
c00221e7:	6a 04                	push   0x4
c00221e9:	e8 b1 69 fe ff       	call   c0008b9f <src_new>
c00221ee:	83 c4 10             	add    esp,0x10
c00221f1:	89 c2                	mov    edx,eax
c00221f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221f7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00221fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221fe:	85 c0                	test   eax,eax
c0022200:	74 10                	je     c0022212 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0022202:	83 ec 0c             	sub    esp,0xc
c0022205:	68 40 c8 02 c0       	push   0xc002c840
c002220a:	e8 a0 82 ff ff       	call   c001a4af <Krnl::panic(char const*)>
c002220f:	83 c4 10             	add    esp,0x10
c0022212:	a0 00 26 03 c0       	mov    al,ds:0xc0032600
c0022217:	83 f0 01             	xor    eax,0x1
c002221a:	84 c0                	test   al,al
c002221c:	74 57                	je     c0022275 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c002221e:	a1 60 c8 02 c0       	mov    eax,ds:0xc002c860
c0022223:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022227:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002222f:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0022237:	7f 35                	jg     c002226e <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0022239:	83 ec 0c             	sub    esp,0xc
c002223c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022240:	e8 92 4f 00 00       	call   c00271d7 <__floatsisf>
c0022245:	83 c4 10             	add    esp,0x10
c0022248:	8b 15 60 c8 02 c0    	mov    edx,DWORD PTR ds:0xc002c860
c002224e:	83 ec 08             	sub    esp,0x8
c0022251:	52                   	push   edx
c0022252:	50                   	push   eax
c0022253:	e8 91 4b 00 00       	call   c0026de9 <__mulsf3>
c0022258:	83 c4 10             	add    esp,0x10
c002225b:	89 c2                	mov    edx,eax
c002225d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022261:	89 14 85 00 22 03 c0 	mov    DWORD PTR [eax*4-0x3ffcde00],edx
c0022268:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002226c:	eb c1                	jmp    c002222f <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c002226e:	c6 05 00 26 03 c0 01 	mov    BYTE PTR ds:0xc0032600,0x1
c0022275:	90                   	nop
c0022276:	83 c4 1c             	add    esp,0x1c
c0022279:	c3                   	ret    

c002227a <SoundChannel::play()>:
c002227a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002227e:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0022282:	c3                   	ret    
c0022283:	90                   	nop

c0022284 <SoundChannel::paused()>:
c0022284:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022288:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c002228b:	c3                   	ret    

c002228c <SoundChannel::getSampleRate()>:
c002228c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022290:	8b 00                	mov    eax,DWORD PTR [eax]
c0022292:	c3                   	ret    
c0022293:	90                   	nop

c0022294 <SoundChannel::getBits()>:
c0022294:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022298:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002229b:	c3                   	ret    

c002229c <SoundChannel::getBufferUsed()>:
c002229c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222a0:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00222a3:	c3                   	ret    

c00222a4 <SoundChannel::getBufferSize()>:
c00222a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222a8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00222ab:	c3                   	ret    

c00222ac <SoundChannel::unbuffer(float*, int, int)>:
c00222ac:	56                   	push   esi
c00222ad:	53                   	push   ebx
c00222ae:	83 ec 40             	sub    esp,0x40
c00222b1:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00222b5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00222b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00222bc:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00222bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00222c3:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00222c7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00222cb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00222cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00222d3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00222d7:	e8 fb 4e 00 00       	call   c00271d7 <__floatsisf>
c00222dc:	5a                   	pop    edx
c00222dd:	89 c6                	mov    esi,eax
c00222df:	ff 33                	push   DWORD PTR [ebx]
c00222e1:	e8 f1 4e 00 00       	call   c00271d7 <__floatsisf>
c00222e6:	59                   	pop    ecx
c00222e7:	5a                   	pop    edx
c00222e8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00222eb:	50                   	push   eax
c00222ec:	e8 f8 4a 00 00       	call   c0026de9 <__mulsf3>
c00222f1:	59                   	pop    ecx
c00222f2:	5a                   	pop    edx
c00222f3:	50                   	push   eax
c00222f4:	56                   	push   esi
c00222f5:	e8 b2 4c 00 00       	call   c0026fac <__divsf3>
c00222fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00222fd:	e8 a5 61 00 00       	call   c00284a7 <__extendsfdf2>
c0022302:	59                   	pop    ecx
c0022303:	5e                   	pop    esi
c0022304:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022308:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c002230c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0022314:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022318:	50                   	push   eax
c0022319:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c002231c:	e8 73 64 fe ff       	call   c0008794 <src_process>
c0022321:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022325:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0022328:	83 c4 0c             	add    esp,0xc
c002232b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c002232e:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0022331:	29 d0                	sub    eax,edx
c0022333:	c1 e0 02             	shl    eax,0x2
c0022336:	50                   	push   eax
c0022337:	8d 04 91             	lea    eax,[ecx+edx*4]
c002233a:	50                   	push   eax
c002233b:	51                   	push   ecx
c002233c:	e8 3b e3 fd ff       	call   c000067c <memmove>
c0022341:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022345:	83 c4 44             	add    esp,0x44
c0022348:	5b                   	pop    ebx
c0022349:	5e                   	pop    esi
c002234a:	c3                   	ret    
c002234b:	90                   	nop

c002234c <SoundChannel::buffer8(unsigned char*, int)>:
c002234c:	55                   	push   ebp
c002234d:	57                   	push   edi
c002234e:	56                   	push   esi
c002234f:	53                   	push   ebx
c0022350:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022354:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022358:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c002235b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002235f:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022362:	74 7a                	je     c00223de <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022364:	85 ff                	test   edi,edi
c0022366:	7e 76                	jle    c00223de <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022368:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c002236c:	8d 70 01             	lea    esi,[eax+0x1]
c002236f:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022372:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022375:	8b 1c 9d 00 22 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcde00]
c002237c:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c002237f:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022382:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022385:	74 5e                	je     c00223e5 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022387:	83 ff 01             	cmp    edi,0x1
c002238a:	74 4b                	je     c00223d7 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c002238c:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022390:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022393:	8d 70 01             	lea    esi,[eax+0x1]
c0022396:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022399:	8b 1c 9d 00 22 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcde00]
c00223a0:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00223a3:	b8 02 00 00 00       	mov    eax,0x2
c00223a8:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00223ab:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00223ae:	75 23                	jne    c00223d3 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c00223b0:	eb 27                	jmp    c00223d9 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00223b2:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c00223b7:	8d 71 01             	lea    esi,[ecx+0x1]
c00223ba:	40                   	inc    eax
c00223bb:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00223be:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c00223c1:	8b 1c 9d 00 22 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcde00]
c00223c8:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c00223cb:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00223ce:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00223d1:	74 06                	je     c00223d9 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00223d3:	39 c7                	cmp    edi,eax
c00223d5:	75 db                	jne    c00223b2 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c00223d7:	89 f8                	mov    eax,edi
c00223d9:	5b                   	pop    ebx
c00223da:	5e                   	pop    esi
c00223db:	5f                   	pop    edi
c00223dc:	5d                   	pop    ebp
c00223dd:	c3                   	ret    
c00223de:	5b                   	pop    ebx
c00223df:	31 c0                	xor    eax,eax
c00223e1:	5e                   	pop    esi
c00223e2:	5f                   	pop    edi
c00223e3:	5d                   	pop    ebp
c00223e4:	c3                   	ret    
c00223e5:	b8 01 00 00 00       	mov    eax,0x1
c00223ea:	eb ed                	jmp    c00223d9 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c00223ec <SoundDevice::SoundDevice(char const*)>:
c00223ec:	83 ec 1c             	sub    esp,0x1c
c00223ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223f3:	83 ec 08             	sub    esp,0x8
c00223f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00223fa:	50                   	push   eax
c00223fb:	e8 ea 1f ff ff       	call   c00143ea <Device::Device(char const*)>
c0022400:	83 c4 10             	add    esp,0x10
c0022403:	ba 6c c8 02 c0       	mov    edx,0xc002c86c
c0022408:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002240c:	89 10                	mov    DWORD PTR [eax],edx
c002240e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022412:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c002241c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022420:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c002242a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022432:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022437:	7f 19                	jg     c0022452 <SoundDevice::SoundDevice(char const*)+0x66>
c0022439:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002243d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022441:	83 c2 54             	add    edx,0x54
c0022444:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c002244c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022450:	eb e0                	jmp    c0022432 <SoundDevice::SoundDevice(char const*)+0x46>
c0022452:	90                   	nop
c0022453:	83 c4 1c             	add    esp,0x1c
c0022456:	c3                   	ret    
c0022457:	90                   	nop

c0022458 <SoundDevice::~SoundDevice()>:
c0022458:	53                   	push   ebx
c0022459:	83 ec 18             	sub    esp,0x18
c002245c:	ba 6c c8 02 c0       	mov    edx,0xc002c86c
c0022461:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022465:	89 10                	mov    DWORD PTR [eax],edx
c0022467:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002246f:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022474:	7f 46                	jg     c00224bc <SoundDevice::~SoundDevice()+0x64>
c0022476:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002247a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002247e:	83 c2 54             	add    edx,0x54
c0022481:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022485:	85 c0                	test   eax,eax
c0022487:	74 2d                	je     c00224b6 <SoundDevice::~SoundDevice()+0x5e>
c0022489:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002248d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022491:	83 c2 54             	add    edx,0x54
c0022494:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022498:	85 db                	test   ebx,ebx
c002249a:	74 1a                	je     c00224b6 <SoundDevice::~SoundDevice()+0x5e>
c002249c:	83 ec 0c             	sub    esp,0xc
c002249f:	53                   	push   ebx
c00224a0:	e8 21 fc ff ff       	call   c00220c6 <SoundChannel::~SoundChannel()>
c00224a5:	83 c4 10             	add    esp,0x10
c00224a8:	83 ec 08             	sub    esp,0x8
c00224ab:	6a 2c                	push   0x2c
c00224ad:	53                   	push   ebx
c00224ae:	e8 41 08 ff ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c00224b3:	83 c4 10             	add    esp,0x10
c00224b6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00224ba:	eb b3                	jmp    c002246f <SoundDevice::~SoundDevice()+0x17>
c00224bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224c0:	83 ec 0c             	sub    esp,0xc
c00224c3:	50                   	push   eax
c00224c4:	e8 03 1c ff ff       	call   c00140cc <Device::~Device()>
c00224c9:	83 c4 10             	add    esp,0x10
c00224cc:	90                   	nop
c00224cd:	83 c4 18             	add    esp,0x18
c00224d0:	5b                   	pop    ebx
c00224d1:	c3                   	ret    

c00224d2 <SoundDevice::~SoundDevice()>:
c00224d2:	83 ec 0c             	sub    esp,0xc
c00224d5:	83 ec 0c             	sub    esp,0xc
c00224d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00224dc:	e8 77 ff ff ff       	call   c0022458 <SoundDevice::~SoundDevice()>
c00224e1:	83 c4 10             	add    esp,0x10
c00224e4:	83 ec 08             	sub    esp,0x8
c00224e7:	68 e4 01 00 00       	push   0x1e4
c00224ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00224f0:	e8 ff 07 ff ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c00224f5:	83 c4 10             	add    esp,0x10
c00224f8:	83 c4 0c             	add    esp,0xc
c00224fb:	c3                   	ret    

c00224fc <SoundDevice::getFreeChannelNum()>:
c00224fc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022500:	31 c0                	xor    eax,eax
c0022502:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c002250a:	74 09                	je     c0022515 <SoundDevice::getFreeChannelNum()+0x19>
c002250c:	40                   	inc    eax
c002250d:	83 f8 20             	cmp    eax,0x20
c0022510:	75 f0                	jne    c0022502 <SoundDevice::getFreeChannelNum()+0x6>
c0022512:	83 c8 ff             	or     eax,0xffffffff
c0022515:	c3                   	ret    

c0022516 <SoundDevice::addChannel(SoundChannel*)>:
c0022516:	56                   	push   esi
c0022517:	53                   	push   ebx
c0022518:	51                   	push   ecx
c0022519:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002251d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022521:	53                   	push   ebx
c0022522:	e8 d5 ff ff ff       	call   c00224fc <SoundDevice::getFreeChannelNum()>
c0022527:	5a                   	pop    edx
c0022528:	83 f8 ff             	cmp    eax,0xffffffff
c002252b:	74 51                	je     c002257e <SoundDevice::addChannel(SoundChannel*)+0x68>
c002252d:	85 f6                	test   esi,esi
c002252f:	74 4d                	je     c002257e <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022531:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022538:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c002253f:	75 30                	jne    c0022571 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022541:	83 ec 0c             	sub    esp,0xc
c0022544:	56                   	push   esi
c0022545:	e8 42 fd ff ff       	call   c002228c <SoundChannel::getSampleRate()>
c002254a:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022550:	89 34 24             	mov    DWORD PTR [esp],esi
c0022553:	e8 3c fd ff ff       	call   c0022294 <SoundChannel::getBits()>
c0022558:	83 c4 0c             	add    esp,0xc
c002255b:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022561:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022563:	50                   	push   eax
c0022564:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c002256a:	53                   	push   ebx
c002256b:	ff 52 28             	call   DWORD PTR [edx+0x28]
c002256e:	83 c4 10             	add    esp,0x10
c0022571:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022577:	b8 01 00 00 00       	mov    eax,0x1
c002257c:	eb 03                	jmp    c0022581 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c002257e:	83 c8 ff             	or     eax,0xffffffff
c0022581:	5a                   	pop    edx
c0022582:	5b                   	pop    ebx
c0022583:	5e                   	pop    esi
c0022584:	c3                   	ret    
c0022585:	90                   	nop

c0022586 <SoundDevice::removeChannel(int)>:
c0022586:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002258a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002258e:	83 fa 1f             	cmp    edx,0x1f
c0022591:	77 23                	ja     c00225b6 <SoundDevice::removeChannel(int)+0x30>
c0022593:	8d 14 90             	lea    edx,[eax+edx*4]
c0022596:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c002259d:	74 17                	je     c00225b6 <SoundDevice::removeChannel(int)+0x30>
c002259f:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c00225a9:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c00225af:	75 05                	jne    c00225b6 <SoundDevice::removeChannel(int)+0x30>
c00225b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00225b3:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c00225b6:	c3                   	ret    
c00225b7:	90                   	nop

c00225b8 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c00225b8:	57                   	push   edi
c00225b9:	56                   	push   esi
c00225ba:	53                   	push   ebx
c00225bb:	31 db                	xor    ebx,ebx
c00225bd:	83 ec 10             	sub    esp,0x10
c00225c0:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00225c4:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00225c8:	0f 8d cb 00 00 00    	jge    c0022699 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c00225ce:	83 ec 0c             	sub    esp,0xc
c00225d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00225d5:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00225d8:	e8 ca 5e 00 00       	call   c00284a7 <__extendsfdf2>
c00225dd:	83 c4 10             	add    esp,0x10
c00225e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00225e4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00225e8:	68 00 00 f0 3f       	push   0x3ff00000
c00225ed:	6a 00                	push   0x0
c00225ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225f7:	e8 37 4e 00 00       	call   c0027433 <__adddf3>
c00225fc:	83 c4 10             	add    esp,0x10
c00225ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022603:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022607:	68 00 00 e0 3f       	push   0x3fe00000
c002260c:	6a 00                	push   0x0
c002260e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022612:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022616:	e8 95 54 00 00       	call   c0027ab0 <__muldf3>
c002261b:	83 c4 10             	add    esp,0x10
c002261e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022622:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022626:	68 00 00 60 40       	push   0x40600000
c002262b:	6a 00                	push   0x0
c002262d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022631:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022635:	e8 76 54 00 00       	call   c0027ab0 <__muldf3>
c002263a:	59                   	pop    ecx
c002263b:	5f                   	pop    edi
c002263c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022640:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022648:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002264c:	e8 32 5d 00 00       	call   c0028383 <__truncdfsf2>
c0022651:	5a                   	pop    edx
c0022652:	89 c7                	mov    edi,eax
c0022654:	59                   	pop    ecx
c0022655:	68 00 00 fe 42       	push   0x42fe0000
c002265a:	50                   	push   eax
c002265b:	e8 cd 4d 00 00       	call   c002742d <__gesf2>
c0022660:	83 c4 10             	add    esp,0x10
c0022663:	85 c0                	test   eax,eax
c0022665:	78 06                	js     c002266d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022667:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c002266b:	eb 26                	jmp    c0022693 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002266d:	50                   	push   eax
c002266e:	50                   	push   eax
c002266f:	6a 00                	push   0x0
c0022671:	57                   	push   edi
c0022672:	e8 ba 4d 00 00       	call   c0027431 <__lesf2>
c0022677:	83 c4 10             	add    esp,0x10
c002267a:	85 c0                	test   eax,eax
c002267c:	7f 06                	jg     c0022684 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c002267e:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022682:	eb 0f                	jmp    c0022693 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022684:	83 ec 0c             	sub    esp,0xc
c0022687:	57                   	push   edi
c0022688:	e8 af 5e 00 00       	call   c002853c <lrintf>
c002268d:	83 c4 10             	add    esp,0x10
c0022690:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022693:	43                   	inc    ebx
c0022694:	e9 2b ff ff ff       	jmp    c00225c4 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022699:	83 c4 10             	add    esp,0x10
c002269c:	5b                   	pop    ebx
c002269d:	5e                   	pop    esi
c002269e:	5f                   	pop    edi
c002269f:	c3                   	ret    

c00226a0 <SoundDevice::getAudio(int, float*, float*)>:
c00226a0:	55                   	push   ebp
c00226a1:	57                   	push   edi
c00226a2:	56                   	push   esi
c00226a3:	53                   	push   ebx
c00226a4:	31 db                	xor    ebx,ebx
c00226a6:	83 ec 20             	sub    esp,0x20
c00226a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00226ad:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00226b1:	c1 e0 02             	shl    eax,0x2
c00226b4:	50                   	push   eax
c00226b5:	6a 00                	push   0x0
c00226b7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00226bb:	e8 b8 e0 fd ff       	call   c0000778 <memset>
c00226c0:	83 c4 10             	add    esp,0x10
c00226c3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00226c7:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c00226ce:	85 c0                	test   eax,eax
c00226d0:	0f 84 d7 00 00 00    	je     c00227ad <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00226d6:	83 ec 0c             	sub    esp,0xc
c00226d9:	50                   	push   eax
c00226da:	e8 a5 fb ff ff       	call   c0022284 <SoundChannel::paused()>
c00226df:	83 c4 10             	add    esp,0x10
c00226e2:	84 c0                	test   al,al
c00226e4:	0f 85 c3 00 00 00    	jne    c00227ad <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00226ea:	83 ec 0c             	sub    esp,0xc
c00226ed:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00226f4:	e8 19 fa ff ff       	call   c0022112 <SoundChannel::getVolume()>
c00226f9:	83 c4 10             	add    esp,0x10
c00226fc:	85 c0                	test   eax,eax
c00226fe:	0f 84 a9 00 00 00    	je     c00227ad <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022704:	83 ec 0c             	sub    esp,0xc
c0022707:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002270e:	e8 ff f9 ff ff       	call   c0022112 <SoundChannel::getVolume()>
c0022713:	83 ec 0c             	sub    esp,0xc
c0022716:	50                   	push   eax
c0022717:	e8 bb 4a 00 00       	call   c00271d7 <__floatsisf>
c002271c:	59                   	pop    ecx
c002271d:	5d                   	pop    ebp
c002271e:	31 ed                	xor    ebp,ebp
c0022720:	68 00 00 c8 42       	push   0x42c80000
c0022725:	50                   	push   eax
c0022726:	e8 81 48 00 00       	call   c0026fac <__divsf3>
c002272b:	83 c4 10             	add    esp,0x10
c002272e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022732:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0022736:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c002273c:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022740:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022747:	e8 60 fb ff ff       	call   c00222ac <SoundChannel::unbuffer(float*, int, int)>
c002274c:	83 c4 20             	add    esp,0x20
c002274f:	89 c1                	mov    ecx,eax
c0022751:	39 cd                	cmp    ebp,ecx
c0022753:	7d 52                	jge    c00227a7 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0022755:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0022759:	50                   	push   eax
c002275a:	50                   	push   eax
c002275b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002275f:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022762:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022766:	e8 7e 46 00 00       	call   c0026de9 <__mulsf3>
c002276b:	5a                   	pop    edx
c002276c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022770:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0022776:	e8 5c 4a 00 00       	call   c00271d7 <__floatsisf>
c002277b:	59                   	pop    ecx
c002277c:	5a                   	pop    edx
c002277d:	50                   	push   eax
c002277e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022782:	e8 25 48 00 00       	call   c0026fac <__divsf3>
c0022787:	59                   	pop    ecx
c0022788:	5a                   	pop    edx
c0022789:	50                   	push   eax
c002278a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002278e:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022791:	e8 30 43 00 00       	call   c0026ac6 <__addsf3>
c0022796:	83 c4 10             	add    esp,0x10
c0022799:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002279d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00227a1:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c00227a4:	45                   	inc    ebp
c00227a5:	eb aa                	jmp    c0022751 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c00227a7:	39 cf                	cmp    edi,ecx
c00227a9:	7e 02                	jle    c00227ad <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00227ab:	89 cf                	mov    edi,ecx
c00227ad:	43                   	inc    ebx
c00227ae:	83 fb 20             	cmp    ebx,0x20
c00227b1:	0f 85 10 ff ff ff    	jne    c00226c7 <SoundDevice::getAudio(int, float*, float*)+0x27>
c00227b7:	83 c4 1c             	add    esp,0x1c
c00227ba:	89 f8                	mov    eax,edi
c00227bc:	5b                   	pop    ebx
c00227bd:	5e                   	pop    esi
c00227be:	5f                   	pop    edi
c00227bf:	5d                   	pop    ebp
c00227c0:	c3                   	ret    
c00227c1:	90                   	nop

c00227c2 <PCI::open(int, int, void*)>:
c00227c2:	83 ec 18             	sub    esp,0x18
c00227c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00227c9:	8b 10                	mov    edx,DWORD PTR [eax]
c00227cb:	50                   	push   eax
c00227cc:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00227cf:	31 c0                	xor    eax,eax
c00227d1:	83 c4 1c             	add    esp,0x1c
c00227d4:	c3                   	ret    
c00227d5:	90                   	nop

c00227d6 <PCI::close(int, int, void*)>:
c00227d6:	31 c0                	xor    eax,eax
c00227d8:	c3                   	ret    
c00227d9:	90                   	nop

c00227da <PCI::PCI()>:
c00227da:	83 ec 0c             	sub    esp,0xc
c00227dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227e1:	83 ec 08             	sub    esp,0x8
c00227e4:	68 9c c8 02 c0       	push   0xc002c89c
c00227e9:	50                   	push   eax
c00227ea:	e8 7f 12 ff ff       	call   c0013a6e <Bus::Bus(char const*)>
c00227ef:	83 c4 10             	add    esp,0x10
c00227f2:	ba 08 c9 02 c0       	mov    edx,0xc002c908
c00227f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227fb:	89 10                	mov    DWORD PTR [eax],edx
c00227fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022801:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022807:	0f b6 d0             	movzx  edx,al
c002280a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002280e:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022819:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002281f:	0f b6 d0             	movzx  edx,al
c0022822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022826:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002282b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002282f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022835:	8d 50 01             	lea    edx,[eax+0x1]
c0022838:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002283c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022842:	0f b6 d0             	movzx  edx,al
c0022845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022849:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002284d:	83 c9 c0             	or     ecx,0xffffffc0
c0022850:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022854:	90                   	nop
c0022855:	83 c4 0c             	add    esp,0xc
c0022858:	c3                   	ret    
c0022859:	90                   	nop

c002285a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002285a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002285e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022863:	89 ca                	mov    edx,ecx
c0022865:	c1 e0 10             	shl    eax,0x10
c0022868:	81 e2 fc 00 00 00    	and    edx,0xfc
c002286e:	09 d0                	or     eax,edx
c0022870:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0022875:	c1 e2 08             	shl    edx,0x8
c0022878:	09 d0                	or     eax,edx
c002287a:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c002287f:	c1 e2 0b             	shl    edx,0xb
c0022882:	09 d0                	or     eax,edx
c0022884:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022889:	0d 00 00 00 80       	or     eax,0x80000000
c002288e:	ef                   	out    dx,eax
c002288f:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022894:	ed                   	in     eax,dx
c0022895:	83 e1 02             	and    ecx,0x2
c0022898:	0f b6 c9             	movzx  ecx,cl
c002289b:	c1 e1 03             	shl    ecx,0x3
c002289e:	d3 e8                	shr    eax,cl
c00228a0:	c3                   	ret    
c00228a1:	90                   	nop

c00228a2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00228a2:	6a 00                	push   0x0
c00228a4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00228a9:	50                   	push   eax
c00228aa:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00228af:	50                   	push   eax
c00228b0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00228b5:	50                   	push   eax
c00228b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00228ba:	e8 9b ff ff ff       	call   c002285a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00228bf:	83 c4 14             	add    esp,0x14
c00228c2:	c3                   	ret    
c00228c3:	90                   	nop

c00228c4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00228c4:	6a 0e                	push   0xe
c00228c6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00228cb:	50                   	push   eax
c00228cc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00228d1:	50                   	push   eax
c00228d2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00228d7:	50                   	push   eax
c00228d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00228dc:	e8 79 ff ff ff       	call   c002285a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00228e1:	83 c4 14             	add    esp,0x14
c00228e4:	0f b6 c0             	movzx  eax,al
c00228e7:	c3                   	ret    

c00228e8 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00228e8:	55                   	push   ebp
c00228e9:	57                   	push   edi
c00228ea:	56                   	push   esi
c00228eb:	53                   	push   ebx
c00228ec:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c00228f1:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00228f6:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c00228fb:	6a 0a                	push   0xa
c00228fd:	56                   	push   esi
c00228fe:	55                   	push   ebp
c00228ff:	57                   	push   edi
c0022900:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022904:	e8 51 ff ff ff       	call   c002285a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022909:	6a 0a                	push   0xa
c002290b:	89 c3                	mov    ebx,eax
c002290d:	56                   	push   esi
c002290e:	0f b6 db             	movzx  ebx,bl
c0022911:	55                   	push   ebp
c0022912:	57                   	push   edi
c0022913:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022917:	e8 3e ff ff ff       	call   c002285a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002291c:	83 c4 28             	add    esp,0x28
c002291f:	25 00 ff 00 00       	and    eax,0xff00
c0022924:	09 d8                	or     eax,ebx
c0022926:	5b                   	pop    ebx
c0022927:	5e                   	pop    esi
c0022928:	5f                   	pop    edi
c0022929:	5d                   	pop    ebp
c002292a:	c3                   	ret    
c002292b:	90                   	nop

c002292c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c002292c:	6a 08                	push   0x8
c002292e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022933:	50                   	push   eax
c0022934:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022939:	50                   	push   eax
c002293a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002293f:	50                   	push   eax
c0022940:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022944:	e8 11 ff ff ff       	call   c002285a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022949:	83 c4 14             	add    esp,0x14
c002294c:	0f b6 c4             	movzx  eax,ah
c002294f:	c3                   	ret    

c0022950 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022950:	6a 08                	push   0x8
c0022952:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022957:	50                   	push   eax
c0022958:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002295d:	50                   	push   eax
c002295e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022963:	50                   	push   eax
c0022964:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022968:	e8 ed fe ff ff       	call   c002285a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002296d:	83 c4 14             	add    esp,0x14
c0022970:	c3                   	ret    
c0022971:	90                   	nop

c0022972 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022972:	6a 3c                	push   0x3c
c0022974:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022979:	50                   	push   eax
c002297a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002297f:	50                   	push   eax
c0022980:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022985:	50                   	push   eax
c0022986:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002298a:	e8 cb fe ff ff       	call   c002285a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002298f:	83 c4 14             	add    esp,0x14
c0022992:	c3                   	ret    
c0022993:	90                   	nop

c0022994 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022994:	6a 18                	push   0x18
c0022996:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002299b:	50                   	push   eax
c002299c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229a1:	50                   	push   eax
c00229a2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229a7:	50                   	push   eax
c00229a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229ac:	e8 a9 fe ff ff       	call   c002285a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229b1:	83 c4 14             	add    esp,0x14
c00229b4:	0f b6 c4             	movzx  eax,ah
c00229b7:	c3                   	ret    

c00229b8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00229b8:	55                   	push   ebp
c00229b9:	57                   	push   edi
c00229ba:	56                   	push   esi
c00229bb:	53                   	push   ebx
c00229bc:	50                   	push   eax
c00229bd:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00229c1:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c00229c6:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00229cb:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c00229d0:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00229d7:	8d 43 12             	lea    eax,[ebx+0x12]
c00229da:	83 c3 10             	add    ebx,0x10
c00229dd:	0f b6 c0             	movzx  eax,al
c00229e0:	0f b6 db             	movzx  ebx,bl
c00229e3:	50                   	push   eax
c00229e4:	51                   	push   ecx
c00229e5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00229e9:	57                   	push   edi
c00229ea:	55                   	push   ebp
c00229eb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00229ef:	e8 66 fe ff ff       	call   c002285a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229f4:	53                   	push   ebx
c00229f5:	89 c6                	mov    esi,eax
c00229f7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00229fb:	c1 e6 10             	shl    esi,0x10
c00229fe:	51                   	push   ecx
c00229ff:	57                   	push   edi
c0022a00:	55                   	push   ebp
c0022a01:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022a05:	e8 50 fe ff ff       	call   c002285a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a0a:	83 c4 2c             	add    esp,0x2c
c0022a0d:	0f b7 c0             	movzx  eax,ax
c0022a10:	5b                   	pop    ebx
c0022a11:	09 f0                	or     eax,esi
c0022a13:	5e                   	pop    esi
c0022a14:	5f                   	pop    edi
c0022a15:	5d                   	pop    ebp
c0022a16:	c3                   	ret    
c0022a17:	90                   	nop

c0022a18 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022a18:	53                   	push   ebx
c0022a19:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022a1e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0022a23:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022a27:	c1 e1 10             	shl    ecx,0x10
c0022a2a:	25 fc 00 00 00       	and    eax,0xfc
c0022a2f:	09 c1                	or     ecx,eax
c0022a31:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a36:	c1 e0 08             	shl    eax,0x8
c0022a39:	09 c1                	or     ecx,eax
c0022a3b:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022a40:	c1 e0 0b             	shl    eax,0xb
c0022a43:	09 c1                	or     ecx,eax
c0022a45:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022a4b:	89 c8                	mov    eax,ecx
c0022a4d:	ef                   	out    dx,eax
c0022a4e:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022a53:	ed                   	in     eax,dx
c0022a54:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022a59:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022a5e:	74 0a                	je     c0022a6a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022a60:	0f b7 d8             	movzx  ebx,ax
c0022a63:	89 d0                	mov    eax,edx
c0022a65:	c1 e0 10             	shl    eax,0x10
c0022a68:	eb 05                	jmp    c0022a6f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022a6a:	66 31 c0             	xor    ax,ax
c0022a6d:	89 d3                	mov    ebx,edx
c0022a6f:	09 c3                	or     ebx,eax
c0022a71:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022a76:	89 c8                	mov    eax,ecx
c0022a78:	ef                   	out    dx,eax
c0022a79:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022a7e:	89 d8                	mov    eax,ebx
c0022a80:	ef                   	out    dx,eax
c0022a81:	5b                   	pop    ebx
c0022a82:	c3                   	ret    
c0022a83:	90                   	nop

c0022a84 <PCI::checkBus(unsigned char)>:
c0022a84:	56                   	push   esi
c0022a85:	53                   	push   ebx
c0022a86:	31 db                	xor    ebx,ebx
c0022a88:	51                   	push   ecx
c0022a89:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022a8e:	52                   	push   edx
c0022a8f:	53                   	push   ebx
c0022a90:	43                   	inc    ebx
c0022a91:	56                   	push   esi
c0022a92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022a96:	e8 2b 03 00 00       	call   c0022dc6 <PCI::checkDevice(unsigned char, unsigned char)>
c0022a9b:	83 c4 10             	add    esp,0x10
c0022a9e:	83 fb 20             	cmp    ebx,0x20
c0022aa1:	75 eb                	jne    c0022a8e <PCI::checkBus(unsigned char)+0xa>
c0022aa3:	58                   	pop    eax
c0022aa4:	5b                   	pop    ebx
c0022aa5:	5e                   	pop    esi
c0022aa6:	c3                   	ret    
c0022aa7:	90                   	nop

c0022aa8 <PCI::foundDevice(PCIDeviceInfo)>:
c0022aa8:	55                   	push   ebp
c0022aa9:	57                   	push   edi
c0022aaa:	56                   	push   esi
c0022aab:	53                   	push   ebx
c0022aac:	83 ec 1c             	sub    esp,0x1c
c0022aaf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022ab3:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022ab9:	0f 84 52 01 00 00    	je     c0022c11 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022abf:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022ac3:	66 81 f9 06 04       	cmp    cx,0x406
c0022ac8:	75 2c                	jne    c0022af6 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022aca:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022acf:	50                   	push   eax
c0022ad0:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022ad5:	50                   	push   eax
c0022ad6:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022adb:	50                   	push   eax
c0022adc:	56                   	push   esi
c0022add:	e8 b2 fe ff ff       	call   c0022994 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022ae2:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022ae6:	0f b6 c0             	movzx  eax,al
c0022ae9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022aed:	83 c4 2c             	add    esp,0x2c
c0022af0:	5b                   	pop    ebx
c0022af1:	5e                   	pop    esi
c0022af2:	5f                   	pop    edi
c0022af3:	5d                   	pop    ebp
c0022af4:	eb 8e                	jmp    c0022a84 <PCI::checkBus(unsigned char)>
c0022af6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022afa:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022b00:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022b04:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022b08:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022b0c:	88 d3                	mov    bl,dl
c0022b0e:	85 c0                	test   eax,eax
c0022b10:	74 33                	je     c0022b45 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022b12:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022b15:	85 d2                	test   edx,edx
c0022b17:	74 28                	je     c0022b41 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022b19:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022b1f:	31 ef                	xor    edi,ebp
c0022b21:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022b27:	75 18                	jne    c0022b41 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022b29:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022b2d:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022b33:	75 0c                	jne    c0022b41 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022b35:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022b3b:	0f 84 d0 00 00 00    	je     c0022c11 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022b41:	8b 00                	mov    eax,DWORD PTR [eax]
c0022b43:	eb c9                	jmp    c0022b0e <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022b45:	66 81 f9 01 06       	cmp    cx,0x601
c0022b4a:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022b4e:	75 19                	jne    c0022b69 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022b50:	83 ec 0c             	sub    esp,0xc
c0022b53:	68 64 01 00 00       	push   0x164
c0022b58:	e8 e3 cc fe ff       	call   c000f840 <malloc>
c0022b5d:	89 c5                	mov    ebp,eax
c0022b5f:	89 04 24             	mov    DWORD PTR [esp],eax
c0022b62:	e8 95 0f 00 00       	call   c0023afc <SATABus::SATABus()>
c0022b67:	eb 1e                	jmp    c0022b87 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022b69:	66 81 f9 01 01       	cmp    cx,0x101
c0022b6e:	75 60                	jne    c0022bd0 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022b70:	83 ec 0c             	sub    esp,0xc
c0022b73:	68 70 02 00 00       	push   0x270
c0022b78:	e8 c3 cc fe ff       	call   c000f840 <malloc>
c0022b7d:	89 c5                	mov    ebp,eax
c0022b7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0022b82:	e8 03 03 00 00       	call   c0022e8a <IDE::IDE()>
c0022b87:	58                   	pop    eax
c0022b88:	5a                   	pop    edx
c0022b89:	55                   	push   ebp
c0022b8a:	56                   	push   esi
c0022b8b:	e8 6a 16 ff ff       	call   c00141fa <Device::addChild(Device*)>
c0022b90:	83 ec 1c             	sub    esp,0x1c
c0022b93:	b9 09 00 00 00       	mov    ecx,0x9
c0022b98:	fc                   	cld    
c0022b99:	89 e7                	mov    edi,esp
c0022b9b:	89 de                	mov    esi,ebx
c0022b9d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022b9f:	55                   	push   ebp
c0022ba0:	e8 5f 15 ff ff       	call   c0014104 <Device::preOpenPCI(PCIDeviceInfo)>
c0022ba5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022ba8:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022bac:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022bb4:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022bbc:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022bc4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022bc7:	83 c4 4c             	add    esp,0x4c
c0022bca:	5b                   	pop    ebx
c0022bcb:	5e                   	pop    esi
c0022bcc:	5f                   	pop    edi
c0022bcd:	5d                   	pop    ebp
c0022bce:	ff e0                	jmp    eax
c0022bd0:	83 ec 0c             	sub    esp,0xc
c0022bd3:	68 58 01 00 00       	push   0x158
c0022bd8:	e8 63 cc fe ff       	call   c000f840 <malloc>
c0022bdd:	89 c5                	mov    ebp,eax
c0022bdf:	58                   	pop    eax
c0022be0:	5a                   	pop    edx
c0022be1:	68 a4 c8 02 c0       	push   0xc002c8a4
c0022be6:	55                   	push   ebp
c0022be7:	e8 04 19 ff ff       	call   c00144f0 <DriverlessDevice::DriverlessDevice(char const*)>
c0022bec:	59                   	pop    ecx
c0022bed:	5f                   	pop    edi
c0022bee:	55                   	push   ebp
c0022bef:	56                   	push   esi
c0022bf0:	e8 05 16 ff ff       	call   c00141fa <Device::addChild(Device*)>
c0022bf5:	b9 09 00 00 00       	mov    ecx,0x9
c0022bfa:	fc                   	cld    
c0022bfb:	89 df                	mov    edi,ebx
c0022bfd:	89 de                	mov    esi,ebx
c0022bff:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022c01:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022c05:	83 c4 2c             	add    esp,0x2c
c0022c08:	5b                   	pop    ebx
c0022c09:	5e                   	pop    esi
c0022c0a:	5f                   	pop    edi
c0022c0b:	5d                   	pop    ebp
c0022c0c:	e9 f3 14 ff ff       	jmp    c0014104 <Device::preOpenPCI(PCIDeviceInfo)>
c0022c11:	83 c4 1c             	add    esp,0x1c
c0022c14:	5b                   	pop    ebx
c0022c15:	5e                   	pop    esi
c0022c16:	5f                   	pop    edi
c0022c17:	5d                   	pop    ebp
c0022c18:	c3                   	ret    
c0022c19:	90                   	nop

c0022c1a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022c1a:	55                   	push   ebp
c0022c1b:	57                   	push   edi
c0022c1c:	56                   	push   esi
c0022c1d:	53                   	push   ebx
c0022c1e:	83 ec 5c             	sub    esp,0x5c
c0022c21:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022c25:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022c29:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022c2d:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022c32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022c36:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022c3a:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022c3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022c43:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022c48:	6a 0c                	push   0xc
c0022c4a:	55                   	push   ebp
c0022c4b:	53                   	push   ebx
c0022c4c:	57                   	push   edi
c0022c4d:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022c54:	e8 01 fc ff ff       	call   c002285a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c59:	55                   	push   ebp
c0022c5a:	53                   	push   ebx
c0022c5b:	57                   	push   edi
c0022c5c:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022c63:	e8 80 fc ff ff       	call   c00228e8 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022c68:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022c6d:	83 c4 24             	add    esp,0x24
c0022c70:	55                   	push   ebp
c0022c71:	53                   	push   ebx
c0022c72:	57                   	push   edi
c0022c73:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022c77:	e8 f6 fc ff ff       	call   c0022972 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022c7c:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022c80:	6a 3c                	push   0x3c
c0022c82:	55                   	push   ebp
c0022c83:	53                   	push   ebx
c0022c84:	57                   	push   edi
c0022c85:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022c8c:	e8 c9 fb ff ff       	call   c002285a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c91:	0f b6 c4             	movzx  eax,ah
c0022c94:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022c98:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022c9c:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022ca0:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c0022ca5:	83 c4 24             	add    esp,0x24
c0022ca8:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022cae:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022cb5:	74 6c                	je     c0022d23 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022cb7:	31 f6                	xor    esi,esi
c0022cb9:	8b 15 a8 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e2a8
c0022cbf:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022cc5:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022ccb:	7e 56                	jle    c0022d23 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022ccd:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022cd0:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022cd7:	39 cb                	cmp    ebx,ecx
c0022cd9:	75 45                	jne    c0022d20 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022cdb:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022ce2:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022ce6:	75 38                	jne    c0022d20 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022ce8:	83 ec 0c             	sub    esp,0xc
c0022ceb:	68 be c8 02 c0       	push   0xc002c8be
c0022cf0:	e8 df 00 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0022cf5:	8b 15 a8 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e2a8
c0022cfb:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022d01:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022d09:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022d0d:	52                   	push   edx
c0022d0e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022d12:	53                   	push   ebx
c0022d13:	68 e3 c8 02 c0       	push   0xc002c8e3
c0022d18:	e8 b7 00 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0022d1d:	83 c4 20             	add    esp,0x20
c0022d20:	46                   	inc    esi
c0022d21:	eb 96                	jmp    c0022cb9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022d23:	31 d2                	xor    edx,edx
c0022d25:	83 ec 0c             	sub    esp,0xc
c0022d28:	55                   	push   ebp
c0022d29:	53                   	push   ebx
c0022d2a:	57                   	push   edi
c0022d2b:	52                   	push   edx
c0022d2c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022d30:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022d37:	e8 7c fc ff ff       	call   c00229b8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d3c:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022d40:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022d44:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022d48:	42                   	inc    edx
c0022d49:	83 c4 20             	add    esp,0x20
c0022d4c:	83 fa 06             	cmp    edx,0x6
c0022d4f:	75 d4                	jne    c0022d25 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022d51:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022d55:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022d59:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022d5d:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022d61:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022d65:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022d69:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022d6e:	86 e0                	xchg   al,ah
c0022d70:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022d75:	55                   	push   ebp
c0022d76:	53                   	push   ebx
c0022d77:	57                   	push   edi
c0022d78:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022d7c:	e8 ab fb ff ff       	call   c002292c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022d81:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022d85:	55                   	push   ebp
c0022d86:	53                   	push   ebx
c0022d87:	57                   	push   edi
c0022d88:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022d8f:	e8 0e fb ff ff       	call   c00228a2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022d94:	83 ec 0c             	sub    esp,0xc
c0022d97:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022d9c:	b9 09 00 00 00       	mov    ecx,0x9
c0022da1:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022da5:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022da9:	fc                   	cld    
c0022daa:	89 e7                	mov    edi,esp
c0022dac:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022dae:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022db5:	e8 ee fc ff ff       	call   c0022aa8 <PCI::foundDevice(PCIDeviceInfo)>
c0022dba:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022dc0:	5b                   	pop    ebx
c0022dc1:	5e                   	pop    esi
c0022dc2:	5f                   	pop    edi
c0022dc3:	5d                   	pop    ebp
c0022dc4:	c3                   	ret    
c0022dc5:	90                   	nop

c0022dc6 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022dc6:	55                   	push   ebp
c0022dc7:	57                   	push   edi
c0022dc8:	56                   	push   esi
c0022dc9:	53                   	push   ebx
c0022dca:	83 ec 0c             	sub    esp,0xc
c0022dcd:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022dd1:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022dd6:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022ddb:	6a 00                	push   0x0
c0022ddd:	56                   	push   esi
c0022dde:	57                   	push   edi
c0022ddf:	55                   	push   ebp
c0022de0:	e8 bd fa ff ff       	call   c00228a2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022de5:	6a 00                	push   0x0
c0022de7:	56                   	push   esi
c0022de8:	57                   	push   edi
c0022de9:	55                   	push   ebp
c0022dea:	e8 2b fe ff ff       	call   c0022c1a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022def:	83 c4 20             	add    esp,0x20
c0022df2:	6a 00                	push   0x0
c0022df4:	56                   	push   esi
c0022df5:	57                   	push   edi
c0022df6:	55                   	push   ebp
c0022df7:	e8 c8 fa ff ff       	call   c00228c4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022dfc:	83 c4 10             	add    esp,0x10
c0022dff:	84 c0                	test   al,al
c0022e01:	79 27                	jns    c0022e2a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022e03:	bb 01 00 00 00       	mov    ebx,0x1
c0022e08:	53                   	push   ebx
c0022e09:	56                   	push   esi
c0022e0a:	57                   	push   edi
c0022e0b:	55                   	push   ebp
c0022e0c:	e8 91 fa ff ff       	call   c00228a2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e11:	83 c4 10             	add    esp,0x10
c0022e14:	66 40                	inc    ax
c0022e16:	74 0c                	je     c0022e24 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022e18:	53                   	push   ebx
c0022e19:	56                   	push   esi
c0022e1a:	57                   	push   edi
c0022e1b:	55                   	push   ebp
c0022e1c:	e8 f9 fd ff ff       	call   c0022c1a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022e21:	83 c4 10             	add    esp,0x10
c0022e24:	43                   	inc    ebx
c0022e25:	83 fb 08             	cmp    ebx,0x8
c0022e28:	75 de                	jne    c0022e08 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022e2a:	83 c4 0c             	add    esp,0xc
c0022e2d:	5b                   	pop    ebx
c0022e2e:	5e                   	pop    esi
c0022e2f:	5f                   	pop    edi
c0022e30:	5d                   	pop    ebp
c0022e31:	c3                   	ret    

c0022e32 <PCI::detect()>:
c0022e32:	56                   	push   esi
c0022e33:	53                   	push   ebx
c0022e34:	53                   	push   ebx
c0022e35:	31 db                	xor    ebx,ebx
c0022e37:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022e3b:	6a 00                	push   0x0
c0022e3d:	6a 00                	push   0x0
c0022e3f:	6a 00                	push   0x0
c0022e41:	56                   	push   esi
c0022e42:	e8 7d fa ff ff       	call   c00228c4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022e47:	83 c4 10             	add    esp,0x10
c0022e4a:	a8 80                	test   al,0x80
c0022e4c:	75 21                	jne    c0022e6f <PCI::detect()+0x3d>
c0022e4e:	51                   	push   ecx
c0022e4f:	51                   	push   ecx
c0022e50:	6a 00                	push   0x0
c0022e52:	56                   	push   esi
c0022e53:	e8 2c fc ff ff       	call   c0022a84 <PCI::checkBus(unsigned char)>
c0022e58:	83 c4 10             	add    esp,0x10
c0022e5b:	eb 24                	jmp    c0022e81 <PCI::detect()+0x4f>
c0022e5d:	52                   	push   edx
c0022e5e:	52                   	push   edx
c0022e5f:	53                   	push   ebx
c0022e60:	43                   	inc    ebx
c0022e61:	56                   	push   esi
c0022e62:	e8 1d fc ff ff       	call   c0022a84 <PCI::checkBus(unsigned char)>
c0022e67:	83 c4 10             	add    esp,0x10
c0022e6a:	83 fb 08             	cmp    ebx,0x8
c0022e6d:	74 12                	je     c0022e81 <PCI::detect()+0x4f>
c0022e6f:	53                   	push   ebx
c0022e70:	6a 00                	push   0x0
c0022e72:	6a 00                	push   0x0
c0022e74:	56                   	push   esi
c0022e75:	e8 28 fa ff ff       	call   c00228a2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e7a:	83 c4 10             	add    esp,0x10
c0022e7d:	66 40                	inc    ax
c0022e7f:	74 dc                	je     c0022e5d <PCI::detect()+0x2b>
c0022e81:	58                   	pop    eax
c0022e82:	5b                   	pop    ebx
c0022e83:	5e                   	pop    esi
c0022e84:	c3                   	ret    
c0022e85:	90                   	nop

c0022e86 <IDE::close(int, int, void*)>:
c0022e86:	83 c8 ff             	or     eax,0xffffffff
c0022e89:	c3                   	ret    

c0022e8a <IDE::IDE()>:
c0022e8a:	83 ec 0c             	sub    esp,0xc
c0022e8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e91:	83 ec 08             	sub    esp,0x8
c0022e94:	68 2c c9 02 c0       	push   0xc002c92c
c0022e99:	50                   	push   eax
c0022e9a:	e8 e7 16 ff ff       	call   c0014586 <HardDiskController::HardDiskController(char const*)>
c0022e9f:	83 c4 10             	add    esp,0x10
c0022ea2:	ba 6c cb 02 c0       	mov    edx,0xc002cb6c
c0022ea7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022eab:	89 10                	mov    DWORD PTR [eax],edx
c0022ead:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022eb1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022eb8:	90                   	nop
c0022eb9:	83 c4 0c             	add    esp,0xc
c0022ebc:	c3                   	ret    
c0022ebd:	90                   	nop

c0022ebe <IDE::prepareInterrupt(unsigned char)>:
c0022ebe:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022ec3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022ec7:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022ecf:	c3                   	ret    

c0022ed0 <selectDrive(unsigned char, unsigned char)>:
c0022ed0:	c3                   	ret    
c0022ed1:	90                   	nop

c0022ed2 <IDE::getBase(unsigned char)>:
c0022ed2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022ed7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022edb:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022ee3:	c3                   	ret    

c0022ee4 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022ee4:	55                   	push   ebp
c0022ee5:	57                   	push   edi
c0022ee6:	56                   	push   esi
c0022ee7:	53                   	push   ebx
c0022ee8:	83 ec 1c             	sub    esp,0x1c
c0022eeb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022eef:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022ef3:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022ef6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022efa:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022efe:	80 f9 03             	cmp    cl,0x3
c0022f01:	77 51                	ja     c0022f54 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022f03:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022f07:	0f b6 f2             	movzx  esi,dl
c0022f0a:	0f b6 db             	movzx  ebx,bl
c0022f0d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022f10:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0022f14:	83 ca 80             	or     edx,0xffffff80
c0022f17:	0f b6 d2             	movzx  edx,dl
c0022f1a:	52                   	push   edx
c0022f1b:	6a 0c                	push   0xc
c0022f1d:	56                   	push   esi
c0022f1e:	57                   	push   edi
c0022f1f:	e8 c0 ff ff ff       	call   c0022ee4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f24:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0022f29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022f2d:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0022f31:	ee                   	out    dx,al
c0022f32:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0022f37:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0022f3b:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0022f3f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022f43:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022f4b:	83 c4 2c             	add    esp,0x2c
c0022f4e:	5b                   	pop    ebx
c0022f4f:	5e                   	pop    esi
c0022f50:	5f                   	pop    edi
c0022f51:	5d                   	pop    ebp
c0022f52:	eb 90                	jmp    c0022ee4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f54:	80 fb 07             	cmp    bl,0x7
c0022f57:	77 12                	ja     c0022f6b <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0022f59:	0f b6 d2             	movzx  edx,dl
c0022f5c:	0f b6 db             	movzx  ebx,bl
c0022f5f:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0022f67:	89 da                	mov    edx,ebx
c0022f69:	eb 2f                	jmp    c0022f9a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022f6b:	80 fb 0d             	cmp    bl,0xd
c0022f6e:	77 13                	ja     c0022f83 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0022f70:	0f b6 d2             	movzx  edx,dl
c0022f73:	0f b6 db             	movzx  ebx,bl
c0022f76:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0022f7d:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0022f81:	eb 17                	jmp    c0022f9a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022f83:	80 fb 15             	cmp    bl,0x15
c0022f86:	77 13                	ja     c0022f9b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0022f88:	0f b6 d2             	movzx  edx,dl
c0022f8b:	0f b6 db             	movzx  ebx,bl
c0022f8e:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0022f96:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0022f9a:	ee                   	out    dx,al
c0022f9b:	83 c4 1c             	add    esp,0x1c
c0022f9e:	5b                   	pop    ebx
c0022f9f:	5e                   	pop    esi
c0022fa0:	5f                   	pop    edi
c0022fa1:	5d                   	pop    ebp
c0022fa2:	c3                   	ret    
c0022fa3:	90                   	nop

c0022fa4 <IDE::read(unsigned char, unsigned char)>:
c0022fa4:	55                   	push   ebp
c0022fa5:	57                   	push   edi
c0022fa6:	56                   	push   esi
c0022fa7:	53                   	push   ebx
c0022fa8:	83 ec 1c             	sub    esp,0x1c
c0022fab:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022faf:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022fb3:	8d 43 f8             	lea    eax,[ebx-0x8]
c0022fb6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022fba:	3c 03                	cmp    al,0x3
c0022fbc:	77 43                	ja     c0023001 <IDE::read(unsigned char, unsigned char)+0x5d>
c0022fbe:	0f b6 f2             	movzx  esi,dl
c0022fc1:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022fc4:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0022fc8:	83 c8 80             	or     eax,0xffffff80
c0022fcb:	0f b6 c0             	movzx  eax,al
c0022fce:	50                   	push   eax
c0022fcf:	6a 0c                	push   0xc
c0022fd1:	56                   	push   esi
c0022fd2:	57                   	push   edi
c0022fd3:	e8 0c ff ff ff       	call   c0022ee4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022fd8:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0022fdd:	0f b6 c3             	movzx  eax,bl
c0022fe0:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0022fe4:	ec                   	in     al,dx
c0022fe5:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022fe9:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0022fee:	52                   	push   edx
c0022fef:	6a 0c                	push   0xc
c0022ff1:	56                   	push   esi
c0022ff2:	57                   	push   edi
c0022ff3:	e8 ec fe ff ff       	call   c0022ee4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022ff8:	83 c4 20             	add    esp,0x20
c0022ffb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022fff:	eb 49                	jmp    c002304a <IDE::read(unsigned char, unsigned char)+0xa6>
c0023001:	80 fb 07             	cmp    bl,0x7
c0023004:	77 12                	ja     c0023018 <IDE::read(unsigned char, unsigned char)+0x74>
c0023006:	0f b6 d2             	movzx  edx,dl
c0023009:	0f b6 c3             	movzx  eax,bl
c002300c:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023014:	89 c2                	mov    edx,eax
c0023016:	eb 31                	jmp    c0023049 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023018:	80 fb 0d             	cmp    bl,0xd
c002301b:	77 13                	ja     c0023030 <IDE::read(unsigned char, unsigned char)+0x8c>
c002301d:	0f b6 d2             	movzx  edx,dl
c0023020:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023027:	0f b6 d3             	movzx  edx,bl
c002302a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002302e:	eb 19                	jmp    c0023049 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023030:	31 c0                	xor    eax,eax
c0023032:	80 fb 15             	cmp    bl,0x15
c0023035:	77 13                	ja     c002304a <IDE::read(unsigned char, unsigned char)+0xa6>
c0023037:	0f b6 d2             	movzx  edx,dl
c002303a:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023042:	0f b6 d3             	movzx  edx,bl
c0023045:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023049:	ec                   	in     al,dx
c002304a:	83 c4 1c             	add    esp,0x1c
c002304d:	5b                   	pop    ebx
c002304e:	5e                   	pop    esi
c002304f:	5f                   	pop    edi
c0023050:	5d                   	pop    ebp
c0023051:	c3                   	ret    

c0023052 <IDE::waitInterrupt(unsigned char)>:
c0023052:	55                   	push   ebp
c0023053:	57                   	push   edi
c0023054:	56                   	push   esi
c0023055:	53                   	push   ebx
c0023056:	31 db                	xor    ebx,ebx
c0023058:	83 ec 0c             	sub    esp,0xc
c002305b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002305f:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023064:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002306c:	89 e8                	mov    eax,ebp
c002306e:	84 c0                	test   al,al
c0023070:	75 34                	jne    c00230a6 <IDE::waitInterrupt(unsigned char)+0x54>
c0023072:	52                   	push   edx
c0023073:	6a 0c                	push   0xc
c0023075:	56                   	push   esi
c0023076:	57                   	push   edi
c0023077:	e8 28 ff ff ff       	call   c0022fa4 <IDE::read(unsigned char, unsigned char)>
c002307c:	83 c4 10             	add    esp,0x10
c002307f:	a8 01                	test   al,0x1
c0023081:	75 2b                	jne    c00230ae <IDE::waitInterrupt(unsigned char)+0x5c>
c0023083:	f6 c3 04             	test   bl,0x4
c0023086:	75 16                	jne    c002309e <IDE::waitInterrupt(unsigned char)+0x4c>
c0023088:	83 fb 32             	cmp    ebx,0x32
c002308b:	7e 11                	jle    c002309e <IDE::waitInterrupt(unsigned char)+0x4c>
c002308d:	50                   	push   eax
c002308e:	50                   	push   eax
c002308f:	6a 00                	push   0x0
c0023091:	68 80 96 98 00       	push   0x989680
c0023096:	e8 5d b1 ff ff       	call   c001e1f8 <nanoSleep(unsigned long long)>
c002309b:	83 c4 10             	add    esp,0x10
c002309e:	83 fb 3c             	cmp    ebx,0x3c
c00230a1:	74 0b                	je     c00230ae <IDE::waitInterrupt(unsigned char)+0x5c>
c00230a3:	43                   	inc    ebx
c00230a4:	eb be                	jmp    c0023064 <IDE::waitInterrupt(unsigned char)+0x12>
c00230a6:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c00230ae:	83 c4 0c             	add    esp,0xc
c00230b1:	89 e8                	mov    eax,ebp
c00230b3:	5b                   	pop    ebx
c00230b4:	5e                   	pop    esi
c00230b5:	5f                   	pop    edi
c00230b6:	5d                   	pop    ebp
c00230b7:	c3                   	ret    

c00230b8 <ideChannel0IRQHandler(regs*, void*)>:
c00230b8:	83 ec 10             	sub    esp,0x10
c00230bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00230bf:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00230c6:	6a 07                	push   0x7
c00230c8:	6a 00                	push   0x0
c00230ca:	50                   	push   eax
c00230cb:	e8 d4 fe ff ff       	call   c0022fa4 <IDE::read(unsigned char, unsigned char)>
c00230d0:	83 c4 1c             	add    esp,0x1c
c00230d3:	c3                   	ret    

c00230d4 <ideChannel1IRQHandler(regs*, void*)>:
c00230d4:	83 ec 10             	sub    esp,0x10
c00230d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00230db:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00230e2:	6a 07                	push   0x7
c00230e4:	6a 01                	push   0x1
c00230e6:	50                   	push   eax
c00230e7:	e8 b8 fe ff ff       	call   c0022fa4 <IDE::read(unsigned char, unsigned char)>
c00230ec:	83 c4 1c             	add    esp,0x1c
c00230ef:	c3                   	ret    

c00230f0 <IDE::enableIRQs(unsigned char, bool)>:
c00230f0:	57                   	push   edi
c00230f1:	56                   	push   esi
c00230f2:	be 04 00 00 00       	mov    esi,0x4
c00230f7:	53                   	push   ebx
c00230f8:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00230fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023101:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023106:	0f 94 c0             	sete   al
c0023109:	d1 e0                	shl    eax,1
c002310b:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023112:	0f b6 c0             	movzx  eax,al
c0023115:	50                   	push   eax
c0023116:	6a 0c                	push   0xc
c0023118:	57                   	push   edi
c0023119:	53                   	push   ebx
c002311a:	e8 c5 fd ff ff       	call   c0022ee4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002311f:	83 c4 10             	add    esp,0x10
c0023122:	50                   	push   eax
c0023123:	6a 0c                	push   0xc
c0023125:	57                   	push   edi
c0023126:	53                   	push   ebx
c0023127:	e8 78 fe ff ff       	call   c0022fa4 <IDE::read(unsigned char, unsigned char)>
c002312c:	83 c4 10             	add    esp,0x10
c002312f:	4e                   	dec    esi
c0023130:	75 f0                	jne    c0023122 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023132:	5b                   	pop    ebx
c0023133:	5e                   	pop    esi
c0023134:	5f                   	pop    edi
c0023135:	c3                   	ret    

c0023136 <IDE::open(int, int, void*)>:
c0023136:	55                   	push   ebp
c0023137:	57                   	push   edi
c0023138:	56                   	push   esi
c0023139:	53                   	push   ebx
c002313a:	83 ec 1c             	sub    esp,0x1c
c002313d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023141:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002314a:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023153:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002315a:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023161:	0f 85 b0 02 00 00    	jne    c0023417 <IDE::open(int, int, void*)+0x2e1>
c0023167:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002316d:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023171:	83 e0 7f             	and    eax,0x7f
c0023174:	3c 05                	cmp    al,0x5
c0023176:	74 04                	je     c002317c <IDE::open(int, int, void*)+0x46>
c0023178:	3c 0f                	cmp    al,0xf
c002317a:	75 32                	jne    c00231ae <IDE::open(int, int, void*)+0x78>
c002317c:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023182:	83 e0 fc             	and    eax,0xfffffffc
c0023185:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002318c:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023192:	83 e0 fc             	and    eax,0xfffffffc
c0023195:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002319c:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00231a2:	83 e0 fc             	and    eax,0xfffffffc
c00231a5:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00231ac:	eb 14                	jmp    c00231c2 <IDE::open(int, int, void*)+0x8c>
c00231ae:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00231b8:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00231c2:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00231c9:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00231d0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00231d4:	89 c6                	mov    esi,eax
c00231d6:	bf f8 0c 00 00       	mov    edi,0xcf8
c00231db:	c1 e6 10             	shl    esi,0x10
c00231de:	89 e8                	mov    eax,ebp
c00231e0:	89 fa                	mov    edx,edi
c00231e2:	c1 e0 0b             	shl    eax,0xb
c00231e5:	09 f0                	or     eax,esi
c00231e7:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00231ee:	c1 e6 08             	shl    esi,0x8
c00231f1:	09 c6                	or     esi,eax
c00231f3:	89 f0                	mov    eax,esi
c00231f5:	0d 08 00 00 80       	or     eax,0x80000008
c00231fa:	ef                   	out    dx,eax
c00231fb:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023200:	89 ca                	mov    edx,ecx
c0023202:	ed                   	in     eax,dx
c0023203:	c1 e8 10             	shr    eax,0x10
c0023206:	3d ff ff 00 00       	cmp    eax,0xffff
c002320b:	0f 84 f5 00 00 00    	je     c0023306 <IDE::open(int, int, void*)+0x1d0>
c0023211:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023217:	89 fa                	mov    edx,edi
c0023219:	89 f0                	mov    eax,esi
c002321b:	ef                   	out    dx,eax
c002321c:	b0 fe                	mov    al,0xfe
c002321e:	89 ca                	mov    edx,ecx
c0023220:	ee                   	out    dx,al
c0023221:	89 f0                	mov    eax,esi
c0023223:	89 fa                	mov    edx,edi
c0023225:	ef                   	out    dx,eax
c0023226:	89 ca                	mov    edx,ecx
c0023228:	ed                   	in     eax,dx
c0023229:	3c fe                	cmp    al,0xfe
c002322b:	0f 85 a9 00 00 00    	jne    c00232da <IDE::open(int, int, void*)+0x1a4>
c0023231:	8b 15 a8 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e2a8
c0023237:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c002323e:	74 33                	je     c0023273 <IDE::open(int, int, void*)+0x13d>
c0023240:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023246:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002324a:	40                   	inc    eax
c002324b:	83 ec 0c             	sub    esp,0xc
c002324e:	0f b6 c0             	movzx  eax,al
c0023251:	50                   	push   eax
c0023252:	55                   	push   ebp
c0023253:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023257:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c002325d:	51                   	push   ecx
c002325e:	e8 a1 4e ff ff       	call   c0018104 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023263:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023268:	83 c4 1c             	add    esp,0x1c
c002326b:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023271:	eb 0a                	jmp    c002327d <IDE::open(int, int, void*)+0x147>
c0023273:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c002327d:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023284:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002328b:	c1 e1 10             	shl    ecx,0x10
c002328e:	c1 e0 08             	shl    eax,0x8
c0023291:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023296:	09 c1                	or     ecx,eax
c0023298:	89 fa                	mov    edx,edi
c002329a:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00232a1:	c1 e0 0b             	shl    eax,0xb
c00232a4:	09 c1                	or     ecx,eax
c00232a6:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00232ac:	89 c8                	mov    eax,ecx
c00232ae:	ef                   	out    dx,eax
c00232af:	be fc 0c 00 00       	mov    esi,0xcfc
c00232b4:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00232ba:	89 f2                	mov    edx,esi
c00232bc:	ee                   	out    dx,al
c00232bd:	89 c8                	mov    eax,ecx
c00232bf:	89 fa                	mov    edx,edi
c00232c1:	ef                   	out    dx,eax
c00232c2:	89 f2                	mov    edx,esi
c00232c4:	ed                   	in     eax,dx
c00232c5:	0f b6 c0             	movzx  eax,al
c00232c8:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00232ce:	74 46                	je     c0023316 <IDE::open(int, int, void*)+0x1e0>
c00232d0:	83 ec 0c             	sub    esp,0xc
c00232d3:	68 44 c9 02 c0       	push   0xc002c944
c00232d8:	eb 34                	jmp    c002330e <IDE::open(int, int, void*)+0x1d8>
c00232da:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00232e3:	75 17                	jne    c00232fc <IDE::open(int, int, void*)+0x1c6>
c00232e5:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00232ea:	74 07                	je     c00232f3 <IDE::open(int, int, void*)+0x1bd>
c00232ec:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00232f1:	75 09                	jne    c00232fc <IDE::open(int, int, void*)+0x1c6>
c00232f3:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00232fa:	eb 1a                	jmp    c0023316 <IDE::open(int, int, void*)+0x1e0>
c00232fc:	83 ec 0c             	sub    esp,0xc
c00232ff:	68 4c c9 02 c0       	push   0xc002c94c
c0023304:	eb 08                	jmp    c002330e <IDE::open(int, int, void*)+0x1d8>
c0023306:	83 ec 0c             	sub    esp,0xc
c0023309:	68 7d c9 02 c0       	push   0xc002c97d
c002330e:	e8 9c 71 ff ff       	call   c001a4af <Krnl::panic(char const*)>
c0023313:	83 c4 10             	add    esp,0x10
c0023316:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c002331d:	79 1a                	jns    c0023339 <IDE::open(int, int, void*)+0x203>
c002331f:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023325:	83 e0 fc             	and    eax,0xfffffffc
c0023328:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c002332f:	83 c0 08             	add    eax,0x8
c0023332:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023339:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c002333f:	89 c2                	mov    edx,eax
c0023341:	83 e2 0f             	and    edx,0xf
c0023344:	66 83 fa 08          	cmp    dx,0x8
c0023348:	75 0a                	jne    c0023354 <IDE::open(int, int, void*)+0x21e>
c002334a:	83 e8 02             	sub    eax,0x2
c002334d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023354:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002335a:	89 c2                	mov    edx,eax
c002335c:	83 e2 0f             	and    edx,0xf
c002335f:	66 83 fa 08          	cmp    dx,0x8
c0023363:	75 0a                	jne    c002336f <IDE::open(int, int, void*)+0x239>
c0023365:	83 e8 02             	sub    eax,0x2
c0023368:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002336f:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023376:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c002337d:	89 d0                	mov    eax,edx
c002337f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023382:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023386:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c002338a:	8d 4a 01             	lea    ecx,[edx+0x1]
c002338d:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023392:	0f b6 c9             	movzx  ecx,cl
c0023395:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002339c:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002339f:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00233a3:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00233a7:	8d 50 02             	lea    edx,[eax+0x2]
c00233aa:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00233af:	0f b6 d2             	movzx  edx,dl
c00233b2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00233b8:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00233bb:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00233bf:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00233c3:	8d 48 03             	lea    ecx,[eax+0x3]
c00233c6:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00233cb:	0f b6 c9             	movzx  ecx,cl
c00233ce:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00233d4:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00233d7:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00233db:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00233df:	8d 50 04             	lea    edx,[eax+0x4]
c00233e2:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00233e8:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00233ed:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00233f4:	66 85 f6             	test   si,si
c00233f7:	74 3e                	je     c0023437 <IDE::open(int, int, void*)+0x301>
c00233f9:	0f b6 d2             	movzx  edx,dl
c00233fc:	83 c0 05             	add    eax,0x5
c00233ff:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023402:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023406:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002340a:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023410:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023415:	eb 20                	jmp    c0023437 <IDE::open(int, int, void*)+0x301>
c0023417:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023421:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002342b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023432:	e9 02 ff ff ff       	jmp    c0023339 <IDE::open(int, int, void*)+0x203>
c0023437:	52                   	push   edx
c0023438:	52                   	push   edx
c0023439:	6a 00                	push   0x0
c002343b:	53                   	push   ebx
c002343c:	e8 7d fa ff ff       	call   c0022ebe <IDE::prepareInterrupt(unsigned char)>
c0023441:	59                   	pop    ecx
c0023442:	5e                   	pop    esi
c0023443:	6a 01                	push   0x1
c0023445:	53                   	push   ebx
c0023446:	e8 73 fa ff ff       	call   c0022ebe <IDE::prepareInterrupt(unsigned char)>
c002344b:	83 c4 0c             	add    esp,0xc
c002344e:	6a 00                	push   0x0
c0023450:	6a 00                	push   0x0
c0023452:	53                   	push   ebx
c0023453:	e8 98 fc ff ff       	call   c00230f0 <IDE::enableIRQs(unsigned char, bool)>
c0023458:	83 c4 0c             	add    esp,0xc
c002345b:	6a 00                	push   0x0
c002345d:	6a 01                	push   0x1
c002345f:	53                   	push   ebx
c0023460:	e8 8b fc ff ff       	call   c00230f0 <IDE::enableIRQs(unsigned char, bool)>
c0023465:	83 c4 10             	add    esp,0x10
c0023468:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c002346f:	74 40                	je     c00234b1 <IDE::open(int, int, void*)+0x37b>
c0023471:	83 ec 0c             	sub    esp,0xc
c0023474:	68 a7 c9 02 c0       	push   0xc002c9a7
c0023479:	e8 56 f9 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c002347e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023481:	6a 01                	push   0x1
c0023483:	68 b8 30 02 c0       	push   0xc00230b8
c0023488:	6a 0e                	push   0xe
c002348a:	53                   	push   ebx
c002348b:	e8 ee 0c ff ff       	call   c001417e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023490:	83 c4 14             	add    esp,0x14
c0023493:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023499:	53                   	push   ebx
c002349a:	6a 01                	push   0x1
c002349c:	68 d4 30 02 c0       	push   0xc00230d4
c00234a1:	6a 0f                	push   0xf
c00234a3:	53                   	push   ebx
c00234a4:	e8 d5 0c ff ff       	call   c001417e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00234a9:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00234af:	eb 4a                	jmp    c00234fb <IDE::open(int, int, void*)+0x3c5>
c00234b1:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00234bb:	50                   	push   eax
c00234bc:	6a 0f                	push   0xf
c00234be:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00234c4:	68 c3 c9 02 c0       	push   0xc002c9c3
c00234c9:	e8 06 f9 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c00234ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00234d1:	6a 00                	push   0x0
c00234d3:	68 b8 30 02 c0       	push   0xc00230b8
c00234d8:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00234de:	53                   	push   ebx
c00234df:	e8 9a 0c ff ff       	call   c001417e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00234e4:	83 c4 14             	add    esp,0x14
c00234e7:	53                   	push   ebx
c00234e8:	6a 00                	push   0x0
c00234ea:	68 d4 30 02 c0       	push   0xc00230d4
c00234ef:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00234f5:	53                   	push   ebx
c00234f6:	e8 83 0c ff ff       	call   c001417e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00234fb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00234fd:	83 c4 20             	add    esp,0x20
c0023500:	83 ec 0c             	sub    esp,0xc
c0023503:	53                   	push   ebx
c0023504:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023507:	83 c4 0c             	add    esp,0xc
c002350a:	6a 07                	push   0x7
c002350c:	6a 00                	push   0x0
c002350e:	53                   	push   ebx
c002350f:	e8 90 fa ff ff       	call   c0022fa4 <IDE::read(unsigned char, unsigned char)>
c0023514:	83 c4 0c             	add    esp,0xc
c0023517:	6a 07                	push   0x7
c0023519:	6a 01                	push   0x1
c002351b:	53                   	push   ebx
c002351c:	e8 83 fa ff ff       	call   c0022fa4 <IDE::read(unsigned char, unsigned char)>
c0023521:	83 c4 0c             	add    esp,0xc
c0023524:	6a 01                	push   0x1
c0023526:	6a 00                	push   0x0
c0023528:	53                   	push   ebx
c0023529:	e8 c2 fb ff ff       	call   c00230f0 <IDE::enableIRQs(unsigned char, bool)>
c002352e:	83 c4 0c             	add    esp,0xc
c0023531:	6a 01                	push   0x1
c0023533:	6a 01                	push   0x1
c0023535:	53                   	push   ebx
c0023536:	e8 b5 fb ff ff       	call   c00230f0 <IDE::enableIRQs(unsigned char, bool)>
c002353b:	83 c4 2c             	add    esp,0x2c
c002353e:	31 c0                	xor    eax,eax
c0023540:	5b                   	pop    ebx
c0023541:	5e                   	pop    esi
c0023542:	5f                   	pop    edi
c0023543:	5d                   	pop    ebp
c0023544:	c3                   	ret    
c0023545:	90                   	nop

c0023546 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023546:	55                   	push   ebp
c0023547:	57                   	push   edi
c0023548:	56                   	push   esi
c0023549:	53                   	push   ebx
c002354a:	83 ec 1c             	sub    esp,0x1c
c002354d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023551:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023555:	8d 50 f8             	lea    edx,[eax-0x8]
c0023558:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002355c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023560:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023564:	80 fa 03             	cmp    dl,0x3
c0023567:	77 5d                	ja     c00235c6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023569:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002356d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023571:	0f b6 db             	movzx  ebx,bl
c0023574:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023577:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c002357b:	83 ca 80             	or     edx,0xffffff80
c002357e:	0f b6 d2             	movzx  edx,dl
c0023581:	52                   	push   edx
c0023582:	6a 0c                	push   0xc
c0023584:	53                   	push   ebx
c0023585:	56                   	push   esi
c0023586:	e8 59 f9 ff ff       	call   c0022ee4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002358b:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023590:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023594:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023598:	0f b6 c0             	movzx  eax,al
c002359b:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c002359f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00235a1:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00235a6:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00235aa:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00235ae:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00235b2:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00235ba:	83 c4 2c             	add    esp,0x2c
c00235bd:	5b                   	pop    ebx
c00235be:	5e                   	pop    esi
c00235bf:	5f                   	pop    edi
c00235c0:	5d                   	pop    ebp
c00235c1:	e9 1e f9 ff ff       	jmp    c0022ee4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00235c6:	3c 07                	cmp    al,0x7
c00235c8:	77 10                	ja     c00235da <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00235ca:	0f b6 db             	movzx  ebx,bl
c00235cd:	0f b6 d0             	movzx  edx,al
c00235d0:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00235d8:	eb 2d                	jmp    c0023607 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00235da:	3c 0d                	cmp    al,0xd
c00235dc:	77 13                	ja     c00235f1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00235de:	0f b6 db             	movzx  ebx,bl
c00235e1:	0f b6 c0             	movzx  eax,al
c00235e4:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00235eb:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00235ef:	eb 16                	jmp    c0023607 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00235f1:	3c 15                	cmp    al,0x15
c00235f3:	77 14                	ja     c0023609 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00235f5:	0f b6 db             	movzx  ebx,bl
c00235f8:	0f b6 c0             	movzx  eax,al
c00235fb:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023603:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023607:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023609:	83 c4 1c             	add    esp,0x1c
c002360c:	5b                   	pop    ebx
c002360d:	5e                   	pop    esi
c002360e:	5f                   	pop    edi
c002360f:	5d                   	pop    ebp
c0023610:	c3                   	ret    
c0023611:	90                   	nop

c0023612 <IDE::detect()>:
c0023612:	55                   	push   ebp
c0023613:	57                   	push   edi
c0023614:	56                   	push   esi
c0023615:	53                   	push   ebx
c0023616:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002361c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023623:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c002362a:	0f 85 be 02 00 00    	jne    c00238ee <IDE::detect()+0x2dc>
c0023630:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023637:	31 f6                	xor    esi,esi
c0023639:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023641:	31 ed                	xor    ebp,ebp
c0023643:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023647:	c1 e0 06             	shl    eax,0x6
c002364a:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023652:	89 e8                	mov    eax,ebp
c0023654:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023658:	c1 e0 04             	shl    eax,0x4
c002365b:	83 c8 a0             	or     eax,0xffffffa0
c002365e:	0f b6 c0             	movzx  eax,al
c0023661:	50                   	push   eax
c0023662:	6a 06                	push   0x6
c0023664:	56                   	push   esi
c0023665:	53                   	push   ebx
c0023666:	e8 79 f8 ff ff       	call   c0022ee4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002366b:	83 c4 0c             	add    esp,0xc
c002366e:	6a 0c                	push   0xc
c0023670:	56                   	push   esi
c0023671:	53                   	push   ebx
c0023672:	e8 2d f9 ff ff       	call   c0022fa4 <IDE::read(unsigned char, unsigned char)>
c0023677:	83 c4 0c             	add    esp,0xc
c002367a:	6a 0c                	push   0xc
c002367c:	56                   	push   esi
c002367d:	53                   	push   ebx
c002367e:	e8 21 f9 ff ff       	call   c0022fa4 <IDE::read(unsigned char, unsigned char)>
c0023683:	83 c4 0c             	add    esp,0xc
c0023686:	6a 0c                	push   0xc
c0023688:	56                   	push   esi
c0023689:	53                   	push   ebx
c002368a:	e8 15 f9 ff ff       	call   c0022fa4 <IDE::read(unsigned char, unsigned char)>
c002368f:	83 c4 0c             	add    esp,0xc
c0023692:	6a 0c                	push   0xc
c0023694:	56                   	push   esi
c0023695:	53                   	push   ebx
c0023696:	e8 09 f9 ff ff       	call   c0022fa4 <IDE::read(unsigned char, unsigned char)>
c002369b:	68 ec 00 00 00       	push   0xec
c00236a0:	6a 07                	push   0x7
c00236a2:	56                   	push   esi
c00236a3:	53                   	push   ebx
c00236a4:	e8 3b f8 ff ff       	call   c0022ee4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236a9:	83 c4 1c             	add    esp,0x1c
c00236ac:	6a 0c                	push   0xc
c00236ae:	56                   	push   esi
c00236af:	53                   	push   ebx
c00236b0:	e8 ef f8 ff ff       	call   c0022fa4 <IDE::read(unsigned char, unsigned char)>
c00236b5:	83 c4 0c             	add    esp,0xc
c00236b8:	6a 0c                	push   0xc
c00236ba:	56                   	push   esi
c00236bb:	53                   	push   ebx
c00236bc:	e8 e3 f8 ff ff       	call   c0022fa4 <IDE::read(unsigned char, unsigned char)>
c00236c1:	83 c4 0c             	add    esp,0xc
c00236c4:	6a 0c                	push   0xc
c00236c6:	56                   	push   esi
c00236c7:	53                   	push   ebx
c00236c8:	e8 d7 f8 ff ff       	call   c0022fa4 <IDE::read(unsigned char, unsigned char)>
c00236cd:	83 c4 0c             	add    esp,0xc
c00236d0:	6a 0c                	push   0xc
c00236d2:	56                   	push   esi
c00236d3:	53                   	push   ebx
c00236d4:	e8 cb f8 ff ff       	call   c0022fa4 <IDE::read(unsigned char, unsigned char)>
c00236d9:	83 c4 0c             	add    esp,0xc
c00236dc:	6a 0c                	push   0xc
c00236de:	56                   	push   esi
c00236df:	53                   	push   ebx
c00236e0:	e8 bf f8 ff ff       	call   c0022fa4 <IDE::read(unsigned char, unsigned char)>
c00236e5:	83 c4 10             	add    esp,0x10
c00236e8:	84 c0                	test   al,al
c00236ea:	0f 84 8b 01 00 00    	je     c002387b <IDE::detect()+0x269>
c00236f0:	31 ff                	xor    edi,edi
c00236f2:	50                   	push   eax
c00236f3:	6a 0c                	push   0xc
c00236f5:	56                   	push   esi
c00236f6:	53                   	push   ebx
c00236f7:	e8 a8 f8 ff ff       	call   c0022fa4 <IDE::read(unsigned char, unsigned char)>
c00236fc:	83 c4 10             	add    esp,0x10
c00236ff:	a8 01                	test   al,0x1
c0023701:	0f 85 8e 01 00 00    	jne    c0023895 <IDE::detect()+0x283>
c0023707:	84 c0                	test   al,al
c0023709:	78 04                	js     c002370f <IDE::detect()+0xfd>
c002370b:	a8 08                	test   al,0x8
c002370d:	75 27                	jne    c0023736 <IDE::detect()+0x124>
c002370f:	47                   	inc    edi
c0023710:	81 ff 17 01 00 00    	cmp    edi,0x117
c0023716:	7e da                	jle    c00236f2 <IDE::detect()+0xe0>
c0023718:	50                   	push   eax
c0023719:	50                   	push   eax
c002371a:	6a 00                	push   0x0
c002371c:	68 40 4b 4c 00       	push   0x4c4b40
c0023721:	e8 d2 aa ff ff       	call   c001e1f8 <nanoSleep(unsigned long long)>
c0023726:	83 c4 10             	add    esp,0x10
c0023729:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c002372f:	75 c1                	jne    c00236f2 <IDE::detect()+0xe0>
c0023731:	e9 5f 01 00 00       	jmp    c0023895 <IDE::detect()+0x283>
c0023736:	31 c9                	xor    ecx,ecx
c0023738:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002373c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023740:	83 ec 0c             	sub    esp,0xc
c0023743:	68 80 00 00 00       	push   0x80
c0023748:	57                   	push   edi
c0023749:	6a 00                	push   0x0
c002374b:	56                   	push   esi
c002374c:	53                   	push   ebx
c002374d:	e8 f4 fd ff ff       	call   c0023546 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023752:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0023757:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002375b:	89 d1                	mov    ecx,edx
c002375d:	c1 e0 06             	shl    eax,0x6
c0023760:	01 d8                	add    eax,ebx
c0023762:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0023769:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0023770:	89 f2                	mov    edx,esi
c0023772:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0023778:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002377c:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023782:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023786:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002378d:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023795:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002379c:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00237a4:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00237aa:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00237b1:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00237b7:	8d 54 24 58          	lea    edx,[esp+0x58]
c00237bb:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00237bf:	83 c4 20             	add    esp,0x20
c00237c2:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00237c5:	83 c0 02             	add    eax,0x2
c00237c8:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00237ce:	83 c7 02             	add    edi,0x2
c00237d1:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00237d4:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00237da:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00237de:	75 e2                	jne    c00237c2 <IDE::detect()+0x1b0>
c00237e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00237e4:	c1 e0 06             	shl    eax,0x6
c00237e7:	01 d8                	add    eax,ebx
c00237e9:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00237ef:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00237f6:	66 c1 ea 09          	shr    dx,0x9
c00237fa:	83 e2 01             	and    edx,0x1
c00237fd:	84 c9                	test   cl,cl
c00237ff:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023805:	75 2f                	jne    c0023836 <IDE::detect()+0x224>
c0023807:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c002380d:	85 c0                	test   eax,eax
c002380f:	74 66                	je     c0023877 <IDE::detect()+0x265>
c0023811:	50                   	push   eax
c0023812:	55                   	push   ebp
c0023813:	56                   	push   esi
c0023814:	68 df c9 02 c0       	push   0xc002c9df
c0023819:	e8 b6 f5 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c002381e:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023825:	e8 16 c0 fe ff       	call   c000f840 <malloc>
c002382a:	89 c7                	mov    edi,eax
c002382c:	89 04 24             	mov    DWORD PTR [esp],eax
c002382f:	e8 78 06 00 00       	call   c0023eac <ATA::ATA()>
c0023834:	eb 28                	jmp    c002385e <IDE::detect()+0x24c>
c0023836:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c002383c:	55                   	push   ebp
c002383d:	56                   	push   esi
c002383e:	68 0e ca 02 c0       	push   0xc002ca0e
c0023843:	e8 8c f5 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0023848:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c002384f:	e8 ec bf fe ff       	call   c000f840 <malloc>
c0023854:	89 c7                	mov    edi,eax
c0023856:	89 04 24             	mov    DWORD PTR [esp],eax
c0023859:	e8 8e 0c 00 00       	call   c00244ec <ATAPI::ATAPI()>
c002385e:	5a                   	pop    edx
c002385f:	59                   	pop    ecx
c0023860:	57                   	push   edi
c0023861:	53                   	push   ebx
c0023862:	e8 93 09 ff ff       	call   c00141fa <Device::addChild(Device*)>
c0023867:	8b 07                	mov    eax,DWORD PTR [edi]
c0023869:	53                   	push   ebx
c002386a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002386e:	6a 00                	push   0x0
c0023870:	57                   	push   edi
c0023871:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023874:	83 c4 20             	add    esp,0x20
c0023877:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c002387b:	4d                   	dec    ebp
c002387c:	74 0a                	je     c0023888 <IDE::detect()+0x276>
c002387e:	bd 01 00 00 00       	mov    ebp,0x1
c0023883:	e9 bb fd ff ff       	jmp    c0023643 <IDE::detect()+0x31>
c0023888:	4e                   	dec    esi
c0023889:	74 63                	je     c00238ee <IDE::detect()+0x2dc>
c002388b:	be 01 00 00 00       	mov    esi,0x1
c0023890:	e9 ac fd ff ff       	jmp    c0023641 <IDE::detect()+0x2f>
c0023895:	50                   	push   eax
c0023896:	6a 04                	push   0x4
c0023898:	56                   	push   esi
c0023899:	53                   	push   ebx
c002389a:	e8 05 f7 ff ff       	call   c0022fa4 <IDE::read(unsigned char, unsigned char)>
c002389f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00238a3:	83 c4 0c             	add    esp,0xc
c00238a6:	6a 05                	push   0x5
c00238a8:	56                   	push   esi
c00238a9:	53                   	push   ebx
c00238aa:	e8 f5 f6 ff ff       	call   c0022fa4 <IDE::read(unsigned char, unsigned char)>
c00238af:	83 c4 10             	add    esp,0x10
c00238b2:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00238b6:	80 fa 14             	cmp    dl,0x14
c00238b9:	75 04                	jne    c00238bf <IDE::detect()+0x2ad>
c00238bb:	3c eb                	cmp    al,0xeb
c00238bd:	eb 07                	jmp    c00238c6 <IDE::detect()+0x2b4>
c00238bf:	3c 96                	cmp    al,0x96
c00238c1:	75 b8                	jne    c002387b <IDE::detect()+0x269>
c00238c3:	80 fa 69             	cmp    dl,0x69
c00238c6:	75 b3                	jne    c002387b <IDE::detect()+0x269>
c00238c8:	68 a1 00 00 00       	push   0xa1
c00238cd:	6a 07                	push   0x7
c00238cf:	56                   	push   esi
c00238d0:	53                   	push   ebx
c00238d1:	e8 0e f6 ff ff       	call   c0022ee4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00238d6:	5f                   	pop    edi
c00238d7:	58                   	pop    eax
c00238d8:	6a 00                	push   0x0
c00238da:	68 40 42 0f 00       	push   0xf4240
c00238df:	e8 14 a9 ff ff       	call   c001e1f8 <nanoSleep(unsigned long long)>
c00238e4:	83 c4 10             	add    esp,0x10
c00238e7:	b1 01                	mov    cl,0x1
c00238e9:	e9 4a fe ff ff       	jmp    c0023738 <IDE::detect()+0x126>
c00238ee:	81 c4 1c 02 00 00    	add    esp,0x21c
c00238f4:	5b                   	pop    ebx
c00238f5:	5e                   	pop    esi
c00238f6:	5f                   	pop    edi
c00238f7:	5d                   	pop    ebp
c00238f8:	c3                   	ret    
c00238f9:	90                   	nop

c00238fa <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00238fa:	55                   	push   ebp
c00238fb:	57                   	push   edi
c00238fc:	56                   	push   esi
c00238fd:	53                   	push   ebx
c00238fe:	83 ec 1c             	sub    esp,0x1c
c0023901:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023905:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023909:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002390d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023911:	88 c3                	mov    bl,al
c0023913:	84 c0                	test   al,al
c0023915:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023919:	0f 84 67 01 00 00    	je     c0023a86 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c002391f:	83 ec 0c             	sub    esp,0xc
c0023922:	68 3f ca 02 c0       	push   0xc002ca3f
c0023927:	e8 a8 f4 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c002392c:	83 c4 10             	add    esp,0x10
c002392f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023933:	3c 01                	cmp    al,0x1
c0023935:	75 17                	jne    c002394e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0023937:	83 ec 0c             	sub    esp,0xc
c002393a:	b3 13                	mov    bl,0x13
c002393c:	68 4b ca 02 c0       	push   0xc002ca4b
c0023941:	e8 8e f4 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0023946:	83 c4 10             	add    esp,0x10
c0023949:	e9 25 01 00 00       	jmp    c0023a73 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002394e:	3c 02                	cmp    al,0x2
c0023950:	0f 85 ef 00 00 00    	jne    c0023a45 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0023956:	d1 e6                	shl    esi,1
c0023958:	09 ee                	or     esi,ebp
c002395a:	52                   	push   edx
c002395b:	89 f0                	mov    eax,esi
c002395d:	6a 01                	push   0x1
c002395f:	0f b6 f0             	movzx  esi,al
c0023962:	c1 e6 06             	shl    esi,0x6
c0023965:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c002396d:	50                   	push   eax
c002396e:	57                   	push   edi
c002396f:	e8 30 f6 ff ff       	call   c0022fa4 <IDE::read(unsigned char, unsigned char)>
c0023974:	83 c4 10             	add    esp,0x10
c0023977:	89 c6                	mov    esi,eax
c0023979:	a8 01                	test   al,0x1
c002397b:	74 12                	je     c002398f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c002397d:	83 ec 0c             	sub    esp,0xc
c0023980:	b3 07                	mov    bl,0x7
c0023982:	68 60 ca 02 c0       	push   0xc002ca60
c0023987:	e8 48 f4 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c002398c:	83 c4 10             	add    esp,0x10
c002398f:	f7 c6 02 00 00 00    	test   esi,0x2
c0023995:	74 12                	je     c00239a9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0023997:	83 ec 0c             	sub    esp,0xc
c002399a:	b3 03                	mov    bl,0x3
c002399c:	68 7e ca 02 c0       	push   0xc002ca7e
c00239a1:	e8 2e f4 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c00239a6:	83 c4 10             	add    esp,0x10
c00239a9:	f7 c6 04 00 00 00    	test   esi,0x4
c00239af:	74 12                	je     c00239c3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c00239b1:	83 ec 0c             	sub    esp,0xc
c00239b4:	b3 14                	mov    bl,0x14
c00239b6:	68 9e ca 02 c0       	push   0xc002ca9e
c00239bb:	e8 14 f4 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c00239c0:	83 c4 10             	add    esp,0x10
c00239c3:	f7 c6 08 00 00 00    	test   esi,0x8
c00239c9:	74 12                	je     c00239dd <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c00239cb:	83 ec 0c             	sub    esp,0xc
c00239ce:	b3 03                	mov    bl,0x3
c00239d0:	68 7e ca 02 c0       	push   0xc002ca7e
c00239d5:	e8 fa f3 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c00239da:	83 c4 10             	add    esp,0x10
c00239dd:	f7 c6 10 00 00 00    	test   esi,0x10
c00239e3:	74 12                	je     c00239f7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c00239e5:	83 ec 0c             	sub    esp,0xc
c00239e8:	b3 15                	mov    bl,0x15
c00239ea:	68 b6 ca 02 c0       	push   0xc002cab6
c00239ef:	e8 e0 f3 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c00239f4:	83 c4 10             	add    esp,0x10
c00239f7:	f7 c6 20 00 00 00    	test   esi,0x20
c00239fd:	74 12                	je     c0023a11 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c00239ff:	83 ec 0c             	sub    esp,0xc
c0023a02:	b3 03                	mov    bl,0x3
c0023a04:	68 7e ca 02 c0       	push   0xc002ca7e
c0023a09:	e8 c6 f3 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0023a0e:	83 c4 10             	add    esp,0x10
c0023a11:	f7 c6 40 00 00 00    	test   esi,0x40
c0023a17:	74 12                	je     c0023a2b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0023a19:	83 ec 0c             	sub    esp,0xc
c0023a1c:	b3 16                	mov    bl,0x16
c0023a1e:	68 d0 ca 02 c0       	push   0xc002cad0
c0023a23:	e8 ac f3 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0023a28:	83 c4 10             	add    esp,0x10
c0023a2b:	89 f0                	mov    eax,esi
c0023a2d:	84 c0                	test   al,al
c0023a2f:	79 42                	jns    c0023a73 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023a31:	83 ec 0c             	sub    esp,0xc
c0023a34:	b3 0d                	mov    bl,0xd
c0023a36:	68 f1 ca 02 c0       	push   0xc002caf1
c0023a3b:	e8 94 f3 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0023a40:	83 c4 10             	add    esp,0x10
c0023a43:	eb 2e                	jmp    c0023a73 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023a45:	3c 03                	cmp    al,0x3
c0023a47:	75 14                	jne    c0023a5d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023a49:	83 ec 0c             	sub    esp,0xc
c0023a4c:	b3 17                	mov    bl,0x17
c0023a4e:	68 05 cb 02 c0       	push   0xc002cb05
c0023a53:	e8 7c f3 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0023a58:	83 c4 10             	add    esp,0x10
c0023a5b:	eb 16                	jmp    c0023a73 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023a5d:	3c 04                	cmp    al,0x4
c0023a5f:	75 12                	jne    c0023a73 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023a61:	83 ec 0c             	sub    esp,0xc
c0023a64:	b3 08                	mov    bl,0x8
c0023a66:	68 1b cb 02 c0       	push   0xc002cb1b
c0023a6b:	e8 64 f3 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0023a70:	83 c4 10             	add    esp,0x10
c0023a73:	50                   	push   eax
c0023a74:	50                   	push   eax
c0023a75:	0f b6 c3             	movzx  eax,bl
c0023a78:	50                   	push   eax
c0023a79:	68 33 cb 02 c0       	push   0xc002cb33
c0023a7e:	e8 51 f3 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0023a83:	83 c4 10             	add    esp,0x10
c0023a86:	83 c4 1c             	add    esp,0x1c
c0023a89:	88 d8                	mov    al,bl
c0023a8b:	5b                   	pop    ebx
c0023a8c:	5e                   	pop    esi
c0023a8d:	5f                   	pop    edi
c0023a8e:	5d                   	pop    ebp
c0023a8f:	c3                   	ret    

c0023a90 <IDE::polling(unsigned char, unsigned int)>:
c0023a90:	57                   	push   edi
c0023a91:	56                   	push   esi
c0023a92:	53                   	push   ebx
c0023a93:	bb 04 00 00 00       	mov    ebx,0x4
c0023a98:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023a9c:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023aa1:	52                   	push   edx
c0023aa2:	6a 0c                	push   0xc
c0023aa4:	56                   	push   esi
c0023aa5:	57                   	push   edi
c0023aa6:	e8 f9 f4 ff ff       	call   c0022fa4 <IDE::read(unsigned char, unsigned char)>
c0023aab:	83 c4 10             	add    esp,0x10
c0023aae:	4b                   	dec    ebx
c0023aaf:	75 f0                	jne    c0023aa1 <IDE::polling(unsigned char, unsigned int)+0x11>
c0023ab1:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023ab6:	50                   	push   eax
c0023ab7:	6a 0c                	push   0xc
c0023ab9:	56                   	push   esi
c0023aba:	57                   	push   edi
c0023abb:	e8 e4 f4 ff ff       	call   c0022fa4 <IDE::read(unsigned char, unsigned char)>
c0023ac0:	83 c4 10             	add    esp,0x10
c0023ac3:	a8 01                	test   al,0x1
c0023ac5:	74 12                	je     c0023ad9 <IDE::polling(unsigned char, unsigned int)+0x49>
c0023ac7:	83 ec 0c             	sub    esp,0xc
c0023aca:	68 4d cb 02 c0       	push   0xc002cb4d
c0023acf:	e8 00 f3 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0023ad4:	83 c4 10             	add    esp,0x10
c0023ad7:	eb 17                	jmp    c0023af0 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023ad9:	a8 20                	test   al,0x20
c0023adb:	75 0f                	jne    c0023aec <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023add:	4b                   	dec    ebx
c0023ade:	74 10                	je     c0023af0 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023ae0:	84 c0                	test   al,al
c0023ae2:	78 d2                	js     c0023ab6 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023ae4:	a8 08                	test   al,0x8
c0023ae6:	74 ce                	je     c0023ab6 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023ae8:	31 c0                	xor    eax,eax
c0023aea:	eb 06                	jmp    c0023af2 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023aec:	b0 01                	mov    al,0x1
c0023aee:	eb 02                	jmp    c0023af2 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023af0:	b0 02                	mov    al,0x2
c0023af2:	5b                   	pop    ebx
c0023af3:	5e                   	pop    esi
c0023af4:	5f                   	pop    edi
c0023af5:	c3                   	ret    

c0023af6 <SATABus::close(int, int, void*)>:
c0023af6:	31 c0                	xor    eax,eax
c0023af8:	c3                   	ret    
c0023af9:	90                   	nop

c0023afa <SATABus::detect()>:
c0023afa:	c3                   	ret    
c0023afb:	90                   	nop

c0023afc <SATABus::SATABus()>:
c0023afc:	83 ec 0c             	sub    esp,0xc
c0023aff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b03:	83 ec 08             	sub    esp,0x8
c0023b06:	68 90 cb 02 c0       	push   0xc002cb90
c0023b0b:	50                   	push   eax
c0023b0c:	e8 75 0a ff ff       	call   c0014586 <HardDiskController::HardDiskController(char const*)>
c0023b11:	83 c4 10             	add    esp,0x10
c0023b14:	ba 4c cc 02 c0       	mov    edx,0xc002cc4c
c0023b19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b1d:	89 10                	mov    DWORD PTR [eax],edx
c0023b1f:	83 ec 0c             	sub    esp,0xc
c0023b22:	6a 50                	push   0x50
c0023b24:	e8 d5 c4 fe ff       	call   c000fffe <Phys::allocateContiguousPages(int)>
c0023b29:	83 c4 10             	add    esp,0x10
c0023b2c:	89 c2                	mov    edx,eax
c0023b2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b32:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023b38:	83 ec 0c             	sub    esp,0xc
c0023b3b:	6a 50                	push   0x50
c0023b3d:	e8 35 e0 fe ff       	call   c0011b77 <Virt::allocateKernelVirtualPages(int)>
c0023b42:	83 c4 10             	add    esp,0x10
c0023b45:	89 c2                	mov    edx,eax
c0023b47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b4b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023b51:	e8 c8 e2 fe ff       	call   c0011e1e <Virt::getAKernelVAS()>
c0023b56:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023b5a:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023b60:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023b64:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023b6a:	83 ec 0c             	sub    esp,0xc
c0023b6d:	6a 03                	push   0x3
c0023b6f:	6a 50                	push   0x50
c0023b71:	51                   	push   ecx
c0023b72:	52                   	push   edx
c0023b73:	50                   	push   eax
c0023b74:	e8 bb e9 fe ff       	call   c0012534 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023b79:	83 c4 20             	add    esp,0x20
c0023b7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b80:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023b86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b8a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023b90:	83 ec 04             	sub    esp,0x4
c0023b93:	52                   	push   edx
c0023b94:	50                   	push   eax
c0023b95:	68 b4 cb 02 c0       	push   0xc002cbb4
c0023b9a:	e8 35 f2 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0023b9f:	83 c4 10             	add    esp,0x10
c0023ba2:	90                   	nop
c0023ba3:	83 c4 0c             	add    esp,0xc
c0023ba6:	c3                   	ret    
c0023ba7:	90                   	nop

c0023ba8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023ba8:	83 ec 0c             	sub    esp,0xc
c0023bab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023baf:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023bb2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023bb5:	09 c2                	or     edx,eax
c0023bb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bbb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023bc1:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023bc3:	31 c0                	xor    eax,eax
c0023bc5:	c1 e9 08             	shr    ecx,0x8
c0023bc8:	83 e1 0f             	and    ecx,0xf
c0023bcb:	39 c8                	cmp    eax,ecx
c0023bcd:	74 0a                	je     c0023bd9 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023bcf:	f6 c2 01             	test   dl,0x1
c0023bd2:	74 18                	je     c0023bec <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023bd4:	d1 ea                	shr    edx,1
c0023bd6:	40                   	inc    eax
c0023bd7:	eb f2                	jmp    c0023bcb <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023bd9:	83 ec 0c             	sub    esp,0xc
c0023bdc:	68 d8 cb 02 c0       	push   0xc002cbd8
c0023be1:	e8 c9 68 ff ff       	call   c001a4af <Krnl::panic(char const*)>
c0023be6:	83 c4 10             	add    esp,0x10
c0023be9:	83 c8 ff             	or     eax,0xffffffff
c0023bec:	83 c4 0c             	add    esp,0xc
c0023bef:	c3                   	ret    

c0023bf0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023bf0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023bf4:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023bf7:	89 c2                	mov    edx,eax
c0023bf9:	c1 ea 08             	shr    edx,0x8
c0023bfc:	83 e2 0f             	and    edx,0xf
c0023bff:	fe ca                	dec    dl
c0023c01:	75 31                	jne    c0023c34 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023c03:	83 e0 0f             	and    eax,0xf
c0023c06:	3c 03                	cmp    al,0x3
c0023c08:	75 2a                	jne    c0023c34 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023c0a:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023c0d:	b8 02 00 00 00       	mov    eax,0x2
c0023c12:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023c18:	74 1c                	je     c0023c36 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023c1a:	b8 04 00 00 00       	mov    eax,0x4
c0023c1f:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023c25:	74 0f                	je     c0023c36 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023c27:	31 c0                	xor    eax,eax
c0023c29:	83 fa 03             	cmp    edx,0x3
c0023c2c:	0f 94 c0             	sete   al
c0023c2f:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023c33:	c3                   	ret    
c0023c34:	31 c0                	xor    eax,eax
c0023c36:	c3                   	ret    
c0023c37:	90                   	nop

c0023c38 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023c38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023c3c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c3f:	0f ba e2 0f          	bt     edx,0xf
c0023c43:	72 f7                	jb     c0023c3c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023c45:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c48:	83 ca 10             	or     edx,0x10
c0023c4b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023c4e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c51:	83 ca 01             	or     edx,0x1
c0023c54:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023c57:	c3                   	ret    

c0023c58 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023c58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023c5c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c5f:	83 e2 fe             	and    edx,0xfffffffe
c0023c62:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023c65:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c68:	83 e2 ef             	and    edx,0xffffffef
c0023c6b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023c6e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c71:	0f ba e2 0e          	bt     edx,0xe
c0023c75:	72 f7                	jb     c0023c6e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023c77:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c7a:	0f ba e2 0f          	bt     edx,0xf
c0023c7e:	72 ee                	jb     c0023c6e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023c80:	c3                   	ret    
c0023c81:	90                   	nop

c0023c82 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023c82:	55                   	push   ebp
c0023c83:	57                   	push   edi
c0023c84:	56                   	push   esi
c0023c85:	53                   	push   ebx
c0023c86:	83 ec 1c             	sub    esp,0x1c
c0023c89:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023c8d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023c91:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023c95:	53                   	push   ebx
c0023c96:	89 fd                	mov    ebp,edi
c0023c98:	56                   	push   esi
c0023c99:	c1 e5 0a             	shl    ebp,0xa
c0023c9c:	e8 b7 ff ff ff       	call   c0023c58 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023ca1:	83 ec 0c             	sub    esp,0xc
c0023ca4:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023caa:	01 e8                	add    eax,ebp
c0023cac:	89 03                	mov    DWORD PTR [ebx],eax
c0023cae:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023cb0:	68 00 04 00 00       	push   0x400
c0023cb5:	6a 00                	push   0x0
c0023cb7:	50                   	push   eax
c0023cb8:	e8 bb ca fd ff       	call   c0000778 <memset>
c0023cbd:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023cc3:	89 fa                	mov    edx,edi
c0023cc5:	01 e8                	add    eax,ebp
c0023cc7:	c1 e7 0d             	shl    edi,0xd
c0023cca:	89 03                	mov    DWORD PTR [ebx],eax
c0023ccc:	c1 e2 08             	shl    edx,0x8
c0023ccf:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023cd6:	81 c2 00 80 00 00    	add    edx,0x8000
c0023cdc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023ce0:	89 d0                	mov    eax,edx
c0023ce2:	83 c4 1c             	add    esp,0x1c
c0023ce5:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023ceb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023cee:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023cf1:	68 00 01 00 00       	push   0x100
c0023cf6:	6a 00                	push   0x0
c0023cf8:	50                   	push   eax
c0023cf9:	e8 7a ca fd ff       	call   c0000778 <memset>
c0023cfe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023d02:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023d08:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023d0e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023d12:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023d15:	83 c4 10             	add    esp,0x10
c0023d18:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023d1f:	31 ff                	xor    edi,edi
c0023d21:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023d27:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023d2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023d31:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023d37:	83 c5 20             	add    ebp,0x20
c0023d3a:	01 f8                	add    eax,edi
c0023d3c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023d3f:	52                   	push   edx
c0023d40:	68 00 01 00 00       	push   0x100
c0023d45:	6a 00                	push   0x0
c0023d47:	50                   	push   eax
c0023d48:	e8 2b ca fd ff       	call   c0000778 <memset>
c0023d4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023d51:	83 c4 10             	add    esp,0x10
c0023d54:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023d5a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023d61:	01 f8                	add    eax,edi
c0023d63:	81 c7 00 01 00 00    	add    edi,0x100
c0023d69:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023d6c:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023d72:	75 b3                	jne    c0023d27 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023d74:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023d78:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023d7c:	83 c4 1c             	add    esp,0x1c
c0023d7f:	5b                   	pop    ebx
c0023d80:	5e                   	pop    esi
c0023d81:	5f                   	pop    edi
c0023d82:	5d                   	pop    ebp
c0023d83:	e9 b0 fe ff ff       	jmp    c0023c38 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023d88 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023d88:	55                   	push   ebp
c0023d89:	57                   	push   edi
c0023d8a:	56                   	push   esi
c0023d8b:	53                   	push   ebx
c0023d8c:	31 db                	xor    ebx,ebx
c0023d8e:	83 ec 0c             	sub    esp,0xc
c0023d91:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023d95:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023d99:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023d9c:	f7 c7 01 00 00 00    	test   edi,0x1
c0023da2:	0f 84 aa 00 00 00    	je     c0023e52 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023da8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023dac:	89 d8                	mov    eax,ebx
c0023dae:	c1 e0 07             	shl    eax,0x7
c0023db1:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023db8:	55                   	push   ebp
c0023db9:	56                   	push   esi
c0023dba:	e8 31 fe ff ff       	call   c0023bf0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023dbf:	5a                   	pop    edx
c0023dc0:	83 f8 01             	cmp    eax,0x1
c0023dc3:	59                   	pop    ecx
c0023dc4:	75 30                	jne    c0023df6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023dc6:	50                   	push   eax
c0023dc7:	50                   	push   eax
c0023dc8:	53                   	push   ebx
c0023dc9:	68 fd cb 02 c0       	push   0xc002cbfd
c0023dce:	e8 01 f0 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0023dd3:	83 c4 0c             	add    esp,0xc
c0023dd6:	53                   	push   ebx
c0023dd7:	55                   	push   ebp
c0023dd8:	56                   	push   esi
c0023dd9:	e8 a4 fe ff ff       	call   c0023c82 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023dde:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023de5:	e8 56 ba fe ff       	call   c000f840 <malloc>
c0023dea:	89 c5                	mov    ebp,eax
c0023dec:	89 04 24             	mov    DWORD PTR [esp],eax
c0023def:	e8 60 0d 00 00       	call   c0024b54 <SATA::SATA()>
c0023df4:	eb 33                	jmp    c0023e29 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023df6:	83 f8 04             	cmp    eax,0x4
c0023df9:	75 47                	jne    c0023e42 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0023dfb:	50                   	push   eax
c0023dfc:	50                   	push   eax
c0023dfd:	53                   	push   ebx
c0023dfe:	68 14 cc 02 c0       	push   0xc002cc14
c0023e03:	e8 cc ef fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0023e08:	83 c4 0c             	add    esp,0xc
c0023e0b:	53                   	push   ebx
c0023e0c:	55                   	push   ebp
c0023e0d:	56                   	push   esi
c0023e0e:	e8 6f fe ff ff       	call   c0023c82 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023e13:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023e1a:	e8 21 ba fe ff       	call   c000f840 <malloc>
c0023e1f:	89 c5                	mov    ebp,eax
c0023e21:	89 04 24             	mov    DWORD PTR [esp],eax
c0023e24:	e8 d7 10 00 00       	call   c0024f00 <SATAPI::SATAPI()>
c0023e29:	5a                   	pop    edx
c0023e2a:	59                   	pop    ecx
c0023e2b:	55                   	push   ebp
c0023e2c:	56                   	push   esi
c0023e2d:	e8 c8 03 ff ff       	call   c00141fa <Device::addChild(Device*)>
c0023e32:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023e35:	56                   	push   esi
c0023e36:	6a 00                	push   0x0
c0023e38:	53                   	push   ebx
c0023e39:	55                   	push   ebp
c0023e3a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023e3d:	83 c4 20             	add    esp,0x20
c0023e40:	eb 10                	jmp    c0023e52 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023e42:	50                   	push   eax
c0023e43:	50                   	push   eax
c0023e44:	53                   	push   ebx
c0023e45:	68 2d cc 02 c0       	push   0xc002cc2d
c0023e4a:	e8 85 ef fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0023e4f:	83 c4 10             	add    esp,0x10
c0023e52:	d1 ef                	shr    edi,1
c0023e54:	43                   	inc    ebx
c0023e55:	83 fb 20             	cmp    ebx,0x20
c0023e58:	0f 85 3e ff ff ff    	jne    c0023d9c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023e5e:	83 c4 0c             	add    esp,0xc
c0023e61:	5b                   	pop    ebx
c0023e62:	5e                   	pop    esi
c0023e63:	5f                   	pop    edi
c0023e64:	5d                   	pop    ebp
c0023e65:	c3                   	ret    

c0023e66 <SATABus::open(int, int, void*)>:
c0023e66:	83 ec 14             	sub    esp,0x14
c0023e69:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023e6d:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023e73:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023e79:	52                   	push   edx
c0023e7a:	50                   	push   eax
c0023e7b:	e8 08 ff ff ff       	call   c0023d88 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023e80:	31 c0                	xor    eax,eax
c0023e82:	83 c4 1c             	add    esp,0x1c
c0023e85:	c3                   	ret    

c0023e86 <ATA::close(int, int, void*)>:
c0023e86:	83 ec 0c             	sub    esp,0xc
c0023e89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e8d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023e93:	85 c0                	test   eax,eax
c0023e95:	74 0c                	je     c0023ea3 <ATA::close(int, int, void*)+0x1d>
c0023e97:	83 ec 0c             	sub    esp,0xc
c0023e9a:	8b 10                	mov    edx,DWORD PTR [eax]
c0023e9c:	50                   	push   eax
c0023e9d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023ea0:	83 c4 10             	add    esp,0x10
c0023ea3:	31 c0                	xor    eax,eax
c0023ea5:	83 c4 0c             	add    esp,0xc
c0023ea8:	c3                   	ret    
c0023ea9:	90                   	nop

c0023eaa <ATA::powerSaving(PowerSavingLevel)>:
c0023eaa:	c3                   	ret    
c0023eab:	90                   	nop

c0023eac <ATA::ATA()>:
c0023eac:	83 ec 0c             	sub    esp,0xc
c0023eaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023eb3:	83 ec 04             	sub    esp,0x4
c0023eb6:	68 00 02 00 00       	push   0x200
c0023ebb:	68 15 cd 02 c0       	push   0xc002cd15
c0023ec0:	50                   	push   eax
c0023ec1:	e8 58 07 ff ff       	call   c001461e <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023ec6:	83 c4 10             	add    esp,0x10
c0023ec9:	ba 98 cc 02 c0       	mov    edx,0xc002cc98
c0023ece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ed2:	89 10                	mov    DWORD PTR [eax],edx
c0023ed4:	90                   	nop
c0023ed5:	83 c4 0c             	add    esp,0xc
c0023ed8:	c3                   	ret    
c0023ed9:	90                   	nop

c0023eda <ATA::flush(bool)>:
c0023eda:	53                   	push   ebx
c0023edb:	83 ec 08             	sub    esp,0x8
c0023ede:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023ee3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023ee7:	19 c0                	sbb    eax,eax
c0023ee9:	83 e0 fd             	and    eax,0xfffffffd
c0023eec:	05 ea 00 00 00       	add    eax,0xea
c0023ef1:	50                   	push   eax
c0023ef2:	6a 07                	push   0x7
c0023ef4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023efb:	50                   	push   eax
c0023efc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f02:	e8 dd ef ff ff       	call   c0022ee4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f07:	83 c4 0c             	add    esp,0xc
c0023f0a:	6a 00                	push   0x0
c0023f0c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f13:	50                   	push   eax
c0023f14:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f1a:	e8 71 fb ff ff       	call   c0023a90 <IDE::polling(unsigned char, unsigned int)>
c0023f1f:	83 c4 18             	add    esp,0x18
c0023f22:	5b                   	pop    ebx
c0023f23:	c3                   	ret    

c0023f24 <ATA::readyForCommand()>:
c0023f24:	56                   	push   esi
c0023f25:	53                   	push   ebx
c0023f26:	31 db                	xor    ebx,ebx
c0023f28:	50                   	push   eax
c0023f29:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023f2d:	50                   	push   eax
c0023f2e:	6a 0c                	push   0xc
c0023f30:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023f37:	50                   	push   eax
c0023f38:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023f3e:	e8 61 f0 ff ff       	call   c0022fa4 <IDE::read(unsigned char, unsigned char)>
c0023f43:	83 c4 10             	add    esp,0x10
c0023f46:	a8 88                	test   al,0x88
c0023f48:	74 23                	je     c0023f6d <ATA::readyForCommand()+0x49>
c0023f4a:	43                   	inc    ebx
c0023f4b:	83 fb 63             	cmp    ebx,0x63
c0023f4e:	7e dd                	jle    c0023f2d <ATA::readyForCommand()+0x9>
c0023f50:	51                   	push   ecx
c0023f51:	51                   	push   ecx
c0023f52:	6a 00                	push   0x0
c0023f54:	68 40 42 0f 00       	push   0xf4240
c0023f59:	e8 9a a2 ff ff       	call   c001e1f8 <nanoSleep(unsigned long long)>
c0023f5e:	83 c4 10             	add    esp,0x10
c0023f61:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023f67:	75 c4                	jne    c0023f2d <ATA::readyForCommand()+0x9>
c0023f69:	31 c0                	xor    eax,eax
c0023f6b:	eb 02                	jmp    c0023f6f <ATA::readyForCommand()+0x4b>
c0023f6d:	b0 01                	mov    al,0x1
c0023f6f:	5a                   	pop    edx
c0023f70:	5b                   	pop    ebx
c0023f71:	5e                   	pop    esi
c0023f72:	c3                   	ret    
c0023f73:	90                   	nop

c0023f74 <ATA::access(unsigned long long, int, void*, bool)>:
c0023f74:	55                   	push   ebp
c0023f75:	57                   	push   edi
c0023f76:	56                   	push   esi
c0023f77:	53                   	push   ebx
c0023f78:	83 ec 2c             	sub    esp,0x2c
c0023f7b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0023f7f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0023f83:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023f87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023f8b:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0023f8f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023f93:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023f97:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023f9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023fa1:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023fa7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023fab:	c1 e0 06             	shl    eax,0x6
c0023fae:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0023fb6:	74 5d                	je     c0024015 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0023fb8:	89 fa                	mov    edx,edi
c0023fba:	89 f0                	mov    eax,esi
c0023fbc:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0023fc0:	c1 ea 1c             	shr    edx,0x1c
c0023fc3:	89 d1                	mov    ecx,edx
c0023fc5:	09 c1                	or     ecx,eax
c0023fc7:	74 25                	je     c0023fee <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0023fc9:	31 ed                	xor    ebp,ebp
c0023fcb:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0023fd2:	89 fa                	mov    edx,edi
c0023fd4:	89 f0                	mov    eax,esi
c0023fd6:	0f ad d0             	shrd   eax,edx,cl
c0023fd9:	d3 ea                	shr    edx,cl
c0023fdb:	f6 c1 20             	test   cl,0x20
c0023fde:	74 02                	je     c0023fe2 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0023fe0:	89 d0                	mov    eax,edx
c0023fe2:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0023fe6:	45                   	inc    ebp
c0023fe7:	83 fd 06             	cmp    ebp,0x6
c0023fea:	75 df                	jne    c0023fcb <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0023fec:	eb 76                	jmp    c0024064 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0023fee:	89 f0                	mov    eax,esi
c0023ff0:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0023ff5:	89 fa                	mov    edx,edi
c0023ff7:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023ffe:	0f ac d0 10          	shrd   eax,edx,0x10
c0024002:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024007:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002400b:	c1 ee 18             	shr    esi,0x18
c002400e:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0024013:	eb 56                	jmp    c002406b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024015:	6a 00                	push   0x0
c0024017:	6a 3f                	push   0x3f
c0024019:	57                   	push   edi
c002401a:	56                   	push   esi
c002401b:	e8 8c 29 00 00       	call   c00269ac <__umoddi3>
c0024020:	83 c4 10             	add    esp,0x10
c0024023:	40                   	inc    eax
c0024024:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0024028:	6a 00                	push   0x0
c002402a:	68 f0 03 00 00       	push   0x3f0
c002402f:	57                   	push   edi
c0024030:	56                   	push   esi
c0024031:	e8 76 28 00 00       	call   c00268ac <__udivdi3>
c0024036:	83 c4 10             	add    esp,0x10
c0024039:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c002403e:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024045:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002404a:	6a 00                	push   0x0
c002404c:	6a 3f                	push   0x3f
c002404e:	57                   	push   edi
c002404f:	56                   	push   esi
c0024050:	e8 57 28 00 00       	call   c00268ac <__udivdi3>
c0024055:	83 c4 10             	add    esp,0x10
c0024058:	89 c6                	mov    esi,eax
c002405a:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c002405f:	83 e6 0f             	and    esi,0xf
c0024062:	eb 07                	jmp    c002406b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024064:	31 f6                	xor    esi,esi
c0024066:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c002406b:	bf 01 00 00 00       	mov    edi,0x1
c0024070:	50                   	push   eax
c0024071:	6a 00                	push   0x0
c0024073:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002407a:	50                   	push   eax
c002407b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002407f:	e8 6c f0 ff ff       	call   c00230f0 <IDE::enableIRQs(unsigned char, bool)>
c0024084:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024087:	e8 98 fe ff ff       	call   c0023f24 <ATA::readyForCommand()>
c002408c:	83 c4 10             	add    esp,0x10
c002408f:	84 c0                	test   al,al
c0024091:	0f 84 5a 02 00 00    	je     c00242f1 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024097:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002409d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00240a3:	c1 e0 04             	shl    eax,0x4
c00240a6:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c00240ad:	09 c6                	or     esi,eax
c00240af:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00240b4:	75 05                	jne    c00240bb <ATA::access(unsigned long long, int, void*, bool)+0x147>
c00240b6:	83 ce a0             	or     esi,0xffffffa0
c00240b9:	eb 03                	jmp    c00240be <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c00240bb:	83 ce e0             	or     esi,0xffffffe0
c00240be:	89 f0                	mov    eax,esi
c00240c0:	0f b6 f0             	movzx  esi,al
c00240c3:	56                   	push   esi
c00240c4:	6a 06                	push   0x6
c00240c6:	51                   	push   ecx
c00240c7:	52                   	push   edx
c00240c8:	e8 17 ee ff ff       	call   c0022ee4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240cd:	83 c4 10             	add    esp,0x10
c00240d0:	6a 00                	push   0x0
c00240d2:	6a 01                	push   0x1
c00240d4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240db:	50                   	push   eax
c00240dc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240e2:	e8 fd ed ff ff       	call   c0022ee4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240e7:	83 c4 10             	add    esp,0x10
c00240ea:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00240ef:	75 6e                	jne    c002415f <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c00240f1:	6a 00                	push   0x0
c00240f3:	6a 08                	push   0x8
c00240f5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240fc:	50                   	push   eax
c00240fd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024103:	e8 dc ed ff ff       	call   c0022ee4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024108:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002410d:	50                   	push   eax
c002410e:	6a 09                	push   0x9
c0024110:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024117:	50                   	push   eax
c0024118:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002411e:	e8 c1 ed ff ff       	call   c0022ee4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024123:	83 c4 20             	add    esp,0x20
c0024126:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002412b:	50                   	push   eax
c002412c:	6a 0a                	push   0xa
c002412e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024135:	50                   	push   eax
c0024136:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002413c:	e8 a3 ed ff ff       	call   c0022ee4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024141:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024146:	50                   	push   eax
c0024147:	6a 0b                	push   0xb
c0024149:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024150:	50                   	push   eax
c0024151:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024157:	e8 88 ed ff ff       	call   c0022ee4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002415c:	83 c4 20             	add    esp,0x20
c002415f:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024164:	50                   	push   eax
c0024165:	6a 02                	push   0x2
c0024167:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002416e:	50                   	push   eax
c002416f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024175:	e8 6a ed ff ff       	call   c0022ee4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002417a:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002417f:	50                   	push   eax
c0024180:	6a 03                	push   0x3
c0024182:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024189:	50                   	push   eax
c002418a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024190:	e8 4f ed ff ff       	call   c0022ee4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024195:	83 c4 20             	add    esp,0x20
c0024198:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c002419d:	50                   	push   eax
c002419e:	6a 04                	push   0x4
c00241a0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241a7:	50                   	push   eax
c00241a8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241ae:	e8 31 ed ff ff       	call   c0022ee4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00241b8:	50                   	push   eax
c00241b9:	6a 05                	push   0x5
c00241bb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241c2:	50                   	push   eax
c00241c3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241c9:	e8 16 ed ff ff       	call   c0022ee4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241ce:	83 c4 20             	add    esp,0x20
c00241d1:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00241d6:	0f 94 c0             	sete   al
c00241d9:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00241de:	74 09                	je     c00241e9 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c00241e0:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00241e7:	eb 07                	jmp    c00241f0 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c00241e9:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00241f0:	0f b6 c0             	movzx  eax,al
c00241f3:	50                   	push   eax
c00241f4:	6a 07                	push   0x7
c00241f6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241fd:	50                   	push   eax
c00241fe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024204:	e8 db ec ff ff       	call   c0022ee4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024209:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002420d:	83 c4 10             	add    esp,0x10
c0024210:	85 f6                	test   esi,esi
c0024212:	0f 84 ba 00 00 00    	je     c00242d2 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0024218:	50                   	push   eax
c0024219:	6a 01                	push   0x1
c002421b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024222:	50                   	push   eax
c0024223:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024229:	e8 62 f8 ff ff       	call   c0023a90 <IDE::polling(unsigned char, unsigned int)>
c002422e:	83 c4 10             	add    esp,0x10
c0024231:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024237:	84 c0                	test   al,al
c0024239:	74 2c                	je     c0024267 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c002423b:	0f b6 f8             	movzx  edi,al
c002423e:	0f b6 d2             	movzx  edx,dl
c0024241:	57                   	push   edi
c0024242:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024249:	50                   	push   eax
c002424a:	52                   	push   edx
c002424b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024251:	e8 a4 f6 ff ff       	call   c00238fa <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024256:	c7 04 24 70 cc 02 c0 	mov    DWORD PTR [esp],0xc002cc70
c002425d:	e8 72 eb fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0024262:	e9 87 00 00 00       	jmp    c00242ee <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024267:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c002426c:	74 33                	je     c00242a1 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c002426e:	31 ed                	xor    ebp,ebp
c0024270:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024274:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024278:	50                   	push   eax
c0024279:	50                   	push   eax
c002427a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024281:	50                   	push   eax
c0024282:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024288:	e8 45 ec ff ff       	call   c0022ed2 <IDE::getBase(unsigned char)>
c002428d:	89 c2                	mov    edx,eax
c002428f:	89 f8                	mov    eax,edi
c0024291:	66 ef                	out    dx,ax
c0024293:	45                   	inc    ebp
c0024294:	83 c4 10             	add    esp,0x10
c0024297:	81 fd 00 01 00 00    	cmp    ebp,0x100
c002429d:	75 d1                	jne    c0024270 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c002429f:	eb 23                	jmp    c00242c4 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c00242a1:	0f b6 d2             	movzx  edx,dl
c00242a4:	51                   	push   ecx
c00242a5:	51                   	push   ecx
c00242a6:	52                   	push   edx
c00242a7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242ad:	e8 20 ec ff ff       	call   c0022ed2 <IDE::getBase(unsigned char)>
c00242b2:	b9 00 01 00 00       	mov    ecx,0x100
c00242b7:	89 c2                	mov    edx,eax
c00242b9:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c00242bd:	fc                   	cld    
c00242be:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c00242c1:	83 c4 10             	add    esp,0x10
c00242c4:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c00242cc:	4e                   	dec    esi
c00242cd:	e9 3e ff ff ff       	jmp    c0024210 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c00242d2:	31 ff                	xor    edi,edi
c00242d4:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00242d9:	74 16                	je     c00242f1 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c00242db:	50                   	push   eax
c00242dc:	50                   	push   eax
c00242dd:	31 c0                	xor    eax,eax
c00242df:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00242e4:	0f 94 c0             	sete   al
c00242e7:	50                   	push   eax
c00242e8:	53                   	push   ebx
c00242e9:	e8 ec fb ff ff       	call   c0023eda <ATA::flush(bool)>
c00242ee:	83 c4 10             	add    esp,0x10
c00242f1:	83 c4 2c             	add    esp,0x2c
c00242f4:	89 f8                	mov    eax,edi
c00242f6:	5b                   	pop    ebx
c00242f7:	5e                   	pop    esi
c00242f8:	5f                   	pop    edi
c00242f9:	5d                   	pop    ebp
c00242fa:	c3                   	ret    
c00242fb:	90                   	nop

c00242fc <ATA::read(unsigned long long, int, void*)>:
c00242fc:	57                   	push   edi
c00242fd:	b8 04 00 00 00       	mov    eax,0x4
c0024302:	56                   	push   esi
c0024303:	53                   	push   ebx
c0024304:	83 ec 10             	sub    esp,0x10
c0024307:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002430b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002430f:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024312:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024316:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002431a:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024320:	77 3b                	ja     c002435d <ATA::read(unsigned long long, int, void*)+0x61>
c0024322:	b8 06 00 00 00       	mov    eax,0x6
c0024327:	85 d2                	test   edx,edx
c0024329:	74 32                	je     c002435d <ATA::read(unsigned long long, int, void*)+0x61>
c002432b:	50                   	push   eax
c002432c:	50                   	push   eax
c002432d:	6a 00                	push   0x0
c002432f:	52                   	push   edx
c0024330:	53                   	push   ebx
c0024331:	57                   	push   edi
c0024332:	56                   	push   esi
c0024333:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024337:	e8 38 fc ff ff       	call   c0023f74 <ATA::access(unsigned long long, int, void*, bool)>
c002433c:	83 c4 20             	add    esp,0x20
c002433f:	85 c0                	test   eax,eax
c0024341:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024345:	75 11                	jne    c0024358 <ATA::read(unsigned long long, int, void*)+0x5c>
c0024347:	01 1d 08 26 03 c0    	add    DWORD PTR ds:0xc0032608,ebx
c002434d:	e8 7a c6 fe ff       	call   c00109cc <VgaText::updateDiskUsage()>
c0024352:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024356:	eb 05                	jmp    c002435d <ATA::read(unsigned long long, int, void*)+0x61>
c0024358:	b8 01 00 00 00       	mov    eax,0x1
c002435d:	83 c4 10             	add    esp,0x10
c0024360:	5b                   	pop    ebx
c0024361:	5e                   	pop    esi
c0024362:	5f                   	pop    edi
c0024363:	c3                   	ret    

c0024364 <ATA::write(unsigned long long, int, void*)>:
c0024364:	57                   	push   edi
c0024365:	b8 04 00 00 00       	mov    eax,0x4
c002436a:	56                   	push   esi
c002436b:	53                   	push   ebx
c002436c:	83 ec 10             	sub    esp,0x10
c002436f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024377:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002437a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002437e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024382:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024388:	77 3b                	ja     c00243c5 <ATA::write(unsigned long long, int, void*)+0x61>
c002438a:	b8 06 00 00 00       	mov    eax,0x6
c002438f:	85 d2                	test   edx,edx
c0024391:	74 32                	je     c00243c5 <ATA::write(unsigned long long, int, void*)+0x61>
c0024393:	50                   	push   eax
c0024394:	50                   	push   eax
c0024395:	6a 01                	push   0x1
c0024397:	52                   	push   edx
c0024398:	53                   	push   ebx
c0024399:	57                   	push   edi
c002439a:	56                   	push   esi
c002439b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002439f:	e8 d0 fb ff ff       	call   c0023f74 <ATA::access(unsigned long long, int, void*, bool)>
c00243a4:	83 c4 20             	add    esp,0x20
c00243a7:	85 c0                	test   eax,eax
c00243a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00243ad:	75 11                	jne    c00243c0 <ATA::write(unsigned long long, int, void*)+0x5c>
c00243af:	01 1d 04 26 03 c0    	add    DWORD PTR ds:0xc0032604,ebx
c00243b5:	e8 12 c6 fe ff       	call   c00109cc <VgaText::updateDiskUsage()>
c00243ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00243be:	eb 05                	jmp    c00243c5 <ATA::write(unsigned long long, int, void*)+0x61>
c00243c0:	b8 01 00 00 00       	mov    eax,0x1
c00243c5:	83 c4 10             	add    esp,0x10
c00243c8:	5b                   	pop    ebx
c00243c9:	5e                   	pop    esi
c00243ca:	5f                   	pop    edi
c00243cb:	c3                   	ret    

c00243cc <ATA::detectCHS()>:
c00243cc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00243d0:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c00243d6:	c1 e0 06             	shl    eax,0x6
c00243d9:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00243df:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00243e9:	c7 44 24 04 7b cc 02 c0 	mov    DWORD PTR [esp+0x4],0xc002cc7b
c00243f1:	e9 b9 60 ff ff       	jmp    c001a4af <Krnl::panic(char const*)>

c00243f6 <ATA::open(int, int, void*)>:
c00243f6:	53                   	push   ebx
c00243f7:	83 ec 08             	sub    esp,0x8
c00243fa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00243fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024402:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024406:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002440c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024412:	c1 e0 06             	shl    eax,0x6
c0024415:	01 d0                	add    eax,edx
c0024417:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c002441e:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024424:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002442b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024435:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002443b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024442:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024449:	75 0c                	jne    c0024457 <ATA::open(int, int, void*)+0x61>
c002444b:	83 ec 0c             	sub    esp,0xc
c002444e:	53                   	push   ebx
c002444f:	e8 78 ff ff ff       	call   c00243cc <ATA::detectCHS()>
c0024454:	83 c4 10             	add    esp,0x10
c0024457:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002445d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024463:	c1 e0 06             	shl    eax,0x6
c0024466:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c002446d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024477:	d1 e8                	shr    eax,1
c0024479:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002447f:	6a 04                	push   0x4
c0024481:	6a 0c                	push   0xc
c0024483:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002448a:	50                   	push   eax
c002448b:	52                   	push   edx
c002448c:	e8 53 ea ff ff       	call   c0022ee4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024491:	90                   	nop
c0024492:	90                   	nop
c0024493:	6a 00                	push   0x0
c0024495:	6a 0c                	push   0xc
c0024497:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002449e:	50                   	push   eax
c002449f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00244a5:	e8 3a ea ff ff       	call   c0022ee4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244aa:	83 c4 14             	add    esp,0x14
c00244ad:	53                   	push   ebx
c00244ae:	e8 d3 01 ff ff       	call   c0014686 <PhysicalDisk::startCache()>
c00244b3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00244b6:	e8 77 23 ff ff       	call   c0016832 <createPartitionsForDisk(PhysicalDisk*)>
c00244bb:	31 c0                	xor    eax,eax
c00244bd:	83 c4 18             	add    esp,0x18
c00244c0:	5b                   	pop    ebx
c00244c1:	c3                   	ret    

c00244c2 <ATAPI::write(unsigned long long, int, void*)>:
c00244c2:	b8 03 00 00 00       	mov    eax,0x3
c00244c7:	c3                   	ret    

c00244c8 <ATAPI::close(int, int, void*)>:
c00244c8:	83 ec 0c             	sub    esp,0xc
c00244cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244cf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00244d5:	85 c0                	test   eax,eax
c00244d7:	74 0c                	je     c00244e5 <ATAPI::close(int, int, void*)+0x1d>
c00244d9:	83 ec 0c             	sub    esp,0xc
c00244dc:	8b 10                	mov    edx,DWORD PTR [eax]
c00244de:	50                   	push   eax
c00244df:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00244e2:	83 c4 10             	add    esp,0x10
c00244e5:	31 c0                	xor    eax,eax
c00244e7:	83 c4 0c             	add    esp,0xc
c00244ea:	c3                   	ret    
c00244eb:	90                   	nop

c00244ec <ATAPI::ATAPI()>:
c00244ec:	83 ec 0c             	sub    esp,0xc
c00244ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244f3:	83 ec 04             	sub    esp,0x4
c00244f6:	68 00 08 00 00       	push   0x800
c00244fb:	68 b5 cd 02 c0       	push   0xc002cdb5
c0024500:	50                   	push   eax
c0024501:	e8 18 01 ff ff       	call   c001461e <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024506:	83 c4 10             	add    esp,0x10
c0024509:	ba d0 cc 02 c0       	mov    edx,0xc002ccd0
c002450e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024512:	89 10                	mov    DWORD PTR [eax],edx
c0024514:	90                   	nop
c0024515:	83 c4 0c             	add    esp,0xc
c0024518:	c3                   	ret    
c0024519:	90                   	nop

c002451a <ATAPI::readyForCommand()>:
c002451a:	56                   	push   esi
c002451b:	53                   	push   ebx
c002451c:	31 db                	xor    ebx,ebx
c002451e:	50                   	push   eax
c002451f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024523:	50                   	push   eax
c0024524:	6a 0c                	push   0xc
c0024526:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002452d:	50                   	push   eax
c002452e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024534:	e8 6b ea ff ff       	call   c0022fa4 <IDE::read(unsigned char, unsigned char)>
c0024539:	83 c4 10             	add    esp,0x10
c002453c:	a8 88                	test   al,0x88
c002453e:	74 23                	je     c0024563 <ATAPI::readyForCommand()+0x49>
c0024540:	43                   	inc    ebx
c0024541:	83 fb 63             	cmp    ebx,0x63
c0024544:	7e dd                	jle    c0024523 <ATAPI::readyForCommand()+0x9>
c0024546:	51                   	push   ecx
c0024547:	51                   	push   ecx
c0024548:	6a 00                	push   0x0
c002454a:	68 40 42 0f 00       	push   0xf4240
c002454f:	e8 a4 9c ff ff       	call   c001e1f8 <nanoSleep(unsigned long long)>
c0024554:	83 c4 10             	add    esp,0x10
c0024557:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002455d:	75 c4                	jne    c0024523 <ATAPI::readyForCommand()+0x9>
c002455f:	31 c0                	xor    eax,eax
c0024561:	eb 02                	jmp    c0024565 <ATAPI::readyForCommand()+0x4b>
c0024563:	b0 01                	mov    al,0x1
c0024565:	5a                   	pop    edx
c0024566:	5b                   	pop    ebx
c0024567:	5e                   	pop    esi
c0024568:	c3                   	ret    
c0024569:	90                   	nop

c002456a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002456a:	55                   	push   ebp
c002456b:	57                   	push   edi
c002456c:	56                   	push   esi
c002456d:	53                   	push   ebx
c002456e:	83 ec 20             	sub    esp,0x20
c0024571:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024575:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024579:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002457d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024581:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024585:	6a 01                	push   0x1
c0024587:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002458e:	50                   	push   eax
c002458f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024595:	e8 56 eb ff ff       	call   c00230f0 <IDE::enableIRQs(unsigned char, bool)>
c002459a:	5e                   	pop    esi
c002459b:	58                   	pop    eax
c002459c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00245a3:	50                   	push   eax
c00245a4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245aa:	e8 0f e9 ff ff       	call   c0022ebe <IDE::prepareInterrupt(unsigned char)>
c00245af:	89 3c 24             	mov    DWORD PTR [esp],edi
c00245b2:	e8 63 ff ff ff       	call   c002451a <ATAPI::readyForCommand()>
c00245b7:	83 c4 10             	add    esp,0x10
c00245ba:	84 c0                	test   al,al
c00245bc:	75 0a                	jne    c00245c8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c00245be:	bb 01 00 00 00       	mov    ebx,0x1
c00245c3:	e9 57 02 00 00       	jmp    c002481f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00245c8:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c00245ce:	c1 e0 04             	shl    eax,0x4
c00245d1:	0f b6 c0             	movzx  eax,al
c00245d4:	50                   	push   eax
c00245d5:	6a 06                	push   0x6
c00245d7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00245de:	50                   	push   eax
c00245df:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245e5:	e8 fa e8 ff ff       	call   c0022ee4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245ea:	6a 00                	push   0x0
c00245ec:	6a 01                	push   0x1
c00245ee:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00245f5:	50                   	push   eax
c00245f6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245fc:	e8 e3 e8 ff ff       	call   c0022ee4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024601:	83 c4 20             	add    esp,0x20
c0024604:	0f b6 c3             	movzx  eax,bl
c0024607:	0f b6 df             	movzx  ebx,bh
c002460a:	50                   	push   eax
c002460b:	6a 04                	push   0x4
c002460d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024614:	50                   	push   eax
c0024615:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002461b:	e8 c4 e8 ff ff       	call   c0022ee4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024620:	53                   	push   ebx
c0024621:	6a 05                	push   0x5
c0024623:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002462a:	50                   	push   eax
c002462b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024631:	e8 ae e8 ff ff       	call   c0022ee4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024636:	83 c4 20             	add    esp,0x20
c0024639:	68 a0 00 00 00       	push   0xa0
c002463e:	6a 07                	push   0x7
c0024640:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024647:	50                   	push   eax
c0024648:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002464e:	e8 91 e8 ff ff       	call   c0022ee4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024653:	83 c4 0c             	add    esp,0xc
c0024656:	6a 01                	push   0x1
c0024658:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002465f:	50                   	push   eax
c0024660:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024666:	e8 25 f4 ff ff       	call   c0023a90 <IDE::polling(unsigned char, unsigned int)>
c002466b:	83 c4 10             	add    esp,0x10
c002466e:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024674:	84 c0                	test   al,al
c0024676:	74 23                	je     c002469b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024678:	0f b6 d8             	movzx  ebx,al
c002467b:	0f b6 d2             	movzx  edx,dl
c002467e:	53                   	push   ebx
c002467f:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024686:	50                   	push   eax
c0024687:	52                   	push   edx
c0024688:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002468e:	e8 67 f2 ff ff       	call   c00238fa <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024693:	83 c4 10             	add    esp,0x10
c0024696:	e9 84 01 00 00       	jmp    c002481f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002469b:	0f b6 d2             	movzx  edx,dl
c002469e:	53                   	push   ebx
c002469f:	53                   	push   ebx
c00246a0:	52                   	push   edx
c00246a1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246a7:	e8 26 e8 ff ff       	call   c0022ed2 <IDE::getBase(unsigned char)>
c00246ac:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00246b0:	b9 06 00 00 00       	mov    ecx,0x6
c00246b5:	89 c2                	mov    edx,eax
c00246b7:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00246ba:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00246be:	83 c4 10             	add    esp,0x10
c00246c1:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00246c7:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00246ce:	85 db                	test   ebx,ebx
c00246d0:	0f 84 ec 00 00 00    	je     c00247c2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c00246d6:	51                   	push   ecx
c00246d7:	51                   	push   ecx
c00246d8:	52                   	push   edx
c00246d9:	50                   	push   eax
c00246da:	e8 73 e9 ff ff       	call   c0023052 <IDE::waitInterrupt(unsigned char)>
c00246df:	83 c4 10             	add    esp,0x10
c00246e2:	84 c0                	test   al,al
c00246e4:	0f 84 d4 fe ff ff    	je     c00245be <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00246ea:	56                   	push   esi
c00246eb:	56                   	push   esi
c00246ec:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246f3:	50                   	push   eax
c00246f4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246fa:	e8 bf e7 ff ff       	call   c0022ebe <IDE::prepareInterrupt(unsigned char)>
c00246ff:	83 c4 0c             	add    esp,0xc
c0024702:	6a 04                	push   0x4
c0024704:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002470b:	50                   	push   eax
c002470c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024712:	e8 8d e8 ff ff       	call   c0022fa4 <IDE::read(unsigned char, unsigned char)>
c0024717:	83 c4 0c             	add    esp,0xc
c002471a:	89 c6                	mov    esi,eax
c002471c:	6a 05                	push   0x5
c002471e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024725:	50                   	push   eax
c0024726:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002472c:	e8 73 e8 ff ff       	call   c0022fa4 <IDE::read(unsigned char, unsigned char)>
c0024731:	89 f1                	mov    ecx,esi
c0024733:	0f b6 c0             	movzx  eax,al
c0024736:	0f b6 f1             	movzx  esi,cl
c0024739:	c1 e0 08             	shl    eax,0x8
c002473c:	09 c6                	or     esi,eax
c002473e:	d1 fe                	sar    esi,1
c0024740:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0024744:	83 c4 10             	add    esp,0x10
c0024747:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c002474c:	74 41                	je     c002478f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c002474e:	31 c9                	xor    ecx,ecx
c0024750:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024756:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002475d:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0024761:	75 0a                	jne    c002476d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0024763:	01 c9                	add    ecx,ecx
c0024765:	01 cd                	add    ebp,ecx
c0024767:	4b                   	dec    ebx
c0024768:	e9 54 ff ff ff       	jmp    c00246c1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c002476d:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0024772:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024776:	51                   	push   ecx
c0024777:	51                   	push   ecx
c0024778:	52                   	push   edx
c0024779:	50                   	push   eax
c002477a:	e8 53 e7 ff ff       	call   c0022ed2 <IDE::getBase(unsigned char)>
c002477f:	89 c2                	mov    edx,eax
c0024781:	89 f0                	mov    eax,esi
c0024783:	66 ef                	out    dx,ax
c0024785:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024789:	83 c4 10             	add    esp,0x10
c002478c:	41                   	inc    ecx
c002478d:	eb c1                	jmp    c0024750 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c002478f:	31 f6                	xor    esi,esi
c0024791:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024797:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002479e:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00247a2:	75 06                	jne    c00247aa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00247a4:	01 f6                	add    esi,esi
c00247a6:	01 f5                	add    ebp,esi
c00247a8:	eb bd                	jmp    c0024767 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00247aa:	51                   	push   ecx
c00247ab:	51                   	push   ecx
c00247ac:	52                   	push   edx
c00247ad:	50                   	push   eax
c00247ae:	e8 1f e7 ff ff       	call   c0022ed2 <IDE::getBase(unsigned char)>
c00247b3:	89 c2                	mov    edx,eax
c00247b5:	66 ed                	in     ax,dx
c00247b7:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00247bc:	83 c4 10             	add    esp,0x10
c00247bf:	46                   	inc    esi
c00247c0:	eb cf                	jmp    c0024791 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00247c2:	51                   	push   ecx
c00247c3:	51                   	push   ecx
c00247c4:	52                   	push   edx
c00247c5:	50                   	push   eax
c00247c6:	e8 87 e8 ff ff       	call   c0023052 <IDE::waitInterrupt(unsigned char)>
c00247cb:	83 c4 10             	add    esp,0x10
c00247ce:	84 c0                	test   al,al
c00247d0:	0f 84 e8 fd ff ff    	je     c00245be <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00247d6:	bb a0 86 01 00       	mov    ebx,0x186a0
c00247db:	52                   	push   edx
c00247dc:	52                   	push   edx
c00247dd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247e4:	50                   	push   eax
c00247e5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247eb:	e8 ce e6 ff ff       	call   c0022ebe <IDE::prepareInterrupt(unsigned char)>
c00247f0:	83 c4 10             	add    esp,0x10
c00247f3:	50                   	push   eax
c00247f4:	50                   	push   eax
c00247f5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247fc:	50                   	push   eax
c00247fd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024803:	e8 ca e6 ff ff       	call   c0022ed2 <IDE::getBase(unsigned char)>
c0024808:	8d 50 07             	lea    edx,[eax+0x7]
c002480b:	ec                   	in     al,dx
c002480c:	83 c4 10             	add    esp,0x10
c002480f:	a8 88                	test   al,0x88
c0024811:	74 0a                	je     c002481d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0024813:	4b                   	dec    ebx
c0024814:	75 dd                	jne    c00247f3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0024816:	bb 02 00 00 00       	mov    ebx,0x2
c002481b:	eb 02                	jmp    c002481f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002481d:	31 db                	xor    ebx,ebx
c002481f:	83 c4 1c             	add    esp,0x1c
c0024822:	89 d8                	mov    eax,ebx
c0024824:	5b                   	pop    ebx
c0024825:	5e                   	pop    esi
c0024826:	5f                   	pop    edi
c0024827:	5d                   	pop    ebp
c0024828:	c3                   	ret    
c0024829:	90                   	nop

c002482a <ATAPI::diskRemoved()>:
c002482a:	83 ec 18             	sub    esp,0x18
c002482d:	68 c1 cd 02 c0       	push   0xc002cdc1
c0024832:	e8 9d e5 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0024837:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002483b:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024842:	83 c4 1c             	add    esp,0x1c
c0024845:	c3                   	ret    

c0024846 <ATAPI::eject()>:
c0024846:	57                   	push   edi
c0024847:	b9 03 00 00 00       	mov    ecx,0x3
c002484c:	53                   	push   ebx
c002484d:	83 ec 14             	sub    esp,0x14
c0024850:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024854:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024858:	fc                   	cld    
c0024859:	31 c0                	xor    eax,eax
c002485b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002485d:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024862:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024867:	50                   	push   eax
c0024868:	50                   	push   eax
c0024869:	6a 00                	push   0x0
c002486b:	6a 00                	push   0x0
c002486d:	6a 00                	push   0x0
c002486f:	6a 02                	push   0x2
c0024871:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024875:	50                   	push   eax
c0024876:	53                   	push   ebx
c0024877:	e8 ee fc ff ff       	call   c002456a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002487c:	83 c4 14             	add    esp,0x14
c002487f:	53                   	push   ebx
c0024880:	e8 a5 ff ff ff       	call   c002482a <ATAPI::diskRemoved()>
c0024885:	83 c4 24             	add    esp,0x24
c0024888:	31 c0                	xor    eax,eax
c002488a:	5b                   	pop    ebx
c002488b:	5f                   	pop    edi
c002488c:	c3                   	ret    
c002488d:	90                   	nop

c002488e <ATAPI::diskInserted()>:
c002488e:	53                   	push   ebx
c002488f:	83 ec 14             	sub    esp,0x14
c0024892:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024896:	68 d8 cd 02 c0       	push   0xc002cdd8
c002489b:	e8 34 e5 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c00248a0:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c00248a7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00248aa:	e8 d7 fd fe ff       	call   c0014686 <PhysicalDisk::startCache()>
c00248af:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00248b3:	83 c4 18             	add    esp,0x18
c00248b6:	5b                   	pop    ebx
c00248b7:	e9 76 1f ff ff       	jmp    c0016832 <createPartitionsForDisk(PhysicalDisk*)>

c00248bc <ATAPI::detectMedia()>:
c00248bc:	56                   	push   esi
c00248bd:	53                   	push   ebx
c00248be:	83 ec 28             	sub    esp,0x28
c00248c1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00248c5:	6a 0c                	push   0xc
c00248c7:	6a 00                	push   0x0
c00248c9:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00248cd:	56                   	push   esi
c00248ce:	e8 a5 be fd ff       	call   c0000778 <memset>
c00248d3:	58                   	pop    eax
c00248d4:	5a                   	pop    edx
c00248d5:	6a 00                	push   0x0
c00248d7:	6a 00                	push   0x0
c00248d9:	6a 00                	push   0x0
c00248db:	6a 00                	push   0x0
c00248dd:	56                   	push   esi
c00248de:	53                   	push   ebx
c00248df:	e8 86 fc ff ff       	call   c002456a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00248e4:	83 c4 1c             	add    esp,0x1c
c00248e7:	6a 0c                	push   0xc
c00248e9:	6a 00                	push   0x0
c00248eb:	56                   	push   esi
c00248ec:	e8 87 be fd ff       	call   c0000778 <memset>
c00248f1:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00248f6:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00248fb:	59                   	pop    ecx
c00248fc:	58                   	pop    eax
c00248fd:	6a 01                	push   0x1
c00248ff:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024903:	50                   	push   eax
c0024904:	6a 00                	push   0x0
c0024906:	6a 12                	push   0x12
c0024908:	56                   	push   esi
c0024909:	53                   	push   ebx
c002490a:	e8 5b fc ff ff       	call   c002456a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002490f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024913:	83 c4 20             	add    esp,0x20
c0024916:	83 e0 7f             	and    eax,0x7f
c0024919:	3c 70                	cmp    al,0x70
c002491b:	74 15                	je     c0024932 <ATAPI::detectMedia()+0x76>
c002491d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024924:	75 0c                	jne    c0024932 <ATAPI::detectMedia()+0x76>
c0024926:	83 ec 0c             	sub    esp,0xc
c0024929:	53                   	push   ebx
c002492a:	e8 5f ff ff ff       	call   c002488e <ATAPI::diskInserted()>
c002492f:	83 c4 10             	add    esp,0x10
c0024932:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024936:	83 e0 0f             	and    eax,0xf
c0024939:	3c 02                	cmp    al,0x2
c002493b:	75 1b                	jne    c0024958 <ATAPI::detectMedia()+0x9c>
c002493d:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024942:	75 2d                	jne    c0024971 <ATAPI::detectMedia()+0xb5>
c0024944:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002494b:	74 24                	je     c0024971 <ATAPI::detectMedia()+0xb5>
c002494d:	83 ec 0c             	sub    esp,0xc
c0024950:	53                   	push   ebx
c0024951:	e8 d4 fe ff ff       	call   c002482a <ATAPI::diskRemoved()>
c0024956:	eb 16                	jmp    c002496e <ATAPI::detectMedia()+0xb2>
c0024958:	84 c0                	test   al,al
c002495a:	75 15                	jne    c0024971 <ATAPI::detectMedia()+0xb5>
c002495c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024963:	75 0c                	jne    c0024971 <ATAPI::detectMedia()+0xb5>
c0024965:	83 ec 0c             	sub    esp,0xc
c0024968:	53                   	push   ebx
c0024969:	e8 20 ff ff ff       	call   c002488e <ATAPI::diskInserted()>
c002496e:	83 c4 10             	add    esp,0x10
c0024971:	83 c4 24             	add    esp,0x24
c0024974:	5b                   	pop    ebx
c0024975:	5e                   	pop    esi
c0024976:	c3                   	ret    
c0024977:	90                   	nop

c0024978 <ATAPI::open(int, int, void*)>:
c0024978:	53                   	push   ebx
c0024979:	83 ec 08             	sub    esp,0x8
c002497c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024980:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024984:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024988:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002498e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024994:	c1 e0 06             	shl    eax,0x6
c0024997:	01 d0                	add    eax,edx
c0024999:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00249a0:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00249a6:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c00249ad:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00249b7:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00249bd:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00249c4:	6a 04                	push   0x4
c00249c6:	6a 0c                	push   0xc
c00249c8:	51                   	push   ecx
c00249c9:	52                   	push   edx
c00249ca:	e8 15 e5 ff ff       	call   c0022ee4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00249cf:	90                   	nop
c00249d0:	90                   	nop
c00249d1:	6a 00                	push   0x0
c00249d3:	6a 0c                	push   0xc
c00249d5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00249dc:	50                   	push   eax
c00249dd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00249e3:	e8 fc e4 ff ff       	call   c0022ee4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00249e8:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c00249ef:	83 c4 14             	add    esp,0x14
c00249f2:	53                   	push   ebx
c00249f3:	e8 c4 fe ff ff       	call   c00248bc <ATAPI::detectMedia()>
c00249f8:	31 c0                	xor    eax,eax
c00249fa:	83 c4 18             	add    esp,0x18
c00249fd:	5b                   	pop    ebx
c00249fe:	c3                   	ret    
c00249ff:	90                   	nop

c0024a00 <ATAPI::read(unsigned long long, int, void*)>:
c0024a00:	55                   	push   ebp
c0024a01:	57                   	push   edi
c0024a02:	56                   	push   esi
c0024a03:	53                   	push   ebx
c0024a04:	83 ec 1c             	sub    esp,0x1c
c0024a07:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024a0b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024a0f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024a13:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024a1a:	74 41                	je     c0024a5d <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024a1c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024a20:	b9 03 00 00 00       	mov    ecx,0x3
c0024a25:	fc                   	cld    
c0024a26:	31 c0                	xor    eax,eax
c0024a28:	86 fb                	xchg   bl,bh
c0024a2a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024a2c:	c1 c3 10             	rol    ebx,0x10
c0024a2f:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024a34:	89 e8                	mov    eax,ebp
c0024a36:	86 fb                	xchg   bl,bh
c0024a38:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024a3c:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024a40:	50                   	push   eax
c0024a41:	50                   	push   eax
c0024a42:	55                   	push   ebp
c0024a43:	c1 e5 0b             	shl    ebp,0xb
c0024a46:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024a4a:	6a 00                	push   0x0
c0024a4c:	55                   	push   ebp
c0024a4d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024a51:	50                   	push   eax
c0024a52:	56                   	push   esi
c0024a53:	e8 12 fb ff ff       	call   c002456a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024a58:	83 c4 20             	add    esp,0x20
c0024a5b:	eb 1a                	jmp    c0024a77 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024a5d:	83 ec 0c             	sub    esp,0xc
c0024a60:	56                   	push   esi
c0024a61:	e8 56 fe ff ff       	call   c00248bc <ATAPI::detectMedia()>
c0024a66:	83 c4 10             	add    esp,0x10
c0024a69:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024a70:	75 aa                	jne    c0024a1c <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024a72:	b8 02 00 00 00       	mov    eax,0x2
c0024a77:	83 c4 1c             	add    esp,0x1c
c0024a7a:	5b                   	pop    ebx
c0024a7b:	5e                   	pop    esi
c0024a7c:	5f                   	pop    edi
c0024a7d:	5d                   	pop    ebp
c0024a7e:	c3                   	ret    
c0024a7f:	90                   	nop

c0024a80 <SATA::close(int, int, void*)>:
c0024a80:	83 ec 0c             	sub    esp,0xc
c0024a83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a87:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024a8d:	85 c0                	test   eax,eax
c0024a8f:	74 0c                	je     c0024a9d <SATA::close(int, int, void*)+0x1d>
c0024a91:	83 ec 0c             	sub    esp,0xc
c0024a94:	8b 10                	mov    edx,DWORD PTR [eax]
c0024a96:	50                   	push   eax
c0024a97:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024a9a:	83 c4 10             	add    esp,0x10
c0024a9d:	31 c0                	xor    eax,eax
c0024a9f:	83 c4 0c             	add    esp,0xc
c0024aa2:	c3                   	ret    
c0024aa3:	90                   	nop

c0024aa4 <SATA::powerSaving(PowerSavingLevel)>:
c0024aa4:	c3                   	ret    
c0024aa5:	90                   	nop

c0024aa6 <SATA::open(int, int, void*)>:
c0024aa6:	56                   	push   esi
c0024aa7:	53                   	push   ebx
c0024aa8:	50                   	push   eax
c0024aa9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024aad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024ab1:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024abb:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024ac1:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024acb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024acf:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024ad9:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024adf:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024ae6:	e8 f2 b3 fe ff       	call   c000fedd <Phys::allocatePage()>
c0024aeb:	89 c6                	mov    esi,eax
c0024aed:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024af3:	81 c6 00 10 00 00    	add    esi,0x1000
c0024af9:	e8 df b3 fe ff       	call   c000fedd <Phys::allocatePage()>
c0024afe:	39 c6                	cmp    esi,eax
c0024b00:	74 10                	je     c0024b12 <SATA::open(int, int, void*)+0x6c>
c0024b02:	83 ec 0c             	sub    esp,0xc
c0024b05:	68 00 cd 02 c0       	push   0xc002cd00
c0024b0a:	e8 a0 59 ff ff       	call   c001a4af <Krnl::panic(char const*)>
c0024b0f:	83 c4 10             	add    esp,0x10
c0024b12:	83 ec 0c             	sub    esp,0xc
c0024b15:	6a 02                	push   0x2
c0024b17:	e8 5b d0 fe ff       	call   c0011b77 <Virt::allocateKernelVirtualPages(int)>
c0024b1c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024b22:	e8 f7 d2 fe ff       	call   c0011e1e <Virt::getAKernelVAS()>
c0024b27:	6a 03                	push   0x3
c0024b29:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024b2f:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024b35:	50                   	push   eax
c0024b36:	e8 05 d7 fe ff       	call   c0012240 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024b3b:	83 c4 14             	add    esp,0x14
c0024b3e:	53                   	push   ebx
c0024b3f:	e8 42 fb fe ff       	call   c0014686 <PhysicalDisk::startCache()>
c0024b44:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024b47:	e8 e6 1c ff ff       	call   c0016832 <createPartitionsForDisk(PhysicalDisk*)>
c0024b4c:	83 c4 14             	add    esp,0x14
c0024b4f:	31 c0                	xor    eax,eax
c0024b51:	5b                   	pop    ebx
c0024b52:	5e                   	pop    esi
c0024b53:	c3                   	ret    

c0024b54 <SATA::SATA()>:
c0024b54:	83 ec 0c             	sub    esp,0xc
c0024b57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b5b:	83 ec 04             	sub    esp,0x4
c0024b5e:	68 00 02 00 00       	push   0x200
c0024b63:	68 14 cd 02 c0       	push   0xc002cd14
c0024b68:	50                   	push   eax
c0024b69:	e8 b0 fa fe ff       	call   c001461e <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024b6e:	83 c4 10             	add    esp,0x10
c0024b71:	ba 84 cd 02 c0       	mov    edx,0xc002cd84
c0024b76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b7a:	89 10                	mov    DWORD PTR [eax],edx
c0024b7c:	90                   	nop
c0024b7d:	83 c4 0c             	add    esp,0xc
c0024b80:	c3                   	ret    
c0024b81:	90                   	nop

c0024b82 <SATA::access(unsigned long long, int, void*, bool)>:
c0024b82:	55                   	push   ebp
c0024b83:	57                   	push   edi
c0024b84:	56                   	push   esi
c0024b85:	53                   	push   ebx
c0024b86:	83 ec 2c             	sub    esp,0x2c
c0024b89:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024b8d:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024b91:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024b95:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024b99:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024b9d:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024ba2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024ba6:	7e 10                	jle    c0024bb8 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024ba8:	83 ec 0c             	sub    esp,0xc
c0024bab:	68 24 cd 02 c0       	push   0xc002cd24
c0024bb0:	e8 fa 58 ff ff       	call   c001a4af <Krnl::panic(char const*)>
c0024bb5:	83 c4 10             	add    esp,0x10
c0024bb8:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024bbe:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024bc4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024bca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024bce:	89 f0                	mov    eax,esi
c0024bd0:	c1 e0 07             	shl    eax,0x7
c0024bd3:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024bd7:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024be1:	53                   	push   ebx
c0024be2:	8d 46 02             	lea    eax,[esi+0x2]
c0024be5:	53                   	push   ebx
c0024be6:	c1 e0 07             	shl    eax,0x7
c0024be9:	bb 01 00 00 00       	mov    ebx,0x1
c0024bee:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0024bf2:	50                   	push   eax
c0024bf3:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024bf9:	e8 aa ef ff ff       	call   c0023ba8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024bfe:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024c02:	83 c4 10             	add    esp,0x10
c0024c05:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024c0a:	0f 84 ce 01 00 00    	je     c0024dde <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024c10:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024c14:	c1 e0 09             	shl    eax,0x9
c0024c17:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024c1c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024c20:	74 17                	je     c0024c39 <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0024c22:	51                   	push   ecx
c0024c23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024c27:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024c2b:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024c31:	e8 0e bb fd ff       	call   c0000744 <memcpy>
c0024c36:	83 c4 10             	add    esp,0x10
c0024c39:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024c3f:	8d 46 02             	lea    eax,[esi+0x2]
c0024c42:	c1 e0 07             	shl    eax,0x7
c0024c45:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024c49:	8b 00                	mov    eax,DWORD PTR [eax]
c0024c4b:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024c51:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024c57:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024c5b:	c1 e1 05             	shl    ecx,0x5
c0024c5e:	01 c8                	add    eax,ecx
c0024c60:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024c64:	8a 18                	mov    bl,BYTE PTR [eax]
c0024c66:	83 e1 01             	and    ecx,0x1
c0024c69:	83 e3 bf             	and    ebx,0xffffffbf
c0024c6c:	c1 e1 06             	shl    ecx,0x6
c0024c6f:	09 d9                	or     ecx,ebx
c0024c71:	88 08                	mov    BYTE PTR [eax],cl
c0024c73:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024c75:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024c7b:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024c81:	89 08                	mov    DWORD PTR [eax],ecx
c0024c83:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024c89:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024c8f:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024c95:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024c98:	52                   	push   edx
c0024c99:	68 90 00 00 00       	push   0x90
c0024c9e:	6a 00                	push   0x0
c0024ca0:	53                   	push   ebx
c0024ca1:	e8 d2 ba fd ff       	call   c0000778 <memset>
c0024ca6:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024cac:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024cb0:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024cb6:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024cba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024cbe:	83 c4 10             	add    esp,0x10
c0024cc1:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024cc4:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024cca:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024cd0:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024cd5:	09 c8                	or     eax,ecx
c0024cd7:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024cdd:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024ce0:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024ce7:	66 25 00 7f          	and    ax,0x7f00
c0024ceb:	66 0d 27 80          	or     ax,0x8027
c0024cef:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024cf4:	66 89 03             	mov    WORD PTR [ebx],ax
c0024cf7:	19 c0                	sbb    eax,eax
c0024cf9:	83 e0 f0             	and    eax,0xfffffff0
c0024cfc:	83 c0 35             	add    eax,0x35
c0024cff:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024d02:	89 f8                	mov    eax,edi
c0024d04:	c1 e8 10             	shr    eax,0x10
c0024d07:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024d0a:	89 f8                	mov    eax,edi
c0024d0c:	c1 e8 18             	shr    eax,0x18
c0024d0f:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024d12:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024d16:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024d19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024d1d:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024d20:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024d24:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024d28:	89 f3                	mov    ebx,esi
c0024d2a:	31 c0                	xor    eax,eax
c0024d2c:	c1 e3 07             	shl    ebx,0x7
c0024d2f:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024d33:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024d39:	80 e1 88             	and    cl,0x88
c0024d3c:	74 0a                	je     c0024d48 <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024d3e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024d43:	74 0a                	je     c0024d4f <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024d45:	40                   	inc    eax
c0024d46:	eb eb                	jmp    c0024d33 <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024d48:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024d4d:	75 0a                	jne    c0024d59 <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024d4f:	83 ec 0c             	sub    esp,0xc
c0024d52:	68 5d cd 02 c0       	push   0xc002cd5d
c0024d57:	eb 56                	jmp    c0024daf <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024d59:	b8 01 00 00 00       	mov    eax,0x1
c0024d5e:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024d62:	c1 e6 07             	shl    esi,0x7
c0024d65:	d3 e0                	shl    eax,cl
c0024d67:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024d6b:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024d71:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0024d77:	85 c8                	test   eax,ecx
c0024d79:	74 20                	je     c0024d9b <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024d7b:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024d81:	0f ba e1 1e          	bt     ecx,0x1e
c0024d85:	73 ea                	jae    c0024d71 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0024d87:	83 ec 0c             	sub    esp,0xc
c0024d8a:	31 db                	xor    ebx,ebx
c0024d8c:	68 6b cd 02 c0       	push   0xc002cd6b
c0024d91:	e8 19 57 ff ff       	call   c001a4af <Krnl::panic(char const*)>
c0024d96:	83 c4 10             	add    esp,0x10
c0024d99:	eb 43                	jmp    c0024dde <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024d9b:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024da1:	0f ba e0 1e          	bt     eax,0x1e
c0024da5:	73 17                	jae    c0024dbe <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0024da7:	83 ec 0c             	sub    esp,0xc
c0024daa:	68 6b cd 02 c0       	push   0xc002cd6b
c0024daf:	e8 fb 56 ff ff       	call   c001a4af <Krnl::panic(char const*)>
c0024db4:	bb 01 00 00 00       	mov    ebx,0x1
c0024db9:	83 c4 10             	add    esp,0x10
c0024dbc:	eb 20                	jmp    c0024dde <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024dbe:	31 db                	xor    ebx,ebx
c0024dc0:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024dc5:	75 17                	jne    c0024dde <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024dc7:	50                   	push   eax
c0024dc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024dcc:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024dd2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024dd6:	e8 69 b9 fd ff       	call   c0000744 <memcpy>
c0024ddb:	83 c4 10             	add    esp,0x10
c0024dde:	83 c4 2c             	add    esp,0x2c
c0024de1:	89 d8                	mov    eax,ebx
c0024de3:	5b                   	pop    ebx
c0024de4:	5e                   	pop    esi
c0024de5:	5f                   	pop    edi
c0024de6:	5d                   	pop    ebp
c0024de7:	c3                   	ret    

c0024de8 <SATA::read(unsigned long long, int, void*)>:
c0024de8:	57                   	push   edi
c0024de9:	b8 04 00 00 00       	mov    eax,0x4
c0024dee:	56                   	push   esi
c0024def:	53                   	push   ebx
c0024df0:	83 ec 10             	sub    esp,0x10
c0024df3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024df7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024dfb:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024dfe:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024e02:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024e06:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024e0c:	77 3b                	ja     c0024e49 <SATA::read(unsigned long long, int, void*)+0x61>
c0024e0e:	b8 06 00 00 00       	mov    eax,0x6
c0024e13:	85 d2                	test   edx,edx
c0024e15:	74 32                	je     c0024e49 <SATA::read(unsigned long long, int, void*)+0x61>
c0024e17:	50                   	push   eax
c0024e18:	50                   	push   eax
c0024e19:	6a 00                	push   0x0
c0024e1b:	52                   	push   edx
c0024e1c:	53                   	push   ebx
c0024e1d:	57                   	push   edi
c0024e1e:	56                   	push   esi
c0024e1f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024e23:	e8 5a fd ff ff       	call   c0024b82 <SATA::access(unsigned long long, int, void*, bool)>
c0024e28:	83 c4 20             	add    esp,0x20
c0024e2b:	85 c0                	test   eax,eax
c0024e2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024e31:	75 11                	jne    c0024e44 <SATA::read(unsigned long long, int, void*)+0x5c>
c0024e33:	01 1d 08 26 03 c0    	add    DWORD PTR ds:0xc0032608,ebx
c0024e39:	e8 8e bb fe ff       	call   c00109cc <VgaText::updateDiskUsage()>
c0024e3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024e42:	eb 05                	jmp    c0024e49 <SATA::read(unsigned long long, int, void*)+0x61>
c0024e44:	b8 01 00 00 00       	mov    eax,0x1
c0024e49:	83 c4 10             	add    esp,0x10
c0024e4c:	5b                   	pop    ebx
c0024e4d:	5e                   	pop    esi
c0024e4e:	5f                   	pop    edi
c0024e4f:	c3                   	ret    

c0024e50 <SATA::write(unsigned long long, int, void*)>:
c0024e50:	55                   	push   ebp
c0024e51:	b8 04 00 00 00       	mov    eax,0x4
c0024e56:	57                   	push   edi
c0024e57:	56                   	push   esi
c0024e58:	53                   	push   ebx
c0024e59:	83 ec 1c             	sub    esp,0x1c
c0024e5c:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024e60:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0024e64:	8d 75 ff             	lea    esi,[ebp-0x1]
c0024e67:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0024e6b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0024e6f:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024e75:	77 56                	ja     c0024ecd <SATA::write(unsigned long long, int, void*)+0x7d>
c0024e77:	b8 06 00 00 00       	mov    eax,0x6
c0024e7c:	85 ff                	test   edi,edi
c0024e7e:	74 4d                	je     c0024ecd <SATA::write(unsigned long long, int, void*)+0x7d>
c0024e80:	89 ee                	mov    esi,ebp
c0024e82:	c1 e6 09             	shl    esi,0x9
c0024e85:	01 fe                	add    esi,edi
c0024e87:	89 c8                	mov    eax,ecx
c0024e89:	89 da                	mov    edx,ebx
c0024e8b:	83 c0 01             	add    eax,0x1
c0024e8e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024e92:	83 d2 00             	adc    edx,0x0
c0024e95:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024e99:	50                   	push   eax
c0024e9a:	50                   	push   eax
c0024e9b:	6a 01                	push   0x1
c0024e9d:	57                   	push   edi
c0024e9e:	81 c7 00 02 00 00    	add    edi,0x200
c0024ea4:	6a 01                	push   0x1
c0024ea6:	53                   	push   ebx
c0024ea7:	51                   	push   ecx
c0024ea8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024eac:	e8 d1 fc ff ff       	call   c0024b82 <SATA::access(unsigned long long, int, void*, bool)>
c0024eb1:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024eb5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024eb9:	83 c4 20             	add    esp,0x20
c0024ebc:	39 f7                	cmp    edi,esi
c0024ebe:	75 c7                	jne    c0024e87 <SATA::write(unsigned long long, int, void*)+0x37>
c0024ec0:	01 2d 04 26 03 c0    	add    DWORD PTR ds:0xc0032604,ebp
c0024ec6:	e8 01 bb fe ff       	call   c00109cc <VgaText::updateDiskUsage()>
c0024ecb:	31 c0                	xor    eax,eax
c0024ecd:	83 c4 1c             	add    esp,0x1c
c0024ed0:	5b                   	pop    ebx
c0024ed1:	5e                   	pop    esi
c0024ed2:	5f                   	pop    edi
c0024ed3:	5d                   	pop    ebp
c0024ed4:	c3                   	ret    
c0024ed5:	90                   	nop

c0024ed6 <SATAPI::write(unsigned long long, int, void*)>:
c0024ed6:	b8 03 00 00 00       	mov    eax,0x3
c0024edb:	c3                   	ret    

c0024edc <SATAPI::close(int, int, void*)>:
c0024edc:	83 ec 0c             	sub    esp,0xc
c0024edf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ee3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024ee9:	85 c0                	test   eax,eax
c0024eeb:	74 0c                	je     c0024ef9 <SATAPI::close(int, int, void*)+0x1d>
c0024eed:	83 ec 0c             	sub    esp,0xc
c0024ef0:	8b 10                	mov    edx,DWORD PTR [eax]
c0024ef2:	50                   	push   eax
c0024ef3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024ef6:	83 c4 10             	add    esp,0x10
c0024ef9:	31 c0                	xor    eax,eax
c0024efb:	83 c4 0c             	add    esp,0xc
c0024efe:	c3                   	ret    
c0024eff:	90                   	nop

c0024f00 <SATAPI::SATAPI()>:
c0024f00:	83 ec 0c             	sub    esp,0xc
c0024f03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f07:	83 ec 04             	sub    esp,0x4
c0024f0a:	68 00 08 00 00       	push   0x800
c0024f0f:	68 b4 cd 02 c0       	push   0xc002cdb4
c0024f14:	50                   	push   eax
c0024f15:	e8 04 f7 fe ff       	call   c001461e <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024f1a:	83 c4 10             	add    esp,0x10
c0024f1d:	ba 60 ce 02 c0       	mov    edx,0xc002ce60
c0024f22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f26:	89 10                	mov    DWORD PTR [eax],edx
c0024f28:	90                   	nop
c0024f29:	83 c4 0c             	add    esp,0xc
c0024f2c:	c3                   	ret    
c0024f2d:	90                   	nop

c0024f2e <SATAPI::diskRemoved()>:
c0024f2e:	83 ec 18             	sub    esp,0x18
c0024f31:	68 c0 cd 02 c0       	push   0xc002cdc0
c0024f36:	e8 99 de fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0024f3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024f3f:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0024f46:	83 c4 1c             	add    esp,0x1c
c0024f49:	c3                   	ret    

c0024f4a <SATAPI::diskInserted()>:
c0024f4a:	53                   	push   ebx
c0024f4b:	83 ec 14             	sub    esp,0x14
c0024f4e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024f52:	68 d7 cd 02 c0       	push   0xc002cdd7
c0024f57:	e8 78 de fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0024f5c:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0024f63:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024f66:	e8 1b f7 fe ff       	call   c0014686 <PhysicalDisk::startCache()>
c0024f6b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024f6f:	83 c4 18             	add    esp,0x18
c0024f72:	5b                   	pop    ebx
c0024f73:	e9 ba 18 ff ff       	jmp    c0016832 <createPartitionsForDisk(PhysicalDisk*)>

c0024f78 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0024f78:	55                   	push   ebp
c0024f79:	57                   	push   edi
c0024f7a:	56                   	push   esi
c0024f7b:	53                   	push   ebx
c0024f7c:	83 ec 24             	sub    esp,0x24
c0024f7f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0024f83:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024f87:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c0024f8d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024f91:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024f95:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c0024f9b:	8d 5f 02             	lea    ebx,[edi+0x2]
c0024f9e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024fa4:	c1 e3 07             	shl    ebx,0x7
c0024fa7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024fab:	89 f8                	mov    eax,edi
c0024fad:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0024fb1:	c1 e0 07             	shl    eax,0x7
c0024fb4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024fb8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024fbc:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024fc6:	53                   	push   ebx
c0024fc7:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c0024fcd:	e8 d6 eb ff ff       	call   c0023ba8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024fd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024fd6:	83 c4 10             	add    esp,0x10
c0024fd9:	b8 01 00 00 00       	mov    eax,0x1
c0024fde:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0024fe3:	0f 84 8a 01 00 00    	je     c0025173 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0024fe9:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0024fef:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024ff1:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024ff7:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024ffd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0025001:	c1 e1 05             	shl    ecx,0x5
c0025004:	01 c8                	add    eax,ecx
c0025006:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025008:	81 e1 80 ff 00 00    	and    ecx,0xff80
c002500e:	81 c9 25 00 01 00    	or     ecx,0x10025
c0025014:	89 08                	mov    DWORD PTR [eax],ecx
c0025016:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c002501c:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025022:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025028:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002502b:	52                   	push   edx
c002502c:	68 90 00 00 00       	push   0x90
c0025031:	6a 00                	push   0x0
c0025033:	53                   	push   ebx
c0025034:	e8 3f b7 fd ff       	call   c0000778 <memset>
c0025039:	83 c4 0c             	add    esp,0xc
c002503c:	8d 43 40             	lea    eax,[ebx+0x40]
c002503f:	6a 0c                	push   0xc
c0025041:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025045:	50                   	push   eax
c0025046:	e8 f9 b6 fd ff       	call   c0000744 <memcpy>
c002504b:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c0025051:	89 ea                	mov    edx,ebp
c0025053:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025059:	c1 ea 18             	shr    edx,0x18
c002505c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025060:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025063:	8d 48 ff             	lea    ecx,[eax-0x1]
c0025066:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c002506a:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025070:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0025076:	25 00 00 c0 ff       	and    eax,0xffc00000
c002507b:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c002507f:	09 c8                	or     eax,ecx
c0025081:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025085:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002508b:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002508e:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025095:	66 25 00 7f          	and    ax,0x7f00
c0025099:	66 0d 27 80          	or     ax,0x8027
c002509d:	66 89 03             	mov    WORD PTR [ebx],ax
c00250a0:	89 e8                	mov    eax,ebp
c00250a2:	c1 e8 10             	shr    eax,0x10
c00250a5:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00250a8:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00250ac:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00250af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00250b3:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c00250b6:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00250ba:	83 c4 10             	add    esp,0x10
c00250bd:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c00250c1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00250c5:	31 c0                	xor    eax,eax
c00250c7:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c00250cd:	80 e1 88             	and    cl,0x88
c00250d0:	74 0a                	je     c00250dc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c00250d2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00250d7:	74 0a                	je     c00250e3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c00250d9:	40                   	inc    eax
c00250da:	eb eb                	jmp    c00250c7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c00250dc:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00250e1:	75 0f                	jne    c00250f2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c00250e3:	83 ec 0c             	sub    esp,0xc
c00250e6:	68 5d cd 02 c0       	push   0xc002cd5d
c00250eb:	e8 bf 53 ff ff       	call   c001a4af <Krnl::panic(char const*)>
c00250f0:	eb 3a                	jmp    c002512c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c00250f2:	b8 01 00 00 00       	mov    eax,0x1
c00250f7:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00250fb:	c1 e7 07             	shl    edi,0x7
c00250fe:	d3 e0                	shl    eax,cl
c0025100:	03 3c 24             	add    edi,DWORD PTR [esp]
c0025103:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c0025109:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c002510f:	85 d0                	test   eax,edx
c0025111:	74 23                	je     c0025136 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c0025113:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c0025119:	0f ba e2 1e          	bt     edx,0x1e
c002511d:	73 ea                	jae    c0025109 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c002511f:	83 ec 0c             	sub    esp,0xc
c0025122:	68 ef cd 02 c0       	push   0xc002cdef
c0025127:	e8 a8 dc fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c002512c:	83 c4 10             	add    esp,0x10
c002512f:	b8 01 00 00 00       	mov    eax,0x1
c0025134:	eb 3d                	jmp    c0025173 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0025136:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c002513c:	0f ba e0 1e          	bt     eax,0x1e
c0025140:	73 0a                	jae    c002514c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c0025142:	83 ec 0c             	sub    esp,0xc
c0025145:	68 02 ce 02 c0       	push   0xc002ce02
c002514a:	eb db                	jmp    c0025127 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c002514c:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0025151:	74 1e                	je     c0025171 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025153:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0025158:	74 17                	je     c0025171 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c002515a:	50                   	push   eax
c002515b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002515f:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c0025165:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0025169:	e8 d6 b5 fd ff       	call   c0000744 <memcpy>
c002516e:	83 c4 10             	add    esp,0x10
c0025171:	31 c0                	xor    eax,eax
c0025173:	83 c4 1c             	add    esp,0x1c
c0025176:	5b                   	pop    ebx
c0025177:	5e                   	pop    esi
c0025178:	5f                   	pop    edi
c0025179:	5d                   	pop    ebp
c002517a:	c3                   	ret    
c002517b:	90                   	nop

c002517c <SATAPI::eject()>:
c002517c:	57                   	push   edi
c002517d:	b9 03 00 00 00       	mov    ecx,0x3
c0025182:	53                   	push   ebx
c0025183:	83 ec 14             	sub    esp,0x14
c0025186:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002518a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002518e:	fc                   	cld    
c002518f:	31 c0                	xor    eax,eax
c0025191:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025193:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025198:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002519d:	50                   	push   eax
c002519e:	6a 00                	push   0x0
c00251a0:	6a 00                	push   0x0
c00251a2:	6a 00                	push   0x0
c00251a4:	6a 00                	push   0x0
c00251a6:	6a 02                	push   0x2
c00251a8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00251ac:	50                   	push   eax
c00251ad:	53                   	push   ebx
c00251ae:	e8 c5 fd ff ff       	call   c0024f78 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00251b3:	83 c4 14             	add    esp,0x14
c00251b6:	53                   	push   ebx
c00251b7:	e8 72 fd ff ff       	call   c0024f2e <SATAPI::diskRemoved()>
c00251bc:	83 c4 24             	add    esp,0x24
c00251bf:	31 c0                	xor    eax,eax
c00251c1:	5b                   	pop    ebx
c00251c2:	5f                   	pop    edi
c00251c3:	c3                   	ret    

c00251c4 <SATAPI::detectMedia()>:
c00251c4:	56                   	push   esi
c00251c5:	53                   	push   ebx
c00251c6:	83 ec 28             	sub    esp,0x28
c00251c9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00251cd:	6a 0c                	push   0xc
c00251cf:	6a 00                	push   0x0
c00251d1:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00251d5:	56                   	push   esi
c00251d6:	e8 9d b5 fd ff       	call   c0000778 <memset>
c00251db:	83 c4 0c             	add    esp,0xc
c00251de:	6a 00                	push   0x0
c00251e0:	6a 00                	push   0x0
c00251e2:	6a 00                	push   0x0
c00251e4:	6a 00                	push   0x0
c00251e6:	6a 00                	push   0x0
c00251e8:	56                   	push   esi
c00251e9:	53                   	push   ebx
c00251ea:	e8 89 fd ff ff       	call   c0024f78 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00251ef:	83 c4 1c             	add    esp,0x1c
c00251f2:	6a 0c                	push   0xc
c00251f4:	6a 00                	push   0x0
c00251f6:	56                   	push   esi
c00251f7:	e8 7c b5 fd ff       	call   c0000778 <memset>
c00251fc:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025201:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025206:	83 c4 0c             	add    esp,0xc
c0025209:	6a 01                	push   0x1
c002520b:	8d 44 24 16          	lea    eax,[esp+0x16]
c002520f:	50                   	push   eax
c0025210:	6a 00                	push   0x0
c0025212:	6a 00                	push   0x0
c0025214:	6a 12                	push   0x12
c0025216:	56                   	push   esi
c0025217:	53                   	push   ebx
c0025218:	e8 5b fd ff ff       	call   c0024f78 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002521d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025221:	83 c4 20             	add    esp,0x20
c0025224:	83 e0 7f             	and    eax,0x7f
c0025227:	3c 70                	cmp    al,0x70
c0025229:	74 15                	je     c0025240 <SATAPI::detectMedia()+0x7c>
c002522b:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025232:	75 0c                	jne    c0025240 <SATAPI::detectMedia()+0x7c>
c0025234:	83 ec 0c             	sub    esp,0xc
c0025237:	53                   	push   ebx
c0025238:	e8 0d fd ff ff       	call   c0024f4a <SATAPI::diskInserted()>
c002523d:	83 c4 10             	add    esp,0x10
c0025240:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025244:	83 e0 0f             	and    eax,0xf
c0025247:	3c 02                	cmp    al,0x2
c0025249:	75 1b                	jne    c0025266 <SATAPI::detectMedia()+0xa2>
c002524b:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025250:	75 2d                	jne    c002527f <SATAPI::detectMedia()+0xbb>
c0025252:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025259:	74 24                	je     c002527f <SATAPI::detectMedia()+0xbb>
c002525b:	83 ec 0c             	sub    esp,0xc
c002525e:	53                   	push   ebx
c002525f:	e8 ca fc ff ff       	call   c0024f2e <SATAPI::diskRemoved()>
c0025264:	eb 16                	jmp    c002527c <SATAPI::detectMedia()+0xb8>
c0025266:	84 c0                	test   al,al
c0025268:	75 15                	jne    c002527f <SATAPI::detectMedia()+0xbb>
c002526a:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025271:	75 0c                	jne    c002527f <SATAPI::detectMedia()+0xbb>
c0025273:	83 ec 0c             	sub    esp,0xc
c0025276:	53                   	push   ebx
c0025277:	e8 ce fc ff ff       	call   c0024f4a <SATAPI::diskInserted()>
c002527c:	83 c4 10             	add    esp,0x10
c002527f:	83 c4 24             	add    esp,0x24
c0025282:	5b                   	pop    ebx
c0025283:	5e                   	pop    esi
c0025284:	c3                   	ret    
c0025285:	90                   	nop

c0025286 <SATAPI::open(int, int, void*)>:
c0025286:	56                   	push   esi
c0025287:	53                   	push   ebx
c0025288:	50                   	push   eax
c0025289:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002528d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025291:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002529b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00252a1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00252ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00252af:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00252b9:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00252bf:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00252c6:	e8 12 ac fe ff       	call   c000fedd <Phys::allocatePage()>
c00252cb:	89 c6                	mov    esi,eax
c00252cd:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00252d3:	81 c6 00 10 00 00    	add    esi,0x1000
c00252d9:	e8 ff ab fe ff       	call   c000fedd <Phys::allocatePage()>
c00252de:	39 c6                	cmp    esi,eax
c00252e0:	74 10                	je     c00252f2 <SATAPI::open(int, int, void*)+0x6c>
c00252e2:	83 ec 0c             	sub    esp,0xc
c00252e5:	68 17 ce 02 c0       	push   0xc002ce17
c00252ea:	e8 c0 51 ff ff       	call   c001a4af <Krnl::panic(char const*)>
c00252ef:	83 c4 10             	add    esp,0x10
c00252f2:	83 ec 0c             	sub    esp,0xc
c00252f5:	6a 02                	push   0x2
c00252f7:	e8 7b c8 fe ff       	call   c0011b77 <Virt::allocateKernelVirtualPages(int)>
c00252fc:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025302:	e8 17 cb fe ff       	call   c0011e1e <Virt::getAKernelVAS()>
c0025307:	6a 03                	push   0x3
c0025309:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c002530f:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025315:	50                   	push   eax
c0025316:	e8 25 cf fe ff       	call   c0012240 <VAS::mapPage(unsigned long, unsigned long, int)>
c002531b:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025322:	83 c4 14             	add    esp,0x14
c0025325:	53                   	push   ebx
c0025326:	e8 99 fe ff ff       	call   c00251c4 <SATAPI::detectMedia()>
c002532b:	83 c4 14             	add    esp,0x14
c002532e:	31 c0                	xor    eax,eax
c0025330:	5b                   	pop    ebx
c0025331:	5e                   	pop    esi
c0025332:	c3                   	ret    
c0025333:	90                   	nop

c0025334 <SATAPI::read(unsigned long long, int, void*)>:
c0025334:	55                   	push   ebp
c0025335:	57                   	push   edi
c0025336:	56                   	push   esi
c0025337:	53                   	push   ebx
c0025338:	83 ec 1c             	sub    esp,0x1c
c002533b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002533f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025343:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025347:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002534e:	74 19                	je     c0025369 <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025350:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025355:	7e 2e                	jle    c0025385 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025357:	83 ec 0c             	sub    esp,0xc
c002535a:	68 2d ce 02 c0       	push   0xc002ce2d
c002535f:	e8 4b 51 ff ff       	call   c001a4af <Krnl::panic(char const*)>
c0025364:	83 c4 10             	add    esp,0x10
c0025367:	eb 1c                	jmp    c0025385 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025369:	83 ec 0c             	sub    esp,0xc
c002536c:	55                   	push   ebp
c002536d:	e8 52 fe ff ff       	call   c00251c4 <SATAPI::detectMedia()>
c0025372:	83 c4 10             	add    esp,0x10
c0025375:	b8 02 00 00 00       	mov    eax,0x2
c002537a:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025381:	75 cd                	jne    c0025350 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025383:	eb 49                	jmp    c00253ce <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025385:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025389:	b9 03 00 00 00       	mov    ecx,0x3
c002538e:	fc                   	cld    
c002538f:	31 c0                	xor    eax,eax
c0025391:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025393:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025398:	89 d8                	mov    eax,ebx
c002539a:	86 e0                	xchg   al,ah
c002539c:	c1 c0 10             	rol    eax,0x10
c002539f:	86 e0                	xchg   al,ah
c00253a1:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c00253a5:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c00253a9:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00253ad:	50                   	push   eax
c00253ae:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00253b2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00253b6:	56                   	push   esi
c00253b7:	53                   	push   ebx
c00253b8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00253bc:	c1 e0 0b             	shl    eax,0xb
c00253bf:	50                   	push   eax
c00253c0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00253c4:	50                   	push   eax
c00253c5:	55                   	push   ebp
c00253c6:	e8 ad fb ff ff       	call   c0024f78 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00253cb:	83 c4 20             	add    esp,0x20
c00253ce:	83 c4 1c             	add    esp,0x1c
c00253d1:	5b                   	pop    ebx
c00253d2:	5e                   	pop    esi
c00253d3:	5f                   	pop    edi
c00253d4:	5d                   	pop    ebp
c00253d5:	c3                   	ret    

c00253d6 <AVX::open(int, int, void*)>:
c00253d6:	83 ec 0c             	sub    esp,0xc
c00253d9:	e8 3a 11 00 00       	call   c0026518 <avxInit>
c00253de:	b8 00 00 00 00       	mov    eax,0x0
c00253e3:	83 c4 0c             	add    esp,0xc
c00253e6:	c3                   	ret    
c00253e7:	90                   	nop

c00253e8 <AVX::close(int, int, void*)>:
c00253e8:	83 ec 0c             	sub    esp,0xc
c00253eb:	e8 29 11 00 00       	call   c0026519 <avxClose>
c00253f0:	b8 00 00 00 00       	mov    eax,0x0
c00253f5:	83 c4 0c             	add    esp,0xc
c00253f8:	c3                   	ret    
c00253f9:	90                   	nop

c00253fa <AVX::available()>:
c00253fa:	83 ec 0c             	sub    esp,0xc
c00253fd:	e8 0e 11 00 00       	call   c0026510 <avxDetect>
c0025402:	85 c0                	test   eax,eax
c0025404:	0f 95 c0             	setne  al
c0025407:	83 c4 0c             	add    esp,0xc
c002540a:	c3                   	ret    
c002540b:	90                   	nop

c002540c <AVX::save(void*)>:
c002540c:	83 ec 0c             	sub    esp,0xc
c002540f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025413:	83 ec 0c             	sub    esp,0xc
c0025416:	50                   	push   eax
c0025417:	e8 fa 10 00 00       	call   c0026516 <avxSave>
c002541c:	83 c4 10             	add    esp,0x10
c002541f:	90                   	nop
c0025420:	83 c4 0c             	add    esp,0xc
c0025423:	c3                   	ret    

c0025424 <AVX::load(void*)>:
c0025424:	83 ec 0c             	sub    esp,0xc
c0025427:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002542b:	83 ec 0c             	sub    esp,0xc
c002542e:	50                   	push   eax
c002542f:	e8 e3 10 00 00       	call   c0026517 <avxLoad>
c0025434:	83 c4 10             	add    esp,0x10
c0025437:	90                   	nop
c0025438:	83 c4 0c             	add    esp,0xc
c002543b:	c3                   	ret    

c002543c <AVX::AVX()>:
c002543c:	83 ec 0c             	sub    esp,0xc
c002543f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025443:	83 ec 08             	sub    esp,0x8
c0025446:	68 90 ce 02 c0       	push   0xc002ce90
c002544b:	50                   	push   eax
c002544c:	e8 ab f2 fe ff       	call   c00146fc <FPU::FPU(char const*)>
c0025451:	83 c4 10             	add    esp,0x10
c0025454:	ba a0 ce 02 c0       	mov    edx,0xc002cea0
c0025459:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002545d:	89 10                	mov    DWORD PTR [eax],edx
c002545f:	90                   	nop
c0025460:	83 c4 0c             	add    esp,0xc
c0025463:	c3                   	ret    

c0025464 <MMX::available()>:
c0025464:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c0025469:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002546f:	83 e0 20             	and    eax,0x20
c0025472:	84 c0                	test   al,al
c0025474:	0f 95 c0             	setne  al
c0025477:	c3                   	ret    

c0025478 <MMX::open(int, int, void*)>:
c0025478:	83 ec 0c             	sub    esp,0xc
c002547b:	e8 1c 11 00 00       	call   c002659c <x87Init>
c0025480:	b8 00 00 00 00       	mov    eax,0x0
c0025485:	83 c4 0c             	add    esp,0xc
c0025488:	c3                   	ret    
c0025489:	90                   	nop

c002548a <MMX::close(int, int, void*)>:
c002548a:	83 ec 0c             	sub    esp,0xc
c002548d:	e8 24 11 00 00       	call   c00265b6 <x87Close>
c0025492:	b8 00 00 00 00       	mov    eax,0x0
c0025497:	83 c4 0c             	add    esp,0xc
c002549a:	c3                   	ret    
c002549b:	90                   	nop

c002549c <MMX::save(void*)>:
c002549c:	83 ec 0c             	sub    esp,0xc
c002549f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00254a3:	83 ec 0c             	sub    esp,0xc
c00254a6:	50                   	push   eax
c00254a7:	e8 e5 10 00 00       	call   c0026591 <x87Save>
c00254ac:	83 c4 10             	add    esp,0x10
c00254af:	90                   	nop
c00254b0:	83 c4 0c             	add    esp,0xc
c00254b3:	c3                   	ret    

c00254b4 <MMX::load(void*)>:
c00254b4:	83 ec 0c             	sub    esp,0xc
c00254b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00254bb:	83 ec 0c             	sub    esp,0xc
c00254be:	50                   	push   eax
c00254bf:	e8 d3 10 00 00       	call   c0026597 <x87Load>
c00254c4:	83 c4 10             	add    esp,0x10
c00254c7:	90                   	nop
c00254c8:	83 c4 0c             	add    esp,0xc
c00254cb:	c3                   	ret    

c00254cc <MMX::MMX()>:
c00254cc:	83 ec 0c             	sub    esp,0xc
c00254cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254d3:	83 ec 08             	sub    esp,0x8
c00254d6:	68 d0 ce 02 c0       	push   0xc002ced0
c00254db:	50                   	push   eax
c00254dc:	e8 1b f2 fe ff       	call   c00146fc <FPU::FPU(char const*)>
c00254e1:	83 c4 10             	add    esp,0x10
c00254e4:	ba e0 ce 02 c0       	mov    edx,0xc002cee0
c00254e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254ed:	89 10                	mov    DWORD PTR [eax],edx
c00254ef:	90                   	nop
c00254f0:	83 c4 0c             	add    esp,0xc
c00254f3:	c3                   	ret    

c00254f4 <SSE::open(int, int, void*)>:
c00254f4:	83 ec 0c             	sub    esp,0xc
c00254f7:	e8 58 10 00 00       	call   c0026554 <sseInit>
c00254fc:	b8 00 00 00 00       	mov    eax,0x0
c0025501:	83 c4 0c             	add    esp,0xc
c0025504:	c3                   	ret    
c0025505:	90                   	nop

c0025506 <SSE::close(int, int, void*)>:
c0025506:	83 ec 0c             	sub    esp,0xc
c0025509:	e8 56 10 00 00       	call   c0026564 <sseClose>
c002550e:	b8 00 00 00 00       	mov    eax,0x0
c0025513:	83 c4 0c             	add    esp,0xc
c0025516:	c3                   	ret    
c0025517:	90                   	nop

c0025518 <SSE::available()>:
c0025518:	83 ec 1c             	sub    esp,0x1c
c002551b:	e8 10 10 00 00       	call   c0026530 <absolutelyNoChanceInHell>
c0025520:	85 c0                	test   eax,eax
c0025522:	0f 95 c0             	setne  al
c0025525:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025529:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002552d:	83 c4 1c             	add    esp,0x1c
c0025530:	c3                   	ret    
c0025531:	90                   	nop

c0025532 <SSE::save(void*)>:
c0025532:	83 ec 0c             	sub    esp,0xc
c0025535:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025539:	83 ec 0c             	sub    esp,0xc
c002553c:	50                   	push   eax
c002553d:	e8 06 10 00 00       	call   c0026548 <sseSave>
c0025542:	83 c4 10             	add    esp,0x10
c0025545:	90                   	nop
c0025546:	83 c4 0c             	add    esp,0xc
c0025549:	c3                   	ret    

c002554a <SSE::load(void*)>:
c002554a:	83 ec 0c             	sub    esp,0xc
c002554d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025551:	83 ec 0c             	sub    esp,0xc
c0025554:	50                   	push   eax
c0025555:	e8 f4 0f 00 00       	call   c002654e <sseLoad>
c002555a:	83 c4 10             	add    esp,0x10
c002555d:	90                   	nop
c002555e:	83 c4 0c             	add    esp,0xc
c0025561:	c3                   	ret    

c0025562 <SSE::SSE()>:
c0025562:	83 ec 0c             	sub    esp,0xc
c0025565:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025569:	83 ec 08             	sub    esp,0x8
c002556c:	68 10 cf 02 c0       	push   0xc002cf10
c0025571:	50                   	push   eax
c0025572:	e8 85 f1 fe ff       	call   c00146fc <FPU::FPU(char const*)>
c0025577:	83 c4 10             	add    esp,0x10
c002557a:	ba 20 cf 02 c0       	mov    edx,0xc002cf20
c002557f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025583:	89 10                	mov    DWORD PTR [eax],edx
c0025585:	90                   	nop
c0025586:	83 c4 0c             	add    esp,0xc
c0025589:	c3                   	ret    

c002558a <x87::open(int, int, void*)>:
c002558a:	83 ec 0c             	sub    esp,0xc
c002558d:	e8 0a 10 00 00       	call   c002659c <x87Init>
c0025592:	b8 00 00 00 00       	mov    eax,0x0
c0025597:	83 c4 0c             	add    esp,0xc
c002559a:	c3                   	ret    
c002559b:	90                   	nop

c002559c <x87::close(int, int, void*)>:
c002559c:	83 ec 0c             	sub    esp,0xc
c002559f:	e8 12 10 00 00       	call   c00265b6 <x87Close>
c00255a4:	b8 00 00 00 00       	mov    eax,0x0
c00255a9:	83 c4 0c             	add    esp,0xc
c00255ac:	c3                   	ret    
c00255ad:	90                   	nop

c00255ae <x87::available()>:
c00255ae:	83 ec 0c             	sub    esp,0xc
c00255b1:	e8 c0 0f 00 00       	call   c0026576 <x87Detect>
c00255b6:	85 c0                	test   eax,eax
c00255b8:	0f 95 c0             	setne  al
c00255bb:	83 c4 0c             	add    esp,0xc
c00255be:	c3                   	ret    
c00255bf:	90                   	nop

c00255c0 <x87::save(void*)>:
c00255c0:	83 ec 0c             	sub    esp,0xc
c00255c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255c7:	83 ec 0c             	sub    esp,0xc
c00255ca:	50                   	push   eax
c00255cb:	e8 c1 0f 00 00       	call   c0026591 <x87Save>
c00255d0:	83 c4 10             	add    esp,0x10
c00255d3:	90                   	nop
c00255d4:	83 c4 0c             	add    esp,0xc
c00255d7:	c3                   	ret    

c00255d8 <x87::load(void*)>:
c00255d8:	83 ec 0c             	sub    esp,0xc
c00255db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255df:	83 ec 0c             	sub    esp,0xc
c00255e2:	50                   	push   eax
c00255e3:	e8 af 0f 00 00       	call   c0026597 <x87Load>
c00255e8:	83 c4 10             	add    esp,0x10
c00255eb:	90                   	nop
c00255ec:	83 c4 0c             	add    esp,0xc
c00255ef:	c3                   	ret    

c00255f0 <x87::x87()>:
c00255f0:	83 ec 0c             	sub    esp,0xc
c00255f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255f7:	83 ec 08             	sub    esp,0x8
c00255fa:	68 50 cf 02 c0       	push   0xc002cf50
c00255ff:	50                   	push   eax
c0025600:	e8 f7 f0 fe ff       	call   c00146fc <FPU::FPU(char const*)>
c0025605:	83 c4 10             	add    esp,0x10
c0025608:	ba 60 cf 02 c0       	mov    edx,0xc002cf60
c002560d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025611:	89 10                	mov    DWORD PTR [eax],edx
c0025613:	90                   	nop
c0025614:	83 c4 0c             	add    esp,0xc
c0025617:	c3                   	ret    

c0025618 <APIC::disable()>:
c0025618:	90                   	nop
c0025619:	c3                   	ret    

c002561a <APIC::close(int, int, void*)>:
c002561a:	55                   	push   ebp
c002561b:	89 e5                	mov    ebp,esp
c002561d:	83 ec 08             	sub    esp,0x8
c0025620:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025623:	8b 00                	mov    eax,DWORD PTR [eax]
c0025625:	83 c0 3c             	add    eax,0x3c
c0025628:	8b 00                	mov    eax,DWORD PTR [eax]
c002562a:	83 ec 0c             	sub    esp,0xc
c002562d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025630:	ff d0                	call   eax
c0025632:	83 c4 10             	add    esp,0x10
c0025635:	b8 00 00 00 00       	mov    eax,0x0
c002563a:	c9                   	leave  
c002563b:	c3                   	ret    

c002563c <IOAPIC::close(int, int, void*)>:
c002563c:	b8 00 00 00 00       	mov    eax,0x0
c0025641:	c3                   	ret    

c0025642 <APIC::io_wait()>:
c0025642:	eb 00                	jmp    c0025644 <APIC::io_wait()+0x2>
c0025644:	eb 00                	jmp    c0025646 <APIC::io_wait()+0x4>
c0025646:	90                   	nop
c0025647:	c3                   	ret    

c0025648 <APIC::getBase()>:
c0025648:	55                   	push   ebp
c0025649:	89 e5                	mov    ebp,esp
c002564b:	83 ec 18             	sub    esp,0x18
c002564e:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c0025653:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025659:	83 e0 08             	and    eax,0x8
c002565c:	84 c0                	test   al,al
c002565e:	75 07                	jne    c0025667 <APIC::getBase()+0x1f>
c0025660:	b8 00 00 00 00       	mov    eax,0x0
c0025665:	eb 21                	jmp    c0025688 <APIC::getBase()+0x40>
c0025667:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c002566c:	83 ec 08             	sub    esp,0x8
c002566f:	6a 1b                	push   0x1b
c0025671:	50                   	push   eax
c0025672:	e8 71 97 fe ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0025677:	83 c4 10             	add    esp,0x10
c002567a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002567d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025680:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025683:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025688:	c9                   	leave  
c0025689:	c3                   	ret    

c002568a <APIC::eoi(unsigned char)>:
c002568a:	55                   	push   ebp
c002568b:	89 e5                	mov    ebp,esp
c002568d:	83 ec 28             	sub    esp,0x28
c0025690:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025693:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025696:	83 ec 0c             	sub    esp,0xc
c0025699:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002569c:	e8 a7 ff ff ff       	call   c0025648 <APIC::getBase()>
c00256a1:	83 c4 10             	add    esp,0x10
c00256a4:	05 b0 00 00 00       	add    eax,0xb0
c00256a9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00256ac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00256af:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00256b5:	90                   	nop
c00256b6:	c9                   	leave  
c00256b7:	c3                   	ret    

c00256b8 <APIC::open(int, int, void*)>:
c00256b8:	55                   	push   ebp
c00256b9:	89 e5                	mov    ebp,esp
c00256bb:	57                   	push   edi
c00256bc:	56                   	push   esi
c00256bd:	53                   	push   ebx
c00256be:	83 ec 2c             	sub    esp,0x2c
c00256c1:	83 ec 0c             	sub    esp,0xc
c00256c4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00256c7:	e8 7c ff ff ff       	call   c0025648 <APIC::getBase()>
c00256cc:	83 c4 10             	add    esp,0x10
c00256cf:	89 c2                	mov    edx,eax
c00256d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256d4:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00256da:	0f b6 f8             	movzx  edi,al
c00256dd:	89 d0                	mov    eax,edx
c00256df:	ba 00 00 00 00       	mov    edx,0x0
c00256e4:	89 c1                	mov    ecx,eax
c00256e6:	80 e5 ff             	and    ch,0xff
c00256e9:	89 cb                	mov    ebx,ecx
c00256eb:	0f b6 f2             	movzx  esi,dl
c00256ee:	89 d8                	mov    eax,ebx
c00256f0:	89 f2                	mov    edx,esi
c00256f2:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00256f5:	8d 5f 08             	lea    ebx,[edi+0x8]
c00256f8:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00256fc:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025700:	83 e0 00             	and    eax,0x0
c0025703:	09 d0                	or     eax,edx
c0025705:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025709:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002570c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025712:	8d 50 01             	lea    edx,[eax+0x1]
c0025715:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025718:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002571e:	0f b6 d0             	movzx  edx,al
c0025721:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025724:	83 c2 08             	add    edx,0x8
c0025727:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002572b:	0f b6 c9             	movzx  ecx,cl
c002572e:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025734:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025738:	83 ec 0c             	sub    esp,0xc
c002573b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002573e:	e8 05 ff ff ff       	call   c0025648 <APIC::getBase()>
c0025743:	83 c4 10             	add    esp,0x10
c0025746:	05 f0 00 00 00       	add    eax,0xf0
c002574b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002574e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025751:	8b 00                	mov    eax,DWORD PTR [eax]
c0025753:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025756:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c002575d:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025764:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025767:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002576a:	89 10                	mov    DWORD PTR [eax],edx
c002576c:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0025773:	a1 90 0b 03 c0       	mov    eax,ds:0xc0030b90
c0025778:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c002577b:	7d 7c                	jge    c00257f9 <APIC::open(int, int, void*)+0x141>
c002577d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025780:	8b 04 85 a0 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf460]
c0025787:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c002578a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002578d:	8b 04 85 a0 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf460]
c0025794:	c1 e8 08             	shr    eax,0x8
c0025797:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c002579b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002579e:	8b 04 85 a0 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf460]
c00257a5:	c1 e8 18             	shr    eax,0x18
c00257a8:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00257ab:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00257af:	75 40                	jne    c00257f1 <APIC::open(int, int, void*)+0x139>
c00257b1:	83 ec 0c             	sub    esp,0xc
c00257b4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257b7:	e8 8c fe ff ff       	call   c0025648 <APIC::getBase()>
c00257bc:	83 c4 10             	add    esp,0x10
c00257bf:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00257c3:	75 07                	jne    c00257cc <APIC::open(int, int, void*)+0x114>
c00257c5:	ba 60 03 00 00       	mov    edx,0x360
c00257ca:	eb 05                	jmp    c00257d1 <APIC::open(int, int, void*)+0x119>
c00257cc:	ba 50 03 00 00       	mov    edx,0x350
c00257d1:	01 d0                	add    eax,edx
c00257d3:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00257d6:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00257d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00257db:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00257de:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00257e5:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00257e9:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00257ec:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00257ef:	89 10                	mov    DWORD PTR [eax],edx
c00257f1:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00257f4:	e9 7a ff ff ff       	jmp    c0025773 <APIC::open(int, int, void*)+0xbb>
c00257f9:	b8 00 00 00 00       	mov    eax,0x0
c00257fe:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025801:	5b                   	pop    ebx
c0025802:	5e                   	pop    esi
c0025803:	5f                   	pop    edi
c0025804:	5d                   	pop    ebp
c0025805:	c3                   	ret    

c0025806 <IOAPIC::IOAPIC()>:
c0025806:	83 ec 0c             	sub    esp,0xc
c0025809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002580d:	83 ec 08             	sub    esp,0x8
c0025810:	68 90 cf 02 c0       	push   0xc002cf90
c0025815:	50                   	push   eax
c0025816:	e8 cf eb fe ff       	call   c00143ea <Device::Device(char const*)>
c002581b:	83 c4 10             	add    esp,0x10
c002581e:	ba b8 d0 02 c0       	mov    edx,0xc002d0b8
c0025823:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025827:	89 10                	mov    DWORD PTR [eax],edx
c0025829:	90                   	nop
c002582a:	83 c4 0c             	add    esp,0xc
c002582d:	c3                   	ret    

c002582e <APIC::APIC()>:
c002582e:	53                   	push   ebx
c002582f:	83 ec 18             	sub    esp,0x18
c0025832:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025836:	83 ec 08             	sub    esp,0x8
c0025839:	68 98 cf 02 c0       	push   0xc002cf98
c002583e:	50                   	push   eax
c002583f:	e8 12 f3 fe ff       	call   c0014b56 <InterruptController::InterruptController(char const*)>
c0025844:	83 c4 10             	add    esp,0x10
c0025847:	ba 70 d0 02 c0       	mov    edx,0xc002d070
c002584c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025850:	89 10                	mov    DWORD PTR [eax],edx
c0025852:	a0 60 26 03 c0       	mov    al,ds:0xc0032660
c0025857:	83 f0 01             	xor    eax,0x1
c002585a:	84 c0                	test   al,al
c002585c:	0f 84 a1 00 00 00    	je     c0025903 <APIC::APIC()+0xd5>
c0025862:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025867:	a0 40 0c 03 c0       	mov    al,ds:0xc0030c40
c002586c:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0025870:	0f 83 86 00 00 00    	jae    c00258fc <APIC::APIC()+0xce>
c0025876:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c002587e:	83 ec 0c             	sub    esp,0xc
c0025881:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025885:	e8 b6 9f fe ff       	call   c000f840 <malloc>
c002588a:	83 c4 10             	add    esp,0x10
c002588d:	89 c3                	mov    ebx,eax
c002588f:	83 ec 0c             	sub    esp,0xc
c0025892:	53                   	push   ebx
c0025893:	e8 6e ff ff ff       	call   c0025806 <IOAPIC::IOAPIC()>
c0025898:	83 c4 10             	add    esp,0x10
c002589b:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c002589f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00258a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00258a8:	89 14 85 40 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd9c0],edx
c00258af:	a1 20 26 03 c0       	mov    eax,ds:0xc0032620
c00258b4:	40                   	inc    eax
c00258b5:	a3 20 26 03 c0       	mov    ds:0xc0032620,eax
c00258ba:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c00258bf:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00258c5:	83 ec 08             	sub    esp,0x8
c00258c8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00258cc:	50                   	push   eax
c00258cd:	e8 28 e9 fe ff       	call   c00141fa <Device::addChild(Device*)>
c00258d2:	83 c4 10             	add    esp,0x10
c00258d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00258d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00258db:	83 c0 08             	add    eax,0x8
c00258de:	8b 00                	mov    eax,DWORD PTR [eax]
c00258e0:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00258e5:	6a 00                	push   0x0
c00258e7:	6a 00                	push   0x0
c00258e9:	52                   	push   edx
c00258ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00258ee:	ff d0                	call   eax
c00258f0:	83 c4 10             	add    esp,0x10
c00258f3:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00258f7:	e9 6b ff ff ff       	jmp    c0025867 <APIC::APIC()+0x39>
c00258fc:	c6 05 60 26 03 c0 01 	mov    BYTE PTR ds:0xc0032660,0x1
c0025903:	90                   	nop
c0025904:	83 c4 18             	add    esp,0x18
c0025907:	5b                   	pop    ebx
c0025908:	c3                   	ret    
c0025909:	90                   	nop

c002590a <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002590a:	55                   	push   ebp
c002590b:	89 e5                	mov    ebp,esp
c002590d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025910:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025916:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025919:	72 1d                	jb     c0025938 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002591b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002591e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025924:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025927:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002592d:	01 d0                	add    eax,edx
c002592f:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025932:	73 04                	jae    c0025938 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025934:	b0 01                	mov    al,0x1
c0025936:	eb 02                	jmp    c002593a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025938:	b0 00                	mov    al,0x0
c002593a:	5d                   	pop    ebp
c002593b:	c3                   	ret    

c002593c <IOAPIC::read(int)>:
c002593c:	55                   	push   ebp
c002593d:	89 e5                	mov    ebp,esp
c002593f:	83 ec 10             	sub    esp,0x10
c0025942:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025945:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002594b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002594e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025951:	0f b6 d0             	movzx  edx,al
c0025954:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025957:	89 10                	mov    DWORD PTR [eax],edx
c0025959:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002595c:	83 c0 10             	add    eax,0x10
c002595f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025961:	c9                   	leave  
c0025962:	c3                   	ret    
c0025963:	90                   	nop

c0025964 <IOAPIC::open(int, int, void*)>:
c0025964:	55                   	push   ebp
c0025965:	89 e5                	mov    ebp,esp
c0025967:	57                   	push   edi
c0025968:	56                   	push   esi
c0025969:	53                   	push   ebx
c002596a:	83 ec 0c             	sub    esp,0xc
c002596d:	83 ec 0c             	sub    esp,0xc
c0025970:	68 c3 cf 02 c0       	push   0xc002cfc3
c0025975:	e8 5a d4 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c002597a:	83 c4 10             	add    esp,0x10
c002597d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025980:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025983:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025989:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002598c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025992:	8b 14 85 80 0c 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf380]
c0025999:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002599c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00259a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259a5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00259ab:	8b 14 85 00 0d 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf300]
c00259b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259b5:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00259bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259be:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00259c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259c7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00259cd:	0f b6 f8             	movzx  edi,al
c00259d0:	89 d0                	mov    eax,edx
c00259d2:	ba 00 00 00 00       	mov    edx,0x0
c00259d7:	89 c1                	mov    ecx,eax
c00259d9:	80 e5 ff             	and    ch,0xff
c00259dc:	89 cb                	mov    ebx,ecx
c00259de:	0f b6 f2             	movzx  esi,dl
c00259e1:	89 d8                	mov    eax,ebx
c00259e3:	89 f2                	mov    edx,esi
c00259e5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00259e8:	8d 5f 08             	lea    ebx,[edi+0x8]
c00259eb:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00259ef:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00259f3:	83 e0 00             	and    eax,0x0
c00259f6:	09 d0                	or     eax,edx
c00259f8:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00259fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259ff:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025a05:	8d 50 01             	lea    edx,[eax+0x1]
c0025a08:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025a0b:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025a11:	0f b6 d0             	movzx  edx,al
c0025a14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a17:	83 c2 08             	add    edx,0x8
c0025a1a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025a1e:	0f b6 c9             	movzx  ecx,cl
c0025a21:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025a27:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025a2b:	83 ec 08             	sub    esp,0x8
c0025a2e:	6a 01                	push   0x1
c0025a30:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025a33:	e8 04 ff ff ff       	call   c002593c <IOAPIC::read(int)>
c0025a38:	83 c4 10             	add    esp,0x10
c0025a3b:	c1 f8 10             	sar    eax,0x10
c0025a3e:	0f b6 c0             	movzx  eax,al
c0025a41:	8d 50 01             	lea    edx,[eax+0x1]
c0025a44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a47:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025a4d:	b8 00 00 00 00       	mov    eax,0x0
c0025a52:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025a55:	5b                   	pop    ebx
c0025a56:	5e                   	pop    esi
c0025a57:	5f                   	pop    edi
c0025a58:	5d                   	pop    ebp
c0025a59:	c3                   	ret    

c0025a5a <IOAPIC::write(int, int)>:
c0025a5a:	55                   	push   ebp
c0025a5b:	89 e5                	mov    ebp,esp
c0025a5d:	83 ec 10             	sub    esp,0x10
c0025a60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a63:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025a69:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025a6c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a6f:	0f b6 d0             	movzx  edx,al
c0025a72:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a75:	89 10                	mov    DWORD PTR [eax],edx
c0025a77:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a7a:	8d 50 10             	lea    edx,[eax+0x10]
c0025a7d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025a80:	89 02                	mov    DWORD PTR [edx],eax
c0025a82:	90                   	nop
c0025a83:	c9                   	leave  
c0025a84:	c3                   	ret    
c0025a85:	90                   	nop

c0025a86 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025a86:	55                   	push   ebp
c0025a87:	89 e5                	mov    ebp,esp
c0025a89:	53                   	push   ebx
c0025a8a:	83 ec 2c             	sub    esp,0x2c
c0025a8d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a90:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025a93:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025a96:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025a99:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025a9c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025a9f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025aa2:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025aa5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025aa8:	88 d8                	mov    al,bl
c0025aaa:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025aad:	88 c8                	mov    al,cl
c0025aaf:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025ab2:	88 d0                	mov    al,dl
c0025ab4:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025ab7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025abb:	83 c0 08             	add    eax,0x8
c0025abe:	01 c0                	add    eax,eax
c0025ac0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025ac3:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025ac7:	83 c0 08             	add    eax,0x8
c0025aca:	01 c0                	add    eax,eax
c0025acc:	40                   	inc    eax
c0025acd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025ad0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025ad3:	50                   	push   eax
c0025ad4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ad7:	e8 60 fe ff ff       	call   c002593c <IOAPIC::read(int)>
c0025adc:	83 c4 08             	add    esp,0x8
c0025adf:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025ae2:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025ae9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025aec:	c1 e0 18             	shl    eax,0x18
c0025aef:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025af2:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025af5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025af8:	52                   	push   edx
c0025af9:	50                   	push   eax
c0025afa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025afd:	e8 58 ff ff ff       	call   c0025a5a <IOAPIC::write(int, int)>
c0025b02:	83 c4 0c             	add    esp,0xc
c0025b05:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025b08:	50                   	push   eax
c0025b09:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b0c:	e8 2b fe ff ff       	call   c002593c <IOAPIC::read(int)>
c0025b11:	83 c4 08             	add    esp,0x8
c0025b14:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025b17:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025b1e:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025b25:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025b2c:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025b30:	74 09                	je     c0025b3b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025b32:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025b39:	eb 07                	jmp    c0025b42 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025b3b:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025b42:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025b46:	74 09                	je     c0025b51 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025b48:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025b4f:	eb 07                	jmp    c0025b58 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025b51:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025b58:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025b5f:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025b63:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025b66:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025b69:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025b6c:	52                   	push   edx
c0025b6d:	50                   	push   eax
c0025b6e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b71:	e8 e4 fe ff ff       	call   c0025a5a <IOAPIC::write(int, int)>
c0025b76:	83 c4 0c             	add    esp,0xc
c0025b79:	90                   	nop
c0025b7a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025b7d:	c9                   	leave  
c0025b7e:	c3                   	ret    
c0025b7f:	90                   	nop

c0025b80 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025b80:	55                   	push   ebp
c0025b81:	89 e5                	mov    ebp,esp
c0025b83:	57                   	push   edi
c0025b84:	56                   	push   esi
c0025b85:	53                   	push   ebx
c0025b86:	83 ec 2c             	sub    esp,0x2c
c0025b89:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025b8c:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025b8f:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025b93:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025b97:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025b9b:	74 5a                	je     c0025bf7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025b9d:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025ba1:	7f 44                	jg     c0025be7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025ba3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ba6:	05 00 d5 02 c0       	add    eax,0xc002d500
c0025bab:	8a 00                	mov    al,BYTE PTR [eax]
c0025bad:	0f b6 c0             	movzx  eax,al
c0025bb0:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025bb3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025bb6:	66 8b 84 00 20 0c 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf3e0]
c0025bbe:	0f b7 c0             	movzx  eax,ax
c0025bc1:	83 e0 02             	and    eax,0x2
c0025bc4:	85 c0                	test   eax,eax
c0025bc6:	74 04                	je     c0025bcc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025bc8:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025bcc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025bcf:	66 8b 84 00 20 0c 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf3e0]
c0025bd7:	0f b7 c0             	movzx  eax,ax
c0025bda:	83 e0 08             	and    eax,0x8
c0025bdd:	85 c0                	test   eax,eax
c0025bdf:	74 16                	je     c0025bf7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025be1:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025be5:	eb 10                	jmp    c0025bf7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025be7:	83 ec 0c             	sub    esp,0xc
c0025bea:	68 d4 cf 02 c0       	push   0xc002cfd4
c0025bef:	e8 bb 48 ff ff       	call   c001a4af <Krnl::panic(char const*)>
c0025bf4:	83 c4 10             	add    esp,0x10
c0025bf7:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025bfb:	a1 20 26 03 c0       	mov    eax,ds:0xc0032620
c0025c00:	83 ec 08             	sub    esp,0x8
c0025c03:	50                   	push   eax
c0025c04:	68 0c d0 02 c0       	push   0xc002d00c
c0025c09:	e8 c6 d1 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0025c0e:	83 c4 10             	add    esp,0x10
c0025c11:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025c18:	a1 20 26 03 c0       	mov    eax,ds:0xc0032620
c0025c1d:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025c20:	7d 67                	jge    c0025c89 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025c22:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025c25:	8b 04 85 40 26 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd9c0]
c0025c2c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025c2f:	83 ec 08             	sub    esp,0x8
c0025c32:	52                   	push   edx
c0025c33:	50                   	push   eax
c0025c34:	e8 d1 fc ff ff       	call   c002590a <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025c39:	83 c4 10             	add    esp,0x10
c0025c3c:	84 c0                	test   al,al
c0025c3e:	74 44                	je     c0025c84 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025c40:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025c43:	8b 1c 85 40 26 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcd9c0]
c0025c4a:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025c4e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025c51:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025c55:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c58:	83 c0 20             	add    eax,0x20
c0025c5b:	0f b6 f0             	movzx  esi,al
c0025c5e:	b8 00 00 00 00       	mov    eax,0x0
c0025c63:	99                   	cdq    
c0025c64:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025c67:	0f b6 c9             	movzx  ecx,cl
c0025c6a:	83 ec 04             	sub    esp,0x4
c0025c6d:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025c70:	57                   	push   edi
c0025c71:	56                   	push   esi
c0025c72:	52                   	push   edx
c0025c73:	50                   	push   eax
c0025c74:	51                   	push   ecx
c0025c75:	53                   	push   ebx
c0025c76:	e8 0b fe ff ff       	call   c0025a86 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025c7b:	83 c4 20             	add    esp,0x20
c0025c7e:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025c82:	eb 05                	jmp    c0025c89 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025c84:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025c87:	eb 8f                	jmp    c0025c18 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025c89:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025c8c:	83 f0 01             	xor    eax,0x1
c0025c8f:	84 c0                	test   al,al
c0025c91:	74 10                	je     c0025ca3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025c93:	83 ec 0c             	sub    esp,0xc
c0025c96:	68 23 d0 02 c0       	push   0xc002d023
c0025c9b:	e8 0f 48 ff ff       	call   c001a4af <Krnl::panic(char const*)>
c0025ca0:	83 c4 10             	add    esp,0x10
c0025ca3:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025ca7:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025cae:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025cb2:	7f 65                	jg     c0025d19 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025cb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025cb7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025cba:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025cc1:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025cc4:	01 ca                	add    edx,ecx
c0025cc6:	83 c2 54             	add    edx,0x54
c0025cc9:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025ccd:	85 c0                	test   eax,eax
c0025ccf:	75 43                	jne    c0025d14 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025cd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025cd4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025cd7:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025cde:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025ce1:	01 ca                	add    edx,ecx
c0025ce3:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025ce6:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025ce9:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025ced:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025cf0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025cf3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025cfa:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025cfd:	01 ca                	add    edx,ecx
c0025cff:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025d05:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025d08:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025d0c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d0f:	83 e8 20             	sub    eax,0x20
c0025d12:	eb 1a                	jmp    c0025d2e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025d14:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025d17:	eb 95                	jmp    c0025cae <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025d19:	83 ec 0c             	sub    esp,0xc
c0025d1c:	68 30 d0 02 c0       	push   0xc002d030
c0025d21:	e8 89 47 ff ff       	call   c001a4af <Krnl::panic(char const*)>
c0025d26:	83 c4 10             	add    esp,0x10
c0025d29:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025d2e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025d31:	5b                   	pop    ebx
c0025d32:	5e                   	pop    esi
c0025d33:	5f                   	pop    edi
c0025d34:	5d                   	pop    ebp
c0025d35:	c3                   	ret    

c0025d36 <PIC::disable()>:
c0025d36:	55                   	push   ebp
c0025d37:	89 e5                	mov    ebp,esp
c0025d39:	83 ec 10             	sub    esp,0x10
c0025d3c:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025d42:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025d46:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025d49:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025d4d:	ee                   	out    dx,al
c0025d4e:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025d54:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025d58:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025d5b:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025d5f:	ee                   	out    dx,al
c0025d60:	90                   	nop
c0025d61:	c9                   	leave  
c0025d62:	c3                   	ret    
c0025d63:	90                   	nop

c0025d64 <PIC::close(int, int, void*)>:
c0025d64:	55                   	push   ebp
c0025d65:	89 e5                	mov    ebp,esp
c0025d67:	83 ec 08             	sub    esp,0x8
c0025d6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0025d6f:	83 c0 3c             	add    eax,0x3c
c0025d72:	8b 00                	mov    eax,DWORD PTR [eax]
c0025d74:	83 ec 0c             	sub    esp,0xc
c0025d77:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d7a:	ff d0                	call   eax
c0025d7c:	83 c4 10             	add    esp,0x10
c0025d7f:	b8 00 00 00 00       	mov    eax,0x0
c0025d84:	c9                   	leave  
c0025d85:	c3                   	ret    

c0025d86 <PIC::PIC()>:
c0025d86:	83 ec 0c             	sub    esp,0xc
c0025d89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d8d:	83 ec 08             	sub    esp,0x8
c0025d90:	68 dc d0 02 c0       	push   0xc002d0dc
c0025d95:	50                   	push   eax
c0025d96:	e8 bb ed fe ff       	call   c0014b56 <InterruptController::InterruptController(char const*)>
c0025d9b:	83 c4 10             	add    esp,0x10
c0025d9e:	ba 08 d1 02 c0       	mov    edx,0xc002d108
c0025da3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025da7:	89 10                	mov    DWORD PTR [eax],edx
c0025da9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dad:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025db3:	0f b6 d0             	movzx  edx,al
c0025db6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dba:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025dc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dc5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025dcb:	0f b6 d0             	movzx  edx,al
c0025dce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dd2:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025dd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ddb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025de1:	8d 50 01             	lea    edx,[eax+0x1]
c0025de4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025de8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025dee:	0f b6 d0             	movzx  edx,al
c0025df1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025df5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025df9:	83 e1 3f             	and    ecx,0x3f
c0025dfc:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025e00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e04:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025e0a:	0f b6 d0             	movzx  edx,al
c0025e0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e11:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025e18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e1c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025e22:	0f b6 d0             	movzx  edx,al
c0025e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e29:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025e2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e32:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025e38:	8d 50 01             	lea    edx,[eax+0x1]
c0025e3b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025e3f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025e45:	0f b6 d0             	movzx  edx,al
c0025e48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e4c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025e50:	83 e1 3f             	and    ecx,0x3f
c0025e53:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025e57:	90                   	nop
c0025e58:	83 c4 0c             	add    esp,0xc
c0025e5b:	c3                   	ret    

c0025e5c <PIC::ioWait()>:
c0025e5c:	eb 00                	jmp    c0025e5e <PIC::ioWait()+0x2>
c0025e5e:	eb 00                	jmp    c0025e60 <PIC::ioWait()+0x4>
c0025e60:	90                   	nop
c0025e61:	c3                   	ret    

c0025e62 <PIC::getIRQReg(int)>:
c0025e62:	55                   	push   ebp
c0025e63:	89 e5                	mov    ebp,esp
c0025e65:	83 ec 10             	sub    esp,0x10
c0025e68:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e6b:	0f b6 c0             	movzx  eax,al
c0025e6e:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025e74:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025e77:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025e7a:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025e7e:	ee                   	out    dx,al
c0025e7f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e82:	0f b6 c0             	movzx  eax,al
c0025e85:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025e8b:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025e8e:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025e91:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025e95:	ee                   	out    dx,al
c0025e96:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025e9c:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025ea0:	89 c2                	mov    edx,eax
c0025ea2:	ec                   	in     al,dx
c0025ea3:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025ea6:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025ea9:	0f b6 c0             	movzx  eax,al
c0025eac:	c1 e0 08             	shl    eax,0x8
c0025eaf:	89 c1                	mov    ecx,eax
c0025eb1:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025eb7:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025ebb:	89 c2                	mov    edx,eax
c0025ebd:	ec                   	in     al,dx
c0025ebe:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025ec1:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025ec4:	0f b6 c0             	movzx  eax,al
c0025ec7:	09 c8                	or     eax,ecx
c0025ec9:	c9                   	leave  
c0025eca:	c3                   	ret    
c0025ecb:	90                   	nop

c0025ecc <PIC::eoi(unsigned char)>:
c0025ecc:	55                   	push   ebp
c0025ecd:	89 e5                	mov    ebp,esp
c0025ecf:	83 ec 14             	sub    esp,0x14
c0025ed2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ed5:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025ed8:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025edc:	75 1e                	jne    c0025efc <PIC::eoi(unsigned char)+0x30>
c0025ede:	6a 0b                	push   0xb
c0025ee0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ee3:	e8 7a ff ff ff       	call   c0025e62 <PIC::getIRQReg(int)>
c0025ee8:	83 c4 08             	add    esp,0x8
c0025eeb:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025eef:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025ef3:	25 80 00 00 00       	and    eax,0x80
c0025ef8:	85 c0                	test   eax,eax
c0025efa:	74 5f                	je     c0025f5b <PIC::eoi(unsigned char)+0x8f>
c0025efc:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025f00:	75 2d                	jne    c0025f2f <PIC::eoi(unsigned char)+0x63>
c0025f02:	6a 0b                	push   0xb
c0025f04:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f07:	e8 56 ff ff ff       	call   c0025e62 <PIC::getIRQReg(int)>
c0025f0c:	83 c4 08             	add    esp,0x8
c0025f0f:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0025f13:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025f16:	66 85 c0             	test   ax,ax
c0025f19:	78 14                	js     c0025f2f <PIC::eoi(unsigned char)+0x63>
c0025f1b:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0025f21:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0025f25:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025f28:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025f2c:	ee                   	out    dx,al
c0025f2d:	eb 2d                	jmp    c0025f5c <PIC::eoi(unsigned char)+0x90>
c0025f2f:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025f33:	76 12                	jbe    c0025f47 <PIC::eoi(unsigned char)+0x7b>
c0025f35:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025f3b:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0025f3f:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025f42:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025f46:	ee                   	out    dx,al
c0025f47:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025f4d:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0025f51:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025f54:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025f58:	ee                   	out    dx,al
c0025f59:	eb 01                	jmp    c0025f5c <PIC::eoi(unsigned char)+0x90>
c0025f5b:	90                   	nop
c0025f5c:	c9                   	leave  
c0025f5d:	c3                   	ret    

c0025f5e <PIC::remap()>:
c0025f5e:	55                   	push   ebp
c0025f5f:	89 e5                	mov    ebp,esp
c0025f61:	83 ec 48             	sub    esp,0x48
c0025f64:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0025f6b:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0025f72:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0025f78:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0025f7b:	89 c2                	mov    edx,eax
c0025f7d:	ec                   	in     al,dx
c0025f7e:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0025f81:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0025f84:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0025f87:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0025f8d:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0025f90:	89 c2                	mov    edx,eax
c0025f92:	ec                   	in     al,dx
c0025f93:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0025f96:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0025f99:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0025f9c:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0025fa2:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0025fa6:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0025fa9:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0025fac:	ee                   	out    dx,al
c0025fad:	83 ec 0c             	sub    esp,0xc
c0025fb0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fb3:	e8 a4 fe ff ff       	call   c0025e5c <PIC::ioWait()>
c0025fb8:	83 c4 10             	add    esp,0x10
c0025fbb:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0025fc1:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0025fc5:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0025fc8:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025fcb:	ee                   	out    dx,al
c0025fcc:	83 ec 0c             	sub    esp,0xc
c0025fcf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fd2:	e8 85 fe ff ff       	call   c0025e5c <PIC::ioWait()>
c0025fd7:	83 c4 10             	add    esp,0x10
c0025fda:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025fdd:	0f b6 c0             	movzx  eax,al
c0025fe0:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0025fe6:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0025fe9:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0025fec:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0025fef:	ee                   	out    dx,al
c0025ff0:	83 ec 0c             	sub    esp,0xc
c0025ff3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ff6:	e8 61 fe ff ff       	call   c0025e5c <PIC::ioWait()>
c0025ffb:	83 c4 10             	add    esp,0x10
c0025ffe:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026001:	0f b6 c0             	movzx  eax,al
c0026004:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c002600a:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c002600d:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0026010:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026013:	ee                   	out    dx,al
c0026014:	83 ec 0c             	sub    esp,0xc
c0026017:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002601a:	e8 3d fe ff ff       	call   c0025e5c <PIC::ioWait()>
c002601f:	83 c4 10             	add    esp,0x10
c0026022:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0026028:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c002602c:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c002602f:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0026032:	ee                   	out    dx,al
c0026033:	83 ec 0c             	sub    esp,0xc
c0026036:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026039:	e8 1e fe ff ff       	call   c0025e5c <PIC::ioWait()>
c002603e:	83 c4 10             	add    esp,0x10
c0026041:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026047:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c002604b:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c002604e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026051:	ee                   	out    dx,al
c0026052:	83 ec 0c             	sub    esp,0xc
c0026055:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026058:	e8 ff fd ff ff       	call   c0025e5c <PIC::ioWait()>
c002605d:	83 c4 10             	add    esp,0x10
c0026060:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026066:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c002606a:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c002606d:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026070:	ee                   	out    dx,al
c0026071:	83 ec 0c             	sub    esp,0xc
c0026074:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026077:	e8 e0 fd ff ff       	call   c0025e5c <PIC::ioWait()>
c002607c:	83 c4 10             	add    esp,0x10
c002607f:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026085:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026089:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c002608c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002608f:	ee                   	out    dx,al
c0026090:	83 ec 0c             	sub    esp,0xc
c0026093:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026096:	e8 c1 fd ff ff       	call   c0025e5c <PIC::ioWait()>
c002609b:	83 c4 10             	add    esp,0x10
c002609e:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c00260a2:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c00260a8:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c00260ab:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c00260ae:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00260b1:	ee                   	out    dx,al
c00260b2:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c00260b6:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c00260bc:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c00260bf:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c00260c2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00260c5:	ee                   	out    dx,al
c00260c6:	90                   	nop
c00260c7:	c9                   	leave  
c00260c8:	c3                   	ret    
c00260c9:	90                   	nop

c00260ca <PIC::open(int, int, void*)>:
c00260ca:	55                   	push   ebp
c00260cb:	89 e5                	mov    ebp,esp
c00260cd:	83 ec 18             	sub    esp,0x18
c00260d0:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c00260d6:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c00260da:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00260dd:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00260e1:	ee                   	out    dx,al
c00260e2:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00260e8:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00260ec:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00260ef:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00260f3:	ee                   	out    dx,al
c00260f4:	83 ec 0c             	sub    esp,0xc
c00260f7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260fa:	e8 5f fe ff ff       	call   c0025f5e <PIC::remap()>
c00260ff:	83 c4 10             	add    esp,0x10
c0026102:	b8 00 00 00 00       	mov    eax,0x0
c0026107:	c9                   	leave  
c0026108:	c3                   	ret    
c0026109:	90                   	nop

c002610a <APICTimer::close(int, int, void*)>:
c002610a:	b8 00 00 00 00       	mov    eax,0x0
c002610f:	c3                   	ret    

c0026110 <apicTimerHandler(regs*, void*)>:
c0026110:	83 ec 0c             	sub    esp,0xc
c0026113:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026117:	8b 00                	mov    eax,DWORD PTR [eax]
c0026119:	99                   	cdq    
c002611a:	52                   	push   edx
c002611b:	50                   	push   eax
c002611c:	6a 00                	push   0x0
c002611e:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026123:	e8 84 07 00 00       	call   c00268ac <__udivdi3>
c0026128:	83 c4 10             	add    esp,0x10
c002612b:	83 ec 08             	sub    esp,0x8
c002612e:	52                   	push   edx
c002612f:	50                   	push   eax
c0026130:	e8 a2 0a ff ff       	call   c0016bd7 <timerHandler(unsigned long long)>
c0026135:	83 c4 10             	add    esp,0x10
c0026138:	90                   	nop
c0026139:	83 c4 0c             	add    esp,0xc
c002613c:	c3                   	ret    
c002613d:	90                   	nop

c002613e <APICTimer::write(int)>:
c002613e:	53                   	push   ebx
c002613f:	83 ec 28             	sub    esp,0x28
c0026142:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026146:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002614a:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026150:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c0026155:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002615b:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026161:	83 ec 0c             	sub    esp,0xc
c0026164:	50                   	push   eax
c0026165:	e8 de f4 ff ff       	call   c0025648 <APIC::getBase()>
c002616a:	83 c4 10             	add    esp,0x10
c002616d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026171:	a1 30 e9 02 c0       	mov    eax,ds:0xc002e930
c0026176:	8b 15 34 e9 02 c0    	mov    edx,DWORD PTR ds:0xc002e934
c002617c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026180:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026184:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026188:	05 e0 03 00 00       	add    eax,0x3e0
c002618d:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026193:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026197:	05 80 03 00 00       	add    eax,0x380
c002619c:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00261a2:	fb                   	sti    
c00261a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00261ab:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c00261b0:	83 d2 00             	adc    edx,0x0
c00261b3:	89 c1                	mov    ecx,eax
c00261b5:	89 d3                	mov    ebx,edx
c00261b7:	a1 30 e9 02 c0       	mov    eax,ds:0xc002e930
c00261bc:	8b 15 34 e9 02 c0    	mov    edx,DWORD PTR ds:0xc002e934
c00261c2:	39 c8                	cmp    eax,ecx
c00261c4:	89 d0                	mov    eax,edx
c00261c6:	19 d8                	sbb    eax,ebx
c00261c8:	73 02                	jae    c00261cc <APICTimer::write(int)+0x8e>
c00261ca:	eb d7                	jmp    c00261a3 <APICTimer::write(int)+0x65>
c00261cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00261d0:	05 20 03 00 00       	add    eax,0x320
c00261d5:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c00261db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00261df:	05 90 03 00 00       	add    eax,0x390
c00261e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00261e6:	f7 d0                	not    eax
c00261e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00261ec:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00261f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00261f4:	ba 00 00 00 00       	mov    edx,0x0
c00261f9:	f7 f3                	div    ebx
c00261fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00261ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026203:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026209:	0d 00 00 02 00       	or     eax,0x20000
c002620e:	89 c2                	mov    edx,eax
c0026210:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026214:	05 20 03 00 00       	add    eax,0x320
c0026219:	89 10                	mov    DWORD PTR [eax],edx
c002621b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002621f:	05 e0 03 00 00       	add    eax,0x3e0
c0026224:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002622a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002622e:	05 80 03 00 00       	add    eax,0x380
c0026233:	89 c2                	mov    edx,eax
c0026235:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026239:	89 02                	mov    DWORD PTR [edx],eax
c002623b:	90                   	nop
c002623c:	83 c4 28             	add    esp,0x28
c002623f:	5b                   	pop    ebx
c0026240:	c3                   	ret    
c0026241:	90                   	nop

c0026242 <APICTimer::open(int, int, void*)>:
c0026242:	57                   	push   edi
c0026243:	56                   	push   esi
c0026244:	53                   	push   ebx
c0026245:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026249:	8b 00                	mov    eax,DWORD PTR [eax]
c002624b:	83 c0 24             	add    eax,0x24
c002624e:	8b 00                	mov    eax,DWORD PTR [eax]
c0026250:	83 ec 08             	sub    esp,0x8
c0026253:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026257:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002625b:	ff d0                	call   eax
c002625d:	83 c4 10             	add    esp,0x10
c0026260:	a1 a8 e2 02 c0       	mov    eax,ds:0xc002e2a8
c0026265:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002626b:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026271:	83 ec 0c             	sub    esp,0xc
c0026274:	50                   	push   eax
c0026275:	e8 ce f3 ff ff       	call   c0025648 <APIC::getBase()>
c002627a:	83 c4 10             	add    esp,0x10
c002627d:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026283:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026287:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002628d:	0f b6 f8             	movzx  edi,al
c0026290:	89 d0                	mov    eax,edx
c0026292:	ba 00 00 00 00       	mov    edx,0x0
c0026297:	89 c1                	mov    ecx,eax
c0026299:	80 e5 ff             	and    ch,0xff
c002629c:	89 cb                	mov    ebx,ecx
c002629e:	0f b6 f2             	movzx  esi,dl
c00262a1:	89 d8                	mov    eax,ebx
c00262a3:	89 f2                	mov    edx,esi
c00262a5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00262a9:	8d 5f 08             	lea    ebx,[edi+0x8]
c00262ac:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00262b0:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00262b4:	83 e0 00             	and    eax,0x0
c00262b7:	09 d0                	or     eax,edx
c00262b9:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00262bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262c1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00262c7:	8d 50 01             	lea    edx,[eax+0x1]
c00262ca:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00262ce:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00262d4:	0f b6 d0             	movzx  edx,al
c00262d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262db:	83 c2 08             	add    edx,0x8
c00262de:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00262e2:	0f b6 c9             	movzx  ecx,cl
c00262e5:	81 c9 00 00 01 00    	or     ecx,0x10000
c00262eb:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00262ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00262f7:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00262fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026301:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026305:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002630b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002630f:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026315:	83 ec 0c             	sub    esp,0xc
c0026318:	51                   	push   ecx
c0026319:	6a 01                	push   0x1
c002631b:	68 10 61 02 c0       	push   0xc0026110
c0026320:	52                   	push   edx
c0026321:	50                   	push   eax
c0026322:	e8 57 de fe ff       	call   c001417e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026327:	83 c4 20             	add    esp,0x20
c002632a:	89 c2                	mov    edx,eax
c002632c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026330:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026336:	b8 00 00 00 00       	mov    eax,0x0
c002633b:	5b                   	pop    ebx
c002633c:	5e                   	pop    esi
c002633d:	5f                   	pop    edi
c002633e:	c3                   	ret    
c002633f:	90                   	nop

c0026340 <APICTimer::APICTimer()>:
c0026340:	83 ec 0c             	sub    esp,0xc
c0026343:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026347:	83 ec 08             	sub    esp,0x8
c002634a:	68 48 d1 02 c0       	push   0xc002d148
c002634f:	50                   	push   eax
c0026350:	e8 f3 07 ff ff       	call   c0016b48 <Timer::Timer(char const*)>
c0026355:	83 c4 10             	add    esp,0x10
c0026358:	ba 5c d1 02 c0       	mov    edx,0xc002d15c
c002635d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026361:	89 10                	mov    DWORD PTR [eax],edx
c0026363:	90                   	nop
c0026364:	83 c4 0c             	add    esp,0xc
c0026367:	c3                   	ret    

c0026368 <PIT::write(int)>:
c0026368:	83 ec 10             	sub    esp,0x10
c002636b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002636f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026373:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026379:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002637d:	a3 64 26 03 c0       	mov    ds:0xc0032664,eax
c0026382:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026387:	99                   	cdq    
c0026388:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002638c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026390:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026397:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002639c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00263a0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00263a5:	ee                   	out    dx,al
c00263a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00263aa:	0f b6 c0             	movzx  eax,al
c00263ad:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00263b4:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00263b8:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00263bc:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00263c1:	ee                   	out    dx,al
c00263c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00263c6:	c1 f8 08             	sar    eax,0x8
c00263c9:	0f b6 c0             	movzx  eax,al
c00263cc:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00263d3:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00263d7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00263db:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00263e0:	ee                   	out    dx,al
c00263e1:	90                   	nop
c00263e2:	83 c4 10             	add    esp,0x10
c00263e5:	c3                   	ret    

c00263e6 <pitHandler(regs*, void*)>:
c00263e6:	83 ec 0c             	sub    esp,0xc
c00263e9:	a1 64 26 03 c0       	mov    eax,ds:0xc0032664
c00263ee:	99                   	cdq    
c00263ef:	52                   	push   edx
c00263f0:	50                   	push   eax
c00263f1:	6a 00                	push   0x0
c00263f3:	68 00 ca 9a 3b       	push   0x3b9aca00
c00263f8:	e8 af 04 00 00       	call   c00268ac <__udivdi3>
c00263fd:	83 c4 10             	add    esp,0x10
c0026400:	83 ec 08             	sub    esp,0x8
c0026403:	52                   	push   edx
c0026404:	50                   	push   eax
c0026405:	e8 cd 07 ff ff       	call   c0016bd7 <timerHandler(unsigned long long)>
c002640a:	83 c4 10             	add    esp,0x10
c002640d:	90                   	nop
c002640e:	83 c4 0c             	add    esp,0xc
c0026411:	c3                   	ret    

c0026412 <PIT::open(int, int, void*)>:
c0026412:	83 ec 0c             	sub    esp,0xc
c0026415:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026419:	8b 00                	mov    eax,DWORD PTR [eax]
c002641b:	83 c0 24             	add    eax,0x24
c002641e:	8b 00                	mov    eax,DWORD PTR [eax]
c0026420:	83 ec 08             	sub    esp,0x8
c0026423:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026427:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002642b:	ff d0                	call   eax
c002642d:	83 c4 10             	add    esp,0x10
c0026430:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026434:	83 ec 0c             	sub    esp,0xc
c0026437:	6a 00                	push   0x0
c0026439:	6a 01                	push   0x1
c002643b:	68 e6 63 02 c0       	push   0xc00263e6
c0026440:	6a 00                	push   0x0
c0026442:	50                   	push   eax
c0026443:	e8 36 dd fe ff       	call   c001417e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026448:	83 c4 20             	add    esp,0x20
c002644b:	89 c2                	mov    edx,eax
c002644d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026451:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026457:	b8 00 00 00 00       	mov    eax,0x0
c002645c:	83 c4 0c             	add    esp,0xc
c002645f:	c3                   	ret    

c0026460 <PIT::close(int, int, void*)>:
c0026460:	83 ec 0c             	sub    esp,0xc
c0026463:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026467:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026471:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026475:	6a 01                	push   0x1
c0026477:	68 e6 63 02 c0       	push   0xc00263e6
c002647c:	6a 00                	push   0x0
c002647e:	50                   	push   eax
c002647f:	e8 38 dd fe ff       	call   c00141bc <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026484:	83 c4 10             	add    esp,0x10
c0026487:	b8 00 00 00 00       	mov    eax,0x0
c002648c:	83 c4 0c             	add    esp,0xc
c002648f:	c3                   	ret    

c0026490 <PIT::PIT()>:
c0026490:	83 ec 0c             	sub    esp,0xc
c0026493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026497:	83 ec 08             	sub    esp,0x8
c002649a:	68 84 d1 02 c0       	push   0xc002d184
c002649f:	50                   	push   eax
c00264a0:	e8 a3 06 ff ff       	call   c0016b48 <Timer::Timer(char const*)>
c00264a5:	83 c4 10             	add    esp,0x10
c00264a8:	ba ac d1 02 c0       	mov    edx,0xc002d1ac
c00264ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264b1:	89 10                	mov    DWORD PTR [eax],edx
c00264b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264b7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00264bd:	0f b6 d0             	movzx  edx,al
c00264c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264c4:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00264cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264cf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00264d5:	0f b6 d0             	movzx  edx,al
c00264d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264dc:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00264e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264e5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00264eb:	8d 50 01             	lea    edx,[eax+0x1]
c00264ee:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00264f2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00264f8:	0f b6 d0             	movzx  edx,al
c00264fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264ff:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026503:	83 e1 3f             	and    ecx,0x3f
c0026506:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002650a:	90                   	nop
c002650b:	83 c4 0c             	add    esp,0xc
c002650e:	c3                   	ret    
c002650f:	90                   	nop

c0026510 <avxDetect>:
c0026510:	b8 00 00 00 00       	mov    eax,0x0
c0026515:	c3                   	ret    

c0026516 <avxSave>:
c0026516:	c3                   	ret    

c0026517 <avxLoad>:
c0026517:	c3                   	ret    

c0026518 <avxInit>:
c0026518:	c3                   	ret    

c0026519 <avxClose>:
c0026519:	c3                   	ret    

c002651a <wouldSheSayYes>:
c002651a:	c3                   	ret    
c002651b:	49                   	dec    ecx
c002651c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026520:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026524:	75 20                	jne    c0026546 <sseDetect.noSSE+0x1>
c0026526:	4e                   	dec    esi
c0026527:	79 61                	jns    c002658a <x87Detect+0x14>
c0026529:	68 2e 2e 2e 00       	push   0x2e2e2e
c002652e:	66 90                	xchg   ax,ax

c0026530 <absolutelyNoChanceInHell>:
c0026530:	b8 01 00 00 00       	mov    eax,0x1
c0026535:	0f a2                	cpuid  
c0026537:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002653d:	74 06                	je     c0026545 <sseDetect.noSSE>
c002653f:	b8 01 00 00 00       	mov    eax,0x1
c0026544:	c3                   	ret    

c0026545 <sseDetect.noSSE>:
c0026545:	31 c0                	xor    eax,eax
c0026547:	c3                   	ret    

c0026548 <sseSave>:
c0026548:	0f ae 44 24 08       	fxsave [esp+0x8]
c002654d:	c3                   	ret    

c002654e <sseLoad>:
c002654e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0026553:	c3                   	ret    

c0026554 <sseInit>:
c0026554:	e8 43 00 00 00       	call   c002659c <x87Init>
c0026559:	0f 20 e0             	mov    eax,cr4
c002655c:	66 0d 00 06          	or     ax,0x600
c0026560:	0f 22 e0             	mov    cr4,eax
c0026563:	c3                   	ret    

c0026564 <sseClose>:
c0026564:	c3                   	ret    
c0026565:	66 90                	xchg   ax,ax
c0026567:	66 90                	xchg   ax,ax
c0026569:	66 90                	xchg   ax,ax
c002656b:	66 90                	xchg   ax,ax
c002656d:	66 90                	xchg   ax,ax
c002656f:	90                   	nop

c0026570 <value_37F>:
c0026570:	7f 03                	jg     c0026575 <value_37A+0x1>

c0026572 <value_37E>:
c0026572:	7e 03                	jle    c0026577 <x87Detect+0x1>

c0026574 <value_37A>:
c0026574:	7a 03                	jp     c0026579 <x87Detect+0x3>

c0026576 <x87Detect>:
c0026576:	b8 01 00 00 00       	mov    eax,0x1
c002657b:	0f a2                	cpuid  
c002657d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026583:	74 06                	je     c002658b <x87Detect.nox87>
c0026585:	b8 01 00 00 00       	mov    eax,0x1
c002658a:	c3                   	ret    

c002658b <x87Detect.nox87>:
c002658b:	b8 00 00 00 00       	mov    eax,0x0
c0026590:	c3                   	ret    

c0026591 <x87Save>:
c0026591:	9b dd 74 24 08       	fsave  [esp+0x8]
c0026596:	c3                   	ret    

c0026597 <x87Load>:
c0026597:	dd 64 24 08          	frstor [esp+0x8]
c002659b:	c3                   	ret    

c002659c <x87Init>:
c002659c:	9b db e3             	finit  
c002659f:	0f 20 c0             	mov    eax,cr0
c00265a2:	66 25 fb ff          	and    ax,0xfffb
c00265a6:	66 0d 22 00          	or     ax,0x22
c00265aa:	0f 22 c0             	mov    cr0,eax
c00265ad:	0f 06                	clts   
c00265af:	d9 2d 74 65 02 c0    	fldcw  WORD PTR ds:0xc0026574
c00265b5:	c3                   	ret    

c00265b6 <x87Close>:
c00265b6:	c3                   	ret    
c00265b7:	90                   	nop

c00265b8 <__do_global_ctors_aux>:
c00265b8:	a1 fc 90 02 c0       	mov    eax,ds:0xc00290fc
c00265bd:	83 f8 ff             	cmp    eax,0xffffffff
c00265c0:	74 1a                	je     c00265dc <__do_global_ctors_aux+0x24>
c00265c2:	55                   	push   ebp
c00265c3:	89 e5                	mov    ebp,esp
c00265c5:	53                   	push   ebx
c00265c6:	52                   	push   edx
c00265c7:	bb fc 90 02 c0       	mov    ebx,0xc00290fc
c00265cc:	ff d0                	call   eax
c00265ce:	83 eb 04             	sub    ebx,0x4
c00265d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00265d3:	83 f8 ff             	cmp    eax,0xffffffff
c00265d6:	75 f4                	jne    c00265cc <__do_global_ctors_aux+0x14>
c00265d8:	58                   	pop    eax
c00265d9:	5b                   	pop    ebx
c00265da:	5d                   	pop    ebp
c00265db:	c3                   	ret    
c00265dc:	c3                   	ret    
c00265dd:	66 90                	xchg   ax,ax
c00265df:	90                   	nop

c00265e0 <__divdi3>:
c00265e0:	55                   	push   ebp
c00265e1:	57                   	push   edi
c00265e2:	56                   	push   esi
c00265e3:	53                   	push   ebx
c00265e4:	83 ec 1c             	sub    esp,0x1c
c00265e7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00265eb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00265ef:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00265f2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00265f6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00265fa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00265fe:	85 db                	test   ebx,ebx
c0026600:	0f 88 8e 00 00 00    	js     c0026694 <__divdi3+0xb4>
c0026606:	89 dd                	mov    ebp,ebx
c0026608:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026610:	89 d3                	mov    ebx,edx
c0026612:	85 d2                	test   edx,edx
c0026614:	79 0d                	jns    c0026623 <__divdi3+0x43>
c0026616:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002661a:	f7 d8                	neg    eax
c002661c:	83 d2 00             	adc    edx,0x0
c002661f:	f7 da                	neg    edx
c0026621:	89 d3                	mov    ebx,edx
c0026623:	89 c7                	mov    edi,eax
c0026625:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026628:	85 db                	test   ebx,ebx
c002662a:	75 48                	jne    c0026674 <__divdi3+0x94>
c002662c:	39 ef                	cmp    edi,ebp
c002662e:	76 24                	jbe    c0026654 <__divdi3+0x74>
c0026630:	89 ea                	mov    edx,ebp
c0026632:	f7 f7                	div    edi
c0026634:	89 c1                	mov    ecx,eax
c0026636:	31 f6                	xor    esi,esi
c0026638:	89 c8                	mov    eax,ecx
c002663a:	89 f2                	mov    edx,esi
c002663c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026640:	85 c9                	test   ecx,ecx
c0026642:	74 07                	je     c002664b <__divdi3+0x6b>
c0026644:	f7 d8                	neg    eax
c0026646:	83 d2 00             	adc    edx,0x0
c0026649:	f7 da                	neg    edx
c002664b:	83 c4 1c             	add    esp,0x1c
c002664e:	5b                   	pop    ebx
c002664f:	5e                   	pop    esi
c0026650:	5f                   	pop    edi
c0026651:	5d                   	pop    ebp
c0026652:	c3                   	ret    
c0026653:	90                   	nop
c0026654:	85 ff                	test   edi,edi
c0026656:	75 0b                	jne    c0026663 <__divdi3+0x83>
c0026658:	b8 01 00 00 00       	mov    eax,0x1
c002665d:	31 d2                	xor    edx,edx
c002665f:	f7 f3                	div    ebx
c0026661:	89 c7                	mov    edi,eax
c0026663:	31 d2                	xor    edx,edx
c0026665:	89 e8                	mov    eax,ebp
c0026667:	f7 f7                	div    edi
c0026669:	89 c6                	mov    esi,eax
c002666b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002666e:	f7 f7                	div    edi
c0026670:	89 c1                	mov    ecx,eax
c0026672:	eb c4                	jmp    c0026638 <__divdi3+0x58>
c0026674:	39 eb                	cmp    ebx,ebp
c0026676:	77 3c                	ja     c00266b4 <__divdi3+0xd4>
c0026678:	0f bd f3             	bsr    esi,ebx
c002667b:	83 f6 1f             	xor    esi,0x1f
c002667e:	75 40                	jne    c00266c0 <__divdi3+0xe0>
c0026680:	39 eb                	cmp    ebx,ebp
c0026682:	72 09                	jb     c002668d <__divdi3+0xad>
c0026684:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026687:	0f 87 97 00 00 00    	ja     c0026724 <__divdi3+0x144>
c002668d:	b9 01 00 00 00       	mov    ecx,0x1
c0026692:	eb a4                	jmp    c0026638 <__divdi3+0x58>
c0026694:	f7 d9                	neg    ecx
c0026696:	83 d3 00             	adc    ebx,0x0
c0026699:	f7 db                	neg    ebx
c002669b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002669e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00266a2:	89 dd                	mov    ebp,ebx
c00266a4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00266ac:	e9 5f ff ff ff       	jmp    c0026610 <__divdi3+0x30>
c00266b1:	8d 76 00             	lea    esi,[esi+0x0]
c00266b4:	31 f6                	xor    esi,esi
c00266b6:	31 c9                	xor    ecx,ecx
c00266b8:	e9 7b ff ff ff       	jmp    c0026638 <__divdi3+0x58>
c00266bd:	8d 76 00             	lea    esi,[esi+0x0]
c00266c0:	b8 20 00 00 00       	mov    eax,0x20
c00266c5:	29 f0                	sub    eax,esi
c00266c7:	89 f1                	mov    ecx,esi
c00266c9:	d3 e3                	shl    ebx,cl
c00266cb:	89 fa                	mov    edx,edi
c00266cd:	88 c1                	mov    cl,al
c00266cf:	d3 ea                	shr    edx,cl
c00266d1:	09 da                	or     edx,ebx
c00266d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00266d7:	89 f1                	mov    ecx,esi
c00266d9:	d3 e7                	shl    edi,cl
c00266db:	89 eb                	mov    ebx,ebp
c00266dd:	88 c1                	mov    cl,al
c00266df:	d3 eb                	shr    ebx,cl
c00266e1:	89 f1                	mov    ecx,esi
c00266e3:	d3 e5                	shl    ebp,cl
c00266e5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00266e8:	88 c1                	mov    cl,al
c00266ea:	d3 ea                	shr    edx,cl
c00266ec:	09 d5                	or     ebp,edx
c00266ee:	89 e8                	mov    eax,ebp
c00266f0:	89 da                	mov    edx,ebx
c00266f2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00266f6:	89 d3                	mov    ebx,edx
c00266f8:	89 c5                	mov    ebp,eax
c00266fa:	f7 e7                	mul    edi
c00266fc:	39 d3                	cmp    ebx,edx
c00266fe:	72 18                	jb     c0026718 <__divdi3+0x138>
c0026700:	74 0a                	je     c002670c <__divdi3+0x12c>
c0026702:	89 e9                	mov    ecx,ebp
c0026704:	31 f6                	xor    esi,esi
c0026706:	e9 2d ff ff ff       	jmp    c0026638 <__divdi3+0x58>
c002670b:	90                   	nop
c002670c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002670f:	89 f1                	mov    ecx,esi
c0026711:	d3 e7                	shl    edi,cl
c0026713:	39 c7                	cmp    edi,eax
c0026715:	73 eb                	jae    c0026702 <__divdi3+0x122>
c0026717:	90                   	nop
c0026718:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002671b:	31 f6                	xor    esi,esi
c002671d:	e9 16 ff ff ff       	jmp    c0026638 <__divdi3+0x58>
c0026722:	66 90                	xchg   ax,ax
c0026724:	31 c9                	xor    ecx,ecx
c0026726:	e9 0d ff ff ff       	jmp    c0026638 <__divdi3+0x58>
c002672b:	90                   	nop

c002672c <__moddi3>:
c002672c:	55                   	push   ebp
c002672d:	57                   	push   edi
c002672e:	56                   	push   esi
c002672f:	53                   	push   ebx
c0026730:	83 ec 2c             	sub    esp,0x2c
c0026733:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0026737:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002673b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002673f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0026743:	85 db                	test   ebx,ebx
c0026745:	0f 88 85 00 00 00    	js     c00267d0 <__moddi3+0xa4>
c002674b:	89 de                	mov    esi,ebx
c002674d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026755:	89 d7                	mov    edi,edx
c0026757:	85 d2                	test   edx,edx
c0026759:	79 09                	jns    c0026764 <__moddi3+0x38>
c002675b:	f7 d8                	neg    eax
c002675d:	83 d2 00             	adc    edx,0x0
c0026760:	f7 da                	neg    edx
c0026762:	89 d7                	mov    edi,edx
c0026764:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026768:	89 cd                	mov    ebp,ecx
c002676a:	85 ff                	test   edi,edi
c002676c:	75 52                	jne    c00267c0 <__moddi3+0x94>
c002676e:	89 c3                	mov    ebx,eax
c0026770:	39 f0                	cmp    eax,esi
c0026772:	76 24                	jbe    c0026798 <__moddi3+0x6c>
c0026774:	89 c8                	mov    eax,ecx
c0026776:	89 f2                	mov    edx,esi
c0026778:	f7 f3                	div    ebx
c002677a:	89 d6                	mov    esi,edx
c002677c:	89 f0                	mov    eax,esi
c002677e:	31 d2                	xor    edx,edx
c0026780:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026784:	85 c9                	test   ecx,ecx
c0026786:	74 07                	je     c002678f <__moddi3+0x63>
c0026788:	f7 d8                	neg    eax
c002678a:	83 d2 00             	adc    edx,0x0
c002678d:	f7 da                	neg    edx
c002678f:	83 c4 2c             	add    esp,0x2c
c0026792:	5b                   	pop    ebx
c0026793:	5e                   	pop    esi
c0026794:	5f                   	pop    edi
c0026795:	5d                   	pop    ebp
c0026796:	c3                   	ret    
c0026797:	90                   	nop
c0026798:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002679c:	85 db                	test   ebx,ebx
c002679e:	75 0d                	jne    c00267ad <__moddi3+0x81>
c00267a0:	b8 01 00 00 00       	mov    eax,0x1
c00267a5:	31 d2                	xor    edx,edx
c00267a7:	f7 f7                	div    edi
c00267a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00267ad:	89 f0                	mov    eax,esi
c00267af:	31 d2                	xor    edx,edx
c00267b1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00267b5:	f7 f7                	div    edi
c00267b7:	89 e8                	mov    eax,ebp
c00267b9:	f7 f7                	div    edi
c00267bb:	89 d6                	mov    esi,edx
c00267bd:	eb bd                	jmp    c002677c <__moddi3+0x50>
c00267bf:	90                   	nop
c00267c0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00267c4:	39 f7                	cmp    edi,esi
c00267c6:	76 20                	jbe    c00267e8 <__moddi3+0xbc>
c00267c8:	89 c8                	mov    eax,ecx
c00267ca:	89 f2                	mov    edx,esi
c00267cc:	eb b2                	jmp    c0026780 <__moddi3+0x54>
c00267ce:	66 90                	xchg   ax,ax
c00267d0:	f7 d9                	neg    ecx
c00267d2:	83 d3 00             	adc    ebx,0x0
c00267d5:	f7 db                	neg    ebx
c00267d7:	89 de                	mov    esi,ebx
c00267d9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00267e1:	e9 6f ff ff ff       	jmp    c0026755 <__moddi3+0x29>
c00267e6:	66 90                	xchg   ax,ax
c00267e8:	0f bd c7             	bsr    eax,edi
c00267eb:	83 f0 1f             	xor    eax,0x1f
c00267ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00267f2:	75 24                	jne    c0026818 <__moddi3+0xec>
c00267f4:	39 f7                	cmp    edi,esi
c00267f6:	72 06                	jb     c00267fe <__moddi3+0xd2>
c00267f8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00267fc:	77 0c                	ja     c002680a <__moddi3+0xde>
c00267fe:	89 e9                	mov    ecx,ebp
c0026800:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0026804:	19 fe                	sbb    esi,edi
c0026806:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002680a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002680e:	89 f2                	mov    edx,esi
c0026810:	e9 6b ff ff ff       	jmp    c0026780 <__moddi3+0x54>
c0026815:	8d 76 00             	lea    esi,[esi+0x0]
c0026818:	b8 20 00 00 00       	mov    eax,0x20
c002681d:	89 c2                	mov    edx,eax
c002681f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026823:	29 da                	sub    edx,ebx
c0026825:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026829:	88 d9                	mov    cl,bl
c002682b:	d3 e7                	shl    edi,cl
c002682d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026831:	88 d1                	mov    cl,dl
c0026833:	d3 e8                	shr    eax,cl
c0026835:	09 c7                	or     edi,eax
c0026837:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002683b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002683f:	89 d8                	mov    eax,ebx
c0026841:	88 d9                	mov    cl,bl
c0026843:	d3 e7                	shl    edi,cl
c0026845:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026849:	89 f3                	mov    ebx,esi
c002684b:	88 d1                	mov    cl,dl
c002684d:	d3 eb                	shr    ebx,cl
c002684f:	89 c7                	mov    edi,eax
c0026851:	88 c1                	mov    cl,al
c0026853:	d3 e6                	shl    esi,cl
c0026855:	89 e8                	mov    eax,ebp
c0026857:	88 d1                	mov    cl,dl
c0026859:	d3 e8                	shr    eax,cl
c002685b:	09 f0                	or     eax,esi
c002685d:	89 f9                	mov    ecx,edi
c002685f:	d3 e5                	shl    ebp,cl
c0026861:	89 da                	mov    edx,ebx
c0026863:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026867:	89 d3                	mov    ebx,edx
c0026869:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002686d:	89 c6                	mov    esi,eax
c002686f:	89 d1                	mov    ecx,edx
c0026871:	39 d3                	cmp    ebx,edx
c0026873:	72 27                	jb     c002689c <__moddi3+0x170>
c0026875:	74 21                	je     c0026898 <__moddi3+0x16c>
c0026877:	29 f5                	sub    ebp,esi
c0026879:	19 cb                	sbb    ebx,ecx
c002687b:	89 de                	mov    esi,ebx
c002687d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026881:	d3 e6                	shl    esi,cl
c0026883:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026887:	89 f9                	mov    ecx,edi
c0026889:	d3 ed                	shr    ebp,cl
c002688b:	09 ee                	or     esi,ebp
c002688d:	89 f0                	mov    eax,esi
c002688f:	d3 eb                	shr    ebx,cl
c0026891:	89 da                	mov    edx,ebx
c0026893:	e9 e8 fe ff ff       	jmp    c0026780 <__moddi3+0x54>
c0026898:	39 c5                	cmp    ebp,eax
c002689a:	73 db                	jae    c0026877 <__moddi3+0x14b>
c002689c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00268a0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00268a4:	89 d1                	mov    ecx,edx
c00268a6:	89 c6                	mov    esi,eax
c00268a8:	eb cd                	jmp    c0026877 <__moddi3+0x14b>
c00268aa:	66 90                	xchg   ax,ax

c00268ac <__udivdi3>:
c00268ac:	55                   	push   ebp
c00268ad:	57                   	push   edi
c00268ae:	56                   	push   esi
c00268af:	53                   	push   ebx
c00268b0:	83 ec 1c             	sub    esp,0x1c
c00268b3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00268b7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00268bb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00268bf:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00268c3:	85 d2                	test   edx,edx
c00268c5:	75 41                	jne    c0026908 <__udivdi3+0x5c>
c00268c7:	39 f7                	cmp    edi,esi
c00268c9:	76 15                	jbe    c00268e0 <__udivdi3+0x34>
c00268cb:	89 e8                	mov    eax,ebp
c00268cd:	89 f2                	mov    edx,esi
c00268cf:	f7 f7                	div    edi
c00268d1:	31 db                	xor    ebx,ebx
c00268d3:	89 da                	mov    edx,ebx
c00268d5:	83 c4 1c             	add    esp,0x1c
c00268d8:	5b                   	pop    ebx
c00268d9:	5e                   	pop    esi
c00268da:	5f                   	pop    edi
c00268db:	5d                   	pop    ebp
c00268dc:	c3                   	ret    
c00268dd:	8d 76 00             	lea    esi,[esi+0x0]
c00268e0:	89 f9                	mov    ecx,edi
c00268e2:	85 ff                	test   edi,edi
c00268e4:	75 0b                	jne    c00268f1 <__udivdi3+0x45>
c00268e6:	b8 01 00 00 00       	mov    eax,0x1
c00268eb:	31 d2                	xor    edx,edx
c00268ed:	f7 f7                	div    edi
c00268ef:	89 c1                	mov    ecx,eax
c00268f1:	31 d2                	xor    edx,edx
c00268f3:	89 f0                	mov    eax,esi
c00268f5:	f7 f1                	div    ecx
c00268f7:	89 c3                	mov    ebx,eax
c00268f9:	89 e8                	mov    eax,ebp
c00268fb:	f7 f1                	div    ecx
c00268fd:	89 da                	mov    edx,ebx
c00268ff:	83 c4 1c             	add    esp,0x1c
c0026902:	5b                   	pop    ebx
c0026903:	5e                   	pop    esi
c0026904:	5f                   	pop    edi
c0026905:	5d                   	pop    ebp
c0026906:	c3                   	ret    
c0026907:	90                   	nop
c0026908:	39 f2                	cmp    edx,esi
c002690a:	77 1c                	ja     c0026928 <__udivdi3+0x7c>
c002690c:	0f bd da             	bsr    ebx,edx
c002690f:	83 f3 1f             	xor    ebx,0x1f
c0026912:	75 24                	jne    c0026938 <__udivdi3+0x8c>
c0026914:	39 f2                	cmp    edx,esi
c0026916:	72 08                	jb     c0026920 <__udivdi3+0x74>
c0026918:	39 ef                	cmp    edi,ebp
c002691a:	0f 87 84 00 00 00    	ja     c00269a4 <__udivdi3+0xf8>
c0026920:	b8 01 00 00 00       	mov    eax,0x1
c0026925:	eb ac                	jmp    c00268d3 <__udivdi3+0x27>
c0026927:	90                   	nop
c0026928:	31 db                	xor    ebx,ebx
c002692a:	31 c0                	xor    eax,eax
c002692c:	89 da                	mov    edx,ebx
c002692e:	83 c4 1c             	add    esp,0x1c
c0026931:	5b                   	pop    ebx
c0026932:	5e                   	pop    esi
c0026933:	5f                   	pop    edi
c0026934:	5d                   	pop    ebp
c0026935:	c3                   	ret    
c0026936:	66 90                	xchg   ax,ax
c0026938:	b8 20 00 00 00       	mov    eax,0x20
c002693d:	29 d8                	sub    eax,ebx
c002693f:	88 d9                	mov    cl,bl
c0026941:	d3 e2                	shl    edx,cl
c0026943:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026947:	89 fa                	mov    edx,edi
c0026949:	88 c1                	mov    cl,al
c002694b:	d3 ea                	shr    edx,cl
c002694d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026951:	09 d1                	or     ecx,edx
c0026953:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026957:	88 d9                	mov    cl,bl
c0026959:	d3 e7                	shl    edi,cl
c002695b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002695f:	89 f7                	mov    edi,esi
c0026961:	88 c1                	mov    cl,al
c0026963:	d3 ef                	shr    edi,cl
c0026965:	88 d9                	mov    cl,bl
c0026967:	d3 e6                	shl    esi,cl
c0026969:	89 ea                	mov    edx,ebp
c002696b:	88 c1                	mov    cl,al
c002696d:	d3 ea                	shr    edx,cl
c002696f:	09 d6                	or     esi,edx
c0026971:	89 f0                	mov    eax,esi
c0026973:	89 fa                	mov    edx,edi
c0026975:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026979:	89 d7                	mov    edi,edx
c002697b:	89 c6                	mov    esi,eax
c002697d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026981:	39 d7                	cmp    edi,edx
c0026983:	72 13                	jb     c0026998 <__udivdi3+0xec>
c0026985:	74 09                	je     c0026990 <__udivdi3+0xe4>
c0026987:	89 f0                	mov    eax,esi
c0026989:	31 db                	xor    ebx,ebx
c002698b:	e9 43 ff ff ff       	jmp    c00268d3 <__udivdi3+0x27>
c0026990:	88 d9                	mov    cl,bl
c0026992:	d3 e5                	shl    ebp,cl
c0026994:	39 c5                	cmp    ebp,eax
c0026996:	73 ef                	jae    c0026987 <__udivdi3+0xdb>
c0026998:	8d 46 ff             	lea    eax,[esi-0x1]
c002699b:	31 db                	xor    ebx,ebx
c002699d:	e9 31 ff ff ff       	jmp    c00268d3 <__udivdi3+0x27>
c00269a2:	66 90                	xchg   ax,ax
c00269a4:	31 c0                	xor    eax,eax
c00269a6:	e9 28 ff ff ff       	jmp    c00268d3 <__udivdi3+0x27>
c00269ab:	90                   	nop

c00269ac <__umoddi3>:
c00269ac:	55                   	push   ebp
c00269ad:	57                   	push   edi
c00269ae:	56                   	push   esi
c00269af:	53                   	push   ebx
c00269b0:	83 ec 1c             	sub    esp,0x1c
c00269b3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00269b7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00269bb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00269bf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00269c3:	89 da                	mov    edx,ebx
c00269c5:	85 c0                	test   eax,eax
c00269c7:	75 37                	jne    c0026a00 <__umoddi3+0x54>
c00269c9:	39 df                	cmp    edi,ebx
c00269cb:	76 13                	jbe    c00269e0 <__umoddi3+0x34>
c00269cd:	89 f0                	mov    eax,esi
c00269cf:	f7 f7                	div    edi
c00269d1:	89 d0                	mov    eax,edx
c00269d3:	31 d2                	xor    edx,edx
c00269d5:	83 c4 1c             	add    esp,0x1c
c00269d8:	5b                   	pop    ebx
c00269d9:	5e                   	pop    esi
c00269da:	5f                   	pop    edi
c00269db:	5d                   	pop    ebp
c00269dc:	c3                   	ret    
c00269dd:	8d 76 00             	lea    esi,[esi+0x0]
c00269e0:	89 fd                	mov    ebp,edi
c00269e2:	85 ff                	test   edi,edi
c00269e4:	75 0b                	jne    c00269f1 <__umoddi3+0x45>
c00269e6:	b8 01 00 00 00       	mov    eax,0x1
c00269eb:	31 d2                	xor    edx,edx
c00269ed:	f7 f7                	div    edi
c00269ef:	89 c5                	mov    ebp,eax
c00269f1:	89 d8                	mov    eax,ebx
c00269f3:	31 d2                	xor    edx,edx
c00269f5:	f7 f5                	div    ebp
c00269f7:	89 f0                	mov    eax,esi
c00269f9:	f7 f5                	div    ebp
c00269fb:	89 d0                	mov    eax,edx
c00269fd:	eb d4                	jmp    c00269d3 <__umoddi3+0x27>
c00269ff:	90                   	nop
c0026a00:	89 f1                	mov    ecx,esi
c0026a02:	39 d8                	cmp    eax,ebx
c0026a04:	76 0a                	jbe    c0026a10 <__umoddi3+0x64>
c0026a06:	89 f0                	mov    eax,esi
c0026a08:	83 c4 1c             	add    esp,0x1c
c0026a0b:	5b                   	pop    ebx
c0026a0c:	5e                   	pop    esi
c0026a0d:	5f                   	pop    edi
c0026a0e:	5d                   	pop    ebp
c0026a0f:	c3                   	ret    
c0026a10:	0f bd e8             	bsr    ebp,eax
c0026a13:	83 f5 1f             	xor    ebp,0x1f
c0026a16:	75 1c                	jne    c0026a34 <__umoddi3+0x88>
c0026a18:	39 d8                	cmp    eax,ebx
c0026a1a:	72 04                	jb     c0026a20 <__umoddi3+0x74>
c0026a1c:	39 f7                	cmp    edi,esi
c0026a1e:	77 08                	ja     c0026a28 <__umoddi3+0x7c>
c0026a20:	89 da                	mov    edx,ebx
c0026a22:	29 fe                	sub    esi,edi
c0026a24:	19 c2                	sbb    edx,eax
c0026a26:	89 f1                	mov    ecx,esi
c0026a28:	89 c8                	mov    eax,ecx
c0026a2a:	83 c4 1c             	add    esp,0x1c
c0026a2d:	5b                   	pop    ebx
c0026a2e:	5e                   	pop    esi
c0026a2f:	5f                   	pop    edi
c0026a30:	5d                   	pop    ebp
c0026a31:	c3                   	ret    
c0026a32:	66 90                	xchg   ax,ax
c0026a34:	ba 20 00 00 00       	mov    edx,0x20
c0026a39:	29 ea                	sub    edx,ebp
c0026a3b:	89 e9                	mov    ecx,ebp
c0026a3d:	d3 e0                	shl    eax,cl
c0026a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026a43:	89 f8                	mov    eax,edi
c0026a45:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026a49:	88 d1                	mov    cl,dl
c0026a4b:	d3 e8                	shr    eax,cl
c0026a4d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026a51:	09 c1                	or     ecx,eax
c0026a53:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026a57:	89 e9                	mov    ecx,ebp
c0026a59:	d3 e7                	shl    edi,cl
c0026a5b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026a5f:	89 d8                	mov    eax,ebx
c0026a61:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026a65:	88 d1                	mov    cl,dl
c0026a67:	d3 e8                	shr    eax,cl
c0026a69:	89 c7                	mov    edi,eax
c0026a6b:	89 e9                	mov    ecx,ebp
c0026a6d:	d3 e3                	shl    ebx,cl
c0026a6f:	89 f0                	mov    eax,esi
c0026a71:	88 d1                	mov    cl,dl
c0026a73:	d3 e8                	shr    eax,cl
c0026a75:	09 d8                	or     eax,ebx
c0026a77:	89 e9                	mov    ecx,ebp
c0026a79:	d3 e6                	shl    esi,cl
c0026a7b:	89 f3                	mov    ebx,esi
c0026a7d:	89 fa                	mov    edx,edi
c0026a7f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026a83:	89 d1                	mov    ecx,edx
c0026a85:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026a89:	89 c6                	mov    esi,eax
c0026a8b:	89 d7                	mov    edi,edx
c0026a8d:	39 d1                	cmp    ecx,edx
c0026a8f:	72 27                	jb     c0026ab8 <__umoddi3+0x10c>
c0026a91:	74 21                	je     c0026ab4 <__umoddi3+0x108>
c0026a93:	89 ca                	mov    edx,ecx
c0026a95:	29 f3                	sub    ebx,esi
c0026a97:	19 fa                	sbb    edx,edi
c0026a99:	89 d0                	mov    eax,edx
c0026a9b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026a9f:	d3 e0                	shl    eax,cl
c0026aa1:	89 e9                	mov    ecx,ebp
c0026aa3:	d3 eb                	shr    ebx,cl
c0026aa5:	09 d8                	or     eax,ebx
c0026aa7:	d3 ea                	shr    edx,cl
c0026aa9:	83 c4 1c             	add    esp,0x1c
c0026aac:	5b                   	pop    ebx
c0026aad:	5e                   	pop    esi
c0026aae:	5f                   	pop    edi
c0026aaf:	5d                   	pop    ebp
c0026ab0:	c3                   	ret    
c0026ab1:	8d 76 00             	lea    esi,[esi+0x0]
c0026ab4:	39 c3                	cmp    ebx,eax
c0026ab6:	73 db                	jae    c0026a93 <__umoddi3+0xe7>
c0026ab8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026abc:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026ac0:	89 d7                	mov    edi,edx
c0026ac2:	89 c6                	mov    esi,eax
c0026ac4:	eb cd                	jmp    c0026a93 <__umoddi3+0xe7>

c0026ac6 <__addsf3>:
c0026ac6:	55                   	push   ebp
c0026ac7:	89 e5                	mov    ebp,esp
c0026ac9:	57                   	push   edi
c0026aca:	56                   	push   esi
c0026acb:	53                   	push   ebx
c0026acc:	83 ec 08             	sub    esp,0x8
c0026acf:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026ad2:	89 fa                	mov    edx,edi
c0026ad4:	89 f8                	mov    eax,edi
c0026ad6:	c1 f8 17             	sar    eax,0x17
c0026ad9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026adc:	c1 e2 08             	shl    edx,0x8
c0026adf:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026ae5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026ae8:	89 de                	mov    esi,ebx
c0026aea:	c1 fe 17             	sar    esi,0x17
c0026aed:	c1 e3 08             	shl    ebx,0x8
c0026af0:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026af6:	31 f0                	xor    eax,esi
c0026af8:	0f 88 3b 01 00 00    	js     c0026c39 <__addsf3+0x173>
c0026afe:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026b01:	29 f1                	sub    ecx,esi
c0026b03:	85 c9                	test   ecx,ecx
c0026b05:	7e 54                	jle    c0026b5b <__addsf3+0x95>
c0026b07:	89 f0                	mov    eax,esi
c0026b09:	84 c0                	test   al,al
c0026b0b:	75 10                	jne    c0026b1d <__addsf3+0x57>
c0026b0d:	85 db                	test   ebx,ebx
c0026b0f:	0f 84 aa 02 00 00    	je     c0026dbf <__addsf3+0x2f9>
c0026b15:	49                   	dec    ecx
c0026b16:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026b19:	74 38                	je     c0026b53 <__addsf3+0x8d>
c0026b1b:	eb 13                	jmp    c0026b30 <__addsf3+0x6a>
c0026b1d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026b20:	f7 d0                	not    eax
c0026b22:	84 c0                	test   al,al
c0026b24:	0f 84 95 02 00 00    	je     c0026dbf <__addsf3+0x2f9>
c0026b2a:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026b30:	83 f9 1f             	cmp    ecx,0x1f
c0026b33:	0f 8f 86 02 00 00    	jg     c0026dbf <__addsf3+0x2f9>
c0026b39:	89 de                	mov    esi,ebx
c0026b3b:	d3 ee                	shr    esi,cl
c0026b3d:	b8 20 00 00 00       	mov    eax,0x20
c0026b42:	29 c8                	sub    eax,ecx
c0026b44:	89 c1                	mov    ecx,eax
c0026b46:	d3 e3                	shl    ebx,cl
c0026b48:	31 c0                	xor    eax,eax
c0026b4a:	85 db                	test   ebx,ebx
c0026b4c:	0f 95 c0             	setne  al
c0026b4f:	09 f0                	or     eax,esi
c0026b51:	01 d0                	add    eax,edx
c0026b53:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026b56:	e9 b6 00 00 00       	jmp    c0026c11 <__addsf3+0x14b>
c0026b5b:	74 5c                	je     c0026bb9 <__addsf3+0xf3>
c0026b5d:	89 f1                	mov    ecx,esi
c0026b5f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026b62:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026b65:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026b69:	75 14                	jne    c0026b7f <__addsf3+0xb9>
c0026b6b:	85 d2                	test   edx,edx
c0026b6d:	0f 84 4c 02 00 00    	je     c0026dbf <__addsf3+0x2f9>
c0026b73:	49                   	dec    ecx
c0026b74:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026b77:	0f 84 94 00 00 00    	je     c0026c11 <__addsf3+0x14b>
c0026b7d:	eb 12                	jmp    c0026b91 <__addsf3+0xcb>
c0026b7f:	89 f0                	mov    eax,esi
c0026b81:	f7 d0                	not    eax
c0026b83:	84 c0                	test   al,al
c0026b85:	0f 84 34 02 00 00    	je     c0026dbf <__addsf3+0x2f9>
c0026b8b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026b91:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026b94:	83 f9 1f             	cmp    ecx,0x1f
c0026b97:	0f 8f 22 02 00 00    	jg     c0026dbf <__addsf3+0x2f9>
c0026b9d:	89 d7                	mov    edi,edx
c0026b9f:	d3 ef                	shr    edi,cl
c0026ba1:	b8 20 00 00 00       	mov    eax,0x20
c0026ba6:	29 c8                	sub    eax,ecx
c0026ba8:	89 c1                	mov    ecx,eax
c0026baa:	d3 e2                	shl    edx,cl
c0026bac:	31 c0                	xor    eax,eax
c0026bae:	85 d2                	test   edx,edx
c0026bb0:	0f 95 c0             	setne  al
c0026bb3:	09 f8                	or     eax,edi
c0026bb5:	01 d8                	add    eax,ebx
c0026bb7:	eb 58                	jmp    c0026c11 <__addsf3+0x14b>
c0026bb9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026bbc:	8d 70 01             	lea    esi,[eax+0x1]
c0026bbf:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026bc5:	75 32                	jne    c0026bf9 <__addsf3+0x133>
c0026bc7:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026bcb:	75 1f                	jne    c0026bec <__addsf3+0x126>
c0026bcd:	85 d2                	test   edx,edx
c0026bcf:	0f 84 e0 01 00 00    	je     c0026db5 <__addsf3+0x2ef>
c0026bd5:	85 db                	test   ebx,ebx
c0026bd7:	0f 84 e2 01 00 00    	je     c0026dbf <__addsf3+0x2f9>
c0026bdd:	89 d0                	mov    eax,edx
c0026bdf:	01 d8                	add    eax,ebx
c0026be1:	0f 89 a9 01 00 00    	jns    c0026d90 <__addsf3+0x2ca>
c0026be7:	e9 9d 01 00 00       	jmp    c0026d89 <__addsf3+0x2c3>
c0026bec:	85 d2                	test   edx,edx
c0026bee:	0f 85 cb 01 00 00    	jne    c0026dbf <__addsf3+0x2f9>
c0026bf4:	e9 bc 01 00 00       	jmp    c0026db5 <__addsf3+0x2ef>
c0026bf9:	31 c0                	xor    eax,eax
c0026bfb:	89 f1                	mov    ecx,esi
c0026bfd:	f7 d1                	not    ecx
c0026bff:	84 c9                	test   cl,cl
c0026c01:	0f 84 90 01 00 00    	je     c0026d97 <__addsf3+0x2d1>
c0026c07:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026c0a:	d1 e8                	shr    eax,1
c0026c0c:	e9 86 01 00 00       	jmp    c0026d97 <__addsf3+0x2d1>
c0026c11:	85 c0                	test   eax,eax
c0026c13:	0f 89 7e 01 00 00    	jns    c0026d97 <__addsf3+0x2d1>
c0026c19:	46                   	inc    esi
c0026c1a:	89 f2                	mov    edx,esi
c0026c1c:	f7 d2                	not    edx
c0026c1e:	84 d2                	test   dl,dl
c0026c20:	0f 84 6f 01 00 00    	je     c0026d95 <__addsf3+0x2cf>
c0026c26:	89 c2                	mov    edx,eax
c0026c28:	83 e2 01             	and    edx,0x1
c0026c2b:	d1 e8                	shr    eax,1
c0026c2d:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026c32:	09 d0                	or     eax,edx
c0026c34:	e9 5e 01 00 00       	jmp    c0026d97 <__addsf3+0x2d1>
c0026c39:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026c3d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026c40:	89 f0                	mov    eax,esi
c0026c42:	0f b6 c0             	movzx  eax,al
c0026c45:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026c48:	29 c1                	sub    ecx,eax
c0026c4a:	85 c9                	test   ecx,ecx
c0026c4c:	7e 55                	jle    c0026ca3 <__addsf3+0x1dd>
c0026c4e:	85 c0                	test   eax,eax
c0026c50:	75 11                	jne    c0026c63 <__addsf3+0x19d>
c0026c52:	85 db                	test   ebx,ebx
c0026c54:	0f 84 65 01 00 00    	je     c0026dbf <__addsf3+0x2f9>
c0026c5a:	49                   	dec    ecx
c0026c5b:	75 19                	jne    c0026c76 <__addsf3+0x1b0>
c0026c5d:	89 d0                	mov    eax,edx
c0026c5f:	29 d8                	sub    eax,ebx
c0026c61:	eb 38                	jmp    c0026c9b <__addsf3+0x1d5>
c0026c63:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026c66:	f7 d0                	not    eax
c0026c68:	84 c0                	test   al,al
c0026c6a:	0f 84 4f 01 00 00    	je     c0026dbf <__addsf3+0x2f9>
c0026c70:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026c76:	83 f9 1f             	cmp    ecx,0x1f
c0026c79:	0f 8f 40 01 00 00    	jg     c0026dbf <__addsf3+0x2f9>
c0026c7f:	89 de                	mov    esi,ebx
c0026c81:	d3 ee                	shr    esi,cl
c0026c83:	b8 20 00 00 00       	mov    eax,0x20
c0026c88:	29 c8                	sub    eax,ecx
c0026c8a:	89 c1                	mov    ecx,eax
c0026c8c:	d3 e3                	shl    ebx,cl
c0026c8e:	31 c0                	xor    eax,eax
c0026c90:	85 db                	test   ebx,ebx
c0026c92:	0f 95 c0             	setne  al
c0026c95:	09 f0                	or     eax,esi
c0026c97:	29 c2                	sub    edx,eax
c0026c99:	89 d0                	mov    eax,edx
c0026c9b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026c9e:	e9 af 00 00 00       	jmp    c0026d52 <__addsf3+0x28c>
c0026ca3:	74 5c                	je     c0026d01 <__addsf3+0x23b>
c0026ca5:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026ca8:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026cab:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026caf:	75 14                	jne    c0026cc5 <__addsf3+0x1ff>
c0026cb1:	85 d2                	test   edx,edx
c0026cb3:	0f 84 06 01 00 00    	je     c0026dbf <__addsf3+0x2f9>
c0026cb9:	48                   	dec    eax
c0026cba:	75 1b                	jne    c0026cd7 <__addsf3+0x211>
c0026cbc:	89 d8                	mov    eax,ebx
c0026cbe:	29 d0                	sub    eax,edx
c0026cc0:	e9 8d 00 00 00       	jmp    c0026d52 <__addsf3+0x28c>
c0026cc5:	89 f1                	mov    ecx,esi
c0026cc7:	f7 d1                	not    ecx
c0026cc9:	84 c9                	test   cl,cl
c0026ccb:	0f 84 ee 00 00 00    	je     c0026dbf <__addsf3+0x2f9>
c0026cd1:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026cd7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026cda:	83 f8 1f             	cmp    eax,0x1f
c0026cdd:	0f 8f dc 00 00 00    	jg     c0026dbf <__addsf3+0x2f9>
c0026ce3:	89 d7                	mov    edi,edx
c0026ce5:	88 c1                	mov    cl,al
c0026ce7:	d3 ef                	shr    edi,cl
c0026ce9:	b9 20 00 00 00       	mov    ecx,0x20
c0026cee:	29 c1                	sub    ecx,eax
c0026cf0:	d3 e2                	shl    edx,cl
c0026cf2:	31 c0                	xor    eax,eax
c0026cf4:	85 d2                	test   edx,edx
c0026cf6:	0f 95 c0             	setne  al
c0026cf9:	09 f8                	or     eax,edi
c0026cfb:	29 c3                	sub    ebx,eax
c0026cfd:	89 d8                	mov    eax,ebx
c0026cff:	eb 51                	jmp    c0026d52 <__addsf3+0x28c>
c0026d01:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026d04:	40                   	inc    eax
c0026d05:	a8 fe                	test   al,0xfe
c0026d07:	75 3d                	jne    c0026d46 <__addsf3+0x280>
c0026d09:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026d0d:	0f 85 a7 00 00 00    	jne    c0026dba <__addsf3+0x2f4>
c0026d13:	85 d2                	test   edx,edx
c0026d15:	75 12                	jne    c0026d29 <__addsf3+0x263>
c0026d17:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d1a:	85 db                	test   ebx,ebx
c0026d1c:	0f 85 9d 00 00 00    	jne    c0026dbf <__addsf3+0x2f9>
c0026d22:	31 ff                	xor    edi,edi
c0026d24:	e9 96 00 00 00       	jmp    c0026dbf <__addsf3+0x2f9>
c0026d29:	85 db                	test   ebx,ebx
c0026d2b:	0f 84 8e 00 00 00    	je     c0026dbf <__addsf3+0x2f9>
c0026d31:	89 d0                	mov    eax,edx
c0026d33:	29 d8                	sub    eax,ebx
c0026d35:	79 06                	jns    c0026d3d <__addsf3+0x277>
c0026d37:	89 d8                	mov    eax,ebx
c0026d39:	29 d0                	sub    eax,edx
c0026d3b:	eb 5a                	jmp    c0026d97 <__addsf3+0x2d1>
c0026d3d:	bf 00 00 00 00       	mov    edi,0x0
c0026d42:	74 7b                	je     c0026dbf <__addsf3+0x2f9>
c0026d44:	eb 4a                	jmp    c0026d90 <__addsf3+0x2ca>
c0026d46:	89 d0                	mov    eax,edx
c0026d48:	29 d8                	sub    eax,ebx
c0026d4a:	79 12                	jns    c0026d5e <__addsf3+0x298>
c0026d4c:	89 d8                	mov    eax,ebx
c0026d4e:	29 d0                	sub    eax,edx
c0026d50:	eb 09                	jmp    c0026d5b <__addsf3+0x295>
c0026d52:	85 c0                	test   eax,eax
c0026d54:	79 41                	jns    c0026d97 <__addsf3+0x2d1>
c0026d56:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026d5b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026d5e:	31 f6                	xor    esi,esi
c0026d60:	85 c0                	test   eax,eax
c0026d62:	74 33                	je     c0026d97 <__addsf3+0x2d1>
c0026d64:	0f bd c8             	bsr    ecx,eax
c0026d67:	83 f1 1f             	xor    ecx,0x1f
c0026d6a:	d3 e0                	shl    eax,cl
c0026d6c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026d70:	39 ca                	cmp    edx,ecx
c0026d72:	7f 10                	jg     c0026d84 <__addsf3+0x2be>
c0026d74:	29 d1                	sub    ecx,edx
c0026d76:	41                   	inc    ecx
c0026d77:	d3 e8                	shr    eax,cl
c0026d79:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026d7c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026d82:	eb 13                	jmp    c0026d97 <__addsf3+0x2d1>
c0026d84:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026d87:	29 ce                	sub    esi,ecx
c0026d89:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026d8e:	eb 07                	jmp    c0026d97 <__addsf3+0x2d1>
c0026d90:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026d93:	eb 02                	jmp    c0026d97 <__addsf3+0x2d1>
c0026d95:	31 c0                	xor    eax,eax
c0026d97:	89 c2                	mov    edx,eax
c0026d99:	c1 ea 08             	shr    edx,0x8
c0026d9c:	a8 7f                	test   al,0x7f
c0026d9e:	0f 95 c1             	setne  cl
c0026da1:	09 d1                	or     ecx,edx
c0026da3:	83 e1 01             	and    ecx,0x1
c0026da6:	c1 e8 07             	shr    eax,0x7
c0026da9:	21 c8                	and    eax,ecx
c0026dab:	c1 e6 17             	shl    esi,0x17
c0026dae:	09 d6                	or     esi,edx
c0026db0:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026db3:	eb 0a                	jmp    c0026dbf <__addsf3+0x2f9>
c0026db5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026db8:	eb 05                	jmp    c0026dbf <__addsf3+0x2f9>
c0026dba:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026dbf:	89 f8                	mov    eax,edi
c0026dc1:	5a                   	pop    edx
c0026dc2:	59                   	pop    ecx
c0026dc3:	5b                   	pop    ebx
c0026dc4:	5e                   	pop    esi
c0026dc5:	5f                   	pop    edi
c0026dc6:	5d                   	pop    ebp
c0026dc7:	c3                   	ret    

c0026dc8 <__subsf3>:
c0026dc8:	55                   	push   ebp
c0026dc9:	89 e5                	mov    ebp,esp
c0026dcb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026dce:	05 00 00 00 80       	add    eax,0x80000000
c0026dd3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026dd6:	5d                   	pop    ebp
c0026dd7:	e9 ea fc ff ff       	jmp    c0026ac6 <__addsf3>

c0026ddc <__negsf2>:
c0026ddc:	55                   	push   ebp
c0026ddd:	89 e5                	mov    ebp,esp
c0026ddf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026de2:	05 00 00 00 80       	add    eax,0x80000000
c0026de7:	5d                   	pop    ebp
c0026de8:	c3                   	ret    

c0026de9 <__mulsf3>:
c0026de9:	55                   	push   ebp
c0026dea:	89 e5                	mov    ebp,esp
c0026dec:	57                   	push   edi
c0026ded:	56                   	push   esi
c0026dee:	53                   	push   ebx
c0026def:	83 ec 1c             	sub    esp,0x1c
c0026df2:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026df5:	89 f0                	mov    eax,esi
c0026df7:	89 f1                	mov    ecx,esi
c0026df9:	c1 f9 17             	sar    ecx,0x17
c0026dfc:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026dff:	c1 e0 08             	shl    eax,0x8
c0026e02:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026e07:	89 c1                	mov    ecx,eax
c0026e09:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026e0c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026e0f:	89 c7                	mov    edi,eax
c0026e11:	c1 ff 17             	sar    edi,0x17
c0026e14:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026e18:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026e1b:	89 f8                	mov    eax,edi
c0026e1d:	0f b6 c0             	movzx  eax,al
c0026e20:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026e23:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026e27:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026e2a:	42                   	inc    edx
c0026e2b:	80 e2 fe             	and    dl,0xfe
c0026e2e:	75 7b                	jne    c0026eab <__mulsf3+0xc2>
c0026e30:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026e34:	74 54                	je     c0026e8a <__mulsf3+0xa1>
c0026e36:	85 c9                	test   ecx,ecx
c0026e38:	0f 85 64 01 00 00    	jne    c0026fa2 <__mulsf3+0x1b9>
c0026e3e:	8d 57 01             	lea    edx,[edi+0x1]
c0026e41:	80 e2 fe             	and    dl,0xfe
c0026e44:	75 1f                	jne    c0026e65 <__mulsf3+0x7c>
c0026e46:	85 c0                	test   eax,eax
c0026e48:	b8 00 00 00 00       	mov    eax,0x0
c0026e4d:	74 29                	je     c0026e78 <__mulsf3+0x8f>
c0026e4f:	53                   	push   ebx
c0026e50:	53                   	push   ebx
c0026e51:	50                   	push   eax
c0026e52:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e55:	e8 96 05 00 00       	call   c00273f0 <__nesf2>
c0026e5a:	83 c4 10             	add    esp,0x10
c0026e5d:	85 c0                	test   eax,eax
c0026e5f:	0f 85 3a 01 00 00    	jne    c0026f9f <__mulsf3+0x1b6>
c0026e65:	85 ff                	test   edi,edi
c0026e67:	0f 89 35 01 00 00    	jns    c0026fa2 <__mulsf3+0x1b9>
c0026e6d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026e73:	e9 2a 01 00 00       	jmp    c0026fa2 <__mulsf3+0x1b9>
c0026e78:	51                   	push   ecx
c0026e79:	51                   	push   ecx
c0026e7a:	50                   	push   eax
c0026e7b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e7e:	e8 6d 05 00 00       	call   c00273f0 <__nesf2>
c0026e83:	83 c4 10             	add    esp,0x10
c0026e86:	85 c0                	test   eax,eax
c0026e88:	eb 15                	jmp    c0026e9f <__mulsf3+0xb6>
c0026e8a:	85 c9                	test   ecx,ecx
c0026e8c:	74 0b                	je     c0026e99 <__mulsf3+0xb0>
c0026e8e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026e91:	01 c9                	add    ecx,ecx
c0026e93:	78 16                	js     c0026eab <__mulsf3+0xc2>
c0026e95:	89 d3                	mov    ebx,edx
c0026e97:	eb f5                	jmp    c0026e8e <__mulsf3+0xa5>
c0026e99:	89 f8                	mov    eax,edi
c0026e9b:	f7 d0                	not    eax
c0026e9d:	84 c0                	test   al,al
c0026e9f:	75 c4                	jne    c0026e65 <__mulsf3+0x7c>
c0026ea1:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026ea6:	e9 f7 00 00 00       	jmp    c0026fa2 <__mulsf3+0x1b9>
c0026eab:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026eae:	c1 e6 08             	shl    esi,0x8
c0026eb1:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026eb7:	8d 57 01             	lea    edx,[edi+0x1]
c0026eba:	80 e2 fe             	and    dl,0xfe
c0026ebd:	75 63                	jne    c0026f22 <__mulsf3+0x139>
c0026ebf:	85 c0                	test   eax,eax
c0026ec1:	74 2f                	je     c0026ef2 <__mulsf3+0x109>
c0026ec3:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026ec7:	0f 89 d2 00 00 00    	jns    c0026f9f <__mulsf3+0x1b6>
c0026ecd:	52                   	push   edx
c0026ece:	52                   	push   edx
c0026ecf:	6a 00                	push   0x0
c0026ed1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026ed4:	e8 dc 04 00 00       	call   c00273b5 <__eqsf2>
c0026ed9:	83 c4 10             	add    esp,0x10
c0026edc:	85 c0                	test   eax,eax
c0026ede:	0f 85 bb 00 00 00    	jne    c0026f9f <__mulsf3+0x1b6>
c0026ee4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026ee7:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026eed:	e9 b0 00 00 00       	jmp    c0026fa2 <__mulsf3+0x1b9>
c0026ef2:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026ef5:	50                   	push   eax
c0026ef6:	50                   	push   eax
c0026ef7:	6a 00                	push   0x0
c0026ef9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026efc:	e8 b4 04 00 00       	call   c00273b5 <__eqsf2>
c0026f01:	83 c4 10             	add    esp,0x10
c0026f04:	85 c0                	test   eax,eax
c0026f06:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026f09:	75 0c                	jne    c0026f17 <__mulsf3+0x12e>
c0026f0b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026f0f:	0f 89 8a 00 00 00    	jns    c0026f9f <__mulsf3+0x1b6>
c0026f15:	eb cd                	jmp    c0026ee4 <__mulsf3+0xfb>
c0026f17:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026f1a:	01 f6                	add    esi,esi
c0026f1c:	78 04                	js     c0026f22 <__mulsf3+0x139>
c0026f1e:	89 c3                	mov    ebx,eax
c0026f20:	eb f5                	jmp    c0026f17 <__mulsf3+0x12e>
c0026f22:	89 c8                	mov    eax,ecx
c0026f24:	0d 00 00 00 80       	or     eax,0x80000000
c0026f29:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026f2f:	f7 e6                	mul    esi
c0026f31:	85 c0                	test   eax,eax
c0026f33:	0f 95 c0             	setne  al
c0026f36:	0f b6 c0             	movzx  eax,al
c0026f39:	09 c2                	or     edx,eax
c0026f3b:	78 03                	js     c0026f40 <__mulsf3+0x157>
c0026f3d:	01 d2                	add    edx,edx
c0026f3f:	4b                   	dec    ebx
c0026f40:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0026f46:	7f 22                	jg     c0026f6a <__mulsf3+0x181>
c0026f48:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026f4e:	85 db                	test   ebx,ebx
c0026f50:	7f 23                	jg     c0026f75 <__mulsf3+0x18c>
c0026f52:	83 fb e9             	cmp    ebx,0xffffffe9
c0026f55:	7c 1a                	jl     c0026f71 <__mulsf3+0x188>
c0026f57:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026f5d:	b9 01 00 00 00       	mov    ecx,0x1
c0026f62:	29 d9                	sub    ecx,ebx
c0026f64:	d3 ea                	shr    edx,cl
c0026f66:	31 db                	xor    ebx,ebx
c0026f68:	eb 0b                	jmp    c0026f75 <__mulsf3+0x18c>
c0026f6a:	bb ff 00 00 00       	mov    ebx,0xff
c0026f6f:	eb 02                	jmp    c0026f73 <__mulsf3+0x18a>
c0026f71:	31 db                	xor    ebx,ebx
c0026f73:	31 d2                	xor    edx,edx
c0026f75:	89 d0                	mov    eax,edx
c0026f77:	c1 e8 08             	shr    eax,0x8
c0026f7a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026f7d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026f83:	09 fb                	or     ebx,edi
c0026f85:	c1 e3 17             	shl    ebx,0x17
c0026f88:	09 c3                	or     ebx,eax
c0026f8a:	f6 c2 7f             	test   dl,0x7f
c0026f8d:	0f 95 c1             	setne  cl
c0026f90:	09 c8                	or     eax,ecx
c0026f92:	83 e0 01             	and    eax,0x1
c0026f95:	c1 ea 07             	shr    edx,0x7
c0026f98:	21 c2                	and    edx,eax
c0026f9a:	8d 34 13             	lea    esi,[ebx+edx*1]
c0026f9d:	eb 03                	jmp    c0026fa2 <__mulsf3+0x1b9>
c0026f9f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0026fa2:	89 f0                	mov    eax,esi
c0026fa4:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026fa7:	5b                   	pop    ebx
c0026fa8:	5e                   	pop    esi
c0026fa9:	5f                   	pop    edi
c0026faa:	5d                   	pop    ebp
c0026fab:	c3                   	ret    

c0026fac <__divsf3>:
c0026fac:	55                   	push   ebp
c0026fad:	89 e5                	mov    ebp,esp
c0026faf:	57                   	push   edi
c0026fb0:	56                   	push   esi
c0026fb1:	53                   	push   ebx
c0026fb2:	83 ec 1c             	sub    esp,0x1c
c0026fb5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026fb8:	89 d8                	mov    eax,ebx
c0026fba:	89 d9                	mov    ecx,ebx
c0026fbc:	c1 f9 17             	sar    ecx,0x17
c0026fbf:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026fc2:	c1 e0 08             	shl    eax,0x8
c0026fc5:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026fca:	89 c1                	mov    ecx,eax
c0026fcc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026fcf:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026fd2:	89 c7                	mov    edi,eax
c0026fd4:	c1 ff 17             	sar    edi,0x17
c0026fd7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026fdb:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026fde:	89 f8                	mov    eax,edi
c0026fe0:	0f b6 c0             	movzx  eax,al
c0026fe3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026fe6:	29 c6                	sub    esi,eax
c0026fe8:	83 c6 7f             	add    esi,0x7f
c0026feb:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026fee:	42                   	inc    edx
c0026fef:	80 e2 fe             	and    dl,0xfe
c0026ff2:	0f 85 9c 00 00 00    	jne    c0027094 <__divsf3+0xe8>
c0026ff8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026ffc:	74 33                	je     c0027031 <__divsf3+0x85>
c0026ffe:	85 c9                	test   ecx,ecx
c0027000:	0f 85 c7 01 00 00    	jne    c00271cd <__divsf3+0x221>
c0027006:	8d 57 01             	lea    edx,[edi+0x1]
c0027009:	80 e2 fe             	and    dl,0xfe
c002700c:	75 2f                	jne    c002703d <__divsf3+0x91>
c002700e:	85 c0                	test   eax,eax
c0027010:	74 2b                	je     c002703d <__divsf3+0x91>
c0027012:	51                   	push   ecx
c0027013:	51                   	push   ecx
c0027014:	6a 00                	push   0x0
c0027016:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027019:	e8 d2 03 00 00       	call   c00273f0 <__nesf2>
c002701e:	83 c4 10             	add    esp,0x10
c0027021:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027024:	85 c0                	test   eax,eax
c0027026:	0f 85 a1 01 00 00    	jne    c00271cd <__divsf3+0x221>
c002702c:	e9 92 01 00 00       	jmp    c00271c3 <__divsf3+0x217>
c0027031:	85 c9                	test   ecx,ecx
c0027033:	75 1b                	jne    c0027050 <__divsf3+0xa4>
c0027035:	8d 57 01             	lea    edx,[edi+0x1]
c0027038:	80 e2 fe             	and    dl,0xfe
c002703b:	74 1e                	je     c002705b <__divsf3+0xaf>
c002703d:	85 ff                	test   edi,edi
c002703f:	0f 89 88 01 00 00    	jns    c00271cd <__divsf3+0x221>
c0027045:	81 c3 00 00 00 80    	add    ebx,0x80000000
c002704b:	e9 7d 01 00 00       	jmp    c00271cd <__divsf3+0x221>
c0027050:	8d 56 ff             	lea    edx,[esi-0x1]
c0027053:	01 c9                	add    ecx,ecx
c0027055:	78 3d                	js     c0027094 <__divsf3+0xe8>
c0027057:	89 d6                	mov    esi,edx
c0027059:	eb f5                	jmp    c0027050 <__divsf3+0xa4>
c002705b:	85 c0                	test   eax,eax
c002705d:	b8 00 00 00 00       	mov    eax,0x0
c0027062:	74 18                	je     c002707c <__divsf3+0xd0>
c0027064:	52                   	push   edx
c0027065:	52                   	push   edx
c0027066:	50                   	push   eax
c0027067:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002706a:	e8 81 03 00 00       	call   c00273f0 <__nesf2>
c002706f:	83 c4 10             	add    esp,0x10
c0027072:	85 c0                	test   eax,eax
c0027074:	0f 85 50 01 00 00    	jne    c00271ca <__divsf3+0x21e>
c002707a:	eb c1                	jmp    c002703d <__divsf3+0x91>
c002707c:	56                   	push   esi
c002707d:	56                   	push   esi
c002707e:	50                   	push   eax
c002707f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027082:	e8 69 03 00 00       	call   c00273f0 <__nesf2>
c0027087:	83 c4 10             	add    esp,0x10
c002708a:	85 c0                	test   eax,eax
c002708c:	0f 84 31 01 00 00    	je     c00271c3 <__divsf3+0x217>
c0027092:	eb a9                	jmp    c002703d <__divsf3+0x91>
c0027094:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0027097:	c1 e3 08             	shl    ebx,0x8
c002709a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00270a0:	8d 57 01             	lea    edx,[edi+0x1]
c00270a3:	80 e2 fe             	and    dl,0xfe
c00270a6:	75 71                	jne    c0027119 <__divsf3+0x16d>
c00270a8:	85 c0                	test   eax,eax
c00270aa:	ba 00 00 00 00       	mov    edx,0x0
c00270af:	74 2f                	je     c00270e0 <__divsf3+0x134>
c00270b1:	51                   	push   ecx
c00270b2:	51                   	push   ecx
c00270b3:	52                   	push   edx
c00270b4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00270b7:	e8 f9 02 00 00       	call   c00273b5 <__eqsf2>
c00270bc:	83 c4 10             	add    esp,0x10
c00270bf:	85 c0                	test   eax,eax
c00270c1:	0f 85 03 01 00 00    	jne    c00271ca <__divsf3+0x21e>
c00270c7:	31 d2                	xor    edx,edx
c00270c9:	89 d3                	mov    ebx,edx
c00270cb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00270ce:	31 f8                	xor    eax,edi
c00270d0:	0f 89 f7 00 00 00    	jns    c00271cd <__divsf3+0x221>
c00270d6:	bb 00 00 00 80       	mov    ebx,0x80000000
c00270db:	e9 ed 00 00 00       	jmp    c00271cd <__divsf3+0x221>
c00270e0:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00270e3:	50                   	push   eax
c00270e4:	50                   	push   eax
c00270e5:	52                   	push   edx
c00270e6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00270e9:	e8 c7 02 00 00       	call   c00273b5 <__eqsf2>
c00270ee:	83 c4 10             	add    esp,0x10
c00270f1:	85 c0                	test   eax,eax
c00270f3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00270f6:	75 16                	jne    c002710e <__divsf3+0x162>
c00270f8:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00270fb:	31 fb                	xor    ebx,edi
c00270fd:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0027103:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027109:	e9 bf 00 00 00       	jmp    c00271cd <__divsf3+0x221>
c002710e:	8d 46 01             	lea    eax,[esi+0x1]
c0027111:	01 db                	add    ebx,ebx
c0027113:	78 04                	js     c0027119 <__divsf3+0x16d>
c0027115:	89 c6                	mov    esi,eax
c0027117:	eb f5                	jmp    c002710e <__divsf3+0x162>
c0027119:	89 c8                	mov    eax,ecx
c002711b:	0d 00 00 00 80       	or     eax,0x80000000
c0027120:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027126:	31 d2                	xor    edx,edx
c0027128:	39 d8                	cmp    eax,ebx
c002712a:	72 07                	jb     c0027133 <__divsf3+0x187>
c002712c:	29 d8                	sub    eax,ebx
c002712e:	ba 01 00 00 00       	mov    edx,0x1
c0027133:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c002713a:	01 d2                	add    edx,edx
c002713c:	89 c1                	mov    ecx,eax
c002713e:	01 c0                	add    eax,eax
c0027140:	85 c9                	test   ecx,ecx
c0027142:	78 04                	js     c0027148 <__divsf3+0x19c>
c0027144:	39 c3                	cmp    ebx,eax
c0027146:	77 05                	ja     c002714d <__divsf3+0x1a1>
c0027148:	29 d8                	sub    eax,ebx
c002714a:	83 ca 01             	or     edx,0x1
c002714d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027150:	75 e8                	jne    c002713a <__divsf3+0x18e>
c0027152:	85 c0                	test   eax,eax
c0027154:	0f 95 c0             	setne  al
c0027157:	0f b6 c0             	movzx  eax,al
c002715a:	c1 e2 06             	shl    edx,0x6
c002715d:	09 c2                	or     edx,eax
c002715f:	78 03                	js     c0027164 <__divsf3+0x1b8>
c0027161:	01 d2                	add    edx,edx
c0027163:	4e                   	dec    esi
c0027164:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002716a:	7f 22                	jg     c002718e <__divsf3+0x1e2>
c002716c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027172:	85 f6                	test   esi,esi
c0027174:	7f 23                	jg     c0027199 <__divsf3+0x1ed>
c0027176:	83 fe e9             	cmp    esi,0xffffffe9
c0027179:	7c 1a                	jl     c0027195 <__divsf3+0x1e9>
c002717b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027181:	b9 01 00 00 00       	mov    ecx,0x1
c0027186:	29 f1                	sub    ecx,esi
c0027188:	d3 ea                	shr    edx,cl
c002718a:	31 f6                	xor    esi,esi
c002718c:	eb 0b                	jmp    c0027199 <__divsf3+0x1ed>
c002718e:	be ff 00 00 00       	mov    esi,0xff
c0027193:	eb 02                	jmp    c0027197 <__divsf3+0x1eb>
c0027195:	31 f6                	xor    esi,esi
c0027197:	31 d2                	xor    edx,edx
c0027199:	89 d0                	mov    eax,edx
c002719b:	c1 e8 08             	shr    eax,0x8
c002719e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00271a1:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00271a7:	09 fe                	or     esi,edi
c00271a9:	c1 e6 17             	shl    esi,0x17
c00271ac:	09 c6                	or     esi,eax
c00271ae:	f6 c2 7f             	test   dl,0x7f
c00271b1:	0f 95 c1             	setne  cl
c00271b4:	09 c8                	or     eax,ecx
c00271b6:	83 e0 01             	and    eax,0x1
c00271b9:	c1 ea 07             	shr    edx,0x7
c00271bc:	21 c2                	and    edx,eax
c00271be:	8d 1c 16             	lea    ebx,[esi+edx*1]
c00271c1:	eb 0a                	jmp    c00271cd <__divsf3+0x221>
c00271c3:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c00271c8:	eb 03                	jmp    c00271cd <__divsf3+0x221>
c00271ca:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00271cd:	89 d8                	mov    eax,ebx
c00271cf:	8d 65 f4             	lea    esp,[ebp-0xc]
c00271d2:	5b                   	pop    ebx
c00271d3:	5e                   	pop    esi
c00271d4:	5f                   	pop    edi
c00271d5:	5d                   	pop    ebp
c00271d6:	c3                   	ret    

c00271d7 <__floatsisf>:
c00271d7:	55                   	push   ebp
c00271d8:	89 e5                	mov    ebp,esp
c00271da:	53                   	push   ebx
c00271db:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00271de:	85 d2                	test   edx,edx
c00271e0:	7e 2b                	jle    c002720d <__floatsisf+0x36>
c00271e2:	0f bd ca             	bsr    ecx,edx
c00271e5:	83 f1 1f             	xor    ecx,0x1f
c00271e8:	d3 e2                	shl    edx,cl
c00271ea:	89 d0                	mov    eax,edx
c00271ec:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00271f1:	89 c3                	mov    ebx,eax
c00271f3:	c1 eb 08             	shr    ebx,0x8
c00271f6:	80 e2 7f             	and    dl,0x7f
c00271f9:	0f 95 c2             	setne  dl
c00271fc:	09 da                	or     edx,ebx
c00271fe:	83 e2 01             	and    edx,0x1
c0027201:	c1 e8 07             	shr    eax,0x7
c0027204:	21 c2                	and    edx,eax
c0027206:	b8 9e 00 00 00       	mov    eax,0x9e
c002720b:	eb 32                	jmp    c002723f <__floatsisf+0x68>
c002720d:	b8 00 00 00 00       	mov    eax,0x0
c0027212:	74 34                	je     c0027248 <__floatsisf+0x71>
c0027214:	f7 da                	neg    edx
c0027216:	0f bd ca             	bsr    ecx,edx
c0027219:	83 f1 1f             	xor    ecx,0x1f
c002721c:	d3 e2                	shl    edx,cl
c002721e:	89 d0                	mov    eax,edx
c0027220:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027225:	89 c3                	mov    ebx,eax
c0027227:	c1 eb 08             	shr    ebx,0x8
c002722a:	80 e2 7f             	and    dl,0x7f
c002722d:	0f 95 c2             	setne  dl
c0027230:	09 da                	or     edx,ebx
c0027232:	83 e2 01             	and    edx,0x1
c0027235:	c1 e8 07             	shr    eax,0x7
c0027238:	21 c2                	and    edx,eax
c002723a:	b8 9e 01 00 00       	mov    eax,0x19e
c002723f:	29 c8                	sub    eax,ecx
c0027241:	c1 e0 17             	shl    eax,0x17
c0027244:	09 d8                	or     eax,ebx
c0027246:	01 d0                	add    eax,edx
c0027248:	5b                   	pop    ebx
c0027249:	5d                   	pop    ebp
c002724a:	c3                   	ret    

c002724b <__floatunsisf>:
c002724b:	55                   	push   ebp
c002724c:	89 e5                	mov    ebp,esp
c002724e:	53                   	push   ebx
c002724f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027252:	31 c0                	xor    eax,eax
c0027254:	85 d2                	test   edx,edx
c0027256:	74 32                	je     c002728a <__floatunsisf+0x3f>
c0027258:	0f bd ca             	bsr    ecx,edx
c002725b:	83 f1 1f             	xor    ecx,0x1f
c002725e:	d3 e2                	shl    edx,cl
c0027260:	89 d0                	mov    eax,edx
c0027262:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027267:	89 c3                	mov    ebx,eax
c0027269:	c1 eb 08             	shr    ebx,0x8
c002726c:	80 e2 7f             	and    dl,0x7f
c002726f:	0f 95 c2             	setne  dl
c0027272:	09 da                	or     edx,ebx
c0027274:	83 e2 01             	and    edx,0x1
c0027277:	c1 e8 07             	shr    eax,0x7
c002727a:	21 c2                	and    edx,eax
c002727c:	b8 9e 00 00 00       	mov    eax,0x9e
c0027281:	29 c8                	sub    eax,ecx
c0027283:	c1 e0 17             	shl    eax,0x17
c0027286:	09 d8                	or     eax,ebx
c0027288:	01 d0                	add    eax,edx
c002728a:	5b                   	pop    ebx
c002728b:	5d                   	pop    ebp
c002728c:	c3                   	ret    

c002728d <__fixsfsi>:
c002728d:	55                   	push   ebp
c002728e:	89 e5                	mov    ebp,esp
c0027290:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027293:	89 d1                	mov    ecx,edx
c0027295:	c1 e1 08             	shl    ecx,0x8
c0027298:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c002729e:	c1 fa 17             	sar    edx,0x17
c00272a1:	78 1c                	js     c00272bf <__fixsfsi+0x32>
c00272a3:	83 ea 7f             	sub    edx,0x7f
c00272a6:	31 c0                	xor    eax,eax
c00272a8:	83 fa 1e             	cmp    edx,0x1e
c00272ab:	77 40                	ja     c00272ed <__fixsfsi+0x60>
c00272ad:	89 c8                	mov    eax,ecx
c00272af:	0d 00 00 00 80       	or     eax,0x80000000
c00272b4:	b9 1f 00 00 00       	mov    ecx,0x1f
c00272b9:	29 d1                	sub    ecx,edx
c00272bb:	d3 e8                	shr    eax,cl
c00272bd:	eb 2e                	jmp    c00272ed <__fixsfsi+0x60>
c00272bf:	31 c0                	xor    eax,eax
c00272c1:	81 c2 81 00 00 00    	add    edx,0x81
c00272c7:	78 24                	js     c00272ed <__fixsfsi+0x60>
c00272c9:	83 fa 1e             	cmp    edx,0x1e
c00272cc:	7e 09                	jle    c00272d7 <__fixsfsi+0x4a>
c00272ce:	83 fa 1f             	cmp    edx,0x1f
c00272d1:	75 18                	jne    c00272eb <__fixsfsi+0x5e>
c00272d3:	85 c9                	test   ecx,ecx
c00272d5:	75 14                	jne    c00272eb <__fixsfsi+0x5e>
c00272d7:	89 c8                	mov    eax,ecx
c00272d9:	0d 00 00 00 80       	or     eax,0x80000000
c00272de:	b9 1f 00 00 00       	mov    ecx,0x1f
c00272e3:	29 d1                	sub    ecx,edx
c00272e5:	d3 e8                	shr    eax,cl
c00272e7:	f7 d8                	neg    eax
c00272e9:	eb 02                	jmp    c00272ed <__fixsfsi+0x60>
c00272eb:	31 c0                	xor    eax,eax
c00272ed:	5d                   	pop    ebp
c00272ee:	c3                   	ret    

c00272ef <__fixunssfsi>:
c00272ef:	55                   	push   ebp
c00272f0:	89 e5                	mov    ebp,esp
c00272f2:	53                   	push   ebx
c00272f3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00272f6:	89 d3                	mov    ebx,edx
c00272f8:	c1 fb 17             	sar    ebx,0x17
c00272fb:	83 eb 7f             	sub    ebx,0x7f
c00272fe:	31 c0                	xor    eax,eax
c0027300:	83 fb 1f             	cmp    ebx,0x1f
c0027303:	77 18                	ja     c002731d <__fixunssfsi+0x2e>
c0027305:	89 d0                	mov    eax,edx
c0027307:	c1 e0 08             	shl    eax,0x8
c002730a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002730f:	0d 00 00 00 80       	or     eax,0x80000000
c0027314:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027319:	29 d9                	sub    ecx,ebx
c002731b:	d3 e8                	shr    eax,cl
c002731d:	5b                   	pop    ebx
c002731e:	5d                   	pop    ebp
c002731f:	c3                   	ret    

c0027320 <__cmpsf2>:
c0027320:	55                   	push   ebp
c0027321:	89 e5                	mov    ebp,esp
c0027323:	57                   	push   edi
c0027324:	56                   	push   esi
c0027325:	53                   	push   ebx
c0027326:	83 ec 24             	sub    esp,0x24
c0027329:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002732c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002732f:	e8 4f 10 00 00       	call   c0028383 <__truncdfsf2>
c0027334:	5a                   	pop    edx
c0027335:	59                   	pop    ecx
c0027336:	89 c3                	mov    ebx,eax
c0027338:	c1 e8 17             	shr    eax,0x17
c002733b:	0f b6 f0             	movzx  esi,al
c002733e:	89 d8                	mov    eax,ebx
c0027340:	c1 e8 1f             	shr    eax,0x1f
c0027343:	31 c6                	xor    esi,eax
c0027345:	c1 e3 08             	shl    ebx,0x8
c0027348:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002734b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002734e:	e8 30 10 00 00       	call   c0028383 <__truncdfsf2>
c0027353:	83 c4 10             	add    esp,0x10
c0027356:	89 c1                	mov    ecx,eax
c0027358:	c1 e9 17             	shr    ecx,0x17
c002735b:	0f b6 c9             	movzx  ecx,cl
c002735e:	89 c7                	mov    edi,eax
c0027360:	c1 ef 1f             	shr    edi,0x1f
c0027363:	89 ca                	mov    edx,ecx
c0027365:	31 fa                	xor    edx,edi
c0027367:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002736a:	c1 e0 08             	shl    eax,0x8
c002736d:	89 c2                	mov    edx,eax
c002736f:	89 d8                	mov    eax,ebx
c0027371:	09 d0                	or     eax,edx
c0027373:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027378:	09 f0                	or     eax,esi
c002737a:	75 08                	jne    c0027384 <__cmpsf2+0x64>
c002737c:	31 c0                	xor    eax,eax
c002737e:	39 f9                	cmp    ecx,edi
c0027380:	75 0c                	jne    c002738e <__cmpsf2+0x6e>
c0027382:	eb 29                	jmp    c00273ad <__cmpsf2+0x8d>
c0027384:	b8 01 00 00 00       	mov    eax,0x1
c0027389:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002738c:	7f 1f                	jg     c00273ad <__cmpsf2+0x8d>
c002738e:	83 c8 ff             	or     eax,0xffffffff
c0027391:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027394:	7c 17                	jl     c00273ad <__cmpsf2+0x8d>
c0027396:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002739c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00273a2:	b8 01 00 00 00       	mov    eax,0x1
c00273a7:	39 d3                	cmp    ebx,edx
c00273a9:	77 02                	ja     c00273ad <__cmpsf2+0x8d>
c00273ab:	19 c0                	sbb    eax,eax
c00273ad:	8d 65 f4             	lea    esp,[ebp-0xc]
c00273b0:	5b                   	pop    ebx
c00273b1:	5e                   	pop    esi
c00273b2:	5f                   	pop    edi
c00273b3:	5d                   	pop    ebp
c00273b4:	c3                   	ret    

c00273b5 <__eqsf2>:
c00273b5:	55                   	push   ebp
c00273b6:	89 e5                	mov    ebp,esp
c00273b8:	83 ec 24             	sub    esp,0x24
c00273bb:	6a 01                	push   0x1
c00273bd:	83 ec 0c             	sub    esp,0xc
c00273c0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00273c3:	e8 df 10 00 00       	call   c00284a7 <__extendsfdf2>
c00273c8:	83 c4 10             	add    esp,0x10
c00273cb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00273ce:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00273d1:	52                   	push   edx
c00273d2:	50                   	push   eax
c00273d3:	50                   	push   eax
c00273d4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00273d7:	e8 cb 10 00 00       	call   c00284a7 <__extendsfdf2>
c00273dc:	59                   	pop    ecx
c00273dd:	59                   	pop    ecx
c00273de:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00273e1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00273e4:	52                   	push   edx
c00273e5:	50                   	push   eax
c00273e6:	e8 35 ff ff ff       	call   c0027320 <__cmpsf2>
c00273eb:	83 c4 20             	add    esp,0x20
c00273ee:	c9                   	leave  
c00273ef:	c3                   	ret    

c00273f0 <__nesf2>:
c00273f0:	eb c3                	jmp    c00273b5 <__eqsf2>

c00273f2 <__gtsf2>:
c00273f2:	55                   	push   ebp
c00273f3:	89 e5                	mov    ebp,esp
c00273f5:	83 ec 24             	sub    esp,0x24
c00273f8:	6a ff                	push   0xffffffff
c00273fa:	83 ec 0c             	sub    esp,0xc
c00273fd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027400:	e8 a2 10 00 00       	call   c00284a7 <__extendsfdf2>
c0027405:	83 c4 10             	add    esp,0x10
c0027408:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002740b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002740e:	52                   	push   edx
c002740f:	50                   	push   eax
c0027410:	50                   	push   eax
c0027411:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027414:	e8 8e 10 00 00       	call   c00284a7 <__extendsfdf2>
c0027419:	59                   	pop    ecx
c002741a:	59                   	pop    ecx
c002741b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002741e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027421:	52                   	push   edx
c0027422:	50                   	push   eax
c0027423:	e8 f8 fe ff ff       	call   c0027320 <__cmpsf2>
c0027428:	83 c4 20             	add    esp,0x20
c002742b:	c9                   	leave  
c002742c:	c3                   	ret    

c002742d <__gesf2>:
c002742d:	eb c3                	jmp    c00273f2 <__gtsf2>

c002742f <__ltsf2>:
c002742f:	eb 84                	jmp    c00273b5 <__eqsf2>

c0027431 <__lesf2>:
c0027431:	eb 82                	jmp    c00273b5 <__eqsf2>

c0027433 <__adddf3>:
c0027433:	55                   	push   ebp
c0027434:	89 e5                	mov    ebp,esp
c0027436:	57                   	push   edi
c0027437:	56                   	push   esi
c0027438:	53                   	push   ebx
c0027439:	83 ec 24             	sub    esp,0x24
c002743c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002743f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027442:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027445:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027448:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002744b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002744e:	89 c8                	mov    eax,ecx
c0027450:	89 ce                	mov    esi,ecx
c0027452:	c1 fe 14             	sar    esi,0x14
c0027455:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027458:	89 fb                	mov    ebx,edi
c002745a:	89 fa                	mov    edx,edi
c002745c:	c1 e2 0b             	shl    edx,0xb
c002745f:	c1 e0 0b             	shl    eax,0xb
c0027462:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027467:	c1 eb 15             	shr    ebx,0x15
c002746a:	09 d8                	or     eax,ebx
c002746c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c002746f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027472:	c1 fe 14             	sar    esi,0x14
c0027475:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027478:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002747b:	89 f3                	mov    ebx,esi
c002747d:	c1 e3 0b             	shl    ebx,0xb
c0027480:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027483:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027486:	c1 e3 0b             	shl    ebx,0xb
c0027489:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c002748f:	c1 ee 15             	shr    esi,0x15
c0027492:	09 f3                	or     ebx,esi
c0027494:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027497:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002749a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c002749d:	0f 88 5f 02 00 00    	js     c0027702 <__adddf3+0x2cf>
c00274a3:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00274a6:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c00274a9:	85 db                	test   ebx,ebx
c00274ab:	0f 8e c7 00 00 00    	jle    c0027578 <__adddf3+0x145>
c00274b1:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c00274b8:	75 1a                	jne    c00274d4 <__adddf3+0xa1>
c00274ba:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00274bd:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00274c0:	0f 84 b2 05 00 00    	je     c0027a78 <__adddf3+0x645>
c00274c6:	4b                   	dec    ebx
c00274c7:	75 23                	jne    c00274ec <__adddf3+0xb9>
c00274c9:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00274cc:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00274cf:	e9 99 00 00 00       	jmp    c002756d <__adddf3+0x13a>
c00274d4:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00274d7:	f7 d6                	not    esi
c00274d9:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00274df:	0f 84 93 05 00 00    	je     c0027a78 <__adddf3+0x645>
c00274e5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00274ec:	83 fb 1f             	cmp    ebx,0x1f
c00274ef:	7e 42                	jle    c0027533 <__adddf3+0x100>
c00274f1:	83 fb 3f             	cmp    ebx,0x3f
c00274f4:	0f 8f 7e 05 00 00    	jg     c0027a78 <__adddf3+0x645>
c00274fa:	83 e3 1f             	and    ebx,0x1f
c00274fd:	89 d9                	mov    ecx,ebx
c00274ff:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027502:	d3 ef                	shr    edi,cl
c0027504:	31 db                	xor    ebx,ebx
c0027506:	85 c9                	test   ecx,ecx
c0027508:	74 15                	je     c002751f <__adddf3+0xec>
c002750a:	be 20 00 00 00       	mov    esi,0x20
c002750f:	29 ce                	sub    esi,ecx
c0027511:	89 f1                	mov    ecx,esi
c0027513:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027516:	d3 e6                	shl    esi,cl
c0027518:	31 db                	xor    ebx,ebx
c002751a:	85 f6                	test   esi,esi
c002751c:	0f 95 c3             	setne  bl
c002751f:	31 c9                	xor    ecx,ecx
c0027521:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027525:	0f 95 c1             	setne  cl
c0027528:	09 cf                	or     edi,ecx
c002752a:	09 fb                	or     ebx,edi
c002752c:	01 da                	add    edx,ebx
c002752e:	83 d0 00             	adc    eax,0x0
c0027531:	eb 3a                	jmp    c002756d <__adddf3+0x13a>
c0027533:	bf 20 00 00 00       	mov    edi,0x20
c0027538:	29 df                	sub    edi,ebx
c002753a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002753d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027540:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027543:	d3 e6                	shl    esi,cl
c0027545:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027548:	88 d9                	mov    cl,bl
c002754a:	d3 ef                	shr    edi,cl
c002754c:	09 fe                	or     esi,edi
c002754e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027551:	88 d9                	mov    cl,bl
c0027553:	d3 ef                	shr    edi,cl
c0027555:	89 fb                	mov    ebx,edi
c0027557:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002755a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002755d:	d3 e7                	shl    edi,cl
c002755f:	85 ff                	test   edi,edi
c0027561:	0f 95 c1             	setne  cl
c0027564:	0f b6 c9             	movzx  ecx,cl
c0027567:	09 ce                	or     esi,ecx
c0027569:	01 f2                	add    edx,esi
c002756b:	11 d8                	adc    eax,ebx
c002756d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027570:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027573:	e9 52 01 00 00       	jmp    c00276ca <__adddf3+0x297>
c0027578:	0f 84 d5 00 00 00    	je     c0027653 <__adddf3+0x220>
c002757e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027581:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027584:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027587:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002758a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027591:	75 20                	jne    c00275b3 <__adddf3+0x180>
c0027593:	89 d6                	mov    esi,edx
c0027595:	09 c6                	or     esi,eax
c0027597:	0f 84 db 04 00 00    	je     c0027a78 <__adddf3+0x645>
c002759d:	4b                   	dec    ebx
c002759e:	75 29                	jne    c00275c9 <__adddf3+0x196>
c00275a0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00275a3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00275a6:	01 d1                	add    ecx,edx
c00275a8:	11 c6                	adc    esi,eax
c00275aa:	89 f0                	mov    eax,esi
c00275ac:	89 ca                	mov    edx,ecx
c00275ae:	e9 17 01 00 00       	jmp    c00276ca <__adddf3+0x297>
c00275b3:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00275b6:	f7 d6                	not    esi
c00275b8:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00275be:	0f 84 b4 04 00 00    	je     c0027a78 <__adddf3+0x645>
c00275c4:	0d 00 00 00 80       	or     eax,0x80000000
c00275c9:	83 fb 1f             	cmp    ebx,0x1f
c00275cc:	7e 48                	jle    c0027616 <__adddf3+0x1e3>
c00275ce:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00275d1:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00275d4:	83 fb 3f             	cmp    ebx,0x3f
c00275d7:	0f 8f 9b 04 00 00    	jg     c0027a78 <__adddf3+0x645>
c00275dd:	83 e3 1f             	and    ebx,0x1f
c00275e0:	89 d9                	mov    ecx,ebx
c00275e2:	89 c7                	mov    edi,eax
c00275e4:	d3 ef                	shr    edi,cl
c00275e6:	31 db                	xor    ebx,ebx
c00275e8:	85 c9                	test   ecx,ecx
c00275ea:	74 12                	je     c00275fe <__adddf3+0x1cb>
c00275ec:	be 20 00 00 00       	mov    esi,0x20
c00275f1:	29 ce                	sub    esi,ecx
c00275f3:	89 f1                	mov    ecx,esi
c00275f5:	d3 e0                	shl    eax,cl
c00275f7:	31 db                	xor    ebx,ebx
c00275f9:	85 c0                	test   eax,eax
c00275fb:	0f 95 c3             	setne  bl
c00275fe:	31 c0                	xor    eax,eax
c0027600:	85 d2                	test   edx,edx
c0027602:	0f 95 c0             	setne  al
c0027605:	09 c7                	or     edi,eax
c0027607:	09 fb                	or     ebx,edi
c0027609:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002760c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002760f:	01 da                	add    edx,ebx
c0027611:	83 d6 00             	adc    esi,0x0
c0027614:	eb 39                	jmp    c002764f <__adddf3+0x21c>
c0027616:	be 20 00 00 00       	mov    esi,0x20
c002761b:	29 de                	sub    esi,ebx
c002761d:	89 c7                	mov    edi,eax
c002761f:	89 f1                	mov    ecx,esi
c0027621:	d3 e7                	shl    edi,cl
c0027623:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027626:	89 d7                	mov    edi,edx
c0027628:	88 d9                	mov    cl,bl
c002762a:	d3 ef                	shr    edi,cl
c002762c:	89 f9                	mov    ecx,edi
c002762e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027631:	09 cf                	or     edi,ecx
c0027633:	88 d9                	mov    cl,bl
c0027635:	d3 e8                	shr    eax,cl
c0027637:	89 f1                	mov    ecx,esi
c0027639:	d3 e2                	shl    edx,cl
c002763b:	85 d2                	test   edx,edx
c002763d:	0f 95 c2             	setne  dl
c0027640:	0f b6 d2             	movzx  edx,dl
c0027643:	09 d7                	or     edi,edx
c0027645:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027648:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002764b:	01 fa                	add    edx,edi
c002764d:	11 c6                	adc    esi,eax
c002764f:	89 f0                	mov    eax,esi
c0027651:	eb 77                	jmp    c00276ca <__adddf3+0x297>
c0027653:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027656:	46                   	inc    esi
c0027657:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002765a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027660:	75 41                	jne    c00276a3 <__adddf3+0x270>
c0027662:	89 d3                	mov    ebx,edx
c0027664:	09 c3                	or     ebx,eax
c0027666:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002766d:	75 27                	jne    c0027696 <__adddf3+0x263>
c002766f:	85 db                	test   ebx,ebx
c0027671:	0f 84 fb 03 00 00    	je     c0027a72 <__adddf3+0x63f>
c0027677:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002767a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002767d:	0f 84 f5 03 00 00    	je     c0027a78 <__adddf3+0x645>
c0027683:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027686:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027689:	85 c0                	test   eax,eax
c002768b:	0f 89 91 03 00 00    	jns    c0027a22 <__adddf3+0x5ef>
c0027691:	e9 85 03 00 00       	jmp    c0027a1b <__adddf3+0x5e8>
c0027696:	85 db                	test   ebx,ebx
c0027698:	0f 85 da 03 00 00    	jne    c0027a78 <__adddf3+0x645>
c002769e:	e9 cf 03 00 00       	jmp    c0027a72 <__adddf3+0x63f>
c00276a3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00276a6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00276a9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00276ac:	f7 d1                	not    ecx
c00276ae:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00276b4:	0f 84 70 03 00 00    	je     c0027a2a <__adddf3+0x5f7>
c00276ba:	d1 ea                	shr    edx,1
c00276bc:	89 c1                	mov    ecx,eax
c00276be:	c1 e1 1f             	shl    ecx,0x1f
c00276c1:	09 ca                	or     edx,ecx
c00276c3:	d1 e8                	shr    eax,1
c00276c5:	e9 6f 03 00 00       	jmp    c0027a39 <__adddf3+0x606>
c00276ca:	85 c0                	test   eax,eax
c00276cc:	0f 89 67 03 00 00    	jns    c0027a39 <__adddf3+0x606>
c00276d2:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00276d5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00276d8:	f7 d1                	not    ecx
c00276da:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00276e0:	0f 84 44 03 00 00    	je     c0027a2a <__adddf3+0x5f7>
c00276e6:	89 d1                	mov    ecx,edx
c00276e8:	d1 e9                	shr    ecx,1
c00276ea:	83 e2 01             	and    edx,0x1
c00276ed:	09 ca                	or     edx,ecx
c00276ef:	89 c1                	mov    ecx,eax
c00276f1:	c1 e1 1f             	shl    ecx,0x1f
c00276f4:	09 ca                	or     edx,ecx
c00276f6:	d1 e8                	shr    eax,1
c00276f8:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00276fd:	e9 37 03 00 00       	jmp    c0027a39 <__adddf3+0x606>
c0027702:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027705:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002770b:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c002770e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027711:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027717:	29 de                	sub    esi,ebx
c0027719:	85 f6                	test   esi,esi
c002771b:	0f 8e bd 00 00 00    	jle    c00277de <__adddf3+0x3ab>
c0027721:	85 db                	test   ebx,ebx
c0027723:	75 17                	jne    c002773c <__adddf3+0x309>
c0027725:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027728:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002772b:	0f 84 47 03 00 00    	je     c0027a78 <__adddf3+0x645>
c0027731:	4e                   	dec    esi
c0027732:	75 20                	jne    c0027754 <__adddf3+0x321>
c0027734:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027737:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002773a:	eb 5b                	jmp    c0027797 <__adddf3+0x364>
c002773c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002773f:	f7 d3                	not    ebx
c0027741:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027747:	0f 84 2b 03 00 00    	je     c0027a78 <__adddf3+0x645>
c002774d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027754:	83 fe 1f             	cmp    esi,0x1f
c0027757:	7e 49                	jle    c00277a2 <__adddf3+0x36f>
c0027759:	83 fe 3f             	cmp    esi,0x3f
c002775c:	0f 8f 16 03 00 00    	jg     c0027a78 <__adddf3+0x645>
c0027762:	83 e6 1f             	and    esi,0x1f
c0027765:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027768:	89 f1                	mov    ecx,esi
c002776a:	d3 ef                	shr    edi,cl
c002776c:	31 db                	xor    ebx,ebx
c002776e:	85 f6                	test   esi,esi
c0027770:	74 13                	je     c0027785 <__adddf3+0x352>
c0027772:	b9 20 00 00 00       	mov    ecx,0x20
c0027777:	29 f1                	sub    ecx,esi
c0027779:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002777c:	d3 e6                	shl    esi,cl
c002777e:	31 db                	xor    ebx,ebx
c0027780:	85 f6                	test   esi,esi
c0027782:	0f 95 c3             	setne  bl
c0027785:	31 c9                	xor    ecx,ecx
c0027787:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002778b:	0f 95 c1             	setne  cl
c002778e:	09 cf                	or     edi,ecx
c0027790:	09 fb                	or     ebx,edi
c0027792:	29 da                	sub    edx,ebx
c0027794:	83 d8 00             	sbb    eax,0x0
c0027797:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002779a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002779d:	e9 aa 01 00 00       	jmp    c002794c <__adddf3+0x519>
c00277a2:	bf 20 00 00 00       	mov    edi,0x20
c00277a7:	29 f7                	sub    edi,esi
c00277a9:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00277ac:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00277af:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00277b2:	d3 e3                	shl    ebx,cl
c00277b4:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00277b7:	89 f1                	mov    ecx,esi
c00277b9:	d3 ef                	shr    edi,cl
c00277bb:	09 fb                	or     ebx,edi
c00277bd:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00277c0:	89 f1                	mov    ecx,esi
c00277c2:	d3 ef                	shr    edi,cl
c00277c4:	89 fe                	mov    esi,edi
c00277c6:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00277c9:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00277cc:	d3 e7                	shl    edi,cl
c00277ce:	85 ff                	test   edi,edi
c00277d0:	0f 95 c1             	setne  cl
c00277d3:	0f b6 c9             	movzx  ecx,cl
c00277d6:	09 cb                	or     ebx,ecx
c00277d8:	29 da                	sub    edx,ebx
c00277da:	19 f0                	sbb    eax,esi
c00277dc:	eb b9                	jmp    c0027797 <__adddf3+0x364>
c00277de:	0f 84 cd 00 00 00    	je     c00278b1 <__adddf3+0x47e>
c00277e4:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00277e7:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00277ea:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00277ed:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00277f1:	75 1b                	jne    c002780e <__adddf3+0x3db>
c00277f3:	89 d6                	mov    esi,edx
c00277f5:	09 c6                	or     esi,eax
c00277f7:	0f 84 7b 02 00 00    	je     c0027a78 <__adddf3+0x645>
c00277fd:	4b                   	dec    ebx
c00277fe:	75 24                	jne    c0027824 <__adddf3+0x3f1>
c0027800:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027803:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027806:	29 d1                	sub    ecx,edx
c0027808:	19 c6                	sbb    esi,eax
c002780a:	89 ca                	mov    edx,ecx
c002780c:	eb 61                	jmp    c002786f <__adddf3+0x43c>
c002780e:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027811:	f7 d6                	not    esi
c0027813:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027819:	0f 84 59 02 00 00    	je     c0027a78 <__adddf3+0x645>
c002781f:	0d 00 00 00 80       	or     eax,0x80000000
c0027824:	83 fb 1f             	cmp    ebx,0x1f
c0027827:	7e 4d                	jle    c0027876 <__adddf3+0x443>
c0027829:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002782c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002782f:	83 fb 3f             	cmp    ebx,0x3f
c0027832:	0f 8f 40 02 00 00    	jg     c0027a78 <__adddf3+0x645>
c0027838:	83 e3 1f             	and    ebx,0x1f
c002783b:	89 d9                	mov    ecx,ebx
c002783d:	89 c7                	mov    edi,eax
c002783f:	d3 ef                	shr    edi,cl
c0027841:	31 db                	xor    ebx,ebx
c0027843:	85 c9                	test   ecx,ecx
c0027845:	74 12                	je     c0027859 <__adddf3+0x426>
c0027847:	be 20 00 00 00       	mov    esi,0x20
c002784c:	29 ce                	sub    esi,ecx
c002784e:	89 f1                	mov    ecx,esi
c0027850:	d3 e0                	shl    eax,cl
c0027852:	31 db                	xor    ebx,ebx
c0027854:	85 c0                	test   eax,eax
c0027856:	0f 95 c3             	setne  bl
c0027859:	31 c0                	xor    eax,eax
c002785b:	85 d2                	test   edx,edx
c002785d:	0f 95 c0             	setne  al
c0027860:	09 c7                	or     edi,eax
c0027862:	09 fb                	or     ebx,edi
c0027864:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027867:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002786a:	29 da                	sub    edx,ebx
c002786c:	83 de 00             	sbb    esi,0x0
c002786f:	89 f0                	mov    eax,esi
c0027871:	e9 d6 00 00 00       	jmp    c002794c <__adddf3+0x519>
c0027876:	be 20 00 00 00       	mov    esi,0x20
c002787b:	29 de                	sub    esi,ebx
c002787d:	89 c7                	mov    edi,eax
c002787f:	89 f1                	mov    ecx,esi
c0027881:	d3 e7                	shl    edi,cl
c0027883:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027886:	89 d7                	mov    edi,edx
c0027888:	88 d9                	mov    cl,bl
c002788a:	d3 ef                	shr    edi,cl
c002788c:	89 f9                	mov    ecx,edi
c002788e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027891:	09 cf                	or     edi,ecx
c0027893:	88 d9                	mov    cl,bl
c0027895:	d3 e8                	shr    eax,cl
c0027897:	89 f1                	mov    ecx,esi
c0027899:	d3 e2                	shl    edx,cl
c002789b:	85 d2                	test   edx,edx
c002789d:	0f 95 c2             	setne  dl
c00278a0:	0f b6 d2             	movzx  edx,dl
c00278a3:	09 d7                	or     edi,edx
c00278a5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00278a8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00278ab:	29 fa                	sub    edx,edi
c00278ad:	19 c6                	sbb    esi,eax
c00278af:	eb be                	jmp    c002786f <__adddf3+0x43c>
c00278b1:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00278b4:	8d 5e 01             	lea    ebx,[esi+0x1]
c00278b7:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00278bd:	75 6a                	jne    c0027929 <__adddf3+0x4f6>
c00278bf:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00278c3:	75 58                	jne    c002791d <__adddf3+0x4ea>
c00278c5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00278c8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00278cb:	89 d6                	mov    esi,edx
c00278cd:	09 c6                	or     esi,eax
c00278cf:	75 17                	jne    c00278e8 <__adddf3+0x4b5>
c00278d1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00278d4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00278d7:	85 db                	test   ebx,ebx
c00278d9:	0f 85 99 01 00 00    	jne    c0027a78 <__adddf3+0x645>
c00278df:	31 ff                	xor    edi,edi
c00278e1:	31 c9                	xor    ecx,ecx
c00278e3:	e9 90 01 00 00       	jmp    c0027a78 <__adddf3+0x645>
c00278e8:	85 db                	test   ebx,ebx
c00278ea:	0f 84 88 01 00 00    	je     c0027a78 <__adddf3+0x645>
c00278f0:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00278f3:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00278f6:	85 c0                	test   eax,eax
c00278f8:	79 10                	jns    c002790a <__adddf3+0x4d7>
c00278fa:	31 c9                	xor    ecx,ecx
c00278fc:	f7 da                	neg    edx
c00278fe:	0f 95 c1             	setne  cl
c0027901:	01 c8                	add    eax,ecx
c0027903:	f7 d8                	neg    eax
c0027905:	e9 2f 01 00 00       	jmp    c0027a39 <__adddf3+0x606>
c002790a:	31 ff                	xor    edi,edi
c002790c:	31 c9                	xor    ecx,ecx
c002790e:	89 c3                	mov    ebx,eax
c0027910:	09 d3                	or     ebx,edx
c0027912:	0f 84 60 01 00 00    	je     c0027a78 <__adddf3+0x645>
c0027918:	e9 05 01 00 00       	jmp    c0027a22 <__adddf3+0x5ef>
c002791d:	31 ff                	xor    edi,edi
c002791f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027924:	e9 4f 01 00 00       	jmp    c0027a78 <__adddf3+0x645>
c0027929:	89 c1                	mov    ecx,eax
c002792b:	89 d0                	mov    eax,edx
c002792d:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027930:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027933:	89 ca                	mov    edx,ecx
c0027935:	85 c9                	test   ecx,ecx
c0027937:	79 2c                	jns    c0027965 <__adddf3+0x532>
c0027939:	31 c9                	xor    ecx,ecx
c002793b:	f7 d8                	neg    eax
c002793d:	0f 95 c1             	setne  cl
c0027940:	01 ca                	add    edx,ecx
c0027942:	f7 da                	neg    edx
c0027944:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027947:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002794a:	eb 19                	jmp    c0027965 <__adddf3+0x532>
c002794c:	85 c0                	test   eax,eax
c002794e:	0f 89 e5 00 00 00    	jns    c0027a39 <__adddf3+0x606>
c0027954:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027959:	89 c1                	mov    ecx,eax
c002795b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002795e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027961:	89 d0                	mov    eax,edx
c0027963:	89 ca                	mov    edx,ecx
c0027965:	85 d2                	test   edx,edx
c0027967:	74 59                	je     c00279c2 <__adddf3+0x58f>
c0027969:	0f bd da             	bsr    ebx,edx
c002796c:	83 f3 1f             	xor    ebx,0x1f
c002796f:	88 d9                	mov    cl,bl
c0027971:	d3 e2                	shl    edx,cl
c0027973:	bf 20 00 00 00       	mov    edi,0x20
c0027978:	89 f9                	mov    ecx,edi
c002797a:	29 d9                	sub    ecx,ebx
c002797c:	89 c6                	mov    esi,eax
c002797e:	d3 ee                	shr    esi,cl
c0027980:	09 d6                	or     esi,edx
c0027982:	88 d9                	mov    cl,bl
c0027984:	d3 e0                	shl    eax,cl
c0027986:	89 c2                	mov    edx,eax
c0027988:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002798b:	25 ff 07 00 00       	and    eax,0x7ff
c0027990:	39 d8                	cmp    eax,ebx
c0027992:	7f 22                	jg     c00279b6 <__adddf3+0x583>
c0027994:	29 c3                	sub    ebx,eax
c0027996:	43                   	inc    ebx
c0027997:	88 d9                	mov    cl,bl
c0027999:	d3 ea                	shr    edx,cl
c002799b:	29 df                	sub    edi,ebx
c002799d:	89 f9                	mov    ecx,edi
c002799f:	89 f0                	mov    eax,esi
c00279a1:	d3 e0                	shl    eax,cl
c00279a3:	09 c2                	or     edx,eax
c00279a5:	89 f0                	mov    eax,esi
c00279a7:	88 d9                	mov    cl,bl
c00279a9:	d3 e8                	shr    eax,cl
c00279ab:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00279ae:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c00279b4:	eb 6f                	jmp    c0027a25 <__adddf3+0x5f2>
c00279b6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00279b9:	29 d8                	sub    eax,ebx
c00279bb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00279be:	89 f0                	mov    eax,esi
c00279c0:	eb 59                	jmp    c0027a1b <__adddf3+0x5e8>
c00279c2:	85 c0                	test   eax,eax
c00279c4:	74 6a                	je     c0027a30 <__adddf3+0x5fd>
c00279c6:	0f bd c8             	bsr    ecx,eax
c00279c9:	83 f1 1f             	xor    ecx,0x1f
c00279cc:	d3 e0                	shl    eax,cl
c00279ce:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00279d1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00279d7:	83 c1 20             	add    ecx,0x20
c00279da:	39 cb                	cmp    ebx,ecx
c00279dc:	7f 35                	jg     c0027a13 <__adddf3+0x5e0>
c00279de:	29 d9                	sub    ecx,ebx
c00279e0:	8d 71 01             	lea    esi,[ecx+0x1]
c00279e3:	83 fe 1f             	cmp    esi,0x1f
c00279e6:	7e 09                	jle    c00279f1 <__adddf3+0x5be>
c00279e8:	83 e9 1f             	sub    ecx,0x1f
c00279eb:	d3 e8                	shr    eax,cl
c00279ed:	89 c3                	mov    ebx,eax
c00279ef:	eb 11                	jmp    c0027a02 <__adddf3+0x5cf>
c00279f1:	b9 20 00 00 00       	mov    ecx,0x20
c00279f6:	29 f1                	sub    ecx,esi
c00279f8:	89 c3                	mov    ebx,eax
c00279fa:	d3 e3                	shl    ebx,cl
c00279fc:	89 f1                	mov    ecx,esi
c00279fe:	d3 e8                	shr    eax,cl
c0027a00:	89 c2                	mov    edx,eax
c0027a02:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027a05:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027a0a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027a0d:	89 d0                	mov    eax,edx
c0027a0f:	89 da                	mov    edx,ebx
c0027a11:	eb 26                	jmp    c0027a39 <__adddf3+0x606>
c0027a13:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027a16:	29 cf                	sub    edi,ecx
c0027a18:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027a1b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027a20:	eb 17                	jmp    c0027a39 <__adddf3+0x606>
c0027a22:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027a25:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027a28:	eb 0f                	jmp    c0027a39 <__adddf3+0x606>
c0027a2a:	31 d2                	xor    edx,edx
c0027a2c:	31 c0                	xor    eax,eax
c0027a2e:	eb 09                	jmp    c0027a39 <__adddf3+0x606>
c0027a30:	89 c2                	mov    edx,eax
c0027a32:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027a39:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027a3c:	c1 e1 14             	shl    ecx,0x14
c0027a3f:	89 c3                	mov    ebx,eax
c0027a41:	c1 eb 0b             	shr    ebx,0xb
c0027a44:	09 d9                	or     ecx,ebx
c0027a46:	89 d3                	mov    ebx,edx
c0027a48:	c1 eb 0b             	shr    ebx,0xb
c0027a4b:	c1 e0 15             	shl    eax,0x15
c0027a4e:	09 d8                	or     eax,ebx
c0027a50:	89 c7                	mov    edi,eax
c0027a52:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027a58:	0f 95 c0             	setne  al
c0027a5b:	89 c6                	mov    esi,eax
c0027a5d:	09 f3                	or     ebx,esi
c0027a5f:	83 e3 01             	and    ebx,0x1
c0027a62:	c1 ea 0a             	shr    edx,0xa
c0027a65:	21 da                	and    edx,ebx
c0027a67:	89 f8                	mov    eax,edi
c0027a69:	01 d0                	add    eax,edx
c0027a6b:	83 d1 00             	adc    ecx,0x0
c0027a6e:	89 c7                	mov    edi,eax
c0027a70:	eb 06                	jmp    c0027a78 <__adddf3+0x645>
c0027a72:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027a75:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027a78:	89 f8                	mov    eax,edi
c0027a7a:	89 ca                	mov    edx,ecx
c0027a7c:	83 c4 24             	add    esp,0x24
c0027a7f:	5b                   	pop    ebx
c0027a80:	5e                   	pop    esi
c0027a81:	5f                   	pop    edi
c0027a82:	5d                   	pop    ebp
c0027a83:	c3                   	ret    

c0027a84 <__subdf3>:
c0027a84:	55                   	push   ebp
c0027a85:	89 e5                	mov    ebp,esp
c0027a87:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027a8a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027a8d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027a93:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027a96:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027a99:	5d                   	pop    ebp
c0027a9a:	e9 94 f9 ff ff       	jmp    c0027433 <__adddf3>

c0027a9f <__negdf2>:
c0027a9f:	55                   	push   ebp
c0027aa0:	89 e5                	mov    ebp,esp
c0027aa2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027aa5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027aa8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027aae:	5d                   	pop    ebp
c0027aaf:	c3                   	ret    

c0027ab0 <__muldf3>:
c0027ab0:	55                   	push   ebp
c0027ab1:	89 e5                	mov    ebp,esp
c0027ab3:	57                   	push   edi
c0027ab4:	56                   	push   esi
c0027ab5:	53                   	push   ebx
c0027ab6:	83 ec 24             	sub    esp,0x24
c0027ab9:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027abc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027abf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027ac2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027ac5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027ac8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027acb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027ace:	89 c8                	mov    eax,ecx
c0027ad0:	c1 f8 14             	sar    eax,0x14
c0027ad3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027ad6:	89 f8                	mov    eax,edi
c0027ad8:	89 fb                	mov    ebx,edi
c0027ada:	c1 e3 0b             	shl    ebx,0xb
c0027add:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027ae0:	c1 e1 0b             	shl    ecx,0xb
c0027ae3:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027ae9:	c1 e8 15             	shr    eax,0x15
c0027aec:	09 c1                	or     ecx,eax
c0027aee:	89 d6                	mov    esi,edx
c0027af0:	89 d0                	mov    eax,edx
c0027af2:	c1 f8 14             	sar    eax,0x14
c0027af5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027af8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027afb:	89 c3                	mov    ebx,eax
c0027afd:	c1 e3 0b             	shl    ebx,0xb
c0027b00:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027b03:	c1 e6 0b             	shl    esi,0xb
c0027b06:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027b0c:	c1 e8 15             	shr    eax,0x15
c0027b0f:	09 c6                	or     esi,eax
c0027b11:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027b14:	25 ff 07 00 00       	and    eax,0x7ff
c0027b19:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027b1c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027b1f:	25 ff 07 00 00       	and    eax,0x7ff
c0027b24:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027b27:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027b2a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027b2d:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027b34:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027b37:	40                   	inc    eax
c0027b38:	a9 fe 07 00 00       	test   eax,0x7fe
c0027b3d:	0f 85 8d 00 00 00    	jne    c0027bd0 <__muldf3+0x120>
c0027b43:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b46:	09 c8                	or     eax,ecx
c0027b48:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027b4c:	74 44                	je     c0027b92 <__muldf3+0xe2>
c0027b4e:	85 c0                	test   eax,eax
c0027b50:	0f 85 31 02 00 00    	jne    c0027d87 <__muldf3+0x2d7>
c0027b56:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027b59:	40                   	inc    eax
c0027b5a:	a9 fe 07 00 00       	test   eax,0x7fe
c0027b5f:	75 13                	jne    c0027b74 <__muldf3+0xc4>
c0027b61:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027b64:	09 f1                	or     ecx,esi
c0027b66:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027b6a:	74 22                	je     c0027b8e <__muldf3+0xde>
c0027b6c:	85 c9                	test   ecx,ecx
c0027b6e:	0f 85 0d 02 00 00    	jne    c0027d81 <__muldf3+0x2d1>
c0027b74:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027b78:	0f 89 09 02 00 00    	jns    c0027d87 <__muldf3+0x2d7>
c0027b7e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027b81:	05 00 00 00 80       	add    eax,0x80000000
c0027b86:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b89:	e9 f9 01 00 00       	jmp    c0027d87 <__muldf3+0x2d7>
c0027b8e:	85 c9                	test   ecx,ecx
c0027b90:	eb 2e                	jmp    c0027bc0 <__muldf3+0x110>
c0027b92:	85 c0                	test   eax,eax
c0027b94:	74 20                	je     c0027bb6 <__muldf3+0x106>
c0027b96:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027b99:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b9c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b9f:	c1 ef 1f             	shr    edi,0x1f
c0027ba2:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027ba5:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027ba8:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027bab:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027bae:	09 f9                	or     ecx,edi
c0027bb0:	78 1e                	js     c0027bd0 <__muldf3+0x120>
c0027bb2:	89 c3                	mov    ebx,eax
c0027bb4:	eb e0                	jmp    c0027b96 <__muldf3+0xe6>
c0027bb6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027bb9:	f7 d0                	not    eax
c0027bbb:	a9 ff 07 00 00       	test   eax,0x7ff
c0027bc0:	75 b2                	jne    c0027b74 <__muldf3+0xc4>
c0027bc2:	31 ff                	xor    edi,edi
c0027bc4:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027bcb:	e9 b7 01 00 00       	jmp    c0027d87 <__muldf3+0x2d7>
c0027bd0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027bd3:	40                   	inc    eax
c0027bd4:	a9 fe 07 00 00       	test   eax,0x7fe
c0027bd9:	75 57                	jne    c0027c32 <__muldf3+0x182>
c0027bdb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027bde:	09 f0                	or     eax,esi
c0027be0:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027be4:	74 23                	je     c0027c09 <__muldf3+0x159>
c0027be6:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027bea:	0f 89 91 01 00 00    	jns    c0027d81 <__muldf3+0x2d1>
c0027bf0:	85 c0                	test   eax,eax
c0027bf2:	0f 85 89 01 00 00    	jne    c0027d81 <__muldf3+0x2d1>
c0027bf8:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027bfb:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027c01:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c04:	e9 7e 01 00 00       	jmp    c0027d87 <__muldf3+0x2d7>
c0027c09:	85 c0                	test   eax,eax
c0027c0b:	75 0c                	jne    c0027c19 <__muldf3+0x169>
c0027c0d:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027c11:	0f 89 6a 01 00 00    	jns    c0027d81 <__muldf3+0x2d1>
c0027c17:	eb df                	jmp    c0027bf8 <__muldf3+0x148>
c0027c19:	01 f6                	add    esi,esi
c0027c1b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027c1e:	c1 ea 1f             	shr    edx,0x1f
c0027c21:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027c24:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027c27:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027c2a:	09 d6                	or     esi,edx
c0027c2c:	78 04                	js     c0027c32 <__muldf3+0x182>
c0027c2e:	89 c3                	mov    ebx,eax
c0027c30:	eb e7                	jmp    c0027c19 <__muldf3+0x169>
c0027c32:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027c38:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027c3e:	89 c8                	mov    eax,ecx
c0027c40:	f7 e6                	mul    esi
c0027c42:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027c45:	89 c7                	mov    edi,eax
c0027c47:	89 c8                	mov    eax,ecx
c0027c49:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027c4c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027c4f:	89 c1                	mov    ecx,eax
c0027c51:	89 f0                	mov    eax,esi
c0027c53:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027c56:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027c59:	89 c6                	mov    esi,eax
c0027c5b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027c5e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027c61:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027c64:	31 c0                	xor    eax,eax
c0027c66:	01 f1                	add    ecx,esi
c0027c68:	0f 92 c0             	setb   al
c0027c6b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027c6e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027c71:	83 d6 00             	adc    esi,0x0
c0027c74:	01 c7                	add    edi,eax
c0027c76:	83 d6 00             	adc    esi,0x0
c0027c79:	01 ca                	add    edx,ecx
c0027c7b:	0f 92 c1             	setb   cl
c0027c7e:	0f b6 c9             	movzx  ecx,cl
c0027c81:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027c84:	83 d6 00             	adc    esi,0x0
c0027c87:	01 cf                	add    edi,ecx
c0027c89:	83 d6 00             	adc    esi,0x0
c0027c8c:	31 c9                	xor    ecx,ecx
c0027c8e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027c91:	0f 95 c1             	setne  cl
c0027c94:	09 cf                	or     edi,ecx
c0027c96:	85 f6                	test   esi,esi
c0027c98:	78 0c                	js     c0027ca6 <__muldf3+0x1f6>
c0027c9a:	01 f6                	add    esi,esi
c0027c9c:	89 f8                	mov    eax,edi
c0027c9e:	c1 e8 1f             	shr    eax,0x1f
c0027ca1:	09 c6                	or     esi,eax
c0027ca3:	01 ff                	add    edi,edi
c0027ca5:	4b                   	dec    ebx
c0027ca6:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027cac:	0f 8f 85 00 00 00    	jg     c0027d37 <__muldf3+0x287>
c0027cb2:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027cb8:	85 db                	test   ebx,ebx
c0027cba:	0f 8f 84 00 00 00    	jg     c0027d44 <__muldf3+0x294>
c0027cc0:	83 fb cc             	cmp    ebx,0xffffffcc
c0027cc3:	7c 79                	jl     c0027d3e <__muldf3+0x28e>
c0027cc5:	ba 01 00 00 00       	mov    edx,0x1
c0027cca:	29 da                	sub    edx,ebx
c0027ccc:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027cd2:	83 fa 1f             	cmp    edx,0x1f
c0027cd5:	7e 30                	jle    c0027d07 <__muldf3+0x257>
c0027cd7:	83 fa 20             	cmp    edx,0x20
c0027cda:	75 0b                	jne    c0027ce7 <__muldf3+0x237>
c0027cdc:	31 c0                	xor    eax,eax
c0027cde:	85 ff                	test   edi,edi
c0027ce0:	0f 95 c0             	setne  al
c0027ce3:	89 c7                	mov    edi,eax
c0027ce5:	eb 1a                	jmp    c0027d01 <__muldf3+0x251>
c0027ce7:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027cea:	89 f0                	mov    eax,esi
c0027cec:	d3 e0                	shl    eax,cl
c0027cee:	09 f8                	or     eax,edi
c0027cf0:	0f 95 c0             	setne  al
c0027cf3:	0f b6 c0             	movzx  eax,al
c0027cf6:	89 c7                	mov    edi,eax
c0027cf8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027cfd:	29 d9                	sub    ecx,ebx
c0027cff:	d3 ee                	shr    esi,cl
c0027d01:	09 f7                	or     edi,esi
c0027d03:	31 db                	xor    ebx,ebx
c0027d05:	eb 3b                	jmp    c0027d42 <__muldf3+0x292>
c0027d07:	83 c3 1f             	add    ebx,0x1f
c0027d0a:	89 f0                	mov    eax,esi
c0027d0c:	88 d9                	mov    cl,bl
c0027d0e:	d3 e0                	shl    eax,cl
c0027d10:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d13:	89 f8                	mov    eax,edi
c0027d15:	88 d1                	mov    cl,dl
c0027d17:	d3 e8                	shr    eax,cl
c0027d19:	89 c1                	mov    ecx,eax
c0027d1b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027d1e:	09 c8                	or     eax,ecx
c0027d20:	88 d9                	mov    cl,bl
c0027d22:	d3 e7                	shl    edi,cl
c0027d24:	31 db                	xor    ebx,ebx
c0027d26:	85 ff                	test   edi,edi
c0027d28:	0f 95 c3             	setne  bl
c0027d2b:	89 df                	mov    edi,ebx
c0027d2d:	09 c7                	or     edi,eax
c0027d2f:	88 d1                	mov    cl,dl
c0027d31:	d3 ee                	shr    esi,cl
c0027d33:	31 db                	xor    ebx,ebx
c0027d35:	eb 0d                	jmp    c0027d44 <__muldf3+0x294>
c0027d37:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027d3c:	eb 02                	jmp    c0027d40 <__muldf3+0x290>
c0027d3e:	31 db                	xor    ebx,ebx
c0027d40:	31 ff                	xor    edi,edi
c0027d42:	31 f6                	xor    esi,esi
c0027d44:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027d47:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027d4a:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027d4f:	09 c3                	or     ebx,eax
c0027d51:	c1 e3 14             	shl    ebx,0x14
c0027d54:	89 f0                	mov    eax,esi
c0027d56:	c1 e8 0b             	shr    eax,0xb
c0027d59:	09 c3                	or     ebx,eax
c0027d5b:	89 f8                	mov    eax,edi
c0027d5d:	c1 e8 0b             	shr    eax,0xb
c0027d60:	c1 e6 15             	shl    esi,0x15
c0027d63:	09 c6                	or     esi,eax
c0027d65:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027d6b:	0f 95 c1             	setne  cl
c0027d6e:	09 c8                	or     eax,ecx
c0027d70:	83 e0 01             	and    eax,0x1
c0027d73:	c1 ef 0a             	shr    edi,0xa
c0027d76:	21 c7                	and    edi,eax
c0027d78:	01 f7                	add    edi,esi
c0027d7a:	83 d3 00             	adc    ebx,0x0
c0027d7d:	89 da                	mov    edx,ebx
c0027d7f:	eb 03                	jmp    c0027d84 <__muldf3+0x2d4>
c0027d81:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027d84:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027d87:	89 f8                	mov    eax,edi
c0027d89:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027d8c:	83 c4 24             	add    esp,0x24
c0027d8f:	5b                   	pop    ebx
c0027d90:	5e                   	pop    esi
c0027d91:	5f                   	pop    edi
c0027d92:	5d                   	pop    ebp
c0027d93:	c3                   	ret    

c0027d94 <__divdf3>:
c0027d94:	55                   	push   ebp
c0027d95:	89 e5                	mov    ebp,esp
c0027d97:	57                   	push   edi
c0027d98:	56                   	push   esi
c0027d99:	53                   	push   ebx
c0027d9a:	83 ec 2c             	sub    esp,0x2c
c0027d9d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027da0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027da3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027da6:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027da9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027dac:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027daf:	89 ce                	mov    esi,ecx
c0027db1:	89 c8                	mov    eax,ecx
c0027db3:	c1 f8 14             	sar    eax,0x14
c0027db6:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027db9:	89 f8                	mov    eax,edi
c0027dbb:	89 fb                	mov    ebx,edi
c0027dbd:	c1 e3 0b             	shl    ebx,0xb
c0027dc0:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027dc3:	c1 e6 0b             	shl    esi,0xb
c0027dc6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027dcc:	c1 e8 15             	shr    eax,0x15
c0027dcf:	09 c6                	or     esi,eax
c0027dd1:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027dd4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027dd7:	89 c2                	mov    edx,eax
c0027dd9:	c1 fa 14             	sar    edx,0x14
c0027ddc:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027ddf:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027de2:	89 de                	mov    esi,ebx
c0027de4:	c1 e6 0b             	shl    esi,0xb
c0027de7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027dea:	c1 e0 0b             	shl    eax,0xb
c0027ded:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027df2:	c1 eb 15             	shr    ebx,0x15
c0027df5:	09 d8                	or     eax,ebx
c0027df7:	89 c2                	mov    edx,eax
c0027df9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027dfc:	25 ff 07 00 00       	and    eax,0x7ff
c0027e01:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027e04:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027e07:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027e0d:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027e10:	29 d8                	sub    eax,ebx
c0027e12:	05 ff 03 00 00       	add    eax,0x3ff
c0027e17:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027e1a:	46                   	inc    esi
c0027e1b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027e21:	0f 85 a5 00 00 00    	jne    c0027ecc <__divdf3+0x138>
c0027e27:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027e2a:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027e2d:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027e31:	74 2a                	je     c0027e5d <__divdf3+0xc9>
c0027e33:	85 f6                	test   esi,esi
c0027e35:	0f 85 cc 02 00 00    	jne    c0028107 <__divdf3+0x373>
c0027e3b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027e3e:	40                   	inc    eax
c0027e3f:	a9 fe 07 00 00       	test   eax,0x7fe
c0027e44:	75 26                	jne    c0027e6c <__divdf3+0xd8>
c0027e46:	85 db                	test   ebx,ebx
c0027e48:	74 22                	je     c0027e6c <__divdf3+0xd8>
c0027e4a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027e4d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027e50:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027e53:	09 d0                	or     eax,edx
c0027e55:	0f 85 ac 02 00 00    	jne    c0028107 <__divdf3+0x373>
c0027e5b:	eb 63                	jmp    c0027ec0 <__divdf3+0x12c>
c0027e5d:	85 f6                	test   esi,esi
c0027e5f:	75 22                	jne    c0027e83 <__divdf3+0xef>
c0027e61:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027e64:	40                   	inc    eax
c0027e65:	a9 fe 07 00 00       	test   eax,0x7fe
c0027e6a:	74 36                	je     c0027ea2 <__divdf3+0x10e>
c0027e6c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027e70:	0f 89 91 02 00 00    	jns    c0028107 <__divdf3+0x373>
c0027e76:	89 f8                	mov    eax,edi
c0027e78:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027e7e:	e9 80 02 00 00       	jmp    c0028103 <__divdf3+0x36f>
c0027e83:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027e86:	01 f6                	add    esi,esi
c0027e88:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027e8b:	c1 ef 1f             	shr    edi,0x1f
c0027e8e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027e91:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027e94:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027e97:	09 f7                	or     edi,esi
c0027e99:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027e9c:	78 2e                	js     c0027ecc <__divdf3+0x138>
c0027e9e:	89 c8                	mov    eax,ecx
c0027ea0:	eb e1                	jmp    c0027e83 <__divdf3+0xef>
c0027ea2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027ea5:	09 d0                	or     eax,edx
c0027ea7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027eab:	74 0f                	je     c0027ebc <__divdf3+0x128>
c0027ead:	85 c0                	test   eax,eax
c0027eaf:	74 bb                	je     c0027e6c <__divdf3+0xd8>
c0027eb1:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027eb4:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027eb7:	e9 4b 02 00 00       	jmp    c0028107 <__divdf3+0x373>
c0027ebc:	85 c0                	test   eax,eax
c0027ebe:	75 ac                	jne    c0027e6c <__divdf3+0xd8>
c0027ec0:	31 ff                	xor    edi,edi
c0027ec2:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027ec7:	e9 3b 02 00 00       	jmp    c0028107 <__divdf3+0x373>
c0027ecc:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027ecf:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027ed2:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027ed8:	75 6b                	jne    c0027f45 <__divdf3+0x1b1>
c0027eda:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027edd:	09 d6                	or     esi,edx
c0027edf:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027ee3:	74 28                	je     c0027f0d <__divdf3+0x179>
c0027ee5:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027ee8:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027eeb:	85 f6                	test   esi,esi
c0027eed:	0f 85 14 02 00 00    	jne    c0028107 <__divdf3+0x373>
c0027ef3:	31 ff                	xor    edi,edi
c0027ef5:	31 c9                	xor    ecx,ecx
c0027ef7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027efa:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027efd:	0f 89 04 02 00 00    	jns    c0028107 <__divdf3+0x373>
c0027f03:	b9 00 00 00 80       	mov    ecx,0x80000000
c0027f08:	e9 fa 01 00 00       	jmp    c0028107 <__divdf3+0x373>
c0027f0d:	85 f6                	test   esi,esi
c0027f0f:	75 1b                	jne    c0027f2c <__divdf3+0x198>
c0027f11:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027f14:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027f17:	25 00 00 00 80       	and    eax,0x80000000
c0027f1c:	31 c9                	xor    ecx,ecx
c0027f1e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0027f23:	89 cf                	mov    edi,ecx
c0027f25:	89 c1                	mov    ecx,eax
c0027f27:	e9 db 01 00 00       	jmp    c0028107 <__divdf3+0x373>
c0027f2c:	01 d2                	add    edx,edx
c0027f2e:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027f31:	c1 eb 1f             	shr    ebx,0x1f
c0027f34:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f37:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0027f3a:	8d 48 01             	lea    ecx,[eax+0x1]
c0027f3d:	09 da                	or     edx,ebx
c0027f3f:	78 04                	js     c0027f45 <__divdf3+0x1b1>
c0027f41:	89 c8                	mov    eax,ecx
c0027f43:	eb e7                	jmp    c0027f2c <__divdf3+0x198>
c0027f45:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027f48:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027f4e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027f54:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0027f57:	39 d6                	cmp    esi,edx
c0027f59:	77 0d                	ja     c0027f68 <__divdf3+0x1d4>
c0027f5b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0027f5e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0027f61:	72 1b                	jb     c0027f7e <__divdf3+0x1ea>
c0027f63:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0027f66:	75 16                	jne    c0027f7e <__divdf3+0x1ea>
c0027f68:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027f6b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027f6e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0027f71:	83 de 00             	sbb    esi,0x0
c0027f74:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0027f77:	ba 01 00 00 00       	mov    edx,0x1
c0027f7c:	eb 02                	jmp    c0027f80 <__divdf3+0x1ec>
c0027f7e:	31 d2                	xor    edx,edx
c0027f80:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0027f87:	31 ff                	xor    edi,edi
c0027f89:	01 ff                	add    edi,edi
c0027f8b:	89 d1                	mov    ecx,edx
c0027f8d:	c1 e9 1f             	shr    ecx,0x1f
c0027f90:	09 cf                	or     edi,ecx
c0027f92:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0027f95:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0027f98:	89 da                	mov    edx,ebx
c0027f9a:	89 f3                	mov    ebx,esi
c0027f9c:	8d 34 36             	lea    esi,[esi+esi*1]
c0027f9f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027fa2:	c1 e9 1f             	shr    ecx,0x1f
c0027fa5:	09 ce                	or     esi,ecx
c0027fa7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027faa:	01 c9                	add    ecx,ecx
c0027fac:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0027faf:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027fb2:	85 db                	test   ebx,ebx
c0027fb4:	78 29                	js     c0027fdf <__divdf3+0x24b>
c0027fb6:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0027fb9:	72 07                	jb     c0027fc2 <__divdf3+0x22e>
c0027fbb:	75 3c                	jne    c0027ff9 <__divdf3+0x265>
c0027fbd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027fc0:	77 37                	ja     c0027ff9 <__divdf3+0x265>
c0027fc2:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027fc5:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0027fc8:	31 d2                	xor    edx,edx
c0027fca:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0027fcd:	0f 97 c2             	seta   dl
c0027fd0:	29 d6                	sub    esi,edx
c0027fd2:	89 d9                	mov    ecx,ebx
c0027fd4:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0027fd7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027fda:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0027fdd:	eb 17                	jmp    c0027ff6 <__divdf3+0x262>
c0027fdf:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027fe2:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027fe5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027fe8:	0f 97 c1             	seta   cl
c0027feb:	0f b6 c9             	movzx  ecx,cl
c0027fee:	29 ce                	sub    esi,ecx
c0027ff0:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0027ff3:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0027ff6:	83 ca 01             	or     edx,0x1
c0027ff9:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0027ffc:	75 8b                	jne    c0027f89 <__divdf3+0x1f5>
c0027ffe:	c1 e7 09             	shl    edi,0x9
c0028001:	89 d1                	mov    ecx,edx
c0028003:	c1 e9 17             	shr    ecx,0x17
c0028006:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028009:	09 f3                	or     ebx,esi
c002800b:	0f 95 c3             	setne  bl
c002800e:	0f b6 db             	movzx  ebx,bl
c0028011:	c1 e2 09             	shl    edx,0x9
c0028014:	09 d3                	or     ebx,edx
c0028016:	89 ca                	mov    edx,ecx
c0028018:	09 fa                	or     edx,edi
c002801a:	78 0c                	js     c0028028 <__divdf3+0x294>
c002801c:	01 d2                	add    edx,edx
c002801e:	89 d9                	mov    ecx,ebx
c0028020:	c1 e9 1f             	shr    ecx,0x1f
c0028023:	09 ca                	or     edx,ecx
c0028025:	01 db                	add    ebx,ebx
c0028027:	48                   	dec    eax
c0028028:	3d fe 07 00 00       	cmp    eax,0x7fe
c002802d:	0f 8f 83 00 00 00    	jg     c00280b6 <__divdf3+0x322>
c0028033:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028039:	85 c0                	test   eax,eax
c002803b:	0f 8f 82 00 00 00    	jg     c00280c3 <__divdf3+0x32f>
c0028041:	83 f8 cc             	cmp    eax,0xffffffcc
c0028044:	7c 77                	jl     c00280bd <__divdf3+0x329>
c0028046:	be 01 00 00 00       	mov    esi,0x1
c002804b:	29 c6                	sub    esi,eax
c002804d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028053:	83 fe 1f             	cmp    esi,0x1f
c0028056:	7e 2f                	jle    c0028087 <__divdf3+0x2f3>
c0028058:	83 fe 20             	cmp    esi,0x20
c002805b:	75 0a                	jne    c0028067 <__divdf3+0x2d3>
c002805d:	85 db                	test   ebx,ebx
c002805f:	0f 95 c3             	setne  bl
c0028062:	0f b6 db             	movzx  ebx,bl
c0028065:	eb 1a                	jmp    c0028081 <__divdf3+0x2ed>
c0028067:	8d 48 3f             	lea    ecx,[eax+0x3f]
c002806a:	89 d7                	mov    edi,edx
c002806c:	d3 e7                	shl    edi,cl
c002806e:	89 f9                	mov    ecx,edi
c0028070:	09 d9                	or     ecx,ebx
c0028072:	0f 95 c3             	setne  bl
c0028075:	0f b6 db             	movzx  ebx,bl
c0028078:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002807d:	29 c1                	sub    ecx,eax
c002807f:	d3 ea                	shr    edx,cl
c0028081:	09 d3                	or     ebx,edx
c0028083:	31 c0                	xor    eax,eax
c0028085:	eb 3a                	jmp    c00280c1 <__divdf3+0x32d>
c0028087:	83 c0 1f             	add    eax,0x1f
c002808a:	89 d7                	mov    edi,edx
c002808c:	88 c1                	mov    cl,al
c002808e:	d3 e7                	shl    edi,cl
c0028090:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028093:	89 df                	mov    edi,ebx
c0028095:	89 f1                	mov    ecx,esi
c0028097:	d3 ef                	shr    edi,cl
c0028099:	89 f9                	mov    ecx,edi
c002809b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002809e:	09 cf                	or     edi,ecx
c00280a0:	88 c1                	mov    cl,al
c00280a2:	d3 e3                	shl    ebx,cl
c00280a4:	85 db                	test   ebx,ebx
c00280a6:	0f 95 c3             	setne  bl
c00280a9:	0f b6 db             	movzx  ebx,bl
c00280ac:	09 fb                	or     ebx,edi
c00280ae:	89 f1                	mov    ecx,esi
c00280b0:	d3 ea                	shr    edx,cl
c00280b2:	31 c0                	xor    eax,eax
c00280b4:	eb 0d                	jmp    c00280c3 <__divdf3+0x32f>
c00280b6:	b8 ff 07 00 00       	mov    eax,0x7ff
c00280bb:	eb 02                	jmp    c00280bf <__divdf3+0x32b>
c00280bd:	31 c0                	xor    eax,eax
c00280bf:	31 db                	xor    ebx,ebx
c00280c1:	31 d2                	xor    edx,edx
c00280c3:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c00280c6:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c00280c9:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00280cf:	09 c8                	or     eax,ecx
c00280d1:	c1 e0 14             	shl    eax,0x14
c00280d4:	89 d1                	mov    ecx,edx
c00280d6:	c1 e9 0b             	shr    ecx,0xb
c00280d9:	09 c8                	or     eax,ecx
c00280db:	89 c6                	mov    esi,eax
c00280dd:	89 d9                	mov    ecx,ebx
c00280df:	c1 e9 0b             	shr    ecx,0xb
c00280e2:	c1 e2 15             	shl    edx,0x15
c00280e5:	09 ca                	or     edx,ecx
c00280e7:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c00280ed:	0f 95 c0             	setne  al
c00280f0:	09 c1                	or     ecx,eax
c00280f2:	83 e1 01             	and    ecx,0x1
c00280f5:	c1 eb 0a             	shr    ebx,0xa
c00280f8:	21 cb                	and    ebx,ecx
c00280fa:	01 d3                	add    ebx,edx
c00280fc:	89 d8                	mov    eax,ebx
c00280fe:	83 d6 00             	adc    esi,0x0
c0028101:	89 f2                	mov    edx,esi
c0028103:	89 c7                	mov    edi,eax
c0028105:	89 d1                	mov    ecx,edx
c0028107:	89 f8                	mov    eax,edi
c0028109:	89 ca                	mov    edx,ecx
c002810b:	83 c4 2c             	add    esp,0x2c
c002810e:	5b                   	pop    ebx
c002810f:	5e                   	pop    esi
c0028110:	5f                   	pop    edi
c0028111:	5d                   	pop    ebp
c0028112:	c3                   	ret    

c0028113 <__floatsidf>:
c0028113:	55                   	push   ebp
c0028114:	89 e5                	mov    ebp,esp
c0028116:	56                   	push   esi
c0028117:	53                   	push   ebx
c0028118:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002811b:	85 db                	test   ebx,ebx
c002811d:	7e 15                	jle    c0028134 <__floatsidf+0x21>
c002811f:	0f bd cb             	bsr    ecx,ebx
c0028122:	83 f1 1f             	xor    ecx,0x1f
c0028125:	d3 e3                	shl    ebx,cl
c0028127:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c002812d:	b8 1e 04 00 00       	mov    eax,0x41e
c0028132:	eb 21                	jmp    c0028155 <__floatsidf+0x42>
c0028134:	b8 00 00 00 00       	mov    eax,0x0
c0028139:	ba 00 00 00 00       	mov    edx,0x0
c002813e:	74 2a                	je     c002816a <__floatsidf+0x57>
c0028140:	f7 db                	neg    ebx
c0028142:	0f bd cb             	bsr    ecx,ebx
c0028145:	83 f1 1f             	xor    ecx,0x1f
c0028148:	d3 e3                	shl    ebx,cl
c002814a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028150:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028155:	29 c8                	sub    eax,ecx
c0028157:	c1 e0 14             	shl    eax,0x14
c002815a:	89 c1                	mov    ecx,eax
c002815c:	89 de                	mov    esi,ebx
c002815e:	c1 ee 0b             	shr    esi,0xb
c0028161:	09 f1                	or     ecx,esi
c0028163:	89 ca                	mov    edx,ecx
c0028165:	c1 e3 15             	shl    ebx,0x15
c0028168:	89 d8                	mov    eax,ebx
c002816a:	5b                   	pop    ebx
c002816b:	5e                   	pop    esi
c002816c:	5d                   	pop    ebp
c002816d:	c3                   	ret    

c002816e <__floatunsidf>:
c002816e:	55                   	push   ebp
c002816f:	89 e5                	mov    ebp,esp
c0028171:	56                   	push   esi
c0028172:	53                   	push   ebx
c0028173:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028176:	85 db                	test   ebx,ebx
c0028178:	74 2a                	je     c00281a4 <__floatunsidf+0x36>
c002817a:	0f bd cb             	bsr    ecx,ebx
c002817d:	83 f1 1f             	xor    ecx,0x1f
c0028180:	d3 e3                	shl    ebx,cl
c0028182:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028188:	b8 1e 04 00 00       	mov    eax,0x41e
c002818d:	29 c8                	sub    eax,ecx
c002818f:	c1 e0 14             	shl    eax,0x14
c0028192:	89 c1                	mov    ecx,eax
c0028194:	89 de                	mov    esi,ebx
c0028196:	c1 ee 0b             	shr    esi,0xb
c0028199:	09 f1                	or     ecx,esi
c002819b:	89 ca                	mov    edx,ecx
c002819d:	c1 e3 15             	shl    ebx,0x15
c00281a0:	89 d8                	mov    eax,ebx
c00281a2:	eb 04                	jmp    c00281a8 <__floatunsidf+0x3a>
c00281a4:	31 c0                	xor    eax,eax
c00281a6:	31 d2                	xor    edx,edx
c00281a8:	5b                   	pop    ebx
c00281a9:	5e                   	pop    esi
c00281aa:	5d                   	pop    ebp
c00281ab:	c3                   	ret    

c00281ac <__fixdfsi>:
c00281ac:	55                   	push   ebp
c00281ad:	89 e5                	mov    ebp,esp
c00281af:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00281b2:	89 d1                	mov    ecx,edx
c00281b4:	c1 e1 0b             	shl    ecx,0xb
c00281b7:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00281bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00281c0:	c1 e8 15             	shr    eax,0x15
c00281c3:	09 c1                	or     ecx,eax
c00281c5:	c1 fa 14             	sar    edx,0x14
c00281c8:	78 1f                	js     c00281e9 <__fixdfsi+0x3d>
c00281ca:	81 ea ff 03 00 00    	sub    edx,0x3ff
c00281d0:	31 c0                	xor    eax,eax
c00281d2:	83 fa 1e             	cmp    edx,0x1e
c00281d5:	77 40                	ja     c0028217 <__fixdfsi+0x6b>
c00281d7:	89 c8                	mov    eax,ecx
c00281d9:	0d 00 00 00 80       	or     eax,0x80000000
c00281de:	b9 1f 00 00 00       	mov    ecx,0x1f
c00281e3:	29 d1                	sub    ecx,edx
c00281e5:	d3 e8                	shr    eax,cl
c00281e7:	eb 2e                	jmp    c0028217 <__fixdfsi+0x6b>
c00281e9:	31 c0                	xor    eax,eax
c00281eb:	81 c2 01 04 00 00    	add    edx,0x401
c00281f1:	78 24                	js     c0028217 <__fixdfsi+0x6b>
c00281f3:	83 fa 1e             	cmp    edx,0x1e
c00281f6:	7e 09                	jle    c0028201 <__fixdfsi+0x55>
c00281f8:	83 fa 1f             	cmp    edx,0x1f
c00281fb:	75 18                	jne    c0028215 <__fixdfsi+0x69>
c00281fd:	85 c9                	test   ecx,ecx
c00281ff:	75 14                	jne    c0028215 <__fixdfsi+0x69>
c0028201:	89 c8                	mov    eax,ecx
c0028203:	0d 00 00 00 80       	or     eax,0x80000000
c0028208:	b9 1f 00 00 00       	mov    ecx,0x1f
c002820d:	29 d1                	sub    ecx,edx
c002820f:	d3 e8                	shr    eax,cl
c0028211:	f7 d8                	neg    eax
c0028213:	eb 02                	jmp    c0028217 <__fixdfsi+0x6b>
c0028215:	31 c0                	xor    eax,eax
c0028217:	5d                   	pop    ebp
c0028218:	c3                   	ret    

c0028219 <__fixunsdfsi>:
c0028219:	55                   	push   ebp
c002821a:	89 e5                	mov    ebp,esp
c002821c:	53                   	push   ebx
c002821d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028220:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028223:	89 d3                	mov    ebx,edx
c0028225:	c1 fb 14             	sar    ebx,0x14
c0028228:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c002822e:	31 c0                	xor    eax,eax
c0028230:	83 fb 1f             	cmp    ebx,0x1f
c0028233:	77 1d                	ja     c0028252 <__fixunsdfsi+0x39>
c0028235:	89 d0                	mov    eax,edx
c0028237:	c1 e0 0b             	shl    eax,0xb
c002823a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002823f:	c1 e9 15             	shr    ecx,0x15
c0028242:	09 c8                	or     eax,ecx
c0028244:	0d 00 00 00 80       	or     eax,0x80000000
c0028249:	b9 1f 00 00 00       	mov    ecx,0x1f
c002824e:	29 d9                	sub    ecx,ebx
c0028250:	d3 e8                	shr    eax,cl
c0028252:	5b                   	pop    ebx
c0028253:	5d                   	pop    ebp
c0028254:	c3                   	ret    

c0028255 <__cmpdf2>:
c0028255:	55                   	push   ebp
c0028256:	89 e5                	mov    ebp,esp
c0028258:	57                   	push   edi
c0028259:	56                   	push   esi
c002825a:	53                   	push   ebx
c002825b:	83 ec 0c             	sub    esp,0xc
c002825e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028261:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028264:	89 ca                	mov    edx,ecx
c0028266:	c1 ea 14             	shr    edx,0x14
c0028269:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002826f:	89 cb                	mov    ebx,ecx
c0028271:	c1 fb 1f             	sar    ebx,0x1f
c0028274:	31 da                	xor    edx,ebx
c0028276:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028279:	89 df                	mov    edi,ebx
c002827b:	c1 e7 0b             	shl    edi,0xb
c002827e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028281:	c1 e1 0b             	shl    ecx,0xb
c0028284:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002828a:	c1 eb 15             	shr    ebx,0x15
c002828d:	09 d9                	or     ecx,ebx
c002828f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028292:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028295:	89 ce                	mov    esi,ecx
c0028297:	c1 ee 14             	shr    esi,0x14
c002829a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00282a0:	89 cb                	mov    ebx,ecx
c00282a2:	c1 fb 1f             	sar    ebx,0x1f
c00282a5:	31 de                	xor    esi,ebx
c00282a7:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00282aa:	89 df                	mov    edi,ebx
c00282ac:	c1 e7 0b             	shl    edi,0xb
c00282af:	c1 e1 0b             	shl    ecx,0xb
c00282b2:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00282b8:	c1 eb 15             	shr    ebx,0x15
c00282bb:	09 d9                	or     ecx,ebx
c00282bd:	89 d3                	mov    ebx,edx
c00282bf:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00282c5:	43                   	inc    ebx
c00282c6:	83 fb 01             	cmp    ebx,0x1
c00282c9:	77 08                	ja     c00282d3 <__cmpdf2+0x7e>
c00282cb:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00282ce:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00282d1:	75 68                	jne    c002833b <__cmpdf2+0xe6>
c00282d3:	89 f3                	mov    ebx,esi
c00282d5:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00282db:	43                   	inc    ebx
c00282dc:	83 fb 01             	cmp    ebx,0x1
c00282df:	77 06                	ja     c00282e7 <__cmpdf2+0x92>
c00282e1:	89 fb                	mov    ebx,edi
c00282e3:	09 cb                	or     ebx,ecx
c00282e5:	75 54                	jne    c002833b <__cmpdf2+0xe6>
c00282e7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00282ea:	09 f8                	or     eax,edi
c00282ec:	09 c8                	or     eax,ecx
c00282ee:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c00282f1:	75 12                	jne    c0028305 <__cmpdf2+0xb0>
c00282f3:	8d 42 01             	lea    eax,[edx+0x1]
c00282f6:	83 f8 01             	cmp    eax,0x1
c00282f9:	77 0a                	ja     c0028305 <__cmpdf2+0xb0>
c00282fb:	8d 5e 01             	lea    ebx,[esi+0x1]
c00282fe:	31 c0                	xor    eax,eax
c0028300:	83 fb 01             	cmp    ebx,0x1
c0028303:	76 36                	jbe    c002833b <__cmpdf2+0xe6>
c0028305:	b8 01 00 00 00       	mov    eax,0x1
c002830a:	39 f2                	cmp    edx,esi
c002830c:	7f 2d                	jg     c002833b <__cmpdf2+0xe6>
c002830e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028313:	7c 26                	jl     c002833b <__cmpdf2+0xe6>
c0028315:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028318:	77 07                	ja     c0028321 <__cmpdf2+0xcc>
c002831a:	72 16                	jb     c0028332 <__cmpdf2+0xdd>
c002831c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c002831f:	76 0a                	jbe    c002832b <__cmpdf2+0xd6>
c0028321:	89 d0                	mov    eax,edx
c0028323:	c1 f8 1f             	sar    eax,0x1f
c0028326:	83 c8 01             	or     eax,0x1
c0028329:	eb 10                	jmp    c002833b <__cmpdf2+0xe6>
c002832b:	b8 00 00 00 00       	mov    eax,0x0
c0028330:	73 09                	jae    c002833b <__cmpdf2+0xe6>
c0028332:	89 d0                	mov    eax,edx
c0028334:	c1 f8 1f             	sar    eax,0x1f
c0028337:	83 e0 02             	and    eax,0x2
c002833a:	48                   	dec    eax
c002833b:	83 c4 0c             	add    esp,0xc
c002833e:	5b                   	pop    ebx
c002833f:	5e                   	pop    esi
c0028340:	5f                   	pop    edi
c0028341:	5d                   	pop    ebp
c0028342:	c3                   	ret    

c0028343 <__eqdf2>:
c0028343:	55                   	push   ebp
c0028344:	89 e5                	mov    ebp,esp
c0028346:	50                   	push   eax
c0028347:	6a 01                	push   0x1
c0028349:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002834c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002834f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028352:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028355:	e8 fb fe ff ff       	call   c0028255 <__cmpdf2>
c002835a:	83 c4 18             	add    esp,0x18
c002835d:	c9                   	leave  
c002835e:	c3                   	ret    

c002835f <__nedf2>:
c002835f:	eb e2                	jmp    c0028343 <__eqdf2>

c0028361 <__gtdf2>:
c0028361:	55                   	push   ebp
c0028362:	89 e5                	mov    ebp,esp
c0028364:	50                   	push   eax
c0028365:	6a ff                	push   0xffffffff
c0028367:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002836a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002836d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028370:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028373:	e8 dd fe ff ff       	call   c0028255 <__cmpdf2>
c0028378:	83 c4 18             	add    esp,0x18
c002837b:	c9                   	leave  
c002837c:	c3                   	ret    

c002837d <__gedf2>:
c002837d:	eb e2                	jmp    c0028361 <__gtdf2>

c002837f <__ltdf2>:
c002837f:	eb c2                	jmp    c0028343 <__eqdf2>

c0028381 <__ledf2>:
c0028381:	eb c0                	jmp    c0028343 <__eqdf2>

c0028383 <__truncdfsf2>:
c0028383:	55                   	push   ebp
c0028384:	89 e5                	mov    ebp,esp
c0028386:	57                   	push   edi
c0028387:	56                   	push   esi
c0028388:	53                   	push   ebx
c0028389:	83 ec 0c             	sub    esp,0xc
c002838c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002838f:	89 d1                	mov    ecx,edx
c0028391:	c1 f9 14             	sar    ecx,0x14
c0028394:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028397:	89 df                	mov    edi,ebx
c0028399:	c1 e7 0b             	shl    edi,0xb
c002839c:	89 d0                	mov    eax,edx
c002839e:	c1 e0 0b             	shl    eax,0xb
c00283a1:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00283a6:	c1 eb 15             	shr    ebx,0x15
c00283a9:	09 d8                	or     eax,ebx
c00283ab:	89 cb                	mov    ebx,ecx
c00283ad:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00283b3:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c00283b9:	81 fe fd 00 00 00    	cmp    esi,0xfd
c00283bf:	0f 86 9e 00 00 00    	jbe    c0028463 <__truncdfsf2+0xe0>
c00283c5:	85 db                	test   ebx,ebx
c00283c7:	75 0a                	jne    c00283d3 <__truncdfsf2+0x50>
c00283c9:	c1 fa 17             	sar    edx,0x17
c00283cc:	30 d2                	xor    dl,dl
c00283ce:	e9 84 00 00 00       	jmp    c0028457 <__truncdfsf2+0xd4>
c00283d3:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c00283d9:	83 fe 83             	cmp    esi,0xffffff83
c00283dc:	7d 4b                	jge    c0028429 <__truncdfsf2+0xa6>
c00283de:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c00283e3:	29 f1                	sub    ecx,esi
c00283e5:	83 f9 1f             	cmp    ecx,0x1f
c00283e8:	7f 6b                	jg     c0028455 <__truncdfsf2+0xd2>
c00283ea:	0d 00 00 00 80       	or     eax,0x80000000
c00283ef:	89 c3                	mov    ebx,eax
c00283f1:	d3 eb                	shr    ebx,cl
c00283f3:	be 01 00 00 00       	mov    esi,0x1
c00283f8:	d3 e6                	shl    esi,cl
c00283fa:	4e                   	dec    esi
c00283fb:	21 f0                	and    eax,esi
c00283fd:	09 f8                	or     eax,edi
c00283ff:	0f 95 c0             	setne  al
c0028402:	0f b6 c0             	movzx  eax,al
c0028405:	09 c3                	or     ebx,eax
c0028407:	89 d9                	mov    ecx,ebx
c0028409:	c1 e9 08             	shr    ecx,0x8
c002840c:	f6 c3 7f             	test   bl,0x7f
c002840f:	0f 95 c0             	setne  al
c0028412:	09 c8                	or     eax,ecx
c0028414:	83 e0 01             	and    eax,0x1
c0028417:	c1 eb 07             	shr    ebx,0x7
c002841a:	21 c3                	and    ebx,eax
c002841c:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028422:	09 d1                	or     ecx,edx
c0028424:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028427:	eb 76                	jmp    c002849f <__truncdfsf2+0x11c>
c0028429:	83 c6 80             	add    esi,0xffffff80
c002842c:	7e 1d                	jle    c002844b <__truncdfsf2+0xc8>
c002842e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028434:	75 0b                	jne    c0028441 <__truncdfsf2+0xbe>
c0028436:	09 f8                	or     eax,edi
c0028438:	74 09                	je     c0028443 <__truncdfsf2+0xc0>
c002843a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c002843f:	eb 02                	jmp    c0028443 <__truncdfsf2+0xc0>
c0028441:	31 c0                	xor    eax,eax
c0028443:	c1 fa 17             	sar    edx,0x17
c0028446:	80 ca ff             	or     dl,0xff
c0028449:	eb 0e                	jmp    c0028459 <__truncdfsf2+0xd6>
c002844b:	c1 fa 1f             	sar    edx,0x1f
c002844e:	c1 e2 08             	shl    edx,0x8
c0028451:	09 ca                	or     edx,ecx
c0028453:	eb 04                	jmp    c0028459 <__truncdfsf2+0xd6>
c0028455:	31 d2                	xor    edx,edx
c0028457:	31 c0                	xor    eax,eax
c0028459:	c1 e2 17             	shl    edx,0x17
c002845c:	c1 e8 08             	shr    eax,0x8
c002845f:	09 d0                	or     eax,edx
c0028461:	eb 3c                	jmp    c002849f <__truncdfsf2+0x11c>
c0028463:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028469:	89 ca                	mov    edx,ecx
c002846b:	c1 fa 0b             	sar    edx,0xb
c002846e:	c1 e2 08             	shl    edx,0x8
c0028471:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028474:	31 db                	xor    ebx,ebx
c0028476:	85 ff                	test   edi,edi
c0028478:	0f 95 c3             	setne  bl
c002847b:	09 d8                	or     eax,ebx
c002847d:	89 c3                	mov    ebx,eax
c002847f:	c1 eb 08             	shr    ebx,0x8
c0028482:	a8 7f                	test   al,0x7f
c0028484:	0f 95 c2             	setne  dl
c0028487:	89 d6                	mov    esi,edx
c0028489:	09 de                	or     esi,ebx
c002848b:	83 e6 01             	and    esi,0x1
c002848e:	c1 e8 07             	shr    eax,0x7
c0028491:	21 f0                	and    eax,esi
c0028493:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028496:	09 ca                	or     edx,ecx
c0028498:	c1 e2 17             	shl    edx,0x17
c002849b:	09 da                	or     edx,ebx
c002849d:	01 d0                	add    eax,edx
c002849f:	83 c4 0c             	add    esp,0xc
c00284a2:	5b                   	pop    ebx
c00284a3:	5e                   	pop    esi
c00284a4:	5f                   	pop    edi
c00284a5:	5d                   	pop    ebp
c00284a6:	c3                   	ret    

c00284a7 <__extendsfdf2>:
c00284a7:	55                   	push   ebp
c00284a8:	89 e5                	mov    ebp,esp
c00284aa:	57                   	push   edi
c00284ab:	56                   	push   esi
c00284ac:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00284af:	89 d1                	mov    ecx,edx
c00284b1:	c1 f9 17             	sar    ecx,0x17
c00284b4:	c1 e2 08             	shl    edx,0x8
c00284b7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00284bd:	89 c8                	mov    eax,ecx
c00284bf:	80 e4 f8             	and    ah,0xf8
c00284c2:	8d 71 01             	lea    esi,[ecx+0x1]
c00284c5:	81 e6 fe 00 00 00    	and    esi,0xfe
c00284cb:	75 27                	jne    c00284f4 <__extendsfdf2+0x4d>
c00284cd:	81 e1 ff 00 00 00    	and    ecx,0xff
c00284d3:	75 18                	jne    c00284ed <__extendsfdf2+0x46>
c00284d5:	85 d2                	test   edx,edx
c00284d7:	74 20                	je     c00284f9 <__extendsfdf2+0x52>
c00284d9:	41                   	inc    ecx
c00284da:	01 d2                	add    edx,edx
c00284dc:	79 fb                	jns    c00284d9 <__extendsfdf2+0x32>
c00284de:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00284e4:	29 c8                	sub    eax,ecx
c00284e6:	05 81 03 00 00       	add    eax,0x381
c00284eb:	eb 0c                	jmp    c00284f9 <__extendsfdf2+0x52>
c00284ed:	05 00 07 00 00       	add    eax,0x700
c00284f2:	eb 05                	jmp    c00284f9 <__extendsfdf2+0x52>
c00284f4:	05 80 03 00 00       	add    eax,0x380
c00284f9:	c1 e0 14             	shl    eax,0x14
c00284fc:	89 c1                	mov    ecx,eax
c00284fe:	89 d0                	mov    eax,edx
c0028500:	c1 e8 0b             	shr    eax,0xb
c0028503:	09 c1                	or     ecx,eax
c0028505:	c1 e2 15             	shl    edx,0x15
c0028508:	89 d0                	mov    eax,edx
c002850a:	89 ca                	mov    edx,ecx
c002850c:	5e                   	pop    esi
c002850d:	5f                   	pop    edi
c002850e:	5d                   	pop    ebp
c002850f:	c3                   	ret    

c0028510 <fabs>:
c0028510:	83 ec 0c             	sub    esp,0xc
c0028513:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028517:	89 04 24             	mov    DWORD PTR [esp],eax
c002851a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002851e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028523:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028527:	dd 04 24             	fld    QWORD PTR [esp]
c002852a:	83 c4 0c             	add    esp,0xc
c002852d:	c3                   	ret    
c002852e:	66 90                	xchg   ax,ax

c0028530 <lrint>:
c0028530:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028534:	83 ec 04             	sub    esp,0x4
c0028537:	db 1c 24             	fistp  DWORD PTR [esp]
c002853a:	58                   	pop    eax
c002853b:	c3                   	ret    

c002853c <lrintf>:
c002853c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028540:	83 ec 04             	sub    esp,0x4
c0028543:	db 1c 24             	fistp  DWORD PTR [esp]
c0028546:	58                   	pop    eax
c0028547:	c3                   	ret    

Disassembly of section .init:

c0028548 <_init>:
c0028548:	55                   	push   ebp
c0028549:	89 e5                	mov    ebp,esp
c002854b:	e8 c8 7b fd ff       	call   c0000118 <frame_dummy>
c0028550:	e8 63 e0 ff ff       	call   c00265b8 <__do_global_ctors_aux>
c0028555:	5d                   	pop    ebp
c0028556:	c3                   	ret    

Disassembly of section .fini:

c0028557 <_fini>:
c0028557:	55                   	push   ebp
c0028558:	89 e5                	mov    ebp,esp
c002855a:	e8 49 7b fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002855f:	5d                   	pop    ebp
c0028560:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028562 <Computer::~Computer()>:
c0028562:	83 ec 0c             	sub    esp,0xc
c0028565:	ba a8 a0 02 c0       	mov    edx,0xc002a0a8
c002856a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002856e:	89 10                	mov    DWORD PTR [eax],edx
c0028570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028574:	83 ec 0c             	sub    esp,0xc
c0028577:	50                   	push   eax
c0028578:	e8 4f bb fe ff       	call   c00140cc <Device::~Device()>
c002857d:	83 c4 10             	add    esp,0x10
c0028580:	90                   	nop
c0028581:	83 c4 0c             	add    esp,0xc
c0028584:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028586 <Computer::~Computer()>:
c0028586:	83 ec 0c             	sub    esp,0xc
c0028589:	83 ec 0c             	sub    esp,0xc
c002858c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028590:	e8 cd ff ff ff       	call   c0028562 <Computer::~Computer()>
c0028595:	83 c4 10             	add    esp,0x10
c0028598:	83 ec 08             	sub    esp,0x8
c002859b:	68 ec 01 00 00       	push   0x1ec
c00285a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00285a4:	e8 4b a7 fe ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c00285a9:	83 c4 10             	add    esp,0x10
c00285ac:	83 c4 0c             	add    esp,0xc
c00285af:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00285b0 <idleCommon()>:
c00285b0:	83 ec 0c             	sub    esp,0xc
c00285b3:	e8 f1 56 ff ff       	call   c001dca9 <lockScheduler()>
c00285b8:	e8 27 5a ff ff       	call   c001dfe4 <schedule()>
c00285bd:	83 c4 0c             	add    esp,0xc
c00285c0:	e9 e6 56 ff ff       	jmp    c001dcab <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00285c6 <LinkedList<UnixFile>::~LinkedList()>:
c00285c6:	90                   	nop
c00285c7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00285c8 <LinkedList<UnixFile>::LinkedList()>:
c00285c8:	83 ec 0c             	sub    esp,0xc
c00285cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285cf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00285d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285d9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00285e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285e4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00285eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285ef:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00285f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285f9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028604:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002860b:	83 ec 0c             	sub    esp,0xc
c002860e:	68 82 a3 02 c0       	push   0xc002a382
c0028613:	e8 bc a7 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0028618:	83 c4 10             	add    esp,0x10
c002861b:	90                   	nop
c002861c:	83 c4 0c             	add    esp,0xc
c002861f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028620 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028620:	83 ec 0c             	sub    esp,0xc
c0028623:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028628:	75 10                	jne    c002863a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002862a:	83 ec 0c             	sub    esp,0xc
c002862d:	68 9c a3 02 c0       	push   0xc002a39c
c0028632:	e8 78 1e ff ff       	call   c001a4af <Krnl::panic(char const*)>
c0028637:	83 c4 10             	add    esp,0x10
c002863a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002863e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028640:	85 c0                	test   eax,eax
c0028642:	74 34                	je     c0028678 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028644:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028648:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002864b:	85 c0                	test   eax,eax
c002864d:	74 29                	je     c0028678 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002864f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028653:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028656:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002865a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002865d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028665:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028668:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002866c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002866f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028676:	eb 65                	jmp    c00286dd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028678:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002867c:	8b 00                	mov    eax,DWORD PTR [eax]
c002867e:	85 c0                	test   eax,eax
c0028680:	75 4b                	jne    c00286cd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028686:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028689:	85 c0                	test   eax,eax
c002868b:	75 40                	jne    c00286cd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002868d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028691:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028695:	89 10                	mov    DWORD PTR [eax],edx
c0028697:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002869b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002869f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00286a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286a9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00286b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286b4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00286b7:	85 c0                	test   eax,eax
c00286b9:	74 22                	je     c00286dd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00286bb:	83 ec 0c             	sub    esp,0xc
c00286be:	68 be a3 02 c0       	push   0xc002a3be
c00286c3:	e8 e7 1d ff ff       	call   c001a4af <Krnl::panic(char const*)>
c00286c8:	83 c4 10             	add    esp,0x10
c00286cb:	eb 10                	jmp    c00286dd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00286cd:	83 ec 0c             	sub    esp,0xc
c00286d0:	68 c8 a3 02 c0       	push   0xc002a3c8
c00286d5:	e8 d5 1d ff ff       	call   c001a4af <Krnl::panic(char const*)>
c00286da:	83 c4 10             	add    esp,0x10
c00286dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286e1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00286e4:	8d 50 01             	lea    edx,[eax+0x1]
c00286e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286eb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00286ee:	90                   	nop
c00286ef:	83 c4 0c             	add    esp,0xc
c00286f2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00286f4 <LinkedList<UnixFile>::getFirstElement()>:
c00286f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00286f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00286fa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00286fc <LinkedList<UnixFile>::removeFirst()>:
c00286fc:	83 ec 0c             	sub    esp,0xc
c00286ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028703:	8b 00                	mov    eax,DWORD PTR [eax]
c0028705:	85 c0                	test   eax,eax
c0028707:	75 12                	jne    c002871b <LinkedList<UnixFile>::removeFirst()+0x1f>
c0028709:	83 ec 0c             	sub    esp,0xc
c002870c:	68 d4 a3 02 c0       	push   0xc002a3d4
c0028711:	e8 99 1d ff ff       	call   c001a4af <Krnl::panic(char const*)>
c0028716:	83 c4 10             	add    esp,0x10
c0028719:	eb 7e                	jmp    c0028799 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002871b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002871f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028722:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028725:	85 c0                	test   eax,eax
c0028727:	74 10                	je     c0028739 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0028729:	83 ec 0c             	sub    esp,0xc
c002872c:	68 1f a4 02 c0       	push   0xc002a41f
c0028731:	e8 79 1d ff ff       	call   c001a4af <Krnl::panic(char const*)>
c0028736:	83 c4 10             	add    esp,0x10
c0028739:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002873d:	8b 00                	mov    eax,DWORD PTR [eax]
c002873f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028742:	85 c0                	test   eax,eax
c0028744:	75 33                	jne    c0028779 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028746:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002874a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028754:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002875b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002875f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028762:	83 f8 01             	cmp    eax,0x1
c0028765:	74 21                	je     c0028788 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028767:	83 ec 0c             	sub    esp,0xc
c002876a:	68 f8 a3 02 c0       	push   0xc002a3f8
c002876f:	e8 3b 1d ff ff       	call   c001a4af <Krnl::panic(char const*)>
c0028774:	83 c4 10             	add    esp,0x10
c0028777:	eb 0f                	jmp    c0028788 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002877d:	8b 00                	mov    eax,DWORD PTR [eax]
c002877f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028786:	89 10                	mov    DWORD PTR [eax],edx
c0028788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002878c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002878f:	8d 50 ff             	lea    edx,[eax-0x1]
c0028792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028796:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028799:	83 c4 0c             	add    esp,0xc
c002879c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002879e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002879e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00287a2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287a5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00287a6 <DriverlessDevice::~DriverlessDevice()>:
c00287a6:	ba 24 ab 02 c0       	mov    edx,0xc002ab24
c00287ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287af:	89 10                	mov    DWORD PTR [eax],edx
c00287b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287b5:	50                   	push   eax
c00287b6:	e8 11 b9 fe ff       	call   c00140cc <Device::~Device()>
c00287bb:	83 c4 04             	add    esp,0x4
c00287be:	90                   	nop
c00287bf:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00287c0 <DriverlessDevice::~DriverlessDevice()>:
c00287c0:	83 ec 0c             	sub    esp,0xc
c00287c3:	83 ec 0c             	sub    esp,0xc
c00287c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00287ca:	e8 d7 ff ff ff       	call   c00287a6 <DriverlessDevice::~DriverlessDevice()>
c00287cf:	83 c4 10             	add    esp,0x10
c00287d2:	83 ec 08             	sub    esp,0x8
c00287d5:	68 58 01 00 00       	push   0x158
c00287da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00287de:	e8 11 a5 fe ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c00287e3:	83 c4 10             	add    esp,0x10
c00287e6:	83 c4 0c             	add    esp,0xc
c00287e9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00287ea <LinkedList<Device>::addElement(Device*)>:
c00287ea:	83 ec 0c             	sub    esp,0xc
c00287ed:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00287f2:	75 10                	jne    c0028804 <LinkedList<Device>::addElement(Device*)+0x1a>
c00287f4:	83 ec 0c             	sub    esp,0xc
c00287f7:	68 9c a3 02 c0       	push   0xc002a39c
c00287fc:	e8 ae 1c ff ff       	call   c001a4af <Krnl::panic(char const*)>
c0028801:	83 c4 10             	add    esp,0x10
c0028804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028808:	8b 00                	mov    eax,DWORD PTR [eax]
c002880a:	85 c0                	test   eax,eax
c002880c:	74 3a                	je     c0028848 <LinkedList<Device>::addElement(Device*)+0x5e>
c002880e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028812:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028815:	85 c0                	test   eax,eax
c0028817:	74 2f                	je     c0028848 <LinkedList<Device>::addElement(Device*)+0x5e>
c0028819:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002881d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028820:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028824:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002882a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002882e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028832:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028839:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002883c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028846:	eb 68                	jmp    c00288b0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002884c:	8b 00                	mov    eax,DWORD PTR [eax]
c002884e:	85 c0                	test   eax,eax
c0028850:	75 4e                	jne    c00288a0 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028856:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028859:	85 c0                	test   eax,eax
c002885b:	75 43                	jne    c00288a0 <LinkedList<Device>::addElement(Device*)+0xb6>
c002885d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028861:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028865:	89 10                	mov    DWORD PTR [eax],edx
c0028867:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002886b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002886f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028876:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028879:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028883:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028887:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002888a:	85 c0                	test   eax,eax
c002888c:	74 22                	je     c00288b0 <LinkedList<Device>::addElement(Device*)+0xc6>
c002888e:	83 ec 0c             	sub    esp,0xc
c0028891:	68 be a3 02 c0       	push   0xc002a3be
c0028896:	e8 14 1c ff ff       	call   c001a4af <Krnl::panic(char const*)>
c002889b:	83 c4 10             	add    esp,0x10
c002889e:	eb 10                	jmp    c00288b0 <LinkedList<Device>::addElement(Device*)+0xc6>
c00288a0:	83 ec 0c             	sub    esp,0xc
c00288a3:	68 c8 a3 02 c0       	push   0xc002a3c8
c00288a8:	e8 02 1c ff ff       	call   c001a4af <Krnl::panic(char const*)>
c00288ad:	83 c4 10             	add    esp,0x10
c00288b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288b4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288b7:	8d 50 01             	lea    edx,[eax+0x1]
c00288ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288be:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00288c1:	90                   	nop
c00288c2:	83 c4 0c             	add    esp,0xc
c00288c5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00288c6 <LinkedList<Device>::LinkedList()>:
c00288c6:	83 ec 0c             	sub    esp,0xc
c00288c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288cd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00288d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288d7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00288de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288e2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00288e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288ed:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00288f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288f7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00288fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028902:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028909:	83 ec 0c             	sub    esp,0xc
c002890c:	68 82 a3 02 c0       	push   0xc002a382
c0028911:	e8 be a4 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0028916:	83 c4 10             	add    esp,0x10
c0028919:	90                   	nop
c002891a:	83 c4 0c             	add    esp,0xc
c002891d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002891e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002891e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028922:	8b 00                	mov    eax,DWORD PTR [eax]
c0028924:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028926 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028926:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002892a:	8b 00                	mov    eax,DWORD PTR [eax]
c002892c:	85 c0                	test   eax,eax
c002892e:	75 0e                	jne    c002893e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028934:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028937:	85 c0                	test   eax,eax
c0028939:	75 03                	jne    c002893e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002893b:	b0 01                	mov    al,0x1
c002893d:	c3                   	ret    
c002893e:	b0 00                	mov    al,0x0
c0028940:	90                   	nop
c0028941:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028942 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028942:	83 ec 0c             	sub    esp,0xc
c0028945:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028949:	8b 00                	mov    eax,DWORD PTR [eax]
c002894b:	85 c0                	test   eax,eax
c002894d:	75 15                	jne    c0028964 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002894f:	83 ec 0c             	sub    esp,0xc
c0028952:	68 d4 a3 02 c0       	push   0xc002a3d4
c0028957:	e8 53 1b ff ff       	call   c001a4af <Krnl::panic(char const*)>
c002895c:	83 c4 10             	add    esp,0x10
c002895f:	e9 88 00 00 00       	jmp    c00289ec <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028968:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002896b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002896e:	85 c0                	test   eax,eax
c0028970:	0f 95 c0             	setne  al
c0028973:	84 c0                	test   al,al
c0028975:	74 10                	je     c0028987 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028977:	83 ec 0c             	sub    esp,0xc
c002897a:	68 1f a4 02 c0       	push   0xc002a41f
c002897f:	e8 2b 1b ff ff       	call   c001a4af <Krnl::panic(char const*)>
c0028984:	83 c4 10             	add    esp,0x10
c0028987:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002898b:	8b 00                	mov    eax,DWORD PTR [eax]
c002898d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028990:	85 c0                	test   eax,eax
c0028992:	0f 94 c0             	sete   al
c0028995:	84 c0                	test   al,al
c0028997:	74 33                	je     c00289cc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028999:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002899d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00289a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289a7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00289ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289b2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289b5:	83 f8 01             	cmp    eax,0x1
c00289b8:	74 21                	je     c00289db <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00289ba:	83 ec 0c             	sub    esp,0xc
c00289bd:	68 f8 a3 02 c0       	push   0xc002a3f8
c00289c2:	e8 e8 1a ff ff       	call   c001a4af <Krnl::panic(char const*)>
c00289c7:	83 c4 10             	add    esp,0x10
c00289ca:	eb 0f                	jmp    c00289db <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00289cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00289d2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00289d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289d9:	89 10                	mov    DWORD PTR [eax],edx
c00289db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289df:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289e2:	8d 50 ff             	lea    edx,[eax-0x1]
c00289e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289e9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00289ec:	83 c4 0c             	add    esp,0xc
c00289ef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00289f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00289f0:	83 ec 0c             	sub    esp,0xc
c00289f3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00289f8:	75 10                	jne    c0028a0a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c00289fa:	83 ec 0c             	sub    esp,0xc
c00289fd:	68 9c a3 02 c0       	push   0xc002a39c
c0028a02:	e8 a8 1a ff ff       	call   c001a4af <Krnl::panic(char const*)>
c0028a07:	83 c4 10             	add    esp,0x10
c0028a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a10:	85 c0                	test   eax,eax
c0028a12:	74 34                	je     c0028a48 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028a14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a1b:	85 c0                	test   eax,eax
c0028a1d:	74 29                	je     c0028a48 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028a1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a23:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a26:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a2a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028a2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a31:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a35:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028a38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a3f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028a46:	eb 65                	jmp    c0028aad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028a48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a4e:	85 c0                	test   eax,eax
c0028a50:	75 4b                	jne    c0028a9d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028a52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a56:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a59:	85 c0                	test   eax,eax
c0028a5b:	75 40                	jne    c0028a9d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028a5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a61:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a65:	89 10                	mov    DWORD PTR [eax],edx
c0028a67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a6b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a6f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028a72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a79:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028a80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a84:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a87:	85 c0                	test   eax,eax
c0028a89:	74 22                	je     c0028aad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028a8b:	83 ec 0c             	sub    esp,0xc
c0028a8e:	68 be a3 02 c0       	push   0xc002a3be
c0028a93:	e8 17 1a ff ff       	call   c001a4af <Krnl::panic(char const*)>
c0028a98:	83 c4 10             	add    esp,0x10
c0028a9b:	eb 10                	jmp    c0028aad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028a9d:	83 ec 0c             	sub    esp,0xc
c0028aa0:	68 c8 a3 02 c0       	push   0xc002a3c8
c0028aa5:	e8 05 1a ff ff       	call   c001a4af <Krnl::panic(char const*)>
c0028aaa:	83 c4 10             	add    esp,0x10
c0028aad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ab1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ab4:	8d 50 01             	lea    edx,[eax+0x1]
c0028ab7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028abb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028abe:	90                   	nop
c0028abf:	83 c4 0c             	add    esp,0xc
c0028ac2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028ac4 <ACPI::~ACPI()>:
c0028ac4:	83 ec 0c             	sub    esp,0xc
c0028ac7:	ba 8c b4 02 c0       	mov    edx,0xc002b48c
c0028acc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ad0:	89 10                	mov    DWORD PTR [eax],edx
c0028ad2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ad6:	83 ec 0c             	sub    esp,0xc
c0028ad9:	50                   	push   eax
c0028ada:	e8 ed b5 fe ff       	call   c00140cc <Device::~Device()>
c0028adf:	83 c4 10             	add    esp,0x10
c0028ae2:	90                   	nop
c0028ae3:	83 c4 0c             	add    esp,0xc
c0028ae6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028ae8 <ACPI::~ACPI()>:
c0028ae8:	83 ec 0c             	sub    esp,0xc
c0028aeb:	83 ec 0c             	sub    esp,0xc
c0028aee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028af2:	e8 cd ff ff ff       	call   c0028ac4 <ACPI::~ACPI()>
c0028af7:	83 c4 10             	add    esp,0x10
c0028afa:	83 ec 08             	sub    esp,0x8
c0028afd:	68 68 12 00 00       	push   0x1268
c0028b02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b06:	e8 e9 a1 fe ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0028b0b:	83 c4 10             	add    esp,0x10
c0028b0e:	83 c4 0c             	add    esp,0xc
c0028b11:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028b12 <CPU::~CPU()>:
c0028b12:	83 ec 0c             	sub    esp,0xc
c0028b15:	ba 7c b8 02 c0       	mov    edx,0xc002b87c
c0028b1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b1e:	89 10                	mov    DWORD PTR [eax],edx
c0028b20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b24:	83 ec 0c             	sub    esp,0xc
c0028b27:	50                   	push   eax
c0028b28:	e8 9f b5 fe ff       	call   c00140cc <Device::~Device()>
c0028b2d:	83 c4 10             	add    esp,0x10
c0028b30:	90                   	nop
c0028b31:	83 c4 0c             	add    esp,0xc
c0028b34:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028b36 <CPU::~CPU()>:
c0028b36:	83 ec 0c             	sub    esp,0xc
c0028b39:	83 ec 0c             	sub    esp,0xc
c0028b3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b40:	e8 cd ff ff ff       	call   c0028b12 <CPU::~CPU()>
c0028b45:	83 c4 10             	add    esp,0x10
c0028b48:	83 ec 08             	sub    esp,0x8
c0028b4b:	68 98 11 00 00       	push   0x1198
c0028b50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b54:	e8 9b a1 fe ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0028b59:	83 c4 10             	add    esp,0x10
c0028b5c:	83 c4 0c             	add    esp,0xc
c0028b5f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028b60 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028b60:	90                   	nop
c0028b61:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028b62 <ThreadControlBlock::ThreadControlBlock()>:
c0028b62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b66:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028b6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b71:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028b78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b7c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028b83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b87:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028b8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b92:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028b96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b9a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028b9e:	90                   	nop
c0028b9f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028ba0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028ba0:	83 ec 0c             	sub    esp,0xc
c0028ba3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ba7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028bad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bb1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028bb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bbc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028bc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bc7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028bcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bd1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028bd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bdc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028be3:	83 ec 0c             	sub    esp,0xc
c0028be6:	68 82 a3 02 c0       	push   0xc002a382
c0028beb:	e8 e4 a1 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0028bf0:	83 c4 10             	add    esp,0x10
c0028bf3:	90                   	nop
c0028bf4:	83 c4 0c             	add    esp,0xc
c0028bf7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028bf8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028bf8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028bfc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028bff:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028c00 <Vm::_FPUState::_FPUState()>:
c0028c00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c04:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028c0b:	90                   	nop
c0028c0c:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028c0e <PCI::~PCI()>:
c0028c0e:	83 ec 0c             	sub    esp,0xc
c0028c11:	ba 08 c9 02 c0       	mov    edx,0xc002c908
c0028c16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c1a:	89 10                	mov    DWORD PTR [eax],edx
c0028c1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c20:	83 ec 0c             	sub    esp,0xc
c0028c23:	50                   	push   eax
c0028c24:	e8 7b ae fe ff       	call   c0013aa4 <Bus::~Bus()>
c0028c29:	83 c4 10             	add    esp,0x10
c0028c2c:	90                   	nop
c0028c2d:	83 c4 0c             	add    esp,0xc
c0028c30:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028c32 <PCI::~PCI()>:
c0028c32:	83 ec 0c             	sub    esp,0xc
c0028c35:	83 ec 0c             	sub    esp,0xc
c0028c38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c3c:	e8 cd ff ff ff       	call   c0028c0e <PCI::~PCI()>
c0028c41:	83 c4 10             	add    esp,0x10
c0028c44:	83 ec 08             	sub    esp,0x8
c0028c47:	68 58 01 00 00       	push   0x158
c0028c4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c50:	e8 9f a0 fe ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0028c55:	83 c4 10             	add    esp,0x10
c0028c58:	83 c4 0c             	add    esp,0xc
c0028c5b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028c5c <IDE::~IDE()>:
c0028c5c:	83 ec 0c             	sub    esp,0xc
c0028c5f:	ba 6c cb 02 c0       	mov    edx,0xc002cb6c
c0028c64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c68:	89 10                	mov    DWORD PTR [eax],edx
c0028c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c6e:	83 ec 0c             	sub    esp,0xc
c0028c71:	50                   	push   eax
c0028c72:	e8 45 b9 fe ff       	call   c00145bc <HardDiskController::~HardDiskController()>
c0028c77:	83 c4 10             	add    esp,0x10
c0028c7a:	90                   	nop
c0028c7b:	83 c4 0c             	add    esp,0xc
c0028c7e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028c80 <IDE::~IDE()>:
c0028c80:	83 ec 0c             	sub    esp,0xc
c0028c83:	83 ec 0c             	sub    esp,0xc
c0028c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c8a:	e8 cd ff ff ff       	call   c0028c5c <IDE::~IDE()>
c0028c8f:	83 c4 10             	add    esp,0x10
c0028c92:	83 ec 08             	sub    esp,0x8
c0028c95:	68 70 02 00 00       	push   0x270
c0028c9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c9e:	e8 51 a0 fe ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0028ca3:	83 c4 10             	add    esp,0x10
c0028ca6:	83 c4 0c             	add    esp,0xc
c0028ca9:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028caa <SATABus::~SATABus()>:
c0028caa:	83 ec 0c             	sub    esp,0xc
c0028cad:	ba 4c cc 02 c0       	mov    edx,0xc002cc4c
c0028cb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cb6:	89 10                	mov    DWORD PTR [eax],edx
c0028cb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cbc:	83 ec 0c             	sub    esp,0xc
c0028cbf:	50                   	push   eax
c0028cc0:	e8 f7 b8 fe ff       	call   c00145bc <HardDiskController::~HardDiskController()>
c0028cc5:	83 c4 10             	add    esp,0x10
c0028cc8:	90                   	nop
c0028cc9:	83 c4 0c             	add    esp,0xc
c0028ccc:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028cce <SATABus::~SATABus()>:
c0028cce:	83 ec 0c             	sub    esp,0xc
c0028cd1:	83 ec 0c             	sub    esp,0xc
c0028cd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cd8:	e8 cd ff ff ff       	call   c0028caa <SATABus::~SATABus()>
c0028cdd:	83 c4 10             	add    esp,0x10
c0028ce0:	83 ec 08             	sub    esp,0x8
c0028ce3:	68 64 01 00 00       	push   0x164
c0028ce8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cec:	e8 03 a0 fe ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0028cf1:	83 c4 10             	add    esp,0x10
c0028cf4:	83 c4 0c             	add    esp,0xc
c0028cf7:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028cf8 <ATA::~ATA()>:
c0028cf8:	83 ec 0c             	sub    esp,0xc
c0028cfb:	ba 98 cc 02 c0       	mov    edx,0xc002cc98
c0028d00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d04:	89 10                	mov    DWORD PTR [eax],edx
c0028d06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d0a:	83 ec 0c             	sub    esp,0xc
c0028d0d:	50                   	push   eax
c0028d0e:	e8 9b b9 fe ff       	call   c00146ae <PhysicalDisk::~PhysicalDisk()>
c0028d13:	83 c4 10             	add    esp,0x10
c0028d16:	90                   	nop
c0028d17:	83 c4 0c             	add    esp,0xc
c0028d1a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028d1c <ATA::~ATA()>:
c0028d1c:	83 ec 0c             	sub    esp,0xc
c0028d1f:	83 ec 0c             	sub    esp,0xc
c0028d22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d26:	e8 cd ff ff ff       	call   c0028cf8 <ATA::~ATA()>
c0028d2b:	83 c4 10             	add    esp,0x10
c0028d2e:	83 ec 08             	sub    esp,0x8
c0028d31:	68 7c 01 00 00       	push   0x17c
c0028d36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d3a:	e8 b5 9f fe ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0028d3f:	83 c4 10             	add    esp,0x10
c0028d42:	83 c4 0c             	add    esp,0xc
c0028d45:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028d46 <ATAPI::~ATAPI()>:
c0028d46:	83 ec 0c             	sub    esp,0xc
c0028d49:	ba d0 cc 02 c0       	mov    edx,0xc002ccd0
c0028d4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d52:	89 10                	mov    DWORD PTR [eax],edx
c0028d54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d58:	83 ec 0c             	sub    esp,0xc
c0028d5b:	50                   	push   eax
c0028d5c:	e8 4d b9 fe ff       	call   c00146ae <PhysicalDisk::~PhysicalDisk()>
c0028d61:	83 c4 10             	add    esp,0x10
c0028d64:	90                   	nop
c0028d65:	83 c4 0c             	add    esp,0xc
c0028d68:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028d6a <ATAPI::~ATAPI()>:
c0028d6a:	83 ec 0c             	sub    esp,0xc
c0028d6d:	83 ec 0c             	sub    esp,0xc
c0028d70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d74:	e8 cd ff ff ff       	call   c0028d46 <ATAPI::~ATAPI()>
c0028d79:	83 c4 10             	add    esp,0x10
c0028d7c:	83 ec 08             	sub    esp,0x8
c0028d7f:	68 80 01 00 00       	push   0x180
c0028d84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d88:	e8 67 9f fe ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0028d8d:	83 c4 10             	add    esp,0x10
c0028d90:	83 c4 0c             	add    esp,0xc
c0028d93:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028d94 <SATA::~SATA()>:
c0028d94:	83 ec 0c             	sub    esp,0xc
c0028d97:	ba 84 cd 02 c0       	mov    edx,0xc002cd84
c0028d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028da0:	89 10                	mov    DWORD PTR [eax],edx
c0028da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028da6:	83 ec 0c             	sub    esp,0xc
c0028da9:	50                   	push   eax
c0028daa:	e8 ff b8 fe ff       	call   c00146ae <PhysicalDisk::~PhysicalDisk()>
c0028daf:	83 c4 10             	add    esp,0x10
c0028db2:	90                   	nop
c0028db3:	83 c4 0c             	add    esp,0xc
c0028db6:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028db8 <SATA::~SATA()>:
c0028db8:	83 ec 0c             	sub    esp,0xc
c0028dbb:	83 ec 0c             	sub    esp,0xc
c0028dbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dc2:	e8 cd ff ff ff       	call   c0028d94 <SATA::~SATA()>
c0028dc7:	83 c4 10             	add    esp,0x10
c0028dca:	83 ec 08             	sub    esp,0x8
c0028dcd:	68 7c 01 00 00       	push   0x17c
c0028dd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dd6:	e8 19 9f fe ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0028ddb:	83 c4 10             	add    esp,0x10
c0028dde:	83 c4 0c             	add    esp,0xc
c0028de1:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028de2 <SATAPI::~SATAPI()>:
c0028de2:	83 ec 0c             	sub    esp,0xc
c0028de5:	ba 60 ce 02 c0       	mov    edx,0xc002ce60
c0028dea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dee:	89 10                	mov    DWORD PTR [eax],edx
c0028df0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028df4:	83 ec 0c             	sub    esp,0xc
c0028df7:	50                   	push   eax
c0028df8:	e8 b1 b8 fe ff       	call   c00146ae <PhysicalDisk::~PhysicalDisk()>
c0028dfd:	83 c4 10             	add    esp,0x10
c0028e00:	90                   	nop
c0028e01:	83 c4 0c             	add    esp,0xc
c0028e04:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028e06 <SATAPI::~SATAPI()>:
c0028e06:	83 ec 0c             	sub    esp,0xc
c0028e09:	83 ec 0c             	sub    esp,0xc
c0028e0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e10:	e8 cd ff ff ff       	call   c0028de2 <SATAPI::~SATAPI()>
c0028e15:	83 c4 10             	add    esp,0x10
c0028e18:	83 ec 08             	sub    esp,0x8
c0028e1b:	68 80 01 00 00       	push   0x180
c0028e20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e24:	e8 cb 9e fe ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0028e29:	83 c4 10             	add    esp,0x10
c0028e2c:	83 c4 0c             	add    esp,0xc
c0028e2f:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028e30 <AVX::~AVX()>:
c0028e30:	83 ec 0c             	sub    esp,0xc
c0028e33:	ba a0 ce 02 c0       	mov    edx,0xc002cea0
c0028e38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e3c:	89 10                	mov    DWORD PTR [eax],edx
c0028e3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e42:	83 ec 0c             	sub    esp,0xc
c0028e45:	50                   	push   eax
c0028e46:	e8 e7 b8 fe ff       	call   c0014732 <FPU::~FPU()>
c0028e4b:	83 c4 10             	add    esp,0x10
c0028e4e:	90                   	nop
c0028e4f:	83 c4 0c             	add    esp,0xc
c0028e52:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028e54 <AVX::~AVX()>:
c0028e54:	83 ec 0c             	sub    esp,0xc
c0028e57:	83 ec 0c             	sub    esp,0xc
c0028e5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e5e:	e8 cd ff ff ff       	call   c0028e30 <AVX::~AVX()>
c0028e63:	83 c4 10             	add    esp,0x10
c0028e66:	83 ec 08             	sub    esp,0x8
c0028e69:	68 58 01 00 00       	push   0x158
c0028e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e72:	e8 7d 9e fe ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0028e77:	83 c4 10             	add    esp,0x10
c0028e7a:	83 c4 0c             	add    esp,0xc
c0028e7d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028e7e <MMX::~MMX()>:
c0028e7e:	83 ec 0c             	sub    esp,0xc
c0028e81:	ba e0 ce 02 c0       	mov    edx,0xc002cee0
c0028e86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e8a:	89 10                	mov    DWORD PTR [eax],edx
c0028e8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e90:	83 ec 0c             	sub    esp,0xc
c0028e93:	50                   	push   eax
c0028e94:	e8 99 b8 fe ff       	call   c0014732 <FPU::~FPU()>
c0028e99:	83 c4 10             	add    esp,0x10
c0028e9c:	90                   	nop
c0028e9d:	83 c4 0c             	add    esp,0xc
c0028ea0:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028ea2 <MMX::~MMX()>:
c0028ea2:	83 ec 0c             	sub    esp,0xc
c0028ea5:	83 ec 0c             	sub    esp,0xc
c0028ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028eac:	e8 cd ff ff ff       	call   c0028e7e <MMX::~MMX()>
c0028eb1:	83 c4 10             	add    esp,0x10
c0028eb4:	83 ec 08             	sub    esp,0x8
c0028eb7:	68 58 01 00 00       	push   0x158
c0028ebc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ec0:	e8 2f 9e fe ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0028ec5:	83 c4 10             	add    esp,0x10
c0028ec8:	83 c4 0c             	add    esp,0xc
c0028ecb:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028ecc <SSE::~SSE()>:
c0028ecc:	83 ec 0c             	sub    esp,0xc
c0028ecf:	ba 20 cf 02 c0       	mov    edx,0xc002cf20
c0028ed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ed8:	89 10                	mov    DWORD PTR [eax],edx
c0028eda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ede:	83 ec 0c             	sub    esp,0xc
c0028ee1:	50                   	push   eax
c0028ee2:	e8 4b b8 fe ff       	call   c0014732 <FPU::~FPU()>
c0028ee7:	83 c4 10             	add    esp,0x10
c0028eea:	90                   	nop
c0028eeb:	83 c4 0c             	add    esp,0xc
c0028eee:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028ef0 <SSE::~SSE()>:
c0028ef0:	83 ec 0c             	sub    esp,0xc
c0028ef3:	83 ec 0c             	sub    esp,0xc
c0028ef6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028efa:	e8 cd ff ff ff       	call   c0028ecc <SSE::~SSE()>
c0028eff:	83 c4 10             	add    esp,0x10
c0028f02:	83 ec 08             	sub    esp,0x8
c0028f05:	68 58 01 00 00       	push   0x158
c0028f0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f0e:	e8 e1 9d fe ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0028f13:	83 c4 10             	add    esp,0x10
c0028f16:	83 c4 0c             	add    esp,0xc
c0028f19:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0028f1a <x87::~x87()>:
c0028f1a:	83 ec 0c             	sub    esp,0xc
c0028f1d:	ba 60 cf 02 c0       	mov    edx,0xc002cf60
c0028f22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f26:	89 10                	mov    DWORD PTR [eax],edx
c0028f28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f2c:	83 ec 0c             	sub    esp,0xc
c0028f2f:	50                   	push   eax
c0028f30:	e8 fd b7 fe ff       	call   c0014732 <FPU::~FPU()>
c0028f35:	83 c4 10             	add    esp,0x10
c0028f38:	90                   	nop
c0028f39:	83 c4 0c             	add    esp,0xc
c0028f3c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0028f3e <x87::~x87()>:
c0028f3e:	83 ec 0c             	sub    esp,0xc
c0028f41:	83 ec 0c             	sub    esp,0xc
c0028f44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f48:	e8 cd ff ff ff       	call   c0028f1a <x87::~x87()>
c0028f4d:	83 c4 10             	add    esp,0x10
c0028f50:	83 ec 08             	sub    esp,0x8
c0028f53:	68 58 01 00 00       	push   0x158
c0028f58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f5c:	e8 93 9d fe ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0028f61:	83 c4 10             	add    esp,0x10
c0028f64:	83 c4 0c             	add    esp,0xc
c0028f67:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0028f68 <IOAPIC::~IOAPIC()>:
c0028f68:	83 ec 0c             	sub    esp,0xc
c0028f6b:	ba b8 d0 02 c0       	mov    edx,0xc002d0b8
c0028f70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f74:	89 10                	mov    DWORD PTR [eax],edx
c0028f76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f7a:	83 ec 0c             	sub    esp,0xc
c0028f7d:	50                   	push   eax
c0028f7e:	e8 49 b1 fe ff       	call   c00140cc <Device::~Device()>
c0028f83:	83 c4 10             	add    esp,0x10
c0028f86:	90                   	nop
c0028f87:	83 c4 0c             	add    esp,0xc
c0028f8a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0028f8c <IOAPIC::~IOAPIC()>:
c0028f8c:	83 ec 0c             	sub    esp,0xc
c0028f8f:	83 ec 0c             	sub    esp,0xc
c0028f92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f96:	e8 cd ff ff ff       	call   c0028f68 <IOAPIC::~IOAPIC()>
c0028f9b:	83 c4 10             	add    esp,0x10
c0028f9e:	83 ec 08             	sub    esp,0x8
c0028fa1:	68 68 01 00 00       	push   0x168
c0028fa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028faa:	e8 45 9d fe ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0028faf:	83 c4 10             	add    esp,0x10
c0028fb2:	83 c4 0c             	add    esp,0xc
c0028fb5:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0028fb6 <APIC::~APIC()>:
c0028fb6:	83 ec 0c             	sub    esp,0xc
c0028fb9:	ba 70 d0 02 c0       	mov    edx,0xc002d070
c0028fbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fc2:	89 10                	mov    DWORD PTR [eax],edx
c0028fc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fc8:	83 ec 0c             	sub    esp,0xc
c0028fcb:	50                   	push   eax
c0028fcc:	e8 2b bc fe ff       	call   c0014bfc <InterruptController::~InterruptController()>
c0028fd1:	83 c4 10             	add    esp,0x10
c0028fd4:	90                   	nop
c0028fd5:	83 c4 0c             	add    esp,0xc
c0028fd8:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0028fda <APIC::~APIC()>:
c0028fda:	83 ec 0c             	sub    esp,0xc
c0028fdd:	83 ec 0c             	sub    esp,0xc
c0028fe0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fe4:	e8 cd ff ff ff       	call   c0028fb6 <APIC::~APIC()>
c0028fe9:	83 c4 10             	add    esp,0x10
c0028fec:	83 ec 08             	sub    esp,0x8
c0028fef:	68 58 21 00 00       	push   0x2158
c0028ff4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ff8:	e8 f7 9c fe ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0028ffd:	83 c4 10             	add    esp,0x10
c0029000:	83 c4 0c             	add    esp,0xc
c0029003:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029004 <PIC::~PIC()>:
c0029004:	83 ec 0c             	sub    esp,0xc
c0029007:	ba 08 d1 02 c0       	mov    edx,0xc002d108
c002900c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029010:	89 10                	mov    DWORD PTR [eax],edx
c0029012:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029016:	83 ec 0c             	sub    esp,0xc
c0029019:	50                   	push   eax
c002901a:	e8 dd bb fe ff       	call   c0014bfc <InterruptController::~InterruptController()>
c002901f:	83 c4 10             	add    esp,0x10
c0029022:	90                   	nop
c0029023:	83 c4 0c             	add    esp,0xc
c0029026:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029028 <PIC::~PIC()>:
c0029028:	83 ec 0c             	sub    esp,0xc
c002902b:	83 ec 0c             	sub    esp,0xc
c002902e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029032:	e8 cd ff ff ff       	call   c0029004 <PIC::~PIC()>
c0029037:	83 c4 10             	add    esp,0x10
c002903a:	83 ec 08             	sub    esp,0x8
c002903d:	68 58 21 00 00       	push   0x2158
c0029042:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029046:	e8 a9 9c fe ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c002904b:	83 c4 10             	add    esp,0x10
c002904e:	83 c4 0c             	add    esp,0xc
c0029051:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029052 <APICTimer::~APICTimer()>:
c0029052:	83 ec 0c             	sub    esp,0xc
c0029055:	ba 5c d1 02 c0       	mov    edx,0xc002d15c
c002905a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002905e:	89 10                	mov    DWORD PTR [eax],edx
c0029060:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029064:	83 ec 0c             	sub    esp,0xc
c0029067:	50                   	push   eax
c0029068:	e8 11 db fe ff       	call   c0016b7e <Timer::~Timer()>
c002906d:	83 c4 10             	add    esp,0x10
c0029070:	90                   	nop
c0029071:	83 c4 0c             	add    esp,0xc
c0029074:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029076 <APICTimer::~APICTimer()>:
c0029076:	83 ec 0c             	sub    esp,0xc
c0029079:	83 ec 0c             	sub    esp,0xc
c002907c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029080:	e8 cd ff ff ff       	call   c0029052 <APICTimer::~APICTimer()>
c0029085:	83 c4 10             	add    esp,0x10
c0029088:	83 ec 08             	sub    esp,0x8
c002908b:	68 60 01 00 00       	push   0x160
c0029090:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029094:	e8 5b 9c fe ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0029099:	83 c4 10             	add    esp,0x10
c002909c:	83 c4 0c             	add    esp,0xc
c002909f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00290a0 <PIT::~PIT()>:
c00290a0:	83 ec 0c             	sub    esp,0xc
c00290a3:	ba ac d1 02 c0       	mov    edx,0xc002d1ac
c00290a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290ac:	89 10                	mov    DWORD PTR [eax],edx
c00290ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290b2:	83 ec 0c             	sub    esp,0xc
c00290b5:	50                   	push   eax
c00290b6:	e8 c3 da fe ff       	call   c0016b7e <Timer::~Timer()>
c00290bb:	83 c4 10             	add    esp,0x10
c00290be:	90                   	nop
c00290bf:	83 c4 0c             	add    esp,0xc
c00290c2:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00290c4 <PIT::~PIT()>:
c00290c4:	83 ec 0c             	sub    esp,0xc
c00290c7:	83 ec 0c             	sub    esp,0xc
c00290ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290ce:	e8 cd ff ff ff       	call   c00290a0 <PIT::~PIT()>
c00290d3:	83 c4 10             	add    esp,0x10
c00290d6:	83 ec 08             	sub    esp,0x8
c00290d9:	68 5c 01 00 00       	push   0x15c
c00290de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290e2:	e8 0d 9c fe ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c00290e7:	83 c4 10             	add    esp,0x10
c00290ea:	83 c4 0c             	add    esp,0xc
c00290ed:	c3                   	ret    
